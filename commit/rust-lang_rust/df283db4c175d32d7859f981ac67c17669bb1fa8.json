{"sha": "df283db4c175d32d7859f981ac67c17669bb1fa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjgzZGI0YzE3NWQzMmQ3ODU5Zjk4MWFjNjdjMTc2NjliYjFmYTg=", "commit": {"author": {"name": "1011X", "email": "1011XXXXX@gmail.com", "date": "2018-03-04T18:35:21Z"}, "committer": {"name": "1011X", "email": "1011XXXXX@gmail.com", "date": "2018-03-04T18:35:21Z"}, "message": "Merge branch 'master' of github.com:1011X/rust", "tree": {"sha": "f199018ad7b4a6d71a5d14e02a6e9d19119ca396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f199018ad7b4a6d71a5d14e02a6e9d19119ca396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df283db4c175d32d7859f981ac67c17669bb1fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df283db4c175d32d7859f981ac67c17669bb1fa8", "html_url": "https://github.com/rust-lang/rust/commit/df283db4c175d32d7859f981ac67c17669bb1fa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df283db4c175d32d7859f981ac67c17669bb1fa8/comments", "author": {"login": "1011X", "id": 1851619, "node_id": "MDQ6VXNlcjE4NTE2MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1851619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1011X", "html_url": "https://github.com/1011X", "followers_url": "https://api.github.com/users/1011X/followers", "following_url": "https://api.github.com/users/1011X/following{/other_user}", "gists_url": "https://api.github.com/users/1011X/gists{/gist_id}", "starred_url": "https://api.github.com/users/1011X/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1011X/subscriptions", "organizations_url": "https://api.github.com/users/1011X/orgs", "repos_url": "https://api.github.com/users/1011X/repos", "events_url": "https://api.github.com/users/1011X/events{/privacy}", "received_events_url": "https://api.github.com/users/1011X/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1011X", "id": 1851619, "node_id": "MDQ6VXNlcjE4NTE2MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1851619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1011X", "html_url": "https://github.com/1011X", "followers_url": "https://api.github.com/users/1011X/followers", "following_url": "https://api.github.com/users/1011X/following{/other_user}", "gists_url": "https://api.github.com/users/1011X/gists{/gist_id}", "starred_url": "https://api.github.com/users/1011X/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1011X/subscriptions", "organizations_url": "https://api.github.com/users/1011X/orgs", "repos_url": "https://api.github.com/users/1011X/repos", "events_url": "https://api.github.com/users/1011X/events{/privacy}", "received_events_url": "https://api.github.com/users/1011X/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "html_url": "https://github.com/rust-lang/rust/commit/4e4c1b5b325c4c474426a7e3c346c316fbc644f1"}, {"sha": "1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f", "html_url": "https://github.com/rust-lang/rust/commit/1e1bfc715f8dfe36a38d8fae36fcbe92e7463a3f"}], "stats": {"total": 1944, "additions": 849, "deletions": 1095}, "files": [{"sha": "55f586389b11766c587af558c66a716cdced1fb9", "filename": ".gitmodules", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -41,12 +41,15 @@\n [submodule \"src/dlmalloc\"]\n \tpath = src/dlmalloc\n \turl = https://github.com/alexcrichton/dlmalloc-rs.git\n-[submodule \"src/binaryen\"]\n-\tpath = src/binaryen\n-\turl = https://github.com/alexcrichton/binaryen.git\n [submodule \"src/doc/rust-by-example\"]\n \tpath = src/doc/rust-by-example\n \turl = https://github.com/rust-lang/rust-by-example\n [submodule \"src/llvm-emscripten\"]\n \tpath = src/llvm-emscripten\n \turl = https://github.com/rust-lang/llvm\n+[submodule \"src/stdsimd\"]\n+\tpath = src/stdsimd\n+\turl = https://github.com/rust-lang-nursery/stdsimd\n+[submodule \"src/tools/lld\"]\n+\tpath = src/tools/lld\n+\turl = https://github.com/rust-lang/lld.git"}, {"sha": "4738f91665dbebe8b2d3d6d9ac6a6f92663c0170", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -81,7 +81,7 @@ matrix:\n     # OSX 10.7 and `xcode7` is the latest Xcode able to compile LLVM for 10.7.\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-extended --enable-profiler --enable-emscripten\"\n+        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-full-tools --enable-profiler\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n@@ -95,7 +95,7 @@ matrix:\n \n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers --enable-profiler --enable-emscripten\"\n+        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1"}, {"sha": "19ef96fae015c9f851c1c2eed143656bf6d57cdc", "filename": "README.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -129,9 +129,6 @@ CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\vcvars64.\n python x.py build\n ```\n \n-If you are seeing build failure when compiling `rustc_binaryen`, make sure the path\n-length of the rust folder is not longer than 22 characters.\n-\n #### Specifying an ABI\n [specifying-an-abi]: #specifying-an-abi\n "}, {"sha": "0735ead8923cc1e8a4183c1049f81d37161f25eb", "filename": "appveyor.yml", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -67,29 +67,27 @@ environment:\n   # 32/64 bit MSVC and GNU deployment\n   - RUST_CONFIGURE_ARGS: >\n       --build=x86_64-pc-windows-msvc\n-      --enable-extended\n+      --enable-full-tools\n       --enable-profiler\n-      --enable-emscripten\n     SCRIPT: python x.py dist\n     DEPLOY: 1\n   - RUST_CONFIGURE_ARGS: >\n       --build=i686-pc-windows-msvc\n       --target=i586-pc-windows-msvc\n-      --enable-extended\n+      --enable-full-tools\n       --enable-profiler\n-      --enable-emscripten\n     SCRIPT: python x.py dist\n     DEPLOY: 1\n   - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended --enable-emscripten\n+    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools\n     SCRIPT: python x.py dist\n     MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n   - MSYS_BITS: 64\n     SCRIPT: python x.py dist\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended --enable-emscripten\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools\n     MINGW_URL: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror\n     MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n     MINGW_DIR: mingw64"}, {"sha": "b47f9163c0dacf7a08a9f93cc46f833e1db078cf", "filename": "config.toml.example", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -321,11 +321,18 @@\n # bootstrap)\n #codegen-backends = [\"llvm\"]\n \n+# This is the name of the directory in which codegen backends will get installed\n+#codegen-backends-dir = \"codegen-backends\"\n+\n # Flag indicating whether `libstd` calls an imported function to handle basic IO\n # when targeting WebAssembly. Enable this to debug tests for the `wasm32-unknown-unknown`\n # target, as without this option the test output will not be captured.\n #wasm-syscall = false\n \n+# Indicates whether LLD will be compiled and made available in the sysroot for\n+# rustc to execute.\n+#lld = false\n+\n # =============================================================================\n # Options for specific targets\n #"}, {"sha": "7620fe8ddb3c32886665ac9825c7be92d62ada51", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -1818,15 +1818,6 @@ dependencies = [\n  \"syntax 0.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc_binaryen\"\n-version = \"0.0.0\"\n-dependencies = [\n- \"cc 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rustc_borrowck\"\n version = \"0.0.0\"\n@@ -2107,7 +2098,6 @@ dependencies = [\n  \"rustc_allocator 0.0.0\",\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_back 0.0.0\",\n- \"rustc_binaryen 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\","}, {"sha": "17841e155edf858c8ea7802dd5f5ecbef54b989f", "filename": "src/binaryen", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbinaryen?ref=4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "patch": "@@ -1 +0,0 @@\n-Subproject commit 17841e155edf858c8ea7802dd5f5ecbef54b989f"}, {"sha": "6c3c48aba72f13894745493d47dcf07140b5b249", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -224,7 +224,7 @@ fn main() {\n                 // flesh out rpath support more fully in the future.\n                 cmd.arg(\"-Z\").arg(\"osx-rpath-install-name\");\n                 Some(\"-Wl,-rpath,@loader_path/../lib\")\n-            } else if !target.contains(\"windows\") {\n+            } else if !target.contains(\"windows\") && !target.contains(\"wasm32\") {\n                 Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n             } else {\n                 None"}, {"sha": "d8f7cd7ed9227377fefbfe93a2c9bc16de1f19a5", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -314,7 +314,6 @@ def __init__(self):\n         self.build_dir = os.path.join(os.getcwd(), \"build\")\n         self.clean = False\n         self.config_toml = ''\n-        self.printed = False\n         self.rust_root = os.path.abspath(os.path.join(__file__, '../../..'))\n         self.use_locked_deps = ''\n         self.use_vendored_sources = ''\n@@ -336,7 +335,6 @@ def download_stage0(self):\n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or\n                  self.program_out_of_date(self.rustc_stamp())):\n-            self.print_what_bootstrap_means()\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n             filename = \"rust-std-{}-{}.tar.gz\".format(\n@@ -351,10 +349,17 @@ def download_stage0(self):\n             with open(self.rustc_stamp(), 'w') as rust_stamp:\n                 rust_stamp.write(self.date)\n \n+            # This is required so that we don't mix incompatible MinGW\n+            # libraries/binaries that are included in rust-std with\n+            # the system MinGW ones.\n+            if \"pc-windows-gnu\" in self.build:\n+                filename = \"rust-mingw-{}-{}.tar.gz\".format(\n+                    rustc_channel, self.build)\n+                self._download_stage0_helper(filename, \"rust-mingw\")\n+\n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or\n                  self.program_out_of_date(self.cargo_stamp())):\n-            self.print_what_bootstrap_means()\n             filename = \"cargo-{}-{}.tar.gz\".format(cargo_channel, self.build)\n             self._download_stage0_helper(filename, \"cargo\")\n             self.fix_executable(\"{}/bin/cargo\".format(self.bin_root()))\n@@ -555,23 +560,6 @@ def exe_suffix():\n             return '.exe'\n         return ''\n \n-    def print_what_bootstrap_means(self):\n-        \"\"\"Prints more information about the build system\"\"\"\n-        if hasattr(self, 'printed'):\n-            return\n-        self.printed = True\n-        if os.path.exists(self.bootstrap_binary()):\n-            return\n-        if '--help' not in sys.argv or len(sys.argv) == 1:\n-            return\n-\n-        print('info: the build system for Rust is written in Rust, so this')\n-        print('      script is now going to download a stage0 rust compiler')\n-        print('      and then compile the build system itself')\n-        print('')\n-        print('info: in the meantime you can read more about rustbuild at')\n-        print('      src/bootstrap/README.md before the download finishes')\n-\n     def bootstrap_binary(self):\n         \"\"\"Return the path of the boostrap binary\n \n@@ -585,7 +573,6 @@ def bootstrap_binary(self):\n \n     def build_bootstrap(self):\n         \"\"\"Build bootstrap\"\"\"\n-        self.print_what_bootstrap_means()\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)\n@@ -654,6 +641,10 @@ def update_submodules(self):\n                     continue\n                 if self.get_toml('jemalloc'):\n                     continue\n+            if module.endswith(\"lld\"):\n+                config = self.get_toml('lld')\n+                if config is None or config == 'false':\n+                    continue\n             filtered_submodules.append(module)\n         run([\"git\", \"submodule\", \"update\",\n              \"--init\", \"--recursive\"] + filtered_submodules,\n@@ -670,8 +661,16 @@ def set_dev_environment(self):\n         self._download_url = 'https://dev-static.rust-lang.org'\n \n \n-def bootstrap():\n+def bootstrap(help_triggered):\n     \"\"\"Configure, fetch, build and run the initial bootstrap\"\"\"\n+\n+    # If the user is asking for help, let them know that the whole download-and-build\n+    # process has to happen before anything is printed out.\n+    if help_triggered:\n+        print(\"info: Downloading and building bootstrap before processing --help\")\n+        print(\"      command. See src/bootstrap/README.md for help with common\")\n+        print(\"      commands.\")\n+\n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n     parser.add_argument('--build')\n@@ -708,7 +707,7 @@ def bootstrap():\n             print('      and so in order to preserve your $HOME this will now')\n             print('      use vendored sources by default. Note that if this')\n             print('      does not work you should run a normal build first')\n-            print('      before running a command like `sudo make install`')\n+            print('      before running a command like `sudo ./x.py install`')\n \n     if build.use_vendored_sources:\n         if not os.path.exists('.cargo'):\n@@ -734,7 +733,10 @@ def bootstrap():\n     if 'dev' in data:\n         build.set_dev_environment()\n \n-    build.update_submodules()\n+    # No help text depends on submodules. This check saves ~1 minute of git commands, even if\n+    # all the submodules are present and downloaded!\n+    if not help_triggered:\n+        build.update_submodules()\n \n     # Fetch/build the bootstrap\n     build.build = args.build or build.build_triple()\n@@ -760,7 +762,7 @@ def main():\n     help_triggered = (\n         '-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n     try:\n-        bootstrap()\n+        bootstrap(help_triggered)\n         if not help_triggered:\n             print(\"Build completed successfully in {}\".format(\n                 format_build_time(time() - start_time)))"}, {"sha": "22656e5a9da4c85e3666ce6109160770198f184b", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -316,7 +316,7 @@ impl<'a> Builder<'a> {\n                 tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n                 tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc, tool::Clippy,\n-                native::Llvm, tool::Rustfmt, tool::Miri),\n+                native::Llvm, tool::Rustfmt, tool::Miri, native::Lld),\n             Kind::Check => describe!(check::Std, check::Test, check::Rustc),\n             Kind::Test => describe!(test::Tidy, test::Bootstrap, test::Ui, test::RunPass,\n                 test::CompileFail, test::ParseFail, test::RunFail, test::RunPassValgrind,\n@@ -464,7 +464,7 @@ impl<'a> Builder<'a> {\n \n     pub fn sysroot_codegen_backends(&self, compiler: Compiler) -> PathBuf {\n         self.sysroot_libdir(compiler, compiler.host)\n-            .with_file_name(\"codegen-backends\")\n+            .with_file_name(self.build.config.rust_codegen_backends_dir.clone())\n     }\n \n     /// Returns the compiler's libdir where it stores the dynamic libraries that\n@@ -688,9 +688,25 @@ impl<'a> Builder<'a> {\n         //\n         // FIXME: the guard against msvc shouldn't need to be here\n         if !target.contains(\"msvc\") {\n-            let cc = self.cc(target);\n-            cargo.env(format!(\"CC_{}\", target), cc)\n-                 .env(\"CC\", cc);\n+            let ccache = self.config.ccache.as_ref();\n+            let ccacheify = |s: &Path| {\n+                let ccache = match ccache {\n+                    Some(ref s) => s,\n+                    None => return s.display().to_string(),\n+                };\n+                // FIXME: the cc-rs crate only recognizes the literal strings\n+                // `ccache` and `sccache` when doing caching compilations, so we\n+                // mirror that here. It should probably be fixed upstream to\n+                // accept a new env var or otherwise work with custom ccache\n+                // vars.\n+                match &ccache[..] {\n+                    \"ccache\" | \"sccache\" => format!(\"{} {}\", ccache, s.display()),\n+                    _ => s.display().to_string(),\n+                }\n+            };\n+            let cc = ccacheify(&self.cc(target));\n+            cargo.env(format!(\"CC_{}\", target), &cc)\n+                 .env(\"CC\", &cc);\n \n             let cflags = self.cflags(target).join(\" \");\n             cargo.env(format!(\"CFLAGS_{}\", target), cflags.clone())\n@@ -705,8 +721,9 @@ impl<'a> Builder<'a> {\n             }\n \n             if let Ok(cxx) = self.cxx(target) {\n-                cargo.env(format!(\"CXX_{}\", target), cxx)\n-                     .env(\"CXX\", cxx)\n+                let cxx = ccacheify(&cxx);\n+                cargo.env(format!(\"CXX_{}\", target), &cxx)\n+                     .env(\"CXX\", &cxx)\n                      .env(format!(\"CXXFLAGS_{}\", target), cflags.clone())\n                      .env(\"CXXFLAGS\", cflags);\n             }"}, {"sha": "9e1b1f7db2f991a7c9774cef39f16331d52cde07", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -79,6 +79,9 @@ pub fn find(build: &mut Build) {\n         let mut cfg = cc::Build::new();\n         cfg.cargo_metadata(false).opt_level(0).warnings(false).debug(false)\n            .target(&target).host(&build.build);\n+        if target.contains(\"msvc\") {\n+            cfg.static_crt(true);\n+        }\n \n         let config = build.config.target_config.get(&target);\n         if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {"}, {"sha": "695cf04a82c14ac7acc6a93c4b4173bcdd28e58c", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -514,7 +514,8 @@ fn rustc_cargo_env(build: &Build, cargo: &mut Command) {\n     cargo.env(\"CFG_RELEASE\", build.rust_release())\n          .env(\"CFG_RELEASE_CHANNEL\", &build.config.channel)\n          .env(\"CFG_VERSION\", build.rust_version())\n-         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or_default());\n+         .env(\"CFG_PREFIX\", build.config.prefix.clone().unwrap_or_default())\n+         .env(\"CFG_CODEGEN_BACKENDS_DIR\", &build.config.rust_codegen_backends_dir);\n \n     let libdir_relative = build.config.libdir_relative().unwrap_or(Path::new(\"lib\"));\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n@@ -746,6 +747,21 @@ fn copy_codegen_backends_to_sysroot(builder: &Builder,\n     }\n }\n \n+fn copy_lld_to_sysroot(builder: &Builder,\n+                       target_compiler: Compiler,\n+                       lld_install_root: &Path) {\n+    let target = target_compiler.host;\n+\n+    let dst = builder.sysroot_libdir(target_compiler, target)\n+        .parent()\n+        .unwrap()\n+        .join(\"bin\");\n+    t!(fs::create_dir_all(&dst));\n+\n+    let exe = exe(\"lld\", &target);\n+    copy(&lld_install_root.join(\"bin\").join(&exe), &dst.join(&exe));\n+}\n+\n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n pub fn libstd_stamp(build: &Build, compiler: Compiler, target: Interned<String>) -> PathBuf {\n@@ -895,6 +911,14 @@ impl Step for Assemble {\n             }\n         }\n \n+        let lld_install = if build.config.lld_enabled && target_compiler.stage > 0 {\n+            Some(builder.ensure(native::Lld {\n+                target: target_compiler.host,\n+            }))\n+        } else {\n+            None\n+        };\n+\n         let stage = target_compiler.stage;\n         let host = target_compiler.host;\n         println!(\"Assembling stage{} compiler ({})\", stage, host);\n@@ -914,6 +938,9 @@ impl Step for Assemble {\n         copy_codegen_backends_to_sysroot(builder,\n                                          build_compiler,\n                                          target_compiler);\n+        if let Some(lld_install) = lld_install {\n+            copy_lld_to_sysroot(builder, target_compiler, &lld_install);\n+        }\n \n         // Link the compiler binary itself into place\n         let out_dir = build.cargo_out(build_compiler, Mode::Librustc, host);"}, {"sha": "f15d4d358583984d9928158053843d2cc60df0c6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -81,6 +81,8 @@ pub struct Config {\n     pub llvm_experimental_targets: String,\n     pub llvm_link_jobs: Option<u32>,\n \n+    pub lld_enabled: bool,\n+\n     // rust codegen options\n     pub rust_optimize: bool,\n     pub rust_codegen_units: Option<u32>,\n@@ -96,6 +98,7 @@ pub struct Config {\n     pub rust_debuginfo_tests: bool,\n     pub rust_dist_src: bool,\n     pub rust_codegen_backends: Vec<Interned<String>>,\n+    pub rust_codegen_backends_dir: String,\n \n     pub build: Interned<String>,\n     pub hosts: Vec<Interned<String>>,\n@@ -289,7 +292,9 @@ struct Rust {\n     test_miri: Option<bool>,\n     save_toolstates: Option<String>,\n     codegen_backends: Option<Vec<String>>,\n+    codegen_backends_dir: Option<String>,\n     wasm_syscall: Option<bool>,\n+    lld: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -330,6 +335,7 @@ impl Config {\n         config.rust_dist_src = true;\n         config.test_miri = false;\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n+        config.rust_codegen_backends_dir = \"codegen-backends\".to_owned();\n \n         config.rustc_error_format = flags.rustc_error_format;\n         config.on_fail = flags.on_fail;\n@@ -477,6 +483,7 @@ impl Config {\n             set(&mut config.quiet_tests, rust.quiet_tests);\n             set(&mut config.test_miri, rust.test_miri);\n             set(&mut config.wasm_syscall, rust.wasm_syscall);\n+            set(&mut config.lld_enabled, rust.lld);\n             config.rustc_parallel_queries = rust.experimental_parallel_queries.unwrap_or(false);\n             config.rustc_default_linker = rust.default_linker.clone();\n             config.musl_root = rust.musl_root.clone().map(PathBuf::from);\n@@ -488,6 +495,8 @@ impl Config {\n                     .collect();\n             }\n \n+            set(&mut config.rust_codegen_backends_dir, rust.codegen_backends_dir.clone());\n+\n             match rust.codegen_units {\n                 Some(0) => config.rust_codegen_units = Some(num_cpus::get() as u32),\n                 Some(n) => config.rust_codegen_units = Some(n),"}, {"sha": "e9b4a233d0af51ad152afed64f40c281f936671d", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -66,6 +66,7 @@ def v(*args):\n o(\"cargo-openssl-static\", \"build.openssl-static\", \"static openssl in cargo\")\n o(\"profiler\", \"build.profiler\", \"build the profiler runtime\")\n o(\"emscripten\", None, \"compile the emscripten backend as well as LLVM\")\n+o(\"full-tools\", None, \"enable all tools\")\n \n # Optimization and debugging options. These may be overridden by the release\n # channel, etc.\n@@ -326,6 +327,10 @@ def set(key, value):\n         set('build.target', value.split(','))\n     elif option.name == 'emscripten':\n         set('rust.codegen-backends', ['llvm', 'emscripten'])\n+    elif option.name == 'full-tools':\n+        set('rust.codegen-backends', ['llvm', 'emscripten'])\n+        set('rust.lld', True)\n+        set('build.extended', True)\n     elif option.name == 'option-checking':\n         # this was handled above\n         pass"}, {"sha": "576e507824740af3df636ba1b0c1eced370ea8b7", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -28,7 +28,7 @@ use build_helper::output;\n \n use {Build, Compiler, Mode};\n use channel;\n-use util::{cp_r, libdir, is_dylib, cp_filtered, copy, replace_in_file};\n+use util::{cp_r, libdir, is_dylib, cp_filtered, copy, replace_in_file, exe};\n use builder::{Builder, RunConfig, ShouldRun, Step};\n use compile;\n use native;\n@@ -443,6 +443,22 @@ impl Step for Rustc {\n             t!(fs::create_dir_all(&backends_dst));\n             cp_r(&backends_src, &backends_dst);\n \n+            // Copy over lld if it's there\n+            if builder.config.lld_enabled {\n+                let exe = exe(\"lld\", &compiler.host);\n+                let src = builder.sysroot_libdir(compiler, host)\n+                    .parent()\n+                    .unwrap()\n+                    .join(\"bin\")\n+                    .join(&exe);\n+                let dst = image.join(\"lib/rustlib\")\n+                    .join(&*host)\n+                    .join(\"bin\")\n+                    .join(&exe);\n+                t!(fs::create_dir_all(&dst.parent().unwrap()));\n+                copy(&src, &dst);\n+            }\n+\n             // Man pages\n             t!(fs::create_dir_all(image.join(\"share/man/man1\")));\n             let man_src = build.src.join(\"src/doc/man\");\n@@ -590,7 +606,10 @@ impl Step for Std {\n         let mut src = builder.sysroot_libdir(compiler, target).to_path_buf();\n         src.pop(); // Remove the trailing /lib folder from the sysroot_libdir\n         cp_filtered(&src, &dst, &|path| {\n-            path.file_name().and_then(|s| s.to_str()) != Some(\"codegen-backends\")\n+            let name = path.file_name().and_then(|s| s.to_str());\n+            name != Some(build.config.rust_codegen_backends_dir.as_str()) &&\n+                name != Some(\"bin\")\n+\n         });\n \n         let mut cmd = rust_installer(builder);"}, {"sha": "a791dd13f0f4b1e8b21e2c059a13768e83149544", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -312,6 +312,7 @@ fn invoke_rustdoc(builder: &Builder, compiler: Compiler, target: Interned<String\n     cmd.arg(\"--html-after-content\").arg(&footer)\n         .arg(\"--html-before-content\").arg(&version_info)\n         .arg(\"--html-in-header\").arg(&favicon)\n+        .arg(\"--markdown-no-toc\")\n         .arg(\"--markdown-playground-url\")\n         .arg(\"https://play.rust-lang.org/\")\n         .arg(\"-o\").arg(&out)"}, {"sha": "f3d9246c6fc6c192e4299137c31d209705602909", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -501,6 +501,10 @@ impl Build {\n         self.out.join(&*target).join(\"llvm-emscripten\")\n     }\n \n+    fn lld_out(&self, target: Interned<String>) -> PathBuf {\n+        self.out.join(&*target).join(\"lld\")\n+    }\n+\n     /// Output directory for all documentation for a target\n     fn doc_out(&self, target: Interned<String>) -> PathBuf {\n         self.out.join(&*target).join(\"doc\")\n@@ -685,7 +689,9 @@ impl Build {\n                                                        .and_then(|c| c.linker.as_ref()) {\n             Some(linker)\n         } else if target != self.config.build &&\n-                  !target.contains(\"msvc\") && !target.contains(\"emscripten\") {\n+                  !target.contains(\"msvc\") &&\n+                  !target.contains(\"emscripten\") &&\n+                  !target.contains(\"wasm32\") {\n             Some(self.cc(target))\n         } else {\n             None"}, {"sha": "7888f0b938d9fdaffa6809a53ea776d2119fe4cb", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 132, "deletions": 69, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -81,11 +81,11 @@ impl Step for Llvm {\n \n         let (out_dir, llvm_config_ret_dir) = if emscripten {\n             let dir = build.emscripten_llvm_out(target);\n-            let config_dir = dir.join(\"bin\");\n+            let config_dir = dir.join(\"build/bin\");\n             (dir, config_dir)\n         } else {\n             (build.llvm_out(target),\n-                build.llvm_out(build.config.build).join(\"bin\"))\n+                build.llvm_out(build.config.build).join(\"build/bin\"))\n         };\n         let done_stamp = out_dir.join(\"llvm-finished-building\");\n         let build_llvm_config = llvm_config_ret_dir\n@@ -110,9 +110,6 @@ impl Step for Llvm {\n         // http://llvm.org/docs/CMake.html\n         let root = if self.emscripten { \"src/llvm-emscripten\" } else { \"src/llvm\" };\n         let mut cfg = cmake::Config::new(build.src.join(root));\n-        if build.config.ninja {\n-            cfg.generator(\"Ninja\");\n-        }\n \n         let profile = match (build.config.llvm_optimize, build.config.llvm_release_debuginfo) {\n             (false, _) => \"Debug\",\n@@ -139,9 +136,7 @@ impl Step for Llvm {\n \n         let assertions = if build.config.llvm_assertions {\"ON\"} else {\"OFF\"};\n \n-        cfg.target(&target)\n-           .host(&build.build)\n-           .out_dir(&out_dir)\n+        cfg.out_dir(&out_dir)\n            .profile(profile)\n            .define(\"LLVM_ENABLE_ASSERTIONS\", assertions)\n            .define(\"LLVM_TARGETS_TO_BUILD\", llvm_targets)\n@@ -213,67 +208,7 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_NATIVE_BUILD\", build.llvm_out(build.build).join(\"build\"));\n         }\n \n-        let sanitize_cc = |cc: &Path| {\n-            if target.contains(\"msvc\") {\n-                OsString::from(cc.to_str().unwrap().replace(\"\\\\\", \"/\"))\n-            } else {\n-                cc.as_os_str().to_owned()\n-            }\n-        };\n-\n-        let configure_compilers = |cfg: &mut cmake::Config| {\n-            // MSVC with CMake uses msbuild by default which doesn't respect these\n-            // vars that we'd otherwise configure. In that case we just skip this\n-            // entirely.\n-            if target.contains(\"msvc\") && !build.config.ninja {\n-                return\n-            }\n-\n-            let cc = build.cc(target);\n-            let cxx = build.cxx(target).unwrap();\n-\n-            // Handle msvc + ninja + ccache specially (this is what the bots use)\n-            if target.contains(\"msvc\") &&\n-               build.config.ninja &&\n-               build.config.ccache.is_some() {\n-                let mut cc = env::current_exe().expect(\"failed to get cwd\");\n-                cc.set_file_name(\"sccache-plus-cl.exe\");\n-\n-               cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(&cc))\n-                  .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(&cc));\n-               cfg.env(\"SCCACHE_PATH\",\n-                       build.config.ccache.as_ref().unwrap())\n-                  .env(\"SCCACHE_TARGET\", target);\n-\n-            // If ccache is configured we inform the build a little differently hwo\n-            // to invoke ccache while also invoking our compilers.\n-            } else if let Some(ref ccache) = build.config.ccache {\n-               cfg.define(\"CMAKE_C_COMPILER\", ccache)\n-                  .define(\"CMAKE_C_COMPILER_ARG1\", sanitize_cc(cc))\n-                  .define(\"CMAKE_CXX_COMPILER\", ccache)\n-                  .define(\"CMAKE_CXX_COMPILER_ARG1\", sanitize_cc(cxx));\n-            } else {\n-               cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n-                  .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx));\n-            }\n-\n-            cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n-            cfg.define(\"CMAKE_C_FLAGS\", build.cflags(target).join(\" \"));\n-            cfg.define(\"CMAKE_CXX_FLAGS\", build.cflags(target).join(\" \"));\n-            if let Some(ar) = build.ar(target) {\n-                if ar.is_absolute() {\n-                    // LLVM build breaks if `CMAKE_AR` is a relative path, for some reason it\n-                    // tries to resolve this path in the LLVM build directory.\n-                    cfg.define(\"CMAKE_AR\", sanitize_cc(ar));\n-                }\n-            }\n-        };\n-\n-        configure_compilers(&mut cfg);\n-\n-        if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n-            cfg.env(\"RUST_LOG\", \"sccache=warn\");\n-        }\n+        configure_cmake(build, target, &mut cfg, false);\n \n         // FIXME: we don't actually need to build all LLVM tools and all LLVM\n         //        libraries here, e.g. we just want a few components and a few\n@@ -304,6 +239,134 @@ fn check_llvm_version(build: &Build, llvm_config: &Path) {\n     panic!(\"\\n\\nbad LLVM version: {}, need >=3.9\\n\\n\", version)\n }\n \n+fn configure_cmake(build: &Build,\n+                   target: Interned<String>,\n+                   cfg: &mut cmake::Config,\n+                   building_dist_binaries: bool) {\n+    if build.config.ninja {\n+        cfg.generator(\"Ninja\");\n+    }\n+    cfg.target(&target)\n+       .host(&build.config.build);\n+\n+    let sanitize_cc = |cc: &Path| {\n+        if target.contains(\"msvc\") {\n+            OsString::from(cc.to_str().unwrap().replace(\"\\\\\", \"/\"))\n+        } else {\n+            cc.as_os_str().to_owned()\n+        }\n+    };\n+\n+    // MSVC with CMake uses msbuild by default which doesn't respect these\n+    // vars that we'd otherwise configure. In that case we just skip this\n+    // entirely.\n+    if target.contains(\"msvc\") && !build.config.ninja {\n+        return\n+    }\n+\n+    let cc = build.cc(target);\n+    let cxx = build.cxx(target).unwrap();\n+\n+    // Handle msvc + ninja + ccache specially (this is what the bots use)\n+    if target.contains(\"msvc\") &&\n+       build.config.ninja &&\n+       build.config.ccache.is_some() {\n+        let mut cc = env::current_exe().expect(\"failed to get cwd\");\n+        cc.set_file_name(\"sccache-plus-cl.exe\");\n+\n+       cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(&cc))\n+          .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(&cc));\n+       cfg.env(\"SCCACHE_PATH\",\n+               build.config.ccache.as_ref().unwrap())\n+          .env(\"SCCACHE_TARGET\", target);\n+\n+    // If ccache is configured we inform the build a little differently hwo\n+    // to invoke ccache while also invoking our compilers.\n+    } else if let Some(ref ccache) = build.config.ccache {\n+       cfg.define(\"CMAKE_C_COMPILER\", ccache)\n+          .define(\"CMAKE_C_COMPILER_ARG1\", sanitize_cc(cc))\n+          .define(\"CMAKE_CXX_COMPILER\", ccache)\n+          .define(\"CMAKE_CXX_COMPILER_ARG1\", sanitize_cc(cxx));\n+    } else {\n+       cfg.define(\"CMAKE_C_COMPILER\", sanitize_cc(cc))\n+          .define(\"CMAKE_CXX_COMPILER\", sanitize_cc(cxx));\n+    }\n+\n+    cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n+    cfg.define(\"CMAKE_C_FLAGS\", build.cflags(target).join(\" \"));\n+    let mut cxxflags = build.cflags(target).join(\" \");\n+    if building_dist_binaries {\n+        if build.config.llvm_static_stdcpp && !target.contains(\"windows\") {\n+            cxxflags.push_str(\" -static-libstdc++\");\n+        }\n+    }\n+    cfg.define(\"CMAKE_CXX_FLAGS\", cxxflags);\n+    if let Some(ar) = build.ar(target) {\n+        if ar.is_absolute() {\n+            // LLVM build breaks if `CMAKE_AR` is a relative path, for some reason it\n+            // tries to resolve this path in the LLVM build directory.\n+            cfg.define(\"CMAKE_AR\", sanitize_cc(ar));\n+        }\n+    }\n+\n+    if env::var_os(\"SCCACHE_ERROR_LOG\").is_some() {\n+        cfg.env(\"RUST_LOG\", \"sccache=warn\");\n+    }\n+}\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Lld {\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for Lld {\n+    type Output = PathBuf;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/lld\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Lld { target: run.target });\n+    }\n+\n+    /// Compile LLVM for `target`.\n+    fn run(self, builder: &Builder) -> PathBuf {\n+        let target = self.target;\n+        let build = builder.build;\n+\n+        let llvm_config = builder.ensure(Llvm {\n+            target: self.target,\n+            emscripten: false,\n+        });\n+\n+        let out_dir = build.lld_out(target);\n+        let done_stamp = out_dir.join(\"lld-finished-building\");\n+        if done_stamp.exists() {\n+            return out_dir\n+        }\n+\n+        let _folder = build.fold_output(|| \"lld\");\n+        println!(\"Building LLD for {}\", target);\n+        let _time = util::timeit();\n+        t!(fs::create_dir_all(&out_dir));\n+\n+        let mut cfg = cmake::Config::new(build.src.join(\"src/tools/lld\"));\n+        configure_cmake(build, target, &mut cfg, true);\n+\n+        cfg.out_dir(&out_dir)\n+           .profile(\"Release\")\n+           .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+           .define(\"LLVM_INCLUDE_TESTS\", \"OFF\");\n+\n+        cfg.build();\n+\n+        t!(File::create(&done_stamp));\n+        out_dir\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct TestHelpers {\n     pub target: Interned<String>,"}, {"sha": "c0998c1e42c9773e7ffce7df0aef20ee3adc5a6f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -914,7 +914,7 @@ impl Step for Compiletest {\n         }\n \n         if build.config.llvm_enabled {\n-            let llvm_config = build.llvm_config(target);\n+            let llvm_config = build.llvm_config(build.config.build);\n             let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n             cmd.arg(\"--llvm-version\").arg(llvm_version);\n             if !build.is_rust_llvm(target) {"}, {"sha": "e10ccd56a4a54613978def21f294de6d9fb86fdd", "filename": "src/ci/docker/arm-android/Dockerfile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Farm-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farm-android%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -31,9 +31,7 @@ ENV PATH=$PATH:/android/sdk/platform-tools\n \n ENV TARGETS=arm-linux-androideabi\n \n-ENV RUST_CONFIGURE_ARGS \\\n-      --target=$TARGETS \\\n-      --arm-linux-androideabi-ndk=/android/ndk/arm-14\n+ENV RUST_CONFIGURE_ARGS --arm-linux-androideabi-ndk=/android/ndk/arm-14\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n "}, {"sha": "2b7624d53ee05d04f706a105979678717bd59a55", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -76,9 +76,7 @@ RUN curl -O http://ftp.nl.debian.org/debian/dists/jessie/main/installer-armhf/cu\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENV RUST_CONFIGURE_ARGS \\\n-      --target=arm-unknown-linux-gnueabihf \\\n-      --qemu-armhf-rootfs=/tmp/rootfs\n+ENV RUST_CONFIGURE_ARGS --qemu-armhf-rootfs=/tmp/rootfs\n ENV SCRIPT python2.7 ../x.py test --target arm-unknown-linux-gnueabihf\n \n ENV NO_CHANGE_USER=1"}, {"sha": "2a0901691a55ac6ed2ad7d734c9b3877949cda27", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -29,6 +29,6 @@ ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=asmjs-unknown-emscripten\n \n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS --enable-emscripten\n+ENV RUST_CONFIGURE_ARGS --enable-emscripten\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "b2a3ba3ec2600ebc2d37296b328d09b675d237fd", "filename": "src/ci/docker/disabled/aarch64-gnu/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Faarch64-gnu%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -74,7 +74,6 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --target=aarch64-unknown-linux-gnu \\\n       --qemu-aarch64-rootfs=/tmp/rootfs\n ENV SCRIPT python2.7 ../x.py test --target aarch64-unknown-linux-gnu\n ENV NO_CHANGE_USER=1"}, {"sha": "a7903b6f42501337f8fe500dc9d41db069e94c9a", "filename": "src/ci/docker/disabled/dist-aarch64-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-aarch64-android%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -14,8 +14,6 @@ ENV DEP_Z_ROOT=/android/ndk/arm64-21/sysroot/usr/\n ENV HOSTS=aarch64-linux-android\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --host=$HOSTS \\\n-      --target=$HOSTS \\\n       --aarch64-linux-android-ndk=/android/ndk/arm64-21 \\\n       --disable-rpath \\\n       --enable-extended \\"}, {"sha": "c02a5e5a09542c3fd163ab7c7deed3f69fac42d5", "filename": "src/ci/docker/disabled/dist-armv7-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-armv7-android%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -20,8 +20,6 @@ ENV DEP_Z_ROOT=/android/ndk/arm-14/sysroot/usr/\n ENV HOSTS=armv7-linux-androideabi\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --host=$HOSTS \\\n-      --target=$HOSTS \\\n       --armv7-linux-androideabi-ndk=/android/ndk/arm \\\n       --disable-rpath \\\n       --enable-extended \\"}, {"sha": "04e83a431c45526e7587cb007164a55f2e8eea7d", "filename": "src/ci/docker/disabled/dist-i686-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-i686-android%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -20,8 +20,6 @@ ENV DEP_Z_ROOT=/android/ndk/x86-14/sysroot/usr/\n ENV HOSTS=i686-linux-android\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --host=$HOSTS \\\n-      --target=$HOSTS \\\n       --i686-linux-android-ndk=/android/ndk/x86 \\\n       --disable-rpath \\\n       --enable-extended \\"}, {"sha": "937301864cd059bfeaae5899f20d0d3305b5da29", "filename": "src/ci/docker/disabled/dist-x86_64-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-android%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -14,8 +14,6 @@ ENV DEP_Z_ROOT=/android/ndk/x86_64-21/sysroot/usr/\n ENV HOSTS=x86_64-linux-android\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --host=$HOSTS \\\n-      --target=$HOSTS \\\n       --x86_64-linux-android-ndk=/android/ndk/x86_64-21 \\\n       --disable-rpath \\\n       --enable-extended \\"}, {"sha": "dbff9e32e1311d9ceff3e2314009dae43df16132", "filename": "src/ci/docker/disabled/dist-x86_64-dragonfly/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-dragonfly%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-dragonfly%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-dragonfly%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -32,5 +32,5 @@ ENV \\\n \n ENV HOSTS=x86_64-unknown-dragonfly\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "440afd7c97f5e3a162e8e49fb145df681115caef", "filename": "src/ci/docker/disabled/dist-x86_64-haiku/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -42,8 +42,8 @@ RUN sh /scripts/sccache.sh\n ENV HOST=x86_64-unknown-haiku\n ENV TARGET=target.$HOST\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOST --target=$HOST --disable-jemalloc \\\n+ENV RUST_CONFIGURE_ARGS --disable-jemalloc \\\n   --set=$TARGET.cc=x86_64-unknown-haiku-gcc \\\n   --set=$TARGET.cxx=x86_64-unknown-haiku-g++ \\\n   --set=$TARGET.llvm-config=/bin/llvm-config-haiku\n-ENV SCRIPT python2.7 ../x.py dist\n+ENV SCRIPT python2.7 ../x.py dist --host=$HOST --target=$HOST"}, {"sha": "f4c25f791bc3916bdf60be34aa927ae6b8ea88f5", "filename": "src/ci/docker/disabled/dist-x86_64-redox/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-redox%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-redox%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fdist-x86_64-redox%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -18,5 +18,5 @@ ENV \\\n     CC_x86_64_unknown_redox=x86_64-unknown-redox-gcc \\\n     CXX_x86_64_unknown_redox=x86_64-unknown-redox-g++\n \n-ENV RUST_CONFIGURE_ARGS --target=x86_64-unknown-redox --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --target x86_64-unknown-redox"}, {"sha": "420d47b314c0f63da8e006eb78688c6051eec6c5", "filename": "src/ci/docker/disabled/wasm32-exp/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -30,6 +30,6 @@ ENV EM_CONFIG=/root/.emscripten\n \n ENV TARGETS=wasm32-experimental-emscripten\n \n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS --experimental-targets=WebAssembly\n+ENV RUST_CONFIGURE_ARGS --experimental-targets=WebAssembly\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "6ac90d17450a37fbac1bcd610a0b86eaa72b3f8e", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -29,7 +29,4 @@ ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.37.13_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=wasm32-unknown-emscripten\n-\n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n-\n ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "dbc319312aa9fcdd6661b78f4dd90d4e71492fc6", "filename": "src/ci/docker/dist-aarch64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-aarch64-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -32,5 +32,5 @@ ENV CC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnueabi-gcc \\\n \n ENV HOSTS=aarch64-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "aa5da136758a0d6c41877f9b58fb246bd0b64225", "filename": "src/ci/docker/dist-android/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-android%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -21,7 +21,6 @@ ENV TARGETS=$TARGETS,aarch64-linux-android\n ENV TARGETS=$TARGETS,x86_64-linux-android\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --target=$TARGETS \\\n       --enable-extended \\\n       --arm-linux-androideabi-ndk=/android/ndk/arm-14 \\\n       --armv7-linux-androideabi-ndk=/android/ndk/arm-14 \\"}, {"sha": "89f7f85cb3b17d15da8c0c02c7c2adc597781e86", "filename": "src/ci/docker/dist-arm-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-arm-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -32,5 +32,5 @@ ENV CC_arm_unknown_linux_gnueabi=arm-unknown-linux-gnueabi-gcc \\\n \n ENV HOSTS=arm-unknown-linux-gnueabi\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "e0c1b9a9e858941dcbc0bc853c43ee89726648d3", "filename": "src/ci/docker/dist-armhf-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armhf-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -32,5 +32,5 @@ ENV CC_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-gcc \\\n \n ENV HOSTS=arm-unknown-linux-gnueabihf\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "e7d4f464ffcd2252ce65269818c94f8eda46a662", "filename": "src/ci/docker/dist-armv7-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-armv7-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -32,5 +32,5 @@ ENV CC_armv7_unknown_linux_gnueabihf=armv7-unknown-linux-gnueabihf-gcc \\\n \n ENV HOSTS=armv7-unknown-linux-gnueabihf\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "7bcc649f4aa5c8af72b2d828c3d237a6de4fd9de", "filename": "src/ci/docker/dist-i586-gnu-i586-i686-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -30,7 +30,6 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --target=i686-unknown-linux-musl,i586-unknown-linux-gnu \\\n       --musl-root-i586=/musl-i586 \\\n       --musl-root-i686=/musl-i686 \\\n       --enable-extended\n@@ -46,8 +45,7 @@ ENV CFLAGS_i586_unknown_linux_gnu=-Wa,-mrelax-relocations=no\n #       https://github.com/alexcrichton/cc-rs/pull/281\n ENV CFLAGS_i586_unknown_linux_musl=\"-Wa,-mrelax-relocations=no -Wl,-melf_i386\"\n \n-ENV TARGETS=i586-unknown-linux-gnu\n-ENV TARGETS=$TARGETS,i686-unknown-linux-musl\n+ENV TARGETS=i586-unknown-linux-gnu,i686-unknown-linux-musl\n \n ENV SCRIPT \\\n       python2.7 ../x.py test --target $TARGETS && \\"}, {"sha": "1f595ba7a290f8cddebf807831f93ae5358bb269", "filename": "src/ci/docker/dist-i686-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-freebsd%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -29,5 +29,5 @@ ENV \\\n \n ENV HOSTS=i686-unknown-freebsd\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "0ec57ee08868716098f19a4e6aa9bf0067123305", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -82,13 +82,10 @@ RUN sh /scripts/sccache.sh\n ENV HOSTS=i686-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --host=$HOSTS \\\n-      --enable-extended \\\n+      --enable-full-tools \\\n       --enable-sanitizers \\\n-      --enable-profiler \\\n-      --enable-emscripten \\\n-      --build=i686-unknown-linux-gnu\n-ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n+      --enable-profiler\n+ENV SCRIPT python2.7 ../x.py dist --build $HOSTS --host $HOSTS --target $HOSTS\n \n # This is the only builder which will create source tarballs\n ENV DIST_SRC 1"}, {"sha": "37ab5bdcce555001b181e05f776e278dbee55b82", "filename": "src/ci/docker/dist-mips-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -22,5 +22,5 @@ RUN sh /scripts/sccache.sh\n \n ENV HOSTS=mips-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "a5180780b225925431657420b2c9b9aaf68a3561", "filename": "src/ci/docker/dist-mips64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -21,5 +21,5 @@ RUN sh /scripts/sccache.sh\n \n ENV HOSTS=mips64-unknown-linux-gnuabi64\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "d38ed24f6255fb14c562ecc9b19c39042e6da950", "filename": "src/ci/docker/dist-mips64el-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mips64el-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -22,5 +22,5 @@ RUN sh /scripts/sccache.sh\n \n ENV HOSTS=mips64el-unknown-linux-gnuabi64\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "491c57ba6773703917485871034aaa55fdf9cbac", "filename": "src/ci/docker/dist-mipsel-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-mipsel-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -21,5 +21,5 @@ RUN sh /scripts/sccache.sh\n \n ENV HOSTS=mipsel-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "c503f2af9cdaa902548273122de9e46403c62579", "filename": "src/ci/docker/dist-powerpc-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -34,7 +34,7 @@ ENV \\\n \n ENV HOSTS=powerpc-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n \n # FIXME(#36150) this will fail the bootstrap. Probably means something bad is"}, {"sha": "4a3691777360ba47fdec854b7596b133daa619ef", "filename": "src/ci/docker/dist-powerpc64-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -35,5 +35,5 @@ ENV \\\n \n ENV HOSTS=powerpc64-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "bf6c8b4b7121173e31e393fb327e2c41fed56a22", "filename": "src/ci/docker/dist-powerpc64le-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc64le-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -32,5 +32,5 @@ ENV \\\n \n ENV HOSTS=powerpc64le-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "a2ebf590bab74548f8e5910101f9ea9adac228b6", "filename": "src/ci/docker/dist-s390x-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-s390x-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -34,5 +34,5 @@ ENV \\\n \n ENV HOSTS=s390x-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "a23153645cde2f55075cce358dfbf8f8678cda22", "filename": "src/ci/docker/dist-various-1/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -89,7 +89,6 @@ ENV CC_mipsel_unknown_linux_musl=mipsel-openwrt-linux-gcc \\\n     CFLAGS_armv5te_unknown_linux_gnueabi=\"-march=armv5te -marm -mfloat-abi=soft\"\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --target=$TARGETS \\\n       --musl-root-arm=/musl-arm \\\n       --musl-root-armhf=/musl-armhf \\\n       --musl-root-armv7=/musl-armv7 \\"}, {"sha": "4505a60e46396540103c5ef1ef67a4c23ed11521", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -55,5 +55,5 @@ ENV TARGETS=$TARGETS,x86_64-sun-solaris\n ENV TARGETS=$TARGETS,x86_64-unknown-linux-gnux32\n ENV TARGETS=$TARGETS,x86_64-unknown-cloudabi\n \n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "dd595a192051f7a8444eb7f71af0f71b6c3e7206", "filename": "src/ci/docker/dist-x86_64-freebsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-freebsd%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -29,5 +29,5 @@ ENV \\\n \n ENV HOSTS=x86_64-unknown-freebsd\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "3b98b0aa926bd1250915725724ca5af9356a7b9d", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -82,11 +82,9 @@ RUN sh /scripts/sccache.sh\n ENV HOSTS=x86_64-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --host=$HOSTS \\\n-      --enable-extended \\\n+      --enable-full-tools \\\n       --enable-sanitizers \\\n-      --enable-profiler \\\n-      --enable-emscripten\n+      --enable-profiler\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n \n # This is the only builder which will create source tarballs"}, {"sha": "3a9ad178c6390b571c9c9159c8c3c0f44c4d28bc", "filename": "src/ci/docker/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-musl%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -30,7 +30,6 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --target=x86_64-unknown-linux-musl \\\n       --musl-root-x86_64=/musl-x86_64 \\\n       --enable-extended\n "}, {"sha": "06298a12fc70a9718a47eafbde4cf9c710981394", "filename": "src/ci/docker/dist-x86_64-netbsd/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -33,5 +33,5 @@ ENV \\\n \n ENV HOSTS=x86_64-unknown-netbsd\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --enable-extended\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "0972eb85191a94b7134f23df7f22a7fa064b38f4", "filename": "src/ci/docker/wasm32-unknown/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fwasm32-unknown%2FDockerfile?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -22,8 +22,8 @@ RUN sh /scripts/sccache.sh\n ENV TARGETS=wasm32-unknown-unknown\n \n ENV RUST_CONFIGURE_ARGS \\\n-  --target=$TARGETS \\\n-  --set build.nodejs=/node-v9.2.0-linux-x64/bin/node\n+  --set build.nodejs=/node-v9.2.0-linux-x64/bin/node \\\n+  --set rust.lld\n \n ENV SCRIPT python2.7 /checkout/x.py test --target $TARGETS \\\n   src/test/ui \\"}, {"sha": "3be1c255c164a61e54c1abdfbfd550523fc03c17", "filename": "src/ci/run.sh", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -67,6 +67,12 @@ else\n   fi\n fi\n \n+# We've had problems in the past of shell scripts leaking fds into the sccache\n+# server (#48192) which causes Cargo to erroneously think that a build script\n+# hasn't finished yet. Try to solve that problem by starting a very long-lived\n+# sccache server at the start of the build, but no need to worry if this fails.\n+SCCACHE_IDLE_TIMEOUT=10800 sccache --start-server || true\n+\n travis_fold start configure\n travis_time_start\n $SRC/configure $RUST_CONFIGURE_ARGS"}, {"sha": "98d6202a63fbf75468bcf71206a540329d8efa9b", "filename": "src/etc/wasm32-shim.js", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fetc%2Fwasm32-shim.js", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fetc%2Fwasm32-shim.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fwasm32-shim.js?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -107,6 +107,8 @@ imports.env = {\n   exp2f: function(x) { return Math.pow(2, x); },\n   ldexp: function(x, y) { return x * Math.pow(2, y); },\n   ldexpf: function(x, y) { return x * Math.pow(2, y); },\n+  log: Math.log,\n+  log2: Math.log2,\n   log10: Math.log10,\n   log10f: Math.log10,\n "}, {"sha": "feed7c8699a3ebf0cbb8a4822bf91fa2bb209697", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 11, "deletions": 127, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -1527,142 +1527,26 @@ impl<T: Hash> Hash for Vec<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> Index<usize> for Vec<T> {\n-    type Output = T;\n-\n-    #[inline]\n-    fn index(&self, index: usize) -> &T {\n-        // NB built-in indexing via `&[T]`\n-        &(**self)[index]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> IndexMut<usize> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: usize) -> &mut T {\n-        // NB built-in indexing via `&mut [T]`\n-        &mut (**self)[index]\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::Range<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::Range<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeTo<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeTo<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeFrom<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeFrom<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeFull> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, _index: ops::RangeFull) -> &[T] {\n-        self\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeInclusive<usize>> for Vec<T> {\n-    type Output = [T];\n-\n-    #[inline]\n-    fn index(&self, index: ops::RangeInclusive<usize>) -> &[T] {\n-        Index::index(&**self, index)\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::Index<ops::RangeToInclusive<usize>> for Vec<T> {\n-    type Output = [T];\n+impl<T, I> Index<I> for Vec<T>\n+where\n+    I: ::core::slice::SliceIndex<[T]>,\n+{\n+    type Output = I::Output;\n \n     #[inline]\n-    fn index(&self, index: ops::RangeToInclusive<usize>) -> &[T] {\n+    fn index(&self, index: I) -> &Self::Output {\n         Index::index(&**self, index)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::Range<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeTo<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeFrom<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeFull> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut [T] {\n-        self\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeInclusive<usize>> for Vec<T> {\n-    #[inline]\n-    fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut [T] {\n-        IndexMut::index_mut(&mut **self, index)\n-    }\n-}\n-\n-#[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n-#[rustc_on_unimplemented = \"vector indices are of type `usize` or ranges of `usize`\"]\n-impl<T> ops::IndexMut<ops::RangeToInclusive<usize>> for Vec<T> {\n+impl<T, I> IndexMut<I> for Vec<T>\n+where\n+    I: ::core::slice::SliceIndex<[T]>,\n+{\n     #[inline]\n-    fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut [T] {\n+    fn index_mut(&mut self, index: I) -> &mut Self::Output {\n         IndexMut::index_mut(&mut **self, index)\n     }\n }"}, {"sha": "1efd605112dc2fb46f2c3c599ebc159c595d9348", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -68,32 +68,39 @@\n #![feature(allow_internal_unstable)]\n #![feature(asm)]\n #![feature(associated_type_defaults)]\n+#![feature(attr_literals)]\n #![feature(cfg_target_feature)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n+#![feature(doc_spotlight)]\n #![feature(fundamental)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]\n #![feature(intrinsics)]\n+#![feature(iterator_flatten)]\n+#![feature(iterator_repeat_with)]\n #![feature(lang_items)]\n+#![feature(link_llvm_intrinsics)]\n #![feature(never_type)]\n #![feature(no_core)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n+#![feature(rustc_const_unstable)]\n+#![feature(simd_ffi)]\n #![feature(specialization)]\n #![feature(staged_api)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(target_feature)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n-#![feature(doc_spotlight)]\n-#![feature(rustc_const_unstable)]\n-#![feature(iterator_repeat_with)]\n-#![feature(iterator_flatten)]\n+\n+#![cfg_attr(stage0, allow(unused_attributes))]\n \n #[prelude_import]\n #[allow(unused)]\n@@ -179,3 +186,21 @@ mod char_private;\n mod iter_private;\n mod tuple;\n mod unit;\n+\n+// Pull in the the `coresimd` crate directly into libcore. This is where all the\n+// architecture-specific (and vendor-specific) intrinsics are defined. AKA\n+// things like SIMD and such. Note that the actual source for all this lies in a\n+// different repository, rust-lang-nursery/stdsimd. That's why the setup here is\n+// a bit wonky.\n+#[path = \"../stdsimd/coresimd/mod.rs\"]\n+#[allow(missing_docs, missing_debug_implementations, dead_code)]\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(not(stage0))] // allow changes to how stdsimd works in stage0\n+mod coresimd;\n+\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(not(stage0))]\n+pub use coresimd::simd;\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(not(stage0))]\n+pub use coresimd::arch;"}, {"sha": "9de56cca3394f5c99625357756687d9be8c25149", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -43,47 +43,63 @@ use std::str::FromStr;\n \n use serialize::json::{Json, ToJson};\n \n-macro_rules! linker_flavor {\n-    ($(($variant:ident, $string:expr),)+) => {\n-        #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n-                 RustcEncodable, RustcDecodable)]\n-        pub enum LinkerFlavor {\n-            $($variant,)+\n-        }\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n+         RustcEncodable, RustcDecodable)]\n+pub enum LinkerFlavor {\n+    Em,\n+    Gcc,\n+    Ld,\n+    Msvc,\n+    Lld(LldFlavor),\n+}\n+\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd, Hash,\n+         RustcEncodable, RustcDecodable)]\n+pub enum LldFlavor {\n+    Wasm,\n+    Ld64,\n+    Ld,\n+    Link,\n+}\n \n+impl ToJson for LinkerFlavor {\n+    fn to_json(&self) -> Json {\n+        self.desc().to_json()\n+    }\n+}\n+macro_rules! flavor_mappings {\n+    ($((($($flavor:tt)*), $string:expr),)*) => (\n         impl LinkerFlavor {\n             pub const fn one_of() -> &'static str {\n                 concat!(\"one of: \", $($string, \" \",)+)\n             }\n \n             pub fn from_str(s: &str) -> Option<Self> {\n                 Some(match s {\n-                    $($string => LinkerFlavor::$variant,)+\n+                    $($string => $($flavor)*,)+\n                     _ => return None,\n                 })\n             }\n \n             pub fn desc(&self) -> &str {\n                 match *self {\n-                    $(LinkerFlavor::$variant => $string,)+\n+                    $($($flavor)* => $string,)+\n                 }\n             }\n         }\n-\n-        impl ToJson for LinkerFlavor {\n-            fn to_json(&self) -> Json {\n-                self.desc().to_json()\n-            }\n-        }\n-    }\n+    )\n }\n \n-linker_flavor! {\n-    (Em, \"em\"),\n-    (Binaryen, \"binaryen\"),\n-    (Gcc, \"gcc\"),\n-    (Ld, \"ld\"),\n-    (Msvc, \"msvc\"),\n+\n+flavor_mappings! {\n+    ((LinkerFlavor::Em), \"em\"),\n+    ((LinkerFlavor::Gcc), \"gcc\"),\n+    ((LinkerFlavor::Ld), \"ld\"),\n+    ((LinkerFlavor::Msvc), \"msvc\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n+    ((LinkerFlavor::Lld(LldFlavor::Link)), \"lld-link\"),\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]"}, {"sha": "a5d0e5bf166dd8c507b5c3978ff7371c7d128de4", "filename": "src/librustc_back/target/aarch64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_cloudabi.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();\n     base.max_atomic_width = Some(128);\n     base.abi_blacklist = super::arm_base::abi_blacklist();\n-    base.linker = \"aarch64-unknown-cloudabi-cc\".to_string();\n+    base.linker = Some(\"aarch64-unknown-cloudabi-cc\".to_string());\n \n     Ok(Target {\n         llvm_target: \"aarch64-unknown-cloudabi\".to_string(),"}, {"sha": "fa66a35abbf353a37104d9c01223b6d09e6b8b8d", "filename": "src/librustc_back/target/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_cloudabi_eabihf.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     base.features = \"+v7,+vfp3,+neon\".to_string();\n     base.abi_blacklist = super::arm_base::abi_blacklist();\n-    base.linker = \"armv7-unknown-cloudabi-eabihf-cc\".to_string();\n+    base.linker = Some(\"armv7-unknown-cloudabi-eabihf-cc\".to_string());\n \n     Ok(Target {\n         llvm_target: \"armv7-unknown-cloudabi-eabihf\".to_string(),"}, {"sha": "88f2b59675186da00dc2a016675df3effadf314a", "filename": "src/librustc_back/target/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -12,13 +12,7 @@ use LinkerFlavor;\n use target::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::linux_musl_base::opts();\n-\n-    // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n-    // target.\n-    base.features = \"+v7,+vfp3,+neon\".to_string();\n-    base.cpu = \"cortex-a8\".to_string();\n-    base.max_atomic_width = Some(64);\n+    let base = super::linux_musl_base::opts();\n     Ok(Target {\n         // It's important we use \"gnueabihf\" and not \"musleabihf\" here. LLVM\n         // uses it to determine the calling convention and float ABI, and LLVM\n@@ -33,9 +27,15 @@ pub fn target() -> TargetResult {\n         target_env: \"musl\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n+\n+        // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n+        // target.\n         options: TargetOptions {\n+            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             .. base\n-        },\n+        }\n     })\n }"}, {"sha": "f114926740a5ec5cd7e37bffa1d06b893c8dabd3", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -10,7 +10,6 @@\n \n use LinkerFlavor;\n use super::{LinkArgs, Target, TargetOptions};\n-use super::emscripten_base::{cmd};\n \n pub fn target() -> Result<Target, String> {\n     let mut args = LinkArgs::new();\n@@ -19,8 +18,6 @@ pub fn target() -> Result<Target, String> {\n                      \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()]);\n \n     let opts = TargetOptions {\n-        linker: cmd(\"emcc\"),\n-\n         dynamic_linking: false,\n         executables: true,\n         exe_suffix: \".js\".to_string(),"}, {"sha": "bacada3f5ab02c6f666234a112340d1428b3710b", "filename": "src/librustc_back/target/emscripten_base.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_back%2Ftarget%2Femscripten_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_back%2Ftarget%2Femscripten_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Femscripten_base.rs?ref=4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn cmd(name: &str) -> String {\n-    if cfg!(windows) {\n-        format!(\"{}.bat\", name)\n-    } else {\n-        name.to_string()\n-    }\n-}"}, {"sha": "a1ccb632cab79eadffda4a628c61bba37f003e37", "filename": "src/librustc_back/target/haiku_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fhaiku_base.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -13,7 +13,6 @@ use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        linker: \"cc\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: false,"}, {"sha": "69c3b298caba0459e331fdc91016dc07636fd50a", "filename": "src/librustc_back/target/i686_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_cloudabi.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();\n     base.cpu = \"pentium4\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.linker = \"i686-unknown-cloudabi-cc\".to_string();\n+    base.linker = Some(\"i686-unknown-cloudabi-cc\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.stack_probes = true;\n "}, {"sha": "7cb7f8d613deed0076db8bc42362d897d3807a44", "filename": "src/librustc_back/target/l4re_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -73,7 +73,6 @@ pub fn opts() -> Result<TargetOptions, String> {\n         has_elf_tls: false,\n         exe_allocation_crate: None,\n         panic_strategy: PanicStrategy::Abort,\n-        linker: \"ld\".to_string(),\n         pre_link_args,\n         post_link_args,\n         target_family: Some(\"unix\".to_string()),"}, {"sha": "0a3e1826f3a1c90e0287efb7784aabc3d9c045eb", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -58,7 +58,6 @@ mod arm_base;\n mod bitrig_base;\n mod cloudabi_base;\n mod dragonfly_base;\n-mod emscripten_base;\n mod freebsd_base;\n mod haiku_base;\n mod linux_base;\n@@ -279,8 +278,8 @@ pub struct TargetOptions {\n     /// Whether the target is built-in or loaded from a custom target specification.\n     pub is_builtin: bool,\n \n-    /// Linker to invoke. Defaults to \"cc\".\n-    pub linker: String,\n+    /// Linker to invoke\n+    pub linker: Option<String>,\n \n     /// Linker arguments that are unconditionally passed *before* any\n     /// user-defined libraries.\n@@ -482,7 +481,7 @@ impl Default for TargetOptions {\n     fn default() -> TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n-            linker: option_env!(\"CFG_DEFAULT_LINKER\").unwrap_or(\"cc\").to_string(),\n+            linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             pre_link_args: LinkArgs::new(),\n             post_link_args: LinkArgs::new(),\n             asm_args: Vec::new(),\n@@ -732,7 +731,7 @@ impl Target {\n         }\n \n         key!(is_builtin, bool);\n-        key!(linker);\n+        key!(linker, optional);\n         key!(pre_link_args, link_args);\n         key!(pre_link_objects_exe, list);\n         key!(pre_link_objects_dll, list);"}, {"sha": "d0f512ae47cd9d02392ad4358bbacdd9f1009fbc", "filename": "src/librustc_back/target/msp430_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmsp430_none_elf.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -32,7 +32,7 @@ pub fn target() -> TargetResult {\n             // to gcc to get object files. For this reason we have a hard\n             // dependency on this specific gcc.\n             asm_args: vec![\"-mcpu=msp430\".to_string()],\n-            linker: \"msp430-elf-gcc\".to_string(),\n+            linker: Some(\"msp430-elf-gcc\".to_string()),\n             no_integrated_as: true,\n \n             // There are no atomic instructions available in the MSP430"}, {"sha": "6a8f52f509310b0cf0a962be74c3f56b1dca7932", "filename": "src/librustc_back/target/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fthumb_base.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -45,7 +45,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         // In 99%+ of cases, we want to use the `arm-none-eabi-gcc` compiler (there aren't many\n         // options around)\n-        linker: \"arm-none-eabi-gcc\".to_string(),\n+        linker: Some(\"arm-none-eabi-gcc\".to_string()),\n         // Because these devices have very little resources having an unwinder is too onerous so we\n         // default to \"abort\" because the \"unwind\" strategy is very rare.\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "13dee3a576869c0a45b9dcb1da338ecadcffaf5d", "filename": "src/librustc_back/target/wasm32_experimental_emscripten.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -10,7 +10,6 @@\n \n use LinkerFlavor;\n use super::{LinkArgs, Target, TargetOptions};\n-use super::emscripten_base::{cmd};\n \n pub fn target() -> Result<Target, String> {\n     let mut post_link_args = LinkArgs::new();\n@@ -24,8 +23,6 @@ pub fn target() -> Result<Target, String> {\n                                \"-g3\".to_string()]);\n \n     let opts = TargetOptions {\n-        linker: cmd(\"emcc\"),\n-\n         dynamic_linking: false,\n         executables: true,\n         // Today emcc emits two files - a .js file to bootstrap and"}, {"sha": "2770e67e30a5bd9234d319a0be7c0a8467fb6098", "filename": "src/librustc_back/target/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_emscripten.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -10,7 +10,6 @@\n \n use LinkerFlavor;\n use super::{LinkArgs, Target, TargetOptions};\n-use super::emscripten_base::{cmd};\n \n pub fn target() -> Result<Target, String> {\n     let mut post_link_args = LinkArgs::new();\n@@ -21,8 +20,6 @@ pub fn target() -> Result<Target, String> {\n                                \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()]);\n \n     let opts = TargetOptions {\n-        linker: cmd(\"emcc\"),\n-\n         dynamic_linking: false,\n         executables: true,\n         // Today emcc emits two files - a .js file to bootstrap and"}, {"sha": "1d84e13751740f82e58bb5874ac86abeefd46e0e", "filename": "src/librustc_back/target/wasm32_unknown_unknown.rs", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_unknown_unknown.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -8,41 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// The wasm32-unknown-unknown target is currently a highly experimental version\n-// of a wasm-based target which does *not* use the Emscripten toolchain. Instead\n-// this is a pretty flavorful (aka hacked up) target right now. The definition\n-// and semantics of this target are likely to change and so this shouldn't be\n-// relied on just yet.\n+// The wasm32-unknown-unknown target is currently an experimental version of a\n+// wasm-based target which does *not* use the Emscripten toolchain. Instead\n+// this toolchain is based purely on LLVM's own toolchain, using LLVM's native\n+// WebAssembly backend as well as LLD for a native linker.\n //\n-// In general everyone is currently waiting on a linker for wasm code. In the\n-// meantime we have no means of actually making use of the traditional separate\n-// compilation model. At a high level this means that assembling Rust programs\n-// into a WebAssembly program looks like:\n-//\n-//  1. All intermediate artifacts are LLVM bytecode. We'll be using LLVM as\n-//     a linker later on.\n-//  2. For the final artifact we emit one giant assembly file (WebAssembly\n-//     doesn't have an object file format). To do this we force LTO to be turned\n-//     on (`requires_lto` below) to ensure all Rust code is in one module. Any\n-//     \"linked\" C library is basically just ignored.\n-//  3. Using LLVM we emit a `foo.s` file (assembly) with some... what I can only\n-//     describe as arcane syntax. From there we need to actually change this\n-//     into a wasm module. For this step we use the `binaryen` project. This\n-//     project is mostly intended as a WebAssembly code generator, but for now\n-//     we're just using its LLVM-assembly-to-wasm-module conversion utilities.\n-//\n-// And voila, out comes a web assembly module! There's some various tweaks here\n-// and there, but that's the high level at least. Note that this will be\n-// rethought from the ground up once a linker (lld) is available, so this is all\n-// temporary and should improve in the future.\n+// There's some trickery below on crate types supported and various defaults\n+// (aka panic=abort by default), but otherwise this is in general a relatively\n+// standard target.\n \n-use LinkerFlavor;\n+use {LinkerFlavor, LldFlavor};\n use super::{Target, TargetOptions, PanicStrategy};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n-        linker: \"not-used\".to_string(),\n-\n         // we allow dynamic linking, but only cdylibs. Basically we allow a\n         // final library artifact that exports some symbols (a wasm module) but\n         // we don't allow intermediate `dylib` crate types\n@@ -58,9 +37,6 @@ pub fn target() -> Result<Target, String> {\n         dll_suffix: \".wasm\".to_string(),\n         linker_is_gnu: false,\n \n-        // We're storing bitcode for now in all the rlibs\n-        obj_is_bitcode: true,\n-\n         // A bit of a lie, but \"eh\"\n         max_atomic_width: Some(32),\n \n@@ -69,27 +45,17 @@ pub fn target() -> Result<Target, String> {\n         // the future once unwinding is implemented. Don't rely on this.\n         panic_strategy: PanicStrategy::Abort,\n \n-        // There's no linker yet so we're forced to use LLVM as a linker. This\n-        // means that we must always enable LTO for final artifacts.\n-        requires_lto: true,\n-\n         // Wasm doesn't have atomics yet, so tell LLVM that we're in a single\n         // threaded model which will legalize atomics to normal operations.\n         singlethread: true,\n \n-        // Because we're always enabling LTO we can't enable builtin lowering as\n-        // otherwise we'll lower the definition of the `memcpy` function to\n-        // memcpy itself. Note that this is specifically because we're\n-        // performing LTO with compiler-builtins.\n-        no_builtins: true,\n-\n         // no dynamic linking, no need for default visibility!\n         default_hidden_visibility: true,\n \n         .. Default::default()\n     };\n     Ok(Target {\n-        llvm_target: \"wasm32-unknown-unknown\".to_string(),\n+        llvm_target: \"wasm32-unknown-unknown-wasm\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n@@ -100,8 +66,7 @@ pub fn target() -> Result<Target, String> {\n         target_vendor: \"unknown\".to_string(),\n         data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n-        // A bit of a lie, but it gets the job done\n-        linker_flavor: LinkerFlavor::Binaryen,\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Wasm),\n         options: opts,\n     })\n }"}, {"sha": "05b6247c9518f040fedda7f653c6346803473732", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -75,7 +75,7 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         // FIXME(#13846) this should be enabled for windows\n         function_sections: false,\n-        linker: \"gcc\".to_string(),\n+        linker: Some(\"gcc\".to_string()),\n         dynamic_linking: true,\n         executables: true,\n         dll_prefix: \"\".to_string(),"}, {"sha": "34aa17267f8bea59e9e6cdf44c0c49591d20f167", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -20,7 +20,6 @@ pub fn opts() -> TargetOptions {\n \n     TargetOptions {\n         function_sections: true,\n-        linker: \"link.exe\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         dll_prefix: \"\".to_string(),"}, {"sha": "3158665a2e28d0227192a5f4c6fb99869dc4cdfc", "filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n-    base.linker = \"x86_64-rumprun-netbsd-gcc\".to_string();\n+    base.linker = Some(\"x86_64-rumprun-netbsd-gcc\".to_string());\n     base.max_atomic_width = Some(64);\n \n     base.dynamic_linking = false;"}, {"sha": "d1a9cb1cd7e7db57cf0ad40caa5d3767dccee207", "filename": "src/librustc_back/target/x86_64_unknown_cloudabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_cloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_cloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_cloudabi.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::cloudabi_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.linker = \"x86_64-unknown-cloudabi-cc\".to_string();\n+    base.linker = Some(\"x86_64-unknown-cloudabi-cc\".to_string());\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n "}, {"sha": "55f11665f6d0ba83a157680b9ce433bfeab5f02a", "filename": "src/librustc_binaryen/BinaryenWrapper.cpp", "status": "removed", "additions": 0, "deletions": 160, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_binaryen%2FBinaryenWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_binaryen%2FBinaryenWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_binaryen%2FBinaryenWrapper.cpp?ref=4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "patch": "@@ -1,160 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This is a small C API inserted on top of the Binaryen C++ API which we use\n-// from Rust. Once we have a real linker for we'll be able to remove all this,\n-// and otherwise this is just all on a \"as we need it\" basis for now.\n-\n-#include <stdint.h>\n-#include <string>\n-#include <sstream>\n-#include <stdlib.h>\n-\n-#include \"s2wasm.h\"\n-#include \"wasm-binary.h\"\n-#include \"wasm-linker.h\"\n-\n-using namespace wasm;\n-\n-struct BinaryenRustModule {\n-  BufferWithRandomAccess buffer;\n-  std::string sourceMapJSON;\n-};\n-\n-struct BinaryenRustModuleOptions {\n-  uint64_t globalBase;\n-  bool debug;\n-  uint64_t stackAllocation;\n-  uint64_t initialMem;\n-  uint64_t maxMem;\n-  bool importMemory;\n-  bool ignoreUnknownSymbols;\n-  bool debugInfo;\n-  std::string startFunction;\n-  std::string sourceMapUrl;\n-\n-  BinaryenRustModuleOptions() :\n-    globalBase(0),\n-    debug(false),\n-    stackAllocation(0),\n-    initialMem(0),\n-    maxMem(0),\n-    importMemory(false),\n-    ignoreUnknownSymbols(false),\n-    debugInfo(false),\n-    startFunction(\"\"),\n-    sourceMapUrl(\"\")\n-  {}\n-\n-};\n-\n-extern \"C\" BinaryenRustModuleOptions*\n-BinaryenRustModuleOptionsCreate() {\n-  return new BinaryenRustModuleOptions;\n-}\n-\n-extern \"C\" void\n-BinaryenRustModuleOptionsFree(BinaryenRustModuleOptions *options) {\n-  delete options;\n-}\n-\n-extern \"C\" void\n-BinaryenRustModuleOptionsSetDebugInfo(BinaryenRustModuleOptions *options,\n-                                      bool debugInfo) {\n-  options->debugInfo = debugInfo;\n-}\n-\n-extern \"C\" void\n-BinaryenRustModuleOptionsSetStart(BinaryenRustModuleOptions *options,\n-                                  char *start) {\n-  options->startFunction = start;\n-}\n-\n-extern \"C\" void\n-BinaryenRustModuleOptionsSetSourceMapUrl(BinaryenRustModuleOptions *options,\n-                                         char *sourceMapUrl) {\n-  options->sourceMapUrl = sourceMapUrl;\n-}\n-\n-extern \"C\" void\n-BinaryenRustModuleOptionsSetStackAllocation(BinaryenRustModuleOptions *options,\n-                                            uint64_t stack) {\n-  options->stackAllocation = stack;\n-}\n-\n-extern \"C\" void\n-BinaryenRustModuleOptionsSetImportMemory(BinaryenRustModuleOptions *options,\n-                                         bool import) {\n-  options->importMemory = import;\n-}\n-\n-extern \"C\" BinaryenRustModule*\n-BinaryenRustModuleCreate(const BinaryenRustModuleOptions *options,\n-                         const char *assembly) {\n-  Linker linker(\n-      options->globalBase,\n-      options->stackAllocation,\n-      options->initialMem,\n-      options->maxMem,\n-      options->importMemory,\n-      options->ignoreUnknownSymbols,\n-      options->startFunction,\n-      options->debug);\n-\n-  S2WasmBuilder mainbuilder(assembly, options->debug);\n-  linker.linkObject(mainbuilder);\n-  linker.layout();\n-\n-  auto ret = make_unique<BinaryenRustModule>();\n-  {\n-    WasmBinaryWriter writer(&linker.getOutput().wasm, ret->buffer, options->debug);\n-    writer.setNamesSection(options->debugInfo);\n-\n-    std::unique_ptr<std::ostringstream> sourceMapStream = nullptr;\n-    {\n-      sourceMapStream = make_unique<std::ostringstream>();\n-      writer.setSourceMap(sourceMapStream.get(), options->sourceMapUrl);\n-    }\n-\n-    // FIXME: support symbol maps?\n-    // writer.setSymbolMap(symbolMap);\n-    writer.write();\n-\n-    if (sourceMapStream) {\n-      ret->sourceMapJSON = sourceMapStream->str();\n-    }\n-  }\n-  return ret.release();\n-}\n-\n-extern \"C\" const uint8_t*\n-BinaryenRustModulePtr(const BinaryenRustModule *M) {\n-  return M->buffer.data();\n-}\n-\n-extern \"C\" size_t\n-BinaryenRustModuleLen(const BinaryenRustModule *M) {\n-  return M->buffer.size();\n-}\n-\n-extern \"C\" const char*\n-BinaryenRustModuleSourceMapPtr(const BinaryenRustModule *M) {\n-  return M->sourceMapJSON.data();\n-}\n-\n-extern \"C\" size_t\n-BinaryenRustModuleSourceMapLen(const BinaryenRustModule *M) {\n-  return M->sourceMapJSON.length();\n-}\n-\n-extern \"C\" void\n-BinaryenRustModuleFree(BinaryenRustModule *M) {\n-  delete M;\n-}"}, {"sha": "9573c89471404d7877437cee350fa27b3cf97830", "filename": "src/librustc_binaryen/Cargo.toml", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_binaryen%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_binaryen%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_binaryen%2FCargo.toml?ref=4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "patch": "@@ -1,16 +0,0 @@\n-# Wondering what this crate is? Take a look at the `lib.rs`!\n-\n-[package]\n-name = \"rustc_binaryen\"\n-version = \"0.0.0\"\n-authors = [\"The Rust Project Developers\"]\n-\n-[lib]\n-path = \"lib.rs\"\n-\n-[dependencies]\n-libc = \"0.2\"\n-\n-[build-dependencies]\n-cmake = \"0.1\"\n-cc = \"1.0\""}, {"sha": "f23ff3cee555bba7c48cb6d6b5eee3b857b680da", "filename": "src/librustc_binaryen/build.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_binaryen%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_binaryen%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_binaryen%2Fbuild.rs?ref=4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-extern crate cc;\n-extern crate cmake;\n-\n-use std::env;\n-\n-use cmake::Config;\n-\n-fn main() {\n-    let target = env::var(\"TARGET\").unwrap();\n-\n-    // Bring in `__emutls_get_address` which is apparently needed for now\n-    if target.contains(\"pc-windows-gnu\") {\n-        println!(\"cargo:rustc-link-lib=gcc_eh\");\n-        println!(\"cargo:rustc-link-lib=pthread\");\n-    }\n-\n-    Config::new(\"../binaryen\")\n-        .define(\"BUILD_STATIC_LIB\", \"ON\")\n-        .build_target(\"binaryen\")\n-        .build();\n-\n-    // I couldn't figure out how to link just one of these, so link everything.\n-    println!(\"cargo:rustc-link-lib=static=asmjs\");\n-    println!(\"cargo:rustc-link-lib=static=binaryen\");\n-    println!(\"cargo:rustc-link-lib=static=cfg\");\n-    println!(\"cargo:rustc-link-lib=static=emscripten-optimizer\");\n-    println!(\"cargo:rustc-link-lib=static=ir\");\n-    println!(\"cargo:rustc-link-lib=static=passes\");\n-    println!(\"cargo:rustc-link-lib=static=support\");\n-    println!(\"cargo:rustc-link-lib=static=wasm\");\n-\n-    let out_dir = env::var(\"OUT_DIR\").unwrap();\n-    println!(\"cargo:rustc-link-search=native={}/build/lib\", out_dir);\n-\n-    // Add in our own little shim along with some extra files that weren't\n-    // included in the main build.\n-    let mut cfg = cc::Build::new();\n-    cfg.file(\"BinaryenWrapper.cpp\")\n-        .file(\"../binaryen/src/wasm-linker.cpp\")\n-        .file(\"../binaryen/src/wasm-emscripten.cpp\")\n-        .include(\"../binaryen/src\")\n-        .cpp_link_stdlib(None)\n-        .warnings(false)\n-        .cpp(true);\n-\n-    if !target.contains(\"msvc\") {\n-        cfg.flag(\"-std=c++11\");\n-    }\n-    cfg.compile(\"binaryen_wrapper\");\n-}"}, {"sha": "36174e11ba04a988012f7724e537dd41c0bfb339", "filename": "src/librustc_binaryen/lib.rs", "status": "removed", "additions": 0, "deletions": 172, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_binaryen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Flibrustc_binaryen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_binaryen%2Flib.rs?ref=4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "patch": "@@ -1,172 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Rustc bindings to the binaryen project.\n-//!\n-//! This crate is a small shim around the binaryen project which provides us the\n-//! ability to take LLVM's output and generate a wasm module. Specifically this\n-//! only supports one operation, creating a module from LLVM's assembly format\n-//! and then serializing that module to a wasm module.\n-\n-extern crate libc;\n-\n-use std::slice;\n-use std::ffi::{CString, CStr};\n-\n-/// In-memory representation of a serialized wasm module.\n-pub struct Module {\n-    ptr: *mut BinaryenRustModule,\n-}\n-\n-impl Module {\n-    /// Creates a new wasm module from the LLVM-assembly provided (in a C string\n-    /// format).\n-    ///\n-    /// The actual module creation can be tweaked through the various options in\n-    /// `ModuleOptions` as well. Any errors are just returned as a bland string.\n-    pub fn new(assembly: &CStr, opts: &ModuleOptions) -> Result<Module, String> {\n-        unsafe {\n-            let ptr = BinaryenRustModuleCreate(opts.ptr, assembly.as_ptr());\n-            if ptr.is_null() {\n-                Err(format!(\"failed to create binaryen module\"))\n-            } else {\n-                Ok(Module { ptr })\n-            }\n-        }\n-    }\n-\n-    /// Returns the data of the serialized wasm module. This is a `foo.wasm`\n-    /// file contents.\n-    pub fn data(&self) -> &[u8] {\n-        unsafe {\n-            let ptr = BinaryenRustModulePtr(self.ptr);\n-            let len = BinaryenRustModuleLen(self.ptr);\n-            slice::from_raw_parts(ptr, len)\n-        }\n-    }\n-\n-    /// Returns the data of the source map JSON.\n-    pub fn source_map(&self) -> &[u8] {\n-        unsafe {\n-            let ptr = BinaryenRustModuleSourceMapPtr(self.ptr);\n-            let len = BinaryenRustModuleSourceMapLen(self.ptr);\n-            slice::from_raw_parts(ptr, len)\n-        }\n-    }\n-}\n-\n-impl Drop for Module {\n-    fn drop(&mut self) {\n-        unsafe {\n-            BinaryenRustModuleFree(self.ptr);\n-        }\n-    }\n-}\n-\n-pub struct ModuleOptions {\n-    ptr: *mut BinaryenRustModuleOptions,\n-}\n-\n-impl ModuleOptions {\n-    pub fn new() -> ModuleOptions {\n-        unsafe {\n-            let ptr = BinaryenRustModuleOptionsCreate();\n-            ModuleOptions { ptr }\n-        }\n-    }\n-\n-    /// Turns on or off debug info.\n-    ///\n-    /// From what I can tell this just creates a \"names\" section of the wasm\n-    /// module which contains a table of the original function names.\n-    pub fn debuginfo(&mut self, debug: bool) -> &mut Self {\n-        unsafe {\n-            BinaryenRustModuleOptionsSetDebugInfo(self.ptr, debug);\n-        }\n-        self\n-    }\n-\n-    /// Configures a `start` function for the module, to be executed when it's\n-    /// loaded.\n-    pub fn start(&mut self, func: &str) -> &mut Self {\n-        let func = CString::new(func).unwrap();\n-        unsafe {\n-            BinaryenRustModuleOptionsSetStart(self.ptr, func.as_ptr());\n-        }\n-        self\n-    }\n-\n-    /// Configures a `sourceMappingURL` custom section value for the module.\n-    pub fn source_map_url(&mut self, url: &str) -> &mut Self {\n-        let url = CString::new(url).unwrap();\n-        unsafe {\n-            BinaryenRustModuleOptionsSetSourceMapUrl(self.ptr, url.as_ptr());\n-        }\n-        self\n-    }\n-\n-    /// Configures how much stack is initially allocated for the module. 1MB is\n-    /// probably good enough for now.\n-    pub fn stack(&mut self, amt: u64) -> &mut Self {\n-        unsafe {\n-            BinaryenRustModuleOptionsSetStackAllocation(self.ptr, amt);\n-        }\n-        self\n-    }\n-\n-    /// Flags whether the initial memory should be imported or exported. So far\n-    /// we export it by default.\n-    pub fn import_memory(&mut self, import: bool) -> &mut Self {\n-        unsafe {\n-            BinaryenRustModuleOptionsSetImportMemory(self.ptr, import);\n-        }\n-        self\n-    }\n-}\n-\n-impl Drop for ModuleOptions {\n-    fn drop(&mut self) {\n-        unsafe {\n-            BinaryenRustModuleOptionsFree(self.ptr);\n-        }\n-    }\n-}\n-\n-enum BinaryenRustModule {}\n-enum BinaryenRustModuleOptions {}\n-\n-extern {\n-    fn BinaryenRustModuleCreate(opts: *const BinaryenRustModuleOptions,\n-                                assembly: *const libc::c_char)\n-        -> *mut BinaryenRustModule;\n-    fn BinaryenRustModulePtr(module: *const BinaryenRustModule) -> *const u8;\n-    fn BinaryenRustModuleLen(module: *const BinaryenRustModule) -> usize;\n-    fn BinaryenRustModuleSourceMapPtr(module: *const BinaryenRustModule) -> *const u8;\n-    fn BinaryenRustModuleSourceMapLen(module: *const BinaryenRustModule) -> usize;\n-    fn BinaryenRustModuleFree(module: *mut BinaryenRustModule);\n-\n-    fn BinaryenRustModuleOptionsCreate()\n-        -> *mut BinaryenRustModuleOptions;\n-    fn BinaryenRustModuleOptionsSetDebugInfo(module: *mut BinaryenRustModuleOptions,\n-                                             debuginfo: bool);\n-    fn BinaryenRustModuleOptionsSetStart(module: *mut BinaryenRustModuleOptions,\n-                                         start: *const libc::c_char);\n-    fn BinaryenRustModuleOptionsSetSourceMapUrl(module: *mut BinaryenRustModuleOptions,\n-                                                sourceMapUrl: *const libc::c_char);\n-    fn BinaryenRustModuleOptionsSetStackAllocation(\n-        module: *mut BinaryenRustModuleOptions,\n-        stack: u64,\n-    );\n-    fn BinaryenRustModuleOptionsSetImportMemory(\n-        module: *mut BinaryenRustModuleOptions,\n-        import: bool,\n-    );\n-    fn BinaryenRustModuleOptionsFree(module: *mut BinaryenRustModuleOptions);\n-}"}, {"sha": "6d63bc4436fe874348a4524d9926761fbe92eee1", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -10,16 +10,16 @@\n \n use bitvec::BitMatrix;\n use fx::FxHashMap;\n+use sync::Lock;\n use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n use stable_hasher::{HashStable, StableHasher, StableHasherResult};\n-use std::cell::RefCell;\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::mem;\n \n \n #[derive(Clone, Debug)]\n-pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash + Clone> {\n+pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash> {\n     // List of elements. This is used to map from a T to a usize.\n     elements: Vec<T>,\n \n@@ -32,14 +32,14 @@ pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash + Clone> {\n \n     // This is a cached transitive closure derived from the edges.\n     // Currently, we build it lazilly and just throw out any existing\n-    // copy whenever a new edge is added. (The RefCell is to permit\n+    // copy whenever a new edge is added. (The Lock is to permit\n     // the lazy computation.) This is kind of silly, except for the\n     // fact its size is tied to `self.elements.len()`, so I wanted to\n     // wait before building it up to avoid reallocating as new edges\n     // are added with new elements. Perhaps better would be to ask the\n     // user for a batch of edges to minimize this effect, but I\n     // already wrote the code this way. :P -nmatsakis\n-    closure: RefCell<Option<BitMatrix>>,\n+    closure: Lock<Option<BitMatrix>>,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n@@ -51,13 +51,13 @@ struct Edge {\n     target: Index,\n }\n \n-impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n+impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     pub fn new() -> TransitiveRelation<T> {\n         TransitiveRelation {\n             elements: vec![],\n             map: FxHashMap(),\n             edges: vec![],\n-            closure: RefCell::new(None),\n+            closure: Lock::new(None),\n         }\n     }\n \n@@ -72,7 +72,7 @@ impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n     fn add_index(&mut self, a: T) -> Index {\n         let &mut TransitiveRelation {\n             ref mut elements,\n-            ref closure,\n+            ref mut closure,\n             ref mut map,\n             ..\n         } = self;\n@@ -82,7 +82,7 @@ impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n                elements.push(a);\n \n                // if we changed the dimensions, clear the cache\n-               *closure.borrow_mut() = None;\n+               *closure.get_mut() = None;\n \n                Index(elements.len() - 1)\n            })\n@@ -122,7 +122,7 @@ impl<T: Clone + Debug + Eq + Hash + Clone> TransitiveRelation<T> {\n             self.edges.push(edge);\n \n             // added an edge, clear the cache\n-            *self.closure.borrow_mut() = None;\n+            *self.closure.get_mut() = None;\n         }\n     }\n \n@@ -443,7 +443,7 @@ impl<T> Decodable for TransitiveRelation<T>\n                               .enumerate()\n                               .map(|(index, elem)| (elem.clone(), Index(index)))\n                               .collect();\n-            Ok(TransitiveRelation { elements, edges, map, closure: RefCell::new(None) })\n+            Ok(TransitiveRelation { elements, edges, map, closure: Lock::new(None) })\n         })\n     }\n }"}, {"sha": "d89a3e9d907ea5bff5bbf36ff6813506056eac9a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -303,7 +303,9 @@ fn get_trans_sysroot(backend_name: &str) -> fn() -> Box<TransCrate> {\n     let sysroot = sysroot_candidates.iter()\n         .map(|sysroot| {\n             let libdir = filesearch::relative_target_lib_path(&sysroot, &target);\n-            sysroot.join(libdir).with_file_name(\"codegen-backends\")\n+            sysroot.join(libdir)\n+                .with_file_name(option_env!(\"CFG_CODEGEN_BACKENDS_DIR\")\n+                                .unwrap_or(\"codegen-backends\"))\n         })\n         .filter(|f| {\n             info!(\"codegen backend candidate: {}\", f.display());"}, {"sha": "805d2086ee4f66b7723fc486931c61a26c34f10f", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -11,6 +11,7 @@ test = false\n \n [dependencies]\n bitflags = \"1.0\"\n+cc = \"1.0.1\"\n flate2 = \"1.0\"\n jobserver = \"0.1.5\"\n libc = \"0.2\"\n@@ -21,7 +22,6 @@ rustc-demangle = \"0.1.4\"\n rustc_allocator = { path = \"../librustc_allocator\" }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_back = { path = \"../librustc_back\" }\n-rustc_binaryen = { path = \"../librustc_binaryen\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n@@ -35,9 +35,6 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n tempdir = \"0.3\"\n \n-[target.\"cfg(windows)\".dependencies]\n-cc = \"1.0.1\"\n-\n [features]\n # Used to communicate the feature to `rustc_back` in the same manner that the\n # `rustc` driver script communicate this."}, {"sha": "ecf7bf5036e08597c6a538844395e4031ea8a84f", "filename": "src/librustc_trans/back/command.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fcommand.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -17,6 +17,8 @@ use std::io;\n use std::mem;\n use std::process::{self, Output};\n \n+use rustc_back::LldFlavor;\n+\n #[derive(Clone)]\n pub struct Command {\n     program: Program,\n@@ -28,6 +30,7 @@ pub struct Command {\n enum Program {\n     Normal(OsString),\n     CmdBatScript(OsString),\n+    Lld(OsString, LldFlavor)\n }\n \n impl Command {\n@@ -39,6 +42,10 @@ impl Command {\n         Command::_new(Program::CmdBatScript(program.as_ref().to_owned()))\n     }\n \n+    pub fn lld<P: AsRef<OsStr>>(program: P, flavor: LldFlavor) -> Command {\n+        Command::_new(Program::Lld(program.as_ref().to_owned(), flavor))\n+    }\n+\n     fn _new(program: Program) -> Command {\n         Command {\n             program,\n@@ -74,17 +81,6 @@ impl Command {\n         self\n     }\n \n-    pub fn envs<I, K, V>(&mut self, envs: I) -> &mut Command\n-        where I: IntoIterator<Item=(K, V)>,\n-              K: AsRef<OsStr>,\n-              V: AsRef<OsStr>\n-    {\n-        for (key, value) in envs {\n-            self._env(key.as_ref(), value.as_ref());\n-        }\n-        self\n-    }\n-\n     fn _env(&mut self, key: &OsStr, value: &OsStr) {\n         self.env.push((key.to_owned(), value.to_owned()));\n     }\n@@ -101,6 +97,16 @@ impl Command {\n                 c.arg(\"/c\").arg(p);\n                 c\n             }\n+            Program::Lld(ref p, flavor) => {\n+                let mut c = process::Command::new(p);\n+                c.arg(\"-flavor\").arg(match flavor {\n+                    LldFlavor::Wasm => \"wasm\",\n+                    LldFlavor::Ld => \"gnu\",\n+                    LldFlavor::Link => \"link\",\n+                    LldFlavor::Ld64 => \"darwin\",\n+                });\n+                c\n+            }\n         };\n         ret.args(&self.args);\n         ret.envs(self.env.clone());"}, {"sha": "636b3984117d8d7026a8fd007b64a9709c13edc0", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 46, "deletions": 80, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use cc::windows_registry;\n use super::archive::{ArchiveBuilder, ArchiveConfig};\n use super::bytecode::RLIB_BYTECODE_EXTENSION;\n use super::linker::Linker;\n use super::command::Command;\n use super::rpath::RPathConfig;\n use super::rpath;\n use metadata::METADATA_FILENAME;\n+use rustc_back::LinkerFlavor;\n use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType, PrintRequest};\n use rustc::session::config::{RUST_CGU_EXT, Lto};\n use rustc::session::filesearch;\n@@ -27,14 +29,13 @@ use rustc::util::common::time;\n use rustc::util::fs::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n use tempdir::TempDir;\n-use rustc_back::{PanicStrategy, RelroLevel, LinkerFlavor};\n+use rustc_back::{PanicStrategy, RelroLevel};\n use context::get_reloc_model;\n use llvm;\n \n use std::ascii;\n use std::char;\n use std::env;\n-use std::ffi::OsString;\n use std::fmt;\n use std::fs;\n use std::io;\n@@ -57,9 +58,7 @@ pub use rustc_trans_utils::link::{find_crate_name, filename_for_input, default_o\n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n // toolchain\n-pub fn get_linker(sess: &Session) -> (PathBuf, Command, Vec<(OsString, OsString)>) {\n-    let envs = vec![(\"PATH\".into(), command_path(sess))];\n-\n+pub fn get_linker(sess: &Session) -> (PathBuf, Command) {\n     // If our linker looks like a batch script on Windows then to execute this\n     // we'll need to spawn `cmd` explicitly. This is primarily done to handle\n     // emscripten where the linker is `emcc.bat` and needs to be spawned as\n@@ -74,56 +73,57 @@ pub fn get_linker(sess: &Session) -> (PathBuf, Command, Vec<(OsString, OsString)\n                 return Command::bat_script(linker)\n             }\n         }\n-        Command::new(linker)\n-    };\n+        match sess.linker_flavor() {\n+            LinkerFlavor::Lld(f) => Command::lld(linker, f),\n+            _ => Command::new(linker),\n \n-    if let Some(ref linker) = sess.opts.cg.linker {\n-        (linker.clone(), cmd(linker), envs)\n-    } else if sess.target.target.options.is_like_msvc {\n-        let (cmd, envs) = msvc_link_exe_cmd(sess);\n-        (PathBuf::from(\"link.exe\"), cmd, envs)\n-    } else {\n-        let linker = PathBuf::from(&sess.target.target.options.linker);\n-        let cmd = cmd(&linker);\n-        (linker, cmd, envs)\n-    }\n-}\n-\n-#[cfg(windows)]\n-pub fn msvc_link_exe_cmd(sess: &Session) -> (Command, Vec<(OsString, OsString)>) {\n-    use cc::windows_registry;\n+        }\n+    };\n \n-    let target = &sess.opts.target_triple;\n-    let tool = windows_registry::find_tool(target, \"link.exe\");\n+    let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple, \"link.exe\");\n \n-    if let Some(tool) = tool {\n-        let mut cmd = Command::new(tool.path());\n-        cmd.args(tool.args());\n-        for &(ref k, ref v) in tool.env() {\n-            cmd.env(k, v);\n-        }\n-        let envs = tool.env().to_vec();\n-        (cmd, envs)\n-    } else {\n-        debug!(\"Failed to locate linker.\");\n-        (Command::new(\"link.exe\"), vec![])\n-    }\n-}\n+    let linker_path = sess.opts.cg.linker.as_ref().map(|s| &**s)\n+        .or(sess.target.target.options.linker.as_ref().map(|s| s.as_ref()))\n+        .unwrap_or(match sess.linker_flavor() {\n+            LinkerFlavor::Msvc => {\n+                msvc_tool.as_ref().map(|t| t.path()).unwrap_or(\"link.exe\".as_ref())\n+            }\n+            LinkerFlavor::Em if cfg!(windows) => \"emcc.bat\".as_ref(),\n+            LinkerFlavor::Em => \"emcc\".as_ref(),\n+            LinkerFlavor::Gcc => \"cc\".as_ref(),\n+            LinkerFlavor::Ld => \"ld\".as_ref(),\n+            LinkerFlavor::Lld(_) => \"lld\".as_ref(),\n+        });\n \n-#[cfg(not(windows))]\n-pub fn msvc_link_exe_cmd(_sess: &Session) -> (Command, Vec<(OsString, OsString)>) {\n-    (Command::new(\"link.exe\"), vec![])\n-}\n+    let mut cmd = cmd(linker_path);\n \n-fn command_path(sess: &Session) -> OsString {\n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n     let mut new_path = sess.host_filesearch(PathKind::All)\n                            .get_tools_search_paths();\n-    if let Some(path) = env::var_os(\"PATH\") {\n-        new_path.extend(env::split_paths(&path));\n+    let mut msvc_changed_path = false;\n+    if sess.target.target.options.is_like_msvc {\n+        if let Some(ref tool) = msvc_tool {\n+            cmd.args(tool.args());\n+            for &(ref k, ref v) in tool.env() {\n+                if k == \"PATH\" {\n+                    new_path.extend(env::split_paths(v));\n+                    msvc_changed_path = true;\n+                } else {\n+                    cmd.env(k, v);\n+                }\n+            }\n+        }\n+    }\n+\n+    if !msvc_changed_path {\n+        if let Some(path) = env::var_os(\"PATH\") {\n+            new_path.extend(env::split_paths(&path));\n+        }\n     }\n-    env::join_paths(new_path).unwrap()\n+    cmd.env(\"PATH\", env::join_paths(new_path).unwrap());\n+\n+    (linker_path.to_path_buf(), cmd)\n }\n \n pub fn remove(sess: &Session, path: &Path) {\n@@ -612,15 +612,8 @@ fn link_natively(sess: &Session,\n     info!(\"preparing {:?} to {:?}\", crate_type, out_filename);\n     let flavor = sess.linker_flavor();\n \n-    // The \"binaryen linker\" is massively special, so skip everything below.\n-    if flavor == LinkerFlavor::Binaryen {\n-        return link_binaryen(sess, crate_type, out_filename, trans, tmpdir);\n-    }\n-\n     // The invocations of cc share some flags across platforms\n-    let (pname, mut cmd, envs) = get_linker(sess);\n-    // This will set PATH on windows\n-    cmd.envs(envs);\n+    let (pname, mut cmd) = get_linker(sess);\n \n     let root = sess.target_filesearch(PathKind::Native).get_lib_path();\n     if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n@@ -1485,33 +1478,6 @@ fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n     }\n }\n \n-/// For now \"linking with binaryen\" is just \"move the one module we generated in\n-/// the backend to the final output\"\n-///\n-/// That is, all the heavy lifting happens during the `back::write` phase. Here\n-/// we just clean up after that.\n-///\n-/// Note that this is super temporary and \"will not survive the night\", this is\n-/// guaranteed to get removed as soon as a linker for wasm exists. This should\n-/// not be used for anything other than wasm.\n-fn link_binaryen(sess: &Session,\n-                 _crate_type: config::CrateType,\n-                 out_filename: &Path,\n-                 trans: &CrateTranslation,\n-                 _tmpdir: &Path) {\n-    assert!(trans.allocator_module.is_none());\n-    assert_eq!(trans.modules.len(), 1);\n-\n-    let object = trans.modules[0].object.as_ref().expect(\"object must exist\");\n-    let res = fs::hard_link(object, out_filename)\n-        .or_else(|_| fs::copy(object, out_filename).map(|_| ()));\n-    if let Err(e) = res {\n-        sess.fatal(&format!(\"failed to create `{}`: {}\",\n-                            out_filename.display(),\n-                            e));\n-    }\n-}\n-\n fn is_full_lto_enabled(sess: &Session) -> bool {\n     match sess.lto() {\n         Lto::Yes |"}, {"sha": "a3ff39a47a2998e23f9cc41acfe7133add6c2752", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 118, "deletions": 3, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -23,7 +23,7 @@ use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n use rustc::session::config::{self, CrateType, OptLevel, DebugInfoLevel};\n use rustc::ty::TyCtxt;\n-use rustc_back::LinkerFlavor;\n+use rustc_back::{LinkerFlavor, LldFlavor};\n use serialize::{json, Encoder};\n \n /// For all the linkers we support, and information they might\n@@ -45,6 +45,7 @@ impl LinkerInfo {\n                          cmd: Command,\n                          sess: &'a Session) -> Box<Linker+'a> {\n         match sess.linker_flavor() {\n+            LinkerFlavor::Lld(LldFlavor::Link) |\n             LinkerFlavor::Msvc => {\n                 Box::new(MsvcLinker {\n                     cmd,\n@@ -68,6 +69,9 @@ impl LinkerInfo {\n                     is_ld: false,\n                 }) as Box<Linker>\n             }\n+\n+            LinkerFlavor::Lld(LldFlavor::Ld) |\n+            LinkerFlavor::Lld(LldFlavor::Ld64) |\n             LinkerFlavor::Ld => {\n                 Box::new(GccLinker {\n                     cmd,\n@@ -77,8 +81,11 @@ impl LinkerInfo {\n                     is_ld: true,\n                 }) as Box<Linker>\n             }\n-            LinkerFlavor::Binaryen => {\n-                panic!(\"can't instantiate binaryen linker\")\n+\n+            LinkerFlavor::Lld(LldFlavor::Wasm) => {\n+                Box::new(WasmLd {\n+                    cmd,\n+                }) as Box<Linker>\n             }\n         }\n     }\n@@ -785,3 +792,111 @@ fn exported_symbols(tcx: TyCtxt, crate_type: CrateType) -> Vec<String> {\n \n     symbols\n }\n+\n+pub struct WasmLd {\n+    cmd: Command,\n+}\n+\n+impl Linker for WasmLd {\n+    fn link_dylib(&mut self, lib: &str) {\n+        self.cmd.arg(\"-l\").arg(lib);\n+    }\n+\n+    fn link_staticlib(&mut self, lib: &str) {\n+        self.cmd.arg(\"-l\").arg(lib);\n+    }\n+\n+    fn link_rlib(&mut self, lib: &Path) {\n+        self.cmd.arg(lib);\n+    }\n+\n+    fn include_path(&mut self, path: &Path) {\n+        self.cmd.arg(\"-L\").arg(path);\n+    }\n+\n+    fn framework_path(&mut self, _path: &Path) {\n+        panic!(\"frameworks not supported\")\n+    }\n+\n+    fn output_filename(&mut self, path: &Path) {\n+        self.cmd.arg(\"-o\").arg(path);\n+    }\n+\n+    fn add_object(&mut self, path: &Path) {\n+        self.cmd.arg(path);\n+    }\n+\n+    fn position_independent_executable(&mut self) {\n+    }\n+\n+    fn partial_relro(&mut self) {\n+    }\n+\n+    fn full_relro(&mut self) {\n+    }\n+\n+    fn build_static_executable(&mut self) {\n+    }\n+\n+    fn args(&mut self, args: &[String]) {\n+        self.cmd.args(args);\n+    }\n+\n+    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n+        self.cmd.arg(\"-l\").arg(lib);\n+    }\n+\n+    fn link_framework(&mut self, _framework: &str) {\n+        panic!(\"frameworks not supported\")\n+    }\n+\n+    fn link_whole_staticlib(&mut self, lib: &str, _search_path: &[PathBuf]) {\n+        self.cmd.arg(\"-l\").arg(lib);\n+    }\n+\n+    fn link_whole_rlib(&mut self, lib: &Path) {\n+        self.cmd.arg(lib);\n+    }\n+\n+    fn gc_sections(&mut self, _keep_metadata: bool) {\n+    }\n+\n+    fn optimize(&mut self) {\n+    }\n+\n+    fn debuginfo(&mut self) {\n+    }\n+\n+    fn no_default_libraries(&mut self) {\n+    }\n+\n+    fn build_dylib(&mut self, _out_filename: &Path) {\n+    }\n+\n+    fn export_symbols(&mut self, _tmpdir: &Path, _crate_type: CrateType) {\n+    }\n+\n+    fn subsystem(&mut self, _subsystem: &str) {\n+    }\n+\n+    fn no_position_independent_executable(&mut self) {\n+    }\n+\n+    fn finalize(&mut self) -> Command {\n+        self.cmd.arg(\"--threads\");\n+\n+        // FIXME we probably shouldn't pass this but instead pass an explicit\n+        // whitelist of symbols we'll allow to be undefined. Unfortunately\n+        // though we can't handle symbols like `log10` that LLVM injects at a\n+        // super late date without actually parsing object files. For now let's\n+        // stick to this and hopefully fix it before stabilization happens.\n+        self.cmd.arg(\"--allow-undefined\");\n+\n+        // For now we just never have an entry symbol\n+        self.cmd.arg(\"--no-entry\");\n+\n+        let mut cmd = Command::new(\"\");\n+        ::std::mem::swap(&mut cmd, &mut self.cmd);\n+        cmd\n+    }\n+}"}, {"sha": "55ef4e7ed3ae528736f414ecc4dc04666d123fa3", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -21,7 +21,6 @@ use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n use rustc::util::nodemap::FxHashMap;\n use rustc_allocator::ALLOCATOR_METHODS;\n-use rustc_back::LinkerFlavor;\n use syntax::attr;\n \n pub type ExportedSymbols = FxHashMap<\n@@ -156,26 +155,12 @@ pub fn provide_extern(providers: &mut Providers) {\n         let special_runtime_crate =\n             tcx.is_panic_runtime(cnum) || tcx.is_compiler_builtins(cnum);\n \n-        // Dealing with compiler-builtins and wasm right now is super janky.\n-        // There's no linker! As a result we need all of the compiler-builtins\n-        // exported symbols to make their way through all the way to the end of\n-        // compilation. We want to make sure that LLVM doesn't remove them as\n-        // well because we may or may not need them in the final output\n-        // artifact. For now just force them to always get exported at the C\n-        // layer, and we'll worry about gc'ing them later.\n-        let compiler_builtins_and_binaryen =\n-            tcx.is_compiler_builtins(cnum) &&\n-            tcx.sess.linker_flavor() == LinkerFlavor::Binaryen;\n-\n         let mut crate_exports: Vec<_> = tcx\n             .exported_symbol_ids(cnum)\n             .iter()\n             .map(|&def_id| {\n                 let name = tcx.symbol_name(Instance::mono(tcx, def_id));\n-                let export_level = if compiler_builtins_and_binaryen &&\n-                                      tcx.contains_extern_indicator(def_id) {\n-                    SymbolExportLevel::C\n-                } else if special_runtime_crate {\n+                let export_level = if special_runtime_crate {\n                     // We can probably do better here by just ensuring that\n                     // it has hidden visibility rather than public\n                     // visibility, as this is primarily here to ensure it's"}, {"sha": "78b26a37485ef89807c2bc773e7ffc7bb8dfd535", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 9, "deletions": 78, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -23,7 +23,6 @@ use rustc::session::config::{self, OutputFilenames, OutputType, Passes, SomePass\n                              AllPasses, Sanitizer, Lto};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n-use rustc_back::LinkerFlavor;\n use time_graph::{self, TimeGraph, Timeline};\n use llvm;\n use llvm::{ModuleRef, TargetMachineRef, PassManagerRef, DiagnosticInfoRef};\n@@ -344,9 +343,7 @@ pub struct CodegenContext {\n     pub tm_factory: Arc<Fn() -> Result<TargetMachineRef, String> + Send + Sync>,\n     pub msvc_imps_needed: bool,\n     pub target_pointer_width: String,\n-    binaryen_linker: bool,\n     debuginfo: config::DebugInfoLevel,\n-    wasm_import_memory: bool,\n \n     // Number of cgus excluding the allocator/metadata modules\n     pub total_cgus: usize,\n@@ -639,13 +636,6 @@ unsafe fn codegen(cgcx: &CodegenContext,\n         f(cpm)\n     }\n \n-    // If we're going to generate wasm code from the assembly that llvm\n-    // generates then we'll be transitively affecting a ton of options below.\n-    // This only happens on the wasm target now.\n-    let asm2wasm = cgcx.binaryen_linker &&\n-        !cgcx.crate_types.contains(&config::CrateTypeRlib) &&\n-        mtrans.kind == ModuleKind::Regular;\n-\n     // If we don't have the integrated assembler, then we need to emit asm\n     // from LLVM and use `gcc` to create the object file.\n     let asm_to_obj = config.emit_obj && config.no_integrated_as;\n@@ -654,10 +644,10 @@ unsafe fn codegen(cgcx: &CodegenContext,\n     // just llvm bitcode. In that case write bitcode, and possibly\n     // delete the bitcode if it wasn't requested. Don't generate the\n     // machine code, instead copy the .o file from the .bc\n-    let write_bc = config.emit_bc || (config.obj_is_bitcode && !asm2wasm);\n-    let rm_bc = !config.emit_bc && config.obj_is_bitcode && !asm2wasm;\n-    let write_obj = config.emit_obj && !config.obj_is_bitcode && !asm2wasm && !asm_to_obj;\n-    let copy_bc_to_obj = config.emit_obj && config.obj_is_bitcode && !asm2wasm;\n+    let write_bc = config.emit_bc || config.obj_is_bitcode;\n+    let rm_bc = !config.emit_bc && config.obj_is_bitcode;\n+    let write_obj = config.emit_obj && !config.obj_is_bitcode && !asm_to_obj;\n+    let copy_bc_to_obj = config.emit_obj && config.obj_is_bitcode;\n \n     let bc_out = cgcx.output_filenames.temp_path(OutputType::Bitcode, module_name);\n     let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, module_name);\n@@ -736,13 +726,13 @@ unsafe fn codegen(cgcx: &CodegenContext,\n             timeline.record(\"ir\");\n         }\n \n-        if config.emit_asm || (asm2wasm && config.emit_obj) || asm_to_obj {\n+        if config.emit_asm || asm_to_obj {\n             let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n \n             // We can't use the same module for asm and binary output, because that triggers\n             // various errors like invalid IR or broken binaries, so we might have to clone the\n             // module to produce the asm output\n-            let llmod = if config.emit_obj && !asm2wasm {\n+            let llmod = if config.emit_obj {\n                 llvm::LLVMCloneModule(llmod)\n             } else {\n                 llmod\n@@ -751,24 +741,13 @@ unsafe fn codegen(cgcx: &CodegenContext,\n                 write_output_file(diag_handler, tm, cpm, llmod, &path,\n                                   llvm::FileType::AssemblyFile)\n             })?;\n-            if config.emit_obj && !asm2wasm {\n+            if config.emit_obj {\n                 llvm::LLVMDisposeModule(llmod);\n             }\n             timeline.record(\"asm\");\n         }\n \n-        if asm2wasm && config.emit_obj {\n-            let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n-            let suffix = \".wasm.map\"; // FIXME use target suffix\n-            let map = cgcx.output_filenames.path(OutputType::Exe)\n-                .with_extension(&suffix[1..]);\n-            binaryen_assemble(cgcx, diag_handler, &assembly, &obj_out, &map);\n-            timeline.record(\"binaryen\");\n-\n-            if !config.emit_asm {\n-                drop(fs::remove_file(&assembly));\n-            }\n-        } else if write_obj {\n+        if write_obj {\n             with_codegen(tm, llmod, config.no_builtins, |cpm| {\n                 write_output_file(diag_handler, tm, cpm, llmod, &obj_out,\n                                   llvm::FileType::ObjectFile)\n@@ -808,49 +787,6 @@ unsafe fn codegen(cgcx: &CodegenContext,\n                                    &cgcx.output_filenames))\n }\n \n-/// Translates the LLVM-generated `assembly` on the filesystem into a wasm\n-/// module using binaryen, placing the output at `object`.\n-///\n-/// In this case the \"object\" is actually a full and complete wasm module. We\n-/// won't actually be doing anything else to the output for now. This is all\n-/// pretty janky and will get removed as soon as a linker for wasm exists.\n-fn binaryen_assemble(cgcx: &CodegenContext,\n-                     handler: &Handler,\n-                     assembly: &Path,\n-                     object: &Path,\n-                     map: &Path) {\n-    use rustc_binaryen::{Module, ModuleOptions};\n-\n-    let input = fs::read(&assembly).and_then(|contents| {\n-        Ok(CString::new(contents)?)\n-    });\n-    let mut options = ModuleOptions::new();\n-    if cgcx.debuginfo != config::NoDebugInfo {\n-        options.debuginfo(true);\n-        let map_file_name = map.file_name().unwrap();\n-        options.source_map_url(map_file_name.to_str().unwrap());\n-    }\n-\n-    options.stack(1024 * 1024);\n-    options.import_memory(cgcx.wasm_import_memory);\n-    let assembled = input.and_then(|input| {\n-        Module::new(&input, &options)\n-            .map_err(|e| io::Error::new(io::ErrorKind::Other, e))\n-    });\n-    let err = assembled.and_then(|binary| {\n-        fs::write(&object, binary.data()).and_then(|()| {\n-            if cgcx.debuginfo != config::NoDebugInfo {\n-                fs::write(map, binary.source_map())\n-            } else {\n-                Ok(())\n-            }\n-        })\n-    });\n-    if let Err(e) = err {\n-        handler.err(&format!(\"failed to run binaryen assembler: {}\", e));\n-    }\n-}\n-\n pub(crate) struct CompiledModules {\n     pub modules: Vec<CompiledModule>,\n     pub metadata_module: CompiledModule,\n@@ -1431,12 +1367,9 @@ fn start_executing_work(tcx: TyCtxt,\n         each_linked_rlib_for_lto.push((cnum, path.to_path_buf()));\n     }));\n \n-    let wasm_import_memory =\n-        attr::contains_name(&tcx.hir.krate().attrs, \"wasm_import_memory\");\n-\n     let assembler_cmd = if modules_config.no_integrated_as {\n         // HACK: currently we use linker (gcc) as our assembler\n-        let (name, mut cmd, _) = get_linker(sess);\n+        let (name, mut cmd) = get_linker(sess);\n         cmd.args(&sess.target.target.options.asm_args);\n         Some(Arc::new(AssemblerCommand {\n             name,\n@@ -1471,9 +1404,7 @@ fn start_executing_work(tcx: TyCtxt,\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),\n-        binaryen_linker: tcx.sess.linker_flavor() == LinkerFlavor::Binaryen,\n         debuginfo: tcx.sess.opts.debuginfo,\n-        wasm_import_memory,\n         assembler_cmd,\n     };\n "}, {"sha": "0b8da10b78e776c71acfd2c00c539970c43d0ebf", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -49,7 +49,6 @@ extern crate rustc_mir;\n extern crate rustc_allocator;\n extern crate rustc_apfloat;\n extern crate rustc_back;\n-extern crate rustc_binaryen;\n extern crate rustc_const_math;\n extern crate rustc_data_structures;\n extern crate rustc_demangle;\n@@ -63,7 +62,6 @@ extern crate rustc_trans_utils;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n extern crate serialize;\n-#[cfg(windows)]\n extern crate cc; // Used to locate MSVC\n extern crate tempdir;\n "}, {"sha": "b0a5ae3718df3f87685f3ed3c65dcf8b8709f553", "filename": "src/librustdoc/README.md", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibrustdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FREADME.md?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -0,0 +1,172 @@\n+# The walking tour of rustdoc\n+\n+Rustdoc is implemented entirely within the crate `librustdoc`. After partially compiling a crate to\n+get its AST (technically the HIR map) from rustc, librustdoc performs two major steps past that to\n+render a set of documentation:\n+\n+* \"Clean\" the AST into a form that's more suited to creating documentation (and slightly more\n+  resistant to churn in the compiler).\n+* Use this cleaned AST to render a crate's documentation, one page at a time.\n+\n+Naturally, there's more than just this, and those descriptions simplify out lots of details, but\n+that's the high-level overview.\n+\n+(Side note: this is a library crate! The `rustdoc` binary is crated using the project in\n+`src/tools/rustdoc`. Note that literally all that does is call the `main()` that's in this crate's\n+`lib.rs`, though.)\n+\n+## Cheat sheet\n+\n+* Use `x.py build --stage 1 src/libstd src/tools/rustdoc` to make a useable rustdoc you can run on\n+  other projects.\n+  * Add `src/libtest` to be able to use `rustdoc --test`.\n+  * If you've used `rustup toolchain link local /path/to/build/$TARGET/stage1` previously, then\n+    after the previous build command, `cargo +local doc` will Just Work.\n+* Use `x.py doc --stage 1 src/libstd` to use this rustdoc to generate the standard library docs.\n+  * The completed docs will be available in `build/$TARGET/doc/std`, though the bundle is meant to\n+    be used as though you would copy out the `doc` folder to a web server, since that's where the\n+    CSS/JS and landing page are.\n+* Most of the HTML printing code is in `html/format.rs` and `html/render.rs`. It's in a bunch of\n+  `fmt::Display` implementations and supplementary functions.\n+* The types that got `Display` impls above are defined in `clean/mod.rs`, right next to the custom\n+  `Clean` trait used to process them out of the rustc HIR.\n+* The bits specific to using rustdoc as a test harness are in `test.rs`.\n+* The Markdown renderer is loaded up in `html/markdown.rs`, including functions for extracting\n+  doctests from a given block of Markdown.\n+* The tests on rustdoc *output* are located in `src/test/rustdoc`, where they're handled by the test\n+  runner of rustbuild and the supplementary script `src/etc/htmldocck.py`.\n+* Tests on search index generation are located in `src/test/rustdoc-js`, as a series of JavaScript\n+  files that encode queries on the standard library search index and expected results.\n+\n+## From crate to clean\n+\n+In `core.rs` are two central items: the `DocContext` struct, and the `run_core` function. The latter\n+is where rustdoc calls out to rustc to compile a crate to the point where rustdoc can take over. The\n+former is a state container used when crawling through a crate to gather its documentation.\n+\n+The main process of crate crawling is done in `clean/mod.rs` through several implementations of the\n+`Clean` trait defined within. This is a conversion trait, which defines one method:\n+\n+```rust\n+pub trait Clean<T> {\n+    fn clean(&self, cx: &DocContext) -> T;\n+}\n+```\n+\n+`clean/mod.rs` also defines the types for the \"cleaned\" AST used later on to render documentation\n+pages. Each usually accompanies an implementation of `Clean` that takes some AST or HIR type from\n+rustc and converts it into the appropriate \"cleaned\" type. \"Big\" items like modules or associated\n+items may have some extra processing in its `Clean` implementation, but for the most part these\n+impls are straightforward conversions. The \"entry point\" to this module is the `impl Clean<Crate>\n+for visit_ast::RustdocVisitor`, which is called by `run_core` above.\n+\n+You see, I actually lied a little earlier: There's another AST transformation that happens before\n+the events in `clean/mod.rs`.  In `visit_ast.rs` is the type `RustdocVisitor`, which *actually*\n+crawls a `hir::Crate` to get the first intermediate representation, defined in `doctree.rs`. This\n+pass is mainly to get a few intermediate wrappers around the HIR types and to process visibility\n+and inlining. This is where `#[doc(inline)]`, `#[doc(no_inline)]`, and `#[doc(hidden)]` are\n+processed, as well as the logic for whether a `pub use` should get the full page or a \"Reexport\"\n+line in the module page.\n+\n+The other major thing that happens in `clean/mod.rs` is the collection of doc comments and\n+`#[doc=\"\"]` attributes into a separate field of the Attributes struct, present on anything that gets\n+hand-written documentation. This makes it easier to collect this documentation later in the process.\n+\n+The primary output of this process is a clean::Crate with a tree of Items which describe the\n+publicly-documentable items in the target crate.\n+\n+### Hot potato\n+\n+Before moving on to the next major step, a few important \"passes\" occur over the documentation.\n+These do things like combine the separate \"attributes\" into a single string and strip leading\n+whitespace to make the document easier on the markdown parser, or drop items that are not public or\n+deliberately hidden with `#[doc(hidden)]`. These are all implemented in the `passes/` directory, one\n+file per pass. By default, all of these passes are run on a crate, but the ones regarding dropping\n+private/hidden items can be bypassed by passing `--document-private-items` to rustdoc.\n+\n+(Strictly speaking, you can fine-tune the passes run and even add your own, but [we're trying to\n+deprecate that][44136]. If you need finer-grain control over these passes, please let us know!)\n+\n+[44136]: https://github.com/rust-lang/rust/issues/44136\n+\n+## From clean to crate\n+\n+This is where the \"second phase\" in rustdoc begins. This phase primarily lives in the `html/`\n+folder, and it all starts with `run()` in `html/render.rs`. This code is responsible for setting up\n+the `Context`, `SharedContext`, and `Cache` which are used during rendering, copying out the static\n+files which live in every rendered set of documentation (things like the fonts, CSS, and JavaScript\n+that live in `html/static/`), creating the search index, and printing out the source code rendering,\n+before beginning the process of rendering all the documentation for the crate.\n+\n+Several functions implemented directly on `Context` take the `clean::Crate` and set up some state\n+between rendering items or recursing on a module's child items. From here the \"page rendering\"\n+begins, via an enormous `write!()` call in `html/layout.rs`. The parts that actually generate HTML\n+from the items and documentation occurs within a series of `std::fmt::Display` implementations and\n+functions that pass around a `&mut std::fmt::Formatter`. The top-level implementation that writes\n+out the page body is the `impl<'a> fmt::Display for Item<'a>` in `html/render.rs`, which switches\n+out to one of several `item_*` functions based on the kind of `Item` being rendered.\n+\n+Depending on what kind of rendering code you're looking for, you'll probably find it either in\n+`html/render.rs` for major items like \"what sections should I print for a struct page\" or\n+`html/format.rs` for smaller component pieces like \"how should I print a where clause as part of\n+some other item\".\n+\n+Whenever rustdoc comes across an item that should print hand-written documentation alongside, it\n+calls out to `html/markdown.rs` which interfaces with the Markdown parser. This is exposed as a\n+series of types that wrap a string of Markdown, and implement `fmt::Display` to emit HTML text. It\n+takes special care to enable certain features like footnotes and tables and add syntax highlighting\n+to Rust code blocks (via `html/highlight.rs`) before running the Markdown parser. There's also a\n+function in here (`find_testable_code`) that specifically scans for Rust code blocks so the\n+test-runner code can find all the doctests in the crate.\n+\n+### From soup to nuts\n+\n+(alternate title: [\"An unbroken thread that stretches from those first `Cell`s to us\"][video])\n+\n+[video]: https://www.youtube.com/watch?v=hOLAGYmUQV0\n+\n+It's important to note that the AST cleaning can ask the compiler for information (crucially,\n+`DocContext` contains a `TyCtxt`), but page rendering cannot. The `clean::Crate` created within\n+`run_core` is passed outside the compiler context before being handed to `html::render::run`. This\n+means that a lot of the \"supplementary data\" that isn't immediately available inside an item's\n+definition, like which trait is the `Deref` trait used by the language, needs to be collected during\n+cleaning, stored in the `DocContext`, and passed along to the `SharedContext` during HTML rendering.\n+This manifests as a bunch of shared state, context variables, and `RefCell`s.\n+\n+Also of note is that some items that come from \"asking the compiler\" don't go directly into the\n+`DocContext` - for example, when loading items from a foreign crate, rustdoc will ask about trait\n+implementations and generate new `Item`s for the impls based on that information. This goes directly\n+into the returned `Crate` rather than roundabout through the `DocContext`. This way, these\n+implementations can be collected alongside the others, right before rendering the HTML.\n+\n+## Other tricks up its sleeve\n+\n+All this describes the process for generating HTML documentation from a Rust crate, but there are\n+couple other major modes that rustdoc runs in. It can also be run on a standalone Markdown file, or\n+it can run doctests on Rust code or standalone Markdown files. For the former, it shortcuts straight\n+to `html/markdown.rs`, optionally including a mode which inserts a Table of Contents to the output\n+HTML.\n+\n+For the latter, rustdoc runs a similar partial-compilation to get relevant documentation in\n+`test.rs`, but instead of going through the full clean and render process, it runs a much simpler\n+crate walk to grab *just* the hand-written documentation. Combined with the aforementioned\n+\"`find_testable_code`\" in `html/markdown.rs`, it builds up a collection of tests to run before\n+handing them off to the libtest test runner. One notable location in `test.rs` is the function\n+`make_test`, which is where hand-written doctests get transformed into something that can be\n+executed.\n+\n+## Dotting i's and crossing t's\n+\n+So that's rustdoc's code in a nutshell, but there's more things in the repo that deal with it. Since\n+we have the full `compiletest` suite at hand, there's a set of tests in `src/test/rustdoc` that make\n+sure the final HTML is what we expect in various situations. These tests also use a supplementary\n+script, `src/etc/htmldocck.py`, that allows it to look through the final HTML using XPath notation\n+to get a precise look at the output. The full description of all the commands available to rustdoc\n+tests is in `htmldocck.py`.\n+\n+In addition, there are separate tests for the search index and rustdoc's ability to query it. The\n+files in `src/test/rustdoc-js` each contain a different search query and the expected results,\n+broken out by search tab. These files are processed by a script in `src/tools/rustdoc-js` and the\n+Node.js runtime. These tests don't have as thorough of a writeup, but a broad example that features\n+results in all tabs can be found in `basic.js`. The basic idea is that you match a given `QUERY`\n+with a set of `EXPECTED` results, complete with the full item path of each item."}, {"sha": "a7e1c0ce732e0adfdb14eb897216a0f13c2af200", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -299,6 +299,7 @@\n #![feature(rand)]\n #![feature(raw)]\n #![feature(rustc_attrs)]\n+#![feature(stdsimd)]\n #![feature(sip_hash_13)]\n #![feature(slice_bytes)]\n #![feature(slice_concat_ext)]\n@@ -501,6 +502,35 @@ mod memchr;\n // compiler\n pub mod rt;\n \n+// Pull in the the `stdsimd` crate directly into libstd. This is the same as\n+// libcore's arch/simd modules where the source of truth here is in a different\n+// repository, but we pull things in here manually to get it into libstd.\n+//\n+// Note that the #[cfg] here is intended to do two things. First it allows us to\n+// change the rustc implementation of intrinsics in stage0 by not compiling simd\n+// intrinsics in stage0. Next it doesn't compile anything in test mode as\n+// stdsimd has tons of its own tests which we don't want to run.\n+#[path = \"../stdsimd/stdsimd/mod.rs\"]\n+#[allow(missing_debug_implementations, missing_docs, dead_code)]\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(all(not(stage0), not(test)))]\n+mod stdsimd;\n+\n+// A \"fake\" module needed by the `stdsimd` module to compile, not actually\n+// exported though.\n+#[cfg(not(stage0))]\n+mod coresimd {\n+    pub use core::arch;\n+    pub use core::simd;\n+}\n+\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(all(not(stage0), not(test)))]\n+pub use stdsimd::simd;\n+#[unstable(feature = \"stdsimd\", issue = \"48556\")]\n+#[cfg(all(not(stage0), not(test)))]\n+pub use stdsimd::arch;\n+\n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level."}, {"sha": "5dd9c6277509787578573756187752471f0c201e", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -59,7 +59,7 @@ pub use version::UnicodeVersion;\n /// [`to_lowercase`]: ../../std/primitive.char.html#method.to_lowercase\n /// [`char`]: ../../std/primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct ToLowercase(CaseMappingIter);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -81,7 +81,7 @@ impl FusedIterator for ToLowercase {}\n /// [`to_uppercase`]: ../../std/primitive.char.html#method.to_uppercase\n /// [`char`]: ../../std/primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct ToUppercase(CaseMappingIter);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -95,7 +95,7 @@ impl Iterator for ToUppercase {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl FusedIterator for ToUppercase {}\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n enum CaseMappingIter {\n     Three(char, char, char),\n     Two(char, char),"}, {"sha": "058df1d516909f9f8e48e6db56ca78c1d7bd629e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -414,9 +414,6 @@ declare_features! (\n     // Allow trait methods with arbitrary self types\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874)),\n \n-    // #![wasm_import_memory] attribute\n-    (active, wasm_import_memory, \"1.22.0\", None),\n-\n     // `crate` in paths\n     (active, crate_in_paths, \"1.23.0\", Some(45477)),\n \n@@ -985,11 +982,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                                         never be stable\",\n                                                        cfg_fn!(rustc_attrs))),\n \n-    (\"wasm_import_memory\", Whitelisted, Gated(Stability::Unstable,\n-                                 \"wasm_import_memory\",\n-                                 \"wasm_import_memory attribute is currently unstable\",\n-                                 cfg_fn!(wasm_import_memory))),\n-\n     (\"rustc_args_required_const\", Whitelisted, Gated(Stability::Unstable,\n                                  \"rustc_attrs\",\n                                  \"never will be stable\","}, {"sha": "678cbd325c84070c9dbe4303969fbd2734c0b4ee", "filename": "src/stdsimd", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -0,0 +1 @@\n+Subproject commit 678cbd325c84070c9dbe4303969fbd2734c0b4ee"}, {"sha": "4b01afb8131b709d6d9e97b441aef88b32deac6f", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -13,10 +13,10 @@ pub fn main() {\n     let s: String = \"abcdef\".to_string();\n     v[3_usize];\n     v[3];\n-    v[3u8];  //~ERROR : std::ops::Index<u8>` is not satisfied\n-    v[3i8];  //~ERROR : std::ops::Index<i8>` is not satisfied\n-    v[3u32]; //~ERROR : std::ops::Index<u32>` is not satisfied\n-    v[3i32]; //~ERROR : std::ops::Index<i32>` is not satisfied\n+    v[3u8];  //~ERROR : std::slice::SliceIndex<[isize]>` is not satisfied\n+    v[3i8];  //~ERROR : std::slice::SliceIndex<[isize]>` is not satisfied\n+    v[3u32]; //~ERROR : std::slice::SliceIndex<[isize]>` is not satisfied\n+    v[3i32]; //~ERROR : std::slice::SliceIndex<[isize]>` is not satisfied\n     s.as_bytes()[3_usize];\n     s.as_bytes()[3];\n     s.as_bytes()[3u8];  //~ERROR : std::slice::SliceIndex<[u8]>` is not satisfied"}, {"sha": "3616ab9e6c7303b9f8f5283353dae062fa0c68f3", "filename": "src/test/run-pass/issue-15487.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Ftest%2Frun-pass%2Fissue-15487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Ftest%2Frun-pass%2Fissue-15487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15487.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // ignore-windows\n+// ignore-wasm32-bare no libs to link\n \n #![feature(link_args)]\n "}, {"sha": "a010ebb3551d0f7a13c9db60b046a1eb0a841625", "filename": "src/test/ui/feature-gate-wasm_import_memory.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.rs?ref=4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![wasm_import_memory] //~ ERROR: currently unstable\n-\n-fn main() {}\n-"}, {"sha": "0ec502724672ae5fc221ee7288054d382090b6b5", "filename": "src/test/ui/feature-gate-wasm_import_memory.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e4c1b5b325c4c474426a7e3c346c316fbc644f1/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.stderr?ref=4e4c1b5b325c4c474426a7e3c346c316fbc644f1", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: wasm_import_memory attribute is currently unstable\n-  --> $DIR/feature-gate-wasm_import_memory.rs:11:1\n-   |\n-LL | #![wasm_import_memory] //~ ERROR: currently unstable\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(wasm_import_memory)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-If you want more information on this error, try using \"rustc --explain E0658\""}, {"sha": "ae3cd529ac42e499454f1909ed0fb1c34f79838b", "filename": "src/test/ui/index-help.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Ftest%2Fui%2Findex-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Ftest%2Fui%2Findex-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findex-help.stderr?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -1,10 +1,11 @@\n-error[E0277]: the trait bound `std::vec::Vec<{integer}>: std::ops::Index<i32>` is not satisfied\n+error[E0277]: the trait bound `i32: std::slice::SliceIndex<[{integer}]>` is not satisfied\n   --> $DIR/index-help.rs:13:5\n    |\n LL |     x[0i32]; //~ ERROR E0277\n-   |     ^^^^^^^ vector indices are of type `usize` or ranges of `usize`\n+   |     ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |\n-   = help: the trait `std::ops::Index<i32>` is not implemented for `std::vec::Vec<{integer}>`\n+   = help: the trait `std::slice::SliceIndex<[{integer}]>` is not implemented for `i32`\n+   = note: required because of the requirements on the impl of `std::ops::Index<i32>` for `std::vec::Vec<{integer}>`\n \n error: aborting due to previous error\n "}, {"sha": "b87873eaceb75cf9342d5273f01ba2c020f61ca8", "filename": "src/tools/lld", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -0,0 +1 @@\n+Subproject commit b87873eaceb75cf9342d5273f01ba2c020f61ca8"}, {"sha": "5134c869912611ba6fb9e220568189eb4583205c", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df283db4c175d32d7859f981ac67c17669bb1fa8/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=df283db4c175d32d7859f981ac67c17669bb1fa8", "patch": "@@ -50,7 +50,6 @@ pub mod unstable_book;\n \n fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n-        \"src/binaryen\",\n         \"src/dlmalloc\",\n         \"src/jemalloc\",\n         \"src/llvm\",\n@@ -68,9 +67,11 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n         \"src/tools/miri\",\n+        \"src/tools/lld\",\n         \"src/librustc/mir/interpret\",\n         \"src/librustc_mir/interpret\",\n         \"src/target\",\n+        \"src/stdsimd\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}