{"sha": "72a5bb73c1056dcb34fad4af138258603bb36d18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYTViYjczYzEwNTZkY2IzNGZhZDRhZjEzODI1ODYwM2JiMzZkMTg=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2015-08-14T12:20:09Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2016-01-05T10:02:43Z"}, "message": "Move tests around", "tree": {"sha": "67c54999a80f7053fa5381e4af3d09647c889e61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c54999a80f7053fa5381e4af3d09647c889e61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a5bb73c1056dcb34fad4af138258603bb36d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a5bb73c1056dcb34fad4af138258603bb36d18", "html_url": "https://github.com/rust-lang/rust/commit/72a5bb73c1056dcb34fad4af138258603bb36d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a5bb73c1056dcb34fad4af138258603bb36d18/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7899699a4af9c4a286daa148bf17be0a0b740756", "url": "https://api.github.com/repos/rust-lang/rust/commits/7899699a4af9c4a286daa148bf17be0a0b740756", "html_url": "https://github.com/rust-lang/rust/commit/7899699a4af9c4a286daa148bf17be0a0b740756"}], "stats": {"total": 130, "additions": 64, "deletions": 66}, "files": [{"sha": "fe88d51470db85fa4dde7dd62f1112868e892023", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 64, "deletions": 66, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/72a5bb73c1056dcb34fad4af138258603bb36d18/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a5bb73c1056dcb34fad4af138258603bb36d18/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=72a5bb73c1056dcb34fad4af138258603bb36d18", "patch": "@@ -362,38 +362,6 @@ impl<'longer_than_self> Arena<'longer_than_self> {\n     }\n }\n \n-#[test]\n-fn test_arena_destructors() {\n-    let arena = Arena::new();\n-    for i in 0..10 {\n-        // Arena allocate something with drop glue to make sure it\n-        // doesn't leak.\n-        arena.alloc(|| Rc::new(i));\n-        // Allocate something with funny size and alignment, to keep\n-        // things interesting.\n-        arena.alloc(|| [0u8, 1u8, 2u8]);\n-    }\n-}\n-\n-#[test]\n-#[should_panic]\n-fn test_arena_destructors_fail() {\n-    let arena = Arena::new();\n-    // Put some stuff in the arena.\n-    for i in 0..10 {\n-        // Arena allocate something with drop glue to make sure it\n-        // doesn't leak.\n-        arena.alloc(|| Rc::new(i));\n-        // Allocate something with funny size and alignment, to keep\n-        // things interesting.\n-        arena.alloc(|| [0u8, 1, 2]);\n-    }\n-    // Now, panic while allocating\n-    arena.alloc::<Rc<i32>, _>(|| {\n-        panic!();\n-    });\n-}\n-\n /// A faster arena that can hold objects of only one type.\n pub struct TypedArena<T> {\n     /// A pointer to the next object to be allocated.\n@@ -693,40 +661,6 @@ mod tests {\n         }\n     }\n \n-    #[bench]\n-    pub fn bench_noncopy(b: &mut Bencher) {\n-        let arena = TypedArena::new();\n-        b.iter(|| {\n-            arena.alloc(Noncopy {\n-                string: \"hello world\".to_string(),\n-                array: vec![1, 2, 3, 4, 5],\n-            })\n-        })\n-    }\n-\n-    #[bench]\n-    pub fn bench_noncopy_nonarena(b: &mut Bencher) {\n-        b.iter(|| {\n-            let _: Box<_> = Box::new(Noncopy {\n-                string: \"hello world\".to_string(),\n-                array: vec![1, 2, 3, 4, 5],\n-            });\n-        })\n-    }\n-\n-    #[bench]\n-    pub fn bench_noncopy_old_arena(b: &mut Bencher) {\n-        let arena = Arena::new();\n-        b.iter(|| {\n-            arena.alloc(|| {\n-                Noncopy {\n-                    string: \"hello world\".to_string(),\n-                    array: vec![1, 2, 3, 4, 5],\n-                }\n-            })\n-        })\n-    }\n-\n     #[test]\n     pub fn test_typed_arena_zero_sized() {\n         let arena = TypedArena::new();\n@@ -798,4 +732,68 @@ mod tests {\n             }\n         }\n     }\n+\n+    #[test]\n+    fn test_arena_destructors() {\n+        let arena = Arena::new();\n+        for i in 0..10 {\n+            // Arena allocate something with drop glue to make sure it\n+            // doesn't leak.\n+            arena.alloc(|| Rc::new(i));\n+            // Allocate something with funny size and alignment, to keep\n+            // things interesting.\n+            arena.alloc(|| [0u8, 1u8, 2u8]);\n+        }\n+    }\n+\n+    #[test]\n+    #[should_panic]\n+    fn test_arena_destructors_fail() {\n+        let arena = Arena::new();\n+        // Put some stuff in the arena.\n+        for i in 0..10 {\n+            // Arena allocate something with drop glue to make sure it\n+            // doesn't leak.\n+            arena.alloc(|| { Rc::new(i) });\n+            // Allocate something with funny size and alignment, to keep\n+            // things interesting.\n+            arena.alloc(|| { [0u8, 1, 2] });\n+        }\n+        // Now, panic while allocating\n+        arena.alloc::<Rc<i32>, _>(|| {\n+            panic!();\n+        });\n+    }\n+\n+    #[bench]\n+    pub fn bench_noncopy(b: &mut Bencher) {\n+        let arena = TypedArena::new();\n+        b.iter(|| {\n+            arena.alloc(Noncopy {\n+                string: \"hello world\".to_string(),\n+                array: vec!( 1, 2, 3, 4, 5 ),\n+            })\n+        })\n+    }\n+\n+    #[bench]\n+    pub fn bench_noncopy_nonarena(b: &mut Bencher) {\n+        b.iter(|| {\n+            let _: Box<_> = Box::new(Noncopy {\n+                string: \"hello world\".to_string(),\n+                array: vec!( 1, 2, 3, 4, 5 ),\n+            });\n+        })\n+    }\n+\n+    #[bench]\n+    pub fn bench_noncopy_old_arena(b: &mut Bencher) {\n+        let arena = Arena::new();\n+        b.iter(|| {\n+            arena.alloc(|| Noncopy {\n+                string: \"hello world\".to_string(),\n+                array: vec!( 1, 2, 3, 4, 5 ),\n+            })\n+        })\n+    }\n }"}]}