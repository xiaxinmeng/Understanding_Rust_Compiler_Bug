{"sha": "c40919b7a75f93ed7ef040361e82c656d246d41e", "node_id": "C_kwDOAAsO6NoAKGM0MDkxOWI3YTc1ZjkzZWQ3ZWYwNDAzNjFlODJjNjU2ZDI0NmQ0MWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-09T07:08:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-09T07:08:19Z"}, "message": "Auto merge of #106938 - GuillaumeGomez:normalize-projection-field-ty, r=oli-obk\n\nAdd missing normalization for union fields types\n\nOvershadows https://github.com/rust-lang/rust/pull/106808.\nFrom the experiment https://github.com/rust-lang/rust/pull/103985.\n\nIn short, it allows to use projections as a type for union's fields.\n\ncc `@compiler-errors`\nr? `@oli-obk`", "tree": {"sha": "377924acdd0e3fabb3894b64f426b51acf650e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377924acdd0e3fabb3894b64f426b51acf650e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c40919b7a75f93ed7ef040361e82c656d246d41e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c40919b7a75f93ed7ef040361e82c656d246d41e", "html_url": "https://github.com/rust-lang/rust/commit/c40919b7a75f93ed7ef040361e82c656d246d41e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c40919b7a75f93ed7ef040361e82c656d246d41e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7acd078f443156b95cee11759a735db1cfc796e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7acd078f443156b95cee11759a735db1cfc796e", "html_url": "https://github.com/rust-lang/rust/commit/e7acd078f443156b95cee11759a735db1cfc796e"}, {"sha": "6c63b9497dfcd546199db03174ac11866bf3bfb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c63b9497dfcd546199db03174ac11866bf3bfb8", "html_url": "https://github.com/rust-lang/rust/commit/6c63b9497dfcd546199db03174ac11866bf3bfb8"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "5e3601efbbe8edf9b44ab825001d51e4dc8c2cb1", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c40919b7a75f93ed7ef040361e82c656d246d41e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40919b7a75f93ed7ef040361e82c656d246d41e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=c40919b7a75f93ed7ef040361e82c656d246d41e", "patch": "@@ -121,7 +121,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n \n         let param_env = tcx.param_env(item_def_id);\n         for field in &def.non_enum_variant().fields {\n-            let field_ty = field.ty(tcx, substs);\n+            let field_ty = tcx.normalize_erasing_regions(param_env, field.ty(tcx, substs));\n \n             if !allowed_union_field(field_ty, tcx, param_env) {\n                 let (field_span, ty_span) = match tcx.hir().get_if_local(field.did) {"}, {"sha": "b88167b3b5459860e2fe4a12c5ab9df645dbfb57", "filename": "tests/ui/union/projection-as-union-type-error-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Fprojection-as-union-type-error-2.rs?ref=c40919b7a75f93ed7ef040361e82c656d246d41e", "patch": "@@ -0,0 +1,20 @@\n+// Test to ensure that there is no ICE when normalizing a projection\n+// which is invalid (from <https://github.com/rust-lang/rust/pull/106938>).\n+\n+#![crate_type = \"lib\"]\n+\n+trait Identity {\n+    type Identity;\n+}\n+trait NotImplemented {}\n+\n+impl<T: NotImplemented> Identity for T {\n+    type Identity = Self;\n+}\n+\n+type Foo = u8;\n+\n+union Bar {\n+    a: <Foo as Identity>::Identity, //~ ERROR\n+    b: u8,\n+}"}, {"sha": "bab226f271df7e0340e1efb573705eeb73c3f4bc", "filename": "tests/ui/union/projection-as-union-type-error-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Fprojection-as-union-type-error-2.stderr?ref=c40919b7a75f93ed7ef040361e82c656d246d41e", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `u8: NotImplemented` is not satisfied\n+  --> $DIR/projection-as-union-type-error-2.rs:18:8\n+   |\n+LL |     a: <Foo as Identity>::Identity,\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NotImplemented` is not implemented for `u8`\n+   |\n+note: required for `u8` to implement `Identity`\n+  --> $DIR/projection-as-union-type-error-2.rs:11:25\n+   |\n+LL | impl<T: NotImplemented> Identity for T {\n+   |         --------------  ^^^^^^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "17091c35fb230d0cd73d0e6f191cbebebcd38d57", "filename": "tests/ui/union/projection-as-union-type-error.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Fprojection-as-union-type-error.rs?ref=c40919b7a75f93ed7ef040361e82c656d246d41e", "patch": "@@ -0,0 +1,15 @@\n+// Test to ensure that there is no ICE when normalizing a projection\n+// which is invalid (from <https://github.com/rust-lang/rust/pull/106938>).\n+\n+#![crate_type = \"lib\"]\n+\n+pub trait Identity {\n+    type Identity;\n+}\n+\n+pub type Foo = u8;\n+\n+pub union Bar {\n+    a:  <Foo as Identity>::Identity, //~ ERROR\n+    b: u8,\n+}"}, {"sha": "e4fbe9603ad458b916c0be16ad5f0d989b89beb1", "filename": "tests/ui/union/projection-as-union-type-error.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Fprojection-as-union-type-error.stderr?ref=c40919b7a75f93ed7ef040361e82c656d246d41e", "patch": "@@ -0,0 +1,9 @@\n+error[E0277]: the trait bound `u8: Identity` is not satisfied\n+  --> $DIR/projection-as-union-type-error.rs:13:9\n+   |\n+LL |     a:  <Foo as Identity>::Identity,\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Identity` is not implemented for `u8`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "143434c96f88a3a5410a633d7621f4b21f0eb71c", "filename": "tests/ui/union/projection-as-union-type.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c40919b7a75f93ed7ef040361e82c656d246d41e/tests%2Fui%2Funion%2Fprojection-as-union-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Fprojection-as-union-type.rs?ref=c40919b7a75f93ed7ef040361e82c656d246d41e", "patch": "@@ -0,0 +1,19 @@\n+// Ensures that we can use projections as union field's type.\n+// check-pass\n+\n+#![crate_type = \"lib\"]\n+\n+pub trait Identity {\n+    type Identity;\n+}\n+\n+impl<T> Identity for T {\n+    type Identity = Self;\n+}\n+\n+pub type Foo = u8;\n+\n+pub union Bar {\n+    pub a: <Foo as Identity>::Identity,\n+    pub b: u8,\n+}"}]}