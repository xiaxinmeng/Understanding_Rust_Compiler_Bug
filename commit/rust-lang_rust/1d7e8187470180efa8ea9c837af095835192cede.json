{"sha": "1d7e8187470180efa8ea9c837af095835192cede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkN2U4MTg3NDcwMTgwZWZhOGVhOWM4MzdhZjA5NTgzNTE5MmNlZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-21T20:25:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-21T20:25:50Z"}, "message": "Auto merge of #69242 - cjgillot:object_violations, r=Zoxc\n\nQuerify object_safety_violations.\n\nSplit from #69076\n\nr? @Zoxc", "tree": {"sha": "af7304e42b6e4d139a743a9e8da4dcc4d3dff1f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af7304e42b6e4d139a743a9e8da4dcc4d3dff1f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d7e8187470180efa8ea9c837af095835192cede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7e8187470180efa8ea9c837af095835192cede", "html_url": "https://github.com/rust-lang/rust/commit/1d7e8187470180efa8ea9c837af095835192cede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d7e8187470180efa8ea9c837af095835192cede/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa9d2014f4e5258f83b907e8431c59a33acdae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa9d2014f4e5258f83b907e8431c59a33acdae7", "html_url": "https://github.com/rust-lang/rust/commit/8aa9d2014f4e5258f83b907e8431c59a33acdae7"}, {"sha": "310f4707e59f696814e0e800be0b5ec6e81353d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/310f4707e59f696814e0e800be0b5ec6e81353d5", "html_url": "https://github.com/rust-lang/rust/commit/310f4707e59f696814e0e800be0b5ec6e81353d5"}], "stats": {"total": 309, "additions": 153, "deletions": 156}, "files": [{"sha": "02c51a2ebb0e9a6befb7a345695ef9513c7b6bdf", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -661,7 +661,7 @@ rustc_queries! {\n             desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { true }\n         }\n-        query is_object_safe(key: DefId) -> bool {\n+        query object_safety_violations(key: DefId) -> Vec<traits::ObjectSafetyViolation> {\n             desc { |tcx| \"determine object safety of trait `{}`\", tcx.def_path_str(key) }\n         }\n "}, {"sha": "de2ec53e51e788a93d0734309c5b006d6cbb8d55", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -16,8 +16,10 @@ use crate::ty::{self, AdtKind, List, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_span::{Span, DUMMY_SP};\n+use smallvec::SmallVec;\n use syntax::ast;\n \n+use std::borrow::Cow;\n use std::fmt::Debug;\n use std::rc::Rc;\n \n@@ -737,3 +739,133 @@ where\n         tcx: TyCtxt<'tcx>,\n     ) -> Option<Self::LiftedLiteral>;\n }\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+pub enum ObjectSafetyViolation {\n+    /// `Self: Sized` declared on the trait.\n+    SizedSelf(SmallVec<[Span; 1]>),\n+\n+    /// Supertrait reference references `Self` an in illegal location\n+    /// (e.g., `trait Foo : Bar<Self>`).\n+    SupertraitSelf(SmallVec<[Span; 1]>),\n+\n+    /// Method has something illegal.\n+    Method(ast::Name, MethodViolationCode, Span),\n+\n+    /// Associated const.\n+    AssocConst(ast::Name, Span),\n+}\n+\n+impl ObjectSafetyViolation {\n+    pub fn error_msg(&self) -> Cow<'static, str> {\n+        match *self {\n+            ObjectSafetyViolation::SizedSelf(_) => \"it requires `Self: Sized`\".into(),\n+            ObjectSafetyViolation::SupertraitSelf(ref spans) => {\n+                if spans.iter().any(|sp| *sp != DUMMY_SP) {\n+                    \"it uses `Self` as a type parameter in this\".into()\n+                } else {\n+                    \"it cannot use `Self` as a type parameter in a supertrait or `where`-clause\"\n+                        .into()\n+                }\n+            }\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n+                format!(\"associated function `{}` has no `self` parameter\", name).into()\n+            }\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::ReferencesSelfInput(_),\n+                DUMMY_SP,\n+            ) => format!(\"method `{}` references the `Self` type in its parameters\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfInput(_), _) => {\n+                format!(\"method `{}` references the `Self` type in this parameter\", name).into()\n+            }\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfOutput, _) => {\n+                format!(\"method `{}` references the `Self` type in its return type\", name).into()\n+            }\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::WhereClauseReferencesSelf,\n+                _,\n+            ) => {\n+                format!(\"method `{}` references the `Self` type in its `where` clause\", name).into()\n+            }\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) => {\n+                format!(\"method `{}` has generic type parameters\", name).into()\n+            }\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) => {\n+                format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into()\n+            }\n+            ObjectSafetyViolation::AssocConst(name, DUMMY_SP) => {\n+                format!(\"it contains associated `const` `{}`\", name).into()\n+            }\n+            ObjectSafetyViolation::AssocConst(..) => \"it contains this associated `const`\".into(),\n+        }\n+    }\n+\n+    pub fn solution(&self) -> Option<(String, Option<(String, Span)>)> {\n+        Some(match *self {\n+            ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {\n+                return None;\n+            }\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(sugg), _) => (\n+                format!(\n+                    \"consider turning `{}` into a method by giving it a `&self` argument or \\\n+                     constraining it so it does not apply to trait objects\",\n+                    name\n+                ),\n+                sugg.map(|(sugg, sp)| (sugg.to_string(), sp)),\n+            ),\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::UndispatchableReceiver,\n+                span,\n+            ) => (\n+                format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name)\n+                    .into(),\n+                Some((\"&Self\".to_string(), span)),\n+            ),\n+            ObjectSafetyViolation::AssocConst(name, _)\n+            | ObjectSafetyViolation::Method(name, ..) => {\n+                (format!(\"consider moving `{}` to another trait\", name), None)\n+            }\n+        })\n+    }\n+\n+    pub fn spans(&self) -> SmallVec<[Span; 1]> {\n+        // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n+        // diagnostics use a `note` instead of a `span_label`.\n+        match self {\n+            ObjectSafetyViolation::SupertraitSelf(spans)\n+            | ObjectSafetyViolation::SizedSelf(spans) => spans.clone(),\n+            ObjectSafetyViolation::AssocConst(_, span)\n+            | ObjectSafetyViolation::Method(_, _, span)\n+                if *span != DUMMY_SP =>\n+            {\n+                smallvec![*span]\n+            }\n+            _ => smallvec![],\n+        }\n+    }\n+}\n+\n+/// Reasons a method might not be object-safe.\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n+pub enum MethodViolationCode {\n+    /// e.g., `fn foo()`\n+    StaticMethod(Option<(&'static str, Span)>),\n+\n+    /// e.g., `fn foo(&self, x: Self)`\n+    ReferencesSelfInput(usize),\n+\n+    /// e.g., `fn foo(&self) -> Self`\n+    ReferencesSelfOutput,\n+\n+    /// e.g., `fn foo(&self) where Self: Clone`\n+    WhereClauseReferencesSelf,\n+\n+    /// e.g., `fn foo<A>()`\n+    Generic,\n+\n+    /// the method's receiver (`self` argument) can't be dispatched on\n+    UndispatchableReceiver,\n+}"}, {"sha": "a195c944ff28d89ce7d3393233f961ce14e412ea", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -3081,6 +3081,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n         (ident, scope)\n     }\n+\n+    pub fn is_object_safe(self, key: DefId) -> bool {\n+        self.object_safety_violations(key).is_empty()\n+    }\n }\n \n #[derive(Clone, HashStable)]"}, {"sha": "1fa57f1ecf26da6a3346f854fb40ec251df941be", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -78,7 +78,7 @@ const BASE_STRUCT: &[&str] =\n const BASE_TRAIT_DEF: &[&str] = &[\n     label_strs::associated_item_def_ids,\n     label_strs::generics_of,\n-    label_strs::is_object_safe,\n+    label_strs::object_safety_violations,\n     label_strs::predicates_of,\n     label_strs::specialization_graph_of,\n     label_strs::trait_def,"}, {"sha": "359b417b3bf96843dc32bb067595004d2954aa98", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -52,7 +52,6 @@ use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePa\n use crate::infer::opaque_types;\n use crate::infer::{self, SuppressRegionErrors};\n use crate::traits::error_reporting::report_object_safety_error;\n-use crate::traits::object_safety_violations;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n };\n@@ -1618,7 +1617,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let failure_code = trace.cause.as_failure_code(terr);\n         let mut diag = match failure_code {\n             FailureCode::Error0038(did) => {\n-                let violations = object_safety_violations(self.tcx, did);\n+                let violations = self.tcx.object_safety_violations(did);\n                 report_object_safety_error(self.tcx, span, did, violations)\n             }\n             FailureCode::Error0317(failure_str) => {"}, {"sha": "2fc7c17897739f1a4befce0912ab0e32c946b9ee", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -12,7 +12,6 @@ use super::{\n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n-use crate::traits::object_safety_violations;\n use rustc::mir::interpret::ErrorHandled;\n use rustc::session::DiagnosticMessageId;\n use rustc::ty::error::ExpectedFound;\n@@ -748,7 +747,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n \n                     ty::Predicate::ObjectSafe(trait_def_id) => {\n-                        let violations = object_safety_violations(self.tcx, trait_def_id);\n+                        let violations = self.tcx.object_safety_violations(trait_def_id);\n                         report_object_safety_error(self.tcx, span, trait_def_id, violations)\n                     }\n \n@@ -912,7 +911,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n \n             TraitNotObjectSafe(did) => {\n-                let violations = object_safety_violations(self.tcx, did);\n+                let violations = self.tcx.object_safety_violations(did);\n                 report_object_safety_error(self.tcx, span, did, violations)\n             }\n "}, {"sha": "f1206ddf909a62f4a7bee48b00a911e6104e2570", "filename": "src/librustc_infer/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -5,7 +5,6 @@ use super::{\n \n use crate::infer::InferCtxt;\n use crate::traits::error_reporting::suggest_constraining_type_param;\n-use crate::traits::object_safety::object_safety_violations;\n \n use rustc::ty::TypeckTables;\n use rustc::ty::{self, AdtKind, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n@@ -587,7 +586,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // If the `dyn Trait` is not object safe, do not suggest `Box<dyn Trait>`.\n                 predicates\n                     .principal_def_id()\n-                    .map_or(true, |def_id| object_safety_violations(self.tcx, def_id).is_empty())\n+                    .map_or(true, |def_id| self.tcx.object_safety_violations(def_id).is_empty())\n             }\n             // We only want to suggest `impl Trait` to `dyn Trait`s.\n             // For example, `fn foo() -> str` needs to be filtered out."}, {"sha": "fcaab093ee240036fe3dbba0669cf9b9fdcd0645", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -47,7 +47,6 @@ pub use self::engine::{TraitEngine, TraitEngineExt};\n pub use self::fulfill::{FulfillmentContext, PendingPredicateObligation};\n pub use self::object_safety::astconv_object_safety_violations;\n pub use self::object_safety::is_vtable_safe_method;\n-pub use self::object_safety::object_safety_violations;\n pub use self::object_safety::MethodViolationCode;\n pub use self::object_safety::ObjectSafetyViolation;\n pub use self::on_unimplemented::{OnUnimplementedDirective, OnUnimplementedNote};\n@@ -636,8 +635,8 @@ impl<'tcx> TraitObligation<'tcx> {\n }\n \n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+    object_safety::provide(providers);\n     *providers = ty::query::Providers {\n-        is_object_safe: object_safety::is_object_safe_provider,\n         specialization_graph_of: specialize::specialization_graph_provider,\n         specializes: specialize::specializes,\n         codegen_fulfill_obligation: codegen::codegen_fulfill_obligation,"}, {"sha": "f5bab7cfac9767ac469dc5fd07af40639065f661", "filename": "src/librustc_infer/traits/object_safety.rs", "status": "modified", "additions": 7, "deletions": 140, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_infer%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fobject_safety.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -19,142 +19,12 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{Span, DUMMY_SP};\n-use smallvec::{smallvec, SmallVec};\n-use syntax::ast;\n+use rustc_span::Span;\n+use smallvec::SmallVec;\n \n-use std::borrow::Cow;\n-use std::iter::{self};\n+use std::iter;\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum ObjectSafetyViolation {\n-    /// `Self: Sized` declared on the trait.\n-    SizedSelf(SmallVec<[Span; 1]>),\n-\n-    /// Supertrait reference references `Self` an in illegal location\n-    /// (e.g., `trait Foo : Bar<Self>`).\n-    SupertraitSelf(SmallVec<[Span; 1]>),\n-\n-    /// Method has something illegal.\n-    Method(ast::Name, MethodViolationCode, Span),\n-\n-    /// Associated const.\n-    AssocConst(ast::Name, Span),\n-}\n-\n-impl ObjectSafetyViolation {\n-    pub fn error_msg(&self) -> Cow<'static, str> {\n-        match *self {\n-            ObjectSafetyViolation::SizedSelf(_) => \"it requires `Self: Sized`\".into(),\n-            ObjectSafetyViolation::SupertraitSelf(ref spans) => {\n-                if spans.iter().any(|sp| *sp != DUMMY_SP) {\n-                    \"it uses `Self` as a type parameter in this\".into()\n-                } else {\n-                    \"it cannot use `Self` as a type parameter in a supertrait or `where`-clause\"\n-                        .into()\n-                }\n-            }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n-                format!(\"associated function `{}` has no `self` parameter\", name).into()\n-            }\n-            ObjectSafetyViolation::Method(\n-                name,\n-                MethodViolationCode::ReferencesSelfInput(_),\n-                DUMMY_SP,\n-            ) => format!(\"method `{}` references the `Self` type in its parameters\", name).into(),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfInput(_), _) => {\n-                format!(\"method `{}` references the `Self` type in this parameter\", name).into()\n-            }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfOutput, _) => {\n-                format!(\"method `{}` references the `Self` type in its return type\", name).into()\n-            }\n-            ObjectSafetyViolation::Method(\n-                name,\n-                MethodViolationCode::WhereClauseReferencesSelf,\n-                _,\n-            ) => {\n-                format!(\"method `{}` references the `Self` type in its `where` clause\", name).into()\n-            }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) => {\n-                format!(\"method `{}` has generic type parameters\", name).into()\n-            }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) => {\n-                format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into()\n-            }\n-            ObjectSafetyViolation::AssocConst(name, DUMMY_SP) => {\n-                format!(\"it contains associated `const` `{}`\", name).into()\n-            }\n-            ObjectSafetyViolation::AssocConst(..) => \"it contains this associated `const`\".into(),\n-        }\n-    }\n-\n-    pub fn solution(&self) -> Option<(String, Option<(String, Span)>)> {\n-        Some(match *self {\n-            ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {\n-                return None;\n-            }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(sugg), _) => (\n-                format!(\n-                    \"consider turning `{}` into a method by giving it a `&self` argument or \\\n-                     constraining it so it does not apply to trait objects\",\n-                    name\n-                ),\n-                sugg.map(|(sugg, sp)| (sugg.to_string(), sp)),\n-            ),\n-            ObjectSafetyViolation::Method(\n-                name,\n-                MethodViolationCode::UndispatchableReceiver,\n-                span,\n-            ) => (\n-                format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name)\n-                    .into(),\n-                Some((\"&Self\".to_string(), span)),\n-            ),\n-            ObjectSafetyViolation::AssocConst(name, _)\n-            | ObjectSafetyViolation::Method(name, ..) => {\n-                (format!(\"consider moving `{}` to another trait\", name), None)\n-            }\n-        })\n-    }\n-\n-    pub fn spans(&self) -> SmallVec<[Span; 1]> {\n-        // When `span` comes from a separate crate, it'll be `DUMMY_SP`. Treat it as `None` so\n-        // diagnostics use a `note` instead of a `span_label`.\n-        match self {\n-            ObjectSafetyViolation::SupertraitSelf(spans)\n-            | ObjectSafetyViolation::SizedSelf(spans) => spans.clone(),\n-            ObjectSafetyViolation::AssocConst(_, span)\n-            | ObjectSafetyViolation::Method(_, _, span)\n-                if *span != DUMMY_SP =>\n-            {\n-                smallvec![*span]\n-            }\n-            _ => smallvec![],\n-        }\n-    }\n-}\n-\n-/// Reasons a method might not be object-safe.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum MethodViolationCode {\n-    /// e.g., `fn foo()`\n-    StaticMethod(Option<(&'static str, Span)>),\n-\n-    /// e.g., `fn foo(&self, x: Self)`\n-    ReferencesSelfInput(usize),\n-\n-    /// e.g., `fn foo(&self) -> Self`\n-    ReferencesSelfOutput,\n-\n-    /// e.g., `fn foo(&self) where Self: Clone`\n-    WhereClauseReferencesSelf,\n-\n-    /// e.g., `fn foo<A>()`\n-    Generic,\n-\n-    /// the method's receiver (`self` argument) can't be dispatched on\n-    UndispatchableReceiver,\n-}\n+pub use crate::traits::{MethodViolationCode, ObjectSafetyViolation};\n \n /// Returns the object safety violations that affect\n /// astconv -- currently, `Self` in supertraits. This is needed\n@@ -176,10 +46,7 @@ pub fn astconv_object_safety_violations(\n     violations\n }\n \n-pub fn object_safety_violations(\n-    tcx: TyCtxt<'_>,\n-    trait_def_id: DefId,\n-) -> Vec<ObjectSafetyViolation> {\n+fn object_safety_violations(tcx: TyCtxt<'_>, trait_def_id: DefId) -> Vec<ObjectSafetyViolation> {\n     debug_assert!(tcx.generics_of(trait_def_id).has_self);\n     debug!(\"object_safety_violations: {:?}\", trait_def_id);\n \n@@ -905,6 +772,6 @@ fn contains_illegal_self_type_reference<'tcx>(\n     error\n }\n \n-pub(super) fn is_object_safe_provider(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n-    object_safety_violations(tcx, trait_def_id).is_empty()\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n+    *providers = ty::query::Providers { object_safety_violations, ..*providers };\n }"}, {"sha": "a67ceb856ce0cf9b0134b13ffb5e1d7c6b06650d", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -45,7 +45,6 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_infer::traits;\n use rustc_infer::traits::error_reporting::report_object_safety_error;\n-use rustc_infer::traits::object_safety_violations;\n use rustc_span::Span;\n use syntax::ast;\n \n@@ -517,7 +516,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n     }\n \n     fn report_object_unsafe_cast(&self, fcx: &FnCtxt<'a, 'tcx>, did: DefId) {\n-        let violations = object_safety_violations(fcx.tcx, did);\n+        let violations = fcx.tcx.object_safety_violations(did);\n         let mut err = report_object_safety_error(fcx.tcx, self.cast_span, did, violations);\n         err.note(&format!(\"required by cast to type '{}'\", fcx.ty_to_string(self.cast_ty)));\n         err.emit();"}, {"sha": "3720b74d92e07ad403f83e0598779efd5c7f737c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -66,7 +66,6 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n-use rustc_infer::traits::object_safety_violations;\n use rustc_infer::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n@@ -1404,7 +1403,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         // Are of this `impl Trait`'s traits object safe?\n                         is_object_safe = bounds.iter().all(|bound| {\n                             bound.trait_def_id().map_or(false, |def_id| {\n-                                object_safety_violations(fcx.tcx, def_id).is_empty()\n+                                fcx.tcx.object_safety_violations(def_id).is_empty()\n                             })\n                         })\n                     }"}, {"sha": "12e6087dbafd6f8b8f28e1c16608f1d275d744e0", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7e8187470180efa8ea9c837af095835192cede/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=1d7e8187470180efa8ea9c837af095835192cede", "patch": "@@ -223,7 +223,7 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n         _ => {}\n     }\n     if !trait_should_be_self.is_empty() {\n-        if rustc_infer::traits::object_safety_violations(tcx, trait_def_id).is_empty() {\n+        if tcx.object_safety_violations(trait_def_id).is_empty() {\n             return;\n         }\n         let sugg = trait_should_be_self.iter().map(|span| (*span, \"Self\".to_string())).collect();"}]}