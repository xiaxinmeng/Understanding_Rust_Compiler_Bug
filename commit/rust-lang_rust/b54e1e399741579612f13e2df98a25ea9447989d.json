{"sha": "b54e1e399741579612f13e2df98a25ea9447989d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NGUxZTM5OTc0MTU3OTYxMmYxM2UyZGY5OGEyNWVhOTQ0Nzk4OWQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-06T05:42:45Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-13T09:40:28Z"}, "message": "Differentiate between monotonic and non-monotonic expansion and\nonly assign node ids during monotonic expansion.", "tree": {"sha": "6663013cac173001b1d084c95730675bd57b4fcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6663013cac173001b1d084c95730675bd57b4fcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b54e1e399741579612f13e2df98a25ea9447989d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b54e1e399741579612f13e2df98a25ea9447989d", "html_url": "https://github.com/rust-lang/rust/commit/b54e1e399741579612f13e2df98a25ea9447989d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b54e1e399741579612f13e2df98a25ea9447989d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c00398780db6f59ebf43e765fa9368dad436d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/78c00398780db6f59ebf43e765fa9368dad436d2", "html_url": "https://github.com/rust-lang/rust/commit/78c00398780db6f59ebf43e765fa9368dad436d2"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "fb4816d3847ed772a60ea54553d3f8826a194d44", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b54e1e399741579612f13e2df98a25ea9447989d", "patch": "@@ -549,7 +549,13 @@ impl<'a> ExtCtxt<'a> {\n \n     /// Returns a `Folder` for deeply expanding all macros in an AST node.\n     pub fn expander<'b>(&'b mut self) -> expand::MacroExpander<'b, 'a> {\n-        expand::MacroExpander::new(self, false, false)\n+        expand::MacroExpander::new(self, false)\n+    }\n+\n+    /// Returns a `Folder` that deeply expands all macros and assigns all node ids in an AST node.\n+    /// Once node ids are assigned, the node may not be expanded, removed, or otherwise modified.\n+    pub fn monotonic_expander<'b>(&'b mut self) -> expand::MacroExpander<'b, 'a> {\n+        expand::MacroExpander::new(self, true)\n     }\n \n     pub fn new_parser_from_tts(&self, tts: &[tokenstream::TokenTree])"}, {"sha": "62e299684b7602929435a15d63f04bb4ee1f87f2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b54e1e399741579612f13e2df98a25ea9447989d", "patch": "@@ -175,16 +175,16 @@ pub struct MacroExpander<'a, 'b:'a> {\n     pub cx: &'a mut ExtCtxt<'b>,\n     pub single_step: bool,\n     pub keep_macs: bool,\n+    monotonic: bool, // c.f. `cx.monotonic_expander()`\n }\n \n impl<'a, 'b> MacroExpander<'a, 'b> {\n-    pub fn new(cx: &'a mut ExtCtxt<'b>,\n-               single_step: bool,\n-               keep_macs: bool) -> MacroExpander<'a, 'b> {\n+    pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n         MacroExpander {\n             cx: cx,\n-            single_step: single_step,\n-            keep_macs: keep_macs\n+            monotonic: monotonic,\n+            single_step: false,\n+            keep_macs: false,\n         }\n     }\n \n@@ -245,7 +245,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         self.cx.current_expansion = orig_expansion_data;\n \n-        let mut placeholder_expander = PlaceholderExpander::new(self.cx);\n+        let mut placeholder_expander = PlaceholderExpander::new(self.cx, self.monotonic);\n         while let Some(expansions) = expansions.pop() {\n             for (mark, expansion) in expansions.into_iter().rev() {\n                 let expansion = expansion.fold_with(&mut placeholder_expander);\n@@ -268,6 +268,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 },\n                 cx: self.cx,\n                 invocations: Vec::new(),\n+                monotonic: self.monotonic,\n             };\n             (expansion.fold_with(&mut collector), collector.invocations)\n         };\n@@ -450,6 +451,7 @@ struct InvocationCollector<'a, 'b: 'a> {\n     cx: &'a mut ExtCtxt<'b>,\n     cfg: StripUnconfigured<'a>,\n     invocations: Vec<Invocation>,\n+    monotonic: bool,\n }\n \n macro_rules! fully_configure {\n@@ -709,8 +711,12 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     }\n \n     fn new_id(&mut self, id: ast::NodeId) -> ast::NodeId {\n-        assert_eq!(id, ast::DUMMY_NODE_ID);\n-        self.cx.resolver.next_node_id()\n+        if self.monotonic {\n+            assert_eq!(id, ast::DUMMY_NODE_ID);\n+            self.cx.resolver.next_node_id()\n+        } else {\n+            id\n+        }\n     }\n }\n \n@@ -763,7 +769,7 @@ pub fn expand_crate(cx: &mut ExtCtxt,\n                     user_exts: Vec<NamedSyntaxExtension>,\n                     c: Crate) -> Crate {\n     cx.initialize(user_exts, &c);\n-    cx.expander().expand_crate(c)\n+    cx.monotonic_expander().expand_crate(c)\n }\n \n // Expands crate using supplied MacroExpander - allows for"}, {"sha": "47f366a88768ecc45565ef0ed2cab495da1c13a1", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=b54e1e399741579612f13e2df98a25ea9447989d", "patch": "@@ -75,13 +75,15 @@ pub fn macro_scope_placeholder() -> Expansion {\n pub struct PlaceholderExpander<'a, 'b: 'a> {\n     expansions: HashMap<ast::NodeId, Expansion>,\n     cx: &'a mut ExtCtxt<'b>,\n+    monotonic: bool,\n }\n \n impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n-    pub fn new(cx: &'a mut ExtCtxt<'b>) -> Self {\n+    pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {\n         PlaceholderExpander {\n             cx: cx,\n             expansions: HashMap::new(),\n+            monotonic: monotonic,\n         }\n     }\n \n@@ -182,13 +184,15 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n                     // which shares a HIR node with the expression itself.\n                     ast::StmtKind::Expr(ref expr) if remaining_stmts == 0 => stmt.id = expr.id,\n \n-                    _ => {\n+                    _ if self.monotonic => {\n                         assert_eq!(stmt.id, ast::DUMMY_NODE_ID);\n                         stmt.id = self.cx.resolver.next_node_id();\n                     }\n+\n+                    _ => {}\n                 }\n \n-                if !macros.is_empty() {\n+                if self.monotonic && !macros.is_empty() {\n                     let macros = mem::replace(&mut macros, Vec::new());\n                     self.cx.resolver.add_expansions_at_stmt(stmt.id, macros);\n                 }"}, {"sha": "6327e8f71bcd5f211dff79f24754a3974ff1e3cd", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=b54e1e399741579612f13e2df98a25ea9447989d", "patch": "@@ -257,7 +257,7 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n     };\n \n     let sym = token::gensym_ident(\"__test_reexports\");\n-    let it = cx.ext_cx.expander().fold_item(P(ast::Item {\n+    let it = cx.ext_cx.monotonic_expander().fold_item(P(ast::Item {\n         ident: sym.clone(),\n         attrs: Vec::new(),\n         id: ast::DUMMY_NODE_ID,\n@@ -512,7 +512,7 @@ fn mk_test_module(cx: &mut TestCtxt) -> (P<ast::Item>, Option<P<ast::Item>>) {\n     let item_ = ast::ItemKind::Mod(testmod);\n     let mod_ident = token::gensym_ident(\"__test\");\n \n-    let mut expander = cx.ext_cx.expander();\n+    let mut expander = cx.ext_cx.monotonic_expander();\n     let item = expander.fold_item(P(ast::Item {\n         id: ast::DUMMY_NODE_ID,\n         ident: mod_ident,"}, {"sha": "ce3e53cdf97f4ec7382da1842b4cc037114b77bd", "filename": "src/libsyntax_ext/rustc_macro_registrar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax_ext%2Frustc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54e1e399741579612f13e2df98a25ea9447989d/src%2Flibsyntax_ext%2Frustc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Frustc_macro_registrar.rs?ref=b54e1e399741579612f13e2df98a25ea9447989d", "patch": "@@ -273,5 +273,5 @@ fn mk_registrar(cx: &mut ExtCtxt,\n         i\n     });\n \n-    cx.expander().fold_item(module).pop().unwrap()\n+    cx.monotonic_expander().fold_item(module).pop().unwrap()\n }"}]}