{"sha": "b308a8c036bcc90cf294c84a1d43b80f7223066c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMDhhOGMwMzZiY2M5MGNmMjk0Yzg0YTFkNDNiODBmNzIyMzA2NmM=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-03-28T16:11:08Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-03-29T08:04:00Z"}, "message": "Avoid linking to itself in implementors section of trait page", "tree": {"sha": "9ca58f2b1da315be7860cf18efef76e3bc7ba468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca58f2b1da315be7860cf18efef76e3bc7ba468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b308a8c036bcc90cf294c84a1d43b80f7223066c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b308a8c036bcc90cf294c84a1d43b80f7223066c", "html_url": "https://github.com/rust-lang/rust/commit/b308a8c036bcc90cf294c84a1d43b80f7223066c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b308a8c036bcc90cf294c84a1d43b80f7223066c/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a11129701c873d96fe0816e4c8b55510efebe96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a11129701c873d96fe0816e4c8b55510efebe96e", "html_url": "https://github.com/rust-lang/rust/commit/a11129701c873d96fe0816e4c8b55510efebe96e"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "5020b93d925d9217bf10c2bd1b03a00582c58c99", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b308a8c036bcc90cf294c84a1d43b80f7223066c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b308a8c036bcc90cf294c84a1d43b80f7223066c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b308a8c036bcc90cf294c84a1d43b80f7223066c", "patch": "@@ -1505,6 +1505,13 @@ impl Type {\n             _ => None,\n         }\n     }\n+\n+    pub fn trait_name(&self) -> Option<String> {\n+        match *self {\n+            ResolvedPath { ref path, .. } => Some(path.last_name()),\n+            _ => None,\n+        }\n+    }\n }\n \n impl GetDefId for Type {\n@@ -1994,6 +2001,10 @@ impl Path {\n             }]\n         }\n     }\n+\n+    pub fn last_name(&self) -> String {\n+        self.segments.last().unwrap().name.clone()\n+    }\n }\n \n impl Clean<Path> for hir::Path {"}, {"sha": "015f5c91a65df5cdae80e7b9ad972e9c643c7ec3", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b308a8c036bcc90cf294c84a1d43b80f7223066c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b308a8c036bcc90cf294c84a1d43b80f7223066c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=b308a8c036bcc90cf294c84a1d43b80f7223066c", "patch": "@@ -561,19 +561,33 @@ impl fmt::Display for clean::Type {\n     }\n }\n \n+fn fmt_impl(i: &clean::Impl, f: &mut fmt::Formatter, link_trait: bool) -> fmt::Result {\n+    write!(f, \"impl{} \", i.generics)?;\n+    if let Some(ref ty) = i.trait_ {\n+        write!(f, \"{}\",\n+               if i.polarity == Some(clean::ImplPolarity::Negative) { \"!\" } else { \"\" })?;\n+        if link_trait {\n+            write!(f, \"{}\", *ty)?;\n+        } else {\n+            write!(f, \"{}\", ty.trait_name().unwrap())?;\n+        }\n+        write!(f, \" for \")?;\n+    }\n+    write!(f, \"{}{}\", i.for_, WhereClause(&i.generics))?;\n+    Ok(())\n+}\n+\n impl fmt::Display for clean::Impl {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"impl{} \", self.generics)?;\n-        if let Some(ref ty) = self.trait_ {\n-            write!(f, \"{}{} for \",\n-                   if self.polarity == Some(clean::ImplPolarity::Negative) { \"!\" } else { \"\" },\n-                   *ty)?;\n-        }\n-        write!(f, \"{}{}\", self.for_, WhereClause(&self.generics))?;\n-        Ok(())\n+        fmt_impl(self, f, true)\n     }\n }\n \n+// The difference from above is that trait is not hyperlinked.\n+pub fn fmt_impl_for_trait_page(i: &clean::Impl, f: &mut fmt::Formatter) -> fmt::Result {\n+    fmt_impl(i, f, false)\n+}\n+\n impl fmt::Display for clean::Arguments {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         for (i, input) in self.values.iter().enumerate() {\n@@ -667,7 +681,7 @@ impl fmt::Display for clean::Import {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             clean::SimpleImport(ref name, ref src) => {\n-                if *name == src.path.segments.last().unwrap().name {\n+                if *name == src.path.last_name() {\n                     write!(f, \"use {};\", *src)\n                 } else {\n                     write!(f, \"use {} as {};\", *src, *name)"}, {"sha": "042d9f011e9a2eae2bc1ee04f71c6f9dc8ed5775", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b308a8c036bcc90cf294c84a1d43b80f7223066c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b308a8c036bcc90cf294c84a1d43b80f7223066c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b308a8c036bcc90cf294c84a1d43b80f7223066c", "patch": "@@ -69,6 +69,7 @@ use html::escape::Escape;\n use html::format::{ConstnessSpace};\n use html::format::{TyParamBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n+use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n use html::markdown::{self, Markdown};\n use html::{highlight, layout};\n@@ -2006,7 +2007,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     match cache.implementors.get(&it.def_id) {\n         Some(implementors) => {\n             for i in implementors {\n-                writeln!(w, \"<li><code>{}</code></li>\", i.impl_)?;\n+                write!(w, \"<li><code>\")?;\n+                fmt_impl_for_trait_page(&i.impl_, w)?;\n+                writeln!(w, \"</code></li>\")?;\n             }\n         }\n         None => {}"}]}