{"sha": "c59d10ab35f69d34c9e1ada34db43157467aced5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OWQxMGFiMzVmNjlkMzRjOWUxYWRhMzRkYjQzMTU3NDY3YWNlZDU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-21T16:35:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-21T16:35:21Z"}, "message": "Merge #2635\n\n2635: Remove import source map r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2d432efaf61acd53adc8cf0f78f4ed60f1fa758c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d432efaf61acd53adc8cf0f78f4ed60f1fa758c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c59d10ab35f69d34c9e1ada34db43157467aced5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/knJCRBK7hj4Ov3rIwAAdHIIAJOT7tb+MSQlvYZpJu7HkFUB\ngZPkuUJsGezQsaVUcmwwpdgeo4wpY5ToWUH6UA0qINvwFuvMJKOp8mdWyP1E1cbk\nHkOkLKMXU//Pcn8x9xVaqTFY9rZSXejufVG0MaBkEvwzP/pyrSivgP8LvzksudgL\nhEd/hzsGzXlG5jpmxY4YjoA0xkbK7uIRdjdu08CYxI9w67kITRwZGHH1ymPvocjr\n2nEh+ow2LtB4424Q2Peb5Xw86U9KB+Dq1EaMc2UbeLlkd0XQWD6tEf5NCoWh/Mlw\n4L+VVbHPLNQjIphU5pLgXcPvgjwow9cOlLvbEFBqOHWuyar26ZFzvh59Ubve3ns=\n=Nqsu\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d432efaf61acd53adc8cf0f78f4ed60f1fa758c\nparent 6d8a2ec3dd350541d7c0e5aa08795a42c4dbd8f8\nparent 1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576946121 +0000\ncommitter GitHub <noreply@github.com> 1576946121 +0000\n\nMerge #2635\n\n2635: Remove import source map r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c59d10ab35f69d34c9e1ada34db43157467aced5", "html_url": "https://github.com/rust-lang/rust/commit/c59d10ab35f69d34c9e1ada34db43157467aced5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c59d10ab35f69d34c9e1ada34db43157467aced5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d8a2ec3dd350541d7c0e5aa08795a42c4dbd8f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8a2ec3dd350541d7c0e5aa08795a42c4dbd8f8", "html_url": "https://github.com/rust-lang/rust/commit/6d8a2ec3dd350541d7c0e5aa08795a42c4dbd8f8"}, {"sha": "1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "html_url": "https://github.com/rust-lang/rust/commit/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2"}], "stats": {"total": 150, "additions": 43, "deletions": 107}, "files": [{"sha": "f5ffd64fa7b17622250d204d26ebf855fad4295b", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=c59d10ab35f69d34c9e1ada34db43157467aced5", "patch": "@@ -4,8 +4,8 @@ pub use hir_def::db::{\n     BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, CrateLangItemsQuery,\n     DefDatabase, DefDatabaseStorage, DocumentationQuery, EnumDataQuery, ExprScopesQuery,\n     FunctionDataQuery, GenericParamsQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage,\n-    LangItemQuery, ModuleLangItemsQuery, RawItemsQuery, RawItemsWithSourceMapQuery,\n-    StaticDataQuery, StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n+    LangItemQuery, ModuleLangItemsQuery, RawItemsQuery, StaticDataQuery, StructDataQuery,\n+    TraitDataQuery, TypeAliasDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,"}, {"sha": "c55fd411107f9baca6fa9d569c6318a7aebbaa35", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=c59d10ab35f69d34c9e1ada34db43157467aced5", "patch": "@@ -13,10 +13,7 @@ use crate::{\n     docs::Documentation,\n     generics::GenericParams,\n     lang_item::{LangItemTarget, LangItems},\n-    nameres::{\n-        raw::{ImportSourceMap, RawItems},\n-        CrateDefMap,\n-    },\n+    nameres::{raw::RawItems, CrateDefMap},\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, FunctionId, FunctionLoc,\n     GenericDefId, ImplId, ImplLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n     TraitLoc, TypeAliasId, TypeAliasLoc, UnionId, UnionLoc,\n@@ -46,12 +43,6 @@ pub trait InternDatabase: SourceDatabase {\n \n #[salsa::query_group(DefDatabaseStorage)]\n pub trait DefDatabase: InternDatabase + AstDatabase {\n-    #[salsa::invoke(RawItems::raw_items_with_source_map_query)]\n-    fn raw_items_with_source_map(\n-        &self,\n-        file_id: HirFileId,\n-    ) -> (Arc<RawItems>, Arc<ImportSourceMap>);\n-\n     #[salsa::invoke(RawItems::raw_items_query)]\n     fn raw_items(&self, file_id: HirFileId) -> Arc<RawItems>;\n "}, {"sha": "9e082c5f741d32dc3cf0a5e5d7339166adfc43bf", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=c59d10ab35f69d34c9e1ada34db43157467aced5", "patch": "@@ -5,7 +5,7 @@ use hir_expand::name::Name;\n use once_cell::sync::Lazy;\n use rustc_hash::FxHashMap;\n \n-use crate::{per_ns::PerNs, BuiltinType, ImplId, LocalImportId, MacroDefId, ModuleDefId, TraitId};\n+use crate::{per_ns::PerNs, BuiltinType, ImplId, MacroDefId, ModuleDefId, TraitId};\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ItemScope {\n@@ -30,7 +30,7 @@ static BUILTIN_SCOPE: Lazy<FxHashMap<Name, Resolution>> = Lazy::new(|| {\n     BuiltinType::ALL\n         .iter()\n         .map(|(name, ty)| {\n-            (name.clone(), Resolution { def: PerNs::types(ty.clone().into()), import: None })\n+            (name.clone(), Resolution { def: PerNs::types(ty.clone().into()), import: false })\n         })\n         .collect()\n });\n@@ -54,7 +54,7 @@ impl ItemScope {\n \n     pub fn declarations(&self) -> impl Iterator<Item = ModuleDefId> + '_ {\n         self.entries()\n-            .filter_map(|(_name, res)| if res.import.is_none() { Some(res.def) } else { None })\n+            .filter_map(|(_name, res)| if !res.import { Some(res.def) } else { None })\n             .flat_map(|per_ns| {\n                 per_ns.take_types().into_iter().chain(per_ns.take_values().into_iter())\n             })\n@@ -112,36 +112,27 @@ impl ItemScope {\n         self.legacy_macros.insert(name, mac);\n     }\n \n-    pub(crate) fn push_res(\n-        &mut self,\n-        name: Name,\n-        res: &Resolution,\n-        import: Option<LocalImportId>,\n-    ) -> bool {\n+    pub(crate) fn push_res(&mut self, name: Name, res: &Resolution, import: bool) -> bool {\n         let mut changed = false;\n         let existing = self.items.entry(name.clone()).or_default();\n \n         if existing.def.types.is_none() && res.def.types.is_some() {\n             existing.def.types = res.def.types;\n-            existing.import = import.or(res.import);\n+            existing.import = import || res.import;\n             changed = true;\n         }\n         if existing.def.values.is_none() && res.def.values.is_some() {\n             existing.def.values = res.def.values;\n-            existing.import = import.or(res.import);\n+            existing.import = import || res.import;\n             changed = true;\n         }\n         if existing.def.macros.is_none() && res.def.macros.is_some() {\n             existing.def.macros = res.def.macros;\n-            existing.import = import.or(res.import);\n+            existing.import = import || res.import;\n             changed = true;\n         }\n \n-        if existing.def.is_none()\n-            && res.def.is_none()\n-            && existing.import.is_none()\n-            && res.import.is_some()\n-        {\n+        if existing.def.is_none() && res.def.is_none() && !existing.import && res.import {\n             existing.import = res.import;\n         }\n         changed\n@@ -160,6 +151,5 @@ impl ItemScope {\n pub struct Resolution {\n     /// None for unresolved\n     pub def: PerNs,\n-    /// ident by which this is imported into local scope.\n-    pub(crate) import: Option<LocalImportId>,\n+    pub(crate) import: bool,\n }"}, {"sha": "f6c7f38d171c2e06812bc79f8de962672966951c", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=c59d10ab35f69d34c9e1ada34db43157467aced5", "patch": "@@ -51,10 +51,6 @@ use ra_syntax::{ast, AstNode};\n use crate::body::Expander;\n use crate::builtin_type::BuiltinType;\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct LocalImportId(RawId);\n-impl_arena_id!(LocalImportId);\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n     pub krate: CrateId,"}, {"sha": "2b194f4881b594968cac11662eb920939d1b2437", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c59d10ab35f69d34c9e1ada34db43157467aced5", "patch": "@@ -26,8 +26,7 @@ use crate::{\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     AdtId, AstId, ConstLoc, ContainerId, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n-    LocalImportId, LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc, TraitLoc,\n-    TypeAliasLoc, UnionLoc,\n+    LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -93,7 +92,7 @@ impl PartialResolvedImport {\n #[derive(Clone, Debug, Eq, PartialEq)]\n struct ImportDirective {\n     module_id: LocalModuleId,\n-    import_id: LocalImportId,\n+    import_id: raw::Import,\n     import: raw::ImportData,\n     status: PartialResolvedImport,\n }\n@@ -110,7 +109,7 @@ struct MacroDirective {\n struct DefCollector<'a, DB> {\n     db: &'a DB,\n     def_map: CrateDefMap,\n-    glob_imports: FxHashMap<LocalModuleId, Vec<(LocalModuleId, LocalImportId)>>,\n+    glob_imports: FxHashMap<LocalModuleId, Vec<(LocalModuleId, raw::Import)>>,\n     unresolved_imports: Vec<ImportDirective>,\n     resolved_imports: Vec<ImportDirective>,\n     unexpanded_macros: Vec<MacroDirective>,\n@@ -219,7 +218,7 @@ where\n             self.update(\n                 self.def_map.root,\n                 None,\n-                &[(name, Resolution { def: PerNs::macros(macro_), import: None })],\n+                &[(name, Resolution { def: PerNs::macros(macro_), import: false })],\n             );\n         }\n     }\n@@ -404,7 +403,7 @@ where\n                             let variant = EnumVariantId { parent: e, local_id };\n                             let res = Resolution {\n                                 def: PerNs::both(variant.into(), variant.into()),\n-                                import: Some(import_id),\n+                                import: true,\n                             };\n                             (name, res)\n                         })\n@@ -431,7 +430,7 @@ where\n                         }\n                     }\n \n-                    let resolution = Resolution { def, import: Some(import_id) };\n+                    let resolution = Resolution { def, import: true };\n                     self.update(module_id, Some(import_id), &[(name, resolution)]);\n                 }\n                 None => tested_by!(bogus_paths),\n@@ -442,7 +441,7 @@ where\n     fn update(\n         &mut self,\n         module_id: LocalModuleId,\n-        import: Option<LocalImportId>,\n+        import: Option<raw::Import>,\n         resolutions: &[(Name, Resolution)],\n     ) {\n         self.update_recursive(module_id, import, resolutions, 0)\n@@ -451,7 +450,7 @@ where\n     fn update_recursive(\n         &mut self,\n         module_id: LocalModuleId,\n-        import: Option<LocalImportId>,\n+        import: Option<raw::Import>,\n         resolutions: &[(Name, Resolution)],\n         depth: usize,\n     ) {\n@@ -462,7 +461,7 @@ where\n         let scope = &mut self.def_map.modules[module_id].scope;\n         let mut changed = false;\n         for (name, res) in resolutions {\n-            changed |= scope.push_res(name.clone(), res, import);\n+            changed |= scope.push_res(name.clone(), res, import.is_some());\n         }\n \n         if !changed {\n@@ -719,7 +718,7 @@ where\n             def: PerNs::types(\n                 ModuleId { krate: self.def_collector.def_map.krate, local_id: res }.into(),\n             ),\n-            import: None,\n+            import: false,\n         };\n         self.def_collector.update(self.module_id, None, &[(name, resolution)]);\n         res\n@@ -791,7 +790,7 @@ where\n                 PerNs::types(def.into())\n             }\n         };\n-        let resolution = Resolution { def, import: None };\n+        let resolution = Resolution { def, import: false };\n         self.def_collector.update(self.module_id, None, &[(name, resolution)])\n     }\n "}, {"sha": "1b83b224742a4e20786bd0fd4d0ea16e557815a3", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 20, "deletions": 50, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=c59d10ab35f69d34c9e1ada34db43157467aced5", "patch": "@@ -7,24 +7,20 @@\n \n use std::{ops::Index, sync::Arc};\n \n-use either::Either;\n use hir_expand::{\n     ast_id_map::AstIdMap,\n     db::AstDatabase,\n     hygiene::Hygiene,\n     name::{AsName, Name},\n };\n-use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n+use ra_arena::{impl_arena_id, Arena, RawId};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n-    AstNode, AstPtr,\n+    AstNode,\n };\n use test_utils::tested_by;\n \n-use crate::{\n-    attr::Attrs, db::DefDatabase, path::ModPath, trace::Trace, FileAstId, HirFileId, InFile,\n-    LocalImportId,\n-};\n+use crate::{attr::Attrs, db::DefDatabase, path::ModPath, FileAstId, HirFileId, InFile};\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n ///\n@@ -33,37 +29,22 @@ use crate::{\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct RawItems {\n     modules: Arena<Module, ModuleData>,\n-    imports: Arena<LocalImportId, ImportData>,\n+    imports: Arena<Import, ImportData>,\n     defs: Arena<Def, DefData>,\n     macros: Arena<Macro, MacroData>,\n     impls: Arena<Impl, ImplData>,\n     /// items for top-level module\n     items: Vec<RawItem>,\n }\n \n-#[derive(Debug, Default, PartialEq, Eq)]\n-pub struct ImportSourceMap {\n-    map: ArenaMap<LocalImportId, ImportSourcePtr>,\n-}\n-\n-type ImportSourcePtr = Either<AstPtr<ast::UseTree>, AstPtr<ast::ExternCrateItem>>;\n-\n impl RawItems {\n     pub(crate) fn raw_items_query(\n         db: &(impl DefDatabase + AstDatabase),\n         file_id: HirFileId,\n     ) -> Arc<RawItems> {\n-        db.raw_items_with_source_map(file_id).0\n-    }\n-\n-    pub(crate) fn raw_items_with_source_map_query(\n-        db: &(impl DefDatabase + AstDatabase),\n-        file_id: HirFileId,\n-    ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {\n             raw_items: RawItems::default(),\n             source_ast_id_map: db.ast_id_map(file_id),\n-            imports: Trace::new(),\n             file_id,\n             hygiene: Hygiene::new(db, file_id),\n         };\n@@ -74,11 +55,8 @@ impl RawItems {\n                 collector.process_module(None, item_list);\n             }\n         }\n-        let mut raw_items = collector.raw_items;\n-        let (arena, map) = collector.imports.into_arena_and_map();\n-        raw_items.imports = arena;\n-        let source_map = ImportSourceMap { map };\n-        (Arc::new(raw_items), Arc::new(source_map))\n+        let raw_items = collector.raw_items;\n+        Arc::new(raw_items)\n     }\n \n     pub(super) fn items(&self) -> &[RawItem] {\n@@ -93,9 +71,9 @@ impl Index<Module> for RawItems {\n     }\n }\n \n-impl Index<LocalImportId> for RawItems {\n+impl Index<Import> for RawItems {\n     type Output = ImportData;\n-    fn index(&self, idx: LocalImportId) -> &ImportData {\n+    fn index(&self, idx: Import) -> &ImportData {\n         &self.imports[idx]\n     }\n }\n@@ -130,7 +108,7 @@ pub(super) struct RawItem {\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub(super) enum RawItemKind {\n     Module(Module),\n-    Import(LocalImportId),\n+    Import(Import),\n     Def(Def),\n     Macro(Macro),\n     Impl(Impl),\n@@ -146,6 +124,10 @@ pub(super) enum ModuleData {\n     Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub(crate) struct Import(RawId);\n+impl_arena_id!(Import);\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n     pub(super) path: ModPath,\n@@ -217,7 +199,6 @@ pub(super) struct ImplData {\n \n struct RawItemsCollector {\n     raw_items: RawItems,\n-    imports: Trace<LocalImportId, ImportData, ImportSourcePtr>,\n     source_ast_id_map: Arc<AstIdMap>,\n     file_id: HirFileId,\n     hygiene: Hygiene,\n@@ -324,7 +305,7 @@ impl RawItemsCollector {\n         ModPath::expand_use_item(\n             InFile { value: use_item, file_id: self.file_id },\n             &self.hygiene,\n-            |path, use_tree, is_glob, alias| {\n+            |path, _use_tree, is_glob, alias| {\n                 let import_data = ImportData {\n                     path,\n                     alias,\n@@ -333,11 +314,11 @@ impl RawItemsCollector {\n                     is_extern_crate: false,\n                     is_macro_use: false,\n                 };\n-                buf.push((import_data, Either::Left(AstPtr::new(use_tree))));\n+                buf.push(import_data);\n             },\n         );\n-        for (import_data, ptr) in buf {\n-            self.push_import(current_module, attrs.clone(), import_data, ptr);\n+        for import_data in buf {\n+            self.push_import(current_module, attrs.clone(), import_data);\n         }\n     }\n \n@@ -360,12 +341,7 @@ impl RawItemsCollector {\n                 is_extern_crate: true,\n                 is_macro_use,\n             };\n-            self.push_import(\n-                current_module,\n-                attrs,\n-                import_data,\n-                Either::Right(AstPtr::new(&extern_crate)),\n-            );\n+            self.push_import(current_module, attrs, import_data);\n         }\n     }\n \n@@ -396,14 +372,8 @@ impl RawItemsCollector {\n         self.push_item(current_module, attrs, RawItemKind::Impl(imp))\n     }\n \n-    fn push_import(\n-        &mut self,\n-        current_module: Option<Module>,\n-        attrs: Attrs,\n-        data: ImportData,\n-        source: ImportSourcePtr,\n-    ) {\n-        let import = self.imports.alloc(|| source, || data);\n+    fn push_import(&mut self, current_module: Option<Module>, attrs: Attrs, data: ImportData) {\n+        let import = self.raw_items.imports.alloc(data);\n         self.push_item(current_module, attrs, RawItemKind::Import(import))\n     }\n "}, {"sha": "9769e88df583779c035a9d8a33c7d4d7df574814", "filename": "crates/ra_hir_def/src/trace.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftrace.rs?ref=c59d10ab35f69d34c9e1ada34db43157467aced5", "patch": "@@ -18,10 +18,6 @@ pub(crate) struct Trace<ID: ArenaId, T, V> {\n }\n \n impl<ID: ra_arena::ArenaId + Copy, T, V> Trace<ID, T, V> {\n-    pub(crate) fn new() -> Trace<ID, T, V> {\n-        Trace { arena: Some(Arena::default()), map: Some(ArenaMap::default()), len: 0 }\n-    }\n-\n     pub(crate) fn new_for_arena() -> Trace<ID, T, V> {\n         Trace { arena: Some(Arena::default()), map: None, len: 0 }\n     }\n@@ -52,8 +48,4 @@ impl<ID: ra_arena::ArenaId + Copy, T, V> Trace<ID, T, V> {\n     pub(crate) fn into_map(mut self) -> ArenaMap<ID, V> {\n         self.map.take().unwrap()\n     }\n-\n-    pub(crate) fn into_arena_and_map(mut self) -> (Arena<ID, T>, ArenaMap<ID, V>) {\n-        (self.arena.take().unwrap(), self.map.take().unwrap())\n-    }\n }"}, {"sha": "387a9cafb65751833f6335248c3f2325121e4657", "filename": "crates/ra_ide/src/change.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_ide%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59d10ab35f69d34c9e1ada34db43157467aced5/crates%2Fra_ide%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fchange.rs?ref=c59d10ab35f69d34c9e1ada34db43157467aced5", "patch": "@@ -270,7 +270,6 @@ impl RootDatabase {\n \n         self.query(hir::db::AstIdMapQuery).sweep(sweep);\n \n-        self.query(hir::db::RawItemsWithSourceMapQuery).sweep(sweep);\n         self.query(hir::db::BodyWithSourceMapQuery).sweep(sweep);\n \n         self.query(hir::db::ExprScopesQuery).sweep(sweep);\n@@ -309,7 +308,6 @@ impl RootDatabase {\n             hir::db::StructDataQuery\n             hir::db::EnumDataQuery\n             hir::db::TraitDataQuery\n-            hir::db::RawItemsWithSourceMapQuery\n             hir::db::RawItemsQuery\n             hir::db::CrateDefMapQuery\n             hir::db::GenericParamsQuery"}]}