{"sha": "b9e35a164416272a3aa3778c2ce9669dcc15c556", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZTM1YTE2NDQxNjI3MmEzYWEzNzc4YzJjZTk2NjlkY2MxNWM1NTY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-07-09T12:02:19Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-07-09T22:05:58Z"}, "message": "lint: extend `#[must_use]` to handle a message.\n\nSimilar to the stability attributes, a type annotated with `#[must_use =\n\"informative snippet\"]` will print the normal warning message along with\n\"informative snippet\". This allows the type author to provide some\nguidance about why the type should be used.", "tree": {"sha": "7fe2c5b5dc8d443faf22ad743bd45532088a093d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe2c5b5dc8d443faf22ad743bd45532088a093d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9e35a164416272a3aa3778c2ce9669dcc15c556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e35a164416272a3aa3778c2ce9669dcc15c556", "html_url": "https://github.com/rust-lang/rust/commit/b9e35a164416272a3aa3778c2ce9669dcc15c556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9e35a164416272a3aa3778c2ce9669dcc15c556/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66e1f11ef482d90f2ea3bd284b07cd825315fadd", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e1f11ef482d90f2ea3bd284b07cd825315fadd", "html_url": "https://github.com/rust-lang/rust/commit/66e1f11ef482d90f2ea3bd284b07cd825315fadd"}], "stats": {"total": 40, "additions": 29, "deletions": 11}, "files": [{"sha": "481187f7c2ce74b499592b24d761a729de28186b", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b9e35a164416272a3aa3778c2ce9669dcc15c556/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e35a164416272a3aa3778c2ce9669dcc15c556/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b9e35a164416272a3aa3778c2ce9669dcc15c556", "patch": "@@ -669,22 +669,13 @@ impl LintPass for UnusedResult {\n                 if ast_util::is_local(did) {\n                     match cx.tcx.map.get(did.node) {\n                         ast_map::NodeItem(it) => {\n-                            if attr::contains_name(it.attrs.as_slice(),\n-                                                   \"must_use\") {\n-                                cx.span_lint(UNUSED_MUST_USE, s.span,\n-                                             \"unused result which must be used\");\n-                                warned = true;\n-                            }\n+                            warned |= check_must_use(cx, it.attrs.as_slice(), s.span);\n                         }\n                         _ => {}\n                     }\n                 } else {\n                     csearch::get_item_attrs(&cx.sess().cstore, did, |attrs| {\n-                        if attr::contains_name(attrs.as_slice(), \"must_use\") {\n-                            cx.span_lint(UNUSED_MUST_USE, s.span,\n-                                         \"unused result which must be used\");\n-                            warned = true;\n-                        }\n+                        warned |= check_must_use(cx, attrs.as_slice(), s.span);\n                     });\n                 }\n             }\n@@ -693,6 +684,25 @@ impl LintPass for UnusedResult {\n         if !warned {\n             cx.span_lint(UNUSED_RESULT, s.span, \"unused result\");\n         }\n+\n+        fn check_must_use(cx: &Context, attrs: &[ast::Attribute], sp: Span) -> bool {\n+            for attr in attrs.iter() {\n+                if attr.check_name(\"must_use\") {\n+                    let mut msg = \"unused result which must be used\".to_string();\n+                    // check for #[must_use=\"...\"]\n+                    match attr.value_str() {\n+                        None => {}\n+                        Some(s) => {\n+                            msg.push_str(\": \");\n+                            msg.push_str(s.get());\n+                        }\n+                    }\n+                    cx.span_lint(UNUSED_MUST_USE, sp, msg.as_slice());\n+                    return true;\n+                }\n+            }\n+            false\n+        }\n     }\n }\n "}, {"sha": "ecc52c0ee7d58491b5f59f2d063b0ca078bcf7d4", "filename": "src/test/compile-fail/unused-result.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9e35a164416272a3aa3778c2ce9669dcc15c556/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9e35a164416272a3aa3778c2ce9669dcc15c556/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-result.rs?ref=b9e35a164416272a3aa3778c2ce9669dcc15c556", "patch": "@@ -14,27 +14,35 @@\n #[must_use]\n enum MustUse { Test }\n \n+#[must_use = \"some message\"]\n+enum MustUseMsg { Test2 }\n+\n fn foo<T>() -> T { fail!() }\n \n fn bar() -> int { return foo::<int>(); }\n fn baz() -> MustUse { return foo::<MustUse>(); }\n+fn qux() -> MustUseMsg { return foo::<MustUseMsg>(); }\n \n #[allow(unused_result)]\n fn test() {\n     foo::<int>();\n     foo::<MustUse>(); //~ ERROR: unused result which must be used\n+    foo::<MustUseMsg>(); //~ ERROR: unused result which must be used: some message\n }\n \n #[allow(unused_result, unused_must_use)]\n fn test2() {\n     foo::<int>();\n     foo::<MustUse>();\n+    foo::<MustUseMsg>();\n }\n \n fn main() {\n     foo::<int>(); //~ ERROR: unused result\n     foo::<MustUse>(); //~ ERROR: unused result which must be used\n+    foo::<MustUseMsg>(); //~ ERROR: unused result which must be used: some message\n \n     let _ = foo::<int>();\n     let _ = foo::<MustUse>();\n+    let _ = foo::<MustUseMsg>();\n }"}]}