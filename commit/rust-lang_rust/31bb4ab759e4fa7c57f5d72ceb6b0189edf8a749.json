{"sha": "31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYmI0YWI3NTllNGZhN2M1N2Y1ZDcyY2ViNmIwMTg5ZWRmOGE3NDk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-13T02:57:47Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-13T02:57:47Z"}, "message": "Fix binder skipping", "tree": {"sha": "14e7ade8c0050363f54a297a28d51463c67e10b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e7ade8c0050363f54a297a28d51463c67e10b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749", "html_url": "https://github.com/rust-lang/rust/commit/31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d4cce6cec7c0975263bbe6f4260167a772bfc89", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4cce6cec7c0975263bbe6f4260167a772bfc89", "html_url": "https://github.com/rust-lang/rust/commit/5d4cce6cec7c0975263bbe6f4260167a772bfc89"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "cb889b76eacf6c0f368a6e68fb216ca21015048e", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=31bb4ab759e4fa7c57f5d72ceb6b0189edf8a749", "patch": "@@ -1369,9 +1369,28 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn assemble_candidates_for_unsizing(&mut self,\n                                         obligation: &TraitObligation<'tcx>,\n                                         candidates: &mut SelectionCandidateSet<'tcx>) {\n-        // It is ok to skip past the higher-ranked binders here because the `match`\n-        // below does not consider regions at all.\n-        let source = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n+        // We currently never consider higher-ranked obligations e.g.\n+        // `for<'a> &'a T: Unsize<Trait+'a>` to be implemented. This is not\n+        // because they are a priori invalid, and we could potentially add support\n+        // for them later, it's just that there isn't really a strong need for it.\n+        // A `T: Unsize<U>` obligation is always used as part of a `T: CoerceUnsize<U>`\n+        // impl, and those are generally applied to concrete types.\n+        //\n+        // That said, one might try to write a fn with a where clause like\n+        //     for<'a> Foo<'a, T>: Unsize<Foo<'a, Trait>>\n+        // where the `'a` is kind of orthogonal to the relevant part of the `Unsize`.\n+        // Still, you'd be more likely to write that where clause as\n+        //     T: Trait\n+        // so it seems ok if we (conservatively) fail to accept that `Unsize`\n+        // obligation above. Should be possible to extend this in the future.\n+        let self_ty = match ty::no_late_bound_regions(self.tcx(), &obligation.self_ty()) {\n+            Some(t) => t,\n+            None => {\n+                // Don't add any candidates if there are bound regions.\n+                return;\n+            }\n+        };\n+        let source = self.infcx.shallow_resolve(self_ty);\n         let target = self.infcx.shallow_resolve(obligation.predicate.0.input_types()[0]);\n \n         debug!(\"assemble_candidates_for_unsizing(source={}, target={})\",\n@@ -2403,8 +2422,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                                   SelectionError<'tcx>> {\n         let tcx = self.tcx();\n \n-        // TODO is this skip_binder Ok?\n-        let source = self.infcx.shallow_resolve(*obligation.self_ty().skip_binder());\n+        // assemble_candidates_for_unsizing should ensure there are no late bound\n+        // regions here. See the comment there for more details.\n+        let source = self.infcx.shallow_resolve(\n+            ty::no_late_bound_regions(tcx, &obligation.self_ty()).unwrap());\n         let target = self.infcx.shallow_resolve(obligation.predicate.0.input_types()[0]);\n \n         debug!(\"confirm_builtin_unsize_candidate(source={}, target={})\","}]}