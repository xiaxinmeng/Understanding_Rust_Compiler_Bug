{"sha": "bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOWVmYWFkOWM5NzhmNzFiZDdhYzJjOTFlZmJjOTU3ZTI1ZDQzZmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-28T07:22:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-28T07:22:28Z"}, "message": "std: Eliminate deprecated patterns", "tree": {"sha": "5a966292079cbd3cbe120e939da824f119fd61a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a966292079cbd3cbe120e939da824f119fd61a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "html_url": "https://github.com/rust-lang/rust/commit/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "467f2abdd8b676aed94364f09c8334b6627bd5b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/467f2abdd8b676aed94364f09c8334b6627bd5b0", "html_url": "https://github.com/rust-lang/rust/commit/467f2abdd8b676aed94364f09c8334b6627bd5b0"}], "stats": {"total": 295, "additions": 130, "deletions": 165}, "files": [{"sha": "a4d19b110d7f4f2b805d055a67f1c20b82175a74", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,6 +1,5 @@\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n /**\n  * Concurrency-enabled mechanisms for sharing mutable and/or immutable state\n  * between tasks."}, {"sha": "de3c5774bfe0f78e95d3c21c1d7e34ee0c2b2270", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -23,7 +23,6 @@\n // to waste time running the destructors of POD.\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n export Arena, arena_with_size;\n "}, {"sha": "9bad4d397500350f2dff0bf8a13f2c5e7a81b4aa", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n use io::Reader;\n \n pub trait ToBase64 {"}, {"sha": "33065fffd03e2db5fa76fe0ce902e166ab8fee22", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 30, "deletions": 31, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use vec::{to_mut, from_elem};\n \n@@ -241,22 +240,22 @@ priv impl Bitv {\n             self.die();\n         }\n         match self.rep {\n-          Small(s) => match other.rep {\n-            Small(s1) => match op {\n-              Union      => s.union(s1,      self.nbits),\n-              Intersect  => s.intersect(s1,  self.nbits),\n-              Assign     => s.become(s1,     self.nbits),\n-              Difference => s.difference(s1, self.nbits)\n+          Small(ref s) => match other.rep {\n+            Small(ref s1) => match op {\n+              Union      => s.union(*s1,      self.nbits),\n+              Intersect  => s.intersect(*s1,  self.nbits),\n+              Assign     => s.become(*s1,     self.nbits),\n+              Difference => s.difference(*s1, self.nbits)\n             },\n             Big(_) => self.die()\n           },\n-          Big(s) => match other.rep {\n+          Big(ref s) => match other.rep {\n             Small(_) => self.die(),\n-            Big(s1) => match op {\n-              Union      => s.union(s1,      self.nbits),\n-              Intersect  => s.intersect(s1,  self.nbits),\n-              Assign     => s.become(s1,     self.nbits),\n-              Difference => s.difference(s1, self.nbits)\n+            Big(ref s1) => match op {\n+              Union      => s.union(*s1,      self.nbits),\n+              Intersect  => s.intersect(*s1,  self.nbits),\n+              Assign     => s.become(*s1,     self.nbits),\n+              Difference => s.difference(*s1, self.nbits)\n             }\n           }\n         }\n@@ -297,10 +296,10 @@ impl Bitv {\n     #[inline(always)]\n     fn clone() -> ~Bitv {\n         ~match self.rep {\n-          Small(b) => {\n+          Small(ref b) => {\n             Bitv{nbits: self.nbits, rep: Small(~SmallBitv{bits: b.bits})}\n           }\n-          Big(b) => {\n+          Big(ref b) => {\n             let st = to_mut(from_elem(self.nbits / uint_bits + 1, 0));\n             let len = st.len();\n             for uint::range(0, len) |i| { st[i] = b.storage[i]; };\n@@ -314,8 +313,8 @@ impl Bitv {\n     pure fn get(i: uint) -> bool {\n        assert (i < self.nbits);\n        match self.rep {\n-         Big(b)   => b.get(i),\n-         Small(s) => s.get(i)\n+         Big(ref b)   => b.get(i),\n+         Small(ref s) => s.get(i)\n        }\n     }\n \n@@ -328,8 +327,8 @@ impl Bitv {\n     fn set(i: uint, x: bool) {\n       assert (i < self.nbits);\n       match self.rep {\n-        Big(b)   => b.set(i, x),\n-        Small(s) => s.set(i, x)\n+        Big(ref b)   => b.set(i, x),\n+        Small(ref s) => s.set(i, x)\n       }\n     }\n \n@@ -343,12 +342,12 @@ impl Bitv {\n     fn equal(v1: Bitv) -> bool {\n       if self.nbits != v1.nbits { return false; }\n       match self.rep {\n-        Small(b) => match v1.rep {\n-          Small(b1) => b.equals(b1, self.nbits),\n+        Small(ref b) => match v1.rep {\n+          Small(ref b1) => b.equals(*b1, self.nbits),\n           _ => false\n         },\n-        Big(s) => match v1.rep {\n-          Big(s1) => s.equals(s1, self.nbits),\n+        Big(ref s) => match v1.rep {\n+          Big(ref s1) => s.equals(*s1, self.nbits),\n           Small(_) => return false\n         }\n       }\n@@ -358,25 +357,25 @@ impl Bitv {\n     #[inline(always)]\n     fn clear() {\n         match self.rep {\n-          Small(b) => b.clear(),\n-          Big(s) => for s.each_storage() |w| { w = 0u }\n+          Small(ref b) => b.clear(),\n+          Big(ref s) => for s.each_storage() |w| { w = 0u }\n         }\n     }\n \n     /// Set all bits to 1\n     #[inline(always)]\n     fn set_all() {\n       match self.rep {\n-        Small(b) => b.set_all(),\n-        Big(s) => for s.each_storage() |w| { w = !0u } }\n+        Small(ref b) => b.set_all(),\n+        Big(ref s) => for s.each_storage() |w| { w = !0u } }\n     }\n \n     /// Invert all bits\n     #[inline(always)]\n     fn invert() {\n       match self.rep {\n-        Small(b) => b.invert(),\n-        Big(s) => for s.each_storage() |w| { w = !w } }\n+        Small(ref b) => b.invert(),\n+        Big(ref s) => for s.each_storage() |w| { w = !w } }\n     }\n \n     /**\n@@ -395,7 +394,7 @@ impl Bitv {\n     #[inline(always)]\n     fn is_true() -> bool {\n       match self.rep {\n-        Small(b) => b.is_true(self.nbits),\n+        Small(ref b) => b.is_true(self.nbits),\n         _ => {\n           for self.each() |i| { if !i { return false; } }\n           true\n@@ -415,7 +414,7 @@ impl Bitv {\n     /// Returns true if all bits are 0\n     fn is_false() -> bool {\n       match self.rep {\n-        Small(b) => b.is_false(self.nbits),\n+        Small(ref b) => b.is_false(self.nbits),\n         Big(_) => {\n           for self.each() |i| { if i { return false; } }\n           true"}, {"sha": "4ef695f419814ef36bf7ebe8fec6fc648d1e002f", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n /// A dynamic, mutable location.\n ///\n /// Similar to a mutable option type, but friendlier."}, {"sha": "2ec0bf41675cfab2ff9b6e1743c5d458d68fe4b9", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n /// Additional general-purpose comparison functionality.\n \n const fuzzy_epsilon: float = 1.0e-6;"}, {"sha": "58958d6115e5259103b825223ab524a2b27999c2", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -6,7 +6,6 @@ Higher level communication abstractions.\n \n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use pipes::{Channel, Recv, Chan, Port, Selectable};\n "}, {"sha": "26b2a02ec9ca3fea019321352d753827ba7f713d", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n //! Unsafe debugging functions for inspecting values.\n \n use cast::reinterpret_cast;"}, {"sha": "515f033b1f157f1bd22b1d7cfcb3b7741a157382", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,6 +1,5 @@\n //! A deque. Untested as of yet. Likely buggy\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n #[forbid(non_camel_case_types)];\n \n use option::{Some, None};\n@@ -46,7 +45,7 @@ fn create<T: Copy>() -> Deque<T> {\n         move rv\n     }\n     fn get<T: Copy>(elts: &DVec<Cell<T>>, i: uint) -> T {\n-        match (*elts).get_elt(i) { Some(t) => t, _ => fail }\n+        match (*elts).get_elt(i) { Some(move t) => t, _ => fail }\n     }\n \n     type Repr<T> = {mut nelts: uint,"}, {"sha": "6388e8983d29da9b3f6d9806c2972f4b632b15f8", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[warn(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n /*!\n  * A functional key,value store that works on anything.\n@@ -37,7 +36,7 @@ fn insert<K: Copy Eq Ord, V: Copy>(m: Treemap<K, V>, +k: K, +v: V)\n   -> Treemap<K, V> {\n     @match m {\n        @Empty => Node(@k, @v, @Empty, @Empty),\n-       @Node(@kk, vv, left, right) => {\n+       @Node(@copy kk, vv, left, right) => {\n          if k < kk {\n              Node(@kk, vv, insert(left, k, v), right)\n          } else if k == kk {\n@@ -51,10 +50,10 @@ fn insert<K: Copy Eq Ord, V: Copy>(m: Treemap<K, V>, +k: K, +v: V)\n fn find<K: Eq Ord, V: Copy>(m: Treemap<K, V>, +k: K) -> Option<V> {\n     match *m {\n       Empty => None,\n-      Node(@kk, @v, left, right) => {\n-        if k == kk {\n+      Node(@ref kk, @copy v, left, right) => {\n+        if k == *kk {\n             Some(v)\n-        } else if k < kk { find(left, move k) } else { find(right, move k) }\n+        } else if k < *kk { find(left, move k) } else { find(right, move k) }\n       }\n     }\n }\n@@ -68,11 +67,9 @@ fn traverse<K, V: Copy>(m: Treemap<K, V>, f: fn((&K), (&V))) {\n         matches to me, so I changed it. but that may be a\n         de-optimization -- tjc\n        */\n-      Node(@k, @v, left, right) => {\n-        // copy v to make aliases work out\n-        let v1 = v;\n+      Node(@ref k, @ref v, left, right) => {\n         traverse(left, f);\n-        f(&k, &v1);\n+        f(k, v);\n         traverse(right, f);\n       }\n     }"}, {"sha": "3106ed953b162e778436d191322372473221e057", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -63,7 +63,6 @@\n  */\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;\n use core::result::{Err, Ok};\n@@ -110,9 +109,9 @@ fn mkname(nm: &str) -> Name {\n impl Name : Eq {\n     pure fn eq(other: &Name) -> bool {\n         match self {\n-            Long(e0a) => {\n+            Long(ref e0a) => {\n                 match (*other) {\n-                    Long(e0b) => e0a == e0b,\n+                    Long(ref e0b) => e0a == e0b,\n                     _ => false\n                 }\n             }\n@@ -177,7 +176,7 @@ fn is_arg(arg: &str) -> bool {\n fn name_str(nm: &Name) -> ~str {\n     return match *nm {\n       Short(ch) => str::from_char(ch),\n-      Long(s) => s\n+      Long(copy s) => s\n     };\n }\n \n@@ -200,12 +199,12 @@ enum Fail_ {\n /// Convert a `fail_` enum into an error string\n fn fail_str(+f: Fail_) -> ~str {\n     return match f {\n-      ArgumentMissing(nm) => ~\"Argument to option '\" + nm + ~\"' missing.\",\n-      UnrecognizedOption(nm) => ~\"Unrecognized option: '\" + nm + ~\"'.\",\n-      OptionMissing(nm) => ~\"Required option '\" + nm + ~\"' missing.\",\n-      OptionDuplicated(nm) => ~\"Option '\" + nm + ~\"' given more than once.\",\n-      UnexpectedArgument(nm) => {\n-        ~\"Option \" + nm + ~\" does not take an argument.\"\n+      ArgumentMissing(ref nm) => ~\"Argument to option '\" + *nm + ~\"' missing.\",\n+      UnrecognizedOption(ref nm) => ~\"Unrecognized option: '\" + *nm + ~\"'.\",\n+      OptionMissing(ref nm) => ~\"Required option '\" + *nm + ~\"' missing.\",\n+      OptionDuplicated(ref nm) => ~\"Option '\" + *nm + ~\"' given more than once.\",\n+      UnexpectedArgument(ref nm) => {\n+        ~\"Option \" + *nm + ~\" does not take an argument.\"\n       }\n     };\n }\n@@ -382,7 +381,7 @@ fn opts_present(+mm: Matches, names: &[~str]) -> bool {\n  * argument\n  */\n fn opt_str(+mm: Matches, nm: &str) -> ~str {\n-    return match opt_val(mm, nm) { Val(s) => s, _ => fail };\n+    return match opt_val(mm, nm) { Val(copy s) => s, _ => fail };\n }\n \n /**\n@@ -394,7 +393,7 @@ fn opt_str(+mm: Matches, nm: &str) -> ~str {\n fn opts_str(+mm: Matches, names: &[~str]) -> ~str {\n     for vec::each(names) |nm| {\n         match opt_val(mm, *nm) {\n-          Val(s) => return s,\n+          Val(copy s) => return s,\n           _ => ()\n         }\n     }\n@@ -411,7 +410,7 @@ fn opts_str(+mm: Matches, names: &[~str]) -> ~str {\n fn opt_strs(+mm: Matches, nm: &str) -> ~[~str] {\n     let mut acc: ~[~str] = ~[];\n     for vec::each(opt_vals(mm, nm)) |v| {\n-        match *v { Val(s) => acc.push(s), _ => () }\n+        match *v { Val(copy s) => acc.push(s), _ => () }\n     }\n     return acc;\n }\n@@ -420,7 +419,7 @@ fn opt_strs(+mm: Matches, nm: &str) -> ~[~str] {\n fn opt_maybe_str(+mm: Matches, nm: &str) -> Option<~str> {\n     let vals = opt_vals(mm, nm);\n     if vec::len::<Optval>(vals) == 0u { return None::<~str>; }\n-    return match vals[0] { Val(s) => Some::<~str>(s), _ => None::<~str> };\n+    return match vals[0] { Val(copy s) => Some::<~str>(s), _ => None::<~str> };\n }\n \n \n@@ -434,7 +433,7 @@ fn opt_maybe_str(+mm: Matches, nm: &str) -> Option<~str> {\n fn opt_default(+mm: Matches, nm: &str, def: &str) -> Option<~str> {\n     let vals = opt_vals(mm, nm);\n     if vec::len::<Optval>(vals) == 0u { return None::<~str>; }\n-    return match vals[0] { Val(s) => Some::<~str>(s),\n+    return match vals[0] { Val(copy s) => Some::<~str>(s),\n                            _      => Some::<~str>(str::from_slice(def)) }\n }\n "}, {"sha": "9e53febb85f5eabe18877cc3641b40451bcc084a", "filename": "src/libstd/json.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,7 +1,6 @@\n // Rust JSON serialization library\n // Copyright (c) 2011 Google Inc.\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n #[forbid(non_camel_case_types)];\n \n //! json serialization\n@@ -252,7 +251,7 @@ pub impl PrettySerializer: serialization2::Serializer {\n pub fn to_serializer<S: serialization2::Serializer>(ser: &S, json: &Json) {\n     match *json {\n         Number(f) => ser.emit_float(f),\n-        String(s) => ser.emit_str(s),\n+        String(ref s) => ser.emit_str(*s),\n         Boolean(b) => ser.emit_bool(b),\n         List(v) => {\n             do ser.emit_vec(v.len()) || {\n@@ -261,7 +260,7 @@ pub fn to_serializer<S: serialization2::Serializer>(ser: &S, json: &Json) {\n                 }\n             }\n         }\n-        Object(o) => {\n+        Object(ref o) => {\n             do ser.emit_rec || {\n                 let mut idx = 0;\n                 for o.each |key, value| {\n@@ -866,8 +865,8 @@ impl Json : Eq {\n         match self {\n             Number(f0) =>\n                 match *other { Number(f1) => f0 == f1, _ => false },\n-            String(s0) =>\n-                match *other { String(s1) => s0 == s1, _ => false },\n+            String(ref s0) =>\n+                match *other { String(ref s1) => s0 == s1, _ => false },\n             Boolean(b0) =>\n                 match *other { Boolean(b1) => b0 == b1, _ => false },\n             Null =>\n@@ -910,10 +909,10 @@ impl Json : Ord {\n                 }\n             }\n \n-            String(s0) => {\n+            String(ref s0) => {\n                 match *other {\n                     Number(_) => false,\n-                    String(s1) => s0 < s1,\n+                    String(ref s1) => s0 < s1,\n                     Boolean(_) | List(_) | Object(_) | Null => true\n                 }\n             }\n@@ -934,10 +933,10 @@ impl Json : Ord {\n                 }\n             }\n \n-            Object(d0) => {\n+            Object(ref d0) => {\n                 match *other {\n                     Number(_) | String(_) | Boolean(_) | List(_) => false,\n-                    Object(d1) => {\n+                    Object(ref d1) => {\n                         unsafe {\n                             let mut d0_flat = ~[];\n                             let mut d1_flat = ~[];\n@@ -1065,7 +1064,7 @@ impl @~str: ToJson {\n impl <A: ToJson, B: ToJson> (A, B): ToJson {\n     fn to_json() -> Json {\n         match self {\n-          (a, b) => {\n+          (ref a, ref b) => {\n             List(~[a.to_json(), b.to_json()])\n           }\n         }\n@@ -1075,7 +1074,7 @@ impl <A: ToJson, B: ToJson> (A, B): ToJson {\n impl <A: ToJson, B: ToJson, C: ToJson> (A, B, C): ToJson {\n     fn to_json() -> Json {\n         match self {\n-          (a, b, c) => {\n+          (ref a, ref b, ref c) => {\n             List(~[a.to_json(), b.to_json(), c.to_json()])\n           }\n         }\n@@ -1112,7 +1111,7 @@ impl <A: ToJson> Option<A>: ToJson {\n     fn to_json() -> Json {\n         match self {\n           None => Null,\n-          Some(value) => value.to_json()\n+          Some(ref value) => value.to_json()\n         }\n     }\n }"}, {"sha": "1568c6c099f033f8cc9b9500c3ab5cf32bb9b9c4", "filename": "src/libstd/list.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,6 +1,5 @@\n //! A standard linked list\n #[warn(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;\n use core::option;\n@@ -47,8 +46,8 @@ fn find<T: Copy>(ls: @List<T>, f: fn((&T)) -> bool) -> Option<T> {\n     let mut ls = ls;\n     loop {\n         ls = match *ls {\n-          Cons(hd, tl) => {\n-            if f(&hd) { return Some(hd); }\n+          Cons(ref hd, tl) => {\n+            if f(hd) { return Some(*hd); }\n             tl\n           }\n           Nil => return None\n@@ -95,7 +94,7 @@ pure fn tail<T: Copy>(ls: @List<T>) -> @List<T> {\n /// Returns the first element of a list\n pure fn head<T: Copy>(ls: @List<T>) -> T {\n     match *ls {\n-      Cons(hd, _) => hd,\n+      Cons(copy hd, _) => hd,\n       // makes me sad\n       _ => fail ~\"head invoked on empty list\"\n     }\n@@ -105,7 +104,7 @@ pure fn head<T: Copy>(ls: @List<T>) -> T {\n pure fn append<T: Copy>(l: @List<T>, m: @List<T>) -> @List<T> {\n     match *l {\n       Nil => return m,\n-      Cons(x, xs) => {\n+      Cons(copy x, xs) => {\n         let rest = append(xs, m);\n         return @Cons(x, rest);\n       }\n@@ -151,9 +150,9 @@ fn each<T>(l: @List<T>, f: fn((&T)) -> bool) {\n impl<T:Eq> List<T> : Eq {\n     pure fn eq(other: &List<T>) -> bool {\n         match self {\n-            Cons(e0a, e1a) => {\n+            Cons(ref e0a, e1a) => {\n                 match (*other) {\n-                    Cons(e0b, e1b) => e0a == e0b && e1a == e1b,\n+                    Cons(ref e0b, e1b) => e0a == e0b && e1a == e1b,\n                     _ => false\n                 }\n             }"}, {"sha": "fce75cbda7551a0b4ff7d45c12d42d425bee3357", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,7 +1,6 @@\n //! A map type\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use io::WriterUtil;\n use to_str::ToStr;\n@@ -404,7 +403,7 @@ fn hash_from_vec<K: Eq IterBytes Hash Const Copy, V: Copy>(\n     let map = HashMap();\n     for vec::each(items) |item| {\n         match *item {\n-            (key, value) => {\n+            (copy key, copy value) => {\n                 map.insert(key, value);\n             }\n         }"}, {"sha": "581beb78bdc555f2ff63479b03b3fed746ff1b02", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n pub fn md4(msg: &[u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n     // subtle: if orig_len is merely uint, then the code below"}, {"sha": "ad4eb9a0fa621e5befa15e63719680d478f20a3a", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,6 +1,5 @@\n //! Types/fns concerning Internet Protocol (IP), versions 4 & 6\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use iotask = uv::iotask::IoTask;\n use interact = uv::iotask::interact;\n@@ -48,15 +47,15 @@ type ParseAddrErr = {\n  */\n fn format_addr(ip: &IpAddr) -> ~str {\n     match *ip {\n-      Ipv4(addr) =>  unsafe {\n-        let result = uv_ip4_name(&addr);\n+      Ipv4(ref addr) =>  unsafe {\n+        let result = uv_ip4_name(addr);\n         if result == ~\"\" {\n             fail ~\"failed to convert inner sockaddr_in address to str\"\n         }\n         result\n       },\n-      Ipv6(addr) => unsafe {\n-        let result = uv_ip6_name(&addr);\n+      Ipv6(ref addr) => unsafe {\n+        let result = uv_ip6_name(addr);\n         if result == ~\"\" {\n             fail ~\"failed to convert inner sockaddr_in address to str\"\n         }\n@@ -136,8 +135,8 @@ mod v4 {\n      */\n     fn parse_addr(ip: &str) -> IpAddr {\n         match try_parse_addr(ip) {\n-          result::Ok(addr) => copy(addr),\n-          result::Err(err_data) => fail err_data.err_msg\n+          result::Ok(copy addr) => addr,\n+          result::Err(ref err_data) => fail err_data.err_msg\n         }\n     }\n     // the simple, old style numberic representation of\n@@ -223,8 +222,8 @@ mod v6 {\n      */\n     fn parse_addr(ip: &str) -> IpAddr {\n         match try_parse_addr(ip) {\n-          result::Ok(addr) => copy(addr),\n-          result::Err(err_data) => fail err_data.err_msg\n+          result::Ok(copy addr) => addr,\n+          result::Err(copy err_data) => fail err_data.err_msg\n         }\n     }\n     fn try_parse_addr(ip: &str) -> result::Result<IpAddr,ParseAddrErr> {"}, {"sha": "011c7e6a0c7823090c4786f07301b3a4744f7250", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -168,7 +168,7 @@ fn connect(+input_ip: ip::IpAddr, port: uint,\n                 ptr::addr_of((*socket_data_ptr).connect_req);\n             let addr_str = ip::format_addr(&input_ip);\n             let connect_result = match input_ip {\n-              ip::Ipv4(addr) => {\n+              ip::Ipv4(ref addr) => {\n                 // have to \"recreate\" the sockaddr_in/6\n                 // since the ip_addr discards the port\n                 // info.. should probably add an additional\n@@ -233,7 +233,7 @@ fn connect(+input_ip: ip::IpAddr, port: uint,\n         log(debug, ~\"tcp::connect - received success on result_po\");\n         result::Ok(TcpSocket(socket_data))\n       }\n-      ConnFailure(err_data) => {\n+      ConnFailure(ref err_data) => {\n         core::comm::recv(closed_signal_po);\n         log(debug, ~\"tcp::connect - received failure on result_po\");\n         // still have to free the malloc'd stream handle..\n@@ -535,7 +535,7 @@ fn accept(new_conn: TcpNewConnection)\n         }\n         // UNSAFE LIBUV INTERACTION END\n         match core::comm::recv(result_po) {\n-          Some(err_data) => result::Err(err_data),\n+          Some(copy err_data) => result::Err(err_data),\n           None => result::Ok(TcpSocket(client_socket_data))\n         }\n       }\n@@ -623,13 +623,13 @@ fn listen_common(+host_ip: ip::IpAddr, port: uint, backlog: uint,\n                     server_data_ptr);\n                 let addr_str = ip::format_addr(&loc_ip);\n                 let bind_result = match loc_ip {\n-                  ip::Ipv4(addr) => {\n+                  ip::Ipv4(ref addr) => {\n                     log(debug, fmt!(\"addr: %?\", addr));\n                     let in_addr = uv::ll::ip4_addr(addr_str, port as int);\n                     uv::ll::tcp_bind(server_stream_ptr,\n                                      ptr::addr_of(in_addr))\n                   }\n-                  ip::Ipv6(addr) => {\n+                  ip::Ipv6(ref addr) => {\n                     log(debug, fmt!(\"addr: %?\", addr));\n                     let in_addr = uv::ll::ip6_addr(addr_str, port as int);\n                     uv::ll::tcp_bind6(server_stream_ptr,\n@@ -666,7 +666,7 @@ fn listen_common(+host_ip: ip::IpAddr, port: uint, backlog: uint,\n         setup_ch.recv()\n     };\n     match setup_result {\n-      Some(err_data) => {\n+      Some(ref err_data) => {\n         do iotask::interact(iotask) |loop_ptr| unsafe {\n             log(debug, fmt!(\"tcp::listen post-kill recv hl interact %?\",\n                             loop_ptr));\n@@ -703,7 +703,7 @@ fn listen_common(+host_ip: ip::IpAddr, port: uint, backlog: uint,\n         stream_closed_po.recv();\n         match kill_result {\n           // some failure post bind/listen\n-          Some(err_data) => result::Err(GenericListenErr(err_data.err_name,\n+          Some(ref err_data) => result::Err(GenericListenErr(err_data.err_name,\n                                                            err_data.err_msg)),\n           // clean exit\n           None => result::Ok(())\n@@ -884,7 +884,7 @@ fn read_common_impl(socket_data: *TcpSocketData, timeout_msecs: uint)\n             Some(core::comm::recv(result::get(&rs_result)))\n         };\n         log(debug, ~\"tcp::read after recv_timeout\");\n-        match read_result {\n+        match move read_result {\n           None => {\n             log(debug, ~\"tcp::read: timed out..\");\n             let err_data = {\n@@ -894,7 +894,7 @@ fn read_common_impl(socket_data: *TcpSocketData, timeout_msecs: uint)\n             read_stop_common_impl(socket_data);\n             result::Err(err_data)\n           }\n-          Some(data_result) => {\n+          Some(move data_result) => {\n             log(debug, ~\"tcp::read got data\");\n             read_stop_common_impl(socket_data);\n             data_result\n@@ -924,7 +924,7 @@ fn read_stop_common_impl(socket_data: *TcpSocketData) ->\n         }\n     };\n     match core::comm::recv(stop_po) {\n-      Some(err_data) => result::Err(err_data.to_tcp_err()),\n+      Some(ref err_data) => result::Err(err_data.to_tcp_err()),\n       None => result::Ok(())\n     }\n }\n@@ -954,7 +954,7 @@ fn read_start_common_impl(socket_data: *TcpSocketData)\n         }\n     };\n     match core::comm::recv(start_po) {\n-      Some(err_data) => result::Err(err_data.to_tcp_err()),\n+      Some(ref err_data) => result::Err(err_data.to_tcp_err()),\n       None => result::Ok((*socket_data).reader_po)\n     }\n }\n@@ -1001,7 +1001,7 @@ fn write_common_impl(socket_data_ptr: *TcpSocketData,\n     // aftermath, so we don't have to sit here blocking.\n     match core::comm::recv(result_po) {\n       TcpWriteSuccess => result::Ok(()),\n-      TcpWriteError(err_data) => result::Err(err_data.to_tcp_err())\n+      TcpWriteError(ref err_data) => result::Err(err_data.to_tcp_err())\n     }\n }\n \n@@ -1530,8 +1530,8 @@ mod test {\n                         log(debug, ~\"SERVER: successfully accepted\"+\n                             ~\"connection!\");\n                         let received_req_bytes = read(&sock, 0u);\n-                        match received_req_bytes {\n-                          result::Ok(data) => {\n+                        match move received_req_bytes {\n+                          result::Ok(move data) => {\n                             log(debug, ~\"SERVER: got REQ str::from_bytes..\");\n                             log(debug, fmt!(\"SERVER: REQ data len: %?\",\n                                             vec::len(data)));\n@@ -1542,7 +1542,7 @@ mod test {\n                             log(debug, ~\"SERVER: after write.. die\");\n                             core::comm::send(kill_ch, None);\n                           }\n-                          result::Err(err_data) => {\n+                          result::Err(move err_data) => {\n                             log(debug, fmt!(\"SERVER: error recvd: %s %s\",\n                                 err_data.err_name, err_data.err_msg));\n                             core::comm::send(kill_ch, Some(err_data));\n@@ -1560,9 +1560,9 @@ mod test {\n         // err check on listen_result\n         if result::is_err(&listen_result) {\n             match result::get_err(&listen_result) {\n-              GenericListenErr(name, msg) => {\n+              GenericListenErr(ref name, ref msg) => {\n                 fail fmt!(\"SERVER: exited abnormally name %s msg %s\",\n-                                name, msg);\n+                                *name, *msg);\n               }\n               AccessDenied => {\n                 fail ~\"SERVER: exited abnormally, got access denied..\";"}, {"sha": "00226c4e81ef5c6cbb17509a2746a39ff317cc5b", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,6 +1,5 @@\n //! Types/fns concerning URLs (see RFC 3986)\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;\n use map::HashMap;\n@@ -661,7 +660,7 @@ fn from_str(rawurl: &str) -> result::Result<Url, ~str> {\n impl Url : FromStr {\n     static fn from_str(s: &str) -> Option<Url> {\n         match from_str(s) {\n-            Ok(url) => Some(url),\n+            Ok(move url) => Some(url),\n             Err(_) => None\n         }\n     }"}, {"sha": "bc528800666d294c636cbe098f8627e898109518", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use io::Writer;\n use io::WriterUtil;"}, {"sha": "325d240eb578a0fde22a1e451483ec6752365033", "filename": "src/libstd/prettyprint2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fprettyprint2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fprettyprint2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint2.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use io::Writer;\n use io::WriterUtil;"}, {"sha": "1d88b89277d6beac995a81705ef6da614fdf7bca", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -24,7 +24,6 @@\n  */\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n /// The type of ropes.\n type Rope = node::Root;\n@@ -738,14 +737,14 @@ mod node {\n         //FIXME (#2744): Could we do this without the pattern-matching?\n         match (*node) {\n           Leaf(y)   => return y.byte_len,\n-          Concat(y) => return y.byte_len\n+          Concat(ref y) => return y.byte_len\n         }\n     }\n \n     pure fn char_len(node: @Node) -> uint {\n         match (*node) {\n           Leaf(y)   => return y.char_len,\n-          Concat(y) => return y.char_len\n+          Concat(ref y) => return y.char_len\n         }\n     }\n \n@@ -835,7 +834,7 @@ mod node {\n     fn flatten(node: @Node) -> @Node unsafe {\n         match (*node) {\n           Leaf(_) => return node,\n-          Concat(x) => {\n+          Concat(ref x) => {\n             return @Leaf({\n                 byte_offset: 0u,\n                 byte_len:    x.byte_len,\n@@ -913,7 +912,7 @@ mod node {\n                                 char_len:    char_len,\n                                 content:     x.content});\n               }\n-              node::Concat(x) => {\n+              node::Concat(ref x) => {\n                 let left_len: uint = node::byte_len(x.left);\n                 if byte_offset <= left_len {\n                     if byte_offset + byte_len <= left_len {\n@@ -976,7 +975,7 @@ mod node {\n                            char_len:    char_len,\n                            content:     x.content});\n               }\n-              node::Concat(x) => {\n+              node::Concat(ref x) => {\n                 if char_offset == 0u && char_len == x.char_len {return node;}\n                 let left_len : uint = node::char_len(x.left);\n                 if char_offset <= left_len {\n@@ -1015,7 +1014,7 @@ mod node {\n     fn height(node: @Node) -> uint {\n         match (*node) {\n           Leaf(_)   => return 0u,\n-          Concat(x) => return x.height\n+          Concat(ref x) => return x.height\n         }\n     }\n \n@@ -1067,7 +1066,7 @@ mod node {\n         loop {\n             match (*current) {\n               Leaf(x) => return it(x),\n-              Concat(x) => if loop_leaves(x.left, it) { //non tail call\n+              Concat(ref x) => if loop_leaves(x.left, it) { //non tail call\n                 current = x.right;       //tail call\n               } else {\n                 return false;\n@@ -1134,7 +1133,7 @@ mod node {\n                 let current = it.stack[it.stackpos];\n                 it.stackpos -= 1;\n                 match (*current) {\n-                  Concat(x) => {\n+                  Concat(ref x) => {\n                     it.stackpos += 1;\n                     it.stack[it.stackpos] = x.right;\n                     it.stackpos += 1;"}, {"sha": "a385924e846333cd1852ec8adaf8ca45e2f031e0", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -245,9 +245,9 @@ fn serialize_Option<S: Serializer,T>(s: S, v: Option<T>, st: fn(T)) {\n           None => do s.emit_enum_variant(~\"none\", 0u, 0u) {\n           },\n \n-          Some(v) => do s.emit_enum_variant(~\"some\", 1u, 1u) {\n+          Some(ref v) => do s.emit_enum_variant(~\"some\", 1u, 1u) {\n             do s.emit_enum_variant_arg(0u) {\n-                st(v)\n+                st(*v)\n             }\n           }\n         }"}, {"sha": "09954affc215e4814233d2efc3e3290339b1090f", "filename": "src/libstd/serialization2.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fserialization2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fserialization2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization2.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -5,7 +5,6 @@ Core serialization interfaces.\n */\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n #[forbid(non_camel_case_types)];\n \n pub trait Serializer {\n@@ -235,7 +234,7 @@ pub impl<T: Serializable> Option<T>: Serializable {\n               None => do s.emit_enum_variant(~\"none\", 0u, 0u) {\n               },\n \n-              Some(v) => do s.emit_enum_variant(~\"some\", 1u, 1u) {\n+              Some(ref v) => do s.emit_enum_variant(~\"some\", 1u, 1u) {\n                 s.emit_enum_variant_arg(0u, || v.serialize(s))\n               }\n             }\n@@ -261,7 +260,7 @@ pub impl<\n > (T0, T1): Serializable {\n     fn serialize<S: Serializer>(&self, s: &S) {\n         match *self {\n-            (t0, t1) => {\n+            (ref t0, ref t1) => {\n                 do s.emit_tup(2) {\n                     s.emit_tup_elt(0, || t0.serialize(s));\n                     s.emit_tup_elt(1, || t1.serialize(s));\n@@ -287,7 +286,7 @@ pub impl<\n > (T0, T1, T2): Serializable {\n     fn serialize<S: Serializer>(&self, s: &S) {\n         match *self {\n-            (t0, t1, t2) => {\n+            (ref t0, ref t1, ref t2) => {\n                 do s.emit_tup(3) {\n                     s.emit_tup_elt(0, || t0.serialize(s));\n                     s.emit_tup_elt(1, || t1.serialize(s));\n@@ -316,7 +315,7 @@ pub impl<\n > (T0, T1, T2, T3): Serializable {\n     fn serialize<S: Serializer>(&self, s: &S) {\n         match *self {\n-            (t0, t1, t2, t3) => {\n+            (ref t0, ref t1, ref t2, ref t3) => {\n                 do s.emit_tup(4) {\n                     s.emit_tup_elt(0, || t0.serialize(s));\n                     s.emit_tup_elt(1, || t1.serialize(s));\n@@ -348,7 +347,7 @@ pub impl<\n > (T0, T1, T2, T3, T4): Serializable {\n     fn serialize<S: Serializer>(&self, s: &S) {\n         match *self {\n-            (t0, t1, t2, t3, t4) => {\n+            (ref t0, ref t1, ref t2, ref t3, ref t4) => {\n                 do s.emit_tup(5) {\n                     s.emit_tup_elt(0, || t0.serialize(s));\n                     s.emit_tup_elt(1, || t1.serialize(s));"}, {"sha": "05890035273def4404b29e86dfb017372c9b4da1", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -13,7 +13,6 @@\n  */\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n /*\n  * A SHA-1 implementation derived from Paul E. Jones's reference"}, {"sha": "e3927ef188c3a3c654154addf04c0675f2222b5d", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -3,7 +3,6 @@\n  * are O(highest integer key).\n  */\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use core::option;\n use core::option::{Some, None};\n@@ -56,7 +55,7 @@ pure fn get<T: Copy>(self: SmallIntMap<T>, key: uint) -> T {\n         error!(\"smallintmap::get(): key not present\");\n         fail;\n       }\n-      Some(v) => return v\n+      Some(move v) => return v\n     }\n }\n \n@@ -117,7 +116,7 @@ impl<V: Copy> SmallIntMap<V>: map::Map<uint, V> {\n         let mut idx = 0u, l = self.v.len();\n         while idx < l {\n             match self.v.get_elt(idx) {\n-              Some(elt) => if !it(&idx, &elt) { break },\n+              Some(ref elt) => if !it(&idx, elt) { break },\n               None => ()\n             }\n             idx += 1u;"}, {"sha": "f783addcf50879a06d78d07d8b463673053d9ce6", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,6 +1,5 @@\n //! Sorting methods\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use vec::{len, push};\n use core::cmp::{Eq, Ord};"}, {"sha": "5370f20cfa1cdccbc3ee3606340a676e78d26dd6", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -23,6 +23,7 @@ not required in or otherwise suitable for the core library.\n \n #[allow(vecs_implicitly_copyable)];\n #[deny(non_camel_case_types)];\n+#[forbid(deprecated_pattern)];\n \n extern mod core(vers = \"0.4\");\n use core::*;"}, {"sha": "c94a1ab46bf3a4b0332ead6a3190c02c5db86f83", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,6 +1,5 @@\n // NB: transitionary, de-mode-ing.\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n /**\n  * The concurrency primitives you know and love.\n  *"}, {"sha": "84c04aa1bd7b7c3174c4a7008dafff5745655179", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,7 +1,6 @@\n //! Temporary files and directories\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use core::option;\n use option::{None, Some};"}, {"sha": "2c12fd11e6eec0de3af8093ae2665d401e22b4fc", "filename": "src/libstd/term.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,6 +1,5 @@\n //! Simple ANSI color library\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use core::Option;\n \n@@ -38,9 +37,9 @@ pub fn color_supported() -> bool {\n     let supported_terms = ~[~\"xterm-color\", ~\"xterm\",\n                            ~\"screen-bce\", ~\"xterm-256color\"];\n     return match os::getenv(~\"TERM\") {\n-          option::Some(env) => {\n+          option::Some(ref env) => {\n             for vec::each(supported_terms) |term| {\n-                if *term == env { return true; }\n+                if *term == *env { return true; }\n             }\n             false\n           }"}, {"sha": "cb69c60a1c241402c21b475d5a63d9e210c2bb6b", "filename": "src/libstd/test.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -6,7 +6,6 @@\n // while providing a base that other test frameworks may build off of.\n \n #[warn(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;\n use either::Either;\n@@ -59,8 +58,8 @@ type TestDesc = {\n fn test_main(args: &[~str], tests: &[TestDesc]) {\n     let opts =\n         match parse_opts(args) {\n-          either::Left(o) => o,\n-          either::Right(m) => fail m\n+          either::Left(move o) => o,\n+          either::Right(move m) => fail m\n         };\n     if !run_tests_console(&opts, tests) { fail ~\"Some tests failed\"; }\n }\n@@ -76,8 +75,8 @@ fn parse_opts(args: &[~str]) -> OptRes {\n     let opts = ~[getopts::optflag(~\"ignored\"), getopts::optopt(~\"logfile\")];\n     let matches =\n         match getopts::getopts(args_, opts) {\n-          Ok(m) => m,\n-          Err(f) => return either::Right(getopts::fail_str(f))\n+          Ok(move m) => m,\n+          Err(move f) => return either::Right(getopts::fail_str(f))\n         };\n \n     let filter =\n@@ -120,13 +119,13 @@ fn run_tests_console(opts: &TestOpts,\n     fn callback(event: &TestEvent, st: ConsoleTestState) {\n         debug!(\"callback(event=%?)\", event);\n         match *event {\n-          TeFiltered(filtered_tests) => {\n-            st.total = vec::len(filtered_tests);\n+          TeFiltered(ref filtered_tests) => {\n+            st.total = filtered_tests.len();\n             let noun = if st.total != 1u { ~\"tests\" } else { ~\"test\" };\n             st.out.write_line(fmt!(\"\\nrunning %u %s\", st.total, noun));\n           }\n-          TeWait(test) => st.out.write_str(fmt!(\"test %s ... \", test.name)),\n-          TeResult(test, result) => {\n+          TeWait(ref test) => st.out.write_str(fmt!(\"test %s ... \", test.name)),\n+          TeResult(copy test, result) => {\n             match st.log_out {\n                 Some(f) => write_log(f, result, &test),\n                 None => ()\n@@ -141,7 +140,7 @@ fn run_tests_console(opts: &TestOpts,\n                 st.failed += 1u;\n                 write_failed(st.out, st.use_color);\n                 st.out.write_line(~\"\");\n-                st.failures.push(copy test);\n+                st.failures.push(test);\n               }\n               TrIgnored => {\n                 st.ignored += 1u;\n@@ -154,11 +153,11 @@ fn run_tests_console(opts: &TestOpts,\n     }\n \n     let log_out = match opts.logfile {\n-        Some(path) => match io::file_writer(&Path(path),\n+        Some(ref path) => match io::file_writer(&Path(*path),\n                                             ~[io::Create, io::Truncate]) {\n           result::Ok(w) => Some(w),\n-          result::Err(s) => {\n-              fail(fmt!(\"can't open output file: %s\", s))\n+          result::Err(ref s) => {\n+              fail(fmt!(\"can't open output file: %s\", *s))\n           }\n         },\n         None => None\n@@ -347,7 +346,7 @@ fn filter_tests(opts: &TestOpts,\n     } else {\n         let filter_str =\n             match opts.filter {\n-          option::Some(f) => f,\n+          option::Some(copy f) => f,\n           option::None => ~\"\"\n         };\n "}, {"sha": "2975d27e0640ef4a7fd0be6882bd8c384bf114ff", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use core::cmp::Eq;\n use libc::{c_char, c_int, c_long, size_t, time_t};\n@@ -576,7 +575,7 @@ fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             match rdr.read_char() {\n               '%' => match parse_type(s, pos, rdr.read_char(), &tm) {\n                 Ok(next) => pos = next,\n-                  Err(e) => { result = Err(e); break; }\n+                  Err(copy e) => { result = Err(e); break; }\n               },\n               c => {\n                 if c != ch { break }"}, {"sha": "ae79892b873547bd96184f77f6f68cd75d9aaf14", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,7 +1,6 @@\n //! Utilities that leverage libuv's `uv_timer_*` API\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use uv = uv;\n use uv::iotask;"}, {"sha": "184dfd362796c83f863908c436cceb06fb2659f6", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -6,7 +6,6 @@\n  * red-black tree or something else.\n  */\n #[warn(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n use core::cmp::{Eq, Ord};\n use core::option::{Some, None};"}, {"sha": "d353be2b44b7ab86012d7aefd26bccc2db4dcd81", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,5 +1,4 @@\n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n mod icu {\n     #[legacy_exports];"}, {"sha": "508426588d0f8aa819bc120b265d2cd3a17d6ff6", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -1,7 +1,6 @@\n //! A process-wide libuv event loop for library use.\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n export get;\n "}, {"sha": "c31238ecf4f00b8c1da9b196266c0dbf91fdef00", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9efaad9c978f71bd7ac2c91efbc957e25d43fb/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=bc9efaad9c978f71bd7ac2c91efbc957e25d43fb", "patch": "@@ -6,7 +6,6 @@\n  */\n \n #[forbid(deprecated_mode)];\n-#[forbid(deprecated_pattern)];\n \n export IoTask;\n export spawn_iotask;\n@@ -149,7 +148,7 @@ extern fn wake_up_cb(async_handle: *ll::uv_async_t,\n \n     while msg_po.peek() {\n         match msg_po.recv() {\n-          Interaction(cb) => cb(loop_ptr),\n+          Interaction(ref cb) => (*cb)(loop_ptr),\n           TeardownLoop => begin_teardown(data)\n         }\n     }"}]}