{"sha": "948172b93fc5d31b7234ad98ff6bac466401a86a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ODE3MmI5M2ZjNWQzMWI3MjM0YWQ5OGZmNmJhYzQ2NjQwMWE4NmE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-02T21:23:04Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-03T06:53:45Z"}, "message": "Make comparisons between region pointers work\n\nRegion pointers were considered a scalar type, so compare_scalar_type would\nget called to compare region pointers in trans. This would fail, since\ncompare_scalar_type has no case for region pointers.\n\nChanged type_is_scalar to return false for region pointers. This had the side\neffect of breaking casts to types of the form &T. To ameliorate that, I added\nlibrary functions ptr::assimilate (taking a &T to a *T) and ptr::to_uint\n(taking a &T to a uint), both of which use reinterpret_cast.\n\nWhile I was at it, I removed ty::type_has_resources, which is dead code.", "tree": {"sha": "1460fdb5dc1d5126a985f2bca9bbd5dc525f32ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1460fdb5dc1d5126a985f2bca9bbd5dc525f32ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/948172b93fc5d31b7234ad98ff6bac466401a86a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/948172b93fc5d31b7234ad98ff6bac466401a86a", "html_url": "https://github.com/rust-lang/rust/commit/948172b93fc5d31b7234ad98ff6bac466401a86a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/948172b93fc5d31b7234ad98ff6bac466401a86a/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31c5cec55bd8b43e6082f79dff888f52b585621d", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c5cec55bd8b43e6082f79dff888f52b585621d", "html_url": "https://github.com/rust-lang/rust/commit/31c5cec55bd8b43e6082f79dff888f52b585621d"}], "stats": {"total": 68, "additions": 54, "deletions": 14}, "files": [{"sha": "d63e1b755c00b3cf5c308b143a32b415fb1e6950", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=948172b93fc5d31b7234ad98ff6bac466401a86a", "patch": "@@ -1,6 +1,7 @@\n //! Unsafe pointer utility functions\n \n export addr_of;\n+export assimilate;\n export mut_addr_of;\n export offset;\n export const_offset;\n@@ -11,6 +12,7 @@ export is_not_null;\n export memcpy;\n export memmove;\n export memset;\n+export to_uint;\n export buf_len;\n export position;\n export extensions;\n@@ -124,6 +126,30 @@ unsafe fn memset<T>(dst: *mut T, c: int, count: uint)  {\n     libc_::memset(dst as *c_void, c as libc::c_int, n as size_t);\n }\n \n+\n+/**\n+  Transform a region pointer - &T - to an unsafe pointer - *T.\n+  This is safe, but is implemented with an unsafe block due to\n+  reinterpret_cast.\n+\n+  (\"assimilate\" because it makes the pointer forget its region.)\n+*/\n+#[inline(always)]\n+fn assimilate<T>(thing: &T) -> *T unsafe {\n+    unsafe::reinterpret_cast(thing)\n+}\n+/**\n+  Cast a region pointer - &T - to a uint.\n+  This is safe, but is implemented with an unsafe block due to\n+  reinterpret_cast.\n+\n+  (I couldn't think of a cutesy name for this one.)\n+*/\n+#[inline(always)]\n+fn to_uint<T>(thing: &T) -> uint unsafe {\n+    unsafe::reinterpret_cast(thing)\n+}\n+\n trait ptr {\n     pure fn is_null() -> bool;\n     pure fn is_not_null() -> bool;"}, {"sha": "f2976e67eebe44857f301aef3649d2f5b6542905", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=948172b93fc5d31b7234ad98ff6bac466401a86a", "patch": "@@ -61,7 +61,7 @@ mod linear {\n     // FIXME(#2979) would allow us to use region type for k\n     unsafe fn borrow<K>(&&k: K) -> &K {\n         let p: *K = ptr::addr_of(k);\n-        p as &K\n+        unsafe::reinterpret_cast(p)\n     }\n \n     impl private_methods<K,V> for &const linear_map<K,V> {"}, {"sha": "108abace1c9794ecaa21cd412cfd8869ab450788", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=948172b93fc5d31b7234ad98ff6bac466401a86a", "patch": "@@ -21,6 +21,7 @@\n  */\n \n import libc::size_t;\n+import ptr::assimilate;\n \n // libuv struct mappings\n type uv_ip4_addr = {\n@@ -822,7 +823,7 @@ unsafe fn ip4_name(src: &sockaddr_in) -> ~str {\n     let dst: ~[u8] = ~[0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n                      0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8];\n     do vec::as_buf(dst) |dst_buf, size| {\n-        rustrt::rust_uv_ip4_name(src as *sockaddr_in,\n+        rustrt::rust_uv_ip4_name(assimilate(src),\n                                  dst_buf, size as libc::size_t);\n         // seems that checking the result of uv_ip4_name\n         // doesn't work too well..\n@@ -842,7 +843,7 @@ unsafe fn ip6_name(src: &sockaddr_in6) -> ~str {\n                        0u8,0u8,0u8,0u8,0u8,0u8,0u8,0u8,\n                        0u8,0u8,0u8,0u8,0u8,0u8];\n     do vec::as_buf(dst) |dst_buf, size| {\n-        let src_unsafe_ptr = src as *sockaddr_in6;\n+        let src_unsafe_ptr = assimilate(src);\n         log(debug, fmt!{\"val of src *sockaddr_in6: %? sockaddr_in6: %?\",\n                         src_unsafe_ptr, src});\n         let result = rustrt::rust_uv_ip6_name(src_unsafe_ptr,"}, {"sha": "629f85c1a3c97d575a216dabdb67f6d65eafdd0a", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=948172b93fc5d31b7234ad98ff6bac466401a86a", "patch": "@@ -1347,7 +1347,7 @@ fn copy_val_no_check(bcx: block, action: copy_action, dst: ValueRef,\n     let _icx = bcx.insn_ctxt(~\"copy_val_no_check\");\n     let ccx = bcx.ccx();\n     let mut bcx = bcx;\n-    if ty::type_is_scalar(t) {\n+    if ty::type_is_scalar(t) || ty::type_is_region_ptr(t) {\n         Store(bcx, src, dst);\n         return bcx;\n     }\n@@ -1379,7 +1379,7 @@ fn move_val(cx: block, action: copy_action, dst: ValueRef,\n     let mut src_val = src.val;\n     let tcx = cx.tcx();\n     let mut cx = cx;\n-    if ty::type_is_scalar(t) {\n+    if ty::type_is_scalar(t) || ty::type_is_region_ptr(t) {\n         if src.kind == lv_owned { src_val = Load(cx, src_val); }\n         Store(cx, src_val, dst);\n         return cx;"}, {"sha": "74dbdd01bd8ad0abdad560f636f2dcc98e2ab4c7", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=948172b93fc5d31b7234ad98ff6bac466401a86a", "patch": "@@ -101,7 +101,8 @@ export region, bound_region, encl_region;\n export re_bound, re_free, re_scope, re_static, re_var;\n export br_self, br_anon, br_named, br_cap_avoid;\n export get, type_has_params, type_needs_infer, type_has_regions;\n-export type_has_resources, type_id;\n+export type_is_region_ptr;\n+export type_id;\n export tbox_has_flag;\n export ty_var_id;\n export ty_to_def_id;\n@@ -268,7 +269,6 @@ enum tbox_flag {\n     has_self = 2,\n     needs_infer = 4,\n     has_regions = 8,\n-    has_resources = 16,\n \n     // a meta-flag: subst may be required if the type has parameters, a self\n     // type, or references bound regions\n@@ -302,9 +302,6 @@ pure fn type_has_params(t: t) -> bool { tbox_has_flag(get(t), has_params) }\n pure fn type_has_self(t: t) -> bool { tbox_has_flag(get(t), has_self) }\n pure fn type_needs_infer(t: t) -> bool { tbox_has_flag(get(t), needs_infer) }\n pure fn type_has_regions(t: t) -> bool { tbox_has_flag(get(t), has_regions) }\n-pure fn type_has_resources(t: t) -> bool {\n-    tbox_has_flag(get(t), has_resources)\n-}\n pure fn type_def_id(t: t) -> option<ast::def_id> { get(t).o_def_id }\n pure fn type_id(t: t) -> uint { get(t).id }\n \n@@ -1227,10 +1224,15 @@ pure fn type_is_unique(ty: t) -> bool {\n     }\n }\n \n+/*\n+ A scalar type is one that denotes an atomic datum, with no sub-components.\n+ (A ty_ptr is scalar because it represents a non-managed pointer, so its\n+ contents are abstract to rustc.)\n+*/\n pure fn type_is_scalar(ty: t) -> bool {\n     alt get(ty).struct {\n       ty_nil | ty_bool | ty_int(_) | ty_float(_) | ty_uint(_) |\n-      ty_var_integral(_) | ty_type | ty_ptr(_) | ty_rptr(_, _) { true }\n+      ty_var_integral(_) | ty_type | ty_ptr(_) { true }\n       _ { false }\n     }\n }"}, {"sha": "dd545f29e4b96b75ebffd526ef560dcf7e9d7dc5", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=948172b93fc5d31b7234ad98ff6bac466401a86a", "patch": "@@ -1,3 +1,5 @@\n+import ptr::to_uint;\n+\n fn borrow(x: &int, f: fn(x: &int)) {\n     f(x)\n }\n@@ -6,7 +8,7 @@ fn test1(x: @~int) {\n     // Right now, at least, this induces a copy of the unique pointer:\n     do borrow({*x}) |p| {\n         let x_a = ptr::addr_of(**x);\n-        assert (x_a as uint) != (p as uint);\n+        assert (x_a as uint) != to_uint(p);\n         assert unsafe{*x_a} == *p;\n     }\n }"}, {"sha": "72e16d78511c778d9dbf415d9fe6324d611695a7", "filename": "src/test/run-pass/cast-region-to-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs?ref=948172b93fc5d31b7234ad98ff6bac466401a86a", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x = 3;\n-    debug!{\"&x=%x\", &x as uint};\n+    debug!{\"&x=%x\", ptr::to_uint(&x)};\n }\n\\ No newline at end of file"}, {"sha": "7625f2b74e0d073c63d44d5f7a1b159b28ae61cf", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=948172b93fc5d31b7234ad98ff6bac466401a86a", "patch": "@@ -1,8 +1,12 @@\n import libc::{c_double, c_int};\n import f64::*;\n \n+fn to_c_int(v: &mut int) -> &mut c_int unsafe {\n+    unsafe::reinterpret_cast(v)\n+}\n+\n fn lgamma(n: c_double, value: &mut int) -> c_double {\n-  return m::lgamma(n, value as &mut c_int);\n+  return m::lgamma(n, to_c_uint(value));\n }\n \n #[link_name = \"m\"]"}, {"sha": "f37576cba7b89f08c918148966233a3bf9009d3e", "filename": "src/test/run-pass/issue-3091.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Ftest%2Frun-pass%2Fissue-3091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/948172b93fc5d31b7234ad98ff6bac466401a86a/src%2Ftest%2Frun-pass%2Fissue-3091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3091.rs?ref=948172b93fc5d31b7234ad98ff6bac466401a86a", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x = 1;\n+    let y = 1;\n+    assert &x == &y;\n+}"}]}