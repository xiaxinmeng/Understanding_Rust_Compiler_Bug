{"sha": "546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NmYwMzFlNGU2NDNjN2NjNGRmNDRhMmEwOWFjN2M0YWY1ZTVhZDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T12:16:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T12:26:05Z"}, "message": "minor builder cleanups", "tree": {"sha": "0966100a969ea40544aba805eed93711fb3a85ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0966100a969ea40544aba805eed93711fb3a85ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7", "html_url": "https://github.com/rust-lang/rust/commit/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25fca0475343170b8398f5c87c76c455205ed3c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/25fca0475343170b8398f5c87c76c455205ed3c4", "html_url": "https://github.com/rust-lang/rust/commit/25fca0475343170b8398f5c87c76c455205ed3c4"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "11d69a04bf36d77c737fdb3bde03e20ff52b71ce", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7", "patch": "@@ -103,7 +103,7 @@ fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n     let mut ast_editor = AstEditor::new(fn_def.clone());\n     if fn_def.body().is_none() {\n         ast_editor.set_body(&AstBuilder::<ast::Block>::single_expr(\n-            &AstBuilder::<ast::Expr>::unimplemented(),\n+            AstBuilder::<ast::Expr>::unimplemented(),\n         ));\n     }\n     ast_editor.ast().to_owned()"}, {"sha": "f1c36b805a9535bea589727bb00cd81e7b53070d", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n         let arms = variants.filter_map(build_pat).map(|pat| {\n             AstBuilder::<ast::MatchArm>::from_pieces(\n                 iter::once(pat),\n-                &AstBuilder::<ast::Expr>::unit(),\n+                AstBuilder::<ast::Expr>::unit(),\n             )\n         });\n         let new_arm_list = AstBuilder::<ast::MatchArmList>::from_arms(arms);\n@@ -66,7 +66,7 @@ fn resolve_enum_def(\n }\n \n fn build_pat(var: ast::EnumVariant) -> Option<ast::Pat> {\n-    let path = &AstBuilder::<ast::Path>::from_pieces(var.parent_enum().name()?, var.name()?);\n+    let path = AstBuilder::<ast::Path>::from_pieces(var.parent_enum().name()?, var.name()?);\n \n     let pat: ast::Pat = match var.kind() {\n         ast::StructKind::Tuple(field_list) => {\n@@ -77,7 +77,7 @@ fn build_pat(var: ast::EnumVariant) -> Option<ast::Pat> {\n         ast::StructKind::Named(field_list) => {\n             let pats = field_list\n                 .fields()\n-                .map(|f| AstBuilder::<ast::BindPat>::from_name(&f.name().unwrap()).into());\n+                .map(|f| AstBuilder::<ast::BindPat>::from_name(f.name().unwrap()).into());\n             AstBuilder::<ast::RecordPat>::from_pieces(path, pats).into()\n         }\n         ast::StructKind::Unit => AstBuilder::<ast::PathPat>::from_path(path).into(),"}, {"sha": "171b1c936d3871bfc9ae976e395b65c285a55451", "filename": "crates/ra_assists/src/ast_builder.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7/crates%2Fra_assists%2Fsrc%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7/crates%2Fra_assists%2Fsrc%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_builder.rs?ref=546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7", "patch": "@@ -7,40 +7,40 @@ pub struct AstBuilder<N: AstNode> {\n }\n \n impl AstBuilder<ast::RecordField> {\n-    fn from_text(text: &str) -> ast::RecordField {\n-        ast_node_from_file_text(&format!(\"fn f() {{ S {{ {}, }} }}\", text))\n-    }\n-\n     pub fn from_pieces(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordField {\n         match expr {\n             Some(expr) => Self::from_text(&format!(\"{}: {}\", name.syntax(), expr.syntax())),\n             None => Self::from_text(&name.syntax().to_string()),\n         }\n     }\n+\n+    fn from_text(text: &str) -> ast::RecordField {\n+        ast_node_from_file_text(&format!(\"fn f() {{ S {{ {}, }} }}\", text))\n+    }\n }\n \n impl AstBuilder<ast::Block> {\n-    fn from_text(text: &str) -> ast::Block {\n-        ast_node_from_file_text(&format!(\"fn f() {}\", text))\n+    pub fn single_expr(e: ast::Expr) -> ast::Block {\n+        Self::from_text(&format!(\"{{ {} }}\", e.syntax()))\n     }\n \n-    pub fn single_expr(e: &ast::Expr) -> ast::Block {\n-        Self::from_text(&format!(\"{{ {} }}\", e.syntax()))\n+    fn from_text(text: &str) -> ast::Block {\n+        ast_node_from_file_text(&format!(\"fn f() {}\", text))\n     }\n }\n \n impl AstBuilder<ast::Expr> {\n-    fn from_text(text: &str) -> ast::Expr {\n-        ast_node_from_file_text(&format!(\"const C: () = {};\", text))\n-    }\n-\n     pub fn unit() -> ast::Expr {\n         Self::from_text(\"()\")\n     }\n \n     pub fn unimplemented() -> ast::Expr {\n         Self::from_text(\"unimplemented!()\")\n     }\n+\n+    fn from_text(text: &str) -> ast::Expr {\n+        ast_node_from_file_text(&format!(\"const C: () = {};\", text))\n+    }\n }\n \n impl AstBuilder<ast::NameRef> {\n@@ -50,10 +50,6 @@ impl AstBuilder<ast::NameRef> {\n }\n \n impl AstBuilder<ast::Path> {\n-    fn from_text(text: &str) -> ast::Path {\n-        ast_node_from_file_text(text)\n-    }\n-\n     pub fn from_name(name: ast::Name) -> ast::Path {\n         let name = name.syntax().to_string();\n         Self::from_text(name.as_str())\n@@ -62,109 +58,113 @@ impl AstBuilder<ast::Path> {\n     pub fn from_pieces(enum_name: ast::Name, var_name: ast::Name) -> ast::Path {\n         Self::from_text(&format!(\"{}::{}\", enum_name.syntax(), var_name.syntax()))\n     }\n-}\n \n-impl AstBuilder<ast::BindPat> {\n-    fn from_text(text: &str) -> ast::BindPat {\n-        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n+    fn from_text(text: &str) -> ast::Path {\n+        ast_node_from_file_text(text)\n     }\n+}\n \n-    pub fn from_name(name: &ast::Name) -> ast::BindPat {\n+impl AstBuilder<ast::BindPat> {\n+    pub fn from_name(name: ast::Name) -> ast::BindPat {\n         Self::from_text(name.text())\n     }\n-}\n \n-impl AstBuilder<ast::PlaceholderPat> {\n-    fn from_text(text: &str) -> ast::PlaceholderPat {\n+    fn from_text(text: &str) -> ast::BindPat {\n         ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n     }\n+}\n \n+impl AstBuilder<ast::PlaceholderPat> {\n     pub fn placeholder() -> ast::PlaceholderPat {\n         Self::from_text(\"_\")\n     }\n-}\n \n-impl AstBuilder<ast::TupleStructPat> {\n-    fn from_text(text: &str) -> ast::TupleStructPat {\n+    fn from_text(text: &str) -> ast::PlaceholderPat {\n         ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n     }\n+}\n \n+impl AstBuilder<ast::TupleStructPat> {\n     pub fn from_pieces(\n-        path: &ast::Path,\n+        path: ast::Path,\n         pats: impl Iterator<Item = ast::Pat>,\n     ) -> ast::TupleStructPat {\n         let pats_str = pats.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n         Self::from_text(&format!(\"{}({})\", path.syntax(), pats_str))\n     }\n-}\n \n-impl AstBuilder<ast::RecordPat> {\n-    fn from_text(text: &str) -> ast::RecordPat {\n+    fn from_text(text: &str) -> ast::TupleStructPat {\n         ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n     }\n+}\n \n-    pub fn from_pieces(path: &ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::RecordPat {\n+impl AstBuilder<ast::RecordPat> {\n+    pub fn from_pieces(path: ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::RecordPat {\n         let pats_str = pats.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n         Self::from_text(&format!(\"{}{{ {} }}\", path.syntax(), pats_str))\n     }\n-}\n \n-impl AstBuilder<ast::PathPat> {\n-    fn from_text(text: &str) -> ast::PathPat {\n+    fn from_text(text: &str) -> ast::RecordPat {\n         ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n     }\n+}\n \n-    pub fn from_path(path: &ast::Path) -> ast::PathPat {\n+impl AstBuilder<ast::PathPat> {\n+    pub fn from_path(path: ast::Path) -> ast::PathPat {\n         let path_str = path.syntax().text().to_string();\n         Self::from_text(path_str.as_str())\n     }\n-}\n \n-impl AstBuilder<ast::MatchArm> {\n-    fn from_text(text: &str) -> ast::MatchArm {\n-        ast_node_from_file_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n+    fn from_text(text: &str) -> ast::PathPat {\n+        ast_node_from_file_text(&format!(\"fn f({}: ())\", text))\n     }\n+}\n \n-    pub fn from_pieces(pats: impl Iterator<Item = ast::Pat>, expr: &ast::Expr) -> ast::MatchArm {\n+impl AstBuilder<ast::MatchArm> {\n+    pub fn from_pieces(pats: impl Iterator<Item = ast::Pat>, expr: ast::Expr) -> ast::MatchArm {\n         let pats_str = pats.map(|p| p.syntax().to_string()).join(\" | \");\n         Self::from_text(&format!(\"{} => {}\", pats_str, expr.syntax()))\n     }\n-}\n \n-impl AstBuilder<ast::MatchArmList> {\n-    fn from_text(text: &str) -> ast::MatchArmList {\n+    fn from_text(text: &str) -> ast::MatchArm {\n         ast_node_from_file_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n     }\n+}\n \n+impl AstBuilder<ast::MatchArmList> {\n     pub fn from_arms(arms: impl Iterator<Item = ast::MatchArm>) -> ast::MatchArmList {\n         let arms_str = arms.map(|arm| format!(\"\\n    {}\", arm.syntax())).join(\",\");\n         Self::from_text(&format!(\"{},\\n\", arms_str))\n     }\n-}\n \n-impl AstBuilder<ast::WherePred> {\n-    fn from_text(text: &str) -> ast::WherePred {\n-        ast_node_from_file_text(&format!(\"fn f() where {} {{ }}\", text))\n+    fn from_text(text: &str) -> ast::MatchArmList {\n+        ast_node_from_file_text(&format!(\"fn f() {{ match () {{{}}} }}\", text))\n     }\n+}\n \n+impl AstBuilder<ast::WherePred> {\n     pub fn from_pieces(\n         path: ast::Path,\n         bounds: impl Iterator<Item = ast::TypeBound>,\n     ) -> ast::WherePred {\n         let bounds = bounds.map(|b| b.syntax().to_string()).collect::<Vec<_>>().join(\" + \");\n         Self::from_text(&format!(\"{}: {}\", path.syntax(), bounds))\n     }\n-}\n \n-impl AstBuilder<ast::WhereClause> {\n-    fn from_text(text: &str) -> ast::WhereClause {\n+    fn from_text(text: &str) -> ast::WherePred {\n         ast_node_from_file_text(&format!(\"fn f() where {} {{ }}\", text))\n     }\n+}\n \n+impl AstBuilder<ast::WhereClause> {\n     pub fn from_predicates(preds: impl Iterator<Item = ast::WherePred>) -> ast::WhereClause {\n         let preds = preds.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n         Self::from_text(preds.as_str())\n     }\n+\n+    fn from_text(text: &str) -> ast::WhereClause {\n+        ast_node_from_file_text(&format!(\"fn f() where {} {{ }}\", text))\n+    }\n }\n \n fn ast_node_from_file_text<N: AstNode>(text: &str) -> N {"}]}