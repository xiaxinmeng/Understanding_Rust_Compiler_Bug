{"sha": "0bd5dd6449c9db734bd2d1700ea4b50e22b220be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZDVkZDY0NDljOWRiNzM0YmQyZDE3MDBlYTRiNTBlMjJiMjIwYmU=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-07-10T18:37:21Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-07-10T19:26:19Z"}, "message": "Improve incomplete unicode escape reporting\n\nThis improves diagnostic messages when \\u escape is used incorrectly and { is\nmissing. Instead of saying \u201cunknown character escape: u\u201d, it will now report\nthat unicode escape sequence is incomplete and suggest what the correct syntax\nis.", "tree": {"sha": "9d4df601110df7da605e21db7ccbabcaf4fc6135", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d4df601110df7da605e21db7ccbabcaf4fc6135"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bd5dd6449c9db734bd2d1700ea4b50e22b220be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd5dd6449c9db734bd2d1700ea4b50e22b220be", "html_url": "https://github.com/rust-lang/rust/commit/0bd5dd6449c9db734bd2d1700ea4b50e22b220be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bd5dd6449c9db734bd2d1700ea4b50e22b220be/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd8e175c4e39537b16beb40c704a17fcf9796852", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8e175c4e39537b16beb40c704a17fcf9796852", "html_url": "https://github.com/rust-lang/rust/commit/fd8e175c4e39537b16beb40c704a17fcf9796852"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "b5085b5c44ca80a14a77fc7cbb69f2254d711fd6", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0bd5dd6449c9db734bd2d1700ea4b50e22b220be/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd5dd6449c9db734bd2d1700ea4b50e22b220be/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=0bd5dd6449c9db734bd2d1700ea4b50e22b220be", "patch": "@@ -172,6 +172,11 @@ impl<'a> StringReader<'a> {\n         self.span_diagnostic.span_err(sp, m)\n     }\n \n+    /// Suggest some help with a given span.\n+    pub fn help_span(&self, sp: Span, m: &str) {\n+        self.span_diagnostic.span_help(sp, m)\n+    }\n+\n     /// Report a fatal error spanning [`from_pos`, `to_pos`).\n     fn fatal_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) -> ! {\n         self.fatal_span(codemap::mk_sp(from_pos, to_pos), m)\n@@ -182,6 +187,11 @@ impl<'a> StringReader<'a> {\n         self.err_span(codemap::mk_sp(from_pos, to_pos), m)\n     }\n \n+    /// Suggest some help spanning [`from_pos`, `to_pos`).\n+    fn help_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) {\n+        self.help_span(codemap::mk_sp(from_pos, to_pos), m)\n+    }\n+\n     /// Report a lexical error spanning [`from_pos`, `to_pos`), appending an\n     /// escaped character to the error message\n     fn fatal_span_char(&self, from_pos: BytePos, to_pos: BytePos, m: &str, c: char) -> ! {\n@@ -742,6 +752,13 @@ impl<'a> StringReader<'a> {\n                                    valid\n                                 }\n                             }\n+                            'u' if !ascii_only => {\n+                                self.err_span_(escaped_pos, self.last_pos,\n+                                    \"incomplete unicode escape sequence\");\n+                                self.help_span_(escaped_pos, self.last_pos,\n+                                    \"format of unicode escape sequences is `\\\\u{\u2026}`\");\n+                                false\n+                            }\n                             '\\n' if delim == '\"' => {\n                                 self.consume_whitespace();\n                                 true\n@@ -757,16 +774,13 @@ impl<'a> StringReader<'a> {\n                                     if ascii_only { \"unknown byte escape\" }\n                                     else { \"unknown character escape\" },\n                                     c);\n-                                let sp = codemap::mk_sp(escaped_pos, last_pos);\n                                 if e == '\\r' {\n-                                    self.span_diagnostic.span_help(\n-                                        sp,\n+                                    self.help_span_(escaped_pos, last_pos,\n                                         \"this is an isolated carriage return; consider checking \\\n                                          your editor and version control settings\")\n                                 }\n                                 if (e == '{' || e == '}') && !ascii_only {\n-                                    self.span_diagnostic.span_help(\n-                                        sp,\n+                                    self.help_span_(escaped_pos, last_pos,\n                                         \"if used in a formatting string, \\\n                                         curly braces are escaped with `{{` and `}}`\")\n                                 }"}, {"sha": "98db3efe114b07ca6d5a6b749995fccdce8a5805", "filename": "src/test/parse-fail/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0bd5dd6449c9db734bd2d1700ea4b50e22b220be/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd5dd6449c9db734bd2d1700ea4b50e22b220be/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs?ref=0bd5dd6449c9db734bd2d1700ea4b50e22b220be", "patch": "@@ -41,5 +41,5 @@ fn main() {\n     //~^ ERROR illegal unicode character escape\n     //~^^ ERROR illegal character in numeric character escape:\n     //~^^^ ERROR form of character escape may only be used with characters in the range [\\x00-\\x7f]\n-    //~^^^^ ERROR unknown character escape: u\n+    //~^^^^ ERROR incomplete unicode escape sequence\n }"}]}