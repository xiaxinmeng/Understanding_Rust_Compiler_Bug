{"sha": "80c0afe5ee76f5d7aabcf8525f8ea018047e1bee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYzBhZmU1ZWU3NmY1ZDdhYWJjZjg1MjVmOGVhMDE4MDQ3ZTFiZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-11T20:54:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-11T20:54:49Z"}, "message": "Auto merge of #5152 - flip1995:rustup, r=flip1995\n\nRustup to rust-lang/rust#68725\n\nPreparation for rust-lang/rust#68725\n\nchangelog: none", "tree": {"sha": "2ef856e48c112f9b3dce4c31a1e5d41fa12cf7bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef856e48c112f9b3dce4c31a1e5d41fa12cf7bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80c0afe5ee76f5d7aabcf8525f8ea018047e1bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80c0afe5ee76f5d7aabcf8525f8ea018047e1bee", "html_url": "https://github.com/rust-lang/rust/commit/80c0afe5ee76f5d7aabcf8525f8ea018047e1bee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80c0afe5ee76f5d7aabcf8525f8ea018047e1bee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c0a50ea9bda35428b4664159b104c1a07639eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c0a50ea9bda35428b4664159b104c1a07639eb", "html_url": "https://github.com/rust-lang/rust/commit/e1c0a50ea9bda35428b4664159b104c1a07639eb"}, {"sha": "57b636422a247228523185f65f4f827fc9270d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57b636422a247228523185f65f4f827fc9270d0c", "html_url": "https://github.com/rust-lang/rust/commit/57b636422a247228523185f65f4f827fc9270d0c"}], "stats": {"total": 87, "additions": 48, "deletions": 39}, "files": [{"sha": "cc519d525521237899cfc7b76c28710169b13940", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 48, "deletions": 39, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/80c0afe5ee76f5d7aabcf8525f8ea018047e1bee/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c0afe5ee76f5d7aabcf8525f8ea018047e1bee/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=80c0afe5ee76f5d7aabcf8525f8ea018047e1bee", "patch": "@@ -6,27 +6,16 @@ use rustc_lint::{LateContext, Lint, LintContext};\n use rustc_span::source_map::{MultiSpan, Span};\n use std::env;\n \n-/// Wrapper around `DiagnosticBuilder` that adds a link to Clippy documentation for the emitted lint\n-struct DiagnosticWrapper<'a>(DiagnosticBuilder<'a>);\n-\n-impl<'a> Drop for DiagnosticWrapper<'a> {\n-    fn drop(&mut self) {\n-        self.0.emit();\n-    }\n-}\n-\n-impl<'a> DiagnosticWrapper<'a> {\n-    fn docs_link(&mut self, lint: &'static Lint) {\n-        if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n-            self.0.help(&format!(\n-                \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{}\",\n-                &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n-                    // extract just major + minor version and ignore patch versions\n-                    format!(\"rust-{}\", n.rsplitn(2, '.').nth(1).unwrap())\n-                }),\n-                lint.name_lower().replacen(\"clippy::\", \"\", 1)\n-            ));\n-        }\n+fn docs_link(db: &mut DiagnosticBuilder<'_>, lint: &'static Lint) {\n+    if env::var(\"CLIPPY_DISABLE_DOCS_LINKS\").is_err() {\n+        db.help(&format!(\n+            \"for further information visit https://rust-lang.github.io/rust-clippy/{}/index.html#{}\",\n+            &option_env!(\"RUST_RELEASE_NUM\").map_or(\"master\".to_string(), |n| {\n+                // extract just major + minor version and ignore patch versions\n+                format!(\"rust-{}\", n.rsplitn(2, '.').nth(1).unwrap())\n+            }),\n+            lint.name_lower().replacen(\"clippy::\", \"\", 1)\n+        ));\n     }\n }\n \n@@ -48,7 +37,11 @@ impl<'a> DiagnosticWrapper<'a> {\n ///    |     ^^^^^^^^^^^^^^^^^^^^^^^\n /// ```\n pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<MultiSpan>, msg: &str) {\n-    DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg)).docs_link(lint);\n+    cx.struct_span_lint(lint, sp, |ldb| {\n+        let mut db = ldb.build(msg);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n /// Same as `span_lint` but with an extra `help` message.\n@@ -70,9 +63,12 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n /// ```\n pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n-    db.0.help(help);\n-    db.docs_link(lint);\n+    cx.struct_span_lint(lint, span, |ldb| {\n+        let mut db = ldb.build(msg);\n+        db.help(help);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n /// Like `span_lint` but with a `note` section instead of a `help` message.\n@@ -104,26 +100,36 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n     note_span: Span,\n     note: &str,\n ) {\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n-    if note_span == span {\n-        db.0.note(note);\n-    } else {\n-        db.0.span_note(note_span, note);\n-    }\n-    db.docs_link(lint);\n+    cx.struct_span_lint(lint, span, |ldb| {\n+        let mut db = ldb.build(msg);\n+        if note_span == span {\n+            db.note(note);\n+        } else {\n+            db.span_note(note_span, note);\n+        }\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n where\n     F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n {\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n-    f(&mut db.0);\n-    db.docs_link(lint);\n+    cx.struct_span_lint(lint, sp, |ldb| {\n+        let mut db = ldb.build(msg);\n+        f(&mut db);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n pub fn span_lint_hir(cx: &LateContext<'_, '_>, lint: &'static Lint, hir_id: HirId, sp: Span, msg: &str) {\n-    DiagnosticWrapper(cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg)).docs_link(lint);\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |ldb| {\n+        let mut db = ldb.build(msg);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n pub fn span_lint_hir_and_then(\n@@ -134,9 +140,12 @@ pub fn span_lint_hir_and_then(\n     msg: &str,\n     f: impl FnOnce(&mut DiagnosticBuilder<'_>),\n ) {\n-    let mut db = DiagnosticWrapper(cx.tcx.struct_span_lint_hir(lint, hir_id, sp, msg));\n-    f(&mut db.0);\n-    db.docs_link(lint);\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |ldb| {\n+        let mut db = ldb.build(msg);\n+        f(&mut db);\n+        docs_link(&mut db, lint);\n+        db.emit();\n+    });\n }\n \n /// Add a span lint with a suggestion on how to fix it."}]}