{"sha": "5b5e52186917502258a9feadc8bf77a89183386b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNWU1MjE4NjkxNzUwMjI1OGE5ZmVhZGM4YmY3N2E4OTE4MzM4NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-04T06:55:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-04T06:55:11Z"}, "message": "Auto merge of #32006 - jseyfried:fix_expanded_mod_path, r=nikomatsakis\n\nThis PR changes the search paths for macro-expanded non-inline modules so that they match ordinary non-inline modules (fixes #31624). This is a [breaking-change].\n\nRight now, the search paths for a macro-expanded non-inline module are computed as if the module were declared in the top level of the file in which the macro was defined.\nFor example, consider `./foo/mod.rs`:\n```rust\nmod inconsequential { // moving the macro outside this module wouldn't change anything\n    macro_rules! mod_decl {\n        ($i:ident) => { mod $i; }\n    }\n}\n```\nand `./lib.rs`:\n```rust\nmod foo;\n\nmod bar {\n    mod_decl!(baz);\n    //^ Now, rustc expects `./foo/baz.rs` (or `./foo/baz/mod.rs`)\n    //| After this PR, rustc will expect `./bar/baz.rs` (or `./bar/baz/mod.rs`)\n}\n```\nr? @alexcrichton", "tree": {"sha": "bd2159a81a0d3e7cbb81c6466b9df26292424a32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd2159a81a0d3e7cbb81c6466b9df26292424a32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b5e52186917502258a9feadc8bf77a89183386b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b5e52186917502258a9feadc8bf77a89183386b", "html_url": "https://github.com/rust-lang/rust/commit/5b5e52186917502258a9feadc8bf77a89183386b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b5e52186917502258a9feadc8bf77a89183386b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e261d12e3fcd6700b368d449ada4d10ebbf17f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e261d12e3fcd6700b368d449ada4d10ebbf17f8", "html_url": "https://github.com/rust-lang/rust/commit/8e261d12e3fcd6700b368d449ada4d10ebbf17f8"}, {"sha": "e2aa90e780eb4d6a27626f7d93ae3d6b567734a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2aa90e780eb4d6a27626f7d93ae3d6b567734a7", "html_url": "https://github.com/rust-lang/rust/commit/e2aa90e780eb4d6a27626f7d93ae3d6b567734a7"}], "stats": {"total": 117, "additions": 113, "deletions": 4}, "files": [{"sha": "c0306b8494be222b174e760f1638946fdb124dea", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b5e52186917502258a9feadc8bf77a89183386b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5e52186917502258a9feadc8bf77a89183386b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5b5e52186917502258a9feadc8bf77a89183386b", "patch": "@@ -552,6 +552,10 @@ pub struct ExtCtxt<'a> {\n \n     pub syntax_env: SyntaxEnv,\n     pub recursion_count: usize,\n+\n+    pub filename: Option<String>,\n+    pub mod_path_stack: Vec<InternedString>,\n+    pub in_block: bool,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -570,6 +574,10 @@ impl<'a> ExtCtxt<'a> {\n             exported_macros: Vec::new(),\n             syntax_env: env,\n             recursion_count: 0,\n+\n+            filename: None,\n+            mod_path_stack: Vec::new(),\n+            in_block: false,\n         }\n     }\n "}, {"sha": "e8098cfff457db3c500b6d637f26136b360b3e8c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5b5e52186917502258a9feadc8bf77a89183386b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5e52186917502258a9feadc8bf77a89183386b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5b5e52186917502258a9feadc8bf77a89183386b", "patch": "@@ -1183,6 +1183,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n }\n \n impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n+    fn fold_crate(&mut self, c: Crate) -> Crate {\n+        self.cx.filename = Some(self.cx.parse_sess.codemap().span_to_filename(c.span));\n+        noop_fold_crate(c, self)\n+    }\n+\n     fn fold_expr(&mut self, expr: P<ast::Expr>) -> P<ast::Expr> {\n         expand_expr(expr, self)\n     }\n@@ -1192,7 +1197,27 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n \n     fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n-        expand_item(item, self)\n+        use std::mem::replace;\n+        let result;\n+        if let ast::ItemKind::Mod(ast::Mod { inner, .. }) = item.node {\n+            if item.span.contains(inner) {\n+                self.push_mod_path(item.ident, &item.attrs);\n+                result = expand_item(item, self);\n+                self.pop_mod_path();\n+            } else {\n+                let filename = if inner != codemap::DUMMY_SP {\n+                    Some(self.cx.parse_sess.codemap().span_to_filename(inner))\n+                } else { None };\n+                let orig_filename = replace(&mut self.cx.filename, filename);\n+                let orig_mod_path_stack = replace(&mut self.cx.mod_path_stack, Vec::new());\n+                result = expand_item(item, self);\n+                self.cx.filename = orig_filename;\n+                self.cx.mod_path_stack = orig_mod_path_stack;\n+            }\n+        } else {\n+            result = expand_item(item, self);\n+        }\n+        result\n     }\n \n     fn fold_item_kind(&mut self, item: ast::ItemKind) -> ast::ItemKind {\n@@ -1204,7 +1229,10 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n \n     fn fold_block(&mut self, block: P<Block>) -> P<Block> {\n-        expand_block(block, self)\n+        let was_in_block = ::std::mem::replace(&mut self.cx.in_block, true);\n+        let result = expand_block(block, self);\n+        self.cx.in_block = was_in_block;\n+        result\n     }\n \n     fn fold_arm(&mut self, arm: ast::Arm) -> ast::Arm {\n@@ -1230,6 +1258,21 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n }\n \n+impl<'a, 'b> MacroExpander<'a, 'b> {\n+    fn push_mod_path(&mut self, id: Ident, attrs: &[ast::Attribute]) {\n+        let default_path = id.name.as_str();\n+        let file_path = match ::attr::first_attr_value_str_by_name(attrs, \"path\") {\n+            Some(d) => d,\n+            None => default_path,\n+        };\n+        self.cx.mod_path_stack.push(file_path)\n+    }\n+\n+    fn pop_mod_path(&mut self) {\n+        self.cx.mod_path_stack.pop().unwrap();\n+    }\n+}\n+\n fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n     /* this discards information in the case of macro-defining macros */\n     Span {"}, {"sha": "77bae4cb3f6c45b99789e9452b139043f051b11f", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b5e52186917502258a9feadc8bf77a89183386b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5e52186917502258a9feadc8bf77a89183386b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=5b5e52186917502258a9feadc8bf77a89183386b", "patch": "@@ -16,7 +16,7 @@ use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use ext::tt::macro_parser::parse;\n use parse::lexer::new_tt_reader;\n-use parse::parser::Parser;\n+use parse::parser::{Parser, Restrictions};\n use parse::token::{self, special_idents, gensym_ident, NtTT, Token};\n use parse::token::Token::*;\n use print;\n@@ -195,6 +195,12 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                                            imported_from,\n                                            rhs);\n                 let mut p = Parser::new(cx.parse_sess(), cx.cfg(), Box::new(trncbr));\n+                p.filename = cx.filename.clone();\n+                p.mod_path_stack = cx.mod_path_stack.clone();\n+                p.restrictions = match cx.in_block {\n+                    true => Restrictions::NO_NONINLINE_MOD,\n+                    false => Restrictions::empty(),\n+                };\n                 p.check_unknown_macro_variable();\n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros."}, {"sha": "e166a36721967eb933824499da2288e41dfea944", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b5e52186917502258a9feadc8bf77a89183386b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5e52186917502258a9feadc8bf77a89183386b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5b5e52186917502258a9feadc8bf77a89183386b", "patch": "@@ -273,6 +273,7 @@ pub struct Parser<'a> {\n     /// extra detail when the same error is seen twice\n     pub obsolete_set: HashSet<ObsoleteSyntax>,\n     /// Used to determine the path to externally loaded source files\n+    pub filename: Option<String>,\n     pub mod_path_stack: Vec<InternedString>,\n     /// Stack of spans of open delimiters. Used for error message.\n     pub open_braces: Vec<Span>,\n@@ -354,6 +355,9 @@ impl<'a> Parser<'a> {\n     {\n         let tok0 = rdr.real_token();\n         let span = tok0.sp;\n+        let filename = if span != codemap::DUMMY_SP {\n+            Some(sess.codemap().span_to_filename(span))\n+        } else { None };\n         let placeholder = TokenAndSpan {\n             tok: token::Underscore,\n             sp: span,\n@@ -382,6 +386,7 @@ impl<'a> Parser<'a> {\n             quote_depth: 0,\n             obsolete_set: HashSet::new(),\n             mod_path_stack: Vec::new(),\n+            filename: filename,\n             open_braces: Vec::new(),\n             owns_directory: true,\n             root_module_name: None,\n@@ -5325,7 +5330,7 @@ impl<'a> Parser<'a> {\n                    id: ast::Ident,\n                    outer_attrs: &[ast::Attribute],\n                    id_sp: Span) -> PResult<'a, ModulePathSuccess> {\n-        let mut prefix = PathBuf::from(&self.sess.codemap().span_to_filename(self.span));\n+        let mut prefix = PathBuf::from(self.filename.as_ref().unwrap());\n         prefix.pop();\n         let mut dir_path = prefix;\n         for part in &self.mod_path_stack {"}, {"sha": "8e631a64f7a27c0978fb35e18cb11ca88bcd4526", "filename": "src/test/compile-fail/macro-expanded-mod.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5b5e52186917502258a9feadc8bf77a89183386b/src%2Ftest%2Fcompile-fail%2Fmacro-expanded-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5e52186917502258a9feadc8bf77a89183386b/src%2Ftest%2Fcompile-fail%2Fmacro-expanded-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-expanded-mod.rs?ref=5b5e52186917502258a9feadc8bf77a89183386b", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that macro-expanded non-inline modules behave correctly\n+\n+macro_rules! mod_decl {\n+    ($i:ident) => { mod $i; }\n+}\n+\n+mod macro_expanded_mod_helper {\n+    mod_decl!(foo); // This should search in the folder `macro_expanded_mod_helper`\n+}\n+\n+fn main() {\n+    mod_decl!(foo); //~ ERROR Cannot declare a non-inline module inside a block\n+}"}, {"sha": "3ec34362da559d6c99ec9cfe801fbc1837ad2630", "filename": "src/test/compile-fail/macro_expanded_mod_helper/foo/bar.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5b5e52186917502258a9feadc8bf77a89183386b/src%2Ftest%2Fcompile-fail%2Fmacro_expanded_mod_helper%2Ffoo%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5e52186917502258a9feadc8bf77a89183386b/src%2Ftest%2Fcompile-fail%2Fmacro_expanded_mod_helper%2Ffoo%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro_expanded_mod_helper%2Ffoo%2Fbar.rs?ref=5b5e52186917502258a9feadc8bf77a89183386b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test"}, {"sha": "25fcf11ce175b3637aac9654d86f89721a20e84d", "filename": "src/test/compile-fail/macro_expanded_mod_helper/foo/mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b5e52186917502258a9feadc8bf77a89183386b/src%2Ftest%2Fcompile-fail%2Fmacro_expanded_mod_helper%2Ffoo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b5e52186917502258a9feadc8bf77a89183386b/src%2Ftest%2Fcompile-fail%2Fmacro_expanded_mod_helper%2Ffoo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro_expanded_mod_helper%2Ffoo%2Fmod.rs?ref=5b5e52186917502258a9feadc8bf77a89183386b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-test\n+\n+mod_decl!(bar);"}]}