{"sha": "62000c072e850f0a102db2b22e08b12d82e3c475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMDAwYzA3MmU4NTBmMGExMDJkYjJiMjJlMDhiMTJkODJlM2M0NzU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-18T22:21:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-06T08:48:19Z"}, "message": "Rename `ast::Variant_::name` into `ident` + Fix rebase", "tree": {"sha": "aaf83599211a419f8631434cc81964c37b9b2972", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaf83599211a419f8631434cc81964c37b9b2972"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62000c072e850f0a102db2b22e08b12d82e3c475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62000c072e850f0a102db2b22e08b12d82e3c475", "html_url": "https://github.com/rust-lang/rust/commit/62000c072e850f0a102db2b22e08b12d82e3c475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62000c072e850f0a102db2b22e08b12d82e3c475/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/43ad9723181d30dcf7531b0fb0fb975d6590f4c0", "html_url": "https://github.com/rust-lang/rust/commit/43ad9723181d30dcf7531b0fb0fb975d6590f4c0"}], "stats": {"total": 68, "additions": 30, "deletions": 38}, "files": [{"sha": "1b6242caf78b45a52673f1d2a5bd2956e94ad398", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -1358,7 +1358,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {\n         Spanned {\n             node: hir::Variant_ {\n-                name: v.node.name.name,\n+                name: v.node.ident.name,\n                 attrs: self.lower_attrs(&v.node.attrs),\n                 data: self.lower_variant_data(&v.node.data),\n                 disr_expr: v.node"}, {"sha": "47ae1adffde25ea9759c7d65814aff7e0bd4375a", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -132,7 +132,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     for v in &enum_definition.variants {\n                         let variant_def_index =\n                             this.create_def(v.node.data.id(),\n-                                            DefPathData::EnumVariant(v.node.name.name.as_str()),\n+                                            DefPathData::EnumVariant(v.node.ident.name.as_str()),\n                                             REGULAR_SPACE,\n                                             v.span);\n                         this.with_parent(variant_def_index, |this| {"}, {"sha": "bf86f6a69522f07492094c0fc81f28fee8646931", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -377,7 +377,7 @@ impl UnusedImportBraces {\n             let node_ident;\n             match items[0].0.kind {\n                 ast::UseTreeKind::Simple(rename) => {\n-                    let orig_ident = items[0].0.prefix.segments.last().unwrap().identifier;\n+                    let orig_ident = items[0].0.prefix.segments.last().unwrap().ident;\n                     if orig_ident.name == keywords::SelfValue.name() {\n                         return;\n                     } else {"}, {"sha": "edd4bca395c87f54f1b602bf2361136ad7a4e26b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -423,7 +423,7 @@ impl<'a> Resolver<'a> {\n                                        parent: Module<'a>,\n                                        vis: ty::Visibility,\n                                        expansion: Mark) {\n-        let ident = variant.node.name;\n+        let ident = variant.node.ident;\n         let def_id = self.definitions.local_def_id(variant.node.data.id());\n \n         // Define a name in the type namespace."}, {"sha": "5b039e327fdf20062e8c173f3506087bff6e5cb4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -851,7 +851,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n \n         // `visit::walk_variant` without the discriminant expression.\n         self.visit_variant_data(&variant.node.data,\n-                                variant.node.name,\n+                                variant.node.ident,\n                                 generics,\n                                 item_id,\n                                 variant.span);\n@@ -3988,7 +3988,7 @@ impl<'a> Resolver<'a> {\n             ast::VisibilityKind::Restricted { ref path, id, .. } => {\n                 // Visibilities are resolved as global by default, add starting root segment.\n                 let segments = path.make_root().iter().chain(path.segments.iter())\n-                    .map(|seg| respan(seg.span, seg.identifier))\n+                    .map(|seg| seg.ident)\n                     .collect::<Vec<_>>();\n                 let def = self.smart_resolve_path_fragment(id, None, &segments, path.span,\n                                                            PathSource::Visibility).base_def();"}, {"sha": "117eb8f198b083253c5ec5adafdfa4d729499ecd", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -663,7 +663,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         let access = access_from!(self.save_ctxt, item);\n \n         for variant in &enum_definition.variants {\n-            let name = variant.node.name.name.to_string();\n+            let name = variant.node.ident.name.to_string();\n             let mut qualname = enum_data.qualname.clone();\n             qualname.push_str(\"::\");\n             qualname.push_str(&name);"}, {"sha": "3cd356dd532c205c14c46e271d5ac04d3d1e50d8", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -297,7 +297,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 filter!(self.span_utils, sub_span, item.span, None);\n                 let variants_str = def.variants\n                     .iter()\n-                    .map(|v| v.node.name.to_string())\n+                    .map(|v| v.node.ident.to_string())\n                     .collect::<Vec<_>>()\n                     .join(\", \");\n                 let value = format!(\"{}::{{{}}}\", name, variants_str);"}, {"sha": "a9df898efb6350659e4191eaa504539763c20efa", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -692,7 +692,7 @@ impl Sig for ast::StructField {\n \n impl Sig for ast::Variant_ {\n     fn make(&self, offset: usize, _parent_id: Option<NodeId>, scx: &SaveContext) -> Result {\n-        let mut text = self.name.to_string();\n+        let mut text = self.ident.to_string();\n         match self.data {\n             ast::VariantData::Struct(ref fields, id) => {\n                 let name_def = SigElement {"}, {"sha": "f80cd433a964f9bf9a68346efb701095fd212e7e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -1866,7 +1866,7 @@ pub struct EnumDef {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Variant_ {\n-    pub name: Ident,\n+    pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n     pub data: VariantData,\n     /// Explicit discriminant, e.g. `Foo = 1`\n@@ -1900,7 +1900,7 @@ impl UseTree {\n         match self.kind {\n             UseTreeKind::Simple(Some(rename)) => rename,\n             UseTreeKind::Simple(None) =>\n-                self.prefix.segments.last().expect(\"empty prefix in a simple import\").identifier,\n+                self.prefix.segments.last().expect(\"empty prefix in a simple import\").ident,\n             _ => panic!(\"`UseTree::ident` can only be used on a simple import\"),\n         }\n     }"}, {"sha": "36911683a0e7785654cd7c88a642cec1c106814f", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -204,7 +204,7 @@ impl<'a> StripUnconfigured<'a> {\n                     self.configure(v).map(|v| {\n                         Spanned {\n                             node: ast::Variant_ {\n-                                name: v.node.name,\n+                                ident: v.node.ident,\n                                 attrs: v.node.attrs,\n                                 data: self.configure_variant_data(v.node.data),\n                                 disr_expr: v.node.disr_expr,"}, {"sha": "403ce1ab39fbbbd2b0c18c13d5bbdf5955857f08", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -1022,7 +1022,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             body)\n     }\n \n-    fn variant(&self, span: Span, name: Ident, tys: Vec<P<ast::Ty>> ) -> ast::Variant {\n+    fn variant(&self, span: Span, ident: Ident, tys: Vec<P<ast::Ty>> ) -> ast::Variant {\n         let fields: Vec<_> = tys.into_iter().map(|ty| {\n             ast::StructField {\n                 span: ty.span,\n@@ -1042,7 +1042,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n         respan(span,\n                ast::Variant_ {\n-                   name,\n+                   ident,\n                    attrs: Vec::new(),\n                    data: vdata,\n                    disr_expr: None,"}, {"sha": "bade36a7b1d016ab1b57c8febab6ebb2fe5ff8c8", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -430,7 +430,7 @@ pub fn noop_fold_global_asm<T: Folder>(ga: P<GlobalAsm>,\n pub fn noop_fold_variant<T: Folder>(v: Variant, fld: &mut T) -> Variant {\n     Spanned {\n         node: Variant_ {\n-            name: fld.fold_ident(v.node.name),\n+            ident: fld.fold_ident(v.node.ident),\n             attrs: fold_attrs(v.node.attrs, fld),\n             data: fld.fold_variant_data(v.node.data),\n             disr_expr: v.node.disr_expr.map(|e| fld.fold_expr(e)),"}, {"sha": "55a5e87c322fc2fabfbaf3328a9d717ed0684cad", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -873,10 +873,8 @@ mod tests {\n                     == P(ast::Pat{\n                     id: ast::DUMMY_NODE_ID,\n                     node: PatKind::Ident(ast::BindingMode::ByValue(ast::Mutability::Immutable),\n-                                        Spanned{ span:sp(0, 1),\n-                                                node: Ident::from_str(\"b\")\n-                        },\n-                                        None),\n+                                         Ident::new(Symbol::intern(\"b\"), sp(0, 1)),\n+                                         None),\n                     span: sp(0,1)}));\n             parser_done(parser);\n         })\n@@ -912,9 +910,7 @@ mod tests {\n                                             node: PatKind::Ident(\n                                                 ast::BindingMode::ByValue(\n                                                     ast::Mutability::Immutable),\n-                                                Spanned{\n-                                                    span: sp(6,7),\n-                                                    node: Ident::from_str(\"b\")},\n+                                                Ident::new(Symbol::intern(\"b\"), sp(6, 7)),\n                                                 None\n                                             ),\n                                             span: sp(6,7)"}, {"sha": "7799cc3800f3592798a81e828f8b653037f4961f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -6323,7 +6323,7 @@ impl<'a> Parser<'a> {\n             }\n \n             let vr = ast::Variant_ {\n-                name: ident,\n+                ident,\n                 attrs: variant_attrs,\n                 data: struct_def,\n                 disr_expr,"}, {"sha": "eeff1f59bec57ac56875044562bef07899500c15", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -1540,7 +1540,7 @@ impl<'a> State<'a> {\n     pub fn print_variant(&mut self, v: &ast::Variant) -> io::Result<()> {\n         self.head(\"\")?;\n         let generics = ast::Generics::default();\n-        self.print_struct(&v.node.data, &generics, v.node.name, v.span, false)?;\n+        self.print_struct(&v.node.data, &generics, v.node.ident, v.span, false)?;\n         match v.node.disr_expr {\n             Some(ref d) => {\n                 self.s.space()?;\n@@ -3194,7 +3194,7 @@ mod tests {\n             let ident = ast::Ident::from_str(\"principal_skinner\");\n \n             let var = codemap::respan(syntax_pos::DUMMY_SP, ast::Variant_ {\n-                name: ident,\n+                ident,\n                 attrs: Vec::new(),\n                 // making this up as I go.... ?\n                 data: ast::VariantData::Unit(ast::DUMMY_NODE_ID),"}, {"sha": "3e1c69ecc31efd60ec0e2d5a7fb1ba3a4605ba96", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -293,8 +293,8 @@ pub fn walk_variant<'a, V>(visitor: &mut V,\n                            item_id: NodeId)\n     where V: Visitor<'a>,\n {\n-    visitor.visit_ident(variant.span, variant.node.name);\n-    visitor.visit_variant_data(&variant.node.data, variant.node.name,\n+    visitor.visit_ident(variant.span, variant.node.ident);\n+    visitor.visit_variant_data(&variant.node.data, variant.node.ident,\n                              generics, item_id, variant.span);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);"}, {"sha": "dec24d13c9b493fd766013b773c612a14f966f0a", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -177,7 +177,7 @@ fn cs_clone(name: &str,\n             vdata = vdata_;\n         }\n         EnumMatching(.., variant, ref af) => {\n-            ctor_path = cx.path(trait_span, vec![substr.type_ident, variant.node.name]);\n+            ctor_path = cx.path(trait_span, vec![substr.type_ident, variant.node.ident]);\n             all_fields = af;\n             vdata = &variant.node.data;\n         }"}, {"sha": "c007285cd85191afdf4eaa0037e3cd5cf7035de1", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -61,7 +61,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<E\n     // based on the \"shape\".\n     let (ident, is_struct) = match *substr.fields {\n         Struct(vdata, _) => (substr.type_ident, vdata.is_struct()),\n-        EnumMatching(_, _, v, _) => (v.node.name, v.node.data.is_struct()),\n+        EnumMatching(_, _, v, _) => (v.node.ident, v.node.data.is_struct()),\n         EnumNonMatchingCollapsed(..) |\n         StaticStruct(..) |\n         StaticEnum(..) => cx.span_bug(span, \"nonsensical .fields in `#[derive(Debug)]`\"),"}, {"sha": "d579b3abd45a902b39a947ddc480975717fddcd1", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -277,7 +277,7 @@ fn encodable_substructure(cx: &mut ExtCtxt,\n             }\n \n             let blk = cx.lambda_stmts_1(trait_span, stmts, blkarg);\n-            let name = cx.expr_str(trait_span, variant.node.name.name);\n+            let name = cx.expr_str(trait_span, variant.node.ident.name);\n             let call = cx.expr_method_call(trait_span,\n                                            blkencoder,\n                                            cx.ident_of(\"emit_enum_variant\"),"}, {"sha": "4126ce79f355517d8e8502796727378adc4f73f2", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -1538,10 +1538,9 @@ impl<'a> MethodDef<'a> {\n         let summary = enum_def.variants\n             .iter()\n             .map(|v| {\n-                let ident = v.node.name;\n                 let sp = v.span.with_ctxt(trait_.span.ctxt());\n                 let summary = trait_.summarise_struct(cx, &v.node.data);\n-                (ident, sp, summary)\n+                (v.node.ident, sp, summary)\n             })\n             .collect();\n         self.call_substructure_method(cx,\n@@ -1667,9 +1666,8 @@ impl<'a> TraitDef<'a> {\n          prefix: &str,\n          mutbl: ast::Mutability)\n          -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n-        let variant_ident = variant.node.name;\n         let sp = variant.span.with_ctxt(self.span.ctxt());\n-        let variant_path = cx.path(sp, vec![enum_ident, variant_ident]);\n+        let variant_path = cx.path(sp, vec![enum_ident, variant.node.ident]);\n         let use_temporaries = false; // enums can't be repr(packed)\n         self.create_struct_pattern(cx, variant_path, &variant.node.data, prefix, mutbl,\n                                    use_temporaries)"}, {"sha": "39f7bcf40e69862cc74e6840f30e7434de6fdb5e", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62000c072e850f0a102db2b22e08b12d82e3c475/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=62000c072e850f0a102db2b22e08b12d82e3c475", "patch": "@@ -134,8 +134,7 @@ fn iter_exprs(depth: usize, f: &mut FnMut(P<Expr>)) {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(make_x(), e)));\n             },\n             10 => {\n-                let ident = Spanned { span: DUMMY_SP, node: Ident::from_str(\"f\") };\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::Field(e, ident)));\n+                iter_exprs(depth - 1, &mut |e| g(ExprKind::Field(e, Ident::from_str(\"f\"))));\n             },\n             11 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Range(\n@@ -151,8 +150,7 @@ fn iter_exprs(depth: usize, f: &mut FnMut(P<Expr>)) {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Ret(Some(e))));\n             },\n             14 => {\n-                let seg = PathSegment::new(Ident::from_str(\"S\"), DUMMY_SP);\n-                let path = Path { segments: vec![seg], span: DUMMY_SP };\n+                let path = Path::from_ident(DUMMY_SP, Ident::from_str(\"S\"));\n                 g(ExprKind::Struct(path, vec![], Some(make_x())));\n             },\n             15 => {"}]}