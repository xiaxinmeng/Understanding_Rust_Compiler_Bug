{"sha": "3e832484414e4b0b28682f9ae6c3607fd5db53f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlODMyNDg0NDE0ZTRiMGIyODY4MmY5YWU2YzM2MDdmZDVkYjUzZjQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-31T21:04:21Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-06T13:25:19Z"}, "message": "Add comments", "tree": {"sha": "4205619de99a3d0716d6e086b4410fdcc284d7e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4205619de99a3d0716d6e086b4410fdcc284d7e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e832484414e4b0b28682f9ae6c3607fd5db53f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e832484414e4b0b28682f9ae6c3607fd5db53f4", "html_url": "https://github.com/rust-lang/rust/commit/3e832484414e4b0b28682f9ae6c3607fd5db53f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e832484414e4b0b28682f9ae6c3607fd5db53f4/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2555bd5456ee12b24777a4eb65dd80fdc788923", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2555bd5456ee12b24777a4eb65dd80fdc788923", "html_url": "https://github.com/rust-lang/rust/commit/b2555bd5456ee12b24777a4eb65dd80fdc788923"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "e66ad24231094967b43876bf1fa448ae996d8c30", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e832484414e4b0b28682f9ae6c3607fd5db53f4/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e832484414e4b0b28682f9ae6c3607fd5db53f4/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3e832484414e4b0b28682f9ae6c3607fd5db53f4", "patch": "@@ -1737,20 +1737,28 @@ pub mod tls {\n         pub task: &'a OpenTask,\n     }\n \n+    /// Sets Rayon's thread local variable which is preserved for Rayon jobs\n+    /// to `value` during the call to `f`. It is restored to its previous value after.\n+    /// This is used to set the pointer to the new ImplicitCtxt.\n     #[cfg(parallel_queries)]\n     fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n         rayon_core::tlv::with(value, f)\n     }\n \n+    /// Gets Rayon's thread local variable which is preserved for Rayon jobs.\n+    /// This is used to get the pointer to the current ImplicitCtxt.\n     #[cfg(parallel_queries)]\n     fn get_tlv() -> usize {\n         rayon_core::tlv::get()\n     }\n \n-    // A thread local value which stores a pointer to the current ImplicitCtxt\n+    /// A thread local variable which stores a pointer to the current ImplicitCtxt\n     #[cfg(not(parallel_queries))]\n     thread_local!(static TLV: Cell<usize> = Cell::new(0));\n \n+    /// Sets TLV to `value` during the call to `f`.\n+    /// It is restored to its previous value after.\n+    /// This is used to set the pointer to the new ImplicitCtxt.\n     #[cfg(not(parallel_queries))]\n     fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n         let old = get_tlv();\n@@ -1759,6 +1767,7 @@ pub mod tls {\n         f()\n     }\n \n+    /// This is used to get the pointer to the current ImplicitCtxt.\n     #[cfg(not(parallel_queries))]\n     fn get_tlv() -> usize {\n         TLV.with(|tlv| tlv.get())\n@@ -1828,9 +1837,11 @@ pub mod tls {\n         where F: for<'a> FnOnce(TyCtxt<'a, 'gcx, 'gcx>) -> R\n     {\n         with_thread_locals(|| {\n+            // Update GCX_PTR to indicate there's a GlobalCtxt available\n             GCX_PTR.with(|lock| {\n                 *lock.lock() = gcx as *const _ as usize;\n             });\n+            // Set GCX_PTR back to 0 when we exit\n             let _on_drop = OnDrop(move || {\n                 GCX_PTR.with(|lock| *lock.lock() = 0);\n             });\n@@ -1851,8 +1862,13 @@ pub mod tls {\n         })\n     }\n \n+    /// Stores a pointer to the GlobalCtxt if one is available.\n+    /// This is used to access the GlobalCtxt in the deadlock handler\n+    /// given to Rayon.\n     scoped_thread_local!(pub static GCX_PTR: Lock<usize>);\n \n+    /// Creates a TyCtxt and ImplicitCtxt based on the GCX_PTR thread local.\n+    /// This is used in the deadlock handler.\n     pub unsafe fn with_global<F, R>(f: F) -> R\n         where F: for<'a, 'gcx, 'tcx> FnOnce(TyCtxt<'a, 'gcx, 'tcx>) -> R\n     {"}, {"sha": "e28435489bd2097d8b8dea38daf2aced5b8f09ba", "filename": "src/librustc/ty/maps/job.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e832484414e4b0b28682f9ae6c3607fd5db53f4/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e832484414e4b0b28682f9ae6c3607fd5db53f4/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs?ref=3e832484414e4b0b28682f9ae6c3607fd5db53f4", "patch": "@@ -61,6 +61,7 @@ pub struct QueryJob<'tcx> {\n     /// Diagnostic messages which are emitted while the query executes\n     pub diagnostics: Lock<Vec<Diagnostic>>,\n \n+    /// The latch which is used to wait on this job\n     #[cfg(parallel_queries)]\n     latch: QueryLatch<'tcx>,\n }\n@@ -200,7 +201,7 @@ impl<'tcx> QueryLatch<'tcx> {\n             // this thread.\n             info.waiters.push(waiter.clone());\n \n-            // If this detects a deadlock and the deadlock handler want to resume this thread\n+            // If this detects a deadlock and the deadlock handler wants to resume this thread\n             // we have to be in the `wait` call. This is ensured by the deadlock handler\n             // getting the self.info lock.\n             rayon_core::mark_blocked();"}]}