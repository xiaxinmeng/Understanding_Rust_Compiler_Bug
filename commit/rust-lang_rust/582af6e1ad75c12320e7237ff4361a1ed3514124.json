{"sha": "582af6e1ad75c12320e7237ff4361a1ed3514124", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MmFmNmUxYWQ3NWMxMjMyMGU3MjM3ZmY0MzYxYTFlZDM1MTQxMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T20:12:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-19T20:12:56Z"}, "message": "Auto merge of #43178 - zackmdavis:some_suggestion, r=eddyb\n\nsuggest one-argument enum variant to fix type mismatch when applicable\n\nFollowing @est31's [suggestion](https://github.com/rust-lang/rust/issues/42764#issuecomment-309680886).\n\n![some_suggestion](https://user-images.githubusercontent.com/1076988/28101064-ee83f51e-667a-11e7-9e4f-d8f9eb2fb6c3.png)\n\nResolves #42764.", "tree": {"sha": "66e47e103a40d31f4f7d477192ef064067eeca67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66e47e103a40d31f4f7d477192ef064067eeca67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/582af6e1ad75c12320e7237ff4361a1ed3514124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/582af6e1ad75c12320e7237ff4361a1ed3514124", "html_url": "https://github.com/rust-lang/rust/commit/582af6e1ad75c12320e7237ff4361a1ed3514124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/582af6e1ad75c12320e7237ff4361a1ed3514124/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bbbd29e82fb7fc9f79736653d42100979899832", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbbd29e82fb7fc9f79736653d42100979899832", "html_url": "https://github.com/rust-lang/rust/commit/9bbbd29e82fb7fc9f79736653d42100979899832"}, {"sha": "80c603fc6589aaf70df7c142723eef9a1d28aec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/80c603fc6589aaf70df7c142723eef9a1d28aec5", "html_url": "https://github.com/rust-lang/rust/commit/80c603fc6589aaf70df7c142723eef9a1d28aec5"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "828106df7821b2e1b435c295b4b3a40c471d36c4", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/582af6e1ad75c12320e7237ff4361a1ed3514124/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582af6e1ad75c12320e7237ff4361a1ed3514124/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=582af6e1ad75c12320e7237ff4361a1ed3514124", "patch": "@@ -16,6 +16,7 @@ use rustc::traits::ObligationCause;\n use syntax::ast;\n use syntax_pos::{self, Span};\n use rustc::hir;\n+use rustc::hir::print;\n use rustc::hir::def::Def;\n use rustc::ty::{self, Ty, AssociatedItem};\n use errors::{DiagnosticBuilder, CodeMapper};\n@@ -94,6 +95,34 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let cause = self.misc(expr.span);\n             let expr_ty = self.resolve_type_vars_with_obligations(checked_ty);\n             let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n+\n+            // If the expected type is an enum with any variants whose sole\n+            // field is of the found type, suggest such variants. See Issue\n+            // #42764.\n+            if let ty::TyAdt(expected_adt, substs) = expected.sty {\n+                let mut compatible_variants = vec![];\n+                for variant in &expected_adt.variants {\n+                    if variant.fields.len() == 1 {\n+                        let sole_field = &variant.fields[0];\n+                        let sole_field_ty = sole_field.ty(self.tcx, substs);\n+                        if self.can_coerce(expr_ty, sole_field_ty) {\n+                            let mut variant_path = self.tcx.item_path_str(variant.did);\n+                            variant_path = variant_path.trim_left_matches(\"std::prelude::v1::\")\n+                                .to_string();\n+                            compatible_variants.push(variant_path);\n+                        }\n+                    }\n+                }\n+                if !compatible_variants.is_empty() {\n+                    let expr_text = print::to_string(print::NO_ANN, |s| s.print_expr(expr));\n+                    let suggestions = compatible_variants.iter()\n+                        .map(|v| format!(\"{}({})\", v, expr_text)).collect::<Vec<_>>();\n+                    err.span_suggestions(expr.span,\n+                                         \"perhaps you meant to use a variant of the expected type\",\n+                                         suggestions);\n+                }\n+            }\n+\n             if let Some(suggestion) = self.check_ref(expr,\n                                                      checked_ty,\n                                                      expected) {"}, {"sha": "ecaeb7b1161f7fc332a4a61011033a260606b3c4", "filename": "src/test/ui/did_you_mean/issue-42764.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/582af6e1ad75c12320e7237ff4361a1ed3514124/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582af6e1ad75c12320e7237ff4361a1ed3514124/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs?ref=582af6e1ad75c12320e7237ff4361a1ed3514124", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum DoubleOption<T> {\n+    FirstSome(T),\n+    AlternativeSome(T),\n+    Nothing,\n+}\n+\n+fn this_function_expects_a_double_option<T>(d: DoubleOption<T>) {}\n+\n+fn main() {\n+    let n: usize = 42;\n+    this_function_expects_a_double_option(n);\n+}"}, {"sha": "7ba129039bc2f028795fc0178edaee4133b9e780", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/582af6e1ad75c12320e7237ff4361a1ed3514124/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582af6e1ad75c12320e7237ff4361a1ed3514124/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=582af6e1ad75c12320e7237ff4361a1ed3514124", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-42764.rs:21:43\n+   |\n+21 |     this_function_expects_a_double_option(n);\n+   |                                           ^ expected enum `DoubleOption`, found usize\n+   |\n+   = note: expected type `DoubleOption<_>`\n+              found type `usize`\n+help: perhaps you meant to use a variant of the expected type\n+   |\n+21 |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+21 |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}