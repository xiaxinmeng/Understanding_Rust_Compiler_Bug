{"sha": "8fe8bad96b88cf981458e836e6866ddc7966cecb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZThiYWQ5NmI4OGNmOTgxNDU4ZTgzNmU2ODY2ZGRjNzk2NmNlY2I=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-22T14:48:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-22T14:48:41Z"}, "message": "Rollup merge of #70254 - matthiaskrgr:cl4ppy, r=Centril\n\ncouple more clippy fixes (let_and_return, if_same_then_else)\n\n* summarize if-else-code with identical blocks (clippy::if_same_then_else)\n* don't create variable bindings just to return the bound value immediately (clippy::let_and_return)", "tree": {"sha": "8b6472e894c409e9d728067bbcf2673d406e2fb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b6472e894c409e9d728067bbcf2673d406e2fb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe8bad96b88cf981458e836e6866ddc7966cecb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJed3rKCRBK7hj4Ov3rIwAAdHIIAG8GUYHySi9u/208DeGuwEbz\nYcinNXSEAQk5uQo7k1Ar/6uPt3f9HVS0phSt60/u10zmEZSXRfkJ57lG2p0CTBad\nsIOzMnR5HCB+9NWDwjDiNGHFbiwFXQoXbXFS9nJnGDqqjcDI+7o4UIZwb5E883Ec\nl/FGRcrewRV9ymerG9+gORdZwReM4Tq5QHt20HLDn2uDNuGyTSDGdpL4RETw92CC\n6UKdajDoErnu+7U1jXv2cqmgBzeYF3gksx5whYvyLcC65znnVsf90tf+HVGBrtdx\nTQ8+8FSE6A6Nop33UJkTmO9urljRMT9u2SgaqFLYIiwkKw039WGbtFltHuD7aLo=\n=J1B8\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b6472e894c409e9d728067bbcf2673d406e2fb2\nparent e5d34766510fd61b07012103bf6e7b83f963a33f\nparent 74d68ea7ebe2085bba2758ccce366f1fa4fc6210\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584888521 +0100\ncommitter GitHub <noreply@github.com> 1584888521 +0100\n\nRollup merge of #70254 - matthiaskrgr:cl4ppy, r=Centril\n\ncouple more clippy fixes (let_and_return, if_same_then_else)\n\n* summarize if-else-code with identical blocks (clippy::if_same_then_else)\n* don't create variable bindings just to return the bound value immediately (clippy::let_and_return)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe8bad96b88cf981458e836e6866ddc7966cecb", "html_url": "https://github.com/rust-lang/rust/commit/8fe8bad96b88cf981458e836e6866ddc7966cecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe8bad96b88cf981458e836e6866ddc7966cecb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5d34766510fd61b07012103bf6e7b83f963a33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d34766510fd61b07012103bf6e7b83f963a33f", "html_url": "https://github.com/rust-lang/rust/commit/e5d34766510fd61b07012103bf6e7b83f963a33f"}, {"sha": "74d68ea7ebe2085bba2758ccce366f1fa4fc6210", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d68ea7ebe2085bba2758ccce366f1fa4fc6210", "html_url": "https://github.com/rust-lang/rust/commit/74d68ea7ebe2085bba2758ccce366f1fa4fc6210"}], "stats": {"total": 101, "additions": 34, "deletions": 67}, "files": [{"sha": "d8fc1faca3a39c616fdd3d1a7d05ce7810c59d61", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -145,8 +145,7 @@ mod hack {\n         unsafe {\n             let len = b.len();\n             let b = Box::into_raw(b);\n-            let xs = Vec::from_raw_parts(b as *mut T, len, len);\n-            xs\n+            Vec::from_raw_parts(b as *mut T, len, len)\n         }\n     }\n "}, {"sha": "cd4b73a3d1ff6706cfe9f70834e387a7ff92c780", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -1044,9 +1044,7 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n         collector.finalize_and_compute_crate_hash(crate_disambiguator, &*tcx.cstore, cmdline_args)\n     };\n \n-    let map = tcx.arena.alloc(IndexedHir { crate_hash, map });\n-\n-    map\n+    tcx.arena.alloc(IndexedHir { crate_hash, map })\n }\n \n /// Identical to the `PpAnn` implementation for `hir::Crate`,"}, {"sha": "0a0e975e5a54c6fe113e4fc3422ac0845b18aa74", "filename": "src/librustc_codegen_ssa/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -81,9 +81,7 @@ fn get_rpaths(config: &mut RPathConfig<'_>, libs: &[PathBuf]) -> Vec<String> {\n     rpaths.extend_from_slice(&fallback_rpaths);\n \n     // Remove duplicates\n-    let rpaths = minimize_rpaths(&rpaths);\n-\n-    rpaths\n+    minimize_rpaths(&rpaths)\n }\n \n fn get_rpaths_relative_to_output(config: &mut RPathConfig<'_>, libs: &[PathBuf]) -> Vec<String> {"}, {"sha": "746ab34d2844d6cd631e4f242ad93c395be5bba7", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -288,7 +288,7 @@ fn generate_lto_work<B: ExtraBackendMethods>(\n         B::run_thin_lto(cgcx, needs_thin_lto, import_only_modules).unwrap_or_else(|e| e.raise())\n     };\n \n-    let result = lto_modules\n+    lto_modules\n         .into_iter()\n         .map(|module| {\n             let cost = module.cost();\n@@ -303,9 +303,7 @@ fn generate_lto_work<B: ExtraBackendMethods>(\n                 0,\n             )\n         }))\n-        .collect();\n-\n-    result\n+        .collect()\n }\n \n pub struct CompiledModules {"}, {"sha": "7b01f39d810b5572d343fa3f1ec4d1ed31979a7a", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -555,7 +555,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         // avoid allocations in those cases. We also don't use `indices` to\n         // determine if a kind has been seen before until the limit of 8 has\n         // been exceeded, to also avoid allocations for `indices`.\n-        let var = if !var_values.spilled() {\n+        if !var_values.spilled() {\n             // `var_values` is stack-allocated. `indices` isn't used yet. Do a\n             // direct linear search of `var_values`.\n             if let Some(idx) = var_values.iter().position(|&k| k == kind) {\n@@ -589,9 +589,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n                 assert_eq!(variables.len(), var_values.len());\n                 BoundVar::new(variables.len() - 1)\n             })\n-        };\n-\n-        var\n+        }\n     }\n \n     /// Shorthand helper that creates a canonical region variable for"}, {"sha": "3e78a5852354f47ddad23cc9ad6ecf49584031da", "filename": "src/librustc_metadata/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_metadata%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdynamic_lib.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -94,14 +94,12 @@ mod dl {\n             let result = f();\n \n             let last_error = libc::dlerror() as *const _;\n-            let ret = if ptr::null() == last_error {\n+            if ptr::null() == last_error {\n                 Ok(result)\n             } else {\n                 let s = CStr::from_ptr(last_error).to_bytes();\n                 Err(str::from_utf8(s).unwrap().to_owned())\n-            };\n-\n-            ret\n+            }\n         }\n     }\n "}, {"sha": "276aabec13da0624a70bc6923ff909fcfdd6b461", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -184,14 +184,13 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             ..\n         } = self.builder;\n         *rev_lookup.projections.entry((base, elem.lift())).or_insert_with(move || {\n-            let path = MoveDataBuilder::new_move_path(\n+            MoveDataBuilder::new_move_path(\n                 move_paths,\n                 path_map,\n                 init_path_map,\n                 Some(base),\n                 mk_place(*tcx),\n-            );\n-            path\n+            )\n         })\n     }\n "}, {"sha": "b41043ee5107591e5a4ad4d55e454ef02c7707aa", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -398,7 +398,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     where\n         F: FnOnce(&mut Self) -> InterpResult<'tcx, T>,\n     {\n-        let r = match f(self) {\n+        match f(self) {\n             Ok(val) => Some(val),\n             Err(error) => {\n                 // Some errors shouldn't come up because creating them causes\n@@ -412,8 +412,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 );\n                 None\n             }\n-        };\n-        r\n+        }\n     }\n \n     fn eval_constant(&mut self, c: &Constant<'tcx>, source_info: SourceInfo) -> Option<OpTy<'tcx>> {"}, {"sha": "ac58cbb9e8dae7bf45aa47d7209c8dd86e1eeabb", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -187,14 +187,12 @@ impl<'a> StringReader<'a> {\n             rustc_lexer::TokenKind::LineComment => {\n                 let string = self.str_from(start);\n                 // comments with only more \"/\"s are not doc comments\n-                let tok = if comments::is_line_doc_comment(string) {\n+                if comments::is_line_doc_comment(string) {\n                     self.forbid_bare_cr(start, string, \"bare CR not allowed in doc-comment\");\n                     token::DocComment(Symbol::intern(string))\n                 } else {\n                     token::Comment\n-                };\n-\n-                tok\n+                }\n             }\n             rustc_lexer::TokenKind::BlockComment { terminated } => {\n                 let string = self.str_from(start);\n@@ -212,14 +210,12 @@ impl<'a> StringReader<'a> {\n                     self.fatal_span_(start, last_bpos, msg).raise();\n                 }\n \n-                let tok = if is_doc_comment {\n+                if is_doc_comment {\n                     self.forbid_bare_cr(start, string, \"bare CR not allowed in block doc-comment\");\n                     token::DocComment(Symbol::intern(string))\n                 } else {\n                     token::Comment\n-                };\n-\n-                tok\n+                }\n             }\n             rustc_lexer::TokenKind::Whitespace => token::Whitespace,\n             rustc_lexer::TokenKind::Ident | rustc_lexer::TokenKind::RawIdent => {"}, {"sha": "fddfe48bf86700969e5b5f431418f493a2b8b17d", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -217,13 +217,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses the RHS of a local variable declaration (e.g., '= 14;').\n     fn parse_initializer(&mut self, skip_eq: bool) -> PResult<'a, Option<P<Expr>>> {\n-        if self.eat(&token::Eq) {\n-            Ok(Some(self.parse_expr()?))\n-        } else if skip_eq {\n-            Ok(Some(self.parse_expr()?))\n-        } else {\n-            Ok(None)\n-        }\n+        if self.eat(&token::Eq) || skip_eq { Ok(Some(self.parse_expr()?)) } else { Ok(None) }\n     }\n \n     /// Parses a block. No inner attributes are allowed."}, {"sha": "9e5ff32391486e2279e8aa840de51b641119bdaf", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -59,8 +59,7 @@ crate struct ImportSuggestion {\n /// `source_map` functions and this function to something more robust.\n fn reduce_impl_span_to_impl_keyword(sm: &SourceMap, impl_span: Span) -> Span {\n     let impl_span = sm.span_until_char(impl_span, '<');\n-    let impl_span = sm.span_until_whitespace(impl_span);\n-    impl_span\n+    sm.span_until_whitespace(impl_span)\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "5b112677cf77fabd86ff7cd0e18579a1b78b7c5a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -1871,16 +1871,15 @@ impl<'a> Resolver<'a> {\n                 // No adjustments\n             }\n         }\n-        let result = self.resolve_ident_in_module_unadjusted_ext(\n+        self.resolve_ident_in_module_unadjusted_ext(\n             module,\n             ident,\n             ns,\n             adjusted_parent_scope,\n             false,\n             record_used,\n             path_span,\n-        );\n-        result\n+        )\n     }\n \n     fn resolve_crate_root(&mut self, ident: Ident) -> Module<'a> {"}, {"sha": "7203980b2388f482467b394208143abf973a4441", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -1069,16 +1069,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         });\n \n-        let elt_ts_iter = elts.iter().enumerate().map(|(i, e)| {\n-            let t = match flds {\n-                Some(ref fs) if i < fs.len() => {\n-                    let ety = fs[i].expect_ty();\n-                    self.check_expr_coercable_to_type(&e, ety);\n-                    ety\n-                }\n-                _ => self.check_expr_with_expectation(&e, NoExpectation),\n-            };\n-            t\n+        let elt_ts_iter = elts.iter().enumerate().map(|(i, e)| match flds {\n+            Some(ref fs) if i < fs.len() => {\n+                let ety = fs[i].expect_ty();\n+                self.check_expr_coercable_to_type(&e, ety);\n+                ety\n+            }\n+            _ => self.check_expr_with_expectation(&e, NoExpectation),\n         });\n         let tuple = self.tcx.mk_tup(elt_ts_iter);\n         if tuple.references_error() {"}, {"sha": "32f0f578d057f3a25a0bccc2411a34c15d300ed7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -3654,14 +3654,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Otherwise, fall back to the immutable version.\n         let (imm_tr, imm_op) = self.resolve_place_op(op, false);\n-        let method = match (method, imm_tr) {\n+        match (method, imm_tr) {\n             (None, Some(trait_did)) => {\n                 self.lookup_method_in_trait(span, imm_op, trait_did, base_ty, Some(arg_tys))\n             }\n             (method, _) => method,\n-        };\n-\n-        method\n+        }\n     }\n \n     fn check_method_argument_types("}, {"sha": "82e34710f0cbf122c9d52dd71c458a13129d25b7", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -507,7 +507,7 @@ pub fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n }\n \n pub fn print_evaluated_const(cx: &DocContext<'_>, def_id: DefId) -> Option<String> {\n-    let value = cx.tcx.const_eval_poly(def_id).ok().and_then(|val| {\n+    cx.tcx.const_eval_poly(def_id).ok().and_then(|val| {\n         let ty = cx.tcx.type_of(def_id);\n         match (val, &ty.kind) {\n             (_, &ty::Ref(..)) => None,\n@@ -518,9 +518,7 @@ pub fn print_evaluated_const(cx: &DocContext<'_>, def_id: DefId) -> Option<Strin\n             }\n             _ => None,\n         }\n-    });\n-\n-    value\n+    })\n }\n \n fn format_integer_with_underscore_sep(num: &str) -> String {"}, {"sha": "b93738319a634841fecbb3b6f4ca3f3b39459985", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe8bad96b88cf981458e836e6866ddc7966cecb/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=8fe8bad96b88cf981458e836e6866ddc7966cecb", "patch": "@@ -666,13 +666,12 @@ fn get_index_search_type(item: &clean::Item) -> Option<IndexItemFunctionType> {\n }\n \n fn get_index_type(clean_type: &clean::Type) -> RenderType {\n-    let t = RenderType {\n+    RenderType {\n         ty: clean_type.def_id(),\n         idx: None,\n         name: get_index_type_name(clean_type, true).map(|s| s.to_ascii_lowercase()),\n         generics: get_generics(clean_type),\n-    };\n-    t\n+    }\n }\n \n fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option<String> {"}]}