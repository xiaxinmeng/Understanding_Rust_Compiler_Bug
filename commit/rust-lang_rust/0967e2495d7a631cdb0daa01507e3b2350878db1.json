{"sha": "0967e2495d7a631cdb0daa01507e3b2350878db1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NjdlMjQ5NWQ3YTYzMWNkYjBkYWEwMTUwN2UzYjIzNTA4NzhkYjE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-05-23T07:59:25Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-06-01T05:35:34Z"}, "message": "Deprecate Range*::step_by\n\nChanged all the tests except test_range_step to use Iterator::step_by.", "tree": {"sha": "8db6174a9523483e78848c7206c6c47609e0e9e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8db6174a9523483e78848c7206c6c47609e0e9e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0967e2495d7a631cdb0daa01507e3b2350878db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0967e2495d7a631cdb0daa01507e3b2350878db1", "html_url": "https://github.com/rust-lang/rust/commit/0967e2495d7a631cdb0daa01507e3b2350878db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0967e2495d7a631cdb0daa01507e3b2350878db1/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0cc22b4bae8007c59fbe58f2c104ecd743d746a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0cc22b4bae8007c59fbe58f2c104ecd743d746a", "html_url": "https://github.com/rust-lang/rust/commit/e0cc22b4bae8007c59fbe58f2c104ecd743d746a"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "f80ecca08a9dc35bc7cbff029d35369f6efbb59f", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0967e2495d7a631cdb0daa01507e3b2350878db1/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0967e2495d7a631cdb0daa01507e3b2350878db1/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=0967e2495d7a631cdb0daa01507e3b2350878db1", "patch": "@@ -272,6 +272,8 @@ impl<A: Step> ops::RangeFrom<A> {\n     /// ```\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]\n+    #[rustc_deprecated(since = \"1.19.0\",\n+                       reason = \"replaced by `Iterator::step_by`\")]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,\n@@ -297,6 +299,8 @@ impl<A: Step> ops::Range<A> {\n     /// ```\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]\n+    #[rustc_deprecated(since = \"1.19.0\",\n+                       reason = \"replaced by `Iterator::step_by`\")]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,\n@@ -321,6 +325,8 @@ impl<A: Step> ops::RangeInclusive<A> {\n     /// ```\n     #[unstable(feature = \"step_by\", reason = \"recent addition\",\n                issue = \"27741\")]\n+    #[rustc_deprecated(since = \"1.19.0\",\n+                       reason = \"replaced by `Iterator::step_by`\")]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,"}, {"sha": "f53365bfb04a0bec32d88f954efe119094ce348f", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0967e2495d7a631cdb0daa01507e3b2350878db1/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0967e2495d7a631cdb0daa01507e3b2350878db1/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=0967e2495d7a631cdb0daa01507e3b2350878db1", "patch": "@@ -12,6 +12,15 @@ use core::iter::*;\n use core::{i8, i16, isize};\n use core::usize;\n \n+// This is here to simplify calling Iterator::step_by. Remove once\n+// Range::step_by is completely gone (not just deprecated).\n+trait IterEx: Sized {\n+    fn iter_step_by(self, n: usize) -> StepBy<Self>;\n+}\n+impl<I:Iterator> IterEx for I {\n+    fn iter_step_by(self, n: usize) -> StepBy<Self> { self.step_by(n) }\n+}\n+\n #[test]\n fn test_lt() {\n     let empty: [isize; 0] = [];\n@@ -67,7 +76,7 @@ fn test_multi_iter() {\n \n #[test]\n fn test_counter_from_iter() {\n-    let it = (0..).step_by(5).take(10);\n+    let it = (0..).iter_step_by(5).take(10);\n     let xs: Vec<isize> = FromIterator::from_iter(it);\n     assert_eq!(xs, [0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n }\n@@ -85,7 +94,7 @@ fn test_iterator_chain() {\n     }\n     assert_eq!(i, expected.len());\n \n-    let ys = (30..).step_by(10).take(4);\n+    let ys = (30..).iter_step_by(10).take(4);\n     let it = xs.iter().cloned().chain(ys);\n     let mut i = 0;\n     for x in it {\n@@ -147,15 +156,13 @@ fn test_iterator_chain_find() {\n #[test]\n fn test_iterator_step_by() {\n     // Identity\n-    // Replace with (0..).step_by(1) after Range::step_by gets removed\n-    let mut it = Iterator::step_by((0..), 1).take(3);\n+    let mut it = (0..).iter_step_by(1).take(3);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next(), Some(1));\n     assert_eq!(it.next(), Some(2));\n     assert_eq!(it.next(), None);\n \n-    // Replace with (0..).step_by(3) after Range::step_by gets removed\n-    let mut it = Iterator::step_by((0..), 3).take(4);\n+    let mut it = (0..).iter_step_by(3).take(4);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next(), Some(3));\n     assert_eq!(it.next(), Some(6));\n@@ -166,8 +173,7 @@ fn test_iterator_step_by() {\n #[test]\n #[should_panic]\n fn test_iterator_step_by_zero() {\n-    // Replace with (0..).step_by(0) after Range::step_by gets removed\n-    let mut it = Iterator::step_by((0..), 0);\n+    let mut it = (0..).iter_step_by(0);\n     it.next();\n }\n \n@@ -246,7 +252,7 @@ fn test_iterator_step_by_size_hint() {\n \n #[test]\n fn test_filter_map() {\n-    let it = (0..).step_by(1).take(10)\n+    let it = (0..).iter_step_by(1).take(10)\n         .filter_map(|x| if x % 2 == 0 { Some(x*x) } else { None });\n     assert_eq!(it.collect::<Vec<usize>>(), [0*0, 2*2, 4*4, 6*6, 8*8]);\n }\n@@ -648,7 +654,7 @@ fn test_iterator_scan() {\n fn test_iterator_flat_map() {\n     let xs = [0, 3, 6];\n     let ys = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n-    let it = xs.iter().flat_map(|&x| (x..).step_by(1).take(3));\n+    let it = xs.iter().flat_map(|&x| (x..).iter_step_by(1).take(3));\n     let mut i = 0;\n     for x in it {\n         assert_eq!(x, ys[i]);\n@@ -674,13 +680,13 @@ fn test_inspect() {\n #[test]\n fn test_cycle() {\n     let cycle_len = 3;\n-    let it = (0..).step_by(1).take(cycle_len).cycle();\n+    let it = (0..).iter_step_by(1).take(cycle_len).cycle();\n     assert_eq!(it.size_hint(), (usize::MAX, None));\n     for (i, x) in it.take(100).enumerate() {\n         assert_eq!(i % cycle_len, x);\n     }\n \n-    let mut it = (0..).step_by(1).take(0).cycle();\n+    let mut it = (0..).iter_step_by(1).take(0).cycle();\n     assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.next(), None);\n }\n@@ -759,7 +765,7 @@ fn test_iterator_min() {\n \n #[test]\n fn test_iterator_size_hint() {\n-    let c = (0..).step_by(1);\n+    let c = (0..).iter_step_by(1);\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let v2 = &[10, 11, 12];\n     let vi = v.iter();\n@@ -1081,6 +1087,8 @@ fn test_range() {\n \n #[test]\n fn test_range_step() {\n+    #![allow(deprecated)]\n+\n     assert_eq!((0..20).step_by(5).collect::<Vec<isize>>(), [0, 5, 10, 15]);\n     assert_eq!((20..0).step_by(-5).collect::<Vec<isize>>(), [20, 15, 10, 5]);\n     assert_eq!((20..0).step_by(-6).collect::<Vec<isize>>(), [20, 14, 8, 2]);"}]}