{"sha": "54f11240b701f7d4031c3d1545232ebad4436c15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZjExMjQwYjcwMWY3ZDQwMzFjM2QxNTQ1MjMyZWJhZDQ0MzZjMTU=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2018-12-17T14:54:19Z"}, "committer": {"name": "Kevin Leimkuhler", "email": "kevin@kleimkuhler.com", "date": "2019-01-18T06:34:43Z"}, "message": "Override `Iterator::is_sorted_by` in `slice::Iter` impl\n\nAdditionally, the root implementation was changed a bit: it now uses\n`all` instead of coding that logic manually.\n\nTo avoid duplicate code, the inherent `[T]::is_sorted_by` method now\ncalls `self.iter().is_sorted_by(...)`. This should always be inlined\nand not result in overhead.", "tree": {"sha": "0f4d429486121c542fe16bef251082c212e0b1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f4d429486121c542fe16bef251082c212e0b1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54f11240b701f7d4031c3d1545232ebad4436c15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54f11240b701f7d4031c3d1545232ebad4436c15", "html_url": "https://github.com/rust-lang/rust/commit/54f11240b701f7d4031c3d1545232ebad4436c15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54f11240b701f7d4031c3d1545232ebad4436c15/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kleimkuhler", "id": 4572153, "node_id": "MDQ6VXNlcjQ1NzIxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/4572153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kleimkuhler", "html_url": "https://github.com/kleimkuhler", "followers_url": "https://api.github.com/users/kleimkuhler/followers", "following_url": "https://api.github.com/users/kleimkuhler/following{/other_user}", "gists_url": "https://api.github.com/users/kleimkuhler/gists{/gist_id}", "starred_url": "https://api.github.com/users/kleimkuhler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kleimkuhler/subscriptions", "organizations_url": "https://api.github.com/users/kleimkuhler/orgs", "repos_url": "https://api.github.com/users/kleimkuhler/repos", "events_url": "https://api.github.com/users/kleimkuhler/events{/privacy}", "received_events_url": "https://api.github.com/users/kleimkuhler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67729b4040a17508640af17c21876650b34ff6de", "url": "https://api.github.com/repos/rust-lang/rust/commits/67729b4040a17508640af17c21876650b34ff6de", "html_url": "https://github.com/rust-lang/rust/commit/67729b4040a17508640af17c21876650b34ff6de"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "df4d97ee6a44d74704e57d8a09b40dec7cdcd1d5", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/54f11240b701f7d4031c3d1545232ebad4436c15/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f11240b701f7d4031c3d1545232ebad4436c15/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=54f11240b701f7d4031c3d1545232ebad4436c15", "patch": "@@ -2293,16 +2293,7 @@ impl<T> [T] {\n     where\n         F: FnMut(&T, &T) -> Option<Ordering>\n     {\n-        for pair in self.windows(2) {\n-            if compare(&pair[0], &pair[1])\n-                .map(|o| o == Ordering::Greater)\n-                .unwrap_or(true)\n-            {\n-                return false;\n-            }\n-        }\n-\n-        true\n+        self.iter().is_sorted_by(|a, b| compare(*a, *b))\n     }\n \n     /// Checks if the elements of this slice are sorted using the given key extraction function.\n@@ -2853,7 +2844,13 @@ macro_rules! len {\n \n // The shared definition of the `Iter` and `IterMut` iterators\n macro_rules! iterator {\n-    (struct $name:ident -> $ptr:ty, $elem:ty, $raw_mut:tt, $( $mut_:tt )*) => {\n+    (\n+        struct $name:ident -> $ptr:ty,\n+        $elem:ty,\n+        $raw_mut:tt,\n+        {$( $mut_:tt )*},\n+        {$($extra:tt)*}\n+    ) => {\n         impl<'a, T> $name<'a, T> {\n             // Helper function for creating a slice from the iterator.\n             #[inline(always)]\n@@ -3030,6 +3027,8 @@ macro_rules! iterator {\n                         i\n                     })\n             }\n+\n+            $($extra)*\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3167,7 +3166,17 @@ impl<'a, T> Iter<'a, T> {\n     }\n }\n \n-iterator!{struct Iter -> *const T, &'a T, const, /* no mut */}\n+iterator!{struct Iter -> *const T, &'a T, const, {/* no mut */}, {\n+    fn is_sorted_by<F>(self, mut compare: F) -> bool\n+    where\n+        Self: Sized,\n+        F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,\n+    {\n+        self.as_slice().windows(2).all(|w| {\n+            compare(&&w[0], &&w[1]).map(|o| o != Ordering::Greater).unwrap_or(false)\n+        })\n+    }\n+}}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Clone for Iter<'_, T> {\n@@ -3268,7 +3277,7 @@ impl<'a, T> IterMut<'a, T> {\n     }\n }\n \n-iterator!{struct IterMut -> *mut T, &'a mut T, mut, mut}\n+iterator!{struct IterMut -> *mut T, &'a mut T, mut, {mut}, {}}\n \n /// An internal abstraction over the splitting iterators, so that\n /// splitn, splitn_mut etc can be implemented once."}, {"sha": "432ead65b17217d3f56358329ebaa3e650abd537", "filename": "src/test/ui/feature-gates/feature-gate-is_sorted.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/54f11240b701f7d4031c3d1545232ebad4436c15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f11240b701f7d4031c3d1545232ebad4436c15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.rs?ref=54f11240b701f7d4031c3d1545232ebad4436c15", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n fn main() {\n     // Assert `Iterator` methods are feature gated\n     assert!([1, 2, 2, 9].iter().is_sorted());"}, {"sha": "8230c1e3a38dc5d73cd5bbf63de3379e658b9118", "filename": "src/test/ui/feature-gates/feature-gate-is_sorted.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54f11240b701f7d4031c3d1545232ebad4436c15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f11240b701f7d4031c3d1545232ebad4436c15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-is_sorted.stderr?ref=54f11240b701f7d4031c3d1545232ebad4436c15", "patch": "@@ -1,29 +1,29 @@\n error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n-  --> $DIR/feature-gate-is_sorted.rs:13:33\n+  --> $DIR/feature-gate-is_sorted.rs:3:33\n    |\n LL |     assert!([1, 2, 2, 9].iter().is_sorted());\n    |                                 ^^^^^^^^^\n    |\n    = help: add #![feature(is_sorted)] to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n-  --> $DIR/feature-gate-is_sorted.rs:15:39\n+  --> $DIR/feature-gate-is_sorted.rs:5:39\n    |\n LL |     assert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n    |                                       ^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(is_sorted)] to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n-  --> $DIR/feature-gate-is_sorted.rs:19:26\n+  --> $DIR/feature-gate-is_sorted.rs:9:26\n    |\n LL |     assert!([1, 2, 2, 9].is_sorted());\n    |                          ^^^^^^^^^\n    |\n    = help: add #![feature(is_sorted)] to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'is_sorted': new API (see issue #53485)\n-  --> $DIR/feature-gate-is_sorted.rs:21:32\n+  --> $DIR/feature-gate-is_sorted.rs:11:32\n    |\n LL |     assert!(![-2i32, -1, 0, 3].is_sorted_by_key(|n| n.abs()));\n    |                                ^^^^^^^^^^^^^^^^"}]}