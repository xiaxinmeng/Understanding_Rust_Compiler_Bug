{"sha": "4ee002a17c62d5e8f42b93cb02bb366423492d98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZTAwMmExN2M2MmQ1ZThmNDJiOTNjYjAyYmIzNjY0MjM0OTJkOTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-04T00:44:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-04T20:05:52Z"}, "message": "Extract out trait_defines_associated_type_named into the AstConv\ninterface, so that we can perform this query without requiring a full\ntrait def or set of supertraits.", "tree": {"sha": "c3b9024dfb039f99154cc4173b10af9055d9ef31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3b9024dfb039f99154cc4173b10af9055d9ef31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ee002a17c62d5e8f42b93cb02bb366423492d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee002a17c62d5e8f42b93cb02bb366423492d98", "html_url": "https://github.com/rust-lang/rust/commit/4ee002a17c62d5e8f42b93cb02bb366423492d98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ee002a17c62d5e8f42b93cb02bb366423492d98/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab8a769c576603164816ee9df7edee544182a878", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8a769c576603164816ee9df7edee544182a878", "html_url": "https://github.com/rust-lang/rust/commit/ab8a769c576603164816ee9df7edee544182a878"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "e70bef5a44fc85cd9c98968de22aa1715476a8c0", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ee002a17c62d5e8f42b93cb02bb366423492d98/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee002a17c62d5e8f42b93cb02bb366423492d98/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4ee002a17c62d5e8f42b93cb02bb366423492d98", "patch": "@@ -82,6 +82,9 @@ pub trait AstConv<'tcx> {\n     fn get_type_parameter_bounds(&self, span: Span, def_id: ast::NodeId)\n                                  -> Result<Vec<ty::PolyTraitRef<'tcx>>, ErrorReported>;\n \n+    fn trait_defines_associated_type_named(&self, trait_def_id: ast::DefId, name: ast::Name)\n+                                           -> bool;\n+\n     /// Return an (optional) substitution to convert bound type parameters that\n     /// are in scope into free ones. This function should only return Some\n     /// within a fn body.\n@@ -783,7 +786,7 @@ fn ast_type_binding_to_projection_predicate<'tcx>(\n     // We want to produce `<B as SuperTrait<int>>::T == foo`.\n \n     // Simple case: X is defined in the current trait.\n-    if trait_defines_associated_type_named(this, trait_ref.def_id, binding.item_name) {\n+    if this.trait_defines_associated_type_named(trait_ref.def_id, binding.item_name) {\n         return Ok(ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {\n                 trait_ref: trait_ref,\n@@ -812,7 +815,7 @@ fn ast_type_binding_to_projection_predicate<'tcx>(\n \n     let mut candidates: Vec<ty::PolyTraitRef> =\n         traits::supertraits(tcx, trait_ref.to_poly_trait_ref())\n-        .filter(|r| trait_defines_associated_type_named(this, r.def_id(), binding.item_name))\n+        .filter(|r| this.trait_defines_associated_type_named(r.def_id(), binding.item_name))\n         .collect();\n \n     // If converting for an object type, then remove the dummy-ty from `Self` now.\n@@ -1036,7 +1039,7 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n \n     let mut suitable_bounds: Vec<_> =\n         traits::transitive_bounds(tcx, &bounds)\n-        .filter(|b| trait_defines_associated_type_named(this, b.def_id(), assoc_name))\n+        .filter(|b| this.trait_defines_associated_type_named(b.def_id(), assoc_name))\n         .collect();\n \n     if suitable_bounds.len() == 0 {\n@@ -1090,16 +1093,6 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n     (ty, def::DefAssociatedTy(trait_did, item_did))\n }\n \n-fn trait_defines_associated_type_named(this: &AstConv,\n-                                       trait_def_id: ast::DefId,\n-                                       assoc_name: ast::Name)\n-                                       -> bool\n-{\n-    let tcx = this.tcx();\n-    let trait_def = ty::lookup_trait_def(tcx, trait_def_id);\n-    trait_def.associated_type_names.contains(&assoc_name)\n-}\n-\n fn qpath_to_ty<'tcx>(this: &AstConv<'tcx>,\n                      rscope: &RegionScope,\n                      span: Span,"}, {"sha": "16cef193e45d542a95001794df4b879397f3871f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ee002a17c62d5e8f42b93cb02bb366423492d98/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee002a17c62d5e8f42b93cb02bb366423492d98/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4ee002a17c62d5e8f42b93cb02bb366423492d98", "patch": "@@ -1248,6 +1248,15 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         Ok(r)\n     }\n \n+    fn trait_defines_associated_type_named(&self,\n+                                           trait_def_id: ast::DefId,\n+                                           assoc_name: ast::Name)\n+                                           -> bool\n+    {\n+        let trait_def = ty::lookup_trait_def(self.ccx.tcx, trait_def_id);\n+        trait_def.associated_type_names.contains(&assoc_name)\n+    }\n+\n     fn ty_infer(&self, _span: Span) -> Ty<'tcx> {\n         self.infcx().next_ty_var()\n     }"}, {"sha": "1ba49714bcfecd8a8f2fa15efba8385a5d8b560e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4ee002a17c62d5e8f42b93cb02bb366423492d98/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee002a17c62d5e8f42b93cb02bb366423492d98/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4ee002a17c62d5e8f42b93cb02bb366423492d98", "patch": "@@ -364,6 +364,19 @@ impl<'a, 'tcx> AstConv<'tcx> for ItemCtxt<'a, 'tcx> {\n         })\n     }\n \n+    fn trait_defines_associated_type_named(&self,\n+                                           trait_def_id: ast::DefId,\n+                                           assoc_name: ast::Name)\n+                                           -> bool\n+    {\n+        if trait_def_id.krate == ast::LOCAL_CRATE {\n+            trait_defines_associated_type_named(self.ccx, trait_def_id.node, assoc_name)\n+        } else {\n+            let trait_def = ty::lookup_trait_def(self.tcx(), trait_def_id);\n+            trait_def.associated_type_names.contains(&assoc_name)\n+        }\n+    }\n+\n     fn ty_infer(&self, span: Span) -> Ty<'tcx> {\n         span_err!(self.tcx().sess, span, E0121,\n                   \"the type placeholder `_` is not allowed within types on item signatures\");\n@@ -1296,6 +1309,30 @@ fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     }\n }\n \n+fn trait_defines_associated_type_named(ccx: &CrateCtxt,\n+                                       trait_node_id: ast::NodeId,\n+                                       assoc_name: ast::Name)\n+                                       -> bool\n+{\n+    let item = match ccx.tcx.map.get(trait_node_id) {\n+        ast_map::NodeItem(item) => item,\n+        _ => ccx.tcx.sess.bug(&format!(\"trait_node_id {} is not an item\", trait_node_id))\n+    };\n+\n+    let trait_items = match item.node {\n+        ast::ItemTrait(_, _, _, ref trait_items) => trait_items,\n+        _ => ccx.tcx.sess.bug(&format!(\"trait_node_id {} is not a trait\", trait_node_id))\n+    };\n+\n+    trait_items.iter()\n+               .any(|trait_item| {\n+                   match *trait_item {\n+                       ast::TypeTraitItem(ref t) => t.ty_param.ident.name == assoc_name,\n+                       ast::RequiredMethod(..) | ast::ProvidedMethod(..) => false,\n+                   }\n+               })\n+}\n+\n fn convert_trait_predicates<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item) {\n     let tcx = ccx.tcx;\n     let trait_def = trait_def_of_item(ccx, it);"}]}