{"sha": "3954b27787ad3c3d51b45a89503d0f96adb52eb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NTRiMjc3ODdhZDNjM2Q1MWI0NWE4OTUwM2QwZjk2YWRiNTJlYjg=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-07-19T22:01:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-19T22:01:28Z"}, "message": "Add conversions between vendor intrinsics (#144)\n\n* Add x86 vendor conversions\r\n* Add wasm32 vendor types\r\n* Add arm vendor types\r\n* Add powerpc vendor types", "tree": {"sha": "46edf1b078444eda4c890d095c79d95fe82a3bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46edf1b078444eda4c890d095c79d95fe82a3bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3954b27787ad3c3d51b45a89503d0f96adb52eb8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9fY4CRBK7hj4Ov3rIwAA0DcIAJihnKg7go+7RhCbsnTzAFY8\n2oPasl8UEouYJwkZfSU6B7bhS0nWT0Kn2ehDsG6MOo6BHpfccxkzdjF4PXsJvk2t\nURPj0U+bNNTmY+Kw4u9uQuCbFDHYYwfqteI4KapvykD1O99ykDcUK2j78czAUNxp\n1cnBRAVn5XDcS6tLs08t+rZQXxQELvA82eTEsLICq+/LsIJ7IZ1T2JFSo8hg60OO\nY8GRU1UixOA2uMAqIyFjsf6eByAc7j6M7vM9gFvjhQj+OWYOONsmSC45JMqh2eZx\n3t5tZgtNs0HBxQtQULXsEOoquC/d+niStXktqvAu626vCCO8erwLSXxPepvQxWo=\n=1Y1v\n-----END PGP SIGNATURE-----\n", "payload": "tree 46edf1b078444eda4c890d095c79d95fe82a3bcb\nparent ac749a180bfd10a1a1c210f047cc679b12fcb1f1\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1626732088 -0400\ncommitter GitHub <noreply@github.com> 1626732088 -0700\n\nAdd conversions between vendor intrinsics (#144)\n\n* Add x86 vendor conversions\r\n* Add wasm32 vendor types\r\n* Add arm vendor types\r\n* Add powerpc vendor types"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3954b27787ad3c3d51b45a89503d0f96adb52eb8", "html_url": "https://github.com/rust-lang/rust/commit/3954b27787ad3c3d51b45a89503d0f96adb52eb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3954b27787ad3c3d51b45a89503d0f96adb52eb8/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac749a180bfd10a1a1c210f047cc679b12fcb1f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac749a180bfd10a1a1c210f047cc679b12fcb1f1", "html_url": "https://github.com/rust-lang/rust/commit/ac749a180bfd10a1a1c210f047cc679b12fcb1f1"}], "stats": {"total": 281, "additions": 186, "deletions": 95}, "files": [{"sha": "235733b34909b59ed0522953e2e66c7f782e7b53", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -1,6 +1,6 @@\n #![no_std]\n #![allow(incomplete_features)]\n-#![feature(repr_simd, platform_intrinsics, simd_ffi, const_generics)]\n+#![feature(repr_simd, platform_intrinsics, simd_ffi, const_generics, stdsimd)]\n #![warn(missing_docs)]\n //! Portable SIMD module.\n \n@@ -9,8 +9,6 @@ mod first;\n #[macro_use]\n mod permute;\n #[macro_use]\n-mod transmute;\n-#[macro_use]\n mod reduction;\n \n mod select;\n@@ -25,6 +23,7 @@ mod intrinsics;\n mod iter;\n mod ops;\n mod round;\n+mod vendor;\n \n mod math;\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/core_simd/src/transmute.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ftransmute.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -1,28 +0,0 @@\n-/// Provides implementations of `From<$a> for $b` and `From<$b> for $a` that transmutes the value.\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-macro_rules! from_transmute {\n-    { unsafe $a:ty => $b:ty } => {\n-        from_transmute!{ @impl $a => $b }\n-        from_transmute!{ @impl $b => $a }\n-    };\n-    { @impl $from:ty => $to:ty } => {\n-        impl core::convert::From<$from> for $to {\n-            #[inline]\n-            fn from(value: $from) -> $to {\n-                unsafe { core::mem::transmute(value) }\n-            }\n-        }\n-    };\n-}\n-\n-/// Provides implementations of `From<$generic> for core::arch::{x86, x86_64}::$intel` and\n-/// vice-versa that transmutes the value.\n-macro_rules! from_transmute_x86 {\n-    { unsafe $generic:ty => $intel:ident } => {\n-        #[cfg(target_arch = \"x86\")]\n-        from_transmute! { unsafe $generic => core::arch::x86::$intel }\n-\n-        #[cfg(target_arch = \"x86_64\")]\n-        from_transmute! { unsafe $generic => core::arch::x86_64::$intel }\n-    }\n-}"}, {"sha": "91087740c450ae33c0eba069255adfe4cfcd2829", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -201,10 +201,6 @@ where\n \n impl_float_vector! { SimdF32, f32, SimdU32, Mask32, SimdI32 }\n \n-from_transmute_x86! { unsafe f32x4 => __m128 }\n-from_transmute_x86! { unsafe f32x8 => __m256 }\n-//from_transmute_x86! { unsafe f32x16 => __m512 }\n-\n /// A SIMD vector of containing `LANES` `f64` values.\n #[repr(simd)]\n pub struct SimdF64<const LANES: usize>([f64; LANES])\n@@ -213,10 +209,6 @@ where\n \n impl_float_vector! { SimdF64, f64, SimdU64, Mask64, SimdI64 }\n \n-from_transmute_x86! { unsafe f64x2 => __m128d }\n-from_transmute_x86! { unsafe f64x4 => __m256d }\n-//from_transmute_x86! { unsafe f64x8 => __m512d }\n-\n /// Vector of two `f32` values\n pub type f32x2 = SimdF32<2>;\n "}, {"sha": "15ad1a7193af27774bbdae5dcc02f917298bc27a", "filename": "crates/core_simd/src/vector/int.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -67,18 +67,6 @@ where\n \n impl_integer_vector! { SimdIsize, isize, MaskSize, SimdIsize }\n \n-#[cfg(target_pointer_width = \"32\")]\n-from_transmute_x86! { unsafe isizex4 => __m128i }\n-#[cfg(target_pointer_width = \"32\")]\n-from_transmute_x86! { unsafe isizex8 => __m256i }\n-\n-#[cfg(target_pointer_width = \"64\")]\n-from_transmute_x86! { unsafe isizex2 => __m128i }\n-#[cfg(target_pointer_width = \"64\")]\n-from_transmute_x86! { unsafe isizex4 => __m256i }\n-//#[cfg(target_pointer_width = \"64\")]\n-//from_transmute_x86! { unsafe isizex8 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `i16` values.\n #[repr(simd)]\n pub struct SimdI16<const LANES: usize>([i16; LANES])\n@@ -87,10 +75,6 @@ where\n \n impl_integer_vector! { SimdI16, i16, Mask16, SimdI16 }\n \n-from_transmute_x86! { unsafe i16x8 => __m128i }\n-from_transmute_x86! { unsafe i16x16 => __m256i }\n-//from_transmute_x86! { unsafe i16x32 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `i32` values.\n #[repr(simd)]\n pub struct SimdI32<const LANES: usize>([i32; LANES])\n@@ -99,10 +83,6 @@ where\n \n impl_integer_vector! { SimdI32, i32, Mask32, SimdI32 }\n \n-from_transmute_x86! { unsafe i32x4 => __m128i }\n-from_transmute_x86! { unsafe i32x8 => __m256i }\n-//from_transmute_x86! { unsafe i32x16 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `i64` values.\n #[repr(simd)]\n pub struct SimdI64<const LANES: usize>([i64; LANES])\n@@ -111,10 +91,6 @@ where\n \n impl_integer_vector! { SimdI64, i64, Mask64, SimdI64 }\n \n-from_transmute_x86! { unsafe i64x2 => __m128i }\n-from_transmute_x86! { unsafe i64x4 => __m256i }\n-//from_transmute_x86! { unsafe i64x8 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `i8` values.\n #[repr(simd)]\n pub struct SimdI8<const LANES: usize>([i8; LANES])\n@@ -123,10 +99,6 @@ where\n \n impl_integer_vector! { SimdI8, i8, Mask8, SimdI8 }\n \n-from_transmute_x86! { unsafe i8x16 => __m128i }\n-from_transmute_x86! { unsafe i8x32 => __m256i }\n-//from_transmute_x86! { unsafe i8x64 => __m512i }\n-\n /// Vector of two `isize` values\n pub type isizex2 = SimdIsize<2>;\n "}, {"sha": "0429410ed6d6fdfc587cb6cd1f2d9d8f9c71fc41", "filename": "crates/core_simd/src/vector/uint.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -36,18 +36,6 @@ where\n \n impl_unsigned_vector! { SimdUsize, usize }\n \n-#[cfg(target_pointer_width = \"32\")]\n-from_transmute_x86! { unsafe usizex4 => __m128i }\n-#[cfg(target_pointer_width = \"32\")]\n-from_transmute_x86! { unsafe usizex8 => __m256i }\n-\n-#[cfg(target_pointer_width = \"64\")]\n-from_transmute_x86! { unsafe usizex2 => __m128i }\n-#[cfg(target_pointer_width = \"64\")]\n-from_transmute_x86! { unsafe usizex4 => __m256i }\n-//#[cfg(target_pointer_width = \"64\")]\n-//from_transmute_x86! { unsafe usizex8 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `u16` values.\n #[repr(simd)]\n pub struct SimdU16<const LANES: usize>([u16; LANES])\n@@ -56,10 +44,6 @@ where\n \n impl_unsigned_vector! { SimdU16, u16 }\n \n-from_transmute_x86! { unsafe u16x8 => __m128i }\n-from_transmute_x86! { unsafe u16x16 => __m256i }\n-//from_transmute_x86! { unsafe u16x32 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `u32` values.\n #[repr(simd)]\n pub struct SimdU32<const LANES: usize>([u32; LANES])\n@@ -68,10 +52,6 @@ where\n \n impl_unsigned_vector! { SimdU32, u32 }\n \n-from_transmute_x86! { unsafe u32x4 => __m128i }\n-from_transmute_x86! { unsafe u32x8 => __m256i }\n-//from_transmute_x86! { unsafe u32x16 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `u64` values.\n #[repr(simd)]\n pub struct SimdU64<const LANES: usize>([u64; LANES])\n@@ -80,10 +60,6 @@ where\n \n impl_unsigned_vector! { SimdU64, u64 }\n \n-from_transmute_x86! { unsafe u64x2 => __m128i }\n-from_transmute_x86! { unsafe u64x4 => __m256i }\n-//from_transmute_x86! { unsafe u64x8 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `u8` values.\n #[repr(simd)]\n pub struct SimdU8<const LANES: usize>([u8; LANES])\n@@ -92,10 +68,6 @@ where\n \n impl_unsigned_vector! { SimdU8, u8 }\n \n-from_transmute_x86! { unsafe u8x16 => __m128i }\n-from_transmute_x86! { unsafe u8x32 => __m256i }\n-//from_transmute_x86! { unsafe u8x64 => __m512i }\n-\n /// Vector of two `usize` values\n pub type usizex2 = SimdUsize<2>;\n "}, {"sha": "8c8af43bf133244f43da8e81c76fa2c80ec3eb94", "filename": "crates/core_simd/src/vendor.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -0,0 +1,27 @@\n+/// Provides implementations of `From<$a> for $b` and `From<$b> for $a` that transmutes the value.\n+macro_rules! from_transmute {\n+    { unsafe $a:ty => $b:ty } => {\n+        from_transmute!{ @impl $a => $b }\n+        from_transmute!{ @impl $b => $a }\n+    };\n+    { @impl $from:ty => $to:ty } => {\n+        impl core::convert::From<$from> for $to {\n+            #[inline]\n+            fn from(value: $from) -> $to {\n+                unsafe { core::mem::transmute(value) }\n+            }\n+        }\n+    };\n+}\n+\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+mod x86;\n+\n+#[cfg(any(target_arch = \"wasm32\"))]\n+mod wasm32;\n+\n+#[cfg(any(target_arch = \"arm\", target_arch = \"aarch64\"))]\n+mod arm;\n+\n+#[cfg(any(target_arch = \"powerpc\", target_arch = \"powerpc64\"))]\n+mod powerpc;"}, {"sha": "1a1e9bed1e1daf5acfff8451490f04cb55fcfbb0", "filename": "crates/core_simd/src/vendor/arm.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor%2Farm.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -0,0 +1,53 @@\n+use crate::*;\n+\n+#[cfg(target_arch = \"arm\")]\n+use core::arch::arm::*;\n+\n+#[cfg(target_arch = \"aarch64\")]\n+use core::arch::aarch64::*;\n+\n+from_transmute! { unsafe f32x2 => float32x2_t }\n+from_transmute! { unsafe f32x4 => float32x4_t }\n+\n+from_transmute! { unsafe u8x8 => uint8x8_t }\n+from_transmute! { unsafe u8x16 => uint8x16_t }\n+from_transmute! { unsafe i8x8 => int8x8_t }\n+from_transmute! { unsafe i8x16 => int8x16_t }\n+from_transmute! { unsafe u8x8 => poly8x8_t }\n+from_transmute! { unsafe u8x16 => poly8x16_t }\n+\n+from_transmute! { unsafe u16x4 => uint16x4_t }\n+from_transmute! { unsafe u16x8 => uint16x8_t }\n+from_transmute! { unsafe i16x4 => int16x4_t }\n+from_transmute! { unsafe i16x8 => int16x8_t }\n+from_transmute! { unsafe u16x4 => poly16x4_t }\n+from_transmute! { unsafe u16x8 => poly16x8_t }\n+\n+from_transmute! { unsafe u32x2 => uint32x2_t }\n+from_transmute! { unsafe u32x4 => uint32x4_t }\n+from_transmute! { unsafe i32x2 => int32x2_t }\n+from_transmute! { unsafe i32x4 => int32x4_t }\n+\n+from_transmute! { unsafe SimdU64<1> => uint64x1_t }\n+from_transmute! { unsafe u64x2 => uint64x2_t }\n+from_transmute! { unsafe SimdI64<1> => int64x1_t }\n+from_transmute! { unsafe i64x2 => int64x2_t }\n+from_transmute! { unsafe SimdU64<1> => poly64x1_t }\n+from_transmute! { unsafe u64x2 => poly64x2_t }\n+\n+#[cfg(target_arch = \"arm\")]\n+mod arm {\n+    use super::*;\n+    from_transmute! { unsafe SimdU8<4> => uint8x4_t }\n+    from_transmute! { unsafe SimdI8<4> => int8x4_t }\n+\n+    from_transmute! { unsafe SimdU16<2> => uint16x2_t }\n+    from_transmute! { unsafe SimdI16<2> => int16x2_t }\n+}\n+\n+#[cfg(target_arch = \"aarch64\")]\n+mod aarch64 {\n+    use super::*;\n+    from_transmute! { unsafe SimdF64<1> => float64x1_t }\n+    from_transmute! { unsafe f64x2 => float64x2_t }\n+}"}, {"sha": "248764efd5162fc17f70558d8235bf35b9aa32e6", "filename": "crates/core_simd/src/vendor/powerpc.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fpowerpc.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -0,0 +1,11 @@\n+use crate::*;\n+\n+#[cfg(target_arch = \"powerpc\")]\n+use core::arch::powerpc::*;\n+\n+#[cfg(target_arch = \"powerpc64\")]\n+use core::arch::powerpc64::*;\n+\n+from_transmute! { unsafe f64x2 => vector_double }\n+from_transmute! { unsafe i64x2 => vector_signed_long }\n+from_transmute! { unsafe u64x2 => vector_unsigned_long }"}, {"sha": "ef67572b534d6e1174d5fa3f0b52da2d1f9cdfd7", "filename": "crates/core_simd/src/vendor/wasm32.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fwasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fwasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fwasm32.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -0,0 +1,30 @@\n+use crate::*;\n+use core::arch::wasm32::v128;\n+\n+from_transmute! { unsafe u8x16 => v128 }\n+from_transmute! { unsafe i8x16 => v128 }\n+\n+from_transmute! { unsafe u16x8 => v128 }\n+from_transmute! { unsafe i16x8 => v128 }\n+\n+from_transmute! { unsafe u32x4 => v128 }\n+from_transmute! { unsafe i32x4 => v128 }\n+from_transmute! { unsafe f32x4 => v128 }\n+\n+from_transmute! { unsafe u64x2 => v128 }\n+from_transmute! { unsafe i64x2 => v128 }\n+from_transmute! { unsafe f64x2 => v128 }\n+\n+#[cfg(target_pointer_width = \"32\")]\n+mod p32 {\n+    use super::*;\n+    from_transmute! { unsafe usizex4 => v128 }\n+    from_transmute! { unsafe isizex4 => v128 }\n+}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+mod p64 {\n+    use super::*;\n+    from_transmute! { unsafe usizex2 => v128 }\n+    from_transmute! { unsafe isizex2 => v128 }\n+}"}, {"sha": "4de57de057e536c9eed8c4e0489064cdf09017dd", "filename": "crates/core_simd/src/vendor/x86.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3954b27787ad3c3d51b45a89503d0f96adb52eb8/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvendor%2Fx86.rs?ref=3954b27787ad3c3d51b45a89503d0f96adb52eb8", "patch": "@@ -0,0 +1,63 @@\n+use crate::*;\n+\n+#[cfg(any(target_arch = \"x86\"))]\n+use core::arch::x86::*;\n+\n+#[cfg(target_arch = \"x86_64\")]\n+use core::arch::x86_64::*;\n+\n+from_transmute! { unsafe u8x16 => __m128i }\n+from_transmute! { unsafe u8x32 => __m256i }\n+//from_transmute! { unsafe u8x64 => __m512i }\n+from_transmute! { unsafe i8x16 => __m128i }\n+from_transmute! { unsafe i8x32 => __m256i }\n+//from_transmute! { unsafe i8x64 => __m512i }\n+\n+from_transmute! { unsafe u16x8 => __m128i }\n+from_transmute! { unsafe u16x16 => __m256i }\n+from_transmute! { unsafe u16x32 => __m512i }\n+from_transmute! { unsafe i16x8 => __m128i }\n+from_transmute! { unsafe i16x16 => __m256i }\n+from_transmute! { unsafe i16x32 => __m512i }\n+\n+from_transmute! { unsafe u32x4 => __m128i }\n+from_transmute! { unsafe u32x8 => __m256i }\n+from_transmute! { unsafe u32x16 => __m512i }\n+from_transmute! { unsafe i32x4 => __m128i }\n+from_transmute! { unsafe i32x8 => __m256i }\n+from_transmute! { unsafe i32x16 => __m512i }\n+from_transmute! { unsafe f32x4 => __m128 }\n+from_transmute! { unsafe f32x8 => __m256 }\n+from_transmute! { unsafe f32x16 => __m512 }\n+\n+from_transmute! { unsafe u64x2 => __m128i }\n+from_transmute! { unsafe u64x4 => __m256i }\n+from_transmute! { unsafe u64x8 => __m512i }\n+from_transmute! { unsafe i64x2 => __m128i }\n+from_transmute! { unsafe i64x4 => __m256i }\n+from_transmute! { unsafe i64x8 => __m512i }\n+from_transmute! { unsafe f64x2 => __m128d }\n+from_transmute! { unsafe f64x4 => __m256d }\n+from_transmute! { unsafe f64x8 => __m512d }\n+\n+#[cfg(target_pointer_width = \"32\")]\n+mod p32 {\n+    use super::*;\n+    from_transmute! { unsafe usizex4 => __m128i }\n+    from_transmute! { unsafe usizex8 => __m256i }\n+    from_transmute! { unsafe SimdUsize<16> => __m512i }\n+    from_transmute! { unsafe isizex4 => __m128i }\n+    from_transmute! { unsafe isizex8 => __m256i }\n+    from_transmute! { unsafe SimdIsize<16> => __m512i }\n+}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+mod p64 {\n+    use super::*;\n+    from_transmute! { unsafe usizex2 => __m128i }\n+    from_transmute! { unsafe usizex4 => __m256i }\n+    from_transmute! { unsafe usizex8 => __m512i }\n+    from_transmute! { unsafe isizex2 => __m128i }\n+    from_transmute! { unsafe isizex4 => __m256i }\n+    from_transmute! { unsafe isizex8 => __m512i }\n+}"}]}