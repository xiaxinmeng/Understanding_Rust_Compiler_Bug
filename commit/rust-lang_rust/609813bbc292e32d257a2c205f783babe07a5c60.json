{"sha": "609813bbc292e32d257a2c205f783babe07a5c60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOTgxM2JiYzI5MmUzMmQyNTdhMmMyMDVmNzgzYmFiZTA3YTVjNjA=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-03-23T10:08:08Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-06-12T11:04:33Z"}, "message": "`-Z identify_regions` toggles rendering of (previously hidden) unnamed regions.\n\nUnlike `-Z verbose`, it is succinct.\n\nIt uniquely identifies regions when displaying them, and distinguishes\ncode extents from user-specified lifetimes in the output by leveraging\na syntactic restriction: you cannot write a lifetime that starts with\na numeric character.\n\nFor example, it prints '<num>ce for the more verbose\n`ReScope(CodeExtent(<num>))`.", "tree": {"sha": "ba97caf649e08a3b72f7300ebcfcb242fee31e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba97caf649e08a3b72f7300ebcfcb242fee31e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/609813bbc292e32d257a2c205f783babe07a5c60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/609813bbc292e32d257a2c205f783babe07a5c60", "html_url": "https://github.com/rust-lang/rust/commit/609813bbc292e32d257a2c205f783babe07a5c60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/609813bbc292e32d257a2c205f783babe07a5c60/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20df0e949133fc7bb45b5a630b78f24720e55fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/20df0e949133fc7bb45b5a630b78f24720e55fe5", "html_url": "https://github.com/rust-lang/rust/commit/20df0e949133fc7bb45b5a630b78f24720e55fe5"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "e212f1c1006942f78a32db5ebf0f4df5ea4bdf28", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/609813bbc292e32d257a2c205f783babe07a5c60/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609813bbc292e32d257a2c205f783babe07a5c60/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=609813bbc292e32d257a2c205f783babe07a5c60", "patch": "@@ -1176,12 +1176,22 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n             UnaryOp(ref op, ref a) => write!(fmt, \"{:?}({:?})\", op, a),\n             Discriminant(ref lval) => write!(fmt, \"discriminant({:?})\", lval),\n             NullaryOp(ref op, ref t) => write!(fmt, \"{:?}({:?})\", op, t),\n-            Ref(_, borrow_kind, ref lv) => {\n+            Ref(region, borrow_kind, ref lv) => {\n                 let kind_str = match borrow_kind {\n                     BorrowKind::Shared => \"\",\n                     BorrowKind::Mut | BorrowKind::Unique => \"mut \",\n                 };\n-                write!(fmt, \"&{}{:?}\", kind_str, lv)\n+\n+                // When identifying regions, add trailing space if\n+                // necessary.\n+                let region = if ppaux::identify_regions() {\n+                    let mut region = format!(\"{}\", region);\n+                    if region.len() > 0 { region.push(' '); }\n+                    region\n+                } else {\n+                    \"\".to_owned()\n+                };\n+                write!(fmt, \"&{}{}{:?}\", region, kind_str, lv)\n             }\n \n             Aggregate(ref kind, ref lvs) => {"}, {"sha": "283b18f967ff37d11fd61628c828bb98f14c68fa", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/609813bbc292e32d257a2c205f783babe07a5c60/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609813bbc292e32d257a2c205f783babe07a5c60/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=609813bbc292e32d257a2c205f783babe07a5c60", "patch": "@@ -895,6 +895,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"in general, enable more debug printouts\"),\n     span_free_formats: bool = (false, parse_bool, [UNTRACKED],\n         \"when debug-printing compiler state, do not include spans\"), // o/w tests have closure@path\n+    identify_regions: bool = (false, parse_bool, [UNTRACKED],\n+        \"make unnamed regions display as '# (where # is some non-ident unique id)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass\"),\n     count_llvm_insns: bool = (false, parse_bool,"}, {"sha": "1fa63577196664437c73e45b208bdfdc6a5ec56a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/609813bbc292e32d257a2c205f783babe07a5c60/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/609813bbc292e32d257a2c205f783babe07a5c60/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=609813bbc292e32d257a2c205f783babe07a5c60", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use hir::BodyId;\n use hir::def_id::DefId;\n use hir::map::definitions::DefPathData;\n+use middle::region::{CodeExtent, BlockRemainder};\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{TyBool, TyChar, TyAdt};\n@@ -32,6 +34,10 @@ pub fn verbose() -> bool {\n     ty::tls::with(|tcx| tcx.sess.verbose())\n }\n \n+pub fn identify_regions() -> bool {\n+    ty::tls::with(|tcx| tcx.sess.opts.debugging_opts.identify_regions)\n+}\n+\n fn fn_sig(f: &mut fmt::Formatter,\n           inputs: &[Ty],\n           variadic: bool,\n@@ -519,6 +525,23 @@ impl fmt::Display for ty::RegionKind {\n             ty::ReSkolemized(_, br) => {\n                 write!(f, \"{}\", br)\n             }\n+            ty::ReScope(code_extent) if identify_regions() => {\n+                match code_extent {\n+                    CodeExtent::Misc(node_id) =>\n+                        write!(f, \"'{}mce\", node_id.as_u32()),\n+                    CodeExtent::CallSiteScope(BodyId { node_id }) =>\n+                        write!(f, \"'{}cce\", node_id.as_u32()),\n+                    CodeExtent::ParameterScope(BodyId { node_id }) =>\n+                        write!(f, \"'{}pce\", node_id.as_u32()),\n+                    CodeExtent::DestructionScope(node_id) =>\n+                        write!(f, \"'{}dce\", node_id.as_u32()),\n+                    CodeExtent::Remainder(BlockRemainder { block, first_statement_index }) =>\n+                        write!(f, \"'{}_{}rce\", block, first_statement_index),\n+                }\n+            }\n+            ty::ReVar(region_vid) if identify_regions() => {\n+                write!(f, \"'{}rv\", region_vid.index)\n+            }\n             ty::ReScope(_) |\n             ty::ReVar(_) |\n             ty::ReErased => Ok(()),"}]}