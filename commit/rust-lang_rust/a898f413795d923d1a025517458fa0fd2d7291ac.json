{"sha": "a898f413795d923d1a025517458fa0fd2d7291ac", "node_id": "C_kwDOAAsO6NoAKGE4OThmNDEzNzk1ZDkyM2QxYTAyNTUxNzQ1OGZhMGZkMmQ3MjkxYWM", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-22T11:53:12Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-29T10:00:06Z"}, "message": "Only enable new cmpxchg memory orderings in cfg(not(bootstrap)).\n\n(The bootstrap/beta compiler doesn't support them yet.)", "tree": {"sha": "126b9add8cb3fd9501e73983035b834e9487a614", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/126b9add8cb3fd9501e73983035b834e9487a614"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a898f413795d923d1a025517458fa0fd2d7291ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a898f413795d923d1a025517458fa0fd2d7291ac", "html_url": "https://github.com/rust-lang/rust/commit/a898f413795d923d1a025517458fa0fd2d7291ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a898f413795d923d1a025517458fa0fd2d7291ac/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7434da9be1fd77137e8f145d677c77dad2269e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7434da9be1fd77137e8f145d677c77dad2269e6", "html_url": "https://github.com/rust-lang/rust/commit/a7434da9be1fd77137e8f145d677c77dad2269e6"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "514c20c71eb46aa17572b4d52418abdb46bd29e5", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a898f413795d923d1a025517458fa0fd2d7291ac/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a898f413795d923d1a025517458fa0fd2d7291ac/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=a898f413795d923d1a025517458fa0fd2d7291ac", "patch": "@@ -2649,22 +2649,30 @@ unsafe fn atomic_compare_exchange<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n+            #[cfg(bootstrap)]\n+            _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };\n     if ok { Ok(val) } else { Err(val) }\n@@ -2683,22 +2691,30 @@ unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acquire_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchgweak_release_relaxed(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel_acquire(dst, old, new),\n+            #[cfg(not(bootstrap))]\n             (AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n+            #[cfg(bootstrap)]\n+            _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };\n     if ok { Ok(val) } else { Err(val) }"}]}