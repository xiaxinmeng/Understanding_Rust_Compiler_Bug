{"sha": "f0a52128ee2d522e12893637428d88a3287c818e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYTUyMTI4ZWUyZDUyMmUxMjg5MzYzNzQyOGQ4OGEzMjg3YzgxOGU=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-02T09:02:19Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-09T05:21:31Z"}, "message": "fmt", "tree": {"sha": "85d3aa41e8f48414795c4779fc2df9036737bf64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85d3aa41e8f48414795c4779fc2df9036737bf64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0a52128ee2d522e12893637428d88a3287c818e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmE5mdsACgkQAn35M4hi\nrd2WWQ/5Ae+R5zlipkcF5rHMd1OwqVnpYSou5MkNTbW1n+EM6gNk83lgsMLdTEid\nW5YZipbdKal74ztd8MNSem1FwonLEd7jPWHnBo8Xhbvl+kE5pUpKO1Ld+fHyG04y\ngmGkbrkLKVl9oPzD9ZboC4CTmxEv1E4bHXBB3ZzLFfV9qdgXkg+7+wAq0iRiYx6i\nnwpO9CbgCxzR04MdR2Y9P/6wxtp8A/BQe7ZItMFJXKZmCdzkZRaJRoqh+PJ/INn3\nN7kGZN//sSfeJ34gUxlypclYHXcjOwgzPqGtwMft/ZiY3sVFkbhi6kpsJkG/QVGz\nzUucQR4arkpZv1HNzpNariHYeoLZ+hA1u7qjyClJz+9lMo8JkIUc+GqYc4ZwOe2P\nFDhgOuwVNPxqEQ75cAbQDPimfh+poZ+Rwm3X9n266fmD/2oXJqiAtNKkGtxubMH2\nGxlHSaox/i+OGNjt42FsandxmCCY7p/bEgyBeVggOdVREbVjsUhXiXXwtg48WOaT\nRf3cxXcb/hXmpIJPHWS/vEkcBfblla0jIpjZ9gS8Cp8OqjqOnpzU6KT+7r7Vm9pp\nAN8Ec/RhFSOjOSLz4T64SuinnDgVA5CcRjpbMJZCyNr1U3TekvOsGIZJD7dw8o4z\nsFku9pU7l7uouN/3SXyrQRDz+BT/ENJNWGwZEZcKcWYDNGhLlm0=\n=DaGV\n-----END PGP SIGNATURE-----", "payload": "tree 85d3aa41e8f48414795c4779fc2df9036737bf64\nparent 4eab5c1f7b672b2d59328e24e05bc191e448d7d9\nauthor Deadbeef <ent3rm4n@gmail.com> 1630573339 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1631164891 +0000\n\nfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0a52128ee2d522e12893637428d88a3287c818e", "html_url": "https://github.com/rust-lang/rust/commit/f0a52128ee2d522e12893637428d88a3287c818e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0a52128ee2d522e12893637428d88a3287c818e/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eab5c1f7b672b2d59328e24e05bc191e448d7d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eab5c1f7b672b2d59328e24e05bc191e448d7d9", "html_url": "https://github.com/rust-lang/rust/commit/4eab5c1f7b672b2d59328e24e05bc191e448d7d9"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "6032004e6077652a408506098dad933be5ba54d4", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a52128ee2d522e12893637428d88a3287c818e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a52128ee2d522e12893637428d88a3287c818e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=f0a52128ee2d522e12893637428d88a3287c818e", "patch": "@@ -32,7 +32,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n             super::ImplSource::TraitAlias(ref d) => write!(f, \"{:?}\", d),\n \n             super::ImplSource::TraitUpcasting(ref d) => write!(f, \"{:?}\", d),\n-            \n+\n             super::ImplSource::ConstDrop(ref d) => write!(f, \"{:?}\", d),\n         }\n     }"}, {"sha": "987ad4bc31b94479dcd9d9c0da513ca014920b2f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f0a52128ee2d522e12893637428d88a3287c818e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a52128ee2d522e12893637428d88a3287c818e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=f0a52128ee2d522e12893637428d88a3287c818e", "patch": "@@ -1087,26 +1087,25 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let tcx = self.tcx();\n         // Respect const trait obligations\n         if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n-                match candidate {\n-                    // const impl\n-                    ImplCandidate(def_id)\n-                        if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n-                    // const param\n-                    ParamCandidate(ty::ConstnessAnd {\n-                        constness: ty::BoundConstness::ConstIfConst,\n-                        ..\n-                    }) => {}\n-                    // auto trait impl\n-                    AutoImplCandidate(..) => {}\n-                    // generator, this will raise error in other places\n-                    // or ignore error with const_async_blocks feature\n-                    GeneratorCandidate => {}\n-                    ConstDropCandidate => {}\n-                    _ => {\n-                        // reject all other types of candidates\n-                        return Err(Unimplemented);\n-                    }\n+            match candidate {\n+                // const impl\n+                ImplCandidate(def_id) if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                // const param\n+                ParamCandidate(ty::ConstnessAnd {\n+                    constness: ty::BoundConstness::ConstIfConst,\n+                    ..\n+                }) => {}\n+                // auto trait impl\n+                AutoImplCandidate(..) => {}\n+                // generator, this will raise error in other places\n+                // or ignore error with const_async_blocks feature\n+                GeneratorCandidate => {}\n+                ConstDropCandidate => {}\n+                _ => {\n+                    // reject all other types of candidates\n+                    return Err(Unimplemented);\n                 }\n+            }\n         }\n         // Treat negative impls as unimplemented, and reservation impls as ambiguity.\n         if let ImplCandidate(def_id) = candidate {"}, {"sha": "a79b67fb0db0a0baef1612f315004d693ec3c889", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0a52128ee2d522e12893637428d88a3287c818e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0a52128ee2d522e12893637428d88a3287c818e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=f0a52128ee2d522e12893637428d88a3287c818e", "patch": "@@ -20,7 +20,7 @@ const fn check<T: ~const Drop>() {}\n \n macro_rules! check_all {\n     ($($T:ty),*$(,)?) => {$(\n-        const _: () = check::<$T>();  \n+        const _: () = check::<$T>();\n     )*};\n }\n "}]}