{"sha": "81831e124e002188d95d690ea090067b3653055f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxODMxZTEyNGUwMDIxODhkOTVkNjkwZWEwOTAwNjdiMzY1MzA1NWY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-23T16:28:50Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-02T13:02:36Z"}, "message": "add WellFormedConst predicate", "tree": {"sha": "12d76524a4d11b73dda3fb02921045ba2f63ca65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12d76524a4d11b73dda3fb02921045ba2f63ca65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81831e124e002188d95d690ea090067b3653055f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81831e124e002188d95d690ea090067b3653055f", "html_url": "https://github.com/rust-lang/rust/commit/81831e124e002188d95d690ea090067b3653055f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81831e124e002188d95d690ea090067b3653055f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2308de549975f538bc51325481ad235cea4e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2308de549975f538bc51325481ad235cea4e9d", "html_url": "https://github.com/rust-lang/rust/commit/cb2308de549975f538bc51325481ad235cea4e9d"}], "stats": {"total": 357, "additions": 296, "deletions": 61}, "files": [{"sha": "ad8e44a6c1d3ae408cbdaa8f8c9166aea2aa9a50", "filename": "src/librustc_infer/infer/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fmod.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -20,7 +20,8 @@ pub fn explicit_outlives_bounds<'tcx>(\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::TypeOutlives(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n-        | ty::PredicateKind::ConstEquate(..) => None,\n+        | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::WellFormedConst(..) => None,\n         ty::PredicateKind::RegionOutlives(ref data) => data\n             .no_bound_vars()\n             .map(|ty::OutlivesPredicate(r_a, r_b)| OutlivesBound::RegionSubRegion(r_b, r_a)),"}, {"sha": "1aaa07d23cc9ab203b781fe0d8c3c96c9d88415a", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -45,6 +45,8 @@ pub fn anonymize_predicate<'tcx>(\n         }\n \n         ty::PredicateKind::ConstEquate(c1, c2) => ty::PredicateKind::ConstEquate(c1, c2),\n+\n+        ty::PredicateKind::WellFormedConst(ct) => ty::PredicateKind::WellFormedConst(ct),\n     };\n \n     if new != *kind { new.to_predicate(tcx) } else { pred }\n@@ -204,6 +206,9 @@ impl Elaborator<'tcx> {\n                 // Currently, we do not elaborate const-equate\n                 // predicates.\n             }\n+            ty::PredicateKind::WellFormedConst(..) => {\n+                // Currently, we do not elaborate WF predicates.\n+            }\n             ty::PredicateKind::RegionOutlives(..) => {\n                 // Nothing to elaborate from `'a: 'b`.\n             }"}, {"sha": "bde761b01c3a065f6d02028d57ff2f03ba1755ad", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -1218,6 +1218,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n                     Projection(..) |\n                     // Ignore bounds that a user can't type\n                     WellFormed(..) |\n+                    WellFormedConst(..) |\n                     ObjectSafe(..) |\n                     ClosureKind(..) |\n                     Subtype(..) |"}, {"sha": "554553dc6b4cfbf4f522e4f5453693af93869440", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -1079,6 +1079,9 @@ pub enum PredicateKind<'tcx> {\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),\n+\n+    /// Constant must be well formed.\n+    WellFormedConst(&'tcx Const<'tcx>),\n }\n \n /// The crate outlives map is computed during typeck and contains the\n@@ -1195,6 +1198,9 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::ConstEquate(c1, c2) => {\n                 PredicateKind::ConstEquate(c1.subst(tcx, substs), c2.subst(tcx, substs))\n             }\n+            PredicateKind::WellFormedConst(c) => {\n+                PredicateKind::WellFormedConst(c.subst(tcx, substs))\n+            }\n         };\n \n         if new != *kind { new.to_predicate(tcx) } else { self }\n@@ -1386,7 +1392,8 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::ClosureKind(..)\n             | PredicateKind::TypeOutlives(..)\n             | PredicateKind::ConstEvaluatable(..)\n-            | PredicateKind::ConstEquate(..) => None,\n+            | PredicateKind::ConstEquate(..)\n+            | PredicateKind::WellFormedConst(..) => None,\n         }\n     }\n \n@@ -1401,7 +1408,8 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::ObjectSafe(..)\n             | PredicateKind::ClosureKind(..)\n             | PredicateKind::ConstEvaluatable(..)\n-            | PredicateKind::ConstEquate(..) => None,\n+            | PredicateKind::ConstEquate(..)\n+            | PredicateKind::WellFormedConst(..) => None,\n         }\n     }\n }"}, {"sha": "6eb11b0c9429a2e8096e3760be4ff6f7e1ff0a3d", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -2054,6 +2054,9 @@ define_print_and_forward_display! {\n                    print(c2),\n                    write(\"`\"))\n             }\n+            ty::PredicateKind::WellFormedConst(c) => {\n+                p!(print(c), write(\" well-formed\"))\n+            }\n         }\n     }\n "}, {"sha": "19a2e89ca417793043862da1284060d8360b45c4", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -247,6 +247,7 @@ impl fmt::Debug for ty::PredicateKind<'tcx> {\n                 write!(f, \"ConstEvaluatable({:?}, {:?})\", def_id, substs)\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => write!(f, \"ConstEquate({:?}, {:?})\", c1, c2),\n+            ty::PredicateKind::WellFormedConst(c) => write!(f, \"WellFormedConst({:?})\", c),\n         }\n     }\n }\n@@ -507,6 +508,9 @@ impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n             ty::PredicateKind::ConstEquate(c1, c2) => {\n                 tcx.lift(&(c1, c2)).map(|(c1, c2)| ty::PredicateKind::ConstEquate(c1, c2))\n             }\n+            ty::PredicateKind::WellFormedConst(c) => {\n+                tcx.lift(&c).map(ty::PredicateKind::WellFormedConst)\n+            }\n         }\n     }\n }"}, {"sha": "22959c6a3df2b35ff91898bcb5720fe5801c2cd8", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -29,7 +29,8 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                 | ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::Projection(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n-                | ty::PredicateKind::ConstEquate(..) => continue,\n+                | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::WellFormedConst(..) => continue,\n                 ty::PredicateKind::ObjectSafe(_) => {\n                     bug!(\"object safe predicate on function: {:#?}\", predicate)\n                 }"}, {"sha": "8bbcfb1ade58a40b9ebd6028cc088258f1290119", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -1277,7 +1277,8 @@ crate fn required_region_bounds(\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::RegionOutlives(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n-                | ty::PredicateKind::ConstEquate(..) => None,\n+                | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::WellFormedConst(..) => None,\n                 ty::PredicateKind::TypeOutlives(predicate) => {\n                     // Search for a bound of the form `erased_self_ty\n                     // : 'a`, but be wary of something like `for<'a>"}, {"sha": "1134cafbae4308926ac1240609812aaf25d38bc7", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -610,6 +610,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         }\n                     }\n \n+                    ty::PredicateKind::WellFormedConst(ct) => {\n+                        // Const WF predicates cannot themselves make\n+                        // errors. They can only block due to\n+                        // ambiguity; otherwise, they always\n+                        // degenerate into other obligations\n+                        // (which may fail).\n+                        span_bug!(span, \"const WF predicate not satisfied for {:?}\", ct);\n+                    }\n+\n                     ty::PredicateKind::ConstEvaluatable(..) => {\n                         // Errors for `ConstEvaluatable` predicates show up as\n                         // `SelectionError::ConstEvalFailure`,\n@@ -1540,6 +1549,15 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 self.need_type_info_err(body_id, span, ty, ErrorCode::E0282)\n             }\n \n+            ty::PredicateKind::WellFormedConst(ct) => {\n+                // Same hacky approach as above to avoid deluging user\n+                // with error messages.\n+                if ct.references_error() || self.tcx.sess.has_errors() {\n+                    return;\n+                }\n+                self.need_type_info_err_const(body_id, span, ct, ErrorCode::E0282)\n+            }\n+\n             ty::PredicateKind::Subtype(ref data) => {\n                 if data.references_error() || self.tcx.sess.has_errors() {\n                     // no need to overload user in such cases"}, {"sha": "8ab81246e7d931188d336b48bea560e82cdeb96a", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -476,6 +476,21 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n             }\n \n+            ty::PredicateKind::WellFormedConst(constant) => match wf::const_obligations(\n+                self.selcx.infcx(),\n+                obligation.param_env,\n+                obligation.cause.body_id,\n+                constant,\n+                obligation.cause.span,\n+            ) {\n+                Some(predicates) => ProcessResult::Changed(mk_pending(predicates)),\n+                None => {\n+                    pending_obligation.stalled_on =\n+                        vec![TyOrConstInferVar::maybe_from_const(constant).unwrap()];\n+                    ProcessResult::Unchanged\n+                }\n+            },\n+\n             &ty::PredicateKind::Subtype(subtype) => {\n                 match self.selcx.infcx().subtype_predicate(\n                     &obligation.cause,"}, {"sha": "ee7aa6b165d6230a53317bfb86645bc29716474c", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -283,7 +283,8 @@ fn predicates_reference_self(\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n-                | ty::PredicateKind::ConstEquate(..) => None,\n+                | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::WellFormedConst(..) => None,\n             }\n         })\n         .collect()\n@@ -318,7 +319,8 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::TypeOutlives(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n-            | ty::PredicateKind::ConstEquate(..) => false,\n+            | ty::PredicateKind::ConstEquate(..)\n+            | ty::PredicateKind::WellFormedConst(..) => false,\n         }\n     })\n }"}, {"sha": "9dd0592c45fbbca14b0c1e326a8ec9802cc48b81", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -450,6 +450,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 None => Ok(EvaluatedToAmbig),\n             },\n \n+            ty::PredicateKind::WellFormedConst(constant) => match wf::const_obligations(\n+                self.infcx,\n+                obligation.param_env,\n+                obligation.cause.body_id,\n+                constant,\n+                obligation.cause.span,\n+            ) {\n+                Some(mut obligations) => {\n+                    self.add_depth(obligations.iter_mut(), obligation.recursion_depth);\n+                    self.evaluate_predicates_recursively(previous_stack, obligations.into_iter())\n+                }\n+                None => Ok(EvaluatedToAmbig),\n+            },\n+\n             ty::PredicateKind::TypeOutlives(..) | ty::PredicateKind::RegionOutlives(..) => {\n                 // We do not consider region relationships when evaluating trait matches.\n                 Ok(EvaluatedToOkModuloRegions)"}, {"sha": "458a6f5b88f22bdfb0d656b53702f1797d8f93c5", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -128,15 +128,15 @@ pub fn predicate_obligations<'a, 'tcx>(\n             let obligations = wf.nominal_obligations(def_id, substs);\n             wf.out.extend(obligations);\n \n-            for subst in substs.iter().copied() {\n+            for subst in substs.iter() {\n                 wf.compute(subst);\n             }\n         }\n-        ty::PredicateKind::ConstEquate(c1, c2) => {\n-            wf.compute(c1.ty.into());\n-            wf.compute(c2.ty.into());\n+        &ty::PredicateKind::ConstEquate(c1, c2) => {\n+            wf.compute(c1.into());\n+            wf.compute(c2.into());\n         }\n-        ty::Predicate::WellFormedConst(constant) => {\n+        &ty::PredicateKind::WellFormedConst(constant) => {\n             wf.compute(constant.into());\n         }\n     }\n@@ -368,7 +368,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             let obligations = self.nominal_obligations(def_id, substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::PredicateKind::ConstEvaluatable(def_id, substs).to_predicate(self.tcx());\n+                            let predicate = ty::PredicateKind::ConstEvaluatable(def_id, substs)\n+                                .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::new(\n                                 cause,\n@@ -389,11 +390,20 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 self.out.push(traits::Obligation::new(\n                                     cause,\n                                     self.param_env,\n-                                    ty::PredicateKind::WellFormedConst(resolved_constant).to_predicate(self.tcx()),\n+                                    ty::PredicateKind::WellFormedConst(resolved_constant)\n+                                        .to_predicate(self.tcx()),\n                                 ));\n                             }\n                         }\n-                        _ => (),\n+                        ty::ConstKind::Error\n+                        | ty::ConstKind::Param(_)\n+                        | ty::ConstKind::Bound(..)\n+                        | ty::ConstKind::Placeholder(..) => {\n+                            // These variants are trivially WF, so nothing to do here.\n+                        }\n+                        ty::ConstKind::Value(..) => {\n+                            // FIXME: Enforce that values are structually-matchable.\n+                        }\n                     }\n                     continue;\n                 }"}, {"sha": "b624598322a074c8d5fa9bbb8676e6a490e038d3", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n     ) -> chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'tcx>>> {\n         let clauses = self.environment.into_iter().filter_map(|clause| match clause {\n             ChalkEnvironmentClause::Predicate(predicate) => {\n-                match &predicate.kind() {\n+                match predicate.kind() {\n                     ty::PredicateKind::Trait(predicate, _) => {\n                         let (predicate, binders, _named_regions) =\n                             collect_bound_vars(interner, interner.tcx, predicate);\n@@ -126,7 +126,8 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                     | ty::PredicateKind::ClosureKind(..)\n                     | ty::PredicateKind::Subtype(..)\n                     | ty::PredicateKind::ConstEvaluatable(..)\n-                    | ty::PredicateKind::ConstEquate(..) => {\n+                    | ty::PredicateKind::ConstEquate(..)\n+                    | ty::PredicateKind::WellFormedConst(..) => {\n                         bug!(\"unexpected predicate {}\", predicate)\n                     }\n                 }\n@@ -193,7 +194,8 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n-            | ty::PredicateKind::ConstEquate(..) => {\n+            | ty::PredicateKind::ConstEquate(..)\n+            | ty::PredicateKind::WellFormedConst(..) => {\n                 chalk_ir::GoalData::All(chalk_ir::Goals::new(interner))\n             }\n         }\n@@ -460,7 +462,8 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n-            | ty::PredicateKind::ConstEquate(..) => bug!(\"unexpected predicate {}\", &self),\n+            | ty::PredicateKind::ConstEquate(..)\n+            | ty::PredicateKind::WellFormedConst(..) => bug!(\"unexpected predicate {}\", &self),\n         }\n     }\n }"}, {"sha": "073dfe4d5920edcce52184c327a03a2637b13501", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -101,7 +101,8 @@ fn compute_implied_outlives_bounds<'tcx>(\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n-                | ty::PredicateKind::ConstEquate(..) => vec![],\n+                | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::WellFormedConst(..) => vec![],\n \n                 ty::PredicateKind::WellFormed(subty) => {\n                     wf_types.push(subty);"}, {"sha": "6a8d81085c575c11182aef3dffe16d6a52d6a84b", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -49,6 +49,7 @@ fn not_outlives_predicate(p: &ty::Predicate<'_>) -> bool {\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::Subtype(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n-        | ty::PredicateKind::ConstEquate(..) => true,\n+        | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::WellFormedConst(..) => true,\n     }\n }"}, {"sha": "c17b3d78125cc5be915b2c5fd077df95ce8c168c", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -814,7 +814,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::TypeOutlives(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n-                | ty::PredicateKind::ConstEquate(..) => None,\n+                | ty::PredicateKind::ConstEquate(..)\n+                | ty::PredicateKind::WellFormedConst(..) => None,\n             });\n \n         self.elaborate_bounds(bounds, |this, poly_trait_ref, item| {"}, {"sha": "374ba1c73141bf9fa30774b281f477106ae7ae2d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -3353,28 +3353,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub fn to_const(&self, ast_c: &hir::AnonConst) -> &'tcx ty::Const<'tcx> {\n         let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id);\n         let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n-\n-        // HACK(eddyb) emulate what a `WellFormedConst` obligation would do.\n-        // This code should be replaced with the proper WF handling ASAP.\n-        if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n-            assert!(promoted.is_none());\n-\n-            // HACK(eddyb) let's hope these are always empty.\n-            // let obligations = self.nominal_obligations(def_id, substs);\n-            // self.out.extend(obligations);\n-\n-            let cause = traits::ObligationCause::new(\n-                self.tcx.def_span(const_def_id.to_def_id()),\n-                self.body_id,\n-                traits::MiscObligation,\n-            );\n-            self.register_predicate(traits::Obligation::new(\n-                cause,\n-                self.param_env,\n-                ty::PredicateKind::ConstEvaluatable(def_id, substs).to_predicate(self.tcx),\n-            ));\n-        }\n-\n+        self.register_wf_const_obligation(\n+            c,\n+            self.tcx.hir().span(ast_c.hir_id),\n+            ObligationCauseCode::MiscObligation,\n+        );\n         c\n     }\n \n@@ -3424,11 +3407,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ));\n     }\n \n-    /// Registers obligations that all types appearing in `substs` are well-formed.\n+    /// Registers an obligation for checking later, during regionck, that the type `ty` must\n+    /// outlive the region `r`.\n+    pub fn register_wf_const_obligation(\n+        &self,\n+        ct: &'tcx ty::Const<'tcx>,\n+        span: Span,\n+        code: traits::ObligationCauseCode<'tcx>,\n+    ) {\n+        // WF obligations never themselves fail, so no real need to give a detailed cause:\n+        let cause = traits::ObligationCause::new(span, self.body_id, code);\n+        self.register_predicate(traits::Obligation::new(\n+            cause,\n+            self.param_env,\n+            ty::PredicateKind::WellFormedConst(ct).to_predicate(self.tcx),\n+        ));\n+    }\n+\n+    /// Registers obligations that all `substs` are well-formed.\n     pub fn add_wf_bounds(&self, substs: SubstsRef<'tcx>, expr: &hir::Expr<'_>) {\n-        for ty in substs.types() {\n-            if !ty.references_error() {\n-                self.register_wf_obligation(ty, expr.span, traits::MiscObligation);\n+        for subst in substs {\n+            match subst.unpack() {\n+                GenericArgKind::Lifetime(..) => {\n+                    // Nothing to do for lifetimes.\n+                }\n+                GenericArgKind::Type(ty) => {\n+                    if !ty.references_error() {\n+                        self.register_wf_obligation(ty, expr.span, traits::MiscObligation);\n+                    }\n+                }\n+                GenericArgKind::Const(ct) => {\n+                    if !ct.references_error() {\n+                        self.register_wf_const_obligation(ct, expr.span, traits::MiscObligation);\n+                    }\n+                }\n             }\n         }\n     }\n@@ -3860,6 +3872,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ty::PredicateKind::RegionOutlives(..) => None,\n                 ty::PredicateKind::TypeOutlives(..) => None,\n                 ty::PredicateKind::WellFormed(..) => None,\n+                ty::PredicateKind::WellFormedConst(..) => None,\n                 ty::PredicateKind::ObjectSafe(..) => None,\n                 ty::PredicateKind::ConstEvaluatable(..) => None,\n                 ty::PredicateKind::ConstEquate(..) => None,"}, {"sha": "b2e8716b0380dba9c1967d9c20e307523b62632e", "filename": "src/librustc_typeck/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -405,6 +405,7 @@ fn trait_predicate_kind<'tcx>(\n         | ty::PredicateKind::ObjectSafe(_)\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::ConstEvaluatable(..)\n-        | ty::PredicateKind::ConstEquate(..) => None,\n+        | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::WellFormedConst(..) => None,\n     }\n }"}, {"sha": "cf8be687f602882da951632a893354d4bb71f6f3", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -59,7 +59,8 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     | ty::PredicateKind::ClosureKind(..)\n                     | ty::PredicateKind::Subtype(..)\n                     | ty::PredicateKind::ConstEvaluatable(..)\n-                    | ty::PredicateKind::ConstEquate(..) => (),\n+                    | ty::PredicateKind::ConstEquate(..)\n+                    | ty::PredicateKind::WellFormedConst(..) => (),\n                 }\n             }\n "}, {"sha": "5c2d6c6453dbf462060807253f07864545fe16d4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -491,7 +491,8 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n-            | ty::PredicateKind::ConstEquate(..) => panic!(\"not user writable\"),\n+            | ty::PredicateKind::ConstEquate(..)\n+            | ty::PredicateKind::WellFormedConst(..) => panic!(\"not user writable\"),\n         }\n     }\n }"}, {"sha": "b29d27e524751dd06023dfec1f09b9de2c7ecb7d", "filename": "src/test/ui/const-generics/cannot-infer-const-args.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -11,7 +11,9 @@ error[E0282]: type annotations needed\n   --> $DIR/cannot-infer-const-args.rs:9:5\n    |\n LL |     foo();\n-   |     ^^^ cannot infer type for fn item `fn() -> usize {foo::<{_: usize}>}`\n+   |     ^^^\n+   |\n+   = note: unable to infer the value of a const parameter\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "cc671163e85a1388e2bf9bf2e07067194163344d", "filename": "src/test/ui/const-generics/issues/issue-61747.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -1,12 +1,11 @@\n-// check-pass\n-\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n struct Const<const N: usize>;\n \n impl<const C: usize> Const<{C}> {\n     fn successor() -> Const<{C + 1}> {\n+        //~^ ERROR constant expression depends on a generic parameter\n         Const\n     }\n }"}, {"sha": "2685d9fdf167c93f8550745027f762c7982f054b", "filename": "src/test/ui/const-generics/issues/issue-61747.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -1,11 +1,19 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-61747.rs:3:12\n+  --> $DIR/issue-61747.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: 1 warning emitted\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-61747.rs:7:23\n+   |\n+LL |     fn successor() -> Const<{C + 1}> {\n+   |                       ^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "5c4a0d31a895d84d43b58a42cd9aebd9e1f7ae49", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -1,14 +1,14 @@\n-// build-pass\n #![allow(incomplete_features)]\n-\n #![feature(const_generics)]\n+\n pub struct Vector<T, const N: usize>([T; N]);\n \n pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n \n impl<T, const N: usize> Vector<T, { N }> {\n     /// Drop the last component and return the vector with one fewer dimension.\n     pub fn trunc(self) -> (TruncatedVector<T, { N }>, T) {\n+        //~^ ERROR constant expression depends on a generic parameter\n         unimplemented!()\n     }\n }"}, {"sha": "d91d2bb326fc57d1b5d8555da64f74bc5707acd6", "filename": "src/test/ui/const-generics/issues/issue-62220.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.stderr?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62220.rs:10:27\n+   |\n+LL |     pub fn trunc(self) -> (TruncatedVector<T, { N }>, T) {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "7cedf51ca040493f1e00193f42658724e2d203fd", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -1,6 +1,6 @@\n-#![allow(incomplete_features, dead_code, unconditional_recursion)]\n+#![allow(dead_code, unconditional_recursion)]\n #![feature(const_generics)]\n-#![feature(lazy_normalization_consts)]\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();"}, {"sha": "1e9c0f2f3d9eb175e34479b6936157180decaf88", "filename": "src/test/ui/const-generics/issues/issue-66205.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -1,3 +1,12 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-66205.rs:2:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n error: constant expression depends on a generic parameter\n   --> $DIR/issue-66205.rs:6:12\n    |\n@@ -6,5 +15,5 @@ LL |     fact::<{ N - 1 }>();\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "346ea3c2042449b040162db87af87a4cd6322081", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -0,0 +1,40 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+struct PhantomU8<const X: u8>;\n+\n+trait FxpStorage {\n+    type SInt; // Add arithmetic traits as needed.\n+}\n+\n+macro_rules! fxp_storage_impls {\n+    ($($($n:literal)|+ => $sint:ty),* $(,)?) => {\n+        $($(impl FxpStorage for PhantomU8<$n> {\n+            type SInt = $sint;\n+        })*)*\n+    }\n+}\n+\n+fxp_storage_impls! {\n+    1 => i8,\n+    2 => i16,\n+    3 | 4 => i32,\n+    5 | 6 | 7 | 8 => i64,\n+    9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 => i128,\n+}\n+\n+type FxpStorageHelper<const INT_BITS: u8, const FRAC_BITS: u8> =\n+    PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n+\n+struct Fxp<const INT_BITS: u8, const FRAC_BITS: u8>\n+where\n+    FxpStorageHelper<INT_BITS, FRAC_BITS>: FxpStorage,\n+    //~^ ERROR constant expression depends on a generic parameter\n+{\n+    storage: <FxpStorageHelper<INT_BITS, FRAC_BITS> as FxpStorage>::SInt,\n+}\n+\n+fn main() {\n+    Fxp::<1, 15> { storage: 0i16 };\n+    Fxp::<2, 15> { storage: 0i32 };\n+}"}, {"sha": "e1190d9026da9d70fee5fe87b5b276667b4d936e", "filename": "src/test/ui/const-generics/issues/issue-68977.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.stderr?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68977.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-68977.rs:31:44\n+   |\n+LL |     FxpStorageHelper<INT_BITS, FRAC_BITS>: FxpStorage,\n+   |                                            ^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "4ff1b9e2da5b24a5a4327884538260d1633e032a", "filename": "src/test/ui/const-generics/wf-misc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+pub fn arr_len<const N: usize>() {\n+    let _: [u8; N + 1];\n+    //~^ ERROR constant expression depends on a generic parameter\n+}\n+\n+struct Const<const N: usize>;\n+\n+pub fn func_call<const N: usize>() {\n+    let _: Const::<{N + 1}>;\n+    //~^ ERROR constant expression depends on a generic parameter\n+}\n+\n+fn main() {}"}, {"sha": "03f2bf3f526994e57fcb58ec6b51f6ff730b0f92", "filename": "src/test/ui/const-generics/wf-misc.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81831e124e002188d95d690ea090067b3653055f/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.stderr?ref=81831e124e002188d95d690ea090067b3653055f", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/wf-misc.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/wf-misc.rs:5:12\n+   |\n+LL |     let _: [u8; N + 1];\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/wf-misc.rs:12:12\n+   |\n+LL |     let _: Const::<{N + 1}>;\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}]}