{"sha": "f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1N2Q1YmEzYzlmZmVmNGNkMjQwMmUzZTdkODkzNGJkMWE2ZTljYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T11:31:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T11:31:16Z"}, "message": "Auto merge of #86054 - JohnTitor:rollup-j40z7sm, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #85436 (Avoid cloning cache key)\n - #85772 (Preserve metadata w/ Solaris-like linkers.)\n - #85920 (Tweak wasm_base target spec to indicate linker is not GNU and update linker inferring logic for wasm-ld.)\n - #85930 (Update standard library for IntoIterator implementation of arrays )\n - #85972 (Rustdoc html fixes)\n - #86028 (Drop an `if let` that will always succeed)\n - #86043 (don't clone attrs)\n - #86047 (Don't fire `invalid_doc_attributes` on `extern crate` items)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9bc36b15565d83984822ad38b4d9604e1e09e8af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bc36b15565d83984822ad38b4d9604e1e09e8af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "html_url": "https://github.com/rust-lang/rust/commit/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3740ba2a7dd965ca45db500ebf7ad580a7812c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/3740ba2a7dd965ca45db500ebf7ad580a7812c07", "html_url": "https://github.com/rust-lang/rust/commit/3740ba2a7dd965ca45db500ebf7ad580a7812c07"}, {"sha": "19433c44bde0dd6ed674bd03f1cefbfc2f95c676", "url": "https://api.github.com/repos/rust-lang/rust/commits/19433c44bde0dd6ed674bd03f1cefbfc2f95c676", "html_url": "https://github.com/rust-lang/rust/commit/19433c44bde0dd6ed674bd03f1cefbfc2f95c676"}], "stats": {"total": 199, "additions": 111, "deletions": 88}, "files": [{"sha": "5d994dbad4d1fcf128851668679a54ced7f92e41", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -218,8 +218,7 @@ impl AttrAnnotatedTokenStream {\n                 AttrAnnotatedTokenTree::Attributes(data) => {\n                     let mut outer_attrs = Vec::new();\n                     let mut inner_attrs = Vec::new();\n-                    let attrs: Vec<_> = data.attrs.clone().into();\n-                    for attr in attrs {\n+                    for attr in &data.attrs {\n                         match attr.style {\n                             crate::AttrStyle::Outer => {\n                                 assert!(\n@@ -264,7 +263,7 @@ impl AttrAnnotatedTokenStream {\n                                 // so we never reach this code.\n \n                                 let mut builder = TokenStreamBuilder::new();\n-                                for inner_attr in &inner_attrs {\n+                                for inner_attr in inner_attrs {\n                                     builder.push(inner_attr.tokens().to_tokenstream());\n                                 }\n                                 builder.push(delim_tokens.clone());"}, {"sha": "2519b0826a94c5226c33c8ab3ccaea63e07453c6", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -1199,6 +1199,8 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                     || stem.ends_with(\"-clang\")\n                 {\n                     LinkerFlavor::Gcc\n+                } else if stem == \"wasm-ld\" || stem.ends_with(\"-wasm-ld\") {\n+                    LinkerFlavor::Lld(LldFlavor::Wasm)\n                 } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n                     LinkerFlavor::Ld\n                 } else if stem == \"link\" || stem == \"lld-link\" {\n@@ -1836,10 +1838,16 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // Make the binary compatible with data execution prevention schemes.\n     cmd.add_no_exec();\n \n+    // OBJECT-FILES-YES\n+    add_local_crate_metadata_objects(cmd, crate_type, codegen_results);\n+\n     // NO-OPT-OUT, OBJECT-FILES-NO\n     // Avoid linking to dynamic libraries unless they satisfy some undefined symbols\n     // at the point at which they are specified on the command line.\n     // Must be passed before any dynamic libraries.\n+    // On solaris-like systems, this also will ignore unreferenced ELF sections\n+    // from relocatable objects. For that reason, we move the metadata objects\n+    // to before this flag as they would otherwise be removed.\n     cmd.add_as_needed();\n \n     // NO-OPT-OUT, OBJECT-FILES-NO\n@@ -1891,9 +1899,6 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // dynamic library.\n     cmd.export_symbols(tmpdir, crate_type);\n \n-    // OBJECT-FILES-YES\n-    add_local_crate_metadata_objects(cmd, crate_type, codegen_results);\n-\n     // OBJECT-FILES-YES\n     add_local_crate_allocator_objects(cmd, codegen_results);\n "}, {"sha": "9152a69e7a194451767c41d423cdc0df47ac9422", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -476,21 +476,23 @@ impl<'a> Linker for GccLinker<'a> {\n         // eliminate the metadata. If we're building an executable, however,\n         // --gc-sections drops the size of hello world from 1.8MB to 597K, a 67%\n         // reduction.\n-        } else if self.sess.target.linker_is_gnu && !keep_metadata {\n+        } else if (self.sess.target.linker_is_gnu || self.sess.target.is_like_wasm)\n+            && !keep_metadata\n+        {\n             self.linker_arg(\"--gc-sections\");\n         }\n     }\n \n     fn no_gc_sections(&mut self) {\n         if self.sess.target.is_like_osx {\n             self.linker_arg(\"-no_dead_strip\");\n-        } else if self.sess.target.linker_is_gnu {\n+        } else if self.sess.target.linker_is_gnu || self.sess.target.is_like_wasm {\n             self.linker_arg(\"--no-gc-sections\");\n         }\n     }\n \n     fn optimize(&mut self) {\n-        if !self.sess.target.linker_is_gnu {\n+        if !self.sess.target.linker_is_gnu && !self.sess.target.is_like_wasm {\n             return;\n         }\n "}, {"sha": "05b1a85381f454ff880d854199f102924cbe00d3", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -342,7 +342,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             return Ok(());\n         }\n \n-        match self.active_cache.entry(cache_key.clone()) {\n+        match self.active_cache.entry(cache_key) {\n             Entry::Occupied(o) => {\n                 let node = &mut self.nodes[*o.get()];\n                 if let Some(parent_index) = parent {\n@@ -366,8 +366,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n                     && self\n                         .error_cache\n                         .get(&obligation_tree_id)\n-                        .map(|errors| errors.contains(&cache_key))\n-                        .unwrap_or(false);\n+                        .map_or(false, |errors| errors.contains(v.key()));\n \n                 if already_failed {\n                     Err(())"}, {"sha": "4fbd27c89d9c8f6b7f0338f3d2020ad1c3db6f28", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -729,13 +729,11 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 let base_ty = Place::ty_from(place_local, proj_base, self.body, self.tcx).ty;\n                 if let ty::RawPtr(_) = base_ty.kind() {\n                     if proj_base.is_empty() {\n-                        if let (local, []) = (place_local, proj_base) {\n-                            let decl = &self.body.local_decls[local];\n-                            if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n-                                let span = decl.source_info.span;\n-                                self.check_static(def_id, span);\n-                                return;\n-                            }\n+                        let decl = &self.body.local_decls[place_local];\n+                        if let Some(box LocalInfo::StaticRef { def_id, .. }) = decl.local_info {\n+                            let span = decl.source_info.span;\n+                            self.check_static(def_id, span);\n+                            return;\n                         }\n                     }\n                     self.check_op(ops::RawPtrDeref);"}, {"sha": "b18ef302962378b1819e909dfd9ca6841535dd24", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -577,7 +577,7 @@ impl CheckAttrVisitor<'tcx> {\n         target: Target,\n         specified_inline: &mut Option<(bool, Span)>,\n     ) -> bool {\n-        if target == Target::Use {\n+        if target == Target::Use || target == Target::ExternCrate {\n             let do_inline = meta.name_or_empty() == sym::inline;\n             if let Some((prev_inline, prev_span)) = *specified_inline {\n                 if do_inline != prev_inline {"}, {"sha": "4c954a1e567ccb236e95b515fb2c8276be192364", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -102,6 +102,7 @@ pub fn options() -> TargetOptions {\n         // we use the LLD shipped with the Rust toolchain by default\n         linker: Some(\"rust-lld\".to_owned()),\n         lld_flavor: LldFlavor::Wasm,\n+        linker_is_gnu: false,\n \n         pre_link_args,\n "}, {"sha": "91eec10d575935ab95bf69ac22962c13e5394988", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -551,19 +551,13 @@ const LEN: usize = 16384;\n #[bench]\n fn bench_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n-    b.iter(|| data.iter().cloned().chain([1].iter().cloned()).collect::<Vec<_>>());\n+    b.iter(|| data.iter().cloned().chain([1]).collect::<Vec<_>>());\n }\n \n #[bench]\n fn bench_chain_chain_collect(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n-    b.iter(|| {\n-        data.iter()\n-            .cloned()\n-            .chain([1].iter().cloned())\n-            .chain([2].iter().cloned())\n-            .collect::<Vec<_>>()\n-    });\n+    b.iter(|| data.iter().cloned().chain([1]).chain([2]).collect::<Vec<_>>());\n }\n \n #[bench]"}, {"sha": "7b87090fb07138f18c17f990304dd15adf1db729", "filename": "library/alloc/src/collections/vec_deque/pair_slices.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fpair_slices.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -1,4 +1,3 @@\n-use core::array;\n use core::cmp::{self};\n use core::mem::replace;\n \n@@ -37,7 +36,7 @@ impl<'a, 'b, T> PairSlices<'a, 'b, T> {\n     }\n \n     pub fn remainder(self) -> impl Iterator<Item = &'b [T]> {\n-        array::IntoIter::new([self.b0, self.b1])\n+        IntoIterator::into_iter([self.b0, self.b1])\n     }\n }\n "}, {"sha": "4a1d564e2ab879547f8036133d7c0dc296c34c70", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -921,7 +921,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// vec.extend([1, 2, 3]);\n     /// assert_eq!(vec.capacity(), 10);\n     /// vec.shrink_to_fit();\n     /// assert!(vec.capacity() >= 3);\n@@ -950,7 +950,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// #![feature(shrink_to)]\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// vec.extend([1, 2, 3]);\n     /// assert_eq!(vec.capacity(), 10);\n     /// vec.shrink_to(4);\n     /// assert!(vec.capacity() >= 4);\n@@ -984,7 +984,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// ```\n     /// let mut vec = Vec::with_capacity(10);\n-    /// vec.extend([1, 2, 3].iter().cloned());\n+    /// vec.extend([1, 2, 3]);\n     ///\n     /// assert_eq!(vec.capacity(), 10);\n     /// let slice = vec.into_boxed_slice();\n@@ -2586,7 +2586,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// ```\n     /// let mut v = vec![1, 2, 3];\n     /// let new = [7, 8];\n-    /// let u: Vec<_> = v.splice(..2, new.iter().cloned()).collect();\n+    /// let u: Vec<_> = v.splice(..2, new).collect();\n     /// assert_eq!(v, &[7, 8, 3]);\n     /// assert_eq!(u, &[1, 2]);\n     /// ```"}, {"sha": "bad765c7f51fab944b3de89a3a956de2dd42f158", "filename": "library/alloc/src/vec/splice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -14,7 +14,7 @@ use super::{Drain, Vec};\n /// ```\n /// let mut v = vec![0, 1, 2];\n /// let new = [7, 8];\n-/// let iter: std::vec::Splice<_> = v.splice(1.., new.iter().cloned());\n+/// let iter: std::vec::Splice<_> = v.splice(1.., new);\n /// ```\n #[derive(Debug)]\n #[stable(feature = \"vec_splice\", since = \"1.21.0\")]"}, {"sha": "c203cdafecb03dd27be6f502965adffb715b6491", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -793,7 +793,7 @@ fn test_drain_leak() {\n fn test_splice() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    v.splice(2..4, a.iter().cloned());\n+    v.splice(2..4, a);\n     assert_eq!(v, &[1, 2, 10, 11, 12, 5]);\n     v.splice(1..3, Some(20));\n     assert_eq!(v, &[1, 20, 11, 12, 5]);\n@@ -803,7 +803,7 @@ fn test_splice() {\n fn test_splice_inclusive_range() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    let t1: Vec<_> = v.splice(2..=3, a.iter().cloned()).collect();\n+    let t1: Vec<_> = v.splice(2..=3, a).collect();\n     assert_eq!(v, &[1, 2, 10, 11, 12, 5]);\n     assert_eq!(t1, &[3, 4]);\n     let t2: Vec<_> = v.splice(1..=2, Some(20)).collect();\n@@ -816,15 +816,15 @@ fn test_splice_inclusive_range() {\n fn test_splice_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    v.splice(5..6, a.iter().cloned());\n+    v.splice(5..6, a);\n }\n \n #[test]\n #[should_panic]\n fn test_splice_inclusive_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    v.splice(5..=5, a.iter().cloned());\n+    v.splice(5..=5, a);\n }\n \n #[test]\n@@ -848,7 +848,7 @@ fn test_splice_unbounded() {\n fn test_splice_forget() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n-    std::mem::forget(v.splice(2..4, a.iter().cloned()));\n+    std::mem::forget(v.splice(2..4, a));\n     assert_eq!(v, &[1, 2]);\n }\n "}, {"sha": "37af3557fdd51ce792459ec680f32019413bbf03", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -416,7 +416,7 @@ impl<T, const N: usize> [T; N] {\n     {\n         // SAFETY: we know for certain that this iterator will yield exactly `N`\n         // items.\n-        unsafe { collect_into_array_unchecked(&mut IntoIter::new(self).map(f)) }\n+        unsafe { collect_into_array_unchecked(&mut IntoIterator::into_iter(self).map(f)) }\n     }\n \n     /// 'Zips up' two arrays into a single array of pairs.\n@@ -437,7 +437,7 @@ impl<T, const N: usize> [T; N] {\n     /// ```\n     #[unstable(feature = \"array_zip\", issue = \"80094\")]\n     pub fn zip<U>(self, rhs: [U; N]) -> [(T, U); N] {\n-        let mut iter = IntoIter::new(self).zip(IntoIter::new(rhs));\n+        let mut iter = IntoIterator::into_iter(self).zip(rhs);\n \n         // SAFETY: we know for certain that this iterator will yield exactly `N`\n         // items."}, {"sha": "2da3d6a72fb6f18049028616880ff5f137a10a0d", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -58,7 +58,7 @@ impl char {\n     /// ];\n     ///\n     /// assert_eq!(\n-    ///     decode_utf16(v.iter().cloned())\n+    ///     decode_utf16(v)\n     ///         .map(|r| r.map_err(|e| e.unpaired_surrogate()))\n     ///         .collect::<Vec<_>>(),\n     ///     vec![\n@@ -82,7 +82,7 @@ impl char {\n     /// ];\n     ///\n     /// assert_eq!(\n-    ///     decode_utf16(v.iter().cloned())\n+    ///     decode_utf16(v)\n     ///        .map(|r| r.unwrap_or(REPLACEMENT_CHARACTER))\n     ///        .collect::<String>(),\n     ///     \"\ud834\udd1emus\ufffdic\ufffd\""}, {"sha": "0ae625bdb68c6244f20b7a65c5e6154d6594afd4", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -1,4 +1,4 @@\n-use core::array::{self, IntoIter};\n+use core::array;\n use core::convert::TryFrom;\n \n #[test]\n@@ -41,44 +41,44 @@ fn array_try_from() {\n #[test]\n fn iterator_collect() {\n     let arr = [0, 1, 2, 5, 9];\n-    let v: Vec<_> = IntoIter::new(arr.clone()).collect();\n+    let v: Vec<_> = IntoIterator::into_iter(arr.clone()).collect();\n     assert_eq!(&arr[..], &v[..]);\n }\n \n #[test]\n fn iterator_rev_collect() {\n     let arr = [0, 1, 2, 5, 9];\n-    let v: Vec<_> = IntoIter::new(arr.clone()).rev().collect();\n+    let v: Vec<_> = IntoIterator::into_iter(arr.clone()).rev().collect();\n     assert_eq!(&v[..], &[9, 5, 2, 1, 0]);\n }\n \n #[test]\n fn iterator_nth() {\n     let v = [0, 1, 2, 3, 4];\n     for i in 0..v.len() {\n-        assert_eq!(IntoIter::new(v.clone()).nth(i).unwrap(), v[i]);\n+        assert_eq!(IntoIterator::into_iter(v.clone()).nth(i).unwrap(), v[i]);\n     }\n-    assert_eq!(IntoIter::new(v.clone()).nth(v.len()), None);\n+    assert_eq!(IntoIterator::into_iter(v.clone()).nth(v.len()), None);\n \n-    let mut iter = IntoIter::new(v);\n+    let mut iter = IntoIterator::into_iter(v);\n     assert_eq!(iter.nth(2).unwrap(), v[2]);\n     assert_eq!(iter.nth(1).unwrap(), v[4]);\n }\n \n #[test]\n fn iterator_last() {\n     let v = [0, 1, 2, 3, 4];\n-    assert_eq!(IntoIter::new(v).last().unwrap(), 4);\n-    assert_eq!(IntoIter::new([0]).last().unwrap(), 0);\n+    assert_eq!(IntoIterator::into_iter(v).last().unwrap(), 4);\n+    assert_eq!(IntoIterator::into_iter([0]).last().unwrap(), 0);\n \n-    let mut it = IntoIter::new([0, 9, 2, 4]);\n+    let mut it = IntoIterator::into_iter([0, 9, 2, 4]);\n     assert_eq!(it.next_back(), Some(4));\n     assert_eq!(it.last(), Some(2));\n }\n \n #[test]\n fn iterator_clone() {\n-    let mut it = IntoIter::new([0, 2, 4, 6, 8]);\n+    let mut it = IntoIterator::into_iter([0, 2, 4, 6, 8]);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next_back(), Some(8));\n     let mut clone = it.clone();\n@@ -92,7 +92,7 @@ fn iterator_clone() {\n \n #[test]\n fn iterator_fused() {\n-    let mut it = IntoIter::new([0, 9, 2]);\n+    let mut it = IntoIterator::into_iter([0, 9, 2]);\n     assert_eq!(it.next(), Some(0));\n     assert_eq!(it.next(), Some(9));\n     assert_eq!(it.next(), Some(2));\n@@ -105,7 +105,7 @@ fn iterator_fused() {\n \n #[test]\n fn iterator_len() {\n-    let mut it = IntoIter::new([0, 1, 2, 5, 9]);\n+    let mut it = IntoIterator::into_iter([0, 1, 2, 5, 9]);\n     assert_eq!(it.size_hint(), (5, Some(5)));\n     assert_eq!(it.len(), 5);\n     assert_eq!(it.is_empty(), false);\n@@ -121,7 +121,7 @@ fn iterator_len() {\n     assert_eq!(it.is_empty(), false);\n \n     // Empty\n-    let it = IntoIter::new([] as [String; 0]);\n+    let it = IntoIterator::into_iter([] as [String; 0]);\n     assert_eq!(it.size_hint(), (0, Some(0)));\n     assert_eq!(it.len(), 0);\n     assert_eq!(it.is_empty(), true);\n@@ -130,23 +130,23 @@ fn iterator_len() {\n #[test]\n fn iterator_count() {\n     let v = [0, 1, 2, 3, 4];\n-    assert_eq!(IntoIter::new(v.clone()).count(), 5);\n+    assert_eq!(IntoIterator::into_iter(v.clone()).count(), 5);\n \n-    let mut iter2 = IntoIter::new(v);\n+    let mut iter2 = IntoIterator::into_iter(v);\n     iter2.next();\n     iter2.next();\n     assert_eq!(iter2.count(), 3);\n }\n \n #[test]\n fn iterator_flat_map() {\n-    assert!((0..5).flat_map(|i| IntoIter::new([2 * i, 2 * i + 1])).eq(0..10));\n+    assert!((0..5).flat_map(|i| IntoIterator::into_iter([2 * i, 2 * i + 1])).eq(0..10));\n }\n \n #[test]\n fn iterator_debug() {\n     let arr = [0, 1, 2, 5, 9];\n-    assert_eq!(format!(\"{:?}\", IntoIter::new(arr)), \"IntoIter([0, 1, 2, 5, 9])\",);\n+    assert_eq!(format!(\"{:?}\", IntoIterator::into_iter(arr)), \"IntoIter([0, 1, 2, 5, 9])\",);\n }\n \n #[test]\n@@ -176,14 +176,14 @@ fn iterator_drops() {\n     // Simple: drop new iterator.\n     let i = Cell::new(0);\n     {\n-        IntoIter::new(five(&i));\n+        IntoIterator::into_iter(five(&i));\n     }\n     assert_eq!(i.get(), 5);\n \n     // Call `next()` once.\n     let i = Cell::new(0);\n     {\n-        let mut iter = IntoIter::new(five(&i));\n+        let mut iter = IntoIterator::into_iter(five(&i));\n         let _x = iter.next();\n         assert_eq!(i.get(), 0);\n         assert_eq!(iter.count(), 4);\n@@ -194,7 +194,7 @@ fn iterator_drops() {\n     // Check `clone` and calling `next`/`next_back`.\n     let i = Cell::new(0);\n     {\n-        let mut iter = IntoIter::new(five(&i));\n+        let mut iter = IntoIterator::into_iter(five(&i));\n         iter.next();\n         assert_eq!(i.get(), 1);\n         iter.next_back();\n@@ -217,7 +217,7 @@ fn iterator_drops() {\n     // Check via `nth`.\n     let i = Cell::new(0);\n     {\n-        let mut iter = IntoIter::new(five(&i));\n+        let mut iter = IntoIterator::into_iter(five(&i));\n         let _x = iter.nth(2);\n         assert_eq!(i.get(), 2);\n         let _y = iter.last();\n@@ -227,13 +227,13 @@ fn iterator_drops() {\n \n     // Check every element.\n     let i = Cell::new(0);\n-    for (index, _x) in IntoIter::new(five(&i)).enumerate() {\n+    for (index, _x) in IntoIterator::into_iter(five(&i)).enumerate() {\n         assert_eq!(i.get(), index);\n     }\n     assert_eq!(i.get(), 5);\n \n     let i = Cell::new(0);\n-    for (index, _x) in IntoIter::new(five(&i)).rev().enumerate() {\n+    for (index, _x) in IntoIterator::into_iter(five(&i)).rev().enumerate() {\n         assert_eq!(i.get(), index);\n     }\n     assert_eq!(i.get(), 5);"}, {"sha": "797bfd957f906ec2cc4c28632cc621e0b3f1fcc2", "filename": "library/core/tests/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fzip.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -236,9 +236,7 @@ fn test_zip_trusted_random_access_composition() {\n fn test_double_ended_zip() {\n     let xs = [1, 2, 3, 4, 5, 6];\n     let ys = [1, 2, 3, 7];\n-    let a = xs.iter().cloned();\n-    let b = ys.iter().cloned();\n-    let mut it = a.zip(b);\n+    let mut it = xs.iter().cloned().zip(ys);\n     assert_eq!(it.next(), Some((1, 1)));\n     assert_eq!(it.next(), Some((2, 2)));\n     assert_eq!(it.next_back(), Some((4, 7)));"}, {"sha": "d2d1757b9009ada499bcbb2bf75b9ee23b9f6bbe", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -105,7 +105,7 @@ crate fn render<T: Print, S: Print>(\n                            placeholder=\\\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\\\" \\\n                            type=\\\"search\\\">\\\n                 </div>\\\n-                <button type=\\\"button\\\" id=\\\"help-button\\\" title=\\\"help\\\">?</button>\n+                <button type=\\\"button\\\" id=\\\"help-button\\\" title=\\\"help\\\">?</button>\\\n                 <a id=\\\"settings-menu\\\" href=\\\"{root_path}settings.html\\\" title=\\\"settings\\\">\\\n                     <img src=\\\"{static_root_path}wheel{suffix}.svg\\\" \\\n                          width=\\\"18\\\" height=\\\"18\\\" \\\n@@ -161,7 +161,7 @@ crate fn render<T: Print, S: Print>(\n             }\n         },\n         title = page.title,\n-        description = page.description,\n+        description = Escape(page.description),\n         keywords = page.keywords,\n         favicon = if layout.favicon.is_empty() {\n             format!("}, {"sha": "4b6faefc2fb076b7e58aca765045f333bc2876d2", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -322,7 +322,13 @@ impl AllTypes {\n             if !e.is_empty() {\n                 let mut e: Vec<&ItemEntry> = e.iter().collect();\n                 e.sort();\n-                write!(f, \"<h3 id=\\\"{}\\\">{}</h3><ul class=\\\"{} docblock\\\">\", title, title, class);\n+                write!(\n+                    f,\n+                    \"<h3 id=\\\"{}\\\">{}</h3><ul class=\\\"{} docblock\\\">\",\n+                    title.replace(' ', \"-\"), // IDs cannot contain whitespaces.\n+                    title,\n+                    class\n+                );\n \n                 for s in e.iter() {\n                     write!(f, \"<li>{}</li>\", s.print());\n@@ -346,7 +352,7 @@ impl AllTypes {\n              </h1>\",\n         );\n         // Note: print_entries does not escape the title, because we know the current set of titles\n-        // don't require escaping.\n+        // doesn't require escaping.\n         print_entries(f, &self.structs, \"Structs\", \"structs\");\n         print_entries(f, &self.enums, \"Enums\", \"enums\");\n         print_entries(f, &self.unions, \"Unions\", \"unions\");"}, {"sha": "457e5ae60494a264e03a64c8948982f7922352ca", "filename": "src/test/ui/const-generics/array-impls/into-iter-impls-length-32.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-32.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -9,31 +9,31 @@ use std::{\n };\n \n pub fn yes_iterator() -> impl Iterator<Item = i32> {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_double_ended_iterator() -> impl DoubleEndedIterator {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_exact_size_iterator() -> impl ExactSizeIterator {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_fused_iterator() -> impl FusedIterator {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_trusted_len() -> impl TrustedLen {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_clone() -> impl Clone {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n pub fn yes_debug() -> impl Debug {\n-    IntoIter::new([0i32; 32])\n+    IntoIterator::into_iter([0i32; 32])\n }\n \n "}, {"sha": "4f343f3f97ea478420fc368a6a1a18828be9b1a0", "filename": "src/test/ui/const-generics/array-impls/into-iter-impls-length-33.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -9,31 +9,31 @@ use std::{\n };\n \n pub fn yes_iterator() -> impl Iterator<Item = i32> {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_double_ended_iterator() -> impl DoubleEndedIterator {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_exact_size_iterator() -> impl ExactSizeIterator {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_fused_iterator() -> impl FusedIterator {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_trusted_len() -> impl TrustedLen {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_clone() -> impl Clone {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n pub fn yes_debug() -> impl Debug {\n-    IntoIter::new([0i32; 33])\n+    IntoIterator::into_iter([0i32; 33])\n }\n \n "}, {"sha": "0eb4c149060db4c16f3d8413d2628e3735393dfd", "filename": "src/test/ui/rustdoc/doc-inline-extern-crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Ftest%2Fui%2Frustdoc%2Fdoc-inline-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Ftest%2Fui%2Frustdoc%2Fdoc-inline-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc-inline-extern-crate.rs?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -0,0 +1,9 @@\n+#[doc(inline)]\n+//~^ ERROR conflicting\n+#[doc(no_inline)]\n+pub extern crate core;\n+\n+// no warning\n+pub extern crate alloc;\n+\n+fn main() {}"}, {"sha": "41518295b1224bbb5959be5cca543b21989e594a", "filename": "src/test/ui/rustdoc/doc-inline-extern-crate.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Ftest%2Fui%2Frustdoc%2Fdoc-inline-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1/src%2Ftest%2Fui%2Frustdoc%2Fdoc-inline-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc-inline-extern-crate.stderr?ref=f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "patch": "@@ -0,0 +1,13 @@\n+error: conflicting doc inlining attributes\n+  --> $DIR/doc-inline-extern-crate.rs:1:7\n+   |\n+LL | #[doc(inline)]\n+   |       ^^^^^^ this attribute...\n+LL |\n+LL | #[doc(no_inline)]\n+   |       ^^^^^^^^^ ...conflicts with this attribute\n+   |\n+   = help: remove one of the conflicting attributes\n+\n+error: aborting due to previous error\n+"}]}