{"sha": "270b776ef9da03b85edc7ddff89a7c6ac188dc4a", "node_id": "C_kwDOAAsO6NoAKDI3MGI3NzZlZjlkYTAzYjg1ZWRjN2RkZmY4OWE3YzZhYzE4OGRjNGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-08T00:45:09Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-09T01:31:46Z"}, "message": "Adjust pretty printing of RPITITs", "tree": {"sha": "925a5b26b4626d1ef8e03ca0e465dcd74ee48bc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/925a5b26b4626d1ef8e03ca0e465dcd74ee48bc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/270b776ef9da03b85edc7ddff89a7c6ac188dc4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/270b776ef9da03b85edc7ddff89a7c6ac188dc4a", "html_url": "https://github.com/rust-lang/rust/commit/270b776ef9da03b85edc7ddff89a7c6ac188dc4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec170bef0d8c6ec91c35b89c38da9a0ed10e00fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec170bef0d8c6ec91c35b89c38da9a0ed10e00fd", "html_url": "https://github.com/rust-lang/rust/commit/ec170bef0d8c6ec91c35b89c38da9a0ed10e00fd"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "95a36dd8a56a588849971012d7cf912a39b3bc72", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=270b776ef9da03b85edc7ddff89a7c6ac188dc4a", "patch": "@@ -61,6 +61,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Node;\n@@ -1682,6 +1683,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 pos.col.to_usize() + 1,\n                             )\n                         }\n+                        (true, ty::Projection(proj))\n+                            if self.tcx.def_kind(proj.item_def_id)\n+                                == DefKind::ImplTraitPlaceholder =>\n+                        {\n+                            let sm = self.tcx.sess.source_map();\n+                            let pos = sm.lookup_char_pos(self.tcx.def_span(proj.item_def_id).lo());\n+                            format!(\n+                                \" (trait associated opaque type at <{}:{}:{}>)\",\n+                                sm.filename_for_diagnostics(&pos.file.name),\n+                                pos.line,\n+                                pos.col.to_usize() + 1,\n+                            )\n+                        }\n                         (true, _) => format!(\" ({})\", ty.sort_string(self.tcx)),\n                         (false, _) => \"\".to_string(),\n                     };"}, {"sha": "f134e2cd1bc65bccd6782cdfaa35b19b54626107", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=270b776ef9da03b85edc7ddff89a7c6ac188dc4a", "patch": "@@ -632,7 +632,13 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Foreign(def_id) => {\n                 p!(print_def_path(def_id, &[]));\n             }\n-            ty::Projection(ref data) => p!(print(data)),\n+            ty::Projection(ref data) => {\n+                if self.tcx().def_kind(data.item_def_id) == DefKind::ImplTraitPlaceholder {\n+                    return self.pretty_print_opaque_impl_type(data.item_def_id, data.substs);\n+                } else {\n+                    p!(print(data))\n+                }\n+            }\n             ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n             ty::Opaque(def_id, substs) => {\n                 // FIXME(eddyb) print this with `print_def_path`."}, {"sha": "e5c584e31e8158326f67a14d306d75805cfa9d55", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=270b776ef9da03b85edc7ddff89a7c6ac188dc4a", "patch": "@@ -48,8 +48,8 @@ LL |     async fn foo() {}\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected associated type `<Self as T>::foo::{opaque#0}`\n-                  found opaque type `impl Future<Output = ()>`\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:3:20>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n \n error[E0308]: mismatched types\n   --> $DIR/async-trait-fn.rs:5:25\n@@ -62,8 +62,8 @@ LL |     async fn bar(&self) {}\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected associated type `<Self as T>::bar::{opaque#0}<'_>`\n-                  found opaque type `impl Future<Output = ()>`\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:5:25>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n \n error[E0308]: mismatched types\n   --> $DIR/async-trait-fn.rs:7:20\n@@ -81,8 +81,8 @@ LL | |     }\n LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                             ------------------------------- the found opaque type\n    |\n-   = note: expected associated type `<Self as T>::baz::{opaque#0}`\n-                  found opaque type `impl Future<Output = ()>`\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/async-trait-fn.rs:7:20>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8c2902d9b00d137ca47e799f5f26f90fc760758e", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=270b776ef9da03b85edc7ddff89a7c6ac188dc4a", "patch": "@@ -103,8 +103,8 @@ LL |     async fn foo() {}\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected associated type `<Self as Bar>::foo::{opaque#0}`\n-                  found opaque type `impl Future<Output = ()>`\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/edition-deny-async-fns-2015.rs:18:20>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n \n error: aborting due to 11 previous errors\n "}, {"sha": "3814c568e72c1b555c30e67a61d57f6e8e57725c", "filename": "src/test/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/270b776ef9da03b85edc7ddff89a7c6ac188dc4a/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-93117.stderr?ref=270b776ef9da03b85edc7ddff89a7c6ac188dc4a", "patch": "@@ -85,8 +85,8 @@ LL | trait C{async fn new(val: T) {}\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected associated type `<Self as C>::new::{opaque#0}`\n-                  found opaque type `impl Future<Output = ()>`\n+   = note: expected associated type `impl Future<Output = ()>` (trait associated opaque type at <$DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30>)\n+                  found opaque type `impl Future<Output = ()>` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n \n warning: changes to closure capture in Rust 2021 will affect drop order\n   --> $DIR/drop-location-span-error-rust-2021-incompatible-closure-captures-93117.rs:13:30"}]}