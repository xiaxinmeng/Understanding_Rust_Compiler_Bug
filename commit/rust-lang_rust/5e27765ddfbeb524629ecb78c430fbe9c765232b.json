{"sha": "5e27765ddfbeb524629ecb78c430fbe9c765232b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjc3NjVkZGZiZWI1MjQ2MjllY2I3OGM0MzBmYmU5Yzc2NTIzMmI=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-26T00:59:08Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-26T02:45:51Z"}, "message": "Add tests", "tree": {"sha": "81ef49d3c8af66f0a682948e5c8239b27af55263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81ef49d3c8af66f0a682948e5c8239b27af55263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e27765ddfbeb524629ecb78c430fbe9c765232b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e27765ddfbeb524629ecb78c430fbe9c765232b", "html_url": "https://github.com/rust-lang/rust/commit/5e27765ddfbeb524629ecb78c430fbe9c765232b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e27765ddfbeb524629ecb78c430fbe9c765232b/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1975a6e710d6fbb583a415edc3efed1e8970296a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1975a6e710d6fbb583a415edc3efed1e8970296a", "html_url": "https://github.com/rust-lang/rust/commit/1975a6e710d6fbb583a415edc3efed1e8970296a"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "4acd059ab03dfeaab4b80dd7338e3c5330e9eced", "filename": "library/core/tests/const_ptr.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5e27765ddfbeb524629ecb78c430fbe9c765232b/library%2Fcore%2Ftests%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e27765ddfbeb524629ecb78c430fbe9c765232b/library%2Fcore%2Ftests%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fconst_ptr.rs?ref=5e27765ddfbeb524629ecb78c430fbe9c765232b", "patch": "@@ -0,0 +1,51 @@\n+// Aligned to two bytes\n+const DATA: [u16; 2] = [u16::from_ne_bytes([0x01, 0x23]), u16::from_ne_bytes([0x45, 0x67])];\n+\n+const fn unaligned_ptr() -> *const u16 {\n+    // Since DATA.as_ptr() is aligned to two bytes, adding 1 byte to that produces an unaligned *const u16\n+    unsafe { (DATA.as_ptr() as *const u8).add(1) as *const u16 }\n+}\n+\n+#[test]\n+fn read() {\n+    use core::ptr;\n+\n+    const FOO: i32 = unsafe { ptr::read(&42 as *const i32) };\n+    assert_eq!(FOO, 42);\n+\n+    const ALIGNED: i32 = unsafe { ptr::read_unaligned(&42 as *const i32) };\n+    assert_eq!(ALIGNED, 42);\n+\n+    const UNALIGNED_PTR: *const u16 = unaligned_ptr();\n+\n+    const UNALIGNED: u16 = unsafe { ptr::read_unaligned(UNALIGNED_PTR) };\n+    assert_eq!(UNALIGNED, u16::from_ne_bytes([0x23, 0x45]));\n+}\n+\n+#[test]\n+fn const_ptr_read() {\n+    const FOO: i32 = unsafe { (&42 as *const i32).read() };\n+    assert_eq!(FOO, 42);\n+\n+    const ALIGNED: i32 = unsafe { (&42 as *const i32).read_unaligned() };\n+    assert_eq!(ALIGNED, 42);\n+\n+    const UNALIGNED_PTR: *const u16 = unaligned_ptr();\n+\n+    const UNALIGNED: u16 = unsafe { UNALIGNED_PTR.read_unaligned() };\n+    assert_eq!(UNALIGNED, u16::from_ne_bytes([0x23, 0x45]));\n+}\n+\n+#[test]\n+fn mut_ptr_read() {\n+    const FOO: i32 = unsafe { (&42 as *const i32 as *mut i32).read() };\n+    assert_eq!(FOO, 42);\n+\n+    const ALIGNED: i32 = unsafe { (&42 as *const i32 as *mut i32).read_unaligned() };\n+    assert_eq!(ALIGNED, 42);\n+\n+    const UNALIGNED_PTR: *mut u16 = unaligned_ptr() as *mut u16;\n+\n+    const UNALIGNED: u16 = unsafe { UNALIGNED_PTR.read_unaligned() };\n+    assert_eq!(UNALIGNED, u16::from_ne_bytes([0x23, 0x45]));\n+}"}, {"sha": "9e8ec7060216bdcd447631643ec1d0ad138ae085", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e27765ddfbeb524629ecb78c430fbe9c765232b/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e27765ddfbeb524629ecb78c430fbe9c765232b/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=5e27765ddfbeb524629ecb78c430fbe9c765232b", "patch": "@@ -13,6 +13,8 @@\n #![feature(const_assume)]\n #![feature(const_cell_into_inner)]\n #![feature(const_maybe_uninit_assume_init)]\n+#![feature(const_ptr_read)]\n+#![feature(const_ptr_offset)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n@@ -34,6 +36,7 @@\n #![feature(raw)]\n #![feature(sort_internals)]\n #![feature(slice_partition_at_index)]\n+#![feature(maybe_uninit_extra)]\n #![feature(maybe_uninit_write_slice)]\n #![feature(min_specialization)]\n #![feature(step_trait)]\n@@ -82,6 +85,10 @@ mod cell;\n mod char;\n mod clone;\n mod cmp;\n+\n+#[cfg(not(bootstrap))]\n+mod const_ptr;\n+\n mod fmt;\n mod hash;\n mod intrinsics;"}, {"sha": "a09a2e91804b1b469eba1aaea3566000d0db6331", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e27765ddfbeb524629ecb78c430fbe9c765232b/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e27765ddfbeb524629ecb78c430fbe9c765232b/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=5e27765ddfbeb524629ecb78c430fbe9c765232b", "patch": "@@ -267,3 +267,10 @@ fn uninit_write_slice_cloned_no_drop() {\n \n     forget(src);\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+fn uninit_const_assume_init_read() {\n+    const FOO: u32 = unsafe { MaybeUninit::new(42).assume_init_read() };\n+    assert_eq!(FOO, 42);\n+}"}, {"sha": "183aa9e51228c985651854a1134a7a6f098b8874", "filename": "src/test/ui/const-ptr/out_of_bounds_read.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e27765ddfbeb524629ecb78c430fbe9c765232b/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e27765ddfbeb524629ecb78c430fbe9c765232b/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.rs?ref=5e27765ddfbeb524629ecb78c430fbe9c765232b", "patch": "@@ -0,0 +1,16 @@\n+// error-pattern: any use of this value will cause an error\n+\n+#![feature(const_ptr_read)]\n+#![feature(const_ptr_offset)]\n+\n+fn main() {\n+    use std::ptr;\n+\n+    const DATA: [u32; 1] = [42];\n+\n+    const PAST_END_PTR: *const u32 = unsafe { DATA.as_ptr().add(1) };\n+\n+    const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n+    const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n+    const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n+}"}, {"sha": "ca65a079947e0f1c8552bed928493b0452c32688", "filename": "src/test/ui/const-ptr/out_of_bounds_read.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5e27765ddfbeb524629ecb78c430fbe9c765232b/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e27765ddfbeb524629ecb78c430fbe9c765232b/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fout_of_bounds_read.stderr?ref=5e27765ddfbeb524629ecb78c430fbe9c765232b", "patch": "@@ -0,0 +1,54 @@\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n+   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |              inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |              inside `_READ` at $DIR/out_of_bounds_read.rs:13:33\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:13:5\n+   |\n+LL |     const _READ: u32 = unsafe { ptr::read(PAST_END_PTR) };\n+   |     ------------------------------------------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n+   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |              inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |              inside `ptr::const_ptr::<impl *const u32>::read` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+   |              inside `_CONST_READ` at $DIR/out_of_bounds_read.rs:14:39\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:14:5\n+   |\n+LL |     const _CONST_READ: u32 = unsafe { PAST_END_PTR.read() };\n+   |     --------------------------------------------------------\n+\n+error: any use of this value will cause an error\n+  --> $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |\n+LL |     unsafe { copy_nonoverlapping(src, dst, count) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              memory access failed: pointer must be in-bounds at offset 8, but is outside bounds of alloc6 which has size 4\n+   |              inside `copy_nonoverlapping::<u32>` at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+   |              inside `std::ptr::read::<u32>` at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |              inside `ptr::mut_ptr::<impl *mut u32>::read` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+   |              inside `_MUT_READ` at $DIR/out_of_bounds_read.rs:15:37\n+   | \n+  ::: $DIR/out_of_bounds_read.rs:15:5\n+   |\n+LL |     const _MUT_READ: u32 = unsafe { (PAST_END_PTR as *mut u32).read() };\n+   |     --------------------------------------------------------------------\n+\n+error: aborting due to 3 previous errors\n+"}]}