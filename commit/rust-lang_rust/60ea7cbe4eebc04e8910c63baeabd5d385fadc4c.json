{"sha": "60ea7cbe4eebc04e8910c63baeabd5d385fadc4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZWE3Y2JlNGVlYmMwNGU4OTEwYzYzYmFlYWJkNWQzODVmYWRjNGM=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2019-02-08T10:21:03Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2019-03-20T19:03:20Z"}, "message": "Gather region constraints not coming from unification", "tree": {"sha": "ab7c05c17c4e7c92224b35b26fe58d2e3a73b229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab7c05c17c4e7c92224b35b26fe58d2e3a73b229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c", "html_url": "https://github.com/rust-lang/rust/commit/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3b33a7f3be706d35ee62847342c22406401430a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b33a7f3be706d35ee62847342c22406401430a", "html_url": "https://github.com/rust-lang/rust/commit/c3b33a7f3be706d35ee62847342c22406401430a"}], "stats": {"total": 91, "additions": 34, "deletions": 57}, "files": [{"sha": "fb7bba32d395e9a51e3a717c00668fb7b9e148c1", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=60ea7cbe4eebc04e8910c63baeabd5d385fadc4c", "patch": "@@ -326,15 +326,12 @@ fn wf_clause_for_ref<'tcx>(\n         mutbl,\n     });\n \n-    let _outlives: DomainGoal<'_> = ty::OutlivesPredicate(ty, region).lower();\n+    let outlives: DomainGoal<'_> = ty::OutlivesPredicate(ty, region).lower();\n     let wf_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Ty(ref_ty)),\n-        hypotheses: ty::List::empty(),\n-\n-        // FIXME: restore this later once we get better at handling regions\n-        // hypotheses: tcx.mk_goals(\n-        //     iter::once(tcx.mk_goal(outlives.into_goal()))\n-        // ),\n+        hypotheses: tcx.mk_goals(\n+            iter::once(tcx.mk_goal(outlives.into_goal()))\n+        ),\n         category: ProgramClauseCategory::WellFormed,\n     };\n     let wf_clause = Clause::ForAll(ty::Binder::bind(wf_clause));\n@@ -432,22 +429,14 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                 clauses\n             }\n \n-            DomainGoal::Holds(RegionOutlives(..)) => {\n-                // These come from:\n-                // * implied bounds from trait definitions (rule `Implied-Bound-From-Trait`)\n-                // * implied bounds from type definitions (rule `Implied-Bound-From-Type`)\n-\n-                // All of these rules are computed in the environment.\n-                vec![]\n-            }\n-\n-            DomainGoal::Holds(TypeOutlives(..)) => {\n-                // These come from:\n-                // * implied bounds from trait definitions (rule `Implied-Bound-From-Trait`)\n-                // * implied bounds from type definitions (rule `Implied-Bound-From-Type`)\n-\n-                // All of these rules are computed in the environment.\n-                vec![]\n+            // For outlive requirements, just assume they hold. `ResolventOps::resolvent_clause`\n+            // will register them as actual region constraints later.\n+            DomainGoal::Holds(RegionOutlives(..)) | DomainGoal::Holds(TypeOutlives(..)) => {\n+                vec![Clause::Implies(ProgramClause {\n+                    goal,\n+                    hypotheses: ty::List::empty(),\n+                    category: ProgramClauseCategory::Other,\n+                })]\n             }\n \n             DomainGoal::WellFormed(WellFormed::Trait(trait_predicate)) => {\n@@ -485,7 +474,7 @@ impl ChalkInferenceContext<'cx, 'gcx, 'tcx> {\n                     ty::Error |\n                     ty::Never => {\n                         let wf_clause = ProgramClause {\n-                            goal: DomainGoal::WellFormed(WellFormed::Ty(ty)),\n+                            goal,\n                             hypotheses: ty::List::empty(),\n                             category: ProgramClauseCategory::WellFormed,\n                         };"}, {"sha": "41f983e6acac81c3129da0199b230129dcb3e7b1", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=60ea7cbe4eebc04e8910c63baeabd5d385fadc4c", "patch": "@@ -8,6 +8,7 @@ use rustc::infer::{InferCtxt, LateBoundRegionConversionTime};\n use rustc::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc::traits::{\n     DomainGoal,\n+    WhereClause,\n     Goal,\n     GoalKind,\n     Clause,\n@@ -75,6 +76,23 @@ impl context::ResolventOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n                 })\n             );\n \n+            // If we have a goal of the form `T: 'a` or `'a: 'b`, then just\n+            // assume it is true (no subgoals) and register it as a constraint\n+            // instead.\n+            match goal {\n+                DomainGoal::Holds(WhereClause::RegionOutlives(pred)) => {\n+                    assert_eq!(ex_clause.subgoals.len(), 0);\n+                    ex_clause.constraints.push(ty::OutlivesPredicate(pred.0.into(), pred.1));\n+                }\n+\n+                DomainGoal::Holds(WhereClause::TypeOutlives(pred)) => {\n+                    assert_eq!(ex_clause.subgoals.len(), 0);\n+                    ex_clause.constraints.push(ty::OutlivesPredicate(pred.0.into(), pred.1));\n+                }\n+\n+                _ => (),\n+            };\n+\n             let canonical_ex_clause = self.canonicalize_ex_clause(&ex_clause);\n             Ok(canonical_ex_clause)\n         });\n@@ -112,10 +130,8 @@ impl context::ResolventOps<ChalkArenas<'gcx>, ChalkArenas<'tcx>>\n         substitutor.relate(&answer_table_goal.value, &selected_goal)\n             .map_err(|_| NoSolution)?;\n \n-        let ex_clause = substitutor.ex_clause;\n-\n-        // FIXME: restore this later once we get better at handling regions\n-        // ex_clause.constraints.extend(answer_subst.constraints);\n+        let mut ex_clause = substitutor.ex_clause;\n+        ex_clause.constraints.extend(answer_subst.constraints);\n \n         debug!(\"apply_answer_subst: ex_clause = {:?}\", ex_clause);\n         Ok(ex_clause)"}, {"sha": "3570cb102460002a3596fa49179a14266fd4082b", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=60ea7cbe4eebc04e8910c63baeabd5d385fadc4c", "patch": "@@ -10,9 +10,6 @@ use rustc::traits::{\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::hir::def_id::DefId;\n use rustc_data_structures::fx::FxHashSet;\n-use super::Lower;\n-use crate::generic_types;\n-use std::iter;\n \n struct ClauseVisitor<'set, 'a, 'tcx: 'a + 'set> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -38,30 +35,6 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n                 );\n             }\n \n-            // forall<'a, T> { `Outlives(T: 'a) :- FromEnv(&'a T)` }\n-            ty::Ref(_, _, mutbl) => {\n-                let region = self.tcx.mk_region(\n-                    ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n-                );\n-                let ty = generic_types::bound(self.tcx, 1);\n-                let ref_ty = self.tcx.mk_ref(region, ty::TypeAndMut {\n-                    ty,\n-                    mutbl,\n-                });\n-\n-                let from_env = DomainGoal::FromEnv(FromEnv::Ty(ref_ty));\n-\n-                let clause = ProgramClause {\n-                    goal: ty::OutlivesPredicate(ty, region).lower(),\n-                    hypotheses: self.tcx.mk_goals(\n-                        iter::once(self.tcx.mk_goal(from_env.into_goal()))\n-                    ),\n-                    category: ProgramClauseCategory::ImpliedBound,\n-                };\n-                let clause = Clause::ForAll(ty::Binder::bind(clause));\n-                self.round.insert(clause);\n-            }\n-\n             ty::Dynamic(..) => {\n                 // FIXME: trait object rules are not yet implemented\n             }\n@@ -99,6 +72,7 @@ impl ClauseVisitor<'set, 'a, 'tcx> {\n             ty::RawPtr(..) |\n             ty::FnPtr(..) |\n             ty::Tuple(..) |\n+            ty::Ref(..) |\n             ty::Never |\n             ty::Infer(..) |\n             ty::Placeholder(..) |"}, {"sha": "a1fc83bfea8a3a0b5a6c7d4a034e92b6cb451eba", "filename": "src/test/ui/chalkify/lower_env3.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/60ea7cbe4eebc04e8910c63baeabd5d385fadc4c/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr?ref=60ea7cbe4eebc04e8910c63baeabd5d385fadc4c", "patch": "@@ -4,7 +4,6 @@ error: program clause dump\n LL |     #[rustc_dump_env_program_clauses]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: forall<'^0, ^1> { TypeOutlives(^1: '^0) :- FromEnv(&^1). }\n    = note: forall<Self> { Implemented(Self: Foo) :- FromEnv(Self: Foo). }\n \n error: program clause dump\n@@ -13,7 +12,6 @@ error: program clause dump\n LL |     #[rustc_dump_env_program_clauses]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: forall<'^0, ^1> { TypeOutlives(^1: '^0) :- FromEnv(&^1). }\n    = note: forall<Self> { FromEnv(Self: std::marker::Sized) :- FromEnv(Self: std::clone::Clone). }\n    = note: forall<Self> { Implemented(Self: std::clone::Clone) :- FromEnv(Self: std::clone::Clone). }\n    = note: forall<Self> { Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized). }"}]}