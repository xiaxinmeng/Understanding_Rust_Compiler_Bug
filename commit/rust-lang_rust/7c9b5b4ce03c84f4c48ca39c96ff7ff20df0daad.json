{"sha": "7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOWI1YjRjZTAzYzg0ZjRjNDhjYTM5Yzk2ZmY3ZmYyMGRmMGRhYWQ=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-13T15:31:38Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-20T16:22:24Z"}, "message": "update `const_eval_resolve`", "tree": {"sha": "2c83d63981b6eeb7d592badb577c18d8a98205ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c83d63981b6eeb7d592badb577c18d8a98205ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "html_url": "https://github.com/rust-lang/rust/commit/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43ebac119b853de626fcc9afb49c5b0544731141", "url": "https://api.github.com/repos/rust-lang/rust/commits/43ebac119b853de626fcc9afb49c5b0544731141", "html_url": "https://github.com/rust-lang/rust/commit/43ebac119b853de626fcc9afb49c5b0544731141"}], "stats": {"total": 100, "additions": 45, "deletions": 55}, "files": [{"sha": "f4cbfb6967ff35bf92e5954adfcac45a0c0f8fbe", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -45,9 +45,9 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n         };\n         match const_.val {\n             ConstKind::Value(_) => {}\n-            ConstKind::Unevaluated(def, ref substs, promoted) => {\n+            ConstKind::Unevaluated(unevaluated) => {\n                 if let Err(err) =\n-                    fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None)\n+                    fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None)\n                 {\n                     all_constants_ok = false;\n                     match err {\n@@ -122,14 +122,14 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(def, ref substs, promoted) if fx.tcx.is_static(def.did) => {\n+        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) if fx.tcx.is_static(def.did) => {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n             return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n-        ConstKind::Unevaluated(def, ref substs, promoted) => {\n-            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None) {\n+        ConstKind::Unevaluated(unevaluated) => {\n+            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n                 Ok(const_val) => const_val,\n                 Err(_) => {\n                     span_bug!(constant.span, \"erroneous constant not captured by required_consts\");"}, {"sha": "fa8a53e60b169d96c4d25288556fbf29b15844ca", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -30,10 +30,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::ConstantKind::Val(val, _) => return Ok(val),\n         };\n         match ct.val {\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => self\n+            ty::ConstKind::Unevaluated(ct) => self\n                 .cx\n                 .tcx()\n-                .const_eval_resolve(ty::ParamEnv::reveal_all(), def, substs, promoted, None)\n+                .const_eval_resolve(ty::ParamEnv::reveal_all(), ct, None)\n                 .map_err(|err| {\n                     self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n                     err"}, {"sha": "7b18f4d0ff6a976d6df51691592f775aaac1389d", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -18,7 +18,6 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n-use rustc_middle::mir;\n use rustc_middle::mir::interpret::EvalToConstValueResult;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n@@ -1499,9 +1498,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def: ty::WithOptConstParam<DefId>,\n-        substs: SubstsRef<'tcx>,\n-        promoted: Option<mir::Promoted>,\n+        ty::Unevaluated { def, substs, promoted }: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n         let mut original_values = OriginalQueryValues::default();\n@@ -1510,7 +1507,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let (param_env, substs) = canonical.value;\n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values.\n-        self.tcx.const_eval_resolve(param_env, def, substs, promoted, span)\n+        self.tcx.const_eval_resolve(param_env, ty::Unevaluated { def, substs, promoted }, span)\n     }\n \n     /// If `typ` is a type variable of some kind, resolve it one level"}, {"sha": "fa7c0670e8ce6a5c90c2ff9156cf3b4c513195a1", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -1,7 +1,7 @@\n use super::{ErrorHandled, EvalToConstValueResult, GlobalId};\n \n use crate::mir;\n-use crate::ty::subst::{InternalSubsts, SubstsRef};\n+use crate::ty::subst::InternalSubsts;\n use crate::ty::{self, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n@@ -35,14 +35,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_resolve(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def: ty::WithOptConstParam<DefId>,\n-        substs: SubstsRef<'tcx>,\n-        promoted: Option<mir::Promoted>,\n+        ct: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        match ty::Instance::resolve_opt_const_arg(self, param_env, def, substs) {\n+        match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs) {\n             Ok(Some(instance)) => {\n-                let cid = GlobalId { instance, promoted };\n+                let cid = GlobalId { instance, promoted: ct.promoted };\n                 self.const_eval_global_id(param_env, cid, span)\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),"}, {"sha": "875d8d00a93d32b6686f786be497cf6b6040540b", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -140,7 +140,8 @@ impl<'tcx> ConstKind<'tcx> {\n             let (param_env, substs) = param_env_and_substs.into_parts();\n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            match tcx.const_eval_resolve(param_env, def, substs, promoted, None) {\n+            match tcx.const_eval_resolve(param_env, ty::Unevaluated { def, substs, promoted }, None)\n+            {\n                 // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n                 // and we use the original type, so nothing from `substs`\n                 // (which may be identity substs, see above),"}, {"sha": "e48640e1bb965720eb7848c422220f2a890cc350", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -646,8 +646,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n         match substituted_constant.val {\n             ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n-                match self.tcx.const_eval_resolve(param_env, def, substs, promoted, None) {\n+            ty::ConstKind::Unevaluated(unevaluated) => {\n+                match self.tcx.const_eval_resolve(param_env, unevaluated, None) {\n                     Ok(val) => collect_const_value(self.tcx, val, self.output),\n                     Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!("}, {"sha": "0d71fc57e394b00c0188c6ac582ee9a65b6e9eb6", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -803,17 +803,10 @@ impl AutoTraitFinder<'tcx> {\n                 }\n                 ty::PredicateKind::ConstEquate(c1, c2) => {\n                     let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                            def,\n-                            substs,\n-                            promoted,\n-                        }) = c.val\n-                        {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n                             match select.infcx().const_eval_resolve(\n                                 obligation.param_env,\n-                                def,\n-                                substs,\n-                                promoted,\n+                                unevaluated,\n                                 Some(obligation.cause.span),\n                             ) {\n                                 Ok(val) => Ok(ty::Const::from_value(select.tcx(), val, c.ty)),"}, {"sha": "f63a72b7c109a0ac738d9d016ae29c85f9e134e3", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -163,7 +163,11 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     // and hopefully soon change this to an error.\n     //\n     // See #74595 for more details about this.\n-    let concrete = infcx.const_eval_resolve(param_env, def, substs, None, Some(span));\n+    let concrete = infcx.const_eval_resolve(\n+        param_env,\n+        ty::Unevaluated { def, substs, promoted: None },\n+        Some(span),\n+    );\n \n     if concrete.is_ok() && substs.has_param_types_or_consts() {\n         match infcx.tcx.def_kind(def.did) {"}, {"sha": "a383658684d593edb45138af50836a599b22fe31", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -532,23 +532,17 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     let stalled_on = &mut pending_obligation.stalled_on;\n \n                     let mut evaluate = |c: &'tcx Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                            def,\n-                            substs,\n-                            promoted,\n-                        }) = c.val\n-                        {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n                             match self.selcx.infcx().const_eval_resolve(\n                                 obligation.param_env,\n-                                def,\n-                                substs,\n-                                promoted,\n+                                unevaluated,\n                                 Some(obligation.cause.span),\n                             ) {\n                                 Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty)),\n                                 Err(ErrorHandled::TooGeneric) => {\n                                     stalled_on.extend(\n-                                        substs\n+                                        unevaluated\n+                                            .substs\n                                             .iter()\n                                             .filter_map(TyOrConstInferVar::maybe_from_generic_arg),\n                                     );"}, {"sha": "5b38617deff03668dc3e0f456639fbda84b78456", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -556,18 +556,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     debug!(?c1, ?c2, \"evaluate_predicate_recursively: equating consts\");\n \n                     let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                        if let ty::ConstKind::Unevaluated(ty::Unevaluated {\n-                            def,\n-                            substs,\n-                            promoted,\n-                        }) = c.val\n-                        {\n+                        if let ty::ConstKind::Unevaluated(unevaluated) = c.val {\n                             self.infcx\n                                 .const_eval_resolve(\n                                     obligation.param_env,\n-                                    def,\n-                                    substs,\n-                                    promoted,\n+                                    unevaluated,\n                                     Some(obligation.cause.span),\n                                 )\n                                 .map(|val| ty::Const::from_value(self.tcx(), val, c.ty))"}, {"sha": "6f283d501a4f2d71e28e679a6d004bcce82947a1", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -296,7 +296,7 @@ crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n \n crate fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n-        ty::ConstKind::Unevaluated(def, _, promoted) => {\n+        ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) => {\n             let mut s = if let Some(def) = def.as_local() {\n                 let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def.did);\n                 print_const_expr(cx.tcx, cx.tcx.hir().body_owned_by(hir_id))"}, {"sha": "3e1db233696fe50042b6c80d040cb3059829a190", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -181,7 +181,15 @@ fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: D\n \n     let result = cx\n         .tcx\n-        .const_eval_resolve(cx.param_env, ty::WithOptConstParam::unknown(def_id), substs, None, None);\n+        .const_eval_resolve(\n+            cx.param_env,\n+            ty::Unevaluated {\n+                def: ty::WithOptConstParam::unknown(def_id),\n+                substs,\n+                promoted: None\n+            },\n+            None\n+        );\n     is_value_unfrozen_raw(cx, result, ty)\n }\n "}, {"sha": "ebe896b7ae86771c13ecabf27d3434a7d53ec6e0", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=7c9b5b4ce03c84f4c48ca39c96ff7ff20df0daad", "patch": "@@ -341,9 +341,11 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                     .tcx\n                     .const_eval_resolve(\n                         self.param_env,\n-                        ty::WithOptConstParam::unknown(def_id),\n-                        substs,\n-                        None,\n+                        ty::Unevaluated {\n+                            def: ty::WithOptConstParam::unknown(def_id),\n+                            substs,\n+                            promoted: None,\n+                        },\n                         None,\n                     )\n                     .ok()"}]}