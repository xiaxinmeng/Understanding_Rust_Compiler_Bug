{"sha": "d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YTJiN2M0NzBjOTFiYWRjOGFjMmYxZTIwYjQwNDk3MDg2YzZhNjY=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2019-02-08T14:37:26Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2019-03-20T19:09:26Z"}, "message": "Fix a bug in implied bounds", "tree": {"sha": "0859ea04ddc8730cbeb0164386111b0845b499b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0859ea04ddc8730cbeb0164386111b0845b499b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "html_url": "https://github.com/rust-lang/rust/commit/d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4effdd2431020ce86d4c22765afa05d19c3215cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4effdd2431020ce86d4c22765afa05d19c3215cc", "html_url": "https://github.com/rust-lang/rust/commit/4effdd2431020ce86d4c22765afa05d19c3215cc"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "c3cbdb0376251474514337777400fa7a158fa769", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "patch": "@@ -337,7 +337,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n     //\n     // ```\n     // forall<P1..Pn> {\n-    //   WellFormed(Ty<...>) :- WC1, ..., WCm`\n+    //   WellFormed(Ty<...>) :- WellFormed(WC1), ..., WellFormed(WCm)`\n     // }\n     // ```\n \n@@ -354,13 +354,14 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n         .map(|(wc, _)| wc.lower())\n         .collect::<Vec<_>>();\n \n-    // `WellFormed(Ty<...>) :- WC1, ..., WCm`\n+    // `WellFormed(Ty<...>) :- WellFormed(WC1), ..., WellFormed(WCm)`\n     let well_formed_clause = ProgramClause {\n         goal: DomainGoal::WellFormed(WellFormed::Ty(ty)),\n         hypotheses: tcx.mk_goals(\n             where_clauses\n                 .iter()\n                 .map(|wc| wc.subst(tcx, bound_vars))\n+                .map(|wc| wc.map_bound(|bound| bound.into_well_formed_goal()))\n                 .map(|wc| tcx.mk_goal(GoalKind::from_poly_domain_goal(wc, tcx))),\n         ),\n         category: ProgramClauseCategory::WellFormed,\n@@ -457,13 +458,13 @@ pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n     // ```\n     // forall<Self, P1..Pn, Pn+1..Pm> {\n     //     WellFormed((Trait::AssocType)<Self, P1..Pn, Pn+1..Pm>)\n-    //         :- Implemented(Self: Trait<P1..Pn>)\n+    //         :- WellFormed(Self: Trait<P1..Pn>)\n     // }\n     // ```\n \n     let trait_predicate = ty::TraitPredicate { trait_ref };\n     let hypothesis = tcx.mk_goal(\n-        DomainGoal::Holds(WhereClause::Implemented(trait_predicate)).into_goal()\n+        DomainGoal::WellFormed(WellFormed::Trait(trait_predicate)).into_goal()\n     );\n \n     let wf_clause = ProgramClause {"}, {"sha": "861f86e61658aed0fb02b4ee4bebb55b337cc0be", "filename": "src/test/compile-fail/chalkify/recursive_where_clause_on_type.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Ftest%2Fcompile-fail%2Fchalkify%2Frecursive_where_clause_on_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Ftest%2Fcompile-fail%2Fchalkify%2Frecursive_where_clause_on_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fchalkify%2Frecursive_where_clause_on_type.rs?ref=d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "patch": "@@ -0,0 +1,28 @@\n+// compile-flags: -Z chalk\n+\n+#![feature(trivial_bounds)]\n+\n+trait Bar {\n+    fn foo();\n+}\n+trait Foo: Bar { }\n+\n+struct S where S: Foo;\n+\n+impl Foo for S {\n+}\n+\n+fn bar<T: Bar>() {\n+    T::foo();\n+}\n+\n+fn foo<T: Foo>() {\n+    bar::<T>()\n+}\n+\n+fn main() {\n+    // For some reason, the error is duplicated...\n+\n+    foo::<S>() //~ ERROR the type `S` is not well-formed (chalk)\n+    //~^ ERROR the type `S` is not well-formed (chalk)\n+}"}, {"sha": "613a568a8549c95a7711747f48791d80750bb2db", "filename": "src/test/ui/chalkify/lower_env2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr?ref=d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "patch": "@@ -6,7 +6,7 @@ LL | #[rustc_dump_program_clauses]\n    |\n    = note: forall<'a, T> { FromEnv(T: Foo) :- FromEnv(S<'a, T>). }\n    = note: forall<'a, T> { TypeOutlives(T: 'a) :- FromEnv(S<'a, T>). }\n-   = note: forall<'a, T> { WellFormed(S<'a, T>) :- Implemented(T: Foo), TypeOutlives(T: 'a). }\n+   = note: forall<'a, T> { WellFormed(S<'a, T>) :- WellFormed(T: Foo), TypeOutlives(T: 'a). }\n \n error: program clause dump\n   --> $DIR/lower_env2.rs:11:1"}, {"sha": "0331c2fca16db3bb5987a3668978734d513bcd05", "filename": "src/test/ui/chalkify/lower_struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr?ref=d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "patch": "@@ -7,7 +7,7 @@ LL | #[rustc_dump_program_clauses]\n    = note: forall<'a, T> { FromEnv(T: std::marker::Sized) :- FromEnv(Foo<'a, T>). }\n    = note: forall<'a, T> { FromEnv(std::boxed::Box<T>: std::clone::Clone) :- FromEnv(Foo<'a, T>). }\n    = note: forall<'a, T> { TypeOutlives(T: 'a) :- FromEnv(Foo<'a, T>). }\n-   = note: forall<'a, T> { WellFormed(Foo<'a, T>) :- Implemented(T: std::marker::Sized), Implemented(std::boxed::Box<T>: std::clone::Clone), TypeOutlives(T: 'a). }\n+   = note: forall<'a, T> { WellFormed(Foo<'a, T>) :- WellFormed(T: std::marker::Sized), WellFormed(std::boxed::Box<T>: std::clone::Clone), TypeOutlives(T: 'a). }\n \n error: aborting due to previous error\n "}, {"sha": "ed3bded398ae3955f9876f0ef1e967903e2cbfbe", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6a2b7c470c91badc8ac2f1e20b40497086c6a66/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=d6a2b7c470c91badc8ac2f1e20b40497086c6a66", "patch": "@@ -18,7 +18,7 @@ LL |     #[rustc_dump_program_clauses]\n    = note: forall<Self, S, T, ^3> { ProjectionEq(<Self as Foo<S, T>>::Assoc == ^3) :- Normalize(<Self as Foo<S, T>>::Assoc -> ^3). }\n    = note: forall<Self, S, T> { FromEnv(Self: Foo<S, T>) :- FromEnv(Unnormalized(<Self as Foo<S, T>>::Assoc)). }\n    = note: forall<Self, S, T> { ProjectionEq(<Self as Foo<S, T>>::Assoc == Unnormalized(<Self as Foo<S, T>>::Assoc)). }\n-   = note: forall<Self, S, T> { WellFormed(Unnormalized(<Self as Foo<S, T>>::Assoc)) :- Implemented(Self: Foo<S, T>). }\n+   = note: forall<Self, S, T> { WellFormed(Unnormalized(<Self as Foo<S, T>>::Assoc)) :- WellFormed(Self: Foo<S, T>). }\n \n error: aborting due to 2 previous errors\n "}]}