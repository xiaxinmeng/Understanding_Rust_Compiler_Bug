{"sha": "14930fbffe95971e9258cb2eb45a1642eb735bbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OTMwZmJmZmU5NTk3MWU5MjU4Y2IyZWI0NWExNjQyZWI3MzViYmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-08T14:02:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-08T14:02:35Z"}, "message": "Add and lex LIFETIME tokens\n\ncc #4846", "tree": {"sha": "605f9182243b7979f5d334a51b2733d08e0d14d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/605f9182243b7979f5d334a51b2733d08e0d14d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14930fbffe95971e9258cb2eb45a1642eb735bbe", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14930fbffe95971e9258cb2eb45a1642eb735bbe", "html_url": "https://github.com/rust-lang/rust/commit/14930fbffe95971e9258cb2eb45a1642eb735bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14930fbffe95971e9258cb2eb45a1642eb735bbe/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1fb62c343639f9ac66cb0017b8c1813d5e06a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1fb62c343639f9ac66cb0017b8c1813d5e06a7", "html_url": "https://github.com/rust-lang/rust/commit/bc1fb62c343639f9ac66cb0017b8c1813d5e06a7"}], "stats": {"total": 112, "additions": 90, "deletions": 22}, "files": [{"sha": "b109333c3b5904760da7138ab064b3766781da01", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14930fbffe95971e9258cb2eb45a1642eb735bbe/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14930fbffe95971e9258cb2eb45a1642eb735bbe/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=14930fbffe95971e9258cb2eb45a1642eb735bbe", "patch": "@@ -29,6 +29,7 @@ macro_rules! interner_key (\n         (-3 as uint, 0u)))\n )\n \n+#[deriving_eq]\n pub struct ident { repr: uint }\n \n pub impl<S: Encoder> ident: Encodable<S> {\n@@ -57,11 +58,6 @@ pub impl<D: Decoder> ident: Decodable<D> {\n     }\n }\n \n-pub impl ident: cmp::Eq {\n-    pure fn eq(&self, other: &ident) -> bool { (*self).repr == other.repr }\n-    pure fn ne(&self, other: &ident) -> bool { !(*self).eq(other) }\n-}\n-\n pub impl ident: to_bytes::IterBytes {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         self.repr.iter_bytes(lsb0, f)"}, {"sha": "e8afd0b96a2a574f3e2753a9b9585b9a30fd90e3", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 81, "deletions": 16, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/14930fbffe95971e9258cb2eb45a1642eb735bbe/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14930fbffe95971e9258cb2eb45a1642eb735bbe/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=14930fbffe95971e9258cb2eb45a1642eb735bbe", "patch": "@@ -501,18 +501,26 @@ fn scan_numeric_escape(rdr: @mut StringReader, n_hex_digits: uint) -> char {\n     return accum_int as char;\n }\n \n+fn ident_start(c: char) -> bool {\n+    (c >= 'a' && c <= 'z')\n+        || (c >= 'A' && c <= 'Z')\n+        || c == '_'\n+        || (c > 'z' && char::is_XID_start(c))\n+}\n+\n+fn ident_continue(c: char) -> bool {\n+    (c >= 'a' && c <= 'z')\n+        || (c >= 'A' && c <= 'Z')\n+        || (c >= '0' && c <= '9')\n+        || c == '_'\n+        || (c > 'z' && char::is_XID_continue(c))\n+}\n+\n fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n     let mut accum_str = ~\"\";\n     let mut c = rdr.curr;\n-    if (c >= 'a' && c <= 'z')\n-        || (c >= 'A' && c <= 'Z')\n-        || c == '_'\n-        || (c > 'z' && char::is_XID_start(c)) {\n-        while (c >= 'a' && c <= 'z')\n-            || (c >= 'A' && c <= 'Z')\n-            || (c >= '0' && c <= '9')\n-            || c == '_'\n-            || (c > 'z' && char::is_XID_continue(c)) {\n+    if ident_start(c) {\n+        while ident_continue(c) {\n             str::push_char(&mut accum_str, c);\n             bump(rdr);\n             c = rdr.curr;\n@@ -617,10 +625,26 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n         }\n       }\n       '\\'' => {\n+        // Either a character constant 'a' OR a lifetime name 'abc\n         bump(rdr);\n         let mut c2 = rdr.curr;\n         bump(rdr);\n+\n+        // If the character is an ident start not followed by another single\n+        // quote, then this is a lifetime name:\n+        if ident_start(c2) && rdr.curr != '\\'' {\n+            let mut lifetime_name = ~\"\";\n+            lifetime_name.push_char(c2);\n+            while ident_continue(rdr.curr) {\n+                lifetime_name.push_char(rdr.curr);\n+                bump(rdr);\n+            }\n+            return token::LIFETIME(rdr.interner.intern(@lifetime_name));\n+        }\n+\n+        // Otherwise it is a character constant:\n         if c2 == '\\\\' {\n+            // '\\X' for some X must be a character constant:\n             let escaped = rdr.curr;\n             bump(rdr);\n             match escaped {\n@@ -730,17 +754,29 @@ pub mod test {\n     use util::interner;\n     use diagnostic;\n     use util::testing::{check_equal, check_equal_ptr};\n-    #[tetst] fn t1 () {\n-        let teststr =\n-            @~\"/* my source file */\n-fn main() { io::println(~\\\"zebra\\\"); }\\n\";\n+\n+    struct Env {\n+        interner: @token::ident_interner,\n+        string_reader: @mut StringReader\n+    }\n+\n+    fn setup(teststr: ~str) -> Env {\n         let cm = CodeMap::new();\n-        let fm = cm.new_filemap(~\"zebra.rs\",teststr);\n+        let fm = cm.new_filemap(~\"zebra.rs\", @teststr);\n         let ident_interner = token::mk_ident_interner(); // interner::mk();\n-        let id = ident_interner.intern(@~\"fn\");\n         let span_handler =\n             diagnostic::mk_span_handler(diagnostic::mk_handler(None),@cm);\n-        let string_reader = new_string_reader(span_handler,fm,ident_interner);\n+        Env {\n+            interner: ident_interner,\n+            string_reader: new_string_reader(span_handler,fm,ident_interner)\n+        }\n+    }\n+\n+    #[test] fn t1 () {\n+        let Env {interner: ident_interner, string_reader} =\n+            setup(~\"/* my source file */ \\\n+                    fn main() { io::println(~\\\"zebra\\\"); }\\n\");\n+        let id = ident_interner.intern(@~\"fn\");\n         let tok1 = string_reader.next_token();\n         let tok2 = TokenAndSpan{\n             tok:token::IDENT(id, false),\n@@ -757,6 +793,35 @@ fn main() { io::println(~\\\"zebra\\\"); }\\n\";\n         // the lparen is already read:\n         check_equal (string_reader.last_pos,BytePos(29))\n     }\n+\n+    #[test] fn character_a() {\n+        let env = setup(~\"'a'\");\n+        let TokenAndSpan {tok, sp: _} =\n+            env.string_reader.next_token();\n+        assert tok == token::LIT_INT('a' as i64, ast::ty_char);\n+    }\n+\n+    #[test] fn character_space() {\n+        let env = setup(~\"' '\");\n+        let TokenAndSpan {tok, sp: _} =\n+            env.string_reader.next_token();\n+        assert tok == token::LIT_INT(' ' as i64, ast::ty_char);\n+    }\n+\n+    #[test] fn character_escaped() {\n+        let env = setup(~\"'\\n'\");\n+        let TokenAndSpan {tok, sp: _} =\n+            env.string_reader.next_token();\n+        assert tok == token::LIT_INT('\\n' as i64, ast::ty_char);\n+    }\n+\n+    #[test] fn lifetime_name() {\n+        let env = setup(~\"'abc\");\n+        let TokenAndSpan {tok, sp: _} =\n+            env.string_reader.next_token();\n+        let id = env.interner.intern(@~\"abc\");\n+        assert tok == token::LIFETIME(id);\n+    }\n }\n \n //"}, {"sha": "49de7264d2c5dec8b001ef91fe1d2731420044e2", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14930fbffe95971e9258cb2eb45a1642eb735bbe/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14930fbffe95971e9258cb2eb45a1642eb735bbe/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=14930fbffe95971e9258cb2eb45a1642eb735bbe", "patch": "@@ -88,6 +88,7 @@ pub enum Token {\n     /* Name components */\n     IDENT(ast::ident, bool),\n     UNDERSCORE,\n+    LIFETIME(ast::ident),\n \n     /* For interpolation */\n     INTERPOLATED(nonterminal),\n@@ -193,7 +194,7 @@ pub fn to_str(in: @ident_interner, t: Token) -> ~str {\n \n       /* Name components */\n       IDENT(s, _) => *in.get(s),\n-\n+      LIFETIME(s) => fmt!(\"'%s\", *in.get(s)),\n       UNDERSCORE => ~\"_\",\n \n       /* Other */\n@@ -760,6 +761,12 @@ impl Token : cmp::Eq {\n                     _ => false\n                 }\n             }\n+            LIFETIME(e0a) => {\n+                match (*other) {\n+                    LIFETIME(e0b) => e0a == e0b,\n+                    _ => false\n+                }\n+            }\n             UNDERSCORE => {\n                 match (*other) {\n                     UNDERSCORE => true,"}]}