{"sha": "49d24a6333c1f30cd92048206016a006430b7a42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZDI0YTYzMzNjMWYzMGNkOTIwNDgyMDYwMTZhMDA2NDMwYjdhNDI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T13:56:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T14:03:01Z"}, "message": "Remove elements from the todo list the correct way in constant.rs", "tree": {"sha": "7be1cfcf79ea786b795be3cb90445b8608eccad1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be1cfcf79ea786b795be3cb90445b8608eccad1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d24a6333c1f30cd92048206016a006430b7a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d24a6333c1f30cd92048206016a006430b7a42", "html_url": "https://github.com/rust-lang/rust/commit/49d24a6333c1f30cd92048206016a006430b7a42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d24a6333c1f30cd92048206016a006430b7a42/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c40788c1b25b08c5687c00e9df44da1b417a9594", "url": "https://api.github.com/repos/rust-lang/rust/commits/c40788c1b25b08c5687c00e9df44da1b417a9594", "html_url": "https://github.com/rust-lang/rust/commit/c40788c1b25b08c5687c00e9df44da1b417a9594"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "7afbb0b0b650cdca6ce2c8620d92ef286be5f832", "filename": "examples/example.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49d24a6333c1f30cd92048206016a006430b7a42/examples%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d24a6333c1f30cd92048206016a006430b7a42/examples%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fexample.rs?ref=49d24a6333c1f30cd92048206016a006430b7a42", "patch": "@@ -170,3 +170,7 @@ fn int_to_float(a: u8, b: i32) -> (f64, f32) {\n fn make_array() -> [u8; 3] {\n     [42, 0, 5]\n }\n+\n+fn some_promoted_tuple() -> &'static (&'static str, &'static str) {\n+    &(\"abc\", \"some\")\n+}"}, {"sha": "5ff9c93a975d3f279bece96dc03cf4ddf100ac65", "filename": "examples/mini_core.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/49d24a6333c1f30cd92048206016a006430b7a42/examples%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d24a6333c1f30cd92048206016a006430b7a42/examples%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core.rs?ref=49d24a6333c1f30cd92048206016a006430b7a42", "patch": "@@ -59,11 +59,26 @@ pub trait Mul<RHS = Self> {\n impl Mul for u8 {\n     type Output = Self;\n \n-    fn mul(self, rhs: Self) -> Self {\n+    fn mul(self, rhs: Self) -> Self::Output {\n         self * rhs\n     }\n }\n \n+#[lang = \"sub\"]\n+pub trait Sub<RHS = Self> {\n+    type Output;\n+\n+    fn sub(self, rhs: RHS) -> Self::Output;\n+}\n+\n+impl Sub for usize {\n+    type Output = Self;\n+\n+    fn sub(self, rhs: Self) -> Self {\n+        self - rhs\n+    }\n+}\n+\n #[lang = \"bitor\"]\n pub trait BitOr<RHS = Self> {\n     type Output;"}, {"sha": "6c735e74eeef3d35ac9797cb43b125c09b3ecfa6", "filename": "src/constant.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/49d24a6333c1f30cd92048206016a006430b7a42/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d24a6333c1f30cd92048206016a006430b7a42/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=49d24a6333c1f30cd92048206016a006430b7a42", "patch": "@@ -104,17 +104,7 @@ fn trans_const_place<'a, 'tcx: 'a>(\n ) -> CPlace<'tcx> {\n     let ty = fx.monomorphize(&const_.ty);\n     let layout = fx.layout_of(ty);\n-    if !fx\n-        .tcx\n-        .sess\n-        .crate_types\n-        .get()\n-        .contains(&CrateType::Executable)\n-    {\n-        // TODO: cranelift-module api seems to be used wrong,\n-        // thus causing panics for some consts, so this disables it\n-        return CPlace::Addr(fx.bcx.ins().iconst(types::I64, 0), layout);\n-    }\n+\n     let alloc = fx.tcx.const_value_to_allocation(const_);\n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n     let alloc_id = fx.tcx.alloc_map.lock().allocate(alloc);\n@@ -161,10 +151,16 @@ fn get_global_for_alloc_id<'a, 'tcx: 'a, B: Backend + 'a>(\n     let mut todo = HashMap::new();\n     define_global_for_alloc_id(module, cx, alloc_id, &mut todo);\n \n-    while let Some((alloc_id, data_id)) = {\n-        let next = todo.drain().next();\n-        next\n-    } {\n+    loop {\n+        let (alloc_id, data_id) = {\n+            if let Some(alloc_id) = todo.keys().next().map(|alloc_id| *alloc_id) {\n+                let data_id = todo.remove(&alloc_id).unwrap();\n+                (alloc_id, data_id)\n+            } else {\n+                break;\n+            }\n+        };\n+\n         println!(\n             \"cur: {:?}:{:?} todo: {:?} done: {:?}\",\n             alloc_id, data_id, todo, cx.done"}]}