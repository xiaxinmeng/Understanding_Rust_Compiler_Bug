{"sha": "313541c766cf5e87fa83ef700703ef28a4852bfb", "node_id": "C_kwDOAAsO6NoAKDMxMzU0MWM3NjZjZjVlODdmYTgzZWY3MDA3MDNlZjI4YTQ4NTJiZmI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-29T12:16:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-29T12:16:04Z"}, "message": "Rollup merge of #106223 - estebank:suggest-let-ty-borrow, r=compiler-errors\n\nOn unsized locals with explicit types suggest `&`\n\nFix #72742.", "tree": {"sha": "7ae44b8c79dec6bb89f2f7904419825b92229f42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ae44b8c79dec6bb89f2f7904419825b92229f42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/313541c766cf5e87fa83ef700703ef28a4852bfb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjrYUECRBK7hj4Ov3rIwAAn40IAICOw2uFMU590rii8026bk6E\nGgnL+5/ZRv0tPLAA7UuDgKxToFC//lwaG/yo0EsxdWm9daLUB67vR45Rpjv+gcGP\nWfovI5WuNbM5PtMCV0eLiddUvwtLVFE38rxGu+XIKUIo0TbO/RVN2oIsDrTC7W7h\nbag0W1v/K/ioOx0SSfVUN5aURacSlyqqsiz15KTUZXLfbvmG01mngCKmrVNypIL0\ni8et50QCsS7zveraW1y+G0tm8/bnFP00gVU2UZC+tnznQmROSGZrxZRBdmLHYWyS\n9jW9kGKGAQ66Knrl6ZlWzoW8HDbr/Fih3eLj8UVwEVXej/zTRkNfVr8h2Tfm978=\n=Ykms\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ae44b8c79dec6bb89f2f7904419825b92229f42\nparent c610aeb592456b4720497257cb31d742b0d378c7\nparent 083eb936ec0fd05fc6c227e5aa2992971f1fe2d1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672316164 +0100\ncommitter GitHub <noreply@github.com> 1672316164 +0100\n\nRollup merge of #106223 - estebank:suggest-let-ty-borrow, r=compiler-errors\n\nOn unsized locals with explicit types suggest `&`\n\nFix #72742.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/313541c766cf5e87fa83ef700703ef28a4852bfb", "html_url": "https://github.com/rust-lang/rust/commit/313541c766cf5e87fa83ef700703ef28a4852bfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/313541c766cf5e87fa83ef700703ef28a4852bfb/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c610aeb592456b4720497257cb31d742b0d378c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c610aeb592456b4720497257cb31d742b0d378c7", "html_url": "https://github.com/rust-lang/rust/commit/c610aeb592456b4720497257cb31d742b0d378c7"}, {"sha": "083eb936ec0fd05fc6c227e5aa2992971f1fe2d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/083eb936ec0fd05fc6c227e5aa2992971f1fe2d1", "html_url": "https://github.com/rust-lang/rust/commit/083eb936ec0fd05fc6c227e5aa2992971f1fe2d1"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "26ba3d780d55928df5e287bccd12fbb669eb4a92", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/313541c766cf5e87fa83ef700703ef28a4852bfb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313541c766cf5e87fa83ef700703ef28a4852bfb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=313541c766cf5e87fa83ef700703ef28a4852bfb", "patch": "@@ -2514,6 +2514,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ObligationCauseCode::VariableType(hir_id) => {\n                 let parent_node = self.tcx.hir().get_parent_node(hir_id);\n                 match self.tcx.hir().find(parent_node) {\n+                    Some(Node::Local(hir::Local { ty: Some(ty), .. })) => {\n+                        err.span_suggestion_verbose(\n+                            ty.span.shrink_to_lo(),\n+                            \"consider borrowing here\",\n+                            \"&\",\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.note(\"all local variables must have a statically known size\");\n+                    }\n                     Some(Node::Local(hir::Local {\n                         init: Some(hir::Expr { kind: hir::ExprKind::Index(_, _), span, .. }),\n                         .."}, {"sha": "0869485799311f14ac4bc1b330a6c64abad12805", "filename": "src/test/ui/unsized-locals/suggest-borrow.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/313541c766cf5e87fa83ef700703ef28a4852bfb/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313541c766cf5e87fa83ef700703ef28a4852bfb/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.rs?ref=313541c766cf5e87fa83ef700703ef28a4852bfb", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x: [u8] = vec!(1, 2, 3)[..]; //~ ERROR E0277\n+    let x: &[u8] = vec!(1, 2, 3)[..]; //~ ERROR E0308\n+    let x: [u8] = &vec!(1, 2, 3)[..]; //~ ERROR E0308\n+    //~^ ERROR E0277\n+    let x: &[u8] = &vec!(1, 2, 3)[..];\n+}"}, {"sha": "08745eab28d16e518b37ea35d3d02aa7e06cd75a", "filename": "src/test/ui/unsized-locals/suggest-borrow.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/313541c766cf5e87fa83ef700703ef28a4852bfb/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/313541c766cf5e87fa83ef700703ef28a4852bfb/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fsuggest-borrow.stderr?ref=313541c766cf5e87fa83ef700703ef28a4852bfb", "patch": "@@ -0,0 +1,60 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/suggest-borrow.rs:2:9\n+   |\n+LL |     let x: [u8] = vec!(1, 2, 3)[..];\n+   |         ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+help: consider borrowing here\n+   |\n+LL |     let x: &[u8] = vec!(1, 2, 3)[..];\n+   |            +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-borrow.rs:3:20\n+   |\n+LL |     let x: &[u8] = vec!(1, 2, 3)[..];\n+   |            -----   ^^^^^^^^^^^^^^^^^\n+   |            |       |\n+   |            |       expected `&[u8]`, found slice `[{integer}]`\n+   |            |       help: consider borrowing here: `&vec!(1, 2, 3)[..]`\n+   |            expected due to this\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-borrow.rs:4:19\n+   |\n+LL |     let x: [u8] = &vec!(1, 2, 3)[..];\n+   |            ----   ^^^^^^^^^^^^^^^^^^ expected slice `[u8]`, found `&[{integer}]`\n+   |            |\n+   |            expected due to this\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     let x: [u8] = &vec!(1, 2, 3)[..];\n+LL +     let x: [u8] = vec!(1, 2, 3)[..];\n+   |\n+help: alternatively, consider changing the type annotation\n+   |\n+LL |     let x: &[u8] = &vec!(1, 2, 3)[..];\n+   |            +\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/suggest-borrow.rs:4:9\n+   |\n+LL |     let x: [u8] = &vec!(1, 2, 3)[..];\n+   |         ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+help: consider borrowing here\n+   |\n+LL |     let x: &[u8] = &vec!(1, 2, 3)[..];\n+   |            +\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "ace5a87187b8d1537f612cfc91e115dea1efd0ea", "filename": "src/test/ui/unsized-locals/unsized-locals-using-unsized-fn-params.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/313541c766cf5e87fa83ef700703ef28a4852bfb/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/313541c766cf5e87fa83ef700703ef28a4852bfb/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Funsized-locals-using-unsized-fn-params.stderr?ref=313541c766cf5e87fa83ef700703ef28a4852bfb", "patch": "@@ -27,6 +27,10 @@ LL |     let _foo: [u8] = *foo;\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: all local variables must have a statically known size\n    = help: unsized locals are gated as an unstable feature\n+help: consider borrowing here\n+   |\n+LL |     let _foo: &[u8] = *foo;\n+   |               +\n \n error: aborting due to 3 previous errors\n "}, {"sha": "18ac1ea18751542fdf9489871f5b10a31713cd5b", "filename": "src/test/ui/unsized/unsized6.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/313541c766cf5e87fa83ef700703ef28a4852bfb/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/313541c766cf5e87fa83ef700703ef28a4852bfb/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr?ref=313541c766cf5e87fa83ef700703ef28a4852bfb", "patch": "@@ -14,6 +14,10 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n LL - fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n LL + fn f1<W: ?Sized, X: ?Sized, Y, Z: ?Sized>(x: &X) {\n    |\n+help: consider borrowing here\n+   |\n+LL |     let y: &Y;\n+   |            +\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:7:12\n@@ -62,6 +66,10 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n LL - fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n LL + fn f2<X, Y: ?Sized>(x: &X) {\n    |\n+help: consider borrowing here\n+   |\n+LL |     let y: &X;\n+   |            +\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized6.rs:17:12\n@@ -94,6 +102,10 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n LL - fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f3<X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n    |\n+help: consider borrowing here\n+   |\n+LL |     let y: &X = *x1;\n+   |            +\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:24:9\n@@ -144,6 +156,10 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n LL - fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f4<X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n    |\n+help: consider borrowing here\n+   |\n+LL |     let y: &X = *x1;\n+   |            +\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:32:9"}]}