{"sha": "2560a9e8076d0b83f606af3029ea1a0c7bc48514", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NjBhOWU4MDc2ZDBiODNmNjA2YWYzMDI5ZWExYTBjN2JjNDg1MTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T13:40:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T13:40:50Z"}, "message": "wip", "tree": {"sha": "d6cb71632cefcd710fafdeb655904ab80022f47a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6cb71632cefcd710fafdeb655904ab80022f47a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2560a9e8076d0b83f606af3029ea1a0c7bc48514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2560a9e8076d0b83f606af3029ea1a0c7bc48514", "html_url": "https://github.com/rust-lang/rust/commit/2560a9e8076d0b83f606af3029ea1a0c7bc48514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2560a9e8076d0b83f606af3029ea1a0c7bc48514/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d51b02362109d71355aed63d48b5e7ccd0e51f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d51b02362109d71355aed63d48b5e7ccd0e51f4", "html_url": "https://github.com/rust-lang/rust/commit/8d51b02362109d71355aed63d48b5e7ccd0e51f4"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "10248013c1810354327a57401074834e8088f7c0", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2560a9e8076d0b83f606af3029ea1a0c7bc48514/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2560a9e8076d0b83f606af3029ea1a0c7bc48514/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=2560a9e8076d0b83f606af3029ea1a0c7bc48514", "patch": "@@ -269,6 +269,32 @@ impl db::RootDatabase {\n         Ok(result)\n     }\n \n+    pub(crate) fn hover(&self, position: FilePosition) -> Cancelable<Option<(TextRange, String)>> {\n+        let mut res = Vec::new();\n+        let range = if let Some(rr) = self.approximately_resolve_symbol(position)? {\n+            for nav in rr.resolves_to {\n+                res.extend(self.doc_text_for(nav)?)\n+            }\n+            rr.reference_range\n+        } else {\n+            let file = self.source_file(position.file_id);\n+            let expr: ast::Expr = ctry!(ra_editor::find_node_at_offset(\n+                file.syntax(),\n+                position.offset\n+            ));\n+            let frange = FileRange {\n+                file_id: position.file_id,\n+                range: expr.syntax().range(),\n+            };\n+            res.extend(self.type_of(frange)?);\n+            expr.syntax().range()\n+        };\n+        if res.is_empty() {\n+            return Ok(None);\n+        }\n+        Ok(Some((range, res.join(\"\\n\\n---\\n\"))))\n+    }\n+\n     pub(crate) fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n         let syntax = self.source_file(file_id);\n "}]}