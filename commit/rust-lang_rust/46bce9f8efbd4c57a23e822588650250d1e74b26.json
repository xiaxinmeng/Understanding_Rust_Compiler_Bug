{"sha": "46bce9f8efbd4c57a23e822588650250d1e74b26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YmNlOWY4ZWZiZDRjNTdhMjNlODIyNTg4NjUwMjUwZDFlNzRiMjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-09T18:06:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-09T18:06:37Z"}, "message": "Rollup merge of #74754 - davidhewitt:cfg-panic, r=ecstatic-morse\n\nAdd `#[cfg(panic = '...')]`\n\nThis PR adds conditional compilation according to the panic strategy.\n\nI've come across a need for a flag like this a couple of times while writing tests: #74301 , https://github.com/rust-lang/rust/pull/73670#issuecomment-653629031\n\nI'm not sure if I need to add a feature gate for this flag?", "tree": {"sha": "ca4004dfe570829f0a9f2989ab2838c9c2760fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca4004dfe570829f0a9f2989ab2838c9c2760fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46bce9f8efbd4c57a23e822588650250d1e74b26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqYUtCRBK7hj4Ov3rIwAAdHIIAFdhmrXFtNMLCFyMVe8w777e\ndCznaTrMNq+I3tyDcnEAA4NcwtjnkxIhZzE5dlH4qqN/0J9KF7KhsojhnHo9xnS6\nmbtXuMHjWd6Nl07jLiI8zmhN3pWTdnFPTQIMN9pk3c2TVDsJC6KphAkZMnNXys6m\nwubq5AcerDYLt7xQmG2P7v2RDYkpV8wcdt1RMGA9HwDtQ9cxLvFAUvVLev2h/HeI\nHk8ttIcYkD2uJ5tWdwyvMhMtATRRVoCM8/rFkWMsjsH39cBiazFT/X0ZRui/CEO7\n2MTjrKczBg+fr7rEVRi59faCV4YkHGbf0giyzCjG2Hvpu5NfHR0wddQWiooCRbI=\n=aiPx\n-----END PGP SIGNATURE-----\n", "payload": "tree ca4004dfe570829f0a9f2989ab2838c9c2760fd0\nparent 25f6938da459a57b43bdf16ed6bdad3225b2a3ce\nparent 8d43b3cbb91b7327b42b0da721525e7ae2911f0b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1604945197 +0100\ncommitter GitHub <noreply@github.com> 1604945197 +0100\n\nRollup merge of #74754 - davidhewitt:cfg-panic, r=ecstatic-morse\n\nAdd `#[cfg(panic = '...')]`\n\nThis PR adds conditional compilation according to the panic strategy.\n\nI've come across a need for a flag like this a couple of times while writing tests: #74301 , https://github.com/rust-lang/rust/pull/73670#issuecomment-653629031\n\nI'm not sure if I need to add a feature gate for this flag?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46bce9f8efbd4c57a23e822588650250d1e74b26", "html_url": "https://github.com/rust-lang/rust/commit/46bce9f8efbd4c57a23e822588650250d1e74b26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46bce9f8efbd4c57a23e822588650250d1e74b26/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25f6938da459a57b43bdf16ed6bdad3225b2a3ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f6938da459a57b43bdf16ed6bdad3225b2a3ce", "html_url": "https://github.com/rust-lang/rust/commit/25f6938da459a57b43bdf16ed6bdad3225b2a3ce"}, {"sha": "8d43b3cbb91b7327b42b0da721525e7ae2911f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d43b3cbb91b7327b42b0da721525e7ae2911f0b", "html_url": "https://github.com/rust-lang/rust/commit/8d43b3cbb91b7327b42b0da721525e7ae2911f0b"}], "stats": {"total": 146, "additions": 136, "deletions": 10}, "files": [{"sha": "0df67b63eba58bcbebb16826819dc1cb2291a201", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -613,6 +613,9 @@ declare_features! (\n     /// Allows the use of destructuring assignments.\n     (active, destructuring_assignment, \"1.49.0\", Some(71126), None),\n \n+    /// Enables `#[cfg(panic = \"...\")]` config key.\n+    (active, cfg_panic, \"1.49.0\", Some(77443), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "5c5cf609ac33c5594643263057781157cd3003d4", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -33,6 +33,7 @@ const GATED_CFGS: &[GatedCfg] = &[\n     ),\n     (sym::sanitize, sym::cfg_sanitize, cfg_fn!(cfg_sanitize)),\n     (sym::version, sym::cfg_version, cfg_fn!(cfg_version)),\n+    (sym::panic, sym::cfg_panic, cfg_fn!(cfg_panic)),\n ];\n \n /// Find a gated cfg determined by the `pred`icate which is given the cfg's name."}, {"sha": "ab694ad4c5afdd4d08ec6feab11dc00be0f847b9", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -793,6 +793,9 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n         }\n     }\n \n+    let panic_strategy = sess.panic_strategy();\n+    ret.insert((sym::panic, Some(panic_strategy.desc_symbol())));\n+\n     for s in sess.opts.debugging_opts.sanitizer {\n         let symbol = Symbol::intern(&s.to_string());\n         ret.insert((sym::sanitize, Some(symbol)));"}, {"sha": "ad58f89d87da7969058a5cc082bdf5bed13f3c5c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -326,6 +326,7 @@ symbols! {\n         cfg_attr,\n         cfg_attr_multi,\n         cfg_doctest,\n+        cfg_panic,\n         cfg_sanitize,\n         cfg_target_feature,\n         cfg_target_has_atomic,"}, {"sha": "55d27fd8698a72428d74e53abca8bbff6853038c", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -37,6 +37,7 @@\n use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_serialize::json::{Json, ToJson};\n+use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeMap;\n use std::ops::Deref;\n use std::path::{Path, PathBuf};\n@@ -176,6 +177,13 @@ impl PanicStrategy {\n             PanicStrategy::Abort => \"abort\",\n         }\n     }\n+\n+    pub fn desc_symbol(&self) -> Symbol {\n+        match *self {\n+            PanicStrategy::Unwind => sym::unwind,\n+            PanicStrategy::Abort => sym::abort,\n+        }\n+    }\n }\n \n impl ToJson for PanicStrategy {"}, {"sha": "f5b73128ad6c28a80a259f75f85879ca881f0b25", "filename": "src/doc/unstable-book/src/language-features/cfg-panic.md", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-panic.md", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-panic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcfg-panic.md?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -0,0 +1,38 @@\n+# `cfg_panic`\n+\n+The tracking issue for this feature is: [#77443]\n+\n+[#77443]: https://github.com/rust-lang/rust/issues/77443\n+\n+------------------------\n+\n+The `cfg_panic` feature makes it possible to execute different code\n+depending on the panic strategy.\n+\n+Possible values at the moment are `\"unwind\"` or `\"abort\"`, although\n+it is possible that new panic strategies may be added to Rust in the\n+future.\n+\n+## Examples\n+\n+```rust\n+#![feature(cfg_panic)]\n+\n+#[cfg(panic = \"unwind\")]\n+fn a() {\n+    // ...\n+}\n+\n+#[cfg(not(panic = \"unwind\"))]\n+fn a() {\n+    // ...\n+}\n+\n+fn b() {\n+    if cfg!(panic = \"abort\") {\n+        // ...\n+    } else {\n+        // ...\n+    }\n+}\n+```"}, {"sha": "9b88eff12ed38481a659aa4be038c586aba00917", "filename": "src/test/ui/cfg/cfg-panic-abort.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic-abort.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -0,0 +1,16 @@\n+// build-pass\n+// compile-flags: -C panic=abort\n+// no-prefer-dynamic\n+#![feature(cfg_panic)]\n+\n+#[cfg(panic = \"unwind\")]\n+pub fn bad() -> i32 { }\n+\n+#[cfg(not(panic = \"abort\"))]\n+pub fn bad() -> i32 { }\n+\n+#[cfg(panic = \"some_imaginary_future_panic_handler\")]\n+pub fn bad() -> i32 { }\n+\n+#[cfg(panic = \"abort\")]\n+pub fn main() { }"}, {"sha": "dbb5932a9bb85a6a64cb47f1b07ecaf83e4b2ebe", "filename": "src/test/ui/cfg/cfg-panic.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-panic.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -0,0 +1,18 @@\n+// build-pass\n+// compile-flags: -C panic=unwind\n+// ignore-emscripten no panic_unwind implementation\n+// ignore-wasm32     no panic_unwind implementation\n+// ignore-wasm64     no panic_unwind implementation\n+#![feature(cfg_panic)]\n+\n+#[cfg(panic = \"abort\")]\n+pub fn bad() -> i32 { }\n+\n+#[cfg(not(panic = \"unwind\"))]\n+pub fn bad() -> i32 { }\n+\n+#[cfg(panic = \"some_imaginary_future_panic_handler\")]\n+pub fn bad() -> i32 { }\n+\n+#[cfg(panic = \"unwind\")]\n+pub fn main() { }"}, {"sha": "03662a352090927a1e25d7504c08c43e7bcfd029", "filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "previous_filename": "src/test/ui/consts/control-flow/assert.panic.stderr"}, {"sha": "90017fee1933738022a13a7cc6b0167f21af6f97", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -1,14 +1,14 @@\n // Test that `assert` works when `const_panic` is enabled.\n \n-// revisions: stock panic\n+// revisions: stock const_panic\n \n-#![cfg_attr(panic, feature(const_panic))]\n+#![cfg_attr(const_panic, feature(const_panic))]\n \n const _: () = assert!(true);\n //[stock]~^ ERROR panicking in constants is unstable\n \n const _: () = assert!(false);\n //[stock]~^ ERROR panicking in constants is unstable\n-//[panic]~^^ ERROR any use of this value will cause an error\n+//[const_panic]~^^ ERROR any use of this value will cause an error\n \n fn main() {}"}, {"sha": "1508374d9426622b852b97403aa99d7aeaac458f", "filename": "src/test/ui/feature-gates/feature-gate-cfg-panic.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-panic.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -0,0 +1,11 @@\n+#[cfg(panic = \"unwind\")]\n+//~^ ERROR `cfg(panic)` is experimental and subject to change\n+fn foo() -> bool { true }\n+#[cfg(not(panic = \"unwind\"))]\n+//~^ ERROR `cfg(panic)` is experimental and subject to change\n+fn foo() -> bool { false }\n+\n+\n+fn main() {\n+    assert!(foo());\n+}"}, {"sha": "ea5cd54fa90f0e3716f67758198408711edbb572", "filename": "src/test/ui/feature-gates/feature-gate-cfg-panic.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-panic.stderr?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: `cfg(panic)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-panic.rs:1:7\n+   |\n+LL | #[cfg(panic = \"unwind\")]\n+   |       ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #77443 <https://github.com/rust-lang/rust/issues/77443> for more information\n+   = help: add `#![feature(cfg_panic)]` to the crate attributes to enable\n+\n+error[E0658]: `cfg(panic)` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-panic.rs:4:11\n+   |\n+LL | #[cfg(not(panic = \"unwind\"))]\n+   |           ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #77443 <https://github.com/rust-lang/rust/issues/77443> for more information\n+   = help: add `#![feature(cfg_panic)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9348bb46dfe34e6ffd3b229232f24bea461337c6", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -1,13 +1,16 @@\n // run-pass\n-// ignore-wasm32\n-// ignore-wasm64\n #![feature(format_args_capture)]\n+#![feature(cfg_panic)]\n \n fn main() {\n     named_argument_takes_precedence_to_captured();\n-    panic_with_single_argument_does_not_get_formatted();\n-    panic_with_multiple_arguments_is_formatted();\n     formatting_parameters_can_be_captured();\n+\n+    #[cfg(panic = \"unwind\")]\n+    {\n+        panic_with_single_argument_does_not_get_formatted();\n+        panic_with_multiple_arguments_is_formatted();\n+    }\n }\n \n fn named_argument_takes_precedence_to_captured() {\n@@ -22,6 +25,7 @@ fn named_argument_takes_precedence_to_captured() {\n     assert_eq!(&s, \"positional-named-captured\");\n }\n \n+#[cfg(panic = \"unwind\")]\n fn panic_with_single_argument_does_not_get_formatted() {\n     // panic! with a single argument does not perform string formatting.\n     // RFC #2795 suggests that this may need to change so that captured arguments are formatted.\n@@ -34,6 +38,7 @@ fn panic_with_single_argument_does_not_get_formatted() {\n     assert_eq!(msg.downcast_ref::<&str>(), Some(&\"{foo}\"))\n }\n \n+#[cfg(panic = \"unwind\")]\n fn panic_with_multiple_arguments_is_formatted() {\n     let foo = \"captured\";\n "}, {"sha": "f25a78f59cd20792dc6a4baf1cdcfe2fdcd7b550", "filename": "src/test/ui/issues/issue-68696-catch-during-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fissues%2Fissue-68696-catch-during-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Fissues%2Fissue-68696-catch-during-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68696-catch-during-unwind.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -4,8 +4,7 @@\n // entering the catch_unwind.\n //\n // run-pass\n-// ignore-wasm       no panic support\n-// ignore-emscripten no panic support\n+#![feature(cfg_panic)]\n \n use std::panic::catch_unwind;\n \n@@ -19,6 +18,7 @@ impl Drop for Guard {\n }\n \n fn main() {\n+    #[cfg(panic = \"unwind\")]\n     let _ = catch_unwind(|| {\n         let _guard = Guard::default();\n         panic!();"}, {"sha": "29ce9f7c2e94fe3dd1d5f663cf9854e3c528e70c", "filename": "src/test/ui/test-attrs/test-allow-fail-attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bce9f8efbd4c57a23e822588650250d1e74b26/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs?ref=46bce9f8efbd4c57a23e822588650250d1e74b26", "patch": "@@ -1,11 +1,12 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: --test\n #![feature(allow_fail)]\n+#![feature(cfg_panic)]\n \n #[test]\n #[allow_fail]\n fn test1() {\n+    #[cfg(not(panic = \"abort\"))]\n     panic!();\n }\n "}]}