{"sha": "0dce5862fcb8677f416e0bf1eb75b8e53108c70c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkY2U1ODYyZmNiODY3N2Y0MTZlMGJmMWViNzViOGU1MzEwOGM3MGM=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-04-06T22:39:27Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-04-06T22:39:27Z"}, "message": "improved std::hash::Hasher docs\n\nPart of #29357.\n* rephrased summary sentences to be less redundant\n* expanded top-level docs, adding a usage example and links to relevant\n  methods (`finish`, `write` etc) as well as `Hash`\n* added examples to the `finish` and `write` methods", "tree": {"sha": "3fa60ffeac9605f564eedc6f971ac80e6933444c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fa60ffeac9605f564eedc6f971ac80e6933444c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dce5862fcb8677f416e0bf1eb75b8e53108c70c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dce5862fcb8677f416e0bf1eb75b8e53108c70c", "html_url": "https://github.com/rust-lang/rust/commit/0dce5862fcb8677f416e0bf1eb75b8e53108c70c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dce5862fcb8677f416e0bf1eb75b8e53108c70c/comments", "author": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37275b6fc3635291d19331974e361c1ccd02a467", "url": "https://api.github.com/repos/rust-lang/rust/commits/37275b6fc3635291d19331974e361c1ccd02a467", "html_url": "https://github.com/rust-lang/rust/commit/37275b6fc3635291d19331974e361c1ccd02a467"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "4ebec401669c5cfbe5d13d184bf42c3348965aa2", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0dce5862fcb8677f416e0bf1eb75b8e53108c70c/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dce5862fcb8677f416e0bf1eb75b8e53108c70c/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=0dce5862fcb8677f416e0bf1eb75b8e53108c70c", "patch": "@@ -208,18 +208,73 @@ pub trait Hash {\n     }\n }\n \n-/// A trait which represents the ability to hash an arbitrary stream of bytes.\n+/// A trait for hashing an arbitrary stream of bytes.\n+///\n+/// Instances of `Hasher` usually represent state that is changed while hashing\n+/// data.\n+///\n+/// `Hasher` provides a fairly basic interface for retrieving the generated hash\n+/// (with [`finish`]), and writing integers as well as slices of bytes into an\n+/// instance (with [`write`] and [`write_u8`] etc.). Most of the time, `Hasher`\n+/// instances are used in conjunction with the [`Hash`] trait.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::hash_map::DefaultHasher;\n+/// use std::hash::Hasher;\n+///\n+/// let mut hasher = DefaultHasher::new();\n+///\n+/// hasher.write_u32(1989);\n+/// hasher.write_u8(11);\n+/// hasher.write_u8(9);\n+/// hasher.write(b\"Huh?\");\n+///\n+/// println!(\"Hash is {:x}!\", hasher.finish());\n+/// ```\n+///\n+/// [`Hash`]: trait.Hash.html\n+/// [`finish`]: #tymethod.finish\n+/// [`write`]: #tymethod.write\n+/// [`write_u8`]: #method.write_u8\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hasher {\n     /// Completes a round of hashing, producing the output hash generated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::hash_map::DefaultHasher;\n+    /// use std::hash::Hasher;\n+    ///\n+    /// let mut hasher = DefaultHasher::new();\n+    /// hasher.write(b\"Cool!\");\n+    ///\n+    /// println!(\"Hash is {:x}!\", hasher.finish());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn finish(&self) -> u64;\n \n     /// Writes some data into this `Hasher`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::hash_map::DefaultHasher;\n+    /// use std::hash::Hasher;\n+    ///\n+    /// let mut hasher = DefaultHasher::new();\n+    /// let data = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef];\n+    ///\n+    /// hasher.write(&data);\n+    ///\n+    /// println!(\"Hash is {:x}!\", hasher.finish());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write(&mut self, bytes: &[u8]);\n \n-    /// Write a single `u8` into this hasher.\n+    /// Writes a single `u8` into this hasher.\n     #[inline]\n     #[stable(feature = \"hasher_write\", since = \"1.3.0\")]\n     fn write_u8(&mut self, i: u8) {"}]}