{"sha": "27a25df2e21026a3b032899e63de33b0b11aafbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTI1ZGYyZTIxMDI2YTNiMDMyODk5ZTYzZGUzM2IwYjExYWFmYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-25T13:32:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-25T13:32:31Z"}, "message": "Auto merge of #56962 - nivkner:fixme_fixup4, r=pnkfelix\n\naddress some FIXME whose associated issues were marked as closed\n\npart of #44366", "tree": {"sha": "54842a1903bab32cb7b97e0b1f733a61a3aee899", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54842a1903bab32cb7b97e0b1f733a61a3aee899"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a25df2e21026a3b032899e63de33b0b11aafbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a25df2e21026a3b032899e63de33b0b11aafbb", "html_url": "https://github.com/rust-lang/rust/commit/27a25df2e21026a3b032899e63de33b0b11aafbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a25df2e21026a3b032899e63de33b0b11aafbb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c4335287c62d0a343c6103a69c4c742ce44c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c4335287c62d0a343c6103a69c4c742ce44c0e", "html_url": "https://github.com/rust-lang/rust/commit/27c4335287c62d0a343c6103a69c4c742ce44c0e"}, {"sha": "e32c63eedc571734906ee6c59a5fccd17eeb0f37", "url": "https://api.github.com/repos/rust-lang/rust/commits/e32c63eedc571734906ee6c59a5fccd17eeb0f37", "html_url": "https://github.com/rust-lang/rust/commit/e32c63eedc571734906ee6c59a5fccd17eeb0f37"}], "stats": {"total": 148, "additions": 54, "deletions": 94}, "files": [{"sha": "5c59439fdfb6faf0062229bab4429d873eab94fd", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -1601,15 +1601,12 @@ extern \"C\" {\n                                                 -> &'a Value;\n     pub fn LLVMRustDIBuilderCreateOpDeref() -> i64;\n     pub fn LLVMRustDIBuilderCreateOpPlusUconst() -> i64;\n-}\n \n-#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n-extern \"C\" {\n+    #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteTypeToString(Type: &Type, s: &RustString);\n+    #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteValueToString(value_ref: &Value, s: &RustString);\n-}\n \n-extern \"C\" {\n     pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&Value>;\n     pub fn LLVMIsAConstantFP(value_ref: &Value) -> Option<&Value>;\n \n@@ -1687,56 +1684,39 @@ extern \"C\" {\n     pub fn LLVMRustDestroyArchive(AR: &'static mut Archive);\n \n     pub fn LLVMRustGetSectionName(SI: &SectionIterator, data: &mut *const c_char) -> size_t;\n-}\n \n-#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n-extern \"C\" {\n+    #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteTwineToString(T: &Twine, s: &RustString);\n-}\n \n-extern \"C\" {\n     pub fn LLVMContextSetDiagnosticHandler(C: &Context,\n                                            Handler: DiagnosticHandler,\n                                            DiagnosticContext: *mut c_void);\n-}\n \n-#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n-extern \"C\" {\n+    #[allow(improper_ctypes)]\n     pub fn LLVMRustUnpackOptimizationDiagnostic(DI: &'a DiagnosticInfo,\n                                                 pass_name_out: &RustString,\n                                                 function_out: &mut Option<&'a Value>,\n                                                 loc_line_out: &mut c_uint,\n                                                 loc_column_out: &mut c_uint,\n                                                 loc_filename_out: &RustString,\n                                                 message_out: &RustString);\n-}\n \n-extern \"C\" {\n     pub fn LLVMRustUnpackInlineAsmDiagnostic(DI: &'a DiagnosticInfo,\n                                              cookie_out: &mut c_uint,\n                                              message_out: &mut Option<&'a Twine>,\n                                              instruction_out: &mut Option<&'a Value>);\n-}\n \n-#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n-extern \"C\" {\n+    #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteDiagnosticInfoToString(DI: &DiagnosticInfo, s: &RustString);\n-}\n-\n-extern \"C\" {\n     pub fn LLVMRustGetDiagInfoKind(DI: &DiagnosticInfo) -> DiagnosticKind;\n \n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(C: &Context,\n                                                  H: InlineAsmDiagHandler,\n                                                  CX: *mut c_void);\n-}\n \n-#[allow(improper_ctypes)] // FIXME(#52456) needed for RustString.\n-extern \"C\" {\n+    #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteSMDiagnosticToString(d: &SMDiagnostic, s: &RustString);\n-}\n \n-extern \"C\" {\n     pub fn LLVMRustWriteArchive(Dst: *const c_char,\n                                 NumMembers: size_t,\n                                 Members: *const &RustArchiveMember,"}, {"sha": "69706924dc96659c81de030b099e1df797e8acc8", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -347,7 +347,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             span: test.span,\n                             ty: mty,\n \n-                            // FIXME(#47184): This constant comes from user\n+                            // FIXME(#54571): This constant comes from user\n                             // input (a constant in a pattern).  Are\n                             // there forms where users can add type\n                             // annotations here?  For example, an"}, {"sha": "0324bfb892e45ac0b29ba1dc5c27828e59f3a7a5", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> PatternTypeProjections<'tcx> {\n     }\n \n     pub(crate) fn ref_binding(&self) -> Self {\n-        // FIXME(#47184): ignore for now\n+        // FIXME(#55401): ignore for now\n         PatternTypeProjections { contents: vec![] }\n     }\n "}, {"sha": "e70284e4948ec6573a662de56d18219586745f53", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -10,7 +10,8 @@\n \n //! Representation of a `#[doc(cfg(...))]` attribute.\n \n-// FIXME: Once RFC #1868 is implemented, switch to use those structures instead.\n+// FIXME: Once the portability lint RFC is implemented (see tracking issue #41619),\n+// switch to use those structures instead.\n \n use std::mem;\n use std::fmt::{self, Write};"}, {"sha": "c9ec5d0d5265f94f15d1b9ad8a19afc7d7c2542f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -1240,10 +1240,8 @@ fn write_minify_replacer<W: Write>(dst: &mut W,\n /// static HTML tree. Each component in the cleaned path will be passed as an\n /// argument to `f`. The very last component of the path (ie the file name) will\n /// be passed to `f` if `keep_filename` is true, and ignored otherwise.\n-// FIXME (#9639): The closure should deal with &[u8] instead of &str\n-// FIXME (#9639): This is too conservative, rejecting non-UTF-8 paths\n fn clean_srcpath<F>(src_root: &Path, p: &Path, keep_filename: bool, mut f: F) where\n-    F: FnMut(&str),\n+    F: FnMut(&OsStr),\n {\n     // make it relative, if possible\n     let p = p.strip_prefix(src_root).unwrap_or(p);\n@@ -1256,8 +1254,8 @@ fn clean_srcpath<F>(src_root: &Path, p: &Path, keep_filename: bool, mut f: F) wh\n         }\n \n         match c {\n-            Component::ParentDir => f(\"up\"),\n-            Component::Normal(c) => f(c.to_str().unwrap()),\n+            Component::ParentDir => f(\"up\".as_ref()),\n+            Component::Normal(c) => f(c),\n             _ => continue,\n         }\n     }\n@@ -1356,7 +1354,7 @@ impl<'a> SourceCollector<'a> {\n             cur.push(component);\n             fs::create_dir_all(&cur).unwrap();\n             root_path.push_str(\"../\");\n-            href.push_str(component);\n+            href.push_str(&component.to_string_lossy());\n             href.push('/');\n         });\n         let mut fname = p.file_name()\n@@ -2243,7 +2241,7 @@ impl<'a> Item<'a> {\n             };\n \n             clean_srcpath(&src_root, file, false, |component| {\n-                path.push_str(component);\n+                path.push_str(&component.to_string_lossy());\n                 path.push('/');\n             });\n             let mut fname = file.file_name().expect(\"source has no filename\")"}, {"sha": "feb51557ec648979020bd038656efde7f6b6bcf7", "filename": "src/test/auxiliary/rust_test_helpers.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -163,11 +163,7 @@ rust_get_null_ptr() {\n     return 0;\n }\n \n-/* Debug helpers strictly to verify ABI conformance.\n- *\n- * FIXME (#2665): move these into a testcase when the testsuite\n- * understands how to have explicit C files included.\n- */\n+// Debug helpers strictly to verify ABI conformance.\n \n struct quad {\n     uint64_t a;"}, {"sha": "920fe07c9149697071086817fc4d2f1653904a29", "filename": "src/test/run-pass/impl-trait/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -41,7 +41,6 @@ impl<'a> SingleRegionTrait<'a> for &'a u32 {}\n struct SingleRegionStruct<'a>(&'a u32);\n \n fn simple_type_hrtb<'b>() -> impl for<'a> SingleRegionTrait<'a> { 5 }\n-// FIXME(cramertj) add test after #45992 lands to ensure lint is triggered\n fn elision_single_region_trait(x: &u32) -> impl SingleRegionTrait { x }\n fn elision_single_region_struct(x: SingleRegionStruct) -> impl Into<SingleRegionStruct> { x }\n "}, {"sha": "50a31630df31897f0bca65d89af33f83ec2941b5", "filename": "src/test/run-pass/issues/auxiliary/issue-31702-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Frun-pass%2Fissues%2Fauxiliary%2Fissue-31702-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Frun-pass%2Fissues%2Fauxiliary%2Fissue-31702-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fauxiliary%2Fissue-31702-1.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "previous_filename": "src/test/run-pass/auxiliary/issue-31702-1.rs"}, {"sha": "ae8743b62ee050f4f0e01e9522f730e46fb91241", "filename": "src/test/run-pass/issues/auxiliary/issue-31702-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Frun-pass%2Fissues%2Fauxiliary%2Fissue-31702-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Frun-pass%2Fissues%2Fauxiliary%2Fissue-31702-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fauxiliary%2Fissue-31702-2.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -16,7 +16,7 @@ use std::collections::HashMap;\n use issue_31702_1::U256;\n \n pub struct Ethash {\n-    engine_params: for<'a> fn() -> Option<&'a Vec<u8>>,\n+    engine_params: fn() -> Option<&'static Vec<u8>>,\n     u256_params: HashMap<String, U256>,\n }\n ", "previous_filename": "src/test/run-pass/auxiliary/issue-31702-2.rs"}, {"sha": "4011d12ad961b1210ed60b29c7323e40469a54ca", "filename": "src/test/run-pass/issues/issue-31702.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Frun-pass%2Fissues%2Fissue-31702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Frun-pass%2Fissues%2Fissue-31702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-31702.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -11,11 +11,6 @@\n // run-pass\n // aux-build:issue-31702-1.rs\n // aux-build:issue-31702-2.rs\n-// ignore-test: FIXME(#31702) when this test was added it was thought that the\n-//                            accompanying llvm update would fix it, but\n-//                            unfortunately it appears that was not the case. In\n-//                            the interest of not deleting the test, though,\n-//                            this is just tagged with ignore-test\n \n // this test is actually entirely in the linked library crates\n "}, {"sha": "1b9ecbeafe422b4a6d0053d73476af1d491c340e", "filename": "src/test/ui/borrowck/assign_mutable_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -12,7 +12,7 @@\n // var, but we do not permit you to use the complete var afterwards.\n // We hope to fix this at some point.\n //\n-// FIXME(#21232)\n+// FIXME(#54987)\n \n fn assign_both_fields_and_use() {\n     let mut x: (u32, u32);"}, {"sha": "9cf0d24211bcee76a6781aa9b2b42db4e2303328", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -10,7 +10,7 @@ LL |             *y = 1;\n    |             ------ first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:307:20\n+  --> $DIR/borrowck-describe-lvalue.rs:306:20\n    |\n LL |                    let y = &mut x;\n    |                            ------ first mutable borrow occurs here\n@@ -21,7 +21,7 @@ LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/borrowck-describe-lvalue.rs:305:16\n+  --> $DIR/borrowck-describe-lvalue.rs:304:16\n    |\n LL |              || {\n    |               - inferred to be a `FnMut` closure\n@@ -368,7 +368,7 @@ LL |             drop(x);\n    = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:318:22\n+  --> $DIR/borrowck-describe-lvalue.rs:317:22\n    |\n LL |                 drop(x);\n    |                      - value moved here"}, {"sha": "c028b2c48681242e35f69cabfdf178fa020886f0", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.stderr?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -220,7 +220,7 @@ LL |         };\n    |         - first borrow ends here\n \n error[E0499]: cannot borrow `**x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:307:25\n+  --> $DIR/borrowck-describe-lvalue.rs:306:25\n    |\n LL |                    let y = &mut x;\n    |                                 - first mutable borrow occurs here\n@@ -231,7 +231,7 @@ LL |                 }\n    |                 - first borrow ends here\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:318:22\n+  --> $DIR/borrowck-describe-lvalue.rs:317:22\n    |\n LL |                 drop(x);\n    |                      - value moved here"}, {"sha": "69855cc984195bc8709a5734f2a69f3512049814", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.mir.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -10,7 +10,7 @@ LL |             *y = 1;\n    |             ------ first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-describe-lvalue.rs:307:20\n+  --> $DIR/borrowck-describe-lvalue.rs:306:20\n    |\n LL |                    let y = &mut x;\n    |                            ------ first mutable borrow occurs here\n@@ -21,7 +21,7 @@ LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/borrowck-describe-lvalue.rs:305:16\n+  --> $DIR/borrowck-describe-lvalue.rs:304:16\n    |\n LL |              || {\n    |               - inferred to be a `FnMut` closure\n@@ -362,7 +362,7 @@ LL |             drop(x);\n    |                  - mutable borrow later used here\n \n error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-describe-lvalue.rs:318:22\n+  --> $DIR/borrowck-describe-lvalue.rs:317:22\n    |\n LL |                 drop(x);\n    |                      - value moved here"}, {"sha": "29f29f106dff67fe478fd40c94333511e34fa552", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -299,7 +299,6 @@ fn main() {\n     }\n     // Field from upvar nested\n     {\n-        // FIXME(#49824) -- the free region error below should probably not be there\n         let mut x = 0;\n            || {\n                || { //[mir]~ ERROR captured variable cannot escape `FnMut` closure body"}, {"sha": "4a6fa787d31b926269ca95283931740a976561f9", "filename": "src/test/ui/issues/issue-36082.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-36082.rs:23:19\n+  --> $DIR/issue-36082.rs:21:19\n    |\n LL |     let val: &_ = x.borrow().0;\n    |                   ^^^^^^^^^^  - temporary value is freed at the end of this statement"}, {"sha": "720a11bfe44d06dd8358fdf5c42f61b8fb95f4d6", "filename": "src/test/ui/issues/issue-36082.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.stderr?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/issue-36082.rs:23:19\n+  --> $DIR/issue-36082.rs:21:19\n    |\n LL |     let val: &_ = x.borrow().0;\n    |                   ^^^^^^^^^^  - temporary value dropped here while still borrowed"}, {"sha": "4a6fa787d31b926269ca95283931740a976561f9", "filename": "src/test/ui/issues/issue-36082.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/issue-36082.rs:23:19\n+  --> $DIR/issue-36082.rs:21:19\n    |\n LL |     let val: &_ = x.borrow().0;\n    |                   ^^^^^^^^^^  - temporary value is freed at the end of this statement"}, {"sha": "c8b92bba6e7ff218e85bf3318f15ef73e7193441", "filename": "src/test/ui/issues/issue-36082.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -11,8 +11,6 @@\n // revisions: ast mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-// FIXME(#49821) -- No tip about using a let binding\n-\n use std::cell::RefCell;\n \n fn main() {"}, {"sha": "76105afb13e6e636b4e34acdcc9e9ca740c85d80", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -12,9 +12,6 @@\n // approximate the shorter end-point (`'y`) to with `'static`. This is\n // because `'y` is higher-ranked but we know of no relations to other\n // regions. Note that `'static` shows up in the stderr output as `'0`.\n-//\n-// FIXME(#45827) Because of shortcomings in the MIR type checker,\n-// these errors are not (yet) reported.\n \n // compile-flags:-Zborrowck=mir -Zverbose\n "}, {"sha": "2b0474332d6e8b21e637c37523d44b8c348b8efe", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -1,5 +1,5 @@\n note: External requirements\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:47\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:42:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |  _______________________________________________^\n@@ -20,7 +20,7 @@ LL | |     });\n    = note: where '_#1r: '_#0r\n \n note: No external requirements\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:44:1\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:41:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n@@ -34,7 +34,7 @@ LL | | }\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]) with substs []\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:5\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:42:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |                     ------ `cell_a` is a reference that is only valid in the function body"}, {"sha": "79bd029411e5afe2087cea68b6bdefcd7e374539", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -13,9 +13,6 @@\n // because `'y` is higher-ranked but we know of only irrelevant\n // relations to other regions. Note that `'static` shows up in the\n // stderr output as `'0`.\n-//\n-// FIXME(#45827) Because of shortcomings in the MIR type checker,\n-// these errors are not (yet) reported.\n \n // compile-flags:-Zborrowck=mir -Zverbose\n "}, {"sha": "f76787c8d7d167002a3481593fcea42c6f00ff7f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -1,5 +1,5 @@\n note: External requirements\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:47\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:45:47\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n@@ -20,7 +20,7 @@ LL | |     });\n    = note: where '_#1r: '_#0r\n \n note: No external requirements\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:47:1\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:44:1\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n@@ -34,7 +34,7 @@ LL | | }\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]) with substs []\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:5\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:45:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |                     ------ `cell_a` is a reference that is only valid in the function body"}, {"sha": "cb0739eb82ed0c2b3e16f42280b335c47d5c825e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -27,7 +27,7 @@ use util::{logv, PathBufExt};\n use std::collections::hash_map::DefaultHasher;\n use std::collections::{HashMap, HashSet, VecDeque};\n use std::env;\n-use std::ffi::OsString;\n+use std::ffi::{OsStr, OsString};\n use std::fmt;\n use std::fs::{self, create_dir_all, File};\n use std::hash::{Hash, Hasher};\n@@ -763,13 +763,13 @@ impl<'test> TestCx<'test> {\n             }\n             drop(stdout);\n \n-            let debugger_script = self.make_out_name(\"debugger.script\");\n-            // FIXME (#9639): This needs to handle non-utf8 paths\n-            let debugger_opts = vec![\n-                \"-quiet\".to_owned(),\n-                \"-batch\".to_owned(),\n-                \"-nx\".to_owned(),\n-                format!(\"-command={}\", debugger_script.to_str().unwrap()),\n+            let mut debugger_script = OsString::from(\"-command=\");\n+            debugger_script.push(self.make_out_name(\"debugger.script\"));\n+            let debugger_opts: &[&OsStr] = &[\n+                \"-quiet\".as_ref(),\n+                \"-batch\".as_ref(),\n+                \"-nx\".as_ref(),\n+                &debugger_script,\n             ];\n \n             let gdb_path = self.config.gdb.as_ref().unwrap();\n@@ -778,12 +778,12 @@ impl<'test> TestCx<'test> {\n                 stdout,\n                 stderr,\n             } = Command::new(&gdb_path)\n-                .args(&debugger_opts)\n+                .args(debugger_opts)\n                 .output()\n                 .expect(&format!(\"failed to exec `{:?}`\", gdb_path));\n             let cmdline = {\n                 let mut gdb = Command::new(&format!(\"{}-gdb\", self.config.target));\n-                gdb.args(&debugger_opts);\n+                gdb.args(debugger_opts);\n                 let cmdline = self.make_cmdline(&gdb, \"\");\n                 logv(self.config, format!(\"executing {}\", cmdline));\n                 cmdline\n@@ -871,18 +871,18 @@ impl<'test> TestCx<'test> {\n             debug!(\"script_str = {}\", script_str);\n             self.dump_output_file(&script_str, \"debugger.script\");\n \n-            let debugger_script = self.make_out_name(\"debugger.script\");\n+            let mut debugger_script = OsString::from(\"-command=\");\n+            debugger_script.push(self.make_out_name(\"debugger.script\"));\n \n-            // FIXME (#9639): This needs to handle non-utf8 paths\n-            let debugger_opts = vec![\n-                \"-quiet\".to_owned(),\n-                \"-batch\".to_owned(),\n-                \"-nx\".to_owned(),\n-                format!(\"-command={}\", debugger_script.to_str().unwrap()),\n+            let debugger_opts: &[&OsStr] = &[\n+                \"-quiet\".as_ref(),\n+                \"-batch\".as_ref(),\n+                \"-nx\".as_ref(),\n+                &debugger_script,\n             ];\n \n             let mut gdb = Command::new(self.config.gdb.as_ref().unwrap());\n-            gdb.args(&debugger_opts)\n+            gdb.args(debugger_opts)\n                 .env(\"PYTHONPATH\", rust_pp_module_abs_path);\n \n             debugger_run_result = self.compose_and_run("}, {"sha": "da5d1a3eaa4a71a5a579dfefcc19e2569bfa05bf", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a25df2e21026a3b032899e63de33b0b11aafbb/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=27a25df2e21026a3b032899e63de33b0b11aafbb", "patch": "@@ -58,7 +58,7 @@ const EXCEPTION_PATHS: &[&str] = &[\n     \"src/rtstartup\", // Not sure what to do about this. magic stuff for mingw\n \n     // temporary exceptions\n-    \"src/libstd/lib.rs\", // FIXME(#44217)\n+    \"src/libstd/lib.rs\",\n     \"src/libstd/path.rs\",\n     \"src/libstd/f32.rs\",\n     \"src/libstd/f64.rs\","}]}