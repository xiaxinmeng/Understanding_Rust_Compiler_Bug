{"sha": "7a2577322d71c0faa4d2b6e36e4f100324d6c228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMjU3NzMyMmQ3MWMwZmFhNGQyYjZlMzZlNGYxMDAzMjRkNmMyMjg=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-01T04:38:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-01T04:38:43Z"}, "message": "Merge pull request #1473 from topecongiro/bug/no-such-file-or-directory\n\nPrevent panicking against directories or non-existent files", "tree": {"sha": "29644bd9704bea9821028329629395b98c03ffcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29644bd9704bea9821028329629395b98c03ffcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a2577322d71c0faa4d2b6e36e4f100324d6c228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2577322d71c0faa4d2b6e36e4f100324d6c228", "html_url": "https://github.com/rust-lang/rust/commit/7a2577322d71c0faa4d2b6e36e4f100324d6c228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a2577322d71c0faa4d2b6e36e4f100324d6c228/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9a35050d2b77613e95dbbfa890dd6bfd832812", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9a35050d2b77613e95dbbfa890dd6bfd832812", "html_url": "https://github.com/rust-lang/rust/commit/5d9a35050d2b77613e95dbbfa890dd6bfd832812"}, {"sha": "4cec3ab71d49d1971f58812a522ff3112d396796", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cec3ab71d49d1971f58812a522ff3112d396796", "html_url": "https://github.com/rust-lang/rust/commit/4cec3ab71d49d1971f58812a522ff3112d396796"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "45f695c6477737707c1af7c8e929facaf989da5f", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a2577322d71c0faa4d2b6e36e4f100324d6c228/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2577322d71c0faa4d2b6e36e4f100324d6c228/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=7a2577322d71c0faa4d2b6e36e4f100324d6c228", "patch": "@@ -259,21 +259,29 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n             let mut error_summary = Summary::new();\n             for file in files {\n-                // Check the file directory if the config-path could not be read or not provided\n-                if path.is_none() {\n-                    let (config_tmp, path_tmp) = resolve_config(file.parent().unwrap())?;\n-                    if options.verbose {\n-                        if let Some(path) = path_tmp.as_ref() {\n-                            println!(\"Using rustfmt config file {} for {}\",\n-                                     path.display(),\n-                                     file.display());\n+                if !file.exists() {\n+                    println!(\"Error: file `{}` does not exist\", file.to_str().unwrap());\n+                    error_summary.add_operational_error();\n+                } else if file.is_dir() {\n+                    println!(\"Error: `{}` is a directory\", file.to_str().unwrap());\n+                    error_summary.add_operational_error();\n+                } else {\n+                    // Check the file directory if the config-path could not be read or not provided\n+                    if path.is_none() {\n+                        let (config_tmp, path_tmp) = resolve_config(file.parent().unwrap())?;\n+                        if options.verbose {\n+                            if let Some(path) = path_tmp.as_ref() {\n+                                println!(\"Using rustfmt config file {} for {}\",\n+                                         path.display(),\n+                                         file.display());\n+                            }\n                         }\n+                        config = config_tmp;\n                     }\n-                    config = config_tmp;\n-                }\n \n-                options.clone().apply_to(&mut config);\n-                error_summary.add(run(Input::File(file), &config));\n+                    options.clone().apply_to(&mut config);\n+                    error_summary.add(run(Input::File(file), &config));\n+                }\n             }\n             Ok(error_summary)\n         }"}]}