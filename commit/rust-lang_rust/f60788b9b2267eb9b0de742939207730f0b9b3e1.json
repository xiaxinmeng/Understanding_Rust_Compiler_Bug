{"sha": "f60788b9b2267eb9b0de742939207730f0b9b3e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MDc4OGI5YjIyNjdlYjliMGRlNzQyOTM5MjA3NzMwZjBiOWIzZTE=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-01T13:44:44Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-10T15:22:22Z"}, "message": "update visit_local for FindLocalAssignmentVisitor", "tree": {"sha": "9cf8455a0255906274e227ddcbd9f74a7a7943f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf8455a0255906274e227ddcbd9f74a7a7943f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f60788b9b2267eb9b0de742939207730f0b9b3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f60788b9b2267eb9b0de742939207730f0b9b3e1", "html_url": "https://github.com/rust-lang/rust/commit/f60788b9b2267eb9b0de742939207730f0b9b3e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f60788b9b2267eb9b0de742939207730f0b9b3e1/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "308e30eb7a3ec98392b0cbb0ebad354318a86148", "url": "https://api.github.com/repos/rust-lang/rust/commits/308e30eb7a3ec98392b0cbb0ebad354318a86148", "html_url": "https://github.com/rust-lang/rust/commit/308e30eb7a3ec98392b0cbb0ebad354318a86148"}], "stats": {"total": 73, "additions": 29, "deletions": 44}, "files": [{"sha": "aa4a704254e5ba3620b0baaeb43bb1e3c3ee756d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 29, "deletions": 44, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/f60788b9b2267eb9b0de742939207730f0b9b3e1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60788b9b2267eb9b0de742939207730f0b9b3e1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f60788b9b2267eb9b0de742939207730f0b9b3e1", "patch": "@@ -57,16 +57,33 @@ mod prefixes;\n use std::borrow::Cow;\n \n struct FindLocalAssignmentVisitor {\n-    from: Local,\n-    loc: Vec<Location>,\n+    needle: Local,\n+    locations: Vec<Location>,\n+    placectxt: PlaceContext,\n+    location: Location,\n }\n \n impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n     fn visit_local(&mut self,\n-                   local: &mut Local,\n-                   _: PlaceContext<'tcx>,\n-                   _: Location) {\n-         Visitor::visit_local(local,)\n+                   local: &Local,\n+                   place_context: PlaceContext<'tcx>,\n+                   location: Location) {\n+        if self.needle != *local {\n+            return;\n+        }   \n+\n+        match place_context {\n+            PlaceContext::Store | PlaceContext::Call => {\n+                self.locations.push(location);\n+            }\n+            PlaceContext::AsmOutput | PlaceContext::Drop| PlaceContext::Inspect |\n+            PlaceContext::Borrow| PlaceContext::Projection| PlaceContext::Copy| \n+            PlaceContext::Move| PlaceContext::StorageLive| PlaceContext::StorageDead|\n+            PlaceContext::Validate => {\n+            }\n+        }\n+\n+        Visitor::visit_local(local,place_context,location)\n     }\n }\n \n@@ -1570,41 +1587,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     None => \"immutable item\".to_owned(),\n                 };\n \n-            // let item_msg = match place{\n-            //     Place::Projection(ref proj) => {\n-            //         let Projection { ref base, ref elem } = **proj;\n-            //         match *elem {\n-            //             ProjectionElem::Deref => {\n-            //                 if let Err(place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n-            //                     debug!(\"place_err = {:?} and base={:?}\", place_err, base);\n-            //                     format!(\"`&`-reference {:?}\", place_err)\n-\n-\n-            //                 }else{\n-            //                     match self.describe_place(place) {\n-            //                         Some(name) => format!(\"immutable item `{}`\", name),\n-            //                         None => \"immutable item\".to_owned(),\n-            //                     }\n-            //                 }\n-            //             }\n-            //             _ => {\n-            //                     match self.describe_place(place) {\n-            //                     Some(name) => format!(\"immutable item `{}`\", name),\n-            //                     None => \"immutable item\".to_owned(),\n-            //                     }   \n-\n-            //                  }\n-            //             }\n-            //         },\n-                \n-            //     _=> {\n-            //     match self.describe_place(place) {\n-            //         Some(name) => format!(\"immutable item `{}`\", name),\n-            //         None => \"immutable item\".to_owned(),\n-            //     }\n-            //     }\n-            // };\n-\n+            // call find_assignments() here\n                 let mut err = self.tcx\n                     .cannot_borrow_path_as_mutable(span, &item_msg, Origin::Mir);\n                 err.span_label(span, \"cannot borrow as mutable\");\n@@ -2286,10 +2269,12 @@ impl ContextKind {\n     }\n }\n \n-impl Mir { \n-    fn find_assignments(&self, local: Local) -> Vec<Location> \n+impl Mir {\n+    fn find_assignments(&self, local: Local, place_context:PlaceContext, location:Location) -> Vec<Location> \n     { \n-\n+        let mut visitor = FindLocalAssignmentVisitor { needle: local, locations: vec![], location:location, place_context: };\n+        visitor.visit_mir(self);\n+        visitor.locations\n     }\n }\n "}]}