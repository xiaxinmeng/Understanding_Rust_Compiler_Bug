{"sha": "472199e7292a47de10252b4d6350a80893b040f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MjE5OWU3MjkyYTQ3ZGUxMDI1MmI0ZDYzNTBhODA4OTNiMDQwZjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-06-03T16:26:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-03T16:26:20Z"}, "message": "Doc comments for librustc/hir/lowering.rs", "tree": {"sha": "ae9387d64502b7a14acb676f1a7d0c3ddd5361c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae9387d64502b7a14acb676f1a7d0c3ddd5361c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/472199e7292a47de10252b4d6350a80893b040f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/472199e7292a47de10252b4d6350a80893b040f9", "html_url": "https://github.com/rust-lang/rust/commit/472199e7292a47de10252b4d6350a80893b040f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/472199e7292a47de10252b4d6350a80893b040f9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df5dfbb575b1320f8b666f9707edb5b5563118e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df5dfbb575b1320f8b666f9707edb5b5563118e", "html_url": "https://github.com/rust-lang/rust/commit/8df5dfbb575b1320f8b666f9707edb5b5563118e"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "6e98c57d1cd3a9fddf4dabd544ddf3c90b7328e6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/472199e7292a47de10252b4d6350a80893b040f9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472199e7292a47de10252b4d6350a80893b040f9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=472199e7292a47de10252b4d6350a80893b040f9", "patch": "@@ -8,37 +8,37 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Lowers the AST to the HIR.\n-//\n-// Since the AST and HIR are fairly similar, this is mostly a simple procedure,\n-// much like a fold. Where lowering involves a bit more work things get more\n-// interesting and there are some invariants you should know about. These mostly\n-// concern spans and ids.\n-//\n-// Spans are assigned to AST nodes during parsing and then are modified during\n-// expansion to indicate the origin of a node and the process it went through\n-// being expanded. Ids are assigned to AST nodes just before lowering.\n-//\n-// For the simpler lowering steps, ids and spans should be preserved. Unlike\n-// expansion we do not preserve the process of lowering in the spans, so spans\n-// should not be modified here. When creating a new node (as opposed to\n-// 'folding' an existing one), then you create a new id using `next_id()`.\n-//\n-// You must ensure that ids are unique. That means that you should only use the\n-// id from an AST node in a single HIR node (you can assume that AST node ids\n-// are unique). Every new node must have a unique id. Avoid cloning HIR nodes.\n-// If you do, you must then set the new node's id to a fresh one.\n-//\n-// Spans are used for error messages and for tools to map semantics back to\n-// source code. It is therefore not as important with spans as ids to be strict\n-// about use (you can't break the compiler by screwing up a span). Obviously, a\n-// HIR node can only have a single span. But multiple nodes can have the same\n-// span and spans don't need to be kept in order, etc. Where code is preserved\n-// by lowering, it should have the same span as in the AST. Where HIR nodes are\n-// new it is probably best to give a span for the whole AST node being lowered.\n-// All nodes should have real spans, don't use dummy spans. Tools are likely to\n-// get confused if the spans from leaf AST nodes occur in multiple places\n-// in the HIR, especially for multiple identifiers.\n+//! Lowers the AST to the HIR.\n+//!\n+//! Since the AST and HIR are fairly similar, this is mostly a simple procedure,\n+//! much like a fold. Where lowering involves a bit more work things get more\n+//! interesting and there are some invariants you should know about. These mostly\n+//! concern spans and ids.\n+//!\n+//! Spans are assigned to AST nodes during parsing and then are modified during\n+//! expansion to indicate the origin of a node and the process it went through\n+//! being expanded. Ids are assigned to AST nodes just before lowering.\n+//!\n+//! For the simpler lowering steps, ids and spans should be preserved. Unlike\n+//! expansion we do not preserve the process of lowering in the spans, so spans\n+//! should not be modified here. When creating a new node (as opposed to\n+//! 'folding' an existing one), then you create a new id using `next_id()`.\n+//!\n+//! You must ensure that ids are unique. That means that you should only use the\n+//! id from an AST node in a single HIR node (you can assume that AST node ids\n+//! are unique). Every new node must have a unique id. Avoid cloning HIR nodes.\n+//! If you do, you must then set the new node's id to a fresh one.\n+//!\n+//! Spans are used for error messages and for tools to map semantics back to\n+//! source code. It is therefore not as important with spans as ids to be strict\n+//! about use (you can't break the compiler by screwing up a span). Obviously, a\n+//! HIR node can only have a single span. But multiple nodes can have the same\n+//! span and spans don't need to be kept in order, etc. Where code is preserved\n+//! by lowering, it should have the same span as in the AST. Where HIR nodes are\n+//! new it is probably best to give a span for the whole AST node being lowered.\n+//! All nodes should have real spans, don't use dummy spans. Tools are likely to\n+//! get confused if the spans from leaf AST nodes occur in multiple places\n+//! in the HIR, especially for multiple identifiers.\n \n use hir;\n use hir::map::{Definitions, DefKey, REGULAR_SPACE};\n@@ -70,8 +70,10 @@ const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n pub struct LoweringContext<'a> {\n     crate_root: Option<&'static str>,\n+    \n     // Use to assign ids to hir nodes that do not directly correspond to an ast node\n     sess: &'a Session,\n+    \n     // As we walk the AST we must keep track of the current 'parent' def id (in\n     // the form of a DefIndex) so that if we create a new node which introduces\n     // a definition, then we can properly create the def id.\n@@ -102,14 +104,14 @@ pub struct LoweringContext<'a> {\n }\n \n pub trait Resolver {\n-    // Resolve a hir path generated by the lowerer when expanding `for`, `if let`, etc.\n+    /// Resolve a hir path generated by the lowerer when expanding `for`, `if let`, etc.\n     fn resolve_hir_path(&mut self, path: &mut hir::Path, is_value: bool);\n \n-    // Obtain the resolution for a node id\n+    /// Obtain the resolution for a node id\n     fn get_resolution(&mut self, id: NodeId) -> Option<PathResolution>;\n \n-    // We must keep the set of definitions up to date as we add nodes that weren't in the AST.\n-    // This should only return `None` during testing.\n+    /// We must keep the set of definitions up to date as we add nodes that weren't in the AST.\n+    /// This should only return `None` during testing.\n     fn definitions(&mut self) -> &mut Definitions;\n }\n "}]}