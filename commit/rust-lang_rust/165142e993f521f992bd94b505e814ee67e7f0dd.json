{"sha": "165142e993f521f992bd94b505e814ee67e7f0dd", "node_id": "C_kwDOAAsO6NoAKDE2NTE0MmU5OTNmNTIxZjk5MmJkOTRiNTA1ZTgxNGVlNjdlN2YwZGQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-25T11:09:01Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-14T06:32:34Z"}, "message": "fuzzify `fuzzy_match_tys`", "tree": {"sha": "3b9f5aec9e895df3100293f7886f5959ffaba7a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9f5aec9e895df3100293f7886f5959ffaba7a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/165142e993f521f992bd94b505e814ee67e7f0dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/165142e993f521f992bd94b505e814ee67e7f0dd", "html_url": "https://github.com/rust-lang/rust/commit/165142e993f521f992bd94b505e814ee67e7f0dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/165142e993f521f992bd94b505e814ee67e7f0dd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002456a95a59ee065d40b04a209030f843f2b783", "url": "https://api.github.com/repos/rust-lang/rust/commits/002456a95a59ee065d40b04a209030f843f2b783", "html_url": "https://github.com/rust-lang/rust/commit/002456a95a59ee065d40b04a209030f843f2b783"}], "stats": {"total": 188, "additions": 68, "deletions": 120}, "files": [{"sha": "ac7140ca2b67d32b8ebf60353542b7d44ec6b36d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 37, "deletions": 100, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -21,10 +21,9 @@ use rustc_hir::Item;\n use rustc_hir::Node;\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n-use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{\n-    self, AdtKind, SubtypePredicate, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    self, SubtypePredicate, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_session::DiagnosticMessageId;\n use rustc_span::symbol::{kw, sym};\n@@ -44,9 +43,7 @@ pub use rustc_infer::traits::error_reporting::*;\n #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub enum CandidateSimilarity {\n     Exact,\n-    Simplified,\n     Fuzzy,\n-    Unknown,\n }\n \n #[derive(Debug, Clone, Copy)]\n@@ -1158,7 +1155,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n         error: &MismatchedProjectionTypes<'tcx>,\n     );\n \n-    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>, strip_references: StripReferences) -> bool;\n+    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool;\n \n     fn describe_generator(&self, body_id: hir::BodyId) -> Option<&'static str>;\n \n@@ -1461,7 +1458,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         });\n     }\n \n-    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>, strip_references: StripReferences) -> bool {\n+    fn fuzzy_match_tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n         /// returns the fuzzy category of a given type, or None\n         /// if the type can be equated to any type.\n         fn type_category(t: Ty<'_>) -> Option<u32> {\n@@ -1481,19 +1478,15 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 ty::Param(..) => Some(12),\n                 ty::Opaque(..) => Some(13),\n                 ty::Never => Some(14),\n-                ty::Adt(adt, ..) => match adt.adt_kind() {\n-                    AdtKind::Struct => Some(15),\n-                    AdtKind::Union => Some(16),\n-                    AdtKind::Enum => Some(17),\n-                },\n-                ty::Generator(..) => Some(18),\n-                ty::Foreign(..) => Some(19),\n-                ty::GeneratorWitness(..) => Some(20),\n+                ty::Adt(..) => Some(15),\n+                ty::Generator(..) => Some(16),\n+                ty::Foreign(..) => Some(17),\n+                ty::GeneratorWitness(..) => Some(18),\n                 ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error(_) => None,\n             }\n         }\n \n-        let strip_reference = |mut t: Ty<'tcx>| -> Ty<'tcx> {\n+        let strip_references = |mut t: Ty<'tcx>| -> Ty<'tcx> {\n             loop {\n                 match t.kind() {\n                     ty::Ref(_, inner, _) | ty::RawPtr(ty::TypeAndMut { ty: inner, .. }) => {\n@@ -1504,16 +1497,14 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        let (a, b) = if strip_references == StripReferences::Yes {\n-            (strip_reference(a), strip_reference(b))\n-        } else {\n-            (a, b)\n-        };\n-\n         match (type_category(a), type_category(b)) {\n             (Some(cat_a), Some(cat_b)) => match (a.kind(), b.kind()) {\n-                (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => def_a == def_b,\n-                _ => cat_a == cat_b,\n+                (ty::Adt(def_a, _), ty::Adt(def_b, _)) => def_a == def_b,\n+                _ if cat_a == cat_b => true,\n+                (ty::Ref(..), _) | (_, ty::Ref(..)) => {\n+                    self.fuzzy_match_tys(strip_references(a), strip_references(b))\n+                }\n+                _ => false,\n             },\n             // infer and error can be equated to all types\n             _ => true,\n@@ -1533,87 +1524,33 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n     ) -> Vec<ImplCandidate<'tcx>> {\n-        // We simplify params and strip references here.\n-        //\n-        // This both removes a lot of unhelpful suggestions, e.g.\n-        // when searching for `&Foo: Trait` it doesn't suggestion `impl Trait for &Bar`,\n-        // while also suggesting impls for `&Foo` when we're looking for `Foo: Trait`.\n-        //\n-        // The second thing isn't necessarily always a good thing, but\n-        // any other simple setup results in a far worse output, so \ud83e\udd37\n-        let simp = fast_reject::simplify_type(\n-            self.tcx,\n-            trait_ref.skip_binder().self_ty(),\n-            SimplifyParams::Yes,\n-            StripReferences::Yes,\n-        );\n-        let all_impls = self.tcx.all_impls(trait_ref.def_id());\n-\n-        match simp {\n-            Some(simp) => {\n-                all_impls\n-                    .filter_map(|def_id| {\n-                        if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n-                            return None;\n-                        }\n+        self.tcx\n+            .all_impls(trait_ref.def_id())\n+            .filter_map(|def_id| {\n+                if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n+                    return None;\n+                }\n \n-                        let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n+                let imp = self.tcx.impl_trait_ref(def_id).unwrap();\n \n-                        // Check for exact match.\n-                        if trait_ref.skip_binder().self_ty() == imp.self_ty() {\n-                            return Some(ImplCandidate {\n-                                trait_ref: imp,\n-                                similarity: CandidateSimilarity::Exact,\n-                            });\n-                        }\n-\n-                        // Check for match between simplified types.\n-                        let imp_simp = fast_reject::simplify_type(\n-                            self.tcx,\n-                            imp.self_ty(),\n-                            SimplifyParams::Yes,\n-                            StripReferences::Yes,\n-                        );\n-                        if let Some(imp_simp) = imp_simp {\n-                            if simp == imp_simp {\n-                                return Some(ImplCandidate {\n-                                    trait_ref: imp,\n-                                    similarity: CandidateSimilarity::Simplified,\n-                                });\n-                            }\n-                        }\n+                // Check for exact match.\n+                if trait_ref.skip_binder().self_ty() == imp.self_ty() {\n+                    return Some(ImplCandidate {\n+                        trait_ref: imp,\n+                        similarity: CandidateSimilarity::Exact,\n+                    });\n+                }\n \n-                        // Check for fuzzy match.\n-                        // Pass `StripReferences::Yes` because although we do want to\n-                        // be fuzzier than `simplify_type`, we don't want to be\n-                        // *too* fuzzy.\n-                        if self.fuzzy_match_tys(\n-                            trait_ref.skip_binder().self_ty(),\n-                            imp.self_ty(),\n-                            StripReferences::Yes,\n-                        ) {\n-                            return Some(ImplCandidate {\n-                                trait_ref: imp,\n-                                similarity: CandidateSimilarity::Fuzzy,\n-                            });\n-                        }\n+                if self.fuzzy_match_tys(trait_ref.skip_binder().self_ty(), imp.self_ty()) {\n+                    return Some(ImplCandidate {\n+                        trait_ref: imp,\n+                        similarity: CandidateSimilarity::Fuzzy,\n+                    });\n+                }\n \n-                        None\n-                    })\n-                    .collect()\n-            }\n-            None => all_impls\n-                .filter_map(|def_id| {\n-                    if self.tcx.impl_polarity(def_id) == ty::ImplPolarity::Negative {\n-                        return None;\n-                    }\n-                    self.tcx.impl_trait_ref(def_id).map(|trait_ref| ImplCandidate {\n-                        trait_ref,\n-                        similarity: CandidateSimilarity::Unknown,\n-                    })\n-                })\n-                .collect(),\n-        }\n+                None\n+            })\n+            .collect()\n     }\n \n     fn report_similar_impl_candidates("}, {"sha": "4e7a34d5951113f7474180891ad2f2f58c9bfde0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -4,7 +4,6 @@ use super::{\n use crate::infer::InferCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::fast_reject::StripReferences;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, GenericParamDefKind};\n use rustc_span::symbol::sym;\n@@ -57,7 +56,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     trait_ref.substs.types().skip(1),\n                     impl_trait_ref.substs.types().skip(1),\n                 )\n-                .all(|(u, v)| self.fuzzy_match_tys(u, v, StripReferences::No))\n+                .all(|(u, v)| self.fuzzy_match_tys(u, v))\n                 {\n                     fuzzy_match_impls.push(def_id);\n                 }"}, {"sha": "6d19186bde49a51c692a593d11b9cab5da3f298c", "filename": "src/test/ui/associated-types/hr-associated-type-bound-object.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -4,8 +4,6 @@ error[E0277]: the trait bound `for<'b> <T as X<'b>>::U: Clone` is not satisfied\n LL | fn f<'a, T: X<'a> + ?Sized>(x: &<T as X<'a>>::U) {\n    |             ^^^^^ the trait `for<'b> Clone` is not implemented for `<T as X<'b>>::U`\n    |\n-   = help: the following implementations were found:\n-             <&T as Clone>\n note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-object.rs:3:33\n    |"}, {"sha": "b869a70039c4fb7aebc451767bcbeda66ee409a5", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -4,8 +4,6 @@ error[E0277]: the trait bound `{integer}: Scalar` is not satisfied\n LL |   b + 3\n    |     ^ the trait `Scalar` is not implemented for `{integer}`\n    |\n-   = help: the following implementations were found:\n-             <f64 as Scalar>\n note: required because of the requirements on the impl of `Add<{integer}>` for `Bob`\n   --> $DIR/issue-22645.rs:8:19\n    |"}, {"sha": "a05d8d6aa37da6e1962e79865334fddfb075b0ba", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -6,9 +6,6 @@ LL |     only_bar(x);\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the following implementations were found:\n-             <i32 as Bar>\n-             <u32 as Bar>\n note: required by a bound in `only_bar`\n   --> $DIR/type_inference.rs:12:16\n    |"}, {"sha": "d029eb2400b8a2f81e7db8813052fa806e6bbccd", "filename": "src/test/ui/chalkify/type_wf.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_wf.stderr?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -4,9 +4,6 @@ error[E0277]: the trait bound `{float}: Foo` is not satisfied\n LL |     let s = S {\n    |             ^ the trait `Foo` is not implemented for `{float}`\n    |\n-   = help: the following implementations were found:\n-             <Option<T> as Foo>\n-             <i32 as Foo>\n note: required by a bound in `S`\n   --> $DIR/type_wf.rs:6:13\n    |"}, {"sha": "607db0d1129298586eb8f360c21f4ed5eb96aa1f", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -5,11 +5,11 @@ LL |     assert_copy::<&'static mut isize>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'static mut isize`\n    |\n    = help: the following implementations were found:\n-             <isize as Copy>\n+             <&T as Copy>\n+             <*const T as Copy>\n+             <*mut T as Copy>\n              <i128 as Copy>\n-             <i16 as Copy>\n-             <i32 as Copy>\n-           and 8 others\n+           and 11 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n@@ -23,11 +23,11 @@ LL |     assert_copy::<&'a mut isize>();\n    |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut isize`\n    |\n    = help: the following implementations were found:\n-             <isize as Copy>\n+             <&T as Copy>\n+             <*const T as Copy>\n+             <*mut T as Copy>\n              <i128 as Copy>\n-             <i16 as Copy>\n-             <i32 as Copy>\n-           and 8 others\n+           and 11 others\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |\n@@ -112,6 +112,10 @@ error[E0277]: the trait bound `&'a mut (dyn Dummy + Send + 'a): Copy` is not sat\n LL |     assert_copy::<&'a mut (dyn Dummy + Send)>();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut (dyn Dummy + Send + 'a)`\n    |\n+   = help: the following implementations were found:\n+             <&T as Copy>\n+             <*const T as Copy>\n+             <*mut T as Copy>\n note: required by a bound in `assert_copy`\n   --> $DIR/kindck-copy.rs:5:18\n    |"}, {"sha": "6aaeafceb42730db74ef069b77d35e1492f1555c", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -6,6 +6,12 @@ LL |     let fp = BufWriter::new(fp);\n    |              |\n    |              required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <&'a UnixStream as std::io::Write>\n+             <&ChildStdin as std::io::Write>\n+             <&File as std::io::Write>\n+             <&Sink as std::io::Write>\n+           and 5 others\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n note: required by a bound in `BufWriter::<W>::new`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n@@ -19,6 +25,12 @@ error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satis\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n    |\n+   = help: the following implementations were found:\n+             <&'a UnixStream as std::io::Write>\n+             <&ChildStdin as std::io::Write>\n+             <&File as std::io::Write>\n+             <&Sink as std::io::Write>\n+           and 5 others\n    = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n note: required by a bound in `BufWriter`\n   --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL"}, {"sha": "299219431ef113d13e17dd2124faad9b65cec510", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -8,6 +8,8 @@ LL |     takes_type_parameter(&string);  // Error\n    |     |                    help: consider adding dereference here: `&*string`\n    |     required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <&str as SomeTrait>\n note: required by a bound in `takes_type_parameter`\n   --> $DIR/issue-62530.rs:4:44\n    |"}, {"sha": "c629b06ba260266ef9d9dd0257764bb50bee1667", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -8,6 +8,8 @@ LL |     foo(&baz);\n    |     |   help: consider adding dereference here: `&***baz`\n    |     required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <&LDM as Happy>\n note: required by a bound in `foo`\n   --> $DIR/multiple-0.rs:30:26\n    |"}, {"sha": "b18c297ed995435aa065dc10c0252eaa3c7b9bb7", "filename": "src/test/ui/traits/suggest-deferences/multiple-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/165142e993f521f992bd94b505e814ee67e7f0dd/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr?ref=165142e993f521f992bd94b505e814ee67e7f0dd", "patch": "@@ -6,6 +6,8 @@ LL |     foo(&mut baz);\n    |     |\n    |     required by a bound introduced by this call\n    |\n+   = help: the following implementations were found:\n+             <&mut LDM as Happy>\n note: required by a bound in `foo`\n   --> $DIR/multiple-1.rs:45:26\n    |"}]}