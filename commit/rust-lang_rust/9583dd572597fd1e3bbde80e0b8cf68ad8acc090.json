{"sha": "9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "node_id": "C_kwDOAAsO6NoAKDk1ODNkZDU3MjU5N2ZkMWUzYmJkZTgwZTBiOGNmNjhhZDhhY2MwOTA", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-10-03T12:53:01Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-10-04T22:00:21Z"}, "message": "Replace `if let` with `match` where appropriate", "tree": {"sha": "794e2e3e5e187d5d0668dc41606171fa256ad2c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/794e2e3e5e187d5d0668dc41606171fa256ad2c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmFbeXUACgkQ94j36ZAT\nYAP0kA/9Fl+klnN+8CPgtFAkhe7BDtJ0W1m+Zuoio5/4eBiCcRswcxmCVPjF1xyW\nx3PxYb/QBylcuHNUuOz7J2LJeSW+wcz5jlCz1NqTDjA49FjvZvf84OjQ4BQsD4NU\nPuCoUYq+R8Wextfz6q3yEcg1lrzqTh3q24dJzMKdV7ti8qluEbvAHs99T2YVUteu\no0hqiuS0q/arutGrRHjgbDbT5Ljd202UQD4mWBOYjqPaNfQMQ9iDJ9aJOyqRzhYn\nD/bRros6BJSS8civcZ9/5AdKMibGYAmWeWj4dL0p5/ROMJ5G6ahMkZivXnLOG52a\nVBlgOrrrlG8ghvl8MWLgUL4yhNCXMWJy7snc9FVsOcFlaOoTfwnb8IA7VM4M6o/N\n8od5nEfgGOmFK2CTWH5spyzVrqB9pZgh8BQTE8mPbgM+Oip90gVz+P5bZOdUEljV\nOLb5yszMEwGZH45K5bjkdfaQawGdZs2Zk1XWlfxL71HA4NLemUaG48EGX0rdFE/S\nsTU7DdsJTOtRwVdgg8KtLCvfo4CNvu4vFWrACC+UoF/ue+/164Xn7nqWdXg4BLr6\nfal1/2CL24oRDsXdRtisJwptmUU3MoT6xwdK8CPY/nxXth5rPMulDYCXtJ6xo4g3\neLkhNLV2wpLM6rkQb5WE2+vaAlHhLLoqY4nq7PXP861SGYVp0OQ=\n=0ktn\n-----END PGP SIGNATURE-----", "payload": "tree 794e2e3e5e187d5d0668dc41606171fa256ad2c2\nparent f29796da61d6103d6566da59adb9c3ea02e31c72\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1633265581 +1100\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1633384821 +1100\n\nReplace `if let` with `match` where appropriate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "html_url": "https://github.com/rust-lang/rust/commit/9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f29796da61d6103d6566da59adb9c3ea02e31c72", "url": "https://api.github.com/repos/rust-lang/rust/commits/f29796da61d6103d6566da59adb9c3ea02e31c72", "html_url": "https://github.com/rust-lang/rust/commit/f29796da61d6103d6566da59adb9c3ea02e31c72"}], "stats": {"total": 470, "additions": 201, "deletions": 269}, "files": [{"sha": "038c69bc73257acf5ba42402dea648b5c2bd0cb6", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -2119,10 +2119,9 @@ impl Impl {\n         };\n \n         let fp = TyFingerprint::for_inherent_impl(&ty);\n-        let fp = if let Some(fp) = fp {\n-            fp\n-        } else {\n-            return Vec::new();\n+        let fp = match fp {\n+            Some(fp) => fp,\n+            None => return Vec::new(),\n         };\n \n         let mut all = Vec::new();"}, {"sha": "4c1a3344ec9b55f3e3cddd1e85cebe8d201f84da", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -474,10 +474,9 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::PrefixExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                if let Some(op) = e.op_kind() {\n-                    self.alloc_expr(Expr::UnaryOp { expr, op }, syntax_ptr)\n-                } else {\n-                    self.alloc_expr(Expr::Missing, syntax_ptr)\n+                match e.op_kind() {\n+                    Some(op) => self.alloc_expr(Expr::UnaryOp { expr, op }, syntax_ptr),\n+                    None => self.alloc_expr(Expr::Missing, syntax_ptr),\n                 }\n             }\n             ast::Expr::ClosureExpr(e) => {\n@@ -624,10 +623,9 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_expr_opt(&mut self, expr: Option<ast::Expr>) -> ExprId {\n-        if let Some(expr) = expr {\n-            self.collect_expr(expr)\n-        } else {\n-            self.missing_expr()\n+        match expr {\n+            Some(expr) => self.collect_expr(expr),\n+            None => self.missing_expr(),\n         }\n     }\n \n@@ -724,10 +722,9 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_block_opt(&mut self, expr: Option<ast::BlockExpr>) -> ExprId {\n-        if let Some(block) = expr {\n-            self.collect_block(block)\n-        } else {\n-            self.missing_expr()\n+        match expr {\n+            Some(block) => self.collect_block(block),\n+            None => self.missing_expr(),\n         }\n     }\n \n@@ -890,10 +887,9 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_pat_opt(&mut self, pat: Option<ast::Pat>) -> PatId {\n-        if let Some(pat) = pat {\n-            self.collect_pat(pat)\n-        } else {\n-            self.missing_pat()\n+        match pat {\n+            Some(pat) => self.collect_pat(pat),\n+            None => self.missing_pat(),\n         }\n     }\n "}, {"sha": "3251638c7aaeda6da0fd10c968bfccfdb067b37d", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -209,10 +209,9 @@ fn find_path_inner(\n             ) {\n                 path.push_segment(name);\n \n-                let new_path = if let Some(best_path) = best_path {\n-                    select_best_path(best_path, path, prefer_no_std)\n-                } else {\n-                    path\n+                let new_path = match best_path {\n+                    Some(best_path) => select_best_path(best_path, path, prefer_no_std),\n+                    None => path,\n                 };\n                 best_path_len = new_path.len();\n                 best_path = Some(new_path);\n@@ -243,10 +242,9 @@ fn find_path_inner(\n         });\n \n         for path in extern_paths {\n-            let new_path = if let Some(best_path) = best_path {\n-                select_best_path(best_path, path, prefer_no_std)\n-            } else {\n-                path\n+            let new_path = match best_path {\n+                Some(best_path) => select_best_path(best_path, path, prefer_no_std),\n+                None => path,\n             };\n             best_path = Some(new_path);\n         }\n@@ -261,12 +259,11 @@ fn find_path_inner(\n         }\n     }\n \n-    if let Some(prefix) = prefixed.map(PrefixKind::prefix) {\n-        best_path.or_else(|| {\n+    match prefixed.map(PrefixKind::prefix) {\n+        Some(prefix) => best_path.or_else(|| {\n             scope_name.map(|scope_name| ModPath::from_segments(prefix, vec![scope_name]))\n-        })\n-    } else {\n-        best_path\n+        }),\n+        None => best_path,\n     }\n }\n \n@@ -346,15 +343,13 @@ fn find_local_import_locations(\n \n         if let Some((name, vis)) = data.scope.name_of(item) {\n             if vis.is_visible_from(db, from) {\n-                let is_private = if let Visibility::Module(private_to) = vis {\n-                    private_to.local_id == module.local_id\n-                } else {\n-                    false\n+                let is_private = match vis {\n+                    Visibility::Module(private_to) => private_to.local_id == module.local_id,\n+                    Visibility::Public => false,\n                 };\n-                let is_original_def = if let Some(module_def_id) = item.as_module_def_id() {\n-                    data.scope.declarations().any(|it| it == module_def_id)\n-                } else {\n-                    false\n+                let is_original_def = match item.as_module_def_id() {\n+                    Some(module_def_id) => data.scope.declarations().any(|it| it == module_def_id),\n+                    None => false,\n                 };\n \n                 // Ignore private imports. these could be used if we are"}, {"sha": "b7a5758a0a2c95496a03a5a2c0655bcb87334a95", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -475,10 +475,9 @@ macro_rules! mod_items {\n                 }\n \n                 fn id_from_mod_item(mod_item: ModItem) -> Option<FileItemTreeId<Self>> {\n-                    if let ModItem::$typ(id) = mod_item {\n-                        Some(id)\n-                    } else {\n-                        None\n+                    match mod_item {\n+                        ModItem::$typ(id) => Some(id),\n+                        _ => None,\n                     }\n                 }\n "}, {"sha": "30f11cc69435ecbea1b41695d6dc1a4a70b5c0f9", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -400,13 +400,10 @@ impl DefMap {\n         };\n         let from_scope_or_builtin = match shadow {\n             BuiltinShadowMode::Module => from_scope.or(from_builtin),\n-            BuiltinShadowMode::Other => {\n-                if let Some(ModuleDefId::ModuleId(_)) = from_scope.take_types() {\n-                    from_builtin.or(from_scope)\n-                } else {\n-                    from_scope.or(from_builtin)\n-                }\n-            }\n+            BuiltinShadowMode::Other => match from_scope.take_types() {\n+                Some(ModuleDefId::ModuleId(_)) => from_builtin.or(from_scope),\n+                Some(_) | None => from_scope.or(from_builtin),\n+            },\n         };\n         let from_extern_prelude = self\n             .extern_prelude"}, {"sha": "6b777cfeff4ec4e6787b7b08f170ecdaf9cb8828", "filename": "crates/hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -18,10 +18,9 @@ pub(crate) fn convert_path(\n     path: ast::Path,\n     hygiene: &Hygiene,\n ) -> Option<ModPath> {\n-    let prefix = if let Some(qual) = path.qualifier() {\n-        Some(convert_path(db, prefix, qual, hygiene)?)\n-    } else {\n-        prefix\n+    let prefix = match path.qualifier() {\n+        Some(qual) => Some(convert_path(db, prefix, qual, hygiene)?),\n+        None => prefix,\n     };\n \n     let segment = path.segment()?;"}, {"sha": "cfc69feccc6ca4ce3220e572370e7846597ccbd7", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -214,10 +214,9 @@ impl TypeRef {\n     }\n \n     pub(crate) fn from_ast_opt(ctx: &LowerCtx, node: Option<ast::Type>) -> Self {\n-        if let Some(node) = node {\n-            TypeRef::from_ast(ctx, node)\n-        } else {\n-            TypeRef::Error\n+        match node {\n+            Some(node) => TypeRef::from_ast(ctx, node),\n+            None => TypeRef::Error,\n         }\n     }\n "}, {"sha": "552603dce7a8b8ff3792d5ae1e85f2b553a4a3e6", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -48,10 +48,9 @@ impl Name {\n \n     /// Resolve a name from the text of token.\n     fn resolve(raw_text: &str) -> Name {\n-        if let Some(text) = raw_text.strip_prefix(\"r#\") {\n-            Name::new_text(SmolStr::new(text))\n-        } else {\n-            Name::new_text(raw_text.into())\n+        match raw_text.strip_prefix(\"r#\") {\n+            Some(text) => Name::new_text(SmolStr::new(text)),\n+            None => Name::new_text(raw_text.into()),\n         }\n     }\n "}, {"sha": "4dc46a2cdeaffbd33fd60f5ab2f22037fab4bc35", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -109,10 +109,9 @@ pub(crate) fn deref(\n     ty: InEnvironment<&Canonical<Ty>>,\n ) -> Option<Canonical<Ty>> {\n     let _p = profile::span(\"deref\");\n-    if let Some(derefed) = builtin_deref(&ty.goal.value) {\n-        Some(Canonical { value: derefed, binders: ty.goal.binders.clone() })\n-    } else {\n-        deref_by_trait(db, krate, ty)\n+    match builtin_deref(&ty.goal.value) {\n+        Some(derefed) => Some(Canonical { value: derefed, binders: ty.goal.binders.clone() }),\n+        None => deref_by_trait(db, krate, ty),\n     }\n }\n "}, {"sha": "36c56820eb67fa39efe54d8fbf3f73f8e4bf60e6", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -104,10 +104,9 @@ impl TyExt for Ty {\n     }\n \n     fn as_fn_def(&self, db: &dyn HirDatabase) -> Option<FunctionId> {\n-        if let Some(CallableDefId::FunctionId(func)) = self.callable_def(db) {\n-            Some(func)\n-        } else {\n-            None\n+        match self.callable_def(db) {\n+            Some(CallableDefId::FunctionId(func)) => Some(func),\n+            Some(CallableDefId::StructId(_) | CallableDefId::EnumVariantId(_)) | None => None,\n         }\n     }\n     fn as_reference(&self) -> Option<(&Ty, Lifetime, Mutability)> {"}, {"sha": "f9439c706e302a1ddfc5c8bc792ad55deaca455f", "filename": "crates/hir_ty/src/diagnostics/match_check/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fdeconstruct_pat.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -105,10 +105,9 @@ impl IntRange {\n \n     #[inline]\n     fn from_range(lo: u128, hi: u128, scalar_ty: Scalar) -> IntRange {\n-        if let Scalar::Bool = scalar_ty {\n-            IntRange { range: lo..=hi }\n-        } else {\n-            unimplemented!()\n+        match scalar_ty {\n+            Scalar::Bool => IntRange { range: lo..=hi },\n+            _ => unimplemented!(),\n         }\n     }\n "}, {"sha": "adce43aa07ead99525bdabbec310bb289ad3aa6b", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -167,10 +167,9 @@ impl<'a> HirFormatter<'a> {\n     }\n \n     pub fn should_truncate(&self) -> bool {\n-        if let Some(max_size) = self.max_size {\n-            self.curr_size >= max_size\n-        } else {\n-            false\n+        match self.max_size {\n+            Some(max_size) => self.curr_size >= max_size,\n+            None => false,\n         }\n     }\n "}, {"sha": "f5bc898a85b2ad01681226e2ec463a85f394f965", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -264,10 +264,9 @@ impl<'a> InferenceContext<'a> {\n \n                 // collect explicitly written argument types\n                 for arg_type in arg_types.iter() {\n-                    let arg_ty = if let Some(type_ref) = arg_type {\n-                        self.make_ty(type_ref)\n-                    } else {\n-                        self.table.new_type_var()\n+                    let arg_ty = match arg_type {\n+                        Some(type_ref) => self.make_ty(type_ref),\n+                        None => self.table.new_type_var(),\n                     };\n                     sig_tys.push(arg_ty);\n                 }"}, {"sha": "9aaf7db87be58fbb1a3d74d1b9196f40bd87b1dc", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -204,10 +204,9 @@ impl<'a> InferenceContext<'a> {\n                 } else {\n                     BindingMode::convert(*mode)\n                 };\n-                let inner_ty = if let Some(subpat) = subpat {\n-                    self.infer_pat(*subpat, &expected, default_bm)\n-                } else {\n-                    expected\n+                let inner_ty = match subpat {\n+                    Some(subpat) => self.infer_pat(*subpat, &expected, default_bm),\n+                    None => expected,\n                 };\n                 let inner_ty = self.insert_type_vars_shallow(inner_ty);\n "}, {"sha": "c40ef7f587553c3e9c7b7ef3a5e1a3350b1a2de0", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -324,10 +324,9 @@ impl<'a> InferenceTable<'a> {\n \n     /// Unify two types and register new trait goals that arise from that.\n     pub(crate) fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n-        let result = if let Ok(r) = self.try_unify(ty1, ty2) {\n-            r\n-        } else {\n-            return false;\n+        let result = match self.try_unify(ty1, ty2) {\n+            Ok(r) => r,\n+            Err(_) => return false,\n         };\n         self.register_infer_ok(result);\n         true"}, {"sha": "df1eb1c961683de3ee928a5eaf7335e109929a7c", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -368,10 +368,9 @@ impl<'a> TyLoweringContext<'a> {\n                 Some((it, None)) => it,\n                 _ => return None,\n             };\n-        if let TypeNs::GenericParam(param_id) = resolution {\n-            Some(param_id)\n-        } else {\n-            None\n+        match resolution {\n+            TypeNs::GenericParam(param_id) => Some(param_id),\n+            _ => None,\n         }\n     }\n "}, {"sha": "8e6ab8af0f2fac19d136fffd681146fd674c486f", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -82,10 +82,9 @@ impl TyFingerprint {\n             TyKind::Ref(_, _, ty) => return TyFingerprint::for_trait_impl(ty),\n             TyKind::Tuple(_, subst) => {\n                 let first_ty = subst.interned().get(0).map(|arg| arg.assert_ty_ref(&Interner));\n-                if let Some(ty) = first_ty {\n-                    return TyFingerprint::for_trait_impl(ty);\n-                } else {\n-                    TyFingerprint::Unit\n+                match first_ty {\n+                    Some(ty) => return TyFingerprint::for_trait_impl(ty),\n+                    None => TyFingerprint::Unit,\n                 }\n             }\n             TyKind::AssociatedType(_, _)"}, {"sha": "29250dca00ccafd2fc806ea141db80f79e91a833", "filename": "crates/hir_ty/src/tests.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fhir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -195,10 +195,9 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n                 mismatch.expected.display_test(&db),\n                 mismatch.actual.display_test(&db)\n             );\n-            if let Some(annotation) = mismatches.remove(&range) {\n-                assert_eq!(actual, annotation);\n-            } else {\n-                format_to!(unexpected_type_mismatches, \"{:?}: {}\\n\", range.range, actual);\n+            match mismatches.remove(&range) {\n+                Some(annotation) => assert_eq!(actual, annotation),\n+                None => format_to!(unexpected_type_mismatches, \"{:?}: {}\\n\", range.range, actual),\n             }\n         }\n         for (expr, mismatch) in inference_result.expr_type_mismatches() {\n@@ -215,10 +214,9 @@ fn check_impl(ra_fixture: &str, allow_none: bool, only_types: bool, display_sour\n                 mismatch.expected.display_test(&db),\n                 mismatch.actual.display_test(&db)\n             );\n-            if let Some(annotation) = mismatches.remove(&range) {\n-                assert_eq!(actual, annotation);\n-            } else {\n-                format_to!(unexpected_type_mismatches, \"{:?}: {}\\n\", range.range, actual);\n+            match mismatches.remove(&range) {\n+                Some(annotation) => assert_eq!(actual, annotation),\n+                None => format_to!(unexpected_type_mismatches, \"{:?}: {}\\n\", range.range, actual),\n             }\n         }\n     }"}, {"sha": "01c1259fc54ed1e5e8c0ba72b446601b6ca057f3", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -292,10 +292,9 @@ impl TryToNav for hir::Impl {\n     fn try_to_nav(&self, db: &RootDatabase) -> Option<NavigationTarget> {\n         let src = self.source(db)?;\n         let derive_attr = self.is_builtin_derive(db);\n-        let frange = if let Some(item) = &derive_attr {\n-            item.syntax().original_file_range(db)\n-        } else {\n-            src.syntax().original_file_range(db)\n+        let frange = match &derive_attr {\n+            Some(item) => item.syntax().original_file_range(db),\n+            None => src.syntax().original_file_range(db),\n         };\n         let focus_range = if derive_attr.is_some() {\n             None"}, {"sha": "4851f9aee0c7fbd331356e595db0f5bfc098db56", "filename": "crates/ide/src/join_lines.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fjoin_lines.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -136,10 +136,9 @@ fn remove_newline(\n             }\n             T!['}'] => {\n                 // Removes: comma, newline (incl. surrounding whitespace)\n-                let space = if let Some(left) = prev.prev_sibling_or_token() {\n-                    compute_ws(left.kind(), next.kind())\n-                } else {\n-                    \" \"\n+                let space = match prev.prev_sibling_or_token() {\n+                    Some(left) => compute_ws(left.kind(), next.kind()),\n+                    None => \" \",\n                 };\n                 edit.replace(\n                     TextRange::new(prev.text_range().start(), token.text_range().end()),"}, {"sha": "eb1a04c3f7614d8f2dd6f1b3c1a7f6689fbbf382", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -103,10 +103,9 @@ impl StaticIndex<'_> {\n         for token in tokens {\n             let range = token.text_range();\n             let node = token.parent().unwrap();\n-            let def = if let Some(x) = get_definition(&sema, token.clone()) {\n-                x\n-            } else {\n-                continue;\n+            let def = match get_definition(&sema, token.clone()) {\n+                Some(x) => x,\n+                None => continue,\n             };\n             let id = if let Some(x) = self.def_map.get(&def) {\n                 *x\n@@ -124,10 +123,9 @@ impl StaticIndex<'_> {\n             let token = self.tokens.get_mut(id).unwrap();\n             token.references.push(ReferenceData {\n                 range: FileRange { range, file_id },\n-                is_definition: if let Some(x) = def.try_to_nav(self.db) {\n-                    x.file_id == file_id && x.focus_or_full_range() == range\n-                } else {\n-                    false\n+                is_definition: match def.try_to_nav(self.db) {\n+                    Some(x) => x.file_id == file_id && x.focus_or_full_range() == range,\n+                    None => false,\n                 },\n             });\n             result.tokens.push((range, id));"}, {"sha": "b7eb2aefad413a78049b54a28efb8529a44c15fe", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -827,10 +827,9 @@ impl FunctionBody {\n         locals\n             .map(|local| (local, local.source(ctx.db())))\n             .filter(|(_, src)| is_defined_outside_of_body(ctx, self, src))\n-            .filter_map(|(local, src)| {\n-                if let Either::Left(src) = src.value {\n-                    Some((local, src))\n-                } else {\n+            .filter_map(|(local, src)| match src.value {\n+                Either::Left(src) => Some((local, src)),\n+                Either::Right(_) => {\n                     stdx::never!(false, \"Local::is_self returned false, but source is SelfParam\");\n                     None\n                 }"}, {"sha": "419bf2787748697902e1b4847711fd465184eeaa", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -69,10 +69,11 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 None => to_extract.syntax().text_range(),\n             };\n \n-            if let Anchor::WrapInBlock(_) = anchor {\n-                format_to!(buf, \"{{ let {} = \", var_name);\n-            } else {\n-                format_to!(buf, \"let {} = \", var_name);\n+            match anchor {\n+                Anchor::Before(_) | Anchor::Replace(_) => {\n+                    format_to!(buf, \"let {} = \", var_name)\n+                }\n+                Anchor::WrapInBlock(_) => format_to!(buf, \"{{ let {} = \", var_name),\n             };\n             format_to!(buf, \"{}\", to_extract.syntax());\n "}, {"sha": "ea3656ed2148e79cb34b147219520f25ad5d40b7", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -213,10 +213,9 @@ impl FunctionTemplate {\n             Some(cap) => {\n                 let cursor = if self.should_focus_return_type {\n                     // Focus the return type if there is one\n-                    if let Some(ref ret_type) = self.ret_type {\n-                        ret_type.syntax()\n-                    } else {\n-                        self.tail_expr.syntax()\n+                    match self.ret_type {\n+                        Some(ref ret_type) => ret_type.syntax(),\n+                        None => self.tail_expr.syntax(),\n                     }\n                 } else {\n                     self.tail_expr.syntax()\n@@ -447,10 +446,9 @@ fn fn_args(\n         arg_types.push(match fn_arg_type(ctx, target_module, &arg) {\n             Some(ty) => {\n                 if !ty.is_empty() && ty.starts_with('&') {\n-                    if let Some((new_ty, _)) = useless_type_special_case(\"\", &ty[1..].to_owned()) {\n-                        new_ty\n-                    } else {\n-                        ty\n+                    match useless_type_special_case(\"\", &ty[1..].to_owned()) {\n+                        Some((new_ty, _)) => new_ty,\n+                        None => ty,\n                     }\n                 } else {\n                     ty\n@@ -575,20 +573,14 @@ fn next_space_for_fn_in_module(\n ) -> Option<(FileId, GeneratedFunctionTarget)> {\n     let file = module_source.file_id.original_file(db);\n     let assist_item = match &module_source.value {\n-        hir::ModuleSource::SourceFile(it) => {\n-            if let Some(last_item) = it.items().last() {\n-                GeneratedFunctionTarget::BehindItem(last_item.syntax().clone())\n-            } else {\n-                GeneratedFunctionTarget::BehindItem(it.syntax().clone())\n-            }\n-        }\n-        hir::ModuleSource::Module(it) => {\n-            if let Some(last_item) = it.item_list().and_then(|it| it.items().last()) {\n-                GeneratedFunctionTarget::BehindItem(last_item.syntax().clone())\n-            } else {\n-                GeneratedFunctionTarget::InEmptyItemList(it.item_list()?.syntax().clone())\n-            }\n-        }\n+        hir::ModuleSource::SourceFile(it) => match it.items().last() {\n+            Some(last_item) => GeneratedFunctionTarget::BehindItem(last_item.syntax().clone()),\n+            None => GeneratedFunctionTarget::BehindItem(it.syntax().clone()),\n+        },\n+        hir::ModuleSource::Module(it) => match it.item_list().and_then(|it| it.items().last()) {\n+            Some(last_item) => GeneratedFunctionTarget::BehindItem(last_item.syntax().clone()),\n+            None => GeneratedFunctionTarget::InEmptyItemList(it.item_list()?.syntax().clone()),\n+        },\n         hir::ModuleSource::BlockExpr(it) => {\n             if let Some(last_item) =\n                 it.statements().take_while(|stmt| matches!(stmt, ast::Stmt::Item(_))).last()"}, {"sha": "091f015ee0aaf3203df2c64d5e9b5a4b2a59ac88", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -141,10 +141,9 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext) -> Opt\n             for (file_id, refs) in usages.into_iter() {\n                 inline_refs_for_file(file_id, refs);\n             }\n-            if let Some(refs) = current_file_usage {\n-                inline_refs_for_file(def_file, refs);\n-            } else {\n-                builder.edit_file(def_file);\n+            match current_file_usage {\n+                Some(refs) => inline_refs_for_file(def_file, refs),\n+                None => builder.edit_file(def_file),\n             }\n             if remove_def {\n                 builder.delete(ast_func.syntax().text_range());"}, {"sha": "d142397c24f0b525df9277698d3f1afbf5e26f73", "filename": "crates/ide_assists/src/handlers/pull_assignment_up.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -127,12 +127,9 @@ impl<'a> AssignmentsCollector<'a> {\n         }\n     }\n     fn collect_block(&mut self, block: &ast::BlockExpr) -> Option<()> {\n-        let last_expr = block.tail_expr().or_else(|| {\n-            if let ast::Stmt::ExprStmt(stmt) = block.statements().last()? {\n-                stmt.expr()\n-            } else {\n-                None\n-            }\n+        let last_expr = block.tail_expr().or_else(|| match block.statements().last()? {\n+            ast::Stmt::ExprStmt(stmt) => stmt.expr(),\n+            ast::Stmt::Item(_) | ast::Stmt::LetStmt(_) => None,\n         })?;\n \n         if let ast::Expr::BinExpr(expr) = last_expr {"}, {"sha": "0b33acc39be05aea56199853cd0aef1fc09f6067", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -181,10 +181,9 @@ fn find_trait_method(\n fn item_as_trait(db: &RootDatabase, item: hir::ItemInNs) -> Option<hir::Trait> {\n     let item_module_def = item.as_module_def()?;\n \n-    if let hir::ModuleDef::Trait(trait_) = item_module_def {\n-        Some(trait_)\n-    } else {\n-        item_module_def.as_assoc_item(db)?.containing_trait(db)\n+    match item_module_def {\n+        hir::ModuleDef::Trait(trait_) => Some(trait_),\n+        _ => item_module_def.as_assoc_item(db)?.containing_trait(db),\n     }\n }\n "}, {"sha": "3d4ab968fbb8c02a311ac61b58b2ea29ee34e300", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -250,13 +250,10 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n             };\n             Some(make::expr_method_call(receiver, make::name_ref(method), arg_list))\n         }\n-        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::UnaryOp::Not => {\n-            if let ast::Expr::ParenExpr(parexpr) = pe.expr()? {\n-                parexpr.expr()\n-            } else {\n-                pe.expr()\n-            }\n-        }\n+        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::UnaryOp::Not => match pe.expr()? {\n+            ast::Expr::ParenExpr(parexpr) => parexpr.expr(),\n+            _ => pe.expr(),\n+        },\n         ast::Expr::Literal(lit) => match lit.kind() {\n             ast::LiteralKind::Bool(b) => match b {\n                 true => Some(ast::Expr::Literal(make::expr_literal(\"false\"))),\n@@ -276,13 +273,10 @@ pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n     let first_node_text = |pat: &ast::Pat| pat.syntax().first_child().map(|node| node.text());\n \n     let pat_head = match pat {\n-        ast::Pat::IdentPat(bind_pat) => {\n-            if let Some(p) = bind_pat.pat() {\n-                first_node_text(&p)\n-            } else {\n-                return pat.syntax().text() == var.syntax().text();\n-            }\n-        }\n+        ast::Pat::IdentPat(bind_pat) => match bind_pat.pat() {\n+            Some(p) => first_node_text(&p),\n+            None => return pat.syntax().text() == var.syntax().text(),\n+        },\n         pat => first_node_text(pat),\n     };\n "}, {"sha": "74523234b0e2f6c3b2784d63ea86a0bacf67ae66", "filename": "crates/ide_assists/src/utils/suggest_name.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -144,10 +144,9 @@ fn is_valid_name(name: &str) -> bool {\n fn is_useless_method(method: &ast::MethodCallExpr) -> bool {\n     let ident = method.name_ref().and_then(|it| it.ident_token());\n \n-    if let Some(ident) = ident {\n-        USELESS_METHODS.contains(&ident.text())\n-    } else {\n-        false\n+    match ident {\n+        Some(ident) => USELESS_METHODS.contains(&ident.text()),\n+        None => false,\n     }\n }\n "}, {"sha": "d6e15e6af7b3e474aad709dec1d3639fadb17f15", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -509,10 +509,9 @@ impl<'a> CompletionContext<'a> {\n                             .and_then(|pat| self.sema.type_of_pat(&pat))\n                             .or_else(|| it.initializer().and_then(|it| self.sema.type_of_expr(&it)))\n                             .map(TypeInfo::original);\n-                        let name = if let Some(ast::Pat::IdentPat(ident)) = it.pat() {\n-                            ident.name().map(NameOrNameRef::Name)\n-                        } else {\n-                            None\n+                        let name = match it.pat() {\n+                            Some(ast::Pat::IdentPat(ident)) => ident.name().map(NameOrNameRef::Name),\n+                            Some(_) | None => None,\n                         };\n \n                         (ty, name)"}, {"sha": "904624f9ab0161d1c67a9614a826bf5832fdb3ec", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -74,10 +74,9 @@ impl<'a> FunctionRender<'a> {\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let params = self.params();\n-        let call = if let Some(receiver) = &self.receiver {\n-            format!(\"{}.{}\", receiver, &self.name)\n-        } else {\n-            self.name.clone()\n+        let call = match &self.receiver {\n+            Some(receiver) => format!(\"{}.{}\", receiver, &self.name),\n+            None => self.name.clone(),\n         };\n         let mut item =\n             CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), call.clone());"}, {"sha": "521296fd9b723a0ca4febd23c7f775c16fbdae80", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -63,10 +63,9 @@ fn build_completion(\n         .set_documentation(ctx.docs(def))\n         .set_deprecated(ctx.is_deprecated(def))\n         .detail(&pat);\n-    if let Some(snippet_cap) = ctx.snippet_cap() {\n-        item.insert_snippet(snippet_cap, pat);\n-    } else {\n-        item.insert_text(pat);\n+    match ctx.snippet_cap() {\n+        Some(snippet_cap) => item.insert_snippet(snippet_cap, pat),\n+        None => item.insert_text(pat),\n     };\n     item.build()\n }"}, {"sha": "810b51effd3857764d152f41c61bed7e9a65c976", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -38,10 +38,9 @@ fn build_completion(\n         .set_documentation(ctx.docs(def))\n         .set_deprecated(ctx.is_deprecated(def))\n         .detail(&literal);\n-    if let Some(snippet_cap) = ctx.snippet_cap() {\n-        item.insert_snippet(snippet_cap, literal);\n-    } else {\n-        item.insert_text(literal);\n+    match ctx.snippet_cap() {\n+        Some(snippet_cap) => item.insert_snippet(snippet_cap, literal),\n+        None => item.insert_text(literal),\n     };\n     item.build()\n }"}, {"sha": "9cdd270b8036a2d52a40c7d2c7cff40c2f264aa7", "filename": "crates/ide_ssr/src/resolving.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fresolving.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -47,10 +47,9 @@ impl ResolvedRule {\n     ) -> Result<ResolvedRule, SsrError> {\n         let resolver =\n             Resolver { resolution_scope, placeholders_by_stand_in: rule.placeholders_by_stand_in };\n-        let resolved_template = if let Some(template) = rule.template {\n-            Some(resolver.resolve_pattern_tree(template)?)\n-        } else {\n-            None\n+        let resolved_template = match rule.template {\n+            Some(template) => Some(resolver.resolve_pattern_tree(template)?),\n+            None => None,\n         };\n         Ok(ResolvedRule {\n             pattern: resolver.resolve_pattern_tree(rule.pattern)?,"}, {"sha": "a77433a551219d2ccd8d1d9a87bb1db7a7a65250", "filename": "crates/proc_macro_srv/src/abis/abi_1_47/rustc_server.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_47%2Frustc_server.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -497,10 +497,9 @@ impl server::Literal for Rustc {\n     }\n \n     fn integer(&mut self, n: &str) -> Self::Literal {\n-        let n = if let Ok(n) = n.parse::<i128>() {\n-            n.to_string()\n-        } else {\n-            n.parse::<u128>().unwrap().to_string()\n+        let n = match n.parse::<i128>() {\n+            Ok(n) => n.to_string(),\n+            Err(_) => n.parse::<u128>().unwrap().to_string(),\n         };\n         Literal { text: n.into(), id: tt::TokenId::unspecified() }\n     }"}, {"sha": "498fa7ea2dca7fd736d6e8320feb21eb27148355", "filename": "crates/proc_macro_srv/src/abis/abi_1_55/rustc_server.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_55%2Frustc_server.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -500,10 +500,9 @@ impl server::Literal for Rustc {\n     }\n \n     fn integer(&mut self, n: &str) -> Self::Literal {\n-        let n = if let Ok(n) = n.parse::<i128>() {\n-            n.to_string()\n-        } else {\n-            n.parse::<u128>().unwrap().to_string()\n+        let n = match n.parse::<i128>() {\n+            Ok(n) => n.to_string(),\n+            Err(_) => n.parse::<u128>().unwrap().to_string(),\n         };\n         Literal { text: n.into(), id: tt::TokenId::unspecified() }\n     }"}, {"sha": "fb8a4c8cbe878d4a757d740204cb792d128101bf", "filename": "crates/proc_macro_srv/src/abis/abi_1_56/rustc_server.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Frustc_server.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -504,10 +504,9 @@ impl server::Literal for Rustc {\n     }\n \n     fn integer(&mut self, n: &str) -> Self::Literal {\n-        let n = if let Ok(n) = n.parse::<i128>() {\n-            n.to_string()\n-        } else {\n-            n.parse::<u128>().unwrap().to_string()\n+        let n = match n.parse::<i128>() {\n+            Ok(n) => n.to_string(),\n+            Err(_) => n.parse::<u128>().unwrap().to_string(),\n         };\n         Literal { text: n.into(), id: tt::TokenId::unspecified() }\n     }"}, {"sha": "6cb6b0a8d02482a411e42eda0af861d58f59b8e2", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -427,10 +427,9 @@ pub(crate) fn handle_workspace_symbol(\n         // If no explicit marker was set, check request params. If that's also empty\n         // use global config.\n         if !all_symbols {\n-            let search_kind = if let Some(ref search_kind) = params.search_kind {\n-                search_kind\n-            } else {\n-                &config.search_kind\n+            let search_kind = match params.search_kind {\n+                Some(ref search_kind) => search_kind,\n+                None => &config.search_kind,\n             };\n             all_symbols = match search_kind {\n                 lsp_ext::WorkspaceSymbolSearchKind::OnlyTypes => false,\n@@ -439,10 +438,9 @@ pub(crate) fn handle_workspace_symbol(\n         }\n \n         if !libs {\n-            let search_scope = if let Some(ref search_scope) = params.search_scope {\n-                search_scope\n-            } else {\n-                &config.search_scope\n+            let search_scope = match params.search_scope {\n+                Some(ref search_scope) => search_scope,\n+                None => &config.search_scope,\n             };\n             libs = match search_scope {\n                 lsp_ext::WorkspaceSymbolSearchScope::Workspace => false,"}, {"sha": "552d6fc1e3ebbf699355dd0ef0cc4210e819fffe", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -60,10 +60,9 @@ impl GenericParamsOwnerEdit for ast::Impl {\n         match self.generic_param_list() {\n             Some(it) => it,\n             None => {\n-                let position = if let Some(imp_token) = self.impl_token() {\n-                    Position::after(imp_token)\n-                } else {\n-                    Position::last_child_of(self.syntax())\n+                let position = match self.impl_token() {\n+                    Some(imp_token) => Position::after(imp_token),\n+                    None => Position::last_child_of(self.syntax()),\n                 };\n                 create_generic_param_list(position)\n             }\n@@ -72,10 +71,9 @@ impl GenericParamsOwnerEdit for ast::Impl {\n \n     fn get_or_create_where_clause(&self) -> ast::WhereClause {\n         if self.where_clause().is_none() {\n-            let position = if let Some(items) = self.assoc_item_list() {\n-                Position::before(items.syntax())\n-            } else {\n-                Position::last_child_of(self.syntax())\n+            let position = match self.assoc_item_list() {\n+                Some(items) => Position::before(items.syntax()),\n+                None => Position::last_child_of(self.syntax()),\n             };\n             create_where_clause(position);\n         }\n@@ -102,10 +100,9 @@ impl GenericParamsOwnerEdit for ast::Trait {\n \n     fn get_or_create_where_clause(&self) -> ast::WhereClause {\n         if self.where_clause().is_none() {\n-            let position = if let Some(items) = self.assoc_item_list() {\n-                Position::before(items.syntax())\n-            } else {\n-                Position::last_child_of(self.syntax())\n+            let position = match self.assoc_item_list() {\n+                Some(items) => Position::before(items.syntax()),\n+                None => Position::last_child_of(self.syntax()),\n             };\n             create_where_clause(position);\n         }\n@@ -253,12 +250,9 @@ impl ast::WhereClause {\n \n impl ast::TypeBoundList {\n     pub fn remove(&self) {\n-        if let Some(colon) =\n-            self.syntax().siblings_with_tokens(Direction::Prev).find(|it| it.kind() == T![:])\n-        {\n-            ted::remove_all(colon..=self.syntax().clone().into())\n-        } else {\n-            ted::remove(self.syntax())\n+        match self.syntax().siblings_with_tokens(Direction::Prev).find(|it| it.kind() == T![:]) {\n+            Some(colon) => ted::remove_all(colon..=self.syntax().clone().into()),\n+            None => ted::remove(self.syntax()),\n         }\n     }\n }"}, {"sha": "d1888d165c2b69e4c011b6ebc5ae678b6700ce85", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -641,9 +641,14 @@ pub fn fn_(\n     ret_type: Option<ast::RetType>,\n     is_async: bool,\n ) -> ast::Fn {\n-    let type_params =\n-        if let Some(type_params) = type_params { format!(\"<{}>\", type_params) } else { \"\".into() };\n-    let ret_type = if let Some(ret_type) = ret_type { format!(\"{} \", ret_type) } else { \"\".into() };\n+    let type_params = match type_params {\n+        Some(type_params) => format!(\"<{}>\", type_params),\n+        None => \"\".into(),\n+    };\n+    let ret_type = match ret_type {\n+        Some(ret_type) => format!(\"{} \", ret_type),\n+        None => \"\".into(),\n+    };\n     let visibility = match visibility {\n         None => String::new(),\n         Some(it) => format!(\"{} \", it),"}, {"sha": "2e6544f090e04efe67a98af7e23cd89b00efb259", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -549,10 +549,9 @@ impl ast::FieldExpr {\n     }\n \n     pub fn field_access(&self) -> Option<FieldKind> {\n-        if let Some(nr) = self.name_ref() {\n-            Some(FieldKind::Name(nr))\n-        } else {\n-            self.index_token().map(FieldKind::Index)\n+        match self.name_ref() {\n+            Some(nr) => Some(FieldKind::Name(nr)),\n+            None => self.index_token().map(FieldKind::Index),\n         }\n     }\n }"}, {"sha": "2f8312d5d1ece495311cf8239add7bdfe139cf8a", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -283,10 +283,9 @@ pub trait HasFormatSpecifier: AstToken {\n     where\n         F: FnMut(TextRange, FormatSpecifier),\n     {\n-        let char_ranges = if let Some(char_ranges) = self.char_ranges() {\n-            char_ranges\n-        } else {\n-            return;\n+        let char_ranges = match self.char_ranges() {\n+            Some(char_ranges) => char_ranges,\n+            None => return,\n         };\n         let mut chars = char_ranges.iter().peekable();\n \n@@ -528,10 +527,11 @@ pub trait HasFormatSpecifier: AstToken {\n                         }\n                     }\n \n-                    if let Some((_, Ok('}'))) = chars.peek() {\n-                        skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n-                    } else {\n-                        continue;\n+                    match chars.peek() {\n+                        Some((_, Ok('}'))) => {\n+                            skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n+                        }\n+                        Some((_, _)) | None => continue,\n                     }\n                 }\n                 _ => {"}, {"sha": "022db39f33090b32d5e41cba1935a8a97e245962", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -227,12 +227,9 @@ where\n     T: crate::AstNode,\n     F: Fn(&str) -> Result<T, ()>,\n {\n-    dir_tests(&test_data_dir(), ok_paths, \"rast\", |text, path| {\n-        if let Ok(node) = f(text) {\n-            format!(\"{:#?}\", crate::ast::AstNode::syntax(&node))\n-        } else {\n-            panic!(\"Failed to parse '{:?}'\", path);\n-        }\n+    dir_tests(&test_data_dir(), ok_paths, \"rast\", |text, path| match f(text) {\n+        Ok(node) => format!(\"{:#?}\", crate::ast::AstNode::syntax(&node)),\n+        Err(_) => panic!(\"Failed to parse '{:?}'\", path),\n     });\n     dir_tests(&test_data_dir(), err_paths, \"rast\", |text, path| {\n         if f(text).is_ok() {"}, {"sha": "1fa61c41ddbc57a07942b3d94558264558321099", "filename": "crates/tt/src/buffer.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Ftt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9583dd572597fd1e3bbde80e0b8cf68ad8acc090/crates%2Ftt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Fbuffer.rs?ref=9583dd572597fd1e3bbde80e0b8cf68ad8acc090", "patch": "@@ -205,10 +205,9 @@ impl<'a> Cursor<'a> {\n     /// Bump the cursor\n     pub fn bump(self) -> Cursor<'a> {\n         if let Some(Entry::End(exit)) = self.buffer.entry(&self.ptr) {\n-            if let Some(exit) = exit {\n-                Cursor::create(self.buffer, *exit)\n-            } else {\n-                self\n+            match exit {\n+                Some(exit) => Cursor::create(self.buffer, *exit),\n+                None => self,\n             }\n         } else {\n             Cursor::create(self.buffer, EntryPtr(self.ptr.0, self.ptr.1 + 1))"}]}