{"sha": "2c41369acc445d04129db40ba998dd7a89fb0d2e", "node_id": "C_kwDOAAsO6NoAKDJjNDEzNjlhY2M0NDVkMDQxMjlkYjQwYmE5OThkZDdhODlmYjBkMmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T19:03:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T19:03:33Z"}, "message": "Auto merge of #111374 - tmiasko:align-unsized-locals, r=cjgillot\n\nAlign unsized locals\n\nAllocate an extra space for unsized locals and manually align the storage, since alloca doesn't support dynamic alignment.\n\nFixes #71416.\nFixes #71695.", "tree": {"sha": "85fa46eb6a03f3a01b5b7d6ecd156b1090929ac0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85fa46eb6a03f3a01b5b7d6ecd156b1090929ac0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c41369acc445d04129db40ba998dd7a89fb0d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c41369acc445d04129db40ba998dd7a89fb0d2e", "html_url": "https://github.com/rust-lang/rust/commit/2c41369acc445d04129db40ba998dd7a89fb0d2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c41369acc445d04129db40ba998dd7a89fb0d2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1623978dc41701201ec4daf36b3f748d661e7194", "url": "https://api.github.com/repos/rust-lang/rust/commits/1623978dc41701201ec4daf36b3f748d661e7194", "html_url": "https://github.com/rust-lang/rust/commit/1623978dc41701201ec4daf36b3f748d661e7194"}, {"sha": "83a5a69a4c7bd60901bf7f7d96378ddea7ecb06c", "url": "https://api.github.com/repos/rust-lang/rust/commits/83a5a69a4c7bd60901bf7f7d96378ddea7ecb06c", "html_url": "https://github.com/rust-lang/rust/commit/83a5a69a4c7bd60901bf7f7d96378ddea7ecb06c"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "2301c3ef13e2124e21db9421d78417efcab947aa", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2c41369acc445d04129db40ba998dd7a89fb0d2e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41369acc445d04129db40ba998dd7a89fb0d2e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=2c41369acc445d04129db40ba998dd7a89fb0d2e", "patch": "@@ -402,8 +402,6 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n         indirect_dest: PlaceRef<'tcx, V>,\n     ) {\n         debug!(\"OperandRef::store_unsized: operand={:?}, indirect_dest={:?}\", self, indirect_dest);\n-        let flags = MemFlags::empty();\n-\n         // `indirect_dest` must have `*mut T` type. We extract `T` out of it.\n         let unsized_ty = indirect_dest\n             .layout\n@@ -416,17 +414,23 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n             bug!(\"store_unsized called with a sized value\")\n         };\n \n-        // FIXME: choose an appropriate alignment, or use dynamic align somehow\n-        let max_align = Align::from_bits(128).unwrap();\n-        let min_align = Align::from_bits(8).unwrap();\n-\n-        // Allocate an appropriate region on the stack, and copy the value into it\n-        let (llsize, _) = glue::size_and_align_of_dst(bx, unsized_ty, Some(llextra));\n-        let lldst = bx.byte_array_alloca(llsize, max_align);\n-        bx.memcpy(lldst, max_align, llptr, min_align, llsize, flags);\n+        // Allocate an appropriate region on the stack, and copy the value into it. Since alloca\n+        // doesn't support dynamic alignment, we allocate an extra align - 1 bytes, and align the\n+        // pointer manually.\n+        let (size, align) = glue::size_and_align_of_dst(bx, unsized_ty, Some(llextra));\n+        let one = bx.const_usize(1);\n+        let align_minus_1 = bx.sub(align, one);\n+        let size_extra = bx.add(size, align_minus_1);\n+        let min_align = Align::ONE;\n+        let alloca = bx.byte_array_alloca(size_extra, min_align);\n+        let address = bx.ptrtoint(alloca, bx.type_isize());\n+        let neg_address = bx.neg(address);\n+        let offset = bx.and(neg_address, align_minus_1);\n+        let dst = bx.inbounds_gep(bx.type_i8(), alloca, &[offset]);\n+        bx.memcpy(dst, min_align, llptr, min_align, size, MemFlags::empty());\n \n         // Store the allocated region and the extra to the indirect place.\n-        let indirect_operand = OperandValue::Pair(lldst, llextra);\n+        let indirect_operand = OperandValue::Pair(dst, llextra);\n         indirect_operand.store(bx, indirect_dest);\n     }\n }"}, {"sha": "01be8f3bb9c90b8b807db9270a618c7e075d8e61", "filename": "tests/ui/unsized-locals/align.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Funsized-locals%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41369acc445d04129db40ba998dd7a89fb0d2e/tests%2Fui%2Funsized-locals%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Falign.rs?ref=2c41369acc445d04129db40ba998dd7a89fb0d2e", "patch": "@@ -0,0 +1,30 @@\n+// Test that unsized locals uphold alignment requirements.\n+// Regression test for #71416.\n+// run-pass\n+#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+use std::any::Any;\n+\n+#[repr(align(256))]\n+#[allow(dead_code)]\n+struct A {\n+    v: u8\n+}\n+\n+impl A {\n+    fn f(&self) -> *const A {\n+        assert_eq!(self as *const A as usize % 256, 0);\n+        self\n+    }\n+}\n+\n+fn mk() -> Box<dyn Any> {\n+    Box::new(A { v: 4 })\n+}\n+\n+fn main() {\n+    let x = *mk();\n+    let dwncst = x.downcast_ref::<A>().unwrap();\n+    let addr = dwncst.f();\n+    assert_eq!(addr as usize % 256, 0);\n+}"}]}