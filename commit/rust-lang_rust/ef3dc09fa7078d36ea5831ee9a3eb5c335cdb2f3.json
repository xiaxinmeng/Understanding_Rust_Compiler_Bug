{"sha": "ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmM2RjMDlmYTcwNzhkMzZlYTU4MzFlZTlhM2ViNWMzMzVjZGIyZjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T06:26:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T06:26:30Z"}, "message": "Rollup merge of #73989 - RalfJung:ub-enum-test, r=oli-obk\n\nadjust ub-enum test to be endianess-independent\n\n@cuviper noted that our test fails on \"other\" endianess systems (I never know which is which^^), so let's fix that.", "tree": {"sha": "6afbb99eba25b28c6ce23c993aff912237b04c3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6afbb99eba25b28c6ce23c993aff912237b04c3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCVuXCRBK7hj4Ov3rIwAAdHIIAHNZwNewj0S9Ms06Jrx2Comd\nWIatKkoJFyAqophiPoKh/BM+gVhhVfNj0naHdCrrv8jg4eBv0Yrt3gyAtfozFxwH\n1OPdGYtDeE1OJ/W2w0KzLaz9N93eG0BzPT/PUME+ub8xVd46khTFHhSKIhQgP/9G\neZ3sXB0RXujYk5EfT8P2aITIeVHxehRImZWOtPsnv+H8nPzZ082xEVKYEAS5FKMx\nCYp48A9iM/Ofhj4ZpC7kHyrmJLhHD5XuvPHscSni2z7xG80rWFk5oKK22DdHWS10\nm7m76NUSd0awAaaanYXI+rab/e7iRfr0SRFi3L7effWt0RP6YCr1WHUuPQGwZGk=\n=Qr6p\n-----END PGP SIGNATURE-----\n", "payload": "tree 6afbb99eba25b28c6ce23c993aff912237b04c3a\nparent efda2b58b095306d068a3a165de62acd1e94911b\nparent fb9fa5ba3ee08171e7d2ff35d28ec0dd93b0287b\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594448790 -0700\ncommitter GitHub <noreply@github.com> 1594448790 -0700\n\nRollup merge of #73989 - RalfJung:ub-enum-test, r=oli-obk\n\nadjust ub-enum test to be endianess-independent\n\n@cuviper noted that our test fails on \"other\" endianess systems (I never know which is which^^), so let's fix that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3", "html_url": "https://github.com/rust-lang/rust/commit/ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efda2b58b095306d068a3a165de62acd1e94911b", "url": "https://api.github.com/repos/rust-lang/rust/commits/efda2b58b095306d068a3a165de62acd1e94911b", "html_url": "https://github.com/rust-lang/rust/commit/efda2b58b095306d068a3a165de62acd1e94911b"}, {"sha": "fb9fa5ba3ee08171e7d2ff35d28ec0dd93b0287b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9fa5ba3ee08171e7d2ff35d28ec0dd93b0287b", "html_url": "https://github.com/rust-lang/rust/commit/fb9fa5ba3ee08171e7d2ff35d28ec0dd93b0287b"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "136b33208c29374006cbfee971a374496d0ee66d", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3", "patch": "@@ -88,9 +88,10 @@ const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::transmute\n //~^ ERROR is undefined behavior\n \n // All variants are uninhabited but also have data.\n-const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(1u64) };\n+// Use `0` as constant to make behavior endianess-independent.\n+const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n //~^ ERROR is undefined behavior\n-const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(1u64) };\n+const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };\n //~^ ERROR is undefined behavior\n \n fn main() {"}, {"sha": "7b3ee535c8ec67c3414f8916fcde616345106ccd", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=ef3dc09fa7078d36ea5831ee9a3eb5c335cdb2f3", "patch": "@@ -87,18 +87,18 @@ LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::tran\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:91:1\n+  --> $DIR/ub-enum.rs:92:1\n    |\n-LL | const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(1u64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of the never type `!` at .<enum-variant(Err)>.0.1\n+LL | const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Never at .<enum-variant(Ok)>.0.1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:93:1\n+  --> $DIR/ub-enum.rs:94:1\n    |\n-LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(1u64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Never at .<enum-variant(Err)>.0.1\n+LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of the never type `!` at .<enum-variant(Ok)>.0.1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}]}