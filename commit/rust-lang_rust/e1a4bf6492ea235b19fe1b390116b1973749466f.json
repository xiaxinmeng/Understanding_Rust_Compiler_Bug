{"sha": "e1a4bf6492ea235b19fe1b390116b1973749466f", "node_id": "C_kwDOAAsO6NoAKGUxYTRiZjY0OTJlYTIzNWIxOWZlMWIzOTAxMTZiMTk3Mzc0OTQ2NmY", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-03-05T04:14:38Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-03-06T17:28:46Z"}, "message": "cleanup: remove unused ability to have LLVM null-terminate const strings", "tree": {"sha": "f396b88cfccaac7fcb0c76bb4c77581391b1701c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f396b88cfccaac7fcb0c76bb4c77581391b1701c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a4bf6492ea235b19fe1b390116b1973749466f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a4bf6492ea235b19fe1b390116b1973749466f", "html_url": "https://github.com/rust-lang/rust/commit/e1a4bf6492ea235b19fe1b390116b1973749466f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a4bf6492ea235b19fe1b390116b1973749466f/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f11fff33f68701d222639a1a5ae991605ec3ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f11fff33f68701d222639a1a5ae991605ec3ab", "html_url": "https://github.com/rust-lang/rust/commit/69f11fff33f68701d222639a1a5ae991605ec3ab"}], "stats": {"total": 72, "additions": 26, "deletions": 46}, "files": [{"sha": "3c0dad13deac6ae5dd06003d640c922a47bd8a14", "filename": "compiler/rustc_codegen_gcc/src/common.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e1a4bf6492ea235b19fe1b390116b1973749466f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a4bf6492ea235b19fe1b390116b1973749466f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcommon.rs?ref=e1a4bf6492ea235b19fe1b390116b1973749466f", "patch": "@@ -26,18 +26,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         bytes_in_context(self, bytes)\n     }\n \n-    fn const_cstr(&self, symbol: Symbol, _null_terminated: bool) -> LValue<'gcc> {\n-        // TODO(antoyo): handle null_terminated.\n-        if let Some(&value) = self.const_cstr_cache.borrow().get(&symbol) {\n-            return value;\n-        }\n-\n-        let global = self.global_string(symbol.as_str());\n-\n-        self.const_cstr_cache.borrow_mut().insert(symbol, global);\n-        global\n-    }\n-\n     fn global_string(&self, string: &str) -> LValue<'gcc> {\n         // TODO(antoyo): handle non-null-terminated strings.\n         let string = self.context.new_string_literal(&*string);\n@@ -171,8 +159,12 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     }\n \n     fn const_str(&self, s: Symbol) -> (RValue<'gcc>, RValue<'gcc>) {\n-        let len = s.as_str().len();\n-        let cs = self.const_ptrcast(self.const_cstr(s, false).get_address(None),\n+        let s_str = s.as_str();\n+        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n+            self.global_string(s_str)\n+        });\n+        let len = s_str.len();\n+        let cs = self.const_ptrcast(str_global.get_address(None),\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).gcc_type(self, true)),\n         );\n         (cs, self.const_usize(len as u64))"}, {"sha": "6c1dce969f0f5eed9ec997d4f5af26629c0b33f7", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1a4bf6492ea235b19fe1b390116b1973749466f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a4bf6492ea235b19fe1b390116b1973749466f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=e1a4bf6492ea235b19fe1b390116b1973749466f", "patch": "@@ -85,7 +85,7 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     pub const_globals: RefCell<FxHashMap<RValue<'gcc>, RValue<'gcc>>>,\n \n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n+    pub const_str_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n \n     /// Cache of globals.\n     pub globals: RefCell<FxHashMap<String, RValue<'gcc>>>,\n@@ -195,7 +195,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             function_instances: Default::default(),\n             vtables: Default::default(),\n             const_globals: Default::default(),\n-            const_cstr_cache: Default::default(),\n+            const_str_cache: Default::default(),\n             globals: Default::default(),\n             scalar_types: Default::default(),\n             types: Default::default(),"}, {"sha": "8b8d770433227d20eb0d8f4d2b308d69e4a609b8", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e1a4bf6492ea235b19fe1b390116b1973749466f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a4bf6492ea235b19fe1b390116b1973749466f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=e1a4bf6492ea235b19fe1b390116b1973749466f", "patch": "@@ -106,32 +106,6 @@ impl<'ll> CodegenCx<'ll, '_> {\n         bytes_in_context(self.llcx, bytes)\n     }\n \n-    fn const_cstr(&self, s: Symbol, null_terminated: bool) -> &'ll Value {\n-        unsafe {\n-            if let Some(&llval) = self.const_cstr_cache.borrow().get(&s) {\n-                return llval;\n-            }\n-\n-            let s_str = s.as_str();\n-            let sc = llvm::LLVMConstStringInContext(\n-                self.llcx,\n-                s_str.as_ptr() as *const c_char,\n-                s_str.len() as c_uint,\n-                !null_terminated as Bool,\n-            );\n-            let sym = self.generate_local_symbol_name(\"str\");\n-            let g = self.define_global(&sym, self.val_ty(sc)).unwrap_or_else(|| {\n-                bug!(\"symbol `{}` is already defined\", sym);\n-            });\n-            llvm::LLVMSetInitializer(g, sc);\n-            llvm::LLVMSetGlobalConstant(g, True);\n-            llvm::LLVMRustSetLinkage(g, llvm::Linkage::InternalLinkage);\n-\n-            self.const_cstr_cache.borrow_mut().insert(s, g);\n-            g\n-        }\n-    }\n-\n     pub fn const_get_elt(&self, v: &'ll Value, idx: u64) -> &'ll Value {\n         unsafe {\n             assert_eq!(idx as c_uint as u64, idx);\n@@ -204,9 +178,23 @@ impl<'ll, 'tcx> ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn const_str(&self, s: Symbol) -> (&'ll Value, &'ll Value) {\n-        let len = s.as_str().len();\n+        let s_str = s.as_str();\n+        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n+            let sc = self.const_bytes(s_str.as_bytes());\n+            let sym = self.generate_local_symbol_name(\"str\");\n+            let g = self.define_global(&sym, self.val_ty(sc)).unwrap_or_else(|| {\n+                bug!(\"symbol `{}` is already defined\", sym);\n+            });\n+            unsafe {\n+                llvm::LLVMSetInitializer(g, sc);\n+                llvm::LLVMSetGlobalConstant(g, True);\n+                llvm::LLVMRustSetLinkage(g, llvm::Linkage::InternalLinkage);\n+            }\n+            g\n+        });\n+        let len = s_str.len();\n         let cs = consts::ptrcast(\n-            self.const_cstr(s, false),\n+            str_global,\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).llvm_type(self)),\n         );\n         (cs, self.const_usize(len as u64))"}, {"sha": "52e03e0ad3d6b963d02e331a4216dac6fb986543", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1a4bf6492ea235b19fe1b390116b1973749466f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a4bf6492ea235b19fe1b390116b1973749466f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=e1a4bf6492ea235b19fe1b390116b1973749466f", "patch": "@@ -55,7 +55,7 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub vtables:\n         RefCell<FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), &'ll Value>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n+    pub const_str_cache: RefCell<FxHashMap<Symbol, &'ll Value>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     ///\n@@ -415,7 +415,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n             codegen_unit,\n             instances: Default::default(),\n             vtables: Default::default(),\n-            const_cstr_cache: Default::default(),\n+            const_str_cache: Default::default(),\n             const_unsized: Default::default(),\n             const_globals: Default::default(),\n             statics_to_rauw: RefCell::new(Vec::new()),"}]}