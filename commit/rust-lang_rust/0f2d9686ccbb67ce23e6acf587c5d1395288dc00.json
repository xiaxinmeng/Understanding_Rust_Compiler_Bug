{"sha": "0f2d9686ccbb67ce23e6acf587c5d1395288dc00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMmQ5Njg2Y2NiYjY3Y2UyM2U2YWNmNTg3YzVkMTM5NTI4OGRjMDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-17T07:29:34Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:28:10Z"}, "message": "rustc_expand::base: nix panictry! uses", "tree": {"sha": "838b878c7dfb8002f3874e882d9a9e201d2a07b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/838b878c7dfb8002f3874e882d9a9e201d2a07b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f2d9686ccbb67ce23e6acf587c5d1395288dc00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2d9686ccbb67ce23e6acf587c5d1395288dc00", "html_url": "https://github.com/rust-lang/rust/commit/0f2d9686ccbb67ce23e6acf587c5d1395288dc00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f2d9686ccbb67ce23e6acf587c5d1395288dc00/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "342c5f33d097b2dc07a2dbc0ca45a37379d2ff60", "url": "https://api.github.com/repos/rust-lang/rust/commits/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60", "html_url": "https://github.com/rust-lang/rust/commit/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "e47e0a757866c0339f731c4fed73eae7a0f661fa", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0f2d9686ccbb67ce23e6acf587c5d1395288dc00/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2d9686ccbb67ce23e6acf587c5d1395288dc00/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=0f2d9686ccbb67ce23e6acf587c5d1395288dc00", "patch": "@@ -1168,6 +1168,18 @@ pub fn check_zero_tts(cx: &ExtCtxt<'_>, sp: Span, tts: TokenStream, name: &str)\n     }\n }\n \n+/// Parse an expression. On error, emit it, advancing to `Eof`, and return `None`.\n+fn parse_expr(p: &mut parser::Parser<'_>) -> Option<P<ast::Expr>> {\n+    match p.parse_expr() {\n+        Ok(e) => return Some(e),\n+        Err(mut err) => err.emit(),\n+    }\n+    while p.token != token::Eof {\n+        p.bump();\n+    }\n+    None\n+}\n+\n /// Interpreting `tts` as a comma-separated sequence of expressions,\n /// expect exactly one string literal, or emit an error and return `None`.\n pub fn get_single_str_from_tts(\n@@ -1181,7 +1193,7 @@ pub fn get_single_str_from_tts(\n         cx.span_err(sp, &format!(\"{} takes 1 argument\", name));\n         return None;\n     }\n-    let ret = panictry!(p.parse_expr());\n+    let ret = parse_expr(&mut p)?;\n     let _ = p.eat(&token::Comma);\n \n     if p.token != token::Eof {\n@@ -1190,8 +1202,8 @@ pub fn get_single_str_from_tts(\n     expr_to_string(cx, ret, \"argument must be a string literal\").map(|(s, _)| s.to_string())\n }\n \n-/// Extracts comma-separated expressions from `tts`. If there is a\n-/// parsing error, emit a non-fatal error and return `None`.\n+/// Extracts comma-separated expressions from `tts`.\n+/// On error, emit it, and return `None`.\n pub fn get_exprs_from_tts(\n     cx: &mut ExtCtxt<'_>,\n     sp: Span,\n@@ -1200,7 +1212,7 @@ pub fn get_exprs_from_tts(\n     let mut p = cx.new_parser_from_tts(tts);\n     let mut es = Vec::new();\n     while p.token != token::Eof {\n-        let expr = panictry!(p.parse_expr());\n+        let expr = parse_expr(&mut p)?;\n \n         // Perform eager expansion on the expression.\n         // We want to be able to handle e.g., `concat!(\"foo\", \"bar\")`."}]}