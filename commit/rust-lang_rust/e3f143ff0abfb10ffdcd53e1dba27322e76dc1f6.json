{"sha": "e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZjE0M2ZmMGFiZmIxMGZmZGNkNTNlMWRiYTI3MzIyZTc2ZGMxZjY=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-10-02T15:19:30Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-10-02T19:15:28Z"}, "message": "account for doc visibility", "tree": {"sha": "354980bdfdf40a950527ee4edbe52645e39be267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/354980bdfdf40a950527ee4edbe52645e39be267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "html_url": "https://github.com/rust-lang/rust/commit/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "737f0a6bb508706b75e21194e3010aa3865e779a", "url": "https://api.github.com/repos/rust-lang/rust/commits/737f0a6bb508706b75e21194e3010aa3865e779a", "html_url": "https://github.com/rust-lang/rust/commit/737f0a6bb508706b75e21194e3010aa3865e779a"}], "stats": {"total": 176, "additions": 150, "deletions": 26}, "files": [{"sha": "7df7109c75f724ef78b6052ad76710e27d062f92", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -57,7 +57,7 @@ impl Lint {\n         lints.filter(|l| l.deprecation.is_none() && !l.is_internal())\n     }\n \n-    /// Returns the lints in a HashMap, grouped by the different lint groups\n+    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n     pub fn by_lint_group(lints: &[Self]) -> HashMap<String, Vec<Self>> {\n         lints\n             .iter()"}, {"sha": "dc70de48503cd9f97503cc40a3aedd4b20cbc4bc", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -324,7 +324,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         vec.iter().map(|elem| self.expr(elem)).collect::<Option<_>>()\n     }\n \n-    /// Lookup a possibly constant expression from a ExprKind::Path.\n+    /// Lookup a possibly constant expression from a `ExprKind::Path`.\n     fn fetch_path(&mut self, qpath: &QPath, id: HirId) -> Option<Constant> {\n         use rustc::mir::interpret::GlobalId;\n "}, {"sha": "0f95efe59f117b8e0af0140c806d916882d13e02", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -1,11 +1,12 @@\n use crate::utils::span_lint;\n use itertools::Itertools;\n use pulldown_cmark;\n-use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n+use rustc::hir;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashSet;\n use std::ops::Range;\n-use syntax::ast;\n+use syntax::ast::Attribute;\n use syntax::source_map::{BytePos, Span};\n use syntax_pos::Pos;\n use url::Url;\n@@ -100,28 +101,78 @@ declare_clippy_lint! {\n #[derive(Clone)]\n pub struct DocMarkdown {\n     valid_idents: FxHashSet<String>,\n+    in_trait_impl: bool,\n }\n \n impl DocMarkdown {\n     pub fn new(valid_idents: FxHashSet<String>) -> Self {\n-        Self { valid_idents }\n+        Self {\n+            valid_idents,\n+            in_trait_impl: false,\n+        }\n     }\n }\n \n impl_lint_pass!(DocMarkdown => [DOC_MARKDOWN, MISSING_SAFETY_DOC, NEEDLESS_DOCTEST_MAIN]);\n \n-impl EarlyLintPass for DocMarkdown {\n-    fn check_crate(&mut self, cx: &EarlyContext<'_>, krate: &ast::Crate) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n+    fn check_crate(&mut self, cx: &LateContext<'a, 'tcx>, krate: &'tcx hir::Crate) {\n         check_attrs(cx, &self.valid_idents, &krate.attrs);\n     }\n \n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+        if check_attrs(cx, &self.valid_idents, &item.attrs) {\n+            return;\n+        }\n+        // no safety header\n+        match item.kind {\n+            hir::ItemKind::Fn(_, ref header, ..) => {\n+                if cx.access_levels.is_exported(item.hir_id) && header.unsafety == hir::Unsafety::Unsafe {\n+                    span_lint(\n+                        cx,\n+                        MISSING_SAFETY_DOC,\n+                        item.span,\n+                        \"unsafe function's docs miss `# Safety` section\",\n+                    );\n+                }\n+            },\n+            hir::ItemKind::Impl(_, _, _, _, ref trait_ref, ..) => {\n+                self.in_trait_impl = trait_ref.is_some();\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    fn check_item_post(&mut self, _cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item) {\n+        if let hir::ItemKind::Impl(..) = item.kind {\n+            self.in_trait_impl = false;\n+        }\n+    }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n         if check_attrs(cx, &self.valid_idents, &item.attrs) {\n             return;\n         }\n         // no safety header\n-        if let ast::ItemKind::Fn(_, ref header, ..) = item.kind {\n-            if item.vis.node.is_pub() && header.unsafety == ast::Unsafety::Unsafe {\n+        if let hir::TraitItemKind::Method(ref sig, ..) = item.kind {\n+            if cx.access_levels.is_exported(item.hir_id) && sig.header.unsafety == hir::Unsafety::Unsafe {\n+                span_lint(\n+                    cx,\n+                    MISSING_SAFETY_DOC,\n+                    item.span,\n+                    \"unsafe function's docs miss `# Safety` section\",\n+                );\n+            }\n+        }\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem) {\n+        if check_attrs(cx, &self.valid_idents, &item.attrs) || self.in_trait_impl {\n+            return;\n+        }\n+        // no safety header\n+        if let hir::ImplItemKind::Method(ref sig, ..) = item.kind {\n+            if cx.access_levels.is_exported(item.hir_id) && sig.header.unsafety == hir::Unsafety::Unsafe {\n                 span_lint(\n                     cx,\n                     MISSING_SAFETY_DOC,\n@@ -190,7 +241,7 @@ pub fn strip_doc_comment_decoration(comment: &str, span: Span) -> (String, Vec<(\n     panic!(\"not a doc-comment: {}\", comment);\n }\n \n-pub fn check_attrs<'a>(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>, attrs: &'a [ast::Attribute]) -> bool {\n+pub fn check_attrs<'a>(cx: &LateContext<'_, '_>, valid_idents: &FxHashSet<String>, attrs: &'a [Attribute]) -> bool {\n     let mut doc = String::new();\n     let mut spans = vec![];\n \n@@ -240,7 +291,7 @@ pub fn check_attrs<'a>(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>,\n }\n \n fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize>)>>(\n-    cx: &EarlyContext<'_>,\n+    cx: &LateContext<'_, '_>,\n     valid_idents: &FxHashSet<String>,\n     events: Events,\n     spans: &[(usize, Span)],\n@@ -283,6 +334,7 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                 } else {\n                     // Adjust for the beginning of the current `Event`\n                     let span = span.with_lo(span.lo() + BytePos::from_usize(range.start - begin));\n+\n                     check_text(cx, valid_idents, &text, span);\n                 }\n             },\n@@ -291,13 +343,13 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     safety_header\n }\n \n-fn check_code(cx: &EarlyContext<'_>, text: &str, span: Span) {\n+fn check_code(cx: &LateContext<'_, '_>, text: &str, span: Span) {\n     if text.contains(\"fn main() {\") {\n         span_lint(cx, NEEDLESS_DOCTEST_MAIN, span, \"needless `fn main` in doctest\");\n     }\n }\n \n-fn check_text(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>, text: &str, span: Span) {\n+fn check_text(cx: &LateContext<'_, '_>, valid_idents: &FxHashSet<String>, text: &str, span: Span) {\n     for word in text.split(|c: char| c.is_whitespace() || c == '\\'') {\n         // Trim punctuation as in `some comment (see foo::bar).`\n         //                                                   ^^\n@@ -320,7 +372,7 @@ fn check_text(cx: &EarlyContext<'_>, valid_idents: &FxHashSet<String>, text: &st\n     }\n }\n \n-fn check_word(cx: &EarlyContext<'_>, word: &str, span: Span) {\n+fn check_word(cx: &LateContext<'_, '_>, word: &str, span: Span) {\n     /// Checks if a string is camel-case, i.e., contains at least two uppercase\n     /// letters (`Clippy` is ok) and one lower-case letter (`NASA` is ok).\n     /// Plurals are also excluded (`IDs` is ok)."}, {"sha": "48bf33b175f33443d3d434bbb3b255d74359068d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -533,7 +533,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n             conf.blacklisted_names.iter().cloned().collect()\n     ));\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold, conf.too_many_lines_threshold));\n-    reg.register_early_lint_pass(box doc::DocMarkdown::new(conf.doc_valid_idents.iter().cloned().collect()));\n+    reg.register_late_lint_pass(box doc::DocMarkdown::new(conf.doc_valid_idents.iter().cloned().collect()));\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n     reg.register_early_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n     reg.register_late_lint_pass(box mem_discriminant::MemDiscriminant);"}, {"sha": "3b208421b5e4b9216f0e8888e810a4fda6ab1b29", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -1895,7 +1895,7 @@ fn lint_iter_nth<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr, iter_ar\n }\n \n fn lint_get_unwrap<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr, get_args: &'tcx [hir::Expr], is_mut: bool) {\n-    // Note: we don't want to lint `get_mut().unwrap` for HashMap or BTreeMap,\n+    // Note: we don't want to lint `get_mut().unwrap` for `HashMap` or `BTreeMap`,\n     // because they do not implement `IndexMut`\n     let mut applicability = Applicability::MachineApplicable;\n     let expr_ty = cx.tables.expr_ty(&get_args[0]);"}, {"sha": "b33d09121776c36aabce195a0a035b59ad578996", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -1940,7 +1940,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidUpcastComparisons {\n declare_clippy_lint! {\n     /// **What it does:** Checks for public `impl` or `fn` missing generalization\n     /// over different hashers and implicitly defaulting to the default hashing\n-    /// algorithm (SipHash).\n+    /// algorithm (`SipHash`).\n     ///\n     /// **Why is this bad?** `HashMap` or `HashSet` with custom hashers cannot be\n     /// used with them.\n@@ -2118,7 +2118,7 @@ enum ImplicitHasherType<'tcx> {\n }\n \n impl<'tcx> ImplicitHasherType<'tcx> {\n-    /// Checks that `ty` is a target type without a BuildHasher.\n+    /// Checks that `ty` is a target type without a `BuildHasher`.\n     fn new<'a>(cx: &LateContext<'a, 'tcx>, hir_ty: &hir::Ty) -> Option<Self> {\n         if let TyKind::Path(QPath::Resolved(None, ref path)) = hir_ty.kind {\n             let params: Vec<_> = path"}, {"sha": "98dbe2d4f549f25f2504ee7dbb34a9f32cb1fd41", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -17,9 +17,59 @@ unsafe fn you_dont_see_me() {\n     unimplemented!();\n }\n \n+mod private_mod {\n+    pub unsafe fn only_crate_wide_accessible() {\n+        unimplemented!();\n+    }\n+\n+    pub unsafe fn republished() {\n+        unimplemented!();\n+    }\n+}\n+\n+pub use private_mod::republished;\n+\n+pub trait UnsafeTrait {\n+    unsafe fn woefully_underdocumented(self);\n+\n+    /// # Safety\n+    unsafe fn at_least_somewhat_documented(self);\n+}\n+\n+pub struct Struct;\n+\n+impl UnsafeTrait for Struct {\n+    unsafe fn woefully_underdocumented(self) {\n+        // all is well\n+    }\n+\n+    unsafe fn at_least_somewhat_documented(self) {\n+        // all is still well\n+    }\n+}\n+\n+impl Struct {\n+    pub unsafe fn more_undocumented_unsafe() -> Self {\n+        unimplemented!();\n+    }\n+\n+    /// # Safety\n+    pub unsafe fn somewhat_documented(&self) {\n+        unimplemented!();\n+    }\n+\n+    unsafe fn private(&self) {\n+        unimplemented!();\n+    }\n+}\n+\n+#[allow(clippy::let_unit_value)]\n fn main() {\n-    you_dont_see_me();\n-    destroy_the_planet();\n-    let mut universe = ();\n-    apocalypse(&mut universe);\n+    unsafe {\n+        you_dont_see_me();\n+        destroy_the_planet();\n+        let mut universe = ();\n+        apocalypse(&mut universe);\n+        private_mod::only_crate_wide_accessible();\n+    }\n }"}, {"sha": "4689430684d3930c91715cc2d5470f7304442220", "filename": "tests/ui/doc_unsafe.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/tests%2Fui%2Fdoc_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/tests%2Fui%2Fdoc_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.stderr?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -8,5 +8,27 @@ LL | | }\n    |\n    = note: `-D clippy::missing-safety-doc` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: unsafe function's docs miss `# Safety` section\n+  --> $DIR/doc_unsafe.rs:25:5\n+   |\n+LL | /     pub unsafe fn republished() {\n+LL | |         unimplemented!();\n+LL | |     }\n+   | |_____^\n+\n+error: unsafe function's docs miss `# Safety` section\n+  --> $DIR/doc_unsafe.rs:33:5\n+   |\n+LL |     unsafe fn woefully_underdocumented(self);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unsafe function's docs miss `# Safety` section\n+  --> $DIR/doc_unsafe.rs:52:5\n+   |\n+LL | /     pub unsafe fn more_undocumented_unsafe() -> Self {\n+LL | |         unimplemented!();\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "7e2e083e29884332aef77d10e974e4eeaccf4df2", "filename": "tests/ui/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::all)]\n #![allow(dead_code)]\n-#![allow(unused_unsafe)]\n+#![allow(unused_unsafe, clippy::missing_safety_doc)]\n \n // TOO_MANY_ARGUMENTS\n fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool) {}"}, {"sha": "781ea7bb152836eda343116409d8c84406266540", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=e3f143ff0abfb10ffdcd53e1dba27322e76dc1f6", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_fn)]\n-#![allow(dead_code)]\n+#![allow(dead_code, clippy::missing_safety_doc)]\n #![warn(clippy::new_without_default)]\n \n pub struct Foo;"}]}