{"sha": "705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "node_id": "C_kwDOAAsO6NoAKDcwNWE5NmQzOWJiZDk3YWMwY2M4YWUxMTliMGYzYzA5N2FiNjJmYzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T08:04:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T08:04:26Z"}, "message": "Auto merge of #106989 - clubby789:is-zero-num, r=scottmcm\n\nImplement `alloc::vec::IsZero` for `Option<$NUM>` types\n\nFixes #106911\n\nMirrors the `NonZero$NUM` implementations with an additional `assert_zero_valid`.\n`None::<i32>` doesn't stricly satisfy `IsZero` but for the purpose of allocating we can produce more efficient codegen.", "tree": {"sha": "e150d8f5821c55d5d84905ee20560b9aba175264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e150d8f5821c55d5d84905ee20560b9aba175264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "html_url": "https://github.com/rust-lang/rust/commit/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c", "html_url": "https://github.com/rust-lang/rust/commit/65d2f2a5f9c323c88d1068e8e90d0b47a20d491c"}, {"sha": "50e9f2e6e87911659b6ae63230a5797f4cdf28e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e9f2e6e87911659b6ae63230a5797f4cdf28e1", "html_url": "https://github.com/rust-lang/rust/commit/50e9f2e6e87911659b6ae63230a5797f4cdf28e1"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "ca75c3895f41f61547be83491e0c042102a4a927", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "patch": "@@ -106,6 +106,7 @@\n #![feature(const_size_of_val)]\n #![feature(const_align_of_val)]\n #![feature(const_ptr_read)]\n+#![feature(const_maybe_uninit_zeroed)]\n #![feature(const_maybe_uninit_write)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_refs_to_cell)]"}, {"sha": "cb9adf05c25b0efe8351608e7293452975bd08b9", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "patch": "@@ -4,7 +4,8 @@ use crate::boxed::Box;\n \n #[rustc_specialization_trait]\n pub(super) unsafe trait IsZero {\n-    /// Whether this value's representation is all zeros\n+    /// Whether this value's representation is all zeros,\n+    /// or can be represented with all zeroes.\n     fn is_zero(&self) -> bool;\n }\n \n@@ -147,6 +148,23 @@ impl_is_zero_option_of_nonzero!(\n     NonZeroIsize,\n );\n \n+macro_rules! impl_is_zero_option_of_num {\n+    ($($t:ty,)+) => {$(\n+        unsafe impl IsZero for Option<$t> {\n+            #[inline]\n+            fn is_zero(&self) -> bool {\n+                const {\n+                    let none: Self = unsafe { core::mem::MaybeUninit::zeroed().assume_init() };\n+                    assert!(none.is_none());\n+                }\n+                self.is_none()\n+            }\n+        }\n+    )+};\n+}\n+\n+impl_is_zero_option_of_num!(u8, u16, u32, u64, u128, i8, i16, i32, i64, i128, usize, isize,);\n+\n unsafe impl<T: IsZero> IsZero for Wrapping<T> {\n     #[inline]\n     fn is_zero(&self) -> bool {"}, {"sha": "4481a9d1e9983c0991c63f58bb6c23ecad1b3d00", "filename": "tests/codegen/vec-calloc.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0/tests%2Fcodegen%2Fvec-calloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0/tests%2Fcodegen%2Fvec-calloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-calloc.rs?ref=705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "patch": "@@ -161,6 +161,23 @@ pub fn vec_option_bool(n: usize) -> Vec<Option<bool>> {\n     vec![Some(false); n]\n }\n \n+// CHECK-LABEL: @vec_option_i32\n+#[no_mangle]\n+pub fn vec_option_i32(n: usize) -> Vec<Option<i32>> {\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: call {{.*}}__rust_alloc_zeroed(\n+\n+    // CHECK-NOT: call {{.*}}alloc::vec::from_elem\n+    // CHECK-NOT: call {{.*}}reserve\n+    // CHECK-NOT: call {{.*}}__rust_alloc(\n+\n+    // CHECK: ret void\n+    vec![None; n]\n+}\n+\n // Ensure that __rust_alloc_zeroed gets the right attributes for LLVM to optimize it away.\n // CHECK: declare noalias noundef ptr @__rust_alloc_zeroed(i64 noundef, i64 allocalign noundef) unnamed_addr [[RUST_ALLOC_ZEROED_ATTRS:#[0-9]+]]\n "}]}