{"sha": "18184d8ecd638e6640cc920f08356d5b9d3959ec", "node_id": "C_kwDOAAsO6NoAKDE4MTg0ZDhlY2Q2MzhlNjY0MGNjOTIwZjA4MzU2ZDViOWQzOTU5ZWM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-18T14:27:50Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-18T14:27:50Z"}, "message": "Format all tests in example/", "tree": {"sha": "bb075d8982b1d124fa0a2be77de21ac133b91350", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb075d8982b1d124fa0a2be77de21ac133b91350"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18184d8ecd638e6640cc920f08356d5b9d3959ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18184d8ecd638e6640cc920f08356d5b9d3959ec", "html_url": "https://github.com/rust-lang/rust/commit/18184d8ecd638e6640cc920f08356d5b9d3959ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18184d8ecd638e6640cc920f08356d5b9d3959ec/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d4428189721eeab1d22c8fec6e62f8a52318ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d4428189721eeab1d22c8fec6e62f8a52318ee", "html_url": "https://github.com/rust-lang/rust/commit/53d4428189721eeab1d22c8fec6e62f8a52318ee"}], "stats": {"total": 423, "additions": 111, "deletions": 312}, "files": [{"sha": "d472a4e270c5960a1808131e1de5d794585e8003", "filename": ".github/workflows/main.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fmain.yml?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -20,6 +20,7 @@ jobs:\n       run: |\n         cargo fmt --check\n         rustfmt --check build_system/mod.rs\n+        rustfmt --check example/*\n \n \n   test:"}, {"sha": "f7edfa960a229407174223b8aa70ad84c7282b13", "filename": "example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -3,8 +3,8 @@\n #![feature(arbitrary_self_types, unsize, coerce_unsized, dispatch_from_dyn)]\n \n use std::{\n-    ops::{Deref, CoerceUnsized, DispatchFromDyn},\n     marker::Unsize,\n+    ops::{CoerceUnsized, Deref, DispatchFromDyn},\n };\n \n struct Ptr<T: ?Sized>(Box<T>);\n@@ -33,7 +33,6 @@ impl<T: ?Sized> Deref for Wrapper<T> {\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Wrapper<U>> for Wrapper<T> {}\n \n-\n trait Trait {\n     // This method isn't object-safe yet. Unsized by-value `self` is object-safe (but not callable\n     // without unsized_locals), but wrappers around `Self` currently are not."}, {"sha": "22fc6ff33e33f0ffb2069c8e21b15769fb284815", "filename": "example/dst-field-align.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fdst-field-align.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -2,66 +2,65 @@\n #![allow(dead_code)]\n struct Foo<T: ?Sized> {\n     a: u16,\n-    b: T\n+    b: T,\n }\n \n trait Bar {\n     fn get(&self) -> usize;\n }\n \n impl Bar for usize {\n-    fn get(&self) -> usize { *self }\n+    fn get(&self) -> usize {\n+        *self\n+    }\n }\n \n struct Baz<T: ?Sized> {\n-    a: T\n+    a: T,\n }\n \n struct HasDrop<T: ?Sized> {\n     ptr: Box<usize>,\n-    data: T\n+    data: T,\n }\n \n fn main() {\n     // Test that zero-offset works properly\n-    let b : Baz<usize> = Baz { a: 7 };\n+    let b: Baz<usize> = Baz { a: 7 };\n     assert_eq!(b.a.get(), 7);\n-    let b : &Baz<dyn Bar> = &b;\n+    let b: &Baz<dyn Bar> = &b;\n     assert_eq!(b.a.get(), 7);\n \n     // Test that the field is aligned properly\n-    let f : Foo<usize> = Foo { a: 0, b: 11 };\n+    let f: Foo<usize> = Foo { a: 0, b: 11 };\n     assert_eq!(f.b.get(), 11);\n-    let ptr1 : *const u8 = &f.b as *const _ as *const u8;\n+    let ptr1: *const u8 = &f.b as *const _ as *const u8;\n \n-    let f : &Foo<dyn Bar> = &f;\n-    let ptr2 : *const u8 = &f.b as *const _ as *const u8;\n+    let f: &Foo<dyn Bar> = &f;\n+    let ptr2: *const u8 = &f.b as *const _ as *const u8;\n     assert_eq!(f.b.get(), 11);\n \n     // The pointers should be the same\n     assert_eq!(ptr1, ptr2);\n \n     // Test that nested DSTs work properly\n-    let f : Foo<Foo<usize>> = Foo { a: 0, b: Foo { a: 1, b: 17 }};\n+    let f: Foo<Foo<usize>> = Foo { a: 0, b: Foo { a: 1, b: 17 } };\n     assert_eq!(f.b.b.get(), 17);\n-    let f : &Foo<Foo<dyn Bar>> = &f;\n+    let f: &Foo<Foo<dyn Bar>> = &f;\n     assert_eq!(f.b.b.get(), 17);\n \n     // Test that get the pointer via destructuring works\n \n-    let f : Foo<usize> = Foo { a: 0, b: 11 };\n-    let f : &Foo<dyn Bar> = &f;\n+    let f: Foo<usize> = Foo { a: 0, b: 11 };\n+    let f: &Foo<dyn Bar> = &f;\n     let &Foo { a: _, b: ref bar } = f;\n     assert_eq!(bar.get(), 11);\n \n     // Make sure that drop flags don't screw things up\n \n-    let d : HasDrop<Baz<[i32; 4]>> = HasDrop {\n-        ptr: Box::new(0),\n-        data: Baz { a: [1,2,3,4] }\n-    };\n-    assert_eq!([1,2,3,4], d.data.a);\n+    let d: HasDrop<Baz<[i32; 4]>> = HasDrop { ptr: Box::new(0), data: Baz { a: [1, 2, 3, 4] } };\n+    assert_eq!([1, 2, 3, 4], d.data.a);\n \n-    let d : &HasDrop<Baz<[i32]>> = &d;\n-    assert_eq!(&[1,2,3,4], &d.data.a);\n+    let d: &HasDrop<Baz<[i32]>> = &d;\n+    assert_eq!(&[1, 2, 3, 4], &d.data.a);\n }"}, {"sha": "885e55bc764232e17087b5864de9d18d8563562b", "filename": "example/example.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fexample.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -11,11 +11,7 @@ pub fn abc(a: u8) -> u8 {\n }\n \n pub fn bcd(b: bool, a: u8) -> u8 {\n-    if b {\n-        a * 2\n-    } else {\n-        a * 3\n-    }\n+    if b { a * 2 } else { a * 3 }\n }\n \n pub fn call() {"}, {"sha": "166b006004385b225d8488fb08affc72299d2c55", "filename": "example/issue-72793.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fissue-72793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fissue-72793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fissue-72793.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -2,7 +2,9 @@\n \n #![feature(type_alias_impl_trait)]\n \n-trait T { type Item; }\n+trait T {\n+    type Item;\n+}\n \n type Alias<'a> = impl T<Item = &'a ()>;\n "}, {"sha": "6f39c5edcad209057161c09c5b606f4b395ff1e8", "filename": "example/issue-91827-extern-types.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fissue-91827-extern-types.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -40,10 +40,7 @@ impl<T, const N: usize> ListImpl<T, N> {\n     }\n }\n \n-pub static A: ListImpl<u128, 3> = ListImpl {\n-    len: 3,\n-    data: [5, 6, 7],\n-};\n+pub static A: ListImpl<u128, 3> = ListImpl { len: 3, data: [5, 6, 7] };\n pub static A_REF: &'static List<u128> = A.as_list();\n pub static A_TAIL_OFFSET: isize = tail_offset(A.as_list());\n "}, {"sha": "5792ccd7cea90ac112663168a9063235457a96e0", "filename": "example/mini_core.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -37,13 +37,13 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n pub trait DispatchFromDyn<T> {}\n \n // &T -> &U\n-impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<&'a U> for &'a T {}\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<&'a U> for &'a T {}\n // &mut T -> &mut U\n-impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<&'a mut U> for &'a mut T {}\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<&'a mut U> for &'a mut T {}\n // *const T -> *const U\n-impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*const U> for *const T {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<*const U> for *const T {}\n // *mut T -> *mut U\n-impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*mut U> for *mut T {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<*mut U> for *mut T {}\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Box<U>> for Box<T> {}\n \n #[lang = \"receiver\"]\n@@ -288,7 +288,6 @@ impl PartialEq for u32 {\n     }\n }\n \n-\n impl PartialEq for u64 {\n     fn eq(&self, other: &u64) -> bool {\n         (*self) == (*other)\n@@ -361,7 +360,7 @@ impl<T: ?Sized> PartialEq for *const T {\n     }\n }\n \n-impl <T: PartialEq> PartialEq for Option<T> {\n+impl<T: PartialEq> PartialEq for Option<T> {\n     fn eq(&self, other: &Self) -> bool {\n         match (self, other) {\n             (Some(lhs), Some(rhs)) => *lhs == *rhs,\n@@ -472,7 +471,11 @@ pub fn panic(_msg: &'static str) -> ! {\n #[track_caller]\n fn panic_bounds_check(index: usize, len: usize) -> ! {\n     unsafe {\n-        libc::printf(\"index out of bounds: the len is %d but the index is %d\\n\\0\" as *const str as *const i8, len, index);\n+        libc::printf(\n+            \"index out of bounds: the len is %d but the index is %d\\n\\0\" as *const str as *const i8,\n+            len,\n+            index,\n+        );\n         intrinsics::abort();\n     }\n }\n@@ -599,7 +602,7 @@ pub mod libc {\n     // functions. legacy_stdio_definitions.lib which provides the printf wrapper functions as normal\n     // symbols to link against.\n     #[cfg_attr(unix, link(name = \"c\"))]\n-    #[cfg_attr(target_env=\"msvc\", link(name=\"legacy_stdio_definitions\"))]\n+    #[cfg_attr(target_env = \"msvc\", link(name = \"legacy_stdio_definitions\"))]\n     extern \"C\" {\n         pub fn printf(format: *const i8, ...) -> i32;\n     }\n@@ -638,7 +641,7 @@ impl<T> Index<usize> for [T] {\n     }\n }\n \n-extern {\n+extern \"C\" {\n     type VaListImpl;\n }\n \n@@ -648,23 +651,33 @@ pub struct VaList<'a>(&'a mut VaListImpl);\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro stringify($($t:tt)*) { /* compiler built-in */ }\n+pub macro stringify($($t:tt)*) {\n+    /* compiler built-in */\n+}\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro file() { /* compiler built-in */ }\n+pub macro file() {\n+    /* compiler built-in */\n+}\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro line() { /* compiler built-in */ }\n+pub macro line() {\n+    /* compiler built-in */\n+}\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro cfg() { /* compiler built-in */ }\n+pub macro cfg() {\n+    /* compiler built-in */\n+}\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro global_asm() { /* compiler built-in */ }\n+pub macro global_asm() {\n+    /* compiler built-in */\n+}\n \n pub static A_STATIC: u8 = 42;\n "}, {"sha": "867e2a149078d3cef9b90d3138870ab4c3435178", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 33, "deletions": 255, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -524,264 +524,42 @@ pub enum E1 {\n // Computing the discriminant used to be done using the niche type (here `u8`,\n // from the `bool` field of `V1`), overflowing for variants with large enough\n // indices (`V3` and `V4`), causing them to be interpreted as other variants.\n+#[rustfmt::skip]\n pub enum E2<X> {\n     V1 { f: bool },\n \n-    /*_00*/ _01(X),\n-    _02(X),\n-    _03(X),\n-    _04(X),\n-    _05(X),\n-    _06(X),\n-    _07(X),\n-    _08(X),\n-    _09(X),\n-    _0A(X),\n-    _0B(X),\n-    _0C(X),\n-    _0D(X),\n-    _0E(X),\n-    _0F(X),\n-    _10(X),\n-    _11(X),\n-    _12(X),\n-    _13(X),\n-    _14(X),\n-    _15(X),\n-    _16(X),\n-    _17(X),\n-    _18(X),\n-    _19(X),\n-    _1A(X),\n-    _1B(X),\n-    _1C(X),\n-    _1D(X),\n-    _1E(X),\n-    _1F(X),\n-    _20(X),\n-    _21(X),\n-    _22(X),\n-    _23(X),\n-    _24(X),\n-    _25(X),\n-    _26(X),\n-    _27(X),\n-    _28(X),\n-    _29(X),\n-    _2A(X),\n-    _2B(X),\n-    _2C(X),\n-    _2D(X),\n-    _2E(X),\n-    _2F(X),\n-    _30(X),\n-    _31(X),\n-    _32(X),\n-    _33(X),\n-    _34(X),\n-    _35(X),\n-    _36(X),\n-    _37(X),\n-    _38(X),\n-    _39(X),\n-    _3A(X),\n-    _3B(X),\n-    _3C(X),\n-    _3D(X),\n-    _3E(X),\n-    _3F(X),\n-    _40(X),\n-    _41(X),\n-    _42(X),\n-    _43(X),\n-    _44(X),\n-    _45(X),\n-    _46(X),\n-    _47(X),\n-    _48(X),\n-    _49(X),\n-    _4A(X),\n-    _4B(X),\n-    _4C(X),\n-    _4D(X),\n-    _4E(X),\n-    _4F(X),\n-    _50(X),\n-    _51(X),\n-    _52(X),\n-    _53(X),\n-    _54(X),\n-    _55(X),\n-    _56(X),\n-    _57(X),\n-    _58(X),\n-    _59(X),\n-    _5A(X),\n-    _5B(X),\n-    _5C(X),\n-    _5D(X),\n-    _5E(X),\n-    _5F(X),\n-    _60(X),\n-    _61(X),\n-    _62(X),\n-    _63(X),\n-    _64(X),\n-    _65(X),\n-    _66(X),\n-    _67(X),\n-    _68(X),\n-    _69(X),\n-    _6A(X),\n-    _6B(X),\n-    _6C(X),\n-    _6D(X),\n-    _6E(X),\n-    _6F(X),\n-    _70(X),\n-    _71(X),\n-    _72(X),\n-    _73(X),\n-    _74(X),\n-    _75(X),\n-    _76(X),\n-    _77(X),\n-    _78(X),\n-    _79(X),\n-    _7A(X),\n-    _7B(X),\n-    _7C(X),\n-    _7D(X),\n-    _7E(X),\n-    _7F(X),\n-    _80(X),\n-    _81(X),\n-    _82(X),\n-    _83(X),\n-    _84(X),\n-    _85(X),\n-    _86(X),\n-    _87(X),\n-    _88(X),\n-    _89(X),\n-    _8A(X),\n-    _8B(X),\n-    _8C(X),\n-    _8D(X),\n-    _8E(X),\n-    _8F(X),\n-    _90(X),\n-    _91(X),\n-    _92(X),\n-    _93(X),\n-    _94(X),\n-    _95(X),\n-    _96(X),\n-    _97(X),\n-    _98(X),\n-    _99(X),\n-    _9A(X),\n-    _9B(X),\n-    _9C(X),\n-    _9D(X),\n-    _9E(X),\n-    _9F(X),\n-    _A0(X),\n-    _A1(X),\n-    _A2(X),\n-    _A3(X),\n-    _A4(X),\n-    _A5(X),\n-    _A6(X),\n-    _A7(X),\n-    _A8(X),\n-    _A9(X),\n-    _AA(X),\n-    _AB(X),\n-    _AC(X),\n-    _AD(X),\n-    _AE(X),\n-    _AF(X),\n-    _B0(X),\n-    _B1(X),\n-    _B2(X),\n-    _B3(X),\n-    _B4(X),\n-    _B5(X),\n-    _B6(X),\n-    _B7(X),\n-    _B8(X),\n-    _B9(X),\n-    _BA(X),\n-    _BB(X),\n-    _BC(X),\n-    _BD(X),\n-    _BE(X),\n-    _BF(X),\n-    _C0(X),\n-    _C1(X),\n-    _C2(X),\n-    _C3(X),\n-    _C4(X),\n-    _C5(X),\n-    _C6(X),\n-    _C7(X),\n-    _C8(X),\n-    _C9(X),\n-    _CA(X),\n-    _CB(X),\n-    _CC(X),\n-    _CD(X),\n-    _CE(X),\n-    _CF(X),\n-    _D0(X),\n-    _D1(X),\n-    _D2(X),\n-    _D3(X),\n-    _D4(X),\n-    _D5(X),\n-    _D6(X),\n-    _D7(X),\n-    _D8(X),\n-    _D9(X),\n-    _DA(X),\n-    _DB(X),\n-    _DC(X),\n-    _DD(X),\n-    _DE(X),\n-    _DF(X),\n-    _E0(X),\n-    _E1(X),\n-    _E2(X),\n-    _E3(X),\n-    _E4(X),\n-    _E5(X),\n-    _E6(X),\n-    _E7(X),\n-    _E8(X),\n-    _E9(X),\n-    _EA(X),\n-    _EB(X),\n-    _EC(X),\n-    _ED(X),\n-    _EE(X),\n-    _EF(X),\n-    _F0(X),\n-    _F1(X),\n-    _F2(X),\n-    _F3(X),\n-    _F4(X),\n-    _F5(X),\n-    _F6(X),\n-    _F7(X),\n-    _F8(X),\n-    _F9(X),\n-    _FA(X),\n-    _FB(X),\n-    _FC(X),\n-    _FD(X),\n-    _FE(X),\n-    _FF(X),\n+    /*_00*/ _01(X), _02(X), _03(X), _04(X), _05(X), _06(X), _07(X),\n+    _08(X), _09(X), _0A(X), _0B(X), _0C(X), _0D(X), _0E(X), _0F(X),\n+    _10(X), _11(X), _12(X), _13(X), _14(X), _15(X), _16(X), _17(X),\n+    _18(X), _19(X), _1A(X), _1B(X), _1C(X), _1D(X), _1E(X), _1F(X),\n+    _20(X), _21(X), _22(X), _23(X), _24(X), _25(X), _26(X), _27(X),\n+    _28(X), _29(X), _2A(X), _2B(X), _2C(X), _2D(X), _2E(X), _2F(X),\n+    _30(X), _31(X), _32(X), _33(X), _34(X), _35(X), _36(X), _37(X),\n+    _38(X), _39(X), _3A(X), _3B(X), _3C(X), _3D(X), _3E(X), _3F(X),\n+    _40(X), _41(X), _42(X), _43(X), _44(X), _45(X), _46(X), _47(X),\n+    _48(X), _49(X), _4A(X), _4B(X), _4C(X), _4D(X), _4E(X), _4F(X),\n+    _50(X), _51(X), _52(X), _53(X), _54(X), _55(X), _56(X), _57(X),\n+    _58(X), _59(X), _5A(X), _5B(X), _5C(X), _5D(X), _5E(X), _5F(X),\n+    _60(X), _61(X), _62(X), _63(X), _64(X), _65(X), _66(X), _67(X),\n+    _68(X), _69(X), _6A(X), _6B(X), _6C(X), _6D(X), _6E(X), _6F(X),\n+    _70(X), _71(X), _72(X), _73(X), _74(X), _75(X), _76(X), _77(X),\n+    _78(X), _79(X), _7A(X), _7B(X), _7C(X), _7D(X), _7E(X), _7F(X),\n+    _80(X), _81(X), _82(X), _83(X), _84(X), _85(X), _86(X), _87(X),\n+    _88(X), _89(X), _8A(X), _8B(X), _8C(X), _8D(X), _8E(X), _8F(X),\n+    _90(X), _91(X), _92(X), _93(X), _94(X), _95(X), _96(X), _97(X),\n+    _98(X), _99(X), _9A(X), _9B(X), _9C(X), _9D(X), _9E(X), _9F(X),\n+    _A0(X), _A1(X), _A2(X), _A3(X), _A4(X), _A5(X), _A6(X), _A7(X),\n+    _A8(X), _A9(X), _AA(X), _AB(X), _AC(X), _AD(X), _AE(X), _AF(X),\n+    _B0(X), _B1(X), _B2(X), _B3(X), _B4(X), _B5(X), _B6(X), _B7(X),\n+    _B8(X), _B9(X), _BA(X), _BB(X), _BC(X), _BD(X), _BE(X), _BF(X),\n+    _C0(X), _C1(X), _C2(X), _C3(X), _C4(X), _C5(X), _C6(X), _C7(X),\n+    _C8(X), _C9(X), _CA(X), _CB(X), _CC(X), _CD(X), _CE(X), _CF(X),\n+    _D0(X), _D1(X), _D2(X), _D3(X), _D4(X), _D5(X), _D6(X), _D7(X),\n+    _D8(X), _D9(X), _DA(X), _DB(X), _DC(X), _DD(X), _DE(X), _DF(X),\n+    _E0(X), _E1(X), _E2(X), _E3(X), _E4(X), _E5(X), _E6(X), _E7(X),\n+    _E8(X), _E9(X), _EA(X), _EB(X), _EC(X), _ED(X), _EE(X), _EF(X),\n+    _F0(X), _F1(X), _F2(X), _F3(X), _F4(X), _F5(X), _F6(X), _F7(X),\n+    _F8(X), _F9(X), _FA(X), _FB(X), _FC(X), _FD(X), _FE(X), _FF(X),\n \n     V3,\n     V4,"}, {"sha": "83eb69dd504a2781d7c5ec6eaefc1687667e202a", "filename": "example/mod_bench.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fmod_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fmod_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmod_bench.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -3,15 +3,15 @@\n \n #[cfg_attr(unix, link(name = \"c\"))]\n #[cfg_attr(target_env = \"msvc\", link(name = \"msvcrt\"))]\n-extern {}\n+extern \"C\" {}\n \n #[panic_handler]\n fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n     core::intrinsics::abort();\n }\n \n-#[lang=\"eh_personality\"]\n-fn eh_personality(){}\n+#[lang = \"eh_personality\"]\n+fn eh_personality() {}\n \n // Required for rustc_codegen_llvm\n #[no_mangle]"}, {"sha": "c86063f60b94d234553ae4a3199a9b564cd02725", "filename": "example/std_example.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -56,7 +56,10 @@ fn main() {\n \n     assert_eq!(0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000u128.leading_zeros(), 26);\n     assert_eq!(0b0000000000000000000000000010000000000000000000000000000000000000_0000000000000000000000000000000000001000000000000000000010000000u128.trailing_zeros(), 7);\n-    assert_eq!(core::intrinsics::saturating_sub(0, -170141183460469231731687303715884105728i128), 170141183460469231731687303715884105727i128);\n+    assert_eq!(\n+        core::intrinsics::saturating_sub(0, -170141183460469231731687303715884105728i128),\n+        170141183460469231731687303715884105727i128\n+    );\n \n     std::hint::black_box(std::hint::black_box(7571400400375753350092698930310845914i128) * 10);\n     assert!(0i128.checked_div(2i128).is_some());\n@@ -113,7 +116,9 @@ fn main() {\n \n     Box::pin(move |mut _task_context| {\n         yield ();\n-    }).as_mut().resume(0);\n+    })\n+    .as_mut()\n+    .resume(0);\n \n     #[derive(Copy, Clone)]\n     enum Nums {\n@@ -168,7 +173,10 @@ unsafe fn test_simd() {\n     let (zero0, zero1) = std::mem::transmute::<_, (u64, u64)>(x);\n     assert_eq!((zero0, zero1), (0, 0));\n     assert_eq!(std::mem::transmute::<_, [u16; 8]>(or), [7, 7, 7, 7, 7, 7, 7, 7]);\n-    assert_eq!(std::mem::transmute::<_, [u16; 8]>(cmp_eq), [0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]);\n+    assert_eq!(\n+        std::mem::transmute::<_, [u16; 8]>(cmp_eq),\n+        [0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]\n+    );\n     assert_eq!(std::mem::transmute::<_, [u16; 8]>(cmp_lt), [0, 0, 0, 0, 0, 0, 0, 0]);\n \n     test_mm_slli_si128();\n@@ -182,6 +190,7 @@ unsafe fn test_simd() {\n     test_mm_extract_epi8();\n     test_mm_insert_epi16();\n \n+    #[rustfmt::skip]\n     let mask1 = _mm_movemask_epi8(dbg!(_mm_setr_epi8(255u8 as i8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));\n     assert_eq!(mask1, 1);\n }\n@@ -343,7 +352,7 @@ fn test_checked_mul() {\n #[derive(PartialEq)]\n enum LoopState {\n     Continue(()),\n-    Break(())\n+    Break(()),\n }\n \n pub enum Instruction {"}, {"sha": "3c87891666399297f2c16719b5c9f68aa58d4b10", "filename": "example/subslice-patterns-const-eval.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fsubslice-patterns-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18184d8ecd638e6640cc920f08356d5b9d3959ec/example%2Fsubslice-patterns-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fsubslice-patterns-const-eval.rs?ref=18184d8ecd638e6640cc920f08356d5b9d3959ec", "patch": "@@ -19,7 +19,9 @@ macro_rules! n {\n // This macro has an unused variable so that it can be repeated base on the\n // number of times a repeated variable (`$e` in `z`) occurs.\n macro_rules! zed {\n-    ($e:expr) => { Z }\n+    ($e:expr) => {\n+        Z\n+    };\n }\n \n macro_rules! z {\n@@ -32,12 +34,14 @@ macro_rules! z {\n macro_rules! compare_evaluation {\n     ($e:expr, $t:ty $(,)?) => {{\n         const CONST_EVAL: $t = $e;\n-        const fn const_eval() -> $t { $e }\n+        const fn const_eval() -> $t {\n+            $e\n+        }\n         static CONST_EVAL2: $t = const_eval();\n         let runtime_eval = $e;\n         assert_eq!(CONST_EVAL, runtime_eval);\n         assert_eq!(CONST_EVAL2, runtime_eval);\n-    }}\n+    }};\n }\n \n // Repeat `$test`, substituting the given macro variables with the given\n@@ -65,6 +69,7 @@ macro_rules! repeat {\n     }\n }\n \n+#[rustfmt::skip]\n fn main() {\n     repeat! {\n         ($arr $Ty); n, N; z, Z:"}]}