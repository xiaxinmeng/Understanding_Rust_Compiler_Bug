{"sha": "62b362472dbf8bdf43b252ac5ea53b527a8dbee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYjM2MjQ3MmRiZjhiZGY0M2IyNTJhYzVlYTUzYjUyN2E4ZGJlZTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-25T09:25:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T09:25:53Z"}, "message": "Rollup merge of #71523 - Mark-Simulacrum:alloc-inline-dup, r=Amanieu\n\nTake a single root node in range_search\n\nThe unsafe code can be justified within range_search, as it makes sure to not\noverlap the returned references, but from the callers perspective it's an\nentirely safe algorithm and there's no need for the caller to know about the\nduplication.\n\ncc @ssomers\nr? @Amanieu", "tree": {"sha": "b87d5a7b6d7c6102d6b7f7dd374e321f180848fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b87d5a7b6d7c6102d6b7f7dd374e321f180848fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b362472dbf8bdf43b252ac5ea53b527a8dbee3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepAIhCRBK7hj4Ov3rIwAAdHIIAGyU3EXrMsSf4KvUKxiwjYK1\nHgtwHb7OCQf5tKysddYAnBmoLqyaWnzQPBcA2zXdR628m3WMy8gsqBfOQPNrcZDJ\npP3Bdg2//sx382ZdyRH2OFxDRoVGJsk0TcJQTXGjptwjMR7fjLsjoIguu79mc4BZ\nrK2Zhk/bpwdIXgP7ud+SrtraepyqmxSZctwsa7lmTz9dzxDXflKKWG2vD2t+GGcT\nNHHzSDkKNwx8PG8c8xfFlWKZrorVtewN5A7qE9sEPLamr85if/gKE+tWVhy1x1Hx\nK/2VtdcgDy2pQgjA5daQ8LAExaA4exsL/2rRelVNP38Kuu+QmlBGQ92ZENnZn5Y=\n=N2A6\n-----END PGP SIGNATURE-----\n", "payload": "tree b87d5a7b6d7c6102d6b7f7dd374e321f180848fe\nparent 4762e225f8c63060c0e0c3c72af5fa775700b7a9\nparent e6cf6a7bfe98a421cd7304688fa4937764e43bb3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587806753 +0200\ncommitter GitHub <noreply@github.com> 1587806753 +0200\n\nRollup merge of #71523 - Mark-Simulacrum:alloc-inline-dup, r=Amanieu\n\nTake a single root node in range_search\n\nThe unsafe code can be justified within range_search, as it makes sure to not\noverlap the returned references, but from the callers perspective it's an\nentirely safe algorithm and there's no need for the caller to know about the\nduplication.\n\ncc @ssomers\nr? @Amanieu\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b362472dbf8bdf43b252ac5ea53b527a8dbee3", "html_url": "https://github.com/rust-lang/rust/commit/62b362472dbf8bdf43b252ac5ea53b527a8dbee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b362472dbf8bdf43b252ac5ea53b527a8dbee3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4762e225f8c63060c0e0c3c72af5fa775700b7a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4762e225f8c63060c0e0c3c72af5fa775700b7a9", "html_url": "https://github.com/rust-lang/rust/commit/4762e225f8c63060c0e0c3c72af5fa775700b7a9"}, {"sha": "e6cf6a7bfe98a421cd7304688fa4937764e43bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6cf6a7bfe98a421cd7304688fa4937764e43bb3", "html_url": "https://github.com/rust-lang/rust/commit/e6cf6a7bfe98a421cd7304688fa4937764e43bb3"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "8d0cd191c2a9041683d1e4fc10b8a9da64672512", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62b362472dbf8bdf43b252ac5ea53b527a8dbee3/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b362472dbf8bdf43b252ac5ea53b527a8dbee3/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=62b362472dbf8bdf43b252ac5ea53b527a8dbee3", "patch": "@@ -1034,9 +1034,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         R: RangeBounds<T>,\n     {\n         if let Some(root) = &self.root {\n-            let root1 = root.as_ref();\n-            let root2 = root.as_ref();\n-            let (f, b) = range_search(root1, root2, range);\n+            let (f, b) = range_search(root.as_ref(), range);\n \n             Range { front: Some(f), back: Some(b) }\n         } else {\n@@ -1082,9 +1080,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         R: RangeBounds<T>,\n     {\n         if let Some(root) = &mut self.root {\n-            let root1 = root.as_mut();\n-            let root2 = unsafe { ptr::read(&root1) };\n-            let (f, b) = range_search(root1, root2, range);\n+            let (f, b) = range_search(root.as_mut(), range);\n \n             RangeMut { front: Some(f), back: Some(b), _marker: PhantomData }\n         } else {\n@@ -2043,8 +2039,7 @@ where\n }\n \n fn range_search<BorrowType, K, V, Q: ?Sized, R: RangeBounds<Q>>(\n-    root1: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n-    root2: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n+    root: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n     range: R,\n ) -> (\n     Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>,\n@@ -2064,8 +2059,10 @@ where\n         _ => {}\n     };\n \n-    let mut min_node = root1;\n-    let mut max_node = root2;\n+    // We duplicate the root NodeRef here -- we will never access it in a way\n+    // that overlaps references obtained from the root.\n+    let mut min_node = unsafe { ptr::read(&root) };\n+    let mut max_node = root;\n     let mut min_found = false;\n     let mut max_found = false;\n "}]}