{"sha": "6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "node_id": "C_kwDOAAsO6NoAKDZkMjE4ZDAyZDllYTlkMjZjOGFjZGFlMTdmN2UwNDFkMzc1NWY1YTM", "commit": {"author": {"name": "Adam Gemmell", "email": "adam.gemmell@arm.com", "date": "2021-06-24T14:01:49Z"}, "committer": {"name": "Adam Gemmell", "email": "adam.gemmell@arm.com", "date": "2021-09-24T16:23:37Z"}, "message": "Add inline asm! tests for aarch64\n\nEnable tests which are largely architecture-independent on all supported\nplatforms", "tree": {"sha": "b632880f6f1c427bbff7d2503112024f018ca78b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b632880f6f1c427bbff7d2503112024f018ca78b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "html_url": "https://github.com/rust-lang/rust/commit/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/comments", "author": {"login": "adamgemmell", "id": 3757567, "node_id": "MDQ6VXNlcjM3NTc1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3757567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamgemmell", "html_url": "https://github.com/adamgemmell", "followers_url": "https://api.github.com/users/adamgemmell/followers", "following_url": "https://api.github.com/users/adamgemmell/following{/other_user}", "gists_url": "https://api.github.com/users/adamgemmell/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamgemmell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamgemmell/subscriptions", "organizations_url": "https://api.github.com/users/adamgemmell/orgs", "repos_url": "https://api.github.com/users/adamgemmell/repos", "events_url": "https://api.github.com/users/adamgemmell/events{/privacy}", "received_events_url": "https://api.github.com/users/adamgemmell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamgemmell", "id": 3757567, "node_id": "MDQ6VXNlcjM3NTc1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3757567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamgemmell", "html_url": "https://github.com/adamgemmell", "followers_url": "https://api.github.com/users/adamgemmell/followers", "following_url": "https://api.github.com/users/adamgemmell/following{/other_user}", "gists_url": "https://api.github.com/users/adamgemmell/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamgemmell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamgemmell/subscriptions", "organizations_url": "https://api.github.com/users/adamgemmell/orgs", "repos_url": "https://api.github.com/users/adamgemmell/repos", "events_url": "https://api.github.com/users/adamgemmell/events{/privacy}", "received_events_url": "https://api.github.com/users/adamgemmell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "900cf5e8905ba8a2a9c99a1dfc9cb2cf4754d77a", "url": "https://api.github.com/repos/rust-lang/rust/commits/900cf5e8905ba8a2a9c99a1dfc9cb2cf4754d77a", "html_url": "https://github.com/rust-lang/rust/commit/900cf5e8905ba8a2a9c99a1dfc9cb2cf4754d77a"}], "stats": {"total": 2646, "additions": 2570, "deletions": 76}, "files": [{"sha": "8775eba4a78847e1b073b67b240ac3e23c41a171", "filename": "src/test/ui/asm/aarch64/bad-options.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,39 @@\n+// only-aarch64\n+\n+#![feature(asm, global_asm)]\n+\n+fn main() {\n+    let mut foo = 0;\n+    unsafe {\n+        asm!(\"\", options(nomem, readonly));\n+        //~^ ERROR the `nomem` and `readonly` options are mutually exclusive\n+        asm!(\"\", options(pure, nomem, noreturn));\n+        //~^ ERROR the `pure` and `noreturn` options are mutually exclusive\n+        //~^^ ERROR asm with the `pure` option must have at least one output\n+        asm!(\"{}\", in(reg) foo, options(pure, nomem));\n+        //~^ ERROR asm with the `pure` option must have at least one output\n+        asm!(\"{}\", out(reg) foo, options(noreturn));\n+        //~^ ERROR asm outputs are not allowed with the `noreturn` option\n+    }\n+\n+    unsafe {\n+        asm!(\"\", clobber_abi(\"foo\"));\n+        //~^ ERROR invalid ABI for `clobber_abi`\n+        asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"));\n+        //~^ ERROR asm with `clobber_abi` must specify explicit registers for outputs\n+        asm!(\"\", out(\"x0\") foo, clobber_abi(\"C\"));\n+    }\n+}\n+\n+global_asm!(\"\", options(nomem));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(readonly));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(noreturn));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(pure));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(nostack));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(preserves_flags));\n+//~^ ERROR expected one of"}, {"sha": "21bcc4a9c7badd4ddbc01351734661187eb6d68a", "filename": "src/test/ui/asm/aarch64/bad-options.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-options.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,84 @@\n+error: the `nomem` and `readonly` options are mutually exclusive\n+  --> $DIR/bad-options.rs:8:18\n+   |\n+LL |         asm!(\"\", options(nomem, readonly));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the `pure` and `noreturn` options are mutually exclusive\n+  --> $DIR/bad-options.rs:10:18\n+   |\n+LL |         asm!(\"\", options(pure, nomem, noreturn));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: asm with the `pure` option must have at least one output\n+  --> $DIR/bad-options.rs:10:18\n+   |\n+LL |         asm!(\"\", options(pure, nomem, noreturn));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: asm with the `pure` option must have at least one output\n+  --> $DIR/bad-options.rs:13:33\n+   |\n+LL |         asm!(\"{}\", in(reg) foo, options(pure, nomem));\n+   |                                 ^^^^^^^^^^^^^^^^^^^^\n+\n+error: asm outputs are not allowed with the `noreturn` option\n+  --> $DIR/bad-options.rs:15:20\n+   |\n+LL |         asm!(\"{}\", out(reg) foo, options(noreturn));\n+   |                    ^^^^^^^^^^^^\n+\n+error: asm with `clobber_abi` must specify explicit registers for outputs\n+  --> $DIR/bad-options.rs:22:20\n+   |\n+LL |         asm!(\"{}\", out(reg) foo, clobber_abi(\"C\"));\n+   |                    ^^^^^^^^^^^^  ---------------- clobber_abi\n+   |                    |\n+   |                    generic outputs\n+\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n+  --> $DIR/bad-options.rs:28:25\n+   |\n+LL | global_asm!(\"\", options(nomem));\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+\n+error: expected one of `)`, `att_syntax`, or `raw`, found `readonly`\n+  --> $DIR/bad-options.rs:30:25\n+   |\n+LL | global_asm!(\"\", options(readonly));\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+\n+error: expected one of `)`, `att_syntax`, or `raw`, found `noreturn`\n+  --> $DIR/bad-options.rs:32:25\n+   |\n+LL | global_asm!(\"\", options(noreturn));\n+   |                         ^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+\n+error: expected one of `)`, `att_syntax`, or `raw`, found `pure`\n+  --> $DIR/bad-options.rs:34:25\n+   |\n+LL | global_asm!(\"\", options(pure));\n+   |                         ^^^^ expected one of `)`, `att_syntax`, or `raw`\n+\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nostack`\n+  --> $DIR/bad-options.rs:36:25\n+   |\n+LL | global_asm!(\"\", options(nostack));\n+   |                         ^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+\n+error: expected one of `)`, `att_syntax`, or `raw`, found `preserves_flags`\n+  --> $DIR/bad-options.rs:38:25\n+   |\n+LL | global_asm!(\"\", options(preserves_flags));\n+   |                         ^^^^^^^^^^^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+\n+error: invalid ABI for `clobber_abi`\n+  --> $DIR/bad-options.rs:20:18\n+   |\n+LL |         asm!(\"\", clobber_abi(\"foo\"));\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the following ABIs are supported on this target: `C`, `system`, `efiapi`\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "22d0499a1cc1d0c3cb6da58e8f82dd4d779cd385", "filename": "src/test/ui/asm/aarch64/bad-reg.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,59 @@\n+// only-aarch64\n+// compile-flags: -C target-feature=+fp\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    let mut foo = 0;\n+    let mut bar = 0;\n+    unsafe {\n+        // Bad register/register class\n+\n+        asm!(\"{}\", in(foo) foo);\n+        //~^ ERROR invalid register class `foo`: unknown register class\n+        asm!(\"\", in(\"foo\") foo);\n+        //~^ ERROR invalid register `foo`: unknown register\n+        asm!(\"{:z}\", in(reg) foo);\n+        //~^ ERROR invalid asm template modifier for this register class\n+        asm!(\"{:r}\", in(vreg) foo);\n+        //~^ ERROR invalid asm template modifier for this register class\n+        asm!(\"{:r}\", in(vreg_low16) foo);\n+        //~^ ERROR invalid asm template modifier for this register class\n+        asm!(\"{:a}\", const 0);\n+        //~^ ERROR asm template modifiers are not allowed for `const` arguments\n+        asm!(\"{:a}\", sym main);\n+        //~^ ERROR asm template modifiers are not allowed for `sym` arguments\n+        asm!(\"\", in(\"x29\") foo);\n+        //~^ ERROR invalid register `x29`: the frame pointer cannot be used as an operand\n+        asm!(\"\", in(\"sp\") foo);\n+        //~^ ERROR invalid register `sp`: the stack pointer cannot be used as an operand\n+        asm!(\"\", in(\"xzr\") foo);\n+        //~^ ERROR invalid register `xzr`: the zero register cannot be used as an operand\n+        asm!(\"\", in(\"x18\") foo);\n+        //~^ ERROR invalid register `x18`: x18 is used as a reserved register on some targets and cannot be used as an operand for inline asm\n+        asm!(\"\", in(\"x19\") foo);\n+        //~^ ERROR invalid register `x19`: x19 is used internally by LLVM and cannot be used as an operand for inline asm\n+\n+        asm!(\"\", in(\"p0\") foo);\n+        //~^ ERROR register class `preg` can only be used as a clobber, not as an input or output\n+        asm!(\"\", out(\"p0\") _);\n+        asm!(\"{}\", in(preg) foo);\n+        //~^ ERROR register class `preg` can only be used as a clobber, not as an input or output\n+        asm!(\"{}\", out(preg) _);\n+        //~^ ERROR register class `preg` can only be used as a clobber, not as an input or output\n+\n+        // Explicit register conflicts\n+        // (except in/lateout which don't conflict)\n+\n+        asm!(\"\", in(\"x0\") foo, in(\"w0\") bar);\n+        //~^ ERROR register `x0` conflicts with register `x0`\n+        asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n+        //~^ ERROR register `x0` conflicts with register `x0`\n+        asm!(\"\", in(\"w0\") foo, lateout(\"w0\") bar);\n+        asm!(\"\", in(\"v0\") foo, in(\"q0\") bar);\n+        //~^ ERROR register `v0` conflicts with register `v0`\n+        asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n+        //~^ ERROR register `v0` conflicts with register `v0`\n+        asm!(\"\", in(\"v0\") foo, lateout(\"q0\") bar);\n+    }\n+}"}, {"sha": "091e6077ef40460e5adc56d4dd4783747168696a", "filename": "src/test/ui/asm/aarch64/bad-reg.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fbad-reg.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,152 @@\n+error: invalid register class `foo`: unknown register class\n+  --> $DIR/bad-reg.rs:12:20\n+   |\n+LL |         asm!(\"{}\", in(foo) foo);\n+   |                    ^^^^^^^^^^^\n+\n+error: invalid register `foo`: unknown register\n+  --> $DIR/bad-reg.rs:14:18\n+   |\n+LL |         asm!(\"\", in(\"foo\") foo);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: invalid asm template modifier for this register class\n+  --> $DIR/bad-reg.rs:16:15\n+   |\n+LL |         asm!(\"{:z}\", in(reg) foo);\n+   |               ^^^^   ----------- argument\n+   |               |\n+   |               template modifier\n+   |\n+   = note: the `reg` register class supports the following template modifiers: `w`, `x`\n+\n+error: invalid asm template modifier for this register class\n+  --> $DIR/bad-reg.rs:18:15\n+   |\n+LL |         asm!(\"{:r}\", in(vreg) foo);\n+   |               ^^^^   ------------ argument\n+   |               |\n+   |               template modifier\n+   |\n+   = note: the `vreg` register class supports the following template modifiers: `b`, `h`, `s`, `d`, `q`, `v`\n+\n+error: invalid asm template modifier for this register class\n+  --> $DIR/bad-reg.rs:20:15\n+   |\n+LL |         asm!(\"{:r}\", in(vreg_low16) foo);\n+   |               ^^^^   ------------------ argument\n+   |               |\n+   |               template modifier\n+   |\n+   = note: the `vreg_low16` register class supports the following template modifiers: `b`, `h`, `s`, `d`, `q`, `v`\n+\n+error: asm template modifiers are not allowed for `const` arguments\n+  --> $DIR/bad-reg.rs:22:15\n+   |\n+LL |         asm!(\"{:a}\", const 0);\n+   |               ^^^^   ------- argument\n+   |               |\n+   |               template modifier\n+\n+error: asm template modifiers are not allowed for `sym` arguments\n+  --> $DIR/bad-reg.rs:24:15\n+   |\n+LL |         asm!(\"{:a}\", sym main);\n+   |               ^^^^   -------- argument\n+   |               |\n+   |               template modifier\n+\n+error: invalid register `x29`: the frame pointer cannot be used as an operand for inline asm\n+  --> $DIR/bad-reg.rs:26:18\n+   |\n+LL |         asm!(\"\", in(\"x29\") foo);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: invalid register `sp`: the stack pointer cannot be used as an operand for inline asm\n+  --> $DIR/bad-reg.rs:28:18\n+   |\n+LL |         asm!(\"\", in(\"sp\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n+error: invalid register `xzr`: the zero register cannot be used as an operand for inline asm\n+  --> $DIR/bad-reg.rs:30:18\n+   |\n+LL |         asm!(\"\", in(\"xzr\") foo);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: invalid register `x18`: x18 is used as a reserved register on some targets and cannot be used as an operand for inline asm\n+  --> $DIR/bad-reg.rs:32:18\n+   |\n+LL |         asm!(\"\", in(\"x18\") foo);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: invalid register `x19`: x19 is used internally by LLVM and cannot be used as an operand for inline asm\n+  --> $DIR/bad-reg.rs:34:18\n+   |\n+LL |         asm!(\"\", in(\"x19\") foo);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: register class `preg` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:37:18\n+   |\n+LL |         asm!(\"\", in(\"p0\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n+error: register class `preg` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:40:20\n+   |\n+LL |         asm!(\"{}\", in(preg) foo);\n+   |                    ^^^^^^^^^^^^\n+\n+error: register class `preg` can only be used as a clobber, not as an input or output\n+  --> $DIR/bad-reg.rs:42:20\n+   |\n+LL |         asm!(\"{}\", out(preg) _);\n+   |                    ^^^^^^^^^^^\n+\n+error: register `x0` conflicts with register `x0`\n+  --> $DIR/bad-reg.rs:48:32\n+   |\n+LL |         asm!(\"\", in(\"x0\") foo, in(\"w0\") bar);\n+   |                  ------------  ^^^^^^^^^^^^ register `x0`\n+   |                  |\n+   |                  register `x0`\n+\n+error: register `x0` conflicts with register `x0`\n+  --> $DIR/bad-reg.rs:50:32\n+   |\n+LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n+   |                  ------------  ^^^^^^^^^^^^^ register `x0`\n+   |                  |\n+   |                  register `x0`\n+   |\n+help: use `lateout` instead of `out` to avoid conflict\n+  --> $DIR/bad-reg.rs:50:18\n+   |\n+LL |         asm!(\"\", in(\"x0\") foo, out(\"x0\") bar);\n+   |                  ^^^^^^^^^^^^\n+\n+error: register `v0` conflicts with register `v0`\n+  --> $DIR/bad-reg.rs:53:32\n+   |\n+LL |         asm!(\"\", in(\"v0\") foo, in(\"q0\") bar);\n+   |                  ------------  ^^^^^^^^^^^^ register `v0`\n+   |                  |\n+   |                  register `v0`\n+\n+error: register `v0` conflicts with register `v0`\n+  --> $DIR/bad-reg.rs:55:32\n+   |\n+LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n+   |                  ------------  ^^^^^^^^^^^^^ register `v0`\n+   |                  |\n+   |                  register `v0`\n+   |\n+help: use `lateout` instead of `out` to avoid conflict\n+  --> $DIR/bad-reg.rs:55:18\n+   |\n+LL |         asm!(\"\", in(\"v0\") foo, out(\"q0\") bar);\n+   |                  ^^^^^^^^^^^^\n+\n+error: aborting due to 19 previous errors\n+"}, {"sha": "906dcb0ebab982777589fd38979e14b44255a2da", "filename": "src/test/ui/asm/aarch64/const.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fconst.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,42 @@\n+// min-llvm-version: 10.0.1\n+// only-aarch64\n+// run-pass\n+// revisions: mirunsafeck thirunsafeck\n+// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+\n+#![feature(asm, global_asm)]\n+\n+fn const_generic<const X: usize>() -> usize {\n+    unsafe {\n+        let a: usize;\n+        asm!(\"mov {}, {}\", out(reg) a, const X);\n+        a\n+    }\n+}\n+\n+const fn constfn(x: usize) -> usize {\n+    x\n+}\n+\n+fn main() {\n+    unsafe {\n+        let a: usize;\n+        asm!(\"mov {}, {}\", out(reg) a, const 5);\n+        assert_eq!(a, 5);\n+\n+        let b: usize;\n+        asm!(\"mov {}, {}\", out(reg) b, const constfn(5));\n+        assert_eq!(b, 5);\n+\n+        let c: usize;\n+        asm!(\"mov {}, {}\", out(reg) c, const constfn(5) + constfn(5));\n+        assert_eq!(c, 10);\n+    }\n+\n+    let d = const_generic::<5>();\n+    assert_eq!(d, 5);\n+}\n+\n+global_asm!(\"mov x0, {}\", const 5);\n+global_asm!(\"mov x0, {}\", const constfn(5));\n+global_asm!(\"mov x0, {}\", const constfn(5) + constfn(5));"}, {"sha": "d95c646e9f95503bad135c7e8c250ac1fc38a2e8", "filename": "src/test/ui/asm/aarch64/duplicate-options.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.fixed?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,26 @@\n+// only-aarch64\n+// run-rustfix\n+\n+#![feature(asm, global_asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\", options(nomem, ));\n+        //~^ ERROR the `nomem` option was already provided\n+        asm!(\"\", options(preserves_flags, ));\n+        //~^ ERROR the `preserves_flags` option was already provided\n+        asm!(\"\", options(nostack, preserves_flags), options());\n+        //~^ ERROR the `nostack` option was already provided\n+        asm!(\"\", options(nostack, ), options(), options());\n+        //~^ ERROR the `nostack` option was already provided\n+        //~| ERROR the `nostack` option was already provided\n+        //~| ERROR the `nostack` option was already provided\n+        asm!(\n+            \"\",\n+            options(nomem, noreturn),\n+            options(preserves_flags, ), //~ ERROR the `noreturn` option was already provided\n+            options( nostack), //~ ERROR the `nomem` option was already provided\n+            options(), //~ ERROR the `noreturn` option was already provided\n+        );\n+    }\n+}"}, {"sha": "eec356463d4d78cd80030712963c09150ed28684", "filename": "src/test/ui/asm/aarch64/duplicate-options.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,26 @@\n+// only-aarch64\n+// run-rustfix\n+\n+#![feature(asm, global_asm)]\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"\", options(nomem, nomem));\n+        //~^ ERROR the `nomem` option was already provided\n+        asm!(\"\", options(preserves_flags, preserves_flags));\n+        //~^ ERROR the `preserves_flags` option was already provided\n+        asm!(\"\", options(nostack, preserves_flags), options(nostack));\n+        //~^ ERROR the `nostack` option was already provided\n+        asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n+        //~^ ERROR the `nostack` option was already provided\n+        //~| ERROR the `nostack` option was already provided\n+        //~| ERROR the `nostack` option was already provided\n+        asm!(\n+            \"\",\n+            options(nomem, noreturn),\n+            options(preserves_flags, noreturn), //~ ERROR the `noreturn` option was already provided\n+            options(nomem, nostack), //~ ERROR the `nomem` option was already provided\n+            options(noreturn), //~ ERROR the `noreturn` option was already provided\n+        );\n+    }\n+}"}, {"sha": "5063b0c1235f00d8d9e399f4cbdd9d693b4ec97f", "filename": "src/test/ui/asm/aarch64/duplicate-options.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fduplicate-options.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,56 @@\n+error: the `nomem` option was already provided\n+  --> $DIR/duplicate-options.rs:8:33\n+   |\n+LL |         asm!(\"\", options(nomem, nomem));\n+   |                                 ^^^^^ this option was already provided\n+\n+error: the `preserves_flags` option was already provided\n+  --> $DIR/duplicate-options.rs:10:43\n+   |\n+LL |         asm!(\"\", options(preserves_flags, preserves_flags));\n+   |                                           ^^^^^^^^^^^^^^^ this option was already provided\n+\n+error: the `nostack` option was already provided\n+  --> $DIR/duplicate-options.rs:12:61\n+   |\n+LL |         asm!(\"\", options(nostack, preserves_flags), options(nostack));\n+   |                                                             ^^^^^^^ this option was already provided\n+\n+error: the `nostack` option was already provided\n+  --> $DIR/duplicate-options.rs:14:35\n+   |\n+LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n+   |                                   ^^^^^^^ this option was already provided\n+\n+error: the `nostack` option was already provided\n+  --> $DIR/duplicate-options.rs:14:53\n+   |\n+LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n+   |                                                     ^^^^^^^ this option was already provided\n+\n+error: the `nostack` option was already provided\n+  --> $DIR/duplicate-options.rs:14:71\n+   |\n+LL |         asm!(\"\", options(nostack, nostack), options(nostack), options(nostack));\n+   |                                                                       ^^^^^^^ this option was already provided\n+\n+error: the `noreturn` option was already provided\n+  --> $DIR/duplicate-options.rs:21:38\n+   |\n+LL |             options(preserves_flags, noreturn),\n+   |                                      ^^^^^^^^ this option was already provided\n+\n+error: the `nomem` option was already provided\n+  --> $DIR/duplicate-options.rs:22:21\n+   |\n+LL |             options(nomem, nostack),\n+   |                     ^^^^^ this option was already provided\n+\n+error: the `noreturn` option was already provided\n+  --> $DIR/duplicate-options.rs:23:21\n+   |\n+LL |             options(noreturn),\n+   |                     ^^^^^^^^ this option was already provided\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "1cdf0965667f64f5a5fb48fc2d07b49e00980d76", "filename": "src/test/ui/asm/aarch64/interpolated-idents.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,24 @@\n+// only-aarch64\n+\n+#![feature(asm)]\n+\n+macro_rules! m {\n+    ($in:ident $out:ident $lateout:ident $inout:ident $inlateout:ident $const:ident $sym:ident\n+     $pure:ident $nomem:ident $readonly:ident $preserves_flags:ident\n+     $noreturn:ident $nostack:ident $options:ident) => {\n+        unsafe {\n+            asm!(\"\", $in(x) x, $out(x) x, $lateout(x) x, $inout(x) x, $inlateout(x) x,\n+            //~^ ERROR asm outputs are not allowed with the `noreturn` option\n+            const x, sym x,\n+            $options($pure, $nomem, $readonly, $preserves_flags, $noreturn, $nostack));\n+            //~^ ERROR the `nomem` and `readonly` options are mutually exclusive\n+            //~| ERROR the `pure` and `noreturn` options are mutually exclusive\n+        }\n+    };\n+}\n+\n+fn main() {\n+    m!(in out lateout inout inlateout const sym\n+       pure nomem readonly preserves_flags\n+       noreturn nostack options);\n+}"}, {"sha": "d1ab13af84e2552be8471aefde17abce8d4ab3ac", "filename": "src/test/ui/asm/aarch64/interpolated-idents.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Finterpolated-idents.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,51 @@\n+error: the `nomem` and `readonly` options are mutually exclusive\n+  --> $DIR/interpolated-idents.rs:13:13\n+   |\n+LL |               $options($pure, $nomem, $readonly, $preserves_flags, $noreturn, $nostack));\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     m!(in out lateout inout inlateout const sym\n+LL | |        pure nomem readonly preserves_flags\n+LL | |        noreturn nostack options);\n+   | |_________________________________- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: the `pure` and `noreturn` options are mutually exclusive\n+  --> $DIR/interpolated-idents.rs:13:13\n+   |\n+LL |               $options($pure, $nomem, $readonly, $preserves_flags, $noreturn, $nostack));\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     m!(in out lateout inout inlateout const sym\n+LL | |        pure nomem readonly preserves_flags\n+LL | |        noreturn nostack options);\n+   | |_________________________________- in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: asm outputs are not allowed with the `noreturn` option\n+  --> $DIR/interpolated-idents.rs:10:32\n+   |\n+LL |               asm!(\"\", $in(x) x, $out(x) x, $lateout(x) x, $inout(x) x, $inlateout(x) x,\n+   |                                  ^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^^^\n+...\n+LL |       m!(in out lateout inout inlateout const sym\n+   |  _____-\n+   | |_____|\n+   | |_____|\n+   | |_____|\n+   | |\n+LL | |        pure nomem readonly preserves_flags\n+LL | |        noreturn nostack options);\n+   | |                                 -\n+   | |_________________________________|\n+   | |_________________________________in this macro invocation\n+   | |_________________________________in this macro invocation\n+   | |_________________________________in this macro invocation\n+   |                                   in this macro invocation\n+   |\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "705f6976743f429421736c5a3866fa16073f6dad", "filename": "src/test/ui/asm/aarch64/parse-error.rs", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,129 @@\n+// only-aarch64\n+\n+#![feature(asm, global_asm)]\n+\n+fn main() {\n+    let mut foo = 0;\n+    let mut bar = 0;\n+    unsafe {\n+        asm!();\n+        //~^ ERROR requires at least a template string argument\n+        asm!(foo);\n+        //~^ ERROR asm template must be a string literal\n+        asm!(\"{}\" foo);\n+        //~^ ERROR expected token: `,`\n+        asm!(\"{}\", foo);\n+        //~^ ERROR expected operand, clobber_abi, options, or additional template string\n+        asm!(\"{}\", in foo);\n+        //~^ ERROR expected `(`, found `foo`\n+        asm!(\"{}\", in(reg foo));\n+        //~^ ERROR expected `)`, found `foo`\n+        asm!(\"{}\", in(reg));\n+        //~^ ERROR expected expression, found end of macro arguments\n+        asm!(\"{}\", inout(=) foo => bar);\n+        //~^ ERROR expected register class or explicit register\n+        asm!(\"{}\", inout(reg) foo =>);\n+        //~^ ERROR expected expression, found end of macro arguments\n+        asm!(\"{}\", in(reg) foo => bar);\n+        //~^ ERROR expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n+        asm!(\"{}\", sym foo + bar);\n+        //~^ ERROR argument to `sym` must be a path expression\n+        asm!(\"\", options(foo));\n+        //~^ ERROR expected one of\n+        asm!(\"\", options(nomem foo));\n+        //~^ ERROR expected one of\n+        asm!(\"\", options(nomem, foo));\n+        //~^ ERROR expected one of\n+        asm!(\"{}\", options(), const foo);\n+        //~^ ERROR arguments are not allowed after options\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"\", clobber_abi(foo));\n+        //~^ ERROR expected string literal\n+        asm!(\"\", clobber_abi(\"C\" foo));\n+        //~^ ERROR expected `)`, found `foo`\n+        asm!(\"\", clobber_abi(\"C\", foo));\n+        //~^ ERROR expected `)`, found `,`\n+        asm!(\"{}\", clobber_abi(\"C\"), const foo);\n+        //~^ ERROR arguments are not allowed after clobber_abi\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"\", options(), clobber_abi(\"C\"));\n+        //~^ ERROR clobber_abi is not allowed after options\n+        asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n+        //~^ ERROR clobber_abi is not allowed after options\n+        asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n+        //~^ ERROR clobber_abi specified multiple times\n+        asm!(\"{a}\", a = const foo, a = const bar);\n+        //~^ ERROR duplicate argument named `a`\n+        //~^^ ERROR argument never used\n+        //~^^^ ERROR attempt to use a non-constant value in a constant\n+        //~^^^^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"\", a = in(\"x0\") foo);\n+        //~^ ERROR explicit register arguments cannot have names\n+        asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n+        //~^ ERROR named arguments cannot follow explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n+        //~^ ERROR named arguments cannot follow explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{1}\", in(\"x0\") foo, const bar);\n+        //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n+        //~^^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"\", options(), \"\");\n+        //~^ ERROR expected one of\n+        asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n+        //~^ ERROR expected one of\n+        asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n+        //~^ ERROR asm template must be a string literal\n+        asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n+        //~^ ERROR asm template must be a string literal\n+    }\n+}\n+\n+const FOO: i32 = 1;\n+const BAR: i32 = 2;\n+global_asm!();\n+//~^ ERROR requires at least a template string argument\n+global_asm!(FOO);\n+//~^ ERROR asm template must be a string literal\n+global_asm!(\"{}\" FOO);\n+//~^ ERROR expected token: `,`\n+global_asm!(\"{}\", FOO);\n+//~^ ERROR expected operand, options, or additional template string\n+global_asm!(\"{}\", const);\n+//~^ ERROR expected expression, found end of macro arguments\n+global_asm!(\"{}\", const(reg) FOO);\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(FOO));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(nomem FOO));\n+//~^ ERROR expected one of\n+global_asm!(\"\", options(nomem, FOO));\n+//~^ ERROR expected one of\n+global_asm!(\"{}\", options(), const FOO);\n+//~^ ERROR arguments are not allowed after options\n+global_asm!(\"\", clobber_abi(FOO));\n+//~^ ERROR expected string literal\n+global_asm!(\"\", clobber_abi(\"C\" FOO));\n+//~^ ERROR expected `)`, found `FOO`\n+global_asm!(\"\", clobber_abi(\"C\", FOO));\n+//~^ ERROR expected `)`, found `,`\n+global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n+//~^ ERROR arguments are not allowed after clobber_abi\n+//~^^ ERROR `clobber_abi` cannot be used with `global_asm!`\n+global_asm!(\"\", options(), clobber_abi(\"C\"));\n+//~^ ERROR clobber_abi is not allowed after options\n+global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n+//~^ ERROR clobber_abi is not allowed after options\n+global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n+//~^ ERROR clobber_abi specified multiple times\n+global_asm!(\"{a}\", a = const FOO, a = const BAR);\n+//~^ ERROR duplicate argument named `a`\n+//~^^ ERROR argument never used\n+global_asm!(\"\", options(), \"\");\n+//~^ ERROR expected one of\n+global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n+//~^ ERROR expected one of\n+global_asm!(format!(\"{{{}}}\", 0), const FOO);\n+//~^ ERROR asm template must be a string literal\n+global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n+//~^ ERROR asm template must be a string literal"}, {"sha": "c6aeef5ac9ec920cd8148e48836c60dc07986c5b", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "added", "additions": 444, "deletions": 0, "changes": 444, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,444 @@\n+error: requires at least a template string argument\n+  --> $DIR/parse-error.rs:9:9\n+   |\n+LL |         asm!();\n+   |         ^^^^^^^\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:11:14\n+   |\n+LL |         asm!(foo);\n+   |              ^^^\n+\n+error: expected token: `,`\n+  --> $DIR/parse-error.rs:13:19\n+   |\n+LL |         asm!(\"{}\" foo);\n+   |                   ^^^ expected `,`\n+\n+error: expected operand, clobber_abi, options, or additional template string\n+  --> $DIR/parse-error.rs:15:20\n+   |\n+LL |         asm!(\"{}\", foo);\n+   |                    ^^^ expected operand, clobber_abi, options, or additional template string\n+\n+error: expected `(`, found `foo`\n+  --> $DIR/parse-error.rs:17:23\n+   |\n+LL |         asm!(\"{}\", in foo);\n+   |                       ^^^ expected `(`\n+\n+error: expected `)`, found `foo`\n+  --> $DIR/parse-error.rs:19:27\n+   |\n+LL |         asm!(\"{}\", in(reg foo));\n+   |                           ^^^ expected `)`\n+\n+error: expected expression, found end of macro arguments\n+  --> $DIR/parse-error.rs:21:27\n+   |\n+LL |         asm!(\"{}\", in(reg));\n+   |                           ^ expected expression\n+\n+error: expected register class or explicit register\n+  --> $DIR/parse-error.rs:23:26\n+   |\n+LL |         asm!(\"{}\", inout(=) foo => bar);\n+   |                          ^\n+\n+error: expected expression, found end of macro arguments\n+  --> $DIR/parse-error.rs:25:37\n+   |\n+LL |         asm!(\"{}\", inout(reg) foo =>);\n+   |                                     ^ expected expression\n+\n+error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n+  --> $DIR/parse-error.rs:27:32\n+   |\n+LL |         asm!(\"{}\", in(reg) foo => bar);\n+   |                                ^^ expected one of 7 possible tokens\n+\n+error: argument to `sym` must be a path expression\n+  --> $DIR/parse-error.rs:29:24\n+   |\n+LL |         asm!(\"{}\", sym foo + bar);\n+   |                        ^^^^^^^^^\n+\n+error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n+  --> $DIR/parse-error.rs:31:26\n+   |\n+LL |         asm!(\"\", options(foo));\n+   |                          ^^^ expected one of 9 possible tokens\n+\n+error: expected one of `)` or `,`, found `foo`\n+  --> $DIR/parse-error.rs:33:32\n+   |\n+LL |         asm!(\"\", options(nomem foo));\n+   |                                ^^^ expected one of `)` or `,`\n+\n+error: expected one of `)`, `att_syntax`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, `raw`, or `readonly`, found `foo`\n+  --> $DIR/parse-error.rs:35:33\n+   |\n+LL |         asm!(\"\", options(nomem, foo));\n+   |                                 ^^^ expected one of 9 possible tokens\n+\n+error: arguments are not allowed after options\n+  --> $DIR/parse-error.rs:37:31\n+   |\n+LL |         asm!(\"{}\", options(), const foo);\n+   |                    ---------  ^^^^^^^^^ argument\n+   |                    |\n+   |                    previous options\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:40:30\n+   |\n+LL |         asm!(\"\", clobber_abi(foo));\n+   |                              ^^^ not a string literal\n+\n+error: expected `)`, found `foo`\n+  --> $DIR/parse-error.rs:42:34\n+   |\n+LL |         asm!(\"\", clobber_abi(\"C\" foo));\n+   |                                  ^^^ expected `)`\n+\n+error: expected `)`, found `,`\n+  --> $DIR/parse-error.rs:44:33\n+   |\n+LL |         asm!(\"\", clobber_abi(\"C\", foo));\n+   |                                 ^ expected `)`\n+\n+error: arguments are not allowed after clobber_abi\n+  --> $DIR/parse-error.rs:46:38\n+   |\n+LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n+   |                    ----------------  ^^^^^^^^^ argument\n+   |                    |\n+   |                    clobber_abi\n+\n+error: clobber_abi is not allowed after options\n+  --> $DIR/parse-error.rs:49:29\n+   |\n+LL |         asm!(\"\", options(), clobber_abi(\"C\"));\n+   |                  ---------  ^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  options\n+\n+error: clobber_abi is not allowed after options\n+  --> $DIR/parse-error.rs:51:31\n+   |\n+LL |         asm!(\"{}\", options(), clobber_abi(\"C\"), const foo);\n+   |                    ---------  ^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    options\n+\n+error: clobber_abi specified multiple times\n+  --> $DIR/parse-error.rs:53:36\n+   |\n+LL |         asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n+   |                  ----------------  ^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  clobber_abi previously specified here\n+\n+error: duplicate argument named `a`\n+  --> $DIR/parse-error.rs:55:36\n+   |\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n+   |                     |\n+   |                     previously here\n+\n+error: argument never used\n+  --> $DIR/parse-error.rs:55:36\n+   |\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                                    ^^^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n+\n+error: explicit register arguments cannot have names\n+  --> $DIR/parse-error.rs:60:18\n+   |\n+LL |         asm!(\"\", a = in(\"x0\") foo);\n+   |                  ^^^^^^^^^^^^^^^^\n+\n+error: named arguments cannot follow explicit register arguments\n+  --> $DIR/parse-error.rs:62:35\n+   |\n+LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n+   |                     ------------  ^^^^^^^^^^^^^ named argument\n+   |                     |\n+   |                     explicit register argument\n+\n+error: named arguments cannot follow explicit register arguments\n+  --> $DIR/parse-error.rs:65:35\n+   |\n+LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n+   |                     ------------  ^^^^^^^^^^^^^ named argument\n+   |                     |\n+   |                     explicit register argument\n+\n+error: positional arguments cannot follow named arguments or explicit register arguments\n+  --> $DIR/parse-error.rs:68:35\n+   |\n+LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n+   |                     ------------  ^^^^^^^^^ positional argument\n+   |                     |\n+   |                     explicit register argument\n+\n+error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"\"`\n+  --> $DIR/parse-error.rs:71:29\n+   |\n+LL |         asm!(\"\", options(), \"\");\n+   |                             ^^ expected one of 9 possible tokens\n+\n+error: expected one of `clobber_abi`, `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `\"{}\"`\n+  --> $DIR/parse-error.rs:73:33\n+   |\n+LL |         asm!(\"{}\", in(reg) foo, \"{}\", out(reg) foo);\n+   |                                 ^^^^ expected one of 9 possible tokens\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:75:14\n+   |\n+LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n+   |              ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:77:21\n+   |\n+LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n+   |                     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: requires at least a template string argument\n+  --> $DIR/parse-error.rs:84:1\n+   |\n+LL | global_asm!();\n+   | ^^^^^^^^^^^^^^\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:86:13\n+   |\n+LL | global_asm!(FOO);\n+   |             ^^^\n+\n+error: expected token: `,`\n+  --> $DIR/parse-error.rs:88:18\n+   |\n+LL | global_asm!(\"{}\" FOO);\n+   |                  ^^^ expected `,`\n+\n+error: expected operand, options, or additional template string\n+  --> $DIR/parse-error.rs:90:19\n+   |\n+LL | global_asm!(\"{}\", FOO);\n+   |                   ^^^ expected operand, options, or additional template string\n+\n+error: expected expression, found end of macro arguments\n+  --> $DIR/parse-error.rs:92:24\n+   |\n+LL | global_asm!(\"{}\", const);\n+   |                        ^ expected expression\n+\n+error: expected one of `,`, `.`, `?`, or an operator, found `FOO`\n+  --> $DIR/parse-error.rs:94:30\n+   |\n+LL | global_asm!(\"{}\", const(reg) FOO);\n+   |                              ^^^ expected one of `,`, `.`, `?`, or an operator\n+\n+error: expected one of `)`, `att_syntax`, or `raw`, found `FOO`\n+  --> $DIR/parse-error.rs:96:25\n+   |\n+LL | global_asm!(\"\", options(FOO));\n+   |                         ^^^ expected one of `)`, `att_syntax`, or `raw`\n+\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n+  --> $DIR/parse-error.rs:98:25\n+   |\n+LL | global_asm!(\"\", options(nomem FOO));\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+\n+error: expected one of `)`, `att_syntax`, or `raw`, found `nomem`\n+  --> $DIR/parse-error.rs:100:25\n+   |\n+LL | global_asm!(\"\", options(nomem, FOO));\n+   |                         ^^^^^ expected one of `)`, `att_syntax`, or `raw`\n+\n+error: arguments are not allowed after options\n+  --> $DIR/parse-error.rs:102:30\n+   |\n+LL | global_asm!(\"{}\", options(), const FOO);\n+   |                   ---------  ^^^^^^^^^ argument\n+   |                   |\n+   |                   previous options\n+\n+error: expected string literal\n+  --> $DIR/parse-error.rs:104:29\n+   |\n+LL | global_asm!(\"\", clobber_abi(FOO));\n+   |                             ^^^ not a string literal\n+\n+error: expected `)`, found `FOO`\n+  --> $DIR/parse-error.rs:106:33\n+   |\n+LL | global_asm!(\"\", clobber_abi(\"C\" FOO));\n+   |                                 ^^^ expected `)`\n+\n+error: expected `)`, found `,`\n+  --> $DIR/parse-error.rs:108:32\n+   |\n+LL | global_asm!(\"\", clobber_abi(\"C\", FOO));\n+   |                                ^ expected `)`\n+\n+error: arguments are not allowed after clobber_abi\n+  --> $DIR/parse-error.rs:110:37\n+   |\n+LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n+   |                   ----------------  ^^^^^^^^^ argument\n+   |                   |\n+   |                   clobber_abi\n+\n+error: `clobber_abi` cannot be used with `global_asm!`\n+  --> $DIR/parse-error.rs:110:19\n+   |\n+LL | global_asm!(\"{}\", clobber_abi(\"C\"), const FOO);\n+   |                   ^^^^^^^^^^^^^^^^\n+\n+error: clobber_abi is not allowed after options\n+  --> $DIR/parse-error.rs:113:28\n+   |\n+LL | global_asm!(\"\", options(), clobber_abi(\"C\"));\n+   |                 ---------  ^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 options\n+\n+error: clobber_abi is not allowed after options\n+  --> $DIR/parse-error.rs:115:30\n+   |\n+LL | global_asm!(\"{}\", options(), clobber_abi(\"C\"), const FOO);\n+   |                   ---------  ^^^^^^^^^^^^^^^^\n+   |                   |\n+   |                   options\n+\n+error: clobber_abi specified multiple times\n+  --> $DIR/parse-error.rs:117:35\n+   |\n+LL | global_asm!(\"\", clobber_abi(\"C\"), clobber_abi(\"C\"));\n+   |                 ----------------  ^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 clobber_abi previously specified here\n+\n+error: duplicate argument named `a`\n+  --> $DIR/parse-error.rs:119:35\n+   |\n+LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n+   |                    -------------  ^^^^^^^^^^^^^ duplicate argument\n+   |                    |\n+   |                    previously here\n+\n+error: argument never used\n+  --> $DIR/parse-error.rs:119:35\n+   |\n+LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n+   |                                   ^^^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n+\n+error: expected one of `clobber_abi`, `const`, or `options`, found `\"\"`\n+  --> $DIR/parse-error.rs:122:28\n+   |\n+LL | global_asm!(\"\", options(), \"\");\n+   |                            ^^ expected one of `clobber_abi`, `const`, or `options`\n+\n+error: expected one of `clobber_abi`, `const`, or `options`, found `\"{}\"`\n+  --> $DIR/parse-error.rs:124:30\n+   |\n+LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n+   |                              ^^^^ expected one of `clobber_abi`, `const`, or `options`\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:126:13\n+   |\n+LL | global_asm!(format!(\"{{{}}}\", 0), const FOO);\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:128:20\n+   |\n+LL | global_asm!(\"{1}\", format!(\"{{{}}}\", 0), const FOO, const BAR);\n+   |                    ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:37:37\n+   |\n+LL |     let mut foo = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+...\n+LL |         asm!(\"{}\", options(), const foo);\n+   |                                     ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:46:44\n+   |\n+LL |     let mut foo = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+...\n+LL |         asm!(\"{}\", clobber_abi(\"C\"), const foo);\n+   |                                            ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:55:31\n+   |\n+LL |     let mut foo = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const foo`\n+...\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                               ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:55:46\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                                              ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:62:45\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n+   |                                             ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:65:45\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{a}\", in(\"x0\") foo, a = const bar);\n+   |                                             ^^^ non-constant value\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/parse-error.rs:68:41\n+   |\n+LL |     let mut bar = 0;\n+   |      ---------- help: consider using `const` instead of `let`: `const bar`\n+...\n+LL |         asm!(\"{1}\", in(\"x0\") foo, const bar);\n+   |                                         ^^^ non-constant value\n+\n+error: aborting due to 63 previous errors\n+\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "58feb52653740e6445bbec213fa65429f4651382", "filename": "src/test/ui/asm/aarch64/srcloc.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,121 @@\n+// min-llvm-version: 10.0.1\n+// only-aarch64\n+// build-fail\n+// compile-flags: -Ccodegen-units=1\n+#![feature(asm)]\n+\n+// Checks that inline asm errors are mapped to the correct line in the source code.\n+\n+fn main() {\n+    unsafe {\n+        asm!(\"invalid_instruction\");\n+        //~^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\"\n+            invalid_instruction\n+        \");\n+        //~^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(r#\"\n+            invalid_instruction\n+        \"#);\n+        //~^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\"\n+            mov x0, x0\n+            invalid_instruction\n+            mov x0, x0\n+        \");\n+        //~^^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(r#\"\n+            mov x0, x0\n+            invalid_instruction\n+            mov x0, x0\n+        \"#);\n+        //~^^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(concat!(\"invalid\", \"_\", \"instruction\"));\n+        //~^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\n+            \"invalid_instruction\",\n+        );\n+        //~^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\n+            \"mov x0, x0\",\n+            \"invalid_instruction\",\n+            \"mov x0, x0\",\n+        );\n+        //~^^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\n+            \"mov x0, x0\\n\",\n+            \"invalid_instruction\",\n+            \"mov x0, x0\",\n+        );\n+        //~^^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\n+            \"mov x0, x0\",\n+            concat!(\"invalid\", \"_\", \"instruction\"),\n+            \"mov x0, x0\",\n+        );\n+        //~^^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\n+            concat!(\"mov x0\", \", \", \"x0\"),\n+            concat!(\"invalid\", \"_\", \"instruction\"),\n+            concat!(\"mov x0\", \", \", \"x0\"),\n+        );\n+        //~^^^ ERROR: unrecognized instruction mnemonic\n+\n+        // Make sure template strings get separated\n+        asm!(\n+            \"invalid_instruction1\",\n+            \"invalid_instruction2\",\n+        );\n+        //~^^^ ERROR: unrecognized instruction mnemonic\n+        //~^^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\n+            concat!(\n+                \"invalid\", \"_\", \"instruction1\", \"\\n\",\n+                \"invalid\", \"_\", \"instruction2\",\n+            ),\n+        );\n+        //~^^^^^ ERROR: unrecognized instruction mnemonic\n+        //~^^^^^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\n+            concat!(\n+                \"invalid\", \"_\", \"instruction1\", \"\\n\",\n+                \"invalid\", \"_\", \"instruction2\",\n+            ),\n+            concat!(\n+                \"invalid\", \"_\", \"instruction3\", \"\\n\",\n+                \"invalid\", \"_\", \"instruction4\",\n+            ),\n+        );\n+        //~^^^^^^^^^ ERROR: unrecognized instruction mnemonic\n+        //~^^^^^^^^^^ ERROR: unrecognized instruction mnemonic\n+        //~^^^^^^^ ERROR: unrecognized instruction mnemonic\n+        //~^^^^^^^^ ERROR: unrecognized instruction mnemonic\n+\n+        asm!(\n+            concat!(\n+                \"invalid\", \"_\", \"instruction1\", \"\\n\",\n+                \"invalid\", \"_\", \"instruction2\", \"\\n\",\n+            ),\n+            concat!(\n+                \"invalid\", \"_\", \"instruction3\", \"\\n\",\n+                \"invalid\", \"_\", \"instruction4\", \"\\n\",\n+            ),\n+        );\n+        //~^^^^^^^^^ ERROR: unrecognized instruction mnemonic\n+        //~^^^^^^^^^^ ERROR: unrecognized instruction mnemonic\n+        //~^^^^^^^ ERROR: unrecognized instruction mnemonic\n+        //~^^^^^^^^ ERROR: unrecognized instruction mnemonic\n+    }\n+}"}, {"sha": "96dab1bce0b758d1097ed7595945207ffca5936d", "filename": "src/test/ui/asm/aarch64/srcloc.stderr", "status": "added", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsrcloc.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,278 @@\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:11:15\n+   |\n+LL |         asm!(\"invalid_instruction\");\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     invalid_instruction\n+   |     ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:15:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:20:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:26:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:3:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:33:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:3:13\n+   |\n+LL |             invalid_instruction\n+   |             ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:38:14\n+   |\n+LL |         asm!(concat!(\"invalid\", \"_\", \"instruction\"));\n+   |              ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     invalid_instruction\n+   |     ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:42:14\n+   |\n+LL |             \"invalid_instruction\",\n+   |              ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     invalid_instruction\n+   |     ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:48:14\n+   |\n+LL |             \"invalid_instruction\",\n+   |              ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:1\n+   |\n+LL | invalid_instruction\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:55:14\n+   |\n+LL |             \"invalid_instruction\",\n+   |              ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:3:1\n+   |\n+LL | invalid_instruction\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:62:13\n+   |\n+LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:1\n+   |\n+LL | invalid_instruction\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:69:13\n+   |\n+LL |             concat!(\"invalid\", \"_\", \"instruction\"),\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:1\n+   |\n+LL | invalid_instruction\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:76:14\n+   |\n+LL |             \"invalid_instruction1\",\n+   |              ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     invalid_instruction1\n+   |     ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:77:14\n+   |\n+LL |             \"invalid_instruction2\",\n+   |              ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:1\n+   |\n+LL | invalid_instruction2\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:83:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     invalid_instruction1\n+   |     ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:83:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:1\n+   |\n+LL | invalid_instruction2\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:92:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     invalid_instruction1\n+   |     ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:92:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:1\n+   |\n+LL | invalid_instruction2\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:96:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:3:1\n+   |\n+LL | invalid_instruction3\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:96:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:4:1\n+   |\n+LL | invalid_instruction4\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:107:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     invalid_instruction1\n+   |     ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:107:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:1\n+   |\n+LL | invalid_instruction2\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:111:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:4:1\n+   |\n+LL | invalid_instruction3\n+   | ^\n+\n+error: unrecognized instruction mnemonic\n+  --> $DIR/srcloc.rs:111:13\n+   |\n+LL |             concat!(\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:5:1\n+   |\n+LL | invalid_instruction4\n+   | ^\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "db732e96b80b61bc5c4ae4824f23528e952a2f66", "filename": "src/test/ui/asm/aarch64/sym.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fsym.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,80 @@\n+// min-llvm-version: 10.0.1\n+// only-aarch64\n+// only-linux\n+// run-pass\n+\n+#![feature(asm, thread_local)]\n+\n+extern \"C\" fn f1() -> i32 {\n+    111\n+}\n+\n+// The compiler will generate a shim to hide the caller location parameter.\n+#[track_caller]\n+fn f2() -> i32 {\n+    222\n+}\n+\n+macro_rules! call {\n+    ($func:path) => {\n+        unsafe {\n+            let result: i32;\n+            asm!(\"bl {}\", sym $func,\n+                out(\"w0\") result,\n+                out(\"x20\") _, out(\"x21\") _, out(\"x22\") _,\n+                out(\"x23\") _, out(\"x24\") _, out(\"x25\") _,\n+                out(\"x26\") _, out(\"x27\") _, out(\"x28\") _,\n+            );\n+            result\n+        }\n+    }\n+}\n+\n+macro_rules! static_addr {\n+    ($s:expr) => {\n+        unsafe {\n+            let result: *const u32;\n+            asm!(\n+                // ADRP gives the address of a 4KB page from a PC-relative address\n+                \"adrp {out}, {sym}\",\n+                // We then add the remaining lower 12 bits\n+                \"add {out}, {out}, #:lo12:{sym}\",\n+                out = out(reg) result,\n+                sym = sym $s);\n+            result\n+        }\n+    }\n+}\n+macro_rules! static_tls_addr {\n+    ($s:expr) => {\n+        unsafe {\n+            let result: *const u32;\n+            asm!(\n+                // Load the thread pointer register\n+                \"mrs {out}, TPIDR_EL0\",\n+                // Add the top 12 bits of the symbol's offset\n+                \"add {out}, {out}, :tprel_hi12:{sym}\",\n+                // And the bottom 12 bits\n+                \"add {out}, {out}, :tprel_lo12:{sym}\",\n+                out = out(reg) result,\n+                sym = sym $s\n+            );\n+            result\n+        }\n+    }\n+}\n+\n+static S1: u32 = 111;\n+#[thread_local]\n+static S2: u32 = 222;\n+\n+fn main() {\n+    assert_eq!(call!(f1), 111);\n+    assert_eq!(call!(f2), 222);\n+    assert_eq!(static_addr!(S1), &S1 as *const u32);\n+    assert_eq!(static_tls_addr!(S2), &S2 as *const u32);\n+    std::thread::spawn(|| {\n+        assert_eq!(static_addr!(S1), &S1 as *const u32);\n+        assert_eq!(static_tls_addr!(S2), &S2 as *const u32);\n+    }).join().unwrap();\n+}"}, {"sha": "cf25dcb930c7920e0c6cb2d185a75683094b2756", "filename": "src/test/ui/asm/aarch64/type-check-2.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,84 @@\n+// only-aarch64\n+\n+#![feature(asm, repr_simd, never_type)]\n+\n+#[repr(simd)]\n+#[derive(Clone, Copy)]\n+struct SimdType(f32, f32, f32, f32);\n+\n+#[repr(simd)]\n+struct SimdNonCopy(f32, f32, f32, f32);\n+\n+fn main() {\n+    unsafe {\n+        // Inputs must be initialized\n+\n+        let x: u64;\n+        asm!(\"{}\", in(reg) x);\n+        //~^ ERROR use of possibly-uninitialized variable: `x`\n+        let mut y: u64;\n+        asm!(\"{}\", inout(reg) y);\n+        //~^ ERROR use of possibly-uninitialized variable: `y`\n+        let _ = y;\n+\n+        // Outputs require mutable places\n+\n+        let v: Vec<u64> = vec![0, 1, 2];\n+        asm!(\"{}\", in(reg) v[0]);\n+        asm!(\"{}\", out(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+        asm!(\"{}\", inout(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+\n+        // Sym operands must point to a function or static\n+\n+        const C: i32 = 0;\n+        static S: i32 = 0;\n+        asm!(\"{}\", sym S);\n+        asm!(\"{}\", sym main);\n+        asm!(\"{}\", sym C);\n+        //~^ ERROR asm `sym` operand must point to a fn or static\n+        asm!(\"{}\", sym x);\n+        //~^ ERROR asm `sym` operand must point to a fn or static\n+\n+        // Register operands must be Copy\n+\n+        asm!(\"{:v}\", in(vreg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n+        //~^ ERROR arguments for inline assembly must be copyable\n+\n+        // Register operands must be integers, floats, SIMD vectors, pointers or\n+        // function pointers.\n+\n+        asm!(\"{}\", in(reg) 0i64);\n+        asm!(\"{}\", in(reg) 0f64);\n+        asm!(\"{:v}\", in(vreg) SimdType(0.0, 0.0, 0.0, 0.0));\n+        asm!(\"{}\", in(reg) 0 as *const u8);\n+        asm!(\"{}\", in(reg) 0 as *mut u8);\n+        asm!(\"{}\", in(reg) main as fn());\n+        asm!(\"{}\", in(reg) |x: i32| x);\n+        //~^ ERROR cannot use value of type\n+        asm!(\"{}\", in(reg) vec![0]);\n+        //~^ ERROR cannot use value of type `Vec<i32>` for inline assembly\n+        asm!(\"{}\", in(reg) (1, 2, 3));\n+        //~^ ERROR cannot use value of type `(i32, i32, i32)` for inline assembly\n+        asm!(\"{}\", in(reg) [1, 2, 3]);\n+        //~^ ERROR cannot use value of type `[i32; 3]` for inline assembly\n+\n+        // Register inputs (but not outputs) allow references and function types\n+\n+        let mut f = main;\n+        let mut r = &mut 0;\n+        asm!(\"{}\", in(reg) f);\n+        asm!(\"{}\", inout(reg) f);\n+        //~^ ERROR cannot use value of type `fn() {main}` for inline assembly\n+        asm!(\"{}\", in(reg) r);\n+        asm!(\"{}\", inout(reg) r);\n+        //~^ ERROR cannot use value of type `&mut i32` for inline assembly\n+        let _ = (f, r);\n+\n+        // Type checks ignore never type\n+\n+        let u: ! = unreachable!();\n+        asm!(\"{}\", in(reg) u);\n+    }\n+}"}, {"sha": "e8209064d2d54b8f7b007c69c4c5f4734df3f44c", "filename": "src/test/ui/asm/aarch64/type-check-2.stderr", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,103 @@\n+error: arguments for inline assembly must be copyable\n+  --> $DIR/type-check-2.rs:46:31\n+   |\n+LL |         asm!(\"{:v}\", in(vreg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `SimdNonCopy` does not implement the Copy trait\n+\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:58:28: 58:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:58:28\n+   |\n+LL |         asm!(\"{}\", in(reg) |x: i32| x);\n+   |                            ^^^^^^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `Vec<i32>` for inline assembly\n+  --> $DIR/type-check-2.rs:60:28\n+   |\n+LL |         asm!(\"{}\", in(reg) vec![0]);\n+   |                            ^^^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: cannot use value of type `(i32, i32, i32)` for inline assembly\n+  --> $DIR/type-check-2.rs:62:28\n+   |\n+LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n+   |                            ^^^^^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `[i32; 3]` for inline assembly\n+  --> $DIR/type-check-2.rs:64:28\n+   |\n+LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n+   |                            ^^^^^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `fn() {main}` for inline assembly\n+  --> $DIR/type-check-2.rs:72:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) f);\n+   |                               ^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `&mut i32` for inline assembly\n+  --> $DIR/type-check-2.rs:75:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) r);\n+   |                               ^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: asm `sym` operand must point to a fn or static\n+  --> $DIR/type-check-2.rs:39:24\n+   |\n+LL |         asm!(\"{}\", sym C);\n+   |                        ^\n+\n+error: asm `sym` operand must point to a fn or static\n+  --> $DIR/type-check-2.rs:41:24\n+   |\n+LL |         asm!(\"{}\", sym x);\n+   |                        ^\n+\n+error[E0381]: use of possibly-uninitialized variable: `x`\n+  --> $DIR/type-check-2.rs:17:28\n+   |\n+LL |         asm!(\"{}\", in(reg) x);\n+   |                            ^ use of possibly-uninitialized `x`\n+\n+error[E0381]: use of possibly-uninitialized variable: `y`\n+  --> $DIR/type-check-2.rs:20:9\n+   |\n+LL |         asm!(\"{}\", inout(reg) y);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-2.rs:28:29\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+LL |         asm!(\"{}\", in(reg) v[0]);\n+LL |         asm!(\"{}\", out(reg) v[0]);\n+   |                             ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-2.rs:30:31\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+...\n+LL |         asm!(\"{}\", inout(reg) v[0]);\n+   |                               ^ cannot borrow as mutable\n+\n+error: aborting due to 13 previous errors\n+\n+Some errors have detailed explanations: E0381, E0596.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "d0d5954ca4aef78eb67355cb1c9497743e024419", "filename": "src/test/ui/asm/aarch64/type-check-3.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,115 @@\n+// only-aarch64\n+// compile-flags: -C target-feature=+neon\n+\n+#![feature(asm, global_asm, repr_simd, stdsimd)]\n+\n+use std::arch::aarch64::float64x2_t;\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+struct Simd256bit(f64, f64,f64, f64);\n+\n+fn main() {\n+    let f64x2: float64x2_t = unsafe { std::mem::transmute(0i128) };\n+    let f64x4 = Simd256bit(0.0, 0.0, 0.0, 0.0);\n+\n+    unsafe {\n+        // Types must be listed in the register class.\n+\n+        // Success cases\n+        asm!(\"{:w}\", in(reg) 0u8);\n+        asm!(\"{:w}\", in(reg) 0u16);\n+        asm!(\"{:w}\", in(reg) 0u32);\n+        asm!(\"{:w}\", in(reg) 0f32);\n+        asm!(\"{}\", in(reg) 0i64);\n+        asm!(\"{}\", in(reg) 0f64);\n+\n+        asm!(\"{:b}\", in(vreg) 0u8);\n+        asm!(\"{:h}\", in(vreg) 0u16);\n+        asm!(\"{:s}\", in(vreg) 0u32);\n+        asm!(\"{:s}\", in(vreg) 0f32);\n+        asm!(\"{:d}\", in(vreg) 0u64);\n+        asm!(\"{:d}\", in(vreg) 0f64);\n+        asm!(\"{:q}\", in(vreg) f64x2);\n+        asm!(\"{:v}\", in(vreg) f64x2);\n+\n+        // Should be the same as vreg\n+        asm!(\"{:q}\", in(vreg_low16) f64x2);\n+\n+        // Template modifiers of a different size to the argument are fine\n+        asm!(\"{:w}\", in(reg) 0u64);\n+        asm!(\"{:x}\", in(reg) 0u32);\n+        asm!(\"{:b}\", in(vreg) 0u64);\n+        asm!(\"{:d}\", in(vreg_low16) f64x2);\n+\n+\n+        // Template modifier suggestions for sub-registers\n+\n+        asm!(\"{}\", in(reg) 0u8);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{}\", in(reg) 0u16);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{}\", in(reg) 0i32);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{}\", in(reg) 0f32);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+\n+        asm!(\"{}\", in(vreg) 0i16);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{}\", in(vreg) 0f32);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{}\", in(vreg) 0f64);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{}\", in(vreg_low16) 0f64);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+\n+        asm!(\"{0} {0}\", in(reg) 0i16);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{0} {0:x}\", in(reg) 0i16);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+\n+        // Invalid registers\n+\n+        asm!(\"{}\", in(reg) 0i128);\n+        //~^ ERROR type `i128` cannot be used with this register class\n+        asm!(\"{}\", in(reg) f64x2);\n+        //~^ ERROR type `float64x2_t` cannot be used with this register class\n+        asm!(\"{}\", in(vreg) f64x4);\n+        //~^ ERROR type `Simd256bit` cannot be used with this register class\n+\n+        // Split inout operands must have compatible types\n+\n+        let mut val_i16: i16;\n+        let mut val_f32: f32;\n+        let mut val_u32: u32;\n+        let mut val_u64: u64;\n+        let mut val_ptr: *mut u8;\n+        asm!(\"{:x}\", inout(reg) 0u16 => val_i16);\n+        asm!(\"{:x}\", inout(reg) 0u32 => val_f32);\n+        //~^ ERROR incompatible types for asm inout argument\n+        asm!(\"{:x}\", inout(reg) 0u32 => val_ptr);\n+        //~^ ERROR incompatible types for asm inout argument\n+        asm!(\"{:x}\", inout(reg) main => val_u32);\n+        //~^ ERROR incompatible types for asm inout argument\n+        asm!(\"{:x}\", inout(reg) 0u64 => val_ptr);\n+        asm!(\"{:x}\", inout(reg) main => val_u64);\n+    }\n+}\n+\n+// Constants must be... constant\n+\n+static S: i32 = 1;\n+const fn const_foo(x: i32) -> i32 {\n+    x\n+}\n+const fn const_bar<T>(x: T) -> T {\n+    x\n+}\n+global_asm!(\"{}\", const S);\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_foo(0));\n+global_asm!(\"{}\", const const_foo(S));\n+//~^ ERROR constants cannot refer to statics\n+global_asm!(\"{}\", const const_bar(0));\n+global_asm!(\"{}\", const const_bar(S));\n+//~^ ERROR constants cannot refer to statics"}, {"sha": "c31a62ae7912a59e67303750374ae7f02520191f", "filename": "src/test/ui/asm/aarch64/type-check-3.stderr", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-3.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,172 @@\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:48:15\n+   |\n+LL |         asm!(\"{}\", in(reg) 0u8);\n+   |               ^^           --- for this argument\n+   |\n+   = note: `#[warn(asm_sub_register)]` on by default\n+   = help: use the `w` modifier to have the register formatted as `w0`\n+   = help: or use the `x` modifier to keep the default formatting of `x0`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:50:15\n+   |\n+LL |         asm!(\"{}\", in(reg) 0u16);\n+   |               ^^           ---- for this argument\n+   |\n+   = help: use the `w` modifier to have the register formatted as `w0`\n+   = help: or use the `x` modifier to keep the default formatting of `x0`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:52:15\n+   |\n+LL |         asm!(\"{}\", in(reg) 0i32);\n+   |               ^^           ---- for this argument\n+   |\n+   = help: use the `w` modifier to have the register formatted as `w0`\n+   = help: or use the `x` modifier to keep the default formatting of `x0`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:54:15\n+   |\n+LL |         asm!(\"{}\", in(reg) 0f32);\n+   |               ^^           ---- for this argument\n+   |\n+   = help: use the `w` modifier to have the register formatted as `w0`\n+   = help: or use the `x` modifier to keep the default formatting of `x0`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:57:15\n+   |\n+LL |         asm!(\"{}\", in(vreg) 0i16);\n+   |               ^^            ---- for this argument\n+   |\n+   = help: use the `h` modifier to have the register formatted as `h0`\n+   = help: or use the `v` modifier to keep the default formatting of `v0`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:59:15\n+   |\n+LL |         asm!(\"{}\", in(vreg) 0f32);\n+   |               ^^            ---- for this argument\n+   |\n+   = help: use the `s` modifier to have the register formatted as `s0`\n+   = help: or use the `v` modifier to keep the default formatting of `v0`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:61:15\n+   |\n+LL |         asm!(\"{}\", in(vreg) 0f64);\n+   |               ^^            ---- for this argument\n+   |\n+   = help: use the `d` modifier to have the register formatted as `d0`\n+   = help: or use the `v` modifier to keep the default formatting of `v0`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:63:15\n+   |\n+LL |         asm!(\"{}\", in(vreg_low16) 0f64);\n+   |               ^^                  ---- for this argument\n+   |\n+   = help: use the `d` modifier to have the register formatted as `d0`\n+   = help: or use the `v` modifier to keep the default formatting of `v0`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:66:15\n+   |\n+LL |         asm!(\"{0} {0}\", in(reg) 0i16);\n+   |               ^^^ ^^^           ---- for this argument\n+   |\n+   = help: use the `w` modifier to have the register formatted as `w0`\n+   = help: or use the `x` modifier to keep the default formatting of `x0`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:68:15\n+   |\n+LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n+   |               ^^^                 ---- for this argument\n+   |\n+   = help: use the `w` modifier to have the register formatted as `w0`\n+   = help: or use the `x` modifier to keep the default formatting of `x0`\n+\n+error: type `i128` cannot be used with this register class\n+  --> $DIR/type-check-3.rs:73:28\n+   |\n+LL |         asm!(\"{}\", in(reg) 0i128);\n+   |                            ^^^^^\n+   |\n+   = note: register class `reg` supports these types: i8, i16, i32, i64, f32, f64\n+\n+error: type `float64x2_t` cannot be used with this register class\n+  --> $DIR/type-check-3.rs:75:28\n+   |\n+LL |         asm!(\"{}\", in(reg) f64x2);\n+   |                            ^^^^^\n+   |\n+   = note: register class `reg` supports these types: i8, i16, i32, i64, f32, f64\n+\n+error: type `Simd256bit` cannot be used with this register class\n+  --> $DIR/type-check-3.rs:77:29\n+   |\n+LL |         asm!(\"{}\", in(vreg) f64x4);\n+   |                             ^^^^^\n+   |\n+   = note: register class `vreg` supports these types: i8, i16, i32, i64, f32, f64, i8x8, i16x4, i32x2, i64x1, f32x2, f64x1, i8x16, i16x8, i32x4, i64x2, f32x4, f64x2\n+\n+error: incompatible types for asm inout argument\n+  --> $DIR/type-check-3.rs:88:33\n+   |\n+LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_f32);\n+   |                                 ^^^^    ^^^^^^^ type `f32`\n+   |                                 |\n+   |                                 type `u32`\n+   |\n+   = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n+\n+error: incompatible types for asm inout argument\n+  --> $DIR/type-check-3.rs:90:33\n+   |\n+LL |         asm!(\"{:x}\", inout(reg) 0u32 => val_ptr);\n+   |                                 ^^^^    ^^^^^^^ type `*mut u8`\n+   |                                 |\n+   |                                 type `u32`\n+   |\n+   = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n+\n+error: incompatible types for asm inout argument\n+  --> $DIR/type-check-3.rs:92:33\n+   |\n+LL |         asm!(\"{:x}\", inout(reg) main => val_u32);\n+   |                                 ^^^^    ^^^^^^^ type `u32`\n+   |                                 |\n+   |                                 type `fn()`\n+   |\n+   = note: asm inout arguments must have the same type, unless they are both pointers or integers of the same size\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-3.rs:108:25\n+   |\n+LL | global_asm!(\"{}\", const S);\n+   |                         ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-3.rs:111:35\n+   |\n+LL | global_asm!(\"{}\", const const_foo(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/type-check-3.rs:114:35\n+   |\n+LL | global_asm!(\"{}\", const const_bar(S));\n+   |                                   ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error: aborting due to 9 previous errors; 10 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0013`."}, {"sha": "3b1d922a7f7578248575b6c5e0f14e2ce8916765", "filename": "src/test/ui/asm/bad-template.aarch64_mirunsafeck.stderr", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,187 @@\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:31:15\n+   |\n+LL |         asm!(\"{}\");\n+   |               ^^ from here\n+   |\n+   = note: no arguments were given\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:33:15\n+   |\n+LL |         asm!(\"{1}\", in(reg) foo);\n+   |               ^^^ from here\n+   |\n+   = note: there is 1 argument\n+\n+error: argument never used\n+  --> $DIR/bad-template.rs:33:21\n+   |\n+LL |         asm!(\"{1}\", in(reg) foo);\n+   |                     ^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n+\n+error: there is no argument named `a`\n+  --> $DIR/bad-template.rs:36:15\n+   |\n+LL |         asm!(\"{a}\");\n+   |               ^^^\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:38:15\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |               ^^   --------------- named argument\n+   |               |\n+   |               from here\n+   |\n+   = note: no positional arguments were given\n+note: named arguments cannot be referenced by position\n+  --> $DIR/bad-template.rs:38:20\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |                    ^^^^^^^^^^^^^^^\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:38:20\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |                    ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:41:15\n+   |\n+LL |         asm!(\"{1}\", a = in(reg) foo);\n+   |               ^^^ from here\n+   |\n+   = note: no positional arguments were given\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:41:21\n+   |\n+LL |         asm!(\"{1}\", a = in(reg) foo);\n+   |                     ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:48:15\n+   |\n+LL |         asm!(\"{}\", in(\"x0\") foo);\n+   |               ^^   ------------ explicit register argument\n+   |               |\n+   |               from here\n+   |\n+   = note: no positional arguments were given\n+note: explicit register arguments cannot be used in the asm template\n+  --> $DIR/bad-template.rs:48:20\n+   |\n+LL |         asm!(\"{}\", in(\"x0\") foo);\n+   |                    ^^^^^^^^^^^^\n+\n+error: asm template modifier must be a single character\n+  --> $DIR/bad-template.rs:50:17\n+   |\n+LL |         asm!(\"{:foo}\", in(reg) foo);\n+   |                 ^^^\n+\n+error: multiple unused asm arguments\n+  --> $DIR/bad-template.rs:52:18\n+   |\n+LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n+   |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n+   |                  |\n+   |                  argument never used\n+   |\n+   = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:58:14\n+   |\n+LL | global_asm!(\"{}\");\n+   |              ^^ from here\n+   |\n+   = note: no arguments were given\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:60:14\n+   |\n+LL | global_asm!(\"{1}\", const FOO);\n+   |              ^^^ from here\n+   |\n+   = note: there is 1 argument\n+\n+error: argument never used\n+  --> $DIR/bad-template.rs:60:20\n+   |\n+LL | global_asm!(\"{1}\", const FOO);\n+   |                    ^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n+\n+error: there is no argument named `a`\n+  --> $DIR/bad-template.rs:63:14\n+   |\n+LL | global_asm!(\"{a}\");\n+   |              ^^^\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:65:14\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |              ^^   ------------- named argument\n+   |              |\n+   |              from here\n+   |\n+   = note: no positional arguments were given\n+note: named arguments cannot be referenced by position\n+  --> $DIR/bad-template.rs:65:19\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |                   ^^^^^^^^^^^^^\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:65:19\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |                   ^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:68:14\n+   |\n+LL | global_asm!(\"{1}\", a = const FOO);\n+   |              ^^^ from here\n+   |\n+   = note: no positional arguments were given\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:68:20\n+   |\n+LL | global_asm!(\"{1}\", a = const FOO);\n+   |                    ^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: asm template modifier must be a single character\n+  --> $DIR/bad-template.rs:71:16\n+   |\n+LL | global_asm!(\"{:foo}\", const FOO);\n+   |                ^^^\n+\n+error: multiple unused asm arguments\n+  --> $DIR/bad-template.rs:73:17\n+   |\n+LL | global_asm!(\"\", const FOO, const FOO);\n+   |                 ^^^^^^^^^  ^^^^^^^^^ argument never used\n+   |                 |\n+   |                 argument never used\n+   |\n+   = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "3b1d922a7f7578248575b6c5e0f14e2ce8916765", "filename": "src/test/ui/asm/bad-template.aarch64_thirunsafeck.stderr", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -0,0 +1,187 @@\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:31:15\n+   |\n+LL |         asm!(\"{}\");\n+   |               ^^ from here\n+   |\n+   = note: no arguments were given\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:33:15\n+   |\n+LL |         asm!(\"{1}\", in(reg) foo);\n+   |               ^^^ from here\n+   |\n+   = note: there is 1 argument\n+\n+error: argument never used\n+  --> $DIR/bad-template.rs:33:21\n+   |\n+LL |         asm!(\"{1}\", in(reg) foo);\n+   |                     ^^^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n+\n+error: there is no argument named `a`\n+  --> $DIR/bad-template.rs:36:15\n+   |\n+LL |         asm!(\"{a}\");\n+   |               ^^^\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:38:15\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |               ^^   --------------- named argument\n+   |               |\n+   |               from here\n+   |\n+   = note: no positional arguments were given\n+note: named arguments cannot be referenced by position\n+  --> $DIR/bad-template.rs:38:20\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |                    ^^^^^^^^^^^^^^^\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:38:20\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |                    ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:41:15\n+   |\n+LL |         asm!(\"{1}\", a = in(reg) foo);\n+   |               ^^^ from here\n+   |\n+   = note: no positional arguments were given\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:41:21\n+   |\n+LL |         asm!(\"{1}\", a = in(reg) foo);\n+   |                     ^^^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:48:15\n+   |\n+LL |         asm!(\"{}\", in(\"x0\") foo);\n+   |               ^^   ------------ explicit register argument\n+   |               |\n+   |               from here\n+   |\n+   = note: no positional arguments were given\n+note: explicit register arguments cannot be used in the asm template\n+  --> $DIR/bad-template.rs:48:20\n+   |\n+LL |         asm!(\"{}\", in(\"x0\") foo);\n+   |                    ^^^^^^^^^^^^\n+\n+error: asm template modifier must be a single character\n+  --> $DIR/bad-template.rs:50:17\n+   |\n+LL |         asm!(\"{:foo}\", in(reg) foo);\n+   |                 ^^^\n+\n+error: multiple unused asm arguments\n+  --> $DIR/bad-template.rs:52:18\n+   |\n+LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n+   |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n+   |                  |\n+   |                  argument never used\n+   |\n+   = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:58:14\n+   |\n+LL | global_asm!(\"{}\");\n+   |              ^^ from here\n+   |\n+   = note: no arguments were given\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:60:14\n+   |\n+LL | global_asm!(\"{1}\", const FOO);\n+   |              ^^^ from here\n+   |\n+   = note: there is 1 argument\n+\n+error: argument never used\n+  --> $DIR/bad-template.rs:60:20\n+   |\n+LL | global_asm!(\"{1}\", const FOO);\n+   |                    ^^^^^^^^^ argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n+\n+error: there is no argument named `a`\n+  --> $DIR/bad-template.rs:63:14\n+   |\n+LL | global_asm!(\"{a}\");\n+   |              ^^^\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:65:14\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |              ^^   ------------- named argument\n+   |              |\n+   |              from here\n+   |\n+   = note: no positional arguments were given\n+note: named arguments cannot be referenced by position\n+  --> $DIR/bad-template.rs:65:19\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |                   ^^^^^^^^^^^^^\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:65:19\n+   |\n+LL | global_asm!(\"{}\", a = const FOO);\n+   |                   ^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:68:14\n+   |\n+LL | global_asm!(\"{1}\", a = const FOO);\n+   |              ^^^ from here\n+   |\n+   = note: no positional arguments were given\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:68:20\n+   |\n+LL | global_asm!(\"{1}\", a = const FOO);\n+   |                    ^^^^^^^^^^^^^ named argument never used\n+   |\n+   = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n+\n+error: asm template modifier must be a single character\n+  --> $DIR/bad-template.rs:71:16\n+   |\n+LL | global_asm!(\"{:foo}\", const FOO);\n+   |                ^^^\n+\n+error: multiple unused asm arguments\n+  --> $DIR/bad-template.rs:73:17\n+   |\n+LL | global_asm!(\"\", const FOO, const FOO);\n+   |                 ^^^^^^^^^  ^^^^^^^^^ argument never used\n+   |                 |\n+   |                 argument never used\n+   |\n+   = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "fca77e7aa71f37d9b3841cbaf4e9a1fe31793dd7", "filename": "src/test/ui/asm/bad-template.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,8 +1,29 @@\n-// only-x86_64\n-// revisions: mirunsafeck thirunsafeck\n-// [thirunsafeck]compile-flags: -Z thir-unsafeck\n+// revisions: x86_64_mirunsafeck aarch64_mirunsafeck x86_64_thirunsafeck aarch64_thirunsafeck\n \n-#![feature(asm, global_asm)]\n+// [x86_64_thirunsafeck] compile-flags: -Z thir-unsafeck --target x86_64-unknown-linux-gnu\n+// [aarch64_thirunsafeck] compile-flags: -Z thir-unsafeck --target aarch64-unknown-linux-gnu\n+// [x86_64_mirunsafeck] compile-flags: --target x86_64-unknown-linux-gnu\n+// [aarch64_mirunsafeck] compile-flags: --target aarch64-unknown-linux-gnu\n+\n+// [x86_64_thirunsafeck] needs-llvm-components: x86\n+// [x86_64_mirunsafeck] needs-llvm-components: x86\n+// [aarch64_thirunsafeck] needs-llvm-components: aarch64\n+// [aarch64_mirunsafeck] needs-llvm-components: aarch64\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! global_asm {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n \n fn main() {\n     let mut foo = 0;\n@@ -20,8 +41,12 @@ fn main() {\n         asm!(\"{1}\", a = in(reg) foo);\n         //~^ ERROR invalid reference to argument at index 1\n         //~^^ ERROR named argument never used\n+        #[cfg(any(x86_64_thirunsafeck, x86_64_mirunsafeck))]\n         asm!(\"{}\", in(\"eax\") foo);\n-        //~^ ERROR invalid reference to argument at index 0\n+        //[x86_64_thirunsafeck,x86_64_mirunsafeck]~^ ERROR invalid reference to argument at index 0\n+        #[cfg(any(aarch64_thirunsafeck, aarch64_mirunsafeck))]\n+        asm!(\"{}\", in(\"x0\") foo);\n+        //[aarch64_thirunsafeck,aarch64_mirunsafeck]~^ ERROR invalid reference to argument at index 0\n         asm!(\"{:foo}\", in(reg) foo);\n         //~^ ERROR asm template modifier must be a single character\n         asm!(\"\", in(reg) 0, in(reg) 1);"}, {"sha": "3b69186f1e18b2fd7476a6fe92b5fa39a180365a", "filename": "src/test/ui/asm/bad-template.x86_64_mirunsafeck.stderr", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,35 +1,35 @@\n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:10:15\n+  --> $DIR/bad-template.rs:31:15\n    |\n LL |         asm!(\"{}\");\n    |               ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:12:15\n+  --> $DIR/bad-template.rs:33:15\n    |\n LL |         asm!(\"{1}\", in(reg) foo);\n    |               ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:12:21\n+  --> $DIR/bad-template.rs:33:21\n    |\n LL |         asm!(\"{1}\", in(reg) foo);\n    |                     ^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:15:15\n+  --> $DIR/bad-template.rs:36:15\n    |\n LL |         asm!(\"{a}\");\n    |               ^^^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:17:15\n+  --> $DIR/bad-template.rs:38:15\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |               ^^   --------------- named argument\n@@ -38,37 +38,37 @@ LL |         asm!(\"{}\", a = in(reg) foo);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:17:20\n+  --> $DIR/bad-template.rs:38:20\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |                    ^^^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:17:20\n+  --> $DIR/bad-template.rs:38:20\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |                    ^^^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:20:15\n+  --> $DIR/bad-template.rs:41:15\n    |\n LL |         asm!(\"{1}\", a = in(reg) foo);\n    |               ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:20:21\n+  --> $DIR/bad-template.rs:41:21\n    |\n LL |         asm!(\"{1}\", a = in(reg) foo);\n    |                     ^^^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:23:15\n+  --> $DIR/bad-template.rs:45:15\n    |\n LL |         asm!(\"{}\", in(\"eax\") foo);\n    |               ^^   ------------- explicit register argument\n@@ -77,19 +77,19 @@ LL |         asm!(\"{}\", in(\"eax\") foo);\n    |\n    = note: no positional arguments were given\n note: explicit register arguments cannot be used in the asm template\n-  --> $DIR/bad-template.rs:23:20\n+  --> $DIR/bad-template.rs:45:20\n    |\n LL |         asm!(\"{}\", in(\"eax\") foo);\n    |                    ^^^^^^^^^^^^^\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:25:17\n+  --> $DIR/bad-template.rs:50:17\n    |\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |                 ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:27:18\n+  --> $DIR/bad-template.rs:52:18\n    |\n LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -99,37 +99,37 @@ LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:33:14\n+  --> $DIR/bad-template.rs:58:14\n    |\n LL | global_asm!(\"{}\");\n    |              ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:35:14\n+  --> $DIR/bad-template.rs:60:14\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |              ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:35:20\n+  --> $DIR/bad-template.rs:60:20\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |                    ^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:38:14\n+  --> $DIR/bad-template.rs:63:14\n    |\n LL | global_asm!(\"{a}\");\n    |              ^^^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:40:14\n+  --> $DIR/bad-template.rs:65:14\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |              ^^   ------------- named argument\n@@ -138,43 +138,43 @@ LL | global_asm!(\"{}\", a = const FOO);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:40:19\n+  --> $DIR/bad-template.rs:65:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:40:19\n+  --> $DIR/bad-template.rs:65:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:43:14\n+  --> $DIR/bad-template.rs:68:14\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |              ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:43:20\n+  --> $DIR/bad-template.rs:68:20\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |                    ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:46:16\n+  --> $DIR/bad-template.rs:71:16\n    |\n LL | global_asm!(\"{:foo}\", const FOO);\n    |                ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:48:17\n+  --> $DIR/bad-template.rs:73:17\n    |\n LL | global_asm!(\"\", const FOO, const FOO);\n    |                 ^^^^^^^^^  ^^^^^^^^^ argument never used", "previous_filename": "src/test/ui/asm/bad-template.mirunsafeck.stderr"}, {"sha": "3b69186f1e18b2fd7476a6fe92b5fa39a180365a", "filename": "src/test/ui/asm/bad-template.x86_64_thirunsafeck.stderr", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,35 +1,35 @@\n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:10:15\n+  --> $DIR/bad-template.rs:31:15\n    |\n LL |         asm!(\"{}\");\n    |               ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:12:15\n+  --> $DIR/bad-template.rs:33:15\n    |\n LL |         asm!(\"{1}\", in(reg) foo);\n    |               ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:12:21\n+  --> $DIR/bad-template.rs:33:21\n    |\n LL |         asm!(\"{1}\", in(reg) foo);\n    |                     ^^^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:15:15\n+  --> $DIR/bad-template.rs:36:15\n    |\n LL |         asm!(\"{a}\");\n    |               ^^^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:17:15\n+  --> $DIR/bad-template.rs:38:15\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |               ^^   --------------- named argument\n@@ -38,37 +38,37 @@ LL |         asm!(\"{}\", a = in(reg) foo);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:17:20\n+  --> $DIR/bad-template.rs:38:20\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |                    ^^^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:17:20\n+  --> $DIR/bad-template.rs:38:20\n    |\n LL |         asm!(\"{}\", a = in(reg) foo);\n    |                    ^^^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:20:15\n+  --> $DIR/bad-template.rs:41:15\n    |\n LL |         asm!(\"{1}\", a = in(reg) foo);\n    |               ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:20:21\n+  --> $DIR/bad-template.rs:41:21\n    |\n LL |         asm!(\"{1}\", a = in(reg) foo);\n    |                     ^^^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:23:15\n+  --> $DIR/bad-template.rs:45:15\n    |\n LL |         asm!(\"{}\", in(\"eax\") foo);\n    |               ^^   ------------- explicit register argument\n@@ -77,19 +77,19 @@ LL |         asm!(\"{}\", in(\"eax\") foo);\n    |\n    = note: no positional arguments were given\n note: explicit register arguments cannot be used in the asm template\n-  --> $DIR/bad-template.rs:23:20\n+  --> $DIR/bad-template.rs:45:20\n    |\n LL |         asm!(\"{}\", in(\"eax\") foo);\n    |                    ^^^^^^^^^^^^^\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:25:17\n+  --> $DIR/bad-template.rs:50:17\n    |\n LL |         asm!(\"{:foo}\", in(reg) foo);\n    |                 ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:27:18\n+  --> $DIR/bad-template.rs:52:18\n    |\n LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    |                  ^^^^^^^^^  ^^^^^^^^^ argument never used\n@@ -99,37 +99,37 @@ LL |         asm!(\"\", in(reg) 0, in(reg) 1);\n    = help: if these arguments are intentionally unused, consider using them in an asm comment: `\"/* {0} {1} */\"`\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:33:14\n+  --> $DIR/bad-template.rs:58:14\n    |\n LL | global_asm!(\"{}\");\n    |              ^^ from here\n    |\n    = note: no arguments were given\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:35:14\n+  --> $DIR/bad-template.rs:60:14\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |              ^^^ from here\n    |\n    = note: there is 1 argument\n \n error: argument never used\n-  --> $DIR/bad-template.rs:35:20\n+  --> $DIR/bad-template.rs:60:20\n    |\n LL | global_asm!(\"{1}\", const FOO);\n    |                    ^^^^^^^^^ argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:38:14\n+  --> $DIR/bad-template.rs:63:14\n    |\n LL | global_asm!(\"{a}\");\n    |              ^^^\n \n error: invalid reference to argument at index 0\n-  --> $DIR/bad-template.rs:40:14\n+  --> $DIR/bad-template.rs:65:14\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |              ^^   ------------- named argument\n@@ -138,43 +138,43 @@ LL | global_asm!(\"{}\", a = const FOO);\n    |\n    = note: no positional arguments were given\n note: named arguments cannot be referenced by position\n-  --> $DIR/bad-template.rs:40:19\n+  --> $DIR/bad-template.rs:65:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:40:19\n+  --> $DIR/bad-template.rs:65:19\n    |\n LL | global_asm!(\"{}\", a = const FOO);\n    |                   ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: invalid reference to argument at index 1\n-  --> $DIR/bad-template.rs:43:14\n+  --> $DIR/bad-template.rs:68:14\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |              ^^^ from here\n    |\n    = note: no positional arguments were given\n \n error: named argument never used\n-  --> $DIR/bad-template.rs:43:20\n+  --> $DIR/bad-template.rs:68:20\n    |\n LL | global_asm!(\"{1}\", a = const FOO);\n    |                    ^^^^^^^^^^^^^ named argument never used\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {a} */\"`\n \n error: asm template modifier must be a single character\n-  --> $DIR/bad-template.rs:46:16\n+  --> $DIR/bad-template.rs:71:16\n    |\n LL | global_asm!(\"{:foo}\", const FOO);\n    |                ^^^\n \n error: multiple unused asm arguments\n-  --> $DIR/bad-template.rs:48:17\n+  --> $DIR/bad-template.rs:73:17\n    |\n LL | global_asm!(\"\", const FOO, const FOO);\n    |                 ^^^^^^^^^  ^^^^^^^^^ argument never used", "previous_filename": "src/test/ui/asm/bad-template.thirunsafeck.stderr"}, {"sha": "960f7427e3405c3b810e8dda9233a39c1b735fba", "filename": "src/test/ui/asm/issue-72570.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-72570.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Zsave-analysis\n-// only-x86_64\n+// needs-asm-support\n // Also test for #72960\n \n #![feature(asm)]"}, {"sha": "2958574c9a3c60781601e82808f4421502850839", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,4 +1,4 @@\n-// only-x86_64\n+// needs-asm-support\n #![feature(asm)]\n #![feature(llvm_asm)]\n #![feature(naked_functions)]"}, {"sha": "cb92ff0ad1d6d863aa2dc17d6852dd8c4d4aa262", "filename": "src/test/ui/asm/noreturn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fnoreturn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fnoreturn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnoreturn.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,4 +1,4 @@\n-// only-x86_64\n+// needs-asm-support\n // check-pass\n \n #![feature(asm, never_type)]"}, {"sha": "1d5d2038aa89caa0c8e4ee056a5e9962cc355d4b", "filename": "src/test/ui/asm/rustfix-asm.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// only-x86_64\n+// needs-asm-support\n \n #![feature(asm, llvm_asm)]\n #![allow(deprecated)] // llvm_asm!"}, {"sha": "12be0e666ee141bfad8233f6c3e75f1a7aeec6ff", "filename": "src/test/ui/asm/rustfix-asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-// only-x86_64\n+// needs-asm-support\n \n #![feature(asm, llvm_asm)]\n #![allow(deprecated)] // llvm_asm!"}, {"sha": "79887926bb14ae20e50d3230390f40d81eb5b6da", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,4 +1,4 @@\n-// only-x86_64\n+// needs-asm-support\n \n #![feature(asm, global_asm)]\n \n@@ -49,6 +49,8 @@ fn main() {\n         //~^ ERROR mismatched types\n         asm!(\"{}\", const 0 as *mut u8);\n         //~^ ERROR mismatched types\n+        asm!(\"{}\", const &0);\n+        //~^ ERROR mismatched types\n     }\n }\n "}, {"sha": "7f25e81af07de61b4751c773dcec87025630a310", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -40,6 +40,18 @@ LL |         asm!(\"{}\", const 0 as *mut u8);\n    = note:     expected type `{integer}`\n            found raw pointer `*mut u8`\n \n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:54:26\n+   |\n+LL |         asm!(\"{}\", const &0);\n+   |                          ^^ expected integer, found `&{integer}`\n+   |\n+help: consider removing the borrow\n+   |\n+LL -         asm!(\"{}\", const &0);\n+LL +         asm!(\"{}\", const 0);\n+   | \n+\n error: invalid asm output\n   --> $DIR/type-check-1.rs:10:29\n    |\n@@ -86,15 +98,15 @@ LL | global_asm!(\"{}\", const 0f32);\n    |                         ^^^^ expected integer, found `f32`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:62:25\n+  --> $DIR/type-check-1.rs:64:25\n    |\n LL | global_asm!(\"{}\", const 0 as *mut u8);\n    |                         ^^^^^^^^^^^^ expected integer, found *-ptr\n    |\n    = note:     expected type `{integer}`\n            found raw pointer `*mut u8`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0435.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "0aa7cdde142b45a7f17b3344cf8da17035038f24", "filename": "src/test/ui/asm/type-check-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Ftype-check-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Ftype-check-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-4.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,4 +1,4 @@\n-// only-x86_64\n+// needs-asm-support\n \n #![feature(asm)]\n "}, {"sha": "dc61d1612e8d64ea640eb889495afb05e90dd011", "filename": "src/test/ui/asm/x86_64/bad-options.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/bad-options.rs"}, {"sha": "8cfd450ab02a551becd9331c59eaa81f5e29d278", "filename": "src/test/ui/asm/x86_64/bad-options.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-options.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/bad-options.stderr"}, {"sha": "06af08fab80f99afe98558b0cacca3e24cfec13c", "filename": "src/test/ui/asm/x86_64/bad-reg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/bad-reg.rs"}, {"sha": "14740bf62f8e54d133f8ebc758b263295cf90dd6", "filename": "src/test/ui/asm/x86_64/bad-reg.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fbad-reg.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/bad-reg.stderr"}, {"sha": "d4de9abb8caf08a51531274721f73e896d289ffc", "filename": "src/test/ui/asm/x86_64/const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fconst.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/const.rs"}, {"sha": "d4444e9c6ccd8ee3098f22628cdf004e668af1af", "filename": "src/test/ui/asm/x86_64/duplicate-options.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fduplicate-options.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fduplicate-options.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fduplicate-options.fixed?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/duplicate-options.fixed"}, {"sha": "fd28311984bf18a25254e8c5a2eb5ab32f46ecd5", "filename": "src/test/ui/asm/x86_64/duplicate-options.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fduplicate-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fduplicate-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fduplicate-options.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/duplicate-options.rs"}, {"sha": "53edf8fb91cf6df19cc48fb8b864b8e5aead7a89", "filename": "src/test/ui/asm/x86_64/duplicate-options.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fduplicate-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fduplicate-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fduplicate-options.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/duplicate-options.stderr"}, {"sha": "f4cb749307d4d6ea45993f16d8730e38bdd8efd7", "filename": "src/test/ui/asm/x86_64/interpolated-idents.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Finterpolated-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Finterpolated-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Finterpolated-idents.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/interpolated-idents.rs"}, {"sha": "5de8d20547e3e3035970f59a49124b48182f9049", "filename": "src/test/ui/asm/x86_64/interpolated-idents.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Finterpolated-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Finterpolated-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Finterpolated-idents.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/interpolated-idents.stderr"}, {"sha": "a8e688cbe1ff3e6bbcf76ac7d112fa985b1681b2", "filename": "src/test/ui/asm/x86_64/issue-82869.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/issue-82869.rs"}, {"sha": "d05714ea6f2153428524e6b76f12d2ed0f1e1ae2", "filename": "src/test/ui/asm/x86_64/issue-82869.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fissue-82869.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/issue-82869.stderr"}, {"sha": "fa14c52cf0ad7f9fcd43549989d2bbf52d14b4e1", "filename": "src/test/ui/asm/x86_64/parse-error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/parse-error.rs"}, {"sha": "78d342cc1daf79f6fbf455b234501276d0a83858", "filename": "src/test/ui/asm/x86_64/parse-error.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/parse-error.stderr"}, {"sha": "ed8cefc58b727e8f4b793f2761844ebc4d59abc9", "filename": "src/test/ui/asm/x86_64/srcloc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/srcloc.rs"}, {"sha": "b62c8948289ddf1bf55575457bdc2e178c99d50c", "filename": "src/test/ui/asm/x86_64/srcloc.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsrcloc.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/srcloc.stderr"}, {"sha": "634ef010e6feaa96405a8ac6c5807711314b51cf", "filename": "src/test/ui/asm/x86_64/sym.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fsym.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/sym.rs"}, {"sha": "2311f86d340f48e4db0cc2917b407d44f8f5c216", "filename": "src/test/ui/asm/x86_64/type-check-2.rs", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -26,10 +26,6 @@ fn main() {\n         asm!(\"{}\", inout(reg) v[0]);\n         //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n \n-        // This currently causes an ICE: https://github.com/rust-lang/rust/issues/81857\n-        // asm!(\"{}\", const &0);\n-        // ERROR asm `const` arguments must be integer or floating-point values\n-\n         // Sym operands must point to a function or static\n \n         const C: i32 = 0;", "previous_filename": "src/test/ui/asm/type-check-2.rs"}, {"sha": "b82a0b8e2ba2611fe548be159e262bc35baa4dc1", "filename": "src/test/ui/asm/x86_64/type-check-2.stderr", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "patch": "@@ -1,21 +1,21 @@\n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:46:32\n+  --> $DIR/type-check-2.rs:42:32\n    |\n LL |         asm!(\"{}\", in(xmm_reg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:58:28: 58:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:58:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:54:28: 54:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:54:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:60:28\n+  --> $DIR/type-check-2.rs:56:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -24,45 +24,45 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:62:28\n+  --> $DIR/type-check-2.rs:58:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:64:28\n+  --> $DIR/type-check-2.rs:60:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:72:31\n+  --> $DIR/type-check-2.rs:68:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:75:31\n+  --> $DIR/type-check-2.rs:71:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:39:24\n+  --> $DIR/type-check-2.rs:35:24\n    |\n LL |         asm!(\"{}\", sym C);\n    |                        ^\n \n error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:41:24\n+  --> $DIR/type-check-2.rs:37:24\n    |\n LL |         asm!(\"{}\", sym x);\n    |                        ^", "previous_filename": "src/test/ui/asm/type-check-2.stderr"}, {"sha": "c2c1885ff166f45136a3eb891cbe2d7171387fea", "filename": "src/test/ui/asm/x86_64/type-check-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.rs?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/type-check-3.rs"}, {"sha": "9f6989ca03d1b666965db31970e35d6f073ebffb", "filename": "src/test/ui/asm/x86_64/type-check-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d218d02d9ea9d26c8acdae17f7e041d3755f5a3/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-3.stderr?ref=6d218d02d9ea9d26c8acdae17f7e041d3755f5a3", "previous_filename": "src/test/ui/asm/type-check-3.stderr"}]}