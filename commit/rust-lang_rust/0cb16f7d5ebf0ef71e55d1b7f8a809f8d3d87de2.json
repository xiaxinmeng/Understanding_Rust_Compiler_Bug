{"sha": "0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYjE2ZjdkNWViZjBlZjcxZTU1ZDFiN2Y4YTgwOWY4ZDNkODdkZTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-04T12:27:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-04T12:50:32Z"}, "message": "bump libcore tests to rand 0.7", "tree": {"sha": "17df6f759f882ef8d4926ffa1b31acbba645f232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17df6f759f882ef8d4926ffa1b31acbba645f232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2", "html_url": "https://github.com/rust-lang/rust/commit/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b78e98a372c323c2dfa5a19bc110f1c81415f8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b78e98a372c323c2dfa5a19bc110f1c81415f8e", "html_url": "https://github.com/rust-lang/rust/commit/5b78e98a372c323c2dfa5a19bc110f1c81415f8e"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "797a0a5fe840d9cc357602f1e7fd41dafe493f33", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2", "patch": "@@ -514,7 +514,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"core\"\n version = \"0.0.0\"\n dependencies = [\n- \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]"}, {"sha": "ac07ffb14febdd8ba0f74a7d1a319b1f0ea5f1f4", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2", "patch": "@@ -21,7 +21,7 @@ name = \"corebenches\"\n path = \"../libcore/benches/lib.rs\"\n \n [dev-dependencies]\n-rand = \"0.6\"\n+rand = \"0.7\"\n \n [features]\n # Make panics and failed asserts immediately abort without formatting any message"}, {"sha": "d56787b2819a7387a7191426733bdbb8ec19ac03", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2", "patch": "@@ -8,8 +8,8 @@ use core::num::flt2dec::strategy::grisu::format_exact_opt;\n use core::num::flt2dec::strategy::grisu::format_shortest_opt;\n use core::num::flt2dec::{decode, DecodableFloat, FullDecoded, Decoded};\n \n-use rand::FromEntropy;\n-use rand::rngs::SmallRng;\n+use rand::SeedableRng;\n+use rand::rngs::StdRng;\n use rand::distributions::{Distribution, Uniform};\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n@@ -65,7 +65,7 @@ pub fn f32_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n     if cfg!(target_os = \"emscripten\") {\n         return // using rng pulls in i128 support, which doesn't work\n     }\n-    let mut rng = SmallRng::from_entropy();\n+    let mut rng = StdRng::from_entropy();\n     let f32_range = Uniform::new(0x0000_0001u32, 0x7f80_0000);\n     iterate(\"f32_random_equivalence_test\", k, n, f, g, |_| {\n         let x = f32::from_bits(f32_range.sample(&mut rng));\n@@ -79,7 +79,7 @@ pub fn f64_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n     if cfg!(target_os = \"emscripten\") {\n         return // using rng pulls in i128 support, which doesn't work\n     }\n-    let mut rng = SmallRng::from_entropy();\n+    let mut rng = StdRng::from_entropy();\n     let f64_range = Uniform::new(0x0000_0000_0000_0001u64, 0x7ff0_0000_0000_0000);\n     iterate(\"f64_random_equivalence_test\", k, n, f, g, |_| {\n         let x = f64::from_bits(f64_range.sample(&mut rng));"}, {"sha": "04ad02766616dff650751634fc3e1d663e5cf269", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=0cb16f7d5ebf0ef71e55d1b7f8a809f8d3d87de2", "patch": "@@ -1157,7 +1157,7 @@ fn test_rotate_right() {\n fn sort_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use core::slice::heapsort;\n-    use rand::{FromEntropy, Rng, rngs::SmallRng, seq::SliceRandom};\n+    use rand::{SeedableRng, Rng, rngs::StdRng, seq::SliceRandom};\n \n     #[cfg(not(miri))] // Miri is too slow\n     let large_range = 500..510;\n@@ -1171,7 +1171,7 @@ fn sort_unstable() {\n \n     let mut v = [0; 600];\n     let mut tmp = [0; 600];\n-    let mut rng = SmallRng::from_entropy();\n+    let mut rng = StdRng::from_entropy();\n \n     for len in (2..25).chain(large_range) {\n         let v = &mut v[0..len];\n@@ -1237,11 +1237,11 @@ fn sort_unstable() {\n #[cfg(not(miri))] // Miri is too slow\n fn partition_at_index() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n-    use rand::rngs::SmallRng;\n+    use rand::rngs::StdRng;\n     use rand::seq::SliceRandom;\n-    use rand::{FromEntropy, Rng};\n+    use rand::{SeedableRng, Rng};\n \n-    let mut rng = SmallRng::from_entropy();\n+    let mut rng = StdRng::from_entropy();\n \n     for len in (2..21).chain(500..501) {\n         let mut orig = vec![0; len];"}]}