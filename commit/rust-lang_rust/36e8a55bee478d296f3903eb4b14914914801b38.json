{"sha": "36e8a55bee478d296f3903eb4b14914914801b38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZThhNTViZWU0NzhkMjk2ZjM5MDNlYjRiMTQ5MTQ5MTQ4MDFiMzg=", "commit": {"author": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T20:50:04Z"}, "committer": {"name": "Domantas Jadenkus", "email": "djadenkus@gmail.com", "date": "2021-02-13T20:51:07Z"}, "message": "use generate_impl_text in replace_derive_with_manual_impl", "tree": {"sha": "79e676507988ba0a0c37d8269a24a9151240d907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79e676507988ba0a0c37d8269a24a9151240d907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36e8a55bee478d296f3903eb4b14914914801b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36e8a55bee478d296f3903eb4b14914914801b38", "html_url": "https://github.com/rust-lang/rust/commit/36e8a55bee478d296f3903eb4b14914914801b38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36e8a55bee478d296f3903eb4b14914914801b38/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3364ac8b1106f6f0d8a52a8981c6c598152b5642", "url": "https://api.github.com/repos/rust-lang/rust/commits/3364ac8b1106f6f0d8a52a8981c6c598152b5642", "html_url": "https://github.com/rust-lang/rust/commit/3364ac8b1106f6f0d8a52a8981c6c598152b5642"}], "stats": {"total": 32, "additions": 12, "deletions": 20}, "files": [{"sha": "7f44d752faece7f6f1192a53697f931c92852911", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/36e8a55bee478d296f3903eb4b14914914801b38/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36e8a55bee478d296f3903eb4b14914914801b38/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=36e8a55bee478d296f3903eb4b14914914801b38", "patch": "@@ -1,20 +1,9 @@\n use ide_db::helpers::mod_path_to_ast;\n use ide_db::imports_locator;\n use itertools::Itertools;\n-use syntax::{\n-    ast::{self, make, AstNode},\n-    Direction,\n-    SyntaxKind::{IDENT, WHITESPACE},\n-    TextSize,\n-};\n-\n-use crate::{\n-    assist_context::{AssistBuilder, AssistContext, Assists},\n-    utils::{\n-        add_trait_assoc_items_to_impl, filter_assoc_items, render_snippet, Cursor, DefaultMethods,\n-    },\n-    AssistId, AssistKind,\n-};\n+use syntax::{SyntaxKind::{IDENT, WHITESPACE}, TextSize, ast::{self, AstNode, NameOwner, make}};\n+\n+use crate::{AssistId, AssistKind, assist_context::{AssistBuilder, AssistContext, Assists}, utils::{Cursor, DefaultMethods, add_trait_assoc_items_to_impl, filter_assoc_items, generate_trait_impl_text, render_snippet}};\n \n // Assist: replace_derive_with_manual_impl\n //\n@@ -57,8 +46,9 @@ pub(crate) fn replace_derive_with_manual_impl(\n     let trait_token = ctx.token_at_offset().find(|t| t.kind() == IDENT && t.text() != \"derive\")?;\n     let trait_path = make::path_unqualified(make::path_segment(make::name_ref(trait_token.text())));\n \n-    let annotated_name = attr.syntax().siblings(Direction::Next).find_map(ast::Name::cast)?;\n-    let insert_pos = annotated_name.syntax().parent()?.text_range().end();\n+    let adt = attr.syntax().parent().and_then(ast::Adt::cast)?;\n+    let annotated_name = adt.name()?;\n+    let insert_pos = adt.syntax().text_range().end();\n \n     let current_module = ctx.sema.scope(annotated_name.syntax()).module()?;\n     let current_crate = current_module.krate();\n@@ -82,10 +72,10 @@ pub(crate) fn replace_derive_with_manual_impl(\n \n     let mut no_traits_found = true;\n     for (trait_path, trait_) in found_traits.inspect(|_| no_traits_found = false) {\n-        add_assist(acc, ctx, &attr, &trait_path, Some(trait_), &annotated_name, insert_pos)?;\n+        add_assist(acc, ctx, &attr, &trait_path, Some(trait_), &adt, &annotated_name, insert_pos)?;\n     }\n     if no_traits_found {\n-        add_assist(acc, ctx, &attr, &trait_path, None, &annotated_name, insert_pos)?;\n+        add_assist(acc, ctx, &attr, &trait_path, None, &adt, &annotated_name, insert_pos)?;\n     }\n     Some(())\n }\n@@ -96,6 +86,7 @@ fn add_assist(\n     attr: &ast::Attr,\n     trait_path: &ast::Path,\n     trait_: Option<hir::Trait>,\n+    adt: &ast::Adt,\n     annotated_name: &ast::Name,\n     insert_pos: TextSize,\n ) -> Option<()> {\n@@ -112,15 +103,16 @@ fn add_assist(\n             let impl_def_with_items =\n                 impl_def_from_trait(&ctx.sema, annotated_name, trait_, trait_path);\n             update_attribute(builder, &input, &trait_name, &attr);\n+            let trait_path = format!(\"{}\", trait_path);\n             match (ctx.config.snippet_cap, impl_def_with_items) {\n                 (None, _) => builder.insert(\n                     insert_pos,\n-                    format!(\"\\n\\nimpl {} for {} {{\\n\\n}}\", trait_path, annotated_name),\n+                    generate_trait_impl_text(adt, &trait_path, \"\"),\n                 ),\n                 (Some(cap), None) => builder.insert_snippet(\n                     cap,\n                     insert_pos,\n-                    format!(\"\\n\\nimpl {} for {} {{\\n    $0\\n}}\", trait_path, annotated_name),\n+                    generate_trait_impl_text(adt, &trait_path, \"    $0\"),\n                 ),\n                 (Some(cap), Some((impl_def, first_assoc_item))) => {\n                     let mut cursor = Cursor::Before(first_assoc_item.syntax());"}]}