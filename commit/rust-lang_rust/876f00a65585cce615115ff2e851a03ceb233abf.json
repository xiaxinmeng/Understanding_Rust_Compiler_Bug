{"sha": "876f00a65585cce615115ff2e851a03ceb233abf", "node_id": "C_kwDOAAsO6NoAKDg3NmYwMGE2NTU4NWNjZTYxNTExNWZmMmU4NTFhMDNjZWIyMzNhYmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-18T06:06:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-18T06:06:41Z"}, "message": "Rollup merge of #107200 - mina86:c, r=Amanieu\n\nio: soften \u2018at most one write attempt\u2019 requirement in io::Write::write\n\nAt the moment, documentation of std::io::Write::write indicates that\ncall to it \u2018represents at most one attempt to write to any wrapped\nobject\u2019.  It seems that such wording was put there to contrast it with\npre-1.0 interface which attempted to write all the data (it has since\nbeen changed in [RFC 517]).\n\nHowever, the requirement puts unnecessary constraints and may\ncomplicate adaptors which perform non-trivial transformations on the\ndata.  For example, they may maintain an internal buffer which needs\nto be written out before the write method accepts more data.  It might\nbe natural to code the method such that it flushes the buffer and then\ngrabs another chunk of user data.  With the current wording in the\ndocumentation, the adaptor would be forced to return Ok(0).\n\nThis commit softens the wording such that implementations can choose\ncode structure which makes most sense for their particular use case.\n\nWhile at it, elaborate on the meaning of `Ok(0)` return pointing out\nthat the write_all methods interprets it as an error.\n\n[RFC 517]: https://rust-lang.github.io/rfcs/0517-io-os-reform.html", "tree": {"sha": "4d055a86e8513043ce97fde4c58c1d680c6fc8b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d055a86e8513043ce97fde4c58c1d680c6fc8b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876f00a65585cce615115ff2e851a03ceb233abf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkjp7xCRBK7hj4Ov3rIwAAWY8IAEvYBvv3zlkCM/EIU78/CRWW\n05yI34rauE9xsRjGaeIPPrp5TPyjFq0GT0Y8T4jBbIrpSD8KLVtY48Z1ly+XEzS+\nyphOum8c78bot/1n49RyJMXCNWMeFgdHs6Rvr1wFOu2fNj2iZ+L2IvAn59drzZes\nFvswWP8Wsiobw7fnodA/fKmnKvRy1WlLMSSnVT1U1TMFAi1uM3Y4OLVC7W4XXcmE\nGTSPSqwctENMbznUMJ3jvx6FE9hpmRJyS0t3e59GyjdCfYxc0Gez48ik0vGeU2G+\n3ZyN5yPhzdzUtOBKFetbatObdvhsawW61D/Kr32497vmCUVR3kv5WNUtzEVgaYg=\n=OnpL\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d055a86e8513043ce97fde4c58c1d680c6fc8b6\nparent 0c2c243342ec2a2427f0624fac5ac59f0ee6fbcd\nparent 7d57cd524a33179be58287737b7fd603a9d4a759\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1687068401 +0200\ncommitter GitHub <noreply@github.com> 1687068401 +0200\n\nRollup merge of #107200 - mina86:c, r=Amanieu\n\nio: soften \u2018at most one write attempt\u2019 requirement in io::Write::write\n\nAt the moment, documentation of std::io::Write::write indicates that\ncall to it \u2018represents at most one attempt to write to any wrapped\nobject\u2019.  It seems that such wording was put there to contrast it with\npre-1.0 interface which attempted to write all the data (it has since\nbeen changed in [RFC 517]).\n\nHowever, the requirement puts unnecessary constraints and may\ncomplicate adaptors which perform non-trivial transformations on the\ndata.  For example, they may maintain an internal buffer which needs\nto be written out before the write method accepts more data.  It might\nbe natural to code the method such that it flushes the buffer and then\ngrabs another chunk of user data.  With the current wording in the\ndocumentation, the adaptor would be forced to return Ok(0).\n\nThis commit softens the wording such that implementations can choose\ncode structure which makes most sense for their particular use case.\n\nWhile at it, elaborate on the meaning of `Ok(0)` return pointing out\nthat the write_all methods interprets it as an error.\n\n[RFC 517]: https://rust-lang.github.io/rfcs/0517-io-os-reform.html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876f00a65585cce615115ff2e851a03ceb233abf", "html_url": "https://github.com/rust-lang/rust/commit/876f00a65585cce615115ff2e851a03ceb233abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876f00a65585cce615115ff2e851a03ceb233abf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c2c243342ec2a2427f0624fac5ac59f0ee6fbcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2c243342ec2a2427f0624fac5ac59f0ee6fbcd", "html_url": "https://github.com/rust-lang/rust/commit/0c2c243342ec2a2427f0624fac5ac59f0ee6fbcd"}, {"sha": "7d57cd524a33179be58287737b7fd603a9d4a759", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d57cd524a33179be58287737b7fd603a9d4a759", "html_url": "https://github.com/rust-lang/rust/commit/7d57cd524a33179be58287737b7fd603a9d4a759"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "5c1d2d8f46cd47edf2adb15f5b7642098e03883f", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/876f00a65585cce615115ff2e851a03ceb233abf/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876f00a65585cce615115ff2e851a03ceb233abf/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=876f00a65585cce615115ff2e851a03ceb233abf", "patch": "@@ -1416,17 +1416,18 @@ pub trait Write {\n     ///\n     /// This function will attempt to write the entire contents of `buf`, but\n     /// the entire write might not succeed, or the write may also generate an\n-    /// error. A call to `write` represents *at most one* attempt to write to\n+    /// error. Typically, a call to `write` represents one attempt to write to\n     /// any wrapped object.\n     ///\n     /// Calls to `write` are not guaranteed to block waiting for data to be\n     /// written, and a write which would otherwise block can be indicated through\n     /// an [`Err`] variant.\n     ///\n-    /// If the return value is [`Ok(n)`] then it must be guaranteed that\n-    /// `n <= buf.len()`. A return value of `0` typically means that the\n-    /// underlying object is no longer able to accept bytes and will likely not\n-    /// be able to in the future as well, or that the buffer provided is empty.\n+    /// If this method consumed `n > 0` bytes of `buf` it must return [`Ok(n)`].\n+    /// If the return value is `Ok(n)` then `n` must satisfy `n <= buf.len()`.\n+    /// Unless `buf` is empty, this function shouldn\u2019t return `Ok(0)` since the\n+    /// caller may interpret that as an error.  To indicate lack of space,\n+    /// implementors should return [`ErrorKind::StorageFull`] error instead.\n     ///\n     /// # Errors\n     ///"}]}