{"sha": "df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMDQ2NmQwYmI4MDdhNzI2NmNjOGFjOTkzMWNkNDNiM2U4NGI2MmU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-01-16T17:59:03Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-01-25T23:39:54Z"}, "message": "Rebase to the llvm-project monorepo\n\nThe new git submodule src/llvm-project is a monorepo replacing src/llvm\nand src/tools/{clang,lld,lldb}.  This also serves as a rebase for these\nprojects to the new 8.x branch from trunk.\n\nThe src/llvm-emscripten fork is unchanged for now.", "tree": {"sha": "5e0ec889065b1aea33f6bf9630d8f70003816f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e0ec889065b1aea33f6bf9630d8f70003816f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "html_url": "https://github.com/rust-lang/rust/commit/df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf669d1e3295bc688f71b8c91f48a6beaf895f67", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf669d1e3295bc688f71b8c91f48a6beaf895f67", "html_url": "https://github.com/rust-lang/rust/commit/bf669d1e3295bc688f71b8c91f48a6beaf895f67"}], "stats": {"total": 231, "additions": 166, "deletions": 65}, "files": [{"sha": "4e368c3ebafd8ba3b766ffd4d21d2339ec4f1852", "filename": ".gitmodules", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -1,7 +1,3 @@\n-[submodule \"src/llvm\"]\n-\tpath = src/llvm\n-\turl = https://github.com/rust-lang/llvm.git\n-\tbranch = master\n [submodule \"src/rust-installer\"]\n \tpath = src/tools/rust-installer\n \turl = https://github.com/rust-lang/rust-installer.git\n@@ -38,20 +34,13 @@\n [submodule \"src/stdsimd\"]\n \tpath = src/stdsimd\n \turl = https://github.com/rust-lang-nursery/stdsimd.git\n-[submodule \"src/tools/lld\"]\n-\tpath = src/tools/lld\n-\turl = https://github.com/rust-lang/lld.git\n-[submodule \"src/tools/lldb\"]\n-\tpath = src/tools/lldb\n-\turl = https://github.com/rust-lang-nursery/lldb.git\n-\tbranch = rust-release-80-v2\n-[submodule \"src/tools/clang\"]\n-\tpath = src/tools/clang\n-\turl = https://github.com/rust-lang-nursery/clang.git\n-\tbranch = rust-release-80-v2\n [submodule \"src/doc/rustc-guide\"]\n \tpath = src/doc/rustc-guide\n \turl = https://github.com/rust-lang/rustc-guide.git\n [submodule \"src/doc/edition-guide\"]\n \tpath = src/doc/edition-guide\n-\turl = https://github.com/rust-lang-nursery/edition-guide\n+\turl = https://github.com/rust-lang-nursery/edition-guide.git\n+[submodule \"src/llvm-project\"]\n+\tpath = src/llvm-project\n+\turl = https://github.com/rust-lang/llvm-project.git\n+\tbranch = rustc/8.0-2019-01-16"}, {"sha": "dc9abf84b8e5a4d3b6ab5472883f0997fa0454cc", "filename": "COPYRIGHT", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/COPYRIGHT", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/COPYRIGHT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COPYRIGHT?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -23,7 +23,7 @@ The Rust Project includes packages written by third parties.\n The following third party packages are included, and carry\n their own copyright notices and license terms:\n \n-* LLVM. Code for this package is found in src/llvm.\n+* LLVM. Code for this package is found in src/llvm-project.\n \n     Copyright (c) 2003-2013 University of Illinois at\n     Urbana-Champaign.  All rights reserved.\n@@ -73,8 +73,8 @@ their own copyright notices and license terms:\n     OTHER DEALINGS WITH THE SOFTWARE.\n \n * Additional libraries included in LLVM carry separate\n-  BSD-compatible licenses. See src/llvm/LICENSE.txt for\n-  details.\n+  BSD-compatible licenses. See src/llvm-project/llvm/LICENSE.TXT\n+  for details.\n \n * compiler-rt, in src/compiler-rt is dual licensed under\n   LLVM's license and MIT:"}, {"sha": "119b38bcc99dce1b0f8bc9bf505d63e211bdeec7", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -701,21 +701,13 @@ def update_submodules(self):\n         filtered_submodules = []\n         submodules_names = []\n         for module in submodules:\n-            if module.endswith(\"llvm\"):\n-                if self.get_toml('llvm-config'):\n+            if module.endswith(\"llvm-project\"):\n+                if self.get_toml('llvm-config') and self.get_toml('lld') != 'true':\n                     continue\n             if module.endswith(\"llvm-emscripten\"):\n                 backends = self.get_toml('codegen-backends')\n                 if backends is None or not 'emscripten' in backends:\n                     continue\n-            if module.endswith(\"lld\"):\n-                config = self.get_toml('lld')\n-                if config is None or config == 'false':\n-                    continue\n-            if module.endswith(\"lldb\") or module.endswith(\"clang\"):\n-                config = self.get_toml('lldb')\n-                if config is None or config == 'false':\n-                    continue\n             check = self.check_submodule(module, slow_submodules)\n             filtered_submodules.append((module, check))\n             submodules_names.append(module)"}, {"sha": "98d2fb1e2d039e6761c2ba9f6a4f9ff3025a7862", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -788,7 +788,24 @@ fn copy_src_dirs(builder: &Builder, src_dirs: &[&str], exclude_dirs: &[&str], ds\n         if spath.ends_with(\"~\") || spath.ends_with(\".pyc\") {\n             return false\n         }\n-        if (spath.contains(\"llvm/test\") || spath.contains(\"llvm\\\\test\")) &&\n+\n+        const LLVM_PROJECTS: &[&str] = &[\n+            \"llvm-project/clang\", \"llvm-project\\\\clang\",\n+            \"llvm-project/lld\", \"llvm-project\\\\lld\",\n+            \"llvm-project/lldb\", \"llvm-project\\\\lldb\",\n+            \"llvm-project/llvm\", \"llvm-project\\\\llvm\",\n+        ];\n+        if spath.contains(\"llvm-project\") && !spath.ends_with(\"llvm-project\")\n+            && !LLVM_PROJECTS.iter().any(|path| spath.contains(path))\n+        {\n+            return false;\n+        }\n+\n+        const LLVM_TEST: &[&str] = &[\n+            \"llvm-project/llvm/test\", \"llvm-project\\\\llvm\\\\test\",\n+            \"llvm-emscripten/test\", \"llvm-emscripten\\\\test\",\n+        ];\n+        if LLVM_TEST.iter().any(|path| spath.contains(path)) &&\n             (spath.ends_with(\".ll\") ||\n              spath.ends_with(\".td\") ||\n              spath.ends_with(\".s\")) {\n@@ -2076,7 +2093,7 @@ impl Step for LlvmTools {\n         }\n \n         builder.info(&format!(\"Dist LlvmTools stage{} ({})\", stage, target));\n-        let src = builder.src.join(\"src/llvm\");\n+        let src = builder.src.join(\"src/llvm-project/llvm\");\n         let name = pkgname(builder, \"llvm-tools\");\n \n         let tmp = tmpdir(builder);\n@@ -2135,7 +2152,7 @@ impl Step for Lldb {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/tools/lldb\")\n+        run.path(\"src/llvm-project/lldb\").path(\"src/tools/lldb\")\n     }\n \n     fn make_run(run: RunConfig) {\n@@ -2160,7 +2177,7 @@ impl Step for Lldb {\n         }\n \n         builder.info(&format!(\"Dist Lldb ({})\", target));\n-        let src = builder.src.join(\"src/tools/lldb\");\n+        let src = builder.src.join(\"src/llvm-project/lldb\");\n         let name = pkgname(builder, \"lldb\");\n \n         let tmp = tmpdir(builder);"}, {"sha": "337c6965a30cf1b4a27df274b89592ae7c76abc5", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -36,7 +36,10 @@ impl Step for Llvm {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/llvm\").path(\"src/llvm-emscripten\")\n+        run.path(\"src/llvm-project\")\n+            .path(\"src/llvm-project/llvm\")\n+            .path(\"src/llvm\")\n+            .path(\"src/llvm-emscripten\")\n     }\n \n     fn make_run(run: RunConfig) {\n@@ -97,7 +100,7 @@ impl Step for Llvm {\n         t!(fs::create_dir_all(&out_dir));\n \n         // http://llvm.org/docs/CMake.html\n-        let root = if self.emscripten { \"src/llvm-emscripten\" } else { \"src/llvm\" };\n+        let root = if self.emscripten { \"src/llvm-emscripten\" } else { \"src/llvm-project/llvm\" };\n         let mut cfg = cmake::Config::new(builder.src.join(root));\n \n         let profile = match (builder.config.llvm_optimize, builder.config.llvm_release_debuginfo) {\n@@ -189,8 +192,7 @@ impl Step for Llvm {\n         }\n \n         if want_lldb {\n-            cfg.define(\"LLVM_EXTERNAL_CLANG_SOURCE_DIR\", builder.src.join(\"src/tools/clang\"));\n-            cfg.define(\"LLVM_EXTERNAL_LLDB_SOURCE_DIR\", builder.src.join(\"src/tools/lldb\"));\n+            cfg.define(\"LLVM_ENABLE_PROJECTS\", \"clang;lldb\");\n             // For the time being, disable code signing.\n             cfg.define(\"LLDB_CODESIGN_IDENTITY\", \"\");\n         } else {\n@@ -411,7 +413,7 @@ impl Step for Lld {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/tools/lld\")\n+        run.path(\"src/llvm-project/lld\").path(\"src/tools/lld\")\n     }\n \n     fn make_run(run: RunConfig) {\n@@ -441,7 +443,7 @@ impl Step for Lld {\n         let _time = util::timeit(&builder);\n         t!(fs::create_dir_all(&out_dir));\n \n-        let mut cfg = cmake::Config::new(builder.src.join(\"src/tools/lld\"));\n+        let mut cfg = cmake::Config::new(builder.src.join(\"src/llvm-project/lld\"));\n         configure_cmake(builder, target, &mut cfg);\n \n         // This is an awful, awful hack. Discovered when we migrated to using"}, {"sha": "6de433fd4c2da9d344f74d41badc53b7f3cc6c0b", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -45,8 +45,7 @@ function fetch_submodule {\n     rm $cached\n }\n \n-included=\"src/llvm src/llvm-emscripten src/doc/book src/doc/rust-by-example\"\n-included=\"$included src/tools/lld src/tools/clang src/tools/lldb\"\n+included=\"src/llvm-project src/llvm-emscripten src/doc/book src/doc/rust-by-example\"\n modules=\"$(git config --file .gitmodules --get-regexp '\\.path$' | cut -d' ' -f2)\"\n modules=($modules)\n use_git=\"\""}, {"sha": "113b9958c7f8c7496669db75091f84b0299527bb", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -12,7 +12,7 @@ use self::source_loc::InternalDebugLocation::{self, UnknownLocation};\n \n use llvm;\n use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilder, DISubprogram, DIArray, DIFlags,\n-    DILexicalBlock};\n+    DISPFlags, DILexicalBlock};\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ty::subst::{Substs, UnpackedKind};\n@@ -283,7 +283,6 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let linkage_name = mangled_name_of_instance(self, instance);\n \n         let scope_line = span_start(self, span).line;\n-        let is_local_to_unit = is_node_local_to_unit(self, def_id);\n \n         let function_name = CString::new(name).unwrap();\n         let linkage_name = SmallCStr::new(&linkage_name.as_str());\n@@ -300,6 +299,14 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             flags |= DIFlags::FlagNoReturn;\n         }\n \n+        let mut spflags = DISPFlags::SPFlagDefinition;\n+        if is_node_local_to_unit(self, def_id) {\n+            spflags |= DISPFlags::SPFlagLocalToUnit;\n+        }\n+        if self.sess().opts.optimize != config::OptLevel::No {\n+            spflags |= DISPFlags::SPFlagOptimized;\n+        }\n+\n         let fn_metadata = unsafe {\n             llvm::LLVMRustDIBuilderCreateFunction(\n                 DIB(self),\n@@ -309,11 +316,9 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 file_metadata,\n                 loc.line as c_uint,\n                 function_type_metadata,\n-                is_local_to_unit,\n-                true,\n                 scope_line as c_uint,\n                 flags,\n-                self.sess().opts.optimize != config::OptLevel::No,\n+                spflags,\n                 llfn,\n                 template_parameters,\n                 None)"}, {"sha": "853c1ff0047e73ee8532e19f2ab70aeed799b608", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -2,7 +2,7 @@ use super::debuginfo::{\n     DIBuilder, DIDescriptor, DIFile, DILexicalBlock, DISubprogram, DIType,\n     DIBasicType, DIDerivedType, DICompositeType, DIScope, DIVariable,\n     DIGlobalVariableExpression, DIArray, DISubrange, DITemplateTypeParameter, DIEnumerator,\n-    DINameSpace, DIFlags,\n+    DINameSpace, DIFlags, DISPFlags,\n };\n \n use libc::{c_uint, c_int, size_t, c_char};\n@@ -591,6 +591,20 @@ pub mod debuginfo {\n             const FlagMainSubprogram      = (1 << 21);\n         }\n     }\n+\n+    // These values **must** match with LLVMRustDISPFlags!!\n+    bitflags! {\n+        #[repr(C)]\n+        #[derive(Default)]\n+        pub struct DISPFlags: ::libc::uint32_t {\n+            const SPFlagZero              = 0;\n+            const SPFlagVirtual           = 1;\n+            const SPFlagPureVirtual       = 2;\n+            const SPFlagLocalToUnit       = (1 << 2);\n+            const SPFlagDefinition        = (1 << 3);\n+            const SPFlagOptimized         = (1 << 4);\n+        }\n+    }\n }\n \n extern { pub type ModuleBuffer; }\n@@ -1387,11 +1401,9 @@ extern \"C\" {\n                                            File: &'a DIFile,\n                                            LineNo: c_uint,\n                                            Ty: &'a DIType,\n-                                           isLocalToUnit: bool,\n-                                           isDefinition: bool,\n                                            ScopeLine: c_uint,\n                                            Flags: DIFlags,\n-                                           isOptimized: bool,\n+                                           SPFlags: DISPFlags,\n                                            Fn: &'a Value,\n                                            TParam: &'a DIArray,\n                                            Decl: Option<&'a DIDescriptor>)\n@@ -1529,7 +1541,7 @@ extern \"C\" {\n                                                   AlignInBits: u32,\n                                                   Elements: &'a DIArray,\n                                                   ClassType: &'a DIType,\n-                                                  IsFixed: bool)\n+                                                  IsScoped: bool)\n                                                   -> &'a DIType;\n \n     pub fn LLVMRustDIBuilderCreateUnionType(Builder: &DIBuilder<'a>,"}, {"sha": "f4728ed8fa2296c5b009bb85550e157e1e57ed0b", "filename": "src/llvm", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=bf669d1e3295bc688f71b8c91f48a6beaf895f67", "patch": "@@ -1 +0,0 @@\n-Subproject commit f4728ed8fa2296c5b009bb85550e157e1e57ed0b"}, {"sha": "a27fbee5abaee63ac45c8cb9a0c73889c3b98471", "filename": "src/llvm-project", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -0,0 +1 @@\n+Subproject commit a27fbee5abaee63ac45c8cb9a0c73889c3b98471"}, {"sha": "18d277be21a1655c6e7e98b24ceac3bd9b80d2bf", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -789,7 +789,7 @@ struct LLVMRustThinLTOData {\n   StringMap<GVSummaryMapTy> ModuleToDefinedGVSummaries;\n \n #if LLVM_VERSION_GE(7, 0)\n-  LLVMRustThinLTOData() : Index(/* isPerformingAnalysis = */ false) {}\n+  LLVMRustThinLTOData() : Index(/* HaveGVs = */ false) {}\n #endif\n };\n \n@@ -865,7 +865,12 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   auto deadIsPrevailing = [&](GlobalValue::GUID G) {\n     return PrevailingType::Unknown;\n   };\n+#if LLVM_VERSION_GE(8, 0)\n+  computeDeadSymbolsWithConstProp(Ret->Index, Ret->GUIDPreservedSymbols,\n+                                  deadIsPrevailing, /* ImportEnabled = */ true);\n+#else\n   computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols, deadIsPrevailing);\n+#endif\n #else\n   computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols);\n #endif"}, {"sha": "7905e9f0f237edb2d376124076a03bcf04a8f675", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 86, "deletions": 7, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -294,7 +294,7 @@ extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef V) {\n extern \"C\" LLVMValueRef\n LLVMRustBuildAtomicLoad(LLVMBuilderRef B, LLVMValueRef Source, const char *Name,\n                         LLVMAtomicOrdering Order) {\n-  LoadInst *LI = new LoadInst(unwrap(Source), 0);\n+  LoadInst *LI = new LoadInst(unwrap(Source));\n   LI->setAtomic(fromRust(Order));\n   return wrap(unwrap(B)->Insert(LI, Name));\n }\n@@ -511,6 +511,71 @@ static DINode::DIFlags fromRust(LLVMRustDIFlags Flags) {\n   return Result;\n }\n \n+// These values **must** match debuginfo::DISPFlags! They also *happen*\n+// to match LLVM, but that isn't required as we do giant sets of\n+// matching below. The value shouldn't be directly passed to LLVM.\n+enum class LLVMRustDISPFlags : uint32_t {\n+  SPFlagZero = 0,\n+  SPFlagVirtual = 1,\n+  SPFlagPureVirtual = 2,\n+  SPFlagLocalToUnit = (1 << 2),\n+  SPFlagDefinition = (1 << 3),\n+  SPFlagOptimized = (1 << 4),\n+  // Do not add values that are not supported by the minimum LLVM\n+  // version we support! see llvm/include/llvm/IR/DebugInfoFlags.def\n+  // (In LLVM < 8, createFunction supported these as separate bool arguments.)\n+};\n+\n+inline LLVMRustDISPFlags operator&(LLVMRustDISPFlags A, LLVMRustDISPFlags B) {\n+  return static_cast<LLVMRustDISPFlags>(static_cast<uint32_t>(A) &\n+                                      static_cast<uint32_t>(B));\n+}\n+\n+inline LLVMRustDISPFlags operator|(LLVMRustDISPFlags A, LLVMRustDISPFlags B) {\n+  return static_cast<LLVMRustDISPFlags>(static_cast<uint32_t>(A) |\n+                                      static_cast<uint32_t>(B));\n+}\n+\n+inline LLVMRustDISPFlags &operator|=(LLVMRustDISPFlags &A, LLVMRustDISPFlags B) {\n+  return A = A | B;\n+}\n+\n+inline bool isSet(LLVMRustDISPFlags F) { return F != LLVMRustDISPFlags::SPFlagZero; }\n+\n+inline LLVMRustDISPFlags virtuality(LLVMRustDISPFlags F) {\n+  return static_cast<LLVMRustDISPFlags>(static_cast<uint32_t>(F) & 0x3);\n+}\n+\n+#if LLVM_VERSION_GE(8, 0)\n+static DISubprogram::DISPFlags fromRust(LLVMRustDISPFlags SPFlags) {\n+  DISubprogram::DISPFlags Result = DISubprogram::DISPFlags::SPFlagZero;\n+\n+  switch (virtuality(SPFlags)) {\n+  case LLVMRustDISPFlags::SPFlagVirtual:\n+    Result |= DISubprogram::DISPFlags::SPFlagVirtual;\n+    break;\n+  case LLVMRustDISPFlags::SPFlagPureVirtual:\n+    Result |= DISubprogram::DISPFlags::SPFlagPureVirtual;\n+    break;\n+  default:\n+    // The rest are handled below\n+    break;\n+  }\n+\n+  if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagLocalToUnit)) {\n+    Result |= DISubprogram::DISPFlags::SPFlagLocalToUnit;\n+  }\n+  if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagDefinition)) {\n+    Result |= DISubprogram::DISPFlags::SPFlagDefinition;\n+  }\n+  if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagOptimized)) {\n+    Result |= DISubprogram::DISPFlags::SPFlagOptimized;\n+  }\n+\n+  return Result;\n+}\n+#endif\n+\n extern \"C\" uint32_t LLVMRustDebugMetadataVersion() {\n   return DEBUG_METADATA_VERSION;\n }\n@@ -575,16 +640,26 @@ LLVMRustDIBuilderCreateSubroutineType(LLVMRustDIBuilderRef Builder,\n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n     const char *LinkageName, LLVMMetadataRef File, unsigned LineNo,\n-    LLVMMetadataRef Ty, bool IsLocalToUnit, bool IsDefinition,\n-    unsigned ScopeLine, LLVMRustDIFlags Flags, bool IsOptimized,\n-    LLVMValueRef Fn, LLVMMetadataRef TParam, LLVMMetadataRef Decl) {\n+    LLVMMetadataRef Ty, unsigned ScopeLine, LLVMRustDIFlags Flags,\n+    LLVMRustDISPFlags SPFlags, LLVMValueRef Fn, LLVMMetadataRef TParam,\n+    LLVMMetadataRef Decl) {\n   DITemplateParameterArray TParams =\n       DITemplateParameterArray(unwrap<MDTuple>(TParam));\n+#if LLVM_VERSION_GE(8, 0)\n+  DISubprogram *Sub = Builder->createFunction(\n+      unwrapDI<DIScope>(Scope), Name, LinkageName, unwrapDI<DIFile>(File),\n+      LineNo, unwrapDI<DISubroutineType>(Ty), ScopeLine, fromRust(Flags),\n+      fromRust(SPFlags), TParams, unwrapDIPtr<DISubprogram>(Decl));\n+#else\n+  bool IsLocalToUnit = isSet(SPFlags & LLVMRustDISPFlags::SPFlagLocalToUnit);\n+  bool IsDefinition = isSet(SPFlags & LLVMRustDISPFlags::SPFlagDefinition);\n+  bool IsOptimized = isSet(SPFlags & LLVMRustDISPFlags::SPFlagOptimized);\n   DISubprogram *Sub = Builder->createFunction(\n       unwrapDI<DIScope>(Scope), Name, LinkageName, unwrapDI<DIFile>(File),\n       LineNo, unwrapDI<DISubroutineType>(Ty), IsLocalToUnit, IsDefinition,\n       ScopeLine, fromRust(Flags), IsOptimized, TParams,\n       unwrapDIPtr<DISubprogram>(Decl));\n+#endif\n   unwrap<Function>(Fn)->setSubprogram(Sub);\n   return wrap(Sub);\n }\n@@ -773,14 +848,14 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n     LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n     uint32_t AlignInBits, LLVMMetadataRef Elements,\n-    LLVMMetadataRef ClassTy, bool IsFixed) {\n+    LLVMMetadataRef ClassTy, bool IsScoped) {\n #if LLVM_VERSION_GE(7, 0)\n   return wrap(Builder->createEnumerationType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, DINodeArray(unwrapDI<MDTuple>(Elements)),\n-      unwrapDI<DIType>(ClassTy), \"\", IsFixed));\n+      unwrapDI<DIType>(ClassTy), \"\", IsScoped));\n #else\n-  // Ignore IsFixed on older LLVM.\n+  // Ignore IsScoped on older LLVM.\n   return wrap(Builder->createEnumerationType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, DINodeArray(unwrapDI<MDTuple>(Elements)),\n@@ -920,7 +995,11 @@ extern \"C\" void LLVMRustUnpackOptimizationDiagnostic(\n   if (loc.isValid()) {\n     *Line = loc.getLine();\n     *Column = loc.getColumn();\n+#if LLVM_VERSION_GE(8, 0)\n+    FilenameOS << loc.getAbsolutePath();\n+#else\n     FilenameOS << loc.getFilename();\n+#endif\n   }\n \n   RawRustStringOstream MessageOS(MessageOut);"}, {"sha": "9ee1bceb632bd4451e9b19ac24229bc152e6697d", "filename": "src/rustllvm/llvm-rebuild-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Frustllvm%2Fllvm-rebuild-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Frustllvm%2Fllvm-rebuild-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-rebuild-trigger?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be (optionally) cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2018-12-13\n+2019-01-16"}, {"sha": "62cfef5a845e9d5f64449f737a367375e6a5387d", "filename": "src/test/codegen/enum-debug-clike.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -8,8 +8,11 @@\n \n // compile-flags: -g -C no-prepopulate-passes\n \n+// DIFlagFixedEnum was deprecated in 8.0, renamed to DIFlagEnumClass.\n+// We match either for compatibility.\n+\n // CHECK-LABEL: @main\n-// CHECK: {{.*}}DICompositeType{{.*}}tag: DW_TAG_enumeration_type,{{.*}}name: \"E\",{{.*}}flags: DIFlagFixedEnum,{{.*}}\n+// CHECK: {{.*}}DICompositeType{{.*}}tag: DW_TAG_enumeration_type,{{.*}}name: \"E\",{{.*}}flags: {{(DIFlagEnumClass|DIFlagFixedEnum)}},{{.*}}\n // CHECK: {{.*}}DIEnumerator{{.*}}name: \"A\",{{.*}}value: {{[0-9].*}}\n // CHECK: {{.*}}DIEnumerator{{.*}}name: \"B\",{{.*}}value: {{[0-9].*}}\n // CHECK: {{.*}}DIEnumerator{{.*}}name: \"C\",{{.*}}value: {{[0-9].*}}"}, {"sha": "032312dd0140a7074c9b89d305fe44eb0e44e407", "filename": "src/tools/clang", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclang?ref=bf669d1e3295bc688f71b8c91f48a6beaf895f67", "patch": "@@ -1 +0,0 @@\n-Subproject commit 032312dd0140a7074c9b89d305fe44eb0e44e407"}, {"sha": "1928c5eeb613a4c6d232fc47ae91914bbfd92a79", "filename": "src/tools/lld", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld?ref=bf669d1e3295bc688f71b8c91f48a6beaf895f67", "patch": "@@ -1 +0,0 @@\n-Subproject commit 1928c5eeb613a4c6d232fc47ae91914bbfd92a79"}, {"sha": "8ad0817ce45b0eef9d374691b23f2bd69c164254", "filename": "src/tools/lldb", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flldb?ref=bf669d1e3295bc688f71b8c91f48a6beaf895f67", "patch": "@@ -1 +0,0 @@\n-Subproject commit 8ad0817ce45b0eef9d374691b23f2bd69c164254"}, {"sha": "022c53f909c759d0066c99f312fa97079e00003b", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0466d0bb807a7266cc8ac9931cd43b3e84b62e/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=df0466d0bb807a7266cc8ac9931cd43b3e84b62e", "patch": "@@ -47,6 +47,7 @@ pub mod libcoretest;\n fn filter_dirs(path: &Path) -> bool {\n     let skip = [\n         \"src/llvm\",\n+        \"src/llvm-project\",\n         \"src/llvm-emscripten\",\n         \"src/libbacktrace\",\n         \"src/librustc_data_structures/owning_ref\","}]}