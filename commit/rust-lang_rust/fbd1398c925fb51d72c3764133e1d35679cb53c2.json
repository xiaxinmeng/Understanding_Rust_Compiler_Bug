{"sha": "fbd1398c925fb51d72c3764133e1d35679cb53c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZDEzOThjOTI1ZmI1MWQ3MmMzNzY0MTMzZTFkMzU2NzljYjUzYzI=", "commit": {"author": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-19T08:08:17Z"}, "committer": {"name": "Kevin Yeh", "email": "kevinyeah@utexas.edu", "date": "2015-11-19T20:23:56Z"}, "message": "Implement Rewrite for ast::Stmt", "tree": {"sha": "b710f03908c3c3e9af2b01071638cd9a4a9e33de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b710f03908c3c3e9af2b01071638cd9a4a9e33de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd1398c925fb51d72c3764133e1d35679cb53c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd1398c925fb51d72c3764133e1d35679cb53c2", "html_url": "https://github.com/rust-lang/rust/commit/fbd1398c925fb51d72c3764133e1d35679cb53c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd1398c925fb51d72c3764133e1d35679cb53c2/comments", "author": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kyeah", "id": 2308368, "node_id": "MDQ6VXNlcjIzMDgzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2308368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyeah", "html_url": "https://github.com/kyeah", "followers_url": "https://api.github.com/users/kyeah/followers", "following_url": "https://api.github.com/users/kyeah/following{/other_user}", "gists_url": "https://api.github.com/users/kyeah/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyeah/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyeah/subscriptions", "organizations_url": "https://api.github.com/users/kyeah/orgs", "repos_url": "https://api.github.com/users/kyeah/repos", "events_url": "https://api.github.com/users/kyeah/events{/privacy}", "received_events_url": "https://api.github.com/users/kyeah/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22837b07483c91f8fbda2bd1df3e2bb83af5c48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/22837b07483c91f8fbda2bd1df3e2bb83af5c48d", "html_url": "https://github.com/rust-lang/rust/commit/22837b07483c91f8fbda2bd1df3e2bb83af5c48d"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "5ec12876c4bbcf332084b7f4db0f073608a5febd", "filename": "src/expr.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fbd1398c925fb51d72c3764133e1d35679cb53c2/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd1398c925fb51d72c3764133e1d35679cb53c2/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fbd1398c925fb51d72c3764133e1d35679cb53c2", "patch": "@@ -17,7 +17,8 @@ use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n             DefinitiveListTactic, definitive_tactic, ListItem, format_fn_args};\n use string::{StringFormat, rewrite_string};\n-use utils::{span_after, extra_offset, last_line_width, wrap_str, binary_search, first_line_width};\n+use utils::{span_after, extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n+            semicolon_for_stmt};\n use visitor::FmtVisitor;\n use config::{StructLitStyle, MultilineStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment};\n@@ -475,6 +476,33 @@ impl Rewrite for ast::Block {\n     }\n }\n \n+impl Rewrite for ast::Stmt {\n+    fn rewrite(&self, context: &RewriteContext, _width: usize, offset: Indent) -> Option<String> {\n+        match self.node {\n+            ast::Stmt_::StmtDecl(ref decl, _) => {\n+                if let ast::Decl_::DeclLocal(ref local) = decl.node {\n+                    local.rewrite(context, context.config.max_width, offset)\n+                } else {\n+                    None\n+                }\n+            }\n+            ast::Stmt_::StmtExpr(ref ex, _) | ast::Stmt_::StmtSemi(ref ex, _) => {\n+                let suffix = if semicolon_for_stmt(self) {\n+                    \";\"\n+                } else {\n+                    \"\"\n+                };\n+\n+                ex.rewrite(context,\n+                           context.config.max_width - offset.width() - suffix.len(),\n+                           offset)\n+                  .map(|s| s + suffix)\n+            }\n+            ast::Stmt_::StmtMac(..) => None,\n+        }\n+    }\n+}\n+\n // Abstraction over for, while and loop expressions\n struct Loop<'a> {\n     cond: Option<&'a ast::Expr>,"}, {"sha": "eac01242737e4c045afa77fcd616d4646af38c40", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fbd1398c925fb51d72c3764133e1d35679cb53c2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd1398c925fb51d72c3764133e1d35679cb53c2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fbd1398c925fb51d72c3764133e1d35679cb53c2", "patch": "@@ -12,7 +12,7 @@\n \n use Indent;\n use utils::{format_mutability, format_visibility, contains_skip, span_after, end_typaram,\n-            wrap_str, last_line_width, semicolon_for_expr, semicolon_for_stmt};\n+            wrap_str, last_line_width, semicolon_for_expr};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n@@ -479,7 +479,9 @@ impl<'a> FmtVisitor<'a> {\n                      .map(|s| s + suffix)\n                      .or_else(|| Some(self.snippet(e.span)))\n                 } else if let Some(ref stmt) = block.stmts.first() {\n-                    self.rewrite_stmt(stmt)\n+                    stmt.rewrite(&self.get_context(),\n+                                 self.config.max_width - self.block_indent.width(),\n+                                 self.block_indent)\n                 } else {\n                     None\n                 }\n@@ -496,32 +498,6 @@ impl<'a> FmtVisitor<'a> {\n         None\n     }\n \n-    pub fn rewrite_stmt(&self, stmt: &ast::Stmt) -> Option<String> {\n-        match stmt.node {\n-            ast::Stmt_::StmtDecl(ref decl, _) => {\n-                if let ast::Decl_::DeclLocal(ref local) = decl.node {\n-                    let context = self.get_context();\n-                    local.rewrite(&context, self.config.max_width, self.block_indent)\n-                } else {\n-                    None\n-                }\n-            }\n-            ast::Stmt_::StmtExpr(ref ex, _) | ast::Stmt_::StmtSemi(ref ex, _) => {\n-                let suffix = if semicolon_for_stmt(stmt) {\n-                    \";\"\n-                } else {\n-                    \"\"\n-                };\n-\n-                ex.rewrite(&self.get_context(),\n-                           self.config.max_width - self.block_indent.width() - suffix.len(),\n-                           self.block_indent)\n-                  .map(|s| s + suffix)\n-            }\n-            ast::Stmt_::StmtMac(..) => None,\n-        }\n-    }\n-\n     fn rewrite_args(&self,\n                     args: &[ast::Arg],\n                     explicit_self: Option<&ast::ExplicitSelf>,"}, {"sha": "6b98fd276b61debb30a68b166d84a374aa0ca96b", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fbd1398c925fb51d72c3764133e1d35679cb53c2/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd1398c925fb51d72c3764133e1d35679cb53c2/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=fbd1398c925fb51d72c3764133e1d35679cb53c2", "patch": "@@ -41,12 +41,18 @@ impl<'a> FmtVisitor<'a> {\n                 if let ast::Decl_::DeclItem(ref item) = decl.node {\n                     self.visit_item(item);\n                 } else {\n-                    let rewrite = self.rewrite_stmt(stmt);\n+                    let rewrite = stmt.rewrite(&self.get_context(),\n+                                               self.config.max_width - self.block_indent.width(),\n+                                               self.block_indent);\n+\n                     self.push_rewrite(stmt.span, rewrite);\n                 }\n             }\n             ast::Stmt_::StmtExpr(..) | ast::Stmt_::StmtSemi(..) => {\n-                let rewrite = self.rewrite_stmt(stmt);\n+                let rewrite = stmt.rewrite(&self.get_context(),\n+                                           self.config.max_width - self.block_indent.width(),\n+                                           self.block_indent);\n+\n                 self.push_rewrite(stmt.span, rewrite);\n             }\n             ast::Stmt_::StmtMac(ref mac, _macro_style) => {"}, {"sha": "a34371f55ad2924b89b2491cce22a5381f2c75dd", "filename": "tests/source/fn-single-line.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbd1398c925fb51d72c3764133e1d35679cb53c2/tests%2Fsource%2Ffn-single-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd1398c925fb51d72c3764133e1d35679cb53c2/tests%2Fsource%2Ffn-single-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-single-line.rs?ref=fbd1398c925fb51d72c3764133e1d35679cb53c2", "patch": "@@ -64,6 +64,8 @@ fn lots_of_space                      ()\n                            1                 \n }\n \n+fn mac() -> Vec<i32> { vec![] }\n+\n trait CoolTypes {\n     fn dummy(&self) {\n     }"}, {"sha": "57c926e83e4025d6d4fb68bb60bd7e304c3306ca", "filename": "tests/target/fn-single-line.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbd1398c925fb51d72c3764133e1d35679cb53c2/tests%2Ftarget%2Ffn-single-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd1398c925fb51d72c3764133e1d35679cb53c2/tests%2Ftarget%2Ffn-single-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-single-line.rs?ref=fbd1398c925fb51d72c3764133e1d35679cb53c2", "patch": "@@ -52,6 +52,8 @@ fn aaaaaaaaaaaaaaaaa_looooooooooooooooooooooong_name() {\n \n fn lots_of_space() { 1 }\n \n+fn mac() -> Vec<i32> { vec![] }\n+\n trait CoolTypes {\n     fn dummy(&self) { }\n }"}]}