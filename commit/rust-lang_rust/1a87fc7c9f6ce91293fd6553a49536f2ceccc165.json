{"sha": "1a87fc7c9f6ce91293fd6553a49536f2ceccc165", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhODdmYzdjOWY2Y2U5MTI5M2ZkNjU1M2E0OTUzNmYyY2VjY2MxNjU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T18:06:24Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libcore: use unboxed closures in `Formatter` methods", "tree": {"sha": "69025ede99d6d0913eceef0ff14d7be3db4522b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69025ede99d6d0913eceef0ff14d7be3db4522b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a87fc7c9f6ce91293fd6553a49536f2ceccc165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a87fc7c9f6ce91293fd6553a49536f2ceccc165", "html_url": "https://github.com/rust-lang/rust/commit/1a87fc7c9f6ce91293fd6553a49536f2ceccc165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a87fc7c9f6ce91293fd6553a49536f2ceccc165/comments", "author": null, "committer": null, "parents": [{"sha": "0b0c3e1d9623f4cb55a717cd3ffe8d985c84247f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0c3e1d9623f4cb55a717cd3ffe8d985c84247f", "html_url": "https://github.com/rust-lang/rust/commit/0b0c3e1d9623f4cb55a717cd3ffe8d985c84247f"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "37a1d4d564d843836b1cd45faffece81fd1a85ca", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a87fc7c9f6ce91293fd6553a49536f2ceccc165/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a87fc7c9f6ce91293fd6553a49536f2ceccc165/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=1a87fc7c9f6ce91293fd6553a49536f2ceccc165", "patch": "@@ -19,7 +19,7 @@ use kinds::{Copy, Sized};\n use mem;\n use option::Option;\n use option::Option::{Some, None};\n-use ops::Deref;\n+use ops::{Deref, FnOnce};\n use result::Result::{Ok, Err};\n use result;\n use slice::SlicePrelude;\n@@ -491,10 +491,9 @@ impl<'a> Formatter<'a> {\n \n     /// Runs a callback, emitting the correct padding either before or\n     /// afterwards depending on whether right or left alignment is requested.\n-    fn with_padding(&mut self,\n-                    padding: uint,\n-                    default: rt::Alignment,\n-                    f: |&mut Formatter| -> Result) -> Result {\n+    fn with_padding<F>(&mut self, padding: uint, default: rt::Alignment, f: F) -> Result where\n+        F: FnOnce(&mut Formatter) -> Result,\n+    {\n         use char::Char;\n         let align = match self.align {\n             rt::AlignUnknown => default,"}]}