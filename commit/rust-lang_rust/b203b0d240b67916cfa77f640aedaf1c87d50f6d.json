{"sha": "b203b0d240b67916cfa77f640aedaf1c87d50f6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMDNiMGQyNDBiNjc5MTZjZmE3N2Y2NDBhZWRhZjFjODdkNTBmNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T12:47:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T12:47:49Z"}, "message": "Auto merge of #83068 - mockersf:method-trait-foreign-impl, r=GuillaumeGomez\n\nrustdoc: links from items in a trait impl are inconsistent\n\nDepending on where the struct implementing a trait is coming from, or the current page, the items in a trait impl are not linking to the same thing:\n\n|item| trait page, implementors| trait page, implementations on Foreign Types|struct page, trait implementations|\n|-|-|-|-|\n|function|             link to current impl|link to first impl in the list|link to trait def\n|default function |    not present         |not present                   |link to trait def\n|default function with custom impl|link to current impl|link to trait def             |link to trait def\n|constant|             link to current impl|link to trait def             |link to trait def\n|associated type|      link to current impl|link to trait def             |link to trait def\n||*missing link to trait def*|*function link wrong + missing link to current impl*|*missing link to current impl*|\n\n<details>\n  <summary>rust code with those cases</summary>\n\n```rust\npub trait MyTrait {\n    type Assoc;\n    const VALUE: u32;\n    fn trait_function(&self);\n    fn defaulted(&self) {}\n    fn defaulted_override(&self) {}\n}\n\nimpl MyTrait for String {\n    /// will link to trait def\n    type Assoc = ();\n    /// will link to trait def\n    const VALUE: u32 = 5;\n    /// will link to first foreign implementor\n    fn trait_function(&self) {}\n    /// will link to trait def\n    fn defaulted_override(&self) {}\n}\n\nimpl MyTrait for Vec<u8> {\n    /// will link to trait def\n    type Assoc = ();\n    /// will link to trait def\n    const VALUE: u32 = 5;\n    /// will link to first foreign implementor\n    fn trait_function(&self) {}\n    /// will link to trait def\n    fn defaulted_override(&self) {}\n}\n\nimpl MyTrait for MyStruct {\n    /// in trait page, will link to current impl\n    ///\n    /// in struct page, will link to trait def\n    type Assoc = bool;\n    /// in trait page, will link to current impl\n    ///\n    /// in struct page, will link to trait def\n    const VALUE: u32 = 20;\n    /// in trait page, will link to current impl\n    ///\n    /// in struct page, will link to trait def\n    fn trait_function(&self) {}\n    /// in trait page, will link to current impl\n    ///\n    /// in struct page, will link to trait def\n    fn defaulted_override(&self) {}\n}\n\npub struct MyStruct;\n```\n</details>\n\nIn this PR, I fixed all links to target the trait definition, and added an anchor-link to the current implementation appearing on mouse hover.", "tree": {"sha": "17289f5efab1957fede030d555301997ad8ec1ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17289f5efab1957fede030d555301997ad8ec1ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b203b0d240b67916cfa77f640aedaf1c87d50f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b203b0d240b67916cfa77f640aedaf1c87d50f6d", "html_url": "https://github.com/rust-lang/rust/commit/b203b0d240b67916cfa77f640aedaf1c87d50f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b203b0d240b67916cfa77f640aedaf1c87d50f6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d408fdd4a82bc3e7ea61dd81bc9a8781b2bf939d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d408fdd4a82bc3e7ea61dd81bc9a8781b2bf939d", "html_url": "https://github.com/rust-lang/rust/commit/d408fdd4a82bc3e7ea61dd81bc9a8781b2bf939d"}, {"sha": "e36ca09101830c9b1968891fc1adfe88654f6a1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36ca09101830c9b1968891fc1adfe88654f6a1d", "html_url": "https://github.com/rust-lang/rust/commit/e36ca09101830c9b1968891fc1adfe88654f6a1d"}], "stats": {"total": 153, "additions": 134, "deletions": 19}, "files": [{"sha": "efd453f96b8e7a6c20dec24119b0d0c13607be2f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 65, "deletions": 17, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b203b0d240b67916cfa77f640aedaf1c87d50f6d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b203b0d240b67916cfa77f640aedaf1c87d50f6d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b203b0d240b67916cfa77f640aedaf1c87d50f6d", "patch": "@@ -912,10 +912,9 @@ fn render_assoc_item(\n         let cache = cx.cache();\n         let tcx = cx.tcx();\n         let name = meth.name.as_ref().unwrap();\n-        let anchor = format!(\"#{}.{}\", meth.type_(), name);\n         let href = match link {\n             AssocItemLink::Anchor(Some(ref id)) => format!(\"#{}\", id),\n-            AssocItemLink::Anchor(None) => anchor,\n+            AssocItemLink::Anchor(None) => format!(\"#{}.{}\", meth.type_(), name),\n             AssocItemLink::GotoSource(did, provided_methods) => {\n                 // We're creating a link from an impl-item to the corresponding\n                 // trait-item and need to map the anchored type accordingly.\n@@ -925,7 +924,9 @@ fn render_assoc_item(\n                     ItemType::TyMethod\n                 };\n \n-                href(did, cache).map(|p| format!(\"{}#{}.{}\", p.0, ty, name)).unwrap_or(anchor)\n+                href(did, cache)\n+                    .map(|p| format!(\"{}#{}.{}\", p.0, ty, name))\n+                    .unwrap_or_else(|| format!(\"#{}.{}\", ty, name))\n             }\n         };\n         let vis = meth.visibility.print_with_space(tcx, meth.def_id, cache).to_string();\n@@ -1452,14 +1453,32 @@ fn render_impl(\n             } else {\n                 (true, \" hidden\")\n             };\n+        let in_trait_class = if trait_.is_some() { \" trait-impl\" } else { \"\" };\n         match *item.kind {\n             clean::MethodItem(..) | clean::TyMethodItem(_) => {\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                    write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\">\", id, item_type, extra_class);\n+                    let source_id = trait_\n+                        .and_then(|trait_| {\n+                            trait_.items.iter().find(|item| {\n+                                item.name.map(|n| n.as_str().eq(&name.as_str())).unwrap_or(false)\n+                            })\n+                        })\n+                        .map(|item| format!(\"{}.{}\", item.type_(), name));\n+                    write!(\n+                        w,\n+                        \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\">\",\n+                        id, item_type, extra_class, in_trait_class,\n+                    );\n                     w.write_str(\"<code>\");\n-                    render_assoc_item(w, item, link.anchor(&id), ItemType::Impl, cx);\n+                    render_assoc_item(\n+                        w,\n+                        item,\n+                        link.anchor(source_id.as_ref().unwrap_or(&id)),\n+                        ItemType::Impl,\n+                        cx,\n+                    );\n                     w.write_str(\"</code>\");\n                     render_stability_since_raw(\n                         w,\n@@ -1468,29 +1487,50 @@ fn render_impl(\n                         outer_version,\n                         outer_const_version,\n                     );\n+                    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                     write_srclink(cx, item, w);\n                     w.write_str(\"</h4>\");\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n-                let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssocType, name));\n-                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n+                let source_id = format!(\"{}.{}\", ItemType::AssocType, name);\n+                let id = cx.derive_id(source_id.clone());\n+                write!(\n+                    w,\n+                    \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\",\n+                    id, item_type, extra_class, in_trait_class\n+                );\n                 assoc_type(\n                     w,\n                     item,\n                     &Vec::new(),\n                     Some(&tydef.type_),\n-                    link.anchor(&id),\n+                    link.anchor(if trait_.is_some() { &source_id } else { &id }),\n                     \"\",\n                     cx.cache(),\n                     tcx,\n                 );\n-                w.write_str(\"</code></h4>\");\n+                w.write_str(\"</code>\");\n+                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+                w.write_str(\"</h4>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n-                let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n-                assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\", cx);\n+                let source_id = format!(\"{}.{}\", item_type, name);\n+                let id = cx.derive_id(source_id.clone());\n+                write!(\n+                    w,\n+                    \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\",\n+                    id, item_type, extra_class, in_trait_class\n+                );\n+                assoc_const(\n+                    w,\n+                    item,\n+                    ty,\n+                    default.as_ref(),\n+                    link.anchor(if trait_.is_some() { &source_id } else { &id }),\n+                    \"\",\n+                    cx,\n+                );\n                 w.write_str(\"</code>\");\n                 render_stability_since_raw(\n                     w,\n@@ -1499,23 +1539,31 @@ fn render_impl(\n                     outer_version,\n                     outer_const_version,\n                 );\n+                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n                 write_srclink(cx, item, w);\n                 w.write_str(\"</h4>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n-                let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n-                write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}\\\"><code>\", id, item_type, extra_class);\n+                let source_id = format!(\"{}.{}\", item_type, name);\n+                let id = cx.derive_id(source_id.clone());\n+                write!(\n+                    w,\n+                    \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\",\n+                    id, item_type, extra_class, in_trait_class\n+                );\n                 assoc_type(\n                     w,\n                     item,\n                     bounds,\n                     default.as_ref(),\n-                    link.anchor(&id),\n+                    link.anchor(if trait_.is_some() { &source_id } else { &id }),\n                     \"\",\n                     cx.cache(),\n                     tcx,\n                 );\n-                w.write_str(\"</code></h4>\");\n+                w.write_str(\"</code>\");\n+                write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+                w.write_str(\"</h4>\");\n             }\n             clean::StrippedItem(..) => return,\n             _ => panic!(\"can't make docs for trait item with name {:?}\", item.name),\n@@ -1605,7 +1653,7 @@ fn render_impl(\n                 true,\n                 outer_version,\n                 outer_const_version,\n-                None,\n+                Some(t),\n                 show_def_docs,\n             );\n         }"}, {"sha": "705ae17f3eb32cce72832119904a7bd6abd87c4a", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b203b0d240b67916cfa77f640aedaf1c87d50f6d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/b203b0d240b67916cfa77f640aedaf1c87d50f6d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=b203b0d240b67916cfa77f640aedaf1c87d50f6d", "patch": "@@ -133,7 +133,8 @@ h3.impl, h3.method, h4.method, h3.type, h4.type, h4.associatedconstant {\n \tmargin-bottom: 10px;\n \tposition: relative;\n }\n-h3.impl, h3.method, h3.type {\n+h3.impl, h3.method, h4.method.trait-impl, h3.type,\n+h4.type.trait-impl, h4.associatedconstant.trait-impl {\n \tpadding-left: 15px;\n }\n \n@@ -655,7 +656,8 @@ a {\n \tdisplay: initial;\n }\n \n-.in-band:hover > .anchor, .impl:hover > .anchor {\n+.in-band:hover > .anchor, .impl:hover > .anchor, .method.trait-impl:hover > .anchor,\n+.type.trait-impl:hover > .anchor, .associatedconstant.trait-impl:hover > .anchor {\n \tdisplay: inline-block;\n \tposition: absolute;\n }"}, {"sha": "6c09be1144a83a3c8f96eb52753b13121ecba8ca", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b203b0d240b67916cfa77f640aedaf1c87d50f6d/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b203b0d240b67916cfa77f640aedaf1c87d50f6d/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=b203b0d240b67916cfa77f640aedaf1c87d50f6d", "patch": "@@ -0,0 +1,65 @@\n+pub trait MyTrait {\n+    type Assoc;\n+    const VALUE: u32;\n+    fn trait_function(&self);\n+    fn defaulted(&self) {}\n+    fn defaulted_override(&self) {}\n+}\n+\n+\n+impl MyTrait for String {\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-1\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-1\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-1\n+    type Assoc = ();\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-1\n+    const VALUE: u32 = 5;\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n+    fn trait_function(&self) {}\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-1\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-1\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-1\n+    fn defaulted_override(&self) {}\n+}\n+\n+impl MyTrait for Vec<u8> {\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-2\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-2\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-2\n+    type Assoc = ();\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-2\n+    const VALUE: u32 = 5;\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function-1\"]//a[@class=\"anchor\"]/@href' #method.trait_function-1\n+    fn trait_function(&self) {}\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-2\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-2\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-2\n+    fn defaulted_override(&self) {}\n+}\n+\n+impl MyTrait for MyStruct {\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-3\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"associatedtype.Assoc\"]//a[@class=\"type\"]/@href' ../trait_impl_items_links_and_anchors/trait.MyTrait.html#associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n+    type Assoc = bool;\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"associatedconstant.VALUE\"]//a[@class=\"constant\"]/@href' ../trait_impl_items_links_and_anchors/trait.MyTrait.html#associatedconstant.VALUE\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"associatedconstant.VALUE\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE\n+    const VALUE: u32 = 20;\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function-2\"]//a[@class=\"fnname\"]/@href' #tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.trait_function-2\"]//a[@class=\"anchor\"]/@href' #method.trait_function-2\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.trait_function\"]//a[@class=\"fnname\"]/@href' ../trait_impl_items_links_and_anchors/trait.MyTrait.html#tymethod.trait_function\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.trait_function\"]//a[@class=\"anchor\"]/@href' #method.trait_function\n+    fn trait_function(&self) {}\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-3\"]//a[@class=\"fnname\"]/@href' #method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//h4[@id=\"method.defaulted_override-3\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override-3\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.defaulted_override\"]//a[@class=\"fnname\"]/@href' ../trait_impl_items_links_and_anchors/trait.MyTrait.html#method.defaulted_override\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.defaulted_override\"]//a[@class=\"anchor\"]/@href' #method.defaulted_override\n+    fn defaulted_override(&self) {}\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.defaulted\"]//a[@class=\"fnname\"]/@href' ../trait_impl_items_links_and_anchors/trait.MyTrait.html#method.defaulted\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//h4[@id=\"method.defaulted\"]//a[@class=\"anchor\"]/@href' #method.defaulted\n+}\n+\n+pub struct MyStruct;"}]}