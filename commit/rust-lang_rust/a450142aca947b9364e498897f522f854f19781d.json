{"sha": "a450142aca947b9364e498897f522f854f19781d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NTAxNDJhY2E5NDdiOTM2NGU0OTg4OTdmNTIyZjg1NGYxOTc4MWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-26T06:12:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-26T06:12:18Z"}, "message": "fix stray curly", "tree": {"sha": "f4ebe8f259582042bd251c595629599abcbe9524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4ebe8f259582042bd251c595629599abcbe9524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a450142aca947b9364e498897f522f854f19781d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a450142aca947b9364e498897f522f854f19781d", "html_url": "https://github.com/rust-lang/rust/commit/a450142aca947b9364e498897f522f854f19781d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a450142aca947b9364e498897f522f854f19781d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a48964c64de635f532874ede293d91df54e624d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a48964c64de635f532874ede293d91df54e624d7", "html_url": "https://github.com/rust-lang/rust/commit/a48964c64de635f532874ede293d91df54e624d7"}], "stats": {"total": 173, "additions": 144, "deletions": 29}, "files": [{"sha": "a3f721cc8618718026d901c996d581b0eee404b1", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -32,7 +32,7 @@ use libsyntax2::{\n     ast::{self, AstNode, NameOwner},\n     SyntaxKind::*,\n };\n-use libeditor::{LineIndex, FileSymbol, find_node};\n+use libeditor::{LineIndex, FileSymbol, find_node_at_offset};\n \n use self::{\n     symbol_index::FileSymbols,\n@@ -183,10 +183,10 @@ impl World {\n     ) -> Result<Vec<(FileId, FileSymbol)>> {\n         let file = self.file_syntax(id)?;\n         let syntax = file.syntax();\n-        if let Some(name_ref) = find_node::<ast::NameRef>(syntax, offset) {\n+        if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n             return Ok(self.index_resolve(name_ref));\n         }\n-        if let Some(name) = find_node::<ast::Name>(syntax, offset) {\n+        if let Some(name) = find_node_at_offset::<ast::Name>(syntax, offset) {\n             if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n                 if module.has_semi() {\n                     let file_ids = self.resolve_module(id, module);"}, {"sha": "f53a8f9c65850b58bb225ac5d8c54d32ebaa0e4a", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -3,7 +3,7 @@ use std::{\n };\n \n use libsyntax2::{\n-    File,\n+    File, TextUnit,\n     ast::{self, AstNode, AttrsOwner, TypeParamsOwner, NameOwner},\n     SyntaxKind::COMMA,\n     SyntaxNodeRef,\n@@ -13,7 +13,7 @@ use libsyntax2::{\n     },\n };\n \n-use {TextUnit, EditBuilder, Edit};\n+use {EditBuilder, Edit, find_node_at_offset};\n \n #[derive(Debug)]\n pub struct ActionResult {\n@@ -39,7 +39,7 @@ pub fn flip_comma<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce()\n }\n \n pub fn add_derive<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n-    let nominal = find_node::<ast::NominalDef>(file.syntax(), offset)?;\n+    let nominal = find_node_at_offset::<ast::NominalDef>(file.syntax(), offset)?;\n     Some(move || {\n         let derive_attr = nominal\n             .attrs()\n@@ -66,7 +66,7 @@ pub fn add_derive<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce()\n }\n \n pub fn add_impl<'a>(file: &'a File, offset: TextUnit) -> Option<impl FnOnce() -> ActionResult + 'a> {\n-    let nominal = find_node::<ast::NominalDef>(file.syntax(), offset)?;\n+    let nominal = find_node_at_offset::<ast::NominalDef>(file.syntax(), offset)?;\n     let name = nominal.name()?;\n \n     Some(move || {\n@@ -105,16 +105,6 @@ fn non_trivia_sibling(node: SyntaxNodeRef, direction: Direction) -> Option<Synta\n         .find(|node| !node.kind().is_trivia())\n }\n \n-pub fn find_node<'a, N: AstNode<'a>>(syntax: SyntaxNodeRef<'a>, offset: TextUnit) -> Option<N> {\n-    let leaves = find_leaf_at_offset(syntax, offset);\n-    let leaf = leaves.clone()\n-        .find(|leaf| !leaf.kind().is_trivia())\n-        .or_else(|| leaves.right_biased())?;\n-    ancestors(leaf)\n-        .filter_map(N::cast)\n-        .next()\n-}\n-\n fn comma_list(buf: &mut String, bra: &str, ket: &str, items: impl Iterator<Item=impl fmt::Display>) {\n     buf.push_str(bra);\n     let mut first = true;"}, {"sha": "cf61ec784d1b2cd4d1ccb900418e3699d88502d4", "filename": "crates/libeditor/src/completion.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -0,0 +1,31 @@\n+use libsyntax2::{\n+    File, TextUnit,\n+    ast,\n+    algo::find_leaf_at_offset,\n+};\n+\n+use {\n+    AtomEdit, find_node_at_offset,\n+};\n+\n+#[derive(Debug)]\n+pub struct CompletionItem {\n+    name: String,\n+}\n+\n+pub fn scope_completion(file: &File, offset: TextUnit) -> Option<Vec<CompletionItem>> {\n+    // Insert a fake ident to get a valid parse tree\n+    let file = {\n+        let edit = AtomEdit::insert(offset, \"intellijRulezz\".to_string());\n+        // Don't bother with completion if incremental reparse fails\n+        file.incremental_reparse(&edit)?\n+    };\n+    let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), offset)?;\n+    Some(complete(name_ref))\n+}\n+\n+fn complete(name_ref: ast::NameRef) -> Vec<CompletionItem> {\n+    vec![CompletionItem {\n+        name: \"foo\".to_string()\n+    }]\n+}"}, {"sha": "60489f7e3b0549e68dcc3fa694171534c57a85fa", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -8,11 +8,12 @@ mod line_index;\n mod edit;\n mod code_actions;\n mod typing;\n+mod completion;\n \n use libsyntax2::{\n-    File, TextUnit, TextRange,\n+    File, TextUnit, TextRange, SyntaxNodeRef,\n     ast::{AstNode, NameOwner},\n-    algo::{walk, find_leaf_at_offset},\n+    algo::{walk, find_leaf_at_offset, ancestors},\n     SyntaxKind::{self, *},\n };\n pub use libsyntax2::AtomEdit;\n@@ -22,10 +23,11 @@ pub use self::{\n     symbols::{StructureNode, file_structure, FileSymbol, file_symbols},\n     edit::{EditBuilder, Edit},\n     code_actions::{\n-        ActionResult, find_node,\n+        ActionResult,\n         flip_comma, add_derive, add_impl,\n     },\n     typing::join_lines,\n+    completion::scope_completion,\n };\n \n #[derive(Debug)]\n@@ -138,3 +140,16 @@ pub fn runnables(file: &File) -> Vec<Runnable> {\n         })\n         .collect()\n }\n+\n+pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n+    syntax: SyntaxNodeRef<'a>,\n+    offset: TextUnit,\n+) -> Option<N> {\n+    let leaves = find_leaf_at_offset(syntax, offset);\n+    let leaf = leaves.clone()\n+        .find(|leaf| !leaf.kind().is_trivia())\n+        .or_else(|| leaves.right_biased())?;\n+    ancestors(leaf)\n+        .filter_map(N::cast)\n+        .next()\n+}"}, {"sha": "9d59f4cdfcbbfdaa1e52cb1c8e61221e1c5df53b", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -9,7 +9,7 @@ use libeditor::{\n     ActionResult,\n     highlight, runnables, extend_selection, file_structure,\n     flip_comma, add_derive, add_impl, matching_brace,\n-    join_lines,\n+    join_lines, scope_completion,\n };\n \n #[test]\n@@ -244,6 +244,26 @@ struct Foo { f: u32 }\n \");\n }\n \n+// #[test]\n+// fn test_completion() {\n+//     fn do_check(code: &str, expected_completions: &str) {\n+//         let (off, code) = extract_offset(&code);\n+//         let file = file(&code);\n+//         let completions = scope_completion(&file, off).unwrap();\n+//         assert_eq_dbg(expected_completions, &completions);\n+//     }\n+\n+//     do_check(r\"\n+// fn foo(foo: i32) {\n+//     let bar = 92;\n+//     1 + <|>\n+// }\n+// \", r#\"\n+// CompletionItem { name: \"bar\" },\n+// CompletionItem { name: \"foo\" },\n+// \"#);\n+// }\n+\n fn file(text: &str) -> File {\n     File::parse(text)\n }"}, {"sha": "a285892df237ea8175c8a10bc713a6d4c3a9697a", "filename": "crates/libsyntax2/src/grammar/items/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -43,7 +43,12 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool, flavor: ItemF\n                 m.abandon(p);\n                 if p.at(L_CURLY) {\n                     error_block(p, \"expected an item\");\n-                } else if !p.at(EOF) && !(stop_on_r_curly && p.at(R_CURLY)) {\n+                } else if p.at(R_CURLY) && !stop_on_r_curly {\n+                    let e = p.start();\n+                    p.error(\"unmatched `}`\");\n+                    p.bump();\n+                    e.complete(p, ERROR);\n+                } else if !p.at(EOF) && !p.at(R_CURLY) {\n                     p.err_and_bump(\"expected an item\");\n                 } else {\n                     p.error(\"expected an item\");"}, {"sha": "93057dd6a39d358d7d06d0cd7cfad28fe9bde8f6", "filename": "crates/libsyntax2/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Flib.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -127,12 +127,12 @@ fn validate_block_structure(root: SyntaxNodeRef) {\n                     assert_eq!(\n                         node.parent(),\n                         pair.parent(),\n-                        \"unpaired curleys:\\n{}\",\n+                        \"\\nunpaired curleys:\\n{}\",\n                         utils::dump_tree(root),\n                     );\n                     assert!(\n                         node.next_sibling().is_none() && pair.prev_sibling().is_none(),\n-                        \"floating curlys at {:?}\\nfile:\\n{}\\nerror:\\n{}\\n\",\n+                        \"\\nfloating curlys at {:?}\\nfile:\\n{}\\nerror:\\n{}\\n\",\n                         node,\n                         root.text(),\n                         node.text(),"}, {"sha": "0a3b29b70f194bc0760eb102e8c92e2dbfa3b09b", "filename": "crates/libsyntax2/src/parser_api.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -141,7 +141,9 @@ impl<'t> Parser<'t> {\n     pub(crate) fn err_and_bump(&mut self, message: &str) {\n         let m = self.start();\n         self.error(message);\n-        self.bump();\n+        if !self.at(SyntaxKind::L_CURLY) && !self.at(SyntaxKind::R_CURLY) {\n+            self.bump();\n+        }\n         m.complete(self, ERROR);\n     }\n }"}, {"sha": "802c69b316c80b90bb1d1934b05c8efa80c31ec1", "filename": "crates/libsyntax2/tests/data/parser/err/0007_stray_curly_in_file.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -1,7 +1,7 @@\n ROOT@[0; 31)\n   ERROR@[0; 1)\n     R_CURLY@[0; 1)\n-    err: `expected an item`\n+    err: `unmatched `}``\n   WHITESPACE@[1; 3)\n   STRUCT_DEF@[3; 12)\n     STRUCT_KW@[3; 9)\n@@ -10,7 +10,7 @@ ROOT@[0; 31)\n       IDENT@[10; 11) \"S\"\n     SEMI@[11; 12)\n   WHITESPACE@[12; 14)\n-  err: `expected an item`\n+  err: `unmatched `}``\n   ERROR@[14; 15)\n     R_CURLY@[14; 15)\n   WHITESPACE@[15; 17)\n@@ -26,7 +26,7 @@ ROOT@[0; 31)\n       L_CURLY@[25; 26)\n       R_CURLY@[26; 27)\n   WHITESPACE@[27; 29)\n-  err: `expected an item`\n+  err: `unmatched `}``\n   ERROR@[29; 30)\n     R_CURLY@[29; 30)\n   WHITESPACE@[30; 31)"}, {"sha": "5f736a9784a63af7e449378a2d791ad0d29de9c3", "filename": "crates/libsyntax2/tests/data/parser/err/0015_curly_in_params.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0015_curly_in_params.txt?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -9,7 +9,7 @@ ROOT@[0; 14)\n       err: `expected value parameter`\n       err: `expected R_PAREN`\n       err: `expected a block`\n-      err: `expected an item`\n+      err: `unmatched `}``\n   ERROR@[7; 8)\n     R_CURLY@[7; 8)\n     err: `expected an item`"}, {"sha": "17bd497777719ea2fb51397d894ac6ec3d015739", "filename": "crates/libsyntax2/tests/data/parser/err/0017_incomplete_binexpr.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -0,0 +1,4 @@\n+fn foo(foo: i32) {\n+    let bar = 92;\n+    1 +\n+}"}, {"sha": "db9a2f1751c5c1886c9419436f2ceb0c15ee956e", "filename": "crates/libsyntax2/tests/data/parser/err/0017_incomplete_binexpr.txt", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -0,0 +1,47 @@\n+ROOT@[0; 47)\n+  FN_DEF@[0; 46)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 16)\n+      L_PAREN@[6; 7)\n+      PARAM@[7; 15)\n+        BIND_PAT@[7; 10)\n+          NAME@[7; 10)\n+            IDENT@[7; 10) \"foo\"\n+        COLON@[10; 11)\n+        WHITESPACE@[11; 12)\n+        PATH_TYPE@[12; 15)\n+          PATH@[12; 15)\n+            PATH_SEGMENT@[12; 15)\n+              NAME_REF@[12; 15)\n+                IDENT@[12; 15) \"i32\"\n+      R_PAREN@[15; 16)\n+    WHITESPACE@[16; 17)\n+    BLOCK@[17; 46)\n+      L_CURLY@[17; 18)\n+      WHITESPACE@[18; 23)\n+      LET_STMT@[23; 36)\n+        LET_KW@[23; 26)\n+        WHITESPACE@[26; 27)\n+        BIND_PAT@[27; 30)\n+          NAME@[27; 30)\n+            IDENT@[27; 30) \"bar\"\n+        WHITESPACE@[30; 31)\n+        EQ@[31; 32)\n+        WHITESPACE@[32; 33)\n+        LITERAL@[33; 35)\n+          INT_NUMBER@[33; 35) \"92\"\n+        SEMI@[35; 36)\n+      WHITESPACE@[36; 41)\n+      BIN_EXPR@[41; 45)\n+        LITERAL@[41; 42)\n+          INT_NUMBER@[41; 42) \"1\"\n+        WHITESPACE@[42; 43)\n+        PLUS@[43; 44)\n+        WHITESPACE@[44; 45)\n+        err: `expected expression`\n+        ERROR@[45; 45)\n+      R_CURLY@[45; 46)\n+  WHITESPACE@[46; 47)"}, {"sha": "9958c7eceefe85fb3892d0a34d71c6b8101e6c9e", "filename": "crates/libsyntax2/tests/test/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a450142aca947b9364e498897f522f854f19781d/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Ftest%2Fmain.rs?ref=a450142aca947b9364e498897f522f854f19781d", "patch": "@@ -26,6 +26,7 @@ fn lexer_tests() {\n #[test]\n fn parser_tests() {\n     dir_tests(&[\"parser/inline\", \"parser/ok\", \"parser/err\"], |text| {\n+        eprintln!(\"\\n{}\\n\", text);\n         let file = File::parse(text);\n         dump_tree(file.syntax())\n     })"}]}