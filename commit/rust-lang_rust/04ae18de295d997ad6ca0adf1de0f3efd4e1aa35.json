{"sha": "04ae18de295d997ad6ca0adf1de0f3efd4e1aa35", "node_id": "C_kwDOAAsO6NoAKDA0YWUxOGRlMjk1ZDk5N2FkNmNhMGFkZjFkZTBmM2VmZDRlMWFhMzU", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T13:08:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "move ty", "tree": {"sha": "88173ab81262c2e831bf21aeb654c66210e4a970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88173ab81262c2e831bf21aeb654c66210e4a970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35", "html_url": "https://github.com/rust-lang/rust/commit/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5636bef2ecad8bde7746dcaf150a9bb4f0d6f342", "url": "https://api.github.com/repos/rust-lang/rust/commits/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342", "html_url": "https://github.com/rust-lang/rust/commit/5636bef2ecad8bde7746dcaf150a9bb4f0d6f342"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "c5c13590dd13bdf57b593e3283f57c23cbbeadd9", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=04ae18de295d997ad6ca0adf1de0f3efd4e1aa35", "patch": "@@ -692,7 +692,11 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n     let fragment = match kind {\n         \"path\" => ParserEntryPoint::Path,\n         \"expr\" => ParserEntryPoint::Expr,\n-        \"ty\" => ParserEntryPoint::Type,\n+        \"ty\" => {\n+            return input\n+                .expect_fragment2(parser::PrefixEntryPoint::Ty)\n+                .map(|tt| tt.map(Fragment::Tokens));\n+        }\n         // FIXME: These two should actually behave differently depending on the edition.\n         //\n         // https://doc.rust-lang.org/edition-guide/rust-2021/or-patterns-macro-rules.html"}, {"sha": "539dc19b517e08f780ea2dbf20d220268b5bc20f", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=04ae18de295d997ad6ca0adf1de0f3efd4e1aa35", "patch": "@@ -65,6 +65,10 @@ pub(crate) mod entry {\n         pub(crate) fn pat(p: &mut Parser) {\n             patterns::pattern_single(p);\n         }\n+\n+        pub(crate) fn ty(p: &mut Parser) {\n+            types::type_(p);\n+        }\n     }\n }\n \n@@ -80,8 +84,6 @@ pub(crate) mod entry_points {\n \n     pub(crate) use paths::type_path as path;\n \n-    pub(crate) use types::type_;\n-\n     pub(crate) fn expr(p: &mut Parser) {\n         let _ = expressions::expr(p);\n     }"}, {"sha": "ebb060a5639da8e6be846e9de30cd79af9456552", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04ae18de295d997ad6ca0adf1de0f3efd4e1aa35/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=04ae18de295d997ad6ca0adf1de0f3efd4e1aa35", "patch": "@@ -56,6 +56,7 @@ pub enum PrefixEntryPoint {\n     Block,\n     Stmt,\n     Pat,\n+    Ty,\n }\n \n impl PrefixEntryPoint {\n@@ -65,6 +66,7 @@ impl PrefixEntryPoint {\n             PrefixEntryPoint::Block => grammar::entry::prefix::block,\n             PrefixEntryPoint::Stmt => grammar::entry::prefix::stmt,\n             PrefixEntryPoint::Pat => grammar::entry::prefix::pat,\n+            PrefixEntryPoint::Ty => grammar::entry::prefix::ty,\n         };\n         let mut p = parser::Parser::new(input);\n         entry_point(&mut p);\n@@ -110,7 +112,7 @@ pub fn parse(inp: &Input, entry_point: ParserEntryPoint) -> Output {\n         ParserEntryPoint::SourceFile => grammar::entry_points::source_file,\n         ParserEntryPoint::Path => grammar::entry_points::path,\n         ParserEntryPoint::Expr => grammar::entry_points::expr,\n-        ParserEntryPoint::Type => grammar::entry_points::type_,\n+        ParserEntryPoint::Type => grammar::entry::prefix::ty,\n         ParserEntryPoint::Pattern => grammar::entry::prefix::pat,\n         ParserEntryPoint::Item => grammar::entry_points::item,\n         ParserEntryPoint::MetaItem => grammar::entry_points::meta_item,"}]}