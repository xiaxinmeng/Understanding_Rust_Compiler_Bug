{"sha": "cc6a4877a42b275b85d02ce96b8539e1d7a6f47c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNmE0ODc3YTQyYjI3NWI4NWQwMmNlOTZiODUzOWUxZDdhNmY0N2M=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-09-08T09:33:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-09-08T09:33:37Z"}, "message": "rand: inform the optimiser that indexing is never out-of-bounds.\n\nThis uses a bitwise mask to ensure that there's no bounds checking for\nthe array accesses when generating the next random number. This isn't\ncostless, but the single instruction is nothing compared to the branch.\n\nA `debug_assert` for \"bounds check\" is preserved to ensure that\nrefactoring doesn't accidentally break it (i.e. create values of `cnt`\nthat are out of bounds with the masking causing it to silently wrap-\naround).\n\nBefore:\n\n    test test::rand_isaac   ... bench: 990 ns/iter (+/- 24) = 808 MB/s\n    test test::rand_isaac64 ... bench: 614 ns/iter (+/- 25) = 1302 MB/s\n\nAfter:\n\n    test test::rand_isaac   ... bench: 877 ns/iter (+/- 134) = 912 MB/s\n    test test::rand_isaac64 ... bench: 470 ns/iter (+/- 30) = 1702 MB/s\n\n(It also removes the unsafe code in Isaac64Rng.next_u64, with a *gain*\nin performance; today is a good day.)", "tree": {"sha": "6a6449a1b087ea4a8fb948ffe1bec266548c469d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a6449a1b087ea4a8fb948ffe1bec266548c469d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc6a4877a42b275b85d02ce96b8539e1d7a6f47c", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6a4877a42b275b85d02ce96b8539e1d7a6f47c", "html_url": "https://github.com/rust-lang/rust/commit/cc6a4877a42b275b85d02ce96b8539e1d7a6f47c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc6a4877a42b275b85d02ce96b8539e1d7a6f47c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dfb7a6ec1c1b7827a1f019b276c4d959cf2d71e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dfb7a6ec1c1b7827a1f019b276c4d959cf2d71e", "html_url": "https://github.com/rust-lang/rust/commit/5dfb7a6ec1c1b7827a1f019b276c4d959cf2d71e"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "871328e9c169696660ee0aee20791459899dff43", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc6a4877a42b275b85d02ce96b8539e1d7a6f47c/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6a4877a42b275b85d02ce96b8539e1d7a6f47c/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=cc6a4877a42b275b85d02ce96b8539e1d7a6f47c", "patch": "@@ -185,7 +185,19 @@ impl Rng for IsaacRng {\n             self.isaac();\n         }\n         self.cnt -= 1;\n-        self.rsl[self.cnt as uint]\n+\n+        // self.cnt is at most RAND_SIZE, but that is before the\n+        // subtraction above. We want to index without bounds\n+        // checking, but this could lead to incorrect code if someone\n+        // misrefactors, so we check, sometimes.\n+        //\n+        // (Changes here should be reflected in Isaac64Rng.next_u64.)\n+        debug_assert!(self.cnt < RAND_SIZE);\n+\n+        // (the % is cheaply telling the optimiser that we're always\n+        // in bounds, without unsafe. NB. this is a power of two, so\n+        // it optimises to a bitwise mask).\n+        self.rsl[(self.cnt % RAND_SIZE) as uint]\n     }\n }\n \n@@ -416,7 +428,11 @@ impl Rng for Isaac64Rng {\n             self.isaac64();\n         }\n         self.cnt -= 1;\n-        unsafe { *self.rsl.unsafe_get(self.cnt) }\n+\n+        // See corresponding location in IsaacRng.next_u32 for\n+        // explanation.\n+        debug_assert!(self.cnt < RAND_SIZE_64)\n+        self.rsl[(self.cnt % RAND_SIZE_64) as uint]\n     }\n }\n "}]}