{"sha": "4bab93a03924c4044f20e7aee6e0036f6a96d586", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYWI5M2EwMzkyNGM0MDQ0ZjIwZTdhZWU2ZTAwMzZmNmE5NmQ1ODY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T23:35:22Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:23:07Z"}, "message": "Remove hir::ForeignItem::attrs.", "tree": {"sha": "d33a911b21c7ef070fd22bfdba9b10946223b0ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d33a911b21c7ef070fd22bfdba9b10946223b0ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bab93a03924c4044f20e7aee6e0036f6a96d586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bab93a03924c4044f20e7aee6e0036f6a96d586", "html_url": "https://github.com/rust-lang/rust/commit/4bab93a03924c4044f20e7aee6e0036f6a96d586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bab93a03924c4044f20e7aee6e0036f6a96d586/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c298744da7208ebb37a76909eefdce2cc5698f79", "url": "https://api.github.com/repos/rust-lang/rust/commits/c298744da7208ebb37a76909eefdce2cc5698f79", "html_url": "https://github.com/rust-lang/rust/commit/c298744da7208ebb37a76909eefdce2cc5698f79"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "bb3af1b7ac9519ca5a5a5570d2179b36b99fdc3f", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=4bab93a03924c4044f20e7aee6e0036f6a96d586", "patch": "@@ -700,10 +700,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem<'hir> {\n         let hir_id = self.lower_node_id(i.id);\n         let def_id = hir_id.expect_owner();\n+        self.lower_attrs(hir_id, &i.attrs);\n         hir::ForeignItem {\n             def_id,\n             ident: i.ident,\n-            attrs: self.lower_attrs(hir_id, &i.attrs),\n             kind: match i.kind {\n                 ForeignItemKind::Fn(box FnKind(_, ref sig, ref generics, _)) => {\n                     let fdec = &sig.decl;"}, {"sha": "e280314d8827fd6ffdabc227783e9ed78a48747d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=4bab93a03924c4044f20e7aee6e0036f6a96d586", "patch": "@@ -2916,7 +2916,6 @@ pub struct ForeignItemRef<'hir> {\n #[derive(Debug)]\n pub struct ForeignItem<'hir> {\n     pub ident: Ident,\n-    pub attrs: &'hir [Attribute],\n     pub kind: ForeignItemKind<'hir>,\n     pub def_id: LocalDefId,\n     pub span: Span,\n@@ -3083,5 +3082,5 @@ mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::Item<'static>, 200);\n     rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 144);\n     rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 168);\n-    rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 152);\n+    rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 136);\n }"}, {"sha": "5a0615595762161befcccf4ad7a429202ebb8c50", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=4bab93a03924c4044f20e7aee6e0036f6a96d586", "patch": "@@ -178,11 +178,10 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItem<'_> {\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ForeignItem<'_> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        let ForeignItem { def_id: _, ident, ref attrs, ref kind, span, ref vis } = *self;\n+        let ForeignItem { def_id: _, ident, ref kind, span, ref vis } = *self;\n \n         hcx.hash_hir_item_like(|hcx| {\n             ident.name.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n             kind.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);\n             vis.hash_stable(hcx, hasher);"}, {"sha": "c355d736d492a0e1eaa7e456954b3edff415fb8a", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=4bab93a03924c4044f20e7aee6e0036f6a96d586", "patch": "@@ -453,7 +453,7 @@ impl<'a> State<'a> {\n     pub fn print_foreign_item(&mut self, item: &hir::ForeignItem<'_>) {\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(item.span.lo());\n-        self.print_outer_attributes(&item.attrs);\n+        self.print_outer_attributes(self.attrs(item.hir_id()));\n         match item.kind {\n             hir::ForeignItemKind::Fn(ref decl, ref arg_names, ref generics) => {\n                 self.head(\"\");"}, {"sha": "de369ba9bbbe2fa016609f25531c14307fd9ded3", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=4bab93a03924c4044f20e7aee6e0036f6a96d586", "patch": "@@ -97,7 +97,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, i: &hir::ForeignItem<'_>) {\n         let check_name = |attr, sym| self.tcx.sess.check_name(attr, sym);\n-        if let Some((lang_item, _)) = lang_items::extract(check_name, &i.attrs) {\n+        let attrs = self.tcx.hir().attrs(i.hir_id());\n+        if let Some((lang_item, _)) = lang_items::extract(check_name, attrs) {\n             self.register(lang_item, i.span);\n         }\n         intravisit::walk_foreign_item(self, i)"}, {"sha": "d0e7be63891a300d5b0297ef8cfd664e16df9181", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bab93a03924c4044f20e7aee6e0036f6a96d586/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=4bab93a03924c4044f20e7aee6e0036f6a96d586", "patch": "@@ -139,6 +139,7 @@ impl<'tcx> SaveContext<'tcx> {\n     pub fn get_extern_item_data(&self, item: &hir::ForeignItem<'_>) -> Option<Data> {\n         let def_id = item.def_id.to_def_id();\n         let qualname = format!(\"::{}\", self.tcx.def_path_str(def_id));\n+        let attrs = self.tcx.hir().attrs(item.hir_id());\n         match item.kind {\n             hir::ForeignItemKind::Fn(ref decl, arg_names, ref generics) => {\n                 filter!(self.span_utils, item.ident.span);\n@@ -169,9 +170,9 @@ impl<'tcx> SaveContext<'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: self.docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(attrs),\n                     sig: sig::foreign_item_signature(item, self),\n-                    attributes: lower_attributes(item.attrs.to_vec(), self),\n+                    attributes: lower_attributes(attrs.to_vec(), self),\n                 }))\n             }\n             hir::ForeignItemKind::Static(ref ty, _) => {\n@@ -190,9 +191,9 @@ impl<'tcx> SaveContext<'tcx> {\n                     parent: None,\n                     children: vec![],\n                     decl_id: None,\n-                    docs: self.docs_for_attrs(&item.attrs),\n+                    docs: self.docs_for_attrs(attrs),\n                     sig: sig::foreign_item_signature(item, self),\n-                    attributes: lower_attributes(item.attrs.to_vec(), self),\n+                    attributes: lower_attributes(attrs.to_vec(), self),\n                 }))\n             }\n             // FIXME(plietar): needs a new DefKind in rls-data"}]}