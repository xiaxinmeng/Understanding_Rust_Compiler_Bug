{"sha": "a34e75be592bf1dae4ccb8bfbd5b9e259a698388", "node_id": "C_kwDOAAsO6NoAKGEzNGU3NWJlNTkyYmYxZGFlNGNjYjhiZmJkNWI5ZTI1OWE2OTgzODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T21:01:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T21:01:15Z"}, "message": "Auto merge of #10653 - flip1995:book-type_passes_corrections, r=llogiq\n\nBook: Improve type checking and lint passes chapters\n\n- Adds the lint passes chapter to the index.\n- Moves additional reading material for beginners to the front page of the development section.\n- Clarify some details in `hir::Ty` vs `ty::Ty`.\n\n`@blyxyas` I started reviewing the chapters that were already merged. Great work. I liked the additional reading chapter so much, that I moved it front and center. Other than that I only had some minor corrections to make. Please review.\n\nr? `@llogiq`\n\nchangelog: none", "tree": {"sha": "2fe6a94b6769b394fd2565ba12a6fabee2c2b71e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fe6a94b6769b394fd2565ba12a6fabee2c2b71e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a34e75be592bf1dae4ccb8bfbd5b9e259a698388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a34e75be592bf1dae4ccb8bfbd5b9e259a698388", "html_url": "https://github.com/rust-lang/rust/commit/a34e75be592bf1dae4ccb8bfbd5b9e259a698388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a34e75be592bf1dae4ccb8bfbd5b9e259a698388/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "004981647f6f7bd2e70808651e897b1e6b719bb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/004981647f6f7bd2e70808651e897b1e6b719bb4", "html_url": "https://github.com/rust-lang/rust/commit/004981647f6f7bd2e70808651e897b1e6b719bb4"}, {"sha": "b842e99ddf9776a480ca911702195922b2603c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b842e99ddf9776a480ca911702195922b2603c3b", "html_url": "https://github.com/rust-lang/rust/commit/b842e99ddf9776a480ca911702195922b2603c3b"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "3f1a822eb950b4000e0b4e24b73ccede8871fdaf", "filename": "book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a34e75be592bf1dae4ccb8bfbd5b9e259a698388/book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34e75be592bf1dae4ccb8bfbd5b9e259a698388/book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FSUMMARY.md?ref=a34e75be592bf1dae4ccb8bfbd5b9e259a698388", "patch": "@@ -13,6 +13,7 @@\n - [Development](development/README.md)\n     - [Basics](development/basics.md)\n     - [Adding Lints](development/adding_lints.md)\n+    - [Lint Passes](development/lint_passes.md)\n     - [Type Checking](development/type_checking.md)\n     - [Common Tools](development/common_tools_writing_lints.md)\n     - [Infrastructure](development/infrastructure/README.md)"}, {"sha": "8f09f66f5958696ffcd8ee9b38dcd00dcea07777", "filename": "book/src/development/README.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a34e75be592bf1dae4ccb8bfbd5b9e259a698388/book%2Fsrc%2Fdevelopment%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34e75be592bf1dae4ccb8bfbd5b9e259a698388/book%2Fsrc%2Fdevelopment%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2FREADME.md?ref=a34e75be592bf1dae4ccb8bfbd5b9e259a698388", "patch": "@@ -13,6 +13,24 @@ If this is your first time contributing to Clippy, you should first read the\n [Basics docs](basics.md). This will explain the basics on how to get the source\n code and how to compile and test the code.\n \n+## Additional Readings for Beginners\n+\n+If a dear reader of this documentation has never taken a class on compilers\n+and interpreters, it might be confusing as to why AST level deals with only\n+the language's syntax. And some readers might not even understand what lexing,\n+parsing, and AST mean.\n+\n+This documentation serves by no means as a crash course on compilers or language design.\n+And for details specifically related to Rust, the [Rustc Development Guide][rustc_dev_guide]\n+is a far better choice to peruse.\n+\n+The [Syntax and AST][ast] chapter and the [High-Level IR][hir] chapter are\n+great introduction to the concepts mentioned in this chapter.\n+\n+Some readers might also find the [introductory chapter][map_of_territory] of\n+Robert Nystrom's _Crafting Interpreters_ a helpful overview of compiled and\n+interpreted languages before jumping back to the Rustc guide.\n+\n ## Writing code\n \n If you have done the basic setup, it's time to start hacking.\n@@ -37,6 +55,10 @@ book](../lints.md).\n > - Triage procedure\n > - Bors and Homu\n \n+[ast]: https://rustc-dev-guide.rust-lang.org/syntax-intro.html\n+[hir]: https://rustc-dev-guide.rust-lang.org/hir.html\n+[rustc_dev_guide]: https://rustc-dev-guide.rust-lang.org/\n+[map_of_territory]: https://craftinginterpreters.com/a-map-of-the-territory.html\n [clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n [rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n [rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories"}, {"sha": "c41b6ea0de8fe9a1f5155455e8a75928a553ee5e", "filename": "book/src/development/lint_passes.md", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a34e75be592bf1dae4ccb8bfbd5b9e259a698388/book%2Fsrc%2Fdevelopment%2Flint_passes.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34e75be592bf1dae4ccb8bfbd5b9e259a698388/book%2Fsrc%2Fdevelopment%2Flint_passes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Flint_passes.md?ref=a34e75be592bf1dae4ccb8bfbd5b9e259a698388", "patch": "@@ -1,7 +1,7 @@\n # Lint passes\n \n Before working on the logic of a new lint, there is an important decision\n-that every Clippy developers must make: to use\n+that every Clippy developer must make: to use\n [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass].\n \n In short, the `LateLintPass` has access to type and symbol information while the\n@@ -107,30 +107,8 @@ that use `LateLintPass`:\n $ cargo dev new_lint --name=<your_new_lint> --pass=late --category=<your_category_choice>\n ```\n \n-## Additional Readings for Beginners\n-\n-If a dear reader of this documentation has never taken a class on compilers\n-and interpreters, it might be confusing as to why AST level deals with only\n-the language's syntax. And some readers might not even understand what lexing,\n-parsing, and AST mean.\n-\n-This documentation serves by no means as a crash course on compilers or language design.\n-And for details specifically related to Rust, the [Rustc Development Guide][rustc_dev_guide]\n-is a far better choice to peruse.\n-\n-The [Syntax and AST][ast] chapter and the [High-Level IR][hir] chapter are\n-great introduction to the concepts mentioned in this chapter.\n-\n-Some readers might also find the [introductory chapter][map_of_territory] of\n-Robert Nystrom's _Crafting Interpreters_ a helpful overview of compiled and\n-interpreted languages before jumping back to the Rustc guide.\n-\n-[ast]: https://rustc-dev-guide.rust-lang.org/syntax-intro.html\n [early_context]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.EarlyContext.html\n [early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n-[hir]: https://rustc-dev-guide.rust-lang.org/hir.html\n [late_context]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/context/struct.LateContext.html\n [late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n [lexing_and_parsing]: https://rustc-dev-guide.rust-lang.org/overview.html#lexing-and-parsing\n-[rustc_dev_guide]: https://rustc-dev-guide.rust-lang.org/\n-[map_of_territory]: https://craftinginterpreters.com/a-map-of-the-territory.html"}, {"sha": "225de8495662566bb128c8d8d86ac738a0c873b6", "filename": "book/src/development/type_checking.md", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a34e75be592bf1dae4ccb8bfbd5b9e259a698388/book%2Fsrc%2Fdevelopment%2Ftype_checking.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34e75be592bf1dae4ccb8bfbd5b9e259a698388/book%2Fsrc%2Fdevelopment%2Ftype_checking.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Ftype_checking.md?ref=a34e75be592bf1dae4ccb8bfbd5b9e259a698388", "patch": "@@ -51,7 +51,7 @@ impl LateLintPass<'_> for MyStructLint {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         // Get type of `expr`\n         let ty = cx.typeck_results().expr_ty(expr);\n-        \n+\n         // Check if the `Ty` of this expression is of character type\n         if ty.is_char() {\n             println!(\"Our expression is a char!\");\n@@ -70,18 +70,18 @@ pub fn is_char(self) -> bool {\n }\n ```\n \n-Indeed, we just discovered `Ty`'s [`kind` method][kind], which provides us\n+Indeed, we just discovered `Ty`'s [`kind()` method][kind], which provides us\n with [`TyKind`][TyKind] of a `Ty`.\n \n ## `TyKind`\n \n `TyKind` defines the kinds of types in Rust's type system.\n Peeking into [`TyKind` documentation][TyKind], we will see that it is an\n-enum of 27 variants, including items such as `Bool`, `Int`, `Ref`, etc.\n+enum of over 25 variants, including items such as `Bool`, `Int`, `Ref`, etc.\n \n ### `kind` Usage\n \n-The `TyKind` of `Ty` can be returned by calling [`Ty.kind` method][kind].\n+The `TyKind` of `Ty` can be returned by calling [`Ty.kind()` method][kind].\n We often use this method to perform pattern matching in Clippy.\n \n For instance, if we want to check for a `struct`, we could examine if the\n@@ -107,15 +107,21 @@ impl LateLintPass<'_> for MyStructLint {\n We've been talking about [`ty::Ty`][middle_ty] this whole time without addressing [`hir::Ty`][hir_ty], but the latter\n is also important to understand.\n \n-`hir::Ty` would represent *what* an user wrote, while `ty::Ty` would understand the meaning of it (because it has more\n-information).\n+`hir::Ty` would represent *what* the user wrote, while `ty::Ty` is how the compiler sees the type and has more\n+information. Example:\n \n-**Example: `fn foo(x: u32) -> u32 { x }`**\n+```rust\n+fn foo(x: u32) -> u32 { x }\n+```\n \n Here the HIR sees the types without \"thinking\" about them, it knows that the function takes an `u32` and returns\n-an `u32`. But at the `ty::Ty` level the compiler understands that they're the same type, in-depth lifetimes, etc...\n+an `u32`. As far as `hir::Ty` is concerned those might be different types. But at the `ty::Ty` level the compiler\n+understands that they're the same type, in-depth lifetimes, etc...\n+\n+To get from a `hir::Ty` to a `ty::Ty`, you can use the [`hir_ty_to_ty`][hir_ty_to_ty] function outside of bodies or\n+outside of bodies the [`TypeckResults::node_type()`][node_type] method.\n \n-you can use the [`hir_ty_to_ty`][hir_ty_to_ty] function to convert from a `hir::Ty` to a `ty::Ty`\n+> **Warning**: Don't use `hir_ty_to_ty` inside of bodies, because this can cause ICEs.\n \n ## Useful Links\n \n@@ -130,6 +136,7 @@ in this chapter:\n [Adt]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html#variant.Adt\n [AdtDef]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/adt/struct.AdtDef.html\n [expr_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#method.expr_ty\n+[node_type]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckResults.html#method.node_type\n [is_char]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Ty.html#method.is_char\n [is_char_source]: https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/sty.rs.html#1831-1834\n [kind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Ty.html#method.kind"}]}