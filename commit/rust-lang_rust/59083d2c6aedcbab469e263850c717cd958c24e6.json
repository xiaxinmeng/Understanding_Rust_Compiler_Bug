{"sha": "59083d2c6aedcbab469e263850c717cd958c24e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MDgzZDJjNmFlZGNiYWI0NjllMjYzODUwYzcxN2NkOTU4YzI0ZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-06-21T09:56:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-08T17:55:10Z"}, "message": "Address nits by @catamorphism", "tree": {"sha": "057a62d4905edfa460370646bd60e38cfe391bca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057a62d4905edfa460370646bd60e38cfe391bca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59083d2c6aedcbab469e263850c717cd958c24e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59083d2c6aedcbab469e263850c717cd958c24e6", "html_url": "https://github.com/rust-lang/rust/commit/59083d2c6aedcbab469e263850c717cd958c24e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59083d2c6aedcbab469e263850c717cd958c24e6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af453a33cc4ec8773ce869c4564d713a7ba60775", "url": "https://api.github.com/repos/rust-lang/rust/commits/af453a33cc4ec8773ce869c4564d713a7ba60775", "html_url": "https://github.com/rust-lang/rust/commit/af453a33cc4ec8773ce869c4564d713a7ba60775"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "2b42c085009df5a5686959b65c47bc7af69252bc", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59083d2c6aedcbab469e263850c717cd958c24e6/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59083d2c6aedcbab469e263850c717cd958c24e6/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=59083d2c6aedcbab469e263850c717cd958c24e6", "patch": "@@ -143,7 +143,7 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n }\n \n /**\n- * Zeroes out `count` bytes of memory at `dst`\n+ * Zeroes out `count * size_of::<T>` bytes of memory at `dst`\n  */\n #[inline]\n #[cfg(not(stage0))]"}, {"sha": "012333b931ec7005a9c1efabc193be12df750fec", "filename": "src/rt/boxed_region.cpp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59083d2c6aedcbab469e263850c717cd958c24e6/src%2Frt%2Fboxed_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/59083d2c6aedcbab469e263850c717cd958c24e6/src%2Frt%2Fboxed_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.cpp?ref=59083d2c6aedcbab469e263850c717cd958c24e6", "patch": "@@ -39,10 +39,6 @@ rust_opaque_box *boxed_region::malloc(type_desc *td, size_t body_size) {\n rust_opaque_box *boxed_region::realloc(rust_opaque_box *box,\n                                        size_t new_size) {\n \n-    // We also get called on the unique-vec-in-managed-heap path.\n-    // assert(box->ref_count == 1 ||\n-    //        box->ref_count == (size_t)(-2));\n-\n     size_t total_size = new_size + sizeof(rust_opaque_box);\n     rust_opaque_box *new_box =\n         (rust_opaque_box*)backing_region->realloc(box, total_size);"}, {"sha": "5da7a6f2b56cc9f0796456ac746f2e9108f4df13", "filename": "src/test/run-pass/borrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59083d2c6aedcbab469e263850c717cd958c24e6/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59083d2c6aedcbab469e263850c717cd958c24e6/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs?ref=59083d2c6aedcbab469e263850c717cd958c24e6", "patch": "@@ -29,13 +29,13 @@\n \n fn main() {\n     let a = @mut 3i;\n-    // let b = @mut [a];\n-    // let c = @mut [3];\n+    let b = @mut [a];\n+    let c = @mut [3];\n \n     // this should freeze `a` only\n     let _x: &mut int = a;\n \n     // hence these writes should not fail:\n-    // b[0] = b[0];\n-    // c[0] = c[0];\n+    b[0] = b[0];\n+    c[0] = c[0];\n }"}]}