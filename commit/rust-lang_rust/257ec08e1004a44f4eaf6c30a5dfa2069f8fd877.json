{"sha": "257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1N2VjMDhlMTAwNGE0NGY0ZWFmNmMzMGE1ZGZhMjA2OWY4ZmQ4Nzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-09T19:02:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-09T19:02:13Z"}, "message": "Auto merge of #48757 - alexcrichton:fix-msbuild-build, r=Mark-Simulacrum\n\nrustbuild: Fix MSBuild location of `llvm-config.exe`\n\nFor LLD integration the path to `llvm-config` needed to change to inside the\nbuild directory itself (for whatever reason) but the build directory is\ndifferent on MSBuild than it is on `ninja` for MSVC builds, so the path to\n`llvm-config.exe` was actually wrong and not working!\n\nThis commit removes the `Build::llvm_config` function in favor of the source of\ntruth, the `Llvm` build step itself. The build step was then updated to find the\nright build directory for MSBuild as well as `ninja` for where `llvm-config.exe`\nis located.\n\nCloses #48749", "tree": {"sha": "1c68f40b0ae7d2c2b8a6e51064e18ab1dc601ca1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c68f40b0ae7d2c2b8a6e51064e18ab1dc601ca1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "html_url": "https://github.com/rust-lang/rust/commit/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fedce67cd21dc08ece5a484fe1a060346acac98a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fedce67cd21dc08ece5a484fe1a060346acac98a", "html_url": "https://github.com/rust-lang/rust/commit/fedce67cd21dc08ece5a484fe1a060346acac98a"}, {"sha": "be902e7168505954b85e1bbb35322f8df8a29c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/be902e7168505954b85e1bbb35322f8df8a29c19", "html_url": "https://github.com/rust-lang/rust/commit/be902e7168505954b85e1bbb35322f8df8a29c19"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "33bcfaa80ca319185f2b61f83319c67de922e6c8", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "patch": "@@ -46,7 +46,7 @@ impl Step for Std {\n         let out_dir = build.stage_out(compiler, Mode::Libstd);\n         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"check\");\n-        std_cargo(build, &compiler, target, &mut cargo);\n+        std_cargo(builder, &compiler, target, &mut cargo);\n         run_cargo(build,\n                   &mut cargo,\n                   &libstd_stamp(build, compiler, target),"}, {"sha": "86263c8fa07330f7858557de10d4f4cb7ec4e4f0", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "patch": "@@ -105,7 +105,7 @@ impl Step for Std {\n         let out_dir = build.stage_out(compiler, Mode::Libstd);\n         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n-        std_cargo(build, &compiler, target, &mut cargo);\n+        std_cargo(builder, &compiler, target, &mut cargo);\n         run_cargo(build,\n                   &mut cargo,\n                   &libstd_stamp(build, compiler, target),\n@@ -135,7 +135,7 @@ fn copy_musl_third_party_objects(build: &Build,\n \n /// Configure cargo to compile the standard library, adding appropriate env vars\n /// and such.\n-pub fn std_cargo(build: &Build,\n+pub fn std_cargo(build: &Builder,\n                  compiler: &Compiler,\n                  target: Interned<String>,\n                  cargo: &mut Command) {\n@@ -162,7 +162,11 @@ pub fn std_cargo(build: &Build,\n         // missing\n         // We also only build the runtimes when --enable-sanitizers (or its\n         // config.toml equivalent) is used\n-        cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n+        let llvm_config = build.ensure(native::Llvm {\n+            target: build.config.build,\n+            emscripten: false,\n+        });\n+        cargo.env(\"LLVM_CONFIG\", llvm_config);\n     }\n \n     cargo.arg(\"--features\").arg(features)"}, {"sha": "5bc582b3507bb4935b936cf67123ab790efeb42f", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "patch": "@@ -481,7 +481,7 @@ impl Step for Std {\n         t!(symlink_dir_force(&my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"doc\");\n-        compile::std_cargo(build, &compiler, target, &mut cargo);\n+        compile::std_cargo(builder, &compiler, target, &mut cargo);\n \n         // We don't want to build docs for internal std dependencies unless\n         // in compiler-docs mode. When not in that mode, we whitelist the crates"}, {"sha": "43f0c94730818ef3449c5751489ca6860030f58b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "patch": "@@ -532,20 +532,6 @@ impl Build {\n         }\n     }\n \n-    /// Returns the path to `llvm-config` for the specified target.\n-    ///\n-    /// If a custom `llvm-config` was specified for target then that's returned\n-    /// instead.\n-    fn llvm_config(&self, target: Interned<String>) -> PathBuf {\n-        let target_config = self.config.target_config.get(&target);\n-        if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n-            s.clone()\n-        } else {\n-            self.llvm_out(self.config.build).join(\"bin\")\n-                .join(exe(\"llvm-config\", &*target))\n-        }\n-    }\n-\n     /// Returns the path to `FileCheck` binary for the specified target\n     fn llvm_filecheck(&self, target: Interned<String>) -> PathBuf {\n         let target_config = self.config.target_config.get(&target);"}, {"sha": "242f09c37230058de3c6ac177455492c242a2ee5", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "patch": "@@ -81,11 +81,14 @@ impl Step for Llvm {\n \n         let (out_dir, llvm_config_ret_dir) = if emscripten {\n             let dir = build.emscripten_llvm_out(target);\n-            let config_dir = dir.join(\"build/bin\");\n+            let config_dir = dir.join(\"bin\");\n             (dir, config_dir)\n         } else {\n-            (build.llvm_out(target),\n-                build.llvm_out(build.config.build).join(\"build/bin\"))\n+            let mut dir = build.llvm_out(build.config.build);\n+            if !build.config.build.contains(\"msvc\") || build.config.ninja {\n+                dir.push(\"build\");\n+            }\n+            (build.llvm_out(target), dir.join(\"bin\"))\n         };\n         let done_stamp = out_dir.join(\"llvm-finished-building\");\n         let build_llvm_config = llvm_config_ret_dir"}, {"sha": "cf88916ea70902dea8b08de49023e8228ef769fa", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257ec08e1004a44f4eaf6c30a5dfa2069f8fd877/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=257ec08e1004a44f4eaf6c30a5dfa2069f8fd877", "patch": "@@ -915,7 +915,10 @@ impl Step for Compiletest {\n         }\n \n         if build.config.llvm_enabled {\n-            let llvm_config = build.llvm_config(build.config.build);\n+            let llvm_config = builder.ensure(native::Llvm {\n+                target: build.config.build,\n+                emscripten: false,\n+            });\n             let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n             cmd.arg(\"--llvm-version\").arg(llvm_version);\n             if !build.is_rust_llvm(target) {\n@@ -1382,7 +1385,7 @@ impl Step for Crate {\n         let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n         match mode {\n             Mode::Libstd => {\n-                compile::std_cargo(build, &compiler, target, &mut cargo);\n+                compile::std_cargo(builder, &compiler, target, &mut cargo);\n             }\n             Mode::Libtest => {\n                 compile::test_cargo(build, &compiler, target, &mut cargo);"}]}