{"sha": "01d8380b19f63f1a8acafcc340c7e964b55fda82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDgzODBiMTlmNjNmMWE4YWNhZmNjMzQwYzdlOTY0YjU1ZmRhODI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T02:59:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:27Z"}, "message": "librustc: De-`@mut` `resolve::Module::glob_count`", "tree": {"sha": "62daecfc1672b386c309ad54eb96862e98f5a60a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62daecfc1672b386c309ad54eb96862e98f5a60a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d8380b19f63f1a8acafcc340c7e964b55fda82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d8380b19f63f1a8acafcc340c7e964b55fda82", "html_url": "https://github.com/rust-lang/rust/commit/01d8380b19f63f1a8acafcc340c7e964b55fda82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d8380b19f63f1a8acafcc340c7e964b55fda82/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6db9a8c55cc45afb5b28f67352f32507188094f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6db9a8c55cc45afb5b28f67352f32507188094f5", "html_url": "https://github.com/rust-lang/rust/commit/6db9a8c55cc45afb5b28f67352f32507188094f5"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "3ee73ae4b2329bc4c50e33d2b523516ebb3ee4e0", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01d8380b19f63f1a8acafcc340c7e964b55fda82/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d8380b19f63f1a8acafcc340c7e964b55fda82/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=01d8380b19f63f1a8acafcc340c7e964b55fda82", "patch": "@@ -447,7 +447,7 @@ struct Module {\n     import_resolutions: @mut HashMap<Name, @mut ImportResolution>,\n \n     // The number of unresolved globs that this module exports.\n-    glob_count: uint,\n+    glob_count: Cell<uint>,\n \n     // The index of the import we're resolving.\n     resolved_import_count: uint,\n@@ -475,7 +475,7 @@ impl Module {\n             external_module_children: @mut HashMap::new(),\n             anonymous_children: @mut HashMap::new(),\n             import_resolutions: @mut HashMap::new(),\n-            glob_count: 0,\n+            glob_count: Cell::new(0),\n             resolved_import_count: 0,\n             populated: Cell::new(!external),\n         }\n@@ -1961,7 +1961,7 @@ impl Resolver {\n                 // Set the glob flag. This tells us that we don't know the\n                 // module's exports ahead of time.\n \n-                module_.glob_count += 1;\n+                module_.glob_count.set(module_.glob_count.get() + 1);\n             }\n         }\n \n@@ -2192,8 +2192,8 @@ impl Resolver {\n         if !resolution_result.indeterminate() {\n             match *import_directive.subclass {\n                 GlobImport => {\n-                    assert!(module_.glob_count >= 1);\n-                    module_.glob_count -= 1;\n+                    assert!(module_.glob_count.get() >= 1);\n+                    module_.glob_count.set(module_.glob_count.get() - 1);\n                 }\n                 SingleImport(..) => {\n                     // Ignore.\n@@ -2268,7 +2268,7 @@ impl Resolver {\n                 // containing module, bail out. We don't know enough to be\n                 // able to resolve this import.\n \n-                if containing_module.glob_count > 0 {\n+                if containing_module.glob_count.get() > 0 {\n                     debug!(\"(resolving single import) unresolved glob; \\\n                             bailing out\");\n                     return Indeterminate;\n@@ -2463,7 +2463,7 @@ impl Resolver {\n             return Indeterminate;\n         }\n \n-        assert_eq!(containing_module.glob_count, 0);\n+        assert_eq!(containing_module.glob_count.get(), 0);\n \n         // Add all resolved imports from the containing module.\n         for (ident, target_import_resolution) in containing_module.import_resolutions.iter() {\n@@ -3102,7 +3102,7 @@ impl Resolver {\n         // If this is a search of all imports, we should be done with glob\n         // resolution at this point.\n         if name_search_type == PathSearch {\n-            assert_eq!(module_.glob_count, 0);\n+            assert_eq!(module_.glob_count.get(), 0);\n         }\n \n         // Check the list of resolved imports."}]}