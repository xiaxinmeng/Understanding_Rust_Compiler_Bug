{"sha": "37cbc08a927a85d4da5e04fdf6de3452fc109c58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3Y2JjMDhhOTI3YTg1ZDRkYTVlMDRmZGY2ZGUzNDUyZmMxMDljNTg=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-02-07T22:05:15Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-02-07T23:24:36Z"}, "message": "Clean up weird option mapping", "tree": {"sha": "61c7ee981fae037b0f5dc027481b2f2e71a23bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c7ee981fae037b0f5dc027481b2f2e71a23bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37cbc08a927a85d4da5e04fdf6de3452fc109c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37cbc08a927a85d4da5e04fdf6de3452fc109c58", "html_url": "https://github.com/rust-lang/rust/commit/37cbc08a927a85d4da5e04fdf6de3452fc109c58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37cbc08a927a85d4da5e04fdf6de3452fc109c58/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3182375e064b8fa90437aee1465bccafd8187d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/3182375e064b8fa90437aee1465bccafd8187d89", "html_url": "https://github.com/rust-lang/rust/commit/3182375e064b8fa90437aee1465bccafd8187d89"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "5f5d552ccc89487333b74d31fe111a05cc1b3a6e", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37cbc08a927a85d4da5e04fdf6de3452fc109c58/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37cbc08a927a85d4da5e04fdf6de3452fc109c58/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=37cbc08a927a85d4da5e04fdf6de3452fc109c58", "patch": "@@ -285,13 +285,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.check_expr_eq_type(&e, ty);\n                 ty\n             }\n-            ExprKind::If(ref cond, ref then_expr, ref opt_else_expr) => self.check_then_else(\n-                &cond,\n-                then_expr,\n-                opt_else_expr.as_ref().map(|e| &**e),\n-                expr.span,\n-                expected,\n-            ),\n+            ExprKind::If(cond, then_expr, opt_else_expr) => {\n+                self.check_then_else(cond, then_expr, opt_else_expr, expr.span, expected)\n+            }\n             ExprKind::DropTemps(ref e) => self.check_expr_with_expectation(e, expected),\n             ExprKind::Array(ref args) => self.check_expr_array(args, expected, expr),\n             ExprKind::ConstBlock(ref anon_const) => self.to_const(anon_const).ty,"}]}