{"sha": "8ff449d505728276e822ca9a80c1e7b2da8288a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZjQ0OWQ1MDU3MjgyNzZlODIyY2E5YTgwYzFlN2IyZGE4Mjg4YTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-15T06:52:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-15T06:52:12Z"}, "message": "Auto merge of #47329 - davidtwco:issue-46983, r=nikomatsakis\n\nNLL: bad error message when converting anonymous lifetime to `'static`\n\nFixes #46983.\n\nr? @nikomatsakis", "tree": {"sha": "6352926ac46f74358b118637f1f1fc597edbcbbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6352926ac46f74358b118637f1f1fc597edbcbbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ff449d505728276e822ca9a80c1e7b2da8288a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff449d505728276e822ca9a80c1e7b2da8288a2", "html_url": "https://github.com/rust-lang/rust/commit/8ff449d505728276e822ca9a80c1e7b2da8288a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ff449d505728276e822ca9a80c1e7b2da8288a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb345a0be3ba3fa1970fe02789791c5c72788d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb345a0be3ba3fa1970fe02789791c5c72788d8f", "html_url": "https://github.com/rust-lang/rust/commit/bb345a0be3ba3fa1970fe02789791c5c72788d8f"}, {"sha": "1aa454e1e65cbd47d60849f274debe96226b1a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa454e1e65cbd47d60849f274debe96226b1a5a", "html_url": "https://github.com/rust-lang/rust/commit/1aa454e1e65cbd47d60849f274debe96226b1a5a"}], "stats": {"total": 96, "additions": 65, "deletions": 31}, "files": [{"sha": "5617c7723859743cf3f5cd7468475941a81d27ca", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -118,4 +118,17 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             .emit();\n         return Some(ErrorReported);\n     }\n+\n+    // This method returns whether the given Region is Named\n+    pub(super) fn is_named_region(&self, region: ty::Region<'tcx>) -> bool {\n+        match *region {\n+            ty::ReStatic => true,\n+            ty::ReFree(ref free_region) => match free_region.bound_region {\n+                ty::BrNamed(..) => true,\n+                _ => false,\n+            },\n+            ty::ReEarlyBound(_) => true,\n+            _ => false,\n+        }\n+    }\n }"}, {"sha": "8aadec64554143e08f7a16b4b24337e9b8c08587", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -198,16 +198,4 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         }\n         false\n     }\n-\n-    // This method returns whether the given Region is Named\n-    pub(super) fn is_named_region(&self, region: Region<'tcx>) -> bool {\n-        match *region {\n-            ty::ReFree(ref free_region) => match free_region.bound_region {\n-                ty::BrNamed(..) => true,\n-                _ => false,\n-            },\n-            ty::ReEarlyBound(_) => true,\n-            _ => false,\n-        }\n-    }\n }"}, {"sha": "1ffba68263a9a4faceab7cb075c04e4ffceef7e7", "filename": "src/test/compile-fail/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -13,7 +13,7 @@ fn bar<F>(blk: F) where F: FnOnce() + 'static {\n \n fn foo(x: &()) {\n     bar(|| {\n-        //~^ ERROR does not fulfill\n+        //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n         let _ = x;\n     })\n }"}, {"sha": "0eb99ca0fc3f1b1f8db492fcb556baa5958c28f5", "filename": "src/test/compile-fail/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -13,7 +13,7 @@\n use std::fmt::Debug;\n \n fn elided(x: &i32) -> impl Copy { x }\n-//~^ ERROR cannot infer an appropriate lifetime\n+//~^ ERROR explicit lifetime required in the type of `x` [E0621]\n \n fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n //~^ ERROR cannot infer an appropriate lifetime"}, {"sha": "1768c834cb39161334dc38fa7cb12f0a18790954", "filename": "src/test/compile-fail/issue-16922.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fissue-16922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fissue-16922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16922.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -12,7 +12,7 @@ use std::any::Any;\n \n fn foo<T: Any>(value: &T) -> Box<Any> {\n     Box::new(value) as Box<Any>\n-    //~^ ERROR: cannot infer an appropriate lifetime\n+    //~^ ERROR explicit lifetime required in the type of `value` [E0621]\n }\n \n fn main() {"}, {"sha": "b253612bc327b1ff24f9cb334198a7205098e8f2", "filename": "src/test/compile-fail/object-lifetime-default-from-box-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -25,7 +25,7 @@ fn load(ss: &mut SomeStruct) -> Box<SomeTrait> {\n     // `Box<SomeTrait>` defaults to a `'static` bound, so this return\n     // is illegal.\n \n-    ss.r //~ ERROR cannot infer an appropriate lifetime\n+    ss.r //~ ERROR explicit lifetime required in the type of `ss` [E0621]\n }\n \n fn store(ss: &mut SomeStruct, b: Box<SomeTrait>) {"}, {"sha": "5bf397ab3838ce747441d5fe4992b1d3cd675567", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -16,20 +16,20 @@ impl<'a> Foo for &'a [u8] {}\n \n fn a(v: &[u8]) -> Box<Foo + 'static> {\n     let x: Box<Foo + 'static> = Box::new(v);\n-    //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n+    //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n     x\n }\n \n fn b(v: &[u8]) -> Box<Foo + 'static> {\n     Box::new(v)\n-        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n+        //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n }\n \n fn c(v: &[u8]) -> Box<Foo> {\n     // same as previous case due to RFC 599\n \n     Box::new(v)\n-        //~^ ERROR cannot infer an appropriate lifetime due to conflicting\n+        //~^ ERROR explicit lifetime required in the type of `v` [E0621]\n }\n \n fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {"}, {"sha": "dd7b2bf96357525a8a111e4e7903c346ce5a1dba", "filename": "src/test/compile-fail/regions-proc-bound-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -16,7 +16,7 @@ fn borrowed_proc<'a>(x: &'a isize) -> Box<FnMut()->(isize) + 'a> {\n \n fn static_proc(x: &isize) -> Box<FnMut()->(isize) + 'static> {\n     // This is illegal, because the region bound on `proc` is 'static.\n-    Box::new(move|| { *x }) //~ ERROR cannot infer an appropriate lifetime\n+    Box::new(move|| { *x }) //~ ERROR explicit lifetime required in the type of `x` [E0621]\n }\n \n fn main() { }"}, {"sha": "13f93090fbbb4fae5260fe6296d19cca0a8ca8bb", "filename": "src/test/compile-fail/regions-static-bound.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -22,12 +22,12 @@ fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n }\n \n fn error(u: &(), v: &()) {\n-    static_id(&u); //[ll]~ ERROR cannot infer an appropriate lifetime\n+    static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n     //[nll]~^ WARNING not reporting region error due to -Znll\n-    //[nll]~| ERROR free region `` does not outlive free region `'static`\n-    static_id_indirect(&v); //[ll]~ ERROR cannot infer an appropriate lifetime\n+    //[nll]~| ERROR explicit lifetime required in the type of `u` [E0621]\n+    static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n     //[nll]~^ WARNING not reporting region error due to -Znll\n-    //[nll]~| ERROR free region `` does not outlive free region `'static`\n+    //[nll]~| ERROR explicit lifetime required in the type of `v` [E0621]\n }\n \n fn main() {}"}, {"sha": "ebbd474b1c2b20fcc4e81b4cb4df410c9b1eedf9", "filename": "src/test/ui/issue-46983.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fissue-46983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fissue-46983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46983.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+fn foo(x: &u32) -> &'static u32 {\n+    &*x\n+    //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n+}\n+\n+fn main() {}"}, {"sha": "ac8417a7a2419c7645acb0fbca045df9c1816bae", "filename": "src/test/ui/issue-46983.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46983.stderr?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -0,0 +1,10 @@\n+error[E0621]: explicit lifetime required in the type of `x`\n+  --> $DIR/issue-46983.rs:14:5\n+   |\n+13 | fn foo(x: &u32) -> &'static u32 {\n+   |        - consider changing the type of `x` to `&'static u32`\n+14 |     &*x\n+   |     ^^^ lifetime `'static` required\n+\n+error: aborting due to previous error\n+"}, {"sha": "ac21fe25bd112e5a9183bb737012f15b9d06704c", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -18,7 +18,7 @@\n fn foo(x: &u32) -> &'static u32 {\n     &*x\n         //~^ WARN not reporting region error due to -Znll\n-        //~| ERROR does not outlive free region\n+        //~| ERROR explicit lifetime required in the type of `x`\n }\n \n fn main() { }"}, {"sha": "2a1122cbda7a947ed7dbbac945128018d8f5a237", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -4,11 +4,13 @@ warning: not reporting region error due to -Znll\n 19 |     &*x\n    |     ^^^\n \n-error: free region `ReFree(DefId(0/0:3 ~ region_lbr_anon_does_not_outlive_static[317d]::foo[0]), BrAnon(0))` does not outlive free region `ReStatic`\n+error[E0621]: explicit lifetime required in the type of `x`\n   --> $DIR/region-lbr-anon-does-not-outlive-static.rs:19:5\n    |\n+18 | fn foo(x: &u32) -> &'static u32 {\n+   |        - consider changing the type of `x` to `&ReStatic u32`\n 19 |     &*x\n-   |     ^^^\n+   |     ^^^ lifetime `ReStatic` required\n \n error: aborting due to previous error\n "}, {"sha": "09ce42ce1b5519899cdab30e1589a87fb081fddd", "filename": "src/test/ui/nll/guarantor-issue-46974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -22,7 +22,7 @@ fn foo(s: &mut (i32,)) -> i32 {\n \n fn bar(s: &Box<(i32,)>) -> &'static i32 {\n     // FIXME(#46983): error message should be better\n-    &s.0 //~ ERROR free region `` does not outlive free region `'static`\n+    &s.0 //~ ERROR explicit lifetime required in the type of `s` [E0621]\n }\n \n fn main() {"}, {"sha": "4f0bd88f988ae3e370c6c1e71e9bab31d572b303", "filename": "src/test/ui/nll/guarantor-issue-46974.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ff449d505728276e822ca9a80c1e7b2da8288a2/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr?ref=8ff449d505728276e822ca9a80c1e7b2da8288a2", "patch": "@@ -7,11 +7,14 @@ error[E0506]: cannot assign to `*s` because it is borrowed\n 19 |     *s = (2,); //~ ERROR cannot assign to `*s`\n    |     ^^^^^^^^^ assignment to borrowed `*s` occurs here\n \n-error: free region `` does not outlive free region `'static`\n+error[E0621]: explicit lifetime required in the type of `s`\n   --> $DIR/guarantor-issue-46974.rs:25:5\n    |\n-25 |     &s.0 //~ ERROR free region `` does not outlive free region `'static`\n-   |     ^^^^\n+23 | fn bar(s: &Box<(i32,)>) -> &'static i32 {\n+   |        - consider changing the type of `s` to `&'static std::boxed::Box<(i32,)>`\n+24 |     // FIXME(#46983): error message should be better\n+25 |     &s.0 //~ ERROR explicit lifetime required in the type of `s` [E0621]\n+   |     ^^^^ lifetime `'static` required\n \n error: aborting due to 2 previous errors\n "}]}