{"sha": "f810c11d3c44af357ad7af6cf9fc9ab582591c01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MTBjMTFkM2M0NGFmMzU3YWQ3YWY2Y2Y5ZmM5YWI1ODI1OTFjMDE=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-15T17:00:49Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-15T17:09:16Z"}, "message": "Applying PR suggestions and cleaning up", "tree": {"sha": "3f4c339c524deeb27d410199ab77f76e8c4abdcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f4c339c524deeb27d410199ab77f76e8c4abdcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f810c11d3c44af357ad7af6cf9fc9ab582591c01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f810c11d3c44af357ad7af6cf9fc9ab582591c01", "html_url": "https://github.com/rust-lang/rust/commit/f810c11d3c44af357ad7af6cf9fc9ab582591c01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f810c11d3c44af357ad7af6cf9fc9ab582591c01/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b740a04dc49b32185e69a2128bcb8425d82b0c66", "url": "https://api.github.com/repos/rust-lang/rust/commits/b740a04dc49b32185e69a2128bcb8425d82b0c66", "html_url": "https://github.com/rust-lang/rust/commit/b740a04dc49b32185e69a2128bcb8425d82b0c66"}], "stats": {"total": 88, "additions": 39, "deletions": 49}, "files": [{"sha": "fd2dddb3b96e518ef7f81f4a109e1e8f237cbbf9", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f810c11d3c44af357ad7af6cf9fc9ab582591c01/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f810c11d3c44af357ad7af6cf9fc9ab582591c01/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=f810c11d3c44af357ad7af6cf9fc9ab582591c01", "patch": "@@ -92,25 +92,26 @@ macro_rules! define_Conf {\n \n         #[cfg(feature = \"metadata-collector-lint\")]\n         pub mod metadata {\n-            use crate::utils::internal_lints::metadata_collector::ClippyConfigurationBasicInfo;\n+            use crate::utils::internal_lints::metadata_collector::ClippyConfiguration;\n \n-            pub(crate) fn get_configuration_metadata() -> Vec<ClippyConfigurationBasicInfo> {\n+            macro_rules! wrap_option {\n+                () => (None);\n+                ($x:literal) => (Some($x));\n+            }\n+\n+            pub(crate) fn get_configuration_metadata() -> Vec<ClippyConfiguration> {\n                 vec![\n                     $(\n                         {\n-                            #[allow(unused_mut, unused_assignments)]\n-                            let mut deprecation_reason = None;\n+                            let deprecation_reason = wrap_option!($($dep)?);\n \n-                            // only set if a deprecation reason was set\n-                            $(deprecation_reason = Some(stringify!($dep));)?\n-\n-                            ClippyConfigurationBasicInfo {\n-                                name: stringify!($name),\n-                                config_type: stringify!($ty),\n-                                default: stringify!($default),\n-                                doc_comment: $doc,\n+                            ClippyConfiguration::new(\n+                                stringify!($name),\n+                                stringify!($ty),\n+                                format!(\"{:?}\", super::defaults::$name()),\n+                                $doc,\n                                 deprecation_reason,\n-                            }\n+                            )\n                         },\n                     )+\n                 ]"}, {"sha": "b7c86ae6e1844a06e0dbccb02a68e1332876051d", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 25, "deletions": 36, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f810c11d3c44af357ad7af6cf9fc9ab582591c01/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f810c11d3c44af357ad7af6cf9fc9ab582591c01/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=f810c11d3c44af357ad7af6cf9fc9ab582591c01", "patch": "@@ -149,7 +149,8 @@ impl MetadataCollector {\n     fn get_lint_configs(&self, lint_name: &str) -> Option<String> {\n         self.config\n             .iter()\n-            .filter_map(|x| x.lints.iter().any(|x| x == lint_name).then(|| format!(\"{}\", x)))\n+            .filter(|config| config.lints.iter().any(|lint| lint == lint_name))\n+            .map(ToString::to_string)\n             .reduce(|acc, x| acc + &x)\n             .map(|configurations| format!(CONFIGURATION_SECTION_TEMPLATE!(), configurations = configurations))\n     }\n@@ -261,52 +262,40 @@ impl Serialize for ApplicabilityInfo {\n // ==================================================================\n // Configuration\n // ==================================================================\n-#[derive(Debug)]\n-pub(crate) struct ClippyConfigurationBasicInfo {\n-    pub name: &'static str,\n-    pub config_type: &'static str,\n-    pub default: &'static str,\n-    pub doc_comment: &'static str,\n-    pub deprecation_reason: Option<&'static str>,\n-}\n-\n #[derive(Debug, Clone, Default)]\n-struct ClippyConfiguration {\n+pub struct ClippyConfiguration {\n     name: String,\n-    lints: Vec<String>,\n-    doc: String,\n     config_type: &'static str,\n     default: String,\n+    lints: Vec<String>,\n+    doc: String,\n     deprecation_reason: Option<&'static str>,\n }\n \n-fn collect_configs() -> Vec<ClippyConfiguration> {\n-    let cons = crate::utils::conf::metadata::get_configuration_metadata();\n-    cons.iter()\n-        .map(move |x| {\n-            let (lints, doc) = parse_config_field_doc(x.doc_comment)\n-                .unwrap_or_else(|| (vec![], \"[ERROR] MALFORMED DOC COMMENT\".to_string()));\n-\n-            ClippyConfiguration {\n-                name: to_kebab(x.name),\n-                lints,\n-                doc,\n-                config_type: x.config_type,\n-                default: clarify_default(x.default),\n-                deprecation_reason: x.deprecation_reason,\n-            }\n-        })\n-        .collect()\n-}\n+impl ClippyConfiguration {\n+    pub fn new(\n+        name: &'static str,\n+        config_type: &'static str,\n+        default: String,\n+        doc_comment: &'static str,\n+        deprecation_reason: Option<&'static str>,\n+    ) -> Self {\n+        let (lints, doc) = parse_config_field_doc(doc_comment)\n+            .unwrap_or_else(|| (vec![], \"[ERROR] MALFORMED DOC COMMENT\".to_string()));\n \n-fn clarify_default(default: &'static str) -> String {\n-    if let Some((_start, init)) = default.split_once('[') {\n-        if let Some((init, _end)) = init.split_once(']') {\n-            return format!(\"[{}]\", init);\n+        Self {\n+            name: to_kebab(name),\n+            lints,\n+            doc,\n+            config_type,\n+            default,\n+            deprecation_reason,\n         }\n     }\n+}\n \n-    default.to_string()\n+fn collect_configs() -> Vec<ClippyConfiguration> {\n+    crate::utils::conf::metadata::get_configuration_metadata()\n }\n \n /// This parses the field documentation of the config struct."}]}