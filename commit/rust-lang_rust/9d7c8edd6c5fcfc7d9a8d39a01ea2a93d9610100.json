{"sha": "9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "node_id": "C_kwDOAAsO6NoAKDlkN2M4ZWRkNmM1ZmNmYzdkOWE4ZDM5YTAxZWEyYTkzZDk2MTAxMDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-22T14:32:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-22T14:32:49Z"}, "message": "Rollup merge of #92828 - Amanieu:unwind-abort, r=dtolnay\n\nPrint a helpful message if unwinding aborts when it reaches a nounwind function\n\nThis is implemented by routing `TerminatorKind::Abort` back through the panic handler, but with a special flag in the `PanicInfo` which indicates that the panic handler should *not* attempt to unwind the stack and should instead abort immediately.\n\nThis is useful for the planned change in https://github.com/rust-lang/lang-team/issues/97 which would make `Drop` impls `nounwind` by default.\n\n### Code\n\n```rust\n#![feature(c_unwind)]\n\nfn panic() {\n    panic!()\n}\n\nextern \"C\" fn nounwind() {\n    panic();\n}\n\nfn main() {\n    nounwind();\n}\n```\n\n### Before\n\n```\n$ ./test\nthread 'main' panicked at 'explicit panic', test.rs:4:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nIllegal instruction (core dumped)\n```\n\n### After\n\n```\n$ ./test\nthread 'main' panicked at 'explicit panic', test.rs:4:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nthread 'main' panicked at 'panic in a function that cannot unwind', test.rs:7:1\nstack backtrace:\n   0:     0x556f8f86ec9b - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hdccefe11a6ac4396\n   1:     0x556f8f88ac6c - core::fmt::write::he152b28c41466ebb\n   2:     0x556f8f85d6e2 - std::io::Write::write_fmt::h0c261480ab86f3d3\n   3:     0x556f8f8654fa - std::panicking::default_hook::{{closure}}::h5d7346f3ff7f6c1b\n   4:     0x556f8f86512b - std::panicking::default_hook::hd85803a1376cac7f\n   5:     0x556f8f865a91 - std::panicking::rust_panic_with_hook::h4dc1c5a3036257ac\n   6:     0x556f8f86f079 - std::panicking::begin_panic_handler::{{closure}}::hdda1d83c7a9d34d2\n   7:     0x556f8f86edc4 - std::sys_common::backtrace::__rust_end_short_backtrace::h5b70ed0cce71e95f\n   8:     0x556f8f865592 - rust_begin_unwind\n   9:     0x556f8f85a764 - core::panicking::panic_no_unwind::h2606ab3d78c87899\n  10:     0x556f8f85b910 - test::nounwind::hade6c7ee65050347\n  11:     0x556f8f85b936 - test::main::hdc6e02cb36343525\n  12:     0x556f8f85b7e3 - core::ops::function::FnOnce::call_once::h4d02663acfc7597f\n  13:     0x556f8f85b739 - std::sys_common::backtrace::__rust_begin_short_backtrace::h071d40135adb0101\n  14:     0x556f8f85c149 - std::rt::lang_start::{{closure}}::h70dbfbf38b685e93\n  15:     0x556f8f85c791 - std::rt::lang_start_internal::h798f1c0268d525aa\n  16:     0x556f8f85c131 - std::rt::lang_start::h476a7ee0a0bb663f\n  17:     0x556f8f85b963 - main\n  18:     0x7f64c0822b25 - __libc_start_main\n  19:     0x556f8f85ae8e - _start\n  20:                0x0 - <unknown>\nthread panicked while panicking. aborting.\nAborted (core dumped)\n```", "tree": {"sha": "6cdc8719ee32b05ebe3bf03e32e7392bc222c374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cdc8719ee32b05ebe3bf03e32e7392bc222c374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7BWRCRBK7hj4Ov3rIwAAl98IAC5dBeZSGUWlPBSPFdCCzfBu\n/f/Q2HCDp2pU0mCgV/Y+hZGixPGfCb65yrjKkvnGH7gmw2ahJ9OdG5FUeaD/G+tW\nl2JeiWvAqFN6RuBb0PB78drMda48BLoFkEuzWCv6cnz7VqV6OKEDOINotvGyalew\nEOWVESGtKPGelPYckVymp1p0JMuC5iMj3+MoqaVaO+hQZm2xMk4Gc9zp1Ut/UHho\nmjZ7x4yuCUSZS0fPiQinVstLwycVPPPsXDyN9O2lFnHpdUO3u8a3DBCHS9xLT/RE\nwcuZe3wflBrtAE4TdRofnu92Nz+K9Kwxj6SEMC8dKD6ZvJVu0aWa/zCmRLThwtg=\n=dvTw\n-----END PGP SIGNATURE-----\n", "payload": "tree 6cdc8719ee32b05ebe3bf03e32e7392bc222c374\nparent ffd199d76883901be35f4cbff0e5758014f903ff\nparent 24588e6b3af018aaff628b98cd56383595b2d226\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642861969 +0100\ncommitter GitHub <noreply@github.com> 1642861969 +0100\n\nRollup merge of #92828 - Amanieu:unwind-abort, r=dtolnay\n\nPrint a helpful message if unwinding aborts when it reaches a nounwind function\n\nThis is implemented by routing `TerminatorKind::Abort` back through the panic handler, but with a special flag in the `PanicInfo` which indicates that the panic handler should *not* attempt to unwind the stack and should instead abort immediately.\n\nThis is useful for the planned change in https://github.com/rust-lang/lang-team/issues/97 which would make `Drop` impls `nounwind` by default.\n\n### Code\n\n```rust\n#![feature(c_unwind)]\n\nfn panic() {\n    panic!()\n}\n\nextern \"C\" fn nounwind() {\n    panic();\n}\n\nfn main() {\n    nounwind();\n}\n```\n\n### Before\n\n```\n$ ./test\nthread 'main' panicked at 'explicit panic', test.rs:4:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nIllegal instruction (core dumped)\n```\n\n### After\n\n```\n$ ./test\nthread 'main' panicked at 'explicit panic', test.rs:4:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nthread 'main' panicked at 'panic in a function that cannot unwind', test.rs:7:1\nstack backtrace:\n   0:     0x556f8f86ec9b - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hdccefe11a6ac4396\n   1:     0x556f8f88ac6c - core::fmt::write::he152b28c41466ebb\n   2:     0x556f8f85d6e2 - std::io::Write::write_fmt::h0c261480ab86f3d3\n   3:     0x556f8f8654fa - std::panicking::default_hook::{{closure}}::h5d7346f3ff7f6c1b\n   4:     0x556f8f86512b - std::panicking::default_hook::hd85803a1376cac7f\n   5:     0x556f8f865a91 - std::panicking::rust_panic_with_hook::h4dc1c5a3036257ac\n   6:     0x556f8f86f079 - std::panicking::begin_panic_handler::{{closure}}::hdda1d83c7a9d34d2\n   7:     0x556f8f86edc4 - std::sys_common::backtrace::__rust_end_short_backtrace::h5b70ed0cce71e95f\n   8:     0x556f8f865592 - rust_begin_unwind\n   9:     0x556f8f85a764 - core::panicking::panic_no_unwind::h2606ab3d78c87899\n  10:     0x556f8f85b910 - test::nounwind::hade6c7ee65050347\n  11:     0x556f8f85b936 - test::main::hdc6e02cb36343525\n  12:     0x556f8f85b7e3 - core::ops::function::FnOnce::call_once::h4d02663acfc7597f\n  13:     0x556f8f85b739 - std::sys_common::backtrace::__rust_begin_short_backtrace::h071d40135adb0101\n  14:     0x556f8f85c149 - std::rt::lang_start::{{closure}}::h70dbfbf38b685e93\n  15:     0x556f8f85c791 - std::rt::lang_start_internal::h798f1c0268d525aa\n  16:     0x556f8f85c131 - std::rt::lang_start::h476a7ee0a0bb663f\n  17:     0x556f8f85b963 - main\n  18:     0x7f64c0822b25 - __libc_start_main\n  19:     0x556f8f85ae8e - _start\n  20:                0x0 - <unknown>\nthread panicked while panicking. aborting.\nAborted (core dumped)\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "html_url": "https://github.com/rust-lang/rust/commit/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffd199d76883901be35f4cbff0e5758014f903ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd199d76883901be35f4cbff0e5758014f903ff", "html_url": "https://github.com/rust-lang/rust/commit/ffd199d76883901be35f4cbff0e5758014f903ff"}, {"sha": "24588e6b3af018aaff628b98cd56383595b2d226", "url": "https://api.github.com/repos/rust-lang/rust/commits/24588e6b3af018aaff628b98cd56383595b2d226", "html_url": "https://github.com/rust-lang/rust/commit/24588e6b3af018aaff628b98cd56383595b2d226"}], "stats": {"total": 114, "additions": 97, "deletions": 17}, "files": [{"sha": "b1a76b80002db8486ee6a7f3c09d18f8975b750b", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -477,6 +477,28 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n     }\n \n+    fn codegen_abort_terminator(\n+        &mut self,\n+        helper: TerminatorCodegenHelper<'tcx>,\n+        mut bx: Bx,\n+        terminator: &mir::Terminator<'tcx>,\n+    ) {\n+        let span = terminator.source_info.span;\n+        self.set_debug_loc(&mut bx, terminator.source_info);\n+\n+        // Get the location information.\n+        let location = self.get_caller_location(&mut bx, terminator.source_info).immediate();\n+\n+        // Obtain the panic entry point.\n+        let def_id = common::langcall(bx.tcx(), Some(span), \"\", LangItem::PanicNoUnwind);\n+        let instance = ty::Instance::mono(bx.tcx(), def_id);\n+        let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n+        let llfn = bx.get_fn_addr(instance);\n+\n+        // Codegen the actual panic invoke/call.\n+        helper.do_call(self, &mut bx, fn_abi, llfn, &[location], None, None);\n+    }\n+\n     /// Returns `true` if this is indeed a panic intrinsic and codegen is done.\n     fn codegen_panic_intrinsic(\n         &mut self,\n@@ -1014,10 +1036,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::TerminatorKind::Resume => self.codegen_resume_terminator(helper, bx),\n \n             mir::TerminatorKind::Abort => {\n-                bx.abort();\n-                // `abort` does not terminate the block, so we still need to generate\n-                // an `unreachable` terminator after it.\n-                bx.unreachable();\n+                self.codegen_abort_terminator(helper, bx, terminator);\n             }\n \n             mir::TerminatorKind::Goto { target } => {"}, {"sha": "be4849d0b846e1064ac31b36617a4e74db93b1f4", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -283,6 +283,7 @@ language_item_table! {\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct,         GenericRequirement::None;\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n+    PanicNoUnwind,           sym::panic_no_unwind,     panic_no_unwind,            Target::Fn,             GenericRequirement::Exact(0);\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n "}, {"sha": "7f13da5d38f870c6757400306b95ef62d2e4a423", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -807,10 +807,18 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(create_fn_mono_item(tcx, instance, source));\n                 }\n             }\n+            mir::TerminatorKind::Abort { .. } => {\n+                let instance = Instance::mono(\n+                    tcx,\n+                    tcx.require_lang_item(LangItem::PanicNoUnwind, Some(source)),\n+                );\n+                if should_codegen_locally(tcx, &instance) {\n+                    self.output.push(create_fn_mono_item(tcx, instance, source));\n+                }\n+            }\n             mir::TerminatorKind::Goto { .. }\n             | mir::TerminatorKind::SwitchInt { .. }\n             | mir::TerminatorKind::Resume\n-            | mir::TerminatorKind::Abort\n             | mir::TerminatorKind::Return\n             | mir::TerminatorKind::Unreachable => {}\n             mir::TerminatorKind::GeneratorDrop"}, {"sha": "9870c90f2ec94363bb6780927cd631cbb9f6051e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -990,6 +990,7 @@ symbols! {\n         panic_implementation,\n         panic_info,\n         panic_location,\n+        panic_no_unwind,\n         panic_runtime,\n         panic_str,\n         panic_unwind,"}, {"sha": "405224f8fb0b095f03947a1f31020939c6ad9bd2", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -31,6 +31,7 @@ pub struct PanicInfo<'a> {\n     payload: &'a (dyn Any + Send),\n     message: Option<&'a fmt::Arguments<'a>>,\n     location: &'a Location<'a>,\n+    can_unwind: bool,\n }\n \n impl<'a> PanicInfo<'a> {\n@@ -44,9 +45,10 @@ impl<'a> PanicInfo<'a> {\n     pub fn internal_constructor(\n         message: Option<&'a fmt::Arguments<'a>>,\n         location: &'a Location<'a>,\n+        can_unwind: bool,\n     ) -> Self {\n         struct NoPayload;\n-        PanicInfo { location, message, payload: &NoPayload }\n+        PanicInfo { location, message, payload: &NoPayload, can_unwind }\n     }\n \n     #[unstable(\n@@ -127,6 +129,18 @@ impl<'a> PanicInfo<'a> {\n         // deal with that case in std::panicking::default_hook and core::panicking::panic_fmt.\n         Some(&self.location)\n     }\n+\n+    /// Returns whether the panic handler is allowed to unwind the stack from\n+    /// the point where the panic occurred.\n+    ///\n+    /// This is true for most kinds of panics with the exception of panics\n+    /// caused by trying to unwind out of a `Drop` implementation or a function\n+    /// whose ABI does not support unwinding.\n+    #[must_use]\n+    #[unstable(feature = \"panic_can_unwind\", issue = \"92988\")]\n+    pub fn can_unwind(&self) -> bool {\n+        self.can_unwind\n+    }\n }\n \n #[stable(feature = \"panic_hook_display\", since = \"1.26.0\")]"}, {"sha": "5078eea07a15c5499daff9c0fa50d9982407c83b", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -77,6 +77,31 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n }\n \n+#[cfg(not(bootstrap))]\n+#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[track_caller]\n+#[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function\n+fn panic_no_unwind() -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        super::intrinsics::abort()\n+    }\n+\n+    // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    // that gets resolved to the `#[panic_handler]` function.\n+    extern \"Rust\" {\n+        #[lang = \"panic_impl\"]\n+        fn panic_impl(pi: &PanicInfo<'_>) -> !;\n+    }\n+\n+    // PanicInfo with the `can_unwind` flag set to false forces an abort.\n+    let fmt = format_args!(\"panic in a function that cannot unwind\");\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), false);\n+\n+    // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n+    unsafe { panic_impl(&pi) }\n+}\n+\n /// The entry point for panicking with a formatted message.\n ///\n /// This is designed to reduce the amount of code required at the call\n@@ -104,7 +129,7 @@ pub const fn panic_fmt(fmt: fmt::Arguments<'_>) -> ! {\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;\n     }\n \n-    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller());\n+    let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), true);\n \n     // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call.\n     unsafe { panic_impl(&pi) }"}, {"sha": "489d362be427660e6a5e864104128de066ab2a22", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -311,6 +311,7 @@\n #![feature(once_cell)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n+#![feature(panic_can_unwind)]\n #![feature(panic_unwind)]\n #![feature(pin_static_ref)]\n #![feature(portable_simd)]"}, {"sha": "83ab13c963dc55f6dc6ebe3aeb7f38d736c7249d", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -576,9 +576,14 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n     let msg = info.message().unwrap(); // The current implementation always returns Some\n     crate::sys_common::backtrace::__rust_end_short_backtrace(move || {\n         if let Some(msg) = msg.as_str() {\n-            rust_panic_with_hook(&mut StrPanicPayload(msg), info.message(), loc);\n+            rust_panic_with_hook(&mut StrPanicPayload(msg), info.message(), loc, info.can_unwind());\n         } else {\n-            rust_panic_with_hook(&mut PanicPayload::new(msg), info.message(), loc);\n+            rust_panic_with_hook(\n+                &mut PanicPayload::new(msg),\n+                info.message(),\n+                loc,\n+                info.can_unwind(),\n+            );\n         }\n     })\n }\n@@ -602,7 +607,7 @@ pub const fn begin_panic<M: Any + Send>(msg: M) -> ! {\n \n     let loc = Location::caller();\n     return crate::sys_common::backtrace::__rust_end_short_backtrace(move || {\n-        rust_panic_with_hook(&mut PanicPayload::new(msg), None, loc)\n+        rust_panic_with_hook(&mut PanicPayload::new(msg), None, loc, true)\n     });\n \n     struct PanicPayload<A> {\n@@ -647,6 +652,7 @@ fn rust_panic_with_hook(\n     payload: &mut dyn BoxMeUp,\n     message: Option<&fmt::Arguments<'_>>,\n     location: &Location<'_>,\n+    can_unwind: bool,\n ) -> ! {\n     let (must_abort, panics) = panic_count::increase();\n \n@@ -663,14 +669,14 @@ fn rust_panic_with_hook(\n         } else {\n             // Unfortunately, this does not print a backtrace, because creating\n             // a `Backtrace` will allocate, which we must to avoid here.\n-            let panicinfo = PanicInfo::internal_constructor(message, location);\n+            let panicinfo = PanicInfo::internal_constructor(message, location, can_unwind);\n             rtprintpanic!(\"{}\\npanicked after panic::always_abort(), aborting.\\n\", panicinfo);\n         }\n-        intrinsics::abort()\n+        crate::sys::abort_internal();\n     }\n \n     unsafe {\n-        let mut info = PanicInfo::internal_constructor(message, location);\n+        let mut info = PanicInfo::internal_constructor(message, location, can_unwind);\n         let _guard = HOOK_LOCK.read();\n         match HOOK {\n             // Some platforms (like wasm) know that printing to stderr won't ever actually\n@@ -691,13 +697,13 @@ fn rust_panic_with_hook(\n         };\n     }\n \n-    if panics > 1 {\n+    if panics > 1 || !can_unwind {\n         // If a thread panics while it's already unwinding then we\n         // have limited options. Currently our preference is to\n         // just abort. In the future we may consider resuming\n         // unwinding or otherwise exiting the thread cleanly.\n         rtprintpanic!(\"thread panicked while panicking. aborting.\\n\");\n-        intrinsics::abort()\n+        crate::sys::abort_internal();\n     }\n \n     rust_panic(payload)"}, {"sha": "560c62155d9312b91de398ff19be6e06cf5539fe", "filename": "library/std/src/sys/unix/process/process_unix/tests.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix%2Ftests.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -53,5 +53,10 @@ fn test_command_fork_no_unwind() {\n     let status = got.expect(\"panic unexpectedly propagated\");\n     dbg!(status);\n     let signal = status.signal().expect(\"expected child process to die of signal\");\n-    assert!(signal == libc::SIGABRT || signal == libc::SIGILL || signal == libc::SIGTRAP);\n+    assert!(\n+        signal == libc::SIGABRT\n+            || signal == libc::SIGILL\n+            || signal == libc::SIGTRAP\n+            || signal == libc::SIGSEGV\n+    );\n }"}, {"sha": "f238741e599f68242616ecbaf5150baf0d13a842", "filename": "src/test/codegen/unwind-and-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-and-panic-abort.rs?ref=9d7c8edd6c5fcfc7d9a8d39a01ea2a93d9610100", "patch": "@@ -9,7 +9,7 @@ extern \"C-unwind\" {\n \n // CHECK: Function Attrs:{{.*}}nounwind\n // CHECK-NEXT: define{{.*}}void @foo\n-// CHECK: call void @llvm.trap()\n+// CHECK: call void @_ZN4core9panicking15panic_no_unwind\n #[no_mangle]\n pub unsafe extern \"C\" fn foo() {\n     bar();"}]}