{"sha": "d79bbbc4ef20a11680a004b600a90281e4c5e04a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OWJiYmM0ZWYyMGExMTY4MGEwMDRiNjAwYTkwMjgxZTRjNWUwNGE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-06-05T12:21:32Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-22T13:33:59Z"}, "message": "Revise placement-in expansion to use `push/pop_unsafe` and `move_val_init`.", "tree": {"sha": "418400971beabf79671f77da5094a7a7e4bbc208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/418400971beabf79671f77da5094a7a7e4bbc208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d79bbbc4ef20a11680a004b600a90281e4c5e04a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d79bbbc4ef20a11680a004b600a90281e4c5e04a", "html_url": "https://github.com/rust-lang/rust/commit/d79bbbc4ef20a11680a004b600a90281e4c5e04a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d79bbbc4ef20a11680a004b600a90281e4c5e04a/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "866250c6d4ca63fb56b7d58e55f8949337663998", "url": "https://api.github.com/repos/rust-lang/rust/commits/866250c6d4ca63fb56b7d58e55f8949337663998", "html_url": "https://github.com/rust-lang/rust/commit/866250c6d4ca63fb56b7d58e55f8949337663998"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "208446ed0464ba8b5d5950e108bc9062f0be30fb", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d79bbbc4ef20a11680a004b600a90281e4c5e04a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d79bbbc4ef20a11680a004b600a90281e4c5e04a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d79bbbc4ef20a11680a004b600a90281e4c5e04a", "patch": "@@ -56,7 +56,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n         });\n     }\n \n-    e.and_then(|ast::Expr {id, node, span}| match node {\n+    return e.and_then(|ast::Expr {id, node, span}| match node {\n \n         // expr_mac should really be expr_ext or something; it's the\n         // entry-point for all syntax extensions.\n@@ -88,12 +88,11 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             //\n             // let p = PLACE;\n             // let mut place = Placer::make_place(p);\n-            // let raw_place = InPlace::pointer(&mut place);\n-            // let value = EXPR;\n-            // unsafe {\n-            //     std::ptr::write(raw_place, value);\n+            // let raw_place = Place::pointer(&mut place);\n+            // push_unsafe!({\n+            //     std::intrinsics::move_val_init(raw_place, pop_unsafe!( EXPR ));\n             //     InPlace::finalize(place)\n-            // }\n+            // })\n \n             let value_span = value_expr.span;\n             let placer_span = placer.span;\n@@ -103,17 +102,15 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n \n             let placer_ident = token::gensym_ident(\"placer\");\n             let agent_ident = token::gensym_ident(\"place\");\n-            let value_ident = token::gensym_ident(\"value\");\n             let p_ptr_ident = token::gensym_ident(\"p_ptr\");\n \n             let placer = fld.cx.expr_ident(span, placer_ident);\n             let agent = fld.cx.expr_ident(span, agent_ident);\n-            let value = fld.cx.expr_ident(span, value_ident);\n             let p_ptr = fld.cx.expr_ident(span, p_ptr_ident);\n \n             let make_place = [\"ops\", \"Placer\", \"make_place\"];\n             let place_pointer = [\"ops\", \"Place\", \"pointer\"];\n-            let ptr_write = [\"ptr\", \"write\"];\n+            let move_val_init = [\"intrinsics\", \"move_val_init\"];\n             let inplace_finalize = [\"ops\", \"InPlace\", \"finalize\"];\n \n             let make_call = |fld: &mut MacroExpander, p, args| {\n@@ -145,26 +142,23 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                 stmt_let(fld, p_ptr_ident, call)\n             };\n \n-            // let value = <value_expr>;\n-            let s4 = fld.cx.stmt_let(value_span, false, value_ident, value_expr);\n+            // pop_unsafe!(EXPR));\n+            let pop_unsafe_expr = pop_unsafe_expr(fld.cx, value_expr, value_span);\n \n-            // unsafe { ptr::write(p_ptr, value); InPlace::finalize(place) }\n+            // push_unsafe!({\n+            //     ptr::write(p_ptr, pop_unsafe!(<value_expr>));\n+            //     InPlace::finalize(place)\n+            // })\n             let expr = {\n-                let call_ptr_write = StmtSemi(make_call(\n-                    fld, &ptr_write, vec![p_ptr, value]), ast::DUMMY_NODE_ID);\n-                let call_ptr_write = codemap::respan(value_span, call_ptr_write);\n+                let call_move_val_init = StmtSemi(make_call(\n+                    fld, &move_val_init, vec![p_ptr, pop_unsafe_expr]), ast::DUMMY_NODE_ID);\n+                let call_move_val_init = codemap::respan(value_span, call_move_val_init);\n \n                 let call = make_call(fld, &inplace_finalize, vec![agent]);\n-                Some(fld.cx.expr_block(P(ast::Block {\n-                    stmts: vec![P(call_ptr_write)],\n-                    expr: Some(call),\n-                    id: ast::DUMMY_NODE_ID,\n-                    rules: ast::UnsafeBlock(ast::CompilerGenerated),\n-                    span: span,\n-                })))\n+                Some(push_unsafe_expr(fld.cx, vec![P(call_move_val_init)], call, span))\n             };\n \n-            let block = fld.cx.block_all(span, vec![s1, s2, s3, s4], expr);\n+            let block = fld.cx.block_all(span, vec![s1, s2, s3], expr);\n             fld.cx.expr_block(block)\n         }\n \n@@ -474,7 +468,26 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                 span: span\n             }, fld))\n         }\n-    })\n+    });\n+\n+    fn push_unsafe_expr(cx: &mut ExtCtxt, stmts: Vec<P<ast::Stmt>>,\n+                        expr: P<ast::Expr>, span: Span)\n+                        -> P<ast::Expr> {\n+        let rules = ast::PushUnsafeBlock(ast::CompilerGenerated);\n+        cx.expr_block(P(ast::Block {\n+            rules: rules, span: span, id: ast::DUMMY_NODE_ID,\n+            stmts: stmts, expr: Some(expr),\n+        }))\n+    }\n+\n+    fn pop_unsafe_expr(cx: &mut ExtCtxt, expr: P<ast::Expr>, span: Span)\n+                       -> P<ast::Expr> {\n+        let rules = ast::PopUnsafeBlock(ast::CompilerGenerated);\n+        cx.expr_block(P(ast::Block {\n+            rules: rules, span: span, id: ast::DUMMY_NODE_ID,\n+            stmts: vec![], expr: Some(expr),\n+        }))\n+    }\n }\n \n /// Expand a (not-ident-style) macro invocation. Returns the result"}]}