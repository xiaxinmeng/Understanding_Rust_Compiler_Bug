{"sha": "170112cd1503aa6c220ba108441ee1d384beb9bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MDExMmNkMTUwM2FhNmMyMjBiYTEwODQ0MWVlMWQzODRiZWI5YmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T06:13:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-24T06:13:42Z"}, "message": "Rollup merge of #70289 - nnethercote:refactor-codegen, r=eddyb\n\nRefactor `codegen`\n\n`codegen` in `src/librustc_codegen_llvm/back/write.rs` is long and has complex control flow. These commits refactor it and make it easier to understand.", "tree": {"sha": "0ec28589d74b37976a4d11ffce40912d4c490270", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ec28589d74b37976a4d11ffce40912d4c490270"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/170112cd1503aa6c220ba108441ee1d384beb9bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeaUWCRBK7hj4Ov3rIwAAdHIIAB9M6Ic4IBTxeScoR7oNlMqo\njWE6FckyaqwhVnx470VrbWXSUwOruj2o3ZyTkDU9nef2KI+W9yRt44suyWyzsu6X\nl8wkerYvbi9xqoHTUtPCoKVu7vB01icuXXiBfvs9IdJcCgx51SzODDc3YcNJaLdw\n+efe2ohBeVIdecxCJcTHDnTeocgRC8cig4ujorPUVuBRR1PlSd+80o372GUJmOWw\ndKz1G8SeuEUacFb6bE/RvOLdmsGvJBofBiPmrzz+MxJ7qMeWk3Ip/T4/tPL/Xhj+\nT79P5BHSZB08qvZ2IUPJxiQyYWYLg4rZji/dg42zpG6POPJWZP2w6Q5l+aisJCE=\n=waiv\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ec28589d74b37976a4d11ffce40912d4c490270\nparent d30905810139c59459449cc95c7e49660bca5257\nparent ca0f9975199b5fbe177dc61d493d411f67c66880\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585030422 +0100\ncommitter GitHub <noreply@github.com> 1585030422 +0100\n\nRollup merge of #70289 - nnethercote:refactor-codegen, r=eddyb\n\nRefactor `codegen`\n\n`codegen` in `src/librustc_codegen_llvm/back/write.rs` is long and has complex control flow. These commits refactor it and make it easier to understand.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/170112cd1503aa6c220ba108441ee1d384beb9bc", "html_url": "https://github.com/rust-lang/rust/commit/170112cd1503aa6c220ba108441ee1d384beb9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/170112cd1503aa6c220ba108441ee1d384beb9bc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30905810139c59459449cc95c7e49660bca5257", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30905810139c59459449cc95c7e49660bca5257", "html_url": "https://github.com/rust-lang/rust/commit/d30905810139c59459449cc95c7e49660bca5257"}, {"sha": "ca0f9975199b5fbe177dc61d493d411f67c66880", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0f9975199b5fbe177dc61d493d411f67c66880", "html_url": "https://github.com/rust-lang/rust/commit/ca0f9975199b5fbe177dc61d493d411f67c66880"}], "stats": {"total": 213, "additions": 104, "deletions": 109}, "files": [{"sha": "5759eb2991a817d02781e84c1992aa4d21b2abdc", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 82, "deletions": 92, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/170112cd1503aa6c220ba108441ee1d384beb9bc/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170112cd1503aa6c220ba108441ee1d384beb9bc/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=170112cd1503aa6c220ba108441ee1d384beb9bc", "patch": "@@ -16,7 +16,7 @@ use crate::ModuleLlvm;\n use log::debug;\n use rustc::bug;\n use rustc::ty::TyCtxt;\n-use rustc_codegen_ssa::back::write::{run_assembler, CodegenContext, ModuleConfig};\n+use rustc_codegen_ssa::back::write::{run_assembler, CodegenContext, EmbedBitcode, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{CompiledModule, ModuleCodegen, RLIB_BYTECODE_EXTENSION};\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -634,30 +634,24 @@ pub(crate) unsafe fn codegen(\n             f(cpm)\n         }\n \n-        // If we don't have the integrated assembler, then we need to emit asm\n-        // from LLVM and use `gcc` to create the object file.\n-        let asm_to_obj = config.emit_obj && config.no_integrated_as;\n-\n-        // Change what we write and cleanup based on whether obj files are\n-        // just llvm bitcode. In that case write bitcode, and possibly\n-        // delete the bitcode if it wasn't requested. Don't generate the\n-        // machine code, instead copy the .o file from the .bc\n-        let write_bc = config.emit_bc || config.obj_is_bitcode;\n-        let rm_bc = !config.emit_bc && config.obj_is_bitcode;\n-        let write_obj = config.emit_obj && !config.obj_is_bitcode && !asm_to_obj;\n-        let copy_bc_to_obj = config.emit_obj && config.obj_is_bitcode;\n+        // Two things to note:\n+        // - If object files are just LLVM bitcode we write bitcode, copy it to\n+        //   the .o file, and delete the bitcode if it wasn't otherwise\n+        //   requested.\n+        // - If we don't have the integrated assembler then we need to emit\n+        //   asm from LLVM and use `gcc` to create the object file.\n \n         let bc_out = cgcx.output_filenames.temp_path(OutputType::Bitcode, module_name);\n         let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, module_name);\n \n-        if write_bc || config.emit_bc_compressed || config.embed_bitcode {\n+        if config.bitcode_needed() {\n             let _timer = cgcx\n                 .prof\n                 .generic_activity_with_arg(\"LLVM_module_codegen_make_bitcode\", &module.name[..]);\n             let thin = ThinBuffer::new(llmod);\n             let data = thin.data();\n \n-            if write_bc {\n+            if config.emit_bc || config.obj_is_bitcode {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_emit_bitcode\",\n                     &module.name[..],\n@@ -668,7 +662,7 @@ pub(crate) unsafe fn codegen(\n                 }\n             }\n \n-            if config.embed_bitcode {\n+            if config.embed_bitcode == EmbedBitcode::Full {\n                 let _timer = cgcx.prof.generic_activity_with_arg(\n                     \"LLVM_module_codegen_embed_bitcode\",\n                     &module.name[..],\n@@ -688,81 +682,75 @@ pub(crate) unsafe fn codegen(\n                     diag_handler.err(&msg);\n                 }\n             }\n-        } else if config.embed_bitcode_marker {\n+        } else if config.embed_bitcode == EmbedBitcode::Marker {\n             embed_bitcode(cgcx, llcx, llmod, None);\n         }\n \n-        {\n-            if config.emit_ir {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_ir\", &module.name[..]);\n-                let out = cgcx.output_filenames.temp_path(OutputType::LlvmAssembly, module_name);\n-                let out_c = path_to_c_string(&out);\n-\n-                extern \"C\" fn demangle_callback(\n-                    input_ptr: *const c_char,\n-                    input_len: size_t,\n-                    output_ptr: *mut c_char,\n-                    output_len: size_t,\n-                ) -> size_t {\n-                    let input = unsafe {\n-                        slice::from_raw_parts(input_ptr as *const u8, input_len as usize)\n-                    };\n-\n-                    let input = match str::from_utf8(input) {\n-                        Ok(s) => s,\n-                        Err(_) => return 0,\n-                    };\n-\n-                    let output = unsafe {\n-                        slice::from_raw_parts_mut(output_ptr as *mut u8, output_len as usize)\n-                    };\n-                    let mut cursor = io::Cursor::new(output);\n-\n-                    let demangled = match rustc_demangle::try_demangle(input) {\n-                        Ok(d) => d,\n-                        Err(_) => return 0,\n-                    };\n-\n-                    if write!(cursor, \"{:#}\", demangled).is_err() {\n-                        // Possible only if provided buffer is not big enough\n-                        return 0;\n-                    }\n-\n-                    cursor.position() as size_t\n+        if config.emit_ir {\n+            let _timer = cgcx\n+                .prof\n+                .generic_activity_with_arg(\"LLVM_module_codegen_emit_ir\", &module.name[..]);\n+            let out = cgcx.output_filenames.temp_path(OutputType::LlvmAssembly, module_name);\n+            let out_c = path_to_c_string(&out);\n+\n+            extern \"C\" fn demangle_callback(\n+                input_ptr: *const c_char,\n+                input_len: size_t,\n+                output_ptr: *mut c_char,\n+                output_len: size_t,\n+            ) -> size_t {\n+                let input =\n+                    unsafe { slice::from_raw_parts(input_ptr as *const u8, input_len as usize) };\n+\n+                let input = match str::from_utf8(input) {\n+                    Ok(s) => s,\n+                    Err(_) => return 0,\n+                };\n+\n+                let output = unsafe {\n+                    slice::from_raw_parts_mut(output_ptr as *mut u8, output_len as usize)\n+                };\n+                let mut cursor = io::Cursor::new(output);\n+\n+                let demangled = match rustc_demangle::try_demangle(input) {\n+                    Ok(d) => d,\n+                    Err(_) => return 0,\n+                };\n+\n+                if write!(cursor, \"{:#}\", demangled).is_err() {\n+                    // Possible only if provided buffer is not big enough\n+                    return 0;\n                 }\n \n-                let result = llvm::LLVMRustPrintModule(llmod, out_c.as_ptr(), demangle_callback);\n-                result.into_result().map_err(|()| {\n-                    let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n-                    llvm_err(diag_handler, &msg)\n-                })?;\n+                cursor.position() as size_t\n             }\n \n-            if config.emit_asm || asm_to_obj {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n-                let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n+            let result = llvm::LLVMRustPrintModule(llmod, out_c.as_ptr(), demangle_callback);\n+            result.into_result().map_err(|()| {\n+                let msg = format!(\"failed to write LLVM IR to {}\", out.display());\n+                llvm_err(diag_handler, &msg)\n+            })?;\n+        }\n \n-                // We can't use the same module for asm and binary output, because that triggers\n-                // various errors like invalid IR or broken binaries, so we might have to clone the\n-                // module to produce the asm output\n-                let llmod = if config.emit_obj { llvm::LLVMCloneModule(llmod) } else { llmod };\n-                with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                    write_output_file(\n-                        diag_handler,\n-                        tm,\n-                        cpm,\n-                        llmod,\n-                        &path,\n-                        llvm::FileType::AssemblyFile,\n-                    )\n-                })?;\n-            }\n+        let config_emit_normal_obj = config.emit_obj && !config.obj_is_bitcode;\n \n-            if write_obj {\n+        if config.emit_asm || (config_emit_normal_obj && config.no_integrated_as) {\n+            let _timer = cgcx\n+                .prof\n+                .generic_activity_with_arg(\"LLVM_module_codegen_emit_asm\", &module.name[..]);\n+            let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n+\n+            // We can't use the same module for asm and binary output, because that triggers\n+            // various errors like invalid IR or broken binaries, so we might have to clone the\n+            // module to produce the asm output\n+            let llmod = if config.emit_obj { llvm::LLVMCloneModule(llmod) } else { llmod };\n+            with_codegen(tm, llmod, config.no_builtins, |cpm| {\n+                write_output_file(diag_handler, tm, cpm, llmod, &path, llvm::FileType::AssemblyFile)\n+            })?;\n+        }\n+\n+        if config_emit_normal_obj {\n+            if !config.no_integrated_as {\n                 let _timer = cgcx\n                     .prof\n                     .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n@@ -776,7 +764,7 @@ pub(crate) unsafe fn codegen(\n                         llvm::FileType::ObjectFile,\n                     )\n                 })?;\n-            } else if asm_to_obj {\n+            } else {\n                 let _timer = cgcx\n                     .prof\n                     .generic_activity_with_arg(\"LLVM_module_codegen_asm_to_obj\", &module.name[..]);\n@@ -789,17 +777,19 @@ pub(crate) unsafe fn codegen(\n             }\n         }\n \n-        if copy_bc_to_obj {\n-            debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n-            if let Err(e) = link_or_copy(&bc_out, &obj_out) {\n-                diag_handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n+        if config.obj_is_bitcode {\n+            if config.emit_obj {\n+                debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n+                if let Err(e) = link_or_copy(&bc_out, &obj_out) {\n+                    diag_handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n+                }\n             }\n-        }\n \n-        if rm_bc {\n-            debug!(\"removing_bitcode {:?}\", bc_out);\n-            if let Err(e) = fs::remove_file(&bc_out) {\n-                diag_handler.err(&format!(\"failed to remove bitcode: {}\", e));\n+            if !config.emit_bc {\n+                debug!(\"removing_bitcode {:?}\", bc_out);\n+                if let Err(e) = fs::remove_file(&bc_out) {\n+                    diag_handler.err(&format!(\"failed to remove bitcode: {}\", e));\n+                }\n             }\n         }\n "}, {"sha": "a4b5acdcd18a2123a2bfbdb1cdf4cff3cae5898d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/170112cd1503aa6c220ba108441ee1d384beb9bc/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/170112cd1503aa6c220ba108441ee1d384beb9bc/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=170112cd1503aa6c220ba108441ee1d384beb9bc", "patch": "@@ -51,6 +51,14 @@ use std::thread;\n \n const PRE_LTO_BC_EXT: &str = \"pre-lto.bc\";\n \n+/// The kind of bitcode to embed in object files.\n+#[derive(PartialEq)]\n+pub enum EmbedBitcode {\n+    None,\n+    Marker,\n+    Full,\n+}\n+\n /// Module-specific configuration for `optimize_and_codegen`.\n pub struct ModuleConfig {\n     /// Names of additional optimization passes to run.\n@@ -74,7 +82,6 @@ pub struct ModuleConfig {\n     pub emit_no_opt_bc: bool,\n     pub emit_bc: bool,\n     pub emit_bc_compressed: bool,\n-    pub emit_lto_bc: bool,\n     pub emit_ir: bool,\n     pub emit_asm: bool,\n     pub emit_obj: bool,\n@@ -94,8 +101,7 @@ pub struct ModuleConfig {\n     // emscripten's ecc compiler, when used as the linker.\n     pub obj_is_bitcode: bool,\n     pub no_integrated_as: bool,\n-    pub embed_bitcode: bool,\n-    pub embed_bitcode_marker: bool,\n+    pub embed_bitcode: EmbedBitcode,\n }\n \n impl ModuleConfig {\n@@ -116,13 +122,11 @@ impl ModuleConfig {\n             emit_pre_lto_bc: false,\n             emit_bc: false,\n             emit_bc_compressed: false,\n-            emit_lto_bc: false,\n             emit_ir: false,\n             emit_asm: false,\n             emit_obj: false,\n             obj_is_bitcode: false,\n-            embed_bitcode: false,\n-            embed_bitcode_marker: false,\n+            embed_bitcode: EmbedBitcode::None,\n             no_integrated_as: false,\n \n             verify_llvm_ir: false,\n@@ -145,16 +149,15 @@ impl ModuleConfig {\n         self.new_llvm_pass_manager = sess.opts.debugging_opts.new_llvm_pass_manager;\n         self.obj_is_bitcode =\n             sess.target.target.options.obj_is_bitcode || sess.opts.cg.linker_plugin_lto.enabled();\n-        let embed_bitcode =\n-            sess.target.target.options.embed_bitcode || sess.opts.debugging_opts.embed_bitcode;\n-        if embed_bitcode {\n-            match sess.opts.optimize {\n-                config::OptLevel::No | config::OptLevel::Less => {\n-                    self.embed_bitcode_marker = embed_bitcode;\n+        self.embed_bitcode =\n+            if sess.target.target.options.embed_bitcode || sess.opts.debugging_opts.embed_bitcode {\n+                match sess.opts.optimize {\n+                    config::OptLevel::No | config::OptLevel::Less => EmbedBitcode::Marker,\n+                    _ => EmbedBitcode::Full,\n                 }\n-                _ => self.embed_bitcode = embed_bitcode,\n-            }\n-        }\n+            } else {\n+                EmbedBitcode::None\n+            };\n \n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n@@ -190,7 +193,10 @@ impl ModuleConfig {\n     }\n \n     pub fn bitcode_needed(&self) -> bool {\n-        self.emit_bc || self.obj_is_bitcode || self.emit_bc_compressed || self.embed_bitcode\n+        self.emit_bc\n+            || self.obj_is_bitcode\n+            || self.emit_bc_compressed\n+            || self.embed_bitcode == EmbedBitcode::Full\n     }\n }\n \n@@ -379,7 +385,6 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         modules_config.emit_no_opt_bc = true;\n         modules_config.emit_pre_lto_bc = true;\n         modules_config.emit_bc = true;\n-        modules_config.emit_lto_bc = true;\n         metadata_config.emit_bc = true;\n         allocator_config.emit_bc = true;\n     }"}]}