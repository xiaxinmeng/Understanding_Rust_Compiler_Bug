{"sha": "58f076cf3824e9ad6cb79cd2f0a46ded8cfb8e6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZjA3NmNmMzgyNGU5YWQ2Y2I3OWNkMmYwYTQ2ZGVkOGNmYjhlNmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-02T18:50:14Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-02T18:50:30Z"}, "message": "Print pass mode for locals in clif", "tree": {"sha": "ad1e73435e2e827188ed00838358183e71438d9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad1e73435e2e827188ed00838358183e71438d9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58f076cf3824e9ad6cb79cd2f0a46ded8cfb8e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58f076cf3824e9ad6cb79cd2f0a46ded8cfb8e6d", "html_url": "https://github.com/rust-lang/rust/commit/58f076cf3824e9ad6cb79cd2f0a46ded8cfb8e6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58f076cf3824e9ad6cb79cd2f0a46ded8cfb8e6d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b9f98e8df00481f2b9e4f773ed5195d21045d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9f98e8df00481f2b9e4f773ed5195d21045d75", "html_url": "https://github.com/rust-lang/rust/commit/3b9f98e8df00481f2b9e4f773ed5195d21045d75"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "13dddebd02e45d0ef2dbe05775e8a400cb8d8c91", "filename": "src/abi.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58f076cf3824e9ad6cb79cd2f0a46ded8cfb8e6d/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f076cf3824e9ad6cb79cd2f0a46ded8cfb8e6d/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=58f076cf3824e9ad6cb79cd2f0a46ded8cfb8e6d", "patch": "@@ -334,6 +334,12 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n     fx.top_nop = Some(fx.bcx.ins().nop());\n     fx.add_global_comment(format!(\"ssa {:?}\", ssa_analyzed));\n \n+    for local in fx.mir.args_iter() {\n+        let arg_ty = fx.monomorphize(&fx.mir.local_decls[local].ty);\n+        let pass_mode = get_pass_mode(fx.tcx, fx.self_sig().abi, arg_ty, false);\n+        fx.add_global_comment(format!(\"pass {:?}: {:?} {:?}\", local, arg_ty, pass_mode));\n+    }\n+\n     match output_pass_mode {\n         PassMode::NoPass => {\n             let null = fx.bcx.ins().iconst(fx.module.pointer_type(), 0);"}]}