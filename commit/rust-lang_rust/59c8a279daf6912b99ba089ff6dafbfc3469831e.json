{"sha": "59c8a279daf6912b99ba089ff6dafbfc3469831e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YzhhMjc5ZGFmNjkxMmI5OWJhMDg5ZmY2ZGFmYmZjMzQ2OTgzMWU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-26T15:11:10Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-29T16:53:22Z"}, "message": "Replace push loops with collect() and extend() where possible", "tree": {"sha": "ab821f37fca36aa9730bed95c0cad5fbf3e9eaa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab821f37fca36aa9730bed95c0cad5fbf3e9eaa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59c8a279daf6912b99ba089ff6dafbfc3469831e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59c8a279daf6912b99ba089ff6dafbfc3469831e", "html_url": "https://github.com/rust-lang/rust/commit/59c8a279daf6912b99ba089ff6dafbfc3469831e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59c8a279daf6912b99ba089ff6dafbfc3469831e/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "html_url": "https://github.com/rust-lang/rust/commit/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9"}], "stats": {"total": 251, "additions": 101, "deletions": 150}, "files": [{"sha": "be03796921af865b7c2c3d0a16b75d6d6272c888", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -92,10 +92,7 @@ pub fn push_exe_path(mut buf: PathBuf, components: &[&str]) -> PathBuf {\n         file.push_str(\".exe\");\n     }\n \n-    for c in components {\n-        buf.push(c);\n-    }\n-\n+    buf.extend(components);\n     buf.push(file);\n \n     buf"}, {"sha": "98cfa094c169a2c250311df96f35919246c1096b", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -567,12 +567,12 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     fn add_returning_edge(&mut self,\n                           _from_expr: &hir::Expr,\n                           from_index: CFGIndex) {\n-        let mut data = CFGEdgeData {\n-            exiting_scopes: vec![],\n+        let data = CFGEdgeData {\n+            exiting_scopes: self.loop_scopes.iter()\n+                                            .rev()\n+                                            .map(|&LoopScope { loop_id: id, .. }| id)\n+                                            .collect()\n         };\n-        for &LoopScope { loop_id: id, .. } in self.loop_scopes.iter().rev() {\n-            data.exiting_scopes.push(id);\n-        }\n         self.graph.add_edge(from_index, self.fn_exit, data);\n     }\n "}, {"sha": "c74783f5e4db5ce3cbf943ab9c3b526b15db920f", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -151,13 +151,12 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         debug!(\"process_registered_region_obligations()\");\n \n         // pull out the region obligations with the given `body_id` (leaving the rest)\n-        let mut my_region_obligations = Vec::with_capacity(self.region_obligations.borrow().len());\n-        {\n+        let my_region_obligations = {\n             let mut r_o = self.region_obligations.borrow_mut();\n-            for (_, obligation) in r_o.drain_filter(|(ro_body_id, _)| *ro_body_id == body_id) {\n-                my_region_obligations.push(obligation);\n-            }\n-        }\n+            let my_r_o = r_o.drain_filter(|(ro_body_id, _)| *ro_body_id == body_id)\n+                            .map(|(_, obligation)| obligation).collect::<Vec<_>>();\n+            my_r_o\n+        };\n \n         let outlives = &mut TypeOutlives::new(\n             self,"}, {"sha": "19c82d7d27c79a294a29e48751cafa579d44e49f", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -367,9 +367,7 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n         // We need only trait impls here, not inherent impls, and only non-exported ones\n         if let hir::ItemKind::Impl(.., Some(ref trait_ref), _, ref impl_item_refs) = item.node {\n             if !self.access_levels.is_reachable(item.id) {\n-                for impl_item_ref in impl_item_refs {\n-                    self.worklist.push(impl_item_ref.id.node_id);\n-                }\n+                self.worklist.extend(impl_item_refs.iter().map(|r| r.id.node_id));\n \n                 let trait_def_id = match trait_ref.path.def {\n                     Def::Trait(def_id) => def_id,\n@@ -426,9 +424,7 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     //         If other crates link to us, they're going to expect to be able to\n     //         use the lang items, so we need to be sure to mark them as\n     //         exported.\n-    for (id, _) in &access_levels.map {\n-        reachable_context.worklist.push(*id);\n-    }\n+    reachable_context.worklist.extend(access_levels.map.iter().map(|(id, _)| *id));\n     for item in tcx.lang_items().items().iter() {\n         if let Some(did) = *item {\n             if let Some(node_id) = tcx.hir.as_local_node_id(did) {"}, {"sha": "86fd825850fc54444fccd80957f2b87cdc9ad9cf", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -64,9 +64,7 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n             let data = &self.mir[idx];\n \n             if let Some(ref term) = data.terminator {\n-                for &succ in term.successors() {\n-                    self.worklist.push(succ);\n-                }\n+                self.worklist.extend(term.successors());\n             }\n \n             return Some((idx, data));"}, {"sha": "e0532a3320bc4294673744eb8ec007d90eee6eea", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -899,9 +899,7 @@ macro_rules! options {\n                       -> bool {\n             match v {\n                 Some(s) => {\n-                    for s in s.split_whitespace() {\n-                        slot.push(s.to_string());\n-                    }\n+                    slot.extend(s.split_whitespace().map(|s| s.to_string()));\n                     true\n                 },\n                 None => false,"}, {"sha": "1ed9ae4392fa7616e611deaefe8caff6b0f3d8ba", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -438,9 +438,9 @@ fn to_pretty_impl_header(tcx: TyCtxt, impl_def_id: DefId) -> Option<String> {\n         }\n         pretty_predicates.push(p.to_string());\n     }\n-    for ty in types_without_default_bounds {\n-        pretty_predicates.push(format!(\"{}: ?Sized\", ty));\n-    }\n+    pretty_predicates.extend(\n+        types_without_default_bounds.iter().map(|ty| format!(\"{}: ?Sized\", ty))\n+    );\n     if !pretty_predicates.is_empty() {\n         write!(w, \"\\n  where {}\", pretty_predicates.join(\", \")).unwrap();\n     }"}, {"sha": "2c3a143646c24c57dabe9336f262bcee4aef8be4", "filename": "src/librustc_codegen_llvm/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -152,9 +152,7 @@ fn path_relative_from(path: &Path, base: &Path) -> Option<PathBuf> {\n                 (Some(_), Some(b)) if b == Component::ParentDir => return None,\n                 (Some(a), Some(_)) => {\n                     comps.push(Component::ParentDir);\n-                    for _ in itb {\n-                        comps.push(Component::ParentDir);\n-                    }\n+                    comps.extend(itb.map(|_| Component::ParentDir));\n                     comps.push(a);\n                     comps.extend(ita.by_ref());\n                     break;"}, {"sha": "2f4dd5a7ce5bb0c3887fd46671943db43a995c05", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -39,6 +39,7 @@ use rustc::util::common::path2cstr;\n use libc::{c_uint, c_longlong};\n use std::ffi::CString;\n use std::fmt::Write;\n+use std::iter;\n use std::ptr;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n@@ -364,18 +365,16 @@ fn subroutine_type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         &signature,\n     );\n \n-    let mut signature_metadata: Vec<DIType> = Vec::with_capacity(signature.inputs().len() + 1);\n-\n-    // return type\n-    signature_metadata.push(match signature.output().sty {\n-        ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n-        _ => type_metadata(cx, signature.output(), span)\n-    });\n-\n-    // regular arguments\n-    for &argument_type in signature.inputs() {\n-        signature_metadata.push(type_metadata(cx, argument_type, span));\n-    }\n+    let signature_metadata: Vec<DIType> = iter::once(\n+        // return type\n+        match signature.output().sty {\n+            ty::TyTuple(ref tys) if tys.is_empty() => ptr::null_mut(),\n+            _ => type_metadata(cx, signature.output(), span)\n+        }\n+    ).chain(\n+        // regular arguments\n+        signature.inputs().iter().map(|argument_type| type_metadata(cx, argument_type, span))\n+    ).collect();\n \n     return_if_metadata_created_in_meantime!(cx, unique_type_id);\n "}, {"sha": "9671db75baffeeb5b4c5db3c38dc57c24e1f1ed4", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -352,9 +352,10 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n         if sig.abi == Abi::RustCall && !sig.inputs().is_empty() {\n             if let ty::TyTuple(args) = sig.inputs()[sig.inputs().len() - 1].sty {\n-                for &argument_type in args {\n-                    signature.push(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP));\n-                }\n+                signature.extend(\n+                    args.iter().map(|argument_type|\n+                        type_metadata(cx, argument_type, syntax_pos::DUMMY_SP))\n+                );\n             }\n         }\n "}, {"sha": "e25da0632c064af2a2abfc6bf1d10b3541b21869", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -1588,10 +1588,7 @@ pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<dyn Any + Send>>\n /// debugging, since some ICEs only happens with non-default compiler flags\n /// (and the users don't always report them).\n fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n-    let mut args = Vec::new();\n-    for arg in env::args_os() {\n-        args.push(arg.to_string_lossy().to_string());\n-    }\n+    let args = env::args_os().map(|arg| arg.to_string_lossy().to_string()).collect::<Vec<_>>();\n \n     // Avoid printing help because of empty args. This can suggest the compiler\n     // itself is not the program root (consider RLS)."}, {"sha": "3d4f4b029e543736d6e7370ff6cbf4cf46e9b454", "filename": "src/librustc_driver/profile/trace.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fprofile%2Ftrace.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -204,10 +204,9 @@ pub fn write_counts(count_file: &mut File, counts: &mut HashMap<String,QueryMetr\n     use rustc::util::common::duration_to_secs_str;\n     use std::cmp::Reverse;\n \n-    let mut data = vec![];\n-    for (ref cons, ref qm) in counts.iter() {\n-        data.push((cons.clone(), qm.count.clone(), qm.dur_total.clone(), qm.dur_self.clone()));\n-    };\n+    let mut data = counts.iter().map(|(ref cons, ref qm)|\n+        (cons.clone(), qm.count.clone(), qm.dur_total.clone(), qm.dur_self.clone())\n+    ).collect::<Vec<_>>();\n     data.sort_by_key(|k| Reverse(k.3));\n     for (cons, count, dur_total, dur_self) in data {\n         write!(count_file, \"{}, {}, {}, {}\\n\","}, {"sha": "91f9b4ac03b86efe422e25689cb84742d8653a16", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -275,12 +275,8 @@ pub fn get_param(llfn: ValueRef, index: c_uint) -> ValueRef {\n fn get_params(llfn: ValueRef) -> Vec<ValueRef> {\n     unsafe {\n         let num_params = LLVMCountParams(llfn);\n-        let mut params = Vec::with_capacity(num_params as usize);\n-        for idx in 0..num_params {\n-            params.push(LLVMGetParam(llfn, idx));\n-        }\n \n-        params\n+        (0..num_params).map(|idx| LLVMGetParam(llfn, idx)).collect()\n     }\n }\n "}, {"sha": "46fab544aafe98bf3430f3babc0e41ea463e0a29", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -406,10 +406,9 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                     local_map.push(idx);\n                 }\n \n-                for p in callee_mir.promoted.iter().cloned() {\n-                    let idx = caller_mir.promoted.push(p);\n-                    promoted_map.push(idx);\n-                }\n+                promoted_map.extend(\n+                    callee_mir.promoted.iter().cloned().map(|p| caller_mir.promoted.push(p))\n+                );\n \n                 // If the call is something like `a[*i] = f(i)`, where\n                 // `i : &mut usize`, then just duplicating the `a[*i]`"}, {"sha": "b6f0ff291d48eb087928afd37b0b178c2065f01d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -3831,9 +3831,9 @@ impl<'a> Resolver<'a> {\n             }\n             // Add primitive types to the mix\n             if filter_fn(Def::PrimTy(TyBool)) {\n-                for (name, _) in &self.primitive_type_table.primitive_types {\n-                    names.push(*name);\n-                }\n+                names.extend(\n+                    self.primitive_type_table.primitive_types.iter().map(|(name, _)| name)\n+                )\n             }\n         } else {\n             // Search in module."}, {"sha": "04a4bca4ffbdad0be472a0fe15d6309d205efa89", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -1318,14 +1318,13 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 };\n \n                 // Make a comma-separated list of names of imported modules.\n-                let mut names = vec![];\n                 let glob_map = &self.save_ctxt.analysis.glob_map;\n                 let glob_map = glob_map.as_ref().unwrap();\n-                if glob_map.contains_key(&id) {\n-                    for n in glob_map.get(&id).unwrap() {\n-                        names.push(n.to_string());\n-                    }\n-                }\n+                let names = if glob_map.contains_key(&id) {\n+                    glob_map.get(&id).unwrap().iter().map(|n| n.to_string()).collect()\n+                } else {\n+                    Vec::new()\n+                };\n \n                 let sub_span = self.span.sub_span_of_token(use_tree.span,\n                                                            token::BinOp(token::Star));"}, {"sha": "77b02d9ff5bce8e129460a0a34cecc977594acd1", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -962,19 +962,21 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             &[\"<closure_kind>\", \"<closure_signature>\"][..]\n         };\n \n-        for (i, &arg) in dummy_args.iter().enumerate() {\n-            params.push(ty::GenericParamDef {\n-                index: type_start + i as u32,\n-                name: Symbol::intern(arg).as_interned_str(),\n-                def_id,\n-                pure_wrt_drop: false,\n-                kind: ty::GenericParamDefKind::Type {\n-                    has_default: false,\n-                    object_lifetime_default: rl::Set1::Empty,\n-                    synthetic: None,\n-                },\n-            });\n-        }\n+        params.extend(\n+            dummy_args.iter().enumerate().map(|(i, &arg)|\n+                ty::GenericParamDef {\n+                    index: type_start + i as u32,\n+                    name: Symbol::intern(arg).as_interned_str(),\n+                    def_id,\n+                    pure_wrt_drop: false,\n+                    kind: ty::GenericParamDefKind::Type {\n+                        has_default: false,\n+                        object_lifetime_default: rl::Set1::Empty,\n+                        synthetic: None,\n+                    },\n+                }\n+            )\n+        );\n \n         tcx.with_freevars(node_id, |fv| {\n             params.extend(fv.iter().zip((dummy_args.len() as u32)..).map(|(_, i)| {\n@@ -1651,10 +1653,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n                                                                     &mut projections);\n \n                             predicates.push(trait_ref.to_predicate());\n-\n-                            for projection in &projections {\n-                                predicates.push(projection.to_predicate());\n-                            }\n+                            predicates.extend(projections.iter().map(|p| p.to_predicate()));\n                         }\n \n                         &hir::GenericBound::Outlives(ref lifetime) => {"}, {"sha": "769c9804a355ae6a9455a3cff2ad55d82ce0036d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -203,9 +203,7 @@ pub fn run_core(search_paths: SearchPaths,\n                                      intra_link_resolution_failure_name.to_owned(),\n                                      missing_docs.to_owned()];\n \n-    for (lint, _) in &cmd_lints {\n-        whitelisted_lints.push(lint.clone());\n-    }\n+    whitelisted_lints.extend(cmd_lints.iter().map(|(lint, _)| lint).cloned());\n \n     let lints = lint::builtin::HardwiredLints.get_lints()\n                     .into_iter()"}, {"sha": "613ca01ff82f8dfe3cb87874cd5a8cf22dca2d77", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -722,9 +722,7 @@ where R: 'static + Send,\n                     },\n                     _ => continue,\n                 };\n-                for p in value.as_str().split_whitespace() {\n-                    sink.push(p.to_string());\n-                }\n+                sink.extend(value.as_str().split_whitespace().map(|p| p.to_string()));\n             }\n \n             if attr.is_word() && name == Some(\"document_private_items\") {"}, {"sha": "b5986e88b6645efe629bfb29c2f74ccd721fb447", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -1364,9 +1364,7 @@ impl Stack {\n     // Used by Parser to insert StackElement::Key elements at the top of the stack.\n     fn push_key(&mut self, key: string::String) {\n         self.stack.push(InternalKey(self.str_buffer.len() as u16, key.len() as u16));\n-        for c in key.as_bytes() {\n-            self.str_buffer.push(*c);\n-        }\n+        self.str_buffer.extend(key.as_bytes());\n     }\n \n     // Used by Parser to insert StackElement::Index elements at the top of the stack.\n@@ -2212,9 +2210,7 @@ impl ::Decoder for Decoder {\n                 };\n                 match o.remove(&\"fields\".to_string()) {\n                     Some(Json::Array(l)) => {\n-                        for field in l.into_iter().rev() {\n-                            self.stack.push(field);\n-                        }\n+                        self.stack.extend(l.into_iter().rev());\n                     },\n                     Some(val) => {\n                         return Err(ExpectedError(\"Array\".to_owned(), format!(\"{}\", val)))\n@@ -2346,9 +2342,7 @@ impl ::Decoder for Decoder {\n     {\n         let array = expect!(self.pop(), Array)?;\n         let len = array.len();\n-        for v in array.into_iter().rev() {\n-            self.stack.push(v);\n-        }\n+        self.stack.extend(array.into_iter().rev());\n         f(self, len)\n     }\n "}, {"sha": "2037616e6ac7c27c3690702859f9de53a176cb64", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -13,6 +13,7 @@ use ffi::OsStr;\n use os::unix::ffi::OsStrExt;\n use fmt;\n use io::{self, Error, ErrorKind};\n+use iter;\n use libc::{EXIT_SUCCESS, EXIT_FAILURE};\n use path::{Path, PathBuf};\n use sys::fd::FileDesc;\n@@ -296,11 +297,11 @@ impl Command {\n             t!(callback());\n         }\n \n-        let mut args: Vec<[usize; 2]> = Vec::new();\n-        args.push([self.program.as_ptr() as usize, self.program.len()]);\n-        for arg in self.args.iter() {\n-            args.push([arg.as_ptr() as usize, arg.len()]);\n-        }\n+        let args: Vec<[usize; 2]> = iter::once(\n+            [self.program.as_ptr() as usize, self.program.len()]\n+        ).chain(\n+            self.args.iter().map(|arg| [arg.as_ptr() as usize, arg.len()])\n+        ).collect();\n \n         self.env.apply();\n "}, {"sha": "4974a8de89c79f91d6850d0b017221720046ecbc", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -487,9 +487,7 @@ fn make_command_line(prog: &OsStr, args: &[OsString]) -> io::Result<Vec<u16>> {\n             } else {\n                 if x == '\"' as u16 {\n                     // Add n+1 backslashes to total 2n+1 before internal '\"'.\n-                    for _ in 0..(backslashes+1) {\n-                        cmd.push('\\\\' as u16);\n-                    }\n+                    cmd.extend((0..(backslashes + 1)).map(|_| '\\\\' as u16));\n                 }\n                 backslashes = 0;\n             }\n@@ -498,9 +496,7 @@ fn make_command_line(prog: &OsStr, args: &[OsString]) -> io::Result<Vec<u16>> {\n \n         if quote {\n             // Add n backslashes to total 2n before ending '\"'.\n-            for _ in 0..backslashes {\n-                cmd.push('\\\\' as u16);\n-            }\n+            cmd.extend((0..backslashes).map(|_| '\\\\' as u16));\n             cmd.push('\"' as u16);\n         }\n         Ok(())"}, {"sha": "d59c9dd6b53e8fbc5399984ec1d81a0ec40ae4d6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -500,10 +500,7 @@ impl Pat {\n             PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n                 pats[0].to_ty().map(TyKind::Slice)?,\n             PatKind::Tuple(pats, None) => {\n-                let mut tys = Vec::new();\n-                for pat in pats {\n-                    tys.push(pat.to_ty()?);\n-                }\n+                let tys = pats.iter().map(|pat| pat.to_ty()).collect::<Option<Vec<_>>>()?;\n                 TyKind::Tup(tys)\n             }\n             _ => return None,\n@@ -949,10 +946,7 @@ impl Expr {\n             ExprKind::Array(exprs) if exprs.len() == 1 =>\n                 exprs[0].to_ty().map(TyKind::Slice)?,\n             ExprKind::Tup(exprs) => {\n-                let mut tys = Vec::new();\n-                for expr in exprs {\n-                    tys.push(expr.to_ty()?);\n-                }\n+                let tys = exprs.iter().map(|expr| expr.to_ty()).collect::<Option<Vec<_>>>()?;\n                 TyKind::Tup(tys)\n             }\n             ExprKind::Binary(binop, lhs, rhs) if binop.node == BinOpKind::Add =>"}, {"sha": "f9b9e95ead1b6a389e2d488cf9f9530cdd67216e", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -265,9 +265,7 @@ impl<'a> StringReader<'a> {\n                 m.push(c);\n             }\n             _ => {\n-                for c in c.escape_default() {\n-                    m.push(c);\n-                }\n+                m.extend(c.escape_default());\n             }\n         }\n     }"}, {"sha": "c2b9294499907fa43a4f532d1dbc1674eca3f8cf", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -131,8 +131,8 @@ fn decodable_substructure(cx: &mut ExtCtxt,\n         StaticEnum(_, ref fields) => {\n             let variant = cx.ident_of(\"i\");\n \n-            let mut arms = Vec::new();\n-            let mut variants = Vec::new();\n+            let mut arms = Vec::with_capacity(fields.len() + 1);\n+            let mut variants = Vec::with_capacity(fields.len());\n             let rvariant_arg = cx.ident_of(\"read_enum_variant_arg\");\n \n             for (i, &(ident, v_span, ref parts)) in fields.iter().enumerate() {"}, {"sha": "e0f985c26c7a1cd9efd69bc3b09e3b0ab09afd80", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -188,6 +188,7 @@ pub use self::StaticFields::*;\n pub use self::SubstructureFields::*;\n \n use std::cell::RefCell;\n+use std::iter;\n use std::vec;\n \n use rustc_target::spec::abi::Abi;\n@@ -558,15 +559,13 @@ impl<'a> TraitDef<'a> {\n                     // type being derived upon\n                     self.additional_bounds.iter().map(|p| {\n                         cx.trait_bound(p.to_path(cx, self.span, type_ident, generics))\n-                    }).collect();\n-\n-                // require the current trait\n-                bounds.push(cx.trait_bound(trait_path.clone()));\n-\n-                // also add in any bounds from the declaration\n-                for declared_bound in &param.bounds {\n-                    bounds.push((*declared_bound).clone());\n-                }\n+                    }).chain(\n+                        // require the current trait\n+                        iter::once(cx.trait_bound(trait_path.clone()))\n+                    ).chain(\n+                        // also add in any bounds from the declaration\n+                        param.bounds.iter().cloned()\n+                    ).collect();\n \n                 cx.typaram(self.span, param.ident, vec![], bounds, None)\n             }"}, {"sha": "950e8c84f17651764cce81c211bc8f5cc9aa2fff", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -95,9 +95,8 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n         _ => cx.span_bug(trait_span, \"impossible substructure in `derive(Hash)`\"),\n     };\n \n-    for &FieldInfo { ref self_, span, .. } in fields {\n-        stmts.push(call_hash(span, self_.clone()));\n-    }\n+    stmts.extend(fields.iter().map(|FieldInfo { ref self_, span, .. }|\n+        call_hash(*span, self_.clone())));\n \n     cx.expr_block(cx.block(trait_span, stmts))\n }"}, {"sha": "46c85497ee78ff4cb3795bfe22550ad1ffe4cb43", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c8a279daf6912b99ba089ff6dafbfc3469831e/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=59c8a279daf6912b99ba089ff6dafbfc3469831e", "patch": "@@ -406,10 +406,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // Map the arguments\n         for i in 0..args_len {\n             let ref arg_types = self.arg_types[i];\n-            let mut arg_offsets = Vec::with_capacity(arg_types.len());\n-            for offset in arg_types {\n-                arg_offsets.push(sofar + *offset);\n-            }\n+            let arg_offsets = arg_types.iter().map(|offset| sofar + *offset).collect::<Vec<_>>();\n             self.arg_index_map.push(arg_offsets);\n             sofar += self.arg_unique_types[i].len();\n         }\n@@ -581,10 +578,12 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// Actually builds the expression which the format_args! block will be\n     /// expanded to\n     fn into_expr(self) -> P<ast::Expr> {\n-        let mut locals = Vec::new();\n-        let mut counts = Vec::new();\n-        let mut pats = Vec::new();\n-        let mut heads = Vec::new();\n+        let mut locals = Vec::with_capacity(\n+            (0..self.args.len()).map(|i| self.arg_unique_types[i].len()).sum()\n+        );\n+        let mut counts = Vec::with_capacity(self.count_args.len());\n+        let mut pats = Vec::with_capacity(self.args.len());\n+        let mut heads = Vec::with_capacity(self.args.len());\n \n         let names_pos: Vec<_> = (0..self.args.len())\n             .map(|i| self.ecx.ident_of(&format!(\"arg{}\", i)).gensym())"}]}