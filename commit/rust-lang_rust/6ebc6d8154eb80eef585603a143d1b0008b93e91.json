{"sha": "6ebc6d8154eb80eef585603a143d1b0008b93e91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYmM2ZDgxNTRlYjgwZWVmNTg1NjAzYTE0M2QxYjAwMDhiOTNlOTE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-10-30T06:04:52Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-28T02:18:10Z"}, "message": "rustc: track hir::{TraitRef, Visibility} in the HIR map.", "tree": {"sha": "620c9cf582bff8bc30ed5cec1eb6ee89c5703cad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/620c9cf582bff8bc30ed5cec1eb6ee89c5703cad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ebc6d8154eb80eef585603a143d1b0008b93e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ebc6d8154eb80eef585603a143d1b0008b93e91", "html_url": "https://github.com/rust-lang/rust/commit/6ebc6d8154eb80eef585603a143d1b0008b93e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ebc6d8154eb80eef585603a143d1b0008b93e91/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16b5c2cfef811feebe2797bcb7e01d2b6ff12db1", "url": "https://api.github.com/repos/rust-lang/rust/commits/16b5c2cfef811feebe2797bcb7e01d2b6ff12db1", "html_url": "https://github.com/rust-lang/rust/commit/16b5c2cfef811feebe2797bcb7e01d2b6ff12db1"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "64bf4bbf08039d45737d102ae889cfe00847dae4", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc6d8154eb80eef585603a143d1b0008b93e91/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc6d8154eb80eef585603a143d1b0008b93e91/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=6ebc6d8154eb80eef585603a143d1b0008b93e91", "patch": "@@ -124,13 +124,6 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                         this.insert(struct_def.id(), NodeStructCtor(struct_def));\n                     }\n                 }\n-                ItemTrait(.., ref bounds, _) => {\n-                    for b in bounds.iter() {\n-                        if let TraitTyParamBound(ref t, TraitBoundModifier::None) = *b {\n-                            this.insert(t.trait_ref.ref_id, NodeItem(i));\n-                        }\n-                    }\n-                }\n                 ItemUse(ref view_path) => {\n                     match view_path.node {\n                         ViewPathList(_, ref paths) => {\n@@ -217,6 +210,14 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         });\n     }\n \n+    fn visit_trait_ref(&mut self, tr: &'ast TraitRef) {\n+        self.insert(tr.ref_id, NodeTraitRef(tr));\n+\n+        self.with_parent(tr.ref_id, |this| {\n+            intravisit::walk_trait_ref(this, tr);\n+        });\n+    }\n+\n     fn visit_fn(&mut self, fk: intravisit::FnKind<'ast>, fd: &'ast FnDecl,\n                 b: &'ast Expr, s: Span, id: NodeId) {\n         assert_eq!(self.parent_node, id);\n@@ -234,6 +235,20 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         self.insert(lifetime.id, NodeLifetime(lifetime));\n     }\n \n+    fn visit_vis(&mut self, visibility: &'ast Visibility) {\n+        match *visibility {\n+            Visibility::Public |\n+            Visibility::Crate |\n+            Visibility::Inherited => {}\n+            Visibility::Restricted { id, .. } => {\n+                self.insert(id, NodeVisibility(visibility));\n+                self.with_parent(id, |this| {\n+                    intravisit::walk_vis(this, visibility);\n+                });\n+            }\n+        }\n+    }\n+\n     fn visit_macro_def(&mut self, macro_def: &'ast MacroDef) {\n         self.insert_entry(macro_def.id, NotPresent);\n     }"}, {"sha": "7f6c85eeaac8d40f50430cba5f25423666a52177", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc6d8154eb80eef585603a143d1b0008b93e91/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc6d8154eb80eef585603a143d1b0008b93e91/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=6ebc6d8154eb80eef585603a143d1b0008b93e91", "patch": "@@ -49,6 +49,7 @@ pub enum Node<'ast> {\n     NodeExpr(&'ast Expr),\n     NodeStmt(&'ast Stmt),\n     NodeTy(&'ast Ty),\n+    NodeTraitRef(&'ast TraitRef),\n     NodeLocal(&'ast Pat),\n     NodePat(&'ast Pat),\n     NodeBlock(&'ast Block),\n@@ -57,7 +58,8 @@ pub enum Node<'ast> {\n     NodeStructCtor(&'ast VariantData),\n \n     NodeLifetime(&'ast Lifetime),\n-    NodeTyParam(&'ast TyParam)\n+    NodeTyParam(&'ast TyParam),\n+    NodeVisibility(&'ast Visibility),\n }\n \n /// Represents an entry and its parent NodeID.\n@@ -76,12 +78,14 @@ pub enum MapEntry<'ast> {\n     EntryExpr(NodeId, &'ast Expr),\n     EntryStmt(NodeId, &'ast Stmt),\n     EntryTy(NodeId, &'ast Ty),\n+    EntryTraitRef(NodeId, &'ast TraitRef),\n     EntryLocal(NodeId, &'ast Pat),\n     EntryPat(NodeId, &'ast Pat),\n     EntryBlock(NodeId, &'ast Block),\n     EntryStructCtor(NodeId, &'ast VariantData),\n     EntryLifetime(NodeId, &'ast Lifetime),\n     EntryTyParam(NodeId, &'ast TyParam),\n+    EntryVisibility(NodeId, &'ast Visibility),\n \n     /// Roots for node trees.\n     RootCrate,\n@@ -105,12 +109,14 @@ impl<'ast> MapEntry<'ast> {\n             NodeExpr(n) => EntryExpr(p, n),\n             NodeStmt(n) => EntryStmt(p, n),\n             NodeTy(n) => EntryTy(p, n),\n+            NodeTraitRef(n) => EntryTraitRef(p, n),\n             NodeLocal(n) => EntryLocal(p, n),\n             NodePat(n) => EntryPat(p, n),\n             NodeBlock(n) => EntryBlock(p, n),\n             NodeStructCtor(n) => EntryStructCtor(p, n),\n             NodeLifetime(n) => EntryLifetime(p, n),\n             NodeTyParam(n) => EntryTyParam(p, n),\n+            NodeVisibility(n) => EntryVisibility(p, n),\n         }\n     }\n \n@@ -124,12 +130,14 @@ impl<'ast> MapEntry<'ast> {\n             EntryExpr(id, _) => id,\n             EntryStmt(id, _) => id,\n             EntryTy(id, _) => id,\n+            EntryTraitRef(id, _) => id,\n             EntryLocal(id, _) => id,\n             EntryPat(id, _) => id,\n             EntryBlock(id, _) => id,\n             EntryStructCtor(id, _) => id,\n             EntryLifetime(id, _) => id,\n             EntryTyParam(id, _) => id,\n+            EntryVisibility(id, _) => id,\n \n             NotPresent |\n             RootCrate |\n@@ -147,12 +155,14 @@ impl<'ast> MapEntry<'ast> {\n             EntryExpr(_, n) => NodeExpr(n),\n             EntryStmt(_, n) => NodeStmt(n),\n             EntryTy(_, n) => NodeTy(n),\n+            EntryTraitRef(_, n) => NodeTraitRef(n),\n             EntryLocal(_, n) => NodeLocal(n),\n             EntryPat(_, n) => NodePat(n),\n             EntryBlock(_, n) => NodeBlock(n),\n             EntryStructCtor(_, n) => NodeStructCtor(n),\n             EntryLifetime(_, n) => NodeLifetime(n),\n             EntryTyParam(_, n) => NodeTyParam(n),\n+            EntryVisibility(_, n) => NodeVisibility(n),\n             _ => return None\n         })\n     }\n@@ -266,12 +276,14 @@ impl<'ast> Map<'ast> {\n                     EntryExpr(p, _) |\n                     EntryStmt(p, _) |\n                     EntryTy(p, _) |\n+                    EntryTraitRef(p, _) |\n                     EntryLocal(p, _) |\n                     EntryPat(p, _) |\n                     EntryBlock(p, _) |\n                     EntryStructCtor(p, _) |\n                     EntryLifetime(p, _) |\n-                    EntryTyParam(p, _) =>\n+                    EntryTyParam(p, _) |\n+                    EntryVisibility(p, _) =>\n                         id = p,\n \n                     RootCrate =>\n@@ -307,12 +319,14 @@ impl<'ast> Map<'ast> {\n                     EntryExpr(p, _) |\n                     EntryStmt(p, _) |\n                     EntryTy(p, _) |\n+                    EntryTraitRef(p, _) |\n                     EntryLocal(p, _) |\n                     EntryPat(p, _) |\n                     EntryBlock(p, _) |\n                     EntryStructCtor(p, _) |\n                     EntryLifetime(p, _) |\n-                    EntryTyParam(p, _) =>\n+                    EntryTyParam(p, _) |\n+                    EntryVisibility(p, _) =>\n                         id = p,\n \n                     RootInlinedParent(parent) => match *parent {\n@@ -707,11 +721,13 @@ impl<'ast> Map<'ast> {\n             Some(NodeExpr(expr)) => expr.span,\n             Some(NodeStmt(stmt)) => stmt.span,\n             Some(NodeTy(ty)) => ty.span,\n+            Some(NodeTraitRef(tr)) => tr.path.span,\n             Some(NodeLocal(pat)) => pat.span,\n             Some(NodePat(pat)) => pat.span,\n             Some(NodeBlock(block)) => block.span,\n             Some(NodeStructCtor(_)) => self.expect_item(self.get_parent(id)).span,\n             Some(NodeTyParam(ty_param)) => ty_param.span,\n+            Some(NodeVisibility(&Visibility::Restricted { ref path, .. })) => path.span,\n             _ => return None,\n         };\n         Some(sp)\n@@ -926,9 +942,11 @@ impl<'a> NodePrinter for pprust::State<'a> {\n             NodeExpr(a)        => self.print_expr(&a),\n             NodeStmt(a)        => self.print_stmt(&a),\n             NodeTy(a)          => self.print_type(&a),\n+            NodeTraitRef(a)    => self.print_trait_ref(&a),\n             NodePat(a)         => self.print_pat(&a),\n             NodeBlock(a)       => self.print_block(&a),\n             NodeLifetime(a)    => self.print_lifetime(&a),\n+            NodeVisibility(a)  => self.print_visibility(&a),\n             NodeTyParam(_)     => bug!(\"cannot print TyParam\"),\n             // these cases do not carry enough information in the\n             // ast_map to reconstruct their full structure for pretty\n@@ -1018,6 +1036,9 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         Some(NodeTy(ref ty)) => {\n             format!(\"type {}{}\", pprust::ty_to_string(&ty), id_str)\n         }\n+        Some(NodeTraitRef(ref tr)) => {\n+            format!(\"trait_ref {}{}\", pprust::path_to_string(&tr.path), id_str)\n+        }\n         Some(NodeLocal(ref pat)) => {\n             format!(\"local {}{}\", pprust::pat_to_string(&pat), id_str)\n         }\n@@ -1037,6 +1058,9 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         Some(NodeTyParam(ref ty_param)) => {\n             format!(\"typaram {:?}{}\", ty_param, id_str)\n         }\n+        Some(NodeVisibility(ref vis)) => {\n+            format!(\"visibility {:?}{}\", vis, id_str)\n+        }\n         None => {\n             format!(\"unknown node{}\", id_str)\n         }"}, {"sha": "f6f40a91bf491097a2f1e8933a20f02349ad720d", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ebc6d8154eb80eef585603a143d1b0008b93e91/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ebc6d8154eb80eef585603a143d1b0008b93e91/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=6ebc6d8154eb80eef585603a143d1b0008b93e91", "patch": "@@ -845,7 +845,7 @@ impl<'a> State<'a> {\n         self.ann.post(self, NodeItem(item))\n     }\n \n-    fn print_trait_ref(&mut self, t: &hir::TraitRef) -> io::Result<()> {\n+    pub fn print_trait_ref(&mut self, t: &hir::TraitRef) -> io::Result<()> {\n         self.print_path(&t.path, false)\n     }\n "}]}