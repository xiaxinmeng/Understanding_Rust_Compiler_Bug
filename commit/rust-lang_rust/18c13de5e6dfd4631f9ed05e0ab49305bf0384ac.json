{"sha": "18c13de5e6dfd4631f9ed05e0ab49305bf0384ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YzEzZGU1ZTZkZmQ0NjMxZjllZDA1ZTBhYjQ5MzA1YmYwMzg0YWM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-08T13:33:22Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-15T13:04:09Z"}, "message": "std:: switch the order in which dynamic_lib adds search paths.\n\nThe compiler needs to be opening e.g. libregex in the correct directory,\nwhich requires getting these in the right order.", "tree": {"sha": "333a241d58716b35a8eb47c34a4eabb1e4ade7b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/333a241d58716b35a8eb47c34a4eabb1e4ade7b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c13de5e6dfd4631f9ed05e0ab49305bf0384ac", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c13de5e6dfd4631f9ed05e0ab49305bf0384ac", "html_url": "https://github.com/rust-lang/rust/commit/18c13de5e6dfd4631f9ed05e0ab49305bf0384ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c13de5e6dfd4631f9ed05e0ab49305bf0384ac/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1ee3200b52a87ba788a6edf3b14db9466f2cb7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ee3200b52a87ba788a6edf3b14db9466f2cb7d", "html_url": "https://github.com/rust-lang/rust/commit/b1ee3200b52a87ba788a6edf3b14db9466f2cb7d"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "b2a912e65a80569d69d0af2ed15616f1a60f669d", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18c13de5e6dfd4631f9ed05e0ab49305bf0384ac/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c13de5e6dfd4631f9ed05e0ab49305bf0384ac/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=18c13de5e6dfd4631f9ed05e0ab49305bf0384ac", "patch": "@@ -16,16 +16,16 @@ A simple wrapper over the platform's dynamic library facilities\n \n */\n \n+\n use c_str::ToCStr;\n-use iter::Iterator;\n use mem;\n use ops::*;\n use option::*;\n use os;\n use path::GenericPath;\n use path;\n use result::*;\n-use slice::{Vector,OwnedVector};\n+use slice::Vector;\n use str;\n use vec::Vec;\n \n@@ -75,10 +75,12 @@ impl DynamicLibrary {\n         } else {\n             (\"LD_LIBRARY_PATH\", ':' as u8)\n         };\n-        let newenv = os::getenv_as_bytes(envvar).unwrap_or(box []);\n-        let mut newenv = newenv.move_iter().collect::<Vec<_>>();\n-        newenv.push_all(&[sep]);\n-        newenv.push_all(path.as_vec());\n+        let mut newenv = Vec::from_slice(path.as_vec());\n+        newenv.push(sep);\n+        match os::getenv_as_bytes(envvar) {\n+            Some(bytes) => newenv.push_all(bytes),\n+            None => {}\n+        }\n         os::setenv(envvar, str::from_utf8(newenv.as_slice()).unwrap());\n     }\n "}]}