{"sha": "242ac57015554a543fb5b67cd5d2720e3e72ff00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MmFjNTcwMTU1NTRhNTQzZmI1YjY3Y2Q1ZDI3MjBlM2U3MmZmMDA=", "commit": {"author": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-07-01T23:02:11Z"}, "committer": {"name": "Yuki Okushi", "email": "yuki.okushi@huawei.com", "date": "2021-07-02T16:12:27Z"}, "message": "Fix const-generics ICE related to binding", "tree": {"sha": "20e4750b0dfeff7ed0c9a78e9351c024a00d9d88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e4750b0dfeff7ed0c9a78e9351c024a00d9d88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/242ac57015554a543fb5b67cd5d2720e3e72ff00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEx6scKn6IIf/+FpBu2rpbBylhwYoFAmDfOusACgkQ2rpbBylh\nwYrCxxAAtw6PZDotB3jAk3c4uGqDMYAD+dx7Y/sV2C3z4BrD1gvgDvLnS9ZhCGdr\ngrezyn/V+fd9jhIgFM6YRfxFlsFenGaH7SS3IaY++pXB0Uype53Y586yl5tyKvDP\n+FS3xgNlVMPJgNFWLaWPE6syKiycEZnPCCNVPRlKEEnw+z//JT+P83vvt6lv1hs6\n9Sg0XQ7e203WdBERmCkDzN/D/ZPd0tQbAeiikv+ryD5CvwXtpn2udZ1xYCWDtMzU\n0kWwIxQPiznhZhK26cFoLMIadDEzUojirTodQhz77TEqyoDHrZLY/2LI6sQzKJ2x\nFMDBMpQm8OyhWckRFTQufFII81oWAnIJBUVOfV6w0wBsADitPcl8kGBLCi4N0II5\nFI/Vl001K9ywiICp2Hxyzhe7Dl2PLGUSlYKF+oWo+2uj0jkBsnbi+QOGZLvKgvMU\ncN2Gm3n8xQUipEwOL/06hr0vGm49stzEtMFJuR0C0KvMPX9j6yXWZIA9L0e9TlRP\n9RUIJkYfKfWgPyh4zJUqG5xsVYXqEdhRS4WqrSHubrE/dGBcrNNWm5QNCZ3S1PJX\nFDrumi2uvwcJrRIcVa8wXSYdQ4TmfKwIM/gYjfR0abZWWADBGFP2g+Siqm85E/8j\ndkTETt57OOAYJBA/DhZwg7GORXnSl/+I7+Bkx6udZq0nQNi5moU=\n=ZwtK\n-----END PGP SIGNATURE-----", "payload": "tree 20e4750b0dfeff7ed0c9a78e9351c024a00d9d88\nparent ce331ee6ee010438d1a58c7da8ced4f26d69a20e\nauthor Yuki Okushi <yuki.okushi@huawei.com> 1625180531 +0900\ncommitter Yuki Okushi <yuki.okushi@huawei.com> 1625242347 +0900\n\nFix const-generics ICE related to binding\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/242ac57015554a543fb5b67cd5d2720e3e72ff00", "html_url": "https://github.com/rust-lang/rust/commit/242ac57015554a543fb5b67cd5d2720e3e72ff00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/242ac57015554a543fb5b67cd5d2720e3e72ff00/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce331ee6ee010438d1a58c7da8ced4f26d69a20e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce331ee6ee010438d1a58c7da8ced4f26d69a20e", "html_url": "https://github.com/rust-lang/rust/commit/ce331ee6ee010438d1a58c7da8ced4f26d69a20e"}], "stats": {"total": 151, "additions": 150, "deletions": 1}, "files": [{"sha": "98a1c614a43ea9a14ac3b8066a13e6c715888420", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/242ac57015554a543fb5b67cd5d2720e3e72ff00/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ac57015554a543fb5b67cd5d2720e3e72ff00/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=242ac57015554a543fb5b67cd5d2720e3e72ff00", "patch": "@@ -115,7 +115,14 @@ fn resolve_associated_item<'tcx>(\n     );\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n-    let vtbl = tcx.codegen_fulfill_obligation((param_env, ty::Binder::bind(trait_ref, tcx)))?;\n+    let vtbl = if trait_item.kind == ty::AssocKind::Const {\n+        let bound_vars = tcx\n+            .mk_bound_variable_kinds(std::iter::once(ty::BoundVariableKind::Region(ty::BrAnon(0))));\n+        let bind = ty::Binder::bind_with_vars(trait_ref, bound_vars);\n+        tcx.codegen_fulfill_obligation((param_env, bind))?\n+    } else {\n+        tcx.codegen_fulfill_obligation((param_env, ty::Binder::bind(trait_ref, tcx)))?\n+    };\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:"}, {"sha": "f34badc693e76e175c2579f1c3a058a25809b1a5", "filename": "src/test/ui/const-generics/issues/issue-83765.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/242ac57015554a543fb5b67cd5d2720e3e72ff00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ac57015554a543fb5b67cd5d2720e3e72ff00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs?ref=242ac57015554a543fb5b67cd5d2720e3e72ff00", "patch": "@@ -0,0 +1,38 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+trait TensorDimension {\n+    const DIM: usize;\n+}\n+\n+trait TensorSize: TensorDimension {\n+    fn size(&self) -> [usize; Self::DIM];\n+}\n+\n+trait Broadcastable: TensorSize + Sized {\n+    type Element;\n+    fn lazy_updim<const NEWDIM: usize>(&self, size: [usize; NEWDIM]) {}\n+}\n+\n+struct BMap<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> {\n+    reference: &'a T,\n+    closure: F,\n+}\n+\n+impl<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> TensorDimension\n+    for BMap<'a, R, T, F, DIM>\n+{\n+    const DIM: usize = DIM;\n+}\n+impl<'a, R, T: Broadcastable, F: Fn(T::Element) -> R, const DIM: usize> TensorSize\n+    for BMap<'a, R, T, F, DIM>\n+{\n+    fn size(&self) -> [usize; DIM] {\n+        //~^ ERROR: method not compatible with trait [E0308]\n+        self.reference.size()\n+        //~^ ERROR: unconstrained generic constant\n+        //~| ERROR: mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ef785bf07ebbfce44fd8765d10bd1fdef2be76c4", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/242ac57015554a543fb5b67cd5d2720e3e72ff00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/242ac57015554a543fb5b67cd5d2720e3e72ff00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=242ac57015554a543fb5b67cd5d2720e3e72ff00", "patch": "@@ -0,0 +1,29 @@\n+error[E0308]: method not compatible with trait\n+  --> $DIR/issue-83765.rs:30:5\n+   |\n+LL |     fn size(&self) -> [usize; DIM] {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n+   |\n+   = note: expected type `Self::DIM`\n+              found type `DIM`\n+\n+error: unconstrained generic constant\n+  --> $DIR/issue-83765.rs:32:24\n+   |\n+LL |         self.reference.size()\n+   |                        ^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-83765.rs:32:9\n+   |\n+LL |         self.reference.size()\n+   |         ^^^^^^^^^^^^^^^^^^^^^ expected `DIM`, found `Self::DIM`\n+   |\n+   = note: expected type `DIM`\n+              found type `Self::DIM`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "478719869b2c46b4a4a4e4115fde8693d44e262e", "filename": "src/test/ui/const-generics/issues/issue-85848.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/242ac57015554a543fb5b67cd5d2720e3e72ff00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242ac57015554a543fb5b67cd5d2720e3e72ff00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.rs?ref=242ac57015554a543fb5b67cd5d2720e3e72ff00", "patch": "@@ -0,0 +1,31 @@\n+#![feature(const_generics, const_fn_trait_bound, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+trait _Contains<T> {\n+    const does_contain: bool;\n+}\n+\n+trait Contains<T, const Satisfied: bool> {}\n+\n+trait Delegates<T> {}\n+\n+impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n+\n+const fn contains<A, B>() -> bool\n+where\n+    A: _Contains<B>,\n+{\n+    A::does_contain\n+}\n+\n+impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n+\n+fn writes_to_path<C>(cap: &C) {\n+    writes_to_specific_path(&cap);\n+    //~^ ERROR: the trait bound `(): _Contains<&C>` is not satisfied [E0277]\n+    //~| ERROR: unconstrained generic constant\n+}\n+\n+fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n+\n+fn main() {}"}, {"sha": "5e65136a6bc20736e1b11ddc181bac3000e5d262", "filename": "src/test/ui/const-generics/issues/issue-85848.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/242ac57015554a543fb5b67cd5d2720e3e72ff00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/242ac57015554a543fb5b67cd5d2720e3e72ff00/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.stderr?ref=242ac57015554a543fb5b67cd5d2720e3e72ff00", "patch": "@@ -0,0 +1,44 @@\n+error[E0277]: the trait bound `(): _Contains<&C>` is not satisfied\n+  --> $DIR/issue-85848.rs:24:5\n+   |\n+LL |     writes_to_specific_path(&cap);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `_Contains<&C>` is not implemented for `()`\n+...\n+LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n+   |                               ------------- required by this bound in `writes_to_specific_path`\n+   |\n+note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n+  --> $DIR/issue-85848.rs:21:12\n+   |\n+LL | impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+note: required because of the requirements on the impl of `Delegates<()>` for `&C`\n+  --> $DIR/issue-85848.rs:12:12\n+   |\n+LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n+   |            ^^^^^^^^^^^^     ^\n+\n+error: unconstrained generic constant\n+  --> $DIR/issue-85848.rs:24:5\n+   |\n+LL |     writes_to_specific_path(&cap);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n+   |                               ------------- required by this bound in `writes_to_specific_path`\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { contains::<T, U>() }]:`\n+note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n+  --> $DIR/issue-85848.rs:21:12\n+   |\n+LL | impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+note: required because of the requirements on the impl of `Delegates<()>` for `&C`\n+  --> $DIR/issue-85848.rs:12:12\n+   |\n+LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n+   |            ^^^^^^^^^^^^     ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}