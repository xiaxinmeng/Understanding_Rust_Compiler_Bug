{"sha": "e7e3261121c2a600da27d89906c8734d8a346852", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTMyNjExMjFjMmE2MDBkYTI3ZDg5OTA2Yzg3MzRkOGEzNDY4NTI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-22T16:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-22T16:26:10Z"}, "message": "Rollup merge of #50863 - oli-obk:const_len, r=SimonSapin,Gankro\n\nMake `[T]::len` and `str::len` const fn\n\nr? @Gankro", "tree": {"sha": "d3b50b473b01e1a2361828d530d8ca805237fa71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3b50b473b01e1a2361828d530d8ca805237fa71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e3261121c2a600da27d89906c8734d8a346852", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbBESiCRBK7hj4Ov3rIwAAdHIIABKShZQgbs0ccES9eqih0EKh\neD3TQmUzgL1o7bqCkv0pLOAuEPpNMW9YtR8razkm6+5AumYvNIpquSFnMRVZlGNj\nV1u3x9QSl/yi+qaC/txjeJLL1W+NfELmJzUPZV+V5uHjYrKDWDnfNzeEZw5DkZyg\nfc8l9gzi4lGETp/4kO9yCsncXSlSeWd87fcW7O6ysoAXtPJb+omQm4mOrwd95D1h\nL7d7znO35uWgT7Cg7HPJ/VMHpNz5LLOw9JbgrAlZj0Hzzl1/p1j1gr1itW+x5Nu1\nTMyxLsvHV1YZnh6YRcUgotSoivGYcK6NzwrnB3X7kival43pYQCZiypmjhlvvCg=\n=2eDu\n-----END PGP SIGNATURE-----\n", "payload": "tree d3b50b473b01e1a2361828d530d8ca805237fa71\nparent eb92280287ff15e6683a7a32cd1c52f4a0493501\nparent 2788f66ab079e76ee5c73ba1651103c557be7a61\nauthor kennytm <kennytm@gmail.com> 1527006370 +0800\ncommitter GitHub <noreply@github.com> 1527006370 +0800\n\nRollup merge of #50863 - oli-obk:const_len, r=SimonSapin,Gankro\n\nMake `[T]::len` and `str::len` const fn\n\nr? @Gankro\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e3261121c2a600da27d89906c8734d8a346852", "html_url": "https://github.com/rust-lang/rust/commit/e7e3261121c2a600da27d89906c8734d8a346852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e3261121c2a600da27d89906c8734d8a346852/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb92280287ff15e6683a7a32cd1c52f4a0493501", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb92280287ff15e6683a7a32cd1c52f4a0493501", "html_url": "https://github.com/rust-lang/rust/commit/eb92280287ff15e6683a7a32cd1c52f4a0493501"}, {"sha": "2788f66ab079e76ee5c73ba1651103c557be7a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/2788f66ab079e76ee5c73ba1651103c557be7a61", "html_url": "https://github.com/rust-lang/rust/commit/2788f66ab079e76ee5c73ba1651103c557be7a61"}], "stats": {"total": 88, "additions": 72, "deletions": 16}, "files": [{"sha": "d37629ced11dbfa0175fe9d6108388a362b50a23", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7e3261121c2a600da27d89906c8734d8a346852/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e3261121c2a600da27d89906c8734d8a346852/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e7e3261121c2a600da27d89906c8734d8a346852", "patch": "@@ -119,6 +119,9 @@\n #![feature(powerpc_target_feature)]\n #![feature(mips_target_feature)]\n #![feature(aarch64_target_feature)]\n+#![feature(const_slice_len)]\n+#![feature(const_str_as_bytes)]\n+#![feature(const_str_len)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "b453edcb4e193ed29191fb2ccf7c10611aab4275", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e7e3261121c2a600da27d89906c8734d8a346852/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e3261121c2a600da27d89906c8734d8a346852/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e7e3261121c2a600da27d89906c8734d8a346852", "patch": "@@ -59,9 +59,16 @@ mod rotate;\n mod sort;\n \n #[repr(C)]\n-struct Repr<T> {\n-    pub data: *const T,\n-    pub len: usize,\n+union Repr<'a, T: 'a> {\n+    rust: &'a [T],\n+    rust_mut: &'a mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+#[repr(C)]\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n }\n \n //\n@@ -119,9 +126,10 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn len(&self) -> usize {\n+    #[rustc_const_unstable(feature = \"const_slice_len\")]\n+    pub const fn len(&self) -> usize {\n         unsafe {\n-            mem::transmute::<&[T], Repr<T>>(self).len\n+            Repr { rust: self }.raw.len\n         }\n     }\n \n@@ -135,7 +143,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_empty(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_slice_len\")]\n+    pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n \n@@ -418,7 +427,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn as_ptr(&self) -> *const T {\n+    #[rustc_const_unstable(feature = \"const_slice_as_ptr\")]\n+    pub const fn as_ptr(&self) -> *const T {\n         self as *const [T] as *const T\n     }\n \n@@ -3856,8 +3866,8 @@ unsafe impl<'a, T> TrustedRandomAccess for ExactChunksMut<'a, T> {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts<'a, T>(p: *const T, len: usize) -> &'a [T] {\n-    mem::transmute(Repr { data: p, len: len })\n+pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n+    Repr { raw: FatPtr { data, len } }.rust\n }\n \n /// Performs the same functionality as `from_raw_parts`, except that a mutable\n@@ -3869,8 +3879,8 @@ pub unsafe fn from_raw_parts<'a, T>(p: *const T, len: usize) -> &'a [T] {\n /// `from_raw_parts`.\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n-    mem::transmute(Repr { data: p, len: len })\n+pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n+    Repr { raw: FatPtr { data, len} }.rust_mut\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying)."}, {"sha": "70aaf10f4213e95b613cc6d3da727a9ccf6df007", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e7e3261121c2a600da27d89906c8734d8a346852/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e3261121c2a600da27d89906c8734d8a346852/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=e7e3261121c2a600da27d89906c8734d8a346852", "patch": "@@ -2166,7 +2166,8 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn len(&self) -> usize {\n+    #[rustc_const_unstable(feature = \"const_str_len\")]\n+    pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n     }\n \n@@ -2185,7 +2186,8 @@ impl str {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn is_empty(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_str_len\")]\n+    pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n \n@@ -2242,8 +2244,15 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline(always)]\n-    pub fn as_bytes(&self) -> &[u8] {\n-        unsafe { &*(self as *const str as *const [u8]) }\n+    #[rustc_const_unstable(feature=\"const_str_as_bytes\")]\n+    pub const fn as_bytes(&self) -> &[u8] {\n+        unsafe {\n+            union Slices<'a> {\n+                str: &'a str,\n+                slice: &'a [u8],\n+            }\n+            Slices { str: self }.slice\n+        }\n     }\n \n     /// Converts a mutable string slice to a mutable byte slice. To convert the\n@@ -2303,7 +2312,8 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn as_ptr(&self) -> *const u8 {\n+    #[rustc_const_unstable(feature = \"const_str_as_ptr\")]\n+    pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8\n     }\n "}, {"sha": "dfa41c491fa89d405390ebc6d7878b2eaafd27f7", "filename": "src/test/ui/const-eval/strlen.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7e3261121c2a600da27d89906c8734d8a346852/src%2Ftest%2Fui%2Fconst-eval%2Fstrlen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e3261121c2a600da27d89906c8734d8a346852/src%2Ftest%2Fui%2Fconst-eval%2Fstrlen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fstrlen.rs?ref=e7e3261121c2a600da27d89906c8734d8a346852", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+#![feature(const_str_len, const_str_as_bytes)]\n+\n+const S: &str = \"foo\";\n+pub const B: &[u8] = S.as_bytes();\n+\n+pub fn foo() -> [u8; S.len()] {\n+    let mut buf = [0; S.len()];\n+    for (i, &c) in S.as_bytes().iter().enumerate() {\n+        buf[i] = c;\n+    }\n+    buf\n+}\n+\n+fn main() {\n+    assert_eq!(&foo()[..], b\"foo\");\n+    assert_eq!(foo().len(), S.len());\n+    const LEN: usize = S.len();\n+    assert_eq!(LEN, S.len());\n+    assert_eq!(B, foo());\n+    assert_eq!(B, b\"foo\");\n+}"}]}