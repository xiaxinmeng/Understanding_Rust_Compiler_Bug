{"sha": "f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZmIwZjVhMTcyYmNkZTQyMjkzYmY2NGZmYWZkMWU1ZGY0YmQwZjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-20T04:55:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-20T04:55:41Z"}, "message": "auto merge of #17319 : kmcallister/rust/method-macro-bt, r=pcwalton\n\nWe were leaving these on the stack, causing spurious backtraces.", "tree": {"sha": "6f9513f09a30e3aae088a378d86a2c842ce8dd1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f9513f09a30e3aae088a378d86a2c842ce8dd1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8", "html_url": "https://github.com/rust-lang/rust/commit/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef6c4b1382dcf2f943bd5872656625f935c0b7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef6c4b1382dcf2f943bd5872656625f935c0b7c", "html_url": "https://github.com/rust-lang/rust/commit/aef6c4b1382dcf2f943bd5872656625f935c0b7c"}, {"sha": "5b42f79ff088bf3f9136f6f668a481097e22bed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b42f79ff088bf3f9136f6f668a481097e22bed9", "html_url": "https://github.com/rust-lang/rust/commit/5b42f79ff088bf3f9136f6f668a481097e22bed9"}], "stats": {"total": 97, "additions": 83, "deletions": 14}, "files": [{"sha": "cc765695cb7123162807906b550edada3d6784e3", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8", "patch": "@@ -42,6 +42,8 @@ pub struct TestProps {\n     pub pretty_mode: String,\n     // Only compare pretty output and don't try compiling\n     pub pretty_compare_only: bool,\n+    // Patterns which must not appear in the output of a cfail test.\n+    pub forbid_output: Vec<String>,\n }\n \n // Load any test directives embedded in the file\n@@ -59,6 +61,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut no_pretty_expanded = false;\n     let mut pretty_mode = None;\n     let mut pretty_compare_only = false;\n+    let mut forbid_output = Vec::new();\n     iter_header(testfile, |ln| {\n         match parse_error_pattern(ln) {\n           Some(ep) => error_patterns.push(ep),\n@@ -116,6 +119,11 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             None => ()\n         };\n \n+        match parse_forbid_output(ln) {\n+            Some(of) => forbid_output.push(of),\n+            None => (),\n+        }\n+\n         true\n     });\n \n@@ -132,7 +140,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         no_prefer_dynamic: no_prefer_dynamic,\n         no_pretty_expanded: no_pretty_expanded,\n         pretty_mode: pretty_mode.unwrap_or(\"normal\".to_string()),\n-        pretty_compare_only: pretty_compare_only\n+        pretty_compare_only: pretty_compare_only,\n+        forbid_output: forbid_output,\n     }\n }\n \n@@ -210,6 +219,10 @@ fn parse_error_pattern(line: &str) -> Option<String> {\n     parse_name_value_directive(line, \"error-pattern\")\n }\n \n+fn parse_forbid_output(line: &str) -> Option<String> {\n+    parse_name_value_directive(line, \"forbid-output\")\n+}\n+\n fn parse_aux_build(line: &str) -> Option<String> {\n     parse_name_value_directive(line, \"aux-build\")\n }"}, {"sha": "d64d3317e2e5b91946a4be61155e4b1bae45197a", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8", "patch": "@@ -71,6 +71,14 @@ pub fn run_metrics(config: Config, testfile: String, mm: &mut MetricMap) {\n     }\n }\n \n+fn get_output(props: &TestProps, proc_res: &ProcRes) -> String {\n+    if props.check_stdout {\n+        format!(\"{}{}\", proc_res.stdout, proc_res.stderr)\n+    } else {\n+        proc_res.stderr.clone()\n+    }\n+}\n+\n fn run_cfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n     let proc_res = compile_test(config, props, testfile);\n \n@@ -81,16 +89,22 @@ fn run_cfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     check_correct_failure_status(&proc_res);\n \n+    if proc_res.status.success() {\n+        fatal(\"process did not return an error status\");\n+    }\n+\n+    let output_to_check = get_output(props, &proc_res);\n     let expected_errors = errors::load_errors(&config.cfail_regex, testfile);\n     if !expected_errors.is_empty() {\n         if !props.error_patterns.is_empty() {\n             fatal(\"both error pattern and expected errors specified\");\n         }\n         check_expected_errors(expected_errors, testfile, &proc_res);\n     } else {\n-        check_error_patterns(props, testfile, &proc_res);\n+        check_error_patterns(props, testfile, output_to_check.as_slice(), &proc_res);\n     }\n     check_no_compiler_crash(&proc_res);\n+    check_forbid_output(props, output_to_check.as_slice(), &proc_res);\n }\n \n fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n@@ -112,8 +126,9 @@ fn run_rfail_test(config: &Config, props: &TestProps, testfile: &Path) {\n         fatal_proc_rec(\"run-fail test isn't valgrind-clean!\", &proc_res);\n     }\n \n+    let output_to_check = get_output(props, &proc_res);\n     check_correct_failure_status(&proc_res);\n-    check_error_patterns(props, testfile, &proc_res);\n+    check_error_patterns(props, testfile, output_to_check.as_slice(), &proc_res);\n }\n \n fn check_correct_failure_status(proc_res: &ProcRes) {\n@@ -834,24 +849,15 @@ fn check_debugger_output(debugger_run_result: &ProcRes, check_lines: &[String])\n \n fn check_error_patterns(props: &TestProps,\n                         testfile: &Path,\n+                        output_to_check: &str,\n                         proc_res: &ProcRes) {\n     if props.error_patterns.is_empty() {\n         fatal(format!(\"no error pattern specified in {}\",\n                       testfile.display()).as_slice());\n     }\n-\n-    if proc_res.status.success() {\n-        fatal(\"process did not return an error status\");\n-    }\n-\n     let mut next_err_idx = 0u;\n     let mut next_err_pat = &props.error_patterns[next_err_idx];\n     let mut done = false;\n-    let output_to_check = if props.check_stdout {\n-        format!(\"{}{}\", proc_res.stdout, proc_res.stderr)\n-    } else {\n-        proc_res.stderr.clone()\n-    };\n     for line in output_to_check.as_slice().lines() {\n         if line.contains(next_err_pat.as_slice()) {\n             debug!(\"found error pattern {}\", next_err_pat);\n@@ -890,6 +896,16 @@ fn check_no_compiler_crash(proc_res: &ProcRes) {\n     }\n }\n \n+fn check_forbid_output(props: &TestProps,\n+                       output_to_check: &str,\n+                       proc_res: &ProcRes) {\n+    for pat in props.forbid_output.iter() {\n+        if output_to_check.contains(pat.as_slice()) {\n+            fatal_proc_rec(\"forbidden pattern found in compiler output\", proc_res);\n+        }\n+    }\n+}\n+\n fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n                          testfile: &Path,\n                          proc_res: &ProcRes) {"}, {"sha": "70cf41d5e171dc6e6ba9d85b79a873c864d0b2f2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8", "patch": "@@ -895,7 +895,10 @@ fn expand_method(m: P<ast::Method>, fld: &mut MacroExpander) -> SmallVector<P<as\n             };\n \n             // expand again if necessary\n-            new_methods.into_iter().flat_map(|m| fld.fold_method(m).into_iter()).collect()\n+            let new_methods = new_methods.move_iter()\n+                                  .flat_map(|m| fld.fold_method(m).into_iter()).collect();\n+            fld.cx.bt_pop();\n+            new_methods\n         }\n     })\n }"}, {"sha": "dc41e2e02a8461a3a382c19aea8d626dd87eead1", "filename": "src/test/compile-fail/method-macro-backtrace.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-macro-backtrace.rs?ref=f7fb0f5a172bcde42293bf64ffafd1e5df4bd0f8", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// forbid-output: in expansion of\n+\n+#![feature(macro_rules)]\n+\n+macro_rules! make_method ( ($name:ident) => (\n+    fn $name(&self) { }\n+))\n+\n+struct S;\n+\n+impl S {\n+    // We had a bug where these wouldn't clean up macro backtrace frames.\n+    make_method!(foo1)\n+    make_method!(foo2)\n+    make_method!(foo3)\n+    make_method!(foo4)\n+    make_method!(foo5)\n+    make_method!(foo6)\n+    make_method!(foo7)\n+    make_method!(foo8)\n+\n+    // Cause an error. It shouldn't have any macro backtrace frames.\n+    fn bar(&self) { }\n+    fn bar(&self) { } //~ ERROR duplicate definition\n+}\n+\n+fn main() { }"}]}