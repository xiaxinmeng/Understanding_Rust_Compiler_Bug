{"sha": "5bece28b096a82bf2a9a273ce43b3122839a1bcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZWNlMjhiMDk2YTgyYmYyYTlhMjczY2U0M2IzMTIyODM5YTFiY2I=", "commit": {"author": {"name": "Olivier Goffart", "email": "ogoffart@sixtyfps.io", "date": "2021-05-23T14:12:01Z"}, "committer": {"name": "Olivier Goffart", "email": "ogoffart@sixtyfps.io", "date": "2021-05-23T15:15:31Z"}, "message": "unhinabited_enum_branching: Fix the pass when the enum is taken indirectly\n\nIf there is a projection on the place of the discriminent, the pass wouldn't trigger", "tree": {"sha": "c370bd6333f8c8fe6ed62129f5af545b7f7fd9b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c370bd6333f8c8fe6ed62129f5af545b7f7fd9b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bece28b096a82bf2a9a273ce43b3122839a1bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bece28b096a82bf2a9a273ce43b3122839a1bcb", "html_url": "https://github.com/rust-lang/rust/commit/5bece28b096a82bf2a9a273ce43b3122839a1bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bece28b096a82bf2a9a273ce43b3122839a1bcb/comments", "author": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ogoffart", "id": 959326, "node_id": "MDQ6VXNlcjk1OTMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/959326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ogoffart", "html_url": "https://github.com/ogoffart", "followers_url": "https://api.github.com/users/ogoffart/followers", "following_url": "https://api.github.com/users/ogoffart/following{/other_user}", "gists_url": "https://api.github.com/users/ogoffart/gists{/gist_id}", "starred_url": "https://api.github.com/users/ogoffart/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ogoffart/subscriptions", "organizations_url": "https://api.github.com/users/ogoffart/orgs", "repos_url": "https://api.github.com/users/ogoffart/repos", "events_url": "https://api.github.com/users/ogoffart/events{/privacy}", "received_events_url": "https://api.github.com/users/ogoffart/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ee689726f40bceb39bfae85a1e9965b3d46012a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee689726f40bceb39bfae85a1e9965b3d46012a", "html_url": "https://github.com/rust-lang/rust/commit/5ee689726f40bceb39bfae85a1e9965b3d46012a"}], "stats": {"total": 88, "additions": 19, "deletions": 69}, "files": [{"sha": "5c6c158d46e3a702cf91bd1d8d507c31da1521c8", "filename": "compiler/rustc_mir/src/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bece28b096a82bf2a9a273ce43b3122839a1bcb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bece28b096a82bf2a9a273ce43b3122839a1bcb/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funinhabited_enum_branching.rs?ref=5bece28b096a82bf2a9a273ce43b3122839a1bcb", "patch": "@@ -24,6 +24,7 @@ fn get_discriminant_local(terminator: &TerminatorKind<'_>) -> Option<Local> {\n /// discriminant is read from. Otherwise, returns None.\n fn get_switched_on_type<'tcx>(\n     block_data: &BasicBlockData<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n     body: &Body<'tcx>,\n ) -> Option<Ty<'tcx>> {\n     let terminator = block_data.terminator();\n@@ -36,12 +37,9 @@ fn get_switched_on_type<'tcx>(\n         if let Some(StatementKind::Assign(box (l, Rvalue::Discriminant(place)))) = stmt_before_term\n         {\n             if l.as_local() == Some(local) {\n-                if let Some(r_local) = place.as_local() {\n-                    let ty = body.local_decls[r_local].ty;\n-\n-                    if ty.is_enum() {\n-                        return Some(ty);\n-                    }\n+                let ty = place.ty(body, tcx).ty;\n+                if ty.is_enum() {\n+                    return Some(ty);\n                 }\n             }\n         }\n@@ -86,7 +84,7 @@ impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n             trace!(\"processing block {:?}\", bb);\n \n             let discriminant_ty =\n-                if let Some(ty) = get_switched_on_type(&body.basic_blocks()[bb], body) {\n+                if let Some(ty) = get_switched_on_type(&body.basic_blocks()[bb], tcx, body) {\n                     ty\n                 } else {\n                     continue;"}, {"sha": "373be9f174b2d2514e00a713f21db5229a16e75b", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 10, "deletions": 60, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5bece28b096a82bf2a9a273ce43b3122839a1bcb/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5bece28b096a82bf2a9a273ce43b3122839a1bcb/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=5bece28b096a82bf2a9a273ce43b3122839a1bcb", "patch": "@@ -30,7 +30,7 @@ fn main() -> () {\n         StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n         _4 = &(_1.1: Test1);             // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n         _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n-        switchInt(move _5) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n+        switchInt(move _5) -> [2_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n     }\n \n     bb1: {\n@@ -44,35 +44,10 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _3 = &(*_8);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n         StorageDead(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n-        goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n+        goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n     }\n \n     bb2: {\n-        _3 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n-                                         // mir::Constant\n-                                         // + span: $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n-        goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n-    }\n-\n-    bb3: {\n-        StorageLive(_6);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n-        _6 = const \"B(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n-                                         // mir::Constant\n-                                         // + span: $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n-        _3 = &(*_6);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n-        StorageDead(_6);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:33: 23:34\n-        goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n-    }\n-\n-    bb4: {\n         StorageLive(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n         _7 = const \"C\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n                                          // ty::Const\n@@ -83,18 +58,18 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _3 = &(*_7);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n         StorageDead(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n-        goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n+        goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n     }\n \n-    bb5: {\n+    bb3: {\n         StorageDead(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:26:6: 26:7\n         StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:26:6: 26:7\n         StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n         _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n-        switchInt(move _10) -> [0_isize: bb7, 1_isize: bb8, 2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n+        switchInt(move _10) -> [2_isize: bb5, otherwise: bb4]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n     }\n \n-    bb6: {\n+    bb4: {\n         StorageLive(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n         _13 = const \"D\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n                                          // ty::Const\n@@ -105,35 +80,10 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n         StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n-        goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n-    }\n-\n-    bb7: {\n-        _9 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n-                                         // mir::Constant\n-                                         // + span: $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n-        goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n+        goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n     }\n \n-    bb8: {\n-        StorageLive(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n-        _11 = const \"B(Empty)\";          // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n-                                         // ty::Const\n-                                         // + ty: &str\n-                                         // + val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 })\n-                                         // mir::Constant\n-                                         // + span: $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n-        _9 = &(*_11);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n-        StorageDead(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:33: 30:34\n-        goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n-    }\n-\n-    bb9: {\n+    bb5: {\n         StorageLive(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n         _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                          // ty::Const\n@@ -144,10 +94,10 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n         StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24\n-        goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n+        goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n     }\n \n-    bb10: {\n+    bb6: {\n         StorageDead(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:33:6: 33:7\n         _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:18:11: 34:2\n         StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:34:1: 34:2"}, {"sha": "f9488bae4c836ee341812a7ec1841a467e8c6fb4", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bece28b096a82bf2a9a273ce43b3122839a1bcb/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5bece28b096a82bf2a9a273ce43b3122839a1bcb/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=5bece28b096a82bf2a9a273ce43b3122839a1bcb", "patch": "@@ -31,7 +31,8 @@\n           StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n           _4 = &(_1.1: Test1);             // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n           _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n-          switchInt(move _5) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n+-         switchInt(move _5) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n++         switchInt(move _5) -> [2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n       }\n   \n       bb1: {\n@@ -92,7 +93,8 @@\n           StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:26:6: 26:7\n           StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n           _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n-          switchInt(move _10) -> [0_isize: bb7, 1_isize: bb8, 2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n+-         switchInt(move _10) -> [0_isize: bb7, 1_isize: bb8, 2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n++         switchInt(move _10) -> [2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n       }\n   \n       bb6: {"}]}