{"sha": "5b90fe1c3094050eecbb7be7440b398e98d0caa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOTBmZTFjMzA5NDA1MGVlY2JiN2JlNzQ0MGIzOThlOThkMGNhYTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-01-13T02:20:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-13T02:20:27Z"}, "message": "Rollup merge of #80935 - pierwill:rustc_middle-levelandsource, r=petrochenkov\n\nRename `rustc_middle::lint::LevelSource` to `LevelAndSource`\n\nThis continues work in https://github.com/rust-lang/rust/pull/80274 to improve code readability.\n\nThis naming follows a pattern seen elsewhere in the compiler (e.g. [`rustc_middle::ty::TypeAndMut`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeAndMut.html)).", "tree": {"sha": "2b9d29804bf5a237f30c0d7ea6181a57dbe99dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9d29804bf5a237f30c0d7ea6181a57dbe99dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b90fe1c3094050eecbb7be7440b398e98d0caa2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf/ljrCRBK7hj4Ov3rIwAAdHIIABOnwrpqLLSuZfamZq9SigJX\nSH1JWIiEX0VUwdMq9tbVgb92ZqwK67pp+4HLwvUF6e0ijUjbnObXEa0QDTkpq0ke\nqP4z2yYMxlvlmuq4OKuklfQ1y59UfhHtObO3chB8Tln3B+kut8igKV9yMRYZxP9n\nAFHARPZN8iXx6/Y+LOLv4OGTVgESA9SLFb1BZ6dUWKo5jIknMZLJhOnms/r73nZ2\nPe9B1pG6VwzzVN9Mz19+w1CZpTyFEDvXGKbDSt14Rn/NHZPDkPPeGhafoeEXgyKN\n5wBhpM0E8sk0H5ItrZU5LKGyZvcJBBUIupNsk6XNzZwZjtU7efvklgUGu8WUxik=\n=gFQx\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b9d29804bf5a237f30c0d7ea6181a57dbe99dc5\nparent c64d3f0afccc3a8d67eb1fd01b287b77192108b4\nparent 2e3ab43f5c3904ac1e0c1c430d76b343e194730c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1610504427 +0100\ncommitter GitHub <noreply@github.com> 1610504427 +0100\n\nRollup merge of #80935 - pierwill:rustc_middle-levelandsource, r=petrochenkov\n\nRename `rustc_middle::lint::LevelSource` to `LevelAndSource`\n\nThis continues work in https://github.com/rust-lang/rust/pull/80274 to improve code readability.\n\nThis naming follows a pattern seen elsewhere in the compiler (e.g. [`rustc_middle::ty::TypeAndMut`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeAndMut.html)).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b90fe1c3094050eecbb7be7440b398e98d0caa2", "html_url": "https://github.com/rust-lang/rust/commit/5b90fe1c3094050eecbb7be7440b398e98d0caa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b90fe1c3094050eecbb7be7440b398e98d0caa2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c64d3f0afccc3a8d67eb1fd01b287b77192108b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64d3f0afccc3a8d67eb1fd01b287b77192108b4", "html_url": "https://github.com/rust-lang/rust/commit/c64d3f0afccc3a8d67eb1fd01b287b77192108b4"}, {"sha": "2e3ab43f5c3904ac1e0c1c430d76b343e194730c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3ab43f5c3904ac1e0c1c430d76b343e194730c", "html_url": "https://github.com/rust-lang/rust/commit/2e3ab43f5c3904ac1e0c1c430d76b343e194730c"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "37bdc878b16cdbd55d2c027dbdae8bab001700d8", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b90fe1c3094050eecbb7be7440b398e98d0caa2/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b90fe1c3094050eecbb7be7440b398e98d0caa2/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=5b90fe1c3094050eecbb7be7440b398e98d0caa2", "patch": "@@ -10,7 +10,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::map::Map;\n-use rustc_middle::lint::LevelSource;\n+use rustc_middle::lint::LevelAndSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::lint::{\n     struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet,\n@@ -106,9 +106,9 @@ impl<'s> LintLevelsBuilder<'s> {\n     /// diagnostic with no change to `specs`.\n     fn insert_spec(\n         &mut self,\n-        specs: &mut FxHashMap<LintId, LevelSource>,\n+        specs: &mut FxHashMap<LintId, LevelAndSource>,\n         id: LintId,\n-        (level, src): LevelSource,\n+        (level, src): LevelAndSource,\n     ) {\n         // Setting to a non-forbid level is an error if the lint previously had\n         // a forbid level. Note that this is not necessarily true even with a"}, {"sha": "80c87dddd5614888eb329dc5a8fea11fc19f8c40", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b90fe1c3094050eecbb7be7440b398e98d0caa2/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b90fe1c3094050eecbb7be7440b398e98d0caa2/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=5b90fe1c3094050eecbb7be7440b398e98d0caa2", "patch": "@@ -46,7 +46,7 @@ impl LintLevelSource {\n }\n \n /// A tuple of a lint level and its source.\n-pub type LevelSource = (Level, LintLevelSource);\n+pub type LevelAndSource = (Level, LintLevelSource);\n \n pub struct LintLevelSets {\n     pub list: Vec<LintSet>,\n@@ -57,11 +57,11 @@ pub enum LintSet {\n     CommandLine {\n         // -A,-W,-D flags, a `Symbol` for the flag itself and `Level` for which\n         // flag.\n-        specs: FxHashMap<LintId, LevelSource>,\n+        specs: FxHashMap<LintId, LevelAndSource>,\n     },\n \n     Node {\n-        specs: FxHashMap<LintId, LevelSource>,\n+        specs: FxHashMap<LintId, LevelAndSource>,\n         parent: u32,\n     },\n }\n@@ -75,9 +75,9 @@ impl LintLevelSets {\n         &self,\n         lint: &'static Lint,\n         idx: u32,\n-        aux: Option<&FxHashMap<LintId, LevelSource>>,\n+        aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n         sess: &Session,\n-    ) -> LevelSource {\n+    ) -> LevelAndSource {\n         let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n@@ -113,7 +113,7 @@ impl LintLevelSets {\n         &self,\n         id: LintId,\n         mut idx: u32,\n-        aux: Option<&FxHashMap<LintId, LevelSource>>,\n+        aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n     ) -> (Option<Level>, LintLevelSource) {\n         if let Some(specs) = aux {\n             if let Some(&(level, src)) = specs.get(&id) {\n@@ -157,7 +157,7 @@ impl LintLevelMap {\n         lint: &'static Lint,\n         id: HirId,\n         session: &Session,\n-    ) -> Option<LevelSource> {\n+    ) -> Option<LevelAndSource> {\n         self.id_to_set.get(&id).map(|idx| self.sets.get_lint_level(lint, *idx, None, session))\n     }\n }"}]}