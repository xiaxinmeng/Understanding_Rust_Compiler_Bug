{"sha": "2ad56d5c9031636c1509f4417e88099a49405b4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZDU2ZDVjOTAzMTYzNmMxNTA5ZjQ0MTdlODgwOTlhNDk0MDViNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-22T05:19:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-22T05:19:48Z"}, "message": "Auto merge of #85166 - mbhall88:file-prefix, r=dtolnay\n\nadd file_prefix method to std::path\n\nThis is an initial implementation of `std::path::Path::file_prefix`. It is effectively a \"left\" variant of the existing [`file_stem`](https://doc.rust-lang.org/std/path/struct.Path.html#method.file_stem) method. An illustration of the difference is\n\n```rust\nuse std::path::Path;\n\nlet path = Path::new(\"foo.tar.gz\");\nassert_eq!(path.file_stem(), Some(\"foo.tar\"));\nassert_eq!(path.file_prefix(), Some(\"foo\"));\n```\n\nIn my own development, I generally find I almost always want the prefix, rather than the stem, so I thought it might be best to suggest it's addition to libstd.\n\nOf course, as this is my first contribution, I expect there is probably more work that needs to be done. Additionally, if the libstd team feel this isn't appropriate then so be it.\n\nThere has been some [discussion about this on Zulip](https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/file_lstem/near/238076313) and a user there suggested I open a PR to see whether someone in the libstd team thinks it is worth pursuing.", "tree": {"sha": "365f66542bcc32a01533bd522669f0dd0dc2b87a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/365f66542bcc32a01533bd522669f0dd0dc2b87a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ad56d5c9031636c1509f4417e88099a49405b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad56d5c9031636c1509f4417e88099a49405b4e", "html_url": "https://github.com/rust-lang/rust/commit/2ad56d5c9031636c1509f4417e88099a49405b4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ad56d5c9031636c1509f4417e88099a49405b4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50731df24e584e8ebc0097497169b431c005bf86", "url": "https://api.github.com/repos/rust-lang/rust/commits/50731df24e584e8ebc0097497169b431c005bf86", "html_url": "https://github.com/rust-lang/rust/commit/50731df24e584e8ebc0097497169b431c005bf86"}, {"sha": "51cf318dbcdd38d6a7478413513a72097d9622c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/51cf318dbcdd38d6a7478413513a72097d9622c3", "html_url": "https://github.com/rust-lang/rust/commit/51cf318dbcdd38d6a7478413513a72097d9622c3"}], "stats": {"total": 462, "additions": 372, "deletions": 90}, "files": [{"sha": "2a9c361c18afc03ec06972fb8d5af6938d34864e", "filename": "library/std/src/path.rs", "status": "modified", "additions": 62, "deletions": 3, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2ad56d5c9031636c1509f4417e88099a49405b4e/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad56d5c9031636c1509f4417e88099a49405b4e/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=2ad56d5c9031636c1509f4417e88099a49405b4e", "patch": "@@ -315,7 +315,7 @@ fn has_physical_root(s: &[u8], prefix: Option<Prefix<'_>>) -> bool {\n }\n \n // basic workhorse for splitting stem and extension\n-fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n+fn rsplit_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n     if os_str_as_u8_slice(file) == b\"..\" {\n         return (Some(file), None);\n     }\n@@ -334,6 +334,25 @@ fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {\n     }\n }\n \n+fn split_file_at_dot(file: &OsStr) -> (&OsStr, Option<&OsStr>) {\n+    let slice = os_str_as_u8_slice(file);\n+    if slice == b\"..\" {\n+        return (file, None);\n+    }\n+\n+    // The unsafety here stems from converting between &OsStr and &[u8]\n+    // and back. This is safe to do because (1) we only look at ASCII\n+    // contents of the encoding and (2) new &OsStr values are produced\n+    // only from ASCII-bounded slices of existing &OsStr values.\n+    let i = match slice[1..].iter().position(|b| *b == b'.') {\n+        Some(i) => i + 1,\n+        None => return (file, None),\n+    };\n+    let before = &slice[..i];\n+    let after = &slice[i + 1..];\n+    unsafe { (u8_slice_as_os_str(before), Some(u8_slice_as_os_str(after))) }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // The core iterators\n ////////////////////////////////////////////////////////////////////////////////\n@@ -2213,9 +2232,49 @@ impl Path {\n     /// assert_eq!(\"foo\", Path::new(\"foo.rs\").file_stem().unwrap());\n     /// assert_eq!(\"foo.tar\", Path::new(\"foo.tar.gz\").file_stem().unwrap());\n     /// ```\n+    ///\n+    /// # See Also\n+    /// This method is similar to [`Path::file_prefix`], which extracts the portion of the file name\n+    /// before the *first* `.`\n+    ///\n+    /// [`Path::file_prefix`]: Path::file_prefix\n+    ///\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn file_stem(&self) -> Option<&OsStr> {\n-        self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.or(after))\n+        self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.or(after))\n+    }\n+\n+    /// Extracts the prefix of [`self.file_name`].\n+    ///\n+    /// The prefix is:\n+    ///\n+    /// * [`None`], if there is no file name;\n+    /// * The entire file name if there is no embedded `.`;\n+    /// * The portion of the file name before the first non-beginning `.`;\n+    /// * The entire file name if the file name begins with `.` and has no other `.`s within;\n+    /// * The portion of the file name before the second `.` if the file name begins with `.`\n+    ///\n+    /// [`self.file_name`]: Path::file_name\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(path_file_prefix)]\n+    /// use std::path::Path;\n+    ///\n+    /// assert_eq!(\"foo\", Path::new(\"foo.rs\").file_prefix().unwrap());\n+    /// assert_eq!(\"foo\", Path::new(\"foo.tar.gz\").file_prefix().unwrap());\n+    /// ```\n+    ///\n+    /// # See Also\n+    /// This method is similar to [`Path::file_stem`], which extracts the portion of the file name\n+    /// before the *last* `.`\n+    ///\n+    /// [`Path::file_stem`]: Path::file_stem\n+    ///\n+    #[unstable(feature = \"path_file_prefix\", issue = \"86319\")]\n+    pub fn file_prefix(&self) -> Option<&OsStr> {\n+        self.file_name().map(split_file_at_dot).and_then(|(before, _after)| Some(before))\n     }\n \n     /// Extracts the extension of [`self.file_name`], if possible.\n@@ -2239,7 +2298,7 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn extension(&self) -> Option<&OsStr> {\n-        self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.and(after))\n+        self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.and(after))\n     }\n \n     /// Creates an owned [`PathBuf`] with `path` adjoined to `self`."}, {"sha": "ce23cf6cd21b9adb4be00afa9d0acda7d87b4db3", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 310, "deletions": 87, "changes": 397, "blob_url": "https://github.com/rust-lang/rust/blob/2ad56d5c9031636c1509f4417e88099a49405b4e/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad56d5c9031636c1509f4417e88099a49405b4e/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=2ad56d5c9031636c1509f4417e88099a49405b4e", "patch": "@@ -5,7 +5,7 @@ use crate::rc::Rc;\n use crate::sync::Arc;\n use core::hint::black_box;\n \n-macro_rules! t(\n+macro_rules! t (\n     ($path:expr, iter: $iter:expr) => (\n         {\n             let path = Path::new($path);\n@@ -75,15 +75,33 @@ macro_rules! t(\n         }\n     );\n \n+    ($path:expr, file_prefix: $file_prefix:expr, extension: $extension:expr) => (\n+        {\n+            let path = Path::new($path);\n+\n+            let prefix = path.file_prefix().map(|p| p.to_str().unwrap());\n+            let exp_prefix: Option<&str> = $file_prefix;\n+            assert!(prefix == exp_prefix, \"file_prefix: Expected {:?}, found {:?}\",\n+                    exp_prefix, prefix);\n+\n+            let ext = path.extension().map(|p| p.to_str().unwrap());\n+            let exp_ext: Option<&str> = $extension;\n+            assert!(ext == exp_ext, \"extension: Expected {:?}, found {:?}\",\n+                    exp_ext, ext);\n+        }\n+    );\n+\n     ($path:expr, iter: $iter:expr,\n                  has_root: $has_root:expr, is_absolute: $is_absolute:expr,\n                  parent: $parent:expr, file_name: $file:expr,\n-                 file_stem: $file_stem:expr, extension: $extension:expr) => (\n+                 file_stem: $file_stem:expr, extension: $extension:expr,\n+                 file_prefix: $file_prefix:expr) => (\n         {\n             t!($path, iter: $iter);\n             t!($path, has_root: $has_root, is_absolute: $is_absolute);\n             t!($path, parent: $parent, file_name: $file);\n             t!($path, file_stem: $file_stem, extension: $extension);\n+            t!($path, file_prefix: $file_prefix, extension: $extension);\n         }\n     );\n );\n@@ -118,7 +136,8 @@ pub fn test_decompositions_unix() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo\",\n@@ -128,7 +147,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"/\",\n@@ -138,7 +158,8 @@ pub fn test_decompositions_unix() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"/foo\",\n@@ -148,7 +169,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/\",\n@@ -158,7 +180,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"/foo/\",\n@@ -168,7 +191,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/bar\",\n@@ -178,7 +202,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"/foo/bar\",\n@@ -188,7 +213,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"///foo///\",\n@@ -198,7 +224,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"///foo///bar\",\n@@ -208,7 +235,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"///foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"./.\",\n@@ -218,7 +246,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"/..\",\n@@ -228,7 +257,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"/\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"../\",\n@@ -238,7 +268,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo/.\",\n@@ -248,7 +279,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/..\",\n@@ -258,7 +290,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo/./\",\n@@ -268,7 +301,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/./bar\",\n@@ -278,7 +312,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"foo/../\",\n@@ -288,7 +323,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo/../bar\",\n@@ -298,7 +334,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"foo/..\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"./a\",\n@@ -308,7 +345,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\".\"),\n     file_name: Some(\"a\"),\n     file_stem: Some(\"a\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"a\")\n     );\n \n     t!(\".\",\n@@ -318,7 +356,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"./\",\n@@ -328,7 +367,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"a/b\",\n@@ -338,7 +378,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"a\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n     );\n \n     t!(\"a//b\",\n@@ -348,7 +389,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"a\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n     );\n \n     t!(\"a/./b\",\n@@ -358,7 +400,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"a\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n     );\n \n     t!(\"a/b/c\",\n@@ -368,7 +411,8 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"a/b\"),\n     file_name: Some(\"c\"),\n     file_stem: Some(\"c\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"c\")\n     );\n \n     t!(\".foo\",\n@@ -378,7 +422,41 @@ pub fn test_decompositions_unix() {\n     parent: Some(\"\"),\n     file_name: Some(\".foo\"),\n     file_stem: Some(\".foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\".foo\")\n+    );\n+\n+    t!(\"a/.foo\",\n+    iter: [\"a\", \".foo\"],\n+    has_root: false,\n+    is_absolute: false,\n+    parent: Some(\"a\"),\n+    file_name: Some(\".foo\"),\n+    file_stem: Some(\".foo\"),\n+    extension: None,\n+    file_prefix: Some(\".foo\")\n+    );\n+\n+    t!(\"a/.rustfmt.toml\",\n+    iter: [\"a\", \".rustfmt.toml\"],\n+    has_root: false,\n+    is_absolute: false,\n+    parent: Some(\"a\"),\n+    file_name: Some(\".rustfmt.toml\"),\n+    file_stem: Some(\".rustfmt\"),\n+    extension: Some(\"toml\"),\n+    file_prefix: Some(\".rustfmt\")\n+    );\n+\n+    t!(\"a/.x.y.z\",\n+    iter: [\"a\", \".x.y.z\"],\n+    has_root: false,\n+    is_absolute: false,\n+    parent: Some(\"a\"),\n+    file_name: Some(\".x.y.z\"),\n+    file_stem: Some(\".x.y\"),\n+    extension: Some(\"z\"),\n+    file_prefix: Some(\".x\")\n     );\n }\n \n@@ -392,7 +470,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo\",\n@@ -402,7 +481,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"/\",\n@@ -412,7 +492,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\",\n@@ -422,7 +503,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"c:\",\n@@ -432,7 +514,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"c:\\\\\",\n@@ -442,7 +525,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"c:/\",\n@@ -452,7 +536,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"/foo\",\n@@ -462,7 +547,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"/\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/\",\n@@ -472,7 +558,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"/foo/\",\n@@ -482,7 +569,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"/\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/bar\",\n@@ -492,7 +580,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"/foo/bar\",\n@@ -502,7 +591,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"/foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"///foo///\",\n@@ -512,7 +602,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"/\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"///foo///bar\",\n@@ -522,7 +613,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"///foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"./.\",\n@@ -532,7 +624,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"/..\",\n@@ -542,7 +635,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"/\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"../\",\n@@ -552,7 +646,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo/.\",\n@@ -562,7 +657,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/..\",\n@@ -572,7 +668,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"foo\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo/./\",\n@@ -582,7 +679,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\"),\n     file_name: Some(\"foo\"),\n     file_stem: Some(\"foo\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"foo/./bar\",\n@@ -592,7 +690,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"foo\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"foo/../\",\n@@ -602,7 +701,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"foo\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"foo/../bar\",\n@@ -612,7 +712,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"foo/..\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"./a\",\n@@ -622,7 +723,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\".\"),\n     file_name: Some(\"a\"),\n     file_stem: Some(\"a\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"a\")\n     );\n \n     t!(\".\",\n@@ -632,7 +734,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"./\",\n@@ -642,7 +745,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\"),\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"a/b\",\n@@ -652,7 +756,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"a\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n     );\n \n     t!(\"a//b\",\n@@ -662,7 +767,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"a\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n     );\n \n     t!(\"a/./b\",\n@@ -672,7 +778,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"a\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n     );\n \n     t!(\"a/b/c\",\n@@ -682,7 +789,9 @@ pub fn test_decompositions_windows() {\n        parent: Some(\"a/b\"),\n        file_name: Some(\"c\"),\n        file_stem: Some(\"c\"),\n-       extension: None);\n+       extension: None,\n+       file_prefix: Some(\"c\")\n+    );\n \n     t!(\"a\\\\b\\\\c\",\n     iter: [\"a\", \"b\", \"c\"],\n@@ -691,7 +800,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"a\\\\b\"),\n     file_name: Some(\"c\"),\n     file_stem: Some(\"c\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"c\")\n     );\n \n     t!(\"\\\\a\",\n@@ -701,7 +811,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\"),\n     file_name: Some(\"a\"),\n     file_stem: Some(\"a\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"a\")\n     );\n \n     t!(\"c:\\\\foo.txt\",\n@@ -711,7 +822,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"c:\\\\\"),\n     file_name: Some(\"foo.txt\"),\n     file_stem: Some(\"foo\"),\n-    extension: Some(\"txt\")\n+    extension: Some(\"txt\"),\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"\\\\\\\\server\\\\share\\\\foo.txt\",\n@@ -721,7 +833,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\\\\server\\\\share\\\\\"),\n     file_name: Some(\"foo.txt\"),\n     file_stem: Some(\"foo\"),\n-    extension: Some(\"txt\")\n+    extension: Some(\"txt\"),\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"\\\\\\\\server\\\\share\",\n@@ -731,7 +844,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\server\",\n@@ -741,7 +855,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\"),\n     file_name: Some(\"server\"),\n     file_stem: Some(\"server\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"server\")\n     );\n \n     t!(\"\\\\\\\\?\\\\bar\\\\foo.txt\",\n@@ -751,7 +866,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\\\\?\\\\bar\\\\\"),\n     file_name: Some(\"foo.txt\"),\n     file_stem: Some(\"foo\"),\n-    extension: Some(\"txt\")\n+    extension: Some(\"txt\"),\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"\\\\\\\\?\\\\bar\",\n@@ -761,7 +877,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\?\\\\\",\n@@ -771,7 +888,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\?\\\\UNC\\\\server\\\\share\\\\foo.txt\",\n@@ -781,7 +899,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\\\\?\\\\UNC\\\\server\\\\share\\\\\"),\n     file_name: Some(\"foo.txt\"),\n     file_stem: Some(\"foo\"),\n-    extension: Some(\"txt\")\n+    extension: Some(\"txt\"),\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"\\\\\\\\?\\\\UNC\\\\server\",\n@@ -791,7 +910,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\?\\\\UNC\\\\\",\n@@ -801,7 +921,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\?\\\\C:\\\\foo.txt\",\n@@ -811,7 +932,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\\\\?\\\\C:\\\\\"),\n     file_name: Some(\"foo.txt\"),\n     file_stem: Some(\"foo\"),\n-    extension: Some(\"txt\")\n+    extension: Some(\"txt\"),\n+    file_prefix: Some(\"foo\")\n     );\n \n     t!(\"\\\\\\\\?\\\\C:\\\\\",\n@@ -821,7 +943,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\?\\\\C:\",\n@@ -831,7 +954,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\?\\\\foo/bar\",\n@@ -841,7 +965,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\?\\\\C:/foo\",\n@@ -851,7 +976,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\.\\\\foo\\\\bar\",\n@@ -861,7 +987,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\\\\.\\\\foo\\\\\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"\\\\\\\\.\\\\foo\",\n@@ -871,7 +998,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\.\\\\foo/bar\",\n@@ -881,7 +1009,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\\\\.\\\\foo/\"),\n     file_name: Some(\"bar\"),\n     file_stem: Some(\"bar\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"bar\")\n     );\n \n     t!(\"\\\\\\\\.\\\\foo\\\\bar/baz\",\n@@ -891,7 +1020,8 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\\\\.\\\\foo\\\\bar\"),\n     file_name: Some(\"baz\"),\n     file_stem: Some(\"baz\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"baz\")\n     );\n \n     t!(\"\\\\\\\\.\\\\\",\n@@ -901,7 +1031,8 @@ pub fn test_decompositions_windows() {\n     parent: None,\n     file_name: None,\n     file_stem: None,\n-    extension: None\n+    extension: None,\n+    file_prefix: None\n     );\n \n     t!(\"\\\\\\\\?\\\\a\\\\b\\\\\",\n@@ -911,7 +1042,52 @@ pub fn test_decompositions_windows() {\n     parent: Some(\"\\\\\\\\?\\\\a\\\\\"),\n     file_name: Some(\"b\"),\n     file_stem: Some(\"b\"),\n-    extension: None\n+    extension: None,\n+    file_prefix: Some(\"b\")\n+    );\n+\n+    t!(\"\\\\\\\\?\\\\C:\\\\foo.txt.zip\",\n+    iter: [\"\\\\\\\\?\\\\C:\", \"\\\\\", \"foo.txt.zip\"],\n+    has_root: true,\n+    is_absolute: true,\n+    parent: Some(\"\\\\\\\\?\\\\C:\\\\\"),\n+    file_name: Some(\"foo.txt.zip\"),\n+    file_stem: Some(\"foo.txt\"),\n+    extension: Some(\"zip\"),\n+    file_prefix: Some(\"foo\")\n+    );\n+\n+    t!(\"\\\\\\\\?\\\\C:\\\\.foo.txt.zip\",\n+    iter: [\"\\\\\\\\?\\\\C:\", \"\\\\\", \".foo.txt.zip\"],\n+    has_root: true,\n+    is_absolute: true,\n+    parent: Some(\"\\\\\\\\?\\\\C:\\\\\"),\n+    file_name: Some(\".foo.txt.zip\"),\n+    file_stem: Some(\".foo.txt\"),\n+    extension: Some(\"zip\"),\n+    file_prefix: Some(\".foo\")\n+    );\n+\n+    t!(\"\\\\\\\\?\\\\C:\\\\.foo\",\n+    iter: [\"\\\\\\\\?\\\\C:\", \"\\\\\", \".foo\"],\n+    has_root: true,\n+    is_absolute: true,\n+    parent: Some(\"\\\\\\\\?\\\\C:\\\\\"),\n+    file_name: Some(\".foo\"),\n+    file_stem: Some(\".foo\"),\n+    extension: None,\n+    file_prefix: Some(\".foo\")\n+    );\n+\n+    t!(\"a/.x.y.z\",\n+    iter: [\"a\", \".x.y.z\"],\n+    has_root: false,\n+    is_absolute: false,\n+    parent: Some(\"a\"),\n+    file_name: Some(\".x.y.z\"),\n+    file_stem: Some(\".x.y\"),\n+    extension: Some(\"z\"),\n+    file_prefix: Some(\".x\")\n     );\n }\n \n@@ -951,12 +1127,59 @@ pub fn test_stem_ext() {\n \n     t!(\"..\", file_stem: None, extension: None);\n \n+    t!(\".x.y.z\", file_stem: Some(\".x.y\"), extension: Some(\"z\"));\n+\n+    t!(\"..x.y.z\", file_stem: Some(\"..x.y\"), extension: Some(\"z\"));\n+\n     t!(\"\", file_stem: None, extension: None);\n }\n \n+#[test]\n+pub fn test_prefix_ext() {\n+    t!(\"foo\",\n+    file_prefix: Some(\"foo\"),\n+    extension: None\n+    );\n+\n+    t!(\"foo.\",\n+    file_prefix: Some(\"foo\"),\n+    extension: Some(\"\")\n+    );\n+\n+    t!(\".foo\",\n+    file_prefix: Some(\".foo\"),\n+    extension: None\n+    );\n+\n+    t!(\"foo.txt\",\n+    file_prefix: Some(\"foo\"),\n+    extension: Some(\"txt\")\n+    );\n+\n+    t!(\"foo.bar.txt\",\n+    file_prefix: Some(\"foo\"),\n+    extension: Some(\"txt\")\n+    );\n+\n+    t!(\"foo.bar.\",\n+    file_prefix: Some(\"foo\"),\n+    extension: Some(\"\")\n+    );\n+\n+    t!(\".\", file_prefix: None, extension: None);\n+\n+    t!(\"..\", file_prefix: None, extension: None);\n+\n+    t!(\".x.y.z\", file_prefix: Some(\".x\"), extension: Some(\"z\"));\n+\n+    t!(\"..x.y.z\", file_prefix: Some(\".\"), extension: Some(\"z\"));\n+\n+    t!(\"\", file_prefix: None, extension: None);\n+}\n+\n #[test]\n pub fn test_push() {\n-    macro_rules! tp(\n+    macro_rules! tp (\n         ($path:expr, $push:expr, $expected:expr) => ( {\n             let mut actual = PathBuf::from($path);\n             actual.push($push);\n@@ -1044,7 +1267,7 @@ pub fn test_push() {\n \n #[test]\n pub fn test_pop() {\n-    macro_rules! tp(\n+    macro_rules! tp (\n         ($path:expr, $expected:expr, $output:expr) => ( {\n             let mut actual = PathBuf::from($path);\n             let output = actual.pop();\n@@ -1098,7 +1321,7 @@ pub fn test_pop() {\n \n #[test]\n pub fn test_set_file_name() {\n-    macro_rules! tfn(\n+    macro_rules! tfn (\n             ($path:expr, $file:expr, $expected:expr) => ( {\n             let mut p = PathBuf::from($path);\n             p.set_file_name($file);\n@@ -1132,7 +1355,7 @@ pub fn test_set_file_name() {\n \n #[test]\n pub fn test_set_extension() {\n-    macro_rules! tfe(\n+    macro_rules! tfe (\n             ($path:expr, $ext:expr, $expected:expr, $output:expr) => ( {\n             let mut p = PathBuf::from($path);\n             let output = p.set_extension($ext);\n@@ -1194,7 +1417,7 @@ pub fn test_compare() {\n         s.finish()\n     }\n \n-    macro_rules! tc(\n+    macro_rules! tc (\n         ($path1:expr, $path2:expr, eq: $eq:expr,\n          starts_with: $starts_with:expr, ends_with: $ends_with:expr,\n          relative_from: $relative_from:expr) => ({"}]}