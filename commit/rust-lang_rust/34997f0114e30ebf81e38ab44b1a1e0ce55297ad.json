{"sha": "34997f0114e30ebf81e38ab44b1a1e0ce55297ad", "node_id": "C_kwDOAAsO6NoAKDM0OTk3ZjAxMTRlMzBlYmY4MWUzOGFiNDRiMWExZTBjZTU1Mjk3YWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-11T20:48:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-11T20:48:50Z"}, "message": "Rollup merge of #93888 - sunfishcode:sunfishcode/impl-asfd-for-ref, r=joshtriplett\n\nImplement `AsFd` for `&T` and `&mut T`.\n\nAdd implementations of `AsFd` for `&T` and `&mut T`, so that users can\nwrite code like this:\n\n```rust\npub fn fchown<F: AsFd>(fd: F, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {\n```\n\nwith `fd: F` rather than `fd: &F`.\n\nAnd similar for `AsHandle` and `AsSocket` on Windows.\n\nAlso, adjust the `fchown` example to pass the file by reference. The\ncode can work either way now, but passing by reference is more likely\nto be what users will want to do.\n\nThis is an alternative to #93869, and is a simpler way to achieve the\nsame goals: users don't need to pass borrowed-`BorrowedFd` arguments,\nand it prevents a pitfall in the case where users write `fd: F` instead\nof `fd: &F`.\n\nr? ```@joshtriplett```", "tree": {"sha": "4a15fdf261ed078dd3ed2713e3dee5022e0245b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a15fdf261ed078dd3ed2713e3dee5022e0245b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34997f0114e30ebf81e38ab44b1a1e0ce55297ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiBsuyCRBK7hj4Ov3rIwAABysIAHdH5jIeeqpBe5ojMRy1RRbV\nM3W6zIvntUxSDJ1xyMltXmxjDKjcwG3qdWPlmvPBdJIH2uHKJLLLXZak/PLchYZe\nyBap1TZynTwUVKhEshRC8xSW6BhUsn2ZXZIPzd9zsXxi+9ZMIrf0omC+bYy2Lkd4\npemkygxdo4WBq5QpI8GlHnMA/cIiK97dIHhCQuvRuKQx1LKZcy36z0HpWpbPEDOP\n3OVtmii9xFrHV6B/HOgXbOYmCkWbOCqy5NffJq418HE78YbqEekU0nJwXzMLXckc\n75WRB8DFa06nVOvABNw1olxXvJHIf5WLQmYKtcw4Gvbr2jwRNTKk12AdZhzp8RY=\n=OfS3\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a15fdf261ed078dd3ed2713e3dee5022e0245b7\nparent db7124839cde4cc53410833d9ffaca5f4acd2570\nparent 1f98ef7793dde6c3a3c216d55ae5858da7e0c34e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644612530 +0100\ncommitter GitHub <noreply@github.com> 1644612530 +0100\n\nRollup merge of #93888 - sunfishcode:sunfishcode/impl-asfd-for-ref, r=joshtriplett\n\nImplement `AsFd` for `&T` and `&mut T`.\n\nAdd implementations of `AsFd` for `&T` and `&mut T`, so that users can\nwrite code like this:\n\n```rust\npub fn fchown<F: AsFd>(fd: F, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {\n```\n\nwith `fd: F` rather than `fd: &F`.\n\nAnd similar for `AsHandle` and `AsSocket` on Windows.\n\nAlso, adjust the `fchown` example to pass the file by reference. The\ncode can work either way now, but passing by reference is more likely\nto be what users will want to do.\n\nThis is an alternative to #93869, and is a simpler way to achieve the\nsame goals: users don't need to pass borrowed-`BorrowedFd` arguments,\nand it prevents a pitfall in the case where users write `fd: F` instead\nof `fd: &F`.\n\nr? ```@joshtriplett```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34997f0114e30ebf81e38ab44b1a1e0ce55297ad", "html_url": "https://github.com/rust-lang/rust/commit/34997f0114e30ebf81e38ab44b1a1e0ce55297ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34997f0114e30ebf81e38ab44b1a1e0ce55297ad/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7124839cde4cc53410833d9ffaca5f4acd2570", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7124839cde4cc53410833d9ffaca5f4acd2570", "html_url": "https://github.com/rust-lang/rust/commit/db7124839cde4cc53410833d9ffaca5f4acd2570"}, {"sha": "1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e", "html_url": "https://github.com/rust-lang/rust/commit/1f98ef7793dde6c3a3c216d55ae5858da7e0c34e"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "71c660e7186751be890291f7d5d1127a1d23b850", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34997f0114e30ebf81e38ab44b1a1e0ce55297ad/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34997f0114e30ebf81e38ab44b1a1e0ce55297ad/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=34997f0114e30ebf81e38ab44b1a1e0ce55297ad", "patch": "@@ -200,6 +200,22 @@ pub trait AsFd {\n     fn as_fd(&self) -> BorrowedFd<'_>;\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsFd> AsFd for &T {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        T::as_fd(self)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsFd> AsFd for &mut T {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        T::as_fd(self)\n+    }\n+}\n+\n #[unstable(feature = \"io_safety\", issue = \"87074\")]\n impl AsFd for BorrowedFd<'_> {\n     #[inline]"}, {"sha": "75d65e6d5fc036bff10c39ab60f6cd2636b62a79", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34997f0114e30ebf81e38ab44b1a1e0ce55297ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34997f0114e30ebf81e38ab44b1a1e0ce55297ad/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=34997f0114e30ebf81e38ab44b1a1e0ce55297ad", "patch": "@@ -966,7 +966,7 @@ pub fn chown<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::\n ///\n /// fn main() -> std::io::Result<()> {\n ///     let f = std::fs::File::open(\"/file\")?;\n-///     fs::fchown(f, Some(0), Some(0))?;\n+///     fs::fchown(&f, Some(0), Some(0))?;\n ///     Ok(())\n /// }\n /// ```"}, {"sha": "8df6c54a4144e9f42c1314bbb07d12d333d16cdf", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34997f0114e30ebf81e38ab44b1a1e0ce55297ad/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34997f0114e30ebf81e38ab44b1a1e0ce55297ad/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=34997f0114e30ebf81e38ab44b1a1e0ce55297ad", "patch": "@@ -316,6 +316,22 @@ pub trait AsHandle {\n     fn as_handle(&self) -> BorrowedHandle<'_>;\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsHandle> AsHandle for &T {\n+    #[inline]\n+    fn as_handle(&self) -> BorrowedHandle<'_> {\n+        T::as_handle(self)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsHandle> AsHandle for &mut T {\n+    #[inline]\n+    fn as_handle(&self) -> BorrowedHandle<'_> {\n+        T::as_handle(self)\n+    }\n+}\n+\n impl AsHandle for BorrowedHandle<'_> {\n     #[inline]\n     fn as_handle(&self) -> BorrowedHandle<'_> {"}, {"sha": "2f13eb77a1b948519bb93e51ceda78e8cfe20f5c", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34997f0114e30ebf81e38ab44b1a1e0ce55297ad/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34997f0114e30ebf81e38ab44b1a1e0ce55297ad/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=34997f0114e30ebf81e38ab44b1a1e0ce55297ad", "patch": "@@ -210,6 +210,22 @@ pub trait AsSocket {\n     fn as_socket(&self) -> BorrowedSocket<'_>;\n }\n \n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsSocket> AsSocket for &T {\n+    #[inline]\n+    fn as_socket(&self) -> BorrowedSocket<'_> {\n+        T::as_socket(self)\n+    }\n+}\n+\n+#[unstable(feature = \"io_safety\", issue = \"87074\")]\n+impl<T: AsSocket> AsSocket for &mut T {\n+    #[inline]\n+    fn as_socket(&self) -> BorrowedSocket<'_> {\n+        T::as_socket(self)\n+    }\n+}\n+\n impl AsSocket for BorrowedSocket<'_> {\n     #[inline]\n     fn as_socket(&self) -> BorrowedSocket<'_> {"}]}