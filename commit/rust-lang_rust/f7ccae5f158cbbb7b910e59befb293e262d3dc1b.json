{"sha": "f7ccae5f158cbbb7b910e59befb293e262d3dc1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Y2NhZTVmMTU4Y2JiYjdiOTEwZTU5YmVmYjI5M2UyNjJkM2RjMWI=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-05-24T10:24:50Z"}, "committer": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-05-24T10:44:36Z"}, "message": "Rename functions in Ascii\n\nSome functions implemented for the Ascii struct have the same functionality as other functions implemented for the normal chars. For consistency, I think they should have the same name, so I renamed the functions in Ascii to match the names in the Char trait.\n\n* Renamed `to_lower` to `to_lowercase`\n* Renamed `to_upper` to `to_uppercase`\n* Renamed `is_alpha` to `is_alphabetic`\n* Renamed `is_alnum` to `is_alphanumeric`\n* Renamed `is_lower` to `is_lowercase`\n* Renamed `is_upper` to `is_uppercase`\n\n[breaking-change]", "tree": {"sha": "31e18fa685b98203f6290afd933f6fca8e1ceaf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31e18fa685b98203f6290afd933f6fca8e1ceaf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7ccae5f158cbbb7b910e59befb293e262d3dc1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ccae5f158cbbb7b910e59befb293e262d3dc1b", "html_url": "https://github.com/rust-lang/rust/commit/f7ccae5f158cbbb7b910e59befb293e262d3dc1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7ccae5f158cbbb7b910e59befb293e262d3dc1b/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf430147e35bbf902cf4539349621ed559d0ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf430147e35bbf902cf4539349621ed559d0ddb", "html_url": "https://github.com/rust-lang/rust/commit/6cf430147e35bbf902cf4539349621ed559d0ddb"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "83667fb518135180a6eca0c1f329234063b62e5e", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f7ccae5f158cbbb7b910e59befb293e262d3dc1b/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ccae5f158cbbb7b910e59befb293e262d3dc1b/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=f7ccae5f158cbbb7b910e59befb293e262d3dc1b", "patch": "@@ -39,15 +39,29 @@ impl Ascii {\n         self.chr as char\n     }\n \n-    /// Convert to lowercase.\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `to_lowercase`\"]\n     pub fn to_lower(self) -> Ascii {\n+        self.to_lowercase()\n+    }\n+\n+    /// Convert to lowercase.\n+    #[inline]\n+    pub fn to_lowercase(self) -> Ascii {\n         Ascii{chr: ASCII_LOWER_MAP[self.chr as uint]}\n     }\n \n-    /// Convert to uppercase.\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `to_uppercase`\"]\n     pub fn to_upper(self) -> Ascii {\n+        self.to_uppercase()\n+    }\n+\n+    /// Convert to uppercase.\n+    #[inline]\n+    pub fn to_uppercase(self) -> Ascii {\n         Ascii{chr: ASCII_UPPER_MAP[self.chr as uint]}\n     }\n \n@@ -59,9 +73,16 @@ impl Ascii {\n \n     // the following methods are like ctype, and the implementation is inspired by musl\n \n-    /// Check if the character is a letter (a-z, A-Z)\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `is_alphabetic`\"]\n     pub fn is_alpha(&self) -> bool {\n+        self.is_alphabetic()\n+    }\n+\n+    /// Check if the character is a letter (a-z, A-Z)\n+    #[inline]\n+    pub fn is_alphabetic(&self) -> bool {\n         (self.chr >= 0x41 && self.chr <= 0x5A) || (self.chr >= 0x61 && self.chr <= 0x7A)\n     }\n \n@@ -71,9 +92,16 @@ impl Ascii {\n         self.chr >= 0x30 && self.chr <= 0x39\n     }\n \n-    /// Check if the character is a letter or number\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `is_alphanumeric`\"]\n     pub fn is_alnum(&self) -> bool {\n+        self.is_alphanumeric()\n+    }\n+\n+    /// Check if the character is a letter or number\n+    #[inline]\n+    pub fn is_alphanumeric(&self) -> bool {\n         self.is_alpha() || self.is_digit()\n     }\n \n@@ -101,15 +129,29 @@ impl Ascii {\n         (self.chr - 0x20) < 0x5F\n     }\n \n-    /// Checks if the character is lowercase\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `is_lowercase`\"]\n     pub fn is_lower(&self) -> bool {\n+        self.is_lowercase()\n+    }\n+\n+    /// Checks if the character is lowercase\n+    #[inline]\n+    pub fn is_lowercase(&self) -> bool {\n         (self.chr - 'a' as u8) < 26\n     }\n \n-    /// Checks if the character is uppercase\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `is_uppercase`\"]\n     pub fn is_upper(&self) -> bool {\n+        self.is_uppercase()\n+    }\n+\n+    /// Checks if the character is uppercase\n+    #[inline]\n+    pub fn is_uppercase(&self) -> bool {\n         (self.chr - 'A' as u8) < 26\n     }\n "}]}