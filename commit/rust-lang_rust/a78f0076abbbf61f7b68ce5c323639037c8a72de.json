{"sha": "a78f0076abbbf61f7b68ce5c323639037c8a72de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OGYwMDc2YWJiYmY2MWY3YjY4Y2U1YzMyMzYzOTAzN2M4YTcyZGU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-16T13:56:27Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:48:34Z"}, "message": "Make resolve_ty_shallow return Ty", "tree": {"sha": "f2a5f46b348c6b32e6860523a4ed06547fbf4ea2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a5f46b348c6b32e6860523a4ed06547fbf4ea2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a78f0076abbbf61f7b68ce5c323639037c8a72de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a78f0076abbbf61f7b68ce5c323639037c8a72de", "html_url": "https://github.com/rust-lang/rust/commit/a78f0076abbbf61f7b68ce5c323639037c8a72de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a78f0076abbbf61f7b68ce5c323639037c8a72de/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1250ddc5cf58ff0a6bbf7c07e5bd9f7cc7db5a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/1250ddc5cf58ff0a6bbf7c07e5bd9f7cc7db5a09", "html_url": "https://github.com/rust-lang/rust/commit/1250ddc5cf58ff0a6bbf7c07e5bd9f7cc7db5a09"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "8cfc84b86349b5f537fdc842ce5ae4c656fcbc3b", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a78f0076abbbf61f7b68ce5c323639037c8a72de/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78f0076abbbf61f7b68ce5c323639037c8a72de/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=a78f0076abbbf61f7b68ce5c323639037c8a72de", "patch": "@@ -13,8 +13,6 @@\n //! to certain types. To record this, we use the union-find implementation from\n //! the `ena` crate, which is extracted from rustc.\n \n-use std::borrow::Cow;\n-\n use std::ops::Index;\n use std::sync::Arc;\n \n@@ -384,7 +382,7 @@ impl<'a> InferenceContext<'a> {\n         self.table.resolve_ty_as_possible(ty)\n     }\n \n-    fn resolve_ty_shallow<'b>(&mut self, ty: &'b Ty) -> Cow<'b, Ty> {\n+    fn resolve_ty_shallow(&mut self, ty: &Ty) -> Ty {\n         self.table.resolve_ty_shallow(ty)\n     }\n "}, {"sha": "c85c088f7a488b5fa7c48a410aa01db55b253e0f", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a78f0076abbbf61f7b68ce5c323639037c8a72de/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78f0076abbbf61f7b68ce5c323639037c8a72de/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=a78f0076abbbf61f7b68ce5c323639037c8a72de", "patch": "@@ -23,7 +23,7 @@ impl<'a> InferenceContext<'a> {\n         if to_ty.is_unknown() {\n             return true;\n         }\n-        let from_ty = self.resolve_ty_shallow(from_ty).into_owned();\n+        let from_ty = self.resolve_ty_shallow(from_ty);\n         let to_ty = self.resolve_ty_shallow(to_ty);\n         match self.coerce_inner(from_ty, &to_ty) {\n             Ok(_result) => {\n@@ -46,9 +46,7 @@ impl<'a> InferenceContext<'a> {\n     ///    least upper bound.\n     pub(super) fn coerce_merge_branch(&mut self, ty1: &Ty, ty2: &Ty) -> Ty {\n         let ty1 = self.resolve_ty_shallow(ty1);\n-        let ty1 = ty1.as_ref();\n         let ty2 = self.resolve_ty_shallow(ty2);\n-        let ty2 = ty2.as_ref();\n         // Special case: two function types. Try to coerce both to\n         // pointers to have a chance at getting a match. See\n         // https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/check/coercion.rs#L877-L916\n@@ -80,9 +78,9 @@ impl<'a> InferenceContext<'a> {\n         // type is a type variable and the new one is `!`, trying it the other\n         // way around first would mean we make the type variable `!`, instead of\n         // just marking it as possibly diverging.\n-        if self.coerce(ty2, ty1) {\n+        if self.coerce(&ty2, &ty1) {\n             ty1.clone()\n-        } else if self.coerce(ty1, ty2) {\n+        } else if self.coerce(&ty1, &ty2) {\n             ty2.clone()\n         } else {\n             // TODO record a type mismatch"}, {"sha": "278127c69b5c01d9f9f0379dde00de5e43ebf17e", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a78f0076abbbf61f7b68ce5c323639037c8a72de/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a78f0076abbbf61f7b68ce5c323639037c8a72de/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=a78f0076abbbf61f7b68ce5c323639037c8a72de", "patch": "@@ -1,6 +1,6 @@\n //! Unification and canonicalization logic.\n \n-use std::{borrow::Cow, fmt, mem, sync::Arc};\n+use std::{fmt, mem, sync::Arc};\n \n use chalk_ir::{\n     cast::Cast, fold::Fold, interner::HasInterner, zip::Zip, FloatTy, IntTy, TyVariableKind,\n@@ -340,11 +340,8 @@ impl<'a> InferenceTable<'a> {\n \n     /// If `ty` is a type variable with known type, returns that type;\n     /// otherwise, return ty.\n-    // FIXME this could probably just return Ty\n-    pub(crate) fn resolve_ty_shallow<'b>(&mut self, ty: &'b Ty) -> Cow<'b, Ty> {\n-        self.var_unification_table\n-            .normalize_ty_shallow(&Interner, ty)\n-            .map_or(Cow::Borrowed(ty), Cow::Owned)\n+    pub(crate) fn resolve_ty_shallow(&mut self, ty: &Ty) -> Ty {\n+        self.var_unification_table.normalize_ty_shallow(&Interner, ty).unwrap_or_else(|| ty.clone())\n     }\n \n     /// Resolves the type as far as currently possible, replacing type variables"}]}