{"sha": "c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5Y2YzYjNjYzRkMWQ0ZWVkMzU5YmU1NGYwOGJhMmI1ZmU5NjFiZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-22T13:35:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-22T13:35:51Z"}, "message": "auto merge of #16655 : pcwalton/rust/unboxed-closures-unboxing-shims, r=luqmana\n\nCloses #16591.\r\n\r\nr? @luqmana", "tree": {"sha": "669ce48a3bd9ad7ff747100e51eddf4399a0ef0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/669ce48a3bd9ad7ff747100e51eddf4399a0ef0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1", "html_url": "https://github.com/rust-lang/rust/commit/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9326ca91c9515ae1b1ba48c2a942d5bd65a3bab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9326ca91c9515ae1b1ba48c2a942d5bd65a3bab", "html_url": "https://github.com/rust-lang/rust/commit/b9326ca91c9515ae1b1ba48c2a942d5bd65a3bab"}, {"sha": "6049b628ad734dd49add077f81a22b713ed495de", "url": "https://api.github.com/repos/rust-lang/rust/commits/6049b628ad734dd49add077f81a22b713ed495de", "html_url": "https://github.com/rust-lang/rust/commit/6049b628ad734dd49add077f81a22b713ed495de"}], "stats": {"total": 93, "additions": 82, "deletions": 11}, "files": [{"sha": "d50b30c7545217c63ceac7ed8f2a63e70b1049c7", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1", "patch": "@@ -288,7 +288,7 @@ fn resolve_default_method_vtables(bcx: &Block,\n /// `Trait` so that a by-value self method can be called.\n pub fn trans_unboxing_shim(bcx: &Block,\n                            llshimmedfn: ValueRef,\n-                           method: &ty::Method,\n+                           fty: &ty::BareFnTy,\n                            method_id: ast::DefId,\n                            substs: subst::Substs)\n                            -> ValueRef {\n@@ -297,29 +297,29 @@ pub fn trans_unboxing_shim(bcx: &Block,\n     let tcx = bcx.tcx();\n \n     // Transform the self type to `Box<self_type>`.\n-    let self_type = *method.fty.sig.inputs.get(0);\n+    let self_type = *fty.sig.inputs.get(0);\n     let boxed_self_type = ty::mk_uniq(tcx, self_type);\n     let boxed_function_type = ty::FnSig {\n-        binder_id: method.fty.sig.binder_id,\n-        inputs: method.fty.sig.inputs.iter().enumerate().map(|(i, typ)| {\n+        binder_id: fty.sig.binder_id,\n+        inputs: fty.sig.inputs.iter().enumerate().map(|(i, typ)| {\n             if i == 0 {\n                 boxed_self_type\n             } else {\n                 *typ\n             }\n         }).collect(),\n-        output: method.fty.sig.output,\n+        output: fty.sig.output,\n         variadic: false,\n     };\n     let boxed_function_type = ty::BareFnTy {\n-        fn_style: method.fty.fn_style,\n-        abi: method.fty.abi,\n+        fn_style: fty.fn_style,\n+        abi: fty.abi,\n         sig: boxed_function_type,\n     };\n     let boxed_function_type =\n         ty::mk_bare_fn(tcx, boxed_function_type).subst(tcx, &substs);\n     let function_type =\n-        ty::mk_bare_fn(tcx, method.fty.clone()).subst(tcx, &substs);\n+        ty::mk_bare_fn(tcx, (*fty).clone()).subst(tcx, &substs);\n \n     let function_name = ty::with_path(tcx, method_id, |path| {\n         link::mangle_internal_name_by_path_and_seq(path, \"unboxing_shim\")"}, {"sha": "a9a308fc16d1b9d2a6e9d822f965cf62ffc0cae6", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1", "patch": "@@ -515,13 +515,65 @@ fn get_vtable(bcx: &Block,\n                         bcx,\n                         closure_def_id);\n \n-                let llfn = trans_fn_ref_with_vtables(\n+                let mut llfn = trans_fn_ref_with_vtables(\n                     bcx,\n                     closure_def_id,\n                     ExprId(0),\n-                    callee_substs,\n+                    callee_substs.clone(),\n                     VecPerParamSpace::empty());\n \n+                {\n+                    let unboxed_closures = bcx.tcx()\n+                                              .unboxed_closures\n+                                              .borrow();\n+                    let closure_info =\n+                        unboxed_closures.find(&closure_def_id)\n+                                        .expect(\"get_vtable(): didn't find \\\n+                                                 unboxed closure\");\n+                    if closure_info.kind == ty::FnOnceUnboxedClosureKind {\n+                        // Untuple the arguments and create an unboxing shim.\n+                        let mut new_inputs = vec![\n+                            ty::mk_unboxed_closure(bcx.tcx(),\n+                                                   closure_def_id,\n+                                                   ty::ReStatic)\n+                        ];\n+                        match ty::get(closure_info.closure_type\n+                                                  .sig\n+                                                  .inputs[0]).sty {\n+                            ty::ty_tup(ref elements) => {\n+                                for element in elements.iter() {\n+                                    new_inputs.push(*element)\n+                                }\n+                            }\n+                            ty::ty_nil => {}\n+                            _ => {\n+                                bcx.tcx().sess.bug(\"get_vtable(): closure \\\n+                                                    type wasn't a tuple\")\n+                            }\n+                        }\n+\n+                        let closure_type = ty::BareFnTy {\n+                            fn_style: closure_info.closure_type.fn_style,\n+                            abi: Rust,\n+                            sig: ty::FnSig {\n+                                binder_id: closure_info.closure_type\n+                                                       .sig\n+                                                       .binder_id,\n+                                inputs: new_inputs,\n+                                output: closure_info.closure_type.sig.output,\n+                                variadic: false,\n+                            },\n+                        };\n+                        debug!(\"get_vtable(): closure type is {}\",\n+                               closure_type.repr(bcx.tcx()));\n+                        llfn = trans_unboxing_shim(bcx,\n+                                                   llfn,\n+                                                   &closure_type,\n+                                                   closure_def_id,\n+                                                   callee_substs);\n+                    }\n+                }\n+\n                 (vec!(llfn)).move_iter()\n             }\n             _ => ccx.sess().bug(\"get_vtable: expected a static origin\"),\n@@ -603,7 +655,7 @@ fn emit_vtable_methods(bcx: &Block,\n                     if m.explicit_self == ty::ByValueExplicitSelfCategory {\n                         fn_ref = trans_unboxing_shim(bcx,\n                                                      fn_ref,\n-                                                     &*m,\n+                                                     &m.fty,\n                                                      m_id,\n                                                      substs.clone());\n                     }"}, {"sha": "0a7baa3ba369d21d16ba36d3a803953e19da5247", "filename": "src/test/run-pass/unboxed-closures-unboxing-shim.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1/src%2Ftest%2Frun-pass%2Funboxed-closures-unboxing-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1/src%2Ftest%2Frun-pass%2Funboxed-closures-unboxing-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-unboxing-shim.rs?ref=c9cf3b3cc4d1d4eed359be54f08ba2b5fe961bf1", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures, unboxed_closure_sugar)]\n+\n+use std::ops::FnOnce;\n+\n+fn main() {\n+    let task: Box<|: int| -> int> = box |: x| x;\n+    assert!(task.call_once((1234i,)) == 1234i);\n+}\n+"}]}