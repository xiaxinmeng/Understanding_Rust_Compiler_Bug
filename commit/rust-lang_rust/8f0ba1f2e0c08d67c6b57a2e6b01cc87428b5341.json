{"sha": "8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "node_id": "C_kwDOAAsO6NoAKDhmMGJhMWYyZTBjMDhkNjdjNmI1N2EyZTZiMDFjYzg3NDI4YjUzNDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-02T17:08:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-02T17:08:20Z"}, "message": "Auto merge of #10563 - nyurik:handle-all-fmt2, r=llogiq\n\nPartial no-op refactoring of #9948\n\nThis contains some prep work for #9948 to keep that change to the minimum, and make it easier to review it.\n\nThis should be a noop, but it has some tests from that PR discussion, and should help in the future with the corner case format handling.\n\ncc: `@Alexendoo` `@llogiq` `@xFrednet`  as the 3 people who reviewed the parent PR\n\n----\n\nchangelog: none", "tree": {"sha": "0767e1693da7cb67da2715740de5271e4a7709fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0767e1693da7cb67da2715740de5271e4a7709fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "html_url": "https://github.com/rust-lang/rust/commit/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d83c15d204ffed214d7dde3e66dd5624c0ba350", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d83c15d204ffed214d7dde3e66dd5624c0ba350", "html_url": "https://github.com/rust-lang/rust/commit/8d83c15d204ffed214d7dde3e66dd5624c0ba350"}, {"sha": "783879e6fe48b5bd776bf2b1c9314fda3e30447d", "url": "https://api.github.com/repos/rust-lang/rust/commits/783879e6fe48b5bd776bf2b1c9314fda3e30447d", "html_url": "https://github.com/rust-lang/rust/commit/783879e6fe48b5bd776bf2b1c9314fda3e30447d"}], "stats": {"total": 274, "additions": 239, "deletions": 35}, "files": [{"sha": "13a2770342781a3b5892cb0a5583a01184f39b6b", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "patch": "@@ -369,9 +369,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n                     }}\n                     todo!();\n                 }}\n-           \"#,\n-            context_import = context_import,\n-            name_upper = name_upper,\n+           \"#\n         );\n     } else {\n         let _: fmt::Result = writedoc!(\n@@ -385,9 +383,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n                 pub(super) fn check(cx: &{context_import}) {{\n                     todo!();\n                 }}\n-           \"#,\n-            context_import = context_import,\n-            name_upper = name_upper,\n+           \"#\n         );\n     }\n "}, {"sha": "95222a9acdfc53305efcf717d6f792a872bbe2f8", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "patch": "@@ -537,17 +537,13 @@ fn declare_deprecated(name: &str, path: &Path, reason: &str) -> io::Result<()> {\n             /// Nothing. This lint has been deprecated.\n             ///\n             /// ### Deprecation reason\n-            /// {}\n-            #[clippy::version = \\\"{}\\\"]\n-            pub {},\n-            \\\"{}\\\"\n+            /// {deprecation_reason}\n+            #[clippy::version = \\\"{version}\\\"]\n+            pub {name},\n+            \\\"{reason}\\\"\n         }}\n \n-        \",\n-        deprecation_reason,\n-        version,\n-        name,\n-        reason,\n+        \"\n     )\n }\n "}, {"sha": "423bfaf97965ea54b7951eb201f5825bd0afe070", "filename": "tests/ui/format_args_unfixable.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/tests%2Fui%2Fformat_args_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/tests%2Fui%2Fformat_args_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args_unfixable.rs?ref=8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::format_in_format_args, clippy::to_string_in_format_args)]\n+#![allow(unused)]\n #![allow(clippy::assertions_on_constants, clippy::eq_op, clippy::uninlined_format_args)]\n \n use std::io::{stdout, Error, ErrorKind, Write};\n@@ -57,3 +58,46 @@ fn main() {\n     my_macro!();\n     println!(\"error: {}\", my_other_macro!());\n }\n+\n+macro_rules! _internal {\n+    ($($args:tt)*) => {\n+        println!(\"{}\", format_args!($($args)*))\n+    };\n+}\n+\n+macro_rules! my_println2 {\n+   ($target:expr, $($args:tt)+) => {{\n+       if $target {\n+           _internal!($($args)+)\n+       }\n+    }};\n+}\n+\n+macro_rules! my_println2_args {\n+    ($target:expr, $($args:tt)+) => {{\n+       if $target {\n+           _internal!(\"foo: {}\", format_args!($($args)+))\n+       }\n+    }};\n+}\n+\n+fn test2() {\n+    let error = Error::new(ErrorKind::Other, \"bad thing\");\n+\n+    // None of these should be linted without the config change\n+    my_println2!(true, \"error: {}\", format!(\"something failed at {}\", Location::caller()));\n+    my_println2!(\n+        true,\n+        \"{}: {}\",\n+        error,\n+        format!(\"something failed at {}\", Location::caller())\n+    );\n+\n+    my_println2_args!(true, \"error: {}\", format!(\"something failed at {}\", Location::caller()));\n+    my_println2_args!(\n+        true,\n+        \"{}: {}\",\n+        error,\n+        format!(\"something failed at {}\", Location::caller())\n+    );\n+}"}, {"sha": "c1be48c3b726944b4693057885ef793ac1e7e6c9", "filename": "tests/ui/format_args_unfixable.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/tests%2Fui%2Fformat_args_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/tests%2Fui%2Fformat_args_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_args_unfixable.stderr?ref=8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "patch": "@@ -1,5 +1,5 @@\n error: `format!` in `println!` args\n-  --> $DIR/format_args_unfixable.rs:25:5\n+  --> $DIR/format_args_unfixable.rs:26:5\n    |\n LL |     println!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     println!(\"error: {}\", format!(\"something failed at {}\", Location::calle\n    = note: `-D clippy::format-in-format-args` implied by `-D warnings`\n \n error: `format!` in `println!` args\n-  --> $DIR/format_args_unfixable.rs:26:5\n+  --> $DIR/format_args_unfixable.rs:27:5\n    |\n LL |     println!(\"{}: {}\", error, format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |     println!(\"{}: {}\", error, format!(\"something failed at {}\", Location::c\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `println!` args\n-  --> $DIR/format_args_unfixable.rs:27:5\n+  --> $DIR/format_args_unfixable.rs:28:5\n    |\n LL |     println!(\"{:?}: {}\", error, format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     println!(\"{:?}: {}\", error, format!(\"something failed at {}\", Location:\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `println!` args\n-  --> $DIR/format_args_unfixable.rs:28:5\n+  --> $DIR/format_args_unfixable.rs:29:5\n    |\n LL |     println!(\"{{}}: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |     println!(\"{{}}: {}\", format!(\"something failed at {}\", Location::caller\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `println!` args\n-  --> $DIR/format_args_unfixable.rs:29:5\n+  --> $DIR/format_args_unfixable.rs:30:5\n    |\n LL |     println!(r#\"error: \"{}\"\"#, format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     println!(r#\"error: \"{}\"\"#, format!(\"something failed at {}\", Location::\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `println!` args\n-  --> $DIR/format_args_unfixable.rs:30:5\n+  --> $DIR/format_args_unfixable.rs:31:5\n    |\n LL |     println!(\"error: {}\", format!(r#\"something failed at \"{}\"\"#, Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     println!(\"error: {}\", format!(r#\"something failed at \"{}\"\"#, Location::\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `println!` args\n-  --> $DIR/format_args_unfixable.rs:31:5\n+  --> $DIR/format_args_unfixable.rs:32:5\n    |\n LL |     println!(\"error: {}\", format!(\"something failed at {} {0}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -63,7 +63,7 @@ LL |     println!(\"error: {}\", format!(\"something failed at {} {0}\", Location::c\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `format!` args\n-  --> $DIR/format_args_unfixable.rs:32:13\n+  --> $DIR/format_args_unfixable.rs:33:13\n    |\n LL |     let _ = format!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL |     let _ = format!(\"error: {}\", format!(\"something failed at {}\", Location\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `write!` args\n-  --> $DIR/format_args_unfixable.rs:33:13\n+  --> $DIR/format_args_unfixable.rs:34:13\n    |\n LL |       let _ = write!(\n    |  _____________^\n@@ -86,7 +86,7 @@ LL | |     );\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `writeln!` args\n-  --> $DIR/format_args_unfixable.rs:38:13\n+  --> $DIR/format_args_unfixable.rs:39:13\n    |\n LL |       let _ = writeln!(\n    |  _____________^\n@@ -100,7 +100,7 @@ LL | |     );\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `print!` args\n-  --> $DIR/format_args_unfixable.rs:43:5\n+  --> $DIR/format_args_unfixable.rs:44:5\n    |\n LL |     print!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -109,7 +109,7 @@ LL |     print!(\"error: {}\", format!(\"something failed at {}\", Location::caller(\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `eprint!` args\n-  --> $DIR/format_args_unfixable.rs:44:5\n+  --> $DIR/format_args_unfixable.rs:45:5\n    |\n LL |     eprint!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -118,7 +118,7 @@ LL |     eprint!(\"error: {}\", format!(\"something failed at {}\", Location::caller\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `eprintln!` args\n-  --> $DIR/format_args_unfixable.rs:45:5\n+  --> $DIR/format_args_unfixable.rs:46:5\n    |\n LL |     eprintln!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -127,7 +127,7 @@ LL |     eprintln!(\"error: {}\", format!(\"something failed at {}\", Location::call\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `format_args!` args\n-  --> $DIR/format_args_unfixable.rs:46:13\n+  --> $DIR/format_args_unfixable.rs:47:13\n    |\n LL |     let _ = format_args!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -136,7 +136,7 @@ LL |     let _ = format_args!(\"error: {}\", format!(\"something failed at {}\", Loc\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `assert!` args\n-  --> $DIR/format_args_unfixable.rs:47:5\n+  --> $DIR/format_args_unfixable.rs:48:5\n    |\n LL |     assert!(true, \"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -145,7 +145,7 @@ LL |     assert!(true, \"error: {}\", format!(\"something failed at {}\", Location::\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `assert_eq!` args\n-  --> $DIR/format_args_unfixable.rs:48:5\n+  --> $DIR/format_args_unfixable.rs:49:5\n    |\n LL |     assert_eq!(0, 0, \"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |     assert_eq!(0, 0, \"error: {}\", format!(\"something failed at {}\", Locatio\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `assert_ne!` args\n-  --> $DIR/format_args_unfixable.rs:49:5\n+  --> $DIR/format_args_unfixable.rs:50:5\n    |\n LL |     assert_ne!(0, 0, \"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ LL |     assert_ne!(0, 0, \"error: {}\", format!(\"something failed at {}\", Locatio\n    = help: or consider changing `format!` to `format_args!`\n \n error: `format!` in `panic!` args\n-  --> $DIR/format_args_unfixable.rs:50:5\n+  --> $DIR/format_args_unfixable.rs:51:5\n    |\n LL |     panic!(\"error: {}\", format!(\"something failed at {}\", Location::caller()));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3122081a44f98b4aded0fdd62401a82f8efb7a67", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "patch": "@@ -1,7 +1,7 @@\n // aux-build:proc_macros.rs\n // run-rustfix\n #![warn(clippy::uninlined_format_args)]\n-#![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n+#![allow(named_arguments_used_positionally, unused)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n extern crate proc_macros;\n@@ -178,3 +178,87 @@ fn _meets_msrv() {\n fn _do_not_fire() {\n     println!(\"{:?}\", None::<()>);\n }\n+\n+macro_rules! _internal {\n+    ($($args:tt)*) => {\n+        println!(\"{}\", format_args!($($args)*))\n+    };\n+}\n+\n+macro_rules! my_println2 {\n+   ($target:expr, $($args:tt)+) => {{\n+       if $target {\n+           _internal!($($args)+)\n+       }\n+    }};\n+}\n+\n+macro_rules! my_println2_args {\n+    ($target:expr, $($args:tt)+) => {{\n+       if $target {\n+           _internal!(\"foo: {}\", format_args!($($args)+))\n+       }\n+    }};\n+}\n+\n+macro_rules! my_concat {\n+    ($fmt:literal $(, $e:expr)*) => {\n+        println!(concat!(\"ERROR: \", $fmt), $($e,)*)\n+    }\n+}\n+\n+macro_rules! my_good_macro {\n+    ($fmt:literal $(, $e:expr)* $(,)?) => {\n+        println!($fmt $(, $e)*)\n+    }\n+}\n+\n+macro_rules! my_bad_macro {\n+    ($fmt:literal, $($e:expr),*) => {\n+        println!($fmt, $($e,)*)\n+    }\n+}\n+\n+macro_rules! my_bad_macro2 {\n+    ($fmt:literal) => {\n+        let s = $fmt.clone();\n+        println!(\"{}\", s);\n+    };\n+    ($fmt:literal, $($e:expr)+) => {\n+        println!($fmt, $($e,)*)\n+    };\n+}\n+\n+// This abomination was suggested by @Alexendoo, may the Rust gods have mercy on their soul...\n+// https://github.com/rust-lang/rust-clippy/pull/9948#issuecomment-1327965962\n+macro_rules! used_twice {\n+    (\n+        large = $large:literal,\n+        small = $small:literal,\n+        $val:expr,\n+    ) => {\n+        if $val < 5 {\n+            println!($small, $val);\n+        } else {\n+            println!($large, $val);\n+        }\n+    };\n+}\n+\n+fn tester2() {\n+    let local_i32 = 1;\n+    my_println2_args!(true, \"{}\", local_i32);\n+    my_println2!(true, \"{}\", local_i32);\n+    my_concat!(\"{}\", local_i32);\n+    my_good_macro!(\"{}\", local_i32);\n+    my_good_macro!(\"{}\", local_i32,);\n+\n+    // FIXME: Broken false positives, currently unhandled\n+    my_bad_macro!(\"{}\", local_i32);\n+    my_bad_macro2!(\"{}\", local_i32);\n+    used_twice! {\n+        large = \"large value: {}\",\n+        small = \"small value: {}\",\n+        local_i32,\n+    };\n+}"}, {"sha": "b153ef256e0c2d25f38a8f463da6a124dfca386d", "filename": "tests/ui/uninlined_format_args.rs", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/tests%2Fui%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341/tests%2Fui%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.rs?ref=8f0ba1f2e0c08d67c6b57a2e6b01cc87428b5341", "patch": "@@ -1,7 +1,7 @@\n // aux-build:proc_macros.rs\n // run-rustfix\n #![warn(clippy::uninlined_format_args)]\n-#![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n+#![allow(named_arguments_used_positionally, unused)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n extern crate proc_macros;\n@@ -183,3 +183,87 @@ fn _meets_msrv() {\n fn _do_not_fire() {\n     println!(\"{:?}\", None::<()>);\n }\n+\n+macro_rules! _internal {\n+    ($($args:tt)*) => {\n+        println!(\"{}\", format_args!($($args)*))\n+    };\n+}\n+\n+macro_rules! my_println2 {\n+   ($target:expr, $($args:tt)+) => {{\n+       if $target {\n+           _internal!($($args)+)\n+       }\n+    }};\n+}\n+\n+macro_rules! my_println2_args {\n+    ($target:expr, $($args:tt)+) => {{\n+       if $target {\n+           _internal!(\"foo: {}\", format_args!($($args)+))\n+       }\n+    }};\n+}\n+\n+macro_rules! my_concat {\n+    ($fmt:literal $(, $e:expr)*) => {\n+        println!(concat!(\"ERROR: \", $fmt), $($e,)*)\n+    }\n+}\n+\n+macro_rules! my_good_macro {\n+    ($fmt:literal $(, $e:expr)* $(,)?) => {\n+        println!($fmt $(, $e)*)\n+    }\n+}\n+\n+macro_rules! my_bad_macro {\n+    ($fmt:literal, $($e:expr),*) => {\n+        println!($fmt, $($e,)*)\n+    }\n+}\n+\n+macro_rules! my_bad_macro2 {\n+    ($fmt:literal) => {\n+        let s = $fmt.clone();\n+        println!(\"{}\", s);\n+    };\n+    ($fmt:literal, $($e:expr)+) => {\n+        println!($fmt, $($e,)*)\n+    };\n+}\n+\n+// This abomination was suggested by @Alexendoo, may the Rust gods have mercy on their soul...\n+// https://github.com/rust-lang/rust-clippy/pull/9948#issuecomment-1327965962\n+macro_rules! used_twice {\n+    (\n+        large = $large:literal,\n+        small = $small:literal,\n+        $val:expr,\n+    ) => {\n+        if $val < 5 {\n+            println!($small, $val);\n+        } else {\n+            println!($large, $val);\n+        }\n+    };\n+}\n+\n+fn tester2() {\n+    let local_i32 = 1;\n+    my_println2_args!(true, \"{}\", local_i32);\n+    my_println2!(true, \"{}\", local_i32);\n+    my_concat!(\"{}\", local_i32);\n+    my_good_macro!(\"{}\", local_i32);\n+    my_good_macro!(\"{}\", local_i32,);\n+\n+    // FIXME: Broken false positives, currently unhandled\n+    my_bad_macro!(\"{}\", local_i32);\n+    my_bad_macro2!(\"{}\", local_i32);\n+    used_twice! {\n+        large = \"large value: {}\",\n+        small = \"small value: {}\",\n+        local_i32,\n+    };\n+}"}]}