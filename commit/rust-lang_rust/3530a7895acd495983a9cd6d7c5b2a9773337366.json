{"sha": "3530a7895acd495983a9cd6d7c5b2a9773337366", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MzBhNzg5NWFjZDQ5NTk4M2E5Y2Q2ZDdjNWIyYTk3NzMzMzczNjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-27T01:02:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-27T01:02:07Z"}, "message": "Rollup merge of #84701 - nikomatsakis:stabilize-member-constraints-61997, r=jackh726\n\nstabilize member constraints\n\nStabilizes the use of \"member constraints\" in solving `impl Trait` bindings. This is a step towards stabilizing a \"MVP\" of \"named impl Trait\".\n\n# Member constraint stabilization report\n\n| Info | |\n| --- | --- |\n| Tracking issue | [rust-lang/rust#61997](https://github.com/rust-lang/rust/issues/61997) |\n| Implementation history | [rust-lang/rust#61775] |\n| rustc-dev-guide coverage | [link](https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/member_constraints.html) |\n| Complications | [rust-lang/rust#61773] |\n\n[rust-lang/rust#61775]: https://github.com/rust-lang/rust/pull/61775\n[rust-lang/rust#61773]: https://github.com/rust-lang/rust/issues/61773\n\n## Background\n\nMember constraints are an extension to our region solver that was introduced to make async fn region solving tractable. There are used in situations like the following:\n\n```rust\nfn foo<'a, 'b>(...) -> impl Trait<'a, 'b> { .. }\n```\n\nThe problem here is that every region R in the hidden type must be equal to *either* `'a` *or* `'b` (or `'static`). This cannot be expressed simply via 'outlives constriants' like `R: 'a`. Therefore, we introduce a 'member constraint' `R member of ['a, 'b]`.\n\nThese constraints were introduced in [rust-lang/rust#61775]. At the time, we kept them feature gated and used them only for `impl Trait` return types that are derived from `async fn`. The intention, however, was always to support them in other contexts once we had time to gain more experience with them.\n\n**In the time since their introduction, we have encountered no surprises or bugs due to these member constraints.** They are tested extensively as part of every async function that involves multiple unrelated lifetimes in its arguments.\n\n## Tests\n\nThe behavior of member constraints is covered by the following tests:\n\n* [`src/test/ui/async-await/multiple-lifetimes`](https://github.com/rust-lang/rust/tree/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/async-await/multiple-lifetimes) -- tests using the async await, which are mostly already stabilized\n* [`src/test/ui/impl-trait/multiple-lifetimes.rs`](https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/impl-trait/multiple-lifetimes.rs)\n* [`src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.rs`](https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.rs)\n* [`src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs`](https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs)\n* [`src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs`](https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs)\n\nThese tests cover a number of scenarios:\n\n* `-> implTrait<'a, 'b>` with unrelated lifetimes `'a` and `'b`, as described above\n* `async fn` that returns an `impl Trait` like the previous case, which desugars to a kind of \"nested\" impl trait like `impl Future<Output = impl Trait<'a, 'b>>`\n\n## Potential concerns\n\nThere is a potential interaction with `impl Trait` on local variables, described in [rust-lang/rust#61773]. The challenge is that if you have a program like:\n\n```rust=\ntrait Foo<'_> { }\nimpl Foo<'_> for &u32 { }\n\nfn bar() {\n  let x: impl Foo<'_> = &44; // let's call the region variable for `'_` `'1`\n}\n```\n\nthen we would wind up with `'0 member of ['1, 'static]`, where `'0` is the region variable in the hidden type (`&'0 u32`) and `'1` is the region variable in the bounds `Foo<'1>`. This is tricky because both `'0` and `'1` are being inferred -- so making them equal may have other repercussions.\n\nThat said, `impl Trait` in bindings are not stable, and the implementation is pretty far from stabilization. Moreover, the difficulty highlighted here is not due to the presence of member constraints -- it's inherent to the design of the language. In other words, stabilizing member constraints does not actually cause us to accept anything that would make this problem any harder.\n\nSo I don't see this as a blocker to stabilization of member constraints; it is potentially a blocker to stablization of `impl trait` in let bindings.", "tree": {"sha": "28b03945a3e7a0872d5af1673e24bb671b7c0d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28b03945a3e7a0872d5af1673e24bb671b7c0d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3530a7895acd495983a9cd6d7c5b2a9773337366", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgru+PCRBK7hj4Ov3rIwAAxPgIABWAJufxBhn2sInfe8q1AcZM\nmwADOltCjhDGfOquuVZCqGnyVhxtLQXVoAjcz3jUZOWWvo0SwUrQUm11a/hOUMhb\nE78eSHtbRB5P0GEW98oXBw7hdkpa7ezaVI5MZ2YY7sXy5yJWeY8NthY9G6at4vDk\nItjIepIJkYLMh4EPAhsHtDoqa7Y/O/oa7oggXGWEbaefk7Sqsfd9CVwfQFeCEWpl\nwZ3TzMGL8FjydJ1sjxk/Mt5BS5sPDBVmBuQcVUc7cLCI5n0gY8V8DnxxN5TYH0NV\nhUfepnrtlq+Uv8SMqaKw4/T7MQYzLLqz3yFB6Ygvnuh/8br6TKR/4AV/z3Z9E3g=\n=NOJZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 28b03945a3e7a0872d5af1673e24bb671b7c0d44\nparent f2810d5fa0fb5930a02e2bb4827b037292a83cea\nparent b3054d2c2180631f9574ee3c6c3d138ce5e25798\nauthor Dylan DPC <dylan.dpc@gmail.com> 1622077327 +0200\ncommitter GitHub <noreply@github.com> 1622077327 +0200\n\nRollup merge of #84701 - nikomatsakis:stabilize-member-constraints-61997, r=jackh726\n\nstabilize member constraints\n\nStabilizes the use of \"member constraints\" in solving `impl Trait` bindings. This is a step towards stabilizing a \"MVP\" of \"named impl Trait\".\n\n# Member constraint stabilization report\n\n| Info | |\n| --- | --- |\n| Tracking issue | [rust-lang/rust#61997](https://github.com/rust-lang/rust/issues/61997) |\n| Implementation history | [rust-lang/rust#61775] |\n| rustc-dev-guide coverage | [link](https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/member_constraints.html) |\n| Complications | [rust-lang/rust#61773] |\n\n[rust-lang/rust#61775]: https://github.com/rust-lang/rust/pull/61775\n[rust-lang/rust#61773]: https://github.com/rust-lang/rust/issues/61773\n\n## Background\n\nMember constraints are an extension to our region solver that was introduced to make async fn region solving tractable. There are used in situations like the following:\n\n```rust\nfn foo<'a, 'b>(...) -> impl Trait<'a, 'b> { .. }\n```\n\nThe problem here is that every region R in the hidden type must be equal to *either* `'a` *or* `'b` (or `'static`). This cannot be expressed simply via 'outlives constriants' like `R: 'a`. Therefore, we introduce a 'member constraint' `R member of ['a, 'b]`.\n\nThese constraints were introduced in [rust-lang/rust#61775]. At the time, we kept them feature gated and used them only for `impl Trait` return types that are derived from `async fn`. The intention, however, was always to support them in other contexts once we had time to gain more experience with them.\n\n**In the time since their introduction, we have encountered no surprises or bugs due to these member constraints.** They are tested extensively as part of every async function that involves multiple unrelated lifetimes in its arguments.\n\n## Tests\n\nThe behavior of member constraints is covered by the following tests:\n\n* [`src/test/ui/async-await/multiple-lifetimes`](https://github.com/rust-lang/rust/tree/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/async-await/multiple-lifetimes) -- tests using the async await, which are mostly already stabilized\n* [`src/test/ui/impl-trait/multiple-lifetimes.rs`](https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/impl-trait/multiple-lifetimes.rs)\n* [`src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.rs`](https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.rs)\n* [`src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs`](https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs)\n* [`src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs`](https://github.com/rust-lang/rust/blob/20e032e65007ff1376e8480c1fbdb0a5068028fa/src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs)\n\nThese tests cover a number of scenarios:\n\n* `-> implTrait<'a, 'b>` with unrelated lifetimes `'a` and `'b`, as described above\n* `async fn` that returns an `impl Trait` like the previous case, which desugars to a kind of \"nested\" impl trait like `impl Future<Output = impl Trait<'a, 'b>>`\n\n## Potential concerns\n\nThere is a potential interaction with `impl Trait` on local variables, described in [rust-lang/rust#61773]. The challenge is that if you have a program like:\n\n```rust=\ntrait Foo<'_> { }\nimpl Foo<'_> for &u32 { }\n\nfn bar() {\n  let x: impl Foo<'_> = &44; // let's call the region variable for `'_` `'1`\n}\n```\n\nthen we would wind up with `'0 member of ['1, 'static]`, where `'0` is the region variable in the hidden type (`&'0 u32`) and `'1` is the region variable in the bounds `Foo<'1>`. This is tricky because both `'0` and `'1` are being inferred -- so making them equal may have other repercussions.\n\nThat said, `impl Trait` in bindings are not stable, and the implementation is pretty far from stabilization. Moreover, the difficulty highlighted here is not due to the presence of member constraints -- it's inherent to the design of the language. In other words, stabilizing member constraints does not actually cause us to accept anything that would make this problem any harder.\n\nSo I don't see this as a blocker to stabilization of member constraints; it is potentially a blocker to stablization of `impl trait` in let bindings.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3530a7895acd495983a9cd6d7c5b2a9773337366", "html_url": "https://github.com/rust-lang/rust/commit/3530a7895acd495983a9cd6d7c5b2a9773337366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3530a7895acd495983a9cd6d7c5b2a9773337366/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2810d5fa0fb5930a02e2bb4827b037292a83cea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2810d5fa0fb5930a02e2bb4827b037292a83cea", "html_url": "https://github.com/rust-lang/rust/commit/f2810d5fa0fb5930a02e2bb4827b037292a83cea"}, {"sha": "b3054d2c2180631f9574ee3c6c3d138ce5e25798", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3054d2c2180631f9574ee3c6c3d138ce5e25798", "html_url": "https://github.com/rust-lang/rust/commit/b3054d2c2180631f9574ee3c6c3d138ce5e25798"}], "stats": {"total": 269, "additions": 31, "deletions": 238}, "files": [{"sha": "95504723e7b248b9250368a8f4136dde95d87f27", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -285,6 +285,8 @@ declare_features! (\n     (accepted, extended_key_value_attributes, \"1.54.0\", Some(78835), None),\n     /// Allows unsizing coercions in `const fn`.\n     (accepted, const_fn_unsize, \"1.54.0\", Some(64992), None),\n+    /// Allows `impl Trait` with multiple unrelated lifetimes.\n+    (accepted, member_constraints, \"1.54.0\", Some(61997), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "a84737e80a09f9af152a5a7848a5a971e430296f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -472,9 +472,6 @@ declare_features! (\n     /// Allows explicit discriminants on non-unit enum variants.\n     (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n \n-    /// Allows `impl Trait` with multiple unrelated lifetimes.\n-    (active, member_constraints, \"1.37.0\", Some(61997), None),\n-\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n "}, {"sha": "163df26e9ffaf67e396955c7312f77a6848f05ed", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -140,15 +140,6 @@ pub trait InferCtxtExt<'tcx> {\n         first_own_region_index: usize,\n     );\n \n-    /*private*/\n-    fn member_constraint_feature_gate(\n-        &self,\n-        opaque_defn: &OpaqueTypeDecl<'tcx>,\n-        opaque_type_def_id: DefId,\n-        conflict1: ty::Region<'tcx>,\n-        conflict2: ty::Region<'tcx>,\n-    ) -> bool;\n-\n     fn infer_opaque_definition_from_instantiation(\n         &self,\n         def_id: DefId,\n@@ -490,9 +481,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // ['a, 'b, 'c]`, where `'a..'c` are the\n                         // regions that appear in the impl trait.\n \n-                        // For now, enforce a feature gate outside of async functions.\n-                        self.member_constraint_feature_gate(opaque_defn, def_id, lr, subst_region);\n-\n                         return self.generate_member_constraint(\n                             concrete_ty,\n                             opaque_defn,\n@@ -559,60 +547,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         });\n     }\n \n-    /// Member constraints are presently feature-gated except for\n-    /// async-await. We expect to lift this once we've had a bit more\n-    /// time.\n-    fn member_constraint_feature_gate(\n-        &self,\n-        opaque_defn: &OpaqueTypeDecl<'tcx>,\n-        opaque_type_def_id: DefId,\n-        conflict1: ty::Region<'tcx>,\n-        conflict2: ty::Region<'tcx>,\n-    ) -> bool {\n-        // If we have `#![feature(member_constraints)]`, no problems.\n-        if self.tcx.features().member_constraints {\n-            return false;\n-        }\n-\n-        let span = self.tcx.def_span(opaque_type_def_id);\n-\n-        // Without a feature-gate, we only generate member-constraints for async-await.\n-        let context_name = match opaque_defn.origin {\n-            // No feature-gate required for `async fn`.\n-            hir::OpaqueTyOrigin::AsyncFn => return false,\n-\n-            // Otherwise, generate the label we'll use in the error message.\n-            hir::OpaqueTyOrigin::Binding\n-            | hir::OpaqueTyOrigin::FnReturn\n-            | hir::OpaqueTyOrigin::TyAlias\n-            | hir::OpaqueTyOrigin::Misc => \"impl Trait\",\n-        };\n-        let msg = format!(\"ambiguous lifetime bound in `{}`\", context_name);\n-        let mut err = self.tcx.sess.struct_span_err(span, &msg);\n-\n-        let conflict1_name = conflict1.to_string();\n-        let conflict2_name = conflict2.to_string();\n-        let label_owned;\n-        let label = match (&*conflict1_name, &*conflict2_name) {\n-            (\"'_\", \"'_\") => \"the elided lifetimes here do not outlive one another\",\n-            _ => {\n-                label_owned = format!(\n-                    \"neither `{}` nor `{}` outlives the other\",\n-                    conflict1_name, conflict2_name,\n-                );\n-                &label_owned\n-            }\n-        };\n-        err.span_label(span, label);\n-\n-        if self.tcx.sess.is_nightly_build() {\n-            err.help(\"add #![feature(member_constraints)] to the crate attributes to enable\");\n-        }\n-\n-        err.emit();\n-        true\n-    }\n-\n     /// Given the fully resolved, instantiated type for an opaque\n     /// type, i.e., the value of an inference variable like C1 or C2\n     /// (*), computes the \"definition type\" for an opaque type"}, {"sha": "3ba4a3e6b1f02d169c262c23f9b4e2149c4b98ff", "filename": "src/doc/unstable-book/src/language-features/member-constraints.md", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md?ref=f2810d5fa0fb5930a02e2bb4827b037292a83cea", "patch": "@@ -1,29 +0,0 @@\n-# `member_constraints`\n-\n-The tracking issue for this feature is: [#61997]\n-\n-[#61997]: https://github.com/rust-lang/rust/issues/61997\n-\n-------------------------\n-\n-The `member_constraints` feature gate lets you use `impl Trait` syntax with\n-multiple unrelated lifetime parameters.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(member_constraints)]\n-\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T {}\n-\n-fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n-  (x, y)\n-}\n-\n-fn main() { }\n-```\n-\n-Without the `member_constraints` feature gate, the above example is an\n-error because both `'a` and `'b` appear in the impl Trait bounds, but\n-neither outlives the other."}, {"sha": "f1002947fb97861d62873703c41a5d4fc622da91", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,10 +1,9 @@\n // edition:2018\n // run-pass\n \n-// Test that a feature gate is needed to use `impl Trait` as the\n-// return type of an async.\n-\n-#![feature(member_constraints)]\n+// Test member constraints that appear in the `impl Trait`\n+// return type of an async function.\n+// (This used to require a feature gate.)\n \n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }"}, {"sha": "05960c0c7f6364f472a245023e9cead0afddc0e2", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs?ref=f2810d5fa0fb5930a02e2bb4827b037292a83cea", "patch": "@@ -1,20 +0,0 @@\n-// edition:2018\n-\n-// Test that a feature gate is needed to use `impl Trait` as the\n-// return type of an async.\n-\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T { }\n-\n-async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-    //~^ ERROR ambiguous lifetime bound\n-    //~| ERROR ambiguous lifetime bound\n-    //~| ERROR ambiguous lifetime bound\n-    //~| ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-    //~| ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-    (a, b)\n-}\n-\n-fn main() {\n-    let _ = async_ret_impl_trait(&22, &44);\n-}"}, {"sha": "f65bbeaa31a732b0d0593093569e79d054f0b056", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=f2810d5fa0fb5930a02e2bb4827b037292a83cea", "patch": "@@ -1,43 +0,0 @@\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   |                                                                ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   |                                                                ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   |                                                                ^^^^^^^^^^^^^^^^^^ the elided lifetimes here do not outlive one another\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:1\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: hidden type `(&u8, &u8)` captures lifetime '_#5r\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:1\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: hidden type `(&u8, &u8)` captures lifetime '_#6r\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "eed90772d29e39e4485f362f2b39082a3c9e1d88", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ret-impl-trait-one.rs:12:80\n+  --> $DIR/ret-impl-trait-one.rs:10:80\n    |\n LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |  ________________________________--__--__________________________________________^"}, {"sha": "7e084217c26075ee48fb846695e751c767980ddb", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -3,8 +3,6 @@\n // Test that a feature gate is needed to use `impl Trait` as the\n // return type of an async.\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a> { }\n impl<T> Trait<'_> for T { }\n "}, {"sha": "8e28605721cb5f313b2b538de5f8369cd5803cca", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ret-impl-trait-one.rs:12:65\n+  --> $DIR/ret-impl-trait-one.rs:10:65\n    |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |                                           ------                ^^^^^^^^^^^^^^"}, {"sha": "f6a92b0d0bfb53f7b4edd6a2e9f256058b90977c", "filename": "src/test/ui/feature-gates/feature-gate-member-constraints.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs?ref=f2810d5fa0fb5930a02e2bb4827b037292a83cea", "patch": "@@ -1,10 +0,0 @@\n-trait Trait<'a, 'b> {}\n-impl<T> Trait<'_, '_> for T {}\n-\n-fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n-    //~^ ERROR ambiguous lifetime bound\n-    //~| ERROR ambiguous lifetime bound\n-    (x, y)\n-}\n-\n-fn main() {}"}, {"sha": "c2ec7ae16a3a6a97f1008362a5b64ff38486baa8", "filename": "src/test/ui/feature-gates/feature-gate-member-constraints.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2810d5fa0fb5930a02e2bb4827b037292a83cea/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr?ref=f2810d5fa0fb5930a02e2bb4827b037292a83cea", "patch": "@@ -1,18 +0,0 @@\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/feature-gate-member-constraints.rs:4:43\n-   |\n-LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n-   |                                           ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/feature-gate-member-constraints.rs:4:43\n-   |\n-LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n-   |                                           ^^^^^^^^^^^^^^^^^^ the elided lifetimes here do not outlive one another\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "ff99d037d198f4bbeb53a6f1834d36c9785e1edb", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/error-handling.rs:6:32\n+  --> $DIR/error-handling.rs:5:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:26:16\n+  --> $DIR/error-handling.rs:25:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here"}, {"sha": "4b23ba81604a9c7a51822e8e8196c2bd32b2dc0c", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:26:16\n+  --> $DIR/error-handling.rs:25:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here"}, {"sha": "1ead78e02ed45ee8b014fed06b58d238094824a0", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,6 +1,5 @@\n // compile-flags:-Zborrowck=mir\n \n-#![feature(member_constraints)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]"}, {"sha": "41b6a9eb0551f8a5aa655e6e32549ce36f869287", "filename": "src/test/ui/impl-trait/multiple-lifetimes/inverse-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -3,8 +3,6 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "d0277336b25fd8b5f4d3966437ea737a642b7aeb", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-elided.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -3,10 +3,8 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n-\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T { }\n+trait Trait<'a, 'b> {}\n+impl<T> Trait<'_, '_> for T {}\n \n // Test case where we have elision in the impl trait and we have to\n // pick the right region.\n@@ -26,4 +24,4 @@ fn upper_bounds3<'b>(a: &u8) -> impl Trait<'_, 'b> {\n     (a, a)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "b9857b7aa2f1d7a3738366a919babba70934009e", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -3,10 +3,9 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n #![feature(min_type_alias_impl_trait)]\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T { }\n+trait Trait<'a, 'b> {}\n+impl<T> Trait<'_, '_> for T {}\n \n // Here we wind up selecting `'a` and `'b` in the hidden type because\n // those are the types that appear in the original values.\n@@ -28,4 +27,4 @@ fn upper_bounds<'a, 'b>(a: &'a u8, b: &'b u8) -> Foo<'a, 'b> {\n     (a, b)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "be455f5335083d0cf30650e7ffa8eeda49791f9d", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -3,10 +3,8 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n-\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T { }\n+trait Trait<'a, 'b> {}\n+impl<T> Trait<'_, '_> for T {}\n \n // Here we wind up selecting `'a` and `'b` in the hidden type because\n // those are the types that appear in the original values.\n@@ -26,4 +24,4 @@ fn upper_bounds<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n     (a, b)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "7235d89019f0eec923a92ceaa9b9bb5712caf19f", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-other.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -3,8 +3,6 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "8cf89f164b16dd7e0aa9864c35c3860a18790ab7", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unrelated.rs:18:74\n+  --> $DIR/ordinary-bounds-unrelated.rs:16:74\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^"}, {"sha": "3a97624647efd79be70c7549def20b0c8631c466", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "a6bc8fec2838efb3f09f7551f3bb0f21b132e384", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unrelated.rs:18:74\n+  --> $DIR/ordinary-bounds-unrelated.rs:16:74\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^\n    |\n note: hidden type `Ordinary<'_>` captures lifetime smaller than the function body\n-  --> $DIR/ordinary-bounds-unrelated.rs:18:74\n+  --> $DIR/ordinary-bounds-unrelated.rs:16:74\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^"}, {"sha": "1bcb28120ed1bb955cdbadc90bbad5c7ac62c5a5", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unsuited.rs:20:62\n+  --> $DIR/ordinary-bounds-unsuited.rs:18:62\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^"}, {"sha": "d4c60a4e89209c883a82972c11c7086f0749ea43", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n \n@@ -18,7 +16,7 @@ struct Ordinary<'a>(&'a u8);\n // consider the loans for both `'a` and `'b` alive.\n \n fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-    //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+//~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n {\n     // We return a value:\n     //"}, {"sha": "a219e74741541f68316b3e6d39297c1d84d5affe", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unsuited.rs:20:62\n+  --> $DIR/ordinary-bounds-unsuited.rs:18:62\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n note: hidden type `Ordinary<'_>` captures lifetime smaller than the function body\n-  --> $DIR/ordinary-bounds-unsuited.rs:20:62\n+  --> $DIR/ordinary-bounds-unsuited.rs:18:62\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^"}, {"sha": "c4bcfe5b28133fae9746cccb709f9b260e74d782", "filename": "src/test/ui/impl-trait/needs_least_region_or_bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(member_constraints)]\n-\n trait MultiRegionTrait<'a, 'b> {}\n impl<'a, 'b> MultiRegionTrait<'a, 'b> for (&'a u32, &'b u32) {}\n "}, {"sha": "05b63a00dfb15da83324b3223420ad41ae0fab6e", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-74761.rs:4:32\n+  --> $DIR/issue-74761.rs:3:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:11:6\n+  --> $DIR/issue-74761.rs:10:6\n    |\n LL | impl<'a, 'b> A for () {\n    |      ^^ unconstrained lifetime parameter\n \n error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:11:10\n+  --> $DIR/issue-74761.rs:10:10\n    |\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter"}, {"sha": "ad111e23b15b51bc4cfb6b40c8fa3ddfd01c007c", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,11 +1,11 @@\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:11:6\n+  --> $DIR/issue-74761.rs:10:6\n    |\n LL | impl<'a, 'b> A for () {\n    |      ^^ unconstrained lifetime parameter\n \n error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:11:10\n+  --> $DIR/issue-74761.rs:10:10\n    |\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter"}, {"sha": "bbc67ecc97aab72eb05840c681a95b2d39aebd48", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3530a7895acd495983a9cd6d7c5b2a9773337366/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs?ref=3530a7895acd495983a9cd6d7c5b2a9773337366", "patch": "@@ -1,4 +1,3 @@\n-#![feature(member_constraints)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]"}]}