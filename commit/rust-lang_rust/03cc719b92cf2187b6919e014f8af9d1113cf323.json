{"sha": "03cc719b92cf2187b6919e014f8af9d1113cf323", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzY2M3MTliOTJjZjIxODdiNjkxOWUwMTRmOGFmOWQxMTEzY2YzMjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-21T07:00:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-21T07:00:21Z"}, "message": "Merge pull request #777 from RalfJung/rustup\n\nbump Rust", "tree": {"sha": "72158748c69b8e407c92f508e06f88afb2f308f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72158748c69b8e407c92f508e06f88afb2f308f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03cc719b92cf2187b6919e014f8af9d1113cf323", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdDICFCRBK7hj4Ov3rIwAAdHIIAKq+R5JjwJGppPFEsGGvm14h\nwfj4mnDgZRG1lx5A4ywT0eLie6DGnZH3+zIQQdSnc2Jj3ARug6+lV7f4cYNiIaHK\nG1Cb1HUkWrEBvRf3g7Z6f3Wv3TJdH9PlvNryJStZOvOX0n9832EH7AnXMlI5oOuu\nuaXUxnA30aJWFbaZTI3K7qV6sOoQgLTy4eChpfmdHnkNE8M/hhIQ+6MdmKGBumD/\n/3HUm/4KqvCp4m6G28sNvGMVPBg/NNFEmhQDmSfxynNXZTOdMGoMxV4fPoNcCL0P\nuVq2hr0fgEoEvg60dE7VQ3kDEaxmiipJYgRjEQI8pS3iqm2R/eZvaww5Q1vpvCY=\n=4Ge3\n-----END PGP SIGNATURE-----\n", "payload": "tree 72158748c69b8e407c92f508e06f88afb2f308f6\nparent 53b46db5fce00b8adfc34f38190caecc63be606b\nparent 86868b6946561571aad34cf42a3ed4e31b8c97bb\nauthor Ralf Jung <post@ralfj.de> 1561100421 +0200\ncommitter GitHub <noreply@github.com> 1561100421 +0200\n\nMerge pull request #777 from RalfJung/rustup\n\nbump Rust"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03cc719b92cf2187b6919e014f8af9d1113cf323", "html_url": "https://github.com/rust-lang/rust/commit/03cc719b92cf2187b6919e014f8af9d1113cf323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03cc719b92cf2187b6919e014f8af9d1113cf323/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53b46db5fce00b8adfc34f38190caecc63be606b", "url": "https://api.github.com/repos/rust-lang/rust/commits/53b46db5fce00b8adfc34f38190caecc63be606b", "html_url": "https://github.com/rust-lang/rust/commit/53b46db5fce00b8adfc34f38190caecc63be606b"}, {"sha": "86868b6946561571aad34cf42a3ed4e31b8c97bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/86868b6946561571aad34cf42a3ed4e31b8c97bb", "html_url": "https://github.com/rust-lang/rust/commit/86868b6946561571aad34cf42a3ed4e31b8c97bb"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "1999b58c89cb73db6349b36fefe71b3215b41c12", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03cc719b92cf2187b6919e014f8af9d1113cf323/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/03cc719b92cf2187b6919e014f8af9d1113cf323/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=03cc719b92cf2187b6919e014f8af9d1113cf323", "patch": "@@ -1 +1 @@\n-374c63e0fc356eb61b1966cb6026a2a49fe9226d\n+4fb77a0398d0339f35f1b18595b375428babd431"}, {"sha": "b05d435ef644ef21fa428a8b29ffe4f0423bc1a3", "filename": "src/operator.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/03cc719b92cf2187b6919e014f8af9d1113cf323/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03cc719b92cf2187b6919e014f8af9d1113cf323/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=03cc719b92cf2187b6919e014f8af9d1113cf323", "patch": "@@ -109,6 +109,27 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                     err!(InvalidPointerMath)\n                 }\n             }\n+            Gt | Ge if left.is_ptr() && right.is_bits() => {\n+                // \"ptr >[=] integer\" can be tested if the integer is small enough.\n+                let left = left.to_ptr().expect(\"we checked is_ptr\");\n+                let right = right.to_bits(self.memory().pointer_size()).expect(\"we checked is_bits\");\n+                let (_alloc_size, alloc_align) = self.memory()\n+                    .get_size_and_align(left.alloc_id, InboundsCheck::MaybeDead)\n+                    .expect(\"determining size+align of dead ptr cannot fail\");\n+                let min_ptr_val = u128::from(alloc_align.bytes()) + u128::from(left.offset.bytes());\n+                let result = match bin_op {\n+                    Gt => min_ptr_val > right,\n+                    Ge => min_ptr_val >= right,\n+                    _ => bug!(),\n+                };\n+                if result {\n+                    // Definitely true!\n+                    Ok((Scalar::from_bool(true), false))\n+                } else {\n+                    // Sorry, can't tell.\n+                    err!(InvalidPointerMath)\n+                }\n+            }\n             // These work if the left operand is a pointer, and the right an integer\n             Add | BitAnd | Sub | Rem if left.is_ptr() && right.is_bits() => {\n                 // Cast to i128 is fine as we checked the kind to be ptr-sized"}, {"sha": "43160249c36354d00eaacc2468b58365c0868ea8", "filename": "tests/compile-fail/ptr_ge_integer.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03cc719b92cf2187b6919e014f8af9d1113cf323/tests%2Fcompile-fail%2Fptr_ge_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03cc719b92cf2187b6919e014f8af9d1113cf323/tests%2Fcompile-fail%2Fptr_ge_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_ge_integer.rs?ref=03cc719b92cf2187b6919e014f8af9d1113cf323", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let b = Box::new(0);\n+    let x = &*b as *const i32;\n+    // We cannot test if this is >= 64.  After all, depending on the base address, that\n+    // might or might not be the case.\n+    assert!(x >= 64 as *const i32); //~ ERROR invalid arithmetic on pointers\n+}"}, {"sha": "e0847de97ba9caed30bf6dea222fa672b3ff0d9d", "filename": "tests/run-pass/pointers.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03cc719b92cf2187b6919e014f8af9d1113cf323/tests%2Frun-pass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03cc719b92cf2187b6919e014f8af9d1113cf323/tests%2Frun-pass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpointers.rs?ref=03cc719b92cf2187b6919e014f8af9d1113cf323", "patch": "@@ -83,4 +83,11 @@ fn main() {\n     assert!(dangling != 5usize);\n     assert!(dangling != 6usize);\n     assert!(dangling != 7usize);\n+\n+    // Using inequality to do the comparison.\n+    assert!(dangling > 0);\n+    assert!(dangling > 1);\n+    assert!(dangling > 2);\n+    assert!(dangling > 3);\n+    assert!(dangling >= 4);\n }"}]}