{"sha": "e521a4ed3818c02a1831db570e69d056c351ee05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MjFhNGVkMzgxOGMwMmExODMxZGI1NzBlNjlkMDU2YzM1MWVlMDU=", "commit": {"author": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-06-07T20:25:21Z"}, "committer": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-06-09T20:39:31Z"}, "message": "Add enough attrs to the test file so the fix compiles with no errors, fmt/`clippy`", "tree": {"sha": "70742040b2efee818c1a3c4218a025a6d5f48d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70742040b2efee818c1a3c4218a025a6d5f48d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e521a4ed3818c02a1831db570e69d056c351ee05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e521a4ed3818c02a1831db570e69d056c351ee05", "html_url": "https://github.com/rust-lang/rust/commit/e521a4ed3818c02a1831db570e69d056c351ee05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e521a4ed3818c02a1831db570e69d056c351ee05/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "288df59b25c04f05d08d817727a8ac9c8d0d6648", "url": "https://api.github.com/repos/rust-lang/rust/commits/288df59b25c04f05d08d817727a8ac9c8d0d6648", "html_url": "https://github.com/rust-lang/rust/commit/288df59b25c04f05d08d817727a8ac9c8d0d6648"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "b845b20d2c012c6dc6b4193d36a1b79da03ee2b2", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e521a4ed3818c02a1831db570e69d056c351ee05/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e521a4ed3818c02a1831db570e69d056c351ee05/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=e521a4ed3818c02a1831db570e69d056c351ee05", "patch": "@@ -164,34 +164,37 @@ impl<'l, 'txc> LateLintPass<'l, 'txc> for MacroUseImports {\n                 let seg = import.split(\"::\").collect::<Vec<_>>();\n \n                 match seg.as_slice() {\n-                    [] => unreachable!(\"this should never be empty\"),\n-                    [_] => unreachable!(\"path must have two segments ?\"),\n+                    // an empty path is impossible\n+                    // a path should always consist of 2 or more segments\n+                    [] | [_] => return,\n                     [root, item] => {\n                         if !check_dup.contains(&(*item).to_string()) {\n-                            used.entry((root.to_string(), span))\n-                                .or_insert_with(|| vec![])\n-                                .push(item.to_string());\n-                            check_dup.push(item.to_string());\n+                            used.entry(((*root).to_string(), span))\n+                                .or_insert_with(Vec::new)\n+                                .push((*item).to_string());\n+                            check_dup.push((*item).to_string());\n                         }\n                     },\n                     [root, rest @ ..] => {\n                         if rest.iter().all(|item| !check_dup.contains(&(*item).to_string())) {\n                             let filtered = rest\n                                 .iter()\n-                                .filter_map(|item| if check_dup.contains(&(*item).to_string()) {\n-                                    None\n-                                } else {\n-                                    Some(item.to_string())\n+                                .filter_map(|item| {\n+                                    if check_dup.contains(&(*item).to_string()) {\n+                                        None\n+                                    } else {\n+                                        Some((*item).to_string())\n+                                    }\n                                 })\n                                 .collect::<Vec<_>>();\n                             used.entry(((*root).to_string(), span))\n-                                .or_insert_with(|| vec![])\n+                                .or_insert_with(Vec::new)\n                                 .push(filtered.join(\"::\"));\n                             check_dup.extend(filtered);\n                         } else {\n                             let rest = rest.to_vec();\n-                            used.entry((root.to_string(), span))\n-                                .or_insert_with(|| vec![])\n+                            used.entry(((*root).to_string(), span))\n+                                .or_insert_with(Vec::new)\n                                 .push(rest.join(\"::\"));\n                             check_dup.extend(rest.iter().map(ToString::to_string));\n                         }"}, {"sha": "91e34c62160a129672ce3c9f08da34e3943ffd04", "filename": "tests/ui/macro_use_imports.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e521a4ed3818c02a1831db570e69d056c351ee05/tests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e521a4ed3818c02a1831db570e69d056c351ee05/tests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.fixed?ref=e521a4ed3818c02a1831db570e69d056c351ee05", "patch": "@@ -2,7 +2,9 @@\n // aux-build:macro_rules.rs\n // aux-build:macro_use_helper.rs\n // run-rustfix\n+// ignore-32bit\n \n+#![allow(unused_imports, unreachable_code, unused_variables, dead_code)]\n #![allow(clippy::single_component_path_imports)]\n #![warn(clippy::macro_use_imports)]\n "}, {"sha": "9c3c50c5d49f29b0a03eea1ca77c583a71686597", "filename": "tests/ui/macro_use_imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e521a4ed3818c02a1831db570e69d056c351ee05/tests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e521a4ed3818c02a1831db570e69d056c351ee05/tests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.rs?ref=e521a4ed3818c02a1831db570e69d056c351ee05", "patch": "@@ -2,7 +2,9 @@\n // aux-build:macro_rules.rs\n // aux-build:macro_use_helper.rs\n // run-rustfix\n+// ignore-32bit\n \n+#![allow(unused_imports, unreachable_code, unused_variables, dead_code)]\n #![allow(clippy::single_component_path_imports)]\n #![warn(clippy::macro_use_imports)]\n "}, {"sha": "f8c86c8d9179f8af918b684eb9294c18ea4a7008", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e521a4ed3818c02a1831db570e69d056c351ee05/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e521a4ed3818c02a1831db570e69d056c351ee05/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=e521a4ed3818c02a1831db570e69d056c351ee05", "patch": "@@ -2,24 +2,24 @@ error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:18:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:20:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:16:5\n+  --> $DIR/macro_use_imports.rs:22:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:22:5\n+  --> $DIR/macro_use_imports.rs:24:5\n    |\n LL |     #[macro_use]\n    |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`"}]}