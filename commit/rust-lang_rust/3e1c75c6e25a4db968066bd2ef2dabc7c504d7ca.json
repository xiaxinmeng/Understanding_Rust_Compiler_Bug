{"sha": "3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMWM3NWM2ZTI1YTRkYjk2ODA2NmJkMmVmMmRhYmM3YzUwNGQ3Y2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-13T15:06:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-13T15:06:10Z"}, "message": "Auto merge of #86827 - camsteffen:hash-lint-resolved, r=oli-obk\n\nFix internal `default_hash_types` lint to use resolved path\n\nI run into false positives now and then (mostly in Clippy) when I want to name some util after HashMap.", "tree": {"sha": "30bfe071b15297a0d7c41b4cd1e2a0c05e07c56c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30bfe071b15297a0d7c41b4cd1e2a0c05e07c56c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "html_url": "https://github.com/rust-lang/rust/commit/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4", "html_url": "https://github.com/rust-lang/rust/commit/ca99e3eb3adf61573b11d859ce2b9ff7db48ccd4"}, {"sha": "17ebba70d00e94b5136171d3f26d6a0369e7b83c", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ebba70d00e94b5136171d3f26d6a0369e7b83c", "html_url": "https://github.com/rust-lang/rust/commit/17ebba70d00e94b5136171d3f26d6a0369e7b83c"}], "stats": {"total": 143, "additions": 72, "deletions": 71}, "files": [{"sha": "8a4a70894375d2f55b0661cecf58587543957d4a", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 37, "deletions": 42, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "patch": "@@ -2,15 +2,17 @@\n //! Clippy.\n \n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n-use rustc_ast::{ImplKind, Item, ItemKind};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n+use rustc_hir::{\n+    GenericArg, HirId, Item, ItemKind, MutTy, Mutability, Node, Path, PathSegment, QPath, Ty,\n+    TyKind,\n+};\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,\n@@ -19,43 +21,35 @@ declare_tool_lint! {\n     report_in_external_macro: true\n }\n \n-pub struct DefaultHashTypes {\n-    map: FxHashMap<Symbol, Symbol>,\n-}\n-\n-impl DefaultHashTypes {\n-    // we are allowed to use `HashMap` and `HashSet` as identifiers for implementing the lint itself\n-    #[allow(rustc::default_hash_types)]\n-    pub fn new() -> Self {\n-        let mut map = FxHashMap::default();\n-        map.insert(sym::HashMap, sym::FxHashMap);\n-        map.insert(sym::HashSet, sym::FxHashSet);\n-        Self { map }\n-    }\n-}\n-\n-impl_lint_pass!(DefaultHashTypes => [DEFAULT_HASH_TYPES]);\n+declare_lint_pass!(DefaultHashTypes => [DEFAULT_HASH_TYPES]);\n \n-impl EarlyLintPass for DefaultHashTypes {\n-    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n-        if let Some(replace) = self.map.get(&ident.name) {\n-            cx.struct_span_lint(DEFAULT_HASH_TYPES, ident.span, |lint| {\n-                // FIXME: We can avoid a copy here. Would require us to take String instead of &str.\n-                let msg = format!(\"Prefer {} over {}, it has better performance\", replace, ident);\n-                lint.build(&msg)\n-                    .span_suggestion(\n-                        ident.span,\n-                        \"use\",\n-                        replace.to_string(),\n-                        Applicability::MaybeIncorrect, // FxHashMap, ... needs another import\n-                    )\n-                    .note(&format!(\n-                        \"a `use rustc_data_structures::fx::{}` may be necessary\",\n-                        replace\n-                    ))\n-                    .emit();\n-            });\n+impl LateLintPass<'_> for DefaultHashTypes {\n+    fn check_path(&mut self, cx: &LateContext<'_>, path: &Path<'_>, hir_id: HirId) {\n+        let def_id = match path.res {\n+            Res::Def(rustc_hir::def::DefKind::Struct, id) => id,\n+            _ => return,\n+        };\n+        if matches!(cx.tcx.hir().get(hir_id), Node::Item(Item { kind: ItemKind::Use(..), .. })) {\n+            // don't lint imports, only actual usages\n+            return;\n         }\n+        let replace = if cx.tcx.is_diagnostic_item(sym::hashmap_type, def_id) {\n+            \"FxHashMap\"\n+        } else if cx.tcx.is_diagnostic_item(sym::hashset_type, def_id) {\n+            \"FxHashSet\"\n+        } else {\n+            return;\n+        };\n+        cx.struct_span_lint(DEFAULT_HASH_TYPES, path.span, |lint| {\n+            let msg = format!(\n+                \"prefer `{}` over `{}`, it has better performance\",\n+                replace,\n+                cx.tcx.item_name(def_id)\n+            );\n+            lint.build(&msg)\n+                .note(&format!(\"a `use rustc_data_structures::fx::{}` may be necessary\", replace))\n+                .emit();\n+        });\n     }\n }\n \n@@ -242,8 +236,9 @@ declare_tool_lint! {\n declare_lint_pass!(LintPassImpl => [LINT_PASS_IMPL_WITHOUT_MACRO]);\n \n impl EarlyLintPass for LintPassImpl {\n-    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl(box ImplKind { of_trait: Some(lint_pass), .. }) = &item.kind {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n+        if let ast::ItemKind::Impl(box ast::ImplKind { of_trait: Some(lint_pass), .. }) = &item.kind\n+        {\n             if let Some(last) = lint_pass.path.segments.last() {\n                 if last.ident.name == sym::LintPass {\n                     let expn_data = lint_pass.path.span.ctxt().outer_expn_data();"}, {"sha": "c9478016140b7ad3349d2362dbb8399657d7f544", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "patch": "@@ -475,10 +475,10 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n }\n \n fn register_internals(store: &mut LintStore) {\n-    store.register_lints(&DefaultHashTypes::get_lints());\n-    store.register_early_pass(|| box DefaultHashTypes::new());\n     store.register_lints(&LintPassImpl::get_lints());\n     store.register_early_pass(|| box LintPassImpl);\n+    store.register_lints(&DefaultHashTypes::get_lints());\n+    store.register_late_pass(|| box DefaultHashTypes);\n     store.register_lints(&ExistingDocKeyword::get_lints());\n     store.register_late_pass(|| box ExistingDocKeyword);\n     store.register_lints(&TyTyKind::get_lints());"}, {"sha": "2f063f75eb0ef792634ff566eae9fbb2c5bfbf1d", "filename": "compiler/rustc_macros/src/symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsymbols.rs?ref=3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "patch": "@@ -207,7 +207,7 @@ fn symbols_with_errors(input: TokenStream) -> (TokenStream, Vec<syn::Error>) {\n             #keyword_stream\n         }\n \n-        #[allow(rustc::default_hash_types)]\n+        #[cfg_attr(bootstrap, allow(rustc::default_hash_types))]\n         #[allow(non_upper_case_globals)]\n         #[doc(hidden)]\n         pub mod sym_generated {"}, {"sha": "795c7d2dcb7354270bcf64004ddd9810fea6587e", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.rs?ref=3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "patch": "@@ -1,22 +1,29 @@\n // compile-flags: -Z unstable-options\n \n #![feature(rustc_private)]\n+#![deny(rustc::default_hash_types)]\n \n extern crate rustc_data_structures;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::collections::{HashMap, HashSet};\n \n-#[deny(rustc::default_hash_types)]\n+mod foo {\n+    pub struct HashMap;\n+}\n+\n fn main() {\n     let _map: HashMap<String, String> = HashMap::default();\n-    //~^ ERROR Prefer FxHashMap over HashMap, it has better performance\n-    //~^^ ERROR Prefer FxHashMap over HashMap, it has better performance\n+    //~^ ERROR prefer `FxHashMap` over `HashMap`, it has better performance\n+    //~^^ ERROR prefer `FxHashMap` over `HashMap`, it has better performance\n     let _set: HashSet<String> = HashSet::default();\n-    //~^ ERROR Prefer FxHashSet over HashSet, it has better performance\n-    //~^^ ERROR Prefer FxHashSet over HashSet, it has better performance\n+    //~^ ERROR prefer `FxHashSet` over `HashSet`, it has better performance\n+    //~^^ ERROR prefer `FxHashSet` over `HashSet`, it has better performance\n \n     // test that the lint doesn't also match the Fx variants themselves\n     let _fx_map: FxHashMap<String, String> = FxHashMap::default();\n     let _fx_set: FxHashSet<String> = FxHashSet::default();\n+\n+    // test another struct of the same name\n+    let _ = foo::HashMap;\n }"}, {"sha": "9d13ee89bca649d66d9921e1e49e628aa727ae7b", "filename": "src/test/ui-fulldeps/internal-lints/default_hash_types.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fdefault_hash_types.stderr?ref=3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "patch": "@@ -1,37 +1,37 @@\n-error: Prefer FxHashMap over HashMap, it has better performance\n-  --> $DIR/default_hash_types.rs:12:15\n+error: prefer `FxHashMap` over `HashMap`, it has better performance\n+  --> $DIR/default_hash_types.rs:16:41\n    |\n LL |     let _map: HashMap<String, String> = HashMap::default();\n-   |               ^^^^^^^ help: use: `FxHashMap`\n+   |                                         ^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/default_hash_types.rs:10:8\n+  --> $DIR/default_hash_types.rs:4:9\n    |\n-LL | #[deny(rustc::default_hash_types)]\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rustc::default_hash_types)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n-error: Prefer FxHashMap over HashMap, it has better performance\n-  --> $DIR/default_hash_types.rs:12:41\n+error: prefer `FxHashMap` over `HashMap`, it has better performance\n+  --> $DIR/default_hash_types.rs:16:15\n    |\n LL |     let _map: HashMap<String, String> = HashMap::default();\n-   |                                         ^^^^^^^ help: use: `FxHashMap`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: a `use rustc_data_structures::fx::FxHashMap` may be necessary\n \n-error: Prefer FxHashSet over HashSet, it has better performance\n-  --> $DIR/default_hash_types.rs:15:15\n+error: prefer `FxHashSet` over `HashSet`, it has better performance\n+  --> $DIR/default_hash_types.rs:19:33\n    |\n LL |     let _set: HashSet<String> = HashSet::default();\n-   |               ^^^^^^^ help: use: `FxHashSet`\n+   |                                 ^^^^^^^\n    |\n    = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n \n-error: Prefer FxHashSet over HashSet, it has better performance\n-  --> $DIR/default_hash_types.rs:15:33\n+error: prefer `FxHashSet` over `HashSet`, it has better performance\n+  --> $DIR/default_hash_types.rs:19:15\n    |\n LL |     let _set: HashSet<String> = HashSet::default();\n-   |                                 ^^^^^^^ help: use: `FxHashSet`\n+   |               ^^^^^^^^^^^^^^^\n    |\n    = note: a `use rustc_data_structures::fx::FxHashSet` may be necessary\n "}, {"sha": "4262a28799db26ac412e30a243e34c9a7824d82e", "filename": "src/test/ui/lint/issue-83477.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftest%2Fui%2Flint%2Fissue-83477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftest%2Fui%2Flint%2Fissue-83477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-83477.rs?ref=3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "patch": "@@ -12,6 +12,5 @@\n //~| SUGGESTION rustc::default_hash_types\n fn main() {\n     let _ = std::collections::HashMap::<String, String>::new();\n-    //~^ WARN Prefer FxHashMap over HashMap, it has better performance\n-    //~| HELP use\n+    //~^ WARN prefer `FxHashMap` over `HashMap`, it has better performance\n }"}, {"sha": "e619bcfe23f6408740678c9a0eb916cd6743e9f0", "filename": "src/test/ui/lint/issue-83477.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftest%2Fui%2Flint%2Fissue-83477.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftest%2Fui%2Flint%2Fissue-83477.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-83477.stderr?ref=3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "patch": "@@ -12,11 +12,11 @@ warning: unknown lint: `rustc::foo::default_hash_types`\n LL | #[allow(rustc::foo::default_hash_types)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean: `rustc::default_hash_types`\n \n-warning: Prefer FxHashMap over HashMap, it has better performance\n-  --> $DIR/issue-83477.rs:14:31\n+warning: prefer `FxHashMap` over `HashMap`, it has better performance\n+  --> $DIR/issue-83477.rs:14:13\n    |\n LL |     let _ = std::collections::HashMap::<String, String>::new();\n-   |                               ^^^^^^^ help: use: `FxHashMap`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/issue-83477.rs:3:9"}, {"sha": "9a040ca572af51613733a328828800d25ec6693b", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "patch": "@@ -1,4 +1,4 @@\n-#![allow(rustc::default_hash_types)]\n+#![cfg_attr(bootstrap, allow(rustc::default_hash_types))]\n \n use std::borrow::Cow;\n use std::collections::BTreeMap;"}]}