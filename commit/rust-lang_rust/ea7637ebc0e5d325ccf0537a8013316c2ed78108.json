{"sha": "ea7637ebc0e5d325ccf0537a8013316c2ed78108", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzYzN2ViYzBlNWQzMjVjY2YwNTM3YTgwMTMzMTZjMmVkNzgxMDg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-18T12:51:06Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-18T12:51:06Z"}, "message": "Prohibit casts between fat pointers to different traits\n\nThis makes them compliant with the new version of RFC 401 (i.e.\n    RFC 1052).\n\nFixes #26391. I *hope* the tests I have are enough.\n\nThis is a [breaking-change]", "tree": {"sha": "0bdf619d6fb665d99e8ed85e84fbf0e499bb6e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bdf619d6fb665d99e8ed85e84fbf0e499bb6e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea7637ebc0e5d325ccf0537a8013316c2ed78108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7637ebc0e5d325ccf0537a8013316c2ed78108", "html_url": "https://github.com/rust-lang/rust/commit/ea7637ebc0e5d325ccf0537a8013316c2ed78108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea7637ebc0e5d325ccf0537a8013316c2ed78108/comments", "author": null, "committer": null, "parents": [{"sha": "0d82fb55dbb9b28798ea7c2004fa91fe3ae23b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d82fb55dbb9b28798ea7c2004fa91fe3ae23b86", "html_url": "https://github.com/rust-lang/rust/commit/0d82fb55dbb9b28798ea7c2004fa91fe3ae23b86"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "2b0ed06f1ae5975f20e292f1a7dd3ac5f0e6969e", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea7637ebc0e5d325ccf0537a8013316c2ed78108/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7637ebc0e5d325ccf0537a8013316c2ed78108/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=ea7637ebc0e5d325ccf0537a8013316c2ed78108", "patch": "@@ -27,7 +27,12 @@\n //!\n //! where `&.T` and `*T` are references of either mutability,\n //! and where unsize_kind(`T`) is the kind of the unsize info\n-//! in `T` - a vtable or a length (or `()` if `T: Sized`).\n+//! in `T` - the vtable for a trait definition (e.g. `fmt::Display` or\n+//! `Iterator`, not `Iterator<Item=u8>`) or a length (or `()` if `T: Sized`).\n+//!\n+//! Note that lengths are not adjusted when casting raw slices -\n+//! `T: *const [u16] as *const [u8]` creates a slice that only includes\n+//! half of the original memory.\n //!\n //! Casting is not transitive, that is, even if `e as U1 as U2` is a valid\n //! expression, `e as U2` is not necessarily so (in fact it will only be valid if\n@@ -60,7 +65,7 @@ pub struct CastCheck<'tcx> {\n /// fat pointers if their unsize-infos have the same kind.\n #[derive(Copy, Clone, PartialEq, Eq)]\n enum UnsizeKind<'tcx> {\n-    Vtable,\n+    Vtable(ast::DefId),\n     Length,\n     /// The unsize info of this projection\n     OfProjection(&'tcx ty::ProjectionTy<'tcx>),\n@@ -75,7 +80,7 @@ fn unsize_kind<'a,'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                         -> Option<UnsizeKind<'tcx>> {\n     match t.sty {\n         ty::TySlice(_) | ty::TyStr => Some(UnsizeKind::Length),\n-        ty::TyTrait(_) => Some(UnsizeKind::Vtable),\n+        ty::TyTrait(ref tty) => Some(UnsizeKind::Vtable(tty.principal_def_id())),\n         ty::TyStruct(did, substs) => {\n             match ty::struct_fields(fcx.tcx(), did, substs).pop() {\n                 None => None,"}, {"sha": "29ce8c15143f5ce207407c8487ad3abd7b88cdbe", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea7637ebc0e5d325ccf0537a8013316c2ed78108/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7637ebc0e5d325ccf0537a8013316c2ed78108/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=ea7637ebc0e5d325ccf0537a8013316c2ed78108", "patch": "@@ -21,6 +21,9 @@ fn illegal_cast_2<U:?Sized>(u: *const U) -> *const str\n trait Foo { fn foo(&self) {} }\n impl<T> Foo for T {}\n \n+trait Bar { fn foo(&self) {} }\n+impl<T> Bar for T {}\n+\n enum E {\n     A, B\n }\n@@ -72,4 +75,7 @@ fn main()\n     // check no error cascade\n     let _ = main.f as *const u32; //~ ERROR attempted access of field\n \n+    let cf: *const Foo = &0;\n+    let _ = cf as *const [u8]; //~ ERROR vtable kinds\n+    let _ = cf as *const Bar; //~ ERROR vtable kinds\n }"}, {"sha": "3a9f24ad4cc7c7bb1bef2788755583bb35d3b303", "filename": "src/test/run-pass/cast-rfc0401-vtable-kinds.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea7637ebc0e5d325ccf0537a8013316c2ed78108/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7637ebc0e5d325ccf0537a8013316c2ed78108/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs?ref=ea7637ebc0e5d325ccf0537a8013316c2ed78108", "patch": "@@ -23,12 +23,11 @@ impl<T> Foo<T> for () {}\n impl Foo<u32> for u32 { fn foo(&self, _: u32) -> u32 { self+43 } }\n impl Bar for () {}\n \n-unsafe fn fool<'a>(t: *const (Foo<u32>+'a)) -> u32 {\n-    let bar : *const Bar = t as *const Bar;\n+unsafe fn round_trip_and_call<'a>(t: *const (Foo<u32>+'a)) -> u32 {\n     let foo_e : *const Foo<u16> = t as *const _;\n     let r_1 = foo_e as *mut Foo<u32>;\n \n-    (&*r_1).foo(0)*(&*(bar as *const Foo<u32>)).foo(0)\n+    (&*r_1).foo(0)\n }\n \n #[repr(C)]\n@@ -43,8 +42,8 @@ fn foo_to_bar<T:?Sized>(u: *const FooS<T>) -> *const BarS<T> {\n fn main() {\n     let x = 4u32;\n     let y : &Foo<u32> = &x;\n-    let fl = unsafe { fool(y as *const Foo<u32>) };\n-    assert_eq!(fl, (43+4)*(43+4));\n+    let fl = unsafe { round_trip_and_call(y as *const Foo<u32>) };\n+    assert_eq!(fl, (43+4));\n \n     let s = FooS([0,1,2]);\n     let u: &FooS<[u32]> = &s;"}, {"sha": "efbf265bd80cf4cba59fddcd38e1d0b2f4c465d5", "filename": "src/test/run-pass/cast-rfc0401.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea7637ebc0e5d325ccf0537a8013316c2ed78108/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea7637ebc0e5d325ccf0537a8013316c2ed78108/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs?ref=ea7637ebc0e5d325ccf0537a8013316c2ed78108", "patch": "@@ -99,6 +99,12 @@ fn main()\n     let l_via_str = unsafe{&*(s as *const [u8])};\n     assert_eq!(&l, l_via_str);\n \n+    // ptr-ptr-cast (both vk=Length, check length is preserved)\n+    let l: [[u8; 3]; 2] = [[3, 2, 6], [4, 5, 1]];\n+    let p: *const [[u8; 3]] = &l;\n+    let p: &[[u8; 2]] = unsafe {&*(p as *const [[u8; 2]])};\n+    assert_eq!(p, [[3, 2], [6, 4]]);\n+\n     // enum-cast\n     assert_eq!(Simple::A as u8, 0);\n     assert_eq!(Simple::B as u8, 1);"}]}