{"sha": "0ac58f7bf86cd8a3616484b3ff1a794521368536", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzU4ZjdiZjg2Y2Q4YTM2MTY0ODRiM2ZmMWE3OTQ1MjEzNjg1MzY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-12T02:37:14Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-17T16:34:41Z"}, "message": "Split apart create_config and run_core", "tree": {"sha": "35ad6eac296508c986c08918f94b8e8f6ec38482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35ad6eac296508c986c08918f94b8e8f6ec38482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac58f7bf86cd8a3616484b3ff1a794521368536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac58f7bf86cd8a3616484b3ff1a794521368536", "html_url": "https://github.com/rust-lang/rust/commit/0ac58f7bf86cd8a3616484b3ff1a794521368536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac58f7bf86cd8a3616484b3ff1a794521368536/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5", "html_url": "https://github.com/rust-lang/rust/commit/caeb3335c052f286f6e7257ac0ff21e4f73fd8c5"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "ed3bc02a5de65031e4038e9ea195b5fe2c6a2baa", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ac58f7bf86cd8a3616484b3ff1a794521368536/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac58f7bf86cd8a3616484b3ff1a794521368536/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=0ac58f7bf86cd8a3616484b3ff1a794521368536", "patch": "@@ -273,12 +273,9 @@ where\n     (lint_opts, lint_caps)\n }\n \n-crate fn run_core(\n-    options: RustdocOptions,\n-) -> (clean::Crate, RenderInfo, RenderOptions, Lrc<Session>) {\n-    // Parse, resolve, and typecheck the given crate.\n-\n-    let RustdocOptions {\n+/// Parse, resolve, and typecheck the given crate.\n+fn create_config(\n+    RustdocOptions {\n         input,\n         crate_name,\n         proc_macro_crate,\n@@ -294,21 +291,10 @@ crate fn run_core(\n         lint_opts,\n         describe_lints,\n         lint_cap,\n-        default_passes,\n-        manual_passes,\n         display_warnings,\n-        render_options,\n-        output_format,\n         ..\n-    } = options;\n-\n-    let extern_names: Vec<String> = externs\n-        .iter()\n-        .filter(|(_, entry)| entry.add_prelude)\n-        .map(|(name, _)| name)\n-        .cloned()\n-        .collect();\n-\n+    }: RustdocOptions,\n+) -> rustc_interface::Config {\n     // Add the doc cfg into the doc build.\n     cfgs.push(\"doc\".to_string());\n \n@@ -374,7 +360,7 @@ crate fn run_core(\n         ..Options::default()\n     };\n \n-    let config = interface::Config {\n+    interface::Config {\n         opts: sessopts,\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n         input,\n@@ -417,7 +403,25 @@ crate fn run_core(\n         }),\n         make_codegen_backend: None,\n         registry: rustc_driver::diagnostics_registry(),\n-    };\n+    }\n+}\n+\n+crate fn run_core(\n+    options: RustdocOptions,\n+) -> (clean::Crate, RenderInfo, RenderOptions, Lrc<Session>) {\n+    let extern_names: Vec<String> = options\n+        .externs\n+        .iter()\n+        .filter(|(_, entry)| entry.add_prelude)\n+        .map(|(name, _)| name)\n+        .cloned()\n+        .collect();\n+    let default_passes = options.default_passes;\n+    let output_format = options.output_format;\n+    // TODO: fix this clone (especially render_options)\n+    let manual_passes = options.manual_passes.clone();\n+    let render_options = options.render_options.clone();\n+    let config = create_config(options);\n \n     interface::create_compiler_and_run(config, |compiler| {\n         compiler.enter(|queries| {"}]}