{"sha": "9902135bdd5c5ca3c3f04c39a4057c0d0244fc33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MDIxMzViZGQ1YzVjYTNjM2YwNGMzOWE0MDU3YzBkMDI0NGZjMzM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-25T00:49:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-25T00:49:04Z"}, "message": "tutorial: More generics cleanup", "tree": {"sha": "2e20804547c7a34baeb78cc2d641bc4d7d01e297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e20804547c7a34baeb78cc2d641bc4d7d01e297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9902135bdd5c5ca3c3f04c39a4057c0d0244fc33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9902135bdd5c5ca3c3f04c39a4057c0d0244fc33", "html_url": "https://github.com/rust-lang/rust/commit/9902135bdd5c5ca3c3f04c39a4057c0d0244fc33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9902135bdd5c5ca3c3f04c39a4057c0d0244fc33/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9b6c97b908d31643daddc7bc375069898e7d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9b6c97b908d31643daddc7bc375069898e7d06", "html_url": "https://github.com/rust-lang/rust/commit/dd9b6c97b908d31643daddc7bc375069898e7d06"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "73a6fa8c24073a203666ca8b0c495d511c64457b", "filename": "doc/tutorial.md", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9902135bdd5c5ca3c3f04c39a4057c0d0244fc33/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/9902135bdd5c5ca3c3f04c39a4057c0d0244fc33/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=9902135bdd5c5ca3c3f04c39a4057c0d0244fc33", "patch": "@@ -1712,6 +1712,29 @@ method declarations. So, re-declaring the type parameter\n `T` as an explicit type parameter for `len` -- in either the trait or\n the impl -- would be a compile-time error.\n \n+Within a trait definition, `self` is a special type that you can think\n+of as a type parameter. An implementation of the trait for any given\n+type `T` replaces the `self` type parameter with `T`. Simply, in a\n+trait, `self` is a type, and in an impl, `self` is a value. The\n+following trait describes types that support an equality operation:\n+\n+~~~~\n+// In a trait, `self` refers to the type implementing the trait\n+trait Eq {\n+  fn equals(other: &self) -> bool;\n+}\n+\n+// In an impl, self refers to the value of the receiver\n+impl int: Eq {\n+  fn equals(other: &int) -> bool { *other == self }\n+}\n+~~~~\n+\n+Notice that in the trait definition, `equals` takes a `self` type\n+argument, whereas, in the impl, `equals` takes an `int` type argument,\n+and uses `self` as the name of the receiver (analogous to the `this` pointer\n+in C++).\n+\n ## Bounded type parameters and static method dispatch\n \n Traits give us a language for talking about the abstract capabilities\n@@ -1753,7 +1776,7 @@ the preferred way to use traits polymorphically.\n \n This usage of traits is similar to Haskell type classes.\n \n-## Casting to a trait type and dynamic dispatch\n+## Casting to a trait type and dynamic method dispatch\n \n The above allows us to define functions that polymorphically act on\n values of a single unknown type that conforms to a given trait.\n@@ -1836,31 +1859,6 @@ method to call.\n \n This usage of traits is similar to Java interfaces.\n \n-## The `self` type\n-\n-In a trait, `self` is a special type that you can think of as a\n-type parameter. An implementation of the trait for any given type\n-`T` replaces the `self` type parameter with `T`. Simply, in a trait,\n-`self` is a type, and in an impl, `self` is a value. The following\n-trait describes types that support an equality operation:\n-\n-~~~~\n-// In a trait, `self` refers to the type implementing the trait\n-trait Eq {\n-  fn equals(&&other: self) -> bool;\n-}\n-\n-// In an impl, self refers to the value of the receiver\n-impl int: Eq {\n-  fn equals(&&other: int) -> bool { other == self }\n-}\n-~~~~\n-\n-Notice that in the trait definition, `equals` takes a `self` type\n-argument, whereas, in the impl, `equals` takes an `int` type argument,\n-and uses `self` as the name of the receiver (analogous to the `this` pointer\n-in C++).\n-\n # Modules and crates\n \n The Rust namespace is divided into modules. Each source file starts"}]}