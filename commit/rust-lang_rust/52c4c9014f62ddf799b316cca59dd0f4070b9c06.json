{"sha": "52c4c9014f62ddf799b316cca59dd0f4070b9c06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzRjOTAxNGY2MmRkZjc5OWIzMTZjY2E1OWRkMGY0MDcwYjljMDY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-10T19:56:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-10T19:57:29Z"}, "message": "Encode meta tags in the crate and start sketching enhanced logic for resolving crate \"use\" directives.\n\nNow with extra \"works on OSX\" kludging.", "tree": {"sha": "c755438a0bbacaef8e2282f055c9d5ab51b14854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c755438a0bbacaef8e2282f055c9d5ab51b14854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c4c9014f62ddf799b316cca59dd0f4070b9c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c4c9014f62ddf799b316cca59dd0f4070b9c06", "html_url": "https://github.com/rust-lang/rust/commit/52c4c9014f62ddf799b316cca59dd0f4070b9c06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c4c9014f62ddf799b316cca59dd0f4070b9c06/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4634f236a94fdbe5640b2ffeffc91d8016132264", "url": "https://api.github.com/repos/rust-lang/rust/commits/4634f236a94fdbe5640b2ffeffc91d8016132264", "html_url": "https://github.com/rust-lang/rust/commit/4634f236a94fdbe5640b2ffeffc91d8016132264"}], "stats": {"total": 222, "additions": 175, "deletions": 47}, "files": [{"sha": "d21969476a7327dd82eb2dda41a2e7e6c5db4990", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=52c4c9014f62ddf799b316cca59dd0f4070b9c06", "patch": "@@ -279,7 +279,7 @@ mod write {\n  */\n \n \n-iter crate_export_metas(ast::crate c) -> @ast::meta_item {\n+iter crate_export_metas(&ast::crate c) -> @ast::meta_item {\n     for (@ast::crate_directive cdir in c.node.directives) {\n         alt (cdir.node) {\n             case (ast::cdir_meta(?v, ?mis)) {\n@@ -293,12 +293,30 @@ iter crate_export_metas(ast::crate c) -> @ast::meta_item {\n         }\n     }\n }\n-fn get_crate_meta(&session::session sess,\n-                  &ast::crate c, str k, str default,\n-                  bool warn_default) -> str {\n+\n+\n+iter crate_local_metas(&ast::crate c) -> @ast::meta_item {\n+    for (@ast::crate_directive cdir in c.node.directives) {\n+        alt (cdir.node) {\n+            case (ast::cdir_meta(?v, ?mis)) {\n+                if (v == ast::local_meta) {\n+                    for (@ast::meta_item mi in mis) {\n+                        put mi;\n+                    }\n+                }\n+            }\n+            case (_) {}\n+        }\n+    }\n+}\n+\n+\n+fn get_crate_meta_export(&session::session sess,\n+                         &ast::crate c, str k, str default,\n+                         bool warn_default) -> str {\n     let vec[@ast::meta_item] v = [];\n     for each (@ast::meta_item mi in crate_export_metas(c)) {\n-        if (mi.node.name == k) {\n+        if (mi.node.key == k) {\n             v += [mi];\n         }\n     }\n@@ -323,7 +341,7 @@ fn get_crate_meta(&session::session sess,\n fn crate_meta_extras_hash(sha1 sha, &ast::crate crate) -> str {\n     fn lteq(&@ast::meta_item ma,\n             &@ast::meta_item mb) -> bool {\n-        ret ma.node.name <= mb.node.name;\n+        ret ma.node.key <= mb.node.key;\n     }\n \n     fn len_and_str(&str s) -> str {\n@@ -332,16 +350,16 @@ fn crate_meta_extras_hash(sha1 sha, &ast::crate crate) -> str {\n \n     let vec[mutable @ast::meta_item] v = [mutable];\n     for each (@ast::meta_item mi in crate_export_metas(crate)) {\n-        if (mi.node.name != \"name\" &&\n-            mi.node.name != \"vers\") {\n+        if (mi.node.key != \"name\" &&\n+            mi.node.key != \"vers\") {\n             v += [mutable mi];\n         }\n     }\n     sort::quick_sort(lteq, v);\n     sha.reset();\n     for (@ast::meta_item m_ in v) {\n         auto m = m_;\n-        sha.input_str(len_and_str(m.node.name));\n+        sha.input_str(len_and_str(m.node.key));\n         sha.input_str(len_and_str(m.node.value));\n     }\n     ret truncated_sha1_result(sha);\n@@ -352,13 +370,13 @@ fn crate_meta_name(&session::session sess, &ast::crate crate,\n     auto os = str::split(fs::basename(output), '.' as u8);\n     assert vec::len(os) >= 2u;\n     vec::pop(os);\n-    ret get_crate_meta(sess, crate, \"name\", str::connect(os, \".\"),\n-                       sess.get_opts().shared);\n+    ret get_crate_meta_export(sess, crate, \"name\", str::connect(os, \".\"),\n+                              sess.get_opts().shared);\n }\n \n fn crate_meta_vers(&session::session sess, &ast::crate crate) -> str {\n-    ret get_crate_meta(sess, crate, \"vers\", \"0.0\",\n-                       sess.get_opts().shared);\n+    ret get_crate_meta_export(sess, crate, \"vers\", \"0.0\",\n+                              sess.get_opts().shared);\n }\n \n fn truncated_sha1_result(sha1 sha) -> str {"}, {"sha": "3220fcdb3b7922af7354e5a1cc8e5580666317cc", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=52c4c9014f62ddf799b316cca59dd0f4070b9c06", "patch": "@@ -97,7 +97,7 @@ type crate_directive = spanned[crate_directive_];\n \n \n type meta_item = spanned[meta_item_];\n-type meta_item_ = rec(ident name, str value);\n+type meta_item_ = rec(ident key, str value);\n \n type block = spanned[block_];\n type block_ = rec(vec[@stmt] stmts,"}, {"sha": "6abae3c61b732d1abbf4ed7c0c463d0be56765d8", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 67, "deletions": 16, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=52c4c9014f62ddf799b316cca59dd0f4070b9c06", "patch": "@@ -506,24 +506,75 @@ fn get_metadata_section(str filename) -> option::t[vec[u8]] {\n }\n \n \n-fn load_crate(session::session sess,\n-              int cnum,\n-              ast::ident ident,\n-              vec[str] library_search_paths) {\n-    auto filename = parser::default_native_name(sess, ident);\n+fn metadata_matches(&vec[u8] data,\n+                    &vec[@ast::meta_item] metas) -> bool {\n+    ret true;\n+}\n+\n+fn find_library_crate(&session::session sess,\n+                      &ast::ident ident,\n+                      &vec[@ast::meta_item] metas,\n+                      &vec[str] library_search_paths)\n+    -> option::t[tup(str, vec[u8])] {\n+\n+    let str crate_name = ident;\n+    for (@ast::meta_item mi in metas) {\n+        if (mi.node.key == \"name\") {\n+            crate_name = mi.node.value;\n+            break;\n+        }\n+    }\n+    auto nn = parser::default_native_lib_naming(sess);\n+    let str prefix = nn.prefix + crate_name;\n+\n+    // FIXME: we could probably use a 'glob' function in std::fs but it will\n+    // be much easier to write once the unsafe module knows more about FFI\n+    // tricks. Currently the glob(3) interface is a bit more than we can\n+    // stomach from here, and writing a C++ wrapper is more work than just\n+    // manually filtering fs::list_dir here.\n+\n     for (str library_search_path in library_search_paths) {\n-        auto path = fs::connect(library_search_path, filename);\n-        alt (get_metadata_section(path)) {\n-            case (option::some(?cvec)) {\n-                sess.set_external_crate(cnum, rec(name=ident, data=cvec));\n-                ret;\n+\n+        for (str path in fs::list_dir(library_search_path)) {\n+\n+            let str f = fs::basename(path);\n+            if (! (str::starts_with(f, prefix) &&\n+                   str::ends_with(f, nn.suffix))) {\n+                log #fmt(\"skipping %s, doesn't look like %s*%s\",\n+                         path, prefix, nn.suffix);\n+                cont;\n+            }\n+\n+            alt (get_metadata_section(path)) {\n+                case (option::some(?cvec)) {\n+                    if (!metadata_matches(cvec, metas)) {\n+                        log #fmt(\"skipping %s, metadata doesn't match\", path);\n+                        cont;\n+                    }\n+                    log #fmt(\"found %s with matching metadata\", path);\n+                    ret some(tup(path, cvec));\n+                }\n+                case (_) {}\n             }\n-            case (_) {}\n         }\n     }\n-\n-    log_err #fmt(\"can't open crate '%s' (looked for '%s' in lib search path)\",\n-                 ident, filename);\n+    ret none;\n+}\n+\n+fn load_library_crate(&session::session sess,\n+                      &int cnum,\n+                      &ast::ident ident,\n+                      &vec[@ast::meta_item] metas,\n+                      &vec[str] library_search_paths) {\n+    alt (find_library_crate(sess, ident, metas, library_search_paths)) {\n+        case (some(?t)) {\n+            sess.set_external_crate(cnum, rec(name=ident,\n+                                              data=t._1));\n+            ret;\n+        }\n+        case (_) {}\n+    }\n+    log_err #fmt(\"can't find crate for '%s'\", ident);\n     fail;\n }\n \n@@ -541,8 +592,8 @@ fn visit_view_item(env e, &@ast::view_item i) {\n             auto cnum;\n             if (!e.crate_cache.contains_key(ident)) {\n                 cnum = e.next_crate_num;\n-                load_crate(e.sess, cnum, ident,\n-                           e.library_search_paths);\n+                load_library_crate(e.sess, cnum, ident, meta_items,\n+                                   e.library_search_paths);\n                 e.crate_cache.insert(ident, e.next_crate_num);\n                 e.next_crate_num += 1;\n             } else {"}, {"sha": "5ff99c22d4011e74dd470600460576165289ea5c", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=52c4c9014f62ddf799b316cca59dd0f4070b9c06", "patch": "@@ -1976,20 +1976,26 @@ fn parse_native_mod_items(&parser p, &str native_name,\n             items=items);\n }\n \n-fn default_native_name(session::session sess, str id) -> str {\n+fn default_native_lib_naming(session::session sess)\n+    -> rec(str prefix, str suffix) {\n     alt (sess.get_targ_cfg().os) {\n         case (session::os_win32) {\n-            ret id + \".dll\";\n+            ret rec(prefix=\"\", suffix=\".dll\");\n         }\n         case (session::os_macos) {\n-            ret \"lib\" + id + \".dylib\";\n+            ret rec(prefix=\"lib\", suffix=\".dylib\");\n         }\n         case (session::os_linux) {\n-            ret \"lib\" + id + \".so\";\n+            ret rec(prefix=\"lib\", suffix=\".so\");\n         }\n     }\n }\n \n+fn default_native_name(session::session sess, str id) -> str {\n+    auto n = default_native_lib_naming(sess);\n+    ret n.prefix + id + n.suffix;\n+}\n+\n fn parse_item_native_mod(&parser p) -> @ast::item {\n     auto lo = p.get_last_lo_pos();\n     auto abi = ast::native_abi_cdecl;\n@@ -2178,7 +2184,7 @@ fn parse_meta_item(&parser p) -> @ast::meta_item {\n         case (token::LIT_STR(?s)) {\n             auto hi = p.get_hi_pos();\n             p.bump();\n-            ret @spanned(lo, hi, rec(name = ident,\n+            ret @spanned(lo, hi, rec(key = ident,\n                                      value = p.get_str(s)));\n         }\n         case (_) {"}, {"sha": "540c336fa086f88114cf004ef4269b220654212e", "filename": "src/comp/middle/metadata.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Fmiddle%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmetadata.rs?ref=52c4c9014f62ddf799b316cca59dd0f4070b9c06", "patch": "@@ -14,6 +14,7 @@ import middle::trans;\n import middle::ty;\n import middle::ty::path_to_str;\n import back::x86;\n+import back::link;\n import util::common;\n import pretty::ppaux::lit_to_str;\n \n@@ -46,6 +47,12 @@ const uint tag_index_buckets_bucket = 0x13u;\n const uint tag_index_buckets_bucket_elt = 0x14u;\n const uint tag_index_table = 0x15u;\n \n+const uint tag_meta_export = 0x16u;\n+const uint tag_meta_local = 0x17u;\n+const uint tag_meta_item = 0x18u;\n+const uint tag_meta_item_key = 0x19u;\n+const uint tag_meta_item_value = 0x20u;\n+\n // Type encoding\n \n // Compact string representation for ty.t values. API ty_str & parse_from_str.\n@@ -717,12 +724,41 @@ fn write_int(&io::writer writer, &int n) {\n }\n \n \n+fn encode_meta_items(&ebml::writer ebml_w, &ast::crate crate) {\n+\n+    fn encode_meta_item(&ebml::writer ebml_w, &ast::meta_item mi) {\n+        ebml::start_tag(ebml_w, tag_meta_item);\n+        ebml::start_tag(ebml_w, tag_meta_item_key);\n+        ebml_w.writer.write(str::bytes(mi.node.key));\n+        ebml::end_tag(ebml_w);\n+        ebml::start_tag(ebml_w, tag_meta_item_value);\n+        ebml_w.writer.write(str::bytes(mi.node.value));\n+        ebml::end_tag(ebml_w);\n+        ebml::end_tag(ebml_w);\n+    }\n+\n+    ebml::start_tag(ebml_w, tag_meta_export);\n+    for each (@ast::meta_item mi in link::crate_export_metas(crate)) {\n+        encode_meta_item(ebml_w, *mi);\n+    }\n+    ebml::end_tag(ebml_w);\n+\n+    ebml::start_tag(ebml_w, tag_meta_local);\n+    for each (@ast::meta_item mi in link::crate_local_metas(crate)) {\n+        encode_meta_item(ebml_w, *mi);\n+    }\n+    ebml::end_tag(ebml_w);\n+}\n+\n fn encode_metadata(&@trans::crate_ctxt cx, &@ast::crate crate)\n         -> ValueRef {\n     auto string_w = io::string_writer();\n     auto buf_w = string_w.get_writer().get_buf_writer();\n     auto ebml_w = ebml::create_writer(buf_w);\n \n+    // Encode the meta items\n+    encode_meta_items(ebml_w, *crate);\n+\n     // Encode and index the paths.\n     ebml::start_tag(ebml_w, tag_paths);\n     auto paths_index = encode_item_paths(ebml_w, crate);"}, {"sha": "972e12134bd7790ccbb515b10af19461fb181deb", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=52c4c9014f62ddf799b316cca59dd0f4070b9c06", "patch": "@@ -1009,7 +1009,7 @@ fn print_view_item(&ps s, &@ast::view_item item) {\n                 popen(s);\n                 fn print_meta(&ps s, &@ast::meta_item item) {\n                     ibox(s, indent_unit);\n-                    word_space(s, item.node.name);\n+                    word_space(s, item.node.key);\n                     word_space(s, \"=\");\n                     print_string(s, item.node.value);\n                     end(s);"}, {"sha": "5f0e9fc494c067266ee6ec794695e343b6947dcd", "filename": "src/lib/posix_fs.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Flib%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Flib%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fposix_fs.rs?ref=52c4c9014f62ddf799b316cca59dd0f4070b9c06", "patch": "@@ -1,22 +1,33 @@\n native \"rust\" mod rustrt {\n+  fn rust_list_files(str path) -> vec[str];\n   fn rust_dirent_filename(os::libc::dirent ent) -> str;\n }\n \n fn list_dir(str path) -> vec[str] {\n+  ret rustrt::rust_list_files(path);\n   // TODO ensure this is always closed\n+\n+  // FIXME: No idea why, but this appears to corrupt memory on OSX. I suspect\n+  // it has to do with the tasking primitives somehow, or perhaps the\n+  // FFI. Worth investigating more when we're digging into the FFI and unsafe\n+  // mode in more detail; in the meantime we just call list_files above and\n+  // skip this code.\n+\n+  /*\n   auto dir = os::libc::opendir(str::buf(path));\n   assert (dir as uint != 0u);\n   let vec[str] result = [];\n   while (true) {\n-    auto ent = os::libc::readdir(dir);\n-    if (ent as int == 0) {\n-        os::libc::closedir(dir);\n-        ret result;\n-    }\n-    vec::push[str](result, rustrt::rust_dirent_filename(ent));\n+      auto ent = os::libc::readdir(dir);\n+      if (ent as int == 0) {\n+          os::libc::closedir(dir);\n+          ret result;\n+      }\n+      vec::push[str](result, rustrt::rust_dirent_filename(ent));\n   }\n   os::libc::closedir(dir);\n   ret result;\n+  */\n }\n \n const char path_sep = '/';"}, {"sha": "f4b2639b1370463c5e2e277314cbbd7295cfc554", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/52c4c9014f62ddf799b316cca59dd0f4070b9c06/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=52c4c9014f62ddf799b316cca59dd0f4070b9c06", "patch": "@@ -486,8 +486,8 @@ rust_str* c_str_to_rust(rust_task *task, char const *str) {\n \n extern \"C\" CDECL rust_vec*\n rust_list_files(rust_task *task, rust_str *path) {\n-#if defined(__WIN32__)\n     array_list<rust_str*> strings;\n+#if defined(__WIN32__)\n     WIN32_FIND_DATA FindFileData;\n     HANDLE hFind = FindFirstFile((char*)path->data, &FindFileData);\n     if (hFind != INVALID_HANDLE_VALUE) {\n@@ -496,11 +496,17 @@ rust_list_files(rust_task *task, rust_str *path) {\n         } while (FindNextFile(hFind, &FindFileData));\n         FindClose(hFind);\n     }\n-    return vec_alloc_with_data(task, strings.size(), strings.size(),\n-                               sizeof(rust_str*), strings.data());\n #else\n-    return NULL;\n+  DIR *dirp = opendir((char*)path->data);\n+  if (dirp) {\n+      struct dirent *dp;\n+      while ((dp = readdir(dirp)))\n+          strings.push(c_str_to_rust(task, dp->d_name));\n+      closedir(dirp);\n+  }\n #endif\n+  return vec_alloc_with_data(task, strings.size(), strings.size(),\n+                             sizeof(rust_str*), strings.data());\n }\n \n #if defined(__WIN32__)\n@@ -562,6 +568,6 @@ get_time(rust_task *task, uint32_t *sec, uint32_t *usec) {\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:\n //"}]}