{"sha": "84366b6f281614f61381962e2e46b73bb471c737", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MzY2YjZmMjgxNjE0ZjYxMzgxOTYyZTJlNDZiNzNiYjQ3MWM3Mzc=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-06-13T21:47:18Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-07-27T17:58:51Z"}, "message": "recursion", "tree": {"sha": "78b8a5dcc9e02472cee21ac81c6bd02ee732bfd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b8a5dcc9e02472cee21ac81c6bd02ee732bfd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84366b6f281614f61381962e2e46b73bb471c737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84366b6f281614f61381962e2e46b73bb471c737", "html_url": "https://github.com/rust-lang/rust/commit/84366b6f281614f61381962e2e46b73bb471c737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84366b6f281614f61381962e2e46b73bb471c737/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2fc48dec9ae582ebba9761185afc5e21bf47b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2fc48dec9ae582ebba9761185afc5e21bf47b6", "html_url": "https://github.com/rust-lang/rust/commit/cc2fc48dec9ae582ebba9761185afc5e21bf47b6"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "5a2ec86c12f56673866a2a2c244acfce8d6ba13e", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84366b6f281614f61381962e2e46b73bb471c737/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/84366b6f281614f61381962e2e46b73bb471c737/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=84366b6f281614f61381962e2e46b73bb471c737", "patch": "@@ -580,10 +580,10 @@ However, the language provides a workaround.\n \n As a special case, an `enum` is eligible for the \"nullable pointer optimization\" if it\n contains exactly two variants, one of which contains no data and the other contains\n-a single field of one of the non-nullable types listed above. This means it is represented\n-as a single pointer, and the non-data variant is represented as the null pointer. This is\n-called an \"optimization\", but unlike other optimizations it is guaranteed to apply to\n-eligible types.\n+a single field of one of the non-nullable types listed above (or a struct containing such a type).\n+This means it is represented as a single pointer, and the non-data variant is represented as a\n+null pointer. This is called an \"optimization\", but unlike other optimizations it is guaranteed\n+to apply to eligible types.\n \n The most common type that takes advantage of the nullable pointer optimization is `Option<T>`,\n where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` is a correct way"}]}