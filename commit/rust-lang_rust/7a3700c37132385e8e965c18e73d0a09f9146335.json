{"sha": "7a3700c37132385e8e965c18e73d0a09f9146335", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzcwMGMzNzEzMjM4NWU4ZTk2NWMxOGU3M2QwYTA5ZjkxNDYzMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-04T07:29:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-04T07:29:32Z"}, "message": "Auto merge of #68952 - faern:stabilize-assoc-int-consts, r=dtolnay\n\nStabilize assoc_int_consts associated int/float constants\n\nThe next step in RFC https://github.com/rust-lang/rfcs/pull/2700 (tracking issue #68490). Stabilizing the associated constants that were added in #68325.\n\n* Stabilize all constants under the `assoc_int_consts` feature flag.\n* Update documentation on old constants to say they are soft-deprecated and the new ones should be preferred.\n* Update documentation examples to use new constants.\n* Remove `uint_macro` and use `int_macro` for all integer types since the macros were identical anyway.\n\nr? @LukasKalbertodt", "tree": {"sha": "cf93f1e8c8baa1977cb1df932c895aa9a135b665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf93f1e8c8baa1977cb1df932c895aa9a135b665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3700c37132385e8e965c18e73d0a09f9146335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3700c37132385e8e965c18e73d0a09f9146335", "html_url": "https://github.com/rust-lang/rust/commit/7a3700c37132385e8e965c18e73d0a09f9146335", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3700c37132385e8e965c18e73d0a09f9146335/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d71c164a89b705df6affd31a5262c832d1bc48d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d71c164a89b705df6affd31a5262c832d1bc48d", "html_url": "https://github.com/rust-lang/rust/commit/4d71c164a89b705df6affd31a5262c832d1bc48d"}, {"sha": "b2dc6187699d99436f6183218d928be09d439578", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2dc6187699d99436f6183218d928be09d439578", "html_url": "https://github.com/rust-lang/rust/commit/b2dc6187699d99436f6183218d928be09d439578"}], "stats": {"total": 505, "additions": 263, "deletions": 242}, "files": [{"sha": "41fb4a77c7ae848bf4a3f719ec4217eb036b291d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -141,7 +141,6 @@\n #![feature(associated_type_bounds)]\n #![feature(const_type_id)]\n #![feature(const_caller_location)]\n-#![feature(assoc_int_consts)]\n #![cfg_attr(not(bootstrap), feature(no_niche))] // rust-lang/rust#68303\n \n #[prelude_import]\n@@ -159,10 +158,6 @@ mod internal_macros;\n #[macro_use]\n mod int_macros;\n \n-#[path = \"num/uint_macros.rs\"]\n-#[macro_use]\n-mod uint_macros;\n-\n #[path = \"num/i128.rs\"]\n pub mod i128;\n #[path = \"num/i16.rs\"]"}, {"sha": "3fdc2bae33876314a0ac0b100df23933d174adfe", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -4,6 +4,9 @@\n //! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -14,17 +17,21 @@ use crate::mem;\n use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f32`.\n+/// Use [`f32::RADIX`](../../std/primitive.f32.html#associatedconstant.RADIX) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n+/// Use [`f32::MANTISSA_DIGITS`](../../std/primitive.f32.html#associatedconstant.MANTISSA_DIGITS) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n /// Approximate number of significant digits in base 10.\n+/// Use [`f32::DIGITS`](../../std/primitive.f32.html#associatedconstant.DIGITS) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = f32::DIGITS;\n \n /// [Machine epsilon] value for `f32`.\n+/// Use [`f32::EPSILON`](../../std/primitive.f32.html#associatedconstant.EPSILON) instead.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n@@ -33,36 +40,46 @@ pub const DIGITS: u32 = f32::DIGITS;\n pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n+/// Use [`f32::MIN`](../../std/primitive.f32.html#associatedconstant.MIN) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f32 = f32::MIN;\n /// Smallest positive normal `f32` value.\n+/// Use [`f32::MIN_POSITIVE`](../../std/primitive.f32.html#associatedconstant.MIN_POSITIVE) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n /// Largest finite `f32` value.\n+/// Use [`f32::MAX`](../../std/primitive.f32.html#associatedconstant.MAX) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n+/// Use [`f32::MIN_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_EXP: i32 = f32::MIN_EXP;\n /// Maximum possible power of 2 exponent.\n+/// Use [`f32::MAX_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n+/// Use [`f32::MIN_10_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_10_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n /// Maximum possible power of 10 exponent.\n+/// Use [`f32::MAX_10_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_10_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n+/// Use [`f32::NAN`](../../std/primitive.f32.html#associatedconstant.NAN) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NAN: f32 = f32::NAN;\n /// Infinity (\u221e).\n+/// Use [`f32::INFINITY`](../../std/primitive.f32.html#associatedconstant.INFINITY) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f32 = f32::INFINITY;\n /// Negative infinity (\u2212\u221e).\n+/// Use [`f32::NEG_INFINITY`](../../std/primitive.f32.html#associatedconstant.NEG_INFINITY) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f32 = f32::NEG_INFINITY;\n \n@@ -154,64 +171,62 @@ pub mod consts {\n #[cfg(not(test))]\n impl f32 {\n     /// The radix or base of the internal representation of `f32`.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const RADIX: u32 = 2;\n \n     /// Number of significant digits in base 2.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MANTISSA_DIGITS: u32 = 24;\n \n     /// Approximate number of significant digits in base 10.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const DIGITS: u32 = 6;\n \n     /// [Machine epsilon] value for `f32`.\n     ///\n     /// This is the difference between `1.0` and the next larger representable number.\n     ///\n     /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const EPSILON: f32 = 1.19209290e-07_f32;\n \n     /// Smallest finite `f32` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN: f32 = -3.40282347e+38_f32;\n     /// Smallest positive normal `f32` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n     /// Largest finite `f32` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX: f32 = 3.40282347e+38_f32;\n \n     /// One greater than the minimum possible normal power of 2 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_EXP: i32 = -125;\n     /// Maximum possible power of 2 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX_EXP: i32 = 128;\n \n     /// Minimum possible normal power of 10 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_10_EXP: i32 = -37;\n     /// Maximum possible power of 10 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX_10_EXP: i32 = 38;\n \n     /// Not a Number (NaN).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n     /// Infinity (\u221e).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const INFINITY: f32 = 1.0_f32 / 0.0_f32;\n     /// Negative infinity (-\u221e).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n \n     /// Returns `true` if this value is `NaN`.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let nan = f32::NAN;\n     /// let f = 7.0_f32;\n     ///\n@@ -236,8 +251,6 @@ impl f32 {\n     /// `false` otherwise.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let f = 7.0f32;\n     /// let inf = f32::INFINITY;\n     /// let neg_inf = f32::NEG_INFINITY;\n@@ -258,8 +271,6 @@ impl f32 {\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let f = 7.0f32;\n     /// let inf = f32::INFINITY;\n     /// let neg_inf = f32::NEG_INFINITY;\n@@ -283,8 +294,6 @@ impl f32 {\n     /// [subnormal], or `NaN`.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32\n     /// let max = f32::MAX;\n     /// let lower_than_min = 1.0e-40_f32;\n@@ -312,7 +321,6 @@ impl f32 {\n     ///\n     /// ```\n     /// use std::num::FpCategory;\n-    /// use std::f32;\n     ///\n     /// let num = 12.4_f32;\n     /// let inf = f32::INFINITY;\n@@ -372,8 +380,6 @@ impl f32 {\n     /// Takes the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n-    /// use std::f32;\n-    ///\n     /// let x = 2.0_f32;\n     /// let abs_difference = (x.recip() - (1.0 / x)).abs();\n     ///\n@@ -388,7 +394,7 @@ impl f32 {\n     /// Converts radians to degrees.\n     ///\n     /// ```\n-    /// use std::f32::{self, consts};\n+    /// use std::f32::consts;\n     ///\n     /// let angle = consts::PI;\n     ///\n@@ -407,7 +413,7 @@ impl f32 {\n     /// Converts degrees to radians.\n     ///\n     /// ```\n-    /// use std::f32::{self, consts};\n+    /// use std::f32::consts;\n     ///\n     /// let angle = 180.0f32;\n     ///"}, {"sha": "129df937c0bb887c8eafc5001b1a5605d41c93f2", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -4,6 +4,9 @@\n //! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -14,17 +17,21 @@ use crate::mem;\n use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f64`.\n+/// Use [`f64::RADIX`](../../std/primitive.f64.html#associatedconstant.RADIX) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n+/// Use [`f64::MANTISSA_DIGITS`](../../std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n /// Approximate number of significant digits in base 10.\n+/// Use [`f64::DIGITS`](../../std/primitive.f64.html#associatedconstant.DIGITS) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = f64::DIGITS;\n \n /// [Machine epsilon] value for `f64`.\n+/// Use [`f64::EPSILON`](../../std/primitive.f64.html#associatedconstant.EPSILON) instead.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n@@ -33,36 +40,46 @@ pub const DIGITS: u32 = f64::DIGITS;\n pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n+/// Use [`f64::MIN`](../../std/primitive.f64.html#associatedconstant.MIN) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN: f64 = f64::MIN;\n /// Smallest positive normal `f64` value.\n+/// Use [`f64::MIN_POSITIVE`](../../std/primitive.f64.html#associatedconstant.MIN_POSITIVE) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n /// Largest finite `f64` value.\n+/// Use [`f64::MAX`](../../std/primitive.f64.html#associatedconstant.MAX) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n+/// Use [`f64::MIN_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_EXP: i32 = f64::MIN_EXP;\n /// Maximum possible power of 2 exponent.\n+/// Use [`f64::MAX_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n+/// Use [`f64::MIN_10_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_10_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n /// Maximum possible power of 10 exponent.\n+/// Use [`f64::MAX_10_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_10_EXP) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n+/// Use [`f64::NAN`](../../std/primitive.f64.html#associatedconstant.NAN) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NAN: f64 = f64::NAN;\n /// Infinity (\u221e).\n+/// Use [`f64::INFINITY`](../../std/primitive.f64.html#associatedconstant.INFINITY) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f64 = f64::INFINITY;\n /// Negative infinity (\u2212\u221e).\n+/// Use [`f64::NEG_INFINITY`](../../std/primitive.f64.html#associatedconstant.NEG_INFINITY) instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f64 = f64::NEG_INFINITY;\n \n@@ -154,63 +171,61 @@ pub mod consts {\n #[cfg(not(test))]\n impl f64 {\n     /// The radix or base of the internal representation of `f64`.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const RADIX: u32 = 2;\n \n     /// Number of significant digits in base 2.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MANTISSA_DIGITS: u32 = 53;\n     /// Approximate number of significant digits in base 10.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const DIGITS: u32 = 15;\n \n     /// [Machine epsilon] value for `f64`.\n     ///\n     /// This is the difference between `1.0` and the next larger representable number.\n     ///\n     /// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n \n     /// Smallest finite `f64` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN: f64 = -1.7976931348623157e+308_f64;\n     /// Smallest positive normal `f64` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n     /// Largest finite `f64` value.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX: f64 = 1.7976931348623157e+308_f64;\n \n     /// One greater than the minimum possible normal power of 2 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_EXP: i32 = -1021;\n     /// Maximum possible power of 2 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX_EXP: i32 = 1024;\n \n     /// Minimum possible normal power of 10 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MIN_10_EXP: i32 = -307;\n     /// Maximum possible power of 10 exponent.\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const MAX_10_EXP: i32 = 308;\n \n     /// Not a Number (NaN).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n     /// Infinity (\u221e).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const INFINITY: f64 = 1.0_f64 / 0.0_f64;\n     /// Negative infinity (-\u221e).\n-    #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+    #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n \n     /// Returns `true` if this value is `NaN`.\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let nan = f64::NAN;\n     /// let f = 7.0_f64;\n     ///\n@@ -235,8 +250,6 @@ impl f64 {\n     /// `false` otherwise.\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let f = 7.0f64;\n     /// let inf = f64::INFINITY;\n     /// let neg_inf = f64::NEG_INFINITY;\n@@ -257,8 +270,6 @@ impl f64 {\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let f = 7.0f64;\n     /// let inf: f64 = f64::INFINITY;\n     /// let neg_inf: f64 = f64::NEG_INFINITY;\n@@ -282,8 +293,6 @@ impl f64 {\n     /// [subnormal], or `NaN`.\n     ///\n     /// ```\n-    /// use std::f64;\n-    ///\n     /// let min = f64::MIN_POSITIVE; // 2.2250738585072014e-308f64\n     /// let max = f64::MAX;\n     /// let lower_than_min = 1.0e-308_f64;\n@@ -311,7 +320,6 @@ impl f64 {\n     ///\n     /// ```\n     /// use std::num::FpCategory;\n-    /// use std::f64;\n     ///\n     /// let num = 12.4_f64;\n     /// let inf = f64::INFINITY;"}, {"sha": "08cb7959468689ceb44d7a633e2a9b6d26ebaf50", "filename": "src/libcore/num/i128.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi128.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,6 +1,9 @@\n //! The 128-bit signed integer type.\n //!\n //! *[See also the `i128` primitive type](../../std/primitive.i128.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"i128\", since = \"1.26.0\")]\n "}, {"sha": "288eaceba59d6babd5f53187e2e73909eb195eb3", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,6 +1,9 @@\n //! The 16-bit signed integer type.\n //!\n //! *[See also the `i16` primitive type](../../std/primitive.i16.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "0e1a2ec56ccb2419b003425d87c94c815b4f24e7", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,6 +1,9 @@\n //! The 32-bit signed integer type.\n //!\n //! *[See also the `i32` primitive type](../../std/primitive.i32.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "27f7092710b347872842c2016b556cd122e42f27", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,6 +1,9 @@\n //! The 64-bit signed integer type.\n //!\n //! *[See also the `i64` primitive type](../../std/primitive.i64.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "e84b421e1a4447c9785f3b751b8d0bbe7e993831", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,6 +1,9 @@\n //! The 8-bit signed integer type.\n //!\n //! *[See also the `i8` primitive type](../../std/primitive.i8.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "b68a09e1131809230509fa3e6f9c9827809924cc", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,13 +1,27 @@\n #![doc(hidden)]\n \n+macro_rules! doc_comment {\n+    ($x:expr, $($tt:tt)*) => {\n+        #[doc = $x]\n+        $($tt)*\n+    };\n+}\n+\n macro_rules! int_module {\n     ($T:ident) => (int_module!($T, #[stable(feature = \"rust1\", since = \"1.0.0\")]););\n     ($T:ident, #[$attr:meta]) => (\n-        /// The smallest value that can be represented by this integer type.\n-        #[$attr]\n-        pub const MIN: $T = $T::min_value();\n-        /// The largest value that can be represented by this integer type.\n-        #[$attr]\n-        pub const MAX: $T = $T::max_value();\n+        doc_comment! {\n+            concat!(\"The smallest value that can be represented by this integer type.\n+Use [`\", stringify!($T), \"::MIN\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MIN) instead.\"),\n+            #[$attr]\n+            pub const MIN: $T = $T::min_value();\n+        }\n+\n+        doc_comment! {\n+            concat!(\"The largest value that can be represented by this integer type.\n+Use [`\", stringify!($T), \"::MAX\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MAX) instead.\"),\n+            #[$attr]\n+            pub const MAX: $T = $T::max_value();\n+        }\n     )\n }"}, {"sha": "0dcfa4a2bd134509a29179cf6b001725c14c5a80", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,6 +1,9 @@\n //! The pointer-sized signed integer type.\n //!\n //! *[See also the `isize` primitive type](../../std/primitive.isize.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "889ce2f211e14229f079e477e97207cb1ba9e24f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 129, "deletions": 135, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -266,11 +266,10 @@ macro_rules! int_impl {\n Basic usage:\n \n ```\n-#![feature(assoc_int_consts)]\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MIN, \", stringify!($Min), \");\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n             pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n         }\n \n@@ -282,36 +281,13 @@ $EndFeature, \"\n Basic usage:\n \n ```\n-#![feature(assoc_int_consts)]\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX, \", stringify!($Max), \");\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n             pub const MAX: Self = !Self::MIN;\n         }\n \n-        doc_comment! {\n-            \"Returns the smallest value that can be represented by this integer type.\",\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline(always)]\n-            #[rustc_promotable]\n-            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n-            pub const fn min_value() -> Self {\n-                Self::MIN\n-            }\n-        }\n-\n-        doc_comment! {\n-            \"Returns the largest value that can be represented by this integer type.\",\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[inline(always)]\n-            #[rustc_promotable]\n-            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-            pub const fn max_value() -> Self {\n-                Self::MAX\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts a string slice in a given base to an integer.\n \n@@ -369,7 +345,7 @@ $EndFeature, \"\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 1);\", $EndFeature, \"\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX.count_zeros(), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\")]\n@@ -706,8 +682,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!((\", stringify!($SelfT),\n-\"::max_value() - 2).checked_add(1), Some(\", stringify!($SelfT), \"::max_value() - 1));\n-assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\",\n+\"::MAX - 2).checked_add(1), Some(\", stringify!($SelfT), \"::MAX - 1));\n+assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -731,8 +707,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!((\", stringify!($SelfT),\n-\"::min_value() + 2).checked_sub(1), Some(\", stringify!($SelfT), \"::min_value() + 1));\n-assert_eq!((\", stringify!($SelfT), \"::min_value() + 2).checked_sub(3), None);\",\n+\"::MIN + 2).checked_sub(1), Some(\", stringify!($SelfT), \"::MIN + 1));\n+assert_eq!((\", stringify!($SelfT), \"::MIN + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -756,8 +732,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(\", stringify!($SelfT),\n-\"::max_value().checked_mul(1), Some(\", stringify!($SelfT), \"::max_value()));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\",\n+\"::MAX.checked_mul(1), Some(\", stringify!($SelfT), \"::MAX));\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -781,8 +757,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!((\", stringify!($SelfT),\n-\"::min_value() + 1).checked_div(-1), Some(\", stringify!($Max), \"));\n-assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div(-1), None);\n+\"::MIN + 1).checked_div(-1), Some(\", stringify!($Max), \"));\n+assert_eq!(\", stringify!($SelfT), \"::MIN.checked_div(-1), None);\n assert_eq!((1\", stringify!($SelfT), \").checked_div(0), None);\",\n $EndFeature, \"\n ```\"),\n@@ -811,8 +787,8 @@ Basic usage:\n \n ```\n assert_eq!((\", stringify!($SelfT),\n-\"::min_value() + 1).checked_div_euclid(-1), Some(\", stringify!($Max), \"));\n-assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euclid(-1), None);\n+\"::MIN + 1).checked_div_euclid(-1), Some(\", stringify!($Max), \"));\n+assert_eq!(\", stringify!($SelfT), \"::MIN.checked_div_euclid(-1), None);\n assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n ```\"),\n             #[stable(feature = \"euclidean_division\", since = \"1.38.0\")]\n@@ -838,8 +814,7 @@ assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".checked_rem(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem(-1), None);\",\n@@ -869,8 +844,6 @@ if `rhs == 0` or the division results in overflow.\n Basic usage:\n \n ```\n-use std::\", stringify!($SelfT), \";\n-\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n@@ -897,8 +870,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".checked_neg(), Some(-5));\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\",\n $EndFeature, \"\n@@ -969,8 +941,7 @@ $EndFeature, \"\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!((-5\", stringify!($SelfT), \").checked_abs(), Some(5));\n assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\",\n $EndFeature, \"\n@@ -997,7 +968,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(8\", stringify!($SelfT), \".checked_pow(2), Some(64));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_pow(2), None);\",\n $EndFeature, \"\n ```\"),\n \n@@ -1039,10 +1010,10 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_add(1), 101);\n-assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_add(100), \", stringify!($SelfT),\n-\"::max_value());\n-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_add(-1), \", stringify!($SelfT),\n-\"::min_value());\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_add(100), \", stringify!($SelfT),\n+\"::MAX);\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_add(-1), \", stringify!($SelfT),\n+\"::MIN);\",\n $EndFeature, \"\n ```\"),\n \n@@ -1066,10 +1037,10 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".saturating_sub(127), -27);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_sub(100), \", stringify!($SelfT),\n-\"::min_value());\n-assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_sub(-1), \", stringify!($SelfT),\n-\"::max_value());\",\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_sub(100), \", stringify!($SelfT),\n+\"::MIN);\n+assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_sub(-1), \", stringify!($SelfT),\n+\"::MAX);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1094,10 +1065,10 @@ Basic usage:\n \", $Feature, \"#![feature(saturating_neg)]\n assert_eq!(100\", stringify!($SelfT), \".saturating_neg(), -100);\n assert_eq!((-100\", stringify!($SelfT), \").saturating_neg(), 100);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_neg(), \", stringify!($SelfT),\n-\"::max_value());\n-assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_neg(), \", stringify!($SelfT),\n-\"::min_value() + 1);\",\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_neg(), \", stringify!($SelfT),\n+\"::MAX);\n+assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_neg(), \", stringify!($SelfT),\n+\"::MIN + 1);\",\n $EndFeature, \"\n ```\"),\n \n@@ -1121,10 +1092,10 @@ Basic usage:\n \", $Feature, \"#![feature(saturating_neg)]\n assert_eq!(100\", stringify!($SelfT), \".saturating_abs(), 100);\n assert_eq!((-100\", stringify!($SelfT), \").saturating_abs(), 100);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().saturating_abs(), \", stringify!($SelfT),\n-\"::max_value());\n-assert_eq!((\", stringify!($SelfT), \"::min_value() + 1).saturating_abs(), \", stringify!($SelfT),\n-\"::max_value());\",\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_abs(), \", stringify!($SelfT),\n+\"::MAX);\n+assert_eq!((\", stringify!($SelfT), \"::MIN + 1).saturating_abs(), \", stringify!($SelfT),\n+\"::MAX);\",\n $EndFeature, \"\n ```\"),\n \n@@ -1149,8 +1120,7 @@ numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(10\", stringify!($SelfT), \".saturating_mul(12), 120);\n assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_mul(10), \", stringify!($SelfT), \"::MAX);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($SelfT), \"::MIN);\",\n@@ -1182,8 +1152,7 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!((-4\", stringify!($SelfT), \").saturating_pow(3), -64);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT), \"::MIN);\",\n@@ -1213,8 +1182,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_add(27), 127);\n-assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_add(2), \", stringify!($SelfT),\n-\"::min_value() + 1);\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.wrapping_add(2), \", stringify!($SelfT),\n+\"::MIN + 1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1237,8 +1206,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(0\", stringify!($SelfT), \".wrapping_sub(127), -127);\n-assert_eq!((-2\", stringify!($SelfT), \").wrapping_sub(\", stringify!($SelfT), \"::max_value()), \",\n-stringify!($SelfT), \"::max_value());\",\n+assert_eq!((-2\", stringify!($SelfT), \").wrapping_sub(\", stringify!($SelfT), \"::MAX), \",\n+stringify!($SelfT), \"::MAX);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1409,8 +1378,8 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_neg(), -100);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().wrapping_neg(), \", stringify!($SelfT),\n-\"::min_value());\",\n+assert_eq!(\", stringify!($SelfT), \"::MIN.wrapping_neg(), \", stringify!($SelfT),\n+\"::MIN);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n@@ -1500,8 +1469,8 @@ Basic usage:\n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_abs(), 100);\n assert_eq!((-100\", stringify!($SelfT), \").wrapping_abs(), 100);\n-assert_eq!(\", stringify!($SelfT), \"::min_value().wrapping_abs(), \", stringify!($SelfT),\n-\"::min_value());\n+assert_eq!(\", stringify!($SelfT), \"::MIN.wrapping_abs(), \", stringify!($SelfT),\n+\"::MIN);\n assert_eq!((-128i8).wrapping_abs() as u8, 128);\",\n $EndFeature, \"\n ```\"),\n@@ -1572,8 +1541,7 @@ occur. If an overflow would have occurred then the wrapped value is returned.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\n assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (\", stringify!($SelfT),\n \"::MIN, true));\", $EndFeature, \"\n@@ -1600,8 +1568,7 @@ would occur. If an overflow would have occurred then the wrapped value is return\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_sub(2), (3, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_sub(1), (\", stringify!($SelfT),\n \"::MAX, true));\", $EndFeature, \"\n@@ -1658,8 +1625,7 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_div(2), (2, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div(-1), (\", stringify!($SelfT),\n \"::MIN, true));\",\n@@ -1694,8 +1660,6 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-use std::\", stringify!($SelfT), \";\n-\n assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringify!($SelfT),\n \"::MIN, true));\n@@ -1729,8 +1693,7 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_rem(2), (1, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem(-1), (0, true));\",\n $EndFeature, \"\n@@ -1765,8 +1728,6 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-use std::\", stringify!($SelfT), \";\n-\n assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n ```\"),\n@@ -1797,8 +1758,6 @@ minimum value will be returned again and `true` will be returned for an overflow\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n assert_eq!(2\", stringify!($SelfT), \".overflowing_neg(), (-2, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($SelfT),\n \"::MIN, true));\", $EndFeature, \"\n@@ -1884,8 +1843,8 @@ Basic usage:\n ```\n \", $Feature, \"assert_eq!(10\", stringify!($SelfT), \".overflowing_abs(), (10, false));\n assert_eq!((-10\", stringify!($SelfT), \").overflowing_abs(), (10, false));\n-assert_eq!((\", stringify!($SelfT), \"::min_value()).overflowing_abs(), (\", stringify!($SelfT),\n-\"::min_value(), true));\",\n+assert_eq!((\", stringify!($SelfT), \"::MIN).overflowing_abs(), (\", stringify!($SelfT),\n+\"::MIN, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n@@ -2083,10 +2042,10 @@ assert_eq!((-a).rem_euclid(-b), 1);\n \n # Overflow behavior\n \n-The absolute value of `\", stringify!($SelfT), \"::min_value()` cannot be represented as an\n+The absolute value of `\", stringify!($SelfT), \"::MIN` cannot be represented as an\n `\", stringify!($SelfT), \"`, and attempting to calculate it will cause an overflow. This means that\n code in debug mode will trigger a panic on this case and optimized code will return `\",\n-stringify!($SelfT), \"::min_value()` without a panic.\n+stringify!($SelfT), \"::MIN` without a panic.\n \n # Examples\n \n@@ -2367,6 +2326,38 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n                 unsafe { mem::transmute(bytes) }\n             }\n         }\n+\n+        doc_comment! {\n+            concat!(\"**This method is soft-deprecated.**\n+\n+Although using it won\u2019t cause compilation warning,\n+new code should use [`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN) instead.\n+\n+Returns the smallest value that can be represented by this integer type.\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline(always)]\n+            #[rustc_promotable]\n+            #[rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\")]\n+            pub const fn min_value() -> Self {\n+                Self::MIN\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"**This method is soft-deprecated.**\n+\n+Although using it won\u2019t cause compilation warning,\n+new code should use [`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX) instead.\n+\n+Returns the largest value that can be represented by this integer type.\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[inline(always)]\n+            #[rustc_promotable]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+            pub const fn max_value() -> Self {\n+                Self::MAX\n+            }\n+        }\n     }\n }\n \n@@ -2449,10 +2440,9 @@ macro_rules! uint_impl {\n Basic usage:\n \n ```\n-#![feature(assoc_int_consts)]\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MIN, 0);\", $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n             pub const MIN: Self = 0;\n         }\n \n@@ -2464,32 +2454,13 @@ Basic usage:\n Basic usage:\n \n ```\n-#![feature(assoc_int_consts)]\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX, \", stringify!($MaxV), \");\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"assoc_int_consts\", reason = \"recently added\", issue = \"68490\")]\n+            #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n             pub const MAX: Self = !0;\n         }\n \n-        doc_comment! {\n-            \"Returns the smallest value that can be represented by this integer type.\",\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_promotable]\n-            #[inline(always)]\n-            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-            pub const fn min_value() -> Self { Self::MIN }\n-        }\n-\n-        doc_comment! {\n-            \"Returns the largest value that can be represented by this integer type.\",\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_promotable]\n-            #[inline(always)]\n-            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n-            pub const fn max_value() -> Self { Self::MAX }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts a string slice in a given base to an integer.\n \n@@ -2548,7 +2519,7 @@ assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 0);\", $EndFeature, \"\n+\", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::MAX.count_zeros(), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_stable(feature = \"const_math\", since = \"1.32.0\")]\n@@ -2566,7 +2537,7 @@ Basic usage:\n Basic usage:\n \n ```\n-\", $Feature, \"let n = \", stringify!($SelfT), \"::max_value() >> 2;\n+\", $Feature, \"let n = \", stringify!($SelfT), \"::MAX >> 2;\n \n assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n ```\"),\n@@ -2608,7 +2579,7 @@ Basic usage:\n \n ```\n \", $Feature, \"#![feature(leading_trailing_ones)]\n-let n = !(\", stringify!($SelfT), \"::max_value() >> 2);\n+let n = !(\", stringify!($SelfT), \"::MAX >> 2);\n \n assert_eq!(n.leading_ones(), 2);\", $EndFeature, \"\n ```\"),\n@@ -2882,9 +2853,9 @@ if overflow occurred.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(1), \",\n-\"Some(\", stringify!($SelfT), \"::max_value() - 1));\n-assert_eq!((\", stringify!($SelfT), \"::max_value() - 2).checked_add(3), None);\", $EndFeature, \"\n+\", $Feature, \"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(1), \",\n+\"Some(\", stringify!($SelfT), \"::MAX - 1));\n+assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n@@ -2930,7 +2901,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(5\", stringify!($SelfT), \".checked_mul(1), Some(5));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_mul(2), None);\", $EndFeature, \"\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n@@ -3130,7 +3101,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".checked_pow(5), Some(32));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\", $EndFeature, \"\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_pow(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[rustc_const_unstable(feature = \"const_int_pow\", issue = \"53718\")]\n@@ -3214,8 +3185,7 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(2\", stringify!($SelfT), \".saturating_mul(10), 20);\n assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($SelfT),\n \"::MAX);\", $EndFeature, \"\n@@ -3242,8 +3212,7 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(4\", stringify!($SelfT), \".saturating_pow(3), 64);\n assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\",\n $EndFeature, \"\n@@ -3271,7 +3240,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(200\", stringify!($SelfT), \".wrapping_add(55), 255);\n-assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::max_value()), 199);\",\n+assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::MAX), 199);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3294,7 +3263,7 @@ Basic usage:\n \n ```\n \", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(100), 0);\n-assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::max_value()), 101);\",\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::MAX), 101);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -3582,8 +3551,7 @@ have occurred then the wrapped value is returned.\n Basic usage\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\n assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (0, true));\", $EndFeature, \"\n ```\"),\n@@ -3610,8 +3578,7 @@ have occurred then the wrapped value is returned.\n Basic usage\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n-\n+\", $Feature, \"\n assert_eq!(5\", stringify!($SelfT), \".overflowing_sub(2), (3, false));\n assert_eq!(0\", stringify!($SelfT), \".overflowing_sub(1), (\", stringify!($SelfT), \"::MAX, true));\",\n $EndFeature, \"\n@@ -4083,7 +4050,7 @@ Basic usage:\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT),\n \".checked_next_power_of_two(), Some(2));\n assert_eq!(3\", stringify!($SelfT), \".checked_next_power_of_two(), Some(4));\n-assert_eq!(\", stringify!($SelfT), \"::max_value().checked_next_power_of_two(), None);\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.checked_next_power_of_two(), None);\",\n $EndFeature, \"\n ```\"),\n             #[inline]\n@@ -4108,7 +4075,7 @@ Basic usage:\n \", $Feature, \"\n assert_eq!(2\", stringify!($SelfT), \".wrapping_next_power_of_two(), 2);\n assert_eq!(3\", stringify!($SelfT), \".wrapping_next_power_of_two(), 4);\n-assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_next_power_of_two(), 0);\",\n+assert_eq!(\", stringify!($SelfT), \"::MAX.wrapping_next_power_of_two(), 0);\",\n $EndFeature, \"\n ```\"),\n             #[unstable(feature = \"wrapping_next_power_of_two\", issue = \"32463\",\n@@ -4304,6 +4271,34 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n                 unsafe { mem::transmute(bytes) }\n             }\n         }\n+\n+        doc_comment! {\n+            concat!(\"**This method is soft-deprecated.**\n+\n+Although using it won\u2019t cause compilation warning,\n+new code should use [`\", stringify!($SelfT), \"::MIN\", \"`](#associatedconstant.MIN) instead.\n+\n+Returns the smallest value that can be represented by this integer type.\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_promotable]\n+            #[inline(always)]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+            pub const fn min_value() -> Self { Self::MIN }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"**This method is soft-deprecated.**\n+\n+Although using it won\u2019t cause compilation warning,\n+new code should use [`\", stringify!($SelfT), \"::MAX\", \"`](#associatedconstant.MAX) instead.\n+\n+Returns the largest value that can be represented by this integer type.\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_promotable]\n+            #[inline(always)]\n+            #[rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\")]\n+            pub const fn max_value() -> Self { Self::MAX }\n+        }\n     }\n }\n \n@@ -4876,7 +4871,6 @@ impl usize {\n ///\n /// ```\n /// use std::num::FpCategory;\n-/// use std::f32;\n ///\n /// let num = 12.4_f32;\n /// let inf = f32::INFINITY;"}, {"sha": "dd45ff141539fcd4c7d8b58e51bc3eddbf3b64c5", "filename": "src/libcore/num/u128.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu128.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,6 +1,9 @@\n //! The 128-bit unsigned integer type.\n //!\n //! *[See also the `u128` primitive type](../../std/primitive.u128.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"i128\", since = \"1.26.0\")]\n-uint_module! { u128, #[stable(feature = \"i128\", since=\"1.26.0\")] }\n+int_module! { u128, #[stable(feature = \"i128\", since=\"1.26.0\")] }"}, {"sha": "738071643b63963d1884914c1ed833c5c314d93c", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,7 +1,10 @@\n //! The 16-bit unsigned integer type.\n //!\n //! *[See also the `u16` primitive type](../../std/primitive.u16.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-uint_module! { u16 }\n+int_module! { u16 }"}, {"sha": "9800c9099748fece634361a65ec82b83b0587e72", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,7 +1,10 @@\n //! The 32-bit unsigned integer type.\n //!\n //! *[See also the `u32` primitive type](../../std/primitive.u32.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-uint_module! { u32 }\n+int_module! { u32 }"}, {"sha": "fb686c396f033e4075b02816f870624a3fa88a36", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,7 +1,10 @@\n //! The 64-bit unsigned integer type.\n //!\n //! *[See also the `u64` primitive type](../../std/primitive.u64.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-uint_module! { u64 }\n+int_module! { u64 }"}, {"sha": "c03cbdda25dbbbcd41b34595d4ba980c7ba894b7", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,7 +1,10 @@\n //! The 8-bit unsigned integer type.\n //!\n //! *[See also the `u8` primitive type](../../std/primitive.u8.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-uint_module! { u8 }\n+int_module! { u8 }"}, {"sha": "a94b541ddb907962d315c5eabb64d9d63c2ab156", "filename": "src/libcore/num/uint_macros.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d71c164a89b705df6affd31a5262c832d1bc48d/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=4d71c164a89b705df6affd31a5262c832d1bc48d", "patch": "@@ -1,13 +0,0 @@\n-#![doc(hidden)]\n-\n-macro_rules! uint_module {\n-    ($T:ident) => (uint_module!($T, #[stable(feature = \"rust1\", since = \"1.0.0\")]););\n-    ($T:ident, #[$attr:meta]) => (\n-        /// The smallest value that can be represented by this integer type.\n-        #[$attr]\n-        pub const MIN: $T = $T::min_value();\n-        /// The largest value that can be represented by this integer type.\n-        #[$attr]\n-        pub const MAX: $T = $T::max_value();\n-    )\n-}"}, {"sha": "a89304161524463aeb55f15b97784fc4d69fa45e", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -1,7 +1,10 @@\n //! The pointer-sized unsigned integer type.\n //!\n //! *[See also the `usize` primitive type](../../std/primitive.usize.html).*\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-uint_module! { usize }\n+int_module! { usize }"}, {"sha": "20425aea8d5177841f7ab5768bd203276eb6415a", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -4,6 +4,9 @@\n //! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]"}, {"sha": "a1128a589a64a61b6cfea01c9d49603bea65dedb", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -4,6 +4,9 @@\n //! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n+//!\n+//! Although using these constants won\u2019t cause compilation warnings,\n+//! new code should use the associated constants directly on the primitive type.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]"}, {"sha": "784868b52e517b415647e1ccfbf5e88b24f1a2a4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -236,7 +236,6 @@\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]\n-#![feature(assoc_int_consts)]\n #![feature(associated_type_bounds)]\n #![feature(atomic_mut_ptr)]\n #![feature(box_syntax)]"}, {"sha": "adad90f56d1cf57810770e9568e083b0d714e872", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3700c37132385e8e965c18e73d0a09f9146335/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=7a3700c37132385e8e965c18e73d0a09f9146335", "patch": "@@ -771,7 +771,7 @@ mod prim_tuple {}\n #[doc(primitive = \"f32\")]\n /// The 32-bit floating point type.\n ///\n-/// *[See also the `std::f32` module](f32/index.html).*\n+/// *[See also the `std::f32::consts` module](f32/consts/index.html).*\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 {}\n@@ -780,97 +780,75 @@ mod prim_f32 {}\n //\n /// The 64-bit floating point type.\n ///\n-/// *[See also the `std::f64` module](f64/index.html).*\n+/// *[See also the `std::f64::consts` module](f64/consts/index.html).*\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 {}\n \n #[doc(primitive = \"i8\")]\n //\n /// The 8-bit signed integer type.\n-///\n-/// *[See also the `std::i8` module](i8/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 {}\n \n #[doc(primitive = \"i16\")]\n //\n /// The 16-bit signed integer type.\n-///\n-/// *[See also the `std::i16` module](i16/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 {}\n \n #[doc(primitive = \"i32\")]\n //\n /// The 32-bit signed integer type.\n-///\n-/// *[See also the `std::i32` module](i32/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 {}\n \n #[doc(primitive = \"i64\")]\n //\n /// The 64-bit signed integer type.\n-///\n-/// *[See also the `std::i64` module](i64/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 {}\n \n #[doc(primitive = \"i128\")]\n //\n /// The 128-bit signed integer type.\n-///\n-/// *[See also the `std::i128` module](i128/index.html).*\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_i128 {}\n \n #[doc(primitive = \"u8\")]\n //\n /// The 8-bit unsigned integer type.\n-///\n-/// *[See also the `std::u8` module](u8/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 {}\n \n #[doc(primitive = \"u16\")]\n //\n /// The 16-bit unsigned integer type.\n-///\n-/// *[See also the `std::u16` module](u16/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 {}\n \n #[doc(primitive = \"u32\")]\n //\n /// The 32-bit unsigned integer type.\n-///\n-/// *[See also the `std::u32` module](u32/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 {}\n \n #[doc(primitive = \"u64\")]\n //\n /// The 64-bit unsigned integer type.\n-///\n-/// *[See also the `std::u64` module](u64/index.html).*\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 {}\n \n #[doc(primitive = \"u128\")]\n //\n /// The 128-bit unsigned integer type.\n-///\n-/// *[See also the `std::u128` module](u128/index.html).*\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n mod prim_u128 {}\n \n #[doc(primitive = \"isize\")]\n //\n /// The pointer-sized signed integer type.\n ///\n-/// *[See also the `std::isize` module](isize/index.html).*\n-///\n /// The size of this primitive is how many bytes it takes to reference any\n /// location in memory. For example, on a 32 bit target, this is 4 bytes\n /// and on a 64 bit target, this is 8 bytes.\n@@ -881,8 +859,6 @@ mod prim_isize {}\n //\n /// The pointer-sized unsigned integer type.\n ///\n-/// *[See also the `std::usize` module](usize/index.html).*\n-///\n /// The size of this primitive is how many bytes it takes to reference any\n /// location in memory. For example, on a 32 bit target, this is 4 bytes\n /// and on a 64 bit target, this is 8 bytes."}]}