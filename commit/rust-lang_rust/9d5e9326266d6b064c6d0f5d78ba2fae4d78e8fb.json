{"sha": "9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNWU5MzI2MjY2ZDZiMDY0YzZkMGY1ZDc4YmEyZmFlNGQ3OGU4ZmI=", "commit": {"author": {"name": "Alex Zatelepin", "email": "mvzp10@gmail.com", "date": "2019-10-20T23:04:55Z"}, "committer": {"name": "Alex Zatelepin", "email": "mvzp10@gmail.com", "date": "2019-10-21T18:35:42Z"}, "message": "fixup folding ranges for \"lineFoldingOnly\" clients #2033", "tree": {"sha": "8f68f7083cad16640f4f99b1ce6e77315e5bd5f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f68f7083cad16640f4f99b1ce6e77315e5bd5f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "html_url": "https://github.com/rust-lang/rust/commit/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb/comments", "author": {"login": "ztlpn", "id": 2301957, "node_id": "MDQ6VXNlcjIzMDE5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2301957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztlpn", "html_url": "https://github.com/ztlpn", "followers_url": "https://api.github.com/users/ztlpn/followers", "following_url": "https://api.github.com/users/ztlpn/following{/other_user}", "gists_url": "https://api.github.com/users/ztlpn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztlpn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztlpn/subscriptions", "organizations_url": "https://api.github.com/users/ztlpn/orgs", "repos_url": "https://api.github.com/users/ztlpn/repos", "events_url": "https://api.github.com/users/ztlpn/events{/privacy}", "received_events_url": "https://api.github.com/users/ztlpn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ztlpn", "id": 2301957, "node_id": "MDQ6VXNlcjIzMDE5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2301957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztlpn", "html_url": "https://github.com/ztlpn", "followers_url": "https://api.github.com/users/ztlpn/followers", "following_url": "https://api.github.com/users/ztlpn/following{/other_user}", "gists_url": "https://api.github.com/users/ztlpn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztlpn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztlpn/subscriptions", "organizations_url": "https://api.github.com/users/ztlpn/orgs", "repos_url": "https://api.github.com/users/ztlpn/repos", "events_url": "https://api.github.com/users/ztlpn/events{/privacy}", "received_events_url": "https://api.github.com/users/ztlpn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b9bd7bdd2712a7e85d6bfc70c231dbe36c2e585", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9bd7bdd2712a7e85d6bfc70c231dbe36c2e585", "html_url": "https://github.com/rust-lang/rust/commit/6b9bd7bdd2712a7e85d6bfc70c231dbe36c2e585"}], "stats": {"total": 98, "additions": 74, "deletions": 24}, "files": [{"sha": "173580dee4564e3bd287b4ebc439df8401c5e599", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "patch": "@@ -227,22 +227,57 @@ impl ConvWith<(&LineIndex, LineEndings)> for &AtomTextEdit {\n     }\n }\n \n-impl ConvWith<&LineIndex> for Fold {\n+pub(crate) struct FoldConvCtx<'a> {\n+    pub(crate) text: &'a str,\n+    pub(crate) line_index: &'a LineIndex,\n+    pub(crate) line_folding_only: bool,\n+}\n+\n+impl ConvWith<&FoldConvCtx<'_>> for Fold {\n     type Output = lsp_types::FoldingRange;\n \n-    fn conv_with(self, line_index: &LineIndex) -> lsp_types::FoldingRange {\n-        let range = self.range.conv_with(&line_index);\n-        lsp_types::FoldingRange {\n-            start_line: range.start.line,\n-            start_character: Some(range.start.character),\n-            end_line: range.end.line,\n-            end_character: Some(range.end.character),\n-            kind: match self.kind {\n-                FoldKind::Comment => Some(lsp_types::FoldingRangeKind::Comment),\n-                FoldKind::Imports => Some(lsp_types::FoldingRangeKind::Imports),\n-                FoldKind::Mods => None,\n-                FoldKind::Block => None,\n-            },\n+    fn conv_with(self, ctx: &FoldConvCtx) -> lsp_types::FoldingRange {\n+        let kind = match self.kind {\n+            FoldKind::Comment => Some(lsp_types::FoldingRangeKind::Comment),\n+            FoldKind::Imports => Some(lsp_types::FoldingRangeKind::Imports),\n+            FoldKind::Mods => None,\n+            FoldKind::Block => None,\n+        };\n+\n+        let range = self.range.conv_with(&ctx.line_index);\n+\n+        if ctx.line_folding_only {\n+            // Clients with line_folding_only == true (such as VSCode) will fold the whole end line\n+            // even if it contains text not in the folding range. To prevent that we exclude\n+            // range.end.line from the folding region if there is more text after range.end\n+            // on the same line.\n+            let has_more_text_on_end_line = ctx.text\n+                [TextRange::from_to(self.range.end(), TextUnit::of_str(ctx.text))]\n+            .chars()\n+            .take_while(|it| *it != '\\n')\n+            .any(|it| !it.is_whitespace());\n+\n+            let end_line = if has_more_text_on_end_line {\n+                range.end.line.saturating_sub(1)\n+            } else {\n+                range.end.line\n+            };\n+\n+            lsp_types::FoldingRange {\n+                start_line: range.start.line,\n+                start_character: None,\n+                end_line,\n+                end_character: None,\n+                kind,\n+            }\n+        } else {\n+            lsp_types::FoldingRange {\n+                start_line: range.start.line,\n+                start_character: Some(range.start.character),\n+                end_line: range.end.line,\n+                end_character: Some(range.end.character),\n+                kind,\n+            }\n         }\n     }\n }"}, {"sha": "0b5d9c44d40dff5eca6f203bb2a85b910fcdd6f2", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "patch": "@@ -111,6 +111,21 @@ pub fn main_loop(\n             connection.sender.send(request.into()).unwrap();\n         }\n \n+        let options = {\n+            let text_document_caps = client_caps.text_document.as_ref();\n+            Options {\n+                publish_decorations: config.publish_decorations,\n+                supports_location_link: text_document_caps\n+                    .and_then(|it| it.definition)\n+                    .and_then(|it| it.link_support)\n+                    .unwrap_or(false),\n+                line_folding_only: text_document_caps\n+                    .and_then(|it| it.folding_range.as_ref())\n+                    .and_then(|it| it.line_folding_only)\n+                    .unwrap_or(false),\n+            }\n+        };\n+\n         let feature_flags = {\n             let mut ff = FeatureFlags::default();\n             for (flag, value) in config.feature_flags {\n@@ -133,14 +148,7 @@ pub fn main_loop(\n             config.lru_capacity,\n             &globs,\n             Watch(!config.use_client_watching),\n-            Options {\n-                publish_decorations: config.publish_decorations,\n-                supports_location_link: client_caps\n-                    .text_document\n-                    .and_then(|it| it.definition)\n-                    .and_then(|it| it.link_support)\n-                    .unwrap_or(false),\n-            },\n+            options,\n             feature_flags,\n         )\n     };"}, {"sha": "af3cd04ea953e47700d4af6d728f760f37233254", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "patch": "@@ -18,7 +18,7 @@ use serde_json::to_value;\n \n use crate::{\n     cargo_target_spec::{runnable_args, CargoTargetSpec},\n-    conv::{to_location, Conv, ConvWith, MapConvWith, TryConvWith, TryConvWithToVec},\n+    conv::{to_location, Conv, ConvWith, FoldConvCtx, MapConvWith, TryConvWith, TryConvWithToVec},\n     req::{self, Decoration, InlayHint, InlayHintsParams, InlayKind},\n     world::WorldSnapshot,\n     LspError, Result,\n@@ -383,8 +383,14 @@ pub fn handle_folding_range(\n ) -> Result<Option<Vec<FoldingRange>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let folds = world.analysis().folding_ranges(file_id)?;\n+    let text = world.analysis().file_text(file_id)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n-    let res = Some(folds.into_iter().map_conv_with(&*line_index).collect());\n+    let ctx = FoldConvCtx {\n+        text: &text,\n+        line_index: &line_index,\n+        line_folding_only: world.options.line_folding_only,\n+    };\n+    let res = Some(folds.into_iter().map_conv_with(&ctx).collect());\n     Ok(res)\n }\n "}, {"sha": "51824e7a352bda91a6da97d46422f6c632e5f3eb", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=9d5e9326266d6b064c6d0f5d78ba2fae4d78e8fb", "patch": "@@ -27,6 +27,7 @@ use crate::{\n pub struct Options {\n     pub publish_decorations: bool,\n     pub supports_location_link: bool,\n+    pub line_folding_only: bool,\n }\n \n /// `WorldState` is the primary mutable state of the language server"}]}