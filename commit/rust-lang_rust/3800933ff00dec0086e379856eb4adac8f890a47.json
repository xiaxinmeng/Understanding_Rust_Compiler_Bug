{"sha": "3800933ff00dec0086e379856eb4adac8f890a47", "node_id": "C_kwDOAAsO6NoAKDM4MDA5MzNmZjAwZGVjMDA4NmUzNzk4NTZlYjRhZGFjOGY4OTBhNDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T07:40:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-21T07:40:32Z"}, "message": "Auto merge of #2383 - rust-lang:dot_mode, r=oli-obk\n\nPrint one . character per test instead of one line\n\n`./miri bless -- --quiet` now prints a dot per test, along with the regular Rust unit tests that listen to this flag", "tree": {"sha": "2e09b7f661e4decb4d96422a8238d0ad285df28d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e09b7f661e4decb4d96422a8238d0ad285df28d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3800933ff00dec0086e379856eb4adac8f890a47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3800933ff00dec0086e379856eb4adac8f890a47", "html_url": "https://github.com/rust-lang/rust/commit/3800933ff00dec0086e379856eb4adac8f890a47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3800933ff00dec0086e379856eb4adac8f890a47/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084e02fd0885556fb44e7cb88c94a984ccbcfd3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/084e02fd0885556fb44e7cb88c94a984ccbcfd3e", "html_url": "https://github.com/rust-lang/rust/commit/084e02fd0885556fb44e7cb88c94a984ccbcfd3e"}, {"sha": "ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b", "html_url": "https://github.com/rust-lang/rust/commit/ecacc56843ae0bd1ba264a9abf95c31ee66a9f8b"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "72aa140d66a2b98ed6e8bea54d55b14f0cb99d83", "filename": "tests/compiletest.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3800933ff00dec0086e379856eb4adac8f890a47/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3800933ff00dec0086e379856eb4adac8f890a47/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=3800933ff00dec0086e379856eb4adac8f890a47", "patch": "@@ -48,8 +48,17 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) -> Result<()> {\n         (true, true) => panic!(\"cannot use MIRI_BLESS and MIRI_SKIP_UI_CHECKS at the same time\"),\n     };\n \n-    // Pass on all arguments as filters.\n-    let path_filter = std::env::args().skip(1);\n+    // Pass on all unknown arguments as filters.\n+    let mut quiet = false;\n+    let path_filter = std::env::args().skip(1).filter(|arg| {\n+        match &**arg {\n+            \"--quiet\" => {\n+                quiet = true;\n+                false\n+            }\n+            _ => true,\n+        }\n+    });\n \n     let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n \n@@ -76,6 +85,7 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) -> Result<()> {\n             ],\n             envs: vec![],\n         }),\n+        quiet,\n     };\n     ui_test::run_tests(config)\n }"}, {"sha": "06a84cfbf32eb78fae763089378de796047756d8", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3800933ff00dec0086e379856eb4adac8f890a47/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3800933ff00dec0086e379856eb4adac8f890a47/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=3800933ff00dec0086e379856eb4adac8f890a47", "patch": "@@ -46,6 +46,8 @@ pub struct Config {\n     /// Can be used to override what command to run instead of `cargo` to build the\n     /// dependencies in `manifest_path`\n     pub dependency_builder: Option<DependencyBuilder>,\n+    /// Print one character per test instead of one line\n+    pub quiet: bool,\n }\n \n #[derive(Debug)]\n@@ -123,11 +125,50 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n             drop(submit);\n         });\n \n+        // A channel for the messages emitted by the individual test threads.\n+        let (finished_files_sender, finished_files_recv) = crossbeam::channel::unbounded();\n+        enum TestResult {\n+            Ok,\n+            Failed,\n+            Ignored,\n+        }\n+\n+        s.spawn(|_| {\n+            if config.quiet {\n+                for (i, (_, result)) in finished_files_recv.into_iter().enumerate() {\n+                    // Humans start counting at 1\n+                    let i = i + 1;\n+                    match result {\n+                        TestResult::Ok => eprint!(\"{}\", \".\".green()),\n+                        TestResult::Failed => eprint!(\"{}\", \"F\".red().bold()),\n+                        TestResult::Ignored => eprint!(\"{}\", \"i\".yellow()),\n+                    }\n+                    if i % 100 == 0 {\n+                        eprintln!(\" {i}\");\n+                    }\n+                }\n+            } else {\n+                for (msg, result) in finished_files_recv {\n+                    eprint!(\"{msg} ... \");\n+                    eprintln!(\n+                        \"{}\",\n+                        match result {\n+                            TestResult::Ok => \"ok\".green(),\n+                            TestResult::Failed => \"FAILED\".red().bold(),\n+                            TestResult::Ignored => \"ignored (in-test comment)\".yellow(),\n+                        }\n+                    );\n+                }\n+            }\n+        });\n+\n         let mut threads = vec![];\n \n         // Create N worker threads that receive files to test.\n         for _ in 0..std::thread::available_parallelism().unwrap().get() {\n+            let finished_files_sender = finished_files_sender.clone();\n             threads.push(s.spawn(|_| -> Result<()> {\n+                let finished_files_sender = finished_files_sender;\n                 for path in &receive {\n                     if !config.path_filter.is_empty() {\n                         let path_display = path.display().to_string();\n@@ -140,11 +181,8 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                     // Ignore file if only/ignore rules do (not) apply\n                     if !test_file_conditions(&comments, &target, &config) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n-                        eprintln!(\n-                            \"{} ... {}\",\n-                            path.display(),\n-                            \"ignored (in-test comment)\".yellow()\n-                        );\n+                        finished_files_sender\n+                            .send((path.display().to_string(), TestResult::Ignored))?;\n                         continue;\n                     }\n                     // Run the test for all revisions\n@@ -159,12 +197,11 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                         if !revision.is_empty() {\n                             write!(msg, \"(revision `{revision}`) \").unwrap();\n                         }\n-                        write!(msg, \"... \").unwrap();\n                         if errors.is_empty() {\n-                            eprintln!(\"{msg}{}\", \"ok\".green());\n+                            finished_files_sender.send((msg, TestResult::Ok))?;\n                             succeeded.fetch_add(1, Ordering::Relaxed);\n                         } else {\n-                            eprintln!(\"{msg}{}\", \"FAILED\".red().bold());\n+                            finished_files_sender.send((msg, TestResult::Failed))?;\n                             failures.lock().unwrap().push((\n                                 path.clone(),\n                                 m,\n@@ -178,6 +215,7 @@ pub fn run_tests(mut config: Config) -> Result<()> {\n                 Ok(())\n             }));\n         }\n+\n         for thread in threads {\n             thread.join().unwrap()?;\n         }"}, {"sha": "2032988ed384dcd8daee4b2ddf12dd1b04346dba", "filename": "ui_test/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3800933ff00dec0086e379856eb4adac8f890a47/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3800933ff00dec0086e379856eb4adac8f890a47/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=3800933ff00dec0086e379856eb4adac8f890a47", "patch": "@@ -18,6 +18,7 @@ fn config() -> Config {\n         output_conflict_handling: OutputConflictHandling::Error,\n         dependencies_crate_manifest_path: None,\n         dependency_builder: None,\n+        quiet: false,\n     }\n }\n "}]}