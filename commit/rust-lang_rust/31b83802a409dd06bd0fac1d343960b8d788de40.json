{"sha": "31b83802a409dd06bd0fac1d343960b8d788de40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYjgzODAyYTQwOWRkMDZiZDBmYWMxZDM0Mzk2MGI4ZDc4OGRlNDA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-04-21T21:06:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-21T21:06:14Z"}, "message": "Rollup merge of #84212 - CDirkx:void, r=m-ou-se\n\nReplace `Void` in `sys` with never type\n\nThis PR replaces several occurrences in `sys` of the type `enum Void {}` with the Rust never type (`!`).\nThe name `Void` is unfortunate because in other languages (C etc.) it refers to a unit type, not an uninhabited type.\n\nNote that the previous stabilization of the never type was reverted, however all uses here are implementation details and not publicly visible.", "tree": {"sha": "7a8420d5453d822c2317762006f5bbae889f10d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a8420d5453d822c2317762006f5bbae889f10d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31b83802a409dd06bd0fac1d343960b8d788de40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJggJPGCRBK7hj4Ov3rIwAAczsIAKvWujcmhNEtOCplCeK8/8i7\n2vtWCJe/j+S+EgD7pl+Qw4TkHDaar6VpUOiQVWNwRm/Mj3GGabUhLcgx7ZLfu/xo\ncaZsz3y19HqYv5Zdiews9Ur6c54BoDUP58j9vL9nRDK9UMRzBebEY08I3nR2QFqK\nBKtpQRaHTKCXMeTOCoakXPGNtxA+sNpMN+xkIxf5PDS3hyMQahPxHayseYeUcn18\niFqjpqWoAt7LYhVuGzteAPoU14qEgfrhdg+/tY7zmsO6RXVBtKCrKZ4/NjYxxFyt\n/9GoVJMfV+CDDQENbSyu07MxhPtpQIhkzBzHQXVoy13OvafOlDIjg73vuHDTsZU=\n=0h/X\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a8420d5453d822c2317762006f5bbae889f10d7\nparent 3897ad11284af5c6a9e31a13453525c4913c0f4e\nparent d45e1314f36ac249e8fb7d9564362ac8f94e49be\nauthor Mara Bos <m-ou.se@m-ou.se> 1619039174 +0200\ncommitter GitHub <noreply@github.com> 1619039174 +0200\n\nRollup merge of #84212 - CDirkx:void, r=m-ou-se\n\nReplace `Void` in `sys` with never type\n\nThis PR replaces several occurrences in `sys` of the type `enum Void {}` with the Rust never type (`!`).\nThe name `Void` is unfortunate because in other languages (C etc.) it refers to a unit type, not an uninhabited type.\n\nNote that the previous stabilization of the never type was reverted, however all uses here are implementation details and not publicly visible.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31b83802a409dd06bd0fac1d343960b8d788de40", "html_url": "https://github.com/rust-lang/rust/commit/31b83802a409dd06bd0fac1d343960b8d788de40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31b83802a409dd06bd0fac1d343960b8d788de40/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3897ad11284af5c6a9e31a13453525c4913c0f4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3897ad11284af5c6a9e31a13453525c4913c0f4e", "html_url": "https://github.com/rust-lang/rust/commit/3897ad11284af5c6a9e31a13453525c4913c0f4e"}, {"sha": "d45e1314f36ac249e8fb7d9564362ac8f94e49be", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45e1314f36ac249e8fb7d9564362ac8f94e49be", "html_url": "https://github.com/rust-lang/rust/commit/d45e1314f36ac249e8fb7d9564362ac8f94e49be"}], "stats": {"total": 490, "additions": 238, "deletions": 252}, "files": [{"sha": "5b3f2fa4e8275e19e208fd1743c408a3d6ab70cb", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -9,7 +9,7 @@ use crate::sys::hermit::abi;\n use crate::sys::hermit::abi::{O_APPEND, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n use crate::sys::hermit::fd::FileDesc;\n use crate::sys::time::SystemTime;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::os_str_bytes::OsStrExt;\n \n pub use crate::sys_common::fs::copy;\n@@ -22,11 +22,11 @@ fn cstr(path: &Path) -> io::Result<CString> {\n #[derive(Debug)]\n pub struct File(FileDesc);\n \n-pub struct FileAttr(Void);\n+pub struct FileAttr(!);\n \n-pub struct ReadDir(Void);\n+pub struct ReadDir(!);\n \n-pub struct DirEntry(Void);\n+pub struct DirEntry(!);\n \n #[derive(Clone, Debug)]\n pub struct OpenOptions {\n@@ -41,146 +41,146 @@ pub struct OpenOptions {\n     mode: i32,\n }\n \n-pub struct FilePermissions(Void);\n+pub struct FilePermissions(!);\n \n-pub struct FileType(Void);\n+pub struct FileType(!);\n \n #[derive(Debug)]\n pub struct DirBuilder {}\n \n impl FileAttr {\n     pub fn size(&self) -> u64 {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn perm(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn created(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileAttr {\n     fn clone(&self) -> FileAttr {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FilePermissions {\n     pub fn readonly(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_readonly(&mut self, _readonly: bool) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FilePermissions {\n     fn clone(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl PartialEq for FilePermissions {\n     fn eq(&self, _other: &FilePermissions) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FilePermissions {}\n \n impl fmt::Debug for FilePermissions {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FileType {\n     pub fn is_dir(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_file(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_symlink(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileType {\n     fn clone(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Copy for FileType {}\n \n impl PartialEq for FileType {\n     fn eq(&self, _other: &FileType) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FileType {}\n \n impl Hash for FileType {\n     fn hash<H: Hasher>(&self, _h: &mut H) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for FileType {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for ReadDir {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_name(&self) -> OsString {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> io::Result<FileType> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "56497162c0333478df3f36376897ddb1c4618ba5", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -61,11 +61,6 @@ pub fn unsupported_err() -> crate::io::Error {\n     )\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n pub unsafe fn strlen(start: *const c_char) -> usize {\n     let mut str = start;\n "}, {"sha": "5f8839157eafc0b5b6af665cc6f6a4a7d7379747", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -6,7 +6,7 @@ use crate::str;\n use crate::sync::Arc;\n use crate::sys::hermit::abi;\n use crate::sys::hermit::abi::IpAddress::{Ipv4, Ipv6};\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::AsInner;\n use crate::time::Duration;\n \n@@ -411,18 +411,18 @@ impl fmt::Debug for UdpSocket {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "4487e9d636cb005b7e1224b85dcc4f0784416f8e", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -9,7 +9,7 @@ use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::Mutex;\n use crate::sys::hermit::abi;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::os_str_bytes::*;\n use crate::vec;\n \n@@ -29,7 +29,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     unsupported()\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -38,7 +38,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "d6a56830733096d4bca00bc71919871f843a2144", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -115,11 +115,6 @@ pub fn decode_error_kind(code: i32) -> ErrorKind {\n     }\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n pub unsafe fn strlen(mut s: *const c_char) -> usize {\n     let mut n = 0;\n     while unsafe { *s } != 0 {"}, {"sha": "5ccedece0f84b78eeeb07025b373a629515759af", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -5,7 +5,7 @@ use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr, ToSocketAddrs};\n use crate::sync::Arc;\n use crate::sys::fd::FileDesc;\n-use crate::sys::{sgx_ineffective, unsupported, AsInner, FromInner, IntoInner, TryIntoInner, Void};\n+use crate::sys::{sgx_ineffective, unsupported, AsInner, FromInner, IntoInner, TryIntoInner};\n use crate::time::Duration;\n \n use super::abi::usercalls;\n@@ -310,137 +310,137 @@ impl FromInner<Socket> for TcpListener {\n     }\n }\n \n-pub struct UdpSocket(Void);\n+pub struct UdpSocket(!);\n \n impl UdpSocket {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n         unsupported()\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn broadcast(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for UdpSocket {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -462,22 +462,22 @@ impl fmt::Display for NonIpSockAddr {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     fn new(host: String) -> io::Result<LookupHost> {\n         Err(io::Error::new(io::ErrorKind::Other, NonIpSockAddr { host }))\n     }\n \n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "144248d60c9cfb15d644ce99703cc77c44b950f3", "filename": "library/std/src/sys/sgx/os.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -5,12 +5,13 @@ use crate::error::Error as StdError;\n use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::io;\n+use crate::marker::PhantomData;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sync::Mutex;\n use crate::sync::Once;\n-use crate::sys::{decode_error_kind, sgx_ineffective, unsupported, Void};\n+use crate::sys::{decode_error_kind, sgx_ineffective, unsupported};\n use crate::vec;\n \n pub fn errno() -> i32 {\n@@ -35,7 +36,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     sgx_ineffective(())\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -44,7 +45,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "0ef84c84ee877d6b81e9c68dcdfe7e7bc8aa8341", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -36,11 +36,6 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     (1, 2)\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n pub unsafe fn strlen(mut s: *const c_char) -> usize {\n     // SAFETY: The caller must guarantee `s` points to a valid 0-terminated string.\n     unsafe {"}, {"sha": "cd533761e37326d224965fe66faaab44455dd9d3", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -4,159 +4,159 @@ use crate::hash::{Hash, Hasher};\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n \n-pub struct File(Void);\n+pub struct File(!);\n \n-pub struct FileAttr(Void);\n+pub struct FileAttr(!);\n \n-pub struct ReadDir(Void);\n+pub struct ReadDir(!);\n \n-pub struct DirEntry(Void);\n+pub struct DirEntry(!);\n \n #[derive(Clone, Debug)]\n pub struct OpenOptions {}\n \n-pub struct FilePermissions(Void);\n+pub struct FilePermissions(!);\n \n-pub struct FileType(Void);\n+pub struct FileType(!);\n \n #[derive(Debug)]\n pub struct DirBuilder {}\n \n impl FileAttr {\n     pub fn size(&self) -> u64 {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn perm(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn modified(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn accessed(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn created(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileAttr {\n     fn clone(&self) -> FileAttr {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FilePermissions {\n     pub fn readonly(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_readonly(&mut self, _readonly: bool) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FilePermissions {\n     fn clone(&self) -> FilePermissions {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl PartialEq for FilePermissions {\n     fn eq(&self, _other: &FilePermissions) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FilePermissions {}\n \n impl fmt::Debug for FilePermissions {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl FileType {\n     pub fn is_dir(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_file(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_symlink(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for FileType {\n     fn clone(&self) -> FileType {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Copy for FileType {}\n \n impl PartialEq for FileType {\n     fn eq(&self, _other: &FileType) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for FileType {}\n \n impl Hash for FileType {\n     fn hash<H: Hasher>(&self, _h: &mut H) {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for FileType {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for ReadDir {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl DirEntry {\n     pub fn path(&self) -> PathBuf {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_name(&self) -> OsString {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn metadata(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn file_type(&self) -> io::Result<FileType> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -179,59 +179,59 @@ impl File {\n     }\n \n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn fsync(&self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn datasync(&self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn truncate(&self, _size: u64) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn flush(&self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn seek(&self, _pos: SeekFrom) -> io::Result<u64> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<File> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -247,7 +247,7 @@ impl DirBuilder {\n \n impl fmt::Debug for File {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "96203c74b576cf48bd735f7275de7a1a38ea0817", "filename": "library/std/src/sys/unsupported/net.rs", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -2,10 +2,10 @@ use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::time::Duration;\n \n-pub struct TcpStream(Void);\n+pub struct TcpStream(!);\n \n impl TcpStream {\n     pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {\n@@ -17,292 +17,292 @@ impl TcpStream {\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpStream> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn nodelay(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for TcpStream {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n-pub struct TcpListener(Void);\n+pub struct TcpListener(!);\n \n impl TcpListener {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n         unsupported()\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpListener> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_only_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn only_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for TcpListener {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n-pub struct UdpSocket(Void);\n+pub struct UdpSocket(!);\n \n impl UdpSocket {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n         unsupported()\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn broadcast(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Debug for UdpSocket {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "e30395a0b1d92d9b10664fe4953ae3242bc96efd", "filename": "library/std/src/sys/unsupported/os.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -1,8 +1,9 @@\n-use super::{unsupported, Void};\n+use super::unsupported;\n use crate::error::Error as StdError;\n use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::io;\n+use crate::marker::PhantomData;\n use crate::path::{self, PathBuf};\n \n pub fn errno() -> i32 {\n@@ -21,7 +22,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     unsupported()\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -30,7 +31,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n \n@@ -62,12 +63,12 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     unsupported()\n }\n \n-pub struct Env(Void);\n+pub struct Env(!);\n \n impl Iterator for Env {\n     type Item = (OsString, OsString);\n     fn next(&mut self) -> Option<(OsString, OsString)> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "25514c2322fa45d3890efeb67f86dc2a99b0c99c", "filename": "library/std/src/sys/unsupported/pipe.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -1,35 +1,34 @@\n use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::sys::Void;\n \n-pub struct AnonPipe(Void);\n+pub struct AnonPipe(!);\n \n impl AnonPipe {\n     pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn diverge(&self) -> ! {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "38ac0a1ddd5f9ce1043be9a155bd48c937efffea", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -5,7 +5,7 @@ use crate::marker::PhantomData;\n use crate::path::Path;\n use crate::sys::fs::File;\n use crate::sys::pipe::AnonPipe;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::process::{CommandEnv, CommandEnvs};\n \n pub use crate::ffi::OsString as EnvKey;\n@@ -94,43 +94,43 @@ impl fmt::Debug for Command {\n     }\n }\n \n-pub struct ExitStatus(Void);\n+pub struct ExitStatus(!);\n \n impl ExitStatus {\n     pub fn success(&self) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn code(&self) -> Option<i32> {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Clone for ExitStatus {\n     fn clone(&self) -> ExitStatus {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Copy for ExitStatus {}\n \n impl PartialEq for ExitStatus {\n     fn eq(&self, _other: &ExitStatus) -> bool {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Eq for ExitStatus {}\n \n impl fmt::Debug for ExitStatus {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl fmt::Display for ExitStatus {\n     fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n@@ -146,23 +146,23 @@ impl ExitCode {\n     }\n }\n \n-pub struct Process(Void);\n+pub struct Process(!);\n \n impl Process {\n     pub fn id(&self) -> u32 {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn kill(&mut self) -> io::Result<()> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        match self.0 {}\n+        self.0\n     }\n \n     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "cda8510e1baebe1316cd57b8bb0c01e35a1fb145", "filename": "library/std/src/sys/unsupported/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -1,9 +1,9 @@\n-use super::{unsupported, Void};\n+use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n use crate::time::Duration;\n \n-pub struct Thread(Void);\n+pub struct Thread(!);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n@@ -26,7 +26,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "06860673d90e00ec1c0c41536db7564c15c7dec5", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -5,7 +5,7 @@ use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::FromInner;\n use crate::time::Duration;\n \n@@ -343,18 +343,18 @@ impl fmt::Debug for UdpSocket {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {\n-        match self.0 {}\n+        self.0\n     }\n }\n \n impl Iterator for LookupHost {\n     type Item = SocketAddr;\n     fn next(&mut self) -> Option<SocketAddr> {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "cf17ac0ba5f2bce2b228fe6fbc4da02ea16c59bf", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -10,7 +10,7 @@ use crate::os::wasi::prelude::*;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sys::memchr;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::vec;\n \n // Add a few symbols not in upstream `libc` just yet.\n@@ -87,7 +87,7 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n     }\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -96,7 +96,7 @@ pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> {\n-        match *self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "74515553a82182d7e8521fb49a6bc5105c154f63", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -3,10 +3,10 @@\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::time::Duration;\n \n-pub struct Thread(Void);\n+pub struct Thread(!);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n@@ -59,7 +59,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}, {"sha": "b7bf95c89b482cd532966169bfad10fcc77ee6ac", "filename": "library/std/src/sys/wasm/thread.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b83802a409dd06bd0fac1d343960b8d788de40/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs?ref=31b83802a409dd06bd0fac1d343960b8d788de40", "patch": "@@ -1,9 +1,9 @@\n use crate::ffi::CStr;\n use crate::io;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::time::Duration;\n \n-pub struct Thread(Void);\n+pub struct Thread(!);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n@@ -47,7 +47,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        match self.0 {}\n+        self.0\n     }\n }\n "}]}