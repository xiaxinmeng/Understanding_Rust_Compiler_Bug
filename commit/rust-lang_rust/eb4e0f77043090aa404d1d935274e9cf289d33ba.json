{"sha": "eb4e0f77043090aa404d1d935274e9cf289d33ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNGUwZjc3MDQzMDkwYWE0MDRkMWQ5MzUyNzRlOWNmMjg5ZDMzYmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-28T00:01:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-28T00:01:23Z"}, "message": "auto merge of #19354 : barosl/rust/strconv-doc-fix, r=steveklabnik\n\n- `int_to_str_bytes_common()` doesn't have a return value.\r\n- `float_to_str_bytes_common()` has an old-style doc comment.", "tree": {"sha": "ecd6662a31c93faab23c8000cd1a304dbc0b8b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd6662a31c93faab23c8000cd1a304dbc0b8b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4e0f77043090aa404d1d935274e9cf289d33ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4e0f77043090aa404d1d935274e9cf289d33ba", "html_url": "https://github.com/rust-lang/rust/commit/eb4e0f77043090aa404d1d935274e9cf289d33ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4e0f77043090aa404d1d935274e9cf289d33ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dd5443ebd2e34baf51010245a6bce6f12552a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd5443ebd2e34baf51010245a6bce6f12552a22", "html_url": "https://github.com/rust-lang/rust/commit/3dd5443ebd2e34baf51010245a6bce6f12552a22"}, {"sha": "c67dbed11cce16fdd6999c10960bfd3ad5911945", "url": "https://api.github.com/repos/rust-lang/rust/commits/c67dbed11cce16fdd6999c10960bfd3ad5911945", "html_url": "https://github.com/rust-lang/rust/commit/c67dbed11cce16fdd6999c10960bfd3ad5911945"}], "stats": {"total": 76, "additions": 35, "deletions": 41}, "files": [{"sha": "b42286c0308cede0f87260c7374abaa8eae8139a", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 35, "deletions": 41, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/eb4e0f77043090aa404d1d935274e9cf289d33ba/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4e0f77043090aa404d1d935274e9cf289d33ba/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=eb4e0f77043090aa404d1d935274e9cf289d33ba", "patch": "@@ -83,13 +83,6 @@ pub enum SignFormat {\n /// - `f`             - a callback which will be invoked for each ascii character\n ///                     which composes the string representation of this integer\n ///\n-/// # Return value\n-///\n-/// A tuple containing the byte vector, and a boolean flag indicating\n-/// whether it represents a special value like `inf`, `-inf`, `NaN` or not.\n-/// It returns a tuple because there can be ambiguity between a special value\n-/// and a number representation at higher bases.\n-///\n /// # Panics\n ///\n /// - Panics if `radix` < 2 or `radix` > 36.\n@@ -147,40 +140,41 @@ fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f: |u8\n     }\n }\n \n-/**\n- * Converts a number to its string representation as a byte vector.\n- * This is meant to be a common base implementation for all numeric string\n- * conversion functions like `to_string()` or `to_str_radix()`.\n- *\n- * # Arguments\n- * - `num`           - The number to convert. Accepts any number that\n- *                     implements the numeric traits.\n- * - `radix`         - Base to use. Accepts only the values 2-36. If the exponential notation\n- *                     is used, then this base is only used for the significand. The exponent\n- *                     itself always printed using a base of 10.\n- * - `negative_zero` - Whether to treat the special value `-0` as\n- *                     `-0` or as `+0`.\n- * - `sign`          - How to emit the sign. See `SignFormat`.\n- * - `digits`        - The amount of digits to use for emitting the fractional\n- *                     part, if any. See `SignificantDigits`.\n- * - `exp_format`   - Whether or not to use the exponential (scientific) notation.\n- *                    See `ExponentFormat`.\n- * - `exp_capital`   - Whether or not to use a capital letter for the exponent sign, if\n- *                     exponential notation is desired.\n- *\n- * # Return value\n- * A tuple containing the byte vector, and a boolean flag indicating\n- * whether it represents a special value like `inf`, `-inf`, `NaN` or not.\n- * It returns a tuple because there can be ambiguity between a special value\n- * and a number representation at higher bases.\n- *\n- * # Panics\n- * - Panics if `radix` < 2 or `radix` > 36.\n- * - Panics if `radix` > 14 and `exp_format` is `ExpDec` due to conflict\n- *   between digit and exponent sign `'e'`.\n- * - Panics if `radix` > 25 and `exp_format` is `ExpBin` due to conflict\n- *   between digit and exponent sign `'p'`.\n- */\n+/// Converts a number to its string representation as a byte vector.\n+/// This is meant to be a common base implementation for all numeric string\n+/// conversion functions like `to_string()` or `to_str_radix()`.\n+///\n+/// # Arguments\n+///\n+/// - `num`           - The number to convert. Accepts any number that\n+///                     implements the numeric traits.\n+/// - `radix`         - Base to use. Accepts only the values 2-36. If the exponential notation\n+///                     is used, then this base is only used for the significand. The exponent\n+///                     itself always printed using a base of 10.\n+/// - `negative_zero` - Whether to treat the special value `-0` as\n+///                     `-0` or as `+0`.\n+/// - `sign`          - How to emit the sign. See `SignFormat`.\n+/// - `digits`        - The amount of digits to use for emitting the fractional\n+///                     part, if any. See `SignificantDigits`.\n+/// - `exp_format`   - Whether or not to use the exponential (scientific) notation.\n+///                    See `ExponentFormat`.\n+/// - `exp_capital`   - Whether or not to use a capital letter for the exponent sign, if\n+///                     exponential notation is desired.\n+///\n+/// # Return value\n+///\n+/// A tuple containing the byte vector, and a boolean flag indicating\n+/// whether it represents a special value like `inf`, `-inf`, `NaN` or not.\n+/// It returns a tuple because there can be ambiguity between a special value\n+/// and a number representation at higher bases.\n+///\n+/// # Panics\n+///\n+/// - Panics if `radix` < 2 or `radix` > 36.\n+/// - Panics if `radix` > 14 and `exp_format` is `ExpDec` due to conflict\n+///   between digit and exponent sign `'e'`.\n+/// - Panics if `radix` > 25 and `exp_format` is `ExpBin` due to conflict\n+///   between digit and exponent sign `'p'`.\n pub fn float_to_str_bytes_common<T: Float>(\n         num: T, radix: uint, negative_zero: bool,\n         sign: SignFormat, digits: SignificantDigits, exp_format: ExponentFormat, exp_upper: bool"}]}