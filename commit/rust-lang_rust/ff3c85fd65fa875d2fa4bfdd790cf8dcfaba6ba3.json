{"sha": "ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmM2M4NWZkNjVmYTg3NWQyZmE0YmZkZDc5MGNmOGRjZmFiYTZiYTM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-05T11:26:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-05T11:26:05Z"}, "message": "Rollup merge of #81730 - RustyYato:object-safe-allocator, r=Amanieu\n\nMake `Allocator` object-safe\n\nThis allows rust-lang/wg-allocators#83: polymorphic allocators", "tree": {"sha": "cbb5476e3ab1951245e5e103265c64621a4158d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb5476e3ab1951245e5e103265c64621a4158d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHStNCRBK7hj4Ov3rIwAAdHIIADyqRCvG9DjGFPtgYeLc6d4k\nIuLKjKDsJgnYSK4ovKGbPpPSZWlFM0DKge3/TP9uVhedOnZ/wANA1bSoffpH24us\nSNRvdhkYoF751XudR1mcPEje5MVCwvJE9nWfVQelbY3bru5gyMDFNExH6ixz30RD\n8gJd6/Fj9LOlhiDmQczrTT4+kqx9eQ9WAr0/UqaigwfGQuCZJYx2sii3T7JVmgHA\nD14r6AUUdCA4fIRGBq3oIbBYBl4pWB8HdXMEXbIykXQINATrLs5uaODpWRgp0Obr\nwQ251M4ffHJZlYoNeu5qOcjd5iPer7/cPMc1ibgoYonJiwn2MSZPTjdLy3k6I64=\n=Jlsq\n-----END PGP SIGNATURE-----\n", "payload": "tree cbb5476e3ab1951245e5e103265c64621a4158d9\nparent 21c276f9c87daa5fc5ff34e81fd1f1d5112afe00\nparent d06384ac29098c3a4b3e21eb2f70093e800bd1b6\nauthor Mara Bos <m-ou.se@m-ou.se> 1612524365 +0100\ncommitter GitHub <noreply@github.com> 1612524365 +0100\n\nRollup merge of #81730 - RustyYato:object-safe-allocator, r=Amanieu\n\nMake `Allocator` object-safe\n\nThis allows rust-lang/wg-allocators#83: polymorphic allocators\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3", "html_url": "https://github.com/rust-lang/rust/commit/ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21c276f9c87daa5fc5ff34e81fd1f1d5112afe00", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c276f9c87daa5fc5ff34e81fd1f1d5112afe00", "html_url": "https://github.com/rust-lang/rust/commit/21c276f9c87daa5fc5ff34e81fd1f1d5112afe00"}, {"sha": "d06384ac29098c3a4b3e21eb2f70093e800bd1b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d06384ac29098c3a4b3e21eb2f70093e800bd1b6", "html_url": "https://github.com/rust-lang/rust/commit/d06384ac29098c3a4b3e21eb2f70093e800bd1b6"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "9c2a0146e2c3d8630b9093cdd4ee3aa1b214641e", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3", "patch": "@@ -342,7 +342,10 @@ pub unsafe trait Allocator {\n     ///\n     /// The returned adaptor also implements `Allocator` and will simply borrow this.\n     #[inline(always)]\n-    fn by_ref(&self) -> &Self {\n+    fn by_ref(&self) -> &Self\n+    where\n+        Self: Sized,\n+    {\n         self\n     }\n }"}, {"sha": "fae7ab7fe331969f16637fa25ab3878db28729e1", "filename": "src/test/ui/allocator/object-safe.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3/src%2Ftest%2Fui%2Fallocator%2Fobject-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3/src%2Ftest%2Fui%2Fallocator%2Fobject-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fobject-safe.rs?ref=ff3c85fd65fa875d2fa4bfdd790cf8dcfaba6ba3", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+\n+// Check that `Allocator` is object safe, this allows for polymorphic allocators\n+\n+#![feature(allocator_api)]\n+\n+use std::alloc::{Allocator, System};\n+\n+fn ensure_object_safe(_: &dyn Allocator) {}\n+\n+fn main() {\n+    ensure_object_safe(&System);\n+}"}]}