{"sha": "5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZWU1YTExZTNkNDgwN2M2ZGYxOTBlMzNjYzZjNGRjODFlZjdlYTM=", "commit": {"author": {"name": "Gary Linscott", "email": "glinscott@gmail.com", "date": "2013-07-10T21:06:16Z"}, "committer": {"name": "Gary Linscott", "email": "glinscott@gmail.com", "date": "2013-07-11T18:23:15Z"}, "message": "Optimize is_utf8\n\nManually unroll the multibyte loops, and optimize for the single\nbyte chars.", "tree": {"sha": "7a5607a93faa47e6e9b7e519a13b58ce380d3455", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a5607a93faa47e6e9b7e519a13b58ce380d3455"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3", "html_url": "https://github.com/rust-lang/rust/commit/5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3/comments", "author": {"login": "glinscott", "id": 554932, "node_id": "MDQ6VXNlcjU1NDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/554932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glinscott", "html_url": "https://github.com/glinscott", "followers_url": "https://api.github.com/users/glinscott/followers", "following_url": "https://api.github.com/users/glinscott/following{/other_user}", "gists_url": "https://api.github.com/users/glinscott/gists{/gist_id}", "starred_url": "https://api.github.com/users/glinscott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glinscott/subscriptions", "organizations_url": "https://api.github.com/users/glinscott/orgs", "repos_url": "https://api.github.com/users/glinscott/repos", "events_url": "https://api.github.com/users/glinscott/events{/privacy}", "received_events_url": "https://api.github.com/users/glinscott/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glinscott", "id": 554932, "node_id": "MDQ6VXNlcjU1NDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/554932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glinscott", "html_url": "https://github.com/glinscott", "followers_url": "https://api.github.com/users/glinscott/followers", "following_url": "https://api.github.com/users/glinscott/following{/other_user}", "gists_url": "https://api.github.com/users/glinscott/gists{/gist_id}", "starred_url": "https://api.github.com/users/glinscott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glinscott/subscriptions", "organizations_url": "https://api.github.com/users/glinscott/orgs", "repos_url": "https://api.github.com/users/glinscott/repos", "events_url": "https://api.github.com/users/glinscott/events{/privacy}", "received_events_url": "https://api.github.com/users/glinscott/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "179637304a5d913a7ea2dc13cffed6e53f342377", "url": "https://api.github.com/repos/rust-lang/rust/commits/179637304a5d913a7ea2dc13cffed6e53f342377", "html_url": "https://github.com/rust-lang/rust/commit/179637304a5d913a7ea2dc13cffed6e53f342377"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "1d8a2d404a7a361b2e39abfb93b56a015f56b993", "filename": "src/libstd/str.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3", "patch": "@@ -596,17 +596,25 @@ pub fn is_utf8(v: &[u8]) -> bool {\n     let mut i = 0u;\n     let total = v.len();\n     while i < total {\n-        let mut chsize = utf8_char_width(v[i]);\n-        if chsize == 0u { return false; }\n-        if i + chsize > total { return false; }\n-        i += 1u;\n-        while chsize > 1u {\n-            if v[i] & 192u8 != TAG_CONT_U8 { return false; }\n+        if v[i] < 128u8 {\n             i += 1u;\n-            chsize -= 1u;\n+        } else {\n+            let w = utf8_char_width(v[i]);\n+            if w == 0u { return false; }\n+\n+            let nexti = i + w;\n+            if nexti > total { return false; }\n+\n+            if v[i + 1] & 192u8 != TAG_CONT_U8 { return false; }\n+            if w > 2 {\n+                if v[i + 2] & 192u8 != TAG_CONT_U8 { return false; }\n+                if w > 3 && (v[i + 3] & 192u8 != TAG_CONT_U8) { return false; }\n+            }\n+\n+            i = nexti;\n         }\n     }\n-    return true;\n+    true\n }\n \n /// Determines if a vector of `u16` contains valid UTF-16"}, {"sha": "556d7dd521c96481f049eb824514297c9329571d", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=5aee5a11e3d4807c6df190e33cc6c4dc81ef7ea3", "patch": "@@ -27,9 +27,20 @@ pub fn main() {\n     assert!(s.char_at(1u) == '\u00e9');\n \n     assert!((str::is_utf8(s.as_bytes())));\n+    // invalid prefix\n     assert!((!str::is_utf8(~[0x80_u8])));\n+    // invalid 2 byte prefix\n     assert!((!str::is_utf8(~[0xc0_u8])));\n     assert!((!str::is_utf8(~[0xc0_u8, 0x10_u8])));\n+    // invalid 3 byte prefix\n+    assert!((!str::is_utf8(~[0xe0_u8])));\n+    assert!((!str::is_utf8(~[0xe0_u8, 0x10_u8])));\n+    assert!((!str::is_utf8(~[0xe0_u8, 0xff_u8, 0x10_u8])));\n+    // invalid 4 byte prefix\n+    assert!((!str::is_utf8(~[0xf0_u8])));\n+    assert!((!str::is_utf8(~[0xf0_u8, 0x10_u8])));\n+    assert!((!str::is_utf8(~[0xf0_u8, 0xff_u8, 0x10_u8])));\n+    assert!((!str::is_utf8(~[0xf0_u8, 0xff_u8, 0xff_u8, 0x10_u8])));\n \n     let mut stack = ~\"a\u00d7c\u20ac\";\n     assert_eq!(stack.pop_char(), '\u20ac');"}]}