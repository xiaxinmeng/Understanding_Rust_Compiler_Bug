{"sha": "e5038e20999eef35260b070189883edc2a8a34b2", "node_id": "C_kwDOAAsO6NoAKGU1MDM4ZTIwOTk5ZWVmMzUyNjBiMDcwMTg5ODgzZWRjMmE4YTM0YjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-02T14:53:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-02T14:53:20Z"}, "message": "Auto merge of #91455 - matthiaskrgr:rollup-gix2hy6, r=matthiaskrgr\n\nRollup of 4 iffy pull requests\n\nSuccessful merges:\n\n - #89234 (Disallow non-c-like but \"fieldless\" ADTs from being casted to integer if they use arbitrary enum discriminant)\n - #91045 (Issue 90702 fix: Stop treating some crate loading failures as fatal errors)\n - #91394 (Bump stage0 compiler)\n - #91411 (Enable svh tests on msvc)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7009d9930f29eed3ec4e0b4492707b99ecfc9c6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7009d9930f29eed3ec4e0b4492707b99ecfc9c6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5038e20999eef35260b070189883edc2a8a34b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5038e20999eef35260b070189883edc2a8a34b2", "html_url": "https://github.com/rust-lang/rust/commit/e5038e20999eef35260b070189883edc2a8a34b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5038e20999eef35260b070189883edc2a8a34b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18bb8c61a975fff6424cda831ace5b0404277145", "url": "https://api.github.com/repos/rust-lang/rust/commits/18bb8c61a975fff6424cda831ace5b0404277145", "html_url": "https://github.com/rust-lang/rust/commit/18bb8c61a975fff6424cda831ace5b0404277145"}, {"sha": "822a05898838e4fea0b37748f4cd718693afe41b", "url": "https://api.github.com/repos/rust-lang/rust/commits/822a05898838e4fea0b37748f4cd718693afe41b", "html_url": "https://github.com/rust-lang/rust/commit/822a05898838e4fea0b37748f4cd718693afe41b"}], "stats": {"total": 1312, "additions": 713, "deletions": 599}, "files": [{"sha": "f441c105f70039e8308322ca9cdf6ddd93a6d365", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -519,8 +519,10 @@ pub fn eval_condition(\n                 [NestedMetaItem::Literal(Lit { kind: LitKind::Str(sym, ..), span, .. })] => {\n                     (sym, span)\n                 }\n-                [NestedMetaItem::Literal(Lit { span, .. })\n-                | NestedMetaItem::MetaItem(MetaItem { span, .. })] => {\n+                [\n+                    NestedMetaItem::Literal(Lit { span, .. })\n+                    | NestedMetaItem::MetaItem(MetaItem { span, .. }),\n+                ] => {\n                     sess.span_diagnostic\n                         .struct_span_err(*span, \"expected a version literal\")\n                         .emit();"}, {"sha": "8c4508ed18882dcad064805ca7c83915260ec93c", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -977,9 +977,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 Some(ref name),\n                 BorrowExplanation::MustBeValidFor {\n                     category:\n-                        category\n-                        @\n-                        (ConstraintCategory::Return(_)\n+                        category @ (ConstraintCategory::Return(_)\n                         | ConstraintCategory::CallArgument\n                         | ConstraintCategory::OpaqueType),\n                     from_closure: false,"}, {"sha": "b4821ee36e0a391a00cb8792ec7f867e19447fcb", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -165,10 +165,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef {\n                 local: _,\n                 projection:\n-                    [.., ProjectionElem::Index(_)\n-                    | ProjectionElem::ConstantIndex { .. }\n-                    | ProjectionElem::Subslice { .. }\n-                    | ProjectionElem::Downcast(..)],\n+                    [\n+                        ..,\n+                        ProjectionElem::Index(_)\n+                        | ProjectionElem::ConstantIndex { .. }\n+                        | ProjectionElem::Subslice { .. }\n+                        | ProjectionElem::Downcast(..),\n+                    ],\n             } => bug!(\"Unexpected immutable place.\"),\n         }\n \n@@ -217,7 +220,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             PlaceRef {\n                 local,\n                 projection:\n-                    [proj_base @ .., ProjectionElem::Deref, ProjectionElem::Field(field, _), ProjectionElem::Deref],\n+                    [\n+                        proj_base @ ..,\n+                        ProjectionElem::Deref,\n+                        ProjectionElem::Field(field, _),\n+                        ProjectionElem::Deref,\n+                    ],\n             } => {\n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n \n@@ -763,11 +771,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                                 kind:\n                                                     Call(\n                                                         _,\n-                                                        [Expr {\n-                                                            kind: MethodCall(path_segment, ..),\n-                                                            hir_id,\n-                                                            ..\n-                                                        }, ..],\n+                                                        [\n+                                                            Expr {\n+                                                                kind: MethodCall(path_segment, ..),\n+                                                                hir_id,\n+                                                                ..\n+                                                            },\n+                                                            ..,\n+                                                        ],\n                                                     ),\n                                                 ..\n                                             },"}, {"sha": "80f5f77a025507b320151597b8f75804c4fac261", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -769,20 +769,24 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             let opaque_ty = hir.item(id);\n             if let hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                 bounds:\n-                    [hir::GenericBound::LangItemTrait(\n-                        hir::LangItem::Future,\n-                        _,\n-                        _,\n-                        hir::GenericArgs {\n-                            bindings:\n-                                [hir::TypeBinding {\n-                                    ident: Ident { name: sym::Output, .. },\n-                                    kind: hir::TypeBindingKind::Equality { ty },\n-                                    ..\n-                                }],\n-                            ..\n-                        },\n-                    )],\n+                    [\n+                        hir::GenericBound::LangItemTrait(\n+                            hir::LangItem::Future,\n+                            _,\n+                            _,\n+                            hir::GenericArgs {\n+                                bindings:\n+                                    [\n+                                        hir::TypeBinding {\n+                                            ident: Ident { name: sym::Output, .. },\n+                                            kind: hir::TypeBindingKind::Equality { ty },\n+                                            ..\n+                                        },\n+                                    ],\n+                                ..\n+                            },\n+                        ),\n+                    ],\n                 ..\n             }) = opaque_ty.kind\n             {"}, {"sha": "ceaae9d66cd53feff5ea853dee19eca8359bcf6d", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -3,7 +3,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "10c7bb2eaea943ef8f3adeb5455b481af7cbe3da", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1525,14 +1525,12 @@ fn generator_layout_and_saved_local_names(\n                 // Deref of the `Pin<&mut Self>` state argument.\n                 mir::ProjectionElem::Field(..),\n                 mir::ProjectionElem::Deref,\n-\n                 // Field of a variant of the state.\n                 mir::ProjectionElem::Downcast(_, variant),\n                 mir::ProjectionElem::Field(field, _),\n             ] => {\n-                let name = &mut generator_saved_local_names[\n-                    generator_layout.variant_fields[variant][field]\n-                ];\n+                let name = &mut generator_saved_local_names\n+                    [generator_layout.variant_fields[variant][field]];\n                 if name.is_none() {\n                     name.replace(var.name);\n                 }"}, {"sha": "ee508ac80ba047c25cf5660822a4782646d8b3e5", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -6,7 +6,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(nll)]"}, {"sha": "c721c4b8d7c191d40ab7ae069fbe7a67bf6b6d88", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,7 +1,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(if_let_guard)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "dd82add08dd98db17e9e6e3bb7f5804aee06d5da", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -584,9 +584,7 @@ fn inner_parse_loop<'root, 'tt>(\n                 //\n                 // At the beginning of the loop, if we reach the end of the delimited submatcher,\n                 // we pop the stack to backtrack out of the descent.\n-                seq\n-                @\n-                (TokenTree::Delimited(..)\n+                seq @ (TokenTree::Delimited(..)\n                 | TokenTree::Token(Token { kind: DocComment(..), .. })) => {\n                     let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));\n                     let idx = item.idx;"}, {"sha": "4a8236b2cf38d457a2028a120b36db654bca3895", "filename": "compiler/rustc_expand/src/parse/tests.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -65,24 +65,33 @@ fn string_to_tts_macro() {\n         let tts: &[TokenTree] = &tts[..];\n \n         match tts {\n-            [TokenTree::Token(Token { kind: token::Ident(name_macro_rules, false), .. }), TokenTree::Token(Token { kind: token::Not, .. }), TokenTree::Token(Token { kind: token::Ident(name_zip, false), .. }), TokenTree::Delimited(_, macro_delim, macro_tts)]\n-                if name_macro_rules == &kw::MacroRules && name_zip.as_str() == \"zip\" =>\n-            {\n+            [\n+                TokenTree::Token(Token { kind: token::Ident(name_macro_rules, false), .. }),\n+                TokenTree::Token(Token { kind: token::Not, .. }),\n+                TokenTree::Token(Token { kind: token::Ident(name_zip, false), .. }),\n+                TokenTree::Delimited(_, macro_delim, macro_tts),\n+            ] if name_macro_rules == &kw::MacroRules && name_zip.as_str() == \"zip\" => {\n                 let tts = &macro_tts.trees().collect::<Vec<_>>();\n                 match &tts[..] {\n-                    [TokenTree::Delimited(_, first_delim, first_tts), TokenTree::Token(Token { kind: token::FatArrow, .. }), TokenTree::Delimited(_, second_delim, second_tts)]\n-                        if macro_delim == &token::Paren =>\n-                    {\n+                    [\n+                        TokenTree::Delimited(_, first_delim, first_tts),\n+                        TokenTree::Token(Token { kind: token::FatArrow, .. }),\n+                        TokenTree::Delimited(_, second_delim, second_tts),\n+                    ] if macro_delim == &token::Paren => {\n                         let tts = &first_tts.trees().collect::<Vec<_>>();\n                         match &tts[..] {\n-                            [TokenTree::Token(Token { kind: token::Dollar, .. }), TokenTree::Token(Token { kind: token::Ident(name, false), .. })]\n-                                if first_delim == &token::Paren && name.as_str() == \"a\" => {}\n+                            [\n+                                TokenTree::Token(Token { kind: token::Dollar, .. }),\n+                                TokenTree::Token(Token { kind: token::Ident(name, false), .. }),\n+                            ] if first_delim == &token::Paren && name.as_str() == \"a\" => {}\n                             _ => panic!(\"value 3: {:?} {:?}\", first_delim, first_tts),\n                         }\n                         let tts = &second_tts.trees().collect::<Vec<_>>();\n                         match &tts[..] {\n-                            [TokenTree::Token(Token { kind: token::Dollar, .. }), TokenTree::Token(Token { kind: token::Ident(name, false), .. })]\n-                                if second_delim == &token::Paren && name.as_str() == \"a\" => {}\n+                            [\n+                                TokenTree::Token(Token { kind: token::Dollar, .. }),\n+                                TokenTree::Token(Token { kind: token::Ident(name, false), .. }),\n+                            ] if second_delim == &token::Paren && name.as_str() == \"a\" => {}\n                             _ => panic!(\"value 4: {:?} {:?}\", second_delim, second_tts),\n                         }\n                     }"}, {"sha": "1f8c63424f9b1ca6f014e27f9c48fbc6e958b50f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -30,7 +30,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_order_by)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "2626a2e189c1d062cffc8b676e4669b77ab3e433", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -512,13 +512,17 @@ impl<'a> CrateLoader<'a> {\n         name: Symbol,\n         span: Span,\n         dep_kind: CrateDepKind,\n-    ) -> CrateNum {\n+    ) -> Option<CrateNum> {\n         self.used_extern_options.insert(name);\n-        self.maybe_resolve_crate(name, dep_kind, None).unwrap_or_else(|err| {\n-            let missing_core =\n-                self.maybe_resolve_crate(sym::core, CrateDepKind::Explicit, None).is_err();\n-            err.report(&self.sess, span, missing_core)\n-        })\n+        match self.maybe_resolve_crate(name, dep_kind, None) {\n+            Ok(cnum) => Some(cnum),\n+            Err(err) => {\n+                let missing_core =\n+                    self.maybe_resolve_crate(sym::core, CrateDepKind::Explicit, None).is_err();\n+                err.report(&self.sess, span, missing_core);\n+                None\n+            }\n+        }\n     }\n \n     fn maybe_resolve_crate<'b>(\n@@ -751,7 +755,7 @@ impl<'a> CrateLoader<'a> {\n         };\n         info!(\"panic runtime not found -- loading {}\", name);\n \n-        let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit);\n+        let Some(cnum) = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit) else { return; };\n         let data = self.cstore.get_crate_data(cnum);\n \n         // Sanity check the loaded crate to ensure it is indeed a panic runtime\n@@ -791,7 +795,7 @@ impl<'a> CrateLoader<'a> {\n             );\n         }\n \n-        let cnum = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit);\n+        let Some(cnum) = self.resolve_crate(name, DUMMY_SP, CrateDepKind::Implicit) else { return; };\n         let data = self.cstore.get_crate_data(cnum);\n \n         // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n@@ -991,7 +995,7 @@ impl<'a> CrateLoader<'a> {\n         item: &ast::Item,\n         definitions: &Definitions,\n         def_id: LocalDefId,\n-    ) -> CrateNum {\n+    ) -> Option<CrateNum> {\n         match item.kind {\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 debug!(\n@@ -1011,7 +1015,7 @@ impl<'a> CrateLoader<'a> {\n                     CrateDepKind::Explicit\n                 };\n \n-                let cnum = self.resolve_crate(name, item.span, dep_kind);\n+                let cnum = self.resolve_crate(name, item.span, dep_kind)?;\n \n                 let path_len = definitions.def_path(def_id).data.len();\n                 self.update_extern_crate(\n@@ -1023,14 +1027,14 @@ impl<'a> CrateLoader<'a> {\n                         dependency_of: LOCAL_CRATE,\n                     },\n                 );\n-                cnum\n+                Some(cnum)\n             }\n             _ => bug!(),\n         }\n     }\n \n-    pub fn process_path_extern(&mut self, name: Symbol, span: Span) -> CrateNum {\n-        let cnum = self.resolve_crate(name, span, CrateDepKind::Explicit);\n+    pub fn process_path_extern(&mut self, name: Symbol, span: Span) -> Option<CrateNum> {\n+        let cnum = self.resolve_crate(name, span, CrateDepKind::Explicit)?;\n \n         self.update_extern_crate(\n             cnum,\n@@ -1043,7 +1047,7 @@ impl<'a> CrateLoader<'a> {\n             },\n         );\n \n-        cnum\n+        Some(cnum)\n     }\n \n     pub fn maybe_process_path_extern(&mut self, name: Symbol) -> Option<CrateNum> {"}, {"sha": "e2fd8056f1a7c6a63fe728b6a38c5bd36d9706d8", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -220,7 +220,7 @@ use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, FatalError};\n use rustc_session::config::{self, CrateType};\n use rustc_session::cstore::{CrateSource, MetadataLoader};\n use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n@@ -814,11 +814,11 @@ pub fn find_plugin_registrar(\n     span: Span,\n     name: Symbol,\n ) -> PathBuf {\n-    match find_plugin_registrar_impl(sess, metadata_loader, name) {\n-        Ok(res) => res,\n+    find_plugin_registrar_impl(sess, metadata_loader, name).unwrap_or_else(|err| {\n         // `core` is always available if we got as far as loading plugins.\n-        Err(err) => err.report(sess, span, false),\n-    }\n+        err.report(sess, span, false);\n+        FatalError.raise()\n+    })\n }\n \n fn find_plugin_registrar_impl<'a>(\n@@ -931,8 +931,8 @@ impl fmt::Display for MetadataError<'_> {\n }\n \n impl CrateError {\n-    crate fn report(self, sess: &Session, span: Span, missing_core: bool) -> ! {\n-        let mut err = match self {\n+    crate fn report(self, sess: &Session, span: Span, missing_core: bool) {\n+        let mut diag = match self {\n             CrateError::NonAsciiName(crate_name) => sess.struct_span_err(\n                 span,\n                 &format!(\"cannot load a crate with a non-ascii name `{}`\", crate_name),\n@@ -1210,8 +1210,6 @@ impl CrateError {\n             ),\n         };\n \n-        err.emit();\n-        sess.abort_if_errors();\n-        unreachable!();\n+        diag.emit();\n     }\n }"}, {"sha": "69eb73b42552c5c438fe3f69013df8ae4031f7be", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n@@ -314,6 +314,22 @@ impl<'tcx> AdtDef {\n     /// Whether the ADT lacks fields. Note that this includes uninhabited enums,\n     /// e.g., `enum Void {}` is considered payload free as well.\n     pub fn is_payloadfree(&self) -> bool {\n+        // Treat the ADT as not payload-free if arbitrary_enum_discriminant is used (#88621).\n+        // This would disallow the following kind of enum from being casted into integer.\n+        // ```\n+        // enum Enum {\n+        //    Foo() = 1,\n+        //    Bar{} = 2,\n+        //    Baz = 3,\n+        // }\n+        // ```\n+        if self\n+            .variants\n+            .iter()\n+            .any(|v| matches!(v.discr, VariantDiscr::Explicit(_)) && v.ctor_kind != CtorKind::Const)\n+        {\n+            return false;\n+        }\n         self.variants.iter().all(|v| v.fields.is_empty())\n     }\n "}, {"sha": "275a2128c45564f5f468e6eba57940d7b30fd5f6", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1111,7 +1111,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             };\n             debug!(\"layout_scalar_valid_range: attr={:?}\", attr);\n             if let Some(\n-                &[ast::NestedMetaItem::Literal(ast::Lit { kind: ast::LitKind::Int(a, _), .. })],\n+                &[\n+                    ast::NestedMetaItem::Literal(ast::Lit {\n+                        kind: ast::LitKind::Int(a, _), ..\n+                    }),\n+                ],\n             ) = attr.meta_item_list().as_deref()\n             {\n                 Bound::Included(a)"}, {"sha": "a80fe6a3362b4821955cd99c1da7044c8e54b12d", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -354,14 +354,17 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// The ordering assumed here must match that used by `ClosureSubsts::new` above.\n     fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {\n         match self.substs[..] {\n-            [ref parent_substs @ .., closure_kind_ty, closure_sig_as_fn_ptr_ty, tupled_upvars_ty] => {\n-                ClosureSubstsParts {\n-                    parent_substs,\n-                    closure_kind_ty,\n-                    closure_sig_as_fn_ptr_ty,\n-                    tupled_upvars_ty,\n-                }\n-            }\n+            [\n+                ref parent_substs @ ..,\n+                closure_kind_ty,\n+                closure_sig_as_fn_ptr_ty,\n+                tupled_upvars_ty,\n+            ] => ClosureSubstsParts {\n+                parent_substs,\n+                closure_kind_ty,\n+                closure_sig_as_fn_ptr_ty,\n+                tupled_upvars_ty,\n+            },\n             _ => bug!(\"closure substs missing synthetics\"),\n         }\n     }"}, {"sha": "d01b74930c958d807222866485befabebc36150e", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -7,7 +7,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_zip)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "d45c064d5e37e5b86d32399886b78beffecb9dfc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 88, "deletions": 69, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -678,75 +678,13 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::ExternCrate(orig_name) => {\n-                let module = if orig_name.is_none() && ident.name == kw::SelfLower {\n-                    self.r\n-                        .session\n-                        .struct_span_err(item.span, \"`extern crate self;` requires renaming\")\n-                        .span_suggestion(\n-                            item.span,\n-                            \"try\",\n-                            \"extern crate self as name;\".into(),\n-                            Applicability::HasPlaceholders,\n-                        )\n-                        .emit();\n-                    return;\n-                } else if orig_name == Some(kw::SelfLower) {\n-                    self.r.graph_root\n-                } else {\n-                    let crate_id = self.r.crate_loader.process_extern_crate(\n-                        item,\n-                        &self.r.definitions,\n-                        local_def_id,\n-                    );\n-                    self.r.extern_crate_map.insert(local_def_id, crate_id);\n-                    self.r.expect_module(crate_id.as_def_id())\n-                };\n-\n-                let used = self.process_macro_use_imports(item, module);\n-                let binding =\n-                    (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);\n-                let import = self.r.arenas.alloc_import(Import {\n-                    kind: ImportKind::ExternCrate { source: orig_name, target: ident },\n-                    root_id: item.id,\n-                    id: item.id,\n-                    parent_scope: self.parent_scope,\n-                    imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),\n-                    has_attributes: !item.attrs.is_empty(),\n-                    use_span_with_attributes: item.span_with_attributes(),\n-                    use_span: item.span,\n-                    root_span: item.span,\n-                    span: item.span,\n-                    module_path: Vec::new(),\n-                    vis: Cell::new(vis),\n-                    used: Cell::new(used),\n-                });\n-                self.r.potentially_unused_imports.push(import);\n-                let imported_binding = self.r.import(binding, import);\n-                if ptr::eq(parent, self.r.graph_root) {\n-                    if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0())\n-                    {\n-                        if expansion != LocalExpnId::ROOT\n-                            && orig_name.is_some()\n-                            && entry.extern_crate_item.is_none()\n-                        {\n-                            let msg = \"macro-expanded `extern crate` items cannot \\\n-                                       shadow names passed with `--extern`\";\n-                            self.r.session.span_err(item.span, msg);\n-                        }\n-                    }\n-                    let entry =\n-                        self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(\n-                            ExternPreludeEntry {\n-                                extern_crate_item: None,\n-                                introduced_by_item: true,\n-                            },\n-                        );\n-                    entry.extern_crate_item = Some(imported_binding);\n-                    if orig_name.is_some() {\n-                        entry.introduced_by_item = true;\n-                    }\n-                }\n-                self.r.define(parent, ident, TypeNS, imported_binding);\n+                self.build_reduced_graph_for_extern_crate(\n+                    orig_name,\n+                    item,\n+                    local_def_id,\n+                    vis,\n+                    parent,\n+                );\n             }\n \n             ItemKind::Mod(..) => {\n@@ -884,6 +822,87 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n+    fn build_reduced_graph_for_extern_crate(\n+        &mut self,\n+        orig_name: Option<Symbol>,\n+        item: &Item,\n+        local_def_id: LocalDefId,\n+        vis: ty::Visibility,\n+        parent: Module<'a>,\n+    ) {\n+        let ident = item.ident;\n+        let sp = item.span;\n+        let parent_scope = self.parent_scope;\n+        let expansion = parent_scope.expansion;\n+\n+        let (used, module, binding) = if orig_name.is_none() && ident.name == kw::SelfLower {\n+            self.r\n+                .session\n+                .struct_span_err(item.span, \"`extern crate self;` requires renaming\")\n+                .span_suggestion(\n+                    item.span,\n+                    \"rename the `self` crate to be able to import it\",\n+                    \"extern crate self as name;\".into(),\n+                    Applicability::HasPlaceholders,\n+                )\n+                .emit();\n+            return;\n+        } else if orig_name == Some(kw::SelfLower) {\n+            Some(self.r.graph_root)\n+        } else {\n+            self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id).map(\n+                |crate_id| {\n+                    self.r.extern_crate_map.insert(local_def_id, crate_id);\n+                    self.r.expect_module(crate_id.as_def_id())\n+                },\n+            )\n+        }\n+        .map(|module| {\n+            let used = self.process_macro_use_imports(item, module);\n+            let binding =\n+                (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);\n+            (used, Some(ModuleOrUniformRoot::Module(module)), binding)\n+        })\n+        .unwrap_or((true, None, self.r.dummy_binding));\n+        let import = self.r.arenas.alloc_import(Import {\n+            kind: ImportKind::ExternCrate { source: orig_name, target: ident },\n+            root_id: item.id,\n+            id: item.id,\n+            parent_scope: self.parent_scope,\n+            imported_module: Cell::new(module),\n+            has_attributes: !item.attrs.is_empty(),\n+            use_span_with_attributes: item.span_with_attributes(),\n+            use_span: item.span,\n+            root_span: item.span,\n+            span: item.span,\n+            module_path: Vec::new(),\n+            vis: Cell::new(vis),\n+            used: Cell::new(used),\n+        });\n+        self.r.potentially_unused_imports.push(import);\n+        let imported_binding = self.r.import(binding, import);\n+        if ptr::eq(parent, self.r.graph_root) {\n+            if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0()) {\n+                if expansion != LocalExpnId::ROOT\n+                    && orig_name.is_some()\n+                    && entry.extern_crate_item.is_none()\n+                {\n+                    let msg = \"macro-expanded `extern crate` items cannot \\\n+                                       shadow names passed with `--extern`\";\n+                    self.r.session.span_err(item.span, msg);\n+                }\n+            }\n+            let entry = self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(\n+                ExternPreludeEntry { extern_crate_item: None, introduced_by_item: true },\n+            );\n+            entry.extern_crate_item = Some(imported_binding);\n+            if orig_name.is_some() {\n+                entry.introduced_by_item = true;\n+            }\n+        }\n+        self.r.define(parent, ident, TypeNS, imported_binding);\n+    }\n+\n     /// Constructs the reduced graph for one foreign item.\n     fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {\n         let local_def_id = self.r.local_def_id(item.id);"}, {"sha": "909a809b7814ffd824dc79093c6891b71ae0ad9f", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -13,7 +13,6 @@\n #![feature(drain_filter)]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(never_type)]\n@@ -3285,7 +3284,9 @@ impl<'a> Resolver<'a> {\n                 Some(binding)\n             } else {\n                 let crate_id = if !speculative {\n-                    self.crate_loader.process_path_extern(ident.name, ident.span)\n+                    let Some(crate_id) =\n+                        self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };\n+                    crate_id\n                 } else {\n                     self.crate_loader.maybe_process_path_extern(ident.name)?\n                 };"}, {"sha": "72bb9a55c698381916a547f92fd8f76ec4050309", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -2026,9 +2026,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         debug!(\"maybe_suggest_unsized_generics: param={:?}\", param);\n         match node {\n             hir::Node::Item(\n-                item\n-                @\n-                hir::Item {\n+                item @ hir::Item {\n                     // Only suggest indirection for uses of type parameters in ADTs.\n                     kind:\n                         hir::ItemKind::Enum(..) | hir::ItemKind::Struct(..) | hir::ItemKind::Union(..),"}, {"sha": "b4810b4e22fe4f8a6603f1e640c419200d5fe81a", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1126,8 +1126,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         for expr in exprs {\n             let expr = expr.as_coercion_site();\n             let noop = match self.typeck_results.borrow().expr_adjustments(expr) {\n-                &[Adjustment { kind: Adjust::Deref(_), .. }, Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(_, mutbl_adj)), .. }] =>\n-                {\n+                &[\n+                    Adjustment { kind: Adjust::Deref(_), .. },\n+                    Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(_, mutbl_adj)), .. },\n+                ] => {\n                     match *self.node_ty(expr.hir_id).kind() {\n                         ty::Ref(_, _, mt_orig) => {\n                             let mutbl_adj: hir::Mutability = mutbl_adj.into();"}, {"sha": "bc059df95249ceaf5f41398b1d6d64e40b481941", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -304,20 +304,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // is a valid NeverToAny adjustment, because it can't\n                     // be reached.\n                     (&[Adjustment { kind: Adjust::NeverToAny, .. }], _) => return,\n-                    (&[\n-                        Adjustment { kind: Adjust::Deref(_), .. },\n-                        Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. },\n-                    ], &[\n-                        Adjustment { kind: Adjust::Deref(_), .. },\n-                        .. // Any following adjustments are allowed.\n-                    ]) => {\n+                    (\n+                        &[\n+                            Adjustment { kind: Adjust::Deref(_), .. },\n+                            Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. },\n+                        ],\n+                        &[\n+                            Adjustment { kind: Adjust::Deref(_), .. },\n+                            .., // Any following adjustments are allowed.\n+                        ],\n+                    ) => {\n                         // A reborrow has no effect before a dereference.\n                     }\n                     // FIXME: currently we never try to compose autoderefs\n                     // and ReifyFnPointer/UnsafeFnPointer, but we could.\n-                    _ =>\n-                        bug!(\"while adjusting {:?}, can't compose {:?} and {:?}\",\n-                             expr, entry.get(), adj)\n+                    _ => bug!(\n+                        \"while adjusting {:?}, can't compose {:?} and {:?}\",\n+                        expr,\n+                        entry.get(),\n+                        adj\n+                    ),\n                 };\n                 *entry.get_mut() = adj;\n             }"}, {"sha": "d01e21bcb23602511ad9341ded7af8a4b28aa657", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -440,8 +440,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             // If we have an autoref followed by unsizing at the end, fix the unsize target.\n-            if let [.., Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. }, Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), ref mut target }] =\n-                adjustments[..]\n+            if let [\n+                ..,\n+                Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. },\n+                Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), ref mut target },\n+            ] = adjustments[..]\n             {\n                 *target = method.sig.inputs()[0];\n             }"}, {"sha": "41bbf322a6ecc42577bc6b67c8842b203cd7e2db", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -687,15 +687,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             r\n                         ),\n                         (\n-                            l\n-                            @\n-                            (ProjectionKind::Index\n+                            l @ (ProjectionKind::Index\n                             | ProjectionKind::Subslice\n                             | ProjectionKind::Deref\n                             | ProjectionKind::Field(..)),\n-                            r\n-                            @\n-                            (ProjectionKind::Index\n+                            r @ (ProjectionKind::Index\n                             | ProjectionKind::Subslice\n                             | ProjectionKind::Deref\n                             | ProjectionKind::Field(..)),"}, {"sha": "f87cbb7f41755b544bf697dd019a2447458dded6", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -58,7 +58,6 @@ This API is completely unstable and subject to change.\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(if_let_guard)]\n #![feature(in_band_lifetimes)]\n #![feature(is_sorted)]"}, {"sha": "1bb257acff76a905e10207f36b555d3a9262b179", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -105,7 +105,6 @@\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n #![feature(inherent_ascii_escape)]\n-#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(inplace_iteration)]\n #![feature(iter_advance_by)]\n #![feature(iter_zip)]"}, {"sha": "39ccbaaaf7b33c22fd7d923df4fdc23ef62f4b4b", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -330,11 +330,9 @@ impl<T: Ord, const N: usize> Ord for [T; N] {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"copy_clone_array_lib\", since = \"1.58.0\")]\n impl<T: Copy, const N: usize> Copy for [T; N] {}\n \n-#[cfg(not(bootstrap))]\n #[stable(feature = \"copy_clone_array_lib\", since = \"1.58.0\")]\n impl<T: Clone, const N: usize> Clone for [T; N] {\n     #[inline]\n@@ -348,12 +346,10 @@ impl<T: Clone, const N: usize> Clone for [T; N] {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n trait SpecArrayClone: Clone {\n     fn clone<const N: usize>(array: &[Self; N]) -> [Self; N];\n }\n \n-#[cfg(not(bootstrap))]\n impl<T: Clone> SpecArrayClone for T {\n     #[inline]\n     default fn clone<const N: usize>(array: &[T; N]) -> [T; N] {\n@@ -363,7 +359,6 @@ impl<T: Clone> SpecArrayClone for T {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n impl<T: Copy> SpecArrayClone for T {\n     #[inline]\n     fn clone<const N: usize>(array: &[T; N]) -> [T; N] {"}, {"sha": "b0f9368b0c068587764a754bad5ced58c91dbbf8", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -159,14 +159,12 @@\n #![feature(const_impl_trait)]\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n-#![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n #![feature(derive_default_enum)]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n-#![cfg_attr(bootstrap, feature(doc_primitive))]\n-#![cfg_attr(not(bootstrap), feature(rustdoc_internals))]\n+#![feature(rustdoc_internals)]\n #![feature(exhaustive_patterns)]\n #![feature(doc_cfg_hide)]\n #![feature(extern_types)]\n@@ -198,7 +196,7 @@\n #![feature(try_blocks)]\n #![feature(unboxed_closures)]\n #![feature(unsized_fn_params)]\n-#![cfg_attr(not(bootstrap), feature(asm_const))]\n+#![feature(asm_const)]\n //\n // Target features:\n #![feature(aarch64_target_feature)]\n@@ -408,13 +406,11 @@ pub mod arch {\n #[allow(rustdoc::bare_urls)]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n #[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n-#[cfg(not(bootstrap))]\n mod core_simd;\n \n #[doc = include_str!(\"../../portable-simd/crates/core_simd/src/core_simd_docs.md\")]\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n #[cfg(not(all(miri, doctest)))] // Miri does not support all SIMD intrinsics\n-#[cfg(not(bootstrap))]\n pub mod simd {\n     #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n     pub use crate::core_simd::simd::*;"}, {"sha": "9a29094b52c468d336512a919fc5a2be4b1942c0", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -789,7 +789,6 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[stable(feature = \"maybe_uninit_ref\", since = \"1.55.0\")]\n     #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_raw_ptr_deref))]\n     #[inline(always)]\n     pub const unsafe fn assume_init_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` is initialized."}, {"sha": "52a2e464e3a7ce1c908c87f8411570d9597b7633", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -82,7 +82,7 @@ pub trait Generator<R = ()> {\n     /// `return` statement or implicitly as the last expression of a generator\n     /// literal. For example futures would use this as `Result<T, E>` as it\n     /// represents a completed future.\n-    #[cfg_attr(not(bootstrap), lang = \"generator_return\")]\n+    #[lang = \"generator_return\"]\n     type Return;\n \n     /// Resumes the execution of this generator."}, {"sha": "d98db3f57c0f4acdc4797d1381212876c078daf7", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -131,7 +131,7 @@ pub const unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a m\n }\n \n // In debug builds checks that `data` pointer is aligned and non-null and that slice with given `len` would cover less than half the address space\n-#[cfg(all(not(bootstrap), debug_assertions))]\n+#[cfg(debug_assertions)]\n #[unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n const fn debug_check_data_len<T>(data: *const T, len: usize) {\n@@ -161,7 +161,7 @@ const fn debug_check_data_len<T>(data: *const T, len: usize) {\n     );\n }\n \n-#[cfg(not(all(not(bootstrap), debug_assertions)))]\n+#[cfg(not(debug_assertions))]\n const fn debug_check_data_len<T>(_data: *const T, _len: usize) {}\n \n /// Converts a reference to T into a slice of length 1 (without copying)."}, {"sha": "746d1cacfd0fb050071f7365409f0ca9354dd17f", "filename": "library/core/src/time.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -182,7 +182,6 @@ impl Duration {\n     #[inline]\n     #[must_use]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn new(secs: u64, nanos: u32) -> Duration {\n         let secs = match secs.checked_add((nanos / NANOS_PER_SEC) as u64) {\n             Some(secs) => secs,\n@@ -482,7 +481,6 @@ impl Duration {\n                   without modifying the original\"]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_add(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_add(rhs.secs) {\n             let mut nanos = self.nanos + rhs.nanos;\n@@ -543,7 +541,6 @@ impl Duration {\n                   without modifying the original\"]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_sub(rhs.secs) {\n             let nanos = if self.nanos >= rhs.nanos {\n@@ -602,7 +599,6 @@ impl Duration {\n                   without modifying the original\"]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_mul(self, rhs: u32) -> Option<Duration> {\n         // Multiply nanoseconds as u64, because it cannot overflow that way.\n         let total_nanos = self.nanos as u64 * rhs as u64;\n@@ -660,7 +656,6 @@ impl Duration {\n                   without modifying the original\"]\n     #[inline]\n     #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n-    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_div(self, rhs: u32) -> Option<Duration> {\n         if rhs != 0 {\n             let secs = self.secs / (rhs as u64);"}, {"sha": "d49c2552cfd4c98fdb4846a12697107038db6e9f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -59,11 +59,10 @@\n #![feature(const_mut_refs)]\n #![feature(const_pin)]\n #![feature(const_slice_from_raw_parts)]\n-#![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(result_into_ok_or_err)]\n-#![cfg_attr(not(bootstrap), feature(portable_simd))]\n+#![feature(portable_simd)]\n #![feature(ptr_metadata)]\n #![feature(once_cell)]\n #![feature(unsized_tuple_coercion)]\n@@ -109,7 +108,6 @@ mod pattern;\n mod pin;\n mod ptr;\n mod result;\n-#[cfg(not(bootstrap))]\n mod simd;\n mod slice;\n mod str;"}, {"sha": "41b94cb294cfe1fc5035ec284f7a2592684883be", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -264,8 +264,7 @@\n #![feature(const_ipv4)]\n #![feature(const_ipv6)]\n #![feature(const_option)]\n-#![cfg_attr(bootstrap, feature(const_raw_ptr_deref))]\n-#![cfg_attr(not(bootstrap), feature(const_mut_refs))]\n+#![feature(const_mut_refs)]\n #![feature(const_socketaddr)]\n #![feature(const_trait_impl)]\n #![feature(container_error_extra)]\n@@ -275,9 +274,7 @@\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n #![feature(doc_cfg_hide)]\n-#![cfg_attr(bootstrap, feature(doc_primitive))]\n-#![cfg_attr(bootstrap, feature(doc_keyword))]\n-#![cfg_attr(not(bootstrap), feature(rustdoc_internals))]\n+#![feature(rustdoc_internals)]\n #![feature(doc_masked)]\n #![feature(doc_notable_trait)]\n #![feature(dropck_eyepatch)]\n@@ -323,7 +320,7 @@\n #![feature(panic_internals)]\n #![feature(panic_unwind)]\n #![feature(pin_static_ref)]\n-#![cfg_attr(not(bootstrap), feature(portable_simd))]\n+#![feature(portable_simd)]\n #![feature(prelude_import)]\n #![feature(ptr_internals)]\n #![feature(rustc_attrs)]\n@@ -476,7 +473,6 @@ pub use core::ptr;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::result;\n #[unstable(feature = \"portable_simd\", issue = \"86656\")]\n-#[cfg(not(bootstrap))]\n pub use core::simd;\n #[unstable(feature = \"async_stream\", issue = \"79024\")]\n pub use core::stream;"}, {"sha": "19b309d6a30c8ea10514b5abb950ebd9610d8fae", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -395,9 +395,7 @@ crate fn register_res(cx: &mut DocContext<'_>, res: Res) -> DefId {\n     let (did, kind) = match res {\n         // These should be added to the cache using `record_extern_fqn`.\n         Res::Def(\n-            kind\n-            @\n-            (AssocTy | AssocFn | AssocConst | Variant | Fn | TyAlias | Enum | Trait | Struct\n+            kind @ (AssocTy | AssocFn | AssocConst | Variant | Fn | TyAlias | Enum | Trait | Struct\n             | Union | Mod | ForeignTy | Const | Static | Macro(..) | TraitAlias),\n             i,\n         ) => (i, kind.into()),"}, {"sha": "6c1b95b4145793c917e923f2b22a38cada152878", "filename": "src/stage0.json", "status": "modified", "additions": 336, "deletions": 336, "changes": 672, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -2,347 +2,347 @@\n   \"__comment\": \"Generated by `./x.py run src/tools/bump-stage0`. Run that command again to update the bootstrap compiler.\",\n   \"dist_server\": \"https://static.rust-lang.org\",\n   \"compiler\": {\n-    \"date\": \"2021-10-22\",\n+    \"date\": \"2021-11-30\",\n     \"version\": \"beta\"\n   },\n   \"rustfmt\": {\n-    \"date\": \"2021-10-23\",\n+    \"date\": \"2021-11-30\",\n     \"version\": \"nightly\"\n   },\n   \"checksums_sha256\": {\n-    \"dist/2021-10-22/cargo-beta-aarch64-apple-darwin.tar.gz\": \"b81ef641492ff2f03a93c8fbfbcfa78db2f6574d1998569d68dd2ba0e08ee186\",\n-    \"dist/2021-10-22/cargo-beta-aarch64-apple-darwin.tar.xz\": \"925090782ad982202ca554a84e9d4a7b190f94b0b220c23e73235383d6ca367d\",\n-    \"dist/2021-10-22/cargo-beta-aarch64-pc-windows-msvc.tar.gz\": \"eba42edfebc85c744f4c6874337847748df65e430915f47238a93b1b7e96840a\",\n-    \"dist/2021-10-22/cargo-beta-aarch64-pc-windows-msvc.tar.xz\": \"fd04a8c4058ff287ea0256fd9f33a4b04b4f098d6911e8d827525cdeda6f169e\",\n-    \"dist/2021-10-22/cargo-beta-aarch64-unknown-linux-gnu.tar.gz\": \"c7abbf1f265435cc9f6f0773d30321fc99353e0ddbf0004d00f47433eb3aaab1\",\n-    \"dist/2021-10-22/cargo-beta-aarch64-unknown-linux-gnu.tar.xz\": \"3363dfdcd7106841edbd9029676ac339ff54c142921d71d92e308bee2ee33066\",\n-    \"dist/2021-10-22/cargo-beta-aarch64-unknown-linux-musl.tar.gz\": \"fbc5d5f70a36fc73f4d34d101aef4be78e38b5009ebf690fe46ba32eff6c1fce\",\n-    \"dist/2021-10-22/cargo-beta-aarch64-unknown-linux-musl.tar.xz\": \"220f23f50645532df4e5a4b1d6d894ce66a6ee2e5576fdf552081644a74a1c8f\",\n-    \"dist/2021-10-22/cargo-beta-arm-unknown-linux-gnueabi.tar.gz\": \"94b42b8639ce541c1a355991f20d9934c72e766b6200d742d2d5b3b2f499f782\",\n-    \"dist/2021-10-22/cargo-beta-arm-unknown-linux-gnueabi.tar.xz\": \"e32e9df3ab261fe20c363406d655fdaeeefc9dbb3d69da4551cdf9c22c418eb2\",\n-    \"dist/2021-10-22/cargo-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"301c303ec0db0e342ecce4e259e79810e082766bac8f9907c353bdf490177863\",\n-    \"dist/2021-10-22/cargo-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"d6f9409076ab4e2dac5ac5c07bac6be30e83e281df9efe2fa68386928e2e6faf\",\n-    \"dist/2021-10-22/cargo-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"a4a82d48b2b1e6a49c0a765f9ee4d01e7ce4b0543128745d13cf4684c56eca8c\",\n-    \"dist/2021-10-22/cargo-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"c9ca524ba0e76d9fe38f0e4af337d14b97fd97dcd83d80ebf4725b5b03bea3ac\",\n-    \"dist/2021-10-22/cargo-beta-i686-pc-windows-gnu.tar.gz\": \"973eabda91963d58a9cdd1491bcea15834874fbca018287fb7f5c8bdcdf323d1\",\n-    \"dist/2021-10-22/cargo-beta-i686-pc-windows-gnu.tar.xz\": \"cbbc14d1ef0e4579167fce4a5fac43b22c87882049a3d0edfbace9fc5c103ad3\",\n-    \"dist/2021-10-22/cargo-beta-i686-pc-windows-msvc.tar.gz\": \"ef090943f6c90bb3327225e0256e73762ca2f73ae5d0d07b2c828709077e1132\",\n-    \"dist/2021-10-22/cargo-beta-i686-pc-windows-msvc.tar.xz\": \"42708683ba5ad855880ec69d92192bd9f99ebf102beaf6c53680cb8733fba9e7\",\n-    \"dist/2021-10-22/cargo-beta-i686-unknown-linux-gnu.tar.gz\": \"b6c260ba19734482439bf6d12b8e87e82f269f1bec447ec85e59372ef6489eec\",\n-    \"dist/2021-10-22/cargo-beta-i686-unknown-linux-gnu.tar.xz\": \"fb6036ff910d075fb5e483000af641328e6d7d01c33255c099ed1b0302239918\",\n-    \"dist/2021-10-22/cargo-beta-mips-unknown-linux-gnu.tar.gz\": \"71e4e5fcf055251089ac0d37b5ad873eaee6aa0380438cd68f140a16d3a37cd1\",\n-    \"dist/2021-10-22/cargo-beta-mips-unknown-linux-gnu.tar.xz\": \"b89acabf106b10c5c3421574bea83d8baf1f29d040c40d5522f85e2e6afa6373\",\n-    \"dist/2021-10-22/cargo-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"f544ea08d2f6086dc49c4d635116f3b4b804e5b68251e5fad433d538ae5e8226\",\n-    \"dist/2021-10-22/cargo-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"54b0cbb4292cc4733a704017775e5cd4a9be34d53a4c666d6fc556472b508e1c\",\n-    \"dist/2021-10-22/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"5e81253ec483f096e23ed98f939220b029814c041b4b72b93e994cead3dc4f4c\",\n-    \"dist/2021-10-22/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"1a66beee5ccfd8b0fb4de52bccd11a0057248ac7fe8daf4f4d6fe0c0088044ea\",\n-    \"dist/2021-10-22/cargo-beta-mipsel-unknown-linux-gnu.tar.gz\": \"2a6cc2e98ed575df64661595b6e1ec2814ed79fb63fe697c0201193eb52d70e0\",\n-    \"dist/2021-10-22/cargo-beta-mipsel-unknown-linux-gnu.tar.xz\": \"ab3f70ea6977306c26c9cc368d64a116716f9ac6ad1a55eed23ddac894e7717b\",\n-    \"dist/2021-10-22/cargo-beta-powerpc-unknown-linux-gnu.tar.gz\": \"ddd840c0c19077b4b45dc85920a2b2a37f176795b3d9390f1faccd44aa3d55e5\",\n-    \"dist/2021-10-22/cargo-beta-powerpc-unknown-linux-gnu.tar.xz\": \"f5c9f1df082a7c48a63e786e5104d31e616c31d47514e9233b4a86d24700159c\",\n-    \"dist/2021-10-22/cargo-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"4d39fac4d45dd73221b93b1d1351988ab4bf07ab04187a815467ab9b992f9490\",\n-    \"dist/2021-10-22/cargo-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"3b6b0d38a3644028ca76347d5b82da6bac6e761a235516bf5b321d12ba909519\",\n-    \"dist/2021-10-22/cargo-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"0d5992a6e66207e4ead98d5bd627c181a052775f03ebdd2a0313574092a12abc\",\n-    \"dist/2021-10-22/cargo-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"217940928d5c22553f910f3abf7b56bc832ddcd36282cb85c4b8142f9411147f\",\n-    \"dist/2021-10-22/cargo-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"67ce7cb12cbd06e114a2f5dedd1d94c844f091ab05a764579dccf30e6158ea46\",\n-    \"dist/2021-10-22/cargo-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"2cb17c66bdfcfeb567bb021c25c33a8c2b8df1366601d09fd9332278517a2f4c\",\n-    \"dist/2021-10-22/cargo-beta-s390x-unknown-linux-gnu.tar.gz\": \"e25a7fa310019a3457b317c9e3fe052602c82a25939c2ea8c012ff6016c622d9\",\n-    \"dist/2021-10-22/cargo-beta-s390x-unknown-linux-gnu.tar.xz\": \"1722ef69ea949c365f6b64735ee31dc92082db1177b94f0086b8aca790378398\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-apple-darwin.tar.gz\": \"f171fb45017640db15d437198b25758c49649b64338118501905f48ce957b93f\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-apple-darwin.tar.xz\": \"59c5f8ce9fa9dbf3e96dd8a38a52b8bff0ff0d97c081b1d343a654257df1e500\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-pc-windows-gnu.tar.gz\": \"4f219f3661a03330b33d33cebadd5eac759968e1c4c3449f0f27433e715ab55e\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-pc-windows-gnu.tar.xz\": \"5aed2d9631a2aa3fe016ae5e2ee312aa5357ce470c26c01171d14a159af7750c\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-pc-windows-msvc.tar.gz\": \"c9dfb9c486cedac794cab6ac524805c10d2853c15416f3037ff4a5098514427a\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-pc-windows-msvc.tar.xz\": \"a1e0aca8a32700e62fbc73b17dbb0be711db4e9caf535440b08bb1465d6a9c9c\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-freebsd.tar.gz\": \"61c041ba51632c029d916f274ed8ff92f1f7b23b5e9641591828e6251e205f6b\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-freebsd.tar.xz\": \"b61464e9e1c2e820a237f1f3d91cae8b0e62cda16dea51b32a8cf695b7a5707c\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-illumos.tar.gz\": \"1f9b7e500b22c34fa3080e4a15397a3a3827797c237d21459841055b5cb6cbaa\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-illumos.tar.xz\": \"97aba07cede4a9228ff1b937b8e884b23e9e246afe39b9d68896e6b4a346d972\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-linux-gnu.tar.gz\": \"c82bf6a11f468ba1d865a3cdc036b03f01e63a23272512583afa9dd9bbf95824\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-linux-gnu.tar.xz\": \"2efde3ef57e877f7a0aaba264ec14bc94d0cf3e4451b072c004c37e3f86288a9\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-linux-musl.tar.gz\": \"17df9a194a8cd80871981fbde5fc333794e36a4ab219aafa7849ffeaf07d95c1\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-linux-musl.tar.xz\": \"54fd84ff5bdf3221b151945ceacd71f51e71898927fe4b57887a0eba5d3e3676\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-netbsd.tar.gz\": \"0bd987dd970f98b297afbb7cf4906b1d2045ad09df929e8ebd291125e3c36126\",\n-    \"dist/2021-10-22/cargo-beta-x86_64-unknown-netbsd.tar.xz\": \"054af5ef3148902a8fe07c2c445ea98a526f63203c13b849ba464d17145afe07\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-apple-darwin.tar.gz\": \"2228315b5b7280a7ea9b3acfdfa1a8f0921391f67d792f32f53c1b303565a20b\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-apple-darwin.tar.xz\": \"777d4c1c6bd3430771280dad79aaa16a6903901875529391e4779f0c2fadb0d8\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-apple-ios-sim.tar.gz\": \"1d2a74d8ff44feae6551613c182a87d078c0d4cc8f5117c6a3763f28d0af306e\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-apple-ios-sim.tar.xz\": \"67ab7519c7182a582fbd3e477b8bbbcba143a76e442cef94a47f0a03fa36ed05\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-apple-ios.tar.gz\": \"2c2a8ca955cc99e86823bf7ede5492b04ea28c182a94d0f59b0d542f10128e88\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-apple-ios.tar.xz\": \"bfd421654ad72aaff2610a104d0ea2afec579803ed16ac70ab594067cac292aa\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-fuchsia.tar.gz\": \"b06020ac4aa9b5236d1888a59e2dc3519ac63c760ed0ef47b706466df437d5ba\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-fuchsia.tar.xz\": \"92ffbe22d8fe9474aef42cd3bbe4808c4afa212a3f65f07828b39848dc03a1f9\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-linux-android.tar.gz\": \"55aa7b2b3b79aba674bfc496efba37400086e192e6c7fa8483f5501ba31e68a8\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-linux-android.tar.xz\": \"6219a156e46b7056a9046ab5a58af1a5386024b2961528a54fe6b1c3ec09a91f\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-pc-windows-msvc.tar.gz\": \"f43fecdf75ac81f8b18ba5ec59625ce93b0debd27c0016edd76d5058e8182118\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-pc-windows-msvc.tar.xz\": \"a032b56685b2b8431068565d652e5a174dbc9febe6de96945c037b96359d5cfe\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-unknown-linux-gnu.tar.gz\": \"bdb7d197cc36c774fe4d59a1c86b46325e93d82462c1cbe87e8ab415aba78e4c\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-unknown-linux-gnu.tar.xz\": \"061cb27b6d5b8e416457137334969733cd0727afe75d63d7954ccf547b7edc51\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-unknown-linux-musl.tar.gz\": \"895d936a579c9642efcfdca400662264b8ba84ab9130f88e4dcd11c968a81e4d\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-unknown-linux-musl.tar.xz\": \"29f3aa4005c64fa28f99af20221956ad21aff4a37c5cab9723959ddebb3c2b9d\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-unknown-none-softfloat.tar.gz\": \"b1e326b0ab30a2f9172a55272926cfa62dca9fbc2c590579f6c7685b8b4ad789\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-unknown-none-softfloat.tar.xz\": \"616fa68272334400c9110cf5a2cbd7d5c6e462cef8d2c5bc443c3ef6e9843e3b\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-unknown-none.tar.gz\": \"ec7d513787434a3cf2d523dcff7e37c28cff4b09b13be93c024729cbbbb5aa83\",\n-    \"dist/2021-10-22/rust-std-beta-aarch64-unknown-none.tar.xz\": \"5a396cc0499690193879d10da333f5a3acc6586f1c216f751a1e62bf1a8b6618\",\n-    \"dist/2021-10-22/rust-std-beta-arm-linux-androideabi.tar.gz\": \"f9baf9d74b094cabdab59c1eaaf5238caa175e7865c3497c34eba68be5b2d756\",\n-    \"dist/2021-10-22/rust-std-beta-arm-linux-androideabi.tar.xz\": \"0c5f14f311e29233057ea466123ef9c33e3fffdc798358f0f339ce3869ffe9e4\",\n-    \"dist/2021-10-22/rust-std-beta-arm-unknown-linux-gnueabi.tar.gz\": \"e3c2ffd3d69ba9035048fad22103989ec97b892de955a94015e16578e42481e9\",\n-    \"dist/2021-10-22/rust-std-beta-arm-unknown-linux-gnueabi.tar.xz\": \"3e716d6aab270f764233f50a25a33d37a6d34c2dea23b3cd1aa5733c72c13958\",\n-    \"dist/2021-10-22/rust-std-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"65b74540b47fcf7fc8a88cbc5cfe54ad67c1060722c37af7e31bebe2b3c204ed\",\n-    \"dist/2021-10-22/rust-std-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"4bf4f75f7c4ed171ef7705764f71eb899763205a9a4727343b96cb209691a97c\",\n-    \"dist/2021-10-22/rust-std-beta-arm-unknown-linux-musleabi.tar.gz\": \"be073a69a1e9de0f87511a5a8b3454b3a2d24319571c25f347f7213c872a54bf\",\n-    \"dist/2021-10-22/rust-std-beta-arm-unknown-linux-musleabi.tar.xz\": \"57be5edb2c00745235dc486b4e6e6f0e6b40edf16481405abe3ac360190040e1\",\n-    \"dist/2021-10-22/rust-std-beta-arm-unknown-linux-musleabihf.tar.gz\": \"53c39c89d7b19e45e1a4f32b07eac8214a7d5d277a83e4a88d7ab8820bf2de86\",\n-    \"dist/2021-10-22/rust-std-beta-arm-unknown-linux-musleabihf.tar.xz\": \"b9f058907117e3f1921fb5ee73e04c6114154870067dc8791382f3099aeb5c0a\",\n-    \"dist/2021-10-22/rust-std-beta-armebv7r-none-eabi.tar.gz\": \"bc3d93dd7381749a7d24eb904c7fa74aa6e2a575ad1af5ef7e34ffa07e91105e\",\n-    \"dist/2021-10-22/rust-std-beta-armebv7r-none-eabi.tar.xz\": \"b605ced5cb597a2973417f4de55fb39cfe12b1209c4249ced9232091395d8e91\",\n-    \"dist/2021-10-22/rust-std-beta-armebv7r-none-eabihf.tar.gz\": \"315432af4541ceabb14891da9ab6af6717bba88f1caaf216053f75405ff8997f\",\n-    \"dist/2021-10-22/rust-std-beta-armebv7r-none-eabihf.tar.xz\": \"aa643ea7978ea7911e50ab65ba0af7bf018a4bf9ded1da8e161ee7ab13decbfa\",\n-    \"dist/2021-10-22/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.gz\": \"3f780d36c780b1379fde18fbcd6a1f75efa766b56a4aa6933c9bb88dcd4f4ba8\",\n-    \"dist/2021-10-22/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.xz\": \"d0c87b4127f10c85368254377013053747c10d2d7dafae2f5643a3526f938f48\",\n-    \"dist/2021-10-22/rust-std-beta-armv5te-unknown-linux-musleabi.tar.gz\": \"fb4a610676f9102dd206a1762be6bf7838b3eb0fa08629df8199573246bfc38e\",\n-    \"dist/2021-10-22/rust-std-beta-armv5te-unknown-linux-musleabi.tar.xz\": \"192d9bf1354737dc576bfdcc310c936e065039f39303370008dd0fe3d3e8ec65\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-linux-androideabi.tar.gz\": \"5dd746bb8db14ca9f968a651f3ae7e3c3c5a505800c0c3da8f6469809a81230a\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-linux-androideabi.tar.xz\": \"2cd651fad1f2820a2bb9b828faf292d3029ce633d24283d9a5363a726a024044\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-unknown-linux-gnueabi.tar.gz\": \"06f337db74903b607d09151f8a5178ce48e8b5905af407ae9b37445fe78aeed0\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-unknown-linux-gnueabi.tar.xz\": \"8851247487823bbee990937a1f83578d910985ed4055fe3bf339871a7aa28bce\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"5696a2c0fc2c3141d43f2d97d8e4959310032756cbdf0140dde28a5843b431e8\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"d8f9a3669d550f1c6f338d99ea74f4e48771620d4125bbd408cc750a70ee4686\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-unknown-linux-musleabi.tar.gz\": \"326e4ac48ef1e1a60c434699b5fb09b9d0581e020bb745196011f2f61af41a13\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-unknown-linux-musleabi.tar.xz\": \"cbd10db975412fe275d12b81cdfd5e97c0b464194639dcc439cd72a65790d601\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-unknown-linux-musleabihf.tar.gz\": \"977c9e94e25fa9a1db5f93ec800d529d80d874ceb2ed3a10bff63639fd24da59\",\n-    \"dist/2021-10-22/rust-std-beta-armv7-unknown-linux-musleabihf.tar.xz\": \"0729470e2138e90d9140e30779d7397e58ebfc1ec243e55caf90ab12ef904da4\",\n-    \"dist/2021-10-22/rust-std-beta-armv7a-none-eabi.tar.gz\": \"3115e3b7f0981dba799902b212f350608042a2beff3bc3b32e930e9c9c3cca17\",\n-    \"dist/2021-10-22/rust-std-beta-armv7a-none-eabi.tar.xz\": \"75b3d8eba51877916129d8dec07bc86ec6e88076af79cc221e8543695e64da63\",\n-    \"dist/2021-10-22/rust-std-beta-armv7r-none-eabi.tar.gz\": \"9787d23a7078c94b4ac33d34cdfb68da586d777f020a6284bb1540b54069f476\",\n-    \"dist/2021-10-22/rust-std-beta-armv7r-none-eabi.tar.xz\": \"c8f9b933b2e9c955e6bbcb141082f6b5833f89f34de16e14f54e8d4aac02c473\",\n-    \"dist/2021-10-22/rust-std-beta-armv7r-none-eabihf.tar.gz\": \"ce9ea3ade0886bf7ea40a1066981d172d915aff4c54ca325d72ed823c7e17787\",\n-    \"dist/2021-10-22/rust-std-beta-armv7r-none-eabihf.tar.xz\": \"2d2442ed2ac017777d3fab1a3f69a578a9db1139fa1aa63dc87113071f08a6f8\",\n-    \"dist/2021-10-22/rust-std-beta-asmjs-unknown-emscripten.tar.gz\": \"98258ea791d398c6a29e1ebe28557aceb59ac228a0bb1332bdbd9f702c61a4bd\",\n-    \"dist/2021-10-22/rust-std-beta-asmjs-unknown-emscripten.tar.xz\": \"a4172c8c2b719d0391654968377fdba932343e444bc78482f19f731ca45806ca\",\n-    \"dist/2021-10-22/rust-std-beta-i586-pc-windows-msvc.tar.gz\": \"2221360e32bdbbdbf073a4bc1fbbb98b86bd0a1df526cb8dd05dd521ea402c7a\",\n-    \"dist/2021-10-22/rust-std-beta-i586-pc-windows-msvc.tar.xz\": \"03c53e31762e5ccc58d1296a8fcee123592dc6d3b88d0c81ed1f8305545faca1\",\n-    \"dist/2021-10-22/rust-std-beta-i586-unknown-linux-gnu.tar.gz\": \"612eb9bc2a06779ec05f6033f44b18f283d6cc8dccac0d5c81a6d09f515fc077\",\n-    \"dist/2021-10-22/rust-std-beta-i586-unknown-linux-gnu.tar.xz\": \"70ad4e52227ae069a9e99cf53e07470267abf1f2ae0398192ac854cfd31d50d9\",\n-    \"dist/2021-10-22/rust-std-beta-i586-unknown-linux-musl.tar.gz\": \"8a5dd3dd62cb31c77aec2e00847812ba53e951fb284c74671cf3875b18a015eb\",\n-    \"dist/2021-10-22/rust-std-beta-i586-unknown-linux-musl.tar.xz\": \"10650efcfda713c2a3053a9c505847dd021bed19b1e3af12d58742deb76cb421\",\n-    \"dist/2021-10-22/rust-std-beta-i686-linux-android.tar.gz\": \"6fb4f4ac2b448bebade72ba2080bdcf579b6a40041b311301452ee41ea267ea1\",\n-    \"dist/2021-10-22/rust-std-beta-i686-linux-android.tar.xz\": \"6e0e8feb477ad35bab1ef599f51f64b4720dc37194dd6354a7a4bfdbacbf2c82\",\n-    \"dist/2021-10-22/rust-std-beta-i686-pc-windows-gnu.tar.gz\": \"0b0c0e86be0fb63dd56b419f0b8d05eb59841649120e16a8216bbe490a76db1c\",\n-    \"dist/2021-10-22/rust-std-beta-i686-pc-windows-gnu.tar.xz\": \"c54a116404d31591d6a6a1a332e4bb8ee177ea7a0367b11eef6a8cae6c1c0325\",\n-    \"dist/2021-10-22/rust-std-beta-i686-pc-windows-msvc.tar.gz\": \"14313eb7b20a3a3739a28406b1544cfe421c593a3198b081956a1a54387cd0b8\",\n-    \"dist/2021-10-22/rust-std-beta-i686-pc-windows-msvc.tar.xz\": \"54fb4abc77fb6c97929641095ef86e559a4cb116cdac7dc4bf34a81aafa03681\",\n-    \"dist/2021-10-22/rust-std-beta-i686-unknown-freebsd.tar.gz\": \"9a2a5b2d3d5cd98cb3f9a43fc34d3dd0dcdf9bd104798380f70373440edaefa4\",\n-    \"dist/2021-10-22/rust-std-beta-i686-unknown-freebsd.tar.xz\": \"d0165b16890da11196a1e4cd6b48d545f44ddb996ba9515a919ecad85cddaceb\",\n-    \"dist/2021-10-22/rust-std-beta-i686-unknown-linux-gnu.tar.gz\": \"a42e125c252eed17664a50713d5e2f0c43f0f9ffe54e471500db75352d1e2147\",\n-    \"dist/2021-10-22/rust-std-beta-i686-unknown-linux-gnu.tar.xz\": \"705185a2b4b98f6ac16a9106af60f30618c24d6d93ffb0283a41cd31f992750e\",\n-    \"dist/2021-10-22/rust-std-beta-i686-unknown-linux-musl.tar.gz\": \"1a01712d4b8b470548c22a24e7e9524c0ddacfcf15459b490531e68e62b8a400\",\n-    \"dist/2021-10-22/rust-std-beta-i686-unknown-linux-musl.tar.xz\": \"a86f8080ea25267f7e127f23bb75538cc3032091061b1fc3ce95c917d2a1cc92\",\n-    \"dist/2021-10-22/rust-std-beta-mips-unknown-linux-gnu.tar.gz\": \"d6d06becfaa6a4b0cb7131fbadd6cc6ff58edfa11fc6d98e69d2cf5388e8bdef\",\n-    \"dist/2021-10-22/rust-std-beta-mips-unknown-linux-gnu.tar.xz\": \"65bafaa34e506e8bab15d2442742fc075dab2ea8687c69f6090acf0204b6fb06\",\n-    \"dist/2021-10-22/rust-std-beta-mips-unknown-linux-musl.tar.gz\": \"53a48c17c4ed3740049d0c88b14d2a1189e7ef5fa08a926c8ca26ec5b2b298b8\",\n-    \"dist/2021-10-22/rust-std-beta-mips-unknown-linux-musl.tar.xz\": \"14525b83b69fc54d4c808ffb69e06f015850ea9186837c670dcc23b5bc66d4bd\",\n-    \"dist/2021-10-22/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"1b8f11cb2ab076f00cd601c1465ff3a2e3857cdec255c8ecc1697efa713f5626\",\n-    \"dist/2021-10-22/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"31e824a6243a6e15ea96a2984c69711e312eefa5214ba349ef6d6a4c42fffffa\",\n-    \"dist/2021-10-22/rust-std-beta-mips64-unknown-linux-muslabi64.tar.gz\": \"89178cf43cfbffea696390c317230d39108e529803e28ca60d37b6167e589dbd\",\n-    \"dist/2021-10-22/rust-std-beta-mips64-unknown-linux-muslabi64.tar.xz\": \"8b9fc0f9a2297d15abc86db95ac8768e872ec1acd21461e599a1aacb80f4b182\",\n-    \"dist/2021-10-22/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"13ec0039303d3df358ccfa4fc19924df0ce17b31e8f57b13e7367db68bb9dfe8\",\n-    \"dist/2021-10-22/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"1266340a228c8cd657d0ee7ef257d80a33b193c4ecb742cdb82d469772311499\",\n-    \"dist/2021-10-22/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.gz\": \"b100adc79e776116a267bc918ded30c4c8d27d83ed21f65f9428ed8831d101b6\",\n-    \"dist/2021-10-22/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.xz\": \"6966af76ccf83f37657efc4aff88887de81642dddc3f2ef59dcaa91219d4f674\",\n-    \"dist/2021-10-22/rust-std-beta-mipsel-unknown-linux-gnu.tar.gz\": \"0b7a859f952741a740458609cd207d5f7291c054fc6d9a0191d3acf0f216bd17\",\n-    \"dist/2021-10-22/rust-std-beta-mipsel-unknown-linux-gnu.tar.xz\": \"2e6e61f68fc3772a6c3b3f0b3be6d99bca1a57b5f568e87397765cf6fe867dd1\",\n-    \"dist/2021-10-22/rust-std-beta-mipsel-unknown-linux-musl.tar.gz\": \"881946b261399e50992beb3cc613ca2141736a7480103fa1fb117c1e7df2b1db\",\n-    \"dist/2021-10-22/rust-std-beta-mipsel-unknown-linux-musl.tar.xz\": \"223a78a4c5055ca00a7d5b40491aef9498a204759cb388e734408e305999713b\",\n-    \"dist/2021-10-22/rust-std-beta-nvptx64-nvidia-cuda.tar.gz\": \"76d81922eb6f61d33c10f2754ccc9b1394ae09feee5818b23b62f768f0e6a370\",\n-    \"dist/2021-10-22/rust-std-beta-nvptx64-nvidia-cuda.tar.xz\": \"be57410669ba5a516dc935fd1eaa73b2d0d3d237a2eb184a8dadce919bf1975f\",\n-    \"dist/2021-10-22/rust-std-beta-powerpc-unknown-linux-gnu.tar.gz\": \"cebf48de57e57285c91092abc01ab1fd9bc7eb660eaad3db2ce71877bd6b9352\",\n-    \"dist/2021-10-22/rust-std-beta-powerpc-unknown-linux-gnu.tar.xz\": \"30a8fc47441c4f7b34f540f5132b3d7ff9756e8906ac6e2b9df5ea8fb622ad65\",\n-    \"dist/2021-10-22/rust-std-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"7deb058683792cd3fcab92b950f653a4ba0d2a2997bef508c6d1d04be319f057\",\n-    \"dist/2021-10-22/rust-std-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"c5d26bbe5b6c64ce9cae78465d22faa98ef956dc4d8bacc91a127a7f439f7b11\",\n-    \"dist/2021-10-22/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"bf06959a991270e9e15d538e70d078a5241b6e87d62a55a655e4c2f9e8ea2964\",\n-    \"dist/2021-10-22/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"d85b330532cb6743071ffa117fbe8bc26b9c6167a0ff76c0ba32fb17c0247c70\",\n-    \"dist/2021-10-22/rust-std-beta-riscv32i-unknown-none-elf.tar.gz\": \"7dda5e010ddb4afd6e6efeb9f43ef17cb30af7ed9f172b59e6c737b2f9d66ef8\",\n-    \"dist/2021-10-22/rust-std-beta-riscv32i-unknown-none-elf.tar.xz\": \"35d8feb28897bead99c17d952b711888f2f6f613fef767f28e3593fb4aa2dc36\",\n-    \"dist/2021-10-22/rust-std-beta-riscv32imac-unknown-none-elf.tar.gz\": \"2e7067692c10447d50df8e9871f95b4ea925a88c5792f973b3c51325afaa8457\",\n-    \"dist/2021-10-22/rust-std-beta-riscv32imac-unknown-none-elf.tar.xz\": \"4b2d3bc61727c87f7c2ba129e9147621c3e3efd542feba3acb6596ea91d10d71\",\n-    \"dist/2021-10-22/rust-std-beta-riscv32imc-unknown-none-elf.tar.gz\": \"093aa10e425beef7d66e9986b045543b3dc04c296fa3b3fdd9071fd6d61b269b\",\n-    \"dist/2021-10-22/rust-std-beta-riscv32imc-unknown-none-elf.tar.xz\": \"8f3512c368b7c44c7d8ec9e1dbdbaed344859ebe2d0dcee22118397d41b841b3\",\n-    \"dist/2021-10-22/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"adab0b58b93d37949eb35d4a6f3ba9e6b43630e4a82f1d9047116f1462cd1809\",\n-    \"dist/2021-10-22/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"6a0410d1194ec0c471e384c5d02aba555efbd47b36a3544c56674fc2080c51e7\",\n-    \"dist/2021-10-22/rust-std-beta-riscv64gc-unknown-none-elf.tar.gz\": \"19c8be8430ab59b92006e0bccf186687569ca172b54f934ff4763da20cebdb58\",\n-    \"dist/2021-10-22/rust-std-beta-riscv64gc-unknown-none-elf.tar.xz\": \"6cb9647a504683fa5c67e5ab2e737bf1d6004dd4a7ffbaf593dea0f9844ced6f\",\n-    \"dist/2021-10-22/rust-std-beta-riscv64imac-unknown-none-elf.tar.gz\": \"cc2d94e753035ff0b49490173b042d21f1ea58711f7c6ce5cfdfd79a76e539b1\",\n-    \"dist/2021-10-22/rust-std-beta-riscv64imac-unknown-none-elf.tar.xz\": \"de398391e577f2fa09f369fbea4114c6cc0f1412884c6f52c97d71c74920462b\",\n-    \"dist/2021-10-22/rust-std-beta-s390x-unknown-linux-gnu.tar.gz\": \"feefd67b9c9dceee7ef7947753ebd990a914d7a54562b718e6704d35a1f5c75f\",\n-    \"dist/2021-10-22/rust-std-beta-s390x-unknown-linux-gnu.tar.xz\": \"1b550a911a51514f8d69b9b763cc3379cd674615090652a253eeb7b585d2d97d\",\n-    \"dist/2021-10-22/rust-std-beta-sparc64-unknown-linux-gnu.tar.gz\": \"4d7d78589d6d72e5ce60d6997394c4d7ff03fd2bae471ef3334f1d5bff9f18d7\",\n-    \"dist/2021-10-22/rust-std-beta-sparc64-unknown-linux-gnu.tar.xz\": \"ec499330b2f63047eb43bf98b1e66d301d7ea7015447c83307ab528421387502\",\n-    \"dist/2021-10-22/rust-std-beta-sparcv9-sun-solaris.tar.gz\": \"7e48f11954d44dade640c86cc87d5841ebd708643cd5220ae7d07127f71ff333\",\n-    \"dist/2021-10-22/rust-std-beta-sparcv9-sun-solaris.tar.xz\": \"5038770dbb2dda71d32c4270653fd3ece96062b24ad55dc8def6475e464210df\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv6m-none-eabi.tar.gz\": \"b8b9a59bf1a9127b26aff54dde3a1da9992a99fd3d601be7cc1daa6ce3c7b6e4\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv6m-none-eabi.tar.xz\": \"e0a96a8b105466a3279da3d9bf589724def7326448bc6f51ae6f8e8aee2ac880\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7em-none-eabi.tar.gz\": \"cc3a8d935ae2101cff8af86fb066c09672f9fd0297cd9d6b960c9f4877618e98\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7em-none-eabi.tar.xz\": \"9bafbfbcb01e23f58b1adc7fab26e8ebd135c5c20589887278065f75cb5b5350\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7em-none-eabihf.tar.gz\": \"8dd7c2cbc2c24e5220ff6a7f5caffcca6605f3d76ff66f766af00ba4bb316067\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7em-none-eabihf.tar.xz\": \"963a698d49c8742ec5c7520fdefa1668db573eb01bd7774f80133496122b0517\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7m-none-eabi.tar.gz\": \"3a01a35a10f0efe48cef64d45e80fccab31df8287f500bf280b5d9bd5784ea3a\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7m-none-eabi.tar.xz\": \"84a5b9d9cc21a13cf1e2e1c29e7af63c75690cbb2293c63fe95e075ebf59815d\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7neon-linux-androideabi.tar.gz\": \"946e96f404b8a9f4c8139e90172ea26f3a6c509effc6e1ff16a49dc9ff6cc1e4\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7neon-linux-androideabi.tar.xz\": \"787cd874aeb33e4a4fed2726a571d39f6687da20625aa9a485a95d7167b321b5\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.gz\": \"70fd17c069fe4b6a318d887794c54a142275cc65f088a7bcbda5bbbd7c9d6aa7\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.xz\": \"15ce829bd9ea0a1ee918e7887392ce1e74e00b23509b802f5f45550176d78768\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv8m.base-none-eabi.tar.gz\": \"2edc66ee89c319ef7c9520c5203185a5b5203ca4ea9996e0142075273ccf84b6\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv8m.base-none-eabi.tar.xz\": \"3c129a2557639fad501c7f1474f45535a55c33813a889f08521f4a7d527010ab\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv8m.main-none-eabi.tar.gz\": \"354e644c51ad5863bb0eea09e0c5d1aa32858e7025c039d693e2e433e1c18c04\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv8m.main-none-eabi.tar.xz\": \"6996a329a81624537d45b2401b8dba81911e5c61d2fff6bcd63c5fb15b2fbec3\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv8m.main-none-eabihf.tar.gz\": \"97d6aa47e209650860e97d442f7ec5c5da385399aa5f06bca4c7f9a08767026d\",\n-    \"dist/2021-10-22/rust-std-beta-thumbv8m.main-none-eabihf.tar.xz\": \"dac5cadd67e5d162e00861ec5d2c96166fe1a80954237068aed6072afe0f728e\",\n-    \"dist/2021-10-22/rust-std-beta-wasm32-unknown-emscripten.tar.gz\": \"e0161120cb6cefb23514c839eb2be13a54139d4f408563bd9dc1d6b9d665496a\",\n-    \"dist/2021-10-22/rust-std-beta-wasm32-unknown-emscripten.tar.xz\": \"94bcd63f3712cb3b09948ed62c8db889e2bc78b97d868c89386f912d0daa1b4d\",\n-    \"dist/2021-10-22/rust-std-beta-wasm32-unknown-unknown.tar.gz\": \"00a37ebbf36bd66ab6e0b957e93c7a2e5c2d8567583c65873abc1c79b37bbabf\",\n-    \"dist/2021-10-22/rust-std-beta-wasm32-unknown-unknown.tar.xz\": \"75589caa1835ee12362a2ad581828c9faf0d527f48d5a07c1d7f0b810e035def\",\n-    \"dist/2021-10-22/rust-std-beta-wasm32-wasi.tar.gz\": \"2276b9ef2ff2faa665f15d3572abe0d13a5bb9ec0ad08a6a0c00d9e143464993\",\n-    \"dist/2021-10-22/rust-std-beta-wasm32-wasi.tar.xz\": \"fa132a08849d7c583dbf37db97f3702c263b17de595823d87fa14e56ff21ef3c\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-apple-darwin.tar.gz\": \"47454a419e6a87b057047c002932cd2f0f52a77ed4c3b4e4d9b65cc4f4ddaaf4\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-apple-darwin.tar.xz\": \"f9040fa310d122651461d026f43873aa18d5f2c63a9f3bdd47f9a034e4153348\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-apple-ios.tar.gz\": \"e143c4c8d394810c7734824476dbbfb2a73b3b62cb8a708f796e0c0332deede9\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-apple-ios.tar.xz\": \"53c660ef68e1898574f62725c2f50fc2f26539143c0be0675327a33511142f8f\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.gz\": \"e419db2f8f12467335c8571902f1ed163a5407394914f55416fe948525140ec5\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.xz\": \"efd2b6df7dd439b0ae0312831afd4517cf19adf619916eeda1f571daf1dae723\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-fuchsia.tar.gz\": \"e669378ed5da5948dbe232323ef3926f37ad430feb8c398259229fd18675de20\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-fuchsia.tar.xz\": \"5a26a35164ae44467d256e6fab0e8f45731e8840204635ac9b1dd1d7d8f96810\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-linux-android.tar.gz\": \"0d922ff7d7658c296246c22f4440a8975c8036f7159508e2fa964d1f2ad3aebb\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-linux-android.tar.xz\": \"d775ecb6054216f0f48dbd0acb7710fc097ef6d61df9c1f59139721ada7bef8a\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-pc-solaris.tar.gz\": \"1e830dc490e9b00b86c9d55c974feefdd87efc06c1bb90088b41737151987dce\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-pc-solaris.tar.xz\": \"cb37a89a871d61849f9aa262bee7248813a8c7a422872aa3926f20c1adf4ec63\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-pc-windows-gnu.tar.gz\": \"d83a17c374e937b9a06a364d0be980f4dc953df01efccdb3a0bf853ffd889718\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-pc-windows-gnu.tar.xz\": \"94fb51d1db6482adf683b9953fcc942923fa5c85cbb63f7b05ad19c24272a21e\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-pc-windows-msvc.tar.gz\": \"4b7cc0a0a6b07054bb1da0b75d5f687fb38653a7b31f7610f5a90a402839e481\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-pc-windows-msvc.tar.xz\": \"267f634ec4e08d0a76a75ec0f4ae037aaba44db3ac2969ed3f34d74db43bea1a\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-sun-solaris.tar.gz\": \"3648f1129895e89467a569219570061a6c50937d87bbb407e6b3b6b1f488bac3\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-sun-solaris.tar.xz\": \"3a7d686102d9f2469e180a80679db52b6c8dc8ca35adf3e50a25b7bd35f4c6a5\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-freebsd.tar.gz\": \"6cb296c0d9e07e00b8561c2f39a7dad9c9d74e224658fa9a7039e34d4b5f3aa7\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-freebsd.tar.xz\": \"9e951fec5ee4a4a655693d1c9e205413aeb3120a7b2c0bb6673f4392cdf9fa6d\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-illumos.tar.gz\": \"35b6775e13b79b946398a65d6cd4f15d26e160dbf44718cf177679964b2f3cec\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-illumos.tar.xz\": \"84d127ce90d62f1698a948ffb247cba400bd162b9864d2ca7c0240a46b23c88b\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-linux-gnu.tar.gz\": \"53a627ff89fbfd2abe9b4354e25e02d2ae8d05fcf6f6cefe99b84aec9775acd0\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-linux-gnu.tar.xz\": \"7692b0b44eea139874fb8c6cbaca46b8f156ce392454ee4891daad532a5c6baa\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-linux-gnux32.tar.gz\": \"853db076a2c469e37003fc8e52af2d0a2e31cd7f74c51147f00b04532df5721e\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-linux-gnux32.tar.xz\": \"6925429b5f25d0454abbd68ee333623ccec9d706fe0ec528fb619b2688528770\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-linux-musl.tar.gz\": \"13e920a779485d04952e4c402b42fac9b7570098e5e32394996cd985889682fc\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-linux-musl.tar.xz\": \"158062a56de043afc4acefc8eafaa536c3018cbdc7696b6d909c757050062b42\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-netbsd.tar.gz\": \"1701a13827b3ab22fe78569704d39a2f699f463b2f6f159407a39eaf4c7fd6d8\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-netbsd.tar.xz\": \"f10ff1def90cb101179f11b4b07ceeec0ae26ee15c7a85f80e4e31c61baf846c\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-redox.tar.gz\": \"20c6c718322cc341f0e1f69a9dc42f3146d10f32075d32376a241a90a2e40f48\",\n-    \"dist/2021-10-22/rust-std-beta-x86_64-unknown-redox.tar.xz\": \"d0429de3b0391f063836c765ad17e2fd1940f737b69961f501eb9d2573cba6e5\",\n-    \"dist/2021-10-22/rustc-beta-aarch64-apple-darwin.tar.gz\": \"31d16857f6fec033e6f79121040eb025c28a1d049014c6047fbf1057450f86d6\",\n-    \"dist/2021-10-22/rustc-beta-aarch64-apple-darwin.tar.xz\": \"997a9aa6db5e23f476aefd3f4799f986a51fda3e31e2b293309fb65fa92b0370\",\n-    \"dist/2021-10-22/rustc-beta-aarch64-pc-windows-msvc.tar.gz\": \"73fb943292d50a372f2df490e47235f395ff7eceac353be74fde3adcf45d363f\",\n-    \"dist/2021-10-22/rustc-beta-aarch64-pc-windows-msvc.tar.xz\": \"30a4a4cbe3fb683b8e846052a83a3185d1b8d714251bd6ad0bfc251b49a72121\",\n-    \"dist/2021-10-22/rustc-beta-aarch64-unknown-linux-gnu.tar.gz\": \"b238cffde0b9ae2305e501970cb9cff1782331f1cccbf8dff84979d1ffdf0625\",\n-    \"dist/2021-10-22/rustc-beta-aarch64-unknown-linux-gnu.tar.xz\": \"5d01b8e471419036703886fc7dcceb89ffc88fa62994727109865339fbe0c92c\",\n-    \"dist/2021-10-22/rustc-beta-aarch64-unknown-linux-musl.tar.gz\": \"8b8b48fc67a2093502baf21c372870bad42840377548e250023c9f83884322b5\",\n-    \"dist/2021-10-22/rustc-beta-aarch64-unknown-linux-musl.tar.xz\": \"a9e73e67a7120968474040dbde7b12668bd6e3a6b4f9d91b8c9a66474f68e40b\",\n-    \"dist/2021-10-22/rustc-beta-arm-unknown-linux-gnueabi.tar.gz\": \"4e83419922b4f02b1c1c62ca14db65863f4226cbaa61674ac792e860c026a948\",\n-    \"dist/2021-10-22/rustc-beta-arm-unknown-linux-gnueabi.tar.xz\": \"20d7369422ebb89f8e1064616a9842cbc98d9056910a2d0ba46f8bcf144cb794\",\n-    \"dist/2021-10-22/rustc-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"05ab3071cdb3ea4e39f53e179c754d2cf64800ca1c38ff887e45f60294d6e222\",\n-    \"dist/2021-10-22/rustc-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"e8509c60955ecf4938575a7a40091ba5d7aff77c9c3e24208623882d1bb45e6f\",\n-    \"dist/2021-10-22/rustc-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"185a3e399dcc67d8fb43a0174ef8e15c36a068b82aa33db8b42c948c2ee15689\",\n-    \"dist/2021-10-22/rustc-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"69be7881ba1b2d4348ea06fc2d31a62fe484843e660f399349c49a17852cfaa7\",\n-    \"dist/2021-10-22/rustc-beta-i686-pc-windows-gnu.tar.gz\": \"74c3a25a67b10abbefadf63bc09f6069242267a9ca8a9177e2f46e2b29869b75\",\n-    \"dist/2021-10-22/rustc-beta-i686-pc-windows-gnu.tar.xz\": \"9f0d3ce0a00b33bb591d6b615f9cc80a714f3ea0d787f410da7d643ac5e1144a\",\n-    \"dist/2021-10-22/rustc-beta-i686-pc-windows-msvc.tar.gz\": \"feac518beb813b2d553d6ee1ce03daf890c956918f0de69d5f59d4067f2f60d3\",\n-    \"dist/2021-10-22/rustc-beta-i686-pc-windows-msvc.tar.xz\": \"aad640ae5e48f489148e1edf5e815a78b19288d916615e2af8805f0023e15686\",\n-    \"dist/2021-10-22/rustc-beta-i686-unknown-linux-gnu.tar.gz\": \"c5996c458e6e1a3f3dbcb70debe562bb5d0f4a6eadd97932d8935209fbbe6809\",\n-    \"dist/2021-10-22/rustc-beta-i686-unknown-linux-gnu.tar.xz\": \"d5ed640d08bcf3770b80386282c442d79af38e4c7e73be9617d0ac72d553c507\",\n-    \"dist/2021-10-22/rustc-beta-mips-unknown-linux-gnu.tar.gz\": \"aa0dd3e77f92c1cc21f550c59761a437d3a8ddf31b23040e8849dd116e209835\",\n-    \"dist/2021-10-22/rustc-beta-mips-unknown-linux-gnu.tar.xz\": \"3c7bfcd663507730ad3d07024e1d884dee6adb49343bef0cfb8fd07b8a56c6e4\",\n-    \"dist/2021-10-22/rustc-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"0370337cce565e6e363e6de59aaa8c2e17db49d79496086c20f00d80198635c8\",\n-    \"dist/2021-10-22/rustc-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"30413f65a4fcafbbb6a5302cc65bc35edc549cded8ce6a32277ae9a499adfe59\",\n-    \"dist/2021-10-22/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"0e6ee26e237a185a26068c2c69ef095ff37f24af7984bad91196ad253dae196b\",\n-    \"dist/2021-10-22/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"f0185e074bb0c6811d244502ce93384cd7256840fbf64025e074d97e4ccb03a9\",\n-    \"dist/2021-10-22/rustc-beta-mipsel-unknown-linux-gnu.tar.gz\": \"a2c1f733c16d62300adef3ed41f9c5926f704e6b3d47e98cc615665496aa4f17\",\n-    \"dist/2021-10-22/rustc-beta-mipsel-unknown-linux-gnu.tar.xz\": \"3945ad08c0b296a700bfca778994fd93bd3cbe643517ba20a60aa1f9a88eb2cf\",\n-    \"dist/2021-10-22/rustc-beta-powerpc-unknown-linux-gnu.tar.gz\": \"e3871e21ac938b4bf3a1ed44fed2f05fa3a27d3eb000d98876f9f220a5fe9175\",\n-    \"dist/2021-10-22/rustc-beta-powerpc-unknown-linux-gnu.tar.xz\": \"bdc7cddaf0031af1b737fd0c2510ef018d68ebed914200ae8acbfd31ad38ad06\",\n-    \"dist/2021-10-22/rustc-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"9ea42f7e50864bb514293461d3622096fd7a73e8f487578ba1425a3e8d26a970\",\n-    \"dist/2021-10-22/rustc-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"c39cf38c563b16d303bc2cde8c67527e7d2a74e8c5375af73744d9a9e3dc5e1e\",\n-    \"dist/2021-10-22/rustc-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"dee289bd99b3b573493160446f923fb2f2b66926a5a69c0a7704eb2aaaac3ea8\",\n-    \"dist/2021-10-22/rustc-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"e3c89f1baa358b6a28ae567981d5efd457d2df61f2eeee19bceeac715793510b\",\n-    \"dist/2021-10-22/rustc-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"748df03717e997a01a6d222bdb6d6c0b1e206d9be55b74c14c3374a333ad8d55\",\n-    \"dist/2021-10-22/rustc-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"5cbef13c038d0fe822920eabf91c152a7130e50824fd203e3fffff4a44b10bcc\",\n-    \"dist/2021-10-22/rustc-beta-s390x-unknown-linux-gnu.tar.gz\": \"dd0ec4dba66712a10c3ee5e5ef1835210d8632766c17a4afa1ba0594b6fdd35c\",\n-    \"dist/2021-10-22/rustc-beta-s390x-unknown-linux-gnu.tar.xz\": \"30d736ad6f32019435613fec04b4474795c8915e878a528c46de453a25df1bd9\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-apple-darwin.tar.gz\": \"14c1ba057a56a0c34f129ebae29c6a9453faa03125f1fe88b564355c186d42bb\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-apple-darwin.tar.xz\": \"67d1c23c910e038c6238d286af0141f0a954799dc12a6b935d47239f4d2e8bd9\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-pc-windows-gnu.tar.gz\": \"7685e5b408bf70aa4c8af5ce7b5e5d5a6ac7125c75e7b10a9b3dc0e2dbd4cca1\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-pc-windows-gnu.tar.xz\": \"a52b846d34cfaeddb57d00d0209b1829fb129049ef61212937c0f19fff5efc91\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-pc-windows-msvc.tar.gz\": \"a5c2dce3211ec671959abb8b2f7fc34b572e3bd44362c61b98e0850c0530d1bb\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-pc-windows-msvc.tar.xz\": \"ba948c4a665c349732de9f8faddc2f7e0f7be5995ad88af44f8f4f5ffd4b9387\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-freebsd.tar.gz\": \"edf7d1c9c9288cca973a0bc3a90bf005d25df324c592b0b8d051f0de98b85f78\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-freebsd.tar.xz\": \"0c01b34ed39016866e945e0f01de830a68c54f7eef2ac83c3ab85318b01debb0\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-illumos.tar.gz\": \"6ddf6e92653ab0c00ec524e1274be3e644868cfa867933bc383e8e3e7674945f\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-illumos.tar.xz\": \"14353a439a306d0803d89a3ce3da5e5c91b9236ed84759fecf8b38ebe1d8a8b1\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-linux-gnu.tar.gz\": \"4d7feace1b414919ba2e682c748e24b31d811d7b54d710a7cf70e0b3c9c1a591\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-linux-gnu.tar.xz\": \"35593657a752a66f3052752c67c380e7ebace191a0be78c5def2cc3c1fb3a18a\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-linux-musl.tar.gz\": \"04e752df5371b5d3879c8514b7dab27bcb35a7b8c7eaec0ec6e3ec5f51ff84a2\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-linux-musl.tar.xz\": \"b0ef02ff310386b80a9b6113a6e44a437ab78b42480b4d0a86e828d97d92a3dc\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-netbsd.tar.gz\": \"387040cfbb92e6b2acc52067ab2184313de2588a6af65c0af003432bc9e69c75\",\n-    \"dist/2021-10-22/rustc-beta-x86_64-unknown-netbsd.tar.xz\": \"a617e0ee647908038bd1b3f233b99db1a82b0f32875c9093cb66387f3b2bf430\",\n-    \"dist/2021-10-23/rustfmt-nightly-aarch64-apple-darwin.tar.gz\": \"5ef7d34a33925b7af081f2e135a0fd20ebb18f711372d432a570f8983243c93b\",\n-    \"dist/2021-10-23/rustfmt-nightly-aarch64-apple-darwin.tar.xz\": \"6003e9f8fb4b2a581e359e2e4f1bad83b9055d5a0c60fa0b752ef1aa15957f28\",\n-    \"dist/2021-10-23/rustfmt-nightly-aarch64-pc-windows-msvc.tar.gz\": \"838f7773a9aaec82c4323d8412a441eb3db94da8384bc1a4a50969c5beea9aa8\",\n-    \"dist/2021-10-23/rustfmt-nightly-aarch64-pc-windows-msvc.tar.xz\": \"403a2141367854a281302f9cdcc2d1b37a2415e8aca4cd5e5308af5fa254601d\",\n-    \"dist/2021-10-23/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.gz\": \"6a3b69c8352c8262a37ba0104043a66bc579fb033166434a1b9eeaf115d8d1c2\",\n-    \"dist/2021-10-23/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.xz\": \"f272195798b40df211b1d2e817e91bba68a1083026159cab4414ecc88ddb06f3\",\n-    \"dist/2021-10-23/rustfmt-nightly-aarch64-unknown-linux-musl.tar.gz\": \"5ec04606fc7196f9a5cd130dc4c98e8df58994278ab50f7ea6baf2cdca957b07\",\n-    \"dist/2021-10-23/rustfmt-nightly-aarch64-unknown-linux-musl.tar.xz\": \"a24513ffce8f76fa3334932268aed073958f904b1988d337df7bd4277d3a139b\",\n-    \"dist/2021-10-23/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.gz\": \"8f078b404db9fabd8b0a45deb5110fab32e2ffe5f604f74ef787d9baf3f857ad\",\n-    \"dist/2021-10-23/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.xz\": \"3569e3ed42cd9b4dd6f8b2838329c7864c6d3f7a5242cbdbcd9a756e6f2ca5ea\",\n-    \"dist/2021-10-23/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.gz\": \"afa42b42631320a68d6a99902fd48b1e72d2daeb07a5be34b833f22ba6dcb67a\",\n-    \"dist/2021-10-23/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.xz\": \"839a8576012332bb2ad01d5b4ab24d46af8644e38b3019b36c0ba5a9417bfd07\",\n-    \"dist/2021-10-23/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.gz\": \"aa59c2ebf3bbff46b6c09aa1e7784ebf83dccd6df60e1295935ff3cc954fa755\",\n-    \"dist/2021-10-23/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.xz\": \"e7f479891368cebb99f41b59508a3904321d600e20cc2507954f78386a448601\",\n-    \"dist/2021-10-23/rustfmt-nightly-i686-pc-windows-gnu.tar.gz\": \"a971a861cc76d0a2a4c5fecfc4537c8e1c14f4d43013bceeed395722e8620cbd\",\n-    \"dist/2021-10-23/rustfmt-nightly-i686-pc-windows-gnu.tar.xz\": \"5879a7a9af9c6ef6397f75e4b062527fee5006d655fac5b7538915b176d9faa8\",\n-    \"dist/2021-10-23/rustfmt-nightly-i686-pc-windows-msvc.tar.gz\": \"dc66ac568c709f4b580b46d567bf2d79481566688e0ae55df1edd2a5f07fe0a9\",\n-    \"dist/2021-10-23/rustfmt-nightly-i686-pc-windows-msvc.tar.xz\": \"a2ea4554d52b1181c589eefdf67c60bc0831f2e26430bd6e5e7bb4094db5dfc5\",\n-    \"dist/2021-10-23/rustfmt-nightly-i686-unknown-linux-gnu.tar.gz\": \"8d9ef4755d32e8dc480db1b130943f47b45cc2ba69b1e9fa3dfa128d63780b70\",\n-    \"dist/2021-10-23/rustfmt-nightly-i686-unknown-linux-gnu.tar.xz\": \"3cac0853da192779f4edc5bc3c913e4b93a02ae98b883cfe2717cc58329d7469\",\n-    \"dist/2021-10-23/rustfmt-nightly-mips-unknown-linux-gnu.tar.gz\": \"14c5197f4884f418a392bccce9ac3c9a09dcd0a710a337bba5959f5570c41e98\",\n-    \"dist/2021-10-23/rustfmt-nightly-mips-unknown-linux-gnu.tar.xz\": \"f9b14921e3a6bd006479a01579e6601787082ecc0ec8e631b8cea6a4f1c0b967\",\n-    \"dist/2021-10-23/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.gz\": \"9f4efc8229a5a8561bea614a3df0da49349dc4118d72905ecd6feb6b6e1eba9f\",\n-    \"dist/2021-10-23/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.xz\": \"02d829ac6d9013f7268e505aa2b0aa99db7e25ddc3d6555ca8f9a4c5ed3f01e7\",\n-    \"dist/2021-10-23/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.gz\": \"8192413e5e376bf957a2caffe8ab15b3c235c714f8214a0f3a46711a79fe33c5\",\n-    \"dist/2021-10-23/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.xz\": \"be155309daae3cb39dbbc874b2ddaebd1ad303b09f40e130ea8429cc7c9c366f\",\n-    \"dist/2021-10-23/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.gz\": \"318c3e8235913f64c9e90b0e7c1fb50229caf59c02f0ddc702cf0728d54dc41c\",\n-    \"dist/2021-10-23/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.xz\": \"50bf71e32ae2228142ad88d67e794ab00b632147fb554ebbfcda7ec79304ae2f\",\n-    \"dist/2021-10-23/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.gz\": \"80f5b76c38d7300c5aa6a71a8b3325b28290b1bb936dd59287fa87d6dee044da\",\n-    \"dist/2021-10-23/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.xz\": \"30a71791c6ed0cf3e0fb955fa697549dcd13d2c0f3e357d9723fa729c3a03698\",\n-    \"dist/2021-10-23/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.gz\": \"7e5dc3dc89cb21638b452eb9b5c9f008803ee5845c973f2547f59db01b7a0100\",\n-    \"dist/2021-10-23/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.xz\": \"e1a949b29d249361b306af38bba7118aa1931c14061b6fa7621027e9994b519f\",\n-    \"dist/2021-10-23/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.gz\": \"ae4186e4faebc9ad8a13f06a97f96c48cbb35353ad649e25f2e80e519a9d272a\",\n-    \"dist/2021-10-23/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.xz\": \"ca4466d872bb050cabce20ae04eb915ac3e39e4788899db7bec5b51ed7d5b579\",\n-    \"dist/2021-10-23/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.gz\": \"0f39f27e2ee437df69975578c6e32b6e293bf3129f7e63bde83091330aaa496c\",\n-    \"dist/2021-10-23/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.xz\": \"55700dff4b4f3f7d9dfee3317d984afe2b44681deb7b074441b41cfd59e497ed\",\n-    \"dist/2021-10-23/rustfmt-nightly-s390x-unknown-linux-gnu.tar.gz\": \"6273db29aa2715ffe38593802c520adafcbb2300ed2595121bff628686eae675\",\n-    \"dist/2021-10-23/rustfmt-nightly-s390x-unknown-linux-gnu.tar.xz\": \"7a4ce848a1083c16bc17bd22345427ba4c920cb887e90d612a8c3d1ddcf802ed\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-apple-darwin.tar.gz\": \"12a715fca796c192514157b43b0296d688cc46e9d81416a67a0019184c1703d4\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-apple-darwin.tar.xz\": \"9a651e94a0cdddef7c7a56e356e25d0f35d0c592b6a54f2cbeeb3364fc5d457c\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-pc-windows-gnu.tar.gz\": \"2ea52a8413a43a10165322135064692faee0d03a453c4b28ddea480b153de5c8\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-pc-windows-gnu.tar.xz\": \"843b06b9b21c56fe1749e8a5bda908dcc2b6d8206faabd04d050ce83f8c32b73\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-pc-windows-msvc.tar.gz\": \"69210991cca5a07c0421254a2e18a29de28ab5019b490a576f7bb94496ca10b8\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-pc-windows-msvc.tar.xz\": \"3f5a59ba68e004c06cb07ce83d4a567b77179e11071a8b5b8ab6fe3a70bdb872\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-freebsd.tar.gz\": \"7225fde4655ed5b4479ff9f4e61237a16280541f44aa751c5a06d5916e8fde3f\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-freebsd.tar.xz\": \"e844e80d99418bea9e7cf96cd389056d17f3be60e9412983d91c64e107a28b92\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-illumos.tar.gz\": \"6c1b031bc408349c5d15bf494881dd75aa68df8e7417e6c72c061c7d3270cdf8\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-illumos.tar.xz\": \"d24b970a15dfd41cb1b0027a4a5822e8c2b0217dd1984503d60a85fc6acf7414\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.gz\": \"5b5aec4bfde07863d2d5bb71f38d3459db0659df75f53567be6fbaacec33c7b3\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\": \"851b9582bd2518a3e050127c46e59f7bb6b24d354c6e89a9b0fe4d3e09cfbbb9\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-linux-musl.tar.gz\": \"758a05277e99d00e21ff9d8abf96a6da71350664a1eb85adbb1ad4cfa1934255\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-linux-musl.tar.xz\": \"6431dabc8ef72ca252b257683fd2f5ce3c1347b18ff1d4b7ee7758c6906ba2af\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-netbsd.tar.gz\": \"51bdea94714c0892ca7020ddcc7c55bb20ac69eaf5152a38f83925d793b90eb1\",\n-    \"dist/2021-10-23/rustfmt-nightly-x86_64-unknown-netbsd.tar.xz\": \"660a23d1430164b01b3e1e8b50233be07fa0988d90e9880bb9044fe661537cde\"\n+    \"dist/2021-11-30/cargo-beta-aarch64-apple-darwin.tar.gz\": \"f7dadcadc22aab3ed9ddd737a9c2af05f42ffe48b431bbad5d43128130480279\",\n+    \"dist/2021-11-30/cargo-beta-aarch64-apple-darwin.tar.xz\": \"0ee7c052bb1fd3f3655d9ff74b3f38ebb256d3f523750dbde1be9bceb207cda9\",\n+    \"dist/2021-11-30/cargo-beta-aarch64-pc-windows-msvc.tar.gz\": \"68d914f773b122bd1ceae13a55d3c8365753d09d4371e3962401b9a48945cf20\",\n+    \"dist/2021-11-30/cargo-beta-aarch64-pc-windows-msvc.tar.xz\": \"b0204e516f0c22b956f227555be5665df96c4e0f60281592b00678b4ea8ad4e9\",\n+    \"dist/2021-11-30/cargo-beta-aarch64-unknown-linux-gnu.tar.gz\": \"77b771198aaf78c039df9c08493a9af5d1eb02e6b88bd4fc3b42269cdbf582d0\",\n+    \"dist/2021-11-30/cargo-beta-aarch64-unknown-linux-gnu.tar.xz\": \"6f6465db2c726cc3d2db73150377ed17cbe164297f8cbffc51c8194494cb0384\",\n+    \"dist/2021-11-30/cargo-beta-aarch64-unknown-linux-musl.tar.gz\": \"76a8001adffd5d7a607459f1726f3d68c95e6eb4925eac9ccb77b213c37d2385\",\n+    \"dist/2021-11-30/cargo-beta-aarch64-unknown-linux-musl.tar.xz\": \"07dac7cfe68cb6b0a1872728c1dfb3fde0f9fa27a08933494faaf58a5e35865a\",\n+    \"dist/2021-11-30/cargo-beta-arm-unknown-linux-gnueabi.tar.gz\": \"d2d6d2b56cbcc8bb5b2139818770fc155146d6b4469678de8a1e8249f15137d7\",\n+    \"dist/2021-11-30/cargo-beta-arm-unknown-linux-gnueabi.tar.xz\": \"5f97d1449b9c4461be47615ab49ec408d8f1981b7a1bc0d7b7cce606c14cd5ed\",\n+    \"dist/2021-11-30/cargo-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"097d346e828a37ae5be077f0896796ab6238194846f8ae279cd9e2f510645625\",\n+    \"dist/2021-11-30/cargo-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"71a7906aea42e1048fc43828ece3da720eea4f9d4ff59e970e273f0fe9191e12\",\n+    \"dist/2021-11-30/cargo-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"20e49a6995503dd8215dc9f56ffb87dc9f07fe85a1b0d2f409313836dc0dda3f\",\n+    \"dist/2021-11-30/cargo-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"b9388524cec65e789bb5eaf22cfd63ce837b9a98d1b769901597c6f061f1b93d\",\n+    \"dist/2021-11-30/cargo-beta-i686-pc-windows-gnu.tar.gz\": \"7b0bf29bc67904a64560402891d60506a29b7cd64007d7c1f4e168a574009a9c\",\n+    \"dist/2021-11-30/cargo-beta-i686-pc-windows-gnu.tar.xz\": \"c580c17566e36cbb91945e0fb9e592ac7578d32da948c70aabb90de80000f5c8\",\n+    \"dist/2021-11-30/cargo-beta-i686-pc-windows-msvc.tar.gz\": \"e34436449fb69b8ca696b4bcba8e18a612fee189ad8069d765813d39c708ad58\",\n+    \"dist/2021-11-30/cargo-beta-i686-pc-windows-msvc.tar.xz\": \"322836c74da2b221426782e4b5e174571d1da1935d478b4b8b948608a28a20e8\",\n+    \"dist/2021-11-30/cargo-beta-i686-unknown-linux-gnu.tar.gz\": \"ab2361cb4cbe44331e34a50728dd56a3db220e08f1b29452f781ee075b236c33\",\n+    \"dist/2021-11-30/cargo-beta-i686-unknown-linux-gnu.tar.xz\": \"6375ef38e8e6270d6d932d176a7e62014daf153e873667f6d4a5335fa15f8bf3\",\n+    \"dist/2021-11-30/cargo-beta-mips-unknown-linux-gnu.tar.gz\": \"3e80c94aef4511090e6a83f64b304b835ae2a8e769d3beec96e3f08c0faca01c\",\n+    \"dist/2021-11-30/cargo-beta-mips-unknown-linux-gnu.tar.xz\": \"af954c96c823d711b372c94a2f2bab32536a4e39bcdd0351674252837096f8b4\",\n+    \"dist/2021-11-30/cargo-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"92464fb6d0691a591637cf342842b42b940f8a84525f1e1f51493734f2ad7b1b\",\n+    \"dist/2021-11-30/cargo-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"5ddeb87b53749bc532322ee8435fd442adbfaa5e80f3b614b7153c40f46d63d1\",\n+    \"dist/2021-11-30/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"1c60eccc658664853232131fb48dc5d2c66340bb95d242084c211c59407fa667\",\n+    \"dist/2021-11-30/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"257aab89cd0d5d9af408fc346aeccb8d51e1eba5dc0db074db1f4b57a8d4aab2\",\n+    \"dist/2021-11-30/cargo-beta-mipsel-unknown-linux-gnu.tar.gz\": \"20b1fa2138a547f5f6644acfbca9e73f8d228578a600c7710cb2fc34a20eb058\",\n+    \"dist/2021-11-30/cargo-beta-mipsel-unknown-linux-gnu.tar.xz\": \"134dde13eb7dedb8fc608acae62d715937c168a9fe5a449262e9ac9b3f042396\",\n+    \"dist/2021-11-30/cargo-beta-powerpc-unknown-linux-gnu.tar.gz\": \"4ffca03462b91b9cbb02a022546aa0e16118eb1950a8f040929e5bfceee2b9f7\",\n+    \"dist/2021-11-30/cargo-beta-powerpc-unknown-linux-gnu.tar.xz\": \"14bfd567241f969de712240f78d83d21dab0bd11ac42da38a2b02da7a59a9dc9\",\n+    \"dist/2021-11-30/cargo-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"f44113175429958961148bef66d0ec1b52850c19c035ac83b0d20139e1116d97\",\n+    \"dist/2021-11-30/cargo-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"3e5f05f0f5aa2fb8b2e63eed7b29ce67831158648f64c2892b477b318a86e300\",\n+    \"dist/2021-11-30/cargo-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"76258605464ea434a2c28c2fd05f1947b2165fa10a2810958397d8352e20215d\",\n+    \"dist/2021-11-30/cargo-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"c4f2e0756f8571ed7b1bd82702d91b32cc40af58e0697c2f307feeb5755f93ae\",\n+    \"dist/2021-11-30/cargo-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"c466a280084c164ca4a120b184eab6403c80db962c0d2d1f2cb5b662746ec4da\",\n+    \"dist/2021-11-30/cargo-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"b6f97111eeab0403c67965d57f9bee2ecdf5f39eb44941070d3cd06745f235a3\",\n+    \"dist/2021-11-30/cargo-beta-s390x-unknown-linux-gnu.tar.gz\": \"2ab5f013205446852a06f27b326f6454a5b3fb958413a7e00e1d8402413155b5\",\n+    \"dist/2021-11-30/cargo-beta-s390x-unknown-linux-gnu.tar.xz\": \"49dd5e7e3b8091546ef932f359fc4260e3f0b7ec851f43dd10f471c6fe50a5cd\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-apple-darwin.tar.gz\": \"ac20e50e745914c8431a5c6993b9dbb6bf7b745e4b45283b230207e7be1bb167\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-apple-darwin.tar.xz\": \"dec91c3f6eda827d3976b96da8def71ad3cc0b71fbe1b4e5387a464a8bbd85c3\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-pc-windows-gnu.tar.gz\": \"e11e26ad4fde6109808f4cd752c2a810c8ca81b890b0c09902be981a72c43723\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-pc-windows-gnu.tar.xz\": \"fb49db7bce2376335f4fda11cc454b3d762bd7f95c5dba85596100bd0c1e148a\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-pc-windows-msvc.tar.gz\": \"7703eb725703aeffb57d6a2c0c95c44b6e4eed09b4a99b37346ea895a1d51088\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-pc-windows-msvc.tar.xz\": \"65e0f34d9b4af3b270d8d4752c94b58e54895d180fddc3f4b535406e16b8a356\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-freebsd.tar.gz\": \"4624bd8e93bc1c36bccd15b44f484059f485df1c0cd1b8bcf21c4855c85b7ea4\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-freebsd.tar.xz\": \"a277a3fccfba30db2942c8303db16e5112d72c7721fe7a777cf24a301b68ad2c\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-illumos.tar.gz\": \"37e034e5c83bab47ac5cd502d4f6385af270040fb7eb59221bc02cdbcf949d0b\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-illumos.tar.xz\": \"d26eda6fd5533defbf3983f2bb9c07c0cba00abf4c346443080059c4810ef1b6\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-linux-gnu.tar.gz\": \"909f8bc8dce0276695f1e88994bd21ba2ad4a3ff66b8172e566b7907d9f2531c\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-linux-gnu.tar.xz\": \"52807fac650c03c9d398ce6e5987ecfd5e8e30b5c4e94c320ebc2a6fd665740c\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-linux-musl.tar.gz\": \"3158dcde7e05e9871572dd7044b3c8466687d8afadbbffa4021a443f4973a4ac\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-linux-musl.tar.xz\": \"551ef92e71c001fe48804587e8532b5032d419bd139b2f59cbd8c2e308e3c2ae\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-netbsd.tar.gz\": \"9dd630b19f6c9ce26d2ed6a1f46c383d6bc3eecf1efb80f15a651ef4408197c0\",\n+    \"dist/2021-11-30/cargo-beta-x86_64-unknown-netbsd.tar.xz\": \"1f128e4e8f9e98839caf64e68fbd163de1d5323abf40f718643a815081f898ac\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-apple-darwin.tar.gz\": \"3aecc61fe4e056326182db5942cd472039f95788d165940df8b53742f70fb051\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-apple-darwin.tar.xz\": \"db3cdaf50925184df6a79914cd1c0df0c9782f96829d23428b1a0ebc814fb468\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-apple-ios-sim.tar.gz\": \"61df5ab32d3e11243bc2b8506c65af9d8a84a2bc93fc1315d046e20eb048c62e\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-apple-ios-sim.tar.xz\": \"42603c786c02ce754b4c756ac0fe4d88574231f5a8d31b6f9a1192680f8eb180\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-apple-ios.tar.gz\": \"49e5d2df9b1019e21c14a1b7f8e69515c16d810dc354ddbe2429857214b3c33e\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-apple-ios.tar.xz\": \"5323762166729cc7c3c5045b484ea2f50ec0dbdca15d8c7e82f0c29e1247f8e2\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-fuchsia.tar.gz\": \"7510b5b538c735362ec6b12beaa9d3c8720c4ea1f686c643fcc40c5dabca5435\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-fuchsia.tar.xz\": \"19b4d188923a820bc8424fed062bab64a56d33f8f00d9ba6792331f06eb0cbc0\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-linux-android.tar.gz\": \"77a5e84c97f83ea8263fd147e5f5781a61bb5bdbf1cc40a3a8a72becc8dd486d\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-linux-android.tar.xz\": \"c17f843d951d9fa72760e3a071557635da83c0dc279887648979277bcef66aff\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-pc-windows-msvc.tar.gz\": \"6e86b78826f5e3d18b2f2aa4f274a5d7bacadbde8d7cfc72cc89dbcb0455fec3\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-pc-windows-msvc.tar.xz\": \"e1b1e9eb09e851c8125319432b9fb52a6aa815b7f5bc82efbba7e375aab44764\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-unknown-linux-gnu.tar.gz\": \"a6589e628f03fc7c39345cfa23827be6cf26391848bc576a66c7701f18a01669\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-unknown-linux-gnu.tar.xz\": \"a0cb9706216575748a953b6e36b59875c6bf9b9410d4a8085974e324c0cbb7e0\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-unknown-linux-musl.tar.gz\": \"c803cfd7c803de2b210d5e9800d44f3365a0b4ae581d987b415fdfb990de1a30\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-unknown-linux-musl.tar.xz\": \"a93310d2102699602c348901186992c1305a1a20fd0a2e5d8985a4f32e61eb28\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-unknown-none-softfloat.tar.gz\": \"2ce3460b436c8c44e074ce1cb8c81bb2cd37ec8ea8fde1b766f113b39412d71c\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-unknown-none-softfloat.tar.xz\": \"5e65f8409d2a8eb366f29fe994469f257b18e70ad0707be2ca9c144a0b6f9a78\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-unknown-none.tar.gz\": \"a4b73dfbf9df497883b2f5ea3053c256838e1e706f312ee02e1b018b9a7f6099\",\n+    \"dist/2021-11-30/rust-std-beta-aarch64-unknown-none.tar.xz\": \"a70bd19ae1fa41a3413f0a0b6b2beff569c1b16829cd675967a6d1cd92d8dd54\",\n+    \"dist/2021-11-30/rust-std-beta-arm-linux-androideabi.tar.gz\": \"46eabf68836f62fe8dfb39c54ee63e9fe211ab84443ff17c46b5240e0d08e723\",\n+    \"dist/2021-11-30/rust-std-beta-arm-linux-androideabi.tar.xz\": \"9a4e53e3e867e9e18959cba32078c4f7d588247b74e156cc68345808d7b7ecc4\",\n+    \"dist/2021-11-30/rust-std-beta-arm-unknown-linux-gnueabi.tar.gz\": \"66d9e4de284d7a221f66a2c615d6ec0805dc8f1a91a184cc96701cf98116be60\",\n+    \"dist/2021-11-30/rust-std-beta-arm-unknown-linux-gnueabi.tar.xz\": \"1af2fd7a16d51e2f4bd6e1840b935e2cdc7a8f3b3b1144d22b42cea52b9bd185\",\n+    \"dist/2021-11-30/rust-std-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"cb479e676240ef682d3ad27390bc2498f80a421d321e9423cb923b972ea86675\",\n+    \"dist/2021-11-30/rust-std-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"0011ba4db5a8310199011d37818818867703bf6fbbcd7e1a7bead621eda1e5f2\",\n+    \"dist/2021-11-30/rust-std-beta-arm-unknown-linux-musleabi.tar.gz\": \"8b192e6f0263d925aac1436887f67b24fa02f31c0fc708c30827f0363f032ceb\",\n+    \"dist/2021-11-30/rust-std-beta-arm-unknown-linux-musleabi.tar.xz\": \"688755d433c1227db1125ee52e7aa643f27f922b21fbe3a5fcaf70467d159a79\",\n+    \"dist/2021-11-30/rust-std-beta-arm-unknown-linux-musleabihf.tar.gz\": \"b336cef0e11136ccf5c41669869426a376d570042d3c99eed6c448cfe165818e\",\n+    \"dist/2021-11-30/rust-std-beta-arm-unknown-linux-musleabihf.tar.xz\": \"1be7d7f0de2ae63b9dd282efc24531f1146fbc7831b84d9c0cd2c8cbdff32fe3\",\n+    \"dist/2021-11-30/rust-std-beta-armebv7r-none-eabi.tar.gz\": \"33d49bd069b9fdbae8a6868e2cce6fcea26cfd0248372d3d3c977828b3fc51cd\",\n+    \"dist/2021-11-30/rust-std-beta-armebv7r-none-eabi.tar.xz\": \"e204295b8b17388d8b4cfc04de5690b4b6a377da12df7c24f930c064da787200\",\n+    \"dist/2021-11-30/rust-std-beta-armebv7r-none-eabihf.tar.gz\": \"07584d1a4f4979ff86aa8b8be820810366c4fdbda4e5dec93c0a5883804a2103\",\n+    \"dist/2021-11-30/rust-std-beta-armebv7r-none-eabihf.tar.xz\": \"4f73d8af677409960ac480c254f25547752ffe08b80785dceb6b6f1fdc0b6646\",\n+    \"dist/2021-11-30/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.gz\": \"fb998ae84f383f1ee93fb946f396545a60d4a58f1f0107653f3dcf97e2cfb4f7\",\n+    \"dist/2021-11-30/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.xz\": \"8d8fdc9404422d0519328d6a622262833c5465b1cba62a59951a05f59d6cb15a\",\n+    \"dist/2021-11-30/rust-std-beta-armv5te-unknown-linux-musleabi.tar.gz\": \"c8abc1c472326419065caed5567bffc4bcfac2af45fafb7f1327b468f26a0112\",\n+    \"dist/2021-11-30/rust-std-beta-armv5te-unknown-linux-musleabi.tar.xz\": \"d905b6339363b2538bc39607c0fc58dae2b8023b1c3c1f745654a839ec178988\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-linux-androideabi.tar.gz\": \"69dbb3e17dcdfa9e6acc465fae4427a2596e8bfc024cc18d30201f41bcdd1be2\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-linux-androideabi.tar.xz\": \"f012832da820d59a791bf39c25e282c2b92bee75377e4fca7e9520162be62b83\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-unknown-linux-gnueabi.tar.gz\": \"bb742536d0d7b664ac7277bc5e45f40d64001da0ff1f9e088edc5240e1b35dcf\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-unknown-linux-gnueabi.tar.xz\": \"6d4c050229400ef1f2e384a4a360569309d1a0828ff07f97c73ca294ef114ca1\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"c7c354d1bd4071ef69e8d91ee5c020c9aac613ddb2565c9a3a01fa41903e3715\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"1bfe9acf4bc7f1e58f1e5a721172df69be65e049894046561bc94ed6ed67c24c\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-unknown-linux-musleabi.tar.gz\": \"96fe9952332d7aee42e61445226793af32995d0f21fde7ebfe751ef2f9acfd90\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-unknown-linux-musleabi.tar.xz\": \"2f85ea745f03f779306f78ddff9389f4417d826258a90740a76b37bd14b8fca6\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-unknown-linux-musleabihf.tar.gz\": \"434b6eaffa2a4c798b4a6f00997d65c55d9fad24d176bbc54dc045339e654432\",\n+    \"dist/2021-11-30/rust-std-beta-armv7-unknown-linux-musleabihf.tar.xz\": \"955fd83cc57de91fea9aea3f563c4cb5a2611e6dd24406845f7e8be5b7f25f3c\",\n+    \"dist/2021-11-30/rust-std-beta-armv7a-none-eabi.tar.gz\": \"45a4818cc22f80252264309263994270b2e15ec8db7ced500cef838f09260fa5\",\n+    \"dist/2021-11-30/rust-std-beta-armv7a-none-eabi.tar.xz\": \"8748379556a312b31788b5458b74d5d7fb2fa61f29e5528e449d216c21f4e9ed\",\n+    \"dist/2021-11-30/rust-std-beta-armv7r-none-eabi.tar.gz\": \"928a6b77d3e6e8030c6ee454d648c5f6eb0b79a8beda3d11fc3578cc4556ac45\",\n+    \"dist/2021-11-30/rust-std-beta-armv7r-none-eabi.tar.xz\": \"428526e30a28a9dba01943800a179b7ba144866f36dd69171a4fd1804345b75f\",\n+    \"dist/2021-11-30/rust-std-beta-armv7r-none-eabihf.tar.gz\": \"e1e43b61b7826fe4f8063d89896e7b86a13e41ed3a17ef2684d1bded5252b7b6\",\n+    \"dist/2021-11-30/rust-std-beta-armv7r-none-eabihf.tar.xz\": \"5f6478a196f1eabd6d4b58ebacf89c3635a9488f4b2f145283e9352cff5da7b8\",\n+    \"dist/2021-11-30/rust-std-beta-asmjs-unknown-emscripten.tar.gz\": \"65b23ab952ed313cc9de94eae473a28eb9b7d9ca8aa432f4d3a08c30484e30c7\",\n+    \"dist/2021-11-30/rust-std-beta-asmjs-unknown-emscripten.tar.xz\": \"949e3b832f70c3effa2b78363b42caf0720ede57722c360b710773bd7f3e1502\",\n+    \"dist/2021-11-30/rust-std-beta-i586-pc-windows-msvc.tar.gz\": \"06667714b168e2e0d6e0f3e81cc3fb68940f77aa3cd3495d91ce9ff15502ab9f\",\n+    \"dist/2021-11-30/rust-std-beta-i586-pc-windows-msvc.tar.xz\": \"9794592856633299de53e697579c75bcf6009c6f05c7bfcadf8c63dfa383b3f9\",\n+    \"dist/2021-11-30/rust-std-beta-i586-unknown-linux-gnu.tar.gz\": \"ffb8b8ec98f9732602edcf3e4e628327f8ef80712c59ebaab5392503ed04460c\",\n+    \"dist/2021-11-30/rust-std-beta-i586-unknown-linux-gnu.tar.xz\": \"7f60c2798023bdf3993b443783d3d6dd350abfa3bbdce58ada3e9b3d3c4391f0\",\n+    \"dist/2021-11-30/rust-std-beta-i586-unknown-linux-musl.tar.gz\": \"f086f349faf5f44b0fbd060f3c40b553aa5a6309a02c08e8a45d27cb3a820926\",\n+    \"dist/2021-11-30/rust-std-beta-i586-unknown-linux-musl.tar.xz\": \"05ebd51df4b17c22569d69a65d9542b5010beea023e545859a23bb244162b537\",\n+    \"dist/2021-11-30/rust-std-beta-i686-linux-android.tar.gz\": \"0f2a192b970209d10f2ffb4f88dcb6637e1ed822e47fef8e0d3daf4ca8b250d9\",\n+    \"dist/2021-11-30/rust-std-beta-i686-linux-android.tar.xz\": \"3aee7e88fbcc0290219a8d980efb1c6d8a1642a1576393fe3b5d400a68b17f8b\",\n+    \"dist/2021-11-30/rust-std-beta-i686-pc-windows-gnu.tar.gz\": \"251780731ee8c996dc1adb59148d7a0307642e11f3bf767c0caaf5f37b70b395\",\n+    \"dist/2021-11-30/rust-std-beta-i686-pc-windows-gnu.tar.xz\": \"76c8cd535a4ab4f9c0ccca19986f483de63e7c6c0708e37de653acb80621bce0\",\n+    \"dist/2021-11-30/rust-std-beta-i686-pc-windows-msvc.tar.gz\": \"ce1b7c98f381f207a26ca3fa5937f5e276eb8f91ef6ae2e0e082370e9ca1c21e\",\n+    \"dist/2021-11-30/rust-std-beta-i686-pc-windows-msvc.tar.xz\": \"106f655c10d182b6581e87cff881bf081efe9404b52885b6efed4eb0f09a3a04\",\n+    \"dist/2021-11-30/rust-std-beta-i686-unknown-freebsd.tar.gz\": \"2cac777f7178954e5c19e266d57927ddf68b74aa5a0161e35e096569d0a6946c\",\n+    \"dist/2021-11-30/rust-std-beta-i686-unknown-freebsd.tar.xz\": \"abd915c242fdd2e8f7d53291b2d84d269f9c6f4c4059c725770c3e47e50c4758\",\n+    \"dist/2021-11-30/rust-std-beta-i686-unknown-linux-gnu.tar.gz\": \"f680956e937e421c7868a22ec3ac2a6de7bc8203fae17937793914f4a9fd1657\",\n+    \"dist/2021-11-30/rust-std-beta-i686-unknown-linux-gnu.tar.xz\": \"15c71b8a2e8604a49240f5d6d0da65c40c8c207f1ebec943cb8c50cd7a51d879\",\n+    \"dist/2021-11-30/rust-std-beta-i686-unknown-linux-musl.tar.gz\": \"71c15bbabb5bcadb603513c73e40a96026fc8f6d5c82e9ea9b6569fcc22d5af2\",\n+    \"dist/2021-11-30/rust-std-beta-i686-unknown-linux-musl.tar.xz\": \"4a9af011d4a2b63a0357c6367210fbf4b6e116b5388ed3a62b758a4bad1fa77f\",\n+    \"dist/2021-11-30/rust-std-beta-mips-unknown-linux-gnu.tar.gz\": \"c44531c5467c1e01739f3796db1f59c4b6d6483f4bb8c398c751dbc30ed550ed\",\n+    \"dist/2021-11-30/rust-std-beta-mips-unknown-linux-gnu.tar.xz\": \"0ec54d445e3c24bf7aa8ecdca45f49abfc2e4013c7af682d7134a5e52e752d23\",\n+    \"dist/2021-11-30/rust-std-beta-mips-unknown-linux-musl.tar.gz\": \"3ea1a25b04112d83771e7b713ff8d33418bd18a7adcaaf6cce68f537cb27fefb\",\n+    \"dist/2021-11-30/rust-std-beta-mips-unknown-linux-musl.tar.xz\": \"c904834d0fa015d24ba0e929e900ad06bfe773bc4a439f9bbcd8862a5065171c\",\n+    \"dist/2021-11-30/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"498cda7a23e81ed7563650deb320361c8cffdc10de13ce143175e77f720600ed\",\n+    \"dist/2021-11-30/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"bb0e95d7fad089cc84e826adffc416757df4480ffdfd09547625950b13b9e934\",\n+    \"dist/2021-11-30/rust-std-beta-mips64-unknown-linux-muslabi64.tar.gz\": \"87ae1f563963370eeaa3f46d568339d5589e4fd509d21087db43ca2f1d6a1daf\",\n+    \"dist/2021-11-30/rust-std-beta-mips64-unknown-linux-muslabi64.tar.xz\": \"da6268585d69c9c71c92dadb658bc7c055b5ce4c87abc52b5451d1111c1675dd\",\n+    \"dist/2021-11-30/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"93c67427050266f49dc367a1f8e694989424664f740ae3911f78f1cc53faf35c\",\n+    \"dist/2021-11-30/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"03f9a6e921555954b33fd7f446e9093ad4b631c86d001303e4c47078d0e1d385\",\n+    \"dist/2021-11-30/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.gz\": \"6c96a53e86f71965f1922585469501504b79c3347d09409033f871b1c9cdc856\",\n+    \"dist/2021-11-30/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.xz\": \"000e43f7e40abecd402242455f8a3d60692043ddb80bd15dd6f52acd1c5af096\",\n+    \"dist/2021-11-30/rust-std-beta-mipsel-unknown-linux-gnu.tar.gz\": \"7ee55e1f5a63b52d7b87882fa4131fe848d18dba819d46e16ea2435889d84722\",\n+    \"dist/2021-11-30/rust-std-beta-mipsel-unknown-linux-gnu.tar.xz\": \"b8fc28ffd7d97e76913755bedc2f9e7cec7150e036d13fcf7e50dc5a2422d1dd\",\n+    \"dist/2021-11-30/rust-std-beta-mipsel-unknown-linux-musl.tar.gz\": \"af81aaa9bd624f57168762dfbae39853ada92043809bff953e108e97169e5732\",\n+    \"dist/2021-11-30/rust-std-beta-mipsel-unknown-linux-musl.tar.xz\": \"37357e40af421ca5b4d2b95f19eca41ce016404ffcce8abea45e08721664f0e3\",\n+    \"dist/2021-11-30/rust-std-beta-nvptx64-nvidia-cuda.tar.gz\": \"cbbd98fd3ee6bdd3c01e590c2f10367ec38d799e02ddbc1b0e31027684a356f6\",\n+    \"dist/2021-11-30/rust-std-beta-nvptx64-nvidia-cuda.tar.xz\": \"defda4e2ef2f3baf8c7d2a9159d17ca439004687f0b6714826408b94d4f0aed0\",\n+    \"dist/2021-11-30/rust-std-beta-powerpc-unknown-linux-gnu.tar.gz\": \"201c5bdc1dba11e039bea9257e17ddd2f50b29448b070fc0edb4a7a9f4e45f45\",\n+    \"dist/2021-11-30/rust-std-beta-powerpc-unknown-linux-gnu.tar.xz\": \"0319b07244f443e254e10a04e75633b293faffc5896ade44c05dde0739356f38\",\n+    \"dist/2021-11-30/rust-std-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"54e7cb5a1534ecdbd484ef304f608eb48464ae2c2330958b65b8101f81291319\",\n+    \"dist/2021-11-30/rust-std-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"aecedf5ca4d91e98ba3c4faba64699d79b3fd4877f880840d492b4872ccb924a\",\n+    \"dist/2021-11-30/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"a4cf3bde61d46484e36fd41386840250e0c031414ee422bbb3d37f7ac7489ca3\",\n+    \"dist/2021-11-30/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"d93e2a290aea3075cd61b950ded4c3756611acc6a59ba7efb9ce2e4dbac76c59\",\n+    \"dist/2021-11-30/rust-std-beta-riscv32i-unknown-none-elf.tar.gz\": \"69c9f09416b788d93f54734a953ed8dead2a31e1dacd6e67a6550529385b338f\",\n+    \"dist/2021-11-30/rust-std-beta-riscv32i-unknown-none-elf.tar.xz\": \"808a02952a31ae3a171849dc217763f5cd142622e92ae2b383014bbe37e9b551\",\n+    \"dist/2021-11-30/rust-std-beta-riscv32imac-unknown-none-elf.tar.gz\": \"67e6b61d822cfc9f95a2808917601cf3d2560d636b12a19ee29a790cc06e8235\",\n+    \"dist/2021-11-30/rust-std-beta-riscv32imac-unknown-none-elf.tar.xz\": \"7310493bc6f184b401650fb399015be29a8df009e55fa1cbfbcf9d9608fe61e2\",\n+    \"dist/2021-11-30/rust-std-beta-riscv32imc-unknown-none-elf.tar.gz\": \"fd4db925d7eb598f210ab2d96f692cbdb627acbd6a8976259411a4d2356b8728\",\n+    \"dist/2021-11-30/rust-std-beta-riscv32imc-unknown-none-elf.tar.xz\": \"b5b0394ef612188fd094e355892aafe4530758fe38dc8859ba917cb2febe028e\",\n+    \"dist/2021-11-30/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"3b7c3ad97393bc702dbd71bc819c0e5f6164cf471171c7c48cfffdf5477b35b6\",\n+    \"dist/2021-11-30/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"21e6f247a6663918c6e38782e43211224d50d4de22a9162be0c5f6d6d0a9afea\",\n+    \"dist/2021-11-30/rust-std-beta-riscv64gc-unknown-none-elf.tar.gz\": \"d0c9bd56dcac12d7174e11f2acdb16fba41ffb3aba71b6b1b4b49ce7fa115f6e\",\n+    \"dist/2021-11-30/rust-std-beta-riscv64gc-unknown-none-elf.tar.xz\": \"c89adc1cbdb7bfa27f5bfdac38b5ff084eafe081b27548dc243bbff378ec7118\",\n+    \"dist/2021-11-30/rust-std-beta-riscv64imac-unknown-none-elf.tar.gz\": \"3e6f8a86901c1350c54bd89e156af029978f4a25f578ea26f49a1f3332da2187\",\n+    \"dist/2021-11-30/rust-std-beta-riscv64imac-unknown-none-elf.tar.xz\": \"43e74dbeb89547be1b3ad1b532bef97b577530a8b19b825342efb72d91d4b0bd\",\n+    \"dist/2021-11-30/rust-std-beta-s390x-unknown-linux-gnu.tar.gz\": \"c8c7a22e63353e7c7766e254c3fc0b0277bc8265f1123a38705bf319a7d99a19\",\n+    \"dist/2021-11-30/rust-std-beta-s390x-unknown-linux-gnu.tar.xz\": \"1759ca2de0ff890918a0f634782557ae2b3181e543790878093f303ede45e215\",\n+    \"dist/2021-11-30/rust-std-beta-sparc64-unknown-linux-gnu.tar.gz\": \"a9ac36f2b4e88ce2f2789e9df46ae679879c111594cfe82b538e4067adad2b5e\",\n+    \"dist/2021-11-30/rust-std-beta-sparc64-unknown-linux-gnu.tar.xz\": \"6260f0616828d79898165bf42875881dc5253143d940ac951b7f295553afb8c9\",\n+    \"dist/2021-11-30/rust-std-beta-sparcv9-sun-solaris.tar.gz\": \"42d3e5acf2475d732ce5afe3c2ebea6d332c137d061aa256df75b7ce54c16b16\",\n+    \"dist/2021-11-30/rust-std-beta-sparcv9-sun-solaris.tar.xz\": \"7f84ff29dc36a224961e87d40cd6e531c9309bdafaec5de2b043aa89af511552\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv6m-none-eabi.tar.gz\": \"6bfdf4e59ac3f9dbde2fa46797bd9bb9cbda232c0d507f04bafd937e88945cb7\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv6m-none-eabi.tar.xz\": \"d12901a4efc8395df3c1ac137f86c3da07477277fad138edb49d5c4382a3a114\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7em-none-eabi.tar.gz\": \"38718b50fa2acacc0fac98931a5714df38feb8370fccf8d7a955de3b2c117dd0\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7em-none-eabi.tar.xz\": \"9753c00de1117a5fb9bff4ce2a4434ac6d3d06a1b4b3d0cc44ddb590739b9a0b\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7em-none-eabihf.tar.gz\": \"c1eb35c914ad1a762cf550d54b7ec80cb3a8ab6ab39f5c89709f88e04eeba46f\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7em-none-eabihf.tar.xz\": \"3c092ac130633f327a0afc8bdf8ba252f05d9b0050383122d7ba31cc3f5ddfc5\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7m-none-eabi.tar.gz\": \"fb391d1199eab0854228323d08dd8b27709175697532e4b47e9dab6f26f24a8f\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7m-none-eabi.tar.xz\": \"82347d3a0a123c430a526486dbd8c424732181eede038e2f91f1504d510a755b\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7neon-linux-androideabi.tar.gz\": \"0cb559fff7f8dc35e5279217ef6fe7c2b5fa3d68f5ca82f258b6885f42e8d144\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7neon-linux-androideabi.tar.xz\": \"ee1fe1dc9fe620743022939cdeac3ab34135e61897f0707c3b1a0a1b7d730360\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.gz\": \"bb8de6fe10aa624fdd63484403e228a5c592b94d4aac95e2b2401cd8b9472f0a\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.xz\": \"1bb7f7ac88e250534d89f0b0dc74f13ca563bad53956be74418d2aef28d250a5\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv8m.base-none-eabi.tar.gz\": \"0aea9f5cddb136591d105ebd3607a2e1f402f1c707cf33f21fb5cf1d30101ee0\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv8m.base-none-eabi.tar.xz\": \"f547622b8f052c6290c530d506d8ee314f90c81ace562a0a533b6ad2ba00b987\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv8m.main-none-eabi.tar.gz\": \"80f8f7c613c7ff2097f5c346b3ac4a5cf750167277f28655e0263b05a231668d\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv8m.main-none-eabi.tar.xz\": \"a57b4489a1d46ad3fc303a3b2dd478df66407a3e2dfeb9c12860a543ae5210eb\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv8m.main-none-eabihf.tar.gz\": \"6c4264b2bcecc951c39626fc1cf8de36f1eadbda31a552e14274f728978e16a5\",\n+    \"dist/2021-11-30/rust-std-beta-thumbv8m.main-none-eabihf.tar.xz\": \"ec72f8e861eed6b5e2518b46cd8008d3bd2b6f2a7a42784a2dc8a6184d3ecc62\",\n+    \"dist/2021-11-30/rust-std-beta-wasm32-unknown-emscripten.tar.gz\": \"0fc209babd43546d04b3fdd27ce77c96d75aa5eb6595f00586a19a17e4530b59\",\n+    \"dist/2021-11-30/rust-std-beta-wasm32-unknown-emscripten.tar.xz\": \"ecdb8152992b4a9779aeda2b4cc638163ac24faf45c484f27316a6b3ff0eb297\",\n+    \"dist/2021-11-30/rust-std-beta-wasm32-unknown-unknown.tar.gz\": \"52bbea99f2405f35f58d5448c353c605c2a87e7546e95b86d8baa39b4fc7a9a2\",\n+    \"dist/2021-11-30/rust-std-beta-wasm32-unknown-unknown.tar.xz\": \"47ea301d79eada8898907af226b39b4c73ac1fe974963139aee78c3567ee53e4\",\n+    \"dist/2021-11-30/rust-std-beta-wasm32-wasi.tar.gz\": \"dc9ccfa3e46e4f3b0e11de8a83885695ab154a2211fa89a20670db116d63a4c2\",\n+    \"dist/2021-11-30/rust-std-beta-wasm32-wasi.tar.xz\": \"52d890b402c7e7bb7c0f9b34f2e216f0937453ab42e7c4ce205739bd64ba7dc7\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-apple-darwin.tar.gz\": \"0ccbff8a582047cd6d2a6b30387ea73cfce7e0c61eddf516126836b9f9ca86ff\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-apple-darwin.tar.xz\": \"cab55f71575d58aa7213a7dc4cfb0704ca7faec7203c545aeaff178eebe40436\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-apple-ios.tar.gz\": \"6863523669b65464bd52e1a47f6decf868cc93d2111ffc222bb4a032a0095e3f\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-apple-ios.tar.xz\": \"d5c6e65a656621891f387861c8259116dd9a8ab14e13ea10e93b78834e1d334a\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.gz\": \"ec7130bfff74b7226fb5d0f311dd399f7628cb59ce06b4bc9a9f394067855eda\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.xz\": \"0f52f00f03126aed0260cbfdd9790a62f9f4ceb24e2a3a6d80e8a15a1b4a09c2\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-fuchsia.tar.gz\": \"1a3f4c6c1528050820b85e07aa96af6588c7d61935108cb5110d1e0c964142e8\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-fuchsia.tar.xz\": \"fe9488c3476e931440ad487a4cf265fdd3c01e18c9e43b33f51b9eb078821282\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-linux-android.tar.gz\": \"c7205b1cdcdff00d91a3991b1f40674b075c34dc0877de4786da5ab85e3b6cfa\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-linux-android.tar.xz\": \"87a3cfe8992ad615d5522d97ace91dcc86057d060d82b581df206f2802225a0e\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-pc-solaris.tar.gz\": \"cd9eeb26fe909e38d8d8129829d19b4d04d96014496cc7f2f4ae077b94f2aae3\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-pc-solaris.tar.xz\": \"b6e59180ff89f7e460fcbc246802e6441c71600774ae5cb2d9af464365a642cb\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-pc-windows-gnu.tar.gz\": \"45e07be14211ec7c9f3c1ad0eb9f7a9b422b10c842d5d0e8b0b498751ab7ae0f\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-pc-windows-gnu.tar.xz\": \"593f70209f3b5b4e126d57ece0b1adefb4bc1055cfd168779d854369985b2b2e\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-pc-windows-msvc.tar.gz\": \"6e14f3431da08f63d82e5b1e2c56fdf13f93ea7b6660dc64b1c855d00c008257\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-pc-windows-msvc.tar.xz\": \"6e6355686d22213d27f5dbec0b7ded38532e79ac904bae978a8eb5fc880916cf\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-sun-solaris.tar.gz\": \"39bdaa250d8f17914602a2185c51014f7fbfb1e30991816a432c3897338b52a1\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-sun-solaris.tar.xz\": \"ebab0e4b13e0b3bdbe0ac858d5a4ca28bb813854aea1d8ec86d8e220c68b3442\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-freebsd.tar.gz\": \"a700f1736b96c4e7237305dc98a79163b07127f0aac1f436415c233b8495a5af\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-freebsd.tar.xz\": \"e94ecf7d1c9a5144577fdb14b7232b11dff0ebbfa8aae8cb4884d4ed9c5bae77\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-illumos.tar.gz\": \"209dc9917790c2be8777c597e19a9f43301aaaaac3c9731e9d0512e6918334b9\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-illumos.tar.xz\": \"6e4810c7484c231f0edb15ae5acea822ed5d868eaf041438afea4b6ba38be35e\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-linux-gnu.tar.gz\": \"df952ee1385da9457c4e95dc08ab59ca915f5f211738982f8db3684cf80967fc\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-linux-gnu.tar.xz\": \"62d7383ee21b0a7d072b15a9877a922f8dbcea42d910c2cb3c4129152b26ea9a\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-linux-gnux32.tar.gz\": \"be28225516fa38edd34e1af5f051d7c8ab5f433cc5814df199bc451285d95e0c\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-linux-gnux32.tar.xz\": \"1a6fdfac24feb34744daced6c6545c844ff13d5e5f14620520d5ed4b85be8742\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-linux-musl.tar.gz\": \"c0f098faa0c9de6a8e82b80dfe44bfa9d4482e118259c33452ef025885ceab6e\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-linux-musl.tar.xz\": \"1d1ed7cf8fc16efab3faab9ef5abadac9ab98d3b60522fde0612ac0b256de528\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-netbsd.tar.gz\": \"1ed41e8019480cd151a9ddd0f080afc56ed0afe47cfb7c6b5a6a2473ff6e7e81\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-netbsd.tar.xz\": \"849c04115660abdf1d4460aef2d87021c6ad52423c83dfed3c2cec8e380ae6fe\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-redox.tar.gz\": \"e3a35d33b3282fd156482c85e19817f78dcd964de8b712a6e46b965dc60d5204\",\n+    \"dist/2021-11-30/rust-std-beta-x86_64-unknown-redox.tar.xz\": \"d5bfbb1415a62547b9e2a24b770a3c6e4d531101cfb2360b7a7de34d0bf18974\",\n+    \"dist/2021-11-30/rustc-beta-aarch64-apple-darwin.tar.gz\": \"28beba0ff958b93f85618e49f13f4062cefacc82f6b5911d42f00515f99c5abe\",\n+    \"dist/2021-11-30/rustc-beta-aarch64-apple-darwin.tar.xz\": \"07c6a43130112c93745e729c91669243cd28b73fafc7d9b32b4f22650db7bcad\",\n+    \"dist/2021-11-30/rustc-beta-aarch64-pc-windows-msvc.tar.gz\": \"9e70dc74c4428438716d14861797380ce7f6617bc93b83c74fc1a6f8aca99392\",\n+    \"dist/2021-11-30/rustc-beta-aarch64-pc-windows-msvc.tar.xz\": \"8f61ec8129b7b0bcc6b329337e5e0323054a438e999615687a18fdc42a8d0692\",\n+    \"dist/2021-11-30/rustc-beta-aarch64-unknown-linux-gnu.tar.gz\": \"bba3cbfdd2842cdf8f2698b709401db6a641227d1742595e3959f1f0ace37c5f\",\n+    \"dist/2021-11-30/rustc-beta-aarch64-unknown-linux-gnu.tar.xz\": \"fe74ad76a2cffdff0a2fb953f31b73d80a0bce75402bf65f01d250fcae6ff779\",\n+    \"dist/2021-11-30/rustc-beta-aarch64-unknown-linux-musl.tar.gz\": \"cde952fb3c38a969c0743d2f9d90e256db8613c463a4b23d6119656570978eb5\",\n+    \"dist/2021-11-30/rustc-beta-aarch64-unknown-linux-musl.tar.xz\": \"f2dd88f1b4ec97aaaebb601d20751d50536e85b2cac36740abbc03fa8a4d0d06\",\n+    \"dist/2021-11-30/rustc-beta-arm-unknown-linux-gnueabi.tar.gz\": \"1a4414987e4da2c8086590fe4ad531f78862443eede3bc9069efb424900746d2\",\n+    \"dist/2021-11-30/rustc-beta-arm-unknown-linux-gnueabi.tar.xz\": \"1682f8bde2562d4b9183fa512bc1e54d2a821fd9f63208a51489f21deeb7fcfd\",\n+    \"dist/2021-11-30/rustc-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"ca40f3c5e8fd8bd6d89d3c0a3ad4d767353c1b4138e2720371a275c9c52c9117\",\n+    \"dist/2021-11-30/rustc-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"c7afe4eba5cdb02a2e8ae224a0970c8aa36ef429ac298b0f98ff41a0d911aad1\",\n+    \"dist/2021-11-30/rustc-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"6acd677fda38aea2b960f2af6438b30c3b6bd759bb3e56228a1096445ddd100f\",\n+    \"dist/2021-11-30/rustc-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"451a2e139771f39ec09a7cefd48885ec30f732668d50c750d42e6c58c250f8fe\",\n+    \"dist/2021-11-30/rustc-beta-i686-pc-windows-gnu.tar.gz\": \"a1df7d105231d4941a55a9f850d39acc201a99dd408d523935799b70fec30c6a\",\n+    \"dist/2021-11-30/rustc-beta-i686-pc-windows-gnu.tar.xz\": \"3005718736a2a0fa3a4f1be10239cfb467e9cabe6ce366f9909826bd3c06a990\",\n+    \"dist/2021-11-30/rustc-beta-i686-pc-windows-msvc.tar.gz\": \"695039c6737fb3bfd325fbebdab61aeef80ec427ae3d40d8b82e8b317e147fc8\",\n+    \"dist/2021-11-30/rustc-beta-i686-pc-windows-msvc.tar.xz\": \"7a5038b7299de71d3677042647fca501984d1f2a52c1d84052956ff7854622b3\",\n+    \"dist/2021-11-30/rustc-beta-i686-unknown-linux-gnu.tar.gz\": \"d21dd4c98d38186544aee9b22b439d67d77c0a740357dfad7fea3c4a9b8d1332\",\n+    \"dist/2021-11-30/rustc-beta-i686-unknown-linux-gnu.tar.xz\": \"e62a7c9809de668343323eb9fa1a1f6cc302a6e161e64826e9d31bd202f2f472\",\n+    \"dist/2021-11-30/rustc-beta-mips-unknown-linux-gnu.tar.gz\": \"b85eb1bff16384b4f6ad268a01bdcec539b9ea412abb6d64618521cb0e63985d\",\n+    \"dist/2021-11-30/rustc-beta-mips-unknown-linux-gnu.tar.xz\": \"ce79b36723a65419e03ec77ea14680791d683e5e04332eebdf59550bdaaa164d\",\n+    \"dist/2021-11-30/rustc-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"e778edd911e09c5c3b46aeccbabcd8ead78dd38086206d03406fc8dce52806e7\",\n+    \"dist/2021-11-30/rustc-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"10afe035ca7d3a967b467875b1345dde8bdcd3f8c4af1e917bfa2c676e0fec70\",\n+    \"dist/2021-11-30/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"6b6c3386ebec138ff07a21d3f5631263219c226ca146bf97fe0a7bb9fee9d0c5\",\n+    \"dist/2021-11-30/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"5ff6430623d0f3aa14748f371e34072aba126a16429928f8f99172190f369fee\",\n+    \"dist/2021-11-30/rustc-beta-mipsel-unknown-linux-gnu.tar.gz\": \"369ad16e85e4f2956e400105e6d8374ff64c473c3c3b61ae4d916214d5f922da\",\n+    \"dist/2021-11-30/rustc-beta-mipsel-unknown-linux-gnu.tar.xz\": \"1c8adfb22f724fa98f30f23378a28729e144f6ab9bba54adf13111ca4648ed78\",\n+    \"dist/2021-11-30/rustc-beta-powerpc-unknown-linux-gnu.tar.gz\": \"b3e270c6272420c31ee7bed8ed36c113c879a384fa5b85af0deb7d43a355ca2c\",\n+    \"dist/2021-11-30/rustc-beta-powerpc-unknown-linux-gnu.tar.xz\": \"a21cdd8d182cc64ceaa83e522299860c2710dee780e8f49ff107a73fbd73c3ca\",\n+    \"dist/2021-11-30/rustc-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"1a81076b8e49647b61761a38ed283a9a71b326dc321920f7be453e0e15ae2465\",\n+    \"dist/2021-11-30/rustc-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"3f8ce23f81623a00de63ce7e82e448eec0901a92f908e6aff362807bae14ff84\",\n+    \"dist/2021-11-30/rustc-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"eaa3b365bd91a5770db85e8541ee28c99988635521c0f2dfea05218172f11a55\",\n+    \"dist/2021-11-30/rustc-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"3f856ae24c4737bf1928025a10712b6d856788d988fb5018631c525d13b68e29\",\n+    \"dist/2021-11-30/rustc-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"c672cbf2caef81f7ab923ff7c6a05f1865057278180a686f810ddc71dacc49d0\",\n+    \"dist/2021-11-30/rustc-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"bda5d2234aebdc175c87da3b77d050c56bced21a794c416bb9090c0ae3374be2\",\n+    \"dist/2021-11-30/rustc-beta-s390x-unknown-linux-gnu.tar.gz\": \"59e01371664f8d39c7a06c205af0f5ab9aabdb3942be4f493d05ab71047619e8\",\n+    \"dist/2021-11-30/rustc-beta-s390x-unknown-linux-gnu.tar.xz\": \"de956b5275e38e0b4223819973e85f5f65c409addd786f7ac2d525a79c3f0c92\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-apple-darwin.tar.gz\": \"4f78d90362488a866ea7b1cccbc61f925d94034b46dfa775dea75223e67d755a\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-apple-darwin.tar.xz\": \"3520d028e9370087cfa57eb7225dd76c008cb08ffb01c8101aaa86104f427f12\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-pc-windows-gnu.tar.gz\": \"f954349daa7dfd819ec0a7335a47b1d3b2ed0138eae31c56288d9c523cdf56b2\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-pc-windows-gnu.tar.xz\": \"ca046d8fca5fa48117c61c70a21176d9220a3c62af9fdc9b899c157bb196a5b5\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-pc-windows-msvc.tar.gz\": \"61ae4421bdf798a5ca1a8bc8c8521dfb29a707e40d382dbd2e155f134956ac33\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-pc-windows-msvc.tar.xz\": \"495076dfc2fa0b8d96613e34f867de9d43483984a8bd6839bf273c2be38039b6\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-freebsd.tar.gz\": \"828526bc23ad8802071bf4f2984faf3549139eb4ce8ebb9ba8711c196d2bf437\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-freebsd.tar.xz\": \"fa2464350b2ac29bec6751c551cc45b7af92c25d2cf1109397e724802d4859cf\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-illumos.tar.gz\": \"a1d9719668ea1887d6202c25b9dd2b7d40bdd240f3f753af77ac93f126c84c38\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-illumos.tar.xz\": \"4b36f5d448bf022f90e284c22a44e0b87ef8518ec93a297ceb703eb612ef80d8\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-linux-gnu.tar.gz\": \"63e654f5e8707a0536381025bdbb43d498c70a29a5ada0ecdb12e23844cc9a9f\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-linux-gnu.tar.xz\": \"6b5b74abdcb1cae42620cabc142a119b58823e9f2ac0c3151e087a76323c5cae\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-linux-musl.tar.gz\": \"f3aa2d52ce5da066c59de609ebd5df60ac908c7e0db23ac4afe69b927ef2a974\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-linux-musl.tar.xz\": \"6e8858dbaf50a8211516e5afa83e4133d878e0d4b19ba4a3e4c3e51cb80210b7\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-netbsd.tar.gz\": \"9028dd44728092ccaec86f415abdb3733f3ea58ab7c3d736e96e27540cc66a2d\",\n+    \"dist/2021-11-30/rustc-beta-x86_64-unknown-netbsd.tar.xz\": \"c6720fd231b54a04e1ba3ed3fe333b1d8ef5b771ce341b4c112169a293bf713a\",\n+    \"dist/2021-11-30/rustfmt-nightly-aarch64-apple-darwin.tar.gz\": \"d987783ba5117529b325bcf6f5e7abd9eee42b5ea86ce5109a4fd3f450af8062\",\n+    \"dist/2021-11-30/rustfmt-nightly-aarch64-apple-darwin.tar.xz\": \"5d5838733dc64e302991465c1f371fde855ee410d42d1713ddc1c471b469e1a8\",\n+    \"dist/2021-11-30/rustfmt-nightly-aarch64-pc-windows-msvc.tar.gz\": \"8593ab35bb800312d6fe4c4a4d151feb26187c6db0d0d5ca5e3e98a007f8a4ff\",\n+    \"dist/2021-11-30/rustfmt-nightly-aarch64-pc-windows-msvc.tar.xz\": \"a2ded0420cc1d98df255c7ef93247b9a6d3d9ec22e42c477305dc15ef35fd329\",\n+    \"dist/2021-11-30/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.gz\": \"652275e77d73f122c12eb952338661562a48fc76164d6549158abc14fb4e4a4a\",\n+    \"dist/2021-11-30/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.xz\": \"fbb49b56bb11348e07124d8216b8f8b6e26d8697abb05afec0ddb07a456b29e5\",\n+    \"dist/2021-11-30/rustfmt-nightly-aarch64-unknown-linux-musl.tar.gz\": \"817c7ed90ab8cdec1dcfc8571391a714002b49fd20da0ae32135f57d233ffbfb\",\n+    \"dist/2021-11-30/rustfmt-nightly-aarch64-unknown-linux-musl.tar.xz\": \"cbd8674c65babce944bab6a6f013d44a2c7d6829434a6b97edb1f1e1df1c076f\",\n+    \"dist/2021-11-30/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.gz\": \"66b13ffad073bc624ebdef219e61f8972fc6be354aaf1f8ede58a3acc01314c3\",\n+    \"dist/2021-11-30/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.xz\": \"11ecfef218376fd2232ad552526b39173c5269130f02e408a7492762cde87a6a\",\n+    \"dist/2021-11-30/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.gz\": \"07ad99e019141843f5d6f8c302b9d20c7453ebead79e9711af33c9c8081b9e22\",\n+    \"dist/2021-11-30/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.xz\": \"6656be84a9b5a63083d63e3a87bc928b424109efff48e3a6770e026c6ea7c2e8\",\n+    \"dist/2021-11-30/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.gz\": \"155422628d41ce9730f4503bffa12e396b58692c906828acf15f0dd39b3d491e\",\n+    \"dist/2021-11-30/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.xz\": \"fc75c3836489bda30d340132d0d5ab8ee7f7c67617e4dc66a9eae559bbdb0421\",\n+    \"dist/2021-11-30/rustfmt-nightly-i686-pc-windows-gnu.tar.gz\": \"181d557c8f73c8f22ed63a8f98e53f6d88871fd694173aea70c53d42c0c55ae2\",\n+    \"dist/2021-11-30/rustfmt-nightly-i686-pc-windows-gnu.tar.xz\": \"5defc562a2f0ced4539006692cc969cf89756637f5f5c62be0276dfedd6f3db6\",\n+    \"dist/2021-11-30/rustfmt-nightly-i686-pc-windows-msvc.tar.gz\": \"f28b3fdf5425e7b782d0f78ca95613efd87b2b0d14d44c4490f17d4eb452f183\",\n+    \"dist/2021-11-30/rustfmt-nightly-i686-pc-windows-msvc.tar.xz\": \"b6cebd5a23bcc504d05c8dd79654baf2ab45b162c59b7b843e24efb7e2344011\",\n+    \"dist/2021-11-30/rustfmt-nightly-i686-unknown-linux-gnu.tar.gz\": \"c59850b28fcfb1608c7e91890b8628ac201b87b4d9af7e9fd019e3e4a137c033\",\n+    \"dist/2021-11-30/rustfmt-nightly-i686-unknown-linux-gnu.tar.xz\": \"ad808569083691ba31b0e10222f9dd01822ade91689bcb060544f28b99f2a299\",\n+    \"dist/2021-11-30/rustfmt-nightly-mips-unknown-linux-gnu.tar.gz\": \"8fca357226b91cc712b888c0a62f9e52b121ab6d9815ea5f53bbfd243b895b69\",\n+    \"dist/2021-11-30/rustfmt-nightly-mips-unknown-linux-gnu.tar.xz\": \"7f5451fe6946c16a7ba404c8bab33816d58d478b1dc0ea1ce6b85befe26ddf77\",\n+    \"dist/2021-11-30/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.gz\": \"7cc76ce31cf59f1cbeca87a46c996e905f048acfc70d438eae2a32bb67fc60c1\",\n+    \"dist/2021-11-30/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.xz\": \"429bacebe2a9f1478a00b1573fe4e1b071c6348d800182993c8b5d8ba54d9615\",\n+    \"dist/2021-11-30/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.gz\": \"701a12b5a4a689e6b2ef260e35ed2d22c00452cde5e18ce0d886ace37e81964f\",\n+    \"dist/2021-11-30/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.xz\": \"0ef78c91a3220226619f20b28bf67947a56ff31f369d5ea7bfc2aef356060e42\",\n+    \"dist/2021-11-30/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.gz\": \"0765a3b65315bbb1381927eaf6f65f16fd09dddab41d7398e483bf001ee7bc3e\",\n+    \"dist/2021-11-30/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.xz\": \"c74b0833f995ffad5c812ba130f423485bd8297eca0c4eae227852a88ece8521\",\n+    \"dist/2021-11-30/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.gz\": \"3c9d5a35ef1e459ded4dcdcad40bc5e3bcd5b2821cf4f46dbaf2c2c3259fa3ff\",\n+    \"dist/2021-11-30/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.xz\": \"0aa8975a6dbd103a4764ad643de6094bd6911bd3a90d46e24ad1eafcea2870e7\",\n+    \"dist/2021-11-30/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.gz\": \"a0ee2ec59ed07ba9c9e48076c954f5c6e4d39809d9e4923337db2627ea279c6f\",\n+    \"dist/2021-11-30/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.xz\": \"e712fa72a41dedcd50c6531433220904b9627fa78bfa15cdd96d97161981cb77\",\n+    \"dist/2021-11-30/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.gz\": \"fc7809520a4a41ccb0ffb303c7bbc96443308387890ebdb65a25c3697a5c3eb4\",\n+    \"dist/2021-11-30/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.xz\": \"84a8fa7468b9e59465f85607f84960e11faf0f37bd766d55b6be985db89d0d17\",\n+    \"dist/2021-11-30/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.gz\": \"2703dff8cb1c0ca08787f1c7715885c5b09919c040783ba98bd74f8fe3af704d\",\n+    \"dist/2021-11-30/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.xz\": \"a3e25cc857e990b467c804f41e23bfbe8ef02630b48703fc1c7fae692e16eb80\",\n+    \"dist/2021-11-30/rustfmt-nightly-s390x-unknown-linux-gnu.tar.gz\": \"659a9ca0e1296f817cd9f90fed9ccd7d3c7c3e7eea7e9c437bbeb2d951a2669c\",\n+    \"dist/2021-11-30/rustfmt-nightly-s390x-unknown-linux-gnu.tar.xz\": \"21e83ac3b148f0f690cb9a39b385fb0d5a82d6eea9ec46d4d4445b5a660c6d7c\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-apple-darwin.tar.gz\": \"c8e3300a426cc4a80ba4f1cf0c6822d9b883f24c486b991f2056938be778d43f\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-apple-darwin.tar.xz\": \"55f1f7d84828b3cc5d13b10e549a74f2f1df11057ed48e75fbafc0d3538daf03\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-pc-windows-gnu.tar.gz\": \"99bf70cee39b2ce73dbe5827fe3d93e45241faea284acb3f8004cf7e700e1704\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-pc-windows-gnu.tar.xz\": \"dfc569d57211eae74a2cde5db180d2f2f44bca04f811655ef1f8d8c2154b97ef\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-pc-windows-msvc.tar.gz\": \"679d69ba6a4b460f9672f1ec1c2939ac41ee7f911a2a74eaf6db477aa088e6e3\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-pc-windows-msvc.tar.xz\": \"3b9a899fcf40db84be8bd14e7c767c572c7d8c7c85f90997b8278fe8726413ae\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-freebsd.tar.gz\": \"19be469ab711dcee7a7243e865efc5addf8b2cdbdf15150a2c367692c45b9f94\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-freebsd.tar.xz\": \"789c7129e235b65860a514fdb38f01ac195af610d4ac6a296d272a6f36d72344\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-illumos.tar.gz\": \"18657363783d0967d871ee1ed8905b3db0c3b761910fb06ea10980ec6b5ca082\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-illumos.tar.xz\": \"8b272546a9eb8b23724fbec5577fc0c917a23e994befc38ebfa797957df03b9d\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.gz\": \"4e1de312f07fb98845a881b44c2a76ec9abf61e5aba46e8e384de1cd297957a3\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\": \"a13ad29e2d06c9df233882d009ba8354d92d2fb29239cadaf858b9abc8b477d9\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-linux-musl.tar.gz\": \"aae38bbf1eb7e0da50eb7f226897dc85e88b5e008ef901a93dadb0550f4055ac\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-linux-musl.tar.xz\": \"757564eaa1a339d37b59da304bbc7a846bb883a73c62b78df39dacd947606ec9\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-netbsd.tar.gz\": \"5f3a83079cb1fd7d8b9be44d0df7b57c6dc79da8e1762eace67c122cffc2d4ca\",\n+    \"dist/2021-11-30/rustfmt-nightly-x86_64-unknown-netbsd.tar.xz\": \"e47ee14a1e679ee5f23936ba7d7de13dcba082c7f32e366be7a990503c91f6ad\"\n   }\n }"}, {"sha": "9242b80e22939eb419b2b7ff370fe46fe6a59917", "filename": "src/test/ui/cast/issue-88621.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcast%2Fissue-88621.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcast%2Fissue-88621.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-88621.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -0,0 +1,13 @@\n+#![feature(arbitrary_enum_discriminant)]\n+\n+#[repr(u8)]\n+enum Kind2 {\n+    Foo() = 1,\n+    Bar{} = 2,\n+    Baz = 3,\n+}\n+\n+fn main() {\n+    let _ = Kind2::Foo() as u8;\n+    //~^ ERROR non-primitive cast\n+}"}, {"sha": "e96d866515238416af31288af13c4dae386a1714", "filename": "src/test/ui/cast/issue-88621.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-88621.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -0,0 +1,9 @@\n+error[E0605]: non-primitive cast: `Kind2` as `u8`\n+  --> $DIR/issue-88621.rs:11:13\n+   |\n+LL |     let _ = Kind2::Foo() as u8;\n+   |             ^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0605`."}, {"sha": "aea861e3261b5fc8a19f5be0e18f5b35e371a189", "filename": "src/test/ui/crate-loading/invalid-rlib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -6,3 +6,5 @@\n #![no_std]\n use ::foo; //~ ERROR invalid metadata files for crate `foo`\n //~| NOTE failed to mmap file\n+//~^^ ERROR invalid metadata files for crate `foo`\n+//~| NOTE failed to mmap file"}, {"sha": "3c0d23bf7b4cce575aae1978e32884981535d356", "filename": "src/test/ui/crate-loading/invalid-rlib.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Finvalid-rlib.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -6,6 +6,14 @@ LL | use ::foo;\n    |\n    = note: failed to mmap file 'auxiliary/libfoo.rlib'\n \n-error: aborting due to previous error\n+error[E0786]: found invalid metadata files for crate `foo`\n+  --> $DIR/invalid-rlib.rs:7:7\n+   |\n+LL | use ::foo;\n+   |       ^^^\n+   |\n+   = note: failed to mmap file 'auxiliary/libfoo.rlib'\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0786`."}, {"sha": "400d9f6e0ba12c94b6b6b1e414a07f13322518b1", "filename": "src/test/ui/crate-loading/missing-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: --target x86_64-unknown-uefi\n // needs-llvm-components: x86\n // rustc-env:CARGO=/usr/bin/cargo\n+#![feature(no_core)]\n #![no_core]\n extern crate core;\n //~^ ERROR can't find crate for `core`"}, {"sha": "70bcae1e0edd076cb843a176948814a7f569ff4c", "filename": "src/test/ui/crate-loading/missing-std.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fmissing-std.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,5 @@\n error[E0463]: can't find crate for `core`\n-  --> $DIR/missing-std.rs:5:1\n+  --> $DIR/missing-std.rs:6:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ can't find crate\n@@ -8,6 +8,8 @@ LL | extern crate core;\n    = help: consider downloading the target with `rustup target add x86_64-unknown-uefi`\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n \n-error: aborting due to previous error\n+error: requires `sized` lang_item\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0463`."}, {"sha": "ccc423e4a194cf2c357dd1113e969a87458d31ea", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -22,14 +22,6 @@ impl Enum {\n     }\n }\n \n-#[allow(dead_code)]\n-#[repr(u8)]\n-enum FieldlessEnum {\n-    Unit = 3,\n-    Tuple() = 2,\n-    Struct {} = 1,\n-}\n-\n fn main() {\n     const UNIT: Enum = Enum::Unit;\n     const TUPLE: Enum = Enum::Tuple(5);\n@@ -48,9 +40,4 @@ fn main() {\n     assert_eq!(3, UNIT_TAG);\n     assert_eq!(2, TUPLE_TAG);\n     assert_eq!(1, STRUCT_TAG);\n-\n-    // Ensure `as` conversions are correct\n-    assert_eq!(3, FieldlessEnum::Unit as u8);\n-    assert_eq!(2, FieldlessEnum::Tuple() as u8);\n-    assert_eq!(1, FieldlessEnum::Struct{} as u8);\n }"}, {"sha": "3170537b0e0a088f61916102199d1b5b27c86526", "filename": "src/test/ui/extern-flag/empty-extern-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,4 +1,6 @@\n // compile-flags: --extern std=\n // error-pattern: extern location for std does not exist\n+// needs-unwind since it affects the error output\n+// ignore-emscripten compiled with panic=abort, personality not required\n \n fn main() {}"}, {"sha": "b0628a4f6dd62a68fe6b8fe0490c293a45753dc4", "filename": "src/test/ui/extern-flag/empty-extern-arg.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-flag%2Fempty-extern-arg.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,4 +1,8 @@\n error: extern location for std does not exist: \n \n-error: aborting due to previous error\n+error: language item required, but not found: `eh_personality`\n+\n+error: `#[panic_handler]` function required, but not found\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "a6560ca78624d5294f6539980d107ba0500135a2", "filename": "src/test/ui/extern/extern-crate-multiple-missing.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -0,0 +1,10 @@\n+// If multiple `extern crate` resolutions fail each of them should produce an error\n+extern crate bar; //~ ERROR can't find crate for `bar`\n+extern crate foo; //~ ERROR can't find crate for `foo`\n+\n+fn main() {\n+    // If the crate name introduced by `extern crate` failed to resolve then subsequent\n+    // derived paths do not emit additional errors\n+    foo::something();\n+    bar::something();\n+}"}, {"sha": "893bb4fb26d0d955adfa0ccf50bbd3d4fd6ad8d1", "filename": "src/test/ui/extern/extern-crate-multiple-missing.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-multiple-missing.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -0,0 +1,15 @@\n+error[E0463]: can't find crate for `bar`\n+  --> $DIR/extern-crate-multiple-missing.rs:2:1\n+   |\n+LL | extern crate bar;\n+   | ^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error[E0463]: can't find crate for `foo`\n+  --> $DIR/extern-crate-multiple-missing.rs:3:1\n+   |\n+LL | extern crate foo;\n+   | ^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0463`."}, {"sha": "127765727b401f000058c11cefda55831f9b2fb7", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -2,7 +2,12 @@ error: `extern crate self;` requires renaming\n   --> $DIR/extern-crate-self-fail.rs:1:1\n    |\n LL | extern crate self;\n-   | ^^^^^^^^^^^^^^^^^^ help: try: `extern crate self as name;`\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+help: rename the `self` crate to be able to import it\n+   |\n+LL | extern crate self as name;\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n error: `#[macro_use]` is not supported on `extern crate self`\n   --> $DIR/extern-crate-self-fail.rs:3:1"}, {"sha": "9ecae3e7a2b2437794896087d813dcafda6d3b3a", "filename": "src/test/ui/issues/issue-37131.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fissues%2Fissue-37131.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fissues%2Fissue-37131.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37131.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -4,6 +4,8 @@ error[E0463]: can't find crate for `std`\n    = help: consider downloading the target with `rustup target add thumbv6m-none-eabi`\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n \n-error: aborting due to previous error\n+error: requires `sized` lang_item\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0463`."}, {"sha": "4e56cca33d6a9301febbb5b4ebbba23dbd2c531a", "filename": "src/test/ui/issues/issue-49851/compiler-builtins-error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,4 +1,5 @@\n-//~ ERROR 1:1: 1:1: can't find crate for `core` [E0463]\n+//~ ERROR can't find crate for `core`\n+//~^ ERROR can't find crate for `compiler_builtins`\n \n // compile-flags: --target thumbv7em-none-eabihf\n // needs-llvm-components: arm\n@@ -7,3 +8,6 @@\n #![no_std]\n \n extern crate cortex_m;\n+//~^ ERROR can't find crate for `cortex_m`\n+\n+fn main() {}"}, {"sha": "fcfa2bf119cff6f29c5410cdb34524ff1ab4972e", "filename": "src/test/ui/issues/issue-49851/compiler-builtins-error.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -4,6 +4,16 @@ error[E0463]: can't find crate for `core`\n    = help: consider downloading the target with `rustup target add thumbv7em-none-eabihf`\n    = help: consider building the standard library from source with `cargo build -Zbuild-std`\n \n-error: aborting due to previous error\n+error[E0463]: can't find crate for `compiler_builtins`\n+\n+error[E0463]: can't find crate for `cortex_m`\n+  --> $DIR/compiler-builtins-error.rs:10:1\n+   |\n+LL | extern crate cortex_m;\n+   | ^^^^^^^^^^^^^^^^^^^^^^ can't find crate\n+\n+error: requires `sized` lang_item\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0463`."}, {"sha": "2427bde6d18bcbe543e2f92d9101d7a85f3d1a07", "filename": "src/test/ui/rust-2018/uniform-paths/deadlock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,7 +1,8 @@\n // edition:2018\n // compile-flags:--extern foo --extern bar\n \n+use bar::foo; //~ ERROR can't find crate for `bar`\n use foo::bar; //~ ERROR can't find crate for `foo`\n-use bar::foo;\n+//~^^ ERROR unresolved imports `bar::foo`, `foo::bar`\n \n fn main() {}"}, {"sha": "8b9863948bd6cd9cd076df02214ec65b7bb906aa", "filename": "src/test/ui/rust-2018/uniform-paths/deadlock.stderr", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fdeadlock.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,9 +1,24 @@\n-error[E0463]: can't find crate for `foo`\n+error[E0463]: can't find crate for `bar`\n   --> $DIR/deadlock.rs:4:5\n    |\n+LL | use bar::foo;\n+   |     ^^^ can't find crate\n+\n+error[E0463]: can't find crate for `foo`\n+  --> $DIR/deadlock.rs:5:5\n+   |\n LL | use foo::bar;\n    |     ^^^ can't find crate\n \n-error: aborting due to previous error\n+error[E0432]: unresolved imports `bar::foo`, `foo::bar`\n+  --> $DIR/deadlock.rs:4:5\n+   |\n+LL | use bar::foo;\n+   |     ^^^^^^^^\n+LL | use foo::bar;\n+   |     ^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0463`.\n+Some errors have detailed explanations: E0432, E0463.\n+For more information about an error, try `rustc --explain E0432`."}, {"sha": "66298e06ed6279ae1ff967185770c5c7783edcef", "filename": "src/test/ui/svh/changing-crates.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fchanging-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fchanging-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fchanging-crates.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-msvc FIXME #31306\n-\n // note that these aux-build directives must be in this order\n // aux-build:changing-crates-a1.rs\n // aux-build:changing-crates-b.rs"}, {"sha": "7244919e86d5d66200944d7a8c354257123348ae", "filename": "src/test/ui/svh/changing-crates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fchanging-crates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fchanging-crates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fchanging-crates.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,5 @@\n error[E0460]: found possibly newer version of crate `a` which `b` depends on\n-  --> $DIR/changing-crates.rs:10:1\n+  --> $DIR/changing-crates.rs:8:1\n    |\n LL | extern crate b;\n    | ^^^^^^^^^^^^^^^"}, {"sha": "ea500711bb76933b0e5211b4e555fb4bb125701f", "filename": "src/test/ui/svh/svh-change-lit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-lit.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-msvc FIXME #31306\n-\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs"}, {"sha": "1e97e9d0557d04f8890bfec1263b8a6c1076371d", "filename": "src/test/ui/svh/svh-change-lit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-lit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-lit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-lit.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,5 @@\n error[E0460]: found possibly newer version of crate `a` which `b` depends on\n-  --> $DIR/svh-change-lit.rs:10:1\n+  --> $DIR/svh-change-lit.rs:8:1\n    |\n LL | extern crate b;\n    | ^^^^^^^^^^^^^^^"}, {"sha": "ff919ea83d533c507188f20bcabb1aef8718ce9c", "filename": "src/test/ui/svh/svh-change-significant-cfg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-significant-cfg.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-msvc FIXME #31306\n-\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs"}, {"sha": "f04046f4c87bf423b4173b7f119a4984b18d9d94", "filename": "src/test/ui/svh/svh-change-significant-cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-significant-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-significant-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-significant-cfg.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,5 @@\n error[E0460]: found possibly newer version of crate `a` which `b` depends on\n-  --> $DIR/svh-change-significant-cfg.rs:10:1\n+  --> $DIR/svh-change-significant-cfg.rs:8:1\n    |\n LL | extern crate b;\n    | ^^^^^^^^^^^^^^^"}, {"sha": "a4ba06eaf2ee5c3baa83aee9154e13383e517547", "filename": "src/test/ui/svh/svh-change-trait-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-trait-bound.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-msvc FIXME #31306\n-\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs"}, {"sha": "a778c61806a500b36e7db4ea2b04c047fbf52fcb", "filename": "src/test/ui/svh/svh-change-trait-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-trait-bound.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,5 @@\n error[E0460]: found possibly newer version of crate `a` which `b` depends on\n-  --> $DIR/svh-change-trait-bound.rs:10:1\n+  --> $DIR/svh-change-trait-bound.rs:8:1\n    |\n LL | extern crate b;\n    | ^^^^^^^^^^^^^^^"}, {"sha": "d1651814bf66d8b6f81062326bb4ef41ad3186c8", "filename": "src/test/ui/svh/svh-change-type-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-arg.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-msvc FIXME #31306\n-\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs"}, {"sha": "f09babf93fd358903c165ee239615e627f21b936", "filename": "src/test/ui/svh/svh-change-type-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-arg.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,5 @@\n error[E0460]: found possibly newer version of crate `a` which `b` depends on\n-  --> $DIR/svh-change-type-arg.rs:10:1\n+  --> $DIR/svh-change-type-arg.rs:8:1\n    |\n LL | extern crate b;\n    | ^^^^^^^^^^^^^^^"}, {"sha": "a4be50a643359c27e16e4fcb503697f72d1d1198", "filename": "src/test/ui/svh/svh-change-type-ret.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-ret.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-msvc FIXME #31306\n-\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs"}, {"sha": "0998cd4b5496e8303f6c04450ffd0e8233a084e5", "filename": "src/test/ui/svh/svh-change-type-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-ret.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,5 @@\n error[E0460]: found possibly newer version of crate `a` which `b` depends on\n-  --> $DIR/svh-change-type-ret.rs:10:1\n+  --> $DIR/svh-change-type-ret.rs:8:1\n    |\n LL | extern crate b;\n    | ^^^^^^^^^^^^^^^"}, {"sha": "c470761be1954275c058479da9921bc79443da20", "filename": "src/test/ui/svh/svh-change-type-static.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-static.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-msvc FIXME #31306\n-\n // note that these aux-build directives must be in this order\n // aux-build:svh-a-base.rs\n // aux-build:svh-b.rs"}, {"sha": "9c48cbd30a508408f4976eff4c067275700fedf6", "filename": "src/test/ui/svh/svh-change-type-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-change-type-static.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,5 @@\n error[E0460]: found possibly newer version of crate `a` which `b` depends on\n-  --> $DIR/svh-change-type-static.rs:10:1\n+  --> $DIR/svh-change-type-static.rs:8:1\n    |\n LL | extern crate b;\n    | ^^^^^^^^^^^^^^^"}, {"sha": "e144fdffb522bb91fc575f5c217b082f775d447c", "filename": "src/test/ui/svh/svh-use-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.rs?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,3 @@\n-// ignore-msvc FIXME #31306\n-\n // note that these aux-build directives must be in this order\n // aux-build:svh-uta-base.rs\n // aux-build:svh-utb.rs"}, {"sha": "5780cfef357d612bf8a23787c44da57b56423ba3", "filename": "src/test/ui/svh/svh-use-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5038e20999eef35260b070189883edc2a8a34b2/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsvh%2Fsvh-use-trait.stderr?ref=e5038e20999eef35260b070189883edc2a8a34b2", "patch": "@@ -1,5 +1,5 @@\n error[E0460]: found possibly newer version of crate `uta` which `utb` depends on\n-  --> $DIR/svh-use-trait.rs:15:1\n+  --> $DIR/svh-use-trait.rs:13:1\n    |\n LL | extern crate utb;\n    | ^^^^^^^^^^^^^^^^^"}]}