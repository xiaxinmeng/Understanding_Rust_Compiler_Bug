{"sha": "d6b3f1f231350798f019fdb09f6c4979fb23b8d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YjNmMWYyMzEzNTA3OThmMDE5ZmRiMDlmNmM0OTc5ZmIyM2I4ZDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-22T07:46:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-23T16:45:19Z"}, "message": "sync: Move the concurrent queue to using &self\n\nThis commit also lifts it up a level in the module hierarchy in the soon-to-come\nreorganization of libsync.", "tree": {"sha": "52426ee08896c34864a60ebc3460a744afd75cc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52426ee08896c34864a60ebc3460a744afd75cc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6b3f1f231350798f019fdb09f6c4979fb23b8d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b3f1f231350798f019fdb09f6c4979fb23b8d4", "html_url": "https://github.com/rust-lang/rust/commit/d6b3f1f231350798f019fdb09f6c4979fb23b8d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6b3f1f231350798f019fdb09f6c4979fb23b8d4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd64bd83b72a669a20d1b7d938f1ff76aceb0cef", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd64bd83b72a669a20d1b7d938f1ff76aceb0cef", "html_url": "https://github.com/rust-lang/rust/commit/dd64bd83b72a669a20d1b7d938f1ff76aceb0cef"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "3287aae80e3740785a86d9c5dc315e4cc229e9d1", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6b3f1f231350798f019fdb09f6c4979fb23b8d4/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/d6b3f1f231350798f019fdb09f6c4979fb23b8d4/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=d6b3f1f231350798f019fdb09f6c4979fb23b8d4", "patch": "@@ -41,7 +41,7 @@\n     \"libstd/sync/mpsc_queue.rs\", # BSD\n     \"libstd/sync/spsc_queue.rs\", # BSD\n     \"libstd/sync/mpmc_bounded_queue.rs\", # BSD\n-    \"libsync/sync/mpsc_intrusive.rs\", # BSD\n+    \"libsync/mpsc_intrusive.rs\", # BSD\n ]\n \n def check_license(name, contents):"}, {"sha": "12e8ca48ba1a9d10beb2596f0ea14ec4bafcdae9", "filename": "src/libsync/mpsc_intrusive.rs", "status": "renamed", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d6b3f1f231350798f019fdb09f6c4979fb23b8d4/src%2Flibsync%2Fmpsc_intrusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6b3f1f231350798f019fdb09f6c4979fb23b8d4/src%2Flibsync%2Fmpsc_intrusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fmpsc_intrusive.rs?ref=d6b3f1f231350798f019fdb09f6c4979fb23b8d4", "patch": "@@ -35,6 +35,7 @@\n \n use std::cast;\n use std::sync::atomics;\n+use std::ty::Unsafe;\n \n // NB: all links are done as AtomicUint instead of AtomicPtr to allow for static\n // initialization.\n@@ -50,22 +51,22 @@ pub struct DummyNode {\n \n pub struct Queue<T> {\n     head: atomics::AtomicUint,\n-    tail: *mut Node<T>,\n+    tail: Unsafe<*mut Node<T>>,\n     stub: DummyNode,\n }\n \n impl<T: Send> Queue<T> {\n     pub fn new() -> Queue<T> {\n         Queue {\n             head: atomics::AtomicUint::new(0),\n-            tail: 0 as *mut Node<T>,\n+            tail: Unsafe::new(0 as *mut Node<T>),\n             stub: DummyNode {\n                 next: atomics::AtomicUint::new(0),\n             },\n         }\n     }\n \n-    pub unsafe fn push(&mut self, node: *mut Node<T>) {\n+    pub unsafe fn push(&self, node: *mut Node<T>) {\n         (*node).next.store(0, atomics::Release);\n         let prev = self.head.swap(node as uint, atomics::AcqRel);\n \n@@ -93,8 +94,8 @@ impl<T: Send> Queue<T> {\n     /// Right now consumers of this queue must be ready for this fact. Just\n     /// because `pop` returns `None` does not mean that there is not data\n     /// on the queue.\n-    pub unsafe fn pop(&mut self) -> Option<*mut Node<T>> {\n-        let tail = self.tail;\n+    pub unsafe fn pop(&self) -> Option<*mut Node<T>> {\n+        let tail = *self.tail.get();\n         let mut tail = if !tail.is_null() {tail} else {\n             cast::transmute(&self.stub)\n         };\n@@ -103,12 +104,12 @@ impl<T: Send> Queue<T> {\n             if next.is_null() {\n                 return None;\n             }\n-            self.tail = next;\n+            *self.tail.get() = next;\n             tail = next;\n             next = (*next).next(atomics::Relaxed);\n         }\n         if !next.is_null() {\n-            self.tail = next;\n+            *self.tail.get() = next;\n             return Some(tail);\n         }\n         let head = self.head.load(atomics::Acquire) as *mut Node<T>;\n@@ -119,7 +120,7 @@ impl<T: Send> Queue<T> {\n         self.push(stub);\n         next = (*tail).next(atomics::Relaxed);\n         if !next.is_null() {\n-            self.tail = next;\n+            *self.tail.get() = next;\n             return Some(tail);\n         }\n         return None\n@@ -133,7 +134,7 @@ impl<T: Send> Node<T> {\n             next: atomics::AtomicUint::new(0),\n         }\n     }\n-    pub unsafe fn next(&mut self, ord: atomics::Ordering) -> *mut Node<T> {\n+    pub unsafe fn next(&self, ord: atomics::Ordering) -> *mut Node<T> {\n         cast::transmute::<uint, *mut Node<T>>(self.next.load(ord))\n     }\n }", "previous_filename": "src/libsync/sync/mpsc_intrusive.rs"}]}