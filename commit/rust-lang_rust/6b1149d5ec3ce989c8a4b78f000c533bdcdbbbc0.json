{"sha": "6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTE0OWQ1ZWMzY2U5ODljOGE0Yjc4ZjAwMGM1MzNiZGNkYmJiYzA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-09-24T14:02:07Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-09-24T14:02:07Z"}, "message": "use the infcx tables to check if a closure is Copy\n\nFixes #28550", "tree": {"sha": "d926736bc2464e543a0c767ed8fbe2b5042a8a9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d926736bc2464e543a0c767ed8fbe2b5042a8a9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0", "html_url": "https://github.com/rust-lang/rust/commit/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0/comments", "author": null, "committer": null, "parents": [{"sha": "8fe79bdfdacb2f5914971bd1a0b63b9577afbf6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe79bdfdacb2f5914971bd1a0b63b9577afbf6a", "html_url": "https://github.com/rust-lang/rust/commit/8fe79bdfdacb2f5914971bd1a0b63b9577afbf6a"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "e21e49ac5c8d99383f23511586c9732c045bc8b8", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0", "patch": "@@ -1389,9 +1389,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.resolve_type_vars_or_error(&ty)\n     }\n \n+    pub fn tables_are_tcx_tables(&self) -> bool {\n+        let tables: &RefCell<ty::Tables> = &self.tables;\n+        let tcx_tables: &RefCell<ty::Tables> = &self.tcx.tables;\n+        tables as *const _ == tcx_tables as *const _\n+    }\n+\n     pub fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n         let ty = self.resolve_type_vars_if_possible(&ty);\n-        if ty.needs_infer() {\n+        if ty.needs_infer() ||\n+            (ty.has_closure_types() && !self.tables_are_tcx_tables()) {\n             // this can get called from typeck (by euv), and moves_by_default\n             // rightly refuses to work with inference variables, but\n             // moves_by_default has a cache, which we want to use in other"}, {"sha": "f44a535e8176e25aa895dfccc16c0694348eb74c", "filename": "src/test/run-pass/issue-28550.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0/src%2Ftest%2Frun-pass%2Fissue-28550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0/src%2Ftest%2Frun-pass%2Fissue-28550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28550.rs?ref=6b1149d5ec3ce989c8a4b78f000c533bdcdbbbc0", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A<F: FnOnce()->T,T>(F::Output);\n+struct B<F: FnOnce()->T,T>(A<F,T>);\n+\n+// Removing Option causes it to compile.\n+fn foo<T,F: FnOnce()->T>(f: F) -> Option<B<F,T>> {\n+    Some(B(A(f())))\n+}\n+\n+fn main() {\n+    let v = (|| foo(||4))();\n+    match v {\n+        Some(B(A(4))) => {},\n+        _ => unreachable!()\n+    }\n+}"}]}