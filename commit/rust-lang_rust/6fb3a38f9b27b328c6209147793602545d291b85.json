{"sha": "6fb3a38f9b27b328c6209147793602545d291b85", "node_id": "C_kwDOAAsO6NoAKDZmYjNhMzhmOWIyN2IzMjhjNjIwOTE0Nzc5MzYwMjU0NWQyOTFiODU", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-09-05T16:38:55Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `pass_by_value.rs`", "tree": {"sha": "b26cfc8f25e4cb7d541a05ec883a9638f2967d3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26cfc8f25e4cb7d541a05ec883a9638f2967d3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb3a38f9b27b328c6209147793602545d291b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb3a38f9b27b328c6209147793602545d291b85", "html_url": "https://github.com/rust-lang/rust/commit/6fb3a38f9b27b328c6209147793602545d291b85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb3a38f9b27b328c6209147793602545d291b85/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a6801f8e5ce0aee0a62eb022780740ee61535d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a6801f8e5ce0aee0a62eb022780740ee61535d", "html_url": "https://github.com/rust-lang/rust/commit/c3a6801f8e5ce0aee0a62eb022780740ee61535d"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "fd68af572ff990b85e49ed82f2c60e29c9afb8e8", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fb3a38f9b27b328c6209147793602545d291b85/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb3a38f9b27b328c6209147793602545d291b85/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=6fb3a38f9b27b328c6209147793602545d291b85", "patch": "@@ -6,6 +6,14 @@ use rustc_span::{Span, Symbol};\n \n use crate::LateContext;\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_pass_by_value)]\n+pub struct PassByValueDiag {\n+    pub ty: String,\n+    #[suggestion(code = \"{ty}\", applicability = \"maybe-incorrect\")]\n+    pub suggestion: Span,\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(lint_redundant_semicolons)]\n pub struct RedundantSemicolonsDiag {"}, {"sha": "3df0fc385952d60a09e99b5b5cab955ad6e38f93", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fb3a38f9b27b328c6209147793602545d291b85/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fb3a38f9b27b328c6209147793602545d291b85/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=6fb3a38f9b27b328c6209147793602545d291b85", "patch": "@@ -1,5 +1,7 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+use crate::lints::PassByValueDiag;\n use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_errors::{fluent, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::{GenericArg, PathSegment, QPath, TyKind};\n@@ -29,20 +31,11 @@ impl<'tcx> LateLintPass<'tcx> for PassByValue {\n                     }\n                 }\n                 if let Some(t) = path_for_pass_by_value(cx, &inner_ty) {\n-                    cx.struct_span_lint(\n+                    cx.emit_spanned_lint(\n                         PASS_BY_VALUE,\n                         ty.span,\n-                        fluent::lint_pass_by_value,\n-                        |lint| {\n-                            lint.set_arg(\"ty\", t.clone()).span_suggestion(\n-                                ty.span,\n-                                fluent::suggestion,\n-                                t,\n-                                // Changing type of function argument\n-                                Applicability::MaybeIncorrect,\n-                            )\n-                        },\n-                    )\n+                        PassByValueDiag { ty: t.clone(), suggestion: ty.span },\n+                    );\n                 }\n             }\n             _ => {}"}]}