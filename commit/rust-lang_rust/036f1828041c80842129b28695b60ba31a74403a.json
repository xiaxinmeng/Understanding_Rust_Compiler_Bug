{"sha": "036f1828041c80842129b28695b60ba31a74403a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNmYxODI4MDQxYzgwODQyMTI5YjI4Njk1YjYwYmEzMWE3NDQwM2E=", "commit": {"author": {"name": "Dmitry Kadashev", "email": "dkadashev@gmail.com", "date": "2019-10-31T10:20:33Z"}, "committer": {"name": "Dmitry Kadashev", "email": "dkadashev@gmail.com", "date": "2019-11-02T05:48:24Z"}, "message": "Show type param definitions in type mismatch errors\n\nFixes #47319.\n\nShows the type parameter definition(s) on type mismatch errors so the\ncontext is clearer. Pretty much changes the following:\n\n```\nLL |     bar1(t);\n   |          ^\n   |          |\n   |          expected enum `std::option::Option`, found type parameter `T`\n```\n\ninto:\n\n```\nLL | fn foo1<T>(t: T) {\n   |         - this type parameter\nLL |     bar1(t);\n   |          ^\n   |          |\n   |          expected enum `std::option::Option`, found type parameter `T`\n```", "tree": {"sha": "b16d33d70b01ca1b19abd29a8116fc612cdb4e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b16d33d70b01ca1b19abd29a8116fc612cdb4e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/036f1828041c80842129b28695b60ba31a74403a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/036f1828041c80842129b28695b60ba31a74403a", "html_url": "https://github.com/rust-lang/rust/commit/036f1828041c80842129b28695b60ba31a74403a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/036f1828041c80842129b28695b60ba31a74403a/comments", "author": {"login": "dkadashev", "id": 1396608, "node_id": "MDQ6VXNlcjEzOTY2MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1396608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkadashev", "html_url": "https://github.com/dkadashev", "followers_url": "https://api.github.com/users/dkadashev/followers", "following_url": "https://api.github.com/users/dkadashev/following{/other_user}", "gists_url": "https://api.github.com/users/dkadashev/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkadashev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkadashev/subscriptions", "organizations_url": "https://api.github.com/users/dkadashev/orgs", "repos_url": "https://api.github.com/users/dkadashev/repos", "events_url": "https://api.github.com/users/dkadashev/events{/privacy}", "received_events_url": "https://api.github.com/users/dkadashev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkadashev", "id": 1396608, "node_id": "MDQ6VXNlcjEzOTY2MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1396608?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkadashev", "html_url": "https://github.com/dkadashev", "followers_url": "https://api.github.com/users/dkadashev/followers", "following_url": "https://api.github.com/users/dkadashev/following{/other_user}", "gists_url": "https://api.github.com/users/dkadashev/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkadashev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkadashev/subscriptions", "organizations_url": "https://api.github.com/users/dkadashev/orgs", "repos_url": "https://api.github.com/users/dkadashev/repos", "events_url": "https://api.github.com/users/dkadashev/events{/privacy}", "received_events_url": "https://api.github.com/users/dkadashev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a30ce639f9eeba7d085721d219553635f32c280", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a30ce639f9eeba7d085721d219553635f32c280", "html_url": "https://github.com/rust-lang/rust/commit/6a30ce639f9eeba7d085721d219553635f32c280"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "57cb9564f71bd93ee76e2a6be7f724bf811fd72d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/036f1828041c80842129b28695b60ba31a74403a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036f1828041c80842129b28695b60ba31a74403a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=036f1828041c80842129b28695b60ba31a74403a", "patch": "@@ -1190,8 +1190,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         }\n \n+        // In some (most?) cases cause.body_id points to actual body, but in some cases\n+        // it's a actual definition. According to the comments (e.g. in\n+        // librustc_typeck/check/compare_method.rs:compare_predicate_entailment) the latter\n+        // is relied upon by some other code. This might (or might not) need cleanup.\n+        let body_owner_def_id = match self.tcx.hir().opt_local_def_id(cause.body_id) {\n+            Some(def_id) => def_id,\n+            None => self.tcx.hir().body_owner_def_id(hir::BodyId{hir_id: cause.body_id}),\n+        };\n         self.check_and_note_conflicting_crates(diag, terr, span);\n-        self.tcx.note_and_explain_type_err(diag, terr, span);\n+        self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id);\n \n         // It reads better to have the error origin as the final\n         // thing."}, {"sha": "768487fb16267807946e64ce39ef928115c22fe7", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/036f1828041c80842129b28695b60ba31a74403a/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/036f1828041c80842129b28695b60ba31a74403a/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=036f1828041c80842129b28695b60ba31a74403a", "patch": "@@ -254,6 +254,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         db: &mut DiagnosticBuilder<'_>,\n         err: &TypeError<'tcx>,\n         sp: Span,\n+        body_owner_def_id: DefId,\n     ) {\n         use self::TypeError::*;\n \n@@ -288,7 +289,16 @@ impl<'tcx> TyCtxt<'tcx> {\n                             );\n                         }\n                     },\n-                    (ty::Param(_), ty::Param(_)) => {\n+                    (ty::Param(expected), ty::Param(found)) => {\n+                        let generics = self.generics_of(body_owner_def_id);\n+                        db.span_label(\n+                            self.def_span(generics.type_param(expected, self).def_id),\n+                            \"expected type parameter\"\n+                        );\n+                        db.span_label(\n+                            self.def_span(generics.type_param(found, self).def_id),\n+                            \"found type parameter\"\n+                        );\n                         db.note(\"a type parameter was expected, but a different one was found; \\\n                                  you might be missing a type parameter or trait bound\");\n                         db.note(\"for more information, visit \\\n@@ -301,7 +311,12 @@ impl<'tcx> TyCtxt<'tcx> {\n                     (ty::Param(_), ty::Projection(_)) | (ty::Projection(_), ty::Param(_)) => {\n                         db.note(\"you might be missing a type parameter or trait bound\");\n                     }\n-                    (ty::Param(_), _) | (_, ty::Param(_)) => {\n+                    (ty::Param(p), _) | (_, ty::Param(p)) => {\n+                        let generics = self.generics_of(body_owner_def_id);\n+                        db.span_label(\n+                            self.def_span(generics.type_param(p, self).def_id),\n+                            \"this type parameter\"\n+                        );\n                         db.help(\"type parameters must be constrained to match other types\");\n                         if self.sess.teach(&db.get_code().unwrap()) {\n                             db.help(\"given a type parameter `T` and a method `foo`:"}]}