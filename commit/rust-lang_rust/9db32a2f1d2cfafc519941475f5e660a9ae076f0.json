{"sha": "9db32a2f1d2cfafc519941475f5e660a9ae076f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYjMyYTJmMWQyY2ZhZmM1MTk5NDE0NzVmNWU2NjBhOWFlMDc2ZjA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-03T03:10:34Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:43Z"}, "message": "std::rand: adjust the f32 & f64 Rand instances.\n\nThe f32 generator now just uses a single u32, and the f64 uses a\nsingle u64. This will make both significantly faster, especially\non 64-bit platforms.", "tree": {"sha": "baa944042d89b671bbd42a0e0f625afd18b2606e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baa944042d89b671bbd42a0e0f625afd18b2606e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9db32a2f1d2cfafc519941475f5e660a9ae076f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9db32a2f1d2cfafc519941475f5e660a9ae076f0", "html_url": "https://github.com/rust-lang/rust/commit/9db32a2f1d2cfafc519941475f5e660a9ae076f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9db32a2f1d2cfafc519941475f5e660a9ae076f0/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98869799eb2604ecd7c947db117794df10890a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/98869799eb2604ecd7c947db117794df10890a2c", "html_url": "https://github.com/rust-lang/rust/commit/98869799eb2604ecd7c947db117794df10890a2c"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "976eea7191a509dbc4a1dd108ec44c9e3ee3654c", "filename": "src/libstd/rand/rand_impls.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9db32a2f1d2cfafc519941475f5e660a9ae076f0/src%2Flibstd%2Frand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db32a2f1d2cfafc519941475f5e660a9ae076f0/src%2Flibstd%2Frand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Frand_impls.rs?ref=9db32a2f1d2cfafc519941475f5e660a9ae076f0", "patch": "@@ -14,7 +14,6 @@ use char;\n use int;\n use option::{Option, Some, None};\n use rand::{Rand,Rng};\n-use u32;\n use uint;\n \n impl Rand for int {\n@@ -96,21 +95,23 @@ impl Rand for u64 {\n }\n \n impl Rand for f32 {\n+    /// A random `f32` in the range `[0, 1)`.\n     #[inline]\n     fn rand<R: Rng>(rng: &mut R) -> f32 {\n-        rng.gen::<f64>() as f32\n+        // weird, but this is the easiest way to get 2**32\n+        static SCALE: f32 = 2.0 * (1u32 << 31) as f32;\n+        rng.next_u32() as f32 / SCALE\n     }\n }\n \n-static SCALE : f64 = (u32::max_value as f64) + 1.0f64;\n impl Rand for f64 {\n+    /// A random `f64` in the range `[0, 1)`.\n     #[inline]\n     fn rand<R: Rng>(rng: &mut R) -> f64 {\n-        let u1 = rng.next_u32() as f64;\n-        let u2 = rng.next_u32() as f64;\n-        let u3 = rng.next_u32() as f64;\n+        // weird, but this is the easiest way to get 2**64\n+        static SCALE: f64 = 2.0 * (1u64 << 63) as f64;\n \n-        ((u1 / SCALE + u2) / SCALE + u3) / SCALE\n+        rng.next_u64() as f64 / SCALE\n     }\n }\n "}]}