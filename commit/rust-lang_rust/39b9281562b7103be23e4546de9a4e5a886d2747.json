{"sha": "39b9281562b7103be23e4546de9a4e5a886d2747", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YjkyODE1NjJiNzEwM2JlMjNlNDU0NmRlOWE0ZTVhODg2ZDI3NDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-31T19:41:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-09T18:14:41Z"}, "message": "add a `first_free_index` parameter", "tree": {"sha": "94128a14e8a8d537de223fa3b6442099a129eb8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94128a14e8a8d537de223fa3b6442099a129eb8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39b9281562b7103be23e4546de9a4e5a886d2747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39b9281562b7103be23e4546de9a4e5a886d2747", "html_url": "https://github.com/rust-lang/rust/commit/39b9281562b7103be23e4546de9a4e5a886d2747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39b9281562b7103be23e4546de9a4e5a886d2747/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da", "html_url": "https://github.com/rust-lang/rust/commit/5c016f4cb51e79a6ec3cae25f5d6c11ed92fe6da"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "217ec45320e00685cf10ae72949327d7060a52e1", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39b9281562b7103be23e4546de9a4e5a886d2747/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39b9281562b7103be23e4546de9a4e5a886d2747/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=39b9281562b7103be23e4546de9a4e5a886d2747", "patch": "@@ -203,15 +203,15 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelating<'cx, 'bccx, 'gcx, 'tcx> {\n     /// the region with; to do so, it indexes backwards into the list\n     /// of ambient scopes `scopes`.\n     fn lookup_bound_region(\n-        &self,\n         debruijn: ty::DebruijnIndex,\n         br: &ty::BoundRegion,\n+        first_free_index: ty::DebruijnIndex,\n         scopes: &[BoundRegionScope],\n     ) -> RegionVid {\n         // The debruijn index is a \"reverse index\" into the\n         // scopes listing. So when we have INNERMOST (0), we\n         // want the *last* scope pushed, and so forth.\n-        let debruijn_index = debruijn.index() - ty::INNERMOST.index();\n+        let debruijn_index = debruijn.index() - first_free_index.index();\n         let scope = &scopes[scopes.len() - debruijn_index - 1];\n \n         // Find this bound region in that scope to map to a\n@@ -226,10 +226,13 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelating<'cx, 'bccx, 'gcx, 'tcx> {\n         &self,\n         universal_regions: &UniversalRegions<'tcx>,\n         r: ty::Region<'tcx>,\n+        first_free_index: ty::DebruijnIndex,\n         scopes: &[BoundRegionScope],\n     ) -> RegionVid {\n         match r {\n-            ty::ReLateBound(debruijn, br) => self.lookup_bound_region(*debruijn, br, scopes),\n+            ty::ReLateBound(debruijn, br) => {\n+                Self::lookup_bound_region(*debruijn, br, first_free_index, scopes)\n+            }\n \n             ty::ReVar(v) => *v,\n \n@@ -380,8 +383,10 @@ impl<'cx, 'bccx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx>\n                 a, b, self.ambient_variance\n             );\n \n-            let v_a = self.replace_bound_region(universal_regions, a, &self.a_scopes);\n-            let v_b = self.replace_bound_region(universal_regions, b, &self.b_scopes);\n+            let v_a =\n+                self.replace_bound_region(universal_regions, a, ty::INNERMOST, &self.a_scopes);\n+            let v_b =\n+                self.replace_bound_region(universal_regions, b, ty::INNERMOST, &self.b_scopes);\n \n             debug!(\"regions: v_a = {:?}\", v_a);\n             debug!(\"regions: v_b = {:?}\", v_b);"}]}