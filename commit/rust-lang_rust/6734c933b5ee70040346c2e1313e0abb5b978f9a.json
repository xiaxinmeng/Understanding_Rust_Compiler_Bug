{"sha": "6734c933b5ee70040346c2e1313e0abb5b978f9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzRjOTMzYjVlZTcwMDQwMzQ2YzJlMTMxM2UwYWJiNWI5NzhmOWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-13T05:19:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-16T01:09:16Z"}, "message": "alloc: Add issues for all unstable features", "tree": {"sha": "e1485cced1717871f343085023aa313e5f2cd07a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1485cced1717871f343085023aa313e5f2cd07a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6734c933b5ee70040346c2e1313e0abb5b978f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6734c933b5ee70040346c2e1313e0abb5b978f9a", "html_url": "https://github.com/rust-lang/rust/commit/6734c933b5ee70040346c2e1313e0abb5b978f9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6734c933b5ee70040346c2e1313e0abb5b978f9a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "html_url": "https://github.com/rust-lang/rust/commit/b7dcf272d90657bfea13e54939ee04fed7c7f5f0"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "8af4cee9095196a6efe415ea883fd2bdf31bfdf8", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=6734c933b5ee70040346c2e1313e0abb5b978f9a", "patch": "@@ -137,7 +137,8 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n /// used to break cycles between `Arc` pointers.\n #[unsafe_no_drop_flag]\n #[unstable(feature = \"arc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange name to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -209,7 +210,8 @@ impl<T: ?Sized> Arc<T> {\n     /// let weak_five = five.downgrade();\n     /// ```\n     #[unstable(feature = \"arc_weak\",\n-               reason = \"Weak pointers may not belong in this module.\")]\n+               reason = \"Weak pointers may not belong in this module.\",\n+               issue = \"27718\")]\n     pub fn downgrade(&self) -> Weak<T> {\n         loop {\n             // This Relaxed is OK because we're checking the value in the CAS\n@@ -234,14 +236,14 @@ impl<T: ?Sized> Arc<T> {\n \n     /// Get the number of weak references to this value.\n     #[inline]\n-    #[unstable(feature = \"arc_counts\")]\n+    #[unstable(feature = \"arc_counts\", issue = \"27718\")]\n     pub fn weak_count(this: &Arc<T>) -> usize {\n         this.inner().weak.load(SeqCst) - 1\n     }\n \n     /// Get the number of strong references to this value.\n     #[inline]\n-    #[unstable(feature = \"arc_counts\")]\n+    #[unstable(feature = \"arc_counts\", issue = \"27718\")]\n     pub fn strong_count(this: &Arc<T>) -> usize {\n         this.inner().strong.load(SeqCst)\n     }\n@@ -349,7 +351,7 @@ impl<T: Clone> Arc<T> {\n     /// let mut_five = Arc::make_unique(&mut five);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_unique\")]\n+    #[unstable(feature = \"arc_unique\", issue = \"27718\")]\n     pub fn make_unique(this: &mut Arc<T>) -> &mut T {\n         // Note that we hold both a strong reference and a weak reference.\n         // Thus, releasing our strong reference only will not, by itself, cause\n@@ -427,7 +429,7 @@ impl<T: ?Sized> Arc<T> {\n     /// # }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"arc_unique\")]\n+    #[unstable(feature = \"arc_unique\", issue = \"27718\")]\n     pub fn get_mut(this: &mut Arc<T>) -> Option<&mut T> {\n         if this.is_unique() {\n             // This unsafety is ok because we're guaranteed that the pointer\n@@ -541,7 +543,8 @@ impl<T: ?Sized> Drop for Arc<T> {\n }\n \n #[unstable(feature = \"arc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n impl<T: ?Sized> Weak<T> {\n     /// Upgrades a weak reference to a strong reference.\n     ///\n@@ -589,7 +592,8 @@ impl<T: ?Sized> Weak<T> {\n }\n \n #[unstable(feature = \"arc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n impl<T: ?Sized> Clone for Weak<T> {\n     /// Makes a clone of the `Weak<T>`.\n     ///"}, {"sha": "e3019f952fe70b54cc74bfd4fa2a5e7ceff0e92d", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=6734c933b5ee70040346c2e1313e0abb5b978f9a", "patch": "@@ -85,13 +85,15 @@ use core::raw::{TraitObject};\n /// ```\n #[lang = \"exchange_heap\"]\n #[unstable(feature = \"box_heap\",\n-           reason = \"may be renamed; uncertain about custom allocator design\")]\n+           reason = \"may be renamed; uncertain about custom allocator design\",\n+           issue = \"27779\")]\n pub const HEAP: ExchangeHeapSingleton =\n     ExchangeHeapSingleton { _force_singleton: () };\n \n /// This the singleton type used solely for `boxed::HEAP`.\n #[unstable(feature = \"box_heap\",\n-           reason = \"may be renamed; uncertain about custom allocator design\")]\n+           reason = \"may be renamed; uncertain about custom allocator design\",\n+           issue = \"27779\")]\n #[derive(Copy, Clone)]\n pub struct ExchangeHeapSingleton { _force_singleton: () }\n \n@@ -121,7 +123,9 @@ pub struct Box<T: ?Sized>(Unique<T>);\n /// the fact that the `align_of` intrinsic currently requires the\n /// input type to be Sized (which I do not think is strictly\n /// necessary).\n-#[unstable(feature = \"placement_in\", reason = \"placement box design is still being worked out.\")]\n+#[unstable(feature = \"placement_in\",\n+           reason = \"placement box design is still being worked out.\",\n+           issue = \"27779\")]\n pub struct IntermediateBox<T: ?Sized>{\n     ptr: *mut u8,\n     size: usize,\n@@ -222,7 +226,8 @@ impl<T : ?Sized> Box<T> {\n     /// lead to memory problems like double-free, for example if the\n     /// function is called twice on the same raw pointer.\n     #[unstable(feature = \"box_raw\",\n-               reason = \"may be renamed or moved out of Box scope\")]\n+               reason = \"may be renamed or moved out of Box scope\",\n+               issue = \"27768\")]\n     #[inline]\n     // NB: may want to be called from_ptr, see comments on CStr::from_ptr\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n@@ -245,7 +250,8 @@ impl<T : ?Sized> Box<T> {\n     /// let raw = Box::into_raw(seventeen);\n     /// let boxed_again = unsafe { Box::from_raw(raw) };\n     /// ```\n-    #[unstable(feature = \"box_raw\", reason = \"may be renamed\")]\n+    #[unstable(feature = \"box_raw\", reason = \"may be renamed\",\n+               issue = \"27768\")]\n     #[inline]\n     // NB: may want to be called into_ptr, see comments on CStr::from_ptr\n     pub fn into_raw(b: Box<T>) -> *mut T {\n@@ -470,7 +476,7 @@ impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {}\n /// }\n /// ```\n #[rustc_paren_sugar]\n-#[unstable(feature = \"fnbox\", reason = \"Newly introduced\")]\n+#[unstable(feature = \"fnbox\", reason = \"Newly introduced\", issue = \"0\")]\n pub trait FnBox<A> {\n     type Output;\n "}, {"sha": "10cb84d1da14d1b8c94259efd30ff4228f26c2e8", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=6734c933b5ee70040346c2e1313e0abb5b978f9a", "patch": "@@ -12,7 +12,8 @@\n             reason = \"the precise API and guarantees it provides may be tweaked \\\n                       slightly, especially to possibly take into account the \\\n                       types being stored to make room for a future \\\n-                      tracing garbage collector\")]\n+                      tracing garbage collector\",\n+            issue = \"27700\")]\n \n use core::{isize, usize};\n "}, {"sha": "630993d8291201087ccc9c148c5cee9bf8f49784", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=6734c933b5ee70040346c2e1313e0abb5b978f9a", "patch": "@@ -64,7 +64,8 @@\n #![allow(unused_attributes)]\n #![unstable(feature = \"alloc\",\n             reason = \"this library is unlikely to be stabilized in its current \\\n-                      form or name\")]\n+                      form or name\",\n+            issue = \"27783\")]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n@@ -131,7 +132,8 @@ pub mod raw_vec;\n /// Common out-of-memory routine\n #[cold]\n #[inline(never)]\n-#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\")]\n+#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n+           issue = \"27700\")]\n pub fn oom() -> ! {\n     // FIXME(#14674): This really needs to do something other than just abort\n     //                here, but any printing done must be *guaranteed* to not"}, {"sha": "c2d7febf98e5e25d1399870dcd164375e3ec8ee1", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6734c933b5ee70040346c2e1313e0abb5b978f9a/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=6734c933b5ee70040346c2e1313e0abb5b978f9a", "patch": "@@ -238,7 +238,7 @@ impl<T> Rc<T> {\n     /// assert_eq!(Rc::try_unwrap(x), Err(Rc::new(4)));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\")]\n+    #[unstable(feature = \"rc_unique\", issue = \"27718\")]\n     pub fn try_unwrap(rc: Rc<T>) -> Result<T, Rc<T>> {\n         if Rc::is_unique(&rc) {\n             unsafe {\n@@ -271,20 +271,21 @@ impl<T: ?Sized> Rc<T> {\n     /// let weak_five = five.downgrade();\n     /// ```\n     #[unstable(feature = \"rc_weak\",\n-               reason = \"Weak pointers may not belong in this module\")]\n+               reason = \"Weak pointers may not belong in this module\",\n+               issue = \"27718\")]\n     pub fn downgrade(&self) -> Weak<T> {\n         self.inc_weak();\n         Weak { _ptr: self._ptr }\n     }\n \n     /// Get the number of weak references to this value.\n     #[inline]\n-    #[unstable(feature = \"rc_counts\")]\n+    #[unstable(feature = \"rc_counts\", issue = \"27718\")]\n     pub fn weak_count(this: &Rc<T>) -> usize { this.weak() - 1 }\n \n     /// Get the number of strong references to this value.\n     #[inline]\n-    #[unstable(feature = \"rc_counts\")]\n+    #[unstable(feature = \"rc_counts\", issue= \"27718\")]\n     pub fn strong_count(this: &Rc<T>) -> usize { this.strong() }\n \n     /// Returns true if there are no other `Rc` or `Weak<T>` values that share\n@@ -302,7 +303,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert!(Rc::is_unique(&five));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\")]\n+    #[unstable(feature = \"rc_unique\", issue = \"27718\")]\n     pub fn is_unique(rc: &Rc<T>) -> bool {\n         Rc::weak_count(rc) == 0 && Rc::strong_count(rc) == 1\n     }\n@@ -327,7 +328,7 @@ impl<T: ?Sized> Rc<T> {\n     /// assert!(Rc::get_mut(&mut x).is_none());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\")]\n+    #[unstable(feature = \"rc_unique\", issue = \"27718\")]\n     pub fn get_mut(rc: &mut Rc<T>) -> Option<&mut T> {\n         if Rc::is_unique(rc) {\n             let inner = unsafe { &mut **rc._ptr };\n@@ -356,7 +357,7 @@ impl<T: Clone> Rc<T> {\n     /// let mut_five = five.make_unique();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"rc_unique\")]\n+    #[unstable(feature = \"rc_unique\", issue = \"27718\")]\n     pub fn make_unique(&mut self) -> &mut T {\n         if !Rc::is_unique(self) {\n             *self = Rc::new((**self).clone())\n@@ -653,7 +654,8 @@ impl<T> fmt::Pointer for Rc<T> {\n /// See the [module level documentation](./index.html) for more.\n #[unsafe_no_drop_flag]\n #[unstable(feature = \"rc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange names to try to avoid interfering with\n     // field accesses of the contained type via Deref\n@@ -666,7 +668,8 @@ impl<T: ?Sized> !marker::Sync for Weak<T> {}\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n #[unstable(feature = \"rc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n impl<T: ?Sized> Weak<T> {\n \n     /// Upgrades a weak reference to a strong reference.\n@@ -746,7 +749,8 @@ impl<T: ?Sized> Drop for Weak<T> {\n }\n \n #[unstable(feature = \"rc_weak\",\n-           reason = \"Weak pointers may not belong in this module.\")]\n+           reason = \"Weak pointers may not belong in this module.\",\n+           issue = \"27718\")]\n impl<T: ?Sized> Clone for Weak<T> {\n \n     /// Makes a clone of the `Weak<T>`."}]}