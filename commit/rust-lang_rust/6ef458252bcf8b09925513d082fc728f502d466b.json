{"sha": "6ef458252bcf8b09925513d082fc728f502d466b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZjQ1ODI1MmJjZjhiMDk5MjU1MTNkMDgyZmM3MjhmNTAyZDQ2NmI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-31T18:37:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-05-31T18:38:05Z"}, "message": "Some fixes to bitv. Close #2342.", "tree": {"sha": "a070a0cecc9065d303ba0701f39765c009fd24da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a070a0cecc9065d303ba0701f39765c009fd24da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ef458252bcf8b09925513d082fc728f502d466b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef458252bcf8b09925513d082fc728f502d466b", "html_url": "https://github.com/rust-lang/rust/commit/6ef458252bcf8b09925513d082fc728f502d466b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ef458252bcf8b09925513d082fc728f502d466b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e336127291717e01e716c3d21e22f4ef7c0e61c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e336127291717e01e716c3d21e22f4ef7c0e61c", "html_url": "https://github.com/rust-lang/rust/commit/1e336127291717e01e716c3d21e22f4ef7c0e61c"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "b708ef9d33444a022343effd6155ea7654f21815", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6ef458252bcf8b09925513d082fc728f502d466b/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef458252bcf8b09925513d082fc728f502d466b/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=6ef458252bcf8b09925513d082fc728f502d466b", "patch": "@@ -95,6 +95,7 @@ fn clone(v: bitv) -> bitv {\n }\n \n #[doc = \"Retreive the value at index `i`\"]\n+#[inline(always)]\n pure fn get(v: bitv, i: uint) -> bool {\n     assert (i < v.nbits);\n     let bits = uint_bits;\n@@ -104,37 +105,31 @@ pure fn get(v: bitv, i: uint) -> bool {\n     ret x == 1u;\n }\n \n-// FIXME: This doesn't account for the actual size of the vectors,\n-// so it could end up comparing garbage bits (#2342)\n #[doc = \"\n Compares two bitvectors\n \n Both bitvectors must be the same length. Returns `true` if both bitvectors\n contain identical elements.\n \"]\n fn equal(v0: bitv, v1: bitv) -> bool {\n+    if v0.nbits != v1.nbits { ret false; }\n     let len = vec::len(v1.storage);\n     for uint::iterate(0u, len) {|i|\n         if v0.storage[i] != v1.storage[i] { ret false; }\n     }\n }\n \n #[doc = \"Set all bits to 0\"]\n-fn clear(v: bitv) {\n-    for uint::range(0u, vec::len(v.storage)) {|i| v.storage[i] = 0u; };\n-}\n+#[inline(always)]\n+fn clear(v: bitv) { for each_storage(v) {|w| w = 0u } }\n \n #[doc = \"Set all bits to 1\"]\n-fn set_all(v: bitv) {\n-    for uint::range(0u, v.nbits) {|i| set(v, i, true); };\n-}\n+#[inline(always)]\n+fn set_all(v: bitv) { for each_storage(v) {|w| w = !0u } }\n \n #[doc = \"Invert all bits\"]\n-fn invert(v: bitv) {\n-    for uint::range(0u, vec::len(v.storage)) {|i|\n-        v.storage[i] = !v.storage[i];\n-    };\n-}\n+#[inline(always)]\n+fn invert(v: bitv) { for each_storage(v) {|w| w = !w } }\n \n #[doc = \"\n Calculate the difference between two bitvectors\n@@ -156,6 +151,7 @@ Set the value of a bit at a given index\n \n `i` must be less than the length of the bitvector.\n \"]\n+#[inline(always)]\n fn set(v: bitv, i: uint, x: bool) {\n     assert (i < v.nbits);\n     let bits = uint_bits;\n@@ -193,6 +189,7 @@ fn to_vec(v: bitv) -> [uint] {\n     ret vec::from_fn::<uint>(v.nbits, sub);\n }\n \n+#[inline(always)]\n fn each(v: bitv, f: fn(bool) -> bool) {\n     let mut i = 0u;\n     while i < v.nbits {\n@@ -201,6 +198,16 @@ fn each(v: bitv, f: fn(bool) -> bool) {\n     }\n }\n \n+#[inline(always)]\n+fn each_storage(v: bitv, op: fn(&uint) -> bool) {\n+    for uint::range(0u, vec::len(v.storage)) {|i|\n+        let mut w = v.storage[i];\n+        let b = !op(w);\n+        v.storage[i] = w;\n+        if !b { break; }\n+    }\n+}\n+\n #[doc = \"\n Converts the bitvector to a string.\n \n@@ -524,6 +531,20 @@ mod tests {\n                         0u, 0u, 0u, 0u, 1u, 1u, 1u]));\n     }\n \n+    #[test]\n+    fn test_equal_differing_sizes() {\n+        let v0 = bitv(10u, false);\n+        let v1 = bitv(11u, false);\n+        assert !equal(v0, v1);\n+    }\n+\n+    #[test]\n+    fn test_equal_greatly_differing_sizes() {\n+        let v0 = bitv(10u, false);\n+        let v1 = bitv(110u, false);\n+        assert !equal(v0, v1);\n+    }\n+\n }\n \n //"}]}