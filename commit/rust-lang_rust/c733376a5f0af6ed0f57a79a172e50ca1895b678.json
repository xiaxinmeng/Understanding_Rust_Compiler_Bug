{"sha": "c733376a5f0af6ed0f57a79a172e50ca1895b678", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MzMzNzZhNWYwYWY2ZWQwZjU3YTc5YTE3MmU1MGNhMTg5NWI2Nzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-09T15:38:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-09T15:38:59Z"}, "message": "Auto merge of #4522 - mikerite:fix-4514, r=phansch\n\nFix `or_fun_call` bad suggestion\n\nCloses #4514\n\nchangelog: Fix `or_fun_call` bad suggestion", "tree": {"sha": "2324b1ab72fcf38473d13b1c6766f78f0b9627c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2324b1ab72fcf38473d13b1c6766f78f0b9627c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c733376a5f0af6ed0f57a79a172e50ca1895b678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c733376a5f0af6ed0f57a79a172e50ca1895b678", "html_url": "https://github.com/rust-lang/rust/commit/c733376a5f0af6ed0f57a79a172e50ca1895b678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c733376a5f0af6ed0f57a79a172e50ca1895b678/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af4e096054bc97866feb9ac34a3cc11310d9d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af4e096054bc97866feb9ac34a3cc11310d9d41", "html_url": "https://github.com/rust-lang/rust/commit/8af4e096054bc97866feb9ac34a3cc11310d9d41"}, {"sha": "f88c224d82796a714c4a4a35b19475762f9dc81b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f88c224d82796a714c4a4a35b19475762f9dc81b", "html_url": "https://github.com/rust-lang/rust/commit/f88c224d82796a714c4a4a35b19475762f9dc81b"}], "stats": {"total": 79, "additions": 54, "deletions": 25}, "files": [{"sha": "3530ec464b3c10a86f5fa0b426509cb3196cda1c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c733376a5f0af6ed0f57a79a172e50ca1895b678/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c733376a5f0af6ed0f57a79a172e50ca1895b678/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c733376a5f0af6ed0f57a79a172e50ca1895b678", "patch": "@@ -1376,6 +1376,7 @@ fn lint_or_fun_call<'a, 'tcx>(\n \n             let mut finder = FunCallFinder { cx: &cx, found: false };\n             if { finder.visit_expr(&arg); finder.found };\n+            if !contains_return(&arg);\n \n             let self_ty = cx.tables.expr_ty(self_expr);\n \n@@ -2189,28 +2190,6 @@ fn lint_option_and_then_some(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &\n     const LINT_MSG: &str = \"using `Option.and_then(|x| Some(y))`, which is more succinctly expressed as `map(|x| y)`\";\n     const NO_OP_MSG: &str = \"using `Option.and_then(Some)`, which is a no-op\";\n \n-    // Searches an return expressions in `y` in `_.and_then(|x| Some(y))`, which we don't lint\n-    struct RetCallFinder {\n-        found: bool,\n-    }\n-\n-    impl<'tcx> intravisit::Visitor<'tcx> for RetCallFinder {\n-        fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n-            if self.found {\n-                return;\n-            }\n-            if let hir::ExprKind::Ret(..) = &expr.node {\n-                self.found = true;\n-            } else {\n-                intravisit::walk_expr(self, expr);\n-            }\n-        }\n-\n-        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n-            intravisit::NestedVisitorMap::None\n-        }\n-    }\n-\n     let ty = cx.tables.expr_ty(&args[0]);\n     if !match_type(cx, ty, &paths::OPTION) {\n         return;\n@@ -2228,9 +2207,7 @@ fn lint_option_and_then_some(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &\n                 then {\n                     let inner_expr = &some_args[0];\n \n-                    let mut finder = RetCallFinder { found: false };\n-                    finder.visit_expr(inner_expr);\n-                    if finder.found {\n+                    if contains_return(inner_expr) {\n                         return;\n                     }\n \n@@ -2987,3 +2964,31 @@ fn is_bool(ty: &hir::Ty) -> bool {\n         false\n     }\n }\n+\n+// Returns `true` if `expr` contains a return expression\n+fn contains_return(expr: &hir::Expr) -> bool {\n+    struct RetCallFinder {\n+        found: bool,\n+    }\n+\n+    impl<'tcx> intravisit::Visitor<'tcx> for RetCallFinder {\n+        fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n+            if self.found {\n+                return;\n+            }\n+            if let hir::ExprKind::Ret(..) = &expr.node {\n+                self.found = true;\n+            } else {\n+                intravisit::walk_expr(self, expr);\n+            }\n+        }\n+\n+        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+            intravisit::NestedVisitorMap::None\n+        }\n+    }\n+\n+    let mut visitor = RetCallFinder{ found: false };\n+    visitor.visit_expr(expr);\n+    visitor.found\n+}"}, {"sha": "6d9ad16989a2574398fffc0ebd6a164ed638a985", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c733376a5f0af6ed0f57a79a172e50ca1895b678/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c733376a5f0af6ed0f57a79a172e50ca1895b678/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=c733376a5f0af6ed0f57a79a172e50ca1895b678", "patch": "@@ -99,4 +99,16 @@ fn test_or_with_ctors() {\n         .or(Some(Bar(b, Duration::from_secs(2))));\n }\n \n+\n+// Issue 4514 - early return\n+fn f() -> Option<()> {\n+    let a = Some(1);\n+    let b = 1i32;\n+\n+    let _ = a.unwrap_or(b.checked_mul(3)?.min(240));\n+\n+    Some(())\n+}\n+\n+\n fn main() {}"}, {"sha": "78bcf896ec1dc1e2a93501bf8e14d53a3cd0bcdb", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c733376a5f0af6ed0f57a79a172e50ca1895b678/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c733376a5f0af6ed0f57a79a172e50ca1895b678/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=c733376a5f0af6ed0f57a79a172e50ca1895b678", "patch": "@@ -99,4 +99,16 @@ fn test_or_with_ctors() {\n         .or(Some(Bar(b, Duration::from_secs(2))));\n }\n \n+\n+// Issue 4514 - early return\n+fn f() -> Option<()> {\n+    let a = Some(1);\n+    let b = 1i32;\n+\n+    let _ = a.unwrap_or(b.checked_mul(3)?.min(240));\n+\n+    Some(())\n+}\n+\n+\n fn main() {}"}]}