{"sha": "9f9553846235f4a94b68901bb491e73cb837c191", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOTU1Mzg0NjIzNWY0YTk0YjY4OTAxYmI0OTFlNzNjYjgzN2MxOTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-27T00:26:59Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-27T00:26:59Z"}, "message": "Remove redisue of unused fields from 'ann'.", "tree": {"sha": "ca686f935a6b28fdd2a52416a7c586c9e2bc86f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca686f935a6b28fdd2a52416a7c586c9e2bc86f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f9553846235f4a94b68901bb491e73cb837c191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9553846235f4a94b68901bb491e73cb837c191", "html_url": "https://github.com/rust-lang/rust/commit/9f9553846235f4a94b68901bb491e73cb837c191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f9553846235f4a94b68901bb491e73cb837c191/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2561b01211569c376b05f4c8d1434a0e527ac950", "url": "https://api.github.com/repos/rust-lang/rust/commits/2561b01211569c376b05f4c8d1434a0e527ac950", "html_url": "https://github.com/rust-lang/rust/commit/2561b01211569c376b05f4c8d1434a0e527ac950"}], "stats": {"total": 58, "additions": 6, "deletions": 52}, "files": [{"sha": "6efda692913a8e02f054d34acc6f3fe21f93dfc2", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f9553846235f4a94b68901bb491e73cb837c191/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9553846235f4a94b68901bb491e73cb837c191/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=9f9553846235f4a94b68901bb491e73cb837c191", "patch": "@@ -20,10 +20,7 @@ type def_id = tup(crate_num, def_num);\n \n type ty_param = ident;\n \n-// Annotations added during successive passes.\n-type ann = rec(uint id,\n-               middle::ty::t ty,\n-               option::t[vec[middle::ty::t]] tps);\n+type ann = rec(uint id);\n \n tag def {\n     def_fn(def_id);"}, {"sha": "e56075b534fc4f12644b2c5b623d07a35319f50e", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f9553846235f4a94b68901bb491e73cb837c191/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9553846235f4a94b68901bb491e73cb837c191/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=9f9553846235f4a94b68901bb491e73cb837c191", "patch": "@@ -146,10 +146,7 @@ fn new_parser(session::session sess,\n             fn get_chpos() -> uint {ret rdr.get_chpos();}\n \n             fn get_ann() -> ast::ann {\n-                // TODO: Remove ty and tps, which should be unused\n-                // by now.\n-                auto rv = rec(id=next_ann_var, ty=0u,\n-                              tps=none[vec[middle::ty::t]]);\n+                auto rv = rec(id=next_ann_var);\n                 next_ann_var += 1u;\n                 ret rv;\n             }"}, {"sha": "06b1d8e36e59b1d5b238062659e874d074e6e0f0", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f9553846235f4a94b68901bb491e73cb837c191/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9553846235f4a94b68901bb491e73cb837c191/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=9f9553846235f4a94b68901bb491e73cb837c191", "patch": "@@ -1572,28 +1572,6 @@ fn ann_to_monotype(&ctxt cx, ast::ann a) -> t {\n }\n \n \n-// Turns a type and optional type parameters into an annotation, using\n-// defaults for other fields.\n-fn mk_ann_type(uint node_id, t typ, option::t[vec[t]] tps) -> ast::ann {\n-    ret rec(id=node_id, ty=typ, tps=tps);\n-}\n-\n-// Turns a type into an annotation, using defaults for other fields.\n-fn triv_ann(uint node_id, t typ) -> ast::ann {\n-    ret mk_ann_type(node_id, typ, none[vec[t]]);\n-}\n-\n-// Creates a nil type annotation.\n-fn plain_ann(uint node_id, ctxt tcx) -> ast::ann {\n-    ret triv_ann(node_id, mk_nil(tcx));\n-}\n-\n-// Creates a _|_ type annotation.\n-fn bot_ann(uint node_id, ctxt tcx) -> ast::ann {\n-    ret triv_ann(node_id, mk_bot(tcx));\n-}\n-\n-\n // Returns the number of distinct type parameters in the given type.\n fn count_ty_params(&ctxt cx, t ty) -> uint {\n     fn counter(&ctxt cx, @mutable vec[uint] param_indices, t ty) {"}, {"sha": "df030d72ce877e43f05dce5ea062535cbc1af639", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f9553846235f4a94b68901bb491e73cb837c191/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9553846235f4a94b68901bb491e73cb837c191/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9f9553846235f4a94b68901bb491e73cb837c191", "patch": "@@ -16,17 +16,13 @@ import middle::ty::block_ty;\n import middle::ty::expr_ty;\n import middle::ty::field;\n import middle::ty::method;\n-import middle::ty::mk_ann_type;\n import middle::ty::mo_val;\n import middle::ty::mo_alias;\n import middle::ty::mo_either;\n import middle::ty::node_type_table;\n import middle::ty::pat_ty;\n import middle::ty::path_to_str;\n-import middle::ty::plain_ann;\n-import middle::ty::bot_ann;\n import middle::ty::struct;\n-import middle::ty::triv_ann;\n import middle::ty::ty_param_substs_opt_and_ty;\n import middle::ty::ty_to_str;\n import middle::ty::type_is_integral;\n@@ -645,9 +641,7 @@ mod collect {\n \n     fn get_tag_variant_types(&@ctxt cx, &ast::def_id tag_id,\n                              &vec[ast::variant] variants,\n-                             &vec[ast::ty_param] ty_params)\n-            -> vec[ast::variant] {\n-        let vec[ast::variant] result = [];\n+                             &vec[ast::ty_param] ty_params) {\n \n         // Create a set of parameter types shared among all the variants.\n         let vec[ty::t] ty_param_tys = [];\n@@ -682,17 +676,10 @@ mod collect {\n \n             auto tpt = tup(ty_param_count, result_ty);\n             cx.tcx.tcache.insert(variant.node.id, tpt);\n-            auto variant_t = rec(\n-                ann=triv_ann(variant.node.ann.id, result_ty)\n-                with variant.node\n-            );\n             write::ty_only(cx.tcx, variant.node.ann.id, result_ty);\n-            result += [common::respan(variant.span, variant_t)];\n         }\n-\n-        ret result;\n     }\n-    \n+\n     fn get_obj_method_types(&@ctxt cx, &ast::_obj object) -> vec[ty::method] {\n         ret vec::map[@ast::method,method](bind ty_of_method(cx, _),\n                                           object.methods);\n@@ -1184,13 +1171,10 @@ mod pushdown {\n                 let ty_param_substs_and_ty res_t = demand::full(scx, pat.span,\n                       expected, tt, tps, NO_AUTODEREF);\n \n-                auto a_1 = mk_ann_type(ann.id, res_t._1,\n-                                       some[vec[ty::t]](res_t._0));\n-\n                 // TODO: push down type from \"expected\".\n                 write::ty_fixup(scx, ann.id,\n                     ty::ann_to_ty_param_substs_opt_and_ty\n-                        (scx.fcx.ccx.tcx.node_types, a_1));\n+                        (scx.fcx.ccx.tcx.node_types, ann));\n             }\n         }\n     }\n@@ -1691,8 +1675,7 @@ fn check_pat(&@stmt_ctxt scx, &@ast::pat pat) {\n         }\n         case (ast::pat_bind(?id, ?def_id, ?a)) {\n             auto typ = next_ty_var(scx);\n-            auto ann = triv_ann(a.id, typ);\n-            write::ty_only_fixup(scx, ann.id, typ);\n+            write::ty_only_fixup(scx, a.id, typ);\n         }\n         case (ast::pat_tag(?p, ?subpats, ?old_ann)) {\n             auto vdef = ast::variant_def_ids\n@@ -1882,7 +1865,6 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n         pushdown::pushdown_expr(scx, lhs_t1, rhs);\n         auto rhs_t1 = expr_ty(scx.fcx.ccx.tcx, rhs);\n \n-        auto ann = triv_ann(a.id, rhs_t1);\n         write::ty_only_fixup(scx, a.id, rhs_t1);\n     }\n "}]}