{"sha": "dec0a98c4b392b5fd153ba8b944c496218717813", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzBhOThjNGIzOTJiNWZkMTUzYmE4Yjk0NGM0OTYyMTg3MTc4MTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-07T00:57:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-07T00:57:13Z"}, "message": "Auto merge of #58739 - matthewjasper:more-restrictive-tpb, r=pnkfelix\n\nMore restrictive 2 phase borrows - take 2\n\nSignal lint diagnostic `mutable_borrow_reservation_conflict` when borrow-check finds a 2-phase borrow's reservation overlapping with a shared borrow.\n\n(pnkfelix updated description)\n\ncc #56254 , #59159\n\nblocks PR #59114\n\nr? @pnkfelix\n\ncc @RalfJung @nikomatsakis", "tree": {"sha": "46a89afa4c84f51ea00f7c785dea30e1993bcead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46a89afa4c84f51ea00f7c785dea30e1993bcead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec0a98c4b392b5fd153ba8b944c496218717813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec0a98c4b392b5fd153ba8b944c496218717813", "html_url": "https://github.com/rust-lang/rust/commit/dec0a98c4b392b5fd153ba8b944c496218717813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec0a98c4b392b5fd153ba8b944c496218717813/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "091380021a8f05bb3b533209e588a9f7c0e9486b", "url": "https://api.github.com/repos/rust-lang/rust/commits/091380021a8f05bb3b533209e588a9f7c0e9486b", "html_url": "https://github.com/rust-lang/rust/commit/091380021a8f05bb3b533209e588a9f7c0e9486b"}, {"sha": "cc5088d2947c08732645a84d05ba51580352e0fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc5088d2947c08732645a84d05ba51580352e0fb", "html_url": "https://github.com/rust-lang/rust/commit/cc5088d2947c08732645a84d05ba51580352e0fb"}], "stats": {"total": 662, "additions": 455, "deletions": 207}, "files": [{"sha": "cbdeda7b902066da87fbab65b8ad9204fb7028f7", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -392,6 +392,12 @@ declare_lint! {\n     \"nested occurrence of `impl Trait` type\"\n }\n \n+declare_lint! {\n+    pub MUTABLE_BORROW_RESERVATION_CONFLICT,\n+    Warn,\n+    \"reservation of a two-phased borrow conflicts with other shared borrows\"\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -457,6 +463,7 @@ declare_lint_pass! {\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n         NESTED_IMPL_TRAIT,\n         DUPLICATE_MATCHER_BINDING_NAME,\n+        MUTABLE_BORROW_RESERVATION_CONFLICT,\n     ]\n }\n "}, {"sha": "5ebb915d57f5477955d24e4a961a70776bfed462", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -712,10 +712,14 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n             \"this was previously accepted by the compiler but is being phased out; \\\n              it will become a hard error\";\n \n-        let explanation = if lint_id == LintId::of(crate::lint::builtin::UNSTABLE_NAME_COLLISIONS) {\n+        let explanation = if lint_id == LintId::of(builtin::UNSTABLE_NAME_COLLISIONS) {\n             \"once this method is added to the standard library, \\\n              the ambiguity may cause an error or change in behavior!\"\n                 .to_owned()\n+        } else if lint_id == LintId::of(builtin::MUTABLE_BORROW_RESERVATION_CONFLICT) {\n+            \"this borrowing pattern was not meant to be accepted, \\\n+             and may become a hard error in the future\"\n+                .to_owned()\n         } else if let Some(edition) = future_incompatible.edition {\n             format!(\"{} in the {} edition!\", STANDARD_MESSAGE, edition)\n         } else {"}, {"sha": "348616790b0bc7c57ecab9240c5d9b94e2ec916c", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -266,7 +266,8 @@ impl ArgTypeExt<'ll, 'tcx> for ArgType<'tcx, Ty<'tcx>> {\n                 OperandValue::Ref(next(), Some(next()), self.layout.align.abi).store(bx, dst);\n             }\n             PassMode::Direct(_) | PassMode::Indirect(_, None) | PassMode::Cast(_) => {\n-                self.store(bx, next(), dst);\n+                let next_arg = next();\n+                self.store(bx, next_arg, dst);\n             }\n         }\n     }"}, {"sha": "07c505c6bde08e287f2883dae028b409ea133179", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -438,6 +438,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(MUTABLE_BORROW_RESERVATION_CONFLICT),\n+            reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n+            edition: None,\n+        }\n         ]);\n \n     // Register renamed and removed lints."}, {"sha": "c81da66672fbf70c84cfe4a9c831677e44137dfc", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -52,7 +52,7 @@ crate enum TwoPhaseActivation {\n     ActivatedAt(Location),\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n crate struct BorrowData<'tcx> {\n     /// Location where the borrow reservation starts.\n     /// In many cases, this will be equal to the activation location but not always."}, {"sha": "16436a1f2b076b7c9e38811cf69486dd208c7f72", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -318,7 +318,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         context: Context,\n         (place, _span): (&Place<'tcx>, Span),\n         borrow: &BorrowData<'tcx>,\n-    ) {\n+    ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n \n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n@@ -347,7 +347,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n             .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\", None);\n-        err.buffer(&mut self.errors_buffer);\n+        err\n     }\n \n     pub(super) fn report_conflicting_borrow(\n@@ -356,7 +356,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         (place, span): (&Place<'tcx>, Span),\n         gen_borrow_kind: BorrowKind,\n         issued_borrow: &BorrowData<'tcx>,\n-    ) {\n+    ) -> DiagnosticBuilder<'cx> {\n         let issued_spans = self.retrieve_borrow_spans(issued_borrow);\n         let issued_span = issued_spans.args_or_use();\n \n@@ -460,9 +460,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         \"borrow occurs due to use of `{}`{}\", desc_place, borrow_spans.describe()\n                     ),\n                 );\n-                err.buffer(&mut self.errors_buffer);\n \n-                return;\n+                return err;\n             }\n \n             (BorrowKind::Unique, _, _, _, _, _) => {\n@@ -563,7 +562,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             None,\n         );\n \n-        err.buffer(&mut self.errors_buffer);\n+        err\n     }\n \n     /// Returns the description of the root place for a conflicting borrow and the full"}, {"sha": "275d958a3ed3120f904f35cb4c45836362d305b5", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 95, "deletions": 24, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -6,6 +6,7 @@ use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::lint::builtin::UNUSED_MUT;\n+use rustc::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT};\n use rustc::middle::borrowck::SignalledError;\n use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{\n@@ -18,14 +19,15 @@ use rustc::ty::{self, TyCtxt};\n \n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, Level};\n use rustc_data_structures::bit_set::BitSet;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use smallvec::SmallVec;\n \n-use std::rc::Rc;\n use std::collections::BTreeMap;\n+use std::mem;\n+use std::rc::Rc;\n \n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n \n use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};\n use crate::dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError};\n@@ -238,6 +240,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         locals_are_invalidated_at_exit,\n         access_place_error_reported: Default::default(),\n         reservation_error_reported: Default::default(),\n+        reservation_warnings: Default::default(),\n         move_error_reported: BTreeMap::new(),\n         uninitialized_error_reported: Default::default(),\n         errors_buffer,\n@@ -260,6 +263,29 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     }\n     mbcx.analyze_results(&mut state); // entry point for DataflowResultsConsumer\n \n+    // Convert any reservation warnings into lints.\n+    let reservation_warnings = mem::replace(&mut mbcx.reservation_warnings, Default::default());\n+    for (_, (place, span, context, bk, borrow)) in reservation_warnings {\n+        let mut initial_diag = mbcx.report_conflicting_borrow(context, (&place, span), bk, &borrow);\n+\n+        let lint_root = if let ClearCrossCrate::Set(ref vsi) = mbcx.mir.source_scope_local_data {\n+            let scope = mbcx.mir.source_info(context.loc).scope;\n+            vsi[scope].lint_root\n+        } else {\n+            id\n+        };\n+\n+        // Span and message don't matter; we overwrite them below anyway\n+        let mut diag = mbcx.infcx.tcx.struct_span_lint_hir(\n+            MUTABLE_BORROW_RESERVATION_CONFLICT, lint_root, DUMMY_SP, \"\");\n+\n+        diag.message = initial_diag.styled_message().clone();\n+        diag.span = initial_diag.span.clone();\n+\n+        initial_diag.cancel();\n+        diag.buffer(&mut mbcx.errors_buffer);\n+    }\n+\n     // For each non-user used mutable variable, check if it's been assigned from\n     // a user-declared local. If so, then put that local into the used_mut set.\n     // Note that this set is expected to be small - only upvars from closures\n@@ -341,18 +367,9 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                     // if AST-borrowck signalled no errors, then\n                     // downgrade all the buffered MIR-borrowck errors\n                     // to warnings.\n-                    for err in &mut mbcx.errors_buffer {\n-                        if err.is_error() {\n-                            err.level = Level::Warning;\n-                            err.warn(\n-                                \"this error has been downgraded to a warning for backwards \\\n-                                 compatibility with previous releases\",\n-                            );\n-                            err.warn(\n-                                \"this represents potential undefined behavior in your code and \\\n-                                 this warning will become a hard error in the future\",\n-                            );\n-                        }\n+\n+                    for err in mbcx.errors_buffer.iter_mut() {\n+                        downgrade_if_error(err);\n                     }\n                 }\n                 SignalledError::SawSomeError => {\n@@ -378,6 +395,20 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     result\n }\n \n+fn downgrade_if_error(diag: &mut Diagnostic) {\n+    if diag.is_error() {\n+        diag.level = Level::Warning;\n+        diag.warn(\n+            \"this error has been downgraded to a warning for backwards \\\n+            compatibility with previous releases\",\n+        );\n+        diag.warn(\n+            \"this represents potential undefined behavior in your code and \\\n+            this warning will become a hard error in the future\",\n+        );\n+    }\n+}\n+\n pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n     mir: &'cx Mir<'tcx>,\n@@ -410,6 +441,13 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     // but it is currently inconvenient to track down the `BorrowIndex`\n     // at the time we detect and report a reservation error.\n     reservation_error_reported: FxHashSet<Place<'tcx>>,\n+    /// Migration warnings to be reported for #56254. We delay reporting these\n+    /// so that we can suppress the warning if there's a corresponding error\n+    /// for the activation of the borrow.\n+    reservation_warnings: FxHashMap<\n+        BorrowIndex,\n+        (Place<'tcx>, Span, Context, BorrowKind, BorrowData<'tcx>)\n+    >,\n     /// This field keeps track of move errors that are to be reported for given move indicies.\n     ///\n     /// There are situations where many errors can be reported for a single move out (see #53807)\n@@ -921,11 +959,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let conflict_error =\n             self.check_access_for_conflict(context, place_span, sd, rw, flow_state);\n \n+        if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {\n+            // Suppress this warning when there's an error being emited for the\n+            // same borrow: fixing the error is likely to fix the warning.\n+            self.reservation_warnings.remove(&borrow_idx);\n+        }\n+\n         if conflict_error || mutability_error {\n             debug!(\n                 \"access_place: logging error place_span=`{:?}` kind=`{:?}`\",\n                 place_span, kind\n             );\n+\n             self.access_place_error_reported\n                 .insert((place_span.0.clone(), place_span.1));\n         }\n@@ -976,8 +1021,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     Control::Continue\n                 }\n \n-                (Read(_), BorrowKind::Shared) | (Reservation(..), BorrowKind::Shared)\n-                | (Read(_), BorrowKind::Shallow) | (Reservation(..), BorrowKind::Shallow)\n+                (Read(_), BorrowKind::Shared)\n+                | (Read(_), BorrowKind::Shallow)\n                 | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Unique)\n                 | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Mut { .. }) => {\n                     Control::Continue\n@@ -991,28 +1036,53 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 (Read(kind), BorrowKind::Unique) | (Read(kind), BorrowKind::Mut { .. }) => {\n                     // Reading from mere reservations of mutable-borrows is OK.\n                     if !is_active(&this.dominators, borrow, context.loc) {\n-                        assert!(allow_two_phase_borrow(&this.infcx.tcx, borrow.kind));\n+                        assert!(allow_two_phase_borrow(&tcx, borrow.kind));\n                         return Control::Continue;\n                     }\n \n                     error_reported = true;\n                     match kind {\n                         ReadKind::Copy  => {\n                             this.report_use_while_mutably_borrowed(context, place_span, borrow)\n+                                .buffer(&mut this.errors_buffer);\n                         }\n                         ReadKind::Borrow(bk) => {\n-                            this.report_conflicting_borrow(context, place_span, bk, &borrow)\n+                            this.report_conflicting_borrow(context, place_span, bk, borrow)\n+                                .buffer(&mut this.errors_buffer);\n                         }\n                     }\n                     Control::Break\n                 }\n \n-                (Reservation(kind), BorrowKind::Unique)\n-                | (Reservation(kind), BorrowKind::Mut { .. })\n+                (Reservation(WriteKind::MutableBorrow(bk)), BorrowKind::Shallow)\n+                | (Reservation(WriteKind::MutableBorrow(bk)), BorrowKind::Shared) if {\n+                    tcx.migrate_borrowck()\n+                } => {\n+                    let bi = this.borrow_set.location_map[&context.loc];\n+                    debug!(\n+                        \"recording invalid reservation of place: {:?} with \\\n+                         borrow index {:?} as warning\",\n+                        place_span.0,\n+                        bi,\n+                    );\n+                    // rust-lang/rust#56254 - This was previously permitted on\n+                    // the 2018 edition so we emit it as a warning. We buffer\n+                    // these sepately so that we only emit a warning if borrow\n+                    // checking was otherwise successful.\n+                    this.reservation_warnings.insert(\n+                        bi,\n+                        (place_span.0.clone(), place_span.1, context, bk, borrow.clone()),\n+                    );\n+\n+                    // Don't suppress actual errors.\n+                    Control::Continue\n+                }\n+\n+                (Reservation(kind), _)\n                 | (Activation(kind, _), _)\n                 | (Write(kind), _) => {\n                     match rw {\n-                        Reservation(_) => {\n+                        Reservation(..) => {\n                             debug!(\n                                 \"recording invalid reservation of \\\n                                  place: {:?}\",\n@@ -1033,7 +1103,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     error_reported = true;\n                     match kind {\n                         WriteKind::MutableBorrow(bk) => {\n-                            this.report_conflicting_borrow(context, place_span, bk, &borrow)\n+                            this.report_conflicting_borrow(context, place_span, bk, borrow)\n+                                .buffer(&mut this.errors_buffer);\n                         }\n                         WriteKind::StorageDeadOrDrop => {\n                             this.report_borrowed_value_does_not_live_long_enough(\n@@ -1046,7 +1117,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             this.report_illegal_mutation_of_borrowed(context, place_span, borrow)\n                         }\n                         WriteKind::Move => {\n-                            this.report_move_out_while_borrowed(context, place_span, &borrow)\n+                            this.report_move_out_while_borrowed(context, place_span, borrow)\n                         }\n                     }\n                     Control::Break"}, {"sha": "9cbb3556017ccc1c2d98183681eb8dbb6eb7fc09", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -428,11 +428,11 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         // have already taken the reservation\n                     }\n \n-                    (Read(_), BorrowKind::Shallow) | (Reservation(..), BorrowKind::Shallow)\n-                    | (Read(_), BorrowKind::Shared) | (Reservation(..), BorrowKind::Shared)\n+                    (Read(_), BorrowKind::Shallow)\n+                    | (Read(_), BorrowKind::Shared)\n                     | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Unique)\n                     | (Read(ReadKind::Borrow(BorrowKind::Shallow)), BorrowKind::Mut { .. }) => {\n-                        // Reads/reservations don't invalidate shared or shallow borrows\n+                        // Reads don't invalidate shared or shallow borrows\n                     }\n \n                     (Read(_), BorrowKind::Unique) | (Read(_), BorrowKind::Mut { .. }) => {\n@@ -448,16 +448,15 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         this.generate_invalidates(borrow_index, context.loc);\n                     }\n \n-                    (Reservation(_), BorrowKind::Unique)\n-                        | (Reservation(_), BorrowKind::Mut { .. })\n-                        | (Activation(_, _), _)\n-                        | (Write(_), _) => {\n-                            // unique or mutable borrows are invalidated by writes.\n-                            // Reservations count as writes since we need to check\n-                            // that activating the borrow will be OK\n-                            // FIXME(bob_twinkles) is this actually the right thing to do?\n-                            this.generate_invalidates(borrow_index, context.loc);\n-                        }\n+                    (Reservation(_), _)\n+                    | (Activation(_, _), _)\n+                    | (Write(_), _) => {\n+                        // unique or mutable borrows are invalidated by writes.\n+                        // Reservations count as writes since we need to check\n+                        // that activating the borrow will be OK\n+                        // FIXME(bob_twinkles) is this actually the right thing to do?\n+                        this.generate_invalidates(borrow_index, context.loc);\n+                    }\n                 }\n                 Control::Continue\n             },"}, {"sha": "a393847fd4922a546a4c1c52f935cead07755254", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -164,7 +164,7 @@ impl MirPass for AddRetag {\n                         if src_ty.is_region_ptr() {\n                             // The only `Misc` casts on references are those creating raw pointers.\n                             assert!(dest_ty.is_unsafe_ptr());\n-                            (RetagKind::Raw, place)\n+                            (RetagKind::Raw, place.clone())\n                         } else {\n                             // Some other cast, no retag\n                             continue\n@@ -182,7 +182,7 @@ impl MirPass for AddRetag {\n                             _ =>\n                                 RetagKind::Default,\n                         };\n-                        (kind, place)\n+                        (kind, place.clone())\n                     }\n                     // Do nothing for the rest\n                     _ => continue,\n@@ -191,7 +191,7 @@ impl MirPass for AddRetag {\n                 let source_info = block_data.statements[i].source_info;\n                 block_data.statements.insert(i+1, Statement {\n                     source_info,\n-                    kind: StatementKind::Retag(retag_kind, place.clone()),\n+                    kind: StatementKind::Retag(retag_kind, place),\n                 });\n             }\n         }"}, {"sha": "24fbc9b6caf3fd8ddb4c9a14eb47d197bed2c852", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -347,9 +347,9 @@ impl<'a, 'b> Context<'a, 'b> {\n \n             Named(name) => {\n                 match self.names.get(&name) {\n-                    Some(idx) => {\n+                    Some(&idx) => {\n                         // Treat as positional arg.\n-                        self.verify_arg_type(Exact(*idx), ty)\n+                        self.verify_arg_type(Exact(idx), ty)\n                     }\n                     None => {\n                         let msg = format!(\"there is no argument named `{}`\", name);"}, {"sha": "9bfd8b994bf23b18f3bff6bc670c0717f92667f0", "filename": "src/test/ui/borrowck/two-phase-cannot-nest-mut-self-calls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -7,7 +7,7 @@ LL |     vec.get({\n    |     immutable borrow occurs here\n LL | \n LL |         vec.push(2);\n-   |         ^^^^^^^^^^^ mutable borrow occurs here\n+   |         ^^^ mutable borrow occurs here\n \n error: aborting due to previous error\n "}, {"sha": "28c997efc8af6e75292ab002e56546600985715f", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.ast.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.ast.stderr?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -0,0 +1,36 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                   - immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `v` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:15\n+   |\n+LL |     v.extend(&v);\n+   |     -         ^- mutable borrow ends here\n+   |     |         |\n+   |     |         immutable borrow occurs here\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                   - immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "bb11b2e4f0f3a6fdfe3fa230dbae52c8a1b1c3c5", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2015.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -0,0 +1,40 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^^------^^^^^^^^\n+   |     | |\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^      ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+   |\n+   = note: #[warn(mutable_borrow_reservation_conflict)] on by default\n+   = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n+   = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "bb11b2e4f0f3a6fdfe3fa230dbae52c8a1b1c3c5", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2018.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -0,0 +1,40 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^^------^^^^^^^^\n+   |     | |\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^      ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+   |\n+   = note: #[warn(mutable_borrow_reservation_conflict)] on by default\n+   = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n+   = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "fb3a1fda63161f5617b557462bbb6e49c3928e36", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2015.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -0,0 +1,35 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^        ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^      ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "fb3a1fda63161f5617b557462bbb6e49c3928e36", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2018.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -0,0 +1,35 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.extend(shared);\n+   |     ^        ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:30:5\n+   |\n+LL |     v.extend(&v);\n+   |     ^^------^--^\n+   |     | |      |\n+   |     | |      immutable borrow occurs here\n+   |     | immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:42:5\n+   |\n+LL |     let shared = &v;\n+   |                  -- immutable borrow occurs here\n+LL | \n+LL |     v.push(shared.len());\n+   |     ^      ------ immutable borrow later used here\n+   |     |\n+   |     mutable borrow occurs here\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "54fad9f66b874d0960ea944553f62a0af64390be", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.rs", "status": "modified", "additions": 48, "deletions": 18, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -1,24 +1,54 @@\n-// compile-flags: -Z borrowck=mir -Z two-phase-borrows\n-\n-// This is similar to two-phase-reservation-sharing-interference.rs\n-// in that it shows a reservation that overlaps with a shared borrow.\n-//\n-// Currently, this test fails with lexical lifetimes, but succeeds\n-// with non-lexical lifetimes. (The reason is because the activation\n-// of the mutable borrow ends up overlapping with a lexically-scoped\n-// shared borrow; but a non-lexical shared borrow can end before the\n-// activation occurs.)\n-//\n-// So this test is just making a note of the current behavior.\n-\n-#![feature(rustc_attrs)]\n-\n-#[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+// Test for #56254, we previously allowed the last example on the 2018\n+// editiion. Make sure that we now emit a warning in that case and an error for\n+// everyone else.\n+\n+//ignore-compare-mode-nll\n+\n+//revisions: ast migrate2015 migrate2018 nll2015 nll2018\n+\n+//[migrate2015] compile-flags: -Zborrowck=migrate -Ztwo-phase-borrows\n+//[migrate2018] edition:2018\n+//[nll2018] edition:2018\n+\n+#![cfg_attr(any(nll2015, nll2018), feature(nll))]\n+\n+fn double_conflicts() {\n+    let mut v = vec![0, 1, 2];\n+    let shared = &v;\n+\n+    v.extend(shared);\n+    //[migrate2015]~^ ERROR cannot borrow `v` as mutable\n+    //[nll2015]~^^ ERROR cannot borrow `v` as mutable\n+    //[migrate2018]~^^^ ERROR cannot borrow `v` as mutable\n+    //[nll2018]~^^^^ ERROR cannot borrow `v` as mutable\n+    //[ast]~^^^^^ ERROR cannot borrow `v` as mutable\n+}\n+\n+fn activation_conflict() {\n+    let mut v = vec![0, 1, 2];\n+\n+    v.extend(&v);\n+    //[migrate2015]~^ ERROR cannot borrow `v` as mutable\n+    //[nll2015]~^^ ERROR cannot borrow `v` as mutable\n+    //[migrate2018]~^^^ ERROR cannot borrow `v` as mutable\n+    //[nll2018]~^^^^ ERROR cannot borrow `v` as mutable\n+    //[ast]~^^^^^ ERROR cannot borrow `v` as immutable\n+}\n+\n+fn reservation_conflict() {\n     let mut v = vec![0, 1, 2];\n     let shared = &v;\n \n     v.push(shared.len());\n+    //[nll2015]~^ ERROR cannot borrow `v` as mutable\n+    //[nll2018]~^^ ERROR cannot borrow `v` as mutable\n+    //[migrate2015]~^^^ WARNING cannot borrow `v` as mutable\n+    //[migrate2015]~| WARNING may become a hard error in the future\n \n-    assert_eq!(v, [0, 1, 2, 3]);\n+    //[migrate2018]~^^^^^^ WARNING cannot borrow `v` as mutable\n+    //[migrate2018]~| WARNING may become a hard error in the future\n+\n+    //[ast]~^^^^^^^^^ ERROR cannot borrow `v` as mutable\n }\n+\n+fn main() {}"}, {"sha": "bcd743f47c53c9fc253f2a1ca139ee8e3a8a9042", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1,14 +0,0 @@\n-error: compilation successful\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:17:1\n-   |\n-LL | / fn main() {\n-LL | |     let mut v = vec![0, 1, 2];\n-LL | |     let shared = &v;\n-LL | |\n-...  |\n-LL | |     assert_eq!(v, [0, 1, 2, 3]);\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "0e1d77ace3f701820f702bce958cecb9d208a201", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-future-compat-lint.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.rs?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -0,0 +1,43 @@\n+// Check that the future-compat-lint for the reservation conflict is\n+// handled like any other lint.\n+\n+// edition:2018\n+\n+mod future_compat_allow {\n+    #![allow(mutable_borrow_reservation_conflict)]\n+\n+    fn reservation_conflict() {\n+        let mut v = vec![0, 1, 2];\n+        let shared = &v;\n+\n+        v.push(shared.len());\n+    }\n+}\n+\n+mod future_compat_warn {\n+    #![warn(mutable_borrow_reservation_conflict)]\n+\n+    fn reservation_conflict() {\n+        let mut v = vec![0, 1, 2];\n+        let shared = &v;\n+\n+        v.push(shared.len());\n+        //~^ WARNING cannot borrow `v` as mutable\n+        //~| WARNING may become a hard error in the future\n+    }\n+}\n+\n+mod future_compat_deny {\n+    #![deny(mutable_borrow_reservation_conflict)]\n+\n+    fn reservation_conflict() {\n+        let mut v = vec![0, 1, 2];\n+        let shared = &v;\n+\n+        v.push(shared.len());\n+        //~^ ERROR cannot borrow `v` as mutable\n+        //~| WARNING may become a hard error in the future\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "77fbfb37addd0e91497fe83392c795218a8a1e60", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-future-compat-lint.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dec0a98c4b392b5fd153ba8b944c496218717813/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.stderr?ref=dec0a98c4b392b5fd153ba8b944c496218717813", "patch": "@@ -0,0 +1,40 @@\n+warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:24:9\n+   |\n+LL |         let shared = &v;\n+   |                      -- immutable borrow occurs here\n+LL | \n+LL |         v.push(shared.len());\n+   |         ^      ------ immutable borrow later used here\n+   |         |\n+   |         mutable borrow occurs here\n+   |\n+note: lint level defined here\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:18:13\n+   |\n+LL |     #![warn(mutable_borrow_reservation_conflict)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n+   = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n+\n+error: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:37:9\n+   |\n+LL |         let shared = &v;\n+   |                      -- immutable borrow occurs here\n+LL | \n+LL |         v.push(shared.len());\n+   |         ^      ------ immutable borrow later used here\n+   |         |\n+   |         mutable borrow occurs here\n+   |\n+note: lint level defined here\n+  --> $DIR/two-phase-reservation-sharing-interference-future-compat-lint.rs:31:13\n+   |\n+LL |     #![deny(mutable_borrow_reservation_conflict)]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this borrowing pattern was not meant to be accepted, and may become a hard error in the future\n+   = note: for more information, see issue #59159 <https://github.com/rust-lang/rust/issues/59159>\n+\n+error: aborting due to previous error\n+"}, {"sha": "0f71452805db065fdb18004b2e61f5d922b495f1", "filename": "src/test/ui/nll/get_default.nll.stderr", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1,84 +0,0 @@\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:23:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:35:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/get_default.rs:41:17\n-   |\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:23:17\n-   |\n-LL | fn ok(map: &mut Map) -> &String {\n-   |            - let's call the lifetime of this reference `'1`\n-LL |     loop {\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 return v;\n-   |                        - returning this value requires that `*map` is borrowed for `'1`\n-...\n-LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:35:17\n-   |\n-LL | fn err(map: &mut Map) -> &String {\n-   |             - let's call the lifetime of this reference `'1`\n-LL |     loop {\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL |                 return v;\n-   |                        - returning this value requires that `*map` is borrowed for `'1`\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/get_default.rs:41:17\n-   |\n-LL | fn err(map: &mut Map) -> &String {\n-   |             - let's call the lifetime of this reference `'1`\n-LL |     loop {\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 return v;\n-   |                        - returning this value requires that `*map` is borrowed for `'1`\n-...\n-LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "ab8d96d4e9916c8ec5c2cdb5b46bb0ff357e2f66", "filename": "src/test/ui/nll/region-ends-after-if-condition.nll.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091380021a8f05bb3b533209e588a9f7c0e9486b/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr?ref=091380021a8f05bb3b533209e588a9f7c0e9486b", "patch": "@@ -1,39 +0,0 @@\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/region-ends-after-if-condition.rs:19:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                  --------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n-  --> $DIR/region-ends-after-if-condition.rs:29:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                  --------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL | }\n-   | - immutable borrow ends here\n-\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Mir)\n-  --> $DIR/region-ends-after-if-condition.rs:29:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                 ---------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL |     drop(value);\n-   |          ----- immutable borrow later used here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}]}