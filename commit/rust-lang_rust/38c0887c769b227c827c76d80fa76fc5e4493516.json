{"sha": "38c0887c769b227c827c76d80fa76fc5e4493516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YzA4ODdjNzY5YjIyN2M4MjdjNzZkODBmYTc2ZmM1ZTQ0OTM1MTY=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-25T14:01:08Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:31:35Z"}, "message": "Fix remaining Body -> (ReadOnly)BodyCache type errors in librustc_mir outside of librustc_mir/transform", "tree": {"sha": "e8de1d8fd7c896118e08e7b5090210b7d19dac9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8de1d8fd7c896118e08e7b5090210b7d19dac9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38c0887c769b227c827c76d80fa76fc5e4493516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38c0887c769b227c827c76d80fa76fc5e4493516", "html_url": "https://github.com/rust-lang/rust/commit/38c0887c769b227c827c76d80fa76fc5e4493516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38c0887c769b227c827c76d80fa76fc5e4493516/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3642a71da21005366e5ab270cf4a347d5abeca54", "url": "https://api.github.com/repos/rust-lang/rust/commits/3642a71da21005366e5ab270cf4a347d5abeca54", "html_url": "https://github.com/rust-lang/rust/commit/3642a71da21005366e5ab270cf4a347d5abeca54"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "c80b6e38ac5040b20715341e5b5e331da6d93173", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/38c0887c769b227c827c76d80fa76fc5e4493516/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c0887c769b227c827c76d80fa76fc5e4493516/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=38c0887c769b227c827c76d80fa76fc5e4493516", "patch": "@@ -202,21 +202,23 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n         sig.inputs().len(),\n         span);\n \n+    let mut body_cache = BodyCache::new(&mut body);\n+\n     if let Some(..) = ty {\n         // The first argument (index 0), but add 1 for the return value.\n         let dropee_ptr = Place::from(Local::new(1+0));\n         if tcx.sess.opts.debugging_opts.mir_emit_retag {\n             // Function arguments should be retagged, and we make this one raw.\n-            body.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n+            body_cache.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n                 source_info,\n                 kind: StatementKind::Retag(RetagKind::Raw, box(dropee_ptr.clone())),\n             });\n         }\n         let patch = {\n             let param_env = tcx.param_env(def_id).with_reveal_all();\n             let mut elaborator = DropShimElaborator {\n-                body: &body,\n-                patch: MirPatch::new(&body),\n+                body: body_cache.body(),\n+                patch: MirPatch::new(body_cache.body()),\n                 tcx,\n                 param_env\n             };\n@@ -233,9 +235,10 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n             );\n             elaborator.patch\n         };\n-        patch.apply(&mut body);\n+        patch.apply(&mut body_cache);\n     }\n \n+    // TODO(pfaia) return owning body cache...\n     body\n }\n "}, {"sha": "11b61bcd48444821d484665bd7ed07388bd71bab", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38c0887c769b227c827c76d80fa76fc5e4493516/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38c0887c769b227c827c76d80fa76fc5e4493516/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=38c0887c769b227c827c76d80fa76fc5e4493516", "patch": "@@ -1,6 +1,6 @@\n //! Def-use analysis.\n \n-use rustc::mir::{Body, Local, Location, PlaceElem, VarDebugInfo};\n+use rustc::mir::{Body, BodyCache, Local, Location, PlaceElem, ReadOnlyBodyCache, VarDebugInfo};\n use rustc::mir::visit::{PlaceContext, MutVisitor, Visitor};\n use rustc::ty::TyCtxt;\n use rustc_index::vec::IndexVec;\n@@ -30,15 +30,15 @@ impl DefUseAnalysis {\n         }\n     }\n \n-    pub fn analyze(&mut self, body: &Body<'_>) {\n+    pub fn analyze(&mut self, body_cache: &ReadOnlyBodyCache<'_, '_>) {\n         self.clear();\n \n         let mut finder = DefUseFinder {\n             info: mem::take(&mut self.info),\n             var_debug_info_index: 0,\n             in_var_debug_info: false,\n         };\n-        finder.visit_body(body);\n+        finder.visit_body(body_cache);\n         self.info = finder.info\n     }\n \n@@ -55,28 +55,28 @@ impl DefUseAnalysis {\n     fn mutate_defs_and_uses(\n         &self,\n         local: Local,\n-        body: &mut Body<'tcx>,\n+        body_cache: &mut BodyCache<&mut Body<'tcx>>,\n         new_local: Local,\n         tcx: TyCtxt<'tcx>,\n     ) {\n-        let mut visitor = MutateUseVisitor::new(local, new_local, body, tcx);\n+        let mut visitor = MutateUseVisitor::new(local, new_local, tcx);\n         let info = &self.info[local];\n         for place_use in &info.defs_and_uses {\n-            visitor.visit_location(body, place_use.location)\n+            visitor.visit_location(body_cache, place_use.location)\n         }\n         // Update debuginfo as well, alongside defs/uses.\n         for &i in &info.var_debug_info_indices {\n-            visitor.visit_var_debug_info(&mut body.var_debug_info[i]);\n+            visitor.visit_var_debug_info(&mut body_cache.var_debug_info[i]);\n         }\n     }\n \n     // FIXME(pcwalton): this should update the def-use chains.\n     pub fn replace_all_defs_and_uses_with(&self,\n                                           local: Local,\n-                                          body: &mut Body<'tcx>,\n+                                          body_cache: &mut BodyCache<&mut Body<'tcx>>,\n                                           new_local: Local,\n                                           tcx: TyCtxt<'tcx>) {\n-        self.mutate_defs_and_uses(local, body, new_local, tcx)\n+        self.mutate_defs_and_uses(local, body_cache, new_local, tcx)\n     }\n }\n \n@@ -156,7 +156,6 @@ impl MutateUseVisitor<'tcx> {\n     fn new(\n         query: Local,\n         new_local: Local,\n-        _: &Body<'tcx>,\n         tcx: TyCtxt<'tcx>,\n     ) -> MutateUseVisitor<'tcx> {\n         MutateUseVisitor { query, new_local, tcx }"}]}