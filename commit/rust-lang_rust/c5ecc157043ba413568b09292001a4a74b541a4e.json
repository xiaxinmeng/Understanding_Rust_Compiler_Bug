{"sha": "c5ecc157043ba413568b09292001a4a74b541a4e", "node_id": "C_kwDOAAsO6NoAKGM1ZWNjMTU3MDQzYmE0MTM1NjhiMDkyOTIwMDFhNGE3NGI1NDFhNGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-15T12:41:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-15T12:41:42Z"}, "message": "Auto merge of #91962 - matthiaskrgr:rollup-2g082jw, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #91880 (fix clippy::single_char_pattern perf findings)\n - #91885 (Remove `in_band_lifetimes` from `rustc_codegen_ssa`)\n - #91898 (Make `TyS::is_suggestable` check for non-suggestable types structually)\n - #91915 (Add another regression test for unnormalized fn args with Self)\n - #91916 (Fix a bunch of typos)\n - #91918 (Constify `bool::then{,_some}`)\n - #91920 (Use `tcx.def_path_hash` in `ExistentialPredicate.stable_cmp`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "09b6c9ea699750d2d8245bf1b2cbc9d0526c3c92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09b6c9ea699750d2d8245bf1b2cbc9d0526c3c92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5ecc157043ba413568b09292001a4a74b541a4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ecc157043ba413568b09292001a4a74b541a4e", "html_url": "https://github.com/rust-lang/rust/commit/c5ecc157043ba413568b09292001a4a74b541a4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5ecc157043ba413568b09292001a4a74b541a4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46", "html_url": "https://github.com/rust-lang/rust/commit/3ee016ae4d4c6ee4a34faa2eb7fdae2ffa7c9b46"}, {"sha": "990cf5bca455fe9082b29f24ffc409a182ab48bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/990cf5bca455fe9082b29f24ffc409a182ab48bf", "html_url": "https://github.com/rust-lang/rust/commit/990cf5bca455fe9082b29f24ffc409a182ab48bf"}], "stats": {"total": 493, "additions": 283, "deletions": 210}, "files": [{"sha": "e29c109f12d599149760c86bb07eaf94a6fdd463", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -2226,8 +2226,8 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                     continue;\n                 }\n \n-                let canonical = f.replace(\"-\", \"_\");\n-                let canonical_name = name.replace(\"-\", \"_\");\n+                let canonical = f.replace('-', \"_\");\n+                let canonical_name = name.replace('-', \"_\");\n \n                 let is_rust_object =\n                     canonical.starts_with(&canonical_name) && looks_like_rust_object_file(&f);"}, {"sha": "baafa74b13146b9e5c9254791112df97ac6575d9", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -154,7 +154,7 @@ fn is_reachable_non_generic_provider_extern(tcx: TyCtxt<'_>, def_id: DefId) -> b\n     tcx.reachable_non_generics(def_id.krate).contains_key(&def_id)\n }\n \n-fn exported_symbols_provider_local(\n+fn exported_symbols_provider_local<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     cnum: CrateNum,\n ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {"}, {"sha": "1dac528481d8c25690ec96d447295c99c9879b04", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -486,7 +486,7 @@ fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n pub fn codegen_crate<B: ExtraBackendMethods>(\n     backend: B,\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'_>,\n     target_cpu: String,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,"}, {"sha": "1a6495cb15cf28fe6df5e080f4266a25973a6f5a", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -150,9 +150,9 @@ impl<'tcx> FunctionCoverage<'tcx> {\n     /// Generate an array of CounterExpressions, and an iterator over all `Counter`s and their\n     /// associated `Regions` (from which the LLVM-specific `CoverageMapGenerator` will create\n     /// `CounterMappingRegion`s.\n-    pub fn get_expressions_and_counter_regions<'a>(\n-        &'a self,\n-    ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &'a CodeRegion)>) {\n+    pub fn get_expressions_and_counter_regions(\n+        &self,\n+    ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &CodeRegion)>) {\n         assert!(\n             self.source_hash != 0 || !self.is_used,\n             \"No counters provided the source_hash for used function: {:?}\",\n@@ -168,7 +168,7 @@ impl<'tcx> FunctionCoverage<'tcx> {\n         (counter_expressions, counter_regions)\n     }\n \n-    fn counter_regions<'a>(&'a self) -> impl Iterator<Item = (Counter, &'a CodeRegion)> {\n+    fn counter_regions(&self) -> impl Iterator<Item = (Counter, &CodeRegion)> {\n         self.counters.iter_enumerated().filter_map(|(index, entry)| {\n             // Option::map() will return None to filter out missing counters. This may happen\n             // if, for example, a MIR-instrumented counter is removed during an optimization.\n@@ -177,8 +177,8 @@ impl<'tcx> FunctionCoverage<'tcx> {\n     }\n \n     fn expressions_with_regions(\n-        &'a self,\n-    ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &'a CodeRegion)>) {\n+        &self,\n+    ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &CodeRegion)>) {\n         let mut counter_expressions = Vec::with_capacity(self.expressions.len());\n         let mut expression_regions = Vec::with_capacity(self.expressions.len());\n         let mut new_indexes = IndexVec::from_elem_n(None, self.expressions.len());\n@@ -336,7 +336,7 @@ impl<'tcx> FunctionCoverage<'tcx> {\n         (counter_expressions, expression_regions.into_iter())\n     }\n \n-    fn unreachable_regions<'a>(&'a self) -> impl Iterator<Item = (Counter, &'a CodeRegion)> {\n+    fn unreachable_regions(&self) -> impl Iterator<Item = (Counter, &CodeRegion)> {\n         self.unreachable_regions.iter().map(|region| (Counter::zero(), region))\n     }\n "}, {"sha": "b03124769a06febbd7631316eb208093c266a819", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -376,7 +376,7 @@ fn push_debuginfo_type_name<'tcx>(\n     // format (natvis) is able to understand enums and render the active variant correctly in the\n     // debugger. For more information, look in `src/etc/natvis/intrinsic.natvis` and\n     // `EnumMemberDescriptionFactor::create_member_descriptions`.\n-    fn msvc_enum_fallback(\n+    fn msvc_enum_fallback<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         ty: Ty<'tcx>,\n         def: &AdtDef,\n@@ -496,7 +496,7 @@ pub fn compute_debuginfo_vtable_name<'tcx>(\n     vtable_name\n }\n \n-pub fn push_item_name(tcx: TyCtxt<'tcx>, def_id: DefId, qualified: bool, output: &mut String) {\n+pub fn push_item_name(tcx: TyCtxt<'_>, def_id: DefId, qualified: bool, output: &mut String) {\n     let def_key = tcx.def_key(def_id);\n     if qualified {\n         if let Some(parent) = def_key.parent {\n@@ -509,7 +509,7 @@ pub fn push_item_name(tcx: TyCtxt<'tcx>, def_id: DefId, qualified: bool, output:\n }\n \n fn push_unqualified_item_name(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'_>,\n     def_id: DefId,\n     disambiguated_data: DisambiguatedDefPathData,\n     output: &mut String,"}, {"sha": "350199f4e98c29ec99701a85e0aa856ee6643074", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -2,7 +2,6 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(try_blocks)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(nll)]"}, {"sha": "b1b3f1d6d81b97d3689da5da1ea21f03ed848af8", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -73,7 +73,7 @@ struct LocalAnalyzer<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     locals: IndexVec<mir::Local, LocalKind>,\n }\n \n-impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n+impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n     fn assign(&mut self, local: mir::Local, location: Location) {\n         let kind = &mut self.locals[local];\n         match *kind {"}, {"sha": "0c526ff13f2bae88cdf9df75230f47fc3c60ec4a", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -47,7 +47,7 @@ pub struct OperandRef<'tcx, V> {\n     pub layout: TyAndLayout<'tcx>,\n }\n \n-impl<V: CodegenObject> fmt::Debug for OperandRef<'tcx, V> {\n+impl<V: CodegenObject> fmt::Debug for OperandRef<'_, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"OperandRef({:?} @ {:?})\", self.val, self.layout)\n     }"}, {"sha": "5d3f07317a37b0ad36dd40be80e578e7985ab644", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -97,7 +97,7 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n     }\n }\n \n-impl<T> DerivedTypeMethods<'tcx> for T where Self: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {}\n+impl<'tcx, T> DerivedTypeMethods<'tcx> for T where Self: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {}\n \n pub trait LayoutTypeMethods<'tcx>: Backend<'tcx> {\n     fn backend_type(&self, layout: TyAndLayout<'tcx>) -> Self::Type;\n@@ -135,4 +135,4 @@ pub trait ArgAbiMethods<'tcx>: HasCodegen<'tcx> {\n \n pub trait TypeMethods<'tcx>: DerivedTypeMethods<'tcx> + LayoutTypeMethods<'tcx> {}\n \n-impl<T> TypeMethods<'tcx> for T where Self: DerivedTypeMethods<'tcx> + LayoutTypeMethods<'tcx> {}\n+impl<'tcx, T> TypeMethods<'tcx> for T where Self: DerivedTypeMethods<'tcx> + LayoutTypeMethods<'tcx> {}"}, {"sha": "12e0b7a4977e1cf88130901ac251958a77951cf0", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -872,7 +872,7 @@ Available lint options:\n \n     let print_lints = |lints: Vec<&Lint>| {\n         for lint in lints {\n-            let name = lint.name_lower().replace(\"_\", \"-\");\n+            let name = lint.name_lower().replace('_', \"-\");\n             println!(\n                 \"    {}  {:7.7}  {}\",\n                 padded(&name),\n@@ -908,10 +908,10 @@ Available lint options:\n \n     let print_lint_groups = |lints: Vec<(&'static str, Vec<LintId>)>| {\n         for (name, to) in lints {\n-            let name = name.to_lowercase().replace(\"_\", \"-\");\n+            let name = name.to_lowercase().replace('_', \"-\");\n             let desc = to\n                 .into_iter()\n-                .map(|x| x.to_string().replace(\"_\", \"-\"))\n+                .map(|x| x.to_string().replace('_', \"-\"))\n                 .collect::<Vec<String>>()\n                 .join(\", \");\n             println!(\"    {}  {}\", padded(&name), desc);\n@@ -960,7 +960,7 @@ fn print_flag_list<T>(\n         println!(\n             \"    {} {:>width$}=val -- {}\",\n             cmdline_opt,\n-            name.replace(\"_\", \"-\"),\n+            name.replace('_', \"-\"),\n             desc,\n             width = max_len\n         );\n@@ -1015,7 +1015,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n                 .iter()\n                 .map(|&(name, ..)| ('C', name))\n                 .chain(DB_OPTIONS.iter().map(|&(name, ..)| ('Z', name)))\n-                .find(|&(_, name)| *opt == name.replace(\"_\", \"-\"))\n+                .find(|&(_, name)| *opt == name.replace('_', \"-\"))\n                 .map(|(flag, _)| format!(\"{}. Did you mean `-{} {}`?\", e, flag, opt)),\n             _ => None,\n         };"}, {"sha": "e318090ebe15aec658917b35b2c4b903589f3a01", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -472,7 +472,7 @@ pub trait Labeller<'a> {\n /// Escape tags in such a way that it is suitable for inclusion in a\n /// Graphviz HTML label.\n pub fn escape_html(s: &str) -> String {\n-    s.replace(\"&\", \"&amp;\").replace(\"\\\"\", \"&quot;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\n+    s.replace('&', \"&amp;\").replace('\\\"', \"&quot;\").replace('<', \"&lt;\").replace('>', \"&gt;\")\n }\n \n impl<'a> LabelText<'a> {"}, {"sha": "34865900495c753b23201f1b0d84286b951edfce", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -584,7 +584,7 @@ fn output_conflicts_with_dir(output_paths: &[PathBuf]) -> Option<PathBuf> {\n fn escape_dep_filename(filename: &str) -> String {\n     // Apparently clang and gcc *only* escape spaces:\n     // https://llvm.org/klaus/clang/commit/9d50634cfc268ecc9a7250226dd5ca0e945240d4\n-    filename.replace(\" \", \"\\\\ \")\n+    filename.replace(' ', \"\\\\ \")\n }\n \n // Makefile comments only need escaping newlines and `\\`."}, {"sha": "a6432b301743a292b63ee6aab566dd0e7ec8a114", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -295,7 +295,7 @@ pub fn struct_lint_level<'s, 'd>(\n                     Level::Allow => \"-A\",\n                     Level::ForceWarn => \"--force-warn\",\n                 };\n-                let hyphen_case_lint_name = name.replace(\"_\", \"-\");\n+                let hyphen_case_lint_name = name.replace('_', \"-\");\n                 if lint_flag_val.as_str() == name {\n                     sess.diag_note_once(\n                         &mut err,\n@@ -306,7 +306,7 @@ pub fn struct_lint_level<'s, 'd>(\n                         ),\n                     );\n                 } else {\n-                    let hyphen_case_flag_val = lint_flag_val.as_str().replace(\"_\", \"-\");\n+                    let hyphen_case_flag_val = lint_flag_val.as_str().replace('_', \"-\");\n                     sess.diag_note_once(\n                         &mut err,\n                         DiagnosticMessageId::from(lint),"}, {"sha": "c907680bda14aab6068bd00ff6358223631e1aca", "filename": "compiler/rustc_middle/src/mir/generic_graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -126,7 +126,7 @@ impl<\n             write!(\n                 w,\n                 r#\"<tr><td align=\"left\" balign=\"left\">{}</td></tr>\"#,\n-                dot::escape_html(&section).replace(\"\\n\", \"<br/>\")\n+                dot::escape_html(&section).replace('\\n', \"<br/>\")\n             )?;\n         }\n \n@@ -147,7 +147,7 @@ impl<\n             let src = self.node(source);\n             let trg = self.node(target);\n             let escaped_edge_label = if let Some(edge_label) = edge_labels.get(index) {\n-                dot::escape_html(edge_label).replace(\"\\n\", r#\"<br align=\"left\"/>\"#)\n+                dot::escape_html(edge_label).replace('\\n', r#\"<br align=\"left\"/>\"#)\n             } else {\n                 \"\".to_owned()\n             };"}, {"sha": "507f9971981b0a5b6270715faeae44b6596ab931", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -681,13 +681,13 @@ fn hir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<&'tcx rustc_hir::B\n }\n \n fn escape_html(s: &str) -> String {\n-    s.replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\n+    s.replace('&', \"&amp;\").replace('<', \"&lt;\").replace('>', \"&gt;\")\n }\n \n fn escape_attr(s: &str) -> String {\n-    s.replace(\"&\", \"&amp;\")\n-        .replace(\"\\\"\", \"&quot;\")\n-        .replace(\"'\", \"&#39;\")\n-        .replace(\"<\", \"&lt;\")\n-        .replace(\">\", \"&gt;\")\n+    s.replace('&', \"&amp;\")\n+        .replace('\\\"', \"&quot;\")\n+        .replace('\\'', \"&#39;\")\n+        .replace('<', \"&lt;\")\n+        .replace('>', \"&gt;\")\n }"}, {"sha": "ee00f6c62f345005f9257a08de20dc0428b45125", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,7 +1,12 @@\n //! Diagnostics related methods for `TyS`.\n \n+use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::TyKind::*;\n-use crate::ty::{InferTy, TyCtxt, TyS};\n+use crate::ty::{\n+    ConstKind, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, InferTy,\n+    ProjectionTy, TyCtxt, TyS, TypeAndMut,\n+};\n+\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n@@ -63,16 +68,55 @@ impl<'tcx> TyS<'tcx> {\n \n     /// Whether the type can be safely suggested during error recovery.\n     pub fn is_suggestable(&self) -> bool {\n-        !matches!(\n-            self.kind(),\n+        fn generic_arg_is_suggestible(arg: GenericArg<'_>) -> bool {\n+            match arg.unpack() {\n+                GenericArgKind::Type(ty) => ty.is_suggestable(),\n+                GenericArgKind::Const(c) => const_is_suggestable(c.val),\n+                _ => true,\n+            }\n+        }\n+\n+        fn const_is_suggestable(kind: ConstKind<'_>) -> bool {\n+            match kind {\n+                ConstKind::Infer(..)\n+                | ConstKind::Bound(..)\n+                | ConstKind::Placeholder(..)\n+                | ConstKind::Error(..) => false,\n+                _ => true,\n+            }\n+        }\n+\n+        // FIXME(compiler-errors): Some types are still not good to suggest,\n+        // specifically references with lifetimes within the function. Not\n+        //sure we have enough information to resolve whether a region is\n+        // temporary, so I'll leave this as a fixme.\n+\n+        match self.kind() {\n             Opaque(..)\n-                | FnDef(..)\n-                | FnPtr(..)\n-                | Dynamic(..)\n-                | Closure(..)\n-                | Infer(..)\n-                | Projection(..)\n-        )\n+            | FnDef(..)\n+            | Closure(..)\n+            | Infer(..)\n+            | Generator(..)\n+            | GeneratorWitness(..)\n+            | Bound(_, _)\n+            | Placeholder(_)\n+            | Error(_) => false,\n+            Dynamic(dty, _) => dty.iter().all(|pred| match pred.skip_binder() {\n+                ExistentialPredicate::Trait(ExistentialTraitRef { substs, .. }) => {\n+                    substs.iter().all(generic_arg_is_suggestible)\n+                }\n+                ExistentialPredicate::Projection(ExistentialProjection { substs, ty, .. }) => {\n+                    ty.is_suggestable() && substs.iter().all(generic_arg_is_suggestible)\n+                }\n+                _ => true,\n+            }),\n+            Projection(ProjectionTy { substs: args, .. }) | Adt(_, args) | Tuple(args) => {\n+                args.iter().all(generic_arg_is_suggestible)\n+            }\n+            Slice(ty) | RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => ty.is_suggestable(),\n+            Array(ty, c) => ty.is_suggestable() && const_is_suggestable(c.val),\n+            _ => true,\n+        }\n     }\n }\n "}, {"sha": "1c525fb55e1b57aec4c2c958d2ed17dde0c164bc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -787,7 +787,7 @@ impl<'tcx> ExistentialPredicate<'tcx> {\n                 tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))\n             }\n             (AutoTrait(ref a), AutoTrait(ref b)) => {\n-                tcx.trait_def(*a).def_path_hash.cmp(&tcx.trait_def(*b).def_path_hash)\n+                tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))\n             }\n             (Trait(_), _) => Ordering::Less,\n             (Projection(_), Trait(_)) => Ordering::Greater,"}, {"sha": "c61ee6f7e6cb784f8cb5c002f9ffdf9ba2fe4b40", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -148,7 +148,7 @@ impl DebugOptions {\n         let mut counter_format = ExpressionFormat::default();\n \n         if let Ok(env_debug_options) = std::env::var(RUSTC_COVERAGE_DEBUG_OPTIONS) {\n-            for setting_str in env_debug_options.replace(\" \", \"\").replace(\"-\", \"_\").split(',') {\n+            for setting_str in env_debug_options.replace(' ', \"\").replace('-', \"_\").split(',') {\n                 let (option, value) = match setting_str.split_once('=') {\n                     None => (setting_str, None),\n                     Some((k, v)) => (k, Some(v)),"}, {"sha": "b5356a817f7ac5e25dc8c7d05268450172c9334f", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -155,7 +155,7 @@ impl CoverageSpan {\n         format!(\n             \"{}\\n    {}\",\n             source_range_no_file(tcx, &self.span),\n-            self.format_coverage_statements(tcx, mir_body).replace(\"\\n\", \"\\n    \"),\n+            self.format_coverage_statements(tcx, mir_body).replace('\\n', \"\\n    \"),\n         )\n     }\n "}, {"sha": "9677e7642b88c9c4f522eb51dae3a4ac2b76fd0c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -2236,7 +2236,7 @@ impl<'a> Parser<'a> {\n             err.span_suggestion(\n                 seq_span,\n                 \"...or a vertical bar to match on multiple alternatives\",\n-                seq_snippet.replace(\",\", \" |\"),\n+                seq_snippet.replace(',', \" |\"),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "6f86bafbe458144ed3da5c5b3a5e82ec895e4bc2", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1036,7 +1036,7 @@ fn find_config(supplied: Option<Config>) -> Config {\n \n // Helper function to escape quotes in a string\n fn escape(s: String) -> String {\n-    s.replace(\"\\\"\", \"\\\"\\\"\")\n+    s.replace('\\\"', \"\\\"\\\"\")\n }\n \n // Helper function to determine if a span came from a"}, {"sha": "50a8f0336728e2276f55aed853bc7cee31562bbb", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1213,7 +1213,7 @@ pub fn get_cmd_lint_options(\n             if lint_name == \"help\" {\n                 describe_lints = true;\n             } else {\n-                lint_opts_with_position.push((arg_pos, lint_name.replace(\"-\", \"_\"), level));\n+                lint_opts_with_position.push((arg_pos, lint_name.replace('-', \"_\"), level));\n             }\n         }\n     }"}, {"sha": "dc5f4ee0ece0cd0ccad378fd6ec73dad9ddca585", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -335,7 +335,7 @@ fn build_options<O: Default>(\n             Some((k, v)) => (k.to_string(), Some(v)),\n         };\n \n-        let option_to_lookup = key.replace(\"-\", \"_\");\n+        let option_to_lookup = key.replace('-', \"_\");\n         match descrs.iter().find(|(name, ..)| *name == option_to_lookup) {\n             Some((_, setter, type_desc, _)) => {\n                 if !setter(&mut op, value) {"}, {"sha": "5689b723ad6104c65ec57e2dc2b7721c01bded7e", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -85,7 +85,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n                 );\n                 sess.err(&msg);\n             } else {\n-                return validate(s.replace(\"-\", \"_\"), None);\n+                return validate(s.replace('-', \"_\"), None);\n             }\n         }\n     }"}, {"sha": "8624f8c8442e1f3394f1c4bbbfaf955e2cd6234d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -747,7 +747,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                     let msg = format!(\n                         \"the trait bound `{}: {}` is not satisfied\",\n-                        orig_ty.to_string(),\n+                        orig_ty,\n                         old_ref.print_only_trait_path(),\n                     );\n                     if has_custom_message {"}, {"sha": "bfe66b2687ef4d89644a76df2901784bb35a7f19", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -3,7 +3,7 @@ use std::mem::MaybeUninit;\n use std::ptr::NonNull;\n \n #[test]\n-fn unitialized_zero_size_box() {\n+fn uninitialized_zero_size_box() {\n     assert_eq!(\n         &*Box::<()>::new_uninit() as *const _,\n         NonNull::<MaybeUninit<()>>::dangling().as_ptr(),"}, {"sha": "7bd0abbad0192939be8faad7dc1c531be3ec8e72", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -162,7 +162,7 @@ fn test_join_for_different_lengths_with_long_separator() {\n }\n \n #[test]\n-fn test_join_isue_80335() {\n+fn test_join_issue_80335() {\n     use core::{borrow::Borrow, cell::Cell};\n \n     struct WeirdBorrow {"}, {"sha": "ea639268652c3e7140fb19b595abcfcbded95bf1", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -157,11 +157,11 @@ impl Layout {\n     ///\n     /// - If `T` is `Sized`, this function is always safe to call.\n     /// - If the unsized tail of `T` is:\n-    ///     - a [slice], then the length of the slice tail must be an intialized\n+    ///     - a [slice], then the length of the slice tail must be an initialized\n     ///       integer, and the size of the *entire value*\n     ///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n     ///     - a [trait object], then the vtable part of the pointer must point\n-    ///       to a valid vtable for the type `T` acquired by an unsizing coersion,\n+    ///       to a valid vtable for the type `T` acquired by an unsizing coercion,\n     ///       and the size of the *entire value*\n     ///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n     ///     - an (unstable) [extern type], then this function is always safe to"}, {"sha": "d5119d0b7c3286f70153d9c28a6393fec1f061db", "filename": "library/core/src/bool.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fbool.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -14,8 +14,12 @@ impl bool {\n     /// assert_eq!(true.then_some(0), Some(0));\n     /// ```\n     #[unstable(feature = \"bool_to_option\", issue = \"80967\")]\n+    #[rustc_const_unstable(feature = \"const_bool_to_option\", issue = \"91917\")]\n     #[inline]\n-    pub fn then_some<T>(self, t: T) -> Option<T> {\n+    pub const fn then_some<T>(self, t: T) -> Option<T>\n+    where\n+        T: ~const Drop,\n+    {\n         if self { Some(t) } else { None }\n     }\n \n@@ -29,8 +33,13 @@ impl bool {\n     /// assert_eq!(true.then(|| 0), Some(0));\n     /// ```\n     #[stable(feature = \"lazy_bool_to_option\", since = \"1.50.0\")]\n+    #[rustc_const_unstable(feature = \"const_bool_to_option\", issue = \"91917\")]\n     #[inline]\n-    pub fn then<T, F: FnOnce() -> T>(self, f: F) -> Option<T> {\n+    pub const fn then<T, F>(self, f: F) -> Option<T>\n+    where\n+        F: ~const FnOnce() -> T,\n+        F: ~const Drop,\n+    {\n         if self { Some(f()) } else { None }\n     }\n }"}, {"sha": "bc3f7167fac3a9dd4dae0c4ca02c8c9122586580", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -898,7 +898,7 @@ impl<T: ?Sized> RefCell<T> {\n                 Ok(Ref { value: unsafe { &*self.value.get() }, borrow: b })\n             }\n             None => Err(BorrowError {\n-                // If a borrow occured, then we must already have an outstanding borrow,\n+                // If a borrow occurred, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n                 location: self.borrowed_at.get().unwrap(),\n@@ -983,7 +983,7 @@ impl<T: ?Sized> RefCell<T> {\n                 Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })\n             }\n             None => Err(BorrowMutError {\n-                // If a borrow occured, then we must already have an outstanding borrow,\n+                // If a borrow occurred, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n                 location: self.borrowed_at.get().unwrap(),\n@@ -1104,7 +1104,7 @@ impl<T: ?Sized> RefCell<T> {\n             Ok(unsafe { &*self.value.get() })\n         } else {\n             Err(BorrowError {\n-                // If a borrow occured, then we must already have an outstanding borrow,\n+                // If a borrow occurred, then we must already have an outstanding borrow,\n                 // so `borrowed_at` will be `Some`\n                 #[cfg(feature = \"debug_refcell\")]\n                 location: self.borrowed_at.get().unwrap(),"}, {"sha": "f50e71da20f160d83806b9e82e67c3107e0ad1bf", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -516,7 +516,7 @@ impl<A: Debug + TrustedRandomAccessNoCoerce, B: Debug + TrustedRandomAccessNoCoe\n /// * It must also be safe to drop `self` after calling `self.__iterator_get_unchecked(idx)`.\n /// * If `T` is a subtype of `Self`, then it must be safe to coerce `self` to `T`.\n //\n-// FIXME: Clarify interaction with SourceIter/InPlaceIterable. Calling `SouceIter::as_inner`\n+// FIXME: Clarify interaction with SourceIter/InPlaceIterable. Calling `SourceIter::as_inner`\n // after `__iterator_get_unchecked` is supposed to be allowed.\n #[doc(hidden)]\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]"}, {"sha": "0ae94c05da6583c11d3df41058fa9eee57050202", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -777,7 +777,7 @@ range_exact_iter_impl! {\n     usize u8 u16\n     isize i8 i16\n \n-    // These are incorect per the reasoning above,\n+    // These are incorrect per the reasoning above,\n     // but removing them would be a breaking change as they were stabilized in Rust 1.0.0.\n     // So e.g. `(0..66_000_u32).len()` for example will compile without error or warnings\n     // on 16-bit platforms, but continue to give a wrong result.\n@@ -805,7 +805,7 @@ range_incl_exact_iter_impl! {\n     u8\n     i8\n \n-    // These are incorect per the reasoning above,\n+    // These are incorrect per the reasoning above,\n     // but removing them would be a breaking change as they were stabilized in Rust 1.26.0.\n     // So e.g. `(0..=u16::MAX).len()` for example will compile without error or warnings\n     // on 16-bit platforms, but continue to give a wrong result."}, {"sha": "405f7e7b6135daeac7cd0bc8dd85901a9b601042", "filename": "library/core/src/num/dec2flt/number.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fnumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fnumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Fnumber.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -40,7 +40,7 @@ impl Number {\n             && !self.many_digits\n     }\n \n-    /// The fast path algorithmn using machine-sized integers and floats.\n+    /// The fast path algorithm using machine-sized integers and floats.\n     ///\n     /// This is extracted into a separate function so that it can be attempted before constructing\n     /// a Decimal. This only works if both the mantissa and the exponent"}, {"sha": "ed61197157bf57125815ff337c9cfbf71642ff57", "filename": "library/core/src/num/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ffmt.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,4 +1,4 @@\n-//! Shared utilties used by both float and integer formatting.\n+//! Shared utilities used by both float and integer formatting.\n #![doc(hidden)]\n #![unstable(\n     feature = \"numfmt\","}, {"sha": "176820efe398ed42adb6a0b77dfd6256d4d98e02", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -221,7 +221,7 @@ impl<'a, T> IterMut<'a, T> {\n         // the length, to also allows for the fast `ptr == end` check.\n         //\n         // See the `next_unchecked!` and `is_empty!` macros as well as the\n-        // `post_inc_start` method for more informations.\n+        // `post_inc_start` method for more information.\n         unsafe {\n             assume(!ptr.is_null());\n "}, {"sha": "4589c6c0f04a5fe836124c5db70190a0c3c8ce5b", "filename": "library/core/src/slice/rotate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fslice%2Frotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fslice%2Frotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Frotate.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -104,7 +104,7 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n                 // - overflows cannot happen for `i` since the function's safety contract ask for\n                 //   `mid+right-1 = x+left+right` to be valid for writing\n                 // - underflows cannot happen because `i` must be bigger or equal to `left` for\n-                //   a substraction of `left` to happen.\n+                //   a subtraction of `left` to happen.\n                 //\n                 // So `x+i` is valid for reading and writing if the caller respected the contract\n                 tmp = unsafe { x.add(i).replace(tmp) };\n@@ -202,7 +202,7 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n             loop {\n                 // SAFETY:\n                 // `left >= right` so `[mid-right, mid+right)` is valid for reading and writing\n-                // Substracting `right` from `mid` each turn is counterbalanced by the addition and\n+                // Subtracting `right` from `mid` each turn is counterbalanced by the addition and\n                 // check after it.\n                 unsafe {\n                     ptr::swap_nonoverlapping(mid.sub(right), mid, right);\n@@ -218,7 +218,7 @@ pub unsafe fn ptr_rotate<T>(mut left: usize, mut mid: *mut T, mut right: usize)\n             loop {\n                 // SAFETY: `[mid-left, mid+left)` is valid for reading and writing because\n                 // `left < right` so `mid+left < mid+right`.\n-                // Adding `left` to `mid` each turn is counterbalanced by the substraction and check\n+                // Adding `left` to `mid` each turn is counterbalanced by the subtraction and check\n                 // after it.\n                 unsafe {\n                     ptr::swap_nonoverlapping(mid.sub(left), mid, left);"}, {"sha": "de6e6d52b362543d455664e25cf0c8bd58818d10", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -748,7 +748,7 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> Split<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -769,7 +769,7 @@ impl<'a, P: Pattern<'a>> Split<'a, P> {\n }\n \n impl<'a, P: Pattern<'a>> RSplit<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -808,7 +808,7 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> SplitTerminator<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -829,7 +829,7 @@ impl<'a, P: Pattern<'a>> SplitTerminator<'a, P> {\n }\n \n impl<'a, P: Pattern<'a>> RSplitTerminator<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -931,7 +931,7 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> SplitN<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -952,7 +952,7 @@ impl<'a, P: Pattern<'a>> SplitN<'a, P> {\n }\n \n impl<'a, P: Pattern<'a>> RSplitN<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -1236,7 +1236,7 @@ impl<'a> DoubleEndedIterator for SplitWhitespace<'a> {\n impl FusedIterator for SplitWhitespace<'_> {}\n \n impl<'a> SplitWhitespace<'a> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -1292,7 +1292,7 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n impl<'a> SplitAsciiWhitespace<'a> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///\n@@ -1360,7 +1360,7 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {\n-    /// Returns remainder of the splitted string\n+    /// Returns remainder of the split string\n     ///\n     /// # Examples\n     ///"}, {"sha": "fe4fef749904ea2b9cc41e21c651d53e87b70443", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -259,7 +259,7 @@ fn iterator_drops() {\n // This test does not work on targets without panic=unwind support.\n // To work around this problem, test is marked is should_panic, so it will\n // be automagically skipped on unsuitable targets, such as\n-// wasm32-unknown-unkown.\n+// wasm32-unknown-unknown.\n //\n // It means that we use panic for indicating success.\n #[test]"}, {"sha": "4819ce911d6186a54a45e42c49aefd68c4ab284d", "filename": "library/core/tests/bool.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Ftests%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Ftests%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fbool.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -88,4 +88,18 @@ fn test_bool_to_option() {\n     assert_eq!(true.then_some(0), Some(0));\n     assert_eq!(false.then(|| 0), None);\n     assert_eq!(true.then(|| 0), Some(0));\n+\n+    const fn zero() -> i32 {\n+        0\n+    }\n+\n+    const A: Option<i32> = false.then_some(0);\n+    const B: Option<i32> = true.then_some(0);\n+    const C: Option<i32> = false.then(zero);\n+    const D: Option<i32> = true.then(zero);\n+\n+    assert_eq!(A, None);\n+    assert_eq!(B, Some(0));\n+    assert_eq!(C, None);\n+    assert_eq!(D, Some(0));\n }"}, {"sha": "dacb33619f8c3d0bd88ac62299df1467ce623abd", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -8,6 +8,7 @@\n #![feature(cfg_panic)]\n #![feature(cfg_target_has_atomic)]\n #![feature(const_assume)]\n+#![feature(const_bool_to_option)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n #![feature(const_maybe_uninit_as_mut_ptr)]"}, {"sha": "12f0fe9c3c3a960c70dc9994479a30e93b938841", "filename": "library/panic_unwind/src/emcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fpanic_unwind%2Fsrc%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Femcc.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -49,7 +49,7 @@ static EXCEPTION_TYPE_INFO: TypeInfo = TypeInfo {\n };\n \n struct Exception {\n-    // This is necessary because C++ code can capture our execption with\n+    // This is necessary because C++ code can capture our exception with\n     // std::exception_ptr and rethrow it multiple times, possibly even in\n     // another thread.\n     caught: AtomicBool,"}, {"sha": "2293fb6b558121c11b7f1f1ce06fb792b902bd75", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1369,7 +1369,7 @@ fn symlink_hard_link() {\n     // \"hard_link\" should appear as a symlink.\n     assert!(check!(fs::symlink_metadata(tmpdir.join(\"hard_link\"))).file_type().is_symlink());\n \n-    // We sould be able to open \"file\" via any of the above names.\n+    // We should be able to open \"file\" via any of the above names.\n     let _ = check!(fs::File::open(tmpdir.join(\"file\")));\n     assert!(fs::File::open(tmpdir.join(\"file.renamed\")).is_err());\n     let _ = check!(fs::File::open(tmpdir.join(\"symlink\")));"}, {"sha": "ecc9e91b6bdb2c106eb565a2788e6a9392b85576", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -362,15 +362,15 @@ pub(crate) fn default_read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>\n     let start_len = buf.len();\n     let start_cap = buf.capacity();\n \n-    let mut initialized = 0; // Extra initalized bytes from previous loop iteration\n+    let mut initialized = 0; // Extra initialized bytes from previous loop iteration\n     loop {\n         if buf.len() == buf.capacity() {\n             buf.reserve(32); // buf is full, need more space\n         }\n \n         let mut read_buf = ReadBuf::uninit(buf.spare_capacity_mut());\n \n-        // SAFETY: These bytes were initalized but not filled in the previous loop\n+        // SAFETY: These bytes were initialized but not filled in the previous loop\n         unsafe {\n             read_buf.assume_init(initialized);\n         }"}, {"sha": "c072f0cafe47bedd0fa04b2a1fed8757010699e1", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1179,7 +1179,7 @@ where\n             })\n         }) == Ok(Some(()))\n     {\n-        // Succesfully wrote to capture buffer.\n+        // Successfully wrote to capture buffer.\n         return;\n     }\n "}, {"sha": "632d4683b41595e0fdb5c8216fb694d709ab96ca", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -749,7 +749,7 @@ fn ipv4_from_constructors() {\n }\n \n #[test]\n-fn ipv6_from_contructors() {\n+fn ipv6_from_constructors() {\n     assert_eq!(Ipv6Addr::LOCALHOST, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n     assert!(Ipv6Addr::LOCALHOST.is_loopback());\n     assert_eq!(Ipv6Addr::UNSPECIFIED, Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0));"}, {"sha": "87854fe4f297088d09e1081a9a37dd2bb0b78c9d", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -365,7 +365,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // The call to `intrinsics::r#try` is made safe by:\n     // - `do_call`, the first argument, can be called with the initial `data_ptr`.\n     // - `do_catch`, the second argument, can be called with the `data_ptr` as well.\n-    // See their safety preconditions for more informations\n+    // See their safety preconditions for more information\n     unsafe {\n         return if intrinsics::r#try(do_call::<F, R>, data_ptr, do_catch::<F, R>) == 0 {\n             Ok(ManuallyDrop::into_inner(data.r))\n@@ -398,7 +398,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // expects normal function pointers.\n     #[inline]\n     fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {\n-        // SAFETY: this is the responsibilty of the caller, see above.\n+        // SAFETY: this is the responsibility of the caller, see above.\n         unsafe {\n             let data = data as *mut Data<F, R>;\n             let data = &mut (*data);\n@@ -420,7 +420,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // expects normal function pointers.\n     #[inline]\n     fn do_catch<F: FnOnce() -> R, R>(data: *mut u8, payload: *mut u8) {\n-        // SAFETY: this is the responsibilty of the caller, see above.\n+        // SAFETY: this is the responsibility of the caller, see above.\n         //\n         // When `__rustc_panic_cleaner` is correctly implemented we can rely\n         // on `obj` being the correct thing to pass to `data.p` (after wrapping"}, {"sha": "ebcc9ab26e088c27a42b7711c705dc14b7cf4e32", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -126,7 +126,7 @@ impl Thread {\n                     // In this case, `inner`'s ownership has been moved to us,\n                     // And we are responsible for dropping it. The acquire\n                     // ordering is not necessary because the parent thread made\n-                    // no memory acccess needing synchronization since the call\n+                    // no memory access needing synchronization since the call\n                     // to `acre_tsk`.\n                     // Safety: See above.\n                     let _ = unsafe { Box::from_raw(inner as *const _ as *mut ThreadInner) };\n@@ -264,7 +264,7 @@ impl Drop for Thread {\n                 // one will ever join it.\n                 // The ownership of `self.inner` is moved to the child thread.\n                 // However, the release ordering is not necessary because we\n-                // made no memory acccess needing synchronization since the call\n+                // made no memory access needing synchronization since the call\n                 // to `acre_tsk`.\n             }\n             LIFECYCLE_FINISHED => {"}, {"sha": "e85e4c5d618ced0a1e679f96cf858cefcabfff44", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -104,7 +104,7 @@ impl FdMeta {\n \n     fn potential_sendfile_source(&self) -> bool {\n         match self {\n-            // procfs erronously shows 0 length on non-empty readable files.\n+            // procfs erroneously shows 0 length on non-empty readable files.\n             // and if a file is truly empty then a `read` syscall will determine that and skip the write syscall\n             // thus there would be benefit from attempting sendfile\n             FdMeta::Metadata(meta)"}, {"sha": "ce77c210a6220c28ae2e8f22727b2adeab3c6f33", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -284,7 +284,7 @@ impl ExitStatus {\n         //\n         // The other view would be to say that the caller on Fuchsia ought to know that `into_raw`\n         // will give a raw Fuchsia status (whatever that is - I don't know, personally).  That is\n-        // not possible here becaause we must return a c_int because that's what Unix (including\n+        // not possible here because we must return a c_int because that's what Unix (including\n         // SuS and POSIX) say a wait status is, but Fuchsia apparently uses a u64, so it won't\n         // necessarily fit.\n         //"}, {"sha": "55719b87c7e0687212ba7ba314be24757402390f", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -124,7 +124,7 @@ impl<F> DlsymWeak<F> {\n         }\n     }\n \n-    // Cold because it should only happen during first-time initalization.\n+    // Cold because it should only happen during first-time initialization.\n     #[cold]\n     unsafe fn initialize(&self) -> Option<F> {\n         assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());"}, {"sha": "6dceb1689a8b7d2c97621f6038a4b076def6ec4f", "filename": "library/std/src/sys/wasm/alloc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -24,31 +24,31 @@ static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::Dlmalloc::new();\n unsafe impl GlobalAlloc for System {\n     #[inline]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // SAFETY: DLMALLOC access is guaranteed to be safe because the lock gives us unique and non-reentrant access.\n         // Calling malloc() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.malloc(layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n-        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // SAFETY: DLMALLOC access is guaranteed to be safe because the lock gives us unique and non-reentrant access.\n         // Calling calloc() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.calloc(layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n-        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // SAFETY: DLMALLOC access is guaranteed to be safe because the lock gives us unique and non-reentrant access.\n         // Calling free() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.free(ptr, layout.size(), layout.align()) }\n     }\n \n     #[inline]\n     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-        // SAFETY: DLMALLOC access is guranteed to be safe because the lock gives us unique and non-reentrant access.\n+        // SAFETY: DLMALLOC access is guaranteed to be safe because the lock gives us unique and non-reentrant access.\n         // Calling realloc() is safe because preconditions on this function match the trait method preconditions.\n         let _lock = lock::lock();\n         unsafe { DLMALLOC.realloc(ptr, layout.size(), layout.align(), new_size) }"}, {"sha": "3a09f0bf9bb4c3488be96f3d2bdb53e5ce931403", "filename": "library/std/src/sys/wasm/atomics/mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Fmutex.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -73,7 +73,7 @@ pub struct ReentrantMutex {\n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n-// Reentrant mutexes are similarly implemented to mutexs above except that\n+// Reentrant mutexes are similarly implemented to mutexes above except that\n // instead of \"1\" meaning unlocked we use the id of a thread to represent\n // whether it has locked a mutex. That way we have an atomic counter which\n // always holds the id of the thread that currently holds the lock (or 0 if the\n@@ -96,7 +96,7 @@ impl ReentrantMutex {\n     pub unsafe fn lock(&self) {\n         let me = thread::my_id();\n         while let Err(owner) = self._try_lock(me) {\n-            // SAFETY: the caller must gurantee that `self.ptr()` and `owner` are valid i32.\n+            // SAFETY: the caller must guarantee that `self.ptr()` and `owner` are valid i32.\n             let val = unsafe { wasm32::memory_atomic_wait32(self.ptr(), owner as i32, -1) };\n             debug_assert!(val == 0 || val == 1);\n         }\n@@ -136,7 +136,7 @@ impl ReentrantMutex {\n         match *self.recursions.get() {\n             0 => {\n                 self.owner.swap(0, SeqCst);\n-                // SAFETY: the caller must gurantee that `self.ptr()` is valid i32.\n+                // SAFETY: the caller must guarantee that `self.ptr()` is valid i32.\n                 unsafe {\n                     wasm32::memory_atomic_notify(self.ptr() as *mut i32, 1);\n                 } // wake up one waiter, if any"}, {"sha": "eb0925b3fda7d66a87f02c5df563fabd09d2269e", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -124,7 +124,7 @@ fn write(\n     //\n     // If the data is not valid UTF-8 we write out as many bytes as are valid.\n     // If the first byte is invalid it is either first byte of a multi-byte sequence but the\n-    // provided byte slice is too short or it is the first byte of an invalide multi-byte sequence.\n+    // provided byte slice is too short or it is the first byte of an invalid multi-byte sequence.\n     let len = cmp::min(data.len(), MAX_BUFFER_SIZE / 2);\n     let utf8 = match str::from_utf8(&data[..len]) {\n         Ok(s) => s,"}, {"sha": "5a8011a95880814497c589257df29f11c8c5195e", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -22,7 +22,7 @@\n //\n // Unlike WaitOnAddress, NtWaitForKeyedEvent/NtReleaseKeyedEvent operate on a\n // HANDLE (created with NtCreateKeyedEvent). This means that we can be sure\n-// a succesfully awoken park() was awoken by unpark() and not a\n+// a successfully awoken park() was awoken by unpark() and not a\n // NtReleaseKeyedEvent call from some other code, as these events are not only\n // matched by the key (address of the parker (state)), but also by this HANDLE.\n // We lazily allocate this handle the first time it is needed."}, {"sha": "d99e901bb5f83988bb3c55e3d1c442b3edb9286b", "filename": "library/std/src/sys_common/thread_parker/generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fgeneric.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,4 +1,4 @@\n-//! Parker implementaiton based on a Mutex and Condvar.\n+//! Parker implementation based on a Mutex and Condvar.\n \n use crate::sync::atomic::AtomicUsize;\n use crate::sync::atomic::Ordering::SeqCst;\n@@ -20,7 +20,7 @@ impl Parker {\n         Parker { state: AtomicUsize::new(EMPTY), lock: Mutex::new(()), cvar: Condvar::new() }\n     }\n \n-    // This implementaiton doesn't require `unsafe`, but other implementations\n+    // This implementation doesn't require `unsafe`, but other implementations\n     // may assume this is only called by the thread that owns the Parker.\n     pub unsafe fn park(&self) {\n         // If we were previously notified then we consume this notification and\n@@ -55,7 +55,7 @@ impl Parker {\n         }\n     }\n \n-    // This implementaiton doesn't require `unsafe`, but other implementations\n+    // This implementation doesn't require `unsafe`, but other implementations\n     // may assume this is only called by the thread that owns the Parker.\n     pub unsafe fn park_timeout(&self, dur: Duration) {\n         // Like `park` above we have a fast path for an already-notified thread, and"}, {"sha": "1d2f6e976800b88b67e603630e803adc3a997fd0", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -582,7 +582,7 @@ pub mod fast {\n             Key { inner: LazyKeyInner::new(), dtor_state: Cell::new(DtorState::Unregistered) }\n         }\n \n-        // note that this is just a publically-callable function only for the\n+        // note that this is just a publicly-callable function only for the\n         // const-initialized form of thread locals, basically a way to call the\n         // free `register_dtor` function defined elsewhere in libstd.\n         pub unsafe fn register_dtor(a: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n@@ -593,7 +593,7 @@ pub mod fast {\n \n         pub unsafe fn get<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {\n             // SAFETY: See the definitions of `LazyKeyInner::get` and\n-            // `try_initialize` for more informations.\n+            // `try_initialize` for more information.\n             //\n             // The caller must ensure no mutable references are ever active to\n             // the inner cell or the inner T when this is called."}, {"sha": "86cc93c44537663d08e1591e330c3a696176f3e1", "filename": "library/std/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -273,7 +273,7 @@ impl Instant {\n         // While issues have been seen on arm64 platforms the Arm architecture\n         // requires that the counter monotonically increases and that it must\n         // provide a uniform view of system time (e.g. it must not be possible\n-        // for a core to recieve a message from another core with a time stamp\n+        // for a core to receive a message from another core with a time stamp\n         // and observe time going backwards (ARM DDI 0487G.b D11.1.2). While\n         // there have been a few 64bit SoCs that have bugs which cause time to\n         // not monoticially increase, these have been fixed in the Linux kernel"}, {"sha": "631eacc9618286120d88c3b020fbcc8f1cf93671", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -184,8 +184,8 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         })\n         .expect(\"failed serde conversion\")\n         // All these `replace` calls are because we have to go through JS string for JSON content.\n-        .replace(r\"\\\", r\"\\\\\")\n-        .replace(\"'\", r\"\\'\")\n+        .replace(r#\"\\\"#, r\"\\\\\")\n+        .replace(r#\"'\"#, r\"\\'\")\n         // We need to escape double quotes for the JSON.\n         .replace(\"\\\\\\\"\", \"\\\\\\\\\\\"\")\n     )"}, {"sha": "c67fe1fef40cdd5750bda407d8be5588ce8f2195", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -989,7 +989,7 @@ fn attributes(it: &clean::Item) -> Vec<String> {\n         .iter()\n         .filter_map(|attr| {\n             if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n-                Some(pprust::attribute_to_string(attr).replace(\"\\n\", \"\").replace(\"  \", \" \"))\n+                Some(pprust::attribute_to_string(attr).replace('\\n', \"\").replace(\"  \", \" \"))\n             } else {\n                 None\n             }"}, {"sha": "2faf7781807d42a0700d354b430db1f4e8768a6f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -963,7 +963,7 @@ fn preprocess_link<'a>(\n         return None;\n     }\n \n-    let stripped = ori_link.link.replace(\"`\", \"\");\n+    let stripped = ori_link.link.replace('`', \"\");\n     let mut parts = stripped.split('#');\n \n     let link = parts.next().unwrap();"}, {"sha": "1e9a65e1d2fc498f1072929e8359ce7a9e3fe3cd", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -173,11 +173,11 @@ fn build_rule(v: &[u8], positions: &[usize]) -> String {\n             .map(|x| ::std::str::from_utf8(&v[x[0]..x[1]]).unwrap_or(\"\"))\n             .collect::<String>()\n             .trim()\n-            .replace(\"\\n\", \" \")\n-            .replace(\"/\", \"\")\n-            .replace(\"\\t\", \" \")\n-            .replace(\"{\", \"\")\n-            .replace(\"}\", \"\")\n+            .replace('\\n', \" \")\n+            .replace('/', \"\")\n+            .replace('\\t', \" \")\n+            .replace('{', \"\")\n+            .replace('}', \"\")\n             .split(' ')\n             .filter(|s| !s.is_empty())\n             .collect::<Vec<&str>>()"}, {"sha": "505751969b623168fdc168c8ce5829c194300cdd", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -10,6 +10,7 @@ trait Tr {\n         //~^ ERROR mismatched types\n         //~| NOTE expected associated type, found `()`\n         //~| NOTE expected associated type `<Self as Tr>::A`\n+        //~| NOTE this expression has type `<Self as Tr>::A`\n     }\n }\n "}, {"sha": "71d421926e702f0b0b3a4786833392ff1f3a9c37", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -5,13 +5,15 @@ LL |     type A = ();\n    |     ------------ associated type defaults can't be assumed inside the trait defining them\n ...\n LL |         let () = p;\n-   |             ^^ expected associated type, found `()`\n+   |             ^^   - this expression has type `<Self as Tr>::A`\n+   |             |\n+   |             expected associated type, found `()`\n    |\n    = note: expected associated type `<Self as Tr>::A`\n                     found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/defaults-in-other-trait-items.rs:35:25\n+  --> $DIR/defaults-in-other-trait-items.rs:36:25\n    |\n LL |     type Ty = u8;\n    |     ------------- associated type defaults can't be assumed inside the trait defining them"}, {"sha": "2250f561b54a5998bcd843b7123123f335bdb0a4", "filename": "src/test/ui/destructuring-assignment/default-match-bindings-forbidden.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -2,9 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/default-match-bindings-forbidden.rs:4:5\n    |\n LL |     (x, y) = &(1, 2);\n-   |     ^^^^^^   ------- this expression has type `&({integer}, {integer})`\n-   |     |\n-   |     expected reference, found tuple\n+   |     ^^^^^^ expected reference, found tuple\n    |\n    = note: expected type `&({integer}, {integer})`\n              found tuple `(_, _)`"}, {"sha": "184b3ea6da82b6249af572c819aa312706148438", "filename": "src/test/ui/destructuring-assignment/tuple_destructure_fail.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -10,9 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/tuple_destructure_fail.rs:6:5\n    |\n LL |     (a, a, b) = (1, 2);\n-   |     ^^^^^^^^^   ------ this expression has type `({integer}, {integer})`\n-   |     |\n-   |     expected a tuple with 2 elements, found one with 3 elements\n+   |     ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n    |\n    = note: expected type `({integer}, {integer})`\n              found tuple `(_, _, _)`\n@@ -29,9 +27,7 @@ error[E0308]: mismatched types\n   --> $DIR/tuple_destructure_fail.rs:8:5\n    |\n LL |     (_,) = (1, 2);\n-   |     ^^^^   ------ this expression has type `({integer}, {integer})`\n-   |     |\n-   |     expected a tuple with 2 elements, found one with 1 element\n+   |     ^^^^ expected a tuple with 2 elements, found one with 1 element\n    |\n    = note: expected type `({integer}, {integer})`\n              found tuple `(_,)`"}, {"sha": "dc25ac086137a9ba13e715f4688286ba40e04f84", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-3.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -0,0 +1,25 @@\n+// check-fail\n+// See issue #91899. If we treat unnormalized args as WF, `Self` can also be a\n+// source of unsoundness.\n+\n+pub trait Yokeable<'a>: 'static {\n+    type Output: 'a;\n+}\n+\n+impl<'a, T: 'static + ?Sized> Yokeable<'a> for &'static T {\n+    type Output = &'a T;\n+}\n+\n+pub trait ZeroCopyFrom<C: ?Sized>: for<'a> Yokeable<'a> {\n+    /// Clone the cart `C` into a [`Yokeable`] struct, which may retain references into `C`.\n+    fn zero_copy_from<'b>(cart: &'b C) -> <Self as Yokeable<'b>>::Output;\n+}\n+\n+impl<T> ZeroCopyFrom<[T]> for &'static [T] {\n+    fn zero_copy_from<'b>(cart: &'b [T]) -> &'b [T] {\n+        //~^ the parameter\n+        cart\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "26eecf6a21d3d2713c911e13ce41b30d3ee56ec0", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-3.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -0,0 +1,12 @@\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/implied-bounds-unnorm-associated-type-3.rs:19:5\n+   |\n+LL |     fn zero_copy_from<'b>(cart: &'b [T]) -> &'b [T] {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   = note: ...so that the type `[T]` will meet its required lifetime bounds\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}, {"sha": "241485db49bc9ad35e4353ed47b0f3f79a6809d1", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision.rs:6:13\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99.., _] => {},\n    |             ^^ expected struct `std::ops::Range`, found integer\n    |"}, {"sha": "777d029d7dd7b392302af9c8a8114b4c31d61a84", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -7,8 +7,6 @@ LL |         [_, 99..] => {},\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision2.rs:6:13\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99..] => {},\n    |             ^^ expected struct `std::ops::Range`, found integer\n    |"}, {"sha": "6119733a7d84bda8b514709ccc0f4b9271d35c7a", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:12\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n    |            ^ expected struct `std::ops::Range`, found integer\n    |\n@@ -12,8 +10,6 @@ LL |         [..9, 99..100, _] => {},\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:15\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n    |               ^^  --- this is of type `{integer}`\n    |               |\n@@ -25,8 +21,6 @@ LL |         [..9, 99..100, _] => {},\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:19\n    |\n-LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n    |               --  ^^^ expected struct `std::ops::Range`, found integer\n    |               |"}, {"sha": "31ea3a17871a56b9f3deb58c29b224394e38fe24", "filename": "src/test/ui/half-open-range-patterns/pat-tuple-5.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-5.rs:8:10\n    |\n-LL |     match (0, 1) {\n-   |           ------ this expression has type `({integer}, {integer})`\n LL |         (PAT ..) => {}\n    |          ^^^ expected tuple, found `u8`\n    |"}, {"sha": "ecab1074a295f742cacdffb1d71eb4c71899da74", "filename": "src/test/ui/issues/issue-11844.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-11844.rs:6:9\n    |\n-LL |     match a {\n-   |           - this expression has type `Option<Box<{integer}>>`\n LL |         Ok(a) =>\n    |         ^^^^^ expected enum `Option`, found enum `Result`\n    |"}, {"sha": "1ba6852b17c06a4068a18f3ed333828202c721d8", "filename": "src/test/ui/issues/issue-12552.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:6:5\n    |\n-LL |   match t {\n-   |         - this expression has type `Result<_, {integer}>`\n LL |     Some(k) => match k {\n    |     ^^^^^^^ expected enum `Result`, found enum `Option`\n    |\n@@ -12,9 +10,6 @@ LL |     Some(k) => match k {\n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:9:5\n    |\n-LL |   match t {\n-   |         - this expression has type `Result<_, {integer}>`\n-...\n LL |     None => ()\n    |     ^^^^ expected enum `Result`, found enum `Option`\n    |"}, {"sha": "15ee49a5fdd25f48f17324b976d6bc990b1c1d4f", "filename": "src/test/ui/issues/issue-13466.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:8:9\n    |\n-LL |     let _x: usize = match Some(1) {\n-   |                           ------- this expression has type `Option<{integer}>`\n LL |         Ok(u) => u,\n    |         ^^^^^ expected enum `Option`, found enum `Result`\n    |\n@@ -12,9 +10,6 @@ LL |         Ok(u) => u,\n error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:14:9\n    |\n-LL |     let _x: usize = match Some(1) {\n-   |                           ------- this expression has type `Option<{integer}>`\n-...\n LL |         Err(e) => panic!(e)\n    |         ^^^^^^ expected enum `Option`, found enum `Result`\n    |"}, {"sha": "8dc0dfa2356f4cf6606d8b7d762164b24c615fb6", "filename": "src/test/ui/issues/issue-3680.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-3680.rs:3:9\n    |\n-LL |     match None {\n-   |           ---- this expression has type `Option<_>`\n LL |         Err(_) => ()\n    |         ^^^^^^ expected enum `Option`, found enum `Result`\n    |"}, {"sha": "3e933a0f01b753dc41e7900be31ff7c7694cda37", "filename": "src/test/ui/issues/issue-66706.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -36,23 +36,23 @@ error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:2:5\n    |\n LL | fn a() {\n-   |        - help: try adding a return type: `-> [{integer}; _]`\n+   |        - possibly return type missing here?\n LL |     [0; [|_: _ &_| ()].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:14:5\n    |\n LL | fn c() {\n-   |        - help: try adding a return type: `-> [{integer}; _]`\n+   |        - possibly return type missing here?\n LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:20:5\n    |\n LL | fn d() {\n-   |        - help: try adding a return type: `-> [{integer}; _]`\n+   |        - possibly return type missing here?\n LL |     [0; match [|f @ &ref _| () ] {} ]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n "}, {"sha": "5d3d390a95dedfe0aa94e02cf2d3d6246b6d3ca6", "filename": "src/test/ui/issues/issue-72574-1.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -21,8 +21,6 @@ LL |         (_a, _x @ ..) => {}\n error[E0308]: mismatched types\n   --> $DIR/issue-72574-1.rs:4:9\n    |\n-LL |     match x {\n-   |           - this expression has type `({integer}, {integer}, {integer})`\n LL |         (_a, _x @ ..) => {}\n    |         ^^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 2 elements\n    |"}, {"sha": "eb884bcc6226fef462095aeda83c2ca69e0a6e10", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -9,8 +9,6 @@ LL |         (0, ref y) | (y, 0) => {}\n error[E0308]: mismatched types\n   --> $DIR/E0409.rs:5:23\n    |\n-LL |     match x {\n-   |           - this expression has type `({integer}, {integer})`\n LL |         (0, ref y) | (y, 0) => {}\n    |             -----     ^ expected `&{integer}`, found integer\n    |             |"}, {"sha": "ccc8ac1278c63576c2ed2d253c653f312e9f8338", "filename": "src/test/ui/mut/mut-pattern-mismatched.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -3,9 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |      let &_\n    |          ^^ types differ in mutability\n-...\n-LL |         = foo;\n-   |           --- this expression has type `&mut {integer}`\n    |\n    = note: expected mutable reference `&mut {integer}`\n                       found reference `&_`\n@@ -15,9 +12,6 @@ error[E0308]: mismatched types\n    |\n LL |     let &mut _\n    |         ^^^^^^ types differ in mutability\n-...\n-LL |          = bar;\n-   |            --- this expression has type `&{integer}`\n    |\n    = note:      expected reference `&{integer}`\n            found mutable reference `&mut _`"}, {"sha": "e99a38aaaee95834ad6d506f2bd4982a43f7f391", "filename": "src/test/ui/never_type/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,15 +1,13 @@\n error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:8:5\n    |\n+LL | fn g() {\n+   |        - possibly return type missing here?\n LL |     &panic!()\n    |     ^^^^^^^^^ expected `()`, found reference\n    |\n    = note: expected unit type `()`\n               found reference `&_`\n-help: try adding a return type\n-   |\n-LL | fn g() -> &_ {\n-   |        +++++\n help: consider removing the borrow\n    |\n LL -     &panic!()"}, {"sha": "92416a0d5cbf086d739ef3e5df92d4b9cae3d084", "filename": "src/test/ui/or-patterns/already-bound-name.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -86,9 +86,8 @@ error[E0308]: mismatched types\n   --> $DIR/already-bound-name.rs:30:32\n    |\n LL |     let (B(A(a, _) | B(a)) | A(a, A(a, _) | B(a))) = B(B(1));\n-   |              -                 ^                     ------- this expression has type `E<E<{integer}>>`\n-   |              |                 |\n-   |              |                 expected integer, found enum `E`\n+   |              -                 ^ expected integer, found enum `E`\n+   |              |\n    |              first introduced with type `{integer}` here\n    |\n    = note: expected type `{integer}`"}, {"sha": "95e8618808c08e392f294200cf5e43c4fe57e5fa", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -65,9 +65,8 @@ error[E0308]: mismatched types\n   --> $DIR/inconsistent-modes.rs:13:32\n    |\n LL |     let (Ok((ref a, b)) | Err((ref mut a, ref b))) = Ok((0, &0));\n-   |              -----             ^^^^^^^^^             ----------- this expression has type `Result<({integer}, &{integer}), (_, _)>`\n-   |              |                 |\n-   |              |                 types differ in mutability\n+   |              -----             ^^^^^^^^^ types differ in mutability\n+   |              |\n    |              first introduced with type `&{integer}` here\n    |\n    = note: expected type `&{integer}`"}, {"sha": "53dcf97f81c6a4d765577e4c39525b9a16948f88", "filename": "src/test/ui/pattern/issue-74702.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -22,9 +22,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-74702.rs:2:9\n    |\n LL |     let (foo @ ..,) = (0, 0);\n-   |         ^^^^^^^^^^^   ------ this expression has type `({integer}, {integer})`\n-   |         |\n-   |         expected a tuple with 2 elements, found one with 1 element\n+   |         ^^^^^^^^^^^ expected a tuple with 2 elements, found one with 1 element\n    |\n    = note: expected tuple `({integer}, {integer})`\n               found tuple `(_,)`"}, {"sha": "64b6e5eec5562565ee52e6ae1dbac996574b0cad", "filename": "src/test/ui/pattern/pat-tuple-overfield.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -150,8 +150,6 @@ LL |         E1::Z0 => {}\n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-overfield.rs:19:9\n    |\n-LL |     match (1, 2, 3) {\n-   |           --------- this expression has type `({integer}, {integer}, {integer})`\n LL |         (1, 2, 3, 4) => {}\n    |         ^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 4 elements\n    |\n@@ -161,9 +159,6 @@ LL |         (1, 2, 3, 4) => {}\n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-overfield.rs:20:9\n    |\n-LL |     match (1, 2, 3) {\n-   |           --------- this expression has type `({integer}, {integer}, {integer})`\n-LL |         (1, 2, 3, 4) => {}\n LL |         (1, 2, .., 3, 4) => {}\n    |         ^^^^^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 4 elements\n    |"}, {"sha": "f86209a651d139d1f72aeeadfd110d42d69a76b2", "filename": "src/test/ui/return/return-type.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,19 +1,15 @@\n error[E0308]: mismatched types\n   --> $DIR/return-type.rs:10:5\n    |\n+LL | fn bar() {\n+   |          - possibly return type missing here?\n LL |     foo(4 as usize)\n-   |     ^^^^^^^^^^^^^^^ expected `()`, found struct `S`\n+   |     ^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n+   |     |\n+   |     expected `()`, found struct `S`\n    |\n    = note: expected unit type `()`\n                  found struct `S<usize>`\n-help: consider using a semicolon here\n-   |\n-LL |     foo(4 as usize);\n-   |                    +\n-help: try adding a return type\n-   |\n-LL | fn bar() -> S<usize> {\n-   |          +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "1433a16d7274a57e4b074a51036f75440ccbd83c", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -644,7 +644,9 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:76:12\n    |\n LL |     if let Range { start: F, end } = F..|| true {}\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found struct `std::ops::Range`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n+   |            |\n+   |            expected fn pointer, found struct `std::ops::Range`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`\n@@ -832,7 +834,9 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:140:15\n    |\n LL |     while let Range { start: F, end } = F..|| true {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^ expected fn pointer, found struct `std::ops::Range`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `fn() -> bool`\n+   |               |\n+   |               expected fn pointer, found struct `std::ops::Range`\n    |\n    = note: expected fn pointer `fn() -> bool`\n                   found struct `std::ops::Range<_>`"}, {"sha": "61eabed950423834089b6d0a9dd8289d0200c1eb", "filename": "src/test/ui/slightly-nice-generic-literal-messages.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -1,8 +1,6 @@\n error[E0308]: mismatched types\n   --> $DIR/slightly-nice-generic-literal-messages.rs:7:9\n    |\n-LL |     match Foo(1.1, marker::PhantomData) {\n-   |           ----------------------------- this expression has type `Foo<{float}, _>`\n LL |         1 => {}\n    |         ^ expected struct `Foo`, found integer\n    |"}, {"sha": "98972a121599655cae0f36351dd2aa84dae2c516", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -101,8 +101,6 @@ LL | type PointF = Point<f32>;\n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:54:9\n    |\n-LL |     match (Point { x: 1, y: 2 }) {\n-   |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF::<u32> { .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n@@ -112,8 +110,6 @@ LL |         PointF::<u32> { .. } => {}\n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:59:9\n    |\n-LL |     match (Point { x: 1, y: 2 }) {\n-   |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF { .. } => {}\n    |         ^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n@@ -123,8 +119,6 @@ LL |         PointF { .. } => {}\n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:67:9\n    |\n-LL |     match (Pair { x: 1, y: 2 }) {\n-   |           --------------------- this expression has type `Pair<{integer}, {integer}>`\n LL |         PairF::<u32> { .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |"}, {"sha": "b92a6f2ec2b485df7c3dd8c1378f6e8f7ba5232a", "filename": "src/test/ui/typeck/issue-57673-ice-on-deref-of-boxed-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-57673-ice-on-deref-of-boxed-trait.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-57673-ice-on-deref-of-boxed-trait.rs:5:5\n    |\n LL | fn ice(x: Box<dyn Iterator<Item=()>>) {\n-   |                                       - possibly return type missing here?\n+   |                                       - help: try adding a return type: `-> (dyn Iterator<Item = ()> + 'static)`\n LL |     *x\n    |     ^^ expected `()`, found trait object `dyn Iterator`\n    |"}, {"sha": "0872e83ea2e7e6917eff54dee6d4fb068d782a78", "filename": "src/test/ui/typeck/issue-91334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL | fn f(){||yield(((){),\n    |       -^^^^^^^^^^^^^^^ expected `()`, found generator\n    |       |\n-   |       help: try adding a return type: `-> [generator@$DIR/issue-91334.rs:10:8: 10:23]`\n+   |       possibly return type missing here?\n    |\n    = note: expected unit type `()`\n               found generator `[generator@$DIR/issue-91334.rs:10:8: 10:23]`"}, {"sha": "aee9769b28038800177a0938370cb84f3640b269", "filename": "src/test/ui/typeck/return_type_containing_closure.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -0,0 +1,10 @@\n+#[allow(unused)]\n+fn foo() {\n+    //~^ NOTE possibly return type missing here?\n+    vec!['a'].iter().map(|c| c)\n+    //~^ ERROR mismatched types [E0308]\n+    //~| NOTE expected `()`, found struct `Map`\n+    //~| NOTE expected unit type `()`\n+}\n+\n+fn main() {}"}, {"sha": "b08152d63318e97ca100f3ec9ae8701d630d17d6", "filename": "src/test/ui/typeck/return_type_containing_closure.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5ecc157043ba413568b09292001a4a74b541a4e/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr?ref=c5ecc157043ba413568b09292001a4a74b541a4e", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return_type_containing_closure.rs:4:5\n+   |\n+LL | fn foo() {\n+   |          - possibly return type missing here?\n+LL |\n+LL |     vec!['a'].iter().map(|c| c)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n+   |     |\n+   |     expected `()`, found struct `Map`\n+   |\n+   = note: expected unit type `()`\n+                 found struct `Map<std::slice::Iter<'_, char>, [closure@$DIR/return_type_containing_closure.rs:4:26: 4:31]>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}