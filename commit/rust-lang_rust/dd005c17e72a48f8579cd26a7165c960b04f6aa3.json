{"sha": "dd005c17e72a48f8579cd26a7165c960b04f6aa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMDA1YzE3ZTcyYTQ4Zjg1NzljZDI2YTcxNjVjOTYwYjA0ZjZhYTM=", "commit": {"author": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2020-12-20T12:00:17Z"}, "committer": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2020-12-20T12:00:17Z"}, "message": "Added MSRV and fixed typo", "tree": {"sha": "e8208f42f4dc389039312689b6979856d0d52e78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8208f42f4dc389039312689b6979856d0d52e78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd005c17e72a48f8579cd26a7165c960b04f6aa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd005c17e72a48f8579cd26a7165c960b04f6aa3", "html_url": "https://github.com/rust-lang/rust/commit/dd005c17e72a48f8579cd26a7165c960b04f6aa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd005c17e72a48f8579cd26a7165c960b04f6aa3/comments", "author": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a451b2af30c173b081f5d6150e558a65062a1dc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a451b2af30c173b081f5d6150e558a65062a1dc8", "html_url": "https://github.com/rust-lang/rust/commit/a451b2af30c173b081f5d6150e558a65062a1dc8"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "c7988d6f01fa50c007ee81d48b06c6e393fcb9cd", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dd005c17e72a48f8579cd26a7165c960b04f6aa3/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd005c17e72a48f8579cd26a7165c960b04f6aa3/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=dd005c17e72a48f8579cd26a7165c960b04f6aa3", "patch": "@@ -1,9 +1,12 @@\n use crate::utils::paths::INTO;\n-use crate::utils::{match_def_path, span_lint_and_help};\n+use crate::utils::{match_def_path, meets_msrv, span_lint_and_help};\n use if_chain::if_chain;\n use rustc_hir as hir;\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+const FROM_OVER_INTO_MSRV: RustcVersion = RustcVersion::new(1, 41, 0);\n \n declare_clippy_lint! {\n     /// **What it does:** Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n@@ -38,10 +41,25 @@ declare_clippy_lint! {\n     \"Warns on implementations of `Into<..>` to use `From<..>`\"\n }\n \n-declare_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n+pub struct FromOverInto {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl FromOverInto {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        FromOverInto { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n \n impl LateLintPass<'_> for FromOverInto {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &FROM_OVER_INTO_MSRV) {\n+            return;\n+        }\n+\n         let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n         if_chain! {\n             if let hir::ItemKind::Impl{ .. } = &item.kind;\n@@ -55,9 +73,11 @@ impl LateLintPass<'_> for FromOverInto {\n                     item.span,\n                     \"An implementation of From is preferred since it gives you Into<..> for free where the reverse isn't true.\",\n                     None,\n-                    \"consider implement From instead\",\n+                    \"consider to implement From instead\",\n                 );\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }"}, {"sha": "35b057d7b6a4153b7d0372b5c40b3fe9f9544bc6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd005c17e72a48f8579cd26a7165c960b04f6aa3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd005c17e72a48f8579cd26a7165c960b04f6aa3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=dd005c17e72a48f8579cd26a7165c960b04f6aa3", "patch": "@@ -1016,6 +1016,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box checked_conversions::CheckedConversions::new(msrv));\n     store.register_late_pass(move || box mem_replace::MemReplace::new(msrv));\n     store.register_late_pass(move || box ranges::Ranges::new(msrv));\n+    store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n     store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n     store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n \n@@ -1205,7 +1206,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n     store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n-    store.register_late_pass(|| box from_over_into::FromOverInto);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));"}, {"sha": "c9c8e7c4b538b8c3b1c1ee517657b52a6cc12a4b", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd005c17e72a48f8579cd26a7165c960b04f6aa3/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd005c17e72a48f8579cd26a7165c960b04f6aa3/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=dd005c17e72a48f8579cd26a7165c960b04f6aa3", "patch": "@@ -9,7 +9,7 @@ LL | | }\n    | |_^\n    |\n    = note: `-D clippy::from-over-into` implied by `-D warnings`\n-   = help: consider implement From instead\n+   = help: consider to implement From instead\n \n error: aborting due to previous error\n "}, {"sha": "0f47f1cbc4026cb77c88eb4e70612e83ba70a60c", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd005c17e72a48f8579cd26a7165c960b04f6aa3/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd005c17e72a48f8579cd26a7165c960b04f6aa3/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=dd005c17e72a48f8579cd26a7165c960b04f6aa3", "patch": "@@ -57,6 +57,14 @@ pub fn checked_conversion() {\n     let _ = value <= (u32::MAX as i64) && value >= 0;\n }\n \n+pub struct FromOverInto(String);\n+\n+impl Into<FromOverInto> for String {\n+    fn into(self) -> FromOverInto {\n+        FromOverInto(self)\n+    }\n+}\n+\n pub fn filter_map_next() {\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n "}, {"sha": "e3e3b335cbe165721ed9ea5260dbe9f71dcd2bb4", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd005c17e72a48f8579cd26a7165c960b04f6aa3/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd005c17e72a48f8579cd26a7165c960b04f6aa3/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=dd005c17e72a48f8579cd26a7165c960b04f6aa3", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:142:24\n+  --> $DIR/min_rust_version_attr.rs:150:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:141:9\n+  --> $DIR/min_rust_version_attr.rs:149:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:154:24\n+  --> $DIR/min_rust_version_attr.rs:162:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:153:9\n+  --> $DIR/min_rust_version_attr.rs:161:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}