{"sha": "7b10746ef08041885989eccd2dd6cd3c2f6f0f49", "node_id": "C_kwDOAAsO6NoAKDdiMTA3NDZlZjA4MDQxODg1OTg5ZWNjZDJkZDZjZDNjMmY2ZjBmNDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-28T05:50:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-28T05:50:00Z"}, "message": "Auto merge of #89277 - jyn514:codeblock-edition, r=GuillaumeGomez\n\nUse the correct edition for syntax highlighting doctests\n\nPreviously it would unconditionally use edition 2015, which was incorrect.\n\nHelps with https://github.com/rust-lang/rust/issues/89135 in that you can now override the doctest to be 2018 edition instead of being forced to fix the error. This doesn't resolve any of the deeper problems that rustdoc disagrees with most rust users on what a code block is.\n\ncc `@Mark-Simulacrum`", "tree": {"sha": "1c14455b39e32a2cbcc97422919f847c8f2352e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c14455b39e32a2cbcc97422919f847c8f2352e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b10746ef08041885989eccd2dd6cd3c2f6f0f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b10746ef08041885989eccd2dd6cd3c2f6f0f49", "html_url": "https://github.com/rust-lang/rust/commit/7b10746ef08041885989eccd2dd6cd3c2f6f0f49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b10746ef08041885989eccd2dd6cd3c2f6f0f49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a12be741290b16c29293f87bdb3e8e5129bd4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a12be741290b16c29293f87bdb3e8e5129bd4a9", "html_url": "https://github.com/rust-lang/rust/commit/8a12be741290b16c29293f87bdb3e8e5129bd4a9"}, {"sha": "6f087aedb60ccbed0e1ee05256100e2f80e45f2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f087aedb60ccbed0e1ee05256100e2f80e45f2f", "html_url": "https://github.com/rust-lang/rust/commit/6f087aedb60ccbed0e1ee05256100e2f80e45f2f"}], "stats": {"total": 79, "additions": 60, "deletions": 19}, "files": [{"sha": "fda2512a05036aff92bfe51fe65140a6cf901a59", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7b10746ef08041885989eccd2dd6cd3c2f6f0f49/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b10746ef08041885989eccd2dd6cd3c2f6f0f49/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7b10746ef08041885989eccd2dd6cd3c2f6f0f49", "patch": "@@ -1316,8 +1316,7 @@ crate struct RustCodeBlock {\n     /// The range in the markdown that the code within the code block occupies.\n     crate code: Range<usize>,\n     crate is_fenced: bool,\n-    crate syntax: Option<String>,\n-    crate is_ignore: bool,\n+    crate lang_string: LangString,\n }\n \n /// Returns a range of bytes for each code block in the markdown that is tagged as `rust` or\n@@ -1333,7 +1332,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n \n     while let Some((event, offset)) = p.next() {\n         if let Event::Start(Tag::CodeBlock(syntax)) = event {\n-            let (syntax, code_start, code_end, range, is_fenced, is_ignore) = match syntax {\n+            let (lang_string, code_start, code_end, range, is_fenced) = match syntax {\n                 CodeBlockKind::Fenced(syntax) => {\n                     let syntax = syntax.as_ref();\n                     let lang_string = if syntax.is_empty() {\n@@ -1344,8 +1343,6 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n                     if !lang_string.rust {\n                         continue;\n                     }\n-                    let is_ignore = lang_string.ignore != Ignore::None;\n-                    let syntax = if syntax.is_empty() { None } else { Some(syntax.to_owned()) };\n                     let (code_start, mut code_end) = match p.next() {\n                         Some((Event::Text(_), offset)) => (offset.start, offset.end),\n                         Some((_, sub_offset)) => {\n@@ -1354,8 +1351,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n                                 is_fenced: true,\n                                 range: offset,\n                                 code,\n-                                syntax,\n-                                is_ignore,\n+                                lang_string,\n                             });\n                             continue;\n                         }\n@@ -1365,31 +1361,29 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n                                 is_fenced: true,\n                                 range: offset,\n                                 code,\n-                                syntax,\n-                                is_ignore,\n+                                lang_string,\n                             });\n                             continue;\n                         }\n                     };\n                     while let Some((Event::Text(_), offset)) = p.next() {\n                         code_end = offset.end;\n                     }\n-                    (syntax, code_start, code_end, offset, true, is_ignore)\n+                    (lang_string, code_start, code_end, offset, true)\n                 }\n                 CodeBlockKind::Indented => {\n                     // The ending of the offset goes too far sometime so we reduce it by one in\n                     // these cases.\n                     if offset.end > offset.start && md.get(offset.end..=offset.end) == Some(&\"\\n\") {\n                         (\n-                            None,\n+                            LangString::default(),\n                             offset.start,\n                             offset.end,\n                             Range { start: offset.start, end: offset.end - 1 },\n                             false,\n-                            false,\n                         )\n                     } else {\n-                        (None, offset.start, offset.end, offset, false, false)\n+                        (LangString::default(), offset.start, offset.end, offset, false)\n                     }\n                 }\n             };\n@@ -1398,8 +1392,7 @@ crate fn rust_code_blocks(md: &str, extra_info: &ExtraInfo<'_>) -> Vec<RustCodeB\n                 is_fenced,\n                 range,\n                 code: Range { start: code_start, end: code_end },\n-                syntax,\n-                is_ignore,\n+                lang_string,\n             });\n         }\n     }"}, {"sha": "d2b3c5239c778f4b5c83b1b327e8e95b5a810f33", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b10746ef08041885989eccd2dd6cd3c2f6f0f49/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b10746ef08041885989eccd2dd6cd3c2f6f0f49/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=7b10746ef08041885989eccd2dd6cd3c2f6f0f49", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n-use rustc_span::{FileName, InnerSpan};\n+use rustc_span::{hygiene::AstPass, ExpnData, ExpnKind, FileName, InnerSpan, DUMMY_SP};\n \n use crate::clean;\n use crate::core::DocContext;\n@@ -36,12 +36,22 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n         let source = dox[code_block.code].to_owned();\n         let sess = ParseSess::with_span_handler(handler, sm);\n \n+        let edition = code_block.lang_string.edition.unwrap_or(self.cx.tcx.sess.edition());\n+        let expn_data = ExpnData::default(\n+            ExpnKind::AstPass(AstPass::TestHarness),\n+            DUMMY_SP,\n+            edition,\n+            None,\n+            None,\n+        );\n+        let span = DUMMY_SP.fresh_expansion(expn_data, self.cx.tcx.create_stable_hashing_context());\n+\n         let is_empty = rustc_driver::catch_fatal_errors(|| {\n             parse_stream_from_source_str(\n                 FileName::Custom(String::from(\"doctest\")),\n                 source,\n                 &sess,\n-                None,\n+                Some(span),\n             )\n             .is_empty()\n         })\n@@ -61,8 +71,8 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n         };\n \n         let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_id);\n-        let empty_block = code_block.syntax.is_none() && code_block.is_fenced;\n-        let is_ignore = code_block.is_ignore;\n+        let empty_block = code_block.lang_string == Default::default() && code_block.is_fenced;\n+        let is_ignore = code_block.lang_string.ignore != markdown::Ignore::None;\n \n         // The span and whether it is precise or not.\n         let (sp, precise_span) = match super::source_span_for_markdown_range("}, {"sha": "b0787be972f2f558b99b56c05fdebbdaeff5aa3f", "filename": "src/test/rustdoc-ui/doctest-edition.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b10746ef08041885989eccd2dd6cd3c2f6f0f49/src%2Ftest%2Frustdoc-ui%2Fdoctest-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b10746ef08041885989eccd2dd6cd3c2f6f0f49/src%2Ftest%2Frustdoc-ui%2Fdoctest-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoctest-edition.rs?ref=7b10746ef08041885989eccd2dd6cd3c2f6f0f49", "patch": "@@ -0,0 +1,16 @@\n+// edition:2021\n+\n+#![deny(rustdoc::invalid_rust_codeblocks)]\n+//~^ NOTE lint level is defined here\n+\n+// By default, rustdoc should use the edition of the crate.\n+//! ```\n+//! foo'b'\n+//! ```\n+//~^^^ ERROR could not parse\n+//~| NOTE prefix `foo` is unknown\n+\n+// Rustdoc should respect `edition2018` when highlighting syntax.\n+//! ```edition2018\n+//! foo'b'\n+//! ```"}, {"sha": "1643d605375a103dc90f019b5406db8e10afa7e3", "filename": "src/test/rustdoc-ui/doctest-edition.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7b10746ef08041885989eccd2dd6cd3c2f6f0f49/src%2Ftest%2Frustdoc-ui%2Fdoctest-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b10746ef08041885989eccd2dd6cd3c2f6f0f49/src%2Ftest%2Frustdoc-ui%2Fdoctest-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoctest-edition.stderr?ref=7b10746ef08041885989eccd2dd6cd3c2f6f0f49", "patch": "@@ -0,0 +1,22 @@\n+error: could not parse code block as Rust code\n+  --> $DIR/doctest-edition.rs:7:5\n+   |\n+LL |   //! ```\n+   |  _____^\n+LL | | //! foo'b'\n+LL | | //! ```\n+   | |_______^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/doctest-edition.rs:3:9\n+   |\n+LL | #![deny(rustdoc::invalid_rust_codeblocks)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: error from rustc: prefix `foo` is unknown\n+help: mark blocks that do not contain Rust code as text\n+   |\n+LL | //! ```text\n+   |        ++++\n+\n+error: aborting due to previous error\n+"}]}