{"sha": "4bd36ab64cae41e89d53113f683d790210846c1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZDM2YWI2NGNhZTQxZTg5ZDUzMTEzZjY4M2Q3OTAyMTA4NDZjMWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-24T04:39:40Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-25T09:51:53Z"}, "message": "Introduce hir::ExprKind::Use and employ in for loop desugaring.\n\nHere, ExprKind::Use(P<Expr>) tweaks the drop order to act the\nsame way as '{ let _tmp = expr; _tmp }' does.", "tree": {"sha": "253235bec9c528c32b883a0118dae1884df4dba1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/253235bec9c528c32b883a0118dae1884df4dba1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bd36ab64cae41e89d53113f683d790210846c1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd36ab64cae41e89d53113f683d790210846c1f", "html_url": "https://github.com/rust-lang/rust/commit/4bd36ab64cae41e89d53113f683d790210846c1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bd36ab64cae41e89d53113f683d790210846c1f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aea1163df93c4cff9157d45baaf06f7876ae99c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aea1163df93c4cff9157d45baaf06f7876ae99c", "html_url": "https://github.com/rust-lang/rust/commit/9aea1163df93c4cff9157d45baaf06f7876ae99c"}], "stats": {"total": 144, "additions": 92, "deletions": 52}, "files": [{"sha": "8a4594fe0e89eec33ff20663d3a006849834f80b", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -369,6 +369,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             hir::ExprKind::AddrOf(_, ref e) |\n             hir::ExprKind::Cast(ref e, _) |\n             hir::ExprKind::Type(ref e, _) |\n+            hir::ExprKind::Use(ref e) |\n             hir::ExprKind::Unary(_, ref e) |\n             hir::ExprKind::Field(ref e, _) |\n             hir::ExprKind::Yield(ref e) |"}, {"sha": "3d727f7cd912809cfbdbc068446288b775ade187", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -1029,6 +1029,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(subexpression);\n             visitor.visit_ty(typ)\n         }\n+        ExprKind::Use(ref subexpression) => {\n+            visitor.visit_expr(subexpression);\n+        }\n         ExprKind::If(ref head_expression, ref if_block, ref optional_else) => {\n             visitor.visit_expr(head_expression);\n             visitor.visit_expr(if_block);"}, {"sha": "37373da72fbd6a58755151552f1d896c62575e76", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -4738,16 +4738,11 @@ impl<'a> LoweringContext<'a> {\n                     hir::MatchSource::ForLoopDesugar,\n                 ));\n \n-                // `{ let _result = ...; _result }`\n-                // Underscore prevents an `unused_variables` lint if the head diverges.\n-                let result_ident = self.str_to_ident(\"_result\");\n-                let (let_stmt, let_stmt_binding) =\n-                    self.stmt_let(e.span, false, result_ident, match_expr);\n-\n-                let result = P(self.expr_ident(e.span, result_ident, let_stmt_binding));\n-                let block = P(self.block_all(e.span, hir_vec![let_stmt], Some(result)));\n-                // Add the attributes to the outer returned expr node.\n-                return self.expr_block(block, e.attrs.clone());\n+                // This is effectively `{ let _result = ...; _result }`.\n+                // The construct was introduced in #21984.\n+                // FIXME(60253): Is this still necessary?\n+                // Also, add the attributes to the outer returned expr node.\n+                return self.expr_use(head_sp, match_expr, e.attrs.clone())\n             }\n \n             // Desugar `ExprKind::Try`\n@@ -5117,6 +5112,17 @@ impl<'a> LoweringContext<'a> {\n         )\n     }\n \n+    /// Wrap the given `expr` in `hir::ExprKind::Use`.\n+    ///\n+    /// In terms of drop order, it has the same effect as\n+    /// wrapping `expr` in `{ let _t = $expr; _t }` but\n+    /// should provide better compile-time performance.\n+    ///\n+    /// The drop order can be important in e.g. `if expr { .. }`.\n+    fn expr_use(&mut self, span: Span, expr: P<hir::Expr>, attrs: ThinVec<Attribute>) -> hir::Expr {\n+        self.expr(span, hir::ExprKind::Use(expr), attrs)\n+    }\n+\n     fn expr_match(\n         &mut self,\n         span: Span,\n@@ -5172,25 +5178,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn stmt_let(\n-        &mut self,\n-        sp: Span,\n-        mutbl: bool,\n-        ident: Ident,\n-        ex: P<hir::Expr>,\n-    ) -> (hir::Stmt, hir::HirId) {\n-        let (pat, pat_hid) = if mutbl {\n-            self.pat_ident_binding_mode(sp, ident, hir::BindingAnnotation::Mutable)\n-        } else {\n-            self.pat_ident(sp, ident)\n-        };\n-\n-        (\n-            self.stmt_let_pat(sp, Some(ex), pat, hir::LocalSource::Normal),\n-            pat_hid,\n-        )\n-    }\n-\n     fn block_expr(&mut self, expr: P<hir::Expr>) -> hir::Block {\n         self.block_all(expr.span, hir::HirVec::new(), Some(expr))\n     }"}, {"sha": "2e10300dced0ef273add3e875fe1a51dbe4b55a1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -1366,6 +1366,7 @@ impl Expr {\n             ExprKind::Unary(..) => ExprPrecedence::Unary,\n             ExprKind::Lit(_) => ExprPrecedence::Lit,\n             ExprKind::Type(..) | ExprKind::Cast(..) => ExprPrecedence::Cast,\n+            ExprKind::Use(ref expr, ..) => expr.precedence(),\n             ExprKind::If(..) => ExprPrecedence::If,\n             ExprKind::While(..) => ExprPrecedence::While,\n             ExprKind::Loop(..) => ExprPrecedence::Loop,\n@@ -1437,6 +1438,7 @@ impl Expr {\n             ExprKind::Binary(..) |\n             ExprKind::Yield(..) |\n             ExprKind::Cast(..) |\n+            ExprKind::Use(..) |\n             ExprKind::Err => {\n                 false\n             }\n@@ -1486,6 +1488,10 @@ pub enum ExprKind {\n     Cast(P<Expr>, P<Ty>),\n     /// A type reference (e.g., `Foo`).\n     Type(P<Expr>, P<Ty>),\n+    /// Semantically equivalent to `{ let _t = expr; _t }`.\n+    /// Maps directly to `hair::ExprKind::Use`.\n+    /// Only exists to tweak the drop order in HIR.\n+    Use(P<Expr>),\n     /// An `if` block, with an optional else block.\n     ///\n     /// I.e., `if <expr> { <expr> } else { <expr> }`."}, {"sha": "06225364f6c70091feb4f4b9d1f52baa825d678a", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -995,23 +995,32 @@ impl<'a> State<'a> {\n         self.ann.post(self, AnnNode::SubItem(ii.hir_id))\n     }\n \n+    pub fn print_local(\n+        &mut self,\n+        init: Option<&hir::Expr>,\n+        decl: impl Fn(&mut Self) -> io::Result<()>\n+    ) -> io::Result<()> {\n+        self.space_if_not_bol()?;\n+        self.ibox(indent_unit)?;\n+        self.word_nbsp(\"let\")?;\n+\n+        self.ibox(indent_unit)?;\n+        decl(self)?;\n+        self.end()?;\n+\n+        if let Some(ref init) = init {\n+            self.nbsp()?;\n+            self.word_space(\"=\")?;\n+            self.print_expr(&init)?;\n+        }\n+        self.end()\n+    }\n+\n     pub fn print_stmt(&mut self, st: &hir::Stmt) -> io::Result<()> {\n         self.maybe_print_comment(st.span.lo())?;\n         match st.node {\n             hir::StmtKind::Local(ref loc) => {\n-                self.space_if_not_bol()?;\n-                self.ibox(indent_unit)?;\n-                self.word_nbsp(\"let\")?;\n-\n-                self.ibox(indent_unit)?;\n-                self.print_local_decl(&loc)?;\n-                self.end()?;\n-                if let Some(ref init) = loc.init {\n-                    self.nbsp()?;\n-                    self.word_space(\"=\")?;\n-                    self.print_expr(&init)?;\n-                }\n-                self.end()?\n+                self.print_local(loc.init.deref(), |this| this.print_local_decl(&loc))?;\n             }\n             hir::StmtKind::Item(item) => {\n                 self.ann.nested(self, Nested::Item(item))?\n@@ -1379,6 +1388,24 @@ impl<'a> State<'a> {\n                 self.word_space(\":\")?;\n                 self.print_type(&ty)?;\n             }\n+            hir::ExprKind::Use(ref init) => {\n+                // Print `{`:\n+                self.cbox(indent_unit)?;\n+                self.ibox(0)?;\n+                self.bopen()?;\n+\n+                // Print `let _t = $init;`:\n+                let temp = ast::Ident::from_str(\"_t\");\n+                self.print_local(Some(init), |this| this.print_ident(temp))?;\n+                self.s.word(\";\")?;\n+\n+                // Print `_t`:\n+                self.space_if_not_bol()?;\n+                self.print_ident(temp)?;\n+\n+                // Print `}`:\n+                self.bclose_maybe_open(expr.span, indent_unit, true)?;\n+            }\n             hir::ExprKind::If(ref test, ref blk, ref elseopt) => {\n                 self.print_if(&test, &blk, elseopt.as_ref().map(|e| &**e))?;\n             }"}, {"sha": "920f978054396b6e4d29553fb8b2a065d84f1101", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -37,6 +37,7 @@\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n+#![feature(inner_deref)]\n #![cfg_attr(windows, feature(libc))]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]"}, {"sha": "52f105b8c40e53c5be7cc28f1f882c07a82e0ed6", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -521,6 +521,10 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_expr(&base);\n             }\n \n+            hir::ExprKind::Use(ref expr) => {\n+                self.consume_expr(&expr);\n+            }\n+\n             hir::ExprKind::AssignOp(_, ref lhs, ref rhs) => {\n                 if self.mc.tables.is_method_call(expr) {\n                     self.consume_expr(lhs);"}, {"sha": "966bec8381ae7c02d1de9963ad91f386462cea7d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -521,6 +521,7 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n       hir::ExprKind::Binary(..) |\n       hir::ExprKind::AddrOf(..) |\n       hir::ExprKind::Cast(..) |\n+      hir::ExprKind::Use(..) |\n       hir::ExprKind::Unary(..) |\n       hir::ExprKind::Break(..) |\n       hir::ExprKind::Continue(_) |\n@@ -1221,6 +1222,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             hir::ExprKind::AddrOf(_, ref e) |\n             hir::ExprKind::Cast(ref e, _) |\n             hir::ExprKind::Type(ref e, _) |\n+            hir::ExprKind::Use(ref e) |\n             hir::ExprKind::Unary(_, ref e) |\n             hir::ExprKind::Yield(ref e) |\n             hir::ExprKind::Repeat(ref e, _) => {\n@@ -1524,9 +1526,9 @@ fn check_expr<'a, 'tcx>(this: &mut Liveness<'a, 'tcx>, expr: &'tcx Expr) {\n         hir::ExprKind::Match(..) | hir::ExprKind::While(..) | hir::ExprKind::Loop(..) |\n         hir::ExprKind::Index(..) | hir::ExprKind::Field(..) |\n         hir::ExprKind::Array(..) | hir::ExprKind::Tup(..) | hir::ExprKind::Binary(..) |\n-        hir::ExprKind::Cast(..) | hir::ExprKind::Unary(..) | hir::ExprKind::Ret(..) |\n-        hir::ExprKind::Break(..) | hir::ExprKind::Continue(..) | hir::ExprKind::Lit(_) |\n-        hir::ExprKind::Block(..) | hir::ExprKind::AddrOf(..) |\n+        hir::ExprKind::Cast(..) | hir::ExprKind::Use(..) | hir::ExprKind::Unary(..) |\n+        hir::ExprKind::Ret(..) | hir::ExprKind::Break(..) | hir::ExprKind::Continue(..) |\n+        hir::ExprKind::Lit(_) | hir::ExprKind::Block(..) | hir::ExprKind::AddrOf(..) |\n         hir::ExprKind::Struct(..) | hir::ExprKind::Repeat(..) |\n         hir::ExprKind::Closure(..) | hir::ExprKind::Path(_) | hir::ExprKind::Yield(..) |\n         hir::ExprKind::Box(..) | hir::ExprKind::Type(..) | hir::ExprKind::Err => {"}, {"sha": "25fa19558de9759c94141fbe3c998a0903ce8ee3", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -678,7 +678,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             hir::ExprKind::Assign(..) | hir::ExprKind::AssignOp(..) |\n             hir::ExprKind::Closure(..) | hir::ExprKind::Ret(..) |\n             hir::ExprKind::Unary(..) | hir::ExprKind::Yield(..) |\n-            hir::ExprKind::MethodCall(..) | hir::ExprKind::Cast(..) |\n+            hir::ExprKind::MethodCall(..) | hir::ExprKind::Cast(..) | hir::ExprKind::Use(..) |\n             hir::ExprKind::Array(..) | hir::ExprKind::Tup(..) | hir::ExprKind::If(..) |\n             hir::ExprKind::Binary(..) | hir::ExprKind::While(..) |\n             hir::ExprKind::Block(..) | hir::ExprKind::Loop(..) | hir::ExprKind::Match(..) |"}, {"sha": "9a5af8a25378f93a7dfbac9ea42c1eabf43d9e78", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -909,6 +909,12 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, expr:\n                 visitor.cx.var_parent = visitor.cx.parent;\n             }\n \n+            hir::ExprKind::Use(ref expr) => {\n+                // `Use(expr)` does not denote a conditional scope.\n+                // Rather, we want to achieve the same behavior as `{ let _t = expr; _t }`.\n+                terminating(expr.hir_id.local_id);\n+            }\n+\n             hir::ExprKind::AssignOp(..) | hir::ExprKind::Index(..) |\n             hir::ExprKind::Unary(..) | hir::ExprKind::Call(..) | hir::ExprKind::MethodCall(..) => {\n                 // FIXME(https://github.com/rust-lang/rfcs/issues/811) Nested method calls"}, {"sha": "e54a24f4df197dbec308ec7e24897e4981ff023b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -759,6 +759,9 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 }\n             }\n         }\n+        hir::ExprKind::Use(ref source) => {\n+            ExprKind::Use { source: source.to_ref() }\n+        }\n         hir::ExprKind::Box(ref value) => {\n             ExprKind::Box {\n                 value: value.to_ref(),"}, {"sha": "2a423cc41661abd52596bae76541383ab7be6e84", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -436,7 +436,9 @@ fn check_expr_kind<'a, 'tcx>(\n         hir::ExprKind::Err => Promotable,\n \n         hir::ExprKind::AddrOf(_, ref expr) |\n-        hir::ExprKind::Repeat(ref expr, _) => {\n+        hir::ExprKind::Repeat(ref expr, _) |\n+        hir::ExprKind::Type(ref expr, _) |\n+        hir::ExprKind::Use(ref expr) => {\n             v.check_expr(&expr)\n         }\n \n@@ -483,10 +485,6 @@ fn check_expr_kind<'a, 'tcx>(\n             array_result\n         }\n \n-        hir::ExprKind::Type(ref expr, ref _ty) => {\n-            v.check_expr(&expr)\n-        }\n-\n         hir::ExprKind::Tup(ref hirvec) => {\n             let mut tup_result = Promotable;\n             for index in hirvec.iter() {\n@@ -495,7 +493,6 @@ fn check_expr_kind<'a, 'tcx>(\n             tup_result\n         }\n \n-\n         // Conditional control flow (possible to implement).\n         hir::ExprKind::Match(ref expr, ref hirvec_arm, ref _match_source) => {\n             // Compute the most demanding borrow from all the arms'"}, {"sha": "ff3245a467ad8ed460da84dd2279307076b54320", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd36ab64cae41e89d53113f683d790210846c1f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4bd36ab64cae41e89d53113f683d790210846c1f", "patch": "@@ -4533,6 +4533,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.check_expr_eq_type(&e, ty);\n                 ty\n             }\n+            ExprKind::Use(ref e) => {\n+                self.check_expr_with_expectation(e, expected)\n+            }\n             ExprKind::Array(ref args) => {\n                 let uty = expected.to_option(self).and_then(|uty| {\n                     match uty.sty {"}]}