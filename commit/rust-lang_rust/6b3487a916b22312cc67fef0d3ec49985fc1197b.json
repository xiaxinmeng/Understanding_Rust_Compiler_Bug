{"sha": "6b3487a916b22312cc67fef0d3ec49985fc1197b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMzQ4N2E5MTZiMjIzMTJjYzY3ZmVmMGQzZWM0OTk4NWZjMTE5N2I=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-02-09T17:32:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-09T17:32:23Z"}, "message": "Merge pull request #2448 from rust-lang-nursery/fixes\n\nFixes", "tree": {"sha": "db811f92209e7f8bae4e1dec8e4d1b318bb07d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db811f92209e7f8bae4e1dec8e4d1b318bb07d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b3487a916b22312cc67fef0d3ec49985fc1197b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJafdsnCRBK7hj4Ov3rIwAAdHIIABIqMzaDLDUuFtRLtRrsQS+6\nK0CNapGoz8JQjgG6FB7raGL6fID3yz1cXSjrr0GDE1jbY2JdBTgM0CRGphfoNkrJ\nllknYKa3WEl3xwSDEwdSzULwb1QFHPbDTdtap+c3WMoMAlwqJIMYeH//IuprF9Dm\nCpaxx4ziPMAKeKmt9QDY/2RxuQ37JPiOZZ71hirfCy3nKHv2fVrOlfyWdnewq5LV\ntHq1pt+V9E/pwOJffMRDWaHaRG6dMPigtCZE8E7fo1KCkpVxHfHEzgEOuI1srzjt\nQEfRyAyvM7D5oqTsoboU8f8CDA9f4VpEX7y9RWp1VzM3hxEClFTUb2FfhOy2jAc=\n=LapC\n-----END PGP SIGNATURE-----\n", "payload": "tree db811f92209e7f8bae4e1dec8e4d1b318bb07d9d\nparent fc7b3955f8dacf1158930e4ddadb248bc0c9feff\nparent 6feb0dd9824e81c2ee9a2389e53e564d25bdca2d\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1518197543 +0100\ncommitter GitHub <noreply@github.com> 1518197543 +0100\n\nMerge pull request #2448 from rust-lang-nursery/fixes\n\nFixes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3487a916b22312cc67fef0d3ec49985fc1197b", "html_url": "https://github.com/rust-lang/rust/commit/6b3487a916b22312cc67fef0d3ec49985fc1197b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b3487a916b22312cc67fef0d3ec49985fc1197b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc7b3955f8dacf1158930e4ddadb248bc0c9feff", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc7b3955f8dacf1158930e4ddadb248bc0c9feff", "html_url": "https://github.com/rust-lang/rust/commit/fc7b3955f8dacf1158930e4ddadb248bc0c9feff"}, {"sha": "6feb0dd9824e81c2ee9a2389e53e564d25bdca2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6feb0dd9824e81c2ee9a2389e53e564d25bdca2d", "html_url": "https://github.com/rust-lang/rust/commit/6feb0dd9824e81c2ee9a2389e53e564d25bdca2d"}], "stats": {"total": 139, "additions": 61, "deletions": 78}, "files": [{"sha": "d41ea5849a88401f441496275dfff6c6a63b369b", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -134,15 +134,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyAndPaste {\n \n /// Implementation of `IF_SAME_THEN_ELSE`.\n fn lint_same_then_else(cx: &LateContext, blocks: &[&Block]) {\n-    let hash: &Fn(&&Block) -> u64 = &|block| -> u64 {\n-        let mut h = SpanlessHash::new(cx);\n-        h.hash_block(block);\n-        h.finish()\n-    };\n-\n     let eq: &Fn(&&Block, &&Block) -> bool = &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).eq_block(lhs, rhs) };\n \n-    if let Some((i, j)) = search_same(blocks, hash, eq) {\n+    if let Some((i, j)) = search_same_sequenced(blocks, eq) {\n         span_note_and_lint(\n             cx,\n             IF_SAME_THEN_ELSE,\n@@ -309,6 +303,19 @@ fn bindings<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, pat: &Pat) -> HashMap<Interned\n     result\n }\n \n+\n+fn search_same_sequenced<T, Eq>(exprs: &[T], eq: Eq) -> Option<(&T, &T)>\n+where\n+    Eq: Fn(&T, &T) -> bool,\n+{\n+    for win in exprs.windows(2) {\n+        if eq(&win[0], &win[1]) {\n+            return Some((&win[0], &win[1]));\n+        }\n+    }\n+    None\n+}\n+\n fn search_same<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Option<(&T, &T)>\n where\n     Hash: Fn(&T) -> u64,"}, {"sha": "d4c91eab1c3d9fefd6921194ef3e86986294c18f", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -5,10 +5,11 @@ use rustc::lint::*;\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::{cmt, Categorization};\n use rustc::ty::{self, Ty};\n+use rustc::ty::layout::LayoutOf;\n use rustc::util::nodemap::NodeSet;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n-use utils::{span_lint, type_size};\n+use utils::span_lint;\n \n pub struct Pass {\n     pub too_large_for_stack: u64,\n@@ -164,7 +165,7 @@ impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {\n         // Large types need to be boxed to avoid stack\n         // overflows.\n         if ty.is_box() {\n-            type_size(self.cx, ty.boxed_ty()).unwrap_or(0) > self.too_large_for_stack\n+            self.cx.layout_of(ty.boxed_ty()).ok().map_or(0, |l| l.size.bytes()) > self.too_large_for_stack\n         } else {\n             false\n         }"}, {"sha": "e13b771cf24a38df0e522e2922a114f821297859", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -2,8 +2,8 @@\n \n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{snippet_opt, span_lint_and_then, type_size};\n-use rustc::ty::TypeFoldable;\n+use utils::{snippet_opt, span_lint_and_then};\n+use rustc::ty::layout::LayoutOf;\n \n /// **What it does:** Checks for large size differences between variants on\n /// `enum`s.\n@@ -61,13 +61,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                 let size: u64 = variant\n                     .fields\n                     .iter()\n-                    .map(|f| {\n+                    .filter_map(|f| {\n                         let ty = cx.tcx.type_of(f.did);\n-                        if ty.needs_subst() {\n-                            0 // we can't reason about generics, so we treat them as zero sized\n-                        } else {\n-                            type_size(cx, ty).expect(\"size should be computable for concrete type\")\n-                        }\n+                        // don't count generics by filtering out everything\n+                        // that does not have a layout\n+                        cx.layout_of(ty).ok().map(|l| l.size.bytes())\n                     })\n                     .sum();\n "}, {"sha": "ba79bf4407bde374d150c884ec8989008b9666ef", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -4,6 +4,7 @@ use rustc::hir::*;\n use rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc::lint::*;\n use rustc::ty::{self, Ty, TyCtxt, TypeckTables};\n+use rustc::ty::layout::LayoutOf;\n use rustc::ty::subst::Substs;\n use rustc_typeck::hir_ty_to_ty;\n use std::cmp::Ordering;\n@@ -15,7 +16,7 @@ use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n use utils::{comparisons, higher, in_constant, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n             multispan_sugg, opt_def_id, same_tys, snippet, snippet_opt, span_help_and_lint, span_lint,\n-            span_lint_and_sugg, span_lint_and_then, type_size};\n+            span_lint_and_sugg, span_lint_and_then};\n use utils::paths;\n \n /// Handles all the linting of funky types\n@@ -1478,7 +1479,7 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n         let pre_cast_ty = cx.tables.expr_ty(cast_exp);\n         let cast_ty = cx.tables.expr_ty(expr);\n         // if it's a cast from i32 to u32 wrapping will invalidate all these checks\n-        if type_size(cx, pre_cast_ty) == type_size(cx, cast_ty) {\n+        if cx.layout_of(pre_cast_ty).ok().map(|l| l.size) == cx.layout_of(cast_ty).ok().map(|l| l.size) {\n             return None;\n         }\n         match pre_cast_ty.sty {"}, {"sha": "cad6ec532a6669b7041fc2e33a72e3f3c0f59a64", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -1,4 +1,4 @@\n-use consts::{constant, constant_context};\n+use consts::{constant_simple, constant_context};\n use rustc::lint::*;\n use rustc::hir::*;\n use std::hash::{Hash, Hasher};\n@@ -64,7 +64,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             return false;\n         }\n \n-        if let (Some(l), Some(r)) = (constant(self.cx, left), constant(self.cx, right)) {\n+        if let (Some(l), Some(r)) = (constant_simple(self.cx, left), constant_simple(self.cx, right)) {\n             if l == r {\n                 return true;\n             }\n@@ -317,7 +317,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n     }\n \n     pub fn hash_expr(&mut self, e: &Expr) {\n-        if let Some(e) = constant(self.cx, e) {\n+        if let Some(e) = constant_simple(self.cx, e) {\n             return e.hash(&mut self.s);\n         }\n "}, {"sha": "c501dadeb79335692e87d9103be7dccb4a28bf4e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -9,7 +9,6 @@ use rustc::lint::{LateContext, Level, Lint, LintContext};\n use rustc::session::Session;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::layout::LayoutOf;\n use rustc_errors;\n use std::borrow::Cow;\n use std::env;\n@@ -1048,12 +1047,6 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n     None\n }\n \n-pub fn type_size<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Option<u64> {\n-    cx.layout_of(ty)\n-        .ok()\n-        .map(|layout| layout.size.bytes())\n-}\n-\n /// Returns true if the lint is allowed in the current context\n ///\n /// Useful for skipping long running code when it's unnecessary"}, {"sha": "eb14ce807564fb3c73459f9f44e6853e89919bcc", "filename": "tests/run-pass/if_same_then_else.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/tests%2Frun-pass%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/tests%2Frun-pass%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fif_same_then_else.rs?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -0,0 +1,13 @@\n+#![deny(if_same_then_else)]\n+\n+fn main() {}\n+\n+pub fn foo(a: i32, b: i32) -> Option<&'static str> {\n+    if a == b {\n+        None\n+    } else if a > b {\n+        Some(\"a pfeil b\")\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "08acc2bc4d81c1164785747700ca17dd472a59ef", "filename": "tests/run-pass/match_same_arms_const.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/tests%2Frun-pass%2Fmatch_same_arms_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/tests%2Frun-pass%2Fmatch_same_arms_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmatch_same_arms_const.rs?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -0,0 +1,16 @@\n+#![deny(match_same_arms)]\n+\n+const PRICE_OF_SWEETS: u32 = 5;\n+const PRICE_OF_KINDNESS: u32 = 0;\n+const PRICE_OF_DRINKS: u32 = 5;\n+\n+pub fn price(thing: &str) -> u32 {\n+    match thing {\n+        \"rolo\" => PRICE_OF_SWEETS,\n+        \"advice\" => PRICE_OF_KINDNESS,\n+        \"juice\" => PRICE_OF_DRINKS,\n+        _ => panic!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0588c141103f3ea44c245cb960ac5041f816efe0", "filename": "tests/ui/copies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -160,7 +160,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n     else if false {\n         foo();\n     }\n-    else if foo() { //~ ERROR same body as `if` block\n+    else if foo() {\n         let _ = match 42 {\n             42 => 1,\n             a if a > 0 => 2,\n@@ -336,7 +336,7 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         let foo = \"bar\";\n         return Ok(&foo[0..]);\n     }\n-    else { //~ ERROR same body as `if` block\n+    else {\n         let foo = \"\";\n         return Ok(&foo[0..]);\n     }"}, {"sha": "5faf41b51e33d914d2a285bc7d284b5440dd5356", "filename": "tests/ui/copies.stderr", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6b3487a916b22312cc67fef0d3ec49985fc1197b/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b3487a916b22312cc67fef0d3ec49985fc1197b/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=6b3487a916b22312cc67fef0d3ec49985fc1197b", "patch": "@@ -151,32 +151,6 @@ note: same as this\n 139 | |     }\n     | |_____^\n \n-error: this `if` has identical blocks\n-   --> $DIR/copies.rs:163:19\n-    |\n-163 |       else if foo() { //~ ERROR same body as `if` block\n-    |  ___________________^\n-164 | |         let _ = match 42 {\n-165 | |             42 => 1,\n-166 | |             a if a > 0 => 2,\n-...   |\n-169 | |         };\n-170 | |     }\n-    | |_____^\n-    |\n-note: same as this\n-   --> $DIR/copies.rs:152:13\n-    |\n-152 |       if true {\n-    |  _____________^\n-153 | |         let _ = match 42 {\n-154 | |             42 => 1,\n-155 | |             a if a > 0 => 2,\n-...   |\n-158 | |         };\n-159 | |     }\n-    | |_____^\n-\n error: this `if` has identical blocks\n    --> $DIR/copies.rs:175:10\n     |\n@@ -370,26 +344,6 @@ note: same as this\n 326 | |     }\n     | |_____^\n \n-error: this `if` has identical blocks\n-   --> $DIR/copies.rs:339:10\n-    |\n-339 |       else { //~ ERROR same body as `if` block\n-    |  __________^\n-340 | |         let foo = \"\";\n-341 | |         return Ok(&foo[0..]);\n-342 | |     }\n-    | |_____^\n-    |\n-note: same as this\n-   --> $DIR/copies.rs:331:13\n-    |\n-331 |       if true {\n-    |  _____________^\n-332 | |         let foo = \"\";\n-333 | |         return Ok(&foo[0..]);\n-334 | |     }\n-    | |_____^\n-\n error: this `if` has the same condition as a previous if\n    --> $DIR/copies.rs:353:13\n     |\n@@ -427,5 +381,5 @@ note: same as this\n 361 |     if 2*a == 1 {\n     |        ^^^^^^^^\n \n-error: aborting due to 22 previous errors\n+error: aborting due to 20 previous errors\n "}]}