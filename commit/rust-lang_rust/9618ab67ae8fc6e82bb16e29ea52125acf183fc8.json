{"sha": "9618ab67ae8fc6e82bb16e29ea52125acf183fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MThhYjY3YWU4ZmM2ZTgyYmIxNmUyOWVhNTIxMjVhY2YxODNmYzg=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-27T23:45:11Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-28T17:47:29Z"}, "message": "Re-enabled the rest of the asserts and things in rust_chan.cpp", "tree": {"sha": "2c7dc74914629d9b43cc7460ea0a5f73351bc43f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c7dc74914629d9b43cc7460ea0a5f73351bc43f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9618ab67ae8fc6e82bb16e29ea52125acf183fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9618ab67ae8fc6e82bb16e29ea52125acf183fc8", "html_url": "https://github.com/rust-lang/rust/commit/9618ab67ae8fc6e82bb16e29ea52125acf183fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9618ab67ae8fc6e82bb16e29ea52125acf183fc8/comments", "author": null, "committer": null, "parents": [{"sha": "b85dee8d5b223869c1b8c3917ed41b5373a29bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b85dee8d5b223869c1b8c3917ed41b5373a29bb1", "html_url": "https://github.com/rust-lang/rust/commit/b85dee8d5b223869c1b8c3917ed41b5373a29bb1"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "d77b196fd35c0d1ad8b375cf95dd12a00b134664", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9618ab67ae8fc6e82bb16e29ea52125acf183fc8/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9618ab67ae8fc6e82bb16e29ea52125acf183fc8/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=9618ab67ae8fc6e82bb16e29ea52125acf183fc8", "patch": "@@ -22,8 +22,8 @@ rust_chan::~rust_chan() {\n     KLOG(kernel, comm, \"del rust_chan(task=0x%\" PRIxPTR \")\",\n          (uintptr_t) this);\n \n-    // A(kernel->sched, is_associated() == false,\n-    //   \"Channel must be disassociated before being freed.\");\n+    A(kernel, is_associated() == false,\n+      \"Channel must be disassociated before being freed.\");\n }\n \n /**\n@@ -51,8 +51,8 @@ bool rust_chan::is_associated() {\n  * Unlink this channel from its associated port.\n  */\n void rust_chan::disassociate() {\n-    // A(kernel->sched, is_associated(),\n-    //   \"Channel must be associated with a port.\");\n+    A(kernel, is_associated(),\n+      \"Channel must be associated with a port.\");\n \n     if (port->is_proxy() == false) {\n         scoped_lock with(port->referent()->lock);\n@@ -73,8 +73,7 @@ void rust_chan::disassociate() {\n  * Attempt to send data to the associated port.\n  */\n void rust_chan::send(void *sptr) {\n-    // rust_scheduler *sched = kernel->sched;\n-    // I(sched, !port->is_proxy());\n+    I(kernel, !port->is_proxy());\n \n     rust_port *target_port = port->referent();\n     // TODO: We can probably avoid this lock by using atomic operations in\n@@ -84,13 +83,13 @@ void rust_chan::send(void *sptr) {\n     buffer.enqueue(sptr);\n \n     if (!is_associated()) {\n-        // W(sched, is_associated(),\n-        //   \"rust_chan::transmit with no associated port.\");\n+        W(kernel, is_associated(),\n+          \"rust_chan::transmit with no associated port.\");\n         return;\n     }\n \n-    // A(sched, !buffer.is_empty(),\n-    //   \"rust_chan::transmit with nothing to send.\");\n+    A(kernel, !buffer.is_empty(),\n+      \"rust_chan::transmit with nothing to send.\");\n \n     if (port->is_proxy()) {\n         data_message::send(buffer.peek(), buffer.unit_sz, \"send data\",\n@@ -121,8 +120,8 @@ rust_chan *rust_chan::clone(rust_task *target) {\n  * appear to be live, causing modify-after-free errors.\n  */\n void rust_chan::destroy() {\n-    // A(kernel->sched, ref_count == 0,\n-    //   \"Channel's ref count should be zero.\");\n+    A(kernel, ref_count == 0,\n+      \"Channel's ref count should be zero.\");\n \n     if (is_associated()) {\n         if (port->is_proxy()) {"}]}