{"sha": "2c976765b8e426506285b334e0a1506c78b135e2", "node_id": "C_kwDOAAsO6NoAKDJjOTc2NzY1YjhlNDI2NTA2Mjg1YjMzNGUwYTE1MDZjNzhiMTM1ZTI", "commit": {"author": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-04-09T19:37:31Z"}, "committer": {"name": "blyxyas", "email": "blyxyas@gmail.com", "date": "2023-04-09T19:37:31Z"}, "message": "Migrate `sess.opts.tests` uses to `sess.is_test_crate()`", "tree": {"sha": "00ba1bc5b3a493110076b1b4842c899d0659fe62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00ba1bc5b3a493110076b1b4842c899d0659fe62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c976765b8e426506285b334e0a1506c78b135e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEM3aofraJSaf7CtgpTTgXC1ovwzQFAmQzE/wACgkQTTgXC1ov\nwzTBrA/+JBjFYgSsxKjA2JXQybraSmBkRLbWMs8UlmS1DVk5QAWOCpE2OQotVQr1\nMJo6DGYcEE0wXuQwYKuYXuwoONswga21Z1eOW2OwXKmfvN/XybS/9T70pC6zWgXp\nLIJAL2oy1dgkq1TLNjVupWCH60LNuKF3uZO/Qg/L355qiSR9cB6VG7qJibp/OXoE\nAI6PQVY+dBi0A2DQNFO8FCxkcM7rMykt6EraozUNack5sn/LhB+r7M5PNXDOHn0a\nhJ3cIl0gz8O9Grc0OJUNVV/SXXkdN0itGRbc8ZVE5n/XKab2zpZ4u+UhVxORzTMg\nZM49bYogoHaFSq0w0654ovh9gNGeqrpIp6aC8n3Nj+VX1RlodGcWw2qbmOwyCAQM\nPG2SVBQ3Bu6TcjEXHma2tAWOlLv1d6iNdw6S3arGQVRP035ltjFMd6X4TGtEJOtz\nbByMroCMD+mmtJG+QdPtV33Qe1EF+9OmHNfsk06ZvflTQd+Pl4ATg5P5Mm5BsPHr\nxysLpWHGO2y2yMNh3s3kbYF052740cP+yWv6OHZP4ftyIJ0WQuHtmZ2dG4nSFiGH\nGgMBPnWgGMN7Gjs8PO6LGvFomYjJGLKGVWN1YiHSSIcpmk4LzNO3S65IczA6qH/E\nmQ9xwEw6SIadioIDeWezWPJmK+8dmchp6xN/PvaU2zcFqAP5rn4=\n=7q12\n-----END PGP SIGNATURE-----", "payload": "tree 00ba1bc5b3a493110076b1b4842c899d0659fe62\nparent 28e19f19aaa9388814fb0cc358e18258127397f3\nauthor blyxyas <blyxyas@gmail.com> 1681069051 +0200\ncommitter blyxyas <blyxyas@gmail.com> 1681069051 +0200\n\nMigrate `sess.opts.tests` uses to `sess.is_test_crate()`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c976765b8e426506285b334e0a1506c78b135e2", "html_url": "https://github.com/rust-lang/rust/commit/2c976765b8e426506285b334e0a1506c78b135e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c976765b8e426506285b334e0a1506c78b135e2/comments", "author": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blyxyas", "id": 73757586, "node_id": "MDQ6VXNlcjczNzU3NTg2", "avatar_url": "https://avatars.githubusercontent.com/u/73757586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blyxyas", "html_url": "https://github.com/blyxyas", "followers_url": "https://api.github.com/users/blyxyas/followers", "following_url": "https://api.github.com/users/blyxyas/following{/other_user}", "gists_url": "https://api.github.com/users/blyxyas/gists{/gist_id}", "starred_url": "https://api.github.com/users/blyxyas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blyxyas/subscriptions", "organizations_url": "https://api.github.com/users/blyxyas/orgs", "repos_url": "https://api.github.com/users/blyxyas/repos", "events_url": "https://api.github.com/users/blyxyas/events{/privacy}", "received_events_url": "https://api.github.com/users/blyxyas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28e19f19aaa9388814fb0cc358e18258127397f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e19f19aaa9388814fb0cc358e18258127397f3", "html_url": "https://github.com/rust-lang/rust/commit/28e19f19aaa9388814fb0cc358e18258127397f3"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "80f497333a632933a764385bfc771ec573c4f415", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=2c976765b8e426506285b334e0a1506c78b135e2", "patch": "@@ -53,7 +53,7 @@ pub fn inject(krate: &mut ast::Crate, sess: &Session, resolver: &mut dyn Resolve\n     // even in non-test builds\n     let test_runner = get_test_runner(span_diagnostic, &krate);\n \n-    if sess.opts.test {\n+    if sess.is_test_crate() {\n         let panic_strategy = match (panic_strategy, sess.opts.unstable_opts.panic_abort_tests) {\n             (PanicStrategy::Abort, true) => PanicStrategy::Abort,\n             (PanicStrategy::Abort, false) => {"}, {"sha": "7a5fa5a370cb9af889e177adaf1bf8c92df764ec", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=2c976765b8e426506285b334e0a1506c78b135e2", "patch": "@@ -2301,7 +2301,7 @@ fn add_native_libs_from_crate(\n                         || (whole_archive == None\n                             && bundle\n                             && cnum == LOCAL_CRATE\n-                            && sess.opts.test);\n+                            && sess.is_test_crate());\n \n                     if bundle && cnum != LOCAL_CRATE {\n                         if let Some(filename) = lib.filename {"}, {"sha": "0e4e20c7cd1d4de48821d8d2369de0c3dc87dcb1", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=2c976765b8e426506285b334e0a1506c78b135e2", "patch": "@@ -230,7 +230,7 @@ fn configure_and_expand(\n             features: Some(features),\n             recursion_limit,\n             trace_mac: sess.opts.unstable_opts.trace_macros,\n-            should_test: sess.opts.test,\n+            should_test: sess.is_test_crate(),\n             span_debug: sess.opts.unstable_opts.span_debug,\n             proc_macro_backtrace: sess.opts.unstable_opts.proc_macro_backtrace,\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n@@ -292,7 +292,7 @@ fn configure_and_expand(\n     }\n \n     sess.time(\"maybe_create_a_macro_crate\", || {\n-        let is_test_crate = sess.opts.test;\n+        let is_test_crate = sess.is_test_crate();\n         rustc_builtin_macros::proc_macro_harness::inject(\n             &mut krate,\n             sess,"}, {"sha": "4a35c6794663e09e8d1b927fdfb39df29bcd4e6b", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=2c976765b8e426506285b334e0a1506c78b135e2", "patch": "@@ -530,7 +530,7 @@ struct MissingStabilityAnnotations<'tcx> {\n impl<'tcx> MissingStabilityAnnotations<'tcx> {\n     fn check_missing_stability(&self, def_id: LocalDefId, span: Span) {\n         let stab = self.tcx.stability().local_stability(def_id);\n-        if !self.tcx.sess.opts.test\n+        if !self.tcx.sess.is_test_crate()\n             && stab.is_none()\n             && self.effective_visibilities.is_reachable(def_id)\n         {"}, {"sha": "ae3fd0ede6cffba21b839fc13b7db32adc6812b6", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=2c976765b8e426506285b334e0a1506c78b135e2", "patch": "@@ -393,7 +393,7 @@ impl Resolver<'_, '_> {\n             // If we are in the `--test` mode, suppress a help that adds the `#[cfg(test)]`\n             // attribute; however, if not, suggest adding the attribute. There is no way to\n             // retrieve attributes here because we do not have a `TyCtxt` yet.\n-            let test_module_span = if tcx.sess.opts.test {\n+            let test_module_span = if tcx.sess.is_test_crate() {\n                 None\n             } else {\n                 let parent_module = visitor.r.get_nearest_non_block_module("}, {"sha": "613abaa8e3cd168d86acf8cec0e82b7d9ede20b6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c976765b8e426506285b334e0a1506c78b135e2/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=2c976765b8e426506285b334e0a1506c78b135e2", "patch": "@@ -1258,7 +1258,7 @@ pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateCo\n     // some default and generated configuration items.\n     let default_cfg = default_configuration(sess);\n     // If the user wants a test runner, then add the test cfg.\n-    if sess.opts.test {\n+    if sess.is_test_crate() {\n         user_cfg.insert((sym::test, None));\n     }\n     user_cfg.extend(default_cfg.iter().cloned());"}]}