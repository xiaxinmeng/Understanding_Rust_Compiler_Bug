{"sha": "989fa053895a27fd40896335224b619843b7e58a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OWZhMDUzODk1YTI3ZmQ0MDg5NjMzNTIyNGI2MTk4NDNiN2U1OGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-11T10:00:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-11T10:00:30Z"}, "message": "Auto merge of #52245 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #51701 (Better docs for copy_from_slice & clone_from_slice)\n - #52231 (Fix typo in error message E0277)\n - #52233 (Improve lint handling in rustdoc)\n - #52238 (Avoid unwrapping in PanicInfo doc example.)\n - #52241 (Fix typo in E0433 docs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "657d271a64c8661a24850c07d5c8ec9086c3a777", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/657d271a64c8661a24850c07d5c8ec9086c3a777"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/989fa053895a27fd40896335224b619843b7e58a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/989fa053895a27fd40896335224b619843b7e58a", "html_url": "https://github.com/rust-lang/rust/commit/989fa053895a27fd40896335224b619843b7e58a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/989fa053895a27fd40896335224b619843b7e58a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae5b629efd79de78e6ba7ef493c32857bd7f9cf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae5b629efd79de78e6ba7ef493c32857bd7f9cf9", "html_url": "https://github.com/rust-lang/rust/commit/ae5b629efd79de78e6ba7ef493c32857bd7f9cf9"}, {"sha": "985c5a708edcfcc9ed11cfe5b575cf0e794e1747", "url": "https://api.github.com/repos/rust-lang/rust/commits/985c5a708edcfcc9ed11cfe5b575cf0e794e1747", "html_url": "https://github.com/rust-lang/rust/commit/985c5a708edcfcc9ed11cfe5b575cf0e794e1747"}], "stats": {"total": 355, "additions": 187, "deletions": 168}, "files": [{"sha": "090f61a5d6997619466bcfec28f574878ba92719", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -92,7 +92,7 @@ impl<T: ?Sized> !Send for *mut T { }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sized\"]\n #[rustc_on_unimplemented(\n-    message=\"the size for value values of type `{Self}` cannot be known at compilation time\",\n+    message=\"the size for values of type `{Self}` cannot be known at compilation time\",\n     label=\"doesn't have a size known at compile-time\",\n     note=\"to learn more, visit <https://doc.rust-lang.org/book/second-edition/\\\n           ch19-04-advanced-types.html#dynamically-sized-types--sized>\","}, {"sha": "10f02ca2fdc45cf8e06b291fa94070370729109a", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -30,7 +30,11 @@ use fmt;\n /// use std::panic;\n ///\n /// panic::set_hook(Box::new(|panic_info| {\n-///     println!(\"panic occurred: {:?}\", panic_info.payload().downcast_ref::<&str>().unwrap());\n+///     if let Some(s) = panic_info.payload().downcast_ref::<&str>() {\n+///         println!(\"panic occurred: {:?}\", s);\n+///     } else {\n+///         println!(\"panic occurred\");\n+///     }\n /// }));\n ///\n /// panic!(\"Normal panic\");"}, {"sha": "ed29d80cb903c58db79067c5c256cbae2135510a", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1541,6 +1541,9 @@ impl<T> [T] {\n     /// let src = [1, 2, 3, 4];\n     /// let mut dst = [0, 0];\n     ///\n+    /// // Because the slices have to be the same length,\n+    /// // we slice the source slice from four elements\n+    /// // to two. It will panic if we don't do this.\n     /// dst.clone_from_slice(&src[2..]);\n     ///\n     /// assert_eq!(src, [1, 2, 3, 4]);\n@@ -1607,6 +1610,9 @@ impl<T> [T] {\n     /// let src = [1, 2, 3, 4];\n     /// let mut dst = [0, 0];\n     ///\n+    /// // Because the slices have to be the same length,\n+    /// // we slice the source slice from four elements\n+    /// // to two. It will panic if we don't do this.\n     /// dst.copy_from_slice(&src[2..]);\n     ///\n     /// assert_eq!(src, [1, 2, 3, 4]);"}, {"sha": "6593e239bc302db54bdafd0d09429589d8adba0c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1256,7 +1256,7 @@ let map = HashMap::new();\n ```\n \n Please verify you didn't misspell the type/module's name or that you didn't\n-forgot to import it:\n+forget to import it:\n \n \n ```"}, {"sha": "0a56c639220b464406056cebdff1a704926ddf6e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -193,6 +193,17 @@ pub fn run_core(search_paths: SearchPaths,\n     let intra_link_resolution_failure_name = lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE.name;\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n     let missing_docs = rustc_lint::builtin::MISSING_DOCS.name;\n+\n+    // In addition to those specific lints, we also need to whitelist those given through\n+    // command line, otherwise they'll get ignored and we don't want that.\n+    let mut whitelisted_lints = vec![warnings_lint_name.to_owned(),\n+                                     intra_link_resolution_failure_name.to_owned(),\n+                                     missing_docs.to_owned()];\n+\n+    for (lint, _) in &cmd_lints {\n+        whitelisted_lints.push(lint.clone());\n+    }\n+\n     let lints = lint::builtin::HardwiredLints.get_lints()\n                     .into_iter()\n                     .chain(rustc_lint::SoftLints.get_lints().into_iter())\n@@ -248,9 +259,7 @@ pub fn run_core(search_paths: SearchPaths,\n                                      .filter_map(|lint| {\n                                          // We don't want to whitelist *all* lints so let's\n                                          // ignore those ones.\n-                                         if lint.name == warnings_lint_name ||\n-                                            lint.name == intra_link_resolution_failure_name ||\n-                                            lint.name == missing_docs {\n+                                         if whitelisted_lints.iter().any(|l| &lint.name == l) {\n                                              None\n                                          } else {\n                                              Some(lint)"}, {"sha": "c561ae861ed2ae02d3ab0e6646b88833080b5815", "filename": "src/test/compile-fail/associated-types-unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -14,7 +14,7 @@ trait Get {\n }\n \n fn foo<T:Get>(t: T) {\n-    let x = t.get(); //~ ERROR the size for value values of type\n+    let x = t.get(); //~ ERROR the size for values of type\n }\n \n fn main() {"}, {"sha": "a58aebee77be7d7618a8688c3c1e9d2d22179fac", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -13,6 +13,6 @@ trait Trait {}\n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n-    //~| ERROR the size for value values of type\n-    //~| ERROR the size for value values of type\n+    //~| ERROR the size for values of type\n+    //~| ERROR the size for values of type\n }"}, {"sha": "372f3187805083dd27cb4bafc435f861736ad6e1", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -43,6 +43,6 @@ pub fn main() {\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n }"}, {"sha": "339cfb5443de385de9244b30c6dc19c056bffdee", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -45,5 +45,5 @@ pub fn main() {\n     //~| expected type `dyn ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n-    //~| ERROR the size for value values of type\n+    //~| ERROR the size for values of type\n }"}, {"sha": "9a329c636ae468817574f0cf042e45ba993871b4", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -47,5 +47,5 @@ pub fn main() {\n     //~| expected type `dyn ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n-    //~| ERROR the size for value values of type\n+    //~| ERROR the size for values of type\n }"}, {"sha": "a54301071ba0e341162124e2aa409f91ceb6cd10", "filename": "src/test/compile-fail/dst-bad-deep-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep-2.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -19,5 +19,5 @@ pub fn main() {\n     let f: ([isize; 3],) = ([5, 6, 7],);\n     let g: &([isize],) = &f;\n     let h: &(([isize],),) = &(*g,);\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }"}, {"sha": "3d7e2b8f6711d1eb3e5421396f46d1d68c7b9b0a", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let f: Fat<[isize; 3]> = Fat { ptr: [5, 6, 7] };\n     let g: &Fat<[isize]> = &f;\n     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }"}, {"sha": "70b46b1bd79fd6042e8f7753ebef13ad4fa45273", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -16,22 +16,22 @@ impl Foo for [u8] {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {\n     let u: &Foo = t;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn test2<T: ?Sized + Foo>(t: &T) {\n     let v: &Foo = t as &Foo;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn test3() {\n     let _: &[&Foo] = &[\"hi\"];\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn test4(x: &[u8]) {\n     let _: &Foo = x as &Foo;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() { }"}, {"sha": "7316a48970f67a9bad9a9dadd02821ba1dfce4d0", "filename": "src/test/compile-fail/dst-sized-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,9 +15,9 @@\n trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n \n impl Foo<[isize]> for usize { }\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n impl Foo<isize> for [usize] { }\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n pub fn main() { }"}, {"sha": "f2db4553868100ef0f0003e5cab5242760b4fc13", "filename": "src/test/compile-fail/extern-types-unsized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-types-unsized.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -30,14 +30,14 @@ fn assert_sized<T>() { }\n \n fn main() {\n     assert_sized::<A>();\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     assert_sized::<Foo>();\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     assert_sized::<Bar<A>>();\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     assert_sized::<Bar<Bar<A>>>();\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }"}, {"sha": "0b154d0a3ea88f12b9b72d798fbe578310a24ef8", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _x = \"test\" as &::std::any::Any;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }"}, {"sha": "c123e85a0e0fcdf87bc94b3eaaa522c5ccd77673", "filename": "src/test/compile-fail/issue-15756.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,7 +15,7 @@ fn dft_iter<'a, T>(arg1: Chunks<'a,T>, arg2: ChunksMut<'a,T>)\n {\n     for\n     &mut something\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     in arg2\n     {\n     }"}, {"sha": "cbd0da4b53ce341d6da0a5c6fff400c36587affc", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -13,5 +13,5 @@\n \n fn main() {\n     (|| Box::new(*(&[0][..])))();\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }"}, {"sha": "260038b7add59f561e463210359c9ef3c249270c", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -12,7 +12,7 @@ pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     AbstractRenderer\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n {\n     match 0 {\n         _ => unimplemented!()"}, {"sha": "cc87a0977a0ccdbc1934f7d34a87f135811be09e", "filename": "src/test/compile-fail/issue-18919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -11,7 +11,7 @@\n type FuncType<'f> = Fn(&isize) -> isize + 'f;\n \n fn ho_func(f: Option<FuncType>) {\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() {}"}, {"sha": "8db09182fa3bb7011f9bb73b59d0f64e6b06887e", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,7 +15,7 @@ trait From<Src> {\n }\n \n trait To {\n-    fn to<Dst>(  //~ ERROR the size for value values of type\n+    fn to<Dst>(  //~ ERROR the size for values of type\n         self\n     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n         From::from(self)"}, {"sha": "f760cd59968c214c844a1ec1afbc36e83f96d257", "filename": "src/test/compile-fail/issue-20433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-20433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-20433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20433.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -14,5 +14,5 @@ struct The;\n \n impl The {\n     fn iceman(c: Vec<[i32]>) {}\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }"}, {"sha": "60d012ab13426a7e7c6b68b077ba578060a6f828", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -10,7 +10,7 @@\n \n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n }\n \n fn main() {}"}, {"sha": "e0a87b3a1746e99db5679c0506011dbee56de075", "filename": "src/test/compile-fail/issue-22874.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-22874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-22874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22874.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -10,7 +10,7 @@\n \n struct Table {\n     rows: [[String]],\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn f(table: &Table) -> &[String] {"}, {"sha": "5de00eb8f6823859ae66678d4ec90b3db50c0d86", "filename": "src/test/compile-fail/issue-23281.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -14,7 +14,7 @@ pub struct Struct;\n \n impl Struct {\n     pub fn function(funs: Vec<Fn() -> ()>) {}\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() {}"}, {"sha": "a9c7978642d5f528766af4558ba64f32417566b3", "filename": "src/test/compile-fail/issue-24446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     static foo: Fn() -> u32 = || -> u32 {\n         //~^ ERROR mismatched types\n-        //~| ERROR the size for value values of type\n+        //~| ERROR the size for values of type\n         0\n     };\n }"}, {"sha": "619616adda6debb5cc27dd85f20b976d76872df7", "filename": "src/test/compile-fail/issue-27060-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27060-2.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -10,7 +10,7 @@\n \n #[repr(packed)]\n pub struct Bad<T: ?Sized> {\n-    data: T, //~ ERROR the size for value values of type\n+    data: T, //~ ERROR the size for values of type\n }\n \n fn main() {}"}, {"sha": "294c288a970dfc0f24b878406dbf0db2ba3b9285", "filename": "src/test/compile-fail/issue-27078.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-27078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-27078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27078.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -13,7 +13,7 @@\n trait Foo {\n     const BAR: i32;\n     fn foo(self) -> &'static i32 {\n-        //~^ ERROR the size for value values of type\n+        //~^ ERROR the size for values of type\n         &<Self>::BAR\n     }\n }"}, {"sha": "5909322ff1fe595ff0156b71bc4b8c446ed21c44", "filename": "src/test/compile-fail/issue-35988.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-35988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-35988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35988.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -10,7 +10,7 @@\n \n enum E {\n     V([Box<E>]),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() {}"}, {"sha": "7f01ed3f8201322f3dd2ba480fe3016b2eb5d2d4", "filename": "src/test/compile-fail/issue-38954.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38954.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn _test(ref _p: str) {}\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n fn main() { }"}, {"sha": "5d7546e1bc4b345fb796f519fd8f77f7a11d95f8", "filename": "src/test/compile-fail/issue-41229-ref-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41229-ref-str.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn example(ref s: str) {}\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n fn main() {}"}, {"sha": "f7705297dfdba00f30928ab62fe5fc91fd736161", "filename": "src/test/compile-fail/issue-42312.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-42312.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -12,10 +12,10 @@ use std::ops::Deref;\n \n pub trait Foo {\n     fn baz(_: Self::Target) where Self: Deref {}\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n pub fn f(_: ToString) {}\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n fn main() { }"}, {"sha": "a91f5d281dd9044ec40ed3a0520fb073b842a7de", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,8 +15,8 @@ struct Struct {\n }\n \n fn new_struct(r: A+'static)\n-    -> Struct { //~^ ERROR the size for value values of type\n-    //~^ ERROR the size for value values of type\n+    -> Struct { //~^ ERROR the size for values of type\n+    //~^ ERROR the size for values of type\n     Struct { r: r }\n }\n "}, {"sha": "59c78052e15d243f829aea4b08faa190cd861f8d", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -22,5 +22,5 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }"}, {"sha": "136bfaefa71c695485c8e83a9999f540286a7a33", "filename": "src/test/compile-fail/str-mut-idx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -12,8 +12,8 @@ fn bot<T>() -> T { loop {} }\n \n fn mutate(s: &mut str) {\n     s[1..2] = bot();\n-    //~^ ERROR the size for value values of type\n-    //~| ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n+    //~| ERROR the size for values of type\n     s[1usize] = bot();\n     //~^ ERROR the type `str` cannot be mutably indexed by `usize`\n }"}, {"sha": "d0e9a7f4a400db56735418d7aa324ed8b91a0438", "filename": "src/test/compile-fail/substs-ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -56,6 +56,6 @@ fn foo<'z>() where &'z (): Sized {\n     //[normal]~| found type `fn() {foo::<'static>}`\n \n     <str as Foo<u8>>::bar;\n-    //[verbose]~^ ERROR the size for value values of type\n-    //[normal]~^^ ERROR the size for value values of type\n+    //[verbose]~^ ERROR the size for values of type\n+    //[normal]~^^ ERROR the size for values of type\n }"}, {"sha": "9c38d8a9e2a36872254a41409db5ea42bab75836", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() { }"}, {"sha": "d79c2ed710e35f876b4e60d876d1a99d2c4ed0f5", "filename": "src/test/compile-fail/union/union-unsized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -12,15 +12,15 @@\n \n union U {\n     a: str,\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     b: u8,\n }\n \n union W {\n     a: u8,\n     b: str,\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() {}"}, {"sha": "498bdded350f2614a756006c9617519e7b9c5f91", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -10,5 +10,5 @@\n \n fn bar<T: Sized>() { }\n fn foo<T: ?Sized>() { bar::<T>() }\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n fn main() { }"}, {"sha": "4a6a5557c956069b98bc05af8cf7c68c14ec84a4", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,7 +15,7 @@ fn not_sized<T: ?Sized>() { }\n enum Foo<U> { FooSome(U), FooNone }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n //\n // Not OK: `T` is not sized.\n "}, {"sha": "a679bf770153cfa93a76d688fb326063c511c666", "filename": "src/test/compile-fail/unsized-inherent-impl-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,7 +15,7 @@\n struct S5<Y>(Y);\n \n impl<X: ?Sized> S5<X> {\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() { }"}, {"sha": "f2c63455c517db573af3331e36a510efbe94cf2f", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n struct Foo<T> { data: T }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n //\n // Not OK: `T` is not sized.\n \n struct Bar<T: ?Sized> { data: T }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "5c0b8f124025725f13459b1658c1a8d2d567a15e", "filename": "src/test/compile-fail/unsized-trait-impl-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -18,7 +18,7 @@ trait T3<Z: ?Sized> {\n struct S5<Y>(Y);\n \n impl<X: ?Sized> T3<X> for S5<X> {\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() { }"}, {"sha": "875a52e11c0deecdc1ad36e439071365791075cb", "filename": "src/test/compile-fail/unsized-trait-impl-trait-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -16,7 +16,7 @@ trait T2<Z> {\n }\n struct S4<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized> T2<X> for S4<X> {\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() { }"}, {"sha": "2e346e473ca12daf596c9d2b93dc6338e9ba8c4d", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,7 +15,7 @@ use std::marker;\n // Unbounded.\n fn f1<X: ?Sized>(x: &X) {\n     f2::<X>(x);\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n fn f2<X>(x: &X) {\n }\n@@ -26,7 +26,7 @@ trait T {\n }\n fn f3<X: ?Sized + T>(x: &X) {\n     f4::<X>(x);\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n fn f4<X: T>(x: &X) {\n }\n@@ -41,20 +41,20 @@ struct S<X: ?Sized> {\n \n fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n     f5(x1);\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     f6(x2); // ok\n }\n \n // Test some tuples.\n fn f9<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(*x1, 34));\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(32, *x1));\n-    //~^ ERROR the size for value values of type\n-    //~| ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n+    //~| ERROR the size for values of type\n }\n \n pub fn main() {"}, {"sha": "a50786e306a57cc4c8a4369b1e7af6ed72514c0c", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -12,32 +12,32 @@\n \n struct S1<X: ?Sized> {\n     f1: X,\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     f2: isize,\n }\n struct S2<X: ?Sized> {\n     f: isize,\n     g: X,\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     h: isize,\n }\n struct S3 {\n     f: str,\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     g: [usize]\n }\n struct S4 {\n     f: [u8],\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     g: usize\n }\n enum E<X: ?Sized> {\n     V1(X, isize),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n enum F<X: ?Sized> {\n     V2{f1: X, f: isize},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n pub fn main() {"}, {"sha": "1a57f2caf8dd20b7998df0b6b236447626e4e58e", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,40 +15,40 @@ trait T {}\n fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n     let _: W; // <-- this is OK, no bindings created, no initializer.\n     let _: (isize, (X, isize));\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     let y: Y;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     let y: (isize, (Z, usize));\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n     let y: X;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     let y: (isize, (Y, isize));\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     let y = *x2;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     let (y, z) = (*x3, 4);\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     let y = *x2;\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     let (y, z) = (*x3, 4);\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn g1<X: ?Sized>(x: X) {}\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n fn g2<X: ?Sized + T>(x: X) {}\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n pub fn main() {\n }"}, {"sha": "07b4ae4c3941c5d62ac140a6f3c0cb73bf3957b2", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -20,7 +20,7 @@ trait T1<Z: T> {\n \n struct S3<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized + T> T1<X> for S3<X> {\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() { }"}, {"sha": "39ac969b80e98e6f9fbf83924e12b27491ccc6b0", "filename": "src/test/ui/const-unsized.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fconst-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fconst-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -11,16 +11,16 @@\n use std::fmt::Debug;\n \n const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n const CONST_FOO: str = *\"foo\";\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n static STATIC_BAR: str = *\"bar\";\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n fn main() {\n     println!(\"{:?} {:?} {:?} {:?}\", &CONST_0, &CONST_FOO, &STATIC_1, &STATIC_BAR);"}, {"sha": "e0b31510260ddc4f9430572d051531a581422760", "filename": "src/test/ui/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the size for value values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:13:29\n    |\n LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n@@ -8,7 +8,7 @@ LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:16:24\n    |\n LL | const CONST_FOO: str = *\"foo\";\n@@ -18,7 +18,7 @@ LL | const CONST_FOO: str = *\"foo\";\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: the size for value values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:19:31\n    |\n LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n@@ -28,7 +28,7 @@ LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:22:26\n    |\n LL | static STATIC_BAR: str = *\"bar\";"}, {"sha": "80cb5eb7a4bbc6e5ce3187384e1d618b5a41d9fa", "filename": "src/test/ui/error-codes/E0277.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -21,7 +21,7 @@ fn some_func<T: Foo>(foo: T) {\n }\n \n fn f(p: Path) { }\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n fn main() {\n     some_func(5i32);"}, {"sha": "3ea057d79229d34cbd2cd668f78fabd263e8c9da", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the size for value values of type `[u8]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/E0277.rs:23:6\n    |\n LL | fn f(p: Path) { }"}, {"sha": "52963671da9fb1c21c97b62e9767b96ca26484a1", "filename": "src/test/ui/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -87,7 +87,7 @@ LL | | }\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:62:1\n    |\n LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n@@ -98,7 +98,7 @@ LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the size for value values of type `(dyn A + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:65:1\n    |\n LL | / fn unsized_local() where Dst<A>: Sized { //~ ERROR\n@@ -112,7 +112,7 @@ LL | | }\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:69:1\n    |\n LL | / fn return_str() -> str where str: Sized { //~ ERROR"}, {"sha": "461da94dde0d07a52d3ac7d45e7ef4be395d3af0", "filename": "src/test/ui/generator/sized-yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,9 +15,9 @@ use std::ops::Generator;\n fn main() {\n    let s = String::from(\"foo\");\n    let mut gen = move || {\n-   //~^ ERROR the size for value values of type\n+   //~^ ERROR the size for values of type\n        yield s[..];\n    };\n    unsafe { gen.resume(); }\n-   //~^ ERROR the size for value values of type\n+   //~^ ERROR the size for values of type\n }"}, {"sha": "dfccd7c4d230b761eb9d86208589cc89273d83da", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1,9 +1,9 @@\n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/sized-yield.rs:17:26\n    |\n LL |      let mut gen = move || {\n    |  __________________________^\n-LL | |    //~^ ERROR the size for value values of type\n+LL | |    //~^ ERROR the size for values of type\n LL | |        yield s[..];\n LL | |    };\n    | |____^ doesn't have a size known at compile-time\n@@ -12,7 +12,7 @@ LL | |    };\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: the yield type of a generator must have a statically known size\n \n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/sized-yield.rs:21:17\n    |\n LL |    unsafe { gen.resume(); }"}, {"sha": "6be6bb4391ae67068fccabf4023274da6e273075", "filename": "src/test/ui/mismatched_types/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -60,7 +60,7 @@ fn main()\n \n     let _ = 42usize as *const [u8]; //~ ERROR is invalid\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n-    let _ = fat_v as *const Foo; //~ ERROR the size for value values of type\n+    let _ = fat_v as *const Foo; //~ ERROR the size for values of type\n     let _ = foo as *const str; //~ ERROR is invalid\n     let _ = foo as *mut str; //~ ERROR is invalid\n     let _ = main as *mut str; //~ ERROR is invalid\n@@ -69,7 +69,7 @@ fn main()\n     let _ = fat_sv as usize; //~ ERROR is invalid\n \n     let a : *const str = \"hello\";\n-    let _ = a as *const Foo; //~ ERROR the size for value values of type\n+    let _ = a as *const Foo; //~ ERROR the size for values of type\n \n     // check no error cascade\n     let _ = main.f as *const u32; //~ ERROR no field"}, {"sha": "ef877d6e04e07cb14646bbd492e6794787496eae", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -216,20 +216,20 @@ LL |     let _ = cf as *const Bar; //~ ERROR is invalid\n    |\n    = note: vtable kinds may not match\n \n-error[E0277]: the size for value values of type `[u8]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:63:13\n    |\n-LL |     let _ = fat_v as *const Foo; //~ ERROR the size for value values of type\n+LL |     let _ = fat_v as *const Foo; //~ ERROR the size for values of type\n    |             ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required for the cast to the object type `dyn Foo`\n \n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:72:13\n    |\n-LL |     let _ = a as *const Foo; //~ ERROR the size for value values of type\n+LL |     let _ = a as *const Foo; //~ ERROR the size for values of type\n    |             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`"}, {"sha": "5e465ca18f4c03b3a21d492428657d51f93e210a", "filename": "src/test/ui/resolve/issue-5035-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -12,6 +12,6 @@ trait I {}\n type K = I+'static;\n \n fn foo(_x: K) {}\n-//~^ ERROR the size for value values of type\n+//~^ ERROR the size for values of type\n \n fn main() {}"}, {"sha": "7c1ebc353ac75383e0ee091783845cb4c1528d17", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the size for value values of type `(dyn I + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn I + 'static)` cannot be known at compilation time\n   --> $DIR/issue-5035-2.rs:14:8\n    |\n LL | fn foo(_x: K) {}"}, {"sha": "9d6cf5fe598c5d28d5ad0104e5b1ab8b2657e21d", "filename": "src/test/ui/suggestions/str-array-assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,7 +15,7 @@ fn main() {\n   let u: &str = if true { s[..2] } else { s };\n   //~^ ERROR mismatched types\n   let v = s[..2];\n-  //~^ ERROR the size for value values of type\n+  //~^ ERROR the size for values of type\n   let w: &str = s[..2];\n   //~^ ERROR mismatched types\n }"}, {"sha": "e0576cee8f56ea06e1802b5452ef22b38a7af5fb", "filename": "src/test/ui/suggestions/str-array-assignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fstr-array-assignment.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -19,7 +19,7 @@ LL |   let u: &str = if true { s[..2] } else { s };\n    = note: expected type `&str`\n               found type `str`\n \n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/str-array-assignment.rs:17:7\n    |\n LL |   let v = s[..2];"}, {"sha": "a43b75d2fe8bd48237f7adef10381280f16f87ae", "filename": "src/test/ui/trait-suggest-where-clause.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -15,10 +15,10 @@ struct Misc<T:?Sized>(T);\n fn check<T: Iterator, U: ?Sized>() {\n     // suggest a where-clause, if needed\n     mem::size_of::<U>();\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     mem::size_of::<Misc<U>>();\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     // ... even if T occurs as a type parameter\n \n@@ -36,10 +36,10 @@ fn check<T: Iterator, U: ?Sized>() {\n     // ... and also not if the error is not related to the type\n \n     mem::size_of::<[T]>();\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     mem::size_of::<[&U]>();\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() {"}, {"sha": "f62e43e2a467928ff3a1a38818bd76a625dcb3c0", "filename": "src/test/ui/trait-suggest-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-suggest-where-clause.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the size for value values of type `U` cannot be known at compilation time\n+error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:17:5\n    |\n LL |     mem::size_of::<U>();\n@@ -9,7 +9,7 @@ LL |     mem::size_of::<U>();\n    = help: consider adding a `where U: std::marker::Sized` bound\n    = note: required by `std::mem::size_of`\n \n-error[E0277]: the size for value values of type `U` cannot be known at compilation time\n+error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:20:5\n    |\n LL |     mem::size_of::<Misc<U>>();\n@@ -47,7 +47,7 @@ LL |     <Misc<_> as From<T>>::from;\n    |\n    = note: required by `std::convert::From::from`\n \n-error[E0277]: the size for value values of type `[T]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:38:5\n    |\n LL |     mem::size_of::<[T]>();\n@@ -57,7 +57,7 @@ LL |     mem::size_of::<[T]>();\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required by `std::mem::size_of`\n \n-error[E0277]: the size for value values of type `[&U]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n   --> $DIR/trait-suggest-where-clause.rs:41:5\n    |\n LL |     mem::size_of::<[&U]>();"}, {"sha": "960123b5d3a08cfed505a742ccc3505380eaf9b1", "filename": "src/test/ui/trivial-bounds-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-leak.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/trivial-bounds-leak.rs:22:25\n    |\n LL | fn cant_return_str() -> str { //~ ERROR"}, {"sha": "66d6632ff5aa0d4a4c40e6f7ae4c27c6d0b9919b", "filename": "src/test/ui/union/union-sized-field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -12,18 +12,18 @@\n \n union Foo<T: ?Sized> {\n     value: T,\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n struct Foo2<T: ?Sized> {\n     value: T,\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     t: u32,\n }\n \n enum Foo3<T: ?Sized> {\n     Value(T),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n fn main() {}"}, {"sha": "2b1f4b4e8f31c3f9d029b34d85c31c7d8eac5250", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the size for value values of type `T` cannot be known at compilation time\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:14:5\n    |\n LL |     value: T,\n@@ -9,7 +9,7 @@ LL |     value: T,\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: no field of a union may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `T` cannot be known at compilation time\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:19:5\n    |\n LL |     value: T,\n@@ -20,7 +20,7 @@ LL |     value: T,\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: only the last field of a struct may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `T` cannot be known at compilation time\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/union-sized-field.rs:25:11\n    |\n LL |     Value(T),"}, {"sha": "dadcc4206c30413abfa65919f6cb799e75cefc6f", "filename": "src/test/ui/unsized-enum2.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Funsized-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Funsized-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.rs?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -31,53 +31,53 @@ struct Path4(PathHelper4);\n enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n     // parameter\n     VA(W),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VB{x: X},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VC(isize, Y),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VD{u: isize, x: Z},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     // slice / str\n     VE([u8]),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VF{x: str},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VG(isize, [f32]),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VH{u: isize, x: [u32]},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     // unsized struct\n     VI(Path1),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VJ{x: Path2},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VK(isize, Path3),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VL{u: isize, x: Path4},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     // plain trait\n     VM(Foo),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VN{x: Bar},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VO(isize, FooBar),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VP{u: isize, x: BarFoo},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n \n     // projected\n     VQ(<&'static [i8] as Deref>::Target),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VR{x: <&'static [char] as Deref>::Target},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VS(isize, <&'static [f64] as Deref>::Target),\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n-    //~^ ERROR the size for value values of type\n+    //~^ ERROR the size for values of type\n }\n \n "}, {"sha": "47d75f338516bc1e67dfa571e44536825b05230a", "filename": "src/test/ui/unsized-enum2.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/989fa053895a27fd40896335224b619843b7e58a/src%2Ftest%2Fui%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.stderr?ref=989fa053895a27fd40896335224b619843b7e58a", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the size for value values of type `W` cannot be known at compilation time\n+error[E0277]: the size for values of type `W` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:33:8\n    |\n LL |     VA(W),\n@@ -9,7 +9,7 @@ LL |     VA(W),\n    = help: consider adding a `where W: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `X` cannot be known at compilation time\n+error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:35:8\n    |\n LL |     VB{x: X},\n@@ -20,7 +20,7 @@ LL |     VB{x: X},\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `Y` cannot be known at compilation time\n+error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:37:15\n    |\n LL |     VC(isize, Y),\n@@ -31,7 +31,7 @@ LL |     VC(isize, Y),\n    = help: consider adding a `where Y: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `Z` cannot be known at compilation time\n+error[E0277]: the size for values of type `Z` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:39:18\n    |\n LL |     VD{u: isize, x: Z},\n@@ -42,7 +42,7 @@ LL |     VD{u: isize, x: Z},\n    = help: consider adding a `where Z: std::marker::Sized` bound\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `[u8]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:43:8\n    |\n LL |     VE([u8]),\n@@ -52,7 +52,7 @@ LL |     VE([u8]),\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `str` cannot be known at compilation time\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:45:8\n    |\n LL |     VF{x: str},\n@@ -62,7 +62,7 @@ LL |     VF{x: str},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `[f32]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[f32]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:47:15\n    |\n LL |     VG(isize, [f32]),\n@@ -72,7 +72,7 @@ LL |     VG(isize, [f32]),\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `[u32]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[u32]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:49:18\n    |\n LL |     VH{u: isize, x: [u32]},\n@@ -82,7 +82,7 @@ LL |     VH{u: isize, x: [u32]},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `(dyn Foo + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:63:8\n    |\n LL |     VM(Foo),\n@@ -92,7 +92,7 @@ LL |     VM(Foo),\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `(dyn Bar + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn Bar + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:65:8\n    |\n LL |     VN{x: Bar},\n@@ -102,7 +102,7 @@ LL |     VN{x: Bar},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `(dyn FooBar + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn FooBar + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:67:15\n    |\n LL |     VO(isize, FooBar),\n@@ -112,7 +112,7 @@ LL |     VO(isize, FooBar),\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `(dyn BarFoo + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn BarFoo + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:69:18\n    |\n LL |     VP{u: isize, x: BarFoo},\n@@ -122,7 +122,7 @@ LL |     VP{u: isize, x: BarFoo},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `[i8]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[i8]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:73:8\n    |\n LL |     VQ(<&'static [i8] as Deref>::Target),\n@@ -132,7 +132,7 @@ LL |     VQ(<&'static [i8] as Deref>::Target),\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `[char]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[char]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:75:8\n    |\n LL |     VR{x: <&'static [char] as Deref>::Target},\n@@ -142,7 +142,7 @@ LL |     VR{x: <&'static [char] as Deref>::Target},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `[f64]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[f64]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:77:15\n    |\n LL |     VS(isize, <&'static [f64] as Deref>::Target),\n@@ -152,7 +152,7 @@ LL |     VS(isize, <&'static [f64] as Deref>::Target),\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `[i32]` cannot be known at compilation time\n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:79:18\n    |\n LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n@@ -162,7 +162,7 @@ LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `(dyn PathHelper1 + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn PathHelper1 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:53:8\n    |\n LL |     VI(Path1),\n@@ -173,7 +173,7 @@ LL |     VI(Path1),\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `(dyn PathHelper2 + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn PathHelper2 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:55:8\n    |\n LL |     VJ{x: Path2},\n@@ -184,7 +184,7 @@ LL |     VJ{x: Path2},\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `(dyn PathHelper3 + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn PathHelper3 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:57:15\n    |\n LL |     VK(isize, Path3),\n@@ -195,7 +195,7 @@ LL |     VK(isize, Path3),\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `(dyn PathHelper4 + 'static)` cannot be known at compilation time\n+error[E0277]: the size for values of type `(dyn PathHelper4 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:59:18\n    |\n LL |     VL{u: isize, x: Path4},"}]}