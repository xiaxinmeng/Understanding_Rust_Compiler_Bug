{"sha": "48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "node_id": "C_kwDOAAsO6NoAKDQ4MTg5YmMxYjQ4NjRmOGJhM2E3ODQwZmRjZGU0Y2Q5MWYyNTgwOGQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-26T13:29:03Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-26T13:29:03Z"}, "message": "Re-order and cleanup highlighting tests", "tree": {"sha": "63aa2a3392d7a5ca80e03489f7f4b54a310ecafd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63aa2a3392d7a5ca80e03489f7f4b54a310ecafd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "html_url": "https://github.com/rust-lang/rust/commit/48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48189bc1b4864f8ba3a7840fdcde4cd91f25808d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d33556c9f248ea6a1d8473b98cfa4c1e96343b", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d33556c9f248ea6a1d8473b98cfa4c1e96343b", "html_url": "https://github.com/rust-lang/rust/commit/03d33556c9f248ea6a1d8473b98cfa4c1e96343b"}], "stats": {"total": 407, "additions": 199, "deletions": 208}, "files": [{"sha": "b035e786d352a78a7ff856ae39921f7a31df5012", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48189bc1b4864f8ba3a7840fdcde4cd91f25808d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/48189bc1b4864f8ba3a7840fdcde4cd91f25808d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "patch": "@@ -58,5 +58,4 @@\n <span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public static trait\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference trait\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n-        </code></pre>\n\\ No newline at end of file\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "3e20b2f3512df792db686698f7d9bf4415cad461", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_default_library.html", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48189bc1b4864f8ba3a7840fdcde4cd91f25808d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "raw_url": "https://github.com/rust-lang/rust/raw/48189bc1b4864f8ba3a7840fdcde4cd91f25808d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html?ref=48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "patch": "@@ -46,5 +46,4 @@\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo</span> <span class=\"operator\">=</span> <span class=\"enum_variant default_library library\">Some</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">nums</span> <span class=\"operator\">=</span> <span class=\"module default_library library\">iter</span><span class=\"operator\">::</span><span class=\"function default_library library\">repeat</span><span class=\"parenthesis\">(</span><span class=\"variable\">foo</span><span class=\"operator\">.</span><span class=\"function associated consuming default_library library\">unwrap</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-<span class=\"brace\">}</span>\n-</code></pre>\n\\ No newline at end of file\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "ce4e22379e9c45418cfbcf93bc5dbec42a0026c6", "filename": "crates/ide/src/syntax_highlighting/test_data/injection.html", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48189bc1b4864f8ba3a7840fdcde4cd91f25808d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "raw_url": "https://github.com/rust-lang/rust/raw/48189bc1b4864f8ba3a7840fdcde4cd91f25808d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html?ref=48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "patch": "@@ -49,5 +49,4 @@\n         <span class=\"numeric_literal\">92</span>\n     <span class=\"brace\">}</span><span class=\"keyword\">$0</span><span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-<span class=\"brace\">}</span>\n-    </code></pre>\n\\ No newline at end of file\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "2581ed10e43fbe47586cfd9c1b6f291499d664f2", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 196, "deletions": 202, "changes": 398, "blob_url": "https://github.com/rust-lang/rust/blob/48189bc1b4864f8ba3a7840fdcde4cd91f25808d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48189bc1b4864f8ba3a7840fdcde4cd91f25808d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=48189bc1b4864f8ba3a7840fdcde4cd91f25808d", "patch": "@@ -288,161 +288,12 @@ macro_rules! die {\n         panic!();\n     };\n }\n-\"#\n-        .trim(),\n-        expect_file![\"./test_data/highlighting.html\"],\n-        false,\n-    );\n-}\n-\n-#[test]\n-fn test_rainbow_highlighting() {\n-    check_highlighting(\n-        r#\"\n-fn main() {\n-    let hello = \"hello\";\n-    let x = hello.to_string();\n-    let y = hello.to_string();\n-\n-    let x = \"other color please!\";\n-    let y = x.to_string();\n-}\n-\n-fn bar() {\n-    let mut hello = \"hello\";\n-}\n-\"#\n-        .trim(),\n-        expect_file![\"./test_data/rainbow_highlighting.html\"],\n-        true,\n-    );\n-}\n-\n-#[test]\n-fn benchmark_syntax_highlighting_long_struct() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let fixture = bench_fixture::big_struct();\n-    let (analysis, file_id) = fixture::file(&fixture);\n-\n-    let hash = {\n-        let _pt = bench(\"syntax highlighting long struct\");\n-        analysis\n-            .highlight(file_id)\n-            .unwrap()\n-            .iter()\n-            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n-            .count()\n-    };\n-    assert_eq!(hash, 2001);\n-}\n-\n-#[test]\n-fn syntax_highlighting_not_quadratic() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let mut al = AssertLinear::default();\n-    while al.next_round() {\n-        for i in 6..=10 {\n-            let n = 1 << i;\n-\n-            let fixture = bench_fixture::big_struct_n(n);\n-            let (analysis, file_id) = fixture::file(&fixture);\n-\n-            let time = Instant::now();\n-\n-            let hash = analysis\n-                .highlight(file_id)\n-                .unwrap()\n-                .iter()\n-                .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n-                .count();\n-            assert!(hash > n as usize);\n-\n-            let elapsed = time.elapsed();\n-            al.sample(n as f64, elapsed.as_millis() as f64);\n-        }\n-    }\n-}\n-\n-#[test]\n-fn benchmark_syntax_highlighting_parser() {\n-    if skip_slow_tests() {\n-        return;\n-    }\n-\n-    let fixture = bench_fixture::glorious_old_parser();\n-    let (analysis, file_id) = fixture::file(&fixture);\n-\n-    let hash = {\n-        let _pt = bench(\"syntax highlighting parser\");\n-        analysis\n-            .highlight(file_id)\n-            .unwrap()\n-            .iter()\n-            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))\n-            .count()\n-    };\n-    assert_eq!(hash, 1616);\n-}\n-\n-#[test]\n-fn test_ranges() {\n-    let (analysis, file_id) = fixture::file(\n-        r#\"\n-#[derive(Clone, Debug)]\n-struct Foo {\n-    pub x: i32,\n-    pub y: i32,\n-}\n \"#,\n-    );\n-\n-    // The \"x\"\n-    let highlights = &analysis\n-        .highlight_range(FileRange { file_id, range: TextRange::at(45.into(), 1.into()) })\n-        .unwrap();\n-\n-    assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration.public\");\n-}\n-\n-#[test]\n-fn test_flattening() {\n-    check_highlighting(\n-        r##\"\n-fn fixture(ra_fixture: &str) {}\n-\n-fn main() {\n-    fixture(r#\"\n-        trait Foo {\n-            fn foo() {\n-                println!(\"2 + 2 = {}\", 4);\n-            }\n-        }\"#\n-    );\n-}\"##\n-        .trim(),\n-        expect_file![\"./test_data/highlight_injection.html\"],\n+        expect_file![\"./test_data/highlighting.html\"],\n         false,\n     );\n }\n \n-#[test]\n-fn ranges_sorted() {\n-    let (analysis, file_id) = fixture::file(\n-        r#\"\n-#[foo(bar = \"bar\")]\n-macro_rules! test {}\n-}\"#\n-        .trim(),\n-    );\n-    let _ = analysis.highlight(file_id).unwrap();\n-}\n-\n #[test]\n fn test_string_highlighting() {\n     // The format string detection is based on macro-expansion,\n@@ -555,8 +406,7 @@ fn main() {\n     toho!(\"{}fmt\", 0);\n     asm!(\"mov eax, {0}\");\n     format_args!(concat!(\"{}\"), \"{}\");\n-}\"#\n-        .trim(),\n+}\"#,\n         expect_file![\"./test_data/highlight_strings.html\"],\n         false,\n     );\n@@ -630,8 +480,7 @@ fn main() {\n         packed.a.calls_autoref();\n     }\n }\n-\"#\n-        .trim(),\n+\"#,\n         expect_file![\"./test_data/highlight_unsafe.html\"],\n         false,\n     );\n@@ -781,8 +630,7 @@ pub fn block_comments2() {}\n //! ```\n //! fn test() {}\n //! ```\n-\"#\n-        .trim(),\n+\"#,\n         expect_file![\"./test_data/highlight_doctest.html\"],\n         false,\n     );\n@@ -792,14 +640,14 @@ pub fn block_comments2() {}\n fn test_extern_crate() {\n     check_highlighting(\n         r#\"\n-        //- /main.rs crate:main deps:std,alloc\n-        extern crate std;\n-        extern crate alloc as abc;\n-        //- /std/lib.rs crate:std\n-        pub struct S;\n-        //- /alloc/lib.rs crate:alloc\n-        pub struct A\n-        \"#,\n+//- /main.rs crate:main deps:std,alloc\n+extern crate std;\n+extern crate alloc as abc;\n+//- /std/lib.rs crate:std\n+pub struct S;\n+//- /alloc/lib.rs crate:alloc\n+pub struct A\n+\"#,\n         expect_file![\"./test_data/highlight_extern_crate.html\"],\n         false,\n     );\n@@ -809,41 +657,41 @@ fn test_extern_crate() {\n fn test_crate_root() {\n     check_highlighting(\n         r#\"\n-        //- minicore: iterators\n-        //- /main.rs crate:main deps:foo\n-        extern crate foo;\n-        use core::iter;\n+//- minicore: iterators\n+//- /main.rs crate:main deps:foo\n+extern crate foo;\n+use core::iter;\n \n-        pub const NINETY_TWO: u8 = 92;\n+pub const NINETY_TWO: u8 = 92;\n \n-        use foo as foooo;\n+use foo as foooo;\n \n-        pub(crate) fn main() {\n-            let baz = iter::repeat(92);\n-        }\n+pub(crate) fn main() {\n+    let baz = iter::repeat(92);\n+}\n \n-        mod bar {\n-            pub(in super) const FORTY_TWO: u8 = 42;\n+mod bar {\n+    pub(in super) const FORTY_TWO: u8 = 42;\n \n-            mod baz {\n-                use super::super::NINETY_TWO;\n-                use crate::foooo::Point;\n+    mod baz {\n+        use super::super::NINETY_TWO;\n+        use crate::foooo::Point;\n \n-                pub(in super::super) const TWENTY_NINE: u8 = 29;\n-            }\n-        }\n-        //- /foo.rs crate:foo\n-        struct Point {\n-            x: u8,\n-            y: u8,\n-        }\n+        pub(in super::super) const TWENTY_NINE: u8 = 29;\n+    }\n+}\n+//- /foo.rs crate:foo\n+struct Point {\n+    x: u8,\n+    y: u8,\n+}\n \n-        mod inner {\n-            pub(super) fn swap(p: crate::Point) -> crate::Point {\n-                crate::Point { x: p.y, y: p.x }\n-            }\n-        }\n-        \"#,\n+mod inner {\n+    pub(super) fn swap(p: crate::Point) -> crate::Point {\n+        crate::Point { x: p.y, y: p.x }\n+    }\n+}\n+\"#,\n         expect_file![\"./test_data/highlight_crate_root.html\"],\n         false,\n     );\n@@ -853,14 +701,14 @@ fn test_crate_root() {\n fn test_default_library() {\n     check_highlighting(\n         r#\"\n-        //- minicore: option, iterators\n-        use core::iter;\n+//- minicore: option, iterators\n+use core::iter;\n \n-        fn main() {\n-            let foo = Some(92);\n-            let nums = iter::repeat(foo.unwrap());\n-        }\n-        \"#,\n+fn main() {\n+    let foo = Some(92);\n+    let nums = iter::repeat(foo.unwrap());\n+}\n+\"#,\n         expect_file![\"./test_data/highlight_default_library.html\"],\n         false,\n     );\n@@ -888,7 +736,7 @@ impl t for foo {\n     pub fn is_static() {}\n     pub fn is_not_static(&self) {}\n }\n-        \"#,\n+\"#,\n         expect_file![\"./test_data/highlight_assoc_functions.html\"],\n         false,\n     )\n@@ -907,17 +755,163 @@ fn foo() {\n     }\\$0)\n }\");\n }\n-    \"##,\n+\"##,\n         expect_file![\"./test_data/injection.html\"],\n         false,\n     );\n }\n \n+#[test]\n+fn test_rainbow_highlighting() {\n+    check_highlighting(\n+        r#\"\n+fn main() {\n+    let hello = \"hello\";\n+    let x = hello.to_string();\n+    let y = hello.to_string();\n+\n+    let x = \"other color please!\";\n+    let y = x.to_string();\n+}\n+\n+fn bar() {\n+    let mut hello = \"hello\";\n+}\n+\"#,\n+        expect_file![\"./test_data/rainbow_highlighting.html\"],\n+        true,\n+    );\n+}\n+\n+#[test]\n+fn test_ranges() {\n+    let (analysis, file_id) = fixture::file(\n+        r#\"\n+#[derive(Clone, Debug)]\n+struct Foo {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\"#,\n+    );\n+\n+    // The \"x\"\n+    let highlights = &analysis\n+        .highlight_range(FileRange { file_id, range: TextRange::at(45.into(), 1.into()) })\n+        .unwrap();\n+\n+    assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration.public\");\n+}\n+\n+#[test]\n+fn test_flattening() {\n+    check_highlighting(\n+        r##\"\n+fn fixture(ra_fixture: &str) {}\n+\n+fn main() {\n+    fixture(r#\"\n+        trait Foo {\n+            fn foo() {\n+                println!(\"2 + 2 = {}\", 4);\n+            }\n+        }\"#\n+    );\n+}\"##,\n+        expect_file![\"./test_data/highlight_injection.html\"],\n+        false,\n+    );\n+}\n+\n+#[test]\n+fn ranges_sorted() {\n+    let (analysis, file_id) = fixture::file(\n+        r#\"\n+#[foo(bar = \"bar\")]\n+macro_rules! test {}\n+}\"#\n+        .trim(),\n+    );\n+    let _ = analysis.highlight(file_id).unwrap();\n+}\n+\n /// Highlights the code given by the `ra_fixture` argument, renders the\n /// result as HTML, and compares it with the HTML file given as `snapshot`.\n /// Note that the `snapshot` file is overwritten by the rendered HTML.\n fn check_highlighting(ra_fixture: &str, expect: ExpectFile, rainbow: bool) {\n-    let (analysis, file_id) = fixture::file(ra_fixture);\n+    let (analysis, file_id) = fixture::file(ra_fixture.trim());\n     let actual_html = &analysis.highlight_as_html(file_id, rainbow).unwrap();\n     expect.assert_eq(actual_html)\n }\n+\n+#[test]\n+fn benchmark_syntax_highlighting_long_struct() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let fixture = bench_fixture::big_struct();\n+    let (analysis, file_id) = fixture::file(&fixture);\n+\n+    let hash = {\n+        let _pt = bench(\"syntax highlighting long struct\");\n+        analysis\n+            .highlight(file_id)\n+            .unwrap()\n+            .iter()\n+            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n+            .count()\n+    };\n+    assert_eq!(hash, 2001);\n+}\n+\n+#[test]\n+fn syntax_highlighting_not_quadratic() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let mut al = AssertLinear::default();\n+    while al.next_round() {\n+        for i in 6..=10 {\n+            let n = 1 << i;\n+\n+            let fixture = bench_fixture::big_struct_n(n);\n+            let (analysis, file_id) = fixture::file(&fixture);\n+\n+            let time = Instant::now();\n+\n+            let hash = analysis\n+                .highlight(file_id)\n+                .unwrap()\n+                .iter()\n+                .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Struct))\n+                .count();\n+            assert!(hash > n as usize);\n+\n+            let elapsed = time.elapsed();\n+            al.sample(n as f64, elapsed.as_millis() as f64);\n+        }\n+    }\n+}\n+\n+#[test]\n+fn benchmark_syntax_highlighting_parser() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    let fixture = bench_fixture::glorious_old_parser();\n+    let (analysis, file_id) = fixture::file(&fixture);\n+\n+    let hash = {\n+        let _pt = bench(\"syntax highlighting parser\");\n+        analysis\n+            .highlight(file_id)\n+            .unwrap()\n+            .iter()\n+            .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))\n+            .count()\n+    };\n+    assert_eq!(hash, 1616);\n+}"}]}