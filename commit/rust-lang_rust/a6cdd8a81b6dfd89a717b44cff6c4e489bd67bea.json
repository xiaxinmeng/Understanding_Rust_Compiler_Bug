{"sha": "a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Y2RkOGE4MWI2ZGZkODlhNzE3YjQ0Y2ZmNmM0ZTQ4OWJkNjdiZWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-03-23T11:18:33Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-13T14:04:57Z"}, "message": "Fix it", "tree": {"sha": "64fd4ce8029cb4bcedc8aaa09f18da89a2f0b348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64fd4ce8029cb4bcedc8aaa09f18da89a2f0b348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrQuRIsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MAQC\nFw//WYfjKU18meRsIfF2VIPW1K+ZZ21gC8jlUXlx3DkDb2XpABcN7mCbTRXgw/+p\nJWZF0PsGiYvH4U5tTZ2aRINAjeT7pK23mMO6EAeXlFlNfGEwv3v2k7IcNNndoWtG\nqS+TgmS0LV2waaL+PvQXj7NZnzmiILzSspvB0oeBL98J8jxP4Lc33fIhqpH/HfMD\nZdmncXG1Vug4q+o5okGO+C4Xd3GpJBLmjS6IwnymlD0IC3Ok7yWuBTXbRoohW2Za\nkPKyo6/kdnOzJVpYAnb3lPnb5rM5AsTGRguyEuSyzvld8rweD0QjnOEKu21/ZwsM\n5CXkXDZe18Tgd3jnxHpcFBRHP3d0PqI20kgohDPxnVaTyFMuh5zxEkLo6bN2OFFG\n+VGxUI8E1r1D79CnpafXIbxWnrVxCNkqR1909fuxfcXGe41/Jd6Xt2s4LFpKm7uT\nmw5wqMxltPcnWSr3NQhRGEjF3XZ4Yv6e0BdmvX7F3APCiqwiGuzGnLKg/ti7VqJr\n0muo1xNHX/QjlKHH2T7kBsm89NuBFEtPYI4pyrlmu6chdBaQJf1cvfsEWxTEvYGA\n3wdt359BS2pch7fwfWv2/fYT1JR4vZN5TauSV1vHIqpki3Kgz1b+ZTiHDNLam0yg\npCi9n0W+ksiiE+e+5uHhhc8X7bomVfXlgq6QVeK8DHJ1pFI=\n=pqIE\n-----END PGP SIGNATURE-----", "payload": "tree 64fd4ce8029cb4bcedc8aaa09f18da89a2f0b348\nparent ac42af3789e6a536cabd900611e703c363aec3b3\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1521803913 +0100\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523628297 +0200\n\nFix it\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "html_url": "https://github.com/rust-lang/rust/commit/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac42af3789e6a536cabd900611e703c363aec3b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac42af3789e6a536cabd900611e703c363aec3b3", "html_url": "https://github.com/rust-lang/rust/commit/ac42af3789e6a536cabd900611e703c363aec3b3"}], "stats": {"total": 85, "additions": 62, "deletions": 23}, "files": [{"sha": "cb90bbd704a8a033bf589765947e90fbcbd94b77", "filename": "miri/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/miri%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/miri%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fmiri.rs?ref=a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, i128_type)]\n+#![feature(rustc_private)]\n \n extern crate getopts;\n extern crate miri;"}, {"sha": "b4328ef88c00ff15fcdb0a23ec4f142f405a69c7", "filename": "miri/fn_call.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "patch": "@@ -126,6 +126,12 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                     _ => panic!(\"Unexpected return type for {}\", item_path)\n                 }\n             }\n+            \"std::sys_common::thread_info::set\" | \"std::sys_common::cleanup\" => {\n+                // TODO rustc creates invalid mir inside std::cell::BorrowRef::new which is used by this function\n+                let (_return_place, return_to_block) = destination.unwrap();\n+                self.goto_block(return_to_block);\n+                return Ok(true);\n+            }\n             _ => {}\n         }\n \n@@ -535,6 +541,9 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 // Return success (0)\n                 self.write_null(dest, dest_ty)?;\n             }\n+            \"_tlv_atexit\" => {\n+                // TODO: handle it\n+            }\n \n             // Stub out all the other pthread calls to just return 0\n             link_name if link_name.starts_with(\"pthread_\") => {"}, {"sha": "42b0cacbd053f0f2d0871dfb1a8b4e592714cbbb", "filename": "miri/lib.rs", "status": "modified", "additions": 50, "deletions": 15, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "patch": "@@ -1,7 +1,5 @@\n #![feature(\n-    i128_type,\n     rustc_private,\n-    conservative_impl_trait,\n     catch_expr,\n     inclusive_range_fields\n )]\n@@ -21,6 +19,7 @@ extern crate lazy_static;\n \n use rustc::ty::{self, TyCtxt};\n use rustc::ty::layout::{TyLayout, LayoutOf};\n+use rustc::ty::subst::Subst;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n \n@@ -170,7 +169,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n         Ok(()) => {\n             let leaks = ecx.memory().leak_report();\n             if leaks != 0 {\n-                tcx.sess.err(\"the evaluated program leaked memory\");\n+                //tcx.sess.err(\"the evaluated program leaked memory\");\n             }\n         }\n         Err(mut e) => {\n@@ -270,26 +269,59 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         cid: GlobalId<'tcx>,\n     ) -> EvalResult<'tcx, AllocId> {\n-        if let Some(alloc_id) = ecx.memory.data.get(&cid) {\n-            return Ok(alloc_id);\n+        if let Some(alloc_id) = ecx.memory.data.mut_statics.get(&cid) {\n+            return Ok(*alloc_id);\n         }\n-        let mir = ecx.load_mir(cid.instance.def)?;\n+\n+        let tcx = ecx.tcx.tcx;\n+        let param_env = ty::ParamEnv::reveal_all();\n+\n+        let mut mir = ecx.load_mir(cid.instance.def)?;\n+        if let Some(index) = cid.promoted {\n+            mir = &mir.promoted[index];\n+        }\n+        assert!(mir.arg_count == 0);\n+\n+        // we start out with the best span we have\n+        // and try improving it down the road when more information is available\n         let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n-        let to_ptr = ecx.memory.allocate(\n+        assert!(!layout.is_unsized());\n+        let ptr = ecx.memory.allocate(\n             layout.size.bytes(),\n             layout.align,\n             None,\n         )?;\n-        ecx.const_eval(cid)?;\n-        let ptr = ecx\n+\n+        let internally_mutable = !layout.ty.is_freeze(tcx, param_env, mir.span);\n+        let mutability = tcx.is_static(cid.instance.def_id());\n+        if mutability != Some(::rustc::hir::Mutability::MutMutable) && !internally_mutable {\n+            ecx.const_eval(cid)?;\n+            return Ok(ecx\n             .tcx\n             .interpret_interner\n             .get_cached(cid.instance.def_id())\n-            .expect(\"uncached static\");\n-        ecx.memory.copy(ptr, layout.align, to_ptr.into(), layout.align, layout.size.bytes(), true)?;\n-        ecx.memory.mark_static_initialized(to_ptr.alloc_id, ::syntax::ast::Mutability::Mutable)?;\n-        assert!(ecx.memory.data.insert(cid, to_ptr.alloc_id).is_none());\n-        Ok(to_ptr.alloc_id)\n+            .expect(\"uncached static\"));\n+        }\n+\n+        //let cleanup = StackPopCleanup::MarkStatic(Mutability::Mutable);\n+        let cleanup = StackPopCleanup::None;\n+        let name = ty::tls::with(|tcx| tcx.item_path_str(cid.instance.def_id()));\n+        let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n+        trace!(\"const_eval: pushing stack frame for global: {}{}\", name, prom);\n+        let caller_stackframe = ecx.stack().len();\n+        ecx.push_stack_frame(\n+            cid.instance,\n+            mir.span,\n+            mir,\n+            Place::from_ptr(ptr, layout.align),\n+            cleanup,\n+        )?;\n+\n+        while ecx.step()? && ecx.stack().len() > caller_stackframe {}\n+\n+        assert!(ecx.memory.data.mut_statics.insert(cid, ptr.alloc_id).is_none());\n+\n+        Ok(ptr.alloc_id)\n     }\n \n     fn box_alloc<'a>(\n@@ -321,7 +353,10 @@ impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         let dest = ecx.eval_place(&mir::Place::Local(args.next().unwrap()))?;\n         ecx.write_value(\n             ValTy {\n-                value: Value::ByVal(PrimVal::Bytes(layout.size.bytes().into())),\n+                value: Value::ByVal(PrimVal::Bytes(match layout.size.bytes() {\n+                    0 => 1,\n+                    size => size,\n+                }.into())),\n                 ty: usize,\n             },\n             dest,"}, {"sha": "ec8901dca5d42eeca612392a45dd51d9bc35dec2", "filename": "miri/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/miri%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/miri%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fvalidation.rs?ref=a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::interpret::GlobalId;\n use rustc::ty::{self, Ty, TypeFoldable, TyCtxt, Instance};\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::subst::{Substs, Subst};\n-use rustc::traits;\n+use rustc::traits::{self, TraitEngine};\n use rustc::infer::InferCtxt;\n use rustc::middle::region;\n use rustc::middle::const_val::ConstVal;"}, {"sha": "d7764bf6201ae8e5655ca7f0344fcbe4a6e280b0", "filename": "tests/run-pass-fullmir/u128.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/tests%2Frun-pass-fullmir%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/tests%2Frun-pass-fullmir%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fu128.rs?ref=a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "patch": "@@ -10,8 +10,6 @@\n \n //ignore-msvc\n \n-#![feature(i128_type)]\n-\n fn b<T>(t: T) -> T { t }\n \n fn main() {"}, {"sha": "900ff0e34904cfae67343673ae9f33a829e09927", "filename": "tests/run-pass/generator_control_flow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/tests%2Frun-pass%2Fgenerator_control_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/tests%2Frun-pass%2Fgenerator_control_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fgenerator_control_flow.rs?ref=a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "patch": "@@ -16,7 +16,7 @@ fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n     where T: Generator<Yield = ()>\n {\n     loop {\n-        match t.resume() {\n+        match unsafe { t.resume() } {\n             GeneratorState::Yielded(()) => amt -= 1,\n             GeneratorState::Complete(ret) => {\n                 assert_eq!(amt, 0);"}, {"sha": "5bbbffe4e60e1f36ce8b25554c42d8ae46128787", "filename": "tests/run-pass/subslice_array.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/tests%2Frun-pass%2Fsubslice_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/tests%2Frun-pass%2Fsubslice_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsubslice_array.rs?ref=a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "patch": "@@ -1,4 +1,3 @@\n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n fn bar(a: &'static str, b: &'static str) -> [&'static str; 4] {"}, {"sha": "1a30f875580c201480aec5173002d74d381f0726", "filename": "tests/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/tests%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea/tests%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec-matching-fold.rs?ref=a6cdd8a81b6dfd89a717b44cff6c4e489bd67bea", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n use std::fmt::Debug;"}]}