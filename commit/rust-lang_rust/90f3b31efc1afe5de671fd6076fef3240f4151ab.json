{"sha": "90f3b31efc1afe5de671fd6076fef3240f4151ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjNiMzFlZmMxYWZlNWRlNjcxZmQ2MDc2ZmVmMzI0MGY0MTUxYWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-19T17:08:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-19T17:08:12Z"}, "message": "Merge #2599\n\n2599: Drop dead code r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "81ba9f1eb978326473d34b3d1f379fdb591a8688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81ba9f1eb978326473d34b3d1f379fdb591a8688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f3b31efc1afe5de671fd6076fef3240f4151ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd+658CRBK7hj4Ov3rIwAAdHIIACRe8UDfw9gbeAP0no/KupcZ\nj9Np/WklJ+Gr97asM04ZpFUKvs+1WUCV+sMR+OpbNqNbcfvn4B75t0pf0no+S+mu\nBVnRgIqB/2n4BC8uk49RmOGtbFXDKy196NjhzY9uQgbDj1Kr6rizJWFfIiu0mC75\nFCFVW97M7003NzQfQamL1ZmFwhuSQelURCpIlP54MsYLHe5E2kdTMeBUuTcolDYo\ntlZj07/PK4IzfkefTygDrOVjPDx+sZydl0IR27flbHk/T+AlNbbcq2A7UgWKOztq\nbmMdS08gBxlKWb1WB5OJpkPlBq8YlZvfaP5kuR9LXNrFNUnBo/4MYZHRgkqt/Eo=\n=zuTl\n-----END PGP SIGNATURE-----\n", "payload": "tree 81ba9f1eb978326473d34b3d1f379fdb591a8688\nparent f00904e996e9bc59749fb0d2696a711e9b881ae3\nparent b2731ab78acc7a2d38e02cd477f4a5132c1ac98b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1576775292 +0000\ncommitter GitHub <noreply@github.com> 1576775292 +0000\n\nMerge #2599\n\n2599: Drop dead code r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f3b31efc1afe5de671fd6076fef3240f4151ab", "html_url": "https://github.com/rust-lang/rust/commit/90f3b31efc1afe5de671fd6076fef3240f4151ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f3b31efc1afe5de671fd6076fef3240f4151ab/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f00904e996e9bc59749fb0d2696a711e9b881ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f00904e996e9bc59749fb0d2696a711e9b881ae3", "html_url": "https://github.com/rust-lang/rust/commit/f00904e996e9bc59749fb0d2696a711e9b881ae3"}, {"sha": "b2731ab78acc7a2d38e02cd477f4a5132c1ac98b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2731ab78acc7a2d38e02cd477f4a5132c1ac98b", "html_url": "https://github.com/rust-lang/rust/commit/b2731ab78acc7a2d38e02cd477f4a5132c1ac98b"}], "stats": {"total": 64, "additions": 4, "deletions": 60}, "files": [{"sha": "8dbc0d667842c01e6bf90c3ae4bbb64262aacfdb", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 59, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/90f3b31efc1afe5de671fd6076fef3240f4151ab/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f3b31efc1afe5de671fd6076fef3240f4151ab/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=90f3b31efc1afe5de671fd6076fef3240f4151ab", "patch": "@@ -11,9 +11,9 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::HasResolver,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, ConstId, ContainerId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId,\n-    LocalEnumVariantId, LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId,\n-    StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n+    AdtId, ConstId, DefWithBodyId, EnumId, FunctionId, HasModule, ImplId, LocalEnumVariantId,\n+    LocalImportId, LocalModuleId, LocalStructFieldId, Lookup, ModuleId, StaticId, StructId,\n+    TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -529,30 +529,6 @@ impl Const {\n     pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n         db.const_data(self.id).name.clone()\n     }\n-\n-    /// The containing impl block, if this is a type alias.\n-    pub fn impl_block(self, db: &impl DefDatabase) -> Option<ImplBlock> {\n-        match self.container(db) {\n-            Some(Container::ImplBlock(it)) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    /// The containing trait, if this is a trait type alias definition.\n-    pub fn parent_trait(self, db: &impl DefDatabase) -> Option<Trait> {\n-        match self.container(db) {\n-            Some(Container::Trait(it)) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn container(self, db: &impl DefDatabase) -> Option<Container> {\n-        match self.id.lookup(db).container {\n-            ContainerId::TraitId(it) => Some(Container::Trait(it.into())),\n-            ContainerId::ImplId(it) => Some(Container::ImplBlock(it.into())),\n-            ContainerId::ModuleId(_) => None,\n-        }\n-    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -612,30 +588,6 @@ impl TypeAlias {\n         Some(self.module(db).krate())\n     }\n \n-    /// The containing impl block, if this is a type alias.\n-    pub fn impl_block(self, db: &impl DefDatabase) -> Option<ImplBlock> {\n-        match self.container(db) {\n-            Some(Container::ImplBlock(it)) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    /// The containing trait, if this is a trait type alias definition.\n-    pub fn parent_trait(self, db: &impl DefDatabase) -> Option<Trait> {\n-        match self.container(db) {\n-            Some(Container::Trait(it)) => Some(it),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn container(self, db: &impl DefDatabase) -> Option<Container> {\n-        match self.id.lookup(db).container {\n-            ContainerId::TraitId(it) => Some(Container::Trait(it.into())),\n-            ContainerId::ImplId(it) => Some(Container::ImplBlock(it.into())),\n-            ContainerId::ModuleId(_) => None,\n-        }\n-    }\n-\n     pub fn type_ref(self, db: &impl DefDatabase) -> Option<TypeRef> {\n         db.type_alias_data(self.id).type_ref.clone()\n     }\n@@ -654,14 +606,6 @@ pub struct MacroDef {\n     pub(crate) id: MacroDefId,\n }\n \n-impl MacroDef {}\n-\n-pub enum Container {\n-    Trait(Trait),\n-    ImplBlock(ImplBlock),\n-}\n-impl_froms!(Container: Trait, ImplBlock);\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum AssocItem {\n     Function(Function),"}, {"sha": "7f9aef77074fedabc4f6fafd39252c9b82c545ba", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90f3b31efc1afe5de671fd6076fef3240f4151ab/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f3b31efc1afe5de671fd6076fef3240f4151ab/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=90f3b31efc1afe5de671fd6076fef3240f4151ab", "patch": "@@ -39,7 +39,7 @@ mod from_source;\n \n pub use crate::{\n     code_model::{\n-        Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency, DefWithBody, Docs, Enum,\n+        Adt, AssocItem, AttrDef, Const, Crate, CrateDependency, DefWithBody, Docs, Enum,\n         EnumVariant, FieldSource, Function, GenericDef, HasAttrs, ImplBlock, Import, Local,\n         MacroDef, Module, ModuleDef, ScopeDef, Static, Struct, StructField, Trait, Type, TypeAlias,\n         TypeParam, Union, VariantDef,"}]}