{"sha": "add3e5094f83e7b36f7dfa0813be4c9d8d0706c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZDNlNTA5NGY4M2U3YjM2ZjdkZmEwODEzYmU0YzlkOGQwNzA2YzE=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-27T13:48:25Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-27T13:49:55Z"}, "message": "Move result_unit_err to its own module", "tree": {"sha": "3e59a6884c718da35ca62ff7a7171fdfaf4ca4c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e59a6884c718da35ca62ff7a7171fdfaf4ca4c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1", "html_url": "https://github.com/rust-lang/rust/commit/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c37916501db2c649f57d2cc0d84ee41db34094c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c37916501db2c649f57d2cc0d84ee41db34094c4", "html_url": "https://github.com/rust-lang/rust/commit/c37916501db2c649f57d2cc0d84ee41db34094c4"}], "stats": {"total": 129, "additions": 74, "deletions": 55}, "files": [{"sha": "4ba5166059fb59b589816dd2bdbc31865fa1d6c7", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 7, "deletions": 54, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=add3e5094f83e7b36f7dfa0813be4c9d8d0706c1", "patch": "@@ -1,20 +1,14 @@\n mod must_use;\n mod not_unsafe_ptr_arg_deref;\n+mod result_unit_err;\n mod too_many_arguments;\n mod too_many_lines;\n \n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::trait_ref_of_method;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty;\n+use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{sym, Span};\n-use rustc_typeck::hir_ty_to_ty;\n+use rustc_span::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for functions with too many parameters.\n@@ -250,65 +244,24 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         hir_id: hir::HirId,\n     ) {\n         too_many_arguments::check_fn(cx, kind, decl, span, hir_id, self.too_many_arguments_threshold);\n-        too_many_lines::check(cx, span, body, self.too_many_lines_threshold);\n+        too_many_lines::check_fn(cx, span, body, self.too_many_lines_threshold);\n         not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, hir_id);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         must_use::check_item(cx, item);\n-        if let hir::ItemKind::Fn(ref sig, ref _generics, _) = item.kind {\n-            let is_public = cx.access_levels.is_exported(item.hir_id());\n-            let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-            if is_public {\n-                check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n-            }\n-        }\n+        result_unit_err::check_item(cx, item);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         must_use::check_impl_item(cx, item);\n-        if let hir::ImplItemKind::Fn(ref sig, _) = item.kind {\n-            let is_public = cx.access_levels.is_exported(item.hir_id());\n-            let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-            if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n-                check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n-            }\n-        }\n+        result_unit_err::check_impl_item(cx, item);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n         too_many_arguments::check_trait_item(cx, item, self.too_many_arguments_threshold);\n         not_unsafe_ptr_arg_deref::check_trait_item(cx, item);\n         must_use::check_trait_item(cx, item);\n-\n-        if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n-            let is_public = cx.access_levels.is_exported(item.hir_id());\n-            let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-            if is_public {\n-                check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n-            }\n-        }\n-    }\n-}\n-\n-fn check_result_unit_err(cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, item_span: Span, fn_header_span: Span) {\n-    if_chain! {\n-        if !in_external_macro(cx.sess(), item_span);\n-        if let hir::FnRetTy::Return(ref ty) = decl.output;\n-        let ty = hir_ty_to_ty(cx.tcx, ty);\n-        if is_type_diagnostic_item(cx, ty, sym::result_type);\n-        if let ty::Adt(_, substs) = ty.kind();\n-        let err_ty = substs.type_at(1);\n-        if err_ty.is_unit();\n-        then {\n-            span_lint_and_help(\n-                cx,\n-                RESULT_UNIT_ERR,\n-                fn_header_span,\n-                \"this returns a `Result<_, ()>\",\n-                None,\n-                \"use a custom Error type instead\",\n-            );\n-        }\n+        result_unit_err::check_trait_item(cx, item);\n     }\n }"}, {"sha": "f71bfc690f6c6dc3f8a18acaecc170d04b014135", "filename": "clippy_lints/src/functions/result_unit_err.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs?ref=add3e5094f83e7b36f7dfa0813be4c9d8d0706c1", "patch": "@@ -0,0 +1,66 @@\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty;\n+use rustc_span::{sym, Span};\n+use rustc_typeck::hir_ty_to_ty;\n+\n+use if_chain::if_chain;\n+\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::trait_ref_of_method;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+\n+use super::RESULT_UNIT_ERR;\n+\n+pub(super) fn check_item(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n+    if let hir::ItemKind::Fn(ref sig, ref _generics, _) = item.kind {\n+        let is_public = cx.access_levels.is_exported(item.hir_id());\n+        let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+        if is_public {\n+            check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n+        }\n+    }\n+}\n+\n+pub(super) fn check_impl_item(cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n+    if let hir::ImplItemKind::Fn(ref sig, _) = item.kind {\n+        let is_public = cx.access_levels.is_exported(item.hir_id());\n+        let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+        if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n+            check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n+        }\n+    }\n+}\n+\n+pub(super) fn check_trait_item(cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n+    if let hir::TraitItemKind::Fn(ref sig, _) = item.kind {\n+        let is_public = cx.access_levels.is_exported(item.hir_id());\n+        let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n+        if is_public {\n+            check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n+        }\n+    }\n+}\n+\n+fn check_result_unit_err(cx: &LateContext<'_>, decl: &hir::FnDecl<'_>, item_span: Span, fn_header_span: Span) {\n+    if_chain! {\n+        if !in_external_macro(cx.sess(), item_span);\n+        if let hir::FnRetTy::Return(ref ty) = decl.output;\n+        let ty = hir_ty_to_ty(cx.tcx, ty);\n+        if is_type_diagnostic_item(cx, ty, sym::result_type);\n+        if let ty::Adt(_, substs) = ty.kind();\n+        let err_ty = substs.type_at(1);\n+        if err_ty.is_unit();\n+        then {\n+            span_lint_and_help(\n+                cx,\n+                RESULT_UNIT_ERR,\n+                fn_header_span,\n+                \"this returns a `Result<_, ()>\",\n+                None,\n+                \"use a custom Error type instead\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "aa5494d5a7d2c74b54f251f4325b2cd52df7aabd", "filename": "clippy_lints/src/functions/too_many_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add3e5094f83e7b36f7dfa0813be4c9d8d0706c1/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs?ref=add3e5094f83e7b36f7dfa0813be4c9d8d0706c1", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::source::snippet;\n \n use super::TOO_MANY_LINES;\n \n-pub(super) fn check(cx: &LateContext<'_>, span: Span, body: &'tcx hir::Body<'_>, too_many_lines_threshold: u64) {\n+pub(super) fn check_fn(cx: &LateContext<'_>, span: Span, body: &'tcx hir::Body<'_>, too_many_lines_threshold: u64) {\n     if in_external_macro(cx.sess(), span) {\n         return;\n     }"}]}