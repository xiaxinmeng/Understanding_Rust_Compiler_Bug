{"sha": "50f7110cb69458fa996ed88f17e1210ff0fc24f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZjcxMTBjYjY5NDU4ZmE5OTZlZDg4ZjE3ZTEyMTBmZjBmYzI0ZjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-12T19:31:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:04:34Z"}, "message": "Fix local value reading\n\nLLDB doesn't understand base address entries", "tree": {"sha": "6d15988a17b8ef750a19534b68e13aa1aee327e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d15988a17b8ef750a19534b68e13aa1aee327e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f7110cb69458fa996ed88f17e1210ff0fc24f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f7110cb69458fa996ed88f17e1210ff0fc24f3", "html_url": "https://github.com/rust-lang/rust/commit/50f7110cb69458fa996ed88f17e1210ff0fc24f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f7110cb69458fa996ed88f17e1210ff0fc24f3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fed8800575297814370e4a16ff7edbf7746dba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fed8800575297814370e4a16ff7edbf7746dba6", "html_url": "https://github.com/rust-lang/rust/commit/3fed8800575297814370e4a16ff7edbf7746dba6"}], "stats": {"total": 56, "additions": 15, "deletions": 41}, "files": [{"sha": "d671715790a658373a8218d27e8d1f5e50e55232", "filename": "src/debuginfo.rs", "status": "modified", "additions": 15, "deletions": 41, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/50f7110cb69458fa996ed88f17e1210ff0fc24f3/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f7110cb69458fa996ed88f17e1210ff0fc24f3/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=50f7110cb69458fa996ed88f17e1210ff0fc24f3", "patch": "@@ -373,26 +373,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n             let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n \n             for (value_label, value_loc_ranges) in value_labels_ranges.iter() {\n-                let live_ranges = RangeList(\n-                    Some(Range::BaseAddress {\n-                        address: Address::Symbol {\n-                            symbol: self.symbol,\n-                            addend: 0,\n-                        },\n-                    })\n-                    .into_iter()\n-                    .chain(\n-                        value_loc_ranges\n-                            .iter()\n-                            .map(|value_loc_range| Range::OffsetPair {\n-                                begin: u64::from(value_loc_range.start),\n-                                end: u64::from(value_loc_range.end),\n-                            }),\n-                    )\n-                    .collect(),\n-                );\n-                let live_ranges_id = self.debug_context.dwarf.unit.ranges.add(live_ranges);\n-\n                 let local_ty = tcx.subst_and_normalize_erasing_regions(\n                     self.instance.substs,\n                     ty::ParamEnv::reveal_all(),\n@@ -407,10 +387,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                     .add(self.entry_id, gimli::DW_TAG_variable);\n                 let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n \n-                var_entry.set(\n-                    gimli::DW_AT_ranges,\n-                    AttributeValue::RangeListRef(live_ranges_id),\n-                );\n                 var_entry.set(\n                     gimli::DW_AT_name,\n                     AttributeValue::String(format!(\"{:?}\", value_label).into_bytes()),\n@@ -420,25 +396,23 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n                     AttributeValue::ThisUnitEntryRef(local_type),\n                 );\n \n-\n                 let loc_list = LocationList(\n-                    Some(Location::BaseAddress {\n-                        address: Address::Symbol {\n-                            symbol: self.symbol,\n-                            addend: 0,\n-                        },\n-                    })\n-                    .into_iter()\n-                    .chain(\n-                        value_loc_ranges\n-                            .iter()\n-                            .map(|value_loc_range| Location::OffsetPair {\n-                                begin: u64::from(value_loc_range.start),\n-                                end: u64::from(value_loc_range.end),\n+                    value_loc_ranges\n+                        .iter()\n+                        .map(|value_loc_range| {\n+                            Location::StartEnd {\n+                                begin: Address::Symbol {\n+                                    symbol: self.symbol,\n+                                    addend: i64::from(value_loc_range.start),\n+                                },\n+                                end: Address::Symbol {\n+                                    symbol: self.symbol,\n+                                    addend: i64::from(value_loc_range.end),\n+                                },\n                                 data: Expression(translate_loc(value_loc_range.loc, &context.func.stack_slots).unwrap()),\n-                            }),\n-                    )\n-                    .collect(),\n+                            }\n+                        })\n+                        .collect(),\n                 );\n                 let loc_list_id = self.debug_context.dwarf.unit.locations.add(loc_list);\n "}]}