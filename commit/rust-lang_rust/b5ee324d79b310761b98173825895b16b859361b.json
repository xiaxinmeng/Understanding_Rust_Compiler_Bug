{"sha": "b5ee324d79b310761b98173825895b16b859361b", "node_id": "C_kwDOAAsO6NoAKGI1ZWUzMjRkNzliMzEwNzYxYjk4MTczODI1ODk1YjE2Yjg1OTM2MWI", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-05-06T17:31:51Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-05-06T17:31:51Z"}, "message": "Always const-eval the gcd in `slice::align_to_offsets`", "tree": {"sha": "bf9627fbace077fb46c6340cad3b10751720f4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf9627fbace077fb46c6340cad3b10751720f4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ee324d79b310761b98173825895b16b859361b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ee324d79b310761b98173825895b16b859361b", "html_url": "https://github.com/rust-lang/rust/commit/b5ee324d79b310761b98173825895b16b859361b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ee324d79b310761b98173825895b16b859361b/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "333b920feeb136d35fac804d51310df1a35c399e", "url": "https://api.github.com/repos/rust-lang/rust/commits/333b920feeb136d35fac804d51310df1a35c399e", "html_url": "https://github.com/rust-lang/rust/commit/333b920feeb136d35fac804d51310df1a35c399e"}], "stats": {"total": 43, "additions": 6, "deletions": 37}, "files": [{"sha": "28a6c05c38364a1285362e69079425fca97a5c8a", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b5ee324d79b310761b98173825895b16b859361b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ee324d79b310761b98173825895b16b859361b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=b5ee324d79b310761b98173825895b16b859361b", "patch": "@@ -3474,44 +3474,13 @@ impl<T> [T] {\n         // Ts = size_of::<U> / gcd(size_of::<T>, size_of::<U>)\n         //\n         // Luckily since all this is constant-evaluated... performance here matters not!\n-        #[inline]\n-        fn gcd(a: usize, b: usize) -> usize {\n-            use crate::intrinsics;\n-            // iterative stein\u2019s algorithm\n-            // We should still make this `const fn` (and revert to recursive algorithm if we do)\n-            // because relying on llvm to consteval all this is\u2026 well, it makes me uncomfortable.\n-\n-            // SAFETY: `a` and `b` are checked to be non-zero values.\n-            let (ctz_a, mut ctz_b) = unsafe {\n-                if a == 0 {\n-                    return b;\n-                }\n-                if b == 0 {\n-                    return a;\n-                }\n-                (intrinsics::cttz_nonzero(a), intrinsics::cttz_nonzero(b))\n-            };\n-            let k = ctz_a.min(ctz_b);\n-            let mut a = a >> ctz_a;\n-            let mut b = b;\n-            loop {\n-                // remove all factors of 2 from b\n-                b >>= ctz_b;\n-                if a > b {\n-                    mem::swap(&mut a, &mut b);\n-                }\n-                b = b - a;\n-                // SAFETY: `b` is checked to be non-zero.\n-                unsafe {\n-                    if b == 0 {\n-                        break;\n-                    }\n-                    ctz_b = intrinsics::cttz_nonzero(b);\n-                }\n-            }\n-            a << k\n+        const fn gcd(a: usize, b: usize) -> usize {\n+            if b == 0 { a } else { gcd(b, a % b) }\n         }\n-        let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());\n+\n+        // Explicitly wrap the function call in a const block so it gets\n+        // constant-evaluated even in debug mode.\n+        let gcd: usize = const { gcd(mem::size_of::<T>(), mem::size_of::<U>()) };\n         let ts: usize = mem::size_of::<U>() / gcd;\n         let us: usize = mem::size_of::<T>() / gcd;\n "}]}