{"sha": "ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNzAzOWNmZDYzMzFmYjUzMmM4YTY4YWE3OWU2YWY0ZWY5YjYyZGY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-19T00:59:33Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-27T18:46:23Z"}, "message": "Detect missing `if` blocks\n\nWhen unnecessarily using a fat arrow after an if condition, suggest the\nremoval of it.\n\nWhen finding an if statement with no block, point at the `if` keyword to\nprovide more context.", "tree": {"sha": "a126782bd61af10433bf050ca0b35052ea05a18f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a126782bd61af10433bf050ca0b35052ea05a18f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "html_url": "https://github.com/rust-lang/rust/commit/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8", "html_url": "https://github.com/rust-lang/rust/commit/0c9afa87ba8145d09a2c4af7b15a9a23ad470fc8"}], "stats": {"total": 70, "additions": 60, "deletions": 10}, "files": [{"sha": "9aba2e9d52322ddb9ecc61cce7ac79bbf5de64cd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "patch": "@@ -652,9 +652,11 @@ impl<'a> Parser<'a> {\n             } else {\n                 let token_str = Parser::token_to_string(t);\n                 let this_token_str = self.this_token_to_string();\n-                Err(self.fatal(&format!(\"expected `{}`, found `{}`\",\n-                                   token_str,\n-                                   this_token_str)))\n+                let mut err = self.fatal(&format!(\"expected `{}`, found `{}`\",\n+                                                  token_str,\n+                                                  this_token_str));\n+                err.span_label(self.span, format!(\"expected `{}`\", token_str));\n+                Err(err)\n             }\n         } else {\n             self.expect_one_of(unsafe { slice::from_raw_parts(t, 1) }, &[])\n@@ -1172,7 +1174,7 @@ impl<'a> Parser<'a> {\n                                      sep: SeqSep,\n                                      f: F)\n                                      -> PResult<'a, Vec<T>> where\n-        F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n+        F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     {\n         self.expect(bra)?;\n         let result = self.parse_seq_to_before_end(ket, sep, f)?;\n@@ -1190,7 +1192,7 @@ impl<'a> Parser<'a> {\n                            sep: SeqSep,\n                            f: F)\n                            -> PResult<'a, Spanned<Vec<T>>> where\n-        F: FnMut(&mut Parser<'a>) -> PResult<'a,  T>,\n+        F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     {\n         let lo = self.span;\n         self.expect(bra)?;\n@@ -3212,7 +3214,23 @@ impl<'a> Parser<'a> {\n             err.span_label(sp, \"expected if condition here\");\n             return Err(err)\n         }\n-        let thn = self.parse_block()?;\n+        let not_block = self.token != token::OpenDelim(token::Brace);\n+        let fat_arrow_sp = if self.token == token::FatArrow {\n+            Some(self.span)\n+        } else {\n+            None\n+        };\n+        let thn = self.parse_block().map_err(|mut err| {\n+            if let Some(sp) = fat_arrow_sp {\n+                // if cond => expr\n+                err.span_suggestion(sp,\n+                                    \"only necessary in match arms, not before if blocks\",\n+                                    \"\".to_string());\n+            } else if not_block {\n+                err.span_label(lo, \"this `if` statement has a condition, but no block\");\n+            }\n+            err\n+        })?;\n         let mut els: Option<P<Expr>> = None;\n         let mut hi = thn.span;\n         if self.eat_keyword(keywords::Else) {\n@@ -3629,8 +3647,9 @@ impl<'a> Parser<'a> {\n                 self.bump();\n                 if self.token != token::CloseDelim(token::Brace) {\n                     let token_str = self.this_token_to_string();\n-                    return Err(self.fatal(&format!(\"expected `{}`, found `{}`\", \"}\",\n-                                       token_str)))\n+                    let mut err = self.fatal(&format!(\"expected `{}`, found `{}`\", \"}\", token_str));\n+                    err.span_label(self.span, \"expected `}`\");\n+                    return Err(err);\n                 }\n                 etc = true;\n                 break;"}, {"sha": "e576393500fea734315dbed1f9a1a314a4896b3d", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "patch": "@@ -19,7 +19,7 @@ error: expected `[`, found `#`\n   --> $DIR/issue-40006.rs:20:17\n    |\n LL |     fn xxx() { ### } //~ ERROR missing\n-   |                 ^\n+   |                 ^ expected `[`\n \n error: missing `fn`, `type`, or `const` for trait-item declaration\n   --> $DIR/issue-40006.rs:20:21"}, {"sha": "ce3de3b302dd3678e52d41dec61fddeb660cb66c", "filename": "src/test/ui/if-without-block.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Ftest%2Fui%2Fif-without-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Ftest%2Fui%2Fif-without-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-without-block.rs?ref=ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let n = 1;\n+    if 5 == {\n+    //~^ NOTE this `if` statement has a condition, but no block\n+        println!(\"five\");\n+    }\n+}\n+//~^ ERROR expected `{`, found `}`"}, {"sha": "8f6e53bd28bf34f17f41cb4562a5c3bc7e3af807", "filename": "src/test/ui/if-without-block.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Ftest%2Fui%2Fif-without-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Ftest%2Fui%2Fif-without-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-without-block.stderr?ref=ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "patch": "@@ -0,0 +1,11 @@\n+error: expected `{`, found `}`\n+  --> $DIR/if-without-block.rs:17:1\n+   |\n+13 |     if 5 == {\n+   |     -- this `if` statement has a condition, but no block\n+...\n+17 | }\n+   | ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ae583d0d4ba4d347fdf7810abe828d7f986d7d93", "filename": "src/test/ui/missing-block-hint.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Ftest%2Fui%2Fmissing-block-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df/src%2Ftest%2Fui%2Fmissing-block-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-block-hint.stderr?ref=ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "patch": "@@ -2,11 +2,13 @@ error: expected `{`, found `=>`\n   --> $DIR/missing-block-hint.rs:13:18\n    |\n LL |         if (foo) => {} //~ ERROR expected `{`, found `=>`\n-   |                  ^^\n+   |                  ^^ help: only necessary in match arms, not before if blocks\n \n error: expected `{`, found `bar`\n   --> $DIR/missing-block-hint.rs:17:13\n    |\n+LL |         if (foo)\n+   |         -- this `if` statement has a condition, but no block\n LL |             bar; //~ ERROR expected `{`, found `bar`\n    |             ^^^-\n    |             |"}]}