{"sha": "470423c3d2cde3a62d5d4ac23840d734e8145366", "node_id": "C_kwDOAAsO6NoAKDQ3MDQyM2MzZDJjZGUzYTYyZDVkNGFjMjM4NDBkNzM0ZTgxNDUzNjY", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-16T09:07:42Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-16T09:07:42Z"}, "message": "normalize download-rustc's prefix when running compiletests", "tree": {"sha": "3917b133e8a19ecad3b6a82c5048d629b30be308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3917b133e8a19ecad3b6a82c5048d629b30be308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/470423c3d2cde3a62d5d4ac23840d734e8145366", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmN0qF4ACgkQzXazX3c0\ndp4Adg//eP/bhuJdHq7Y6Zncx3FMaUFmakL7ABQCr7MzfiKkPEl7u5N3IvLF2Vk4\nvmmbEZLEgHBFBHgMU3K7woGJox3TJ2dtJdJuhsRsmOM2qB2EV5+/a39d3/aSj3QV\nffg+YbNkq4JzrnpAHWuo4z97OBqXIYo7S+7uAf17usjqqoQA4wqRolEVSIe1XXnw\nSwBpu0+jqyGtxroPvOBJHOuu7NGs1N1JRFVt8JzHRmXXwPlzmhWUwlndHoHE8I68\njR9sqMU5MElhCg7XgUt/kLbocWM63c5bL+fMzC7/P4YjS3WbM2yu2+4035d0LI1/\nc7ewlIvxoouRaXk+jVLL1K1BRX42JeQbKrnbmHqQU9Uv5n0SLm2ItzEgEniv6LPn\nPJTe5CEiXf0ON36nj46mb8G6T0aJ86vqXsJS+njeUwDa14aAvqLKTduUXXXZF0KM\nww2Yez8dwuBphahiC6keZlspdtrjATN/il8CADML4/YuVIQAkIOHXpIyk57QZM6K\nIsXtxw4eGFQC+I+9MtHNOpqVOiQHZkgUc/xM/t4IaPc9oed7ssyOPFJj4A2GchCW\nA/UOH7jXePUCSnWOQ73ck7ocCFPXQ/LFfjnMwM+r/5S5DgKlsq8MBLkLvCzn/uGF\n1iZdEF9ELou9HkGo/OJ9+6RPZiQ+zT3WRhNhkFcueo1m6i2SPUg=\n=h/LQ\n-----END PGP SIGNATURE-----", "payload": "tree 3917b133e8a19ecad3b6a82c5048d629b30be308\nparent 80d535966c93136fff0de7f30539b19c5f7e2d3d\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1668589662 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1668589662 +0100\n\nnormalize download-rustc's prefix when running compiletests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/470423c3d2cde3a62d5d4ac23840d734e8145366", "html_url": "https://github.com/rust-lang/rust/commit/470423c3d2cde3a62d5d4ac23840d734e8145366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/470423c3d2cde3a62d5d4ac23840d734e8145366/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d535966c93136fff0de7f30539b19c5f7e2d3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d535966c93136fff0de7f30539b19c5f7e2d3d", "html_url": "https://github.com/rust-lang/rust/commit/80d535966c93136fff0de7f30539b19c5f7e2d3d"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "1590f456bb5e57a69bf4b066188ae9ddf6800921", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/470423c3d2cde3a62d5d4ac23840d734e8145366/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470423c3d2cde3a62d5d4ac23840d734e8145366/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=470423c3d2cde3a62d5d4ac23840d734e8145366", "patch": "@@ -1506,19 +1506,25 @@ impl Config {\n \n     /// Return whether we will use a downloaded, pre-compiled version of rustc, or just build from source.\n     pub(crate) fn download_rustc(&self) -> bool {\n-        static DOWNLOAD_RUSTC: OnceCell<bool> = OnceCell::new();\n+        self.download_rustc_commit().is_some()\n+    }\n+\n+    pub(crate) fn download_rustc_commit(&self) -> Option<&'static str> {\n+        static DOWNLOAD_RUSTC: OnceCell<Option<String>> = OnceCell::new();\n         if self.dry_run() && DOWNLOAD_RUSTC.get().is_none() {\n             // avoid trying to actually download the commit\n-            return false;\n+            return None;\n         }\n \n-        *DOWNLOAD_RUSTC.get_or_init(|| match &self.download_rustc_commit {\n-            None => false,\n-            Some(commit) => {\n-                self.download_ci_rustc(commit);\n-                true\n-            }\n-        })\n+        DOWNLOAD_RUSTC\n+            .get_or_init(|| match &self.download_rustc_commit {\n+                None => None,\n+                Some(commit) => {\n+                    self.download_ci_rustc(commit);\n+                    Some(commit.clone())\n+                }\n+            })\n+            .as_deref()\n     }\n \n     pub(crate) fn initial_rustfmt(&self) -> Option<PathBuf> {"}, {"sha": "b22b7ad4ae04a7b28ed8e1cd347d78eff9754e50", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/470423c3d2cde3a62d5d4ac23840d734e8145366/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470423c3d2cde3a62d5d4ac23840d734e8145366/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=470423c3d2cde3a62d5d4ac23840d734e8145366", "patch": "@@ -1671,6 +1671,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--channel\").arg(&builder.config.channel);\n \n+        if let Some(commit) = builder.config.download_rustc_commit() {\n+            cmd.env(\"FAKE_DOWNLOAD_RUSTC_PREFIX\", format!(\"/rustc/{commit}\"));\n+        }\n+\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         builder.info(&format!("}, {"sha": "74700c602dd2e0fc98a6a45be4ea61681c4cce04", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/470423c3d2cde3a62d5d4ac23840d734e8145366/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470423c3d2cde3a62d5d4ac23840d734e8145366/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=470423c3d2cde3a62d5d4ac23840d734e8145366", "patch": "@@ -3536,6 +3536,8 @@ impl<'test> TestCx<'test> {\n             Some(self.config.sysroot_base.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\")),\n             // Virtual `/rustc/$sha` remapped paths (if `remap-debuginfo` is enabled):\n             option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n+            // Virtual `/rustc/$sha` coming from download-rustc:\n+            std::env::var_os(\"FAKE_DOWNLOAD_RUSTC_PREFIX\").map(PathBuf::from),\n         ];\n         for base_dir in source_bases {\n             if let Some(base_dir) = base_dir {"}]}