{"sha": "c394624471c66c42bd9641ab30d2a2ccea894dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzOTQ2MjQ0NzFjNjZjNDJiZDk2NDFhYjMwZDJhMmNjZWE4OTRkYmM=", "commit": {"author": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2020-09-11T17:12:06Z"}, "committer": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2020-09-11T17:12:06Z"}, "message": "Ignore unnecessary unsafe warnings\n\nThis is a work-around for a libc issue:\nhttps://github.com/rust-lang/libc/issues/1888.", "tree": {"sha": "e09e6c375ed9c19d0b4c8cfe9237177d0f83fcde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e09e6c375ed9c19d0b4c8cfe9237177d0f83fcde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c394624471c66c42bd9641ab30d2a2ccea894dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c394624471c66c42bd9641ab30d2a2ccea894dbc", "html_url": "https://github.com/rust-lang/rust/commit/c394624471c66c42bd9641ab30d2a2ccea894dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c394624471c66c42bd9641ab30d2a2ccea894dbc/comments", "author": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c3e1ffd7a945b4044e5e80d7d74ba944ff54d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c3e1ffd7a945b4044e5e80d7d74ba944ff54d0f", "html_url": "https://github.com/rust-lang/rust/commit/7c3e1ffd7a945b4044e5e80d7d74ba944ff54d0f"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "2224a055d6d87c32d1ea41415a8545dc44d71276", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c394624471c66c42bd9641ab30d2a2ccea894dbc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c394624471c66c42bd9641ab30d2a2ccea894dbc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=c394624471c66c42bd9641ab30d2a2ccea894dbc", "patch": "@@ -6,7 +6,6 @@ mod tests;\n use crate::cmp;\n use crate::io::{self, Initializer, IoSlice, IoSliceMut, Read};\n use crate::mem;\n-#[cfg(not(any(target_os = \"redox\", target_env = \"newlib\")))]\n use crate::sys::cvt;\n use crate::sys_common::AsInner;\n "}, {"sha": "08efe154e4c3b646f57d0ab87ebf76b5575fde3d", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c394624471c66c42bd9641ab30d2a2ccea894dbc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c394624471c66c42bd9641ab30d2a2ccea894dbc/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=c394624471c66c42bd9641ab30d2a2ccea894dbc", "patch": "@@ -459,18 +459,38 @@ impl ExitStatus {\n     }\n \n     fn exited(&self) -> bool {\n-        unsafe { libc::WIFEXITED(self.0) }\n+        // On Linux-like OSes this function is safe, on others it is not. See\n+        // libc issue: https://github.com/rust-lang/libc/issues/1888.\n+        #[cfg_attr(\n+            any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"),\n+            allow(unused_unsafe)\n+        )]\n+        unsafe {\n+            libc::WIFEXITED(self.0)\n+        }\n     }\n \n     pub fn success(&self) -> bool {\n         self.code() == Some(0)\n     }\n \n     pub fn code(&self) -> Option<i32> {\n+        // On Linux-like OSes this function is safe, on others it is not. See\n+        // libc issue: https://github.com/rust-lang/libc/issues/1888.\n+        #[cfg_attr(\n+            any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"),\n+            allow(unused_unsafe)\n+        )]\n         if self.exited() { Some(unsafe { libc::WEXITSTATUS(self.0) }) } else { None }\n     }\n \n     pub fn signal(&self) -> Option<i32> {\n+        // On Linux-like OSes this function is safe, on others it is not. See\n+        // libc issue: https://github.com/rust-lang/libc/issues/1888.\n+        #[cfg_attr(\n+            any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"),\n+            allow(unused_unsafe)\n+        )]\n         if !self.exited() { Some(unsafe { libc::WTERMSIG(self.0) }) } else { None }\n     }\n }"}]}