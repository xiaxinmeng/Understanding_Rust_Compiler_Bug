{"sha": "f11e6f7fa7d0a8ff1e73ff28b26667ee0a1acd87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMWU2ZjdmYTdkMGE4ZmYxZTczZmYyOGIyNjY2N2VlMGExYWNkODc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-06T23:21:16Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-06-07T09:18:19Z"}, "message": "Fix issue with path segment lowering with const args", "tree": {"sha": "73c218a3cb8ec40cd9d73c828d73f7eb8a80f377", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73c218a3cb8ec40cd9d73c828d73f7eb8a80f377"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f11e6f7fa7d0a8ff1e73ff28b26667ee0a1acd87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f11e6f7fa7d0a8ff1e73ff28b26667ee0a1acd87", "html_url": "https://github.com/rust-lang/rust/commit/f11e6f7fa7d0a8ff1e73ff28b26667ee0a1acd87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f11e6f7fa7d0a8ff1e73ff28b26667ee0a1acd87/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bb0a16ad701c1cd22c0b2c05afd55f06a532062", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb0a16ad701c1cd22c0b2c05afd55f06a532062", "html_url": "https://github.com/rust-lang/rust/commit/7bb0a16ad701c1cd22c0b2c05afd55f06a532062"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "81ea96c0eb732c1cac486fb2794cade04bc1eeed", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f11e6f7fa7d0a8ff1e73ff28b26667ee0a1acd87/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f11e6f7fa7d0a8ff1e73ff28b26667ee0a1acd87/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f11e6f7fa7d0a8ff1e73ff28b26667ee0a1acd87", "patch": "@@ -2230,17 +2230,17 @@ impl<'a> LoweringContext<'a> {\n                 .collect();\n             if expected_lifetimes > 0 && param_mode == ParamMode::Explicit {\n                 let anon_lt_suggestion = vec![\"'_\"; expected_lifetimes].join(\", \");\n-                let no_ty_args = generic_args.args.len() == expected_lifetimes;\n+                let no_non_lt_args = generic_args.args.len() == expected_lifetimes;\n                 let no_bindings = generic_args.bindings.is_empty();\n-                let (incl_angl_brckt, insertion_span, suggestion) = if no_ty_args && no_bindings {\n+                let (incl_angl_brckt, insertion_sp, suggestion) = if no_non_lt_args && no_bindings {\n                     // If there are no (non-implicit) generic args or associated type\n                     // bindings, our suggestion includes the angle brackets.\n                     (true, path_span.shrink_to_hi(), format!(\"<{}>\", anon_lt_suggestion))\n                 } else {\n                     // Otherwise (sorry, this is kind of gross) we need to infer the\n                     // place to splice in the `'_, ` from the generics that do exist.\n                     let first_generic_span = first_generic_span\n-                        .expect(\"already checked that type args or bindings exist\");\n+                        .expect(\"already checked that non-lifetime args or bindings exist\");\n                     (false, first_generic_span.shrink_to_lo(), format!(\"{}, \", anon_lt_suggestion))\n                 };\n                 match self.anonymous_lifetime_mode {\n@@ -2263,7 +2263,7 @@ impl<'a> LoweringContext<'a> {\n                             expected_lifetimes,\n                             path_span,\n                             incl_angl_brckt,\n-                            insertion_span,\n+                            insertion_sp,\n                             suggestion,\n                         );\n                         err.emit();\n@@ -2280,7 +2280,7 @@ impl<'a> LoweringContext<'a> {\n                                 expected_lifetimes,\n                                 path_span,\n                                 incl_angl_brckt,\n-                                insertion_span,\n+                                insertion_sp,\n                                 suggestion,\n                             )\n                         );\n@@ -2316,9 +2316,10 @@ impl<'a> LoweringContext<'a> {\n         mut itctx: ImplTraitContext<'_>,\n     ) -> (hir::GenericArgs, bool) {\n         let &AngleBracketedArgs { ref args, ref constraints, .. } = data;\n-        let has_types = args.iter().any(|arg| match arg {\n+        let has_non_lt_args = args.iter().any(|arg| match arg {\n+            ast::GenericArg::Lifetime(_) => false,\n             ast::GenericArg::Type(_) => true,\n-            _ => false,\n+            ast::GenericArg::Const(_) => true,\n         });\n         (\n             hir::GenericArgs {\n@@ -2328,7 +2329,7 @@ impl<'a> LoweringContext<'a> {\n                     .collect(),\n                 parenthesized: false,\n             },\n-            !has_types && param_mode == ParamMode::Optional\n+            !has_non_lt_args && param_mode == ParamMode::Optional\n         )\n     }\n "}]}