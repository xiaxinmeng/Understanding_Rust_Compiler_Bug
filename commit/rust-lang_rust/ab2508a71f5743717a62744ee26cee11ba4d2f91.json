{"sha": "ab2508a71f5743717a62744ee26cee11ba4d2f91", "node_id": "C_kwDOAAsO6NoAKGFiMjUwOGE3MWY1NzQzNzE3YTYyNzQ0ZWUyNmNlZTExYmE0ZDJmOTE", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2023-03-01T02:46:54Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2023-03-01T03:59:01Z"}, "message": "Collect all matching messages for a lint.\n\nSome examples may contain multiple lines which trigger the lint.\nPreviously it would only display the first message.\nThis updates it so that all matching instances of the lint are displayed.", "tree": {"sha": "a51227a1f31a23d54a4b60a2c6d53da6f972d443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a51227a1f31a23d54a4b60a2c6d53da6f972d443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab2508a71f5743717a62744ee26cee11ba4d2f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab2508a71f5743717a62744ee26cee11ba4d2f91", "html_url": "https://github.com/rust-lang/rust/commit/ab2508a71f5743717a62744ee26cee11ba4d2f91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab2508a71f5743717a62744ee26cee11ba4d2f91/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15450b1b213d568c83bf1ba71618ddba6979e1d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/15450b1b213d568c83bf1ba71618ddba6979e1d7", "html_url": "https://github.com/rust-lang/rust/commit/15450b1b213d568c83bf1ba71618ddba6979e1d7"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "034c6aa0708ec2522a2a389ff32a77d4f76298c6", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ab2508a71f5743717a62744ee26cee11ba4d2f91/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab2508a71f5743717a62744ee26cee11ba4d2f91/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=ab2508a71f5743717a62744ee26cee11ba4d2f91", "patch": "@@ -422,37 +422,36 @@ impl<'a> LintExtractor<'a> {\n             .filter(|line| line.starts_with('{'))\n             .map(serde_json::from_str)\n             .collect::<Result<Vec<serde_json::Value>, _>>()?;\n-        match msgs\n+        // First try to find the messages with the `code` field set to our lint.\n+        let matches: Vec<_> = msgs\n             .iter()\n-            .find(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s==name))\n-        {\n-            Some(msg) => {\n-                let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n-                Ok(rendered.to_string())\n-            }\n-            None => {\n-                match msgs.iter().find(\n-                    |msg| matches!(&msg[\"rendered\"], serde_json::Value::String(s) if s.contains(name)),\n-                ) {\n-                    Some(msg) => {\n-                        let rendered = msg[\"rendered\"].as_str().expect(\"rendered field should exist\");\n-                        Ok(rendered.to_string())\n-                    }\n-                    None => {\n-                        let rendered: Vec<&str> =\n-                            msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n-                        let non_json: Vec<&str> =\n-                            stderr.lines().filter(|line| !line.starts_with('{')).collect();\n-                        Err(format!(\n-                            \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n-                            name,\n-                            non_json.join(\"\\n\"),\n-                            rendered.join(\"\\n\")\n-                        )\n-                        .into())\n-                    }\n-                }\n+            .filter(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s==name))\n+            .map(|msg| msg[\"rendered\"].as_str().expect(\"rendered field should exist\").to_string())\n+            .collect();\n+        if matches.is_empty() {\n+            // Some lints override their code to something else (E0566).\n+            // Try to find something that looks like it could be our lint.\n+            let matches: Vec<_> = msgs.iter().filter(|msg|\n+                matches!(&msg[\"rendered\"], serde_json::Value::String(s) if s.contains(name)))\n+                .map(|msg| msg[\"rendered\"].as_str().expect(\"rendered field should exist\").to_string())\n+                .collect();\n+            if matches.is_empty() {\n+                let rendered: Vec<&str> =\n+                    msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n+                let non_json: Vec<&str> =\n+                    stderr.lines().filter(|line| !line.starts_with('{')).collect();\n+                Err(format!(\n+                    \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n+                    name,\n+                    non_json.join(\"\\n\"),\n+                    rendered.join(\"\\n\")\n+                )\n+                .into())\n+            } else {\n+                Ok(matches.join(\"\\n\"))\n             }\n+        } else {\n+            Ok(matches.join(\"\\n\"))\n         }\n     }\n "}]}