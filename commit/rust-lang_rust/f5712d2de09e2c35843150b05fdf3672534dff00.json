{"sha": "f5712d2de09e2c35843150b05fdf3672534dff00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NzEyZDJkZTA5ZTJjMzU4NDMxNTBiMDVmZGYzNjcyNTM0ZGZmMDA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-12T20:25:41Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:57Z"}, "message": "Add `ConstValue::Placeholder`", "tree": {"sha": "2d2a3dce43974e79d411aa2ecd5deffdd0494a16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d2a3dce43974e79d411aa2ecd5deffdd0494a16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5712d2de09e2c35843150b05fdf3672534dff00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5712d2de09e2c35843150b05fdf3672534dff00", "html_url": "https://github.com/rust-lang/rust/commit/f5712d2de09e2c35843150b05fdf3672534dff00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5712d2de09e2c35843150b05fdf3672534dff00/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "245a474ab7f782912255152e68a7e545718820bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/245a474ab7f782912255152e68a7e545718820bf", "html_url": "https://github.com/rust-lang/rust/commit/245a474ab7f782912255152e68a7e545718820bf"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "22e5767df3339685ec8ad826c2fd928ad422f8da", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -499,11 +499,13 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         let needs_canonical_flags = if canonicalize_region_mode.any() {\n             TypeFlags::KEEP_IN_LOCAL_TCX |\n             TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`\n-            TypeFlags::HAS_TY_PLACEHOLDER\n+            TypeFlags::HAS_TY_PLACEHOLDER |\n+            TypeFlags::HAS_CT_PLACEHOLDER\n         } else {\n             TypeFlags::KEEP_IN_LOCAL_TCX |\n             TypeFlags::HAS_RE_PLACEHOLDER |\n-            TypeFlags::HAS_TY_PLACEHOLDER\n+            TypeFlags::HAS_TY_PLACEHOLDER |\n+            TypeFlags::HAS_CT_PLACEHOLDER\n         };\n \n         let gcx = tcx.global_tcx();"}, {"sha": "aa1a86361965a1a74f85874c66e0c1ce6b9ec849", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -253,7 +253,8 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                     return ct;\n                 }\n \n-                ConstValue::Infer(ty::InferConst::Canonical(..)) => {\n+                ConstValue::Infer(ty::InferConst::Canonical(..)) |\n+                ConstValue::Placeholder(_) => {\n                     bug!(\"unexpected const {:?}\", ct)\n                 }\n "}, {"sha": "12178196cefab40be88a06b26dc83f44f695507c", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -58,6 +58,7 @@ impl<'tcx> ConstValue<'tcx> {\n         match *self {\n             ConstValue::Param(_) |\n             ConstValue::Infer(_) |\n+            ConstValue::Placeholder(_) |\n             ConstValue::ByRef(..) |\n             ConstValue::Unevaluated(..) |\n             ConstValue::Slice(..) => None,"}, {"sha": "8d7e7e16e85cb738fc102c4d0e76c3b39c4f90da", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -254,6 +254,9 @@ impl FlagComputation {\n             ConstValue::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES | TypeFlags::HAS_PARAMS);\n             }\n+            ConstValue::Placeholder(_) => {\n+                self.add_flags(TypeFlags::HAS_FREE_REGIONS | TypeFlags::HAS_CT_PLACEHOLDER);\n+            }\n             _ => {},\n         }\n     }"}, {"sha": "5d3c71f3eabb9fd7335d12580f97ab9c29883b5c", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -97,7 +97,11 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         )\n     }\n     fn has_placeholders(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_RE_PLACEHOLDER | TypeFlags::HAS_TY_PLACEHOLDER)\n+        self.has_type_flags(\n+            TypeFlags::HAS_RE_PLACEHOLDER |\n+            TypeFlags::HAS_TY_PLACEHOLDER |\n+            TypeFlags::HAS_CT_PLACEHOLDER\n+        )\n     }\n     fn needs_subst(&self) -> bool {\n         self.has_type_flags(TypeFlags::NEEDS_SUBST)"}, {"sha": "09fd7f2e79af5d59618ba0520137a4a1589d81c8", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -455,6 +455,7 @@ bitflags! {\n         const HAS_TY_PLACEHOLDER = 1 << 14;\n \n         const HAS_CT_INFER = 1 << 15;\n+        const HAS_CT_PLACEHOLDER = 1 << 16;\n \n         const NEEDS_SUBST        = TypeFlags::HAS_PARAMS.bits |\n                                    TypeFlags::HAS_SELF.bits |\n@@ -477,7 +478,8 @@ bitflags! {\n                                   TypeFlags::HAS_FREE_LOCAL_NAMES.bits |\n                                   TypeFlags::KEEP_IN_LOCAL_TCX.bits |\n                                   TypeFlags::HAS_RE_LATE_BOUND.bits |\n-                                  TypeFlags::HAS_TY_PLACEHOLDER.bits;\n+                                  TypeFlags::HAS_TY_PLACEHOLDER.bits |\n+                                  TypeFlags::HAS_CT_PLACEHOLDER.bits;\n     }\n }\n "}, {"sha": "e60edfeba1c273de62d690b61048568972d7bd5c", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -615,6 +615,9 @@ where\n                 (ConstValue::Param(a_p), ConstValue::Param(b_p)) if a_p.index == b_p.index => {\n                     Ok(a)\n                 }\n+                (ConstValue::Placeholder(p1), ConstValue::Placeholder(p2)) if p1 == p2 => {\n+                    Ok(a)\n+                }\n                 (ConstValue::Scalar(Scalar::Bits { .. }), _) if a == b => {\n                     Ok(a)\n                 }"}, {"sha": "3b8e5b449538324c522328192b3bd61d470ba74c", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -79,6 +79,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n             ConstValue::Unevaluated(..) => bug!(\"unevaluated constant in `OperandRef::from_const`\"),\n             ConstValue::Param(_) => bug!(\"encountered a ConstValue::Param in codegen\"),\n             ConstValue::Infer(_) => bug!(\"encountered a ConstValue::Infer in codegen\"),\n+            ConstValue::Placeholder(_) => bug!(\"encountered a ConstValue::Placeholder in codegen\"),\n             ConstValue::Scalar(x) => {\n                 let scalar = match layout.abi {\n                     layout::Abi::Scalar(ref x) => x,"}, {"sha": "df6d4568ab3e278095c3e98e11b3dbca4acec1a8", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         let op = match val.val {\n-            ConstValue::Param(_) | ConstValue::Infer(_) => bug!(),\n+            ConstValue::Param(_) | ConstValue::Infer(_) | ConstValue::Placeholder(_) => bug!(),\n             ConstValue::ByRef(ptr, alloc) => {\n                 // We rely on mutability being set correctly in that allocation to prevent writes\n                 // where none should happen -- and for `static mut`, we copy on demand anyway."}, {"sha": "b001a09529e5b44867d8a52c50f28d5fa82d58db", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5712d2de09e2c35843150b05fdf3672534dff00/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=f5712d2de09e2c35843150b05fdf3672534dff00", "patch": "@@ -397,7 +397,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n     // FIXME(const_generics): handle debug printing.\n     pub fn push_const_name(&self, c: &Const<'tcx>, output: &mut String, debug: bool) {\n         match c.val {\n-            ConstValue::Infer(..) => output.push_str(\"_\"),\n+            ConstValue::Infer(..) | ConstValue::Placeholder(_) => output.push_str(\"_\"),\n             ConstValue::Param(ParamConst { name, .. }) => {\n                 write!(output, \"{}\", name).unwrap();\n             }"}]}