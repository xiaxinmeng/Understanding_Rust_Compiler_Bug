{"sha": "f6b4dd15417db0303da361a38531a45444948c55", "node_id": "C_kwDOAAsO6NoAKGY2YjRkZDE1NDE3ZGIwMzAzZGEzNjFhMzg1MzFhNDU0NDQ5NDhjNTU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-02T20:17:34Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:56Z"}, "message": "Create new_mapping local structure and avoid checking def_ids on captures", "tree": {"sha": "1a0b87f8dfe8f001453399d3258c1564636c8380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a0b87f8dfe8f001453399d3258c1564636c8380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6b4dd15417db0303da361a38531a45444948c55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zAACgkQgTGiTgx5\n768XaA//TdgmWvbcWM8jZm16dZFMziUyXI7joJnZfu4uQSDIL/kHYCX3u3g1Pn80\nlDPXDLhmfZF1trERO0dslxW22nh6rgsuP/OmcYeCjs2F9O5lrJHH7xBmmjfst/p9\n3iWB73pGbrdX8iEZpjqD12fJacG0AuT/A0AfTU09lOYl9EMwHCb/hk5NrltsH6UB\nkr0AX0F+KDdJKoGkEGCvu3TyPuU+eTRTLbCOhtlgloe9bXL3WlG4VbkRuF0Zm/3m\nkhJBiTGs6QAEgnXly2vHExBwACAGnTOaRgU7xUcNieh3ZkFJkrDpNh3i/LTGk4/J\nO8MYs6EExrsRs7ORKsYg0ZC+EQfY5MOMdVj5V9yYLAiV+w2orLx662kjxIo5Fiwr\nhPzCSufCDcn0Ojc5Xd3h64Wwrblsdw4YYJ7aD9GHsmzOeCI7O4ZfTvxcrCTPRL74\nfQfRDaFRbU+ZmAwUGt1PE8nfEWhIffTUP5ekmWL6l6asFrQ4cgIXE4vl4Cc/q/FQ\n432hnvCP/oG3XJLjy/MZWwwOgv+91jLVrJTvyH+JFG/8K8TG9xXGq70jKMZuasXN\nRy2mWALKqZIl57cBZGito3mbeZEBWHiT5/4NGsW1oVxtaQ14B07AhIFKJ/I2fc9+\nkIlPd44z5b4DaGG7vFOuZkmnlobsrQIjljCW9TKc2AfBSFLTc7A=\n=JbSb\n-----END PGP SIGNATURE-----", "payload": "tree 1a0b87f8dfe8f001453399d3258c1564636c8380\nparent 6c6a81e48ed15c27e80e17fe7db6905e15a61a22\nauthor Santiago Pastorino <spastorino@gmail.com> 1659471454 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623216 -0300\n\nCreate new_mapping local structure and avoid checking def_ids on captures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b4dd15417db0303da361a38531a45444948c55", "html_url": "https://github.com/rust-lang/rust/commit/f6b4dd15417db0303da361a38531a45444948c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6b4dd15417db0303da361a38531a45444948c55/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c6a81e48ed15c27e80e17fe7db6905e15a61a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c6a81e48ed15c27e80e17fe7db6905e15a61a22", "html_url": "https://github.com/rust-lang/rust/commit/6c6a81e48ed15c27e80e17fe7db6905e15a61a22"}], "stats": {"total": 82, "additions": 48, "deletions": 34}, "files": [{"sha": "f804e09c49b15b57a7baec62debc4c1c535a8677", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 48, "deletions": 34, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f6b4dd15417db0303da361a38531a45444948c55/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b4dd15417db0303da361a38531a45444948c55/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f6b4dd15417db0303da361a38531a45444948c55", "patch": "@@ -1327,6 +1327,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let opaque_ty_def_id = self.local_def_id(opaque_ty_node_id);\n \n         let mut collected_lifetimes = FxHashMap::default();\n+        let mut new_remapping = FxHashMap::default();\n+\n         self.with_hir_id_owner(opaque_ty_node_id, |lctx| {\n             let hir_bounds = if origin == hir::OpaqueTyOrigin::TyAlias {\n                 lctx.lower_param_bounds(bounds, itctx)\n@@ -1344,7 +1346,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     lifetime_collector::lifetimes_in_bounds(&lctx.resolver, bounds);\n                 debug!(?lifetimes_in_bounds);\n \n-                lctx.create_and_capture_lifetime_defs(opaque_ty_def_id, &lifetimes_in_bounds);\n+                lctx.create_and_capture_lifetime_defs(\n+                    opaque_ty_def_id,\n+                    &lifetimes_in_bounds,\n+                    &mut new_remapping,\n+                );\n \n                 let ret = lctx.lower_param_bounds(bounds, itctx);\n \n@@ -1437,6 +1443,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         parent_def_id: LocalDefId,\n         lifetimes_in_bounds: &[Lifetime],\n+        remapping: &mut FxHashMap<LocalDefId, LocalDefId>,\n     ) {\n         for lifetime in lifetimes_in_bounds {\n             let ident = lifetime.ident;\n@@ -1447,42 +1454,42 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n                 match res {\n-                    LifetimeRes::Param { param, binder: _ } => {\n-                        match captured_lifetimes.captures.entry(param) {\n-                            Entry::Occupied(_) => {}\n-                            Entry::Vacant(v) => {\n-                                let node_id = self.next_node_id();\n-                                let name = ParamName::Plain(ident);\n-\n-                                self.create_def(\n-                                    parent_def_id,\n-                                    node_id,\n-                                    DefPathData::LifetimeNs(name.ident().name),\n-                                );\n-\n-                                v.insert((span, node_id, name, res));\n-                            }\n+                    LifetimeRes::Param { param: old_def_id, binder: _ } => {\n+                        if remapping.get(&old_def_id).is_none() {\n+                            let node_id = self.next_node_id();\n+                            let name = ParamName::Plain(ident);\n+\n+                            let new_def_id = self.create_def(\n+                                parent_def_id,\n+                                node_id,\n+                                DefPathData::LifetimeNs(name.ident().name),\n+                            );\n+\n+                            remapping.insert(old_def_id, new_def_id);\n+                            captured_lifetimes\n+                                .captures\n+                                .insert(old_def_id, (span, node_id, name, res));\n                         }\n                     }\n \n                     LifetimeRes::Fresh { param, binder: _ } => {\n                         debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n-                        let param = self.local_def_id(param);\n-                        match captured_lifetimes.captures.entry(param) {\n-                            Entry::Occupied(_) => {}\n-                            Entry::Vacant(v) => {\n-                                let node_id = self.next_node_id();\n-\n-                                let name = ParamName::Fresh;\n-\n-                                self.create_def(\n-                                    parent_def_id,\n-                                    node_id,\n-                                    DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n-                                );\n-\n-                                v.insert((span, node_id, name, res));\n-                            }\n+                        let old_def_id = self.local_def_id(param);\n+                        if remapping.get(&old_def_id).is_none() {\n+                            let node_id = self.next_node_id();\n+\n+                            let name = ParamName::Fresh;\n+\n+                            let new_def_id = self.create_def(\n+                                parent_def_id,\n+                                node_id,\n+                                DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n+                            );\n+\n+                            remapping.insert(old_def_id, new_def_id);\n+                            captured_lifetimes\n+                                .captures\n+                                .insert(old_def_id, (span, node_id, name, res));\n                         }\n                     }\n \n@@ -1691,6 +1698,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // lifetime parameters, including those defined in-band.\n \n         let mut captures = FxHashMap::default();\n+        let mut new_remapping = FxHashMap::default();\n \n         let extra_lifetime_params = self.resolver.take_extra_lifetime_params(opaque_ty_node_id);\n         debug!(?extra_lifetime_params);\n@@ -1700,7 +1708,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let inner_node_id = self.next_node_id();\n \n             // Add a definition for the in scope lifetime def.\n-            self.create_def(opaque_ty_def_id, inner_node_id, DefPathData::LifetimeNs(name));\n+            let inner_def_id =\n+                self.create_def(opaque_ty_def_id, inner_node_id, DefPathData::LifetimeNs(name));\n+            new_remapping.insert(outer_def_id, inner_def_id);\n \n             let (p_name, inner_res) = match outer_res {\n                 // Input lifetime like `'a`:\n@@ -1732,7 +1742,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 lifetime_collector::lifetimes_in_ret_ty(&this.resolver, output);\n             debug!(?lifetimes_in_bounds);\n \n-            this.create_and_capture_lifetime_defs(opaque_ty_def_id, &lifetimes_in_bounds);\n+            this.create_and_capture_lifetime_defs(\n+                opaque_ty_def_id,\n+                &lifetimes_in_bounds,\n+                &mut new_remapping,\n+            );\n \n             // We have to be careful to get elision right here. The\n             // idea is that we create a lifetime parameter for each"}]}