{"sha": "91cacb3faf987805675e39aca41859ec1fcabef3", "node_id": "C_kwDOAAsO6NoAKDkxY2FjYjNmYWY5ODc4MDU2NzVlMzlhY2E0MTg1OWVjMWZjYWJlZjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T08:12:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T08:12:45Z"}, "message": "Auto merge of #97512 - scottmcm:add-coldcc, r=nagisa,lcnr\n\nAdd support for emitting functions with `coldcc` to LLVM\n\nThe eventual goal is to try using this for things like the internal panicking stuff, to see whether it helps.", "tree": {"sha": "8abbf8d38127f75c7a19f5564b0a6db0b65e29a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8abbf8d38127f75c7a19f5564b0a6db0b65e29a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91cacb3faf987805675e39aca41859ec1fcabef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91cacb3faf987805675e39aca41859ec1fcabef3", "html_url": "https://github.com/rust-lang/rust/commit/91cacb3faf987805675e39aca41859ec1fcabef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91cacb3faf987805675e39aca41859ec1fcabef3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb55bd449e65e611da928560d948982d73e50027", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb55bd449e65e611da928560d948982d73e50027", "html_url": "https://github.com/rust-lang/rust/commit/bb55bd449e65e611da928560d948982d73e50027"}, {"sha": "be4e0898ccf4f6514a94c3b89ab48bd3a8268ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be4e0898ccf4f6514a94c3b89ab48bd3a8268ce3", "html_url": "https://github.com/rust-lang/rust/commit/be4e0898ccf4f6514a94c3b89ab48bd3a8268ce3"}], "stats": {"total": 136, "additions": 132, "deletions": 4}, "files": [{"sha": "77dd4ccd64ef2afc898ce4a53bfacfcb93194e51", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -113,6 +113,14 @@ impl<'a> PostExpansionVisitor<'a> {\n                     \"rust-call ABI is subject to change\"\n                 );\n             }\n+            \"rust-cold\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    rust_cold_cc,\n+                    span,\n+                    \"rust-cold is experimental and subject to change\"\n+                );\n+            }\n             \"ptx-kernel\" => {\n                 gate_feature_post!(\n                     &self,"}, {"sha": "ffa5d747b1160c01bdfbf6f0b73f002dacacd12a", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -23,6 +23,7 @@ fn clif_sig_from_fn_abi<'tcx>(\n ) -> Signature {\n     let call_conv = match fn_abi.conv {\n         Conv::Rust | Conv::C => default_call_conv,\n+        Conv::RustCold => CallConv::Cold,\n         Conv::X86_64SysV => CallConv::SystemV,\n         Conv::X86_64Win64 => CallConv::WindowsFastcall,\n         Conv::ArmAapcs"}, {"sha": "cc8b3a1a4e401ca59ebf8e1c427716af1d02c646", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -393,6 +393,7 @@ impl<'ll, 'tcx> FnAbiLlvmExt<'ll, 'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n     fn llvm_cconv(&self) -> llvm::CallConv {\n         match self.conv {\n             Conv::C | Conv::Rust | Conv::CCmseNonSecureCall => llvm::CCallConv,\n+            Conv::RustCold => llvm::ColdCallConv,\n             Conv::AmdGpuKernel => llvm::AmdGpuKernel,\n             Conv::AvrInterrupt => llvm::AvrInterrupt,\n             Conv::AvrNonBlockingInterrupt => llvm::AvrNonBlockingInterrupt,"}, {"sha": "1803f665013ad6f4bb6ec5b6db49ff54fe0f45ee", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -496,6 +496,8 @@ declare_features! (\n     (incomplete, repr128, \"1.16.0\", Some(56071), None),\n     /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n+    /// Allows `extern \"rust-cold\"`.\n+    (active, rust_cold_cc, \"1.63.0\", Some(97544), None),\n     /// Allows the use of SIMD types in functions declared in `extern` blocks.\n     (active, simd_ffi, \"1.0.0\", Some(27731), None),\n     /// Allows specialization of implementations (RFC 1210)."}, {"sha": "3b05e42a53ead1d5fb1342077fbd054d8949a98d", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -2971,7 +2971,7 @@ pub fn fn_can_unwind<'tcx>(tcx: TyCtxt<'tcx>, fn_def_id: Option<DefId>, abi: Spe\n         | RustIntrinsic\n         | PlatformIntrinsic\n         | Unadjusted => false,\n-        Rust | RustCall => tcx.sess.panic_strategy() == PanicStrategy::Unwind,\n+        Rust | RustCall | RustCold => tcx.sess.panic_strategy() == PanicStrategy::Unwind,\n     }\n }\n \n@@ -2980,6 +2980,7 @@ pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {\n     use rustc_target::spec::abi::Abi::*;\n     match tcx.sess.target.adjust_abi(abi) {\n         RustIntrinsic | PlatformIntrinsic | Rust | RustCall => Conv::Rust,\n+        RustCold => Conv::RustCold,\n \n         // It's the ABI's job to select this, not ours.\n         System { .. } => bug!(\"system abi should be selected elsewhere\"),"}, {"sha": "bcaf53639cc630be45b18a9996466accc06ec67d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -1163,6 +1163,7 @@ symbols! {\n         rust_2024,\n         rust_2024_preview,\n         rust_begin_unwind,\n+        rust_cold_cc,\n         rust_eh_catch_typeinfo,\n         rust_eh_personality,\n         rust_eh_register_frames,"}, {"sha": "ca1d1302ec68ac8960ff88828d8136c7e3649331", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -580,6 +580,11 @@ pub enum Conv {\n     C,\n     Rust,\n \n+    /// For things unlikely to be called, where smaller caller codegen is\n+    /// preferred over raw speed.\n+    /// Stronger than just `#[cold]` because `fn` pointers might be incompatible.\n+    RustCold,\n+\n     // Target-specific calling conventions.\n     ArmAapcs,\n     CCmseNonSecureCall,"}, {"sha": "337554dc96e82dfeb34fad62f3e698798de631db", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -35,6 +35,7 @@ pub enum Abi {\n     RustCall,\n     PlatformIntrinsic,\n     Unadjusted,\n+    RustCold,\n }\n \n #[derive(Copy, Clone)]\n@@ -81,6 +82,7 @@ const AbiDatas: &[AbiData] = &[\n     AbiData { abi: Abi::RustCall, name: \"rust-call\" },\n     AbiData { abi: Abi::PlatformIntrinsic, name: \"platform-intrinsic\" },\n     AbiData { abi: Abi::Unadjusted, name: \"unadjusted\" },\n+    AbiData { abi: Abi::RustCold, name: \"rust-cold\" },\n ];\n \n /// Returns the ABI with the given name (if any).\n@@ -139,6 +141,7 @@ impl Abi {\n             RustCall => 31,\n             PlatformIntrinsic => 32,\n             Unadjusted => 33,\n+            RustCold => 34,\n         };\n         debug_assert!(\n             AbiDatas"}, {"sha": "4ede0677ab3a646b71a12db78d0f699220b82ca1", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -1620,7 +1620,8 @@ impl Target {\n             | PlatformIntrinsic\n             | Unadjusted\n             | Cdecl { .. }\n-            | EfiApi => true,\n+            | EfiApi\n+            | RustCold => true,\n             X86Interrupt => [\"x86\", \"x86_64\"].contains(&&self.arch[..]),\n             Aapcs { .. } => \"arm\" == self.arch,\n             CCmseNonSecureCall => [\"arm\", \"aarch64\"].contains(&&self.arch[..]),"}, {"sha": "71d49478bfc74074b3a14dfe976f0b9cd1a21949", "filename": "src/test/codegen/cold-call-declare-and-call.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fcodegen%2Fcold-call-declare-and-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fcodegen%2Fcold-call-declare-and-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcold-call-declare-and-call.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(rust_cold_cc)]\n+\n+// wasm marks the definition as `dso_local`, so allow that as optional.\n+\n+// CHECK: define{{( dso_local)?}} coldcc void @this_should_never_happen(i16\n+// CHECK: call coldcc void @this_should_never_happen(i16\n+\n+#[no_mangle]\n+pub extern \"rust-cold\" fn this_should_never_happen(x: u16) {}\n+\n+pub fn do_things(x: u16) {\n+    if x == 12345 {\n+        this_should_never_happen(54321);\n+    }\n+}"}, {"sha": "bf7aaa5f0ebbf4a1ce383649772da3a4e9a45295", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, C-unwind, cdecl, cdecl-unwind, stdcall, stdcall-unwind, fastcall, fastcall-unwind, vectorcall, vectorcall-unwind, thiscall, thiscall-unwind, aapcs, aapcs-unwind, win64, win64-unwind, sysv64, sysv64-unwind, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, cdecl-unwind, stdcall, stdcall-unwind, fastcall, fastcall-unwind, vectorcall, vectorcall-unwind, thiscall, thiscall-unwind, aapcs, aapcs-unwind, win64, win64-unwind, sysv64, sysv64-unwind, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted, rust-cold\n \n error: aborting due to previous error\n "}, {"sha": "9ba8e32ac07a3431b2939feda999df9255f81559", "filename": "src/test/ui/feature-gates/feature-gate-rust_cold_cc.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rust_cold_cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rust_cold_cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rust_cold_cc.rs?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -0,0 +1,21 @@\n+#![crate_type = \"lib\"]\n+\n+extern \"rust-cold\" fn fu() {} //~ ERROR rust-cold is experimental\n+\n+trait T {\n+    extern \"rust-cold\" fn mu(); //~ ERROR rust-cold is experimental\n+    extern \"rust-cold\" fn dmu() {} //~ ERROR rust-cold is experimental\n+}\n+\n+struct S;\n+impl T for S {\n+    extern \"rust-cold\" fn mu() {} //~ ERROR rust-cold is experimental\n+}\n+\n+impl S {\n+    extern \"rust-cold\" fn imu() {} //~ ERROR rust-cold is experimental\n+}\n+\n+type TAU = extern \"rust-cold\" fn(); //~ ERROR rust-cold is experimental\n+\n+extern \"rust-cold\" {} //~ ERROR rust-cold is experimental"}, {"sha": "ab7e5f0366da5956ff1d2b5a076af9885f621376", "filename": "src/test/ui/feature-gates/feature-gate-rust_cold_cc.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rust_cold_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rust_cold_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rust_cold_cc.stderr?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -0,0 +1,66 @@\n+error[E0658]: rust-cold is experimental and subject to change\n+  --> $DIR/feature-gate-rust_cold_cc.rs:3:8\n+   |\n+LL | extern \"rust-cold\" fn fu() {}\n+   |        ^^^^^^^^^^^\n+   |\n+   = note: see issue #97544 <https://github.com/rust-lang/rust/issues/97544> for more information\n+   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable\n+\n+error[E0658]: rust-cold is experimental and subject to change\n+  --> $DIR/feature-gate-rust_cold_cc.rs:6:12\n+   |\n+LL |     extern \"rust-cold\" fn mu();\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: see issue #97544 <https://github.com/rust-lang/rust/issues/97544> for more information\n+   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable\n+\n+error[E0658]: rust-cold is experimental and subject to change\n+  --> $DIR/feature-gate-rust_cold_cc.rs:7:12\n+   |\n+LL |     extern \"rust-cold\" fn dmu() {}\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: see issue #97544 <https://github.com/rust-lang/rust/issues/97544> for more information\n+   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable\n+\n+error[E0658]: rust-cold is experimental and subject to change\n+  --> $DIR/feature-gate-rust_cold_cc.rs:12:12\n+   |\n+LL |     extern \"rust-cold\" fn mu() {}\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: see issue #97544 <https://github.com/rust-lang/rust/issues/97544> for more information\n+   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable\n+\n+error[E0658]: rust-cold is experimental and subject to change\n+  --> $DIR/feature-gate-rust_cold_cc.rs:16:12\n+   |\n+LL |     extern \"rust-cold\" fn imu() {}\n+   |            ^^^^^^^^^^^\n+   |\n+   = note: see issue #97544 <https://github.com/rust-lang/rust/issues/97544> for more information\n+   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable\n+\n+error[E0658]: rust-cold is experimental and subject to change\n+  --> $DIR/feature-gate-rust_cold_cc.rs:19:19\n+   |\n+LL | type TAU = extern \"rust-cold\" fn();\n+   |                   ^^^^^^^^^^^\n+   |\n+   = note: see issue #97544 <https://github.com/rust-lang/rust/issues/97544> for more information\n+   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable\n+\n+error[E0658]: rust-cold is experimental and subject to change\n+  --> $DIR/feature-gate-rust_cold_cc.rs:21:8\n+   |\n+LL | extern \"rust-cold\" {}\n+   |        ^^^^^^^^^^^\n+   |\n+   = note: see issue #97544 <https://github.com/rust-lang/rust/issues/97544> for more information\n+   = help: add `#![feature(rust_cold_cc)]` to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "505d830ef3e8fd4c328b3528d12519838976400e", "filename": "src/test/ui/parser/issues/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91cacb3faf987805675e39aca41859ec1fcabef3/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-8537.stderr?ref=91cacb3faf987805675e39aca41859ec1fcabef3", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, C-unwind, cdecl, cdecl-unwind, stdcall, stdcall-unwind, fastcall, fastcall-unwind, vectorcall, vectorcall-unwind, thiscall, thiscall-unwind, aapcs, aapcs-unwind, win64, win64-unwind, sysv64, sysv64-unwind, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, cdecl-unwind, stdcall, stdcall-unwind, fastcall, fastcall-unwind, vectorcall, vectorcall-unwind, thiscall, thiscall-unwind, aapcs, aapcs-unwind, win64, win64-unwind, sysv64, sysv64-unwind, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, wasm, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted, rust-cold\n \n error: aborting due to previous error\n "}]}