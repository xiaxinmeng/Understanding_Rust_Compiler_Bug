{"sha": "4866309f9d570319b3f0f28793a3aac3e3b107c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NjYzMDlmOWQ1NzAzMTliM2YwZjI4NzkzYTNhYWMzZTNiMTA3YzU=", "commit": {"author": {"name": "Daniel Wagner-Hall", "email": "dawagner@gmail.com", "date": "2018-06-14T07:57:27Z"}, "committer": {"name": "Daniel Wagner-Hall", "email": "dawagner@gmail.com", "date": "2018-06-14T08:11:46Z"}, "message": "Add default_trait_access lint", "tree": {"sha": "2f83482e6bbe33e580f50bcca2c5633fc641c3dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f83482e6bbe33e580f50bcca2c5633fc641c3dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4866309f9d570319b3f0f28793a3aac3e3b107c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4866309f9d570319b3f0f28793a3aac3e3b107c5", "html_url": "https://github.com/rust-lang/rust/commit/4866309f9d570319b3f0f28793a3aac3e3b107c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4866309f9d570319b3f0f28793a3aac3e3b107c5/comments", "author": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "committer": {"login": "illicitonion", "id": 1131704, "node_id": "MDQ6VXNlcjExMzE3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1131704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/illicitonion", "html_url": "https://github.com/illicitonion", "followers_url": "https://api.github.com/users/illicitonion/followers", "following_url": "https://api.github.com/users/illicitonion/following{/other_user}", "gists_url": "https://api.github.com/users/illicitonion/gists{/gist_id}", "starred_url": "https://api.github.com/users/illicitonion/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/illicitonion/subscriptions", "organizations_url": "https://api.github.com/users/illicitonion/orgs", "repos_url": "https://api.github.com/users/illicitonion/repos", "events_url": "https://api.github.com/users/illicitonion/events{/privacy}", "received_events_url": "https://api.github.com/users/illicitonion/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26bc88d48c2e780b3a56f77b3f8b8d8e3c383ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/26bc88d48c2e780b3a56f77b3f8b8d8e3c383ade", "html_url": "https://github.com/rust-lang/rust/commit/26bc88d48c2e780b3a56f77b3f8b8d8e3c383ade"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "0222f896e28f8371b9633e933f03c12ae6206143", "filename": "clippy_lints/src/default_trait_access.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4866309f9d570319b3f0f28793a3aac3e3b107c5/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4866309f9d570319b3f0f28793a3aac3e3b107c5/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=4866309f9d570319b3f0f28793a3aac3e3b107c5", "patch": "@@ -0,0 +1,63 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+\n+use crate::utils::{match_def_path, opt_def_id, paths, span_lint_and_sugg};\n+\n+\n+/// **What it does:** Checks for literal calls to `Default::default()`.\n+///\n+/// **Why is this bad?** It's more clear to the reader to use the name of the type whose default is\n+/// being gotten than the generic `Default`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// // Bad\n+/// let s: String = Default::default();\n+///\n+/// // Good\n+/// let s = String::default();\n+/// ```\n+declare_clippy_lint! {\n+    pub DEFAULT_TRAIT_ACCESS,\n+    style,\n+    \"checks for literal calls to Default::default()\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct DefaultTraitAccess;\n+\n+impl LintPass for DefaultTraitAccess {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEFAULT_TRAIT_ACCESS)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprCall(ref path, ..) = expr.node;\n+            if let ExprPath(ref qpath) = path.node;\n+            if let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id));\n+            if match_def_path(cx.tcx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            then {\n+                match qpath {\n+                    QPath::Resolved(..) => {\n+                        // TODO: Work out a way to put \"whatever the imported way of referencing\n+                        // this type in this file\" rather than a fully-qualified type.\n+                        let replacement = format!(\"{}::default()\", cx.tables.expr_ty(expr));\n+                        span_lint_and_sugg(\n+                            cx,\n+                            DEFAULT_TRAIT_ACCESS,\n+                            expr.span,\n+                            &format!(\"Calling {} is more clear than this expression\", replacement),\n+                            \"try\",\n+                            replacement);\n+                    },\n+                    QPath::TypeRelative(..) => {},\n+                }\n+            }\n+         }\n+    }\n+}"}, {"sha": "80c02db081eedccaa78c27eb393fb16cae491f0a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4866309f9d570319b3f0f28793a3aac3e3b107c5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4866309f9d570319b3f0f28793a3aac3e3b107c5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4866309f9d570319b3f0f28793a3aac3e3b107c5", "patch": "@@ -111,6 +111,7 @@ pub mod collapsible_if;\n pub mod const_static_lifetime;\n pub mod copies;\n pub mod cyclomatic_complexity;\n+pub mod default_trait_access;\n pub mod derive;\n pub mod doc;\n pub mod double_comparison;\n@@ -425,6 +426,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n     reg.register_late_lint_pass(box unwrap::Pass);\n     reg.register_late_lint_pass(box duration_subsec::DurationSubsec);\n+    reg.register_late_lint_pass(box default_trait_access::DefaultTraitAccess);\n \n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n@@ -512,6 +514,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n+        default_trait_access::DEFAULT_TRAIT_ACCESS,\n         derive::DERIVE_HASH_XOR_EQ,\n         double_comparison::DOUBLE_COMPARISONS,\n         double_parens::DOUBLE_PARENS,\n@@ -709,6 +712,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         collapsible_if::COLLAPSIBLE_IF,\n         const_static_lifetime::CONST_STATIC_LIFETIME,\n+        default_trait_access::DEFAULT_TRAIT_ACCESS,\n         enum_variants::ENUM_VARIANT_NAMES,\n         enum_variants::MODULE_INCEPTION,\n         eq_op::OP_REF,"}, {"sha": "7606f4f8471e9f8ddfc4762dee38f12791630e37", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4866309f9d570319b3f0f28793a3aac3e3b107c5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4866309f9d570319b3f0f28793a3aac3e3b107c5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=4866309f9d570319b3f0f28793a3aac3e3b107c5", "patch": "@@ -24,6 +24,7 @@ pub const C_VOID: [&str; 4] = [\"std\", \"os\", \"raw\", \"c_void\"];\n pub const C_VOID_LIBC: [&str; 2] = [\"libc\", \"c_void\"];\n pub const DEBUG_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Debug\", \"fmt\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n+pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];"}, {"sha": "9db875ee3052a6b0f88619ec6cdd68aaf0d6ec96", "filename": "tests/ui/default_trait_access.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4866309f9d570319b3f0f28793a3aac3e3b107c5/tests%2Fui%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4866309f9d570319b3f0f28793a3aac3e3b107c5/tests%2Fui%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.rs?ref=4866309f9d570319b3f0f28793a3aac3e3b107c5", "patch": "@@ -0,0 +1,39 @@\n+#![warn(default_trait_access)]\n+\n+use std::default::Default as D2;\n+use std::string;\n+use std::default;\n+\n+fn main() {\n+    let s1: String = Default::default();\n+\n+    let s2 = String::default();\n+\n+    let s3: String = D2::default();\n+\n+    let s4: String = std::default::Default::default();\n+\n+    let s5 = string::String::default();\n+\n+    let s6: String = default::Default::default();\n+\n+    let s7 = std::string::String::default();\n+\n+    let s8: String = DefaultFactory::make_t_badly();\n+\n+    let s9: String = DefaultFactory::make_t_nicely();\n+\n+    println!(\"[{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}] [{}]\", s1, s2, s3, s4, s5, s6, s7, s8, s9);\n+}\n+\n+struct DefaultFactory;\n+\n+impl DefaultFactory {\n+    pub fn make_t_badly<T: Default>() -> T {\n+        Default::default()\n+    }\n+\n+    pub fn make_t_nicely<T: Default>() -> T {\n+        T::default()\n+    }\n+}"}, {"sha": "b2cb49e6c80815c84a2ec23170bd0ce9959e2f4e", "filename": "tests/ui/default_trait_access.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4866309f9d570319b3f0f28793a3aac3e3b107c5/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4866309f9d570319b3f0f28793a3aac3e3b107c5/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=4866309f9d570319b3f0f28793a3aac3e3b107c5", "patch": "@@ -0,0 +1,34 @@\n+error: Calling std::string::String::default() is more clear than this expression\n+ --> $DIR/default_trait_access.rs:8:22\n+  |\n+8 |     let s1: String = Default::default();\n+  |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+  |\n+  = note: `-D default-trait-access` implied by `-D warnings`\n+\n+error: Calling std::string::String::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:12:22\n+   |\n+12 |     let s3: String = D2::default();\n+   |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+\n+error: Calling std::string::String::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:14:22\n+   |\n+14 |     let s4: String = std::default::Default::default();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+\n+error: Calling std::string::String::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:18:22\n+   |\n+18 |     let s6: String = default::Default::default();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+\n+error: Calling T::default() is more clear than this expression\n+  --> $DIR/default_trait_access.rs:33:9\n+   |\n+33 |         Default::default()\n+   |         ^^^^^^^^^^^^^^^^^^ help: try: `T::default()`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/default_trait_access.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4866309f9d570319b3f0f28793a3aac3e3b107c5/tests%2Fui%2Fdefault_trait_access.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4866309f9d570319b3f0f28793a3aac3e3b107c5/tests%2Fui%2Fdefault_trait_access.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stdout?ref=4866309f9d570319b3f0f28793a3aac3e3b107c5"}]}