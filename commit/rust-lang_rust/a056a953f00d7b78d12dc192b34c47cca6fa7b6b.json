{"sha": "a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "node_id": "C_kwDOAAsO6NoAKGEwNTZhOTUzZjAwZDdiNzhkMTJkYzE5MmIzNGM0N2NjYTZmYTdiNmI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-22T19:57:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-28T18:38:22Z"}, "message": "Initial fixes on top of type interner commit", "tree": {"sha": "cec1788af1bb7d4e9e09b02227acd4d8479f94a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cec1788af1bb7d4e9e09b02227acd4d8479f94a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "html_url": "https://github.com/rust-lang/rust/commit/a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7015fe8169ebfcd6707f34bf190cb4c4ae302f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7015fe8169ebfcd6707f34bf190cb4c4ae302f7", "html_url": "https://github.com/rust-lang/rust/commit/a7015fe8169ebfcd6707f34bf190cb4c4ae302f7"}], "stats": {"total": 305, "additions": 171, "deletions": 134}, "files": [{"sha": "3f17f24875d9222847d3714fb250f32017e3173e", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -3676,6 +3676,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n+ \"rustc_type_ir\",\n  \"tracing\",\n ]\n \n@@ -3969,6 +3970,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n+ \"rustc_type_ir\",\n  \"tracing\",\n  \"unicode-security\",\n ]\n@@ -4041,6 +4043,7 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"rustc_type_ir\",\n  \"smallvec\",\n  \"snap\",\n  \"tracing\",\n@@ -4474,6 +4477,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n+ \"rustc_type_ir\",\n  \"tracing\",\n ]\n \n@@ -4512,6 +4516,7 @@ dependencies = [\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n  \"rustc_ty_utils\",\n+ \"rustc_type_ir\",\n  \"smallvec\",\n  \"tracing\",\n ]"}, {"sha": "93c7a832afd5189e92914408af7aff87f299ebfa", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -98,7 +98,9 @@ struct Upvar<'tcx> {\n     by_ref: bool,\n }\n \n-const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n+const fn deref_projection<'tcx>() -> &'tcx [PlaceElem<'tcx>; 1] {\n+    &[ProjectionElem::Deref]\n+}\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n@@ -1443,7 +1445,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // Thread-locals might be dropped after the function exits\n                 // We have to dereference the outer reference because\n                 // borrows don't conflict behind shared references.\n-                root_place.projection = DEREF_PROJECTION;\n+                root_place.projection = deref_projection();\n                 (true, true)\n             } else {\n                 (false, self.locals_are_invalidated_at_exit)"}, {"sha": "bbbd1e945148e61bd43364af8f233b528504f4c1", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -33,7 +33,7 @@ use rustc_middle::mir::{self, GeneratorLayout};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, AdtKind, Instance, ParamEnv, Ty, TyCtxt, COMMON_VTABLE_ENTRIES};\n+use rustc_middle::ty::{self, common_vtable_entries, AdtKind, Instance, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::Symbol;\n use rustc_span::FileName;\n@@ -1392,7 +1392,7 @@ fn build_vtable_type_di_node<'ll, 'tcx>(\n \n         tcx.vtable_entries(trait_ref)\n     } else {\n-        COMMON_VTABLE_ENTRIES\n+        common_vtable_entries()\n     };\n \n     // All function pointers are described as opaque pointers. This could be improved in the future"}, {"sha": "32e8233a0415ff868a840e525a974102766f09f4", "filename": "compiler/rustc_const_eval/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2FCargo.toml?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -24,3 +24,4 @@ rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_span = { path = \"../rustc_span\" }\n+rustc_type_ir = { path = \"../rustc_type_ir\" }"}, {"sha": "d5a448a8963a3de1f5377ba839b293c20b2c1db6", "filename": "compiler/rustc_const_eval/src/interpret/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -2,7 +2,7 @@ use std::convert::TryFrom;\n \n use rustc_middle::mir::interpret::{InterpResult, Pointer, PointerArithmetic};\n use rustc_middle::ty::{\n-    self, Ty, COMMON_VTABLE_ENTRIES, COMMON_VTABLE_ENTRIES_ALIGN,\n+    self, common_vtable_entries, Ty, COMMON_VTABLE_ENTRIES_ALIGN,\n     COMMON_VTABLE_ENTRIES_DROPINPLACE, COMMON_VTABLE_ENTRIES_SIZE,\n };\n use rustc_target::abi::{Align, Size};\n@@ -38,7 +38,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     /// Resolves the function at the specified slot in the provided\n-    /// vtable. Currently an index of '3' (`COMMON_VTABLE_ENTRIES.len()`)\n+    /// vtable. Currently an index of '3' (`common_vtable_entries().len()`)\n     /// corresponds to the first method declared in the trait of the provided vtable.\n     pub fn get_vtable_slot(\n         &self,\n@@ -64,7 +64,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let vtable = self\n             .get_ptr_alloc(\n                 vtable,\n-                pointer_size * u64::try_from(COMMON_VTABLE_ENTRIES.len()).unwrap(),\n+                pointer_size * u64::try_from(common_vtable_entries().len()).unwrap(),\n                 self.tcx.data_layout.pointer_align.abi,\n             )?\n             .expect(\"cannot be a ZST\");\n@@ -99,7 +99,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let vtable = self\n             .get_ptr_alloc(\n                 vtable,\n-                pointer_size * u64::try_from(COMMON_VTABLE_ENTRIES.len()).unwrap(),\n+                pointer_size * u64::try_from(common_vtable_entries().len()).unwrap(),\n                 self.tcx.data_layout.pointer_align.abi,\n             )?\n             .expect(\"cannot be a ZST\");"}, {"sha": "fab60b6f6096c0c424b6c69203ef57552c6d6501", "filename": "compiler/rustc_lint/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2FCargo.toml?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -21,3 +21,4 @@ rustc_session = { path = \"../rustc_session\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_parse_format = { path = \"../rustc_parse_format\" }\n rustc_infer = { path = \"../rustc_infer\" }\n+rustc_type_ir = { path = \"../rustc_type_ir\" }"}, {"sha": "41224e33461776b212e3d92a20bcc63b08adc7ed", "filename": "compiler/rustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2FCargo.toml?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -27,3 +27,4 @@ rustc_ast = { path = \"../rustc_ast\" }\n rustc_expand = { path = \"../rustc_expand\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_session = { path = \"../rustc_session\" }\n+rustc_type_ir = { path = \"../rustc_type_ir\" }"}, {"sha": "806db61471adaef997ab9f8c57c9ad5b07df91cc", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -24,8 +24,8 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::thir;\n use rustc_middle::ty::codec::TyDecoder;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n-use rustc_middle::ty::GeneratorDiagnosticData;\n use rustc_middle::ty::{self, ParameterizedOverTcx, Ty, TyCtxt, Visibility};\n+use rustc_middle::ty::{GeneratorDiagnosticData, TyInterner};\n use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::cstore::{\n     CrateSource, ExternCrate, ForeignModule, LinkagePreference, NativeLib,\n@@ -377,12 +377,13 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n+impl<'a, 'tcx> TyDecoder for DecodeContext<'a, 'tcx> {\n     const CLEAR_CROSS_CRATE: bool = true;\n \n-    #[inline]\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx.expect(\"missing TyCtxt in DecodeContext\")\n+    type I = TyInterner<'tcx>;\n+\n+    fn interner(&self) -> Self::I {\n+        TyInterner { tcx: self.tcx() }\n     }\n \n     #[inline]"}, {"sha": "2a862502f38ac946e85664f1f730d49075eca303", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n use rustc_middle::ty::fast_reject::{self, SimplifiedType, TreatParams};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n+use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt, TyInterner};\n use rustc_serialize::{opaque, Encodable, Encoder};\n use rustc_session::config::CrateType;\n use rustc_session::cstore::{ForeignModule, LinkagePreference, NativeLib};\n@@ -313,9 +313,11 @@ impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {\n     }\n }\n \n-impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {\n+impl<'a, 'tcx> TyEncoder for EncodeContext<'a, 'tcx> {\n     const CLEAR_CROSS_CRATE: bool = true;\n \n+    type I = TyInterner<'tcx>;\n+\n     fn position(&self) -> usize {\n         self.opaque.position()\n     }"}, {"sha": "2298cb4098b763074d21daf3009e114470ec2fa0", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -17,8 +17,8 @@ use crate::traits;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, AdtDef, Ty};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_serialize::{Decodable, Encodable};\n use rustc_middle::ty::TyInterner;\n+use rustc_serialize::{Decodable, Encodable};\n use rustc_span::Span;\n pub use rustc_type_ir::{TyDecoder, TyEncoder};\n use std::hash::Hash;\n@@ -165,25 +165,6 @@ impl<'tcx, E: TyEncoder<I = TyInterner<'tcx>>> Encodable<E> for AllocId {\n     }\n }\n \n-macro_rules! encodable_via_deref {\n-    ($($t:ty),+) => {\n-        $(impl<'tcx, E: TyEncoder<I = TyInterner<'tcx>>> Encodable<E> for $t {\n-            fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n-                (**self).encode(e)\n-            }\n-        })*\n-    }\n-}\n-\n-encodable_via_deref! {\n-    &'tcx ty::TypeckResults<'tcx>,\n-    &'tcx traits::ImplSource<'tcx, ()>,\n-    &'tcx mir::Body<'tcx>,\n-    &'tcx mir::UnsafetyCheckResult,\n-    &'tcx mir::BorrowCheckResult<'tcx>,\n-    &'tcx mir::coverage::CodeRegion\n-}\n-\n #[inline]\n fn decode_arena_allocable<\n     'tcx,\n@@ -231,7 +212,9 @@ impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> Decodable<D> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> Decodable<D> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {\n+impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> Decodable<D>\n+    for ty::Binder<'tcx, ty::PredicateKind<'tcx>>\n+{\n     fn decode(decoder: &mut D) -> ty::Binder<'tcx, ty::PredicateKind<'tcx>> {\n         let bound_vars = Decodable::decode(decoder);\n         // Handle shorthands first, if we have a usize > 0x80.\n@@ -318,7 +301,10 @@ macro_rules! impl_decodable_via_ref {\n impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         let len = decoder.read_usize();\n-        decoder.interner().tcx.mk_type_list((0..len).map::<Ty<'tcx>, _>(|_| Decodable::decode(decoder)))\n+        decoder\n+            .interner()\n+            .tcx\n+            .mk_type_list((0..len).map::<Ty<'tcx>, _>(|_| Decodable::decode(decoder)))\n     }\n }\n \n@@ -359,31 +345,39 @@ impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> Decodable<D> for AdtDef<'tcx> {\n     }\n }\n \n-impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D> for [(ty::Predicate<'tcx>, Span)] {\n+impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D>\n+    for [(ty::Predicate<'tcx>, Span)]\n+{\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         decoder.interner().tcx.arena.alloc_from_iter(\n             (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),\n         )\n     }\n }\n \n-impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D> for [thir::abstract_const::Node<'tcx>] {\n+impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D>\n+    for [thir::abstract_const::Node<'tcx>]\n+{\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         decoder.interner().tcx.arena.alloc_from_iter(\n             (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),\n         )\n     }\n }\n \n-impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D> for [thir::abstract_const::NodeId] {\n+impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D>\n+    for [thir::abstract_const::NodeId]\n+{\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         decoder.interner().tcx.arena.alloc_from_iter(\n             (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),\n         )\n     }\n }\n \n-impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D> for ty::List<ty::BoundVariableKind> {\n+impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D>\n+    for ty::List<ty::BoundVariableKind>\n+{\n     fn decode(decoder: &mut D) -> &'tcx Self {\n         let len = decoder.read_usize();\n         decoder.interner().tcx.mk_bound_variable_kinds(\n@@ -449,17 +443,17 @@ arena_types!(impl_arena_allocatable_decoders);\n \n macro_rules! impl_arena_copy_decoder {\n     (<$tcx:tt> $($ty:ty,)*) => {\n-        $(impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for $ty {\n+        $(impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D> for $ty {\n             #[inline]\n             fn decode(decoder: &mut D) -> &'tcx Self {\n-                decoder.tcx().arena.alloc(Decodable::decode(decoder))\n+                decoder.interner().tcx.arena.alloc(Decodable::decode(decoder))\n             }\n         }\n \n-        impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [$ty] {\n+        impl<'tcx, D: TyDecoder<I = TyInterner<'tcx>>> RefDecodable<'tcx, D> for [$ty] {\n             #[inline]\n             fn decode(decoder: &mut D) -> &'tcx Self {\n-                decoder.tcx().arena.alloc_from_iter(<Vec<_> as Decodable<D>>::decode(decoder))\n+                decoder.interner().tcx.arena.alloc_from_iter(<Vec<_> as Decodable<D>>::decode(decoder))\n             }\n         })*\n     };"}, {"sha": "7af7eb4f5ecfd868ebf1408ac90aed3027c08b93", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -2,7 +2,7 @@ use crate::mir::interpret::ConstValue;\n use crate::mir::interpret::{LitToConstInput, Scalar};\n use crate::ty::{\n     self, InlineConstSubsts, InlineConstSubstsParts, InternalSubsts, ParamEnv, ParamEnvAnd, Ty,\n-    TyCtxt, TyInterner, TypeFoldable,\n+    TyCtxt, TypeFoldable,\n };\n use rustc_data_structures::intern::Interned;\n use rustc_errors::ErrorGuaranteed;\n@@ -40,14 +40,6 @@ pub struct ConstS<'tcx> {\n     pub val: ConstKind<'tcx>,\n }\n \n-impl<'tcx, S: rustc_type_ir::TyEncoder<I = TyInterner<'tcx>>> rustc_serialize::Encodable<S>\n-    for &'_ Const<'_>\n-{\n-    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n-        (*self).encode(s)\n-    }\n-}\n-\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(ConstS<'_>, 48);\n "}, {"sha": "a5e6a1b97dddc8b666368dba939fafaa0f9c1fa5", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -1744,7 +1744,7 @@ macro_rules! nop_lift {\n         impl<'a, 'tcx> Lift<'tcx> for $ty {\n             type Lifted = $lifted;\n             fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-                if tcx.interners.$set.contains_pointer_to(&InternedInSet(self.0.0)) {\n+                if tcx.interners.$set.contains_pointer_to(&InternedInSet(&*self.0.0)) {\n                     // SAFETY: `self` is interned and therefore valid\n                     // for the entire lifetime of the `TyCtxt`.\n                     Some(unsafe { mem::transmute(self) })"}, {"sha": "a7ecbdff5aee905af24b15314bf278a177c9c5d6", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -68,8 +68,8 @@ pub use self::consts::{\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorDiagnosticData,\n-    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TyInterner, TypeckResults, UserType,\n-    UserTypeAnnotationIndex,\n+    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TyInterner, TypeckResults,\n+    UserType, UserTypeAnnotationIndex,\n };\n pub use self::instance::{Instance, InstanceDef};\n pub use self::list::List;\n@@ -78,13 +78,13 @@ pub use self::rvalue_scopes::RvalueScopes;\n pub use self::sty::BoundRegionKind::*;\n pub use self::sty::RegionKind::*;\n pub use self::sty::{\n-    Binder, BoundRegion, BoundRegionKind, BoundTy, BoundTyKind, BoundVar, BoundVariableKind,\n-    CanonicalPolyFnSig, ClosureSubsts, ClosureSubstsParts, ConstVid, EarlyBinder, EarlyBoundRegion,\n-    ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, FnSig, FreeRegion, GenSig,\n-    GeneratorSubsts, GeneratorSubstsParts, InlineConstSubsts, InlineConstSubstsParts, ParamConst,\n-    ParamTy, PolyExistentialProjection, PolyExistentialTraitRef, PolyFnSig, PolyGenSig,\n-    PolyTraitRef, ProjectionTy, Region, RegionKind, RegionVid, TraitRef, TyKind, TypeAndMut,\n-    UpvarSubsts, VarianceDiagInfo,\n+    Article, Binder, BoundRegion, BoundRegionKind, BoundTy, BoundTyKind, BoundVar,\n+    BoundVariableKind, CanonicalPolyFnSig, ClosureSubsts, ClosureSubstsParts, ConstVid,\n+    EarlyBinder, EarlyBoundRegion, ExistentialPredicate, ExistentialProjection,\n+    ExistentialTraitRef, FnSig, FreeRegion, GenSig, GeneratorSubsts, GeneratorSubstsParts,\n+    InlineConstSubsts, InlineConstSubstsParts, ParamConst, ParamTy, PolyExistentialProjection,\n+    PolyExistentialTraitRef, PolyFnSig, PolyGenSig, PolyTraitRef, ProjectionTy, Region, RegionKind,\n+    RegionVid, TraitRef, TyKind, TypeAndMut, UpvarSubsts, VarianceDiagInfo,\n };\n pub use self::trait_def::TraitDef;\n \n@@ -463,16 +463,31 @@ pub(crate) struct TyS<'tcx> {\n #[rustc_pass_by_value]\n pub struct Ty<'tcx>(Interned<'tcx, WithStableHash<TyS<'tcx>>>);\n \n-// Statics only used for internal testing.\n-pub static BOOL_TY: Ty<'static> = Ty(Interned::new_unchecked(&WithStableHash {\n-    internee: BOOL_TYS,\n-    stable_hash: Fingerprint::ZERO,\n-}));\n-const BOOL_TYS: TyS<'static> = TyS {\n-    kind: ty::Bool,\n-    flags: TypeFlags::empty(),\n-    outer_exclusive_binder: DebruijnIndex::from_usize(0),\n-};\n+const LEAKED_BOOL_TY_ALREADY: std::sync::atomic::AtomicBool =\n+    std::sync::atomic::AtomicBool::new(false);\n+\n+/// \"Static\" bool only used for internal testing.\n+///\n+/// FIXME(rustc_type_ir): This really should be replaced with something that doesn't leak.\n+/// however, since it's used for testing, it's not _that_ bad.\n+pub fn leak_bool_ty_for_unit_testing<'tcx>() -> Ty<'tcx> {\n+    use std::sync::atomic::*;\n+\n+    if LEAKED_BOOL_TY_ALREADY.load(Ordering::Acquire) {\n+        panic!(\"Can only leak one bool type, since its equality depends on its address\");\n+    } else {\n+        LEAKED_BOOL_TY_ALREADY.store(true, Ordering::Release);\n+    }\n+\n+    Ty(Interned::new_unchecked(Box::leak(Box::new(WithStableHash {\n+        internee: TyS {\n+            kind: ty::Bool,\n+            flags: TypeFlags::empty(),\n+            outer_exclusive_binder: DebruijnIndex::from_usize(0),\n+        },\n+        stable_hash: Fingerprint::ZERO,\n+    }))))\n+}\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TyS<'tcx> {\n     #[inline]"}, {"sha": "4edad27ee7a7794ed0cef92e88d32c60e70065c5", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -954,9 +954,7 @@ impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {\n     }\n \n     #[inline]\n-    pub fn auto_traits<'a>(\n-        &'a self,\n-    ) -> impl Iterator<Item = DefId> + rustc_data_structures::captures::Captures<'tcx> + 'a {\n+    pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + Captures<'tcx> + 'a {\n         self.iter().filter_map(|predicate| match predicate.skip_binder() {\n             ExistentialPredicate::AutoTrait(did) => Some(did),\n             _ => None,"}, {"sha": "8494d5c71fe42470964d615a2fea79466c87a809", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -79,17 +79,17 @@ impl<'tcx> GenericArgKind<'tcx> {\n         let (tag, ptr) = match self {\n             GenericArgKind::Lifetime(lt) => {\n                 // Ensure we can use the tag bits.\n-                assert_eq!(mem::align_of_val(lt.0.0) & TAG_MASK, 0);\n+                assert_eq!(mem::align_of_val(&*lt.0.0) & TAG_MASK, 0);\n                 (REGION_TAG, lt.0.0 as *const ty::RegionKind as usize)\n             }\n             GenericArgKind::Type(ty) => {\n                 // Ensure we can use the tag bits.\n-                assert_eq!(mem::align_of_val(ty.0.0) & TAG_MASK, 0);\n+                assert_eq!(mem::align_of_val(&*ty.0.0) & TAG_MASK, 0);\n                 (TYPE_TAG, ty.0.0 as *const WithStableHash<ty::TyS<'tcx>> as usize)\n             }\n             GenericArgKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n-                assert_eq!(mem::align_of_val(ct.0.0) & TAG_MASK, 0);\n+                assert_eq!(mem::align_of_val(&*ct.0.0) & TAG_MASK, 0);\n                 (CONST_TAG, ct.0.0 as *const ty::ConstS<'tcx> as usize)\n             }\n         };"}, {"sha": "809e7ce2e745b39f3e93dd1d29f7205eb22d6784", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -5,9 +5,7 @@ use crate::ty::fold::{FallibleTypeFolder, TypeFolder};\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n-use crate::ty::{\n-    self, Const, DebruijnIndex, DefIdTree, List, ReEarlyBound, Ty, TyCtxt, TypeFoldable,\n-};\n+use crate::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n@@ -22,7 +20,6 @@ use rustc_macros::HashStable;\n use rustc_span::{sym, DUMMY_SP};\n use rustc_target::abi::{Integer, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi;\n-use rustc_type_ir::TyKind::*;\n use smallvec::SmallVec;\n use std::{fmt, iter};\n "}, {"sha": "793b5768ad1b1b742077d2febd9d1bdf34d294fd", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -36,8 +36,9 @@ impl<'tcx> fmt::Debug for VtblEntry<'tcx> {\n     }\n }\n \n-pub const COMMON_VTABLE_ENTRIES: &[VtblEntry<'_>] =\n-    &[VtblEntry::MetadataDropInPlace, VtblEntry::MetadataSize, VtblEntry::MetadataAlign];\n+pub const fn common_vtable_entries<'tcx>() -> &'tcx [VtblEntry<'tcx>] {\n+    &[VtblEntry::MetadataDropInPlace, VtblEntry::MetadataSize, VtblEntry::MetadataAlign]\n+}\n \n pub const COMMON_VTABLE_ENTRIES_DROPINPLACE: usize = 0;\n pub const COMMON_VTABLE_ENTRIES_SIZE: usize = 1;\n@@ -57,7 +58,7 @@ pub(super) fn vtable_allocation_provider<'tcx>(\n \n         tcx.vtable_entries(trait_ref)\n     } else {\n-        COMMON_VTABLE_ENTRIES\n+        common_vtable_entries()\n     };\n \n     let layout = tcx"}, {"sha": "41f004b0c0043877798421c988ace162741da9aa", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -37,7 +37,7 @@ use rustc_data_structures::graph::WithSuccessors;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::coverage::CoverageKind;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, BOOL_TY};\n+use rustc_middle::ty::{self, Ty};\n use rustc_span::{self, BytePos, Pos, Span, DUMMY_SP};\n \n // All `TEMP_BLOCK` targets should be replaced before calling `to_body() -> mir::Body`.\n@@ -47,6 +47,7 @@ struct MockBlocks<'tcx> {\n     blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n     dummy_place: Place<'tcx>,\n     next_local: usize,\n+    bool_ty: Ty<'tcx>,\n }\n \n impl<'tcx> MockBlocks<'tcx> {\n@@ -55,6 +56,7 @@ impl<'tcx> MockBlocks<'tcx> {\n             blocks: IndexVec::new(),\n             dummy_place: Place { local: RETURN_PLACE, projection: ty::List::empty() },\n             next_local: 0,\n+            bool_ty: ty::leak_bool_ty_for_unit_testing(),\n         }\n     }\n \n@@ -155,7 +157,7 @@ impl<'tcx> MockBlocks<'tcx> {\n     fn switchint(&mut self, some_from_block: Option<BasicBlock>) -> BasicBlock {\n         let switchint_kind = TerminatorKind::SwitchInt {\n             discr: Operand::Move(Place::from(self.new_temp())),\n-            switch_ty: BOOL_TY, // just a dummy value\n+            switch_ty: self.bool_ty, // just a dummy value\n             targets: SwitchTargets::static_if(0, TEMP_BLOCK, TEMP_BLOCK),\n         };\n         self.add_block_from(some_from_block, switchint_kind)"}, {"sha": "7dc6921a569fd2046a492c6f188d29b07279944b", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, interpret};\n use rustc_middle::thir;\n use rustc_middle::ty::codec::{RefDecodable, TyDecoder, TyEncoder};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TyInterner};\n use rustc_query_system::dep_graph::DepContext;\n use rustc_query_system::query::{QueryCache, QueryContext, QuerySideEffects};\n use rustc_serialize::{"}, {"sha": "0a0a1296aae29d76ab07cb029fc395247e96d10a", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -33,7 +33,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{\n-    self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry, COMMON_VTABLE_ENTRIES,\n+    self, common_vtable_entries, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry,\n };\n use rustc_span::{sym, Span};\n use smallvec::SmallVec;\n@@ -695,7 +695,7 @@ fn vtable_entries<'tcx>(\n     let vtable_segment_callback = |segment| -> ControlFlow<()> {\n         match segment {\n             VtblSegment::MetadataDSA => {\n-                entries.extend(COMMON_VTABLE_ENTRIES);\n+                entries.extend(common_vtable_entries());\n             }\n             VtblSegment::TraitOwnEntries { trait_ref, emit_vptr } => {\n                 let existential_trait_ref = trait_ref\n@@ -785,7 +785,7 @@ fn vtable_trait_first_method_offset<'tcx>(\n         move |segment| {\n             match segment {\n                 VtblSegment::MetadataDSA => {\n-                    vtable_base += COMMON_VTABLE_ENTRIES.len();\n+                    vtable_base += common_vtable_entries().len();\n                 }\n                 VtblSegment::TraitOwnEntries { trait_ref, emit_vptr } => {\n                     if tcx.erase_regions(trait_ref) == trait_to_be_found_erased {"}, {"sha": "548b60d74bac0a2864dcc7808350e064741bd20a", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -834,7 +834,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             move |segment| {\n                 match segment {\n                     VtblSegment::MetadataDSA => {\n-                        vptr_offset += ty::COMMON_VTABLE_ENTRIES.len();\n+                        vptr_offset += ty::common_vtable_entries().len();\n                     }\n                     VtblSegment::TraitOwnEntries { trait_ref, emit_vptr } => {\n                         vptr_offset += util::count_own_vtable_entries(tcx, trait_ref);"}, {"sha": "d03d675bfd231d546e097d7164cd1114a5ee7d29", "filename": "compiler/rustc_ty_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_ty_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_ty_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2FCargo.toml?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -14,3 +14,4 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_type_ir = { path = \"../rustc_type_ir\" }"}, {"sha": "09f781fae75bde0dea38eef2dcd44ba7cc6778f5", "filename": "compiler/rustc_type_ir/src/codec.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_type_ir%2Fsrc%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_type_ir%2Fsrc%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fcodec.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -47,7 +47,11 @@ pub trait TyDecoder: Decoder {\n \n     fn position(&self) -> usize;\n \n-    fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> <Self::I as Interner>::Ty\n+    fn cached_ty_for_shorthand<F>(\n+        &mut self,\n+        shorthand: usize,\n+        or_insert_with: F,\n+    ) -> <Self::I as Interner>::Ty\n     where\n         F: FnOnce(&mut Self) -> <Self::I as Interner>::Ty;\n \n@@ -60,4 +64,4 @@ pub trait TyDecoder: Decoder {\n     }\n \n     fn decode_alloc_id(&mut self) -> <Self::I as Interner>::AllocId;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0f614967defcb2b660b36038bb0d523df1b3486e", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 52, "deletions": 35, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -13,7 +13,7 @@ use rustc_serialize::{Decodable, Encodable};\n /// Types written by the user start out as [hir::TyKind](rustc_hir::TyKind) and get\n /// converted to this representation using `AstConv::ast_ty_to_ty`.\n #[allow(rustc::usage_of_ty_tykind)]\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n //#[derive(TyEncodable, TyDecodable)]\n //#[derive(HashStable)]\n #[rustc_diagnostic_item = \"TyKind\"]\n@@ -186,6 +186,42 @@ pub enum TyKind<I: Interner> {\n     Error(I::DelaySpanBugEmitted),\n }\n \n+#[allow(rustc::usage_of_ty_tykind)]\n+impl<I: Interner> Clone for TyKind<I> {\n+    fn clone(&self) -> Self {\n+        use crate::TyKind::*;\n+        match self {\n+            Bool => Bool,\n+            Char => Char,\n+            Int(i) => Int(i.clone()),\n+            Uint(u) => Uint(u.clone()),\n+            Float(f) => Float(f.clone()),\n+            Adt(d, s) => Adt(d.clone(), s.clone()),\n+            Foreign(d) => Foreign(d.clone()),\n+            Str => Str,\n+            Array(t, c) => Array(t.clone(), c.clone()),\n+            Slice(t) => Slice(t.clone()),\n+            RawPtr(t) => RawPtr(t.clone()),\n+            Ref(r, t, m) => Ref(r.clone(), t.clone(), m.clone()),\n+            FnDef(d, s) => FnDef(d.clone(), s.clone()),\n+            FnPtr(s) => FnPtr(s.clone()),\n+            Dynamic(p, r) => Dynamic(p.clone(), r.clone()),\n+            Closure(d, s) => Closure(d.clone(), s.clone()),\n+            Generator(d, s, m) => Generator(d.clone(), s.clone(), m.clone()),\n+            GeneratorWitness(g) => GeneratorWitness(g.clone()),\n+            Never => Never,\n+            Tuple(t) => Tuple(t.clone()),\n+            Projection(p) => Projection(p.clone()),\n+            Opaque(d, s) => Opaque(d.clone(), s.clone()),\n+            Param(p) => Param(p.clone()),\n+            Bound(d, b) => Bound(d.clone(), b.clone()),\n+            Placeholder(p) => Placeholder(p.clone()),\n+            Infer(t) => Infer(t.clone()),\n+            Error(e) => Error(e.clone()),\n+        }\n+    }\n+}\n+\n #[allow(rustc::usage_of_ty_tykind)]\n impl<I: Interner> TyKind<I> {\n     #[inline]\n@@ -383,9 +419,7 @@ where\n                 rustc_serialize::Decodable::decode(__decoder),\n             ),\n             9 => Slice(rustc_serialize::Decodable::decode(__decoder)),\n-            10 => RawPtr(\n-                rustc_serialize::Decodable::decode(__decoder),\n-            ),\n+            10 => RawPtr(rustc_serialize::Decodable::decode(__decoder)),\n             11 => Ref(\n                 rustc_serialize::Decodable::decode(__decoder),\n                 rustc_serialize::Decodable::decode(__decoder),\n@@ -395,9 +429,7 @@ where\n                 rustc_serialize::Decodable::decode(__decoder),\n                 rustc_serialize::Decodable::decode(__decoder),\n             ),\n-            13 => FnPtr(\n-                rustc_serialize::Decodable::decode(__decoder),\n-            ),\n+            13 => FnPtr(rustc_serialize::Decodable::decode(__decoder)),\n             14 => Dynamic(\n                 rustc_serialize::Decodable::decode(__decoder),\n                 rustc_serialize::Decodable::decode(__decoder),\n@@ -411,44 +443,29 @@ where\n                 rustc_serialize::Decodable::decode(__decoder),\n                 rustc_serialize::Decodable::decode(__decoder),\n             ),\n-            17 => GeneratorWitness(\n-                rustc_serialize::Decodable::decode(__decoder),\n-            ),\n+            17 => GeneratorWitness(rustc_serialize::Decodable::decode(__decoder)),\n             18 => Never,\n-            19 => Tuple(\n-                rustc_serialize::Decodable::decode(__decoder),\n-            ),\n-            20 => Projection(\n-                rustc_serialize::Decodable::decode(__decoder),\n-            ),\n+            19 => Tuple(rustc_serialize::Decodable::decode(__decoder)),\n+            20 => Projection(rustc_serialize::Decodable::decode(__decoder)),\n             21 => Opaque(\n                 rustc_serialize::Decodable::decode(__decoder),\n                 rustc_serialize::Decodable::decode(__decoder),\n             ),\n-            22 => Param(\n-                rustc_serialize::Decodable::decode(__decoder),\n-            ),\n+            22 => Param(rustc_serialize::Decodable::decode(__decoder)),\n             23 => Bound(\n                 rustc_serialize::Decodable::decode(__decoder),\n                 rustc_serialize::Decodable::decode(__decoder),\n             ),\n-            24 => Placeholder(\n-                rustc_serialize::Decodable::decode(__decoder),\n-            ),\n-            25 => Infer(\n-                rustc_serialize::Decodable::decode(__decoder),\n-            ),\n-            26 => Error(\n-                rustc_serialize::Decodable::decode(__decoder),\n+            24 => Placeholder(rustc_serialize::Decodable::decode(__decoder)),\n+            25 => Infer(rustc_serialize::Decodable::decode(__decoder)),\n+            26 => Error(rustc_serialize::Decodable::decode(__decoder)),\n+            _ => panic!(\n+                \"{}\",\n+                format!(\n+                    \"invalid enum variant tag while decoding `{}`, expected 0..{}\",\n+                    \"TyKind\", 27,\n+                )\n             ),\n-            _ => \n-                panic!(\n-                    \"{}\",\n-                    format!(\n-                        \"invalid enum variant tag while decoding `{}`, expected 0..{}\",\n-                        \"TyKind\", 27,\n-                    )\n-                ),\n         }\n     }\n }"}, {"sha": "c08023ee6a70a50187c9c8bbf4b19f17c5d96c8b", "filename": "compiler/rustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2FCargo.toml?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -29,3 +29,4 @@ rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n rustc_lint = { path = \"../rustc_lint\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_type_ir = { path = \"../rustc_type_ir\" }"}, {"sha": "419ccb5a73aac39959d262ddc6a67b2acf913b9f", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n+use rustc_middle::ty::{self, Article, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Span};\n "}, {"sha": "75508009ad8254c9167da30d1a13f2631868c206", "filename": "compiler/rustc_typeck/src/check/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n-use rustc_middle::ty::{self, FloatTy, InferTy, IntTy, Ty, TyCtxt, TypeFoldable, UintTy};\n+use rustc_middle::ty::{self, FloatTy, InferTy, IntTy, Ty, TyCtxt, TypeFoldable, UintTy, Article};\n use rustc_session::lint;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Pointer, VariantIdx};"}, {"sha": "6df9ac5f0a430e19af6255866dd3b8108dabfd91", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a056a953f00d7b78d12dc192b34c47cca6fa7b6b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=a056a953f00d7b78d12dc192b34c47cca6fa7b6b", "patch": "@@ -10,14 +10,14 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n use rustc_middle::ty::fold::TypeFolder;\n-use rustc_middle::ty::TyKind::{Adt, Array, Char, FnDef, Never, Ref, Str, Tuple, Uint};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::error_reporting::suggestions::InferCtxtExt as _;\n use rustc_trait_selection::traits::{FulfillmentError, TraitEngine, TraitEngineExt};\n+use rustc_type_ir::sty::TyKind::*;\n \n use std::ops::ControlFlow;\n \n@@ -677,6 +677,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         operand_ty: Ty<'tcx>,\n         op: hir::UnOp,\n     ) -> Ty<'tcx> {\n+        use rustc_type_ir::sty::TyKind::*;\n+\n         assert!(op.is_by_value());\n         match self.lookup_op_method(operand_ty, None, None, Op::Unary(op, ex.span)) {\n             Ok(method) => {"}]}