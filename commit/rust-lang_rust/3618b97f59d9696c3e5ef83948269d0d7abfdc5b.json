{"sha": "3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MThiOTdmNTlkOTY5NmMzZTVlZjgzOTQ4MjY5ZDBkN2FiZmRjNWI=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-07-16T23:58:41Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-07-16T23:58:41Z"}, "message": "fix typos (found by codespell)", "tree": {"sha": "64a224409d7ac8e707a040ecf7564d7b8d9e4d50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64a224409d7ac8e707a040ecf7564d7b8d9e4d50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "html_url": "https://github.com/rust-lang/rust/commit/3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2cb565a3e80732233298c1e910883728bdd9174", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cb565a3e80732233298c1e910883728bdd9174", "html_url": "https://github.com/rust-lang/rust/commit/c2cb565a3e80732233298c1e910883728bdd9174"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "c17a0e8333058fe91497dc9d67f3c0434481fe38", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -153,7 +153,7 @@ declare_deprecated_lint! {\n     ///\n     /// **Deprecation reason:** Associated-constants are now preferred.\n     pub REPLACE_CONSTS,\n-    \"associated-constants `MIN`/`MAX` of integers are prefered to `{min,max}_value()` and module constants\"\n+    \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\"\n }\n \n declare_deprecated_lint! {"}, {"sha": "7a3f35aca0ac3fcc4947263316bd9d7abcffbcf5", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -10,7 +10,7 @@ use rustc_span::source_map::Span;\n declare_clippy_lint! {\n     /// **What it does:** Checks for explicit `deref()` or `deref_mut()` method calls.\n     ///\n-    /// **Why is this bad?** Derefencing by `&*x` or `&mut *x` is clearer and more concise,\n+    /// **Why is this bad?** Dereferencing by `&*x` or `&mut *x` is clearer and more concise,\n     /// when not part of a method chain.\n     ///\n     /// **Example:**"}, {"sha": "9fb10c7f62768583ec311d0748f68796cf0a5b32", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for MultipleInherentImpl {\n             ..\n         } = item.kind\n         {\n-            // Remember for each inherent implementation encoutered its span and generics\n+            // Remember for each inherent implementation encountered its span and generics\n             // but filter out implementations that have generic params (type or lifetime)\n             // or are derived from a macro\n             if !in_macro(item.span) && generics.params.is_empty() {"}, {"sha": "823afdfd289bd21205bc27320616bef3f1b3f8a3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -463,7 +463,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     );\n     store.register_removed(\n         \"clippy::replace_consts\",\n-        \"associated-constants `MIN`/`MAX` of integers are prefered to `{min,max}_value()` and module constants\",\n+        \"associated-constants `MIN`/`MAX` of integers are preferred to `{min,max}_value()` and module constants\",\n     );\n     store.register_removed(\n         \"clippy::regex_macro\","}, {"sha": "1ad184dfc460b8358069739807854485096311b1", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n /// Returns true if any of the method parameters is a type that implements `Drop`. The method\n /// can't be made const then, because `drop` can't be const-evaluated.\n fn method_accepts_dropable(cx: &LateContext<'_>, param_tys: &[hir::Ty<'_>]) -> bool {\n-    // If any of the params are dropable, return true\n+    // If any of the params are droppable, return true\n     param_tys.iter().any(|hir_ty| {\n         let ty_ty = hir_ty_to_ty(cx.tcx, hir_ty);\n         has_drop(cx, ty_ty)"}, {"sha": "5041af750ceea9a7287d1e6aa26326f99daa2a75", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -8,7 +8,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use std::fmt::Display;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for modulo arithemtic.\n+    /// **What it does:** Checks for modulo arithmetic.\n     ///\n     /// **Why is this bad?** The results of modulo (%) operation might differ\n     /// depending on the language, when negative numbers are involved."}, {"sha": "9922d906118dd1818f87d29a307e9cb1a82c51d9", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -78,7 +78,7 @@ fn is_result_ok(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n     }\n }\n \n-/// A struct containing information about occurences of the\n+/// A struct containing information about occurrences of the\n /// `if let Some(..) = .. else` construct that this lint detects.\n struct OptionIfLetElseOccurence {\n     option: String,"}, {"sha": "5e8800d38eb52e9ee82387d5a7071755800bea4e", "filename": "clippy_lints/src/utils/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fnumeric_literal.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -36,7 +36,7 @@ pub struct NumericLiteral<'a> {\n     pub integer: &'a str,\n     /// The fraction part of the number.\n     pub fraction: Option<&'a str>,\n-    /// The character used as exponent seperator (b'e' or b'E') and the exponent part.\n+    /// The character used as exponent separator (b'e' or b'E') and the exponent part.\n     pub exponent: Option<(char, &'a str)>,\n \n     /// The type suffix, including preceding underscore if present."}, {"sha": "27222cc0869c83cf50a37d5c66fb63ee2ff92f62", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -30,7 +30,7 @@ async fn already_async() -> impl Future<Output = i32> {\n struct S {}\n impl S {\n     async fn inh_fut() -> i32 {\n-        // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+        // NOTE: this code is here just to check that the indentation is correct in the suggested fix\n         let a = 42;\n         let b = 21;\n         if a < b {"}, {"sha": "6a0f1b26c88388e18dfe49375799e928b578b049", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -37,7 +37,7 @@ struct S {}\n impl S {\n     fn inh_fut() -> impl Future<Output = i32> {\n         async {\n-            // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+            // NOTE: this code is here just to check that the indentation is correct in the suggested fix\n             let a = 42;\n             let b = 21;\n             if a < b {"}, {"sha": "a1904c904d0f4930672ec80fc40887a33769cf2f", "filename": "tests/ui/manual_async_fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fmanual_async_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fmanual_async_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.stderr?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -57,7 +57,7 @@ LL |     async fn inh_fut() -> i32 {\n help: move the body of the async block to the enclosing function\n    |\n LL |     fn inh_fut() -> impl Future<Output = i32> {\n-LL |         // NOTE: this code is here just to check that the identation is correct in the suggested fix\n+LL |         // NOTE: this code is here just to check that the indentation is correct in the suggested fix\n LL |         let a = 42;\n LL |         let b = 21;\n LL |         if a < b {"}, {"sha": "2770eb2b2ab4389e635fd779134d5bfce061a4cd", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -166,7 +166,7 @@ pub fn test14() {\n     }\n }\n \n-// Issue #1991: the outter loop should not warn.\n+// Issue #1991: the outer loop should not warn.\n pub fn test15() {\n     'label: loop {\n         while false {"}, {"sha": "4d284ae1319d321a4d867e91f10e71ae317bacd9", "filename": "tests/ui/precedence.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fprecedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fprecedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.fixed?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let _ = -(1i32.abs());\n     let _ = -(1f32.abs());\n \n-    // Odd functions shoud not trigger an error\n+    // Odd functions should not trigger an error\n     let _ = -1f64.asin();\n     let _ = -1f64.asinh();\n     let _ = -1f64.atan();"}, {"sha": "2d08e82f349ade91eb20d8fa8adb3f040a6d2908", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let _ = -(1i32.abs());\n     let _ = -(1f32.abs());\n \n-    // Odd functions shoud not trigger an error\n+    // Odd functions should not trigger an error\n     let _ = -1f64.asin();\n     let _ = -1f64.asinh();\n     let _ = -1f64.atan();"}, {"sha": "7ed27439ec6e4432372224dd696d485024918b96", "filename": "tests/ui/vec_resize_to_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fvec_resize_to_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3618b97f59d9696c3e5ef83948269d0d7abfdc5b/tests%2Fui%2Fvec_resize_to_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec_resize_to_zero.rs?ref=3618b97f59d9696c3e5ef83948269d0d7abfdc5b", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     // not applicable\n     vec![1, 2, 3, 4, 5].resize(2, 5);\n \n-    // applicable here, but only implemented for integer litterals for now\n+    // applicable here, but only implemented for integer literals for now\n     vec![\"foo\", \"bar\", \"baz\"].resize(0, \"bar\");\n \n     // not applicable"}]}