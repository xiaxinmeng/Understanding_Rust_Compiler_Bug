{"sha": "ea3ecf22ae911b7e32b889b636bce86c165908c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhM2VjZjIyYWU5MTFiN2UzMmI4ODliNjM2YmNlODZjMTY1OTA4YzQ=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-10T04:13:08Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-10T04:13:08Z"}, "message": "miri calls resolve_for_fn_ptr when reifying.", "tree": {"sha": "32147e408f41a62df69db9f5d59370d6b4c5721f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32147e408f41a62df69db9f5d59370d6b4c5721f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3ecf22ae911b7e32b889b636bce86c165908c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3ecf22ae911b7e32b889b636bce86c165908c4", "html_url": "https://github.com/rust-lang/rust/commit/ea3ecf22ae911b7e32b889b636bce86c165908c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3ecf22ae911b7e32b889b636bce86c165908c4/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a097f26198d9979d88e7c0cd0a3bce283ff038a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a097f26198d9979d88e7c0cd0a3bce283ff038a", "html_url": "https://github.com/rust-lang/rust/commit/8a097f26198d9979d88e7c0cd0a3bce283ff038a"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "9ab347957f97ac8480ff5ac7f57f4ddbac941887", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea3ecf22ae911b7e32b889b636bce86c165908c4/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3ecf22ae911b7e32b889b636bce86c165908c4/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=ea3ecf22ae911b7e32b889b636bce86c165908c4", "patch": "@@ -44,7 +44,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         if self.tcx.has_attr(def_id, sym::rustc_args_required_const) {\n                             bug!(\"reifying a fn ptr that requires const arguments\");\n                         }\n-                        let instance = self.resolve(def_id, substs)?;\n+\n+                        let instance = ty::Instance::resolve_for_fn_ptr(\n+                            *self.tcx,\n+                            self.param_env,\n+                            def_id,\n+                            substs,\n+                        ).ok_or_else(|| err_inval!(TooGeneric))?;\n+\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));\n                         self.write_scalar(Scalar::Ptr(fn_ptr.into()), dest)?;\n                     }"}]}