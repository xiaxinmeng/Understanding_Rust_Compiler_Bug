{"sha": "171f5414705194067557cd7b70bd680308b9cced", "node_id": "C_kwDOAAsO6NoAKDE3MWY1NDE0NzA1MTk0MDY3NTU3Y2Q3YjcwYmQ2ODAzMDhiOWNjZWQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-11T08:25:49Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-11T08:25:49Z"}, "message": "don't uniquify regions when canonicalizing", "tree": {"sha": "ff8cb04c8583dc338bf968e25267f11b24376257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff8cb04c8583dc338bf968e25267f11b24376257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/171f5414705194067557cd7b70bd680308b9cced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/171f5414705194067557cd7b70bd680308b9cced", "html_url": "https://github.com/rust-lang/rust/commit/171f5414705194067557cd7b70bd680308b9cced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/171f5414705194067557cd7b70bd680308b9cced/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80ee3969fcaeb2bfb4e82808b725964d2356448", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80ee3969fcaeb2bfb4e82808b725964d2356448", "html_url": "https://github.com/rust-lang/rust/commit/b80ee3969fcaeb2bfb4e82808b725964d2356448"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "479f2529870147ffb509bc383dd6442efab1d1ef", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/171f5414705194067557cd7b70bd680308b9cced/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/171f5414705194067557cd7b70bd680308b9cced/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=171f5414705194067557cd7b70bd680308b9cced", "patch": "@@ -125,8 +125,9 @@ impl<'a, 'tcx> Canonicalizer<'a, 'tcx> {\n         // - var_infos: [E0, U1, E1, U1, E1, E6, U6], curr_compressed_uv: 1, next_orig_uv: 6\n         // - var_infos: [E0, U1, E1, U1, E1, E2, U2], curr_compressed_uv: 2, next_orig_uv: -\n         //\n-        // This algorithm runs in `O(n\u00b2)` where `n` is the number of different universe\n-        // indices in the input. This should be fine as `n` is expected to be small.\n+        // This algorithm runs in `O(nm)` where `n` is the number of different universe\n+        // indices in the input and `m` is the number of canonical variables.\n+        // This should be fine as both `n` and `m` are expected to be small.\n         let mut curr_compressed_uv = ty::UniverseIndex::ROOT;\n         let mut existential_in_new_uv = false;\n         let mut next_orig_uv = Some(ty::UniverseIndex::ROOT);\n@@ -245,18 +246,14 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n             ty::ReError(_) => return r,\n         };\n \n-        let existing_bound_var = match self.canonicalize_mode {\n-            CanonicalizeMode::Input => None,\n-            CanonicalizeMode::Response { .. } => {\n-                self.variables.iter().position(|&v| v == r.into()).map(ty::BoundVar::from)\n-            }\n-        };\n-        let var = existing_bound_var.unwrap_or_else(|| {\n-            let var = ty::BoundVar::from(self.variables.len());\n-            self.variables.push(r.into());\n-            self.primitive_var_infos.push(CanonicalVarInfo { kind });\n-            var\n-        });\n+        let var = ty::BoundVar::from(\n+            self.variables.iter().position(|&v| v == r.into()).unwrap_or_else(|| {\n+                let var = self.variables.len();\n+                self.variables.push(r.into());\n+                self.primitive_var_infos.push(CanonicalVarInfo { kind });\n+                var\n+            }),\n+        );\n         let br = ty::BoundRegion { var, kind: BrAnon(None) };\n         self.interner().mk_re_late_bound(self.binder_index, br)\n     }"}]}