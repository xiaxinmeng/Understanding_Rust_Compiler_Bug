{"sha": "f48281b6322bda4e10dbd249ae6f89280ab71b13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ODI4MWI2MzIyYmRhNGUxMGRiZDI0OWFlNmY4OTI4MGFiNzFiMTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-09T15:15:28Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-05-09T15:15:28Z"}, "message": "Split high-cyclomatic-complexity function into two", "tree": {"sha": "98c6d63f19d84c4e67bc91c4bb6eb9b1e3be25d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98c6d63f19d84c4e67bc91c4bb6eb9b1e3be25d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f48281b6322bda4e10dbd249ae6f89280ab71b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f48281b6322bda4e10dbd249ae6f89280ab71b13", "html_url": "https://github.com/rust-lang/rust/commit/f48281b6322bda4e10dbd249ae6f89280ab71b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f48281b6322bda4e10dbd249ae6f89280ab71b13/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a67774530fed63e537a3c0a39a1a9bd8b12556ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/a67774530fed63e537a3c0a39a1a9bd8b12556ed", "html_url": "https://github.com/rust-lang/rust/commit/a67774530fed63e537a3c0a39a1a9bd8b12556ed"}], "stats": {"total": 150, "additions": 77, "deletions": 73}, "files": [{"sha": "dc5c34e33ebc80690ca260fa74042b2e214ebcd1", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 77, "deletions": 73, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/f48281b6322bda4e10dbd249ae6f89280ab71b13/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48281b6322bda4e10dbd249ae6f89280ab71b13/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=f48281b6322bda4e10dbd249ae6f89280ab71b13", "patch": "@@ -4,7 +4,7 @@ use std::char;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n-use utils::{constants, span_lint, span_help_and_lint, snippet, snippet_opt, span_lint_and_then};\n+use utils::{constants, span_lint, span_help_and_lint, snippet, snippet_opt, span_lint_and_then, in_external_macro};\n \n /// **What it does:** Checks for structure field patterns bound to wildcards.\n ///\n@@ -293,78 +293,7 @@ impl EarlyLintPass for MiscEarly {\n                               \"`--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\");\n                 }\n             },\n-            ExprKind::Lit(ref lit) => {\n-                if_let_chain! {[\n-                    let LitKind::Int(value, ..) = lit.node,\n-                    let Some(src) = snippet_opt(cx, lit.span),\n-                    let Some(firstch) = src.chars().next(),\n-                    char::to_digit(firstch, 10).is_some()\n-                ], {\n-                    let mut prev = '\\0';\n-                    for ch in src.chars() {\n-                        if ch == 'i' || ch == 'u' {\n-                            if prev != '_' {\n-                                span_lint(cx, UNSEPARATED_LITERAL_SUFFIX, lit.span,\n-                                          \"integer type suffix should be separated by an underscore\");\n-                            }\n-                            break;\n-                        }\n-                        prev = ch;\n-                    }\n-                    if src.starts_with(\"0x\") {\n-                        let mut seen = (false, false);\n-                        for ch in src.chars() {\n-                            match ch {\n-                                'a' ... 'f' => seen.0 = true,\n-                                'A' ... 'F' => seen.1 = true,\n-                                'i' | 'u'   => break,   // start of suffix already\n-                                _ => ()\n-                            }\n-                        }\n-                        if seen.0 && seen.1 {\n-                            span_lint(cx, MIXED_CASE_HEX_LITERALS, lit.span,\n-                                      \"inconsistent casing in hexadecimal literal\");\n-                        }\n-                    } else if src.starts_with(\"0b\") || src.starts_with(\"0o\") {\n-                        /* nothing to do */\n-                    } else if value != 0 && src.starts_with('0') {\n-                        span_lint_and_then(cx,\n-                                           ZERO_PREFIXED_LITERAL,\n-                                           lit.span,\n-                                           \"this is a decimal constant\",\n-                                           |db| {\n-                            db.span_suggestion(\n-                                lit.span,\n-                                \"if you mean to use a decimal constant, remove the `0` to remove confusion:\",\n-                                src[1..].to_string(),\n-                            );\n-                            /*db.span_suggestion(\n-                                lit.span,\n-                                \"if you mean to use an octal constant, use `0o`:\",\n-                                format!(\"0o{}\", &src[1..]),\n-                            ); FIXME: rustc doesn't support multiple suggestions anymore */\n-                        });\n-                    }\n-                }}\n-                if_let_chain! {[\n-                    let LitKind::Float(..) = lit.node,\n-                    let Some(src) = snippet_opt(cx, lit.span),\n-                    let Some(firstch) = src.chars().next(),\n-                    char::to_digit(firstch, 10).is_some()\n-                ], {\n-                    let mut prev = '\\0';\n-                    for ch in src.chars() {\n-                        if ch == 'f' {\n-                            if prev != '_' {\n-                                span_lint(cx, UNSEPARATED_LITERAL_SUFFIX, lit.span,\n-                                          \"float type suffix should be separated by an underscore\");\n-                            }\n-                            break;\n-                        }\n-                        prev = ch;\n-                    }\n-                }}\n-            },\n+            ExprKind::Lit(ref lit) => self.check_lit(cx, lit),\n             _ => (),\n         }\n     }\n@@ -393,3 +322,78 @@ impl EarlyLintPass for MiscEarly {\n         }\n     }\n }\n+\n+impl MiscEarly {\n+    fn check_lit(&self, cx: &EarlyContext, lit: &Lit) {\n+        if_let_chain! {[\n+            let LitKind::Int(value, ..) = lit.node,\n+            let Some(src) = snippet_opt(cx, lit.span),\n+            let Some(firstch) = src.chars().next(),\n+            char::to_digit(firstch, 10).is_some()\n+        ], {\n+            let mut prev = '\\0';\n+            for ch in src.chars() {\n+                if ch == 'i' || ch == 'u' {\n+                    if prev != '_' {\n+                        span_lint(cx, UNSEPARATED_LITERAL_SUFFIX, lit.span,\n+                                    \"integer type suffix should be separated by an underscore\");\n+                    }\n+                    break;\n+                }\n+                prev = ch;\n+            }\n+            if src.starts_with(\"0x\") {\n+                let mut seen = (false, false);\n+                for ch in src.chars() {\n+                    match ch {\n+                        'a' ... 'f' => seen.0 = true,\n+                        'A' ... 'F' => seen.1 = true,\n+                        'i' | 'u'   => break,   // start of suffix already\n+                        _ => ()\n+                    }\n+                }\n+                if seen.0 && seen.1 {\n+                    span_lint(cx, MIXED_CASE_HEX_LITERALS, lit.span,\n+                                \"inconsistent casing in hexadecimal literal\");\n+                }\n+            } else if src.starts_with(\"0b\") || src.starts_with(\"0o\") {\n+                /* nothing to do */\n+            } else if value != 0 && src.starts_with('0') {\n+                span_lint_and_then(cx,\n+                                    ZERO_PREFIXED_LITERAL,\n+                                    lit.span,\n+                                    \"this is a decimal constant\",\n+                                    |db| {\n+                    db.span_suggestion(\n+                        lit.span,\n+                        \"if you mean to use a decimal constant, remove the `0` to remove confusion:\",\n+                        src[1..].to_string(),\n+                    );\n+                    /*db.span_suggestion(\n+                        lit.span,\n+                        \"if you mean to use an octal constant, use `0o`:\",\n+                        format!(\"0o{}\", &src[1..]),\n+                    ); FIXME: rustc doesn't support multiple suggestions anymore */\n+                });\n+            }\n+        }}\n+        if_let_chain! {[\n+            let LitKind::Float(..) = lit.node,\n+            let Some(src) = snippet_opt(cx, lit.span),\n+            let Some(firstch) = src.chars().next(),\n+            char::to_digit(firstch, 10).is_some()\n+        ], {\n+            let mut prev = '\\0';\n+            for ch in src.chars() {\n+                if ch == 'f' {\n+                    if prev != '_' {\n+                        span_lint(cx, UNSEPARATED_LITERAL_SUFFIX, lit.span,\n+                                    \"float type suffix should be separated by an underscore\");\n+                    }\n+                    break;\n+                }\n+                prev = ch;\n+            }\n+        }}\n+    }\n+}"}]}