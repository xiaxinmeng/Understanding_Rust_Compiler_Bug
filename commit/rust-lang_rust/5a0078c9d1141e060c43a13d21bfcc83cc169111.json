{"sha": "5a0078c9d1141e060c43a13d21bfcc83cc169111", "node_id": "C_kwDOAAsO6NoAKDVhMDA3OGM5ZDExNDFlMDYwYzQzYTEzZDIxYmZjYzgzY2MxNjkxMTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T14:57:57Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T15:50:49Z"}, "message": "more clippy fixes:\n\nclippy::search_is_some\nclippy::redundant_static_lifetimes\nclippy::match_single_binding\nclippy::match_ref_pats\nclippy::map_entry\nclippy::manual_map\nclippy::iter_overeager_cloned\nclippy::into_iter_on_ref\nclippy::extra_unused_lifetimes", "tree": {"sha": "5848b4fd824dfd5426171689adddb5fe286c663e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5848b4fd824dfd5426171689adddb5fe286c663e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a0078c9d1141e060c43a13d21bfcc83cc169111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0078c9d1141e060c43a13d21bfcc83cc169111", "html_url": "https://github.com/rust-lang/rust/commit/5a0078c9d1141e060c43a13d21bfcc83cc169111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a0078c9d1141e060c43a13d21bfcc83cc169111/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e4ea59d9b12f80953e849000194edc005f0a78", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e4ea59d9b12f80953e849000194edc005f0a78", "html_url": "https://github.com/rust-lang/rust/commit/56e4ea59d9b12f80953e849000194edc005f0a78"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "5cc474aca67810f41663343610136c0201c26527", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=5a0078c9d1141e060c43a13d21bfcc83cc169111", "patch": "@@ -241,8 +241,8 @@ pub fn eval_const(expr: &Expr, ctx: &mut ConstEvalCtx<'_>) -> Result<ComputedExp\n         Expr::Block { statements, tail, .. } => {\n             let mut prev_values = HashMap::<Name, Option<ComputedExpr>>::default();\n             for statement in &**statements {\n-                match statement {\n-                    &hir_def::expr::Statement::Let { pat, initializer, .. } => {\n+                match *statement {\n+                    hir_def::expr::Statement::Let { pat, initializer, .. } => {\n                         let pat = &ctx.pats[pat];\n                         let name = match pat {\n                             Pat::Bind { name, subpat, .. } if subpat.is_none() => name.clone(),\n@@ -261,7 +261,7 @@ pub fn eval_const(expr: &Expr, ctx: &mut ConstEvalCtx<'_>) -> Result<ComputedExp\n                             ctx.local_data.insert(name, value);\n                         }\n                     }\n-                    &hir_def::expr::Statement::Expr { .. } => {\n+                    hir_def::expr::Statement::Expr { .. } => {\n                         return Err(ConstEvalError::NotSupported(\"this kind of statement\"))\n                     }\n                 }"}, {"sha": "6564a3f4c76c24707ad7da2c719cb5449399a1b4", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=5a0078c9d1141e060c43a13d21bfcc83cc169111", "patch": "@@ -1105,7 +1105,7 @@ pub(crate) fn inherent_impl_substs(\n     // Unknown, and in that case we want the result to contain Unknown in those\n     // places again.\n     let suffix =\n-        Substitution::from_iter(Interner, substs.iter(Interner).cloned().skip(self_ty_vars));\n+        Substitution::from_iter(Interner, substs.iter(Interner).skip(self_ty_vars).cloned());\n     Some(fallback_bound_vars(suffix, self_ty_vars))\n }\n "}, {"sha": "8af0d8007d3c05b1c18f60b354213229dbcd4e5a", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=5a0078c9d1141e060c43a13d21bfcc83cc169111", "patch": "@@ -78,7 +78,7 @@ pub(super) fn ra_fixture(\n     Some(())\n }\n \n-const RUSTDOC_FENCE: &'static str = \"```\";\n+const RUSTDOC_FENCE: &str = \"```\";\n \n /// Injection of syntax highlighting of doctests.\n pub(super) fn doc_comment("}, {"sha": "38815730b180e75e178ce2d0c653e8054f662186", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=5a0078c9d1141e060c43a13d21bfcc83cc169111", "patch": "@@ -195,11 +195,11 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n                 // Remove complete impl block if it has only one child (as such it will be empty\n                 // after deleting that child)\n                 if impl_child_count == 1 {\n-                    node_to_be_removed = impl_.syntax()\n+                    node_to_be_removed = impl_.syntax();\n                 } else {\n                     //Remove selected node\n                     node_to_be_removed = &node;\n-                }\n+                };\n \n                 builder.delete(node_to_be_removed.text_range());\n                 // Remove preceding indentation from node\n@@ -418,11 +418,8 @@ impl Module {\n \n         record_field_parents.into_iter().for_each(|x| {\n             x.1.descendants().filter_map(ast::RecordField::cast).for_each(|desc| {\n-                let is_record_field_present = record_fields\n-                    .clone()\n-                    .into_iter()\n-                    .find(|x| x.to_string() == desc.to_string())\n-                    .is_some();\n+                let is_record_field_present =\n+                    record_fields.clone().into_iter().any(|x| x.to_string() == desc.to_string());\n                 if is_record_field_present {\n                     replacements.push((desc.visibility(), desc.syntax().clone()));\n                 }\n@@ -520,7 +517,7 @@ impl Module {\n         let mut exists_inside_sel = false;\n         let mut exists_outside_sel = false;\n         usage_res.clone().into_iter().for_each(|x| {\n-            let mut non_use_nodes_itr = (&x.1).into_iter().filter_map(|x| {\n+            let mut non_use_nodes_itr = (&x.1).iter().filter_map(|x| {\n                 if find_node_at_range::<ast::Use>(file.syntax(), x.range).is_none() {\n                     let path_opt = find_node_at_range::<ast::Path>(file.syntax(), x.range);\n                     return path_opt;\n@@ -531,15 +528,11 @@ impl Module {\n \n             if non_use_nodes_itr\n                 .clone()\n-                .find(|x| !selection_range.contains_range(x.syntax().text_range()))\n-                .is_some()\n+                .any(|x| !selection_range.contains_range(x.syntax().text_range()))\n             {\n                 exists_outside_sel = true;\n             }\n-            if non_use_nodes_itr\n-                .find(|x| selection_range.contains_range(x.syntax().text_range()))\n-                .is_some()\n-            {\n+            if non_use_nodes_itr.any(|x| selection_range.contains_range(x.syntax().text_range())) {\n                 exists_inside_sel = true;\n             }\n         });\n@@ -556,7 +549,7 @@ impl Module {\n             let file_id = x.0;\n             let mut use_opt: Option<ast::Use> = None;\n             if file_id == curr_file_id {\n-                (&x.1).into_iter().for_each(|x| {\n+                (&x.1).iter().for_each(|x| {\n                     let node_opt: Option<ast::Use> = find_node_at_range(file.syntax(), x.range);\n                     if let Some(node) = node_opt {\n                         use_opt = Some(node);"}, {"sha": "994d78303f2e8f97ffc85e7b20fbf84796e2973b", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=5a0078c9d1141e060c43a13d21bfcc83cc169111", "patch": "@@ -374,7 +374,7 @@ fn inline(\n             // inline direct local arguments\n             [_, ..] if expr_as_name_ref(expr).is_some() => {\n                 cov_mark::hit!(inline_call_inline_locals);\n-                usages.into_iter().for_each(|usage| inline_direct(usage, expr));\n+                usages.iter().for_each(|usage| inline_direct(usage, expr));\n             }\n             // can't inline, emit a let statement\n             _ => {"}, {"sha": "1d0f393ec17e82a229ebb533ce1d20f3e04355a5", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0078c9d1141e060c43a13d21bfcc83cc169111/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=5a0078c9d1141e060c43a13d21bfcc83cc169111", "patch": "@@ -392,10 +392,8 @@ impl AstNode for CallableExpr {\n     {\n         if let Some(it) = ast::CallExpr::cast(syntax.clone()) {\n             Some(Self::Call(it))\n-        } else if let Some(it) = ast::MethodCallExpr::cast(syntax) {\n-            Some(Self::MethodCall(it))\n         } else {\n-            None\n+            ast::MethodCallExpr::cast(syntax).map(Self::MethodCall)\n         }\n     }\n "}]}