{"sha": "1599c5a82175485bdebbb231fba1cedcac742868", "node_id": "C_kwDOAAsO6NoAKDE1OTljNWE4MjE3NTQ4NWJkZWJiYjIzMWZiYTFjZWRjYWM3NDI4Njg", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-10T17:19:45Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-07-10T17:19:45Z"}, "message": "remove a string matching about methods", "tree": {"sha": "b71401890f71884783c08c97f16293ffb16ef7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b71401890f71884783c08c97f16293ffb16ef7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1599c5a82175485bdebbb231fba1cedcac742868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1599c5a82175485bdebbb231fba1cedcac742868", "html_url": "https://github.com/rust-lang/rust/commit/1599c5a82175485bdebbb231fba1cedcac742868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1599c5a82175485bdebbb231fba1cedcac742868/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17355a3b9f30e16870a1890033bd13463c664f81", "url": "https://api.github.com/repos/rust-lang/rust/commits/17355a3b9f30e16870a1890033bd13463c664f81", "html_url": "https://github.com/rust-lang/rust/commit/17355a3b9f30e16870a1890033bd13463c664f81"}], "stats": {"total": 196, "additions": 122, "deletions": 74}, "files": [{"sha": "721fc8c568113c130cbc0f93ee7bf1387c63e013", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 50, "deletions": 43, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/1599c5a82175485bdebbb231fba1cedcac742868/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1599c5a82175485bdebbb231fba1cedcac742868/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=1599c5a82175485bdebbb231fba1cedcac742868", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_infer::traits;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, IsSuggestable, Subst, ToPredicate, Ty};\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n \n@@ -187,55 +187,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_label(self.tcx.def_span(def_id), &format!(\"{} defined here\", found));\n             }\n         } else if !self.check_for_cast(err, expr, found, expected, expected_ty_expr) {\n-            let is_struct_pat_shorthand_field =\n-                self.maybe_get_struct_pattern_shorthand_field(expr).is_some();\n+            let struct_pat_shorthand_field = self.maybe_get_struct_pattern_shorthand_field(expr);\n             let methods = self.get_conversion_methods(expr.span, expected, found, expr.hir_id);\n             if !methods.is_empty() {\n-                if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n-                    let mut suggestions = iter::zip(iter::repeat(&expr_text), &methods)\n-                        .filter_map(|(receiver, method)| {\n-                            let method_call = format!(\".{}()\", method.name);\n-                            if receiver.ends_with(&method_call) {\n-                                None // do not suggest code that is already there (#53348)\n+                let mut suggestions = iter::zip(iter::repeat(&expr), &methods)\n+                    .filter_map(|(receiver_expr, method)| {\n+                        let method_call = format!(\".{}()\", method.name);\n+                        fn method_ident(expr: &hir::Expr<'_>) -> Option<Ident> {\n+                            match expr.kind {\n+                                ExprKind::MethodCall(receiver_method, ..) => Some(receiver_method.ident),\n+                                ExprKind::Unary(_, expr) | ExprKind::AddrOf(.., expr) => method_ident(expr),\n+                                _ => None\n+                            }\n+                        }\n+                        let method_ident = method_ident(&receiver_expr);\n+                        if let Some(method_ident) = method_ident\n+                            && method_ident.name == method.name\n+                        {\n+                            None // do not suggest code that is already there (#53348)\n+                        } else {\n+                            let method_call_list = [\".to_vec()\", \".to_string()\"];\n+                            let mut sugg = if let ExprKind::MethodCall(receiver_method, ..) = receiver_expr.kind\n+                                && receiver_method.ident.name == sym::clone\n+                                && method_call_list.contains(&method_call.as_str())\n+                            {\n+                                vec![(\n+                                    receiver_method.ident.span,\n+                                    method.name.to_string()\n+                                )]\n                             } else {\n-                                let method_call_list = [\".to_vec()\", \".to_string()\"];\n-                                let mut sugg = if receiver.ends_with(\".clone()\")\n-                                    && method_call_list.contains(&method_call.as_str())\n+                                if expr.precedence().order()\n+                                    < ExprPrecedence::MethodCall.order()\n                                 {\n-                                    let max_len = receiver.rfind('.').unwrap();\n-                                    vec![(\n-                                        expr.span,\n-                                        format!(\"{}{}\", &receiver[..max_len], method_call),\n-                                    )]\n+                                    vec![\n+                                        (expr.span.shrink_to_lo(), \"(\".to_string()),\n+                                        (expr.span.shrink_to_hi(), format!(\"){}\", method_call)),\n+                                    ]\n                                 } else {\n-                                    if expr.precedence().order()\n-                                        < ExprPrecedence::MethodCall.order()\n-                                    {\n-                                        vec![\n-                                            (expr.span.shrink_to_lo(), \"(\".to_string()),\n-                                            (expr.span.shrink_to_hi(), format!(\"){}\", method_call)),\n-                                        ]\n-                                    } else {\n-                                        vec![(expr.span.shrink_to_hi(), method_call)]\n-                                    }\n-                                };\n-                                if is_struct_pat_shorthand_field {\n-                                    sugg.insert(\n-                                        0,\n-                                        (expr.span.shrink_to_lo(), format!(\"{}: \", receiver)),\n-                                    );\n+                                    vec![(expr.span.shrink_to_hi(), method_call)]\n                                 }\n-                                Some(sugg)\n+                            };\n+                            if let Some(name) = struct_pat_shorthand_field {\n+                                sugg.insert(\n+                                    0,\n+                                    (expr.span.shrink_to_lo(), format!(\"{}: \", name)),\n+                                );\n                             }\n-                        })\n-                        .peekable();\n-                    if suggestions.peek().is_some() {\n-                        err.multipart_suggestions(\n-                            \"try using a conversion method\",\n-                            suggestions,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n+                            Some(sugg)\n+                        }\n+                    })\n+                    .peekable();\n+                if suggestions.peek().is_some() {\n+                    err.multipart_suggestions(\n+                        \"try using a conversion method\",\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n                 }\n             } else if let ty::Adt(found_adt, found_substs) = found.kind()\n                 && self.tcx.is_diagnostic_item(sym::Option, found_adt.did())"}, {"sha": "514690de4d045054fb3cc953b0de983fbb4944c4", "filename": "src/test/ui/suggestions/issue-52820.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.fixed?ref=1599c5a82175485bdebbb231fba1cedcac742868", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+struct Bravery {\n+    guts: String,\n+    brains: String,\n+}\n+\n+fn main() {\n+    let guts = \"mettle\";\n+    let _ = Bravery {\n+        guts: guts.to_string(), //~ ERROR mismatched types\n+        brains: guts.to_string(), //~ ERROR mismatched types\n+    };\n+}"}, {"sha": "17cd9224c57ec38fdda3342aa01154f9fcf9ce28", "filename": "src/test/ui/suggestions/issue-52820.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.rs?ref=1599c5a82175485bdebbb231fba1cedcac742868", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+\n struct Bravery {\n     guts: String,\n     brains: String,"}, {"sha": "09269ed4eee9983d6b2b605ac796e8162b712635", "filename": "src/test/ui/suggestions/issue-52820.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-52820.stderr?ref=1599c5a82175485bdebbb231fba1cedcac742868", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-52820.rs:9:9\n+  --> $DIR/issue-52820.rs:12:9\n    |\n LL |         guts,\n    |         ^^^^ expected struct `String`, found `&str`\n@@ -10,13 +10,13 @@ LL |         guts: guts.to_string(),\n    |         +++++     ++++++++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-52820.rs:10:17\n+  --> $DIR/issue-52820.rs:13:17\n    |\n LL |         brains: guts.clone(),\n-   |                 ^^^^^^^^^^^^\n-   |                 |\n+   |                 ^^^^^-----^^\n+   |                 |    |\n+   |                 |    help: try using a conversion method: `to_string`\n    |                 expected struct `String`, found `&str`\n-   |                 help: try using a conversion method: `guts.to_string()`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "35a677b4761867cb22b1ffafc2537b55097c0c0b", "filename": "src/test/ui/suggestions/issue-53692.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-53692.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-53692.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-53692.fixed?ref=1599c5a82175485bdebbb231fba1cedcac742868", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+fn main() {\n+    let items = vec![1, 2, 3];\n+    let ref_items: &[i32] = &items;\n+    let items_clone: Vec<i32> = ref_items.to_vec();\n+    //~^ ERROR mismatched types\n+\n+    // in that case no suggestion will be triggered\n+    let items_clone_2: Vec<i32> = items.clone();\n+\n+    let s = \"hi\";\n+    let string: String = s.to_string();\n+    //~^ ERROR mismatched types\n+\n+    // in that case no suggestion will be triggered\n+    let s2 = \"hi\";\n+    let string_2: String = s2.to_string();\n+}"}, {"sha": "6f6707be5f651c920d0cef778ac2c62fdefe242c", "filename": "src/test/ui/suggestions/issue-53692.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-53692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-53692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-53692.rs?ref=1599c5a82175485bdebbb231fba1cedcac742868", "patch": "@@ -1,17 +1,20 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n fn main() {\n-        let items = vec![1, 2, 3];\n-        let ref_items: &[i32] = &items;\n-        let items_clone: Vec<i32> = ref_items.clone();\n-//~^ ERROR mismatched types\n+    let items = vec![1, 2, 3];\n+    let ref_items: &[i32] = &items;\n+    let items_clone: Vec<i32> = ref_items.clone();\n+    //~^ ERROR mismatched types\n \n-        // in that case no suggestion will be triggered\n-        let items_clone_2:Vec<i32> = items.clone();\n+    // in that case no suggestion will be triggered\n+    let items_clone_2: Vec<i32> = items.clone();\n \n-        let s = \"hi\";\n-        let string: String = s.clone();\n-//~^ ERROR mismatched types\n+    let s = \"hi\";\n+    let string: String = s.clone();\n+    //~^ ERROR mismatched types\n \n-        // in that case no suggestion will be triggered\n-        let s2 = \"hi\";\n-        let string_2: String = s2.to_string();\n+    // in that case no suggestion will be triggered\n+    let s2 = \"hi\";\n+    let string_2: String = s2.to_string();\n }"}, {"sha": "3a1b624f402f0db5ecc0576c329134de91c8419b", "filename": "src/test/ui/suggestions/issue-53692.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-53692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1599c5a82175485bdebbb231fba1cedcac742868/src%2Ftest%2Fui%2Fsuggestions%2Fissue-53692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-53692.stderr?ref=1599c5a82175485bdebbb231fba1cedcac742868", "patch": "@@ -1,25 +1,25 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-53692.rs:4:37\n+  --> $DIR/issue-53692.rs:7:33\n    |\n-LL |         let items_clone: Vec<i32> = ref_items.clone();\n-   |                          --------   ^^^^^^^^^^^^^^^^^\n-   |                          |          |\n-   |                          |          expected struct `Vec`, found `&[i32]`\n-   |                          |          help: try using a conversion method: `ref_items.to_vec()`\n-   |                          expected due to this\n+LL |     let items_clone: Vec<i32> = ref_items.clone();\n+   |                      --------   ^^^^^^^^^^-----^^\n+   |                      |          |         |\n+   |                      |          |         help: try using a conversion method: `to_vec`\n+   |                      |          expected struct `Vec`, found `&[i32]`\n+   |                      expected due to this\n    |\n    = note: expected struct `Vec<i32>`\n            found reference `&[i32]`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-53692.rs:11:30\n+  --> $DIR/issue-53692.rs:14:26\n    |\n-LL |         let string: String = s.clone();\n-   |                     ------   ^^^^^^^^^\n-   |                     |        |\n-   |                     |        expected struct `String`, found `&str`\n-   |                     |        help: try using a conversion method: `s.to_string()`\n-   |                     expected due to this\n+LL |     let string: String = s.clone();\n+   |                 ------   ^^-----^^\n+   |                 |        | |\n+   |                 |        | help: try using a conversion method: `to_string`\n+   |                 |        expected struct `String`, found `&str`\n+   |                 expected due to this\n \n error: aborting due to 2 previous errors\n "}]}