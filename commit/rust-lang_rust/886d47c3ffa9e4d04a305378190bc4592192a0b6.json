{"sha": "886d47c3ffa9e4d04a305378190bc4592192a0b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NmQ0N2MzZmZhOWU0ZDA0YTMwNTM3ODE5MGJjNDU5MjE5MmEwYjY=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-10-14T19:07:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-14T19:07:08Z"}, "message": "Rollup merge of #37123 - srinivasreddy:libcore_num, r=erickt\n\nrun rustfmt on libcore/num folder", "tree": {"sha": "f7d1f77b15d1a25a484f556cdbffa921f57e5bf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7d1f77b15d1a25a484f556cdbffa921f57e5bf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/886d47c3ffa9e4d04a305378190bc4592192a0b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/886d47c3ffa9e4d04a305378190bc4592192a0b6", "html_url": "https://github.com/rust-lang/rust/commit/886d47c3ffa9e4d04a305378190bc4592192a0b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/886d47c3ffa9e4d04a305378190bc4592192a0b6/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a9dcf4025ac54b26b30a827eccd423de5ba229", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a9dcf4025ac54b26b30a827eccd423de5ba229", "html_url": "https://github.com/rust-lang/rust/commit/72a9dcf4025ac54b26b30a827eccd423de5ba229"}, {"sha": "5457c35ece57bbc4a65baff239a02d6abb81c8a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5457c35ece57bbc4a65baff239a02d6abb81c8a2", "html_url": "https://github.com/rust-lang/rust/commit/5457c35ece57bbc4a65baff239a02d6abb81c8a2"}], "stats": {"total": 166, "additions": 112, "deletions": 54}, "files": [{"sha": "a1f4630c304bf93dff849a7d479910658e085a43", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=886d47c3ffa9e4d04a305378190bc4592192a0b6", "patch": "@@ -34,19 +34,22 @@ use intrinsics;\n pub trait FullOps: Sized {\n     /// Returns `(carry', v')` such that `carry' * 2^W + v' = self + other + carry`,\n     /// where `W` is the number of bits in `Self`.\n-    fn full_add(self, other: Self, carry: bool) -> (bool /*carry*/, Self);\n+    fn full_add(self, other: Self, carry: bool) -> (bool /* carry */, Self);\n \n     /// Returns `(carry', v')` such that `carry' * 2^W + v' = self * other + carry`,\n     /// where `W` is the number of bits in `Self`.\n-    fn full_mul(self, other: Self, carry: Self) -> (Self /*carry*/, Self);\n+    fn full_mul(self, other: Self, carry: Self) -> (Self /* carry */, Self);\n \n     /// Returns `(carry', v')` such that `carry' * 2^W + v' = self * other + other2 + carry`,\n     /// where `W` is the number of bits in `Self`.\n-    fn full_mul_add(self, other: Self, other2: Self, carry: Self) -> (Self /*carry*/, Self);\n+    fn full_mul_add(self, other: Self, other2: Self, carry: Self) -> (Self /* carry */, Self);\n \n     /// Returns `(quo, rem)` such that `borrow * 2^W + self = quo * other + rem`\n     /// and `0 <= rem < other`, where `W` is the number of bits in `Self`.\n-    fn full_div_rem(self, other: Self, borrow: Self) -> (Self /*quotient*/, Self /*remainder*/);\n+    fn full_div_rem(self,\n+                    other: Self,\n+                    borrow: Self)\n+                    -> (Self /* quotient */, Self /* remainder */);\n }\n \n macro_rules! impl_full_ops {\n@@ -100,11 +103,7 @@ impl_full_ops! {\n \n /// Table of powers of 5 representable in digits. Specifically, the largest {u8, u16, u32} value\n /// that's a power of five, plus the corresponding exponent. Used in `mul_pow5`.\n-const SMALL_POW5: [(u64, usize); 3] = [\n-    (125, 3),\n-    (15625, 6),\n-    (1_220_703_125, 13),\n-];\n+const SMALL_POW5: [(u64, usize); 3] = [(125, 3), (15625, 6), (1_220_703_125, 13)];\n \n macro_rules! define_bignum {\n     ($name:ident: type=$ty:ty, n=$n:expr) => ("}, {"sha": "11eea753f93f912a579dd607cddae2e39f61eb24", "filename": "src/libcore/num/diy_float.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Fdiy_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Fdiy_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdiy_float.rs?ref=886d47c3ffa9e4d04a305378190bc4592192a0b6", "patch": "@@ -49,12 +49,30 @@ impl Fp {\n     pub fn normalize(&self) -> Fp {\n         let mut f = self.f;\n         let mut e = self.e;\n-        if f >> (64 - 32) == 0 { f <<= 32; e -= 32; }\n-        if f >> (64 - 16) == 0 { f <<= 16; e -= 16; }\n-        if f >> (64 -  8) == 0 { f <<=  8; e -=  8; }\n-        if f >> (64 -  4) == 0 { f <<=  4; e -=  4; }\n-        if f >> (64 -  2) == 0 { f <<=  2; e -=  2; }\n-        if f >> (64 -  1) == 0 { f <<=  1; e -=  1; }\n+        if f >> (64 - 32) == 0 {\n+            f <<= 32;\n+            e -= 32;\n+        }\n+        if f >> (64 - 16) == 0 {\n+            f <<= 16;\n+            e -= 16;\n+        }\n+        if f >> (64 - 8) == 0 {\n+            f <<= 8;\n+            e -= 8;\n+        }\n+        if f >> (64 - 4) == 0 {\n+            f <<= 4;\n+            e -= 4;\n+        }\n+        if f >> (64 - 2) == 0 {\n+            f <<= 2;\n+            e -= 2;\n+        }\n+        if f >> (64 - 1) == 0 {\n+            f <<= 1;\n+            e -= 1;\n+        }\n         debug_assert!(f >= (1 >> 63));\n         Fp { f: f, e: e }\n     }\n@@ -66,6 +84,9 @@ impl Fp {\n         assert!(edelta >= 0);\n         let edelta = edelta as usize;\n         assert_eq!(self.f << edelta >> edelta, self.f);\n-        Fp { f: self.f << edelta, e: e }\n+        Fp {\n+            f: self.f << edelta,\n+            e: e,\n+        }\n     }\n }"}, {"sha": "4527d46a27d8a9590f6e64ebdf0376ae561996d6", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=886d47c3ffa9e4d04a305378190bc4592192a0b6", "patch": "@@ -61,13 +61,13 @@ pub const MAX_10_EXP: i32 = 38;\n \n /// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NAN: f32 = 0.0_f32/0.0_f32;\n+pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n /// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const INFINITY: f32 = 1.0_f32/0.0_f32;\n+pub const INFINITY: f32 = 1.0_f32 / 0.0_f32;\n /// Negative infinity (-\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n+pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -144,26 +144,40 @@ pub mod consts {\n            issue = \"32110\")]\n impl Float for f32 {\n     #[inline]\n-    fn nan() -> f32 { NAN }\n+    fn nan() -> f32 {\n+        NAN\n+    }\n \n     #[inline]\n-    fn infinity() -> f32 { INFINITY }\n+    fn infinity() -> f32 {\n+        INFINITY\n+    }\n \n     #[inline]\n-    fn neg_infinity() -> f32 { NEG_INFINITY }\n+    fn neg_infinity() -> f32 {\n+        NEG_INFINITY\n+    }\n \n     #[inline]\n-    fn zero() -> f32 { 0.0 }\n+    fn zero() -> f32 {\n+        0.0\n+    }\n \n     #[inline]\n-    fn neg_zero() -> f32 { -0.0 }\n+    fn neg_zero() -> f32 {\n+        -0.0\n+    }\n \n     #[inline]\n-    fn one() -> f32 { 1.0 }\n+    fn one() -> f32 {\n+        1.0\n+    }\n \n     /// Returns `true` if the number is NaN.\n     #[inline]\n-    fn is_nan(self) -> bool { self != self }\n+    fn is_nan(self) -> bool {\n+        self != self\n+    }\n \n     /// Returns `true` if the number is infinite.\n     #[inline]\n@@ -192,11 +206,11 @@ impl Float for f32 {\n \n         let bits: u32 = unsafe { mem::transmute(self) };\n         match (bits & MAN_MASK, bits & EXP_MASK) {\n-            (0, 0)        => Fp::Zero,\n-            (_, 0)        => Fp::Subnormal,\n+            (0, 0) => Fp::Zero,\n+            (_, 0) => Fp::Subnormal,\n             (0, EXP_MASK) => Fp::Infinite,\n             (_, EXP_MASK) => Fp::Nan,\n-            _             => Fp::Normal,\n+            _ => Fp::Normal,\n         }\n     }\n \n@@ -252,7 +266,9 @@ impl Float for f32 {\n \n     /// Returns the reciprocal (multiplicative inverse) of the number.\n     #[inline]\n-    fn recip(self) -> f32 { 1.0 / self }\n+    fn recip(self) -> f32 {\n+        1.0 / self\n+    }\n \n     #[inline]\n     fn powi(self, n: i32) -> f32 {\n@@ -261,7 +277,9 @@ impl Float for f32 {\n \n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n-    fn to_degrees(self) -> f32 { self * (180.0f32 / consts::PI) }\n+    fn to_degrees(self) -> f32 {\n+        self * (180.0f32 / consts::PI)\n+    }\n \n     /// Converts to radians, assuming the number is in degrees.\n     #[inline]"}, {"sha": "991a856834948687cf00c59d5879149733af6bc6", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=886d47c3ffa9e4d04a305378190bc4592192a0b6", "patch": "@@ -61,13 +61,13 @@ pub const MAX_10_EXP: i32 = 308;\n \n /// Not a Number (NaN).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NAN: f64 = 0.0_f64/0.0_f64;\n+pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n /// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const INFINITY: f64 = 1.0_f64/0.0_f64;\n+pub const INFINITY: f64 = 1.0_f64 / 0.0_f64;\n /// Negative infinity (-\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n+pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n \n /// Basic mathematical constants.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -144,26 +144,40 @@ pub mod consts {\n            issue = \"32110\")]\n impl Float for f64 {\n     #[inline]\n-    fn nan() -> f64 { NAN }\n+    fn nan() -> f64 {\n+        NAN\n+    }\n \n     #[inline]\n-    fn infinity() -> f64 { INFINITY }\n+    fn infinity() -> f64 {\n+        INFINITY\n+    }\n \n     #[inline]\n-    fn neg_infinity() -> f64 { NEG_INFINITY }\n+    fn neg_infinity() -> f64 {\n+        NEG_INFINITY\n+    }\n \n     #[inline]\n-    fn zero() -> f64 { 0.0 }\n+    fn zero() -> f64 {\n+        0.0\n+    }\n \n     #[inline]\n-    fn neg_zero() -> f64 { -0.0 }\n+    fn neg_zero() -> f64 {\n+        -0.0\n+    }\n \n     #[inline]\n-    fn one() -> f64 { 1.0 }\n+    fn one() -> f64 {\n+        1.0\n+    }\n \n     /// Returns `true` if the number is NaN.\n     #[inline]\n-    fn is_nan(self) -> bool { self != self }\n+    fn is_nan(self) -> bool {\n+        self != self\n+    }\n \n     /// Returns `true` if the number is infinite.\n     #[inline]\n@@ -192,11 +206,11 @@ impl Float for f64 {\n \n         let bits: u64 = unsafe { mem::transmute(self) };\n         match (bits & MAN_MASK, bits & EXP_MASK) {\n-            (0, 0)        => Fp::Zero,\n-            (_, 0)        => Fp::Subnormal,\n+            (0, 0) => Fp::Zero,\n+            (_, 0) => Fp::Subnormal,\n             (0, EXP_MASK) => Fp::Infinite,\n             (_, EXP_MASK) => Fp::Nan,\n-            _             => Fp::Normal,\n+            _ => Fp::Normal,\n         }\n     }\n \n@@ -252,7 +266,9 @@ impl Float for f64 {\n \n     /// Returns the reciprocal (multiplicative inverse) of the number.\n     #[inline]\n-    fn recip(self) -> f64 { 1.0 / self }\n+    fn recip(self) -> f64 {\n+        1.0 / self\n+    }\n \n     #[inline]\n     fn powi(self, n: i32) -> f64 {\n@@ -261,7 +277,9 @@ impl Float for f64 {\n \n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n-    fn to_degrees(self) -> f64 { self * (180.0f64 / consts::PI) }\n+    fn to_degrees(self) -> f64 {\n+        self * (180.0f64 / consts::PI)\n+    }\n \n     /// Converts to radians, assuming the number is in degrees.\n     #[inline]"}, {"sha": "a4529909e83ef61ddbd82d2fb5586ca317c98308", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=886d47c3ffa9e4d04a305378190bc4592192a0b6", "patch": "@@ -43,7 +43,8 @@ use str::FromStr;\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]\n-pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);\n+pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+                       pub T);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for Wrapping<T> {\n@@ -2402,7 +2403,7 @@ pub enum FpCategory {\n \n     /// Positive or negative infinity.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    Infinite ,\n+    Infinite,\n \n     /// Positive or negative zero.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2662,8 +2663,7 @@ macro_rules! doit {\n }\n doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n \n-fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n-                                         -> Result<T, ParseIntError> {\n+fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n     use self::IntErrorKind::*;\n     use self::ParseIntError as PIE;\n \n@@ -2686,7 +2686,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n     let (is_positive, digits) = match src[0] {\n         b'+' => (true, &src[1..]),\n         b'-' if is_signed_ty => (false, &src[1..]),\n-        _ => (true, src)\n+        _ => (true, src),\n     };\n \n     if digits.is_empty() {\n@@ -2738,7 +2738,9 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n /// [`i8::from_str_radix()`]: ../../std/primitive.i8.html#method.from_str_radix\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct ParseIntError { kind: IntErrorKind }\n+pub struct ParseIntError {\n+    kind: IntErrorKind,\n+}\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n enum IntErrorKind {"}, {"sha": "d35c451ac2604471de90bf2426d18d528fde1486", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886d47c3ffa9e4d04a305378190bc4592192a0b6/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=886d47c3ffa9e4d04a305378190bc4592192a0b6", "patch": "@@ -310,13 +310,13 @@ mod shift_max {\n         pub const isize: u32 = super::i64;\n     }\n \n-    pub const  i8: u32 = (1 << 3) - 1;\n+    pub const i8: u32 = (1 << 3) - 1;\n     pub const i16: u32 = (1 << 4) - 1;\n     pub const i32: u32 = (1 << 5) - 1;\n     pub const i64: u32 = (1 << 6) - 1;\n     pub use self::platform::isize;\n \n-    pub const  u8: u32 = i8;\n+    pub const u8: u32 = i8;\n     pub const u16: u32 = i16;\n     pub const u32: u32 = i32;\n     pub const u64: u32 = i64;"}]}