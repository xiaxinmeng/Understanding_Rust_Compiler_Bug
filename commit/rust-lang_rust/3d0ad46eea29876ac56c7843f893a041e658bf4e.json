{"sha": "3d0ad46eea29876ac56c7843f893a041e658bf4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMGFkNDZlZWEyOTg3NmFjNTZjNzg0M2Y4OTNhMDQxZTY1OGJmNGU=", "commit": {"author": {"name": "Nicholas", "email": "npmazzuca@gmail.com", "date": "2015-04-26T17:26:56Z"}, "committer": {"name": "Nicholas", "email": "npmazzuca@gmail.com", "date": "2015-04-26T17:26:56Z"}, "message": "Fix the inline assembly examples\n\nThey now use the currently working syntax.", "tree": {"sha": "e6f89499c87d300d98794f5c7eb25df26bcf5b2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f89499c87d300d98794f5c7eb25df26bcf5b2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d0ad46eea29876ac56c7843f893a041e658bf4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0ad46eea29876ac56c7843f893a041e658bf4e", "html_url": "https://github.com/rust-lang/rust/commit/3d0ad46eea29876ac56c7843f893a041e658bf4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d0ad46eea29876ac56c7843f893a041e658bf4e/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314b1f16b7d359be42ef38d96523b33ad1480380", "url": "https://api.github.com/repos/rust-lang/rust/commits/314b1f16b7d359be42ef38d96523b33ad1480380", "html_url": "https://github.com/rust-lang/rust/commit/314b1f16b7d359be42ef38d96523b33ad1480380"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "ab360de62f521a2786f16a0864d1e58cb810828c", "filename": "src/doc/trpl/inline-assembly.md", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3d0ad46eea29876ac56c7843f893a041e658bf4e/src%2Fdoc%2Ftrpl%2Finline-assembly.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d0ad46eea29876ac56c7843f893a041e658bf4e/src%2Fdoc%2Ftrpl%2Finline-assembly.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Finline-assembly.md?ref=3d0ad46eea29876ac56c7843f893a041e658bf4e", "patch": "@@ -58,7 +58,7 @@ but you must add the right number of `:` if you skip them:\n asm!(\"xor %eax, %eax\"\n     :\n     :\n-    : \"eax\"\n+    : \"{eax}\"\n    );\n # } }\n ```\n@@ -69,7 +69,7 @@ Whitespace also doesn't matter:\n # #![feature(asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n-asm!(\"xor %eax, %eax\" ::: \"eax\");\n+asm!(\"xor %eax, %eax\" ::: \"{eax}\");\n # } }\n ```\n \n@@ -83,7 +83,7 @@ expressions must be mutable lvalues:\n # #![feature(asm)]\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn add(a: i32, b: i32) -> i32 {\n-    let mut c = 0;\n+    let c: i32;\n     unsafe {\n         asm!(\"add $2, $0\"\n              : \"=r\"(c)\n@@ -100,6 +100,21 @@ fn main() {\n }\n ```\n \n+If you would like to use real operands in this position, however,\n+you are required to put curly braces `{}` around the register that\n+you want, and you are required to put the specific size of the\n+operand. This is useful for very low level programming, where \n+which register you use is important:\n+\n+```\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+# unsafe fn read_byte_in(port: u16) -> u8 {\n+let result: u8;\n+asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(port));\n+result\n+# }\n+```\n+\n ## Clobbers\n \n Some instructions modify registers which might otherwise have held\n@@ -112,7 +127,7 @@ stay valid.\n # #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n # fn main() { unsafe {\n // Put the value 0x200 in eax\n-asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"eax\");\n+asm!(\"mov $$0x200, %eax\" : /* no outputs */ : /* no inputs */ : \"{eax}\");\n # } }\n ```\n \n@@ -139,3 +154,14 @@ Current valid options are:\n    the compiler to insert its usual stack alignment code\n 3. *intel* - use intel syntax instead of the default AT&T.\n \n+```\n+# #![feature(asm)]\n+# #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+# fn main() {\n+let result: i32;\n+unsafe {\n+   asm!(\"mov eax, 2\" : \"={eax}\"(result) : : : \"intel\")\n+}\n+println!(\"eax is currently {}\", result);\n+# } }\n+```"}]}