{"sha": "018fa8545359b8580a89a1cdf79ed186c997ed41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOGZhODU0NTM1OWI4NTgwYTg5YTFjZGY3OWVkMTg2Yzk5N2VkNDE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-16T01:31:20Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-16T02:05:10Z"}, "message": "Reformat code to new struct lit style", "tree": {"sha": "29f968472efc911f1c940d7d9235c401996ee538", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29f968472efc911f1c940d7d9235c401996ee538"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/018fa8545359b8580a89a1cdf79ed186c997ed41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/018fa8545359b8580a89a1cdf79ed186c997ed41", "html_url": "https://github.com/rust-lang/rust/commit/018fa8545359b8580a89a1cdf79ed186c997ed41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/018fa8545359b8580a89a1cdf79ed186c997ed41/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7518f688613a58bc2a070f2eb2e66364dfea7fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7518f688613a58bc2a070f2eb2e66364dfea7fe5", "html_url": "https://github.com/rust-lang/rust/commit/7518f688613a58bc2a070f2eb2e66364dfea7fe5"}], "stats": {"total": 196, "additions": 112, "deletions": 84}, "files": [{"sha": "ab5968dbf76883b098c747beda4672c8c00bfb7b", "filename": "src/changes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=018fa8545359b8580a89a1cdf79ed186c997ed41", "patch": "@@ -35,9 +35,11 @@ pub struct ChangeSet<'a> {\n impl<'a> ChangeSet<'a> {\n     // Create a new ChangeSet for a given libsyntax CodeMap.\n     pub fn from_codemap(codemap: &'a CodeMap) -> ChangeSet<'a> {\n-        let mut result = ChangeSet { file_map: HashMap::new(),\n-                                     codemap: codemap,\n-                                     file_spans: Vec::with_capacity(codemap.files.borrow().len()), };\n+        let mut result = ChangeSet {\n+            file_map: HashMap::new(),\n+            codemap: codemap,\n+            file_spans: Vec::with_capacity(codemap.files.borrow().len()),\n+        };\n \n         for f in codemap.files.borrow().iter() {\n             // Use the length of the file as a heuristic for how much space we"}, {"sha": "7e4119880c30518afef876ec213a228719cd8aad", "filename": "src/comment.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=018fa8545359b8580a89a1cdf79ed186c997ed41", "patch": "@@ -24,13 +24,15 @@ pub fn rewrite_comment(orig: &str, block_style: bool, width: usize, offset: usiz\n     let max_chars = width.checked_sub(closer.len()).unwrap_or(1)\n                          .checked_sub(opener.len()).unwrap_or(1);\n \n-    let fmt = StringFormat { opener: \"\",\n-                             closer: \"\",\n-                             line_start: line_start,\n-                             line_end: \"\",\n-                             width: max_chars,\n-                             offset: offset + opener.len() - line_start.len(),\n-                             trim_end: true, };\n+    let fmt = StringFormat {\n+        opener: \"\",\n+        closer: \"\",\n+        line_start: line_start,\n+        line_end: \"\",\n+        width: max_chars,\n+        offset: offset + opener.len() - line_start.len(),\n+        trim_end: true,\n+    };\n \n     let indent_str = make_indent(offset);\n     let line_breaks = s.chars().filter(|&c| c == '\\n').count();"}, {"sha": "e6390a0879384daad571f0c7733335959ee10be5", "filename": "src/expr.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=018fa8545359b8580a89a1cdf79ed186c997ed41", "patch": "@@ -101,13 +101,15 @@ fn rewrite_string_lit(context: &RewriteContext,\n     if l_loc.line == r_loc.line && r_loc.col.to_usize() <= context.config.max_width {\n         return context.codemap.span_to_snippet(span).ok();\n     }\n-    let fmt = StringFormat { opener: \"\\\"\",\n-                             closer: \"\\\"\",\n-                             line_start: \" \",\n-                             line_end: \"\\\\\",\n-                             width: width,\n-                             offset: offset,\n-                             trim_end: false, };\n+    let fmt = StringFormat {\n+        opener: \"\\\"\",\n+        closer: \"\\\"\",\n+        line_start: \" \",\n+        line_end: \"\\\\\",\n+        width: width,\n+        offset: offset,\n+        trim_end: false,\n+    };\n \n     Some(rewrite_string(&s.escape_default(), &fmt))\n }\n@@ -147,13 +149,15 @@ fn rewrite_call(context: &RewriteContext,\n                              callee.span.hi + BytePos(1),\n                              span.hi);\n \n-    let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                               separator: \",\",\n-                               trailing_separator: SeparatorTactic::Never,\n-                               indent: offset,\n-                               h_width: remaining_width,\n-                               v_width: remaining_width,\n-                               ends_with_newline: true, };\n+    let fmt = ListFormatting {\n+        tactic: ListTactic::HorizontalVertical,\n+        separator: \",\",\n+        trailing_separator: SeparatorTactic::Never,\n+        indent: offset,\n+        h_width: remaining_width,\n+        v_width: remaining_width,\n+        ends_with_newline: true,\n+    };\n \n     Some(format!(\"{}({})\", callee_str, write_list(&items, &fmt)))\n }\n@@ -239,17 +243,19 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                              span_after(span, \"{\", context.codemap),\n                              span.hi);\n \n-    let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                               separator: \",\",\n-                               trailing_separator: if base.is_some() {\n+    let fmt = ListFormatting {\n+        tactic: ListTactic::HorizontalVertical,\n+        separator: \",\",\n+        trailing_separator: if base.is_some() {\n             SeparatorTactic::Never\n         } else {\n             context.config.struct_lit_trailing_comma\n         },\n-                               indent: indent,\n-                               h_width: budget,\n-                               v_width: budget,\n-                               ends_with_newline: true, };\n+        indent: indent,\n+        h_width: budget,\n+        v_width: budget,\n+        ends_with_newline: true,\n+    };\n     let fields_str = write_list(&items, &fmt);\n \n     match context.config.struct_lit_style {\n@@ -305,13 +311,15 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n                              span.lo + BytePos(1), // Remove parens\n                              span.hi - BytePos(1));\n \n-    let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                               separator: \",\",\n-                               trailing_separator: SeparatorTactic::Never,\n-                               indent: indent,\n-                               h_width: width - 2,\n-                               v_width: width - 2,\n-                               ends_with_newline: true, };\n+    let fmt = ListFormatting {\n+        tactic: ListTactic::HorizontalVertical,\n+        separator: \",\",\n+        trailing_separator: SeparatorTactic::Never,\n+        indent: indent,\n+        h_width: width - 2,\n+        v_width: width - 2,\n+        ends_with_newline: true,\n+    };\n \n     Some(format!(\"({})\", write_list(&items, &fmt)))\n }"}, {"sha": "45a8e94dee587d0b9273842e305f262a77a56151", "filename": "src/imports.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=018fa8545359b8580a89a1cdf79ed186c997ed41", "patch": "@@ -71,13 +71,15 @@ impl<'a> FmtVisitor<'a> {\n         let remaining_line_budget = one_line_budget.checked_sub(used_width).unwrap_or(0);\n         let remaining_multi_budget = multi_line_budget.checked_sub(used_width).unwrap_or(0);\n \n-        let fmt = ListFormatting { tactic: ListTactic::Mixed,\n-                                   separator: \",\",\n-                                   trailing_separator: SeparatorTactic::Never,\n-                                   indent: block_indent + indent,\n-                                   h_width: remaining_line_budget,\n-                                   v_width: remaining_multi_budget,\n-                                   ends_with_newline: true, };\n+        let fmt = ListFormatting {\n+            tactic: ListTactic::Mixed,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: block_indent + indent,\n+            h_width: remaining_line_budget,\n+            v_width: remaining_multi_budget,\n+            ends_with_newline: true,\n+        };\n \n         let mut items = itemize_list(self.codemap,\n                                      vec![ListItem::from_str(\"\")], /* Dummy value, explanation"}, {"sha": "31f544605b590a77e0ebf6457003d8e629a1d258", "filename": "src/issues.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=018fa8545359b8580a89a1cdf79ed186c997ed41", "patch": "@@ -96,9 +96,11 @@ pub struct BadIssueSeeker {\n \n impl BadIssueSeeker {\n     pub fn new(report_todo: ReportTactic, report_fixme: ReportTactic) -> BadIssueSeeker {\n-        BadIssueSeeker { state: Seeking::Issue { todo_idx: 0, fixme_idx: 0 },\n-                         report_todo: report_todo,\n-                         report_fixme: report_fixme, }\n+        BadIssueSeeker {\n+            state: Seeking::Issue { todo_idx: 0, fixme_idx: 0 },\n+            report_todo: report_todo,\n+            report_fixme: report_fixme,\n+        }\n     }\n \n     // Check whether or not the current char is conclusive evidence for an"}, {"sha": "42a0d609dd07c5268a8bb8dc6e9443c987ea7a1f", "filename": "src/items.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=018fa8545359b8580a89a1cdf79ed186c997ed41", "patch": "@@ -305,13 +305,15 @@ impl<'a> FmtVisitor<'a> {\n             item.item = arg;\n         }\n \n-        let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                                   separator: \",\",\n-                                   trailing_separator: SeparatorTactic::Never,\n-                                   indent: arg_indent,\n-                                   h_width: one_line_budget,\n-                                   v_width: multi_line_budget,\n-                                   ends_with_newline: true, };\n+        let fmt = ListFormatting {\n+            tactic: ListTactic::HorizontalVertical,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: arg_indent,\n+            h_width: one_line_budget,\n+            v_width: multi_line_budget,\n+            ends_with_newline: true,\n+        };\n \n         write_list(&arg_items, &fmt)\n     }\n@@ -566,13 +568,15 @@ impl<'a> FmtVisitor<'a> {\n \n         // 1 = ,\n         let budget = self.config.ideal_width - offset + self.config.tab_spaces - 1;\n-        let fmt = ListFormatting { tactic: tactic,\n-                                   separator: \",\",\n-                                   trailing_separator: self.config.struct_trailing_comma,\n-                                   indent: offset + self.config.tab_spaces,\n-                                   h_width: self.config.max_width,\n-                                   v_width: budget,\n-                                   ends_with_newline: false, };\n+        let fmt = ListFormatting {\n+            tactic: tactic,\n+            separator: \",\",\n+            trailing_separator: self.config.struct_trailing_comma,\n+            indent: offset + self.config.tab_spaces,\n+            h_width: self.config.max_width,\n+            v_width: budget,\n+            ends_with_newline: false,\n+        };\n \n         result.push_str(&write_list(&items, &fmt));\n \n@@ -707,13 +711,15 @@ impl<'a> FmtVisitor<'a> {\n             item.item = ty;\n         }\n \n-        let fmt = ListFormatting { tactic: ListTactic::HorizontalVertical,\n-                                   separator: \",\",\n-                                   trailing_separator: SeparatorTactic::Never,\n-                                   indent: offset + 1,\n-                                   h_width: budget,\n-                                   v_width: budget,\n-                                   ends_with_newline: true, };\n+        let fmt = ListFormatting {\n+            tactic: ListTactic::HorizontalVertical,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: offset + 1,\n+            h_width: budget,\n+            v_width: budget,\n+            ends_with_newline: true,\n+        };\n         result.push_str(&write_list(&items, &fmt));\n \n         result.push('>');\n@@ -748,13 +754,15 @@ impl<'a> FmtVisitor<'a> {\n                                  span_end);\n \n         let budget = self.config.ideal_width + self.config.leeway - indent - 10;\n-        let fmt = ListFormatting { tactic: ListTactic::Vertical,\n-                                   separator: \",\",\n-                                   trailing_separator: SeparatorTactic::Never,\n-                                   indent: indent + 10,\n-                                   h_width: budget,\n-                                   v_width: budget,\n-                                   ends_with_newline: true, };\n+        let fmt = ListFormatting {\n+            tactic: ListTactic::Vertical,\n+            separator: \",\",\n+            trailing_separator: SeparatorTactic::Never,\n+            indent: indent + 10,\n+            h_width: budget,\n+            v_width: budget,\n+            ends_with_newline: true,\n+        };\n         result.push_str(&write_list(&items, &fmt));\n \n         result"}, {"sha": "53446d6e11923def615b01c23a551fce3729d98b", "filename": "src/visitor.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018fa8545359b8580a89a1cdf79ed186c997ed41/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=018fa8545359b8580a89a1cdf79ed186c997ed41", "patch": "@@ -38,9 +38,11 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                self.codemap.lookup_char_pos(ex.span.hi));\n         self.format_missing(ex.span.lo);\n         let offset = self.changes.cur_offset_span(ex.span);\n-        let context = RewriteContext { codemap: self.codemap,\n-                                       config: self.config,\n-                                       block_indent: self.block_indent, };\n+        let context = RewriteContext {\n+            codemap: self.codemap,\n+            config: self.config,\n+            block_indent: self.block_indent,\n+        };\n         let rewrite = ex.rewrite(&context, self.config.max_width - offset, offset);\n \n         if let Some(new_str) = rewrite {\n@@ -284,11 +286,13 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n impl<'a> FmtVisitor<'a> {\n     pub fn from_codemap<'b>(codemap: &'b CodeMap, config: &'b Config) -> FmtVisitor<'b> {\n-        FmtVisitor { codemap: codemap,\n-                     changes: ChangeSet::from_codemap(codemap),\n-                     last_pos: BytePos(0),\n-                     block_indent: 0,\n-                     config: config, }\n+        FmtVisitor {\n+            codemap: codemap,\n+            changes: ChangeSet::from_codemap(codemap),\n+            last_pos: BytePos(0),\n+            block_indent: 0,\n+            config: config,\n+        }\n     }\n \n     pub fn snippet(&self, span: Span) -> String {"}]}