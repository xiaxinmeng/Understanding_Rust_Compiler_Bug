{"sha": "6e89fb6f736f28fdc090c30946871b2d8ea70cca", "node_id": "C_kwDOAAsO6NoAKDZlODlmYjZmNzM2ZjI4ZmRjMDkwYzMwOTQ2ODcxYjJkOGVhNzBjY2E", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T05:42:46Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T05:42:46Z"}, "message": ":broom:", "tree": {"sha": "33154afad669e306c3521f0c020dd65896b4f0c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33154afad669e306c3521f0c020dd65896b4f0c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e89fb6f736f28fdc090c30946871b2d8ea70cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e89fb6f736f28fdc090c30946871b2d8ea70cca", "html_url": "https://github.com/rust-lang/rust/commit/6e89fb6f736f28fdc090c30946871b2d8ea70cca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e89fb6f736f28fdc090c30946871b2d8ea70cca/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf9969546dd32dbb5713e3fa6e01f6247b77d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf9969546dd32dbb5713e3fa6e01f6247b77d25", "html_url": "https://github.com/rust-lang/rust/commit/6cf9969546dd32dbb5713e3fa6e01f6247b77d25"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "5fcb9416c8b1c57f020a5d04032e95e49f5030c3", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6e89fb6f736f28fdc090c30946871b2d8ea70cca/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e89fb6f736f28fdc090c30946871b2d8ea70cca/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=6e89fb6f736f28fdc090c30946871b2d8ea70cca", "patch": "@@ -436,17 +436,17 @@ fn source_file_to_file_symbols(_source_file: &SourceFile, _file_id: FileId) -> V\n     // todo: delete this.\n     vec![]\n }\n-enum SymbolCollectorWorkItem {\n+enum SymbolCollectorWork {\n     Module { module_id: ModuleId, parent: Option<DefWithBodyId> },\n-    Body { body: DefWithBodyId },\n+    Body { body_id: DefWithBodyId },\n     Impl { impl_id: ImplId },\n     Trait { trait_id: TraitId },\n }\n \n struct SymbolCollector<'a> {\n     db: &'a dyn SymbolsDatabase,\n     symbols: Vec<FileSymbol>,\n-    work: Vec<SymbolCollectorWorkItem>,\n+    work: Vec<SymbolCollectorWork>,\n     container_name_stack: Vec<SmolStr>,\n }\n \n@@ -458,30 +458,30 @@ impl<'a> SymbolCollector<'a> {\n             db,\n             symbols: Default::default(),\n             container_name_stack: Default::default(),\n-            work: vec![SymbolCollectorWorkItem::Module { module_id, parent: None }],\n+            work: vec![SymbolCollectorWork::Module { module_id, parent: None }],\n         };\n \n-        while let Some(work_item) = symbol_collector.work.pop() {\n-            symbol_collector.do_work(work_item);\n+        while let Some(work) = symbol_collector.work.pop() {\n+            symbol_collector.do_work(work);\n         }\n \n         symbol_collector.symbols\n     }\n \n-    fn do_work(&mut self, work_item: SymbolCollectorWorkItem) {\n+    fn do_work(&mut self, work: SymbolCollectorWork) {\n         self.db.unwind_if_cancelled();\n \n-        match work_item {\n-            SymbolCollectorWorkItem::Module { module_id, parent } => {\n+        match work {\n+            SymbolCollectorWork::Module { module_id, parent } => {\n                 let parent_name = parent.and_then(|id| self.def_with_body_id_name(id));\n                 self.with_container_name(parent_name, |s| s.collect_from_module(module_id));\n             }\n-            SymbolCollectorWorkItem::Body { body } => self.collect_from_body(body),\n-            SymbolCollectorWorkItem::Impl { impl_id } => self.collect_from_impl(impl_id),\n-            SymbolCollectorWorkItem::Trait { trait_id } => {\n+            SymbolCollectorWork::Trait { trait_id } => {\n                 let trait_name = self.db.trait_data(trait_id).name.as_text();\n                 self.with_container_name(trait_name, |s| s.collect_from_trait(trait_id));\n             }\n+            SymbolCollectorWork::Body { body_id } => self.collect_from_body(body_id),\n+            SymbolCollectorWork::Impl { impl_id } => self.collect_from_impl(impl_id),\n         }\n     }\n \n@@ -495,7 +495,7 @@ impl<'a> SymbolCollector<'a> {\n                 ModuleDefId::ModuleId(id) => self.push_module(id),\n                 ModuleDefId::FunctionId(id) => {\n                     self.push_decl_assoc(id, FileSymbolKind::Function);\n-                    self.work.push(SymbolCollectorWorkItem::Body { body: id.into() });\n+                    self.work.push(SymbolCollectorWork::Body { body_id: id.into() });\n                 }\n                 ModuleDefId::AdtId(AdtId::StructId(id)) => {\n                     self.push_decl(id, FileSymbolKind::Struct)\n@@ -504,15 +504,15 @@ impl<'a> SymbolCollector<'a> {\n                 ModuleDefId::AdtId(AdtId::UnionId(id)) => self.push_decl(id, FileSymbolKind::Union),\n                 ModuleDefId::ConstId(id) => {\n                     self.push_decl_assoc(id, FileSymbolKind::Const);\n-                    self.work.push(SymbolCollectorWorkItem::Body { body: id.into() })\n+                    self.work.push(SymbolCollectorWork::Body { body_id: id.into() })\n                 }\n                 ModuleDefId::StaticId(id) => {\n                     self.push_decl(id, FileSymbolKind::Static);\n-                    self.work.push(SymbolCollectorWorkItem::Body { body: id.into() })\n+                    self.work.push(SymbolCollectorWork::Body { body_id: id.into() })\n                 }\n                 ModuleDefId::TraitId(id) => {\n                     self.push_decl(id, FileSymbolKind::Trait);\n-                    self.work.push(SymbolCollectorWorkItem::Trait { trait_id: id })\n+                    self.work.push(SymbolCollectorWork::Trait { trait_id: id })\n                 }\n                 ModuleDefId::TypeAliasId(id) => {\n                     self.push_decl_assoc(id, FileSymbolKind::TypeAlias);\n@@ -524,11 +524,11 @@ impl<'a> SymbolCollector<'a> {\n         }\n \n         for impl_id in scope.impls() {\n-            self.work.push(SymbolCollectorWorkItem::Impl { impl_id });\n+            self.work.push(SymbolCollectorWork::Impl { impl_id });\n         }\n \n         for const_id in scope.unnamed_consts() {\n-            self.work.push(SymbolCollectorWorkItem::Body { body: const_id.into() })\n+            self.work.push(SymbolCollectorWork::Body { body_id: const_id.into() })\n         }\n \n         for macro_def_id in scope.macro_declarations() {\n@@ -542,7 +542,7 @@ impl<'a> SymbolCollector<'a> {\n         // Descend into the blocks and enqueue collection of all modules within.\n         for (_, def_map) in body.blocks(self.db.upcast()) {\n             for (id, _) in def_map.modules() {\n-                self.work.push(SymbolCollectorWorkItem::Module {\n+                self.work.push(SymbolCollectorWork::Module {\n                     module_id: def_map.module_id(id),\n                     parent: Some(body_id),\n                 });"}]}