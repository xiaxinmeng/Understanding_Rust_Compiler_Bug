{"sha": "e678435cab9cc8ddd668d4cb58ab82194c220382", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2Nzg0MzVjYWI5Y2M4ZGRkNjY4ZDRjYjU4YWI4MjE5NGMyMjAzODI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T06:39:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-10-09T11:22:44Z"}, "message": "std::rand: Minor clean-up of comments & add a missing default method.", "tree": {"sha": "2255fb00fe6bb785dc20066c97333d5771e25e00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2255fb00fe6bb785dc20066c97333d5771e25e00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e678435cab9cc8ddd668d4cb58ab82194c220382", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e678435cab9cc8ddd668d4cb58ab82194c220382", "html_url": "https://github.com/rust-lang/rust/commit/e678435cab9cc8ddd668d4cb58ab82194c220382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e678435cab9cc8ddd668d4cb58ab82194c220382/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5442a473624f9d463a21508a5dbdd5a5ec326c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/5442a473624f9d463a21508a5dbdd5a5ec326c15", "html_url": "https://github.com/rust-lang/rust/commit/5442a473624f9d463a21508a5dbdd5a5ec326c15"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "9b757092266bf3e58c9d037d9c5c7f4595303246", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e678435cab9cc8ddd668d4cb58ab82194c220382/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e678435cab9cc8ddd668d4cb58ab82194c220382/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=e678435cab9cc8ddd668d4cb58ab82194c220382", "patch": "@@ -648,8 +648,6 @@ impl SeedableRng<[u32, .. 4]> for XorShiftRng {\n impl XorShiftRng {\n     /// Create an xor shift random number generator with a random seed.\n     pub fn new() -> XorShiftRng {\n-        // generate seeds the same way as seed(), except we have a\n-        // specific size, so we can just use a fixed buffer.\n         let mut s = [0u8, ..16];\n         loop {\n             let mut r = OSRng::new();\n@@ -714,6 +712,11 @@ impl<R: Rng> Rng for @mut R {\n     fn next_u64(&mut self) -> u64 {\n         (**self).next_u64()\n     }\n+\n+    #[inline]\n+    fn fill_bytes(&mut self, bytes: &mut [u8]) {\n+        (**self).fill_bytes(bytes);\n+    }\n }\n \n /// Generate a random value using the task-local random number"}, {"sha": "ee43ced44ab255e82ed6424946b8d92a6ba26f05", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e678435cab9cc8ddd668d4cb58ab82194c220382/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e678435cab9cc8ddd668d4cb58ab82194c220382/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=e678435cab9cc8ddd668d4cb58ab82194c220382", "patch": "@@ -863,7 +863,6 @@ fn new_sched_rng() -> XorShiftRng {\n     use iter::Iterator;\n     use rand::SeedableRng;\n \n-    // XXX: this could use io::native::file, when it works.\n     let fd = do \"/dev/urandom\".with_c_str |name| {\n         unsafe { libc::open(name, libc::O_RDONLY, 0) }\n     };"}]}