{"sha": "664912fbf83718508156fc09d2a0ff2448de175a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NDkxMmZiZjgzNzE4NTA4MTU2ZmMwOWQyYTBmZjI0NDhkZTE3NWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-18T20:49:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-18T20:49:31Z"}, "message": "Merge #9332\n\n9332: minor: use minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8cac1ee23ff3232ccc30eb174da908cecf34df8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cac1ee23ff3232ccc30eb174da908cecf34df8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664912fbf83718508156fc09d2a0ff2448de175a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgzQbbCRBK7hj4Ov3rIwAAC6AIAB8vUGhBCQQCyjyvDswgadXS\nplXjEYYa+E6aNdjQaravQxvqOdRAreRyyFiOT7UCdy7NVvipOxiJ6lg6c9xn+N83\nZfXQAvu7dcIDD9yeBH07/A72/7TYe4jmwusYDBOj8XxGvGKWmxIf7/fM0eNHOhfQ\nz6QHNtp8oZSyTBydq+W3k6/kl9JZnF+nogWuGS44iESC+T9z4HY9lMZCoOrY1XXf\n4RP5jeXAMNCLgRUdS3RRobbwaRxWvyRa0Kds3E39KOIFhGt3wCmwZHqEPSs7VWk2\nDH7rOGFdrvs2wrjTnahE1zHe4YvYgHQYlqjDD4blqThQAieQXyV44ItYsCB1fy4=\n=yiF0\n-----END PGP SIGNATURE-----\n", "payload": "tree 8cac1ee23ff3232ccc30eb174da908cecf34df8f\nparent 71490ed84b7fbfabecdf44b25d48ff8aafc4c601\nparent 90da9fc9b302de46097065f0d6428ad33c292217\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624049371 +0000\ncommitter GitHub <noreply@github.com> 1624049371 +0000\n\nMerge #9332\n\n9332: minor: use minicore r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664912fbf83718508156fc09d2a0ff2448de175a", "html_url": "https://github.com/rust-lang/rust/commit/664912fbf83718508156fc09d2a0ff2448de175a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664912fbf83718508156fc09d2a0ff2448de175a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "url": "https://api.github.com/repos/rust-lang/rust/commits/71490ed84b7fbfabecdf44b25d48ff8aafc4c601", "html_url": "https://github.com/rust-lang/rust/commit/71490ed84b7fbfabecdf44b25d48ff8aafc4c601"}, {"sha": "90da9fc9b302de46097065f0d6428ad33c292217", "url": "https://api.github.com/repos/rust-lang/rust/commits/90da9fc9b302de46097065f0d6428ad33c292217", "html_url": "https://github.com/rust-lang/rust/commit/90da9fc9b302de46097065f0d6428ad33c292217"}], "stats": {"total": 366, "additions": 109, "deletions": 257}, "files": [{"sha": "95f9edce4cff36b97a9d91ec2168b72c5bc4e43c", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=664912fbf83718508156fc09d2a0ff2448de175a", "patch": "@@ -661,9 +661,7 @@ fn main() {\n     fn function_call_parameter_hint() {\n         check_params(\n             r#\"\n-enum Option<T> { None, Some(T) }\n-use Option::*;\n-\n+//- minicore: option\n struct FileId {}\n struct SmolStr {}\n \n@@ -872,7 +870,6 @@ fn main() {\n         check_types(\n             r#\"\n //- minicore: fn, sized\n-\n fn foo() -> impl Fn() { loop {} }\n fn foo1() -> impl Fn(f64) { loop {} }\n fn foo2() -> impl Fn(f64, f64) { loop {} }\n@@ -908,9 +905,7 @@ fn main() {\n     fn unit_structs_have_no_type_hints() {\n         check_types(\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n+//- minicore: result\n struct SyntheticSyntax;\n \n fn main() {\n@@ -962,9 +957,7 @@ fn main() {\n     fn if_expr() {\n         check_types(\n             r#\"\n-enum Option<T> { None, Some(T) }\n-use Option::*;\n-\n+//- minicore: option\n struct Test { a: Option<u32>, b: u8 }\n \n fn main() {\n@@ -994,9 +987,7 @@ fn main() {\n     fn while_expr() {\n         check_types(\n             r#\"\n-enum Option<T> { None, Some(T) }\n-use Option::*;\n-\n+//- minicore: option\n struct Test { a: Option<u32>, b: u8 }\n \n fn main() {\n@@ -1012,9 +1003,7 @@ fn main() {\n     fn match_arm_list() {\n         check_types(\n             r#\"\n-enum Option<T> { None, Some(T) }\n-use Option::*;\n-\n+//- minicore: option\n struct Test { a: Option<u32>, b: u8 }\n \n fn main() {"}, {"sha": "318faa0fca6f7b2bef350690f6411e5ad8afbdaf", "filename": "crates/ide_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=664912fbf83718508156fc09d2a0ff2448de175a", "patch": "@@ -481,26 +481,21 @@ fn main() {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n+//- minicore: option\n fn main() {\n     match None$0 {\n         None => {}\n     }\n }\n-            \"#,\n+\"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n fn main() {\n     match None {\n         None => {}\n         Some(${0:_}) => todo!(),\n     }\n }\n-            \"#,\n+\"#,\n         );\n     }\n "}, {"sha": "f37aa0d53c6a95d6718b88cefa734da11de89a73", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 18, "deletions": 48, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=664912fbf83718508156fc09d2a0ff2448de175a", "patch": "@@ -262,28 +262,23 @@ impl VariantData {\n         check_assist(\n             replace_if_let_with_match,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n+//- minicore: option\n fn foo(x: Option<i32>) {\n     $0if let Some(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n fn foo(x: Option<i32>) {\n     match x {\n         Some(x) => println!(\"{}\", x),\n         None => println!(\"none\"),\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -292,28 +287,23 @@ fn foo(x: Option<i32>) {\n         check_assist(\n             replace_if_let_with_match,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n+//- minicore: option\n fn foo(x: Option<i32>) {\n     $0if let None = x {\n         println!(\"none\")\n     } else {\n         println!(\"some\")\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n fn foo(x: Option<i32>) {\n     match x {\n         None => println!(\"none\"),\n         Some(_) => println!(\"some\"),\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -322,28 +312,23 @@ fn foo(x: Option<i32>) {\n         check_assist(\n             replace_if_let_with_match,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n+//- minicore: result\n fn foo(x: Result<i32, ()>) {\n     $0if let Ok(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n fn foo(x: Result<i32, ()>) {\n     match x {\n         Ok(x) => println!(\"{}\", x),\n         Err(_) => println!(\"none\"),\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -352,28 +337,23 @@ fn foo(x: Result<i32, ()>) {\n         check_assist(\n             replace_if_let_with_match,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n+//- minicore: result\n fn foo(x: Result<i32, ()>) {\n     $0if let Err(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"ok\")\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n fn foo(x: Result<i32, ()>) {\n     match x {\n         Err(x) => println!(\"{}\", x),\n         Ok(_) => println!(\"ok\"),\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -488,28 +468,23 @@ impl VariantData {\n         check_assist(\n             replace_match_with_if_let,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n+//- minicore: option\n fn foo(x: Option<i32>) {\n     $0match x {\n         Some(x) => println!(\"{}\", x),\n         None => println!(\"none\"),\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-\n fn foo(x: Option<i32>) {\n     if let Some(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n \n@@ -518,28 +493,23 @@ fn foo(x: Option<i32>) {\n         check_assist(\n             replace_match_with_if_let,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n+//- minicore: result\n fn foo(x: Result<i32, ()>) {\n     $0match x {\n         Ok(x) => println!(\"{}\", x),\n         Err(_) => println!(\"none\"),\n     }\n }\n-           \"#,\n+\"#,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n-\n fn foo(x: Result<i32, ()>) {\n     if let Ok(x) = x {\n         println!(\"{}\", x)\n     } else {\n         println!(\"none\")\n     }\n }\n-           \"#,\n+\"#,\n         );\n     }\n "}, {"sha": "7e57353c646629ee378e587597cff4aae245171a", "filename": "crates/ide_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=664912fbf83718508156fc09d2a0ff2448de175a", "patch": "@@ -97,92 +97,89 @@ mod tests {\n     fn test_replace_result_unwrap_with_match() {\n         check_assist(\n             replace_unwrap_with_match,\n-            r\"\n-enum Result<T, E> { Ok(T), Err(E) }\n+            r#\"\n+//- minicore: result\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = i(x).$0unwrap();\n }\n-            \",\n-            r\"\n-enum Result<T, E> { Ok(T), Err(E) }\n+\"#,\n+            r#\"\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = match i(x) {\n         Ok(it) => it,\n         $0_ => unreachable!(),\n     };\n }\n-            \",\n+\"#,\n         )\n     }\n \n     #[test]\n     fn test_replace_option_unwrap_with_match() {\n         check_assist(\n             replace_unwrap_with_match,\n-            r\"\n-enum Option<T> { Some(T), None }\n+            r#\"\n+//- minicore: option\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x = Option::Some(92);\n+    let x = Some(92);\n     let y = i(x).$0unwrap();\n }\n-            \",\n-            r\"\n-enum Option<T> { Some(T), None }\n+\"#,\n+            r#\"\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x = Option::Some(92);\n+    let x = Some(92);\n     let y = match i(x) {\n         Some(it) => it,\n         $0_ => unreachable!(),\n     };\n }\n-            \",\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_replace_result_unwrap_with_match_chaining() {\n         check_assist(\n             replace_unwrap_with_match,\n-            r\"\n-enum Result<T, E> { Ok(T), Err(E) }\n+            r#\"\n+//- minicore: result\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = i(x).$0unwrap().count_zeroes();\n }\n-            \",\n-            r\"\n-enum Result<T, E> { Ok(T), Err(E) }\n+\"#,\n+            r#\"\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x: Result<i32, i32> = Result::Ok(92);\n+    let x: Result<i32, i32> = Ok(92);\n     let y = match i(x) {\n         Ok(it) => it,\n         $0_ => unreachable!(),\n     }.count_zeroes();\n }\n-            \",\n+\"#,\n         )\n     }\n \n     #[test]\n     fn replace_unwrap_with_match_target() {\n         check_assist_target(\n             replace_unwrap_with_match,\n-            r\"\n-enum Option<T> { Some(T), None }\n+            r#\"\n+//- minicore: option\n fn i<T>(a: T) -> T { a }\n fn main() {\n-    let x = Option::Some(92);\n+    let x = Some(92);\n     let y = i(x).$0unwrap();\n }\n-            \",\n+\"#,\n             r\"i(x).unwrap()\",\n         );\n     }"}, {"sha": "4e20ec003f43876b04d2f301af2ebd26d15ef8d6", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=664912fbf83718508156fc09d2a0ff2448de175a", "patch": "@@ -436,18 +436,15 @@ fn main() {\n         check_edit(\n             \"ifl\",\n             r#\"\n-enum Option<T> { Some(T), None }\n-\n+//- minicore: option\n fn main() {\n-    let bar = Option::Some(true);\n+    let bar = Some(true);\n     bar.$0\n }\n \"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-\n fn main() {\n-    let bar = Option::Some(true);\n+    let bar = Some(true);\n     if let Some($1) = bar {\n     $0\n }\n@@ -461,18 +458,15 @@ fn main() {\n         check_edit(\n             \"match\",\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-\n+//- minicore: result\n fn main() {\n-    let bar = Result::Ok(true);\n+    let bar = Ok(true);\n     bar.$0\n }\n \"#,\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-\n fn main() {\n-    let bar = Result::Ok(true);\n+    let bar = Ok(true);\n     match bar {\n     Ok(${1:_}) => {$2},\n     Err(${3:_}) => {$0},\n@@ -515,18 +509,15 @@ fn main() {\n         check_edit(\n             \"ifl\",\n             r#\"\n-enum Option<T> { Some(T), None }\n-\n+//- minicore: option\n fn main() {\n-    let bar = &Option::Some(true);\n+    let bar = &Some(true);\n     bar.$0\n }\n \"#,\n             r#\"\n-enum Option<T> { Some(T), None }\n-\n fn main() {\n-    let bar = &Option::Some(true);\n+    let bar = &Some(true);\n     if let Some($1) = bar {\n     $0\n }"}, {"sha": "c0edcd7d39ec48af325a2e9d9a5da5178e3fbbe9", "filename": "crates/ide_diagnostics/src/handlers/missing_ok_or_some_in_tail_expr.rs", "status": "modified", "additions": 6, "deletions": 70, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmissing_ok_or_some_in_tail_expr.rs?ref=664912fbf83718508156fc09d2a0ff2448de175a", "patch": "@@ -49,26 +49,15 @@ mod tests {\n     fn test_wrap_return_type_option() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::option::Option::{self, Some, None};\n-\n+//- minicore: option, result\n fn div(x: i32, y: i32) -> Option<i32> {\n     if y == 0 {\n         return None;\n     }\n     x / y$0\n }\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n             r#\"\n-use core::option::Option::{self, Some, None};\n-\n fn div(x: i32, y: i32) -> Option<i32> {\n     if y == 0 {\n         return None;\n@@ -83,26 +72,15 @@ fn div(x: i32, y: i32) -> Option<i32> {\n     fn test_wrap_return_type() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n fn div(x: i32, y: i32) -> Result<i32, ()> {\n     if y == 0 {\n         return Err(());\n     }\n     x / y$0\n }\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n             r#\"\n-use core::result::Result::{self, Ok, Err};\n-\n fn div(x: i32, y: i32) -> Result<i32, ()> {\n     if y == 0 {\n         return Err(());\n@@ -117,26 +95,15 @@ fn div(x: i32, y: i32) -> Result<i32, ()> {\n     fn test_wrap_return_type_handles_generic_functions() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n fn div<T>(x: T) -> Result<T, i32> {\n     if x == 0 {\n         return Err(7);\n     }\n     $0x\n }\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n             r#\"\n-use core::result::Result::{self, Ok, Err};\n-\n fn div<T>(x: T) -> Result<T, i32> {\n     if x == 0 {\n         return Err(7);\n@@ -151,9 +118,7 @@ fn div<T>(x: T) -> Result<T, i32> {\n     fn test_wrap_return_type_handles_type_aliases() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n type MyResult<T> = Result<T, ()>;\n \n fn div(x: i32, y: i32) -> MyResult<i32> {\n@@ -162,17 +127,8 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     }\n     x $0/ y\n }\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n             r#\"\n-use core::result::Result::{self, Ok, Err};\n-\n type MyResult<T> = Result<T, ()>;\n \n fn div(x: i32, y: i32) -> MyResult<i32> {\n@@ -189,18 +145,8 @@ fn div(x: i32, y: i32) -> MyResult<i32> {\n     fn test_wrap_return_type_not_applicable_when_expr_type_does_not_match_ok_type() {\n         check_diagnostics(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n fn foo() -> Result<(), i32> { 0 }\n-\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n         );\n     }\n@@ -209,20 +155,10 @@ pub mod option {\n     fn test_wrap_return_type_not_applicable_when_return_type_is_not_result_or_option() {\n         check_diagnostics(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::result::Result::{self, Ok, Err};\n-\n+//- minicore: option, result\n enum SomeOtherEnum { Ok(i32), Err(String) }\n \n fn foo() -> SomeOtherEnum { 0 }\n-\n-//- /core/lib.rs crate:core\n-pub mod result {\n-    pub enum Result<T, E> { Ok(T), Err(E) }\n-}\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n \"#,\n         );\n     }"}, {"sha": "839ceac03e0eeb0e7e079730261e8cd9419261bb", "filename": "crates/ide_diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs", "status": "modified", "additions": 19, "deletions": 67, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs?ref=664912fbf83718508156fc09d2a0ff2448de175a", "patch": "@@ -55,44 +55,16 @@ fn fixes(\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::check_fix;\n-\n-    // Register the required standard library types to make the tests work\n-    #[track_caller]\n-    fn check_diagnostics(ra_fixture: &str) {\n-        let prefix = r#\"\n-//- /main.rs crate:main deps:core\n-use core::iter::Iterator;\n-use core::option::Option::{self, Some, None};\n-\"#;\n-        let suffix = r#\"\n-//- /core/lib.rs crate:core\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n-pub mod iter {\n-    pub trait Iterator {\n-        type Item;\n-        fn filter_map<B, F>(self, f: F) -> FilterMap where F: FnMut(Self::Item) -> Option<B> { FilterMap }\n-        fn next(&mut self) -> Option<Self::Item>;\n-    }\n-    pub struct FilterMap {}\n-    impl Iterator for FilterMap {\n-        type Item = i32;\n-        fn next(&mut self) -> i32 { 7 }\n-    }\n-}\n-\"#;\n-        crate::tests::check_diagnostics(&format!(\"{}{}{}\", prefix, ra_fixture, suffix))\n-    }\n+    use crate::tests::{check_diagnostics, check_fix};\n \n     #[test]\n     fn replace_filter_map_next_with_find_map2() {\n         check_diagnostics(\n             r#\"\n-    fn foo() {\n-        let m = [1, 2, 3].iter().filter_map(|x| Some(92)).next();\n-    }         //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: replace filter_map(..).next() with find_map(..)\n+//- minicore: iterators\n+fn foo() {\n+    let m = core::iter::repeat(()).filter_map(|()| Some(92)).next();\n+}         //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: replace filter_map(..).next() with find_map(..)\n \"#,\n         );\n     }\n@@ -101,11 +73,11 @@ pub mod iter {\n     fn replace_filter_map_next_with_find_map_no_diagnostic_without_next() {\n         check_diagnostics(\n             r#\"\n+//- minicore: iterators\n fn foo() {\n-    let m = [1, 2, 3]\n-        .iter()\n-        .filter_map(|x| Some(92))\n-        .len();\n+    let m = core::iter::repeat(())\n+        .filter_map(|()| Some(92))\n+        .count();\n }\n \"#,\n         );\n@@ -115,12 +87,12 @@ fn foo() {\n     fn replace_filter_map_next_with_find_map_no_diagnostic_with_intervening_methods() {\n         check_diagnostics(\n             r#\"\n+//- minicore: iterators\n fn foo() {\n-    let m = [1, 2, 3]\n-        .iter()\n-        .filter_map(|x| Some(92))\n+    let m = core::iter::repeat(())\n+        .filter_map(|()| Some(92))\n         .map(|x| x + 2)\n-        .len();\n+        .next();\n }\n \"#,\n         );\n@@ -130,10 +102,10 @@ fn foo() {\n     fn replace_filter_map_next_with_find_map_no_diagnostic_if_not_in_chain() {\n         check_diagnostics(\n             r#\"\n+//- minicore: iterators\n fn foo() {\n-    let m = [1, 2, 3]\n-        .iter()\n-        .filter_map(|x| Some(92));\n+    let m = core::iter::repeat(())\n+        .filter_map(|()| Some(92));\n     let n = m.next();\n }\n \"#,\n@@ -144,34 +116,14 @@ fn foo() {\n     fn replace_with_wind_map() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::iter::Iterator;\n-use core::option::Option::{self, Some, None};\n+//- minicore: iterators\n fn foo() {\n-    let m = [1, 2, 3].iter().$0filter_map(|x| Some(92)).next();\n-}\n-//- /core/lib.rs crate:core\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n-pub mod iter {\n-    pub trait Iterator {\n-        type Item;\n-        fn filter_map<B, F>(self, f: F) -> FilterMap where F: FnMut(Self::Item) -> Option<B> { FilterMap }\n-        fn next(&mut self) -> Option<Self::Item>;\n-    }\n-    pub struct FilterMap {}\n-    impl Iterator for FilterMap {\n-        type Item = i32;\n-        fn next(&mut self) -> i32 { 7 }\n-    }\n+    let m = core::iter::repeat(()).$0filter_map(|()| Some(92)).next();\n }\n \"#,\n             r#\"\n-use core::iter::Iterator;\n-use core::option::Option::{self, Some, None};\n fn foo() {\n-    let m = [1, 2, 3].iter().find_map(|x| Some(92));\n+    let m = core::iter::repeat(()).find_map(|()| Some(92));\n }\n \"#,\n         )"}, {"sha": "ce6ad8541bd2031423cff7e38ef2ff9dd8bf8444", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664912fbf83718508156fc09d2a0ff2448de175a/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=664912fbf83718508156fc09d2a0ff2448de175a", "patch": "@@ -22,7 +22,7 @@\n //!     option:\n //!     result:\n //!     iterator: option\n-//!     iterators: iterator\n+//!     iterators: iterator, fn\n //!     default: sized\n //!     clone: sized\n //!     copy: clone\n@@ -390,7 +390,6 @@ pub mod iter {\n             iter: I,\n             n: usize,\n         }\n-\n         impl<I> Iterator for Take<I>\n         where\n             I: Iterator,\n@@ -401,6 +400,22 @@ pub mod iter {\n                 loop {}\n             }\n         }\n+\n+        pub struct FilterMap<I, F> {\n+            iter: I,\n+            f: F,\n+        }\n+        impl<B, I: Iterator, F> Iterator for FilterMap<I, F>\n+        where\n+            F: FnMut(I::Item) -> Option<B>,\n+        {\n+            type Item = B;\n+\n+            #[inline]\n+            fn next(&mut self) -> Option<B> {\n+                loop {}\n+            }\n+        }\n     }\n     pub use self::adapters::Take;\n \n@@ -448,6 +463,13 @@ pub mod iter {\n                 fn take(self, n: usize) -> crate::iter::Take<Self> {\n                     loop {}\n                 }\n+                fn filter_map<B, F>(self, f: F) -> crate::iter::FilterMap<Self, F>\n+                where\n+                    Self: Sized,\n+                    F: FnMut(Self::Item) -> Option<B>,\n+                {\n+                    loop {}\n+                }\n                 // endregion:iterators\n             }\n             impl<I: Iterator + ?Sized> Iterator for &mut I {"}]}