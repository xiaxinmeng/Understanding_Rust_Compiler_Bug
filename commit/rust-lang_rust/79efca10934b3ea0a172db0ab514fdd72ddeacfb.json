{"sha": "79efca10934b3ea0a172db0ab514fdd72ddeacfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZWZjYTEwOTM0YjNlYTBhMTcyZGIwYWI1MTRmZGQ3MmRkZWFjZmI=", "commit": {"author": {"name": "Dylan Maccora", "email": "maccora17@gmail.com", "date": "2017-04-02T21:57:20Z"}, "committer": {"name": "Dylan Maccora", "email": "maccora17@gmail.com", "date": "2017-04-03T08:58:06Z"}, "message": "Wrapped to 80 characters. Fix links.", "tree": {"sha": "e565a45dd24e027a753219ca7b25808a46d35e71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e565a45dd24e027a753219ca7b25808a46d35e71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79efca10934b3ea0a172db0ab514fdd72ddeacfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79efca10934b3ea0a172db0ab514fdd72ddeacfb", "html_url": "https://github.com/rust-lang/rust/commit/79efca10934b3ea0a172db0ab514fdd72ddeacfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79efca10934b3ea0a172db0ab514fdd72ddeacfb/comments", "author": {"login": "maccoda", "id": 15388206, "node_id": "MDQ6VXNlcjE1Mzg4MjA2", "avatar_url": "https://avatars.githubusercontent.com/u/15388206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maccoda", "html_url": "https://github.com/maccoda", "followers_url": "https://api.github.com/users/maccoda/followers", "following_url": "https://api.github.com/users/maccoda/following{/other_user}", "gists_url": "https://api.github.com/users/maccoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/maccoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maccoda/subscriptions", "organizations_url": "https://api.github.com/users/maccoda/orgs", "repos_url": "https://api.github.com/users/maccoda/repos", "events_url": "https://api.github.com/users/maccoda/events{/privacy}", "received_events_url": "https://api.github.com/users/maccoda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maccoda", "id": 15388206, "node_id": "MDQ6VXNlcjE1Mzg4MjA2", "avatar_url": "https://avatars.githubusercontent.com/u/15388206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maccoda", "html_url": "https://github.com/maccoda", "followers_url": "https://api.github.com/users/maccoda/followers", "following_url": "https://api.github.com/users/maccoda/following{/other_user}", "gists_url": "https://api.github.com/users/maccoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/maccoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maccoda/subscriptions", "organizations_url": "https://api.github.com/users/maccoda/orgs", "repos_url": "https://api.github.com/users/maccoda/repos", "events_url": "https://api.github.com/users/maccoda/events{/privacy}", "received_events_url": "https://api.github.com/users/maccoda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7897e168bdd9708f83514a9c3e88d83278de4334", "url": "https://api.github.com/repos/rust-lang/rust/commits/7897e168bdd9708f83514a9c3e88d83278de4334", "html_url": "https://github.com/rust-lang/rust/commit/7897e168bdd9708f83514a9c3e88d83278de4334"}], "stats": {"total": 98, "additions": 58, "deletions": 40}, "files": [{"sha": "19cd2d3398f390a727b34eb12631d78d3b80abd0", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 58, "deletions": 40, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/79efca10934b3ea0a172db0ab514fdd72ddeacfb/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79efca10934b3ea0a172db0ab514fdd72ddeacfb/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=79efca10934b3ea0a172db0ab514fdd72ddeacfb", "patch": "@@ -26,16 +26,16 @@\n //! As a library author, you should prefer implementing [`From<T>`][`From`] or\n //! [`TryFrom<T>`][`TryFrom`] rather than [`Into<U>`][`Into`] or [`TryInto<U>`][`TryInto`],\n //! as [`From`] and [`TryFrom`] provide greater flexibility and offer\n-//! equivalent [`Into`] or [`TryInto`] implementations for free, thanks to a blanket implementation\n-//! in the standard library.\n+//! equivalent [`Into`] or [`TryInto`] implementations for free, thanks to a\n+//! blanket implementation in the standard library.\n //!\n //! # Generic Implementations\n //!\n //! - [`AsRef`] and [`AsMut`] auto-dereference if the inner type is a reference\n //! - [`From`]`<U> for T` implies [`Into`]`<T> for U`\n //! - [`TryFrom`]`<U> for T` implies [`TryInto`]`<T> for U`\n-//! - [`From`] and [`Into`] are reflexive, which means that all types can `into()`\n-//!   themselves and `from()` themselves\n+//! - [`From`] and [`Into`] are reflexive, which means that all types can\n+//!   `into()` themselves and `from()` themselves\n //!\n //! See each trait for usage examples.\n //!\n@@ -50,39 +50,45 @@\n \n use str::FromStr;\n \n-/// A cheap reference-to-reference conversion. Used to convert a value to a reference value\n-/// within generic code.\n-///\n-/// `AsRef` is very similar to, but serves a slightly different purpose than, [`Borrow`].\n-///\n-/// `AsRef` is to be used when wishing to convert to a reference of another type.\n-/// `Borrow` is more related to the notion of taking the reference. It is useful when wishing to abstract\n-/// over the type of reference (`&T`, `&mut T`) or allow both the referenced and owned type to be treated in the same manner.\n+/// A cheap reference-to-reference conversion. Used to convert a value to a\n+/// reference value within generic code.\n+///\n+/// `AsRef` is very similar to, but serves a slightly different purpose than,\n+/// [`Borrow`].\n+///\n+/// `AsRef` is to be used when wishing to convert to a reference of another\n+/// type.\n+/// `Borrow` is more related to the notion of taking the reference. It is\n+/// useful when wishing to abstract\n+/// over the type of reference (`&T`, `&mut T`) or allow both the referenced\n+/// and owned type to be treated in the same manner.\n /// The key difference between the two traits is the intention:\n ///\n /// - Use `AsRef` when goal is to simply convert into a reference\n-/// - Use `Borrow` when goal is related to writing code that is agnostic to the type of borrow and if is reference or value\n+/// - Use `Borrow` when goal is related to writing code that is agnostic to the\n+/// type of borrow and if is reference or value\n ///\n /// See [the book][book] for a more detailed comparison.\n ///\n /// [book]: ../../book/borrow-and-asref.html\n /// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// returns an [`Option<T>`] or a [`Result<T, E>`].\n+/// **Note: this trait must not fail**. If the conversion can fail, use a\n+/// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n ///\n /// # Generic Implementations\n ///\n /// - `AsRef` auto-dereferences if the inner type is a reference or a mutable\n-/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n+/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n+/// `&mut Foo` or `&&mut Foo`)\n ///\n /// # Examples\n /// An example implementation of the trait is [`Path`].\n ///\n-/// [`Path`]: ../../std/struct.Path.html\n+/// [`Path`]: ../../std/path/struct.Path.html\n ///\n /// ```\n /// impl AsRef<Path> for str {\n@@ -119,16 +125,17 @@ pub trait AsRef<T: ?Sized> {\n ///\n /// This trait is similar to `AsRef` but used for converting mutable references.\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// returns an [`Option<T>`] or a [`Result<T, E>`].\n+/// **Note: this trait must not fail**. If the conversion can fail, use a\n+/// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n ///\n /// # Generic Implementations\n ///\n /// - `AsMut` auto-dereferences if the inner type is a reference or a mutable\n-/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type `&mut Foo` or `&&mut Foo`)\n+/// reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n+/// `&mut Foo` or `&&mut Foo`)\n ///\n /// # Examples\n ///\n@@ -161,14 +168,17 @@ pub trait AsMut<T: ?Sized> {\n     fn as_mut(&mut self) -> &mut T;\n }\n \n-/// A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].\n+/// A conversion that consumes `self`, which may or may not be expensive. The\n+/// reciprocal of [`From`][From].\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use [`TryInto`] or a dedicated\n-/// method which returns an [`Option<T>`] or a [`Result<T, E>`].\n+/// **Note: this trait must not fail**. If the conversion can fail, use\n+/// [`TryInto`] or a dedicated method which returns an [`Option<T>`] or a\n+/// [`Result<T, E>`].\n ///\n-/// Library authors should not directly implement this trait, but should prefer implementing\n-/// the [`From`][From] trait, which offers greater flexibility and provides an equivalent `Into`\n-/// implementation for free, thanks to a blanket implementation in the standard library.\n+/// Library authors should not directly implement this trait, but should prefer\n+/// implementing the [`From`][From] trait, which offers greater flexibility and\n+/// provides an equivalent `Into` implementation for free, thanks to a blanket\n+/// implementation in the standard library.\n ///\n /// # Generic Implementations\n ///\n@@ -202,18 +212,24 @@ pub trait Into<T>: Sized {\n     fn into(self) -> T;\n }\n \n-/// Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.\n+/// Simple and safe type conversions in to `Self`. It is the reciprocal of\n+/// `Into`.\n ///\n-/// This trait is useful when performing error handling as described by [the book][book] and is closely related to the `?` operator.\n+/// This trait is useful when performing error handling as described by\n+/// [the book][book] and is closely related to the `?` operator.\n ///\n-/// When constructing a function that is capable of failing the return type will generally be of the form `Result<T, E>`.\n-/// The `From` trait allows for simplification of error handling by providing a means of returning a single error type that encapsulates\n-/// numerous possible erroneous situations.\n-/// This trait is not limited to error handling, rather the general case for this trait would be in any type conversions to have an\n-/// explicit definition of how they are performed.\n+/// When constructing a function that is capable of failing the return type\n+/// will generally be of the form `Result<T, E>`.\n+/// The `From` trait allows for simplification of error handling by providing a\n+/// means of returning a single error type that encapsulates numerous possible\n+/// erroneous situations.\n+/// This trait is not limited to error handling, rather the general case for\n+/// this trait would be in any type conversions to have an explicit definition\n+/// of how they are performed.\n ///\n-/// **Note: this trait must not fail**. If the conversion can fail, use [`TryFrom`] or a dedicated\n-/// method which returns an [`Option<T>`] or a [`Result<T, E>`].\n+/// **Note: this trait must not fail**. If the conversion can fail, use\n+/// [`TryFrom`] or a dedicated method which returns an [`Option<T>`] or a\n+/// [`Result<T, E>`].\n ///\n /// # Generic Implementations\n ///\n@@ -265,19 +281,21 @@ pub trait Into<T>: Sized {\n /// [`String`]: ../../std/string/struct.String.html\n /// [`Into<U>`]: trait.Into.html\n /// [`from`]: trait.From.html#tymethod.from\n-/// [book]: ../../book/error-handling.html#the-from-trait\n+/// [book]: ../../book/error-handling.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait From<T>: Sized {\n     /// Performs the conversion.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from(T) -> Self;\n }\n \n-/// An attempted conversion that consumes `self`, which may or may not be expensive.\n+/// An attempted conversion that consumes `self`, which may or may not be\n+/// expensive.\n ///\n-/// Library authors should not directly implement this trait, but should prefer implementing\n-/// the [`TryFrom`] trait, which offers greater flexibility and provides an equivalent `TryInto`\n-/// implementation for free, thanks to a blanket implementation in the standard library.\n+/// Library authors should not directly implement this trait, but should prefer\n+/// implementing the [`TryFrom`] trait, which offers greater flexibility and\n+/// provides an equivalent `TryInto` implementation for free, thanks to a\n+/// blanket implementation in the standard library.\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n #[unstable(feature = \"try_from\", issue = \"33417\")]"}]}