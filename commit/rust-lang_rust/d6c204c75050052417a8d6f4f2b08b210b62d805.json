{"sha": "d6c204c75050052417a8d6f4f2b08b210b62d805", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzIwNGM3NTA1MDA1MjQxN2E4ZDZmNGYyYjA4YjIxMGI2MmQ4MDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T16:54:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T16:54:05Z"}, "message": "Cleanup visibility", "tree": {"sha": "d58b4495ed6bfff5cee2d5b4915ea0c1ec47aeda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d58b4495ed6bfff5cee2d5b4915ea0c1ec47aeda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c204c75050052417a8d6f4f2b08b210b62d805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c204c75050052417a8d6f4f2b08b210b62d805", "html_url": "https://github.com/rust-lang/rust/commit/d6c204c75050052417a8d6f4f2b08b210b62d805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c204c75050052417a8d6f4f2b08b210b62d805/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "946b2c28a7099071bb799b1c1ee29fb609289c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/946b2c28a7099071bb799b1c1ee29fb609289c44", "html_url": "https://github.com/rust-lang/rust/commit/946b2c28a7099071bb799b1c1ee29fb609289c44"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "7d6d243698248fb48c9b7e23dcaaa390e3b308e8", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d6c204c75050052417a8d6f4f2b08b210b62d805/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c204c75050052417a8d6f4f2b08b210b62d805/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=d6c204c75050052417a8d6f4f2b08b210b62d805", "patch": "@@ -46,32 +46,32 @@ fn create_flycheck(workspaces: &[ProjectWorkspace], config: &FlycheckConfig) ->\n /// snapshot of the file systems, and `analysis_host`, which stores our\n /// incremental salsa database.\n #[derive(Debug)]\n-pub struct GlobalState {\n-    pub config: Config,\n-    pub workspaces: Arc<Vec<ProjectWorkspace>>,\n-    pub analysis_host: AnalysisHost,\n-    pub loader: Box<dyn vfs::loader::Handle>,\n-    pub task_receiver: Receiver<vfs::loader::Message>,\n-    pub flycheck: Option<Flycheck>,\n-    pub diagnostics: DiagnosticCollection,\n-    pub proc_macro_client: ProcMacroClient,\n+pub(crate) struct GlobalState {\n+    pub(crate) config: Config,\n+    pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n+    pub(crate) analysis_host: AnalysisHost,\n+    pub(crate) loader: Box<dyn vfs::loader::Handle>,\n+    pub(crate) task_receiver: Receiver<vfs::loader::Message>,\n+    pub(crate) flycheck: Option<Flycheck>,\n+    pub(crate) diagnostics: DiagnosticCollection,\n+    pub(crate) proc_macro_client: ProcMacroClient,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n     pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n     source_root_config: SourceRootConfig,\n }\n \n /// An immutable snapshot of the world's state at a point in time.\n-pub struct GlobalStateSnapshot {\n-    pub config: Config,\n-    pub workspaces: Arc<Vec<ProjectWorkspace>>,\n-    pub analysis: Analysis,\n-    pub check_fixes: CheckFixes,\n+pub(crate) struct GlobalStateSnapshot {\n+    pub(crate) config: Config,\n+    pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n+    pub(crate) analysis: Analysis,\n+    pub(crate) check_fixes: CheckFixes,\n     pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n     vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n }\n \n impl GlobalState {\n-    pub fn new(\n+    pub(crate) fn new(\n         workspaces: Vec<ProjectWorkspace>,\n         lru_capacity: Option<usize>,\n         config: Config,\n@@ -241,7 +241,7 @@ impl GlobalStateSnapshot {\n         self.vfs.read().1[&id]\n     }\n \n-    pub fn anchored_path(&self, file_id: FileId, path: &str) -> Url {\n+    pub(crate) fn anchored_path(&self, file_id: FileId, path: &str) -> Url {\n         let mut base = self.vfs.read().0.file_path(file_id);\n         base.pop();\n         let path = base.join(path);\n@@ -264,7 +264,7 @@ impl GlobalStateSnapshot {\n         })\n     }\n \n-    pub fn status(&self) -> String {\n+    pub(crate) fn status(&self) -> String {\n         let mut buf = String::new();\n         if self.workspaces.is_empty() {\n             buf.push_str(\"no workspaces\\n\")\n@@ -349,7 +349,7 @@ pub(crate) struct SourceRootConfig {\n }\n \n impl SourceRootConfig {\n-    pub fn partition(&self, vfs: &vfs::Vfs) -> Vec<SourceRoot> {\n+    pub(crate) fn partition(&self, vfs: &vfs::Vfs) -> Vec<SourceRoot> {\n         self.fsc\n             .partition(vfs)\n             .into_iter()"}]}