{"sha": "afb937ab25e17adc5f2b76fcdf64d8804bdd65b9", "node_id": "C_kwDOAAsO6NoAKGFmYjkzN2FiMjVlMTdhZGM1ZjJiNzZmY2RmNjRkODgwNGJkZDY1Yjk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-05T10:17:43Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-05T10:17:43Z"}, "message": "Bump rust version", "tree": {"sha": "6dafd3250d9b81c8eb65e426e2402c47a854f9ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dafd3250d9b81c8eb65e426e2402c47a854f9ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9", "html_url": "https://github.com/rust-lang/rust/commit/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dacf5ae6414a9a18d1254181a085f8c02adee98", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dacf5ae6414a9a18d1254181a085f8c02adee98", "html_url": "https://github.com/rust-lang/rust/commit/4dacf5ae6414a9a18d1254181a085f8c02adee98"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "b726558b7662f118b87625c9586e4a9c2b123540", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=afb937ab25e17adc5f2b76fcdf64d8804bdd65b9", "patch": "@@ -1 +1 @@\n-46b8c23f3eb5e4d0e0aa27eb3f20d5b8fc3ed51f\n+4045ce641a9eede71cc12031a2cd71692b273890"}, {"sha": "a942390e549f5ea41099b4fe1a338ffa92ba3f47", "filename": "src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=afb937ab25e17adc5f2b76fcdf64d8804bdd65b9", "patch": "@@ -450,7 +450,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let msg = match e {\n                     CreatedPointerTag(tag, None) => format!(\"created tag {tag:?}\"),\n                     CreatedPointerTag(tag, Some((alloc_id, range))) =>\n-                        format!(\"created tag {tag:?} at {alloc_id}{}\", HexRange(range)),\n+                        format!(\"created tag {tag:?} at {alloc_id:?}{}\", HexRange(range)),\n                     PoppedPointerTag(item, tag) =>\n                         match tag {\n                             None =>"}, {"sha": "7e702e065619d7597b645e61497605388436e046", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=afb937ab25e17adc5f2b76fcdf64d8804bdd65b9", "patch": "@@ -699,7 +699,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // FIXME: We are re-getting the allocation each time around the loop.\n             // Would be nice if we could somehow \"extend\" an existing AllocRange.\n             let alloc = this.get_ptr_alloc(ptr.offset(len, this)?, size1, Align::ONE)?.unwrap(); // not a ZST, so we will get a result\n-            let byte = alloc.read_integer(Size::ZERO, size1)?.to_u8()?;\n+            let byte = alloc.read_integer(alloc_range(Size::ZERO, size1))?.to_u8()?;\n             if byte == 0 {\n                 break;\n             } else {\n@@ -721,7 +721,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // FIXME: We are re-getting the allocation each time around the loop.\n             // Would be nice if we could somehow \"extend\" an existing AllocRange.\n             let alloc = this.get_ptr_alloc(ptr, size2, align2)?.unwrap(); // not a ZST, so we will get a result\n-            let wchar = alloc.read_integer(Size::ZERO, size2)?.to_u16()?;\n+            let wchar = alloc.read_integer(alloc_range(Size::ZERO, size2))?.to_u16()?;\n             if wchar == 0 {\n                 break;\n             } else {"}, {"sha": "efc38fdae3f25c4103c0bc0ac4f1105e3c81e022", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=afb937ab25e17adc5f2b76fcdf64d8804bdd65b9", "patch": "@@ -1097,7 +1097,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             AllocKind::LiveData => {\n                 // This should have alloc_extra data.\n                 let alloc_extra = this.get_alloc_extra(alloc_id).unwrap();\n-                trace!(\"Stacked Borrows tag {tag:?} exposed in {alloc_id}\");\n+                trace!(\"Stacked Borrows tag {tag:?} exposed in {alloc_id:?}\");\n                 alloc_extra.stacked_borrows.as_ref().unwrap().borrow_mut().exposed_tags.insert(tag);\n             }\n             AllocKind::Function | AllocKind::Dead => {"}, {"sha": "fe3716a911162a15d378dc91e97695cb49692eff", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afb937ab25e17adc5f2b76fcdf64d8804bdd65b9/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=afb937ab25e17adc5f2b76fcdf64d8804bdd65b9", "patch": "@@ -140,9 +140,8 @@ impl AllocHistory {\n         stack: &Stack,\n     ) -> InterpError<'tcx> {\n         let action = format!(\n-            \"trying to reborrow {derived_from:?} for {:?} permission at {}[{:#x}]\",\n+            \"trying to reborrow {derived_from:?} for {:?} permission at {alloc_id:?}[{:#x}]\",\n             new.perm,\n-            alloc_id,\n             error_offset.bytes(),\n         );\n         err_sb_ub(\n@@ -163,8 +162,7 @@ impl AllocHistory {\n         stack: &Stack,\n     ) -> InterpError<'tcx> {\n         let action = format!(\n-            \"attempting a {access} using {tag:?} at {}[{:#x}]\",\n-            alloc_id,\n+            \"attempting a {access} using {tag:?} at {alloc_id:?}[{:#x}]\",\n             error_offset.bytes(),\n         );\n         err_sb_ub("}]}