{"sha": "6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNmIzMzA5ZTYzODU0Y2JkMGYwZTJhMGI5YmQzMDVmNmI5NmNmODE=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-04T10:26:21Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-25T14:47:35Z"}, "message": "update tests to changes on rustc master", "tree": {"sha": "b890872ac87a770450ceca2a4b1ded7eec856127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b890872ac87a770450ceca2a4b1ded7eec856127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "html_url": "https://github.com/rust-lang/rust/commit/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6f7f4af501f401be7b303b56416a2737498717b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f7f4af501f401be7b303b56416a2737498717b", "html_url": "https://github.com/rust-lang/rust/commit/e6f7f4af501f401be7b303b56416a2737498717b"}], "stats": {"total": 142, "additions": 85, "deletions": 57}, "files": [{"sha": "23e1ab013ef3e991f773940cfb1908fd44ec51c3", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -22,7 +22,7 @@ union Nonsense {\n \n fn main() {\n     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n-    //~^ ERROR this constant likely exhibits undefined behavior\n+    //~^ ERROR it is undefined behavior to use this value\n \n     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n     //~^ ERROR any use of this value will cause an error\n@@ -34,7 +34,7 @@ fn main() {\n     //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-    //~^ ERROR this constant likely exhibits undefined behavior\n+    //~^ ERROR it is undefined behavior to use this value\n \n     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n     //~^ ERROR any use of this value will cause an error\n@@ -49,7 +49,7 @@ fn main() {\n     //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-    //~^ ERROR this constant likely exhibits undefined behavior\n+    //~^ ERROR it is undefined behavior to use this value\n \n     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n     //~^ ERROR any use of this value will cause an error\n@@ -58,7 +58,7 @@ fn main() {\n     //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-    //~^ ERROR this constant likely exhibits undefined behavior\n+    //~^ ERROR it is undefined behavior to use this value\n \n     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n     //~^ ERROR any use of this value will cause an error\n@@ -76,7 +76,7 @@ fn main() {\n     //~^ ERROR any use of this value will cause an error\n \n     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-    //~^ ERROR this constant likely exhibits undefined behavior\n+    //~^ ERROR it is undefined behavior to use this value\n \n     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n     //~^ ERROR any use of this value will cause an error\n@@ -91,7 +91,7 @@ fn main() {\n     //~^ ERROR any use of this value will cause an error\n \n     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-    //~^ ERROR this constant likely exhibits undefined behavior\n+    //~^ ERROR it is undefined behavior to use this value\n \n     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n     //~^ ERROR any use of this value will cause an error\n@@ -100,7 +100,7 @@ fn main() {\n     //~^ ERROR any use of this value will cause an error\n \n     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-    //~^ ERROR this constant likely exhibits undefined behavior\n+    //~^ ERROR it is undefined behavior to use this value\n \n     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n     //~^ ERROR any use of this value will cause an error"}, {"sha": "cc1db5db6915c91ca031ea8adcd19b5c238077b2", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -1,12 +1,12 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:24:5\n    |\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:27:5\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n@@ -16,211 +16,211 @@ LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:30:5\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:33:5\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^^^\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:36:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:39:5\n    |\n LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:42:5\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:45:5\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:48:5\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:51:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:54:5\n    |\n LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:57:5\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------------------------^^^\n    |                                             |\n    |                                             a raw memory access tried to access part of a pointer value as raw bytes\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:60:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:63:5\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------------^^^\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:66:5\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------------^^^\n    |                                               |\n    |                                               a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:69:5\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:72:5\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:75:5\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:78:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:81:5\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:84:5\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------------------------^^^\n    |                                       |\n    |                                       a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:87:5\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:90:5\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------^^^\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:93:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:96:5\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^^^\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:99:5\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n    |                                         |\n    |                                         a raw memory access tried to access part of a pointer value as raw bytes\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:102:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:105:5\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^^^\n    |                                           |\n    |                                           a raw memory access tried to access part of a pointer value as raw bytes\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-pointer-values-in-various-types.rs:108:5\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };"}, {"sha": "8e207b712c35d2c59625e65a0ca43178d3db6d99", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -10,4 +10,5 @@\n \n fn main() {\n     [();  { &loop { break } as *const _ as usize } ]; //~ ERROR unimplemented expression type\n+    //~^ ERROR it is undefined behavior to use this value\n }"}, {"sha": "93fc4bea5caa939f20a90403fca8ae17dd266fe4", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -4,6 +4,15 @@ error[E0019]: constant contains unimplemented expression type\n LL |     [();  { &loop { break } as *const _ as usize } ]; //~ ERROR unimplemented expression type\n    |              ^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/issue-52442.rs:12:11\n+   |\n+LL |     [();  { &loop { break } as *const _ as usize } ]; //~ ERROR unimplemented expression type\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type usize\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0019`.\n+Some errors occurred: E0019, E0080.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "2254ed5d9e350fa789f1ff6bb13c538a751bbf20", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let n: Int = 40;\n     match n {\n         0..=10 => {},\n-        10..=BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n+        10..=BAR => {}, //~ ERROR could not evaluate constant pattern\n         _ => {},\n     }\n }\n@@ -30,4 +30,4 @@ type Int = u64;\n #[cfg(target_pointer_width=\"32\")]\n type Int = u32;\n \n-const BAR: Int = unsafe { Foo { r: &42 }.f };\n+const BAR: Int = unsafe { Foo { r: &42 }.f }; //~ ERROR it is undefined behavior to use this value"}, {"sha": "1e65a871de41fc79093c840793f6afa772f79f6e", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -1,9 +1,17 @@\n-error[E0030]: lower range bound must be less than or equal to upper\n-  --> $DIR/ref_to_int_match.rs:17:9\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ref_to_int_match.rs:33:1\n    |\n-LL |         10..=BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n-   |         ^^ lower bound larger than upper bound\n+LL | const BAR: Int = unsafe { Foo { r: &42 }.f }; //~ ERROR it is undefined behavior to use this value\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type u64\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/ref_to_int_match.rs:17:14\n+   |\n+LL |         10..=BAR => {}, //~ ERROR could not evaluate constant pattern\n+   |              ^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0030`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "8e1e81f7735dc059c4c900e04a72cd06500f1c37", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -1,24 +1,24 @@\n error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}`\n-  --> $DIR/const-size_of-cycle.rs:16:17\n+  --> $DIR/const-size_of-cycle.rs:14:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n   --> $SRC_DIR/libcore/mem.rs:LL:COL\n    |\n-LL |     unsafe { intrinsics::size_of::<T>() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     intrinsics::size_of::<T>()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires computing layout of `Foo`...\n note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: [u8; _] }`...\n note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n-  --> $DIR/const-size_of-cycle.rs:16:17\n+  --> $DIR/const-size_of-cycle.rs:14:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}`, completing the cycle\n note: cycle used when processing `Foo`\n-  --> $DIR/const-size_of-cycle.rs:15:1\n+  --> $DIR/const-size_of-cycle.rs:13:1\n    |\n LL | struct Foo {\n    | ^^^^^^^^^^"}, {"sha": "e70dfe7ad4e0a81ff7202865f272f3ef6a7c9a24", "filename": "src/test/ui/issues/issue-44415.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -1,24 +1,24 @@\n error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}`\n-  --> $DIR/issue-44415.rs:17:17\n+  --> $DIR/issue-44415.rs:16:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                 ^^^^^^\n    |\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n-  --> $DIR/issue-44415.rs:17:26\n+  --> $DIR/issue-44415.rs:16:26\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires computing layout of `Foo`...\n note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: [u8; _] }`...\n note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n-  --> $DIR/issue-44415.rs:17:17\n+  --> $DIR/issue-44415.rs:16:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                 ^^^^^^\n    = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}`, completing the cycle\n note: cycle used when processing `Foo`\n-  --> $DIR/issue-44415.rs:16:1\n+  --> $DIR/issue-44415.rs:15:1\n    |\n LL | struct Foo {\n    | ^^^^^^^^^^"}, {"sha": "46cbdb6ac22dfd254d06c717bdc5d73d9422bb85", "filename": "src/test/ui/issues/issue-52023-array-size-pointer-cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.rs?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -10,4 +10,5 @@\n \n fn main() {\n     let _ = [0; (&0 as *const i32) as usize]; //~ ERROR casting pointers to integers in constants\n+    //~^ ERROR it is undefined behavior to use this value\n }"}, {"sha": "ba415d43a751a3c8501dee4c20b42d67d9343387", "filename": "src/test/ui/issues/issue-52023-array-size-pointer-cast.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52023-array-size-pointer-cast.stderr?ref=6a6b3309e63854cbd0f0e2a0b9bd305f6b96cf81", "patch": "@@ -6,6 +6,15 @@ LL |     let _ = [0; (&0 as *const i32) as usize]; //~ ERROR casting pointers to\n    |\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/issue-52023-array-size-pointer-cast.rs:12:17\n+   |\n+LL |     let _ = [0; (&0 as *const i32) as usize]; //~ ERROR casting pointers to integers in constants\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected the type usize\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors occurred: E0080, E0658.\n+For more information about an error, try `rustc --explain E0080`."}]}