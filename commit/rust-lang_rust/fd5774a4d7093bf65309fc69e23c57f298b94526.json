{"sha": "fd5774a4d7093bf65309fc69e23c57f298b94526", "node_id": "C_kwDOAAsO6NoAKGZkNTc3NGE0ZDcwOTNiZjY1MzA5ZmM2OWUyM2M1N2YyOThiOTQ1MjY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-31T09:50:56Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-31T10:09:22Z"}, "message": "Use `Edition` methods a bit more", "tree": {"sha": "b436e10705285d42c9ac542e4c9e7955a23c37ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b436e10705285d42c9ac542e4c9e7955a23c37ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5774a4d7093bf65309fc69e23c57f298b94526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5774a4d7093bf65309fc69e23c57f298b94526", "html_url": "https://github.com/rust-lang/rust/commit/fd5774a4d7093bf65309fc69e23c57f298b94526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5774a4d7093bf65309fc69e23c57f298b94526/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc3e59cb3fe05ebd752d3a2269f501c00327be22", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc3e59cb3fe05ebd752d3a2269f501c00327be22", "html_url": "https://github.com/rust-lang/rust/commit/dc3e59cb3fe05ebd752d3a2269f501c00327be22"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "fa8567eac609074925d82b465c6bae7feaf21ea9", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=fd5774a4d7093bf65309fc69e23c57f298b94526", "patch": "@@ -131,7 +131,7 @@ pub fn print_crate<'a>(\n \n         // Currently, in Rust 2018 we don't have `extern crate std;` at the crate\n         // root, so this is not needed, and actually breaks things.\n-        if edition == Edition::Edition2015 {\n+        if edition.rust_2015() {\n             // `#![no_std]`\n             let fake_attr = attr::mk_attr_word(g, ast::AttrStyle::Inner, sym::no_std, DUMMY_SP);\n             s.print_attribute(&fake_attr);"}, {"sha": "db28773cbdc29c12523de4811cabf724becedda0", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=fd5774a4d7093bf65309fc69e23c57f298b94526", "patch": "@@ -1717,7 +1717,7 @@ impl<'a> Resolver<'a> {\n                         Applicability::MaybeIncorrect,\n                     )),\n                 )\n-            } else if self.session.edition() == Edition::Edition2015 {\n+            } else if self.session.edition().rust_2015() {\n                 (\n                     format!(\"maybe a missing crate `{ident}`?\"),\n                     Some(("}, {"sha": "1c985d43658ae25f1b66acfedfc1ccde9a75cdfa", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=fd5774a4d7093bf65309fc69e23c57f298b94526", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::ty;\n use rustc_session::lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::def_id::LocalDefId;\n-use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnId, ExpnKind, LocalExpnId, MacroKind, SyntaxContext};\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{Span, DUMMY_SP};\n@@ -86,7 +85,7 @@ impl<'a> Resolver<'a> {\n         // 4c. Standard library prelude (de-facto closed, controlled).\n         // 6. Language prelude: builtin attributes (closed, controlled).\n \n-        let rust_2015 = ctxt.edition() == Edition::Edition2015;\n+        let rust_2015 = ctxt.edition().rust_2015();\n         let (ns, macro_kind, is_absolute_path) = match scope_set {\n             ScopeSet::All(ns, _) => (ns, None, false),\n             ScopeSet::AbsolutePath(ns) => (ns, None, true),"}, {"sha": "1c8a2ea575f2cdb77232fe2c0b166d9ff58dbfb1", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=fd5774a4d7093bf65309fc69e23c57f298b94526", "patch": "@@ -900,22 +900,22 @@ impl Session {\n     }\n \n     pub fn rust_2015(&self) -> bool {\n-        self.edition() == Edition::Edition2015\n+        self.edition().rust_2015()\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?\n     pub fn rust_2018(&self) -> bool {\n-        self.edition() >= Edition::Edition2018\n+        self.edition().rust_2018()\n     }\n \n     /// Are we allowed to use features from the Rust 2021 edition?\n     pub fn rust_2021(&self) -> bool {\n-        self.edition() >= Edition::Edition2021\n+        self.edition().rust_2021()\n     }\n \n     /// Are we allowed to use features from the Rust 2024 edition?\n     pub fn rust_2024(&self) -> bool {\n-        self.edition() >= Edition::Edition2024\n+        self.edition().rust_2024()\n     }\n \n     /// Returns `true` if we cannot skip the PLT for shared library calls."}, {"sha": "006102a5f2fcfc471abf0c1523bd1d1f22c029fc", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5774a4d7093bf65309fc69e23c57f298b94526/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=fd5774a4d7093bf65309fc69e23c57f298b94526", "patch": "@@ -706,22 +706,22 @@ impl Span {\n \n     #[inline]\n     pub fn rust_2015(self) -> bool {\n-        self.edition() == edition::Edition::Edition2015\n+        self.edition().rust_2015()\n     }\n \n     #[inline]\n     pub fn rust_2018(self) -> bool {\n-        self.edition() >= edition::Edition::Edition2018\n+        self.edition().rust_2018()\n     }\n \n     #[inline]\n     pub fn rust_2021(self) -> bool {\n-        self.edition() >= edition::Edition::Edition2021\n+        self.edition().rust_2021()\n     }\n \n     #[inline]\n     pub fn rust_2024(self) -> bool {\n-        self.edition() >= edition::Edition::Edition2024\n+        self.edition().rust_2024()\n     }\n \n     /// Returns the source callee."}]}