{"sha": "8611577360e66f90470bd40c498cf8d194f67926", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MTE1NzczNjBlNjZmOTA0NzBiZDQwYzQ5OGNmOGQxOTRmNjc5MjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-27T18:18:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-27T18:18:17Z"}, "message": "Auto merge of #57765 - Mark-Simulacrum:bootstrap-bump, r=alexcrichton\n\nBump bootstrap compiler to 1.33 beta\n\nr? @alexcrichton or @pietroalbini\n\ncc @rust-lang/release", "tree": {"sha": "bdbfc4b5805e1c9943247c6e846fa9ff0fb83787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbfc4b5805e1c9943247c6e846fa9ff0fb83787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8611577360e66f90470bd40c498cf8d194f67926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8611577360e66f90470bd40c498cf8d194f67926", "html_url": "https://github.com/rust-lang/rust/commit/8611577360e66f90470bd40c498cf8d194f67926", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8611577360e66f90470bd40c498cf8d194f67926/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c365c38085c3c6e82bc6bcad823d9926dd3942", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c365c38085c3c6e82bc6bcad823d9926dd3942", "html_url": "https://github.com/rust-lang/rust/commit/71c365c38085c3c6e82bc6bcad823d9926dd3942"}, {"sha": "cd39cf748e3a5ab7cc4449ba9acfddb969c79209", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd39cf748e3a5ab7cc4449ba9acfddb969c79209", "html_url": "https://github.com/rust-lang/rust/commit/cd39cf748e3a5ab7cc4449ba9acfddb969c79209"}], "stats": {"total": 425, "additions": 182, "deletions": 243}, "files": [{"sha": "1cfe57da6974dcb9680e432772c69c821ca6ca81", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -204,15 +204,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"cargo\"\n-version = \"0.34.0\"\n+version = \"0.35.0\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytesize 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core-foundation 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crates-io 0.22.0\",\n+ \"crates-io 0.23.0\",\n  \"crossbeam-utils 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crypto-hash 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -496,7 +496,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"crates-io\"\n-version = \"0.22.0\"\n+version = \"0.23.0\"\n dependencies = [\n  \"curl 0.4.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2113,7 +2113,7 @@ dependencies = [\n name = \"rls\"\n version = \"1.31.6\"\n dependencies = [\n- \"cargo 0.34.0\",\n+ \"cargo 0.35.0\",\n  \"cargo_metadata 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy_lints 0.0.212\",\n  \"crossbeam-channel 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "f742bce180c05e82040394dc2fdfe929d1d3715f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -21,7 +21,7 @@ use crate::install;\n use crate::native;\n use crate::test;\n use crate::tool;\n-use crate::util::{add_lib_path, exe, libdir};\n+use crate::util::{self, add_lib_path, exe, libdir};\n use crate::{Build, DocTests, Mode, GitRepo};\n \n pub use crate::Compiler;\n@@ -791,6 +791,13 @@ impl<'a> Builder<'a> {\n             .env(\"CARGO_TARGET_DIR\", out_dir)\n             .arg(cmd);\n \n+        // See comment in librustc_llvm/build.rs for why this is necessary, largely llvm-config\n+        // needs to not accidentally link to libLLVM in stage0/lib.\n+        cargo.env(\"REAL_LIBRARY_PATH_VAR\", &util::dylib_path_var());\n+        if let Some(e) = env::var_os(util::dylib_path_var()) {\n+            cargo.env(\"REAL_LIBRARY_PATH\", e);\n+        }\n+\n         if cmd != \"install\" {\n             cargo.arg(\"--target\")\n                  .arg(target);"}, {"sha": "0b2f62485c9ee18094047e27b3c2b9e205d007bc", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -14,7 +14,7 @@ use crate::Build;\n use crate::config::Config;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.33.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.34.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "ec04dee6c32f0cc2d75da588394292bce7fcc781", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -712,6 +712,7 @@ pub fn build_codegen_backend(builder: &Builder,\n             if builder.is_rust_llvm(target) && backend != \"emscripten\" {\n                 cargo.env(\"LLVM_RUSTLLVM\", \"1\");\n             }\n+\n             cargo.env(\"LLVM_CONFIG\", &llvm_config);\n             if backend != \"emscripten\" {\n                 let target_config = builder.config.target_config.get(&target);"}, {"sha": "116b2720f39a47a46e6f90d760cba5664f156307", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -226,7 +226,7 @@ fn make_win_dist(\n         let trim_chars: &[_] = &[' ', '='];\n         let value =\n             line[(idx + 1)..]\n-                .trim_left_matches(trim_chars)\n+                .trim_start_matches(trim_chars)\n                 .split(';')\n                 .map(PathBuf::from);\n "}, {"sha": "32b03c5fb1b7c051116deb8411a35de412eba984", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -423,7 +423,7 @@ impl Build {\n             Command::new(&build.initial_rustc).arg(\"--version\").arg(\"--verbose\"));\n         let local_release = local_version_verbose\n             .lines().filter(|x| x.starts_with(\"release:\"))\n-            .next().unwrap().trim_left_matches(\"release:\").trim();\n+            .next().unwrap().trim_start_matches(\"release:\").trim();\n         let my_version = channel::CFG_RELEASE_NUM;\n         if local_release.split('.').take(2).eq(my_version.split('.').take(2)) {\n             build.verbose(&format!(\"auto-detected local-rebuild {}\", local_release));"}, {"sha": "37c6c040da8e8e28b848e9d5c59ed0b2da281d6e", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -70,7 +70,11 @@ pub fn dylib_path_var() -> &'static str {\n /// Parses the `dylib_path_var()` environment variable, returning a list of\n /// paths that are members of this lookup path.\n pub fn dylib_path() -> Vec<PathBuf> {\n-    env::split_paths(&env::var_os(dylib_path_var()).unwrap_or_default()).collect()\n+    let var = match env::var_os(dylib_path_var()) {\n+        Some(v) => v,\n+        None => return vec![],\n+    };\n+    env::split_paths(&var).collect()\n }\n \n /// `push` all components to `buf`. On windows, append `.exe` to the last component."}, {"sha": "c66c5c9249087ba6134efaca46c03ee0a81b13bc", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -23,6 +23,25 @@ macro_rules! t {\n     };\n }\n \n+// Because Cargo adds the compiler's dylib path to our library search path, llvm-config may\n+// break: the dylib path for the compiler, as of this writing, contains a copy of the LLVM\n+// shared library, which means that when our freshly built llvm-config goes to load it's\n+// associated LLVM, it actually loads the compiler's LLVM. In particular when building the first\n+// compiler (i.e., in stage 0) that's a problem, as the compiler's LLVM is likely different from\n+// the one we want to use. As such, we restore the environment to what bootstrap saw. This isn't\n+// perfect -- we might actually want to see something from Cargo's added library paths -- but\n+// for now it works.\n+pub fn restore_library_path() {\n+    println!(\"cargo:rerun-if-env-changed=REAL_LIBRARY_PATH_VAR\");\n+    println!(\"cargo:rerun-if-env-changed=REAL_LIBRARY_PATH\");\n+    let key = env::var_os(\"REAL_LIBRARY_PATH_VAR\").expect(\"REAL_LIBRARY_PATH_VAR\");\n+    if let Some(env) = env::var_os(\"REAL_LIBRARY_PATH\") {\n+        env::set_var(&key, &env);\n+    } else {\n+        env::remove_var(&key);\n+    }\n+}\n+\n pub fn run(cmd: &mut Command) {\n     println!(\"running: {:?}\", cmd);\n     run_silent(cmd);"}, {"sha": "78ec91d9e3e9b90e84d9150360bb3d9e681634b5", "filename": "src/liballoc/benches/vec_deque_append.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fliballoc%2Fbenches%2Fvec_deque_append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fliballoc%2Fbenches%2Fvec_deque_append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fvec_deque_append.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,4 +1,3 @@\n-#![cfg_attr(stage0, feature(duration_as_u128))]\n use std::{collections::VecDeque, time::Instant};\n \n const VECDEQUE_LEN: i32 = 100000;"}, {"sha": "94ae43237d19c3309d732cecfc756f747888e6ea", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -2,7 +2,7 @@ use std::cmp;\n use std::collections::BinaryHeap;\n use std::collections::binary_heap::{Drain, PeekMut};\n use std::panic::{self, AssertUnwindSafe};\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n use rand::{thread_rng, seq::SliceRandom};\n \n@@ -283,7 +283,7 @@ fn assert_covariance() {\n // Destructors must be called exactly once per element.\n #[test]\n fn panic_safe() {\n-    static DROP_COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;\n+    static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n \n     #[derive(Eq, PartialEq, Ord, Clone, Debug)]\n     struct PanicOrd<T>(T, bool);"}, {"sha": "0300bd7f3f6d4bb1f7ac0ba58ae66c797a8557cb", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -5,7 +5,7 @@ use std::mem;\n use std::panic;\n use std::rc::Rc;\n use std::sync::atomic::Ordering::Relaxed;\n-use std::sync::atomic::{ATOMIC_USIZE_INIT, AtomicUsize};\n+use std::sync::atomic::AtomicUsize;\n use std::thread;\n \n use rand::{Rng, RngCore, thread_rng, seq::SliceRandom};\n@@ -1500,7 +1500,7 @@ static DROP_COUNTS: [AtomicUsize; MAX_LEN] = [\n     AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n ];\n \n-static VERSIONS: AtomicUsize = ATOMIC_USIZE_INIT;\n+static VERSIONS: AtomicUsize = AtomicUsize::new(0);\n \n #[derive(Clone, Eq)]\n struct DropCounter {"}, {"sha": "e66a8465370433386ec71b7fa228623d63b1d558", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -692,7 +692,6 @@ extern \"rust-intrinsic\" {\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n     /// This will statically either panic, or do nothing.\n-    #[cfg(not(stage0))]\n     pub fn panic_if_uninhabited<T>();\n \n     /// Creates a value initialized to zero."}, {"sha": "45ef7fe70a0e7fef38f7e3608cd537d340da8b1d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -71,7 +71,6 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n #![feature(const_fn)]\n-#![cfg_attr(stage0, feature(const_int_ops))]\n #![feature(const_fn_union)]\n #![feature(custom_attribute)]\n #![feature(doc_cfg)]\n@@ -112,19 +111,17 @@\n #![feature(aarch64_target_feature)]\n #![feature(wasm_target_feature)]\n #![feature(avx512_target_feature)]\n-#![cfg_attr(not(stage0), feature(cmpxchg16b_target_feature))]\n+#![feature(cmpxchg16b_target_feature)]\n #![feature(const_slice_len)]\n #![feature(const_str_as_bytes)]\n #![feature(const_str_len)]\n-#![cfg_attr(stage0, feature(const_let))]\n-#![cfg_attr(stage0, feature(const_int_rotate))]\n #![feature(const_int_conversion)]\n #![feature(const_transmute)]\n #![feature(reverse_bits)]\n #![feature(non_exhaustive)]\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]\n-#![cfg_attr(not(stage0), feature(adx_target_feature))]\n+#![feature(adx_target_feature)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "0eeac5e1ea940e40abe89eaf47119bae5aac517b", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -491,7 +491,6 @@ pub const fn needs_drop<T>() -> bool {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn zeroed<T>() -> T {\n-    #[cfg(not(stage0))]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n }\n@@ -625,7 +624,6 @@ pub unsafe fn zeroed<T>() -> T {\n #[rustc_deprecated(since = \"2.0.0\", reason = \"use `mem::MaybeUninit::uninitialized` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn uninitialized<T>() -> T {\n-    #[cfg(not(stage0))]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()\n }\n@@ -1104,7 +1102,6 @@ impl<T> MaybeUninit<T> {\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub unsafe fn into_inner(self) -> T {\n-        #[cfg(not(stage0))]\n         intrinsics::panic_if_uninhabited::<T>();\n         ManuallyDrop::into_inner(self.value)\n     }"}, {"sha": "c3a42a0fc04948c6db5d80e50939504789075a26", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -46,17 +46,6 @@ macro_rules! impl_full_ops {\n     ($($ty:ty: add($addfn:path), mul/div($bigty:ident);)*) => (\n         $(\n             impl FullOps for $ty {\n-                #[cfg(stage0)]\n-                fn full_add(self, other: $ty, carry: bool) -> (bool, $ty) {\n-                    // This cannot overflow; the output is between `0` and `2 * 2^nbits - 1`.\n-                    // FIXME: will LLVM optimize this into ADC or similar?\n-                    let (v, carry1) = unsafe { intrinsics::add_with_overflow(self, other) };\n-                    let (v, carry2) = unsafe {\n-                        intrinsics::add_with_overflow(v, if carry {1} else {0})\n-                    };\n-                    (carry1 || carry2, v)\n-                }\n-                #[cfg(not(stage0))]\n                 fn full_add(self, other: $ty, carry: bool) -> (bool, $ty) {\n                     // This cannot overflow; the output is between `0` and `2 * 2^nbits - 1`.\n                     // FIXME: will LLVM optimize this into ADC or similar?"}, {"sha": "7cf2317f4b37f45b6fb164cb88dc90fa5cb4e9df", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 129, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -281,7 +281,6 @@ $EndFeature, \"\n ```\n \"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n         }\n@@ -297,7 +296,6 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -318,7 +316,6 @@ assert_eq!(n.leading_zeros(), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n                 (self as $UnsignedT).leading_zeros()\n@@ -339,7 +336,6 @@ assert_eq!(n.trailing_zeros(), 2);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n                 (self as $UnsignedT).trailing_zeros()\n@@ -363,7 +359,6 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_rotate\"))]\n             #[inline]\n             pub const fn rotate_left(self, n: u32) -> Self {\n                 (self as $UnsignedT).rotate_left(n) as Self\n@@ -388,7 +383,6 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_rotate\"))]\n             #[inline]\n             pub const fn rotate_right(self, n: u32) -> Self {\n                 (self as $UnsignedT).rotate_right(n) as Self\n@@ -410,7 +404,6 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n                 (self as $UnsignedT).swap_bytes() as Self\n@@ -460,7 +453,6 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -494,7 +486,6 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -528,7 +519,6 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -562,7 +552,6 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -998,14 +987,8 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_add(2), \", stringify!(\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n-                unsafe {\n-                    intrinsics::overflowing_add(self, rhs)\n-                }\n-                #[cfg(not(stage0))]\n                 intrinsics::overflowing_add(self, rhs)\n             }\n         }\n@@ -1025,14 +1008,8 @@ stringify!($SelfT), \"::max_value());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n-                unsafe {\n-                    intrinsics::overflowing_sub(self, rhs)\n-                }\n-                #[cfg(not(stage0))]\n                 intrinsics::overflowing_sub(self, rhs)\n             }\n         }\n@@ -1051,14 +1028,8 @@ assert_eq!(11i8.wrapping_mul(12), -124);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n-                unsafe {\n-                    intrinsics::overflowing_mul(self, rhs)\n-                }\n-                #[cfg(not(stage0))]\n                 intrinsics::overflowing_mul(self, rhs)\n             }\n         }\n@@ -1218,7 +1189,6 @@ assert_eq!((-1\", stringify!($SelfT), \").wrapping_shl(128), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -1246,7 +1216,6 @@ assert_eq!((-128i16).wrapping_shr(64), -128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -1343,14 +1312,8 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (\", stringify!($Sel\n \"::MIN, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n             #[inline]\n             pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n-                #[cfg(stage0)]\n-                let (a, b) = unsafe {\n-                    intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT)\n-                };\n-                #[cfg(not(stage0))]\n                 let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);\n                 (a as Self, b)\n             }\n@@ -1374,14 +1337,8 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_sub(1), (\", stringify!($Sel\n \"::MAX, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n             #[inline]\n             pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n-                #[cfg(stage0)]\n-                let (a, b) = unsafe {\n-                    intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT)\n-                };\n-                #[cfg(not(stage0))]\n                 let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);\n                 (a as Self, b)\n             }\n@@ -1403,14 +1360,8 @@ assert_eq!(1_000_000_000i32.overflowing_mul(10), (1410065408, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n             #[inline]\n             pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n-                #[cfg(stage0)]\n-                let (a, b) = unsafe {\n-                    intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT)\n-                };\n-                #[cfg(not(stage0))]\n                 let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);\n                 (a as Self, b)\n             }\n@@ -1594,7 +1545,6 @@ assert_eq!(0x1i32.overflowing_shl(36), (0x10, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n             #[inline]\n             pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n@@ -1618,7 +1568,6 @@ assert_eq!(0x10i32.overflowing_shr(36), (0x1, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n             #[inline]\n             pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n@@ -2242,13 +2191,9 @@ Basic usage:\n assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_ones(self) -> u32 {\n-                #[cfg(stage0)]\n-                unsafe { intrinsics::ctpop(self as $ActualT) as u32 }\n-                #[cfg(not(stage0))]\n-                { intrinsics::ctpop(self as $ActualT) as u32 }\n+                intrinsics::ctpop(self as $ActualT) as u32\n             }\n         }\n \n@@ -2263,7 +2208,6 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -2283,13 +2227,9 @@ Basic usage:\n assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n-                #[cfg(stage0)]\n-                unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n-                #[cfg(not(stage0))]\n-                { intrinsics::ctlz(self as $ActualT) as u32 }\n+                intrinsics::ctlz(self as $ActualT) as u32\n             }\n         }\n \n@@ -2307,13 +2247,9 @@ Basic usage:\n assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n-                #[cfg(stage0)]\n-                unsafe { intrinsics::cttz(self) as u32 }\n-                #[cfg(not(stage0))]\n-                { intrinsics::cttz(self) as u32 }\n+                intrinsics::cttz(self) as u32\n             }\n         }\n \n@@ -2334,12 +2270,8 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_rotate\"))]\n             #[inline]\n             pub const fn rotate_left(self, n: u32) -> Self {\n-                #[cfg(stage0)]\n-                unsafe { intrinsics::rotate_left(self, n as $SelfT) }\n-                #[cfg(not(stage0))]\n                 intrinsics::rotate_left(self, n as $SelfT)\n             }\n         }\n@@ -2362,12 +2294,8 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_rotate\"))]\n             #[inline]\n             pub const fn rotate_right(self, n: u32) -> Self {\n-                #[cfg(stage0)]\n-                unsafe { intrinsics::rotate_right(self, n as $SelfT) }\n-                #[cfg(not(stage0))]\n                 intrinsics::rotate_right(self, n as $SelfT)\n             }\n         }\n@@ -2387,13 +2315,9 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n-                #[cfg(stage0)]\n-                unsafe { intrinsics::bswap(self as $ActualT) as Self }\n-                #[cfg(not(stage0))]\n-                { intrinsics::bswap(self as $ActualT) as Self }\n+                intrinsics::bswap(self as $ActualT) as Self\n             }\n         }\n \n@@ -2413,13 +2337,9 @@ let m = n.reverse_bits();\n assert_eq!(m, \", $reversed, \");\n ```\"),\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_conversion\"))]\n             #[inline]\n             pub const fn reverse_bits(self) -> Self {\n-                #[cfg(stage0)]\n-                unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n-                #[cfg(not(stage0))]\n-                { intrinsics::bitreverse(self as $ActualT) as Self }\n+                intrinsics::bitreverse(self as $ActualT) as Self\n             }\n         }\n \n@@ -2443,7 +2363,6 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -2477,7 +2396,6 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2511,7 +2429,6 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -2545,7 +2462,6 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_ops\"))]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2918,14 +2834,8 @@ assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_add(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n-                unsafe {\n-                    intrinsics::overflowing_add(self, rhs)\n-                }\n-                #[cfg(not(stage0))]\n                 intrinsics::overflowing_add(self, rhs)\n             }\n         }\n@@ -2944,14 +2854,8 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_sub(self, rhs: Self) -> Self {\n-                #[cfg(stage0)]\n-                unsafe {\n-                    intrinsics::overflowing_sub(self, rhs)\n-                }\n-                #[cfg(not(stage0))]\n                 intrinsics::overflowing_sub(self, rhs)\n             }\n         }\n@@ -2971,14 +2875,8 @@ $EndFeature, \"\n         /// assert_eq!(25u8.wrapping_mul(12), 44);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n         #[inline]\n         pub const fn wrapping_mul(self, rhs: Self) -> Self {\n-            #[cfg(stage0)]\n-            unsafe {\n-                intrinsics::overflowing_mul(self, rhs)\n-            }\n-            #[cfg(not(stage0))]\n             intrinsics::overflowing_mul(self, rhs)\n         }\n \n@@ -3124,7 +3022,6 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".wrapping_shl(128), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shl(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -3154,7 +3051,6 @@ Basic usage:\n assert_eq!(128\", stringify!($SelfT), \".wrapping_shr(128), 128);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_wrapping\"))]\n             #[inline]\n             pub const fn wrapping_shr(self, rhs: u32) -> Self {\n                 unsafe {\n@@ -3218,14 +3114,8 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\n assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (0, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n             #[inline]\n             pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n-                #[cfg(stage0)]\n-                let (a, b) = unsafe {\n-                    intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT)\n-                };\n-                #[cfg(not(stage0))]\n                 let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);\n                 (a as Self, b)\n             }\n@@ -3250,14 +3140,8 @@ assert_eq!(0\", stringify!($SelfT), \".overflowing_sub(1), (\", stringify!($SelfT),\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n             #[inline]\n             pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n-                #[cfg(stage0)]\n-                let (a, b) = unsafe {\n-                    intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT)\n-                };\n-                #[cfg(not(stage0))]\n                 let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);\n                 (a as Self, b)\n             }\n@@ -3281,14 +3165,8 @@ $EndFeature, \"\n         /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-        #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n         #[inline]\n         pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n-            #[cfg(stage0)]\n-            let (a, b) = unsafe {\n-                intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT)\n-            };\n-            #[cfg(not(stage0))]\n             let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);\n             (a as Self, b)\n         }\n@@ -3447,7 +3325,6 @@ Basic usage\n assert_eq!(0x1\", stringify!($SelfT), \".overflowing_shl(132), (0x10, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n             #[inline]\n             pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))\n@@ -3472,7 +3349,6 @@ Basic usage\n assert_eq!(0x10\", stringify!($SelfT), \".overflowing_shr(132), (0x1, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_int_overflowing\"))]\n             #[inline]\n             pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))"}, {"sha": "eb76c2de11bec3076002c0e3f6f1be4616f91c29", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -171,7 +171,7 @@ impl<T: ?Sized> DerefMut for &mut T {\n /// Indicates that a struct can be used as a method receiver, without the\n /// `arbitrary_self_types` feature. This is implemented by stdlib pointer types like `Box<T>`,\n /// `Rc<T>`, `&T`, and `Pin<P>`.\n-#[cfg_attr(not(stage0), lang = \"receiver\")]\n+#[lang = \"receiver\"]\n #[unstable(feature = \"receiver_trait\", issue = \"0\")]\n #[doc(hidden)]\n pub trait Receiver {"}, {"sha": "bcedff5abc70c0aba73f766ea5088369e55a7c97", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -2413,12 +2413,11 @@ pub fn fence(order: Ordering) {\n ///\n /// ```\n /// use std::sync::atomic::{AtomicBool, AtomicUsize};\n-/// use std::sync::atomic::{ATOMIC_BOOL_INIT, ATOMIC_USIZE_INIT};\n /// use std::sync::atomic::Ordering;\n /// use std::sync::atomic::compiler_fence;\n ///\n-/// static IMPORTANT_VARIABLE: AtomicUsize = ATOMIC_USIZE_INIT;\n-/// static IS_READY: AtomicBool = ATOMIC_BOOL_INIT;\n+/// static IMPORTANT_VARIABLE: AtomicUsize = AtomicUsize::new(0);\n+/// static IS_READY: AtomicBool = AtomicBool::new(false);\n ///\n /// fn main() {\n ///     IMPORTANT_VARIABLE.store(42, Ordering::Relaxed);"}, {"sha": "f6306d23c30c0f1a9d4ee5c52e967366121dba44", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -12,7 +12,6 @@\n #![panic_runtime]\n #![allow(unused_features)]\n \n-#![cfg_attr(stage0, feature(cfg_target_vendor))]\n #![feature(core_intrinsics)]\n #![feature(libc)]\n #![feature(nll)]"}, {"sha": "b42d775deb393f45b70c8904cf3ea5bd1814ddb0", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -8,6 +8,8 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        build_helper::restore_library_path();\n+\n         let (native, target) = match sanitizer_lib_boilerplate(\"asan\") {\n             Ok(native) => native,\n             _ => return,"}, {"sha": "a95ce810ffaeba4af138c518fa3495677b6d8c4f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -91,7 +91,7 @@ use std::panic;\n use std::path::{PathBuf, Path};\n use std::process::{self, Command, Stdio};\n use std::str;\n-use std::sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n+use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::{Once, ONCE_INIT};\n use std::thread;\n \n@@ -254,7 +254,7 @@ fn get_codegen_sysroot(backend_name: &str) -> fn() -> Box<dyn CodegenBackend> {\n     // general this assertion never trips due to the once guard in `get_codegen_backend`,\n     // but there's a few manual calls to this function in this file we protect\n     // against.\n-    static LOADED: AtomicBool = ATOMIC_BOOL_INIT;\n+    static LOADED: AtomicBool = AtomicBool::new(false);\n     assert!(!LOADED.fetch_or(true, Ordering::SeqCst),\n             \"cannot load the default codegen backend twice\");\n "}, {"sha": "cd91fcb2995eeb41ab50471cc2f9d05f9b31a7fe", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -24,6 +24,8 @@ fn main() {\n         return;\n     }\n \n+    build_helper::restore_library_path();\n+\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let llvm_config = env::var_os(\"LLVM_CONFIG\")\n         .map(PathBuf::from)"}, {"sha": "ad528bb03902c8f39d963de6af07297e89adc943", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -8,6 +8,8 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        build_helper::restore_library_path();\n+\n         let (native, target) = match sanitizer_lib_boilerplate(\"lsan\") {\n             Ok(native) => native,\n             _ => return,"}, {"sha": "74394165a5f84c9e7c55a6eaa0652b6c4fcbfd58", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1127,9 +1127,9 @@ A borrow of a constant containing interior mutability was attempted. Erroneous\n code example:\n \n ```compile_fail,E0492\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::AtomicUsize;\n \n-const A: AtomicUsize = ATOMIC_USIZE_INIT;\n+const A: AtomicUsize = AtomicUsize::new(0);\n static B: &'static AtomicUsize = &A;\n // error: cannot borrow a constant which may contain interior mutability,\n //        create a static instead\n@@ -1145,9 +1145,9 @@ explicitly a single memory location, which can be mutated at will.\n So, in order to solve this error, either use statics which are `Sync`:\n \n ```\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::AtomicUsize;\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n static B: &'static AtomicUsize = &A; // ok!\n ```\n "}, {"sha": "ccfc15bac042ce26bd66c6a2b592964ca947a1a0", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -24,10 +24,8 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(unicode_internals)]\n #![feature(step_trait)]\n #![feature(slice_concat_ext)]\n-#![cfg_attr(stage0, feature(if_while_or_patterns))]\n #![feature(try_from)]\n #![feature(reverse_bits)]\n-#![cfg_attr(stage0, feature(underscore_imports))]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "085514b5a01084d15e25d7d2c73c4e3254962cb3", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -8,6 +8,8 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        build_helper::restore_library_path();\n+\n         let (native, target) = match sanitizer_lib_boilerplate(\"msan\") {\n             Ok(native) => native,\n             _ => return,"}, {"sha": "0db3db392dddcd1bd19292316099eb3206119e02", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -8,6 +8,8 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        build_helper::restore_library_path();\n+\n         let (native, target) = match sanitizer_lib_boilerplate(\"tsan\") {\n             Ok(native) => native,\n             _ => return,"}, {"sha": "8b6e5680c2d6c324159678da3e4da9b057243273", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -95,11 +95,11 @@ pub use alloc_crate::alloc::*;\n ///\n /// ```rust\n /// use std::alloc::{System, GlobalAlloc, Layout};\n-/// use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering::SeqCst};\n+/// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n ///\n /// struct Counter;\n ///\n-/// static ALLOCATED: AtomicUsize = ATOMIC_USIZE_INIT;\n+/// static ALLOCATED: AtomicUsize = AtomicUsize::new(0);\n ///\n /// unsafe impl GlobalAlloc for Counter {\n ///     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {"}, {"sha": "c94a33da0379078b7331cb7024134b2fe27dbd29", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -234,12 +234,9 @@\n #![feature(c_variadic)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n-#![cfg_attr(stage0, feature(cfg_target_vendor))]\n #![feature(char_error_internals)]\n #![feature(compiler_builtins_lib)]\n #![feature(concat_idents)]\n-#![cfg_attr(stage0, feature(const_int_ops))]\n-#![cfg_attr(stage0, feature(const_ip))]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_cstr_unchecked)]\n #![feature(core_intrinsics)]"}, {"sha": "f45cd8b8c101acec1b3abfafe4a21ac61890010f", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -328,7 +328,6 @@ impl Ipv4Addr {\n     /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(stage0, rustc_const_unstable(feature = \"const_ip\"))]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         Ipv4Addr {\n             inner: c::in_addr {"}, {"sha": "a1929b941659d9c0d9b005f5f1f8e9f2d4f8af75", "filename": "src/libstd/sys/redox/thread_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fthread_local.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -2,13 +2,13 @@\n \n use collections::BTreeMap;\n use ptr;\n-use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use sync::atomic::{AtomicUsize, Ordering};\n \n pub type Key = usize;\n \n type Dtor = unsafe extern fn(*mut u8);\n \n-static NEXT_KEY: AtomicUsize = ATOMIC_USIZE_INIT;\n+static NEXT_KEY: AtomicUsize = AtomicUsize::new(0);\n \n static mut KEYS: *mut BTreeMap<Key, Option<Dtor>> = ptr::null_mut();\n "}, {"sha": "b8e09d58debaddb4b4c99971092f83c47216d275", "filename": "src/libstd/sys/sgx/abi/tls.rs", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,4 +1,4 @@\n-use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use sync::atomic::{AtomicUsize, Ordering};\n use ptr;\n use mem;\n use cell::Cell;\n@@ -15,7 +15,40 @@ macro_rules! dup {\n     ((* $($exp:tt)*) $($val:tt)*) => (dup!( ($($exp)*) $($val)* $($val)* ));\n     (() $($val:tt)*) => ([$($val),*])\n }\n-static TLS_DESTRUCTOR: [AtomicUsize; TLS_KEYS] = dup!((* * * * * * *) ATOMIC_USIZE_INIT);\n+static TLS_DESTRUCTOR: [AtomicUsize; TLS_KEYS] = [\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+    AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0), AtomicUsize::new(0),\n+];\n \n extern \"C\" {\n     fn get_tls_ptr() -> *const u8;\n@@ -119,7 +152,7 @@ impl Tls {\n }\n \n mod sync_bitset {\n-    use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+    use sync::atomic::{AtomicUsize, Ordering};\n     use iter::{Enumerate, Peekable};\n     use slice::Iter;\n     use super::{TLS_KEYS_BITSET_SIZE, USIZE_BITS};\n@@ -128,7 +161,7 @@ mod sync_bitset {\n     pub(super) struct SyncBitset([AtomicUsize; TLS_KEYS_BITSET_SIZE]);\n \n     pub(super) const SYNC_BITSET_INIT: SyncBitset =\n-        SyncBitset([ATOMIC_USIZE_INIT, ATOMIC_USIZE_INIT]);\n+        SyncBitset([AtomicUsize::new(0), AtomicUsize::new(0)]);\n \n     impl SyncBitset {\n         pub fn get(&self, index: usize) -> bool {"}, {"sha": "a746d982c6ca9d4db144d9ab20de5c0ba2cb083a", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,7 +1,7 @@\n use io;\n use libc::{self, c_int};\n use mem;\n-use sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n+use sync::atomic::{AtomicBool, Ordering};\n use sys::fd::FileDesc;\n use sys::{cvt, cvt_r};\n \n@@ -13,7 +13,7 @@ pub struct AnonPipe(FileDesc);\n \n pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n     syscall! { fn pipe2(fds: *mut c_int, flags: c_int) -> c_int }\n-    static INVALID: AtomicBool = ATOMIC_BOOL_INIT;\n+    static INVALID: AtomicBool = AtomicBool::new(false);\n \n     let mut fds = [0; 2];\n "}, {"sha": "0d9195a5c971672b9f4007ab2defd67c46a8bf3f", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -7,7 +7,7 @@ use path::Path;\n use ptr;\n use slice;\n use sync::atomic::Ordering::SeqCst;\n-use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+use sync::atomic::AtomicUsize;\n use sys::c;\n use sys::fs::{File, OpenOptions};\n use sys::handle::Handle;\n@@ -148,7 +148,7 @@ pub fn anon_pipe(ours_readable: bool) -> io::Result<Pipes> {\n }\n \n fn random_number() -> usize {\n-    static N: AtomicUsize = ATOMIC_USIZE_INIT;\n+    static N: AtomicUsize = AtomicUsize::new(0);\n     loop {\n         if N.load(SeqCst) != 0 {\n             return N.fetch_add(1, SeqCst)"}, {"sha": "c8eceeeaa5a812c2cdf8003175a84de31bcc2b2e", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -23,7 +23,6 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n #![feature(asm)]\n-#![cfg_attr(stage0, feature(cfg_target_vendor))]\n #![feature(fnbox)]\n #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc, rustc_private))]\n #![feature(nll)]"}, {"sha": "5f9c82431b7867278054b5f8d7a9aa7fed0e167f", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,7 +1,6 @@\n #![no_std]\n #![unstable(feature = \"panic_unwind\", issue = \"32837\")]\n \n-#![cfg_attr(stage0, feature(cfg_target_vendor))]\n #![feature(link_cfg)]\n #![feature(nll)]\n #![feature(staged_api)]"}, {"sha": "36d30b7d27342642d2e703ef8074a2ddbf4303ce", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2019-01-04\n+date: 2019-01-18\n rustc: beta\n cargo: beta\n "}, {"sha": "4f33b1c59e0848c9be4d97b33814292eff6a0537", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/Makefile", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,6 +1,9 @@\n-\n -include ../tools.mk\n \n+# ignore windows due to libLLVM being present in PATH and the PATH and library path being the same\n+# (so fixing it is harder). See #57765 for context\n+ifndef IS_WINDOWS\n+\n # This test makes sure that we don't loose upstream object files when compiling\n # staticlibs with -Zcross-lang-lto\n \n@@ -9,7 +12,7 @@ all: staticlib.rs upstream.rs\n \n \t# Check No LTO\n \t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -L. -o $(TMPDIR)/staticlib.a\n-\t(cd $(TMPDIR); llvm-ar x ./staticlib.a)\n+\t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n \t# Make sure the upstream object file was included\n \tls $(TMPDIR)/upstream.*.rcgu.o\n \n@@ -19,5 +22,11 @@ all: staticlib.rs upstream.rs\n \t# Check ThinLTO\n \t$(RUSTC) upstream.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin\n \t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin -L. -o $(TMPDIR)/staticlib.a\n-\t(cd $(TMPDIR); llvm-ar x ./staticlib.a)\n+\t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n \tls $(TMPDIR)/upstream.*.rcgu.o\n+\n+else\n+\n+all:\n+\n+endif"}, {"sha": "57a19a0ccb0370fb0d360ea591e8986bcc11eef3", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,12 +1,17 @@\n \n -include ../tools.mk\n \n+# ignore windows due to libLLVM being present in PATH and the PATH and library path being the same\n+# (so fixing it is harder). See #57765 for context\n+ifndef IS_WINDOWS\n+\n # This test makes sure that the object files we generate are actually\n # LLVM bitcode files (as used by linker LTO plugins) when compiling with\n # -Z cross-lang-lto.\n \n-ASSERT_IS_BITCODE_OBJ=llvm-bcanalyzer # this only succeeds for bitcode files\n-EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; llvm-ar x $(1))\n+# this only succeeds for bitcode files\n+ASSERT_IS_BITCODE_OBJ=($(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-bcanalyzer $(1))\n+EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x $(1))\n \n BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1\n BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1 --emit=obj\n@@ -16,31 +21,37 @@ all: staticlib staticlib-fat-lto staticlib-thin-lto rlib exe cdylib rdylib\n staticlib: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib.a\n \t$(call EXTRACT_OBJS, liblib.a)\n-\tfor file in $(TMPDIR)/liblib.*.rcgu.o; do $(ASSERT_IS_BITCODE_OBJ) $$file; done\n+\tfor file in $(TMPDIR)/liblib.*.rcgu.o; do $(call ASSERT_IS_BITCODE_OBJ, $$file); done\n \n staticlib-fat-lto: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-fat-lto.a -Clto=fat\n \t$(call EXTRACT_OBJS, liblib-fat-lto.a)\n-\tfor file in $(TMPDIR)/liblib-fat-lto.*.rcgu.o; do $(ASSERT_IS_BITCODE_OBJ) $$file; done\n+\tfor file in $(TMPDIR)/liblib-fat-lto.*.rcgu.o; do $(call ASSERT_IS_BITCODE_OBJ, $$file); done\n \n staticlib-thin-lto: lib.rs\n \t$(BUILD_LIB) --crate-type=staticlib -o $(TMPDIR)/liblib-thin-lto.a -Clto=thin\n \t$(call EXTRACT_OBJS, liblib-thin-lto.a)\n-\tfor file in $(TMPDIR)/liblib-thin-lto.*.rcgu.o; do $(ASSERT_IS_BITCODE_OBJ) $$file; done\n+\tfor file in $(TMPDIR)/liblib-thin-lto.*.rcgu.o; do $(call ASSERT_IS_BITCODE_OBJ, $$file); done\n \n rlib: lib.rs\n \t$(BUILD_LIB) --crate-type=rlib -o $(TMPDIR)/liblib.rlib\n \t$(call EXTRACT_OBJS, liblib.rlib)\n-\tfor file in $(TMPDIR)/liblib.*.rcgu.o; do $(ASSERT_IS_BITCODE_OBJ) $$file; done\n+\tfor file in $(TMPDIR)/liblib.*.rcgu.o; do $(call ASSERT_IS_BITCODE_OBJ, $$file); done\n \n cdylib: lib.rs\n \t$(BUILD_LIB) --crate-type=cdylib --emit=obj -o $(TMPDIR)/cdylib.o\n-\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/cdylib.o\n+\t$(call ASSERT_IS_BITCODE_OBJ, $(TMPDIR)/cdylib.o)\n \n rdylib: lib.rs\n \t$(BUILD_LIB) --crate-type=dylib --emit=obj -o $(TMPDIR)/rdylib.o\n-\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/rdylib.o\n+\t$(call ASSERT_IS_BITCODE_OBJ, $(TMPDIR)/rdylib.o)\n \n exe: lib.rs\n \t$(BUILD_EXE) -o $(TMPDIR)/exe.o\n-\t$(ASSERT_IS_BITCODE_OBJ) $(TMPDIR)/exe.o\n+\t$(call ASSERT_IS_BITCODE_OBJ, $(TMPDIR)/exe.o)\n+\n+else\n+\n+all:\n+\n+endif"}, {"sha": "a5e96e7750184a5e1e4bd0e3dd6891f858ae2db0", "filename": "src/test/run-pass/allocator/auxiliary/custom-as-global.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom-as-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom-as-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom-as-global.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -4,12 +4,12 @@\n \n extern crate custom;\n \n-use std::sync::atomic::{ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n use custom::A;\n \n #[global_allocator]\n-static ALLOCATOR: A = A(ATOMIC_USIZE_INIT);\n+static ALLOCATOR: A = A(AtomicUsize::new(0));\n \n pub fn get() -> usize {\n     ALLOCATOR.0.load(Ordering::SeqCst)"}, {"sha": "71f72ae46c23f26a673a4ae5cf5840c2bdd2a57a", "filename": "src/test/run-pass/allocator/custom.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fallocator%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fallocator%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fcustom.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -8,9 +8,9 @@\n extern crate helper;\n \n use std::alloc::{self, Global, Alloc, System, Layout};\n-use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static HITS: AtomicUsize = ATOMIC_USIZE_INIT;\n+static HITS: AtomicUsize = AtomicUsize::new(0);\n \n struct A;\n "}, {"sha": "039c70e77bedfb10beea0bf3dbb9c0287237c8ee", "filename": "src/test/run-pass/allocator/xcrate-use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -10,10 +10,10 @@ extern crate custom;\n extern crate helper;\n \n use std::alloc::{Global, Alloc, System, Layout};\n-use std::sync::atomic::{Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{Ordering, AtomicUsize};\n \n #[global_allocator]\n-static GLOBAL: custom::A = custom::A(ATOMIC_USIZE_INIT);\n+static GLOBAL: custom::A = custom::A(AtomicUsize::new(0));\n \n fn main() {\n     unsafe {"}, {"sha": "d8478fb5eaa41960bf1551ab34dfbfb2e8f847a4", "filename": "src/test/run-pass/allocator/xcrate-use2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator%2Fxcrate-use2.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -12,9 +12,9 @@ extern crate custom_as_global;\n extern crate helper;\n \n use std::alloc::{alloc, dealloc, GlobalAlloc, System, Layout};\n-use std::sync::atomic::{Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static GLOBAL: custom::A = custom::A(ATOMIC_USIZE_INIT);\n+static GLOBAL: custom::A = custom::A(AtomicUsize::new(0));\n \n fn main() {\n     unsafe {\n@@ -45,4 +45,3 @@ fn main() {\n         assert_eq!(GLOBAL.0.load(Ordering::SeqCst), 2);\n     }\n }\n-"}, {"sha": "8522493232f98dcad580658a7d1238953413cd7d", "filename": "src/test/run-pass/atomic-access-bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fatomic-access-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fatomic-access-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-access-bool.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,9 +1,9 @@\n #![allow(stable_features)]\n #![feature(atomic_access)]\n-use std::sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT};\n+use std::sync::atomic::AtomicBool;\n use std::sync::atomic::Ordering::*;\n \n-static mut ATOMIC: AtomicBool = ATOMIC_BOOL_INIT;\n+static mut ATOMIC: AtomicBool = AtomicBool::new(false);\n \n fn main() {\n     unsafe {"}, {"sha": "77da820e07c56c2dfd3c6b8869d46d2deb6d80f9", "filename": "src/test/run-pass/atomic-compare_exchange.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fatomic-compare_exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fatomic-compare_exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-compare_exchange.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,10 +1,10 @@\n #![allow(stable_features)]\n \n #![feature(extended_compare_and_swap)]\n-use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT};\n+use std::sync::atomic::AtomicIsize;\n use std::sync::atomic::Ordering::*;\n \n-static ATOMIC: AtomicIsize = ATOMIC_ISIZE_INIT;\n+static ATOMIC: AtomicIsize = AtomicIsize::new(0);\n \n fn main() {\n     // Make sure codegen can emit all the intrinsics correctly"}, {"sha": "78d74a11ffc8b4e96fd19d75ed87664b20e2ccf2", "filename": "src/test/run-pass/deriving/deriving-copyclone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-copyclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-copyclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving%2Fderiving-copyclone.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -2,15 +2,15 @@\n //! Test that #[derive(Copy, Clone)] produces a shallow copy\n //! even when a member violates RFC 1521\n \n-use std::sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT, Ordering};\n+use std::sync::atomic::{AtomicBool, Ordering};\n \n /// A struct that pretends to be Copy, but actually does something\n /// in its Clone impl\n #[derive(Copy)]\n struct Liar;\n \n /// Static cooperating with the rogue Clone impl\n-static CLONED: AtomicBool = ATOMIC_BOOL_INIT;\n+static CLONED: AtomicBool = AtomicBool::new(false);\n \n impl Clone for Liar {\n     fn clone(&self) -> Self {\n@@ -36,4 +36,3 @@ fn main() {\n     // if Innocent was byte-for-byte copied, CLONED will still be false\n     assert!(!CLONED.load(Ordering::SeqCst));\n }\n-"}, {"sha": "766eef9e3f3c34525a7a420839466934ab13e1be", "filename": "src/test/run-pass/generator/conditional-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fconditional-drop.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -3,9 +3,9 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n \n struct B;\n "}, {"sha": "252f2c0f07da70deb3274fec2635be1a329e48df", "filename": "src/test/run-pass/generator/drop-env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -3,9 +3,9 @@\n #![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n \n struct B;\n "}, {"sha": "8640a6539195b27b52f1557b070fc13a7adc8b61", "filename": "src/test/run-pass/generator/panic-drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -6,9 +6,9 @@\n \n use std::ops::Generator;\n use std::panic;\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n \n struct B;\n "}, {"sha": "fa23ae8f95bee94fc6e37f4b2842e6b5a0e93ba1", "filename": "src/test/run-pass/issues/issue-34053.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-34053.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n-static DROP_COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;\n+static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n \n struct A(i32);\n "}, {"sha": "d865c3499b2703dac6e770424309c3077c314e18", "filename": "src/test/run-pass/mir/mir_fat_ptr_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fmir%2Fmir_fat_ptr_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fmir%2Fmir_fat_ptr_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir%2Fmir_fat_ptr_drop.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -10,7 +10,7 @@\n use std::sync::atomic;\n use std::sync::atomic::Ordering::SeqCst;\n \n-static COUNTER: atomic::AtomicUsize = atomic::ATOMIC_USIZE_INIT;\n+static COUNTER: atomic::AtomicUsize = atomic::AtomicUsize::new(0);\n \n struct DropMe {\n }"}, {"sha": "7969336ca749bacf1e97ba991de8940fa26d44b1", "filename": "src/test/run-pass/panics/panic-recover-propagate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-recover-propagate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-recover-propagate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanics%2Fpanic-recover-propagate.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,11 +1,11 @@\n // run-pass\n // ignore-emscripten no threads support\n \n-use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::panic;\n use std::thread;\n \n-static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+static A: AtomicUsize = AtomicUsize::new(0);\n \n fn main() {\n     panic::set_hook(Box::new(|_| {"}, {"sha": "193c18151059a0a357cdcf401f8cfa4e948e38bc", "filename": "src/test/run-pass/threads-sendsync/tls-init-on-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Ftls-init-on-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Ftls-init-on-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Ftls-init-on-init.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -6,13 +6,13 @@\n #![feature(thread_local_try_with)]\n \n use std::thread;\n-use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n struct Foo { cnt: usize }\n \n thread_local!(static FOO: Foo = Foo::init());\n \n-static CNT: AtomicUsize = ATOMIC_USIZE_INIT;\n+static CNT: AtomicUsize = AtomicUsize::new(0);\n \n impl Foo {\n     fn init() -> Foo {"}, {"sha": "7477947b89ca4b9794a1243351e69a7026deeb77", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -10,7 +10,7 @@\n #![feature(thread_local)]\n \n #[thread_local]\n-static mut X: ::std::sync::atomic::AtomicUsize = ::std::sync::atomic::ATOMIC_USIZE_INIT;\n+static mut X: ::std::sync::atomic::AtomicUsize = ::std::sync::atomic::AtomicUsize::new(0);\n \n fn main() {\n     unsafe {"}, {"sha": "2de4c12eb64fbef3547c5a04c9a3198dac872b98", "filename": "src/test/ui/error-codes/E0492.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0492.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1,6 +1,6 @@\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n+use std::sync::atomic::AtomicUsize;\n \n-const A: AtomicUsize = ATOMIC_USIZE_INIT;\n+const A: AtomicUsize = AtomicUsize::new(0);\n static B: &'static AtomicUsize = &A; //~ ERROR E0492\n \n fn main() {"}, {"sha": "245818076052dd7178f5bb7585f5aec5b6c1e03e", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -1 +1 @@\n-Subproject commit 907c0febe7045fa02dff2a35c5e36d3bd59ea50d\n+Subproject commit 245818076052dd7178f5bb7585f5aec5b6c1e03e"}, {"sha": "3f56d4da6a3ed588392b744ac8cbc87314ab1df8", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -20,7 +20,7 @@ use std::os::unix::prelude::*;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::str;\n-use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::{Arc, Mutex};\n use std::thread;\n \n@@ -31,7 +31,7 @@ macro_rules! t {\n     })\n }\n \n-static TEST: AtomicUsize = ATOMIC_USIZE_INIT;\n+static TEST: AtomicUsize = AtomicUsize::new(0);\n \n struct Config {\n     pub remote: bool,"}, {"sha": "7126c0c2f6ecf1639e8c9d4e04be3addbdfe1f5f", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8611577360e66f90470bd40c498cf8d194f67926/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=8611577360e66f90470bd40c498cf8d194f67926", "patch": "@@ -188,7 +188,7 @@ pub fn collect_lang_features(base_src_path: &Path, bad: &mut bool) -> Features {\n             }\n \n             let mut parts = line.split(',');\n-            let level = match parts.next().map(|l| l.trim().trim_left_matches('(')) {\n+            let level = match parts.next().map(|l| l.trim().trim_start_matches('(')) {\n                 Some(\"active\") => Status::Unstable,\n                 Some(\"removed\") => Status::Removed,\n                 Some(\"accepted\") => Status::Stable,"}]}