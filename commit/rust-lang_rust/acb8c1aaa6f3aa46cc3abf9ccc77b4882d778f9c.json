{"sha": "acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYjhjMWFhYTZmM2FhNDZjYzNhYmY5Y2NjNzdiNDg4MmQ3NzhmOWM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-22T23:59:00Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-30T15:37:44Z"}, "message": "remove more `ExprForLoop`s", "tree": {"sha": "a99ae3f25dcf0c539fd2a069dc16a052315c1fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a99ae3f25dcf0c539fd2a069dc16a052315c1fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "html_url": "https://github.com/rust-lang/rust/commit/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/comments", "author": null, "committer": null, "parents": [{"sha": "76362f0a0ee1b66d7df524c4c8dea9b15b45cf78", "url": "https://api.github.com/repos/rust-lang/rust/commits/76362f0a0ee1b66d7df524c4c8dea9b15b45cf78", "html_url": "https://github.com/rust-lang/rust/commit/76362f0a0ee1b66d7df524c4c8dea9b15b45cf78"}], "stats": {"total": 94, "additions": 1, "deletions": 93}, "files": [{"sha": "41ef55933cda2e841f14d54f9af249fdf29b0fa8", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "patch": "@@ -45,10 +45,6 @@ impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n             ast::ExprLoop(ref b, _) => {\n                 self.with_context(Loop, |v| v.visit_block(&**b));\n             }\n-            ast::ExprForLoop(_, ref e, ref b, _) => {\n-                self.visit_expr(&**e);\n-                self.with_context(Loop, |v| v.visit_block(&**b));\n-            }\n             ast::ExprClosure(_, _, _, ref b) => {\n                 self.with_context(Closure, |v| v.visit_block(&**b));\n             }"}, {"sha": "aded63336dcd538676c1caaa2f7f27d311bdd7eb", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "patch": "@@ -223,19 +223,6 @@ fn check_expr(cx: &mut MatchCheckCtxt, ex: &ast::Expr) {\n                 .collect();\n             check_exhaustive(cx, ex.span, &matrix, source);\n         },\n-        ast::ExprForLoop(ref pat, _, _, _) => {\n-            let mut static_inliner = StaticInliner::new(cx.tcx);\n-            is_refutable(cx, &*static_inliner.fold_pat((*pat).clone()), |uncovered_pat| {\n-                span_err!(cx.tcx.sess, pat.span, E0297,\n-                    \"refutable pattern in `for` loop binding: \\\n-                            `{}` not covered\",\n-                            pat_to_string(uncovered_pat));\n-            });\n-\n-            // Check legality of move bindings.\n-            check_legality_of_move_bindings(cx, false, slice::ref_slice(pat));\n-            check_legality_of_bindings_in_at_patterns(cx, &**pat);\n-        }\n         _ => ()\n     }\n }"}, {"sha": "c70532dbb30cb03723499a0e03bb23ad17f2e9d3", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "patch": "@@ -701,14 +701,6 @@ fn resolve_expr(visitor: &mut RegionResolutionVisitor, expr: &ast::Expr) {\n                 terminating(body.id);\n             }\n \n-            ast::ExprForLoop(ref _pat, ref _head, ref body, _) => {\n-                terminating(body.id);\n-\n-                // The variable parent of everything inside (most importantly, the\n-                // pattern) is the body.\n-                visitor.cx.var_parent = InnermostDeclaringBlock::Block(body.id);\n-            }\n-\n             ast::ExprMatch(..) => {\n                 visitor.cx.var_parent = InnermostDeclaringBlock::Match(expr.id);\n             }"}, {"sha": "19b788a38e6f8162dda9e6361a23b67226e8705f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "patch": "@@ -4493,9 +4493,6 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n             // the index method invoked for `a[i]` always yields an `&T`\n             ast::ExprIndex(..) => LvalueExpr,\n \n-            // `for` loops are statements\n-            ast::ExprForLoop(..) => RvalueStmtExpr,\n-\n             // in the general case, result could be any type, use DPS\n             _ => RvalueDpsExpr\n         };"}, {"sha": "a433161d659e8a5a4f0350de4f93b2da4dcec4e4", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "patch": "@@ -96,7 +96,7 @@ impl<'v, P> Visitor<'v> for LoopQueryVisitor<P> where P: FnMut(&ast::Expr_) -> b\n         match e.node {\n           // Skip inner loops, since a break in the inner loop isn't a\n           // break inside the outer loop\n-          ast::ExprLoop(..) | ast::ExprWhile(..) | ast::ExprForLoop(..) => {}\n+          ast::ExprLoop(..) | ast::ExprWhile(..) => {}\n           _ => visit::walk_expr(self, e)\n         }\n     }"}, {"sha": "fbccc466d57694c42b23681050edd210e55458b6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "patch": "@@ -4562,39 +4562,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 })\n             }\n \n-            ExprForLoop(ref pattern, ref head, ref body, optional_label) => {\n-                self.resolve_expr(&**head);\n-\n-                self.value_ribs.push(Rib::new(NormalRibKind));\n-\n-                self.resolve_pattern(&**pattern,\n-                                     LocalIrrefutableMode,\n-                                     &mut HashMap::new());\n-\n-                match optional_label {\n-                    None => {}\n-                    Some(label) => {\n-                        self.label_ribs\n-                            .push(Rib::new(NormalRibKind));\n-                        let def_like = DlDef(DefLabel(expr.id));\n-\n-                        {\n-                            let rib = self.label_ribs.last_mut().unwrap();\n-                            let renamed = mtwt::resolve(label);\n-                            rib.bindings.insert(renamed, def_like);\n-                        }\n-                    }\n-                }\n-\n-                self.resolve_block(&**body);\n-\n-                if optional_label.is_some() {\n-                    drop(self.label_ribs.pop())\n-                }\n-\n-                self.value_ribs.pop();\n-            }\n-\n             ExprBreak(Some(label)) | ExprAgain(Some(label)) => {\n                 let renamed = mtwt::resolve(label);\n                 match self.search_label(renamed) {"}, {"sha": "46726f78d04f571e2b8616ec4bfb072a38180007", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "patch": "@@ -927,13 +927,6 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::ExprWhile(ref cond, ref body, _) => {\n             controlflow::trans_while(bcx, expr, &**cond, &**body)\n         }\n-        ast::ExprForLoop(ref pat, ref head, ref body, _) => {\n-            controlflow::trans_for(bcx,\n-                                   expr_info(expr),\n-                                   &**pat,\n-                                   &**head,\n-                                   &**body)\n-        }\n         ast::ExprLoop(ref body, _) => {\n             controlflow::trans_loop(bcx, expr, &**body)\n         }"}, {"sha": "8b5ad1357004e5de2f2466b0a62699311e289ffd", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=acb8c1aaa6f3aa46cc3abf9ccc77b4882d778f9c", "patch": "@@ -658,30 +658,6 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             rcx.set_repeating_scope(repeating_scope);\n         }\n \n-        ast::ExprForLoop(ref pat, ref head, ref body, _) => {\n-            constrain_bindings_in_pat(&**pat, rcx);\n-\n-            {\n-                let mc = mc::MemCategorizationContext::new(rcx.fcx);\n-                let pat_ty = rcx.resolve_node_type(pat.id);\n-                let pat_cmt = mc.cat_rvalue(pat.id,\n-                                            pat.span,\n-                                            ty::ReScope(CodeExtent::from_node_id(body.id)),\n-                                            pat_ty);\n-                link_pattern(rcx, mc, pat_cmt, &**pat);\n-            }\n-\n-            rcx.visit_expr(&**head);\n-            type_of_node_must_outlive(rcx,\n-                                      infer::AddrOf(expr.span),\n-                                      head.id,\n-                                      ty::ReScope(CodeExtent::from_node_id(expr.id)));\n-\n-            let repeating_scope = rcx.set_repeating_scope(body.id);\n-            rcx.visit_block(&**body);\n-            rcx.set_repeating_scope(repeating_scope);\n-        }\n-\n         _ => {\n             visit::walk_expr(rcx, expr);\n         }"}]}