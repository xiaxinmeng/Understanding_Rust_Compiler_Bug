{"sha": "a2df05d4d57c863a23b2de57f39e3ec62621e1e4", "node_id": "C_kwDOAAsO6NoAKGEyZGYwNWQ0ZDU3Yzg2M2EyM2IyZGU1N2YzOWUzZWM2MjYyMWUxZTQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-07T04:04:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-07T04:04:52Z"}, "message": "Rollup merge of #95646 - mgeisler:mention-std-env-var, r=Dylan-DPC\n\nMention `std::env::var` in `env!`\n\nWhen searching for how to read an environment variable, I first encountered the `env!` macro. It would have been useful to me if the documentation had included a link to `std::env::var`, which is what I was actually looking for.", "tree": {"sha": "6f58e9ad3c38db9b12c1e3f976a9689b2a80dfcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f58e9ad3c38db9b12c1e3f976a9689b2a80dfcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2df05d4d57c863a23b2de57f39e3ec62621e1e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTmLkCRBK7hj4Ov3rIwAAry8IAHOZyWRipyCLA8LVDhbxVLQ/\nKJ2qdXhyLDpF/k+V8PE2+9BfIOVB8nDZLyn9N/uEqGpqX9vQa9LL4Id7JhukBxgT\n2+jL1ld4xKIiZWe42LO6i8lD/SkG/TFkiD2Ya0NL1kihipes3KZn53dEz0zEnjwz\n+mdu96DsjbsrgVZG38vydH82Qzty8L5pK8PYwJU0yhzFwszFebufaDCWEC+HnKj8\nZIxDW0JQjGbRBHvnXV0NOkl/PQ4iPk8BMHzLEbzuLDHlBGEU1jeSUoBW4CA3vPpb\nriHLuMNeRB3sK/7nSpuGyO7sg/tL16llylPdJYcRXGYYQ0eCgXhfwyqx7+K9enA=\n=BGtC\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f58e9ad3c38db9b12c1e3f976a9689b2a80dfcd\nparent f7499a892ea5dde8057fce3f92d4398adf57255d\nparent 4f08d753758daa8adc21b29b5f0c07393a60e6c0\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649304292 +0200\ncommitter GitHub <noreply@github.com> 1649304292 +0200\n\nRollup merge of #95646 - mgeisler:mention-std-env-var, r=Dylan-DPC\n\nMention `std::env::var` in `env!`\n\nWhen searching for how to read an environment variable, I first encountered the `env!` macro. It would have been useful to me if the documentation had included a link to `std::env::var`, which is what I was actually looking for.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2df05d4d57c863a23b2de57f39e3ec62621e1e4", "html_url": "https://github.com/rust-lang/rust/commit/a2df05d4d57c863a23b2de57f39e3ec62621e1e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2df05d4d57c863a23b2de57f39e3ec62621e1e4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7499a892ea5dde8057fce3f92d4398adf57255d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7499a892ea5dde8057fce3f92d4398adf57255d", "html_url": "https://github.com/rust-lang/rust/commit/f7499a892ea5dde8057fce3f92d4398adf57255d"}, {"sha": "4f08d753758daa8adc21b29b5f0c07393a60e6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f08d753758daa8adc21b29b5f0c07393a60e6c0", "html_url": "https://github.com/rust-lang/rust/commit/4f08d753758daa8adc21b29b5f0c07393a60e6c0"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "83f33ca007af1eb74a57e6bb5a58a78a86c3df0a", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2df05d4d57c863a23b2de57f39e3ec62621e1e4/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2df05d4d57c863a23b2de57f39e3ec62621e1e4/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=a2df05d4d57c863a23b2de57f39e3ec62621e1e4", "patch": "@@ -909,7 +909,10 @@ pub(crate) mod builtin {\n     /// Inspects an environment variable at compile time.\n     ///\n     /// This macro will expand to the value of the named environment variable at\n-    /// compile time, yielding an expression of type `&'static str`.\n+    /// compile time, yielding an expression of type `&'static str`. Use\n+    /// [`std::env::var`] instead if you want to read the value at runtime.\n+    ///\n+    /// [`std::env::var`]: ../std/env/fn.var.html\n     ///\n     /// If the environment variable is not defined, then a compilation error\n     /// will be emitted. To not emit a compile error, use the [`option_env!`]\n@@ -950,7 +953,10 @@ pub(crate) mod builtin {\n     /// expand into an expression of type `Option<&'static str>` whose value is\n     /// `Some` of the value of the environment variable. If the environment\n     /// variable is not present, then this will expand to `None`. See\n-    /// [`Option<T>`][Option] for more information on this type.\n+    /// [`Option<T>`][Option] for more information on this type.  Use\n+    /// [`std::env::var`] instead if you want to read the value at runtime.\n+    ///\n+    /// [`std::env::var`]: ../std/env/fn.var.html\n     ///\n     /// A compile time error is never emitted when using this macro regardless\n     /// of whether the environment variable is present or not."}]}