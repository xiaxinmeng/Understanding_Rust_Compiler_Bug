{"sha": "e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYjdlNmNhYTI1YmZmY2ZmZTZiMDRmNTUwZjU1MWUxYWUwODZmNmI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-02T01:44:53Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-02T07:18:45Z"}, "message": "Tweak relese notes + rebase fixes", "tree": {"sha": "460e4d59504435411421cf261c5735a726f16942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/460e4d59504435411421cf261c5735a726f16942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "html_url": "https://github.com/rust-lang/rust/commit/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb77443213d3be1e0c937b6f9e114e0c8c5b2bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb77443213d3be1e0c937b6f9e114e0c8c5b2bb5", "html_url": "https://github.com/rust-lang/rust/commit/fb77443213d3be1e0c937b6f9e114e0c8c5b2bb5"}], "stats": {"total": 74, "additions": 50, "deletions": 24}, "files": [{"sha": "7da73afb4111f4f7f221b6ef90eb907023e2bc4a", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -34,7 +34,7 @@ Version 1.0.0-beta (April 2015)\n       downcasting via the `Any` trait is effectively limited to\n       concrete types. This helps retain the potentially-important\n       \"parametricity\" property: generic code cannot behave differently\n-      for different type arguments.\n+      for different type arguments except in minor ways.\n     * The `unsafe_destructor` feature is now deprecated in favor of\n       the [new `dropck`][dropck]. This change is a major reduction in\n       unsafe code.\n@@ -78,7 +78,7 @@ Version 1.0.0-beta (April 2015)\n [scoped]: http://static.rust-lang.org/doc/master/std/thread/fn.scoped.html\n [moar-ufcs]: https://github.com/rust-lang/rust/pull/22172\n [prim-inherent]: https://github.com/rust-lang/rust/pull/23104\n-[overflow]: https://github.com/rust-lang/rust/pull/22532\n+[overflow]: https://github.com/rust-lang/rfcs/blob/master/text/0560-integer-overflow.md\n [metadata-shrink]: https://github.com/rust-lang/rust/pull/22971\n [self-sized]: https://github.com/rust-lang/rust/pull/22301\n [assoc-where]: https://github.com/rust-lang/rust/pull/22512"}, {"sha": "44d689059d1cf3b0048fffcadc88733622fa87e9", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -291,7 +291,6 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n-                use core::clone::Clone;\n                 use types::common::c95::{c_void};\n                 use types::os::arch::c95::{c_char, c_int, c_uint};\n \n@@ -313,7 +312,7 @@ pub mod types {\n                     #[cfg(target_pointer_width = \"64\")]\n                     pub __ss_pad2: [u8; 128 - 2 * 8],\n                 }\n-                impl Clone for sockaddr_storage {\n+                impl ::core::clone::Clone for sockaddr_storage {\n                     fn clone(&self) -> sockaddr_storage { *self }\n                 }\n                 #[repr(C)]\n@@ -376,7 +375,7 @@ pub mod types {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 108]\n                 }\n-                impl Clone for sockaddr_un {\n+                impl ::core::clone::Clone for sockaddr_un {\n                     fn clone(&self) -> sockaddr_un { *self }\n                 }\n \n@@ -1634,12 +1633,15 @@ pub mod types {\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n+                impl ::core::clone::Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n@@ -1685,10 +1687,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 108]\n                 }\n+                impl ::core::clone::Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n             }\n         }\n \n@@ -1933,7 +1938,7 @@ pub mod types {\n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n \n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct WSAPROTOCOL_INFO {\n+                #[derive(Copy)] pub struct WSAPROTOCOL_INFO {\n                     pub dwServiceFlags1: DWORD,\n                     pub dwServiceFlags2: DWORD,\n                     pub dwServiceFlags3: DWORD,\n@@ -1955,13 +1960,16 @@ pub mod types {\n                     pub dwProviderReserved: DWORD,\n                     pub szProtocol: [u8; WSAPROTOCOL_LEN as usize + 1],\n                 }\n+                impl ::core::clone::Clone for WSAPROTOCOL_INFO {\n+                    fn clone(&self) -> WSAPROTOCOL_INFO { *self }\n+                }\n \n                 pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n \n                 pub type GROUP = c_uint;\n \n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct WIN32_FIND_DATAW {\n+                #[derive(Copy)] pub struct WIN32_FIND_DATAW {\n                     pub dwFileAttributes: DWORD,\n                     pub ftCreationTime: FILETIME,\n                     pub ftLastAccessTime: FILETIME,\n@@ -1973,6 +1981,9 @@ pub mod types {\n                     pub cFileName: [wchar_t; 260], // #define MAX_PATH 260\n                     pub cAlternateFileName: [wchar_t; 14],\n                 }\n+                impl ::core::clone::Clone for WIN32_FIND_DATAW {\n+                    fn clone(&self) -> WIN32_FIND_DATAW { *self }\n+                }\n \n                 pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n             }\n@@ -2073,13 +2084,16 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n+                impl ::core::clone::Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n \n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct sockaddr_in {\n@@ -2135,11 +2149,14 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n+                impl ::core::clone::Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n \n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct ifaddrs {\n@@ -2239,10 +2256,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n+                #[derive(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char; 36]\n                 }\n+                impl ::core::clone::Clone for pthread_attr_t {\n+                    fn clone(&self) -> pthread_attr_t { *self }\n+                }\n             }\n             pub mod posix08 {\n             }\n@@ -2345,10 +2365,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n+                #[derive(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char; 56]\n                 }\n+                impl ::core::clone::Clone for pthread_attr_t {\n+                    fn clone(&self) -> pthread_attr_t { *self }\n+                }\n             }\n             pub mod posix08 {\n             }"}, {"sha": "2f2db8f38bd87e00ee12b8373c8edb5b302943e7", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -25,7 +25,7 @@ use syntax::ast;\n use syntax::codemap::{DUMMY_SP, Span};\n use util::ppaux::Repr;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct ParamIsLocal(bool);\n \n /// True if there exist types that satisfy both of the two given impls."}, {"sha": "f71811b1eadf6f0c90567f684a872e9bb749d191", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -398,7 +398,7 @@ pub mod eabi {\n     pub struct DISPATCHER_CONTEXT;\n \n     #[repr(C)]\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub enum EXCEPTION_DISPOSITION {\n         ExceptionContinueExecution,\n         ExceptionContinueSearch,"}, {"sha": "fc21effb45a8da06cf01b0c57534325bbd2c1d06", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -115,9 +115,9 @@ pub fn socket(addr: SocketAddr, ty: libc::c_int) -> IoResult<sock_t> {\n             Ipv4Addr(..) => libc::AF_INET,\n             Ipv6Addr(..) => libc::AF_INET6,\n         };\n-        match libc::socket(fam, ty, 0) {\n+        match libc::socket(fam, ty, 0) as i32 {\n             -1 => Err(last_net_error()),\n-            fd => Ok(fd),\n+            fd => Ok(fd as sock_t),\n         }\n     }\n }"}, {"sha": "4804f6504419c599992c3549c12f9fcb652f7c65", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -89,7 +89,6 @@ pub type LPWSANETWORKEVENTS = *mut WSANETWORKEVENTS;\n pub type WSAEVENT = libc::HANDLE;\n \n #[repr(C)]\n-#[derive(Copy)]\n pub struct WSAPROTOCOL_INFO {\n     pub dwServiceFlags1: libc::DWORD,\n     pub dwServiceFlags2: libc::DWORD,"}, {"sha": "41e97dc8475027741473f7f5458ff89661bdfea2", "filename": "src/libstd/sys/windows/tcp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftcp.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -15,6 +15,7 @@ use prelude::v1::*;\n use old_io::net::ip;\n use old_io::IoResult;\n use libc;\n+use libc::consts::os::extra::INVALID_SOCKET;\n use mem;\n use ptr;\n use super::{last_error, last_net_error, sock_t};\n@@ -183,8 +184,8 @@ impl TcpAcceptor {\n             match unsafe {\n                 libc::accept(self.socket(), ptr::null_mut(), ptr::null_mut())\n             } {\n-                -1 if wouldblock() => {}\n-                -1 => return Err(last_net_error()),\n+                INVALID_SOCKET if wouldblock() => {}\n+                INVALID_SOCKET => return Err(last_net_error()),\n \n                 // Accepted sockets inherit the same properties as the caller,\n                 // so we need to deregister our event and switch the socket back"}, {"sha": "f35cc8c8d2399f9d695364c5cb4b121d3ace8399", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -371,7 +371,7 @@ fn stderr_isatty() -> bool {\n }\n #[cfg(windows)]\n fn stderr_isatty() -> bool {\n-    const STD_ERROR_HANDLE: libc::DWORD = -12;\n+    const STD_ERROR_HANDLE: libc::DWORD = -12i32 as libc::DWORD;\n     extern \"system\" {\n         fn GetStdHandle(which: libc::DWORD) -> libc::HANDLE;\n         fn GetConsoleMode(hConsoleHandle: libc::HANDLE,"}, {"sha": "66ef5e8661797f241f9737f5988282886191062b", "filename": "src/libterm/win.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -104,7 +104,7 @@ impl<T: Write+Send+'static> WinConsole<T> {\n             // terminal! Admittedly, this is fragile, since stderr could be\n             // redirected to a different console. This is good enough for\n             // rustc though. See #13400.\n-            let out = GetStdHandle(-11);\n+            let out = GetStdHandle(-11i32 as libc::DWORD);\n             SetConsoleTextAttribute(out, accum);\n         }\n     }\n@@ -116,7 +116,8 @@ impl<T: Write+Send+'static> WinConsole<T> {\n         let bg;\n         unsafe {\n             let mut buffer_info = ::std::mem::uninitialized();\n-            if GetConsoleScreenBufferInfo(GetStdHandle(-11), &mut buffer_info) != 0 {\n+            if GetConsoleScreenBufferInfo(GetStdHandle(-11i32 as libc::DWORD),\n+                                          &mut buffer_info) != 0 {\n                 fg = bits_to_color(buffer_info.wAttributes);\n                 bg = bits_to_color(buffer_info.wAttributes >> 4);\n             } else {"}, {"sha": "c84703b93ed263283d619ca7dbc81d75854b602a", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -757,7 +757,7 @@ fn stdout_isatty() -> bool {\n }\n #[cfg(windows)]\n fn stdout_isatty() -> bool {\n-    const STD_OUTPUT_HANDLE: libc::DWORD = -11;\n+    const STD_OUTPUT_HANDLE: libc::DWORD = -11i32 as libc::DWORD;\n     extern \"system\" {\n         fn GetStdHandle(which: libc::DWORD) -> libc::HANDLE;\n         fn GetConsoleMode(hConsoleHandle: libc::HANDLE,"}, {"sha": "1be606c3546fd18168c58a3b5aee8882b7145dbc", "filename": "src/test/compile-fail/coherence-impls-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b7e6caa25bffcffe6b04f550f551e1ae086f6b/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs?ref=e3b7e6caa25bffcffe6b04f550f551e1ae086f6b", "patch": "@@ -28,6 +28,8 @@ impl Copy for MyType {}\n \n impl Copy for &'static mut MyType {}\n //~^ ERROR E0206\n+//~| ERROR E0277\n+//~| ERROR E0277\n impl Clone for MyType { fn clone(&self) -> Self { *self } }\n \n impl Copy for (MyType, MyType) {}"}]}