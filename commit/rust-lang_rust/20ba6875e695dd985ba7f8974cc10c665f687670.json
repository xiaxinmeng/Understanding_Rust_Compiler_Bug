{"sha": "20ba6875e695dd985ba7f8974cc10c665f687670", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYmE2ODc1ZTY5NWRkOTg1YmE3Zjg5NzRjYzEwYzY2NWY2ODc2NzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-31T10:35:36Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T14:16:36Z"}, "message": "parser_item_mod: avoid cloning outer attributes", "tree": {"sha": "b8335bd2c7dbf918069b1851a00799b0fb19b80c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8335bd2c7dbf918069b1851a00799b0fb19b80c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ba6875e695dd985ba7f8974cc10c665f687670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ba6875e695dd985ba7f8974cc10c665f687670", "html_url": "https://github.com/rust-lang/rust/commit/20ba6875e695dd985ba7f8974cc10c665f687670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ba6875e695dd985ba7f8974cc10c665f687670/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73d5970cdc304c874cd6d7d594f3abb7317f1519", "url": "https://api.github.com/repos/rust-lang/rust/commits/73d5970cdc304c874cd6d7d594f3abb7317f1519", "html_url": "https://github.com/rust-lang/rust/commit/73d5970cdc304c874cd6d7d594f3abb7317f1519"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "1c479295af3ed0acc1519c20da334f6ee2ba8c1a", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20ba6875e695dd985ba7f8974cc10c665f687670/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ba6875e695dd985ba7f8974cc10c665f687670/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=20ba6875e695dd985ba7f8974cc10c665f687670", "patch": "@@ -562,14 +562,9 @@ fn is_cfg(attr: &Attribute) -> bool {\n \n /// Process the potential `cfg` attributes on a module.\n /// Also determine if the module should be included in this configuration.\n-pub fn process_configure_mod(\n-    sess: &ParseSess,\n-    cfg_mods: bool,\n-    attrs: &[Attribute],\n-) -> (bool, Vec<Attribute>) {\n+pub fn process_configure_mod(sess: &ParseSess, cfg_mods: bool, attrs: &mut Vec<Attribute>) -> bool {\n     // Don't perform gated feature checking.\n     let mut strip_unconfigured = StripUnconfigured { sess, features: None };\n-    let mut attrs = attrs.to_owned();\n-    strip_unconfigured.process_cfg_attrs(&mut attrs);\n-    (!cfg_mods || strip_unconfigured.in_cfg(&attrs), attrs)\n+    strip_unconfigured.process_cfg_attrs(attrs);\n+    !cfg_mods || strip_unconfigured.in_cfg(&attrs)\n }"}, {"sha": "38e87cfbc07e7a0ee247f2d2e83043f9961c8de0", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ba6875e695dd985ba7f8974cc10c665f687670/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ba6875e695dd985ba7f8974cc10c665f687670/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=20ba6875e695dd985ba7f8974cc10c665f687670", "patch": "@@ -168,7 +168,7 @@ impl<'a> Parser<'a> {\n             self.parse_item_impl(unsafety, defaultness)?\n         } else if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n-            self.parse_item_mod(&attrs[..])?\n+            self.parse_item_mod(attrs)?\n         } else if self.eat_keyword(kw::Type) {\n             // TYPE ITEM\n             let (ident, ty, generics) = self.parse_type_alias()?;"}, {"sha": "36a1e87956fa67e62b3fa1a81af33fce0d27ebe2", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/20ba6875e695dd985ba7f8974cc10c665f687670/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ba6875e695dd985ba7f8974cc10c665f687670/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=20ba6875e695dd985ba7f8974cc10c665f687670", "patch": "@@ -40,36 +40,34 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n-    pub(super) fn parse_item_mod(&mut self, outer_attrs: &[Attribute]) -> PResult<'a, ItemInfo> {\n-        let (in_cfg, outer_attrs) =\n-            crate::config::process_configure_mod(self.sess, self.cfg_mods, outer_attrs);\n+    pub(super) fn parse_item_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n+        let in_cfg = crate::config::process_configure_mod(self.sess, self.cfg_mods, attrs);\n \n         let id_span = self.token.span;\n         let id = self.parse_ident()?;\n-        if self.eat(&token::Semi) {\n+        let (module, mut inner_attrs) = if self.eat(&token::Semi) {\n             if in_cfg && self.recurse_into_file_modules {\n                 // This mod is in an external file. Let's go get it!\n                 let ModulePathSuccess { path, directory_ownership } =\n-                    self.submod_path(id, &outer_attrs, id_span)?;\n-                let (module, attrs) =\n-                    self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?;\n-                Ok((id, ItemKind::Mod(module), Some(attrs)))\n+                    self.submod_path(id, &attrs, id_span)?;\n+                self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?\n             } else {\n-                let placeholder = ast::Mod { inner: DUMMY_SP, items: Vec::new(), inline: false };\n-                Ok((id, ItemKind::Mod(placeholder), None))\n+                (ast::Mod { inner: DUMMY_SP, items: Vec::new(), inline: false }, Vec::new())\n             }\n         } else {\n             let old_directory = self.directory.clone();\n-            self.push_directory(id, &outer_attrs);\n+            self.push_directory(id, &attrs);\n \n             self.expect(&token::OpenDelim(token::Brace))?;\n             let mod_inner_lo = self.token.span;\n-            let attrs = self.parse_inner_attributes()?;\n+            let inner_attrs = self.parse_inner_attributes()?;\n             let module = self.parse_mod_items(&token::CloseDelim(token::Brace), mod_inner_lo)?;\n \n             self.directory = old_directory;\n-            Ok((id, ItemKind::Mod(module), Some(attrs)))\n-        }\n+            (module, inner_attrs)\n+        };\n+        attrs.append(&mut inner_attrs);\n+        Ok((id, ItemKind::Mod(module), None))\n     }\n \n     /// Given a termination token, parses all of the items in a module."}]}