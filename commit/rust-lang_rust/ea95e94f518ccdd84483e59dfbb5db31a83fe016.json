{"sha": "ea95e94f518ccdd84483e59dfbb5db31a83fe016", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOTVlOTRmNTE4Y2NkZDg0NDgzZTU5ZGZiYjVkYjMxYTgzZmUwMTY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-14T19:58:50Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-15T18:33:52Z"}, "message": "Fix nits from review", "tree": {"sha": "3fd75517c6519fbedb5120e058fdd46fd0a6c3fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd75517c6519fbedb5120e058fdd46fd0a6c3fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea95e94f518ccdd84483e59dfbb5db31a83fe016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea95e94f518ccdd84483e59dfbb5db31a83fe016", "html_url": "https://github.com/rust-lang/rust/commit/ea95e94f518ccdd84483e59dfbb5db31a83fe016", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea95e94f518ccdd84483e59dfbb5db31a83fe016/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e840f8893ff620d4da161414b70d2ce037f3842", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e840f8893ff620d4da161414b70d2ce037f3842", "html_url": "https://github.com/rust-lang/rust/commit/1e840f8893ff620d4da161414b70d2ce037f3842"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "53ef61f15766590941382a4429d4d1681583596a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ea95e94f518ccdd84483e59dfbb5db31a83fe016", "patch": "@@ -2770,8 +2770,12 @@ pub struct BorrowCheckResult<'tcx> {\n }\n \n /// The result of the `mir_const_qualif` query.\n+///\n+/// Each field corresponds to an implementer of the `Qualif` trait in\n+/// `librustc_mir/transform/check_consts/qualifs.rs`. See that file for more information on each\n+/// `Qualif`.\n #[derive(Clone, Copy, Debug, Default, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct QualifSet {\n+pub struct ConstQualifs {\n     pub has_mut_interior: bool,\n     pub needs_drop: bool,\n }"}, {"sha": "e07726bfa2aa12ca689a9c0afdddc170c894f341", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=ea95e94f518ccdd84483e59dfbb5db31a83fe016", "patch": "@@ -91,9 +91,9 @@ rustc_queries! {\n         }\n \n         /// Maps DefId's that have an associated `mir::Body` to the result\n-        /// of the MIR qualify_consts pass. The actual meaning of\n-        /// the value isn't known except to the pass itself.\n-        query mir_const_qualif(key: DefId) -> mir::QualifSet {\n+        /// of the MIR const-checking pass. This is the set of qualifs in\n+        /// the final value of a `const`.\n+        query mir_const_qualif(key: DefId) -> mir::ConstQualifs {\n             desc { |tcx| \"const checking `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { key.is_local() }\n         }"}, {"sha": "9e8b22e00d9132317c6818efd642db2bf1aab29f", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=ea95e94f518ccdd84483e59dfbb5db31a83fe016", "patch": "@@ -952,7 +952,7 @@ impl<'a, 'tcx> CrateMetadata {\n             .decode((self, tcx))\n     }\n \n-    fn mir_const_qualif(&self, id: DefIndex) -> mir::QualifSet {\n+    fn mir_const_qualif(&self, id: DefIndex) -> mir::ConstQualifs {\n         match self.kind(id) {\n             EntryKind::Const(qualif, _) |\n             EntryKind::AssocConst(AssocContainer::ImplDefault, qualif, _) |"}, {"sha": "8bd7b3392b1a590ac3486fa08bd500ddc2dc4301", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=ea95e94f518ccdd84483e59dfbb5db31a83fe016", "patch": "@@ -295,7 +295,7 @@ enum EntryKind<'tcx> {\n /// Additional data for EntryKind::Const and EntryKind::AssocConst\n #[derive(Clone, Copy, RustcEncodable, RustcDecodable)]\n struct ConstQualif {\n-    mir: mir::QualifSet,\n+    mir: mir::ConstQualifs,\n }\n \n /// Contains a constant which has been rendered to a String."}, {"sha": "aad14299c1d94105532ea4004cf4d0e920377a9a", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=ea95e94f518ccdd84483e59dfbb5db31a83fe016", "patch": "@@ -6,8 +6,8 @@ use syntax_pos::DUMMY_SP;\n \n use super::{ConstKind, Item as ConstCx};\n \n-pub fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> QualifSet {\n-    QualifSet {\n+pub fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> ConstQualifs {\n+    ConstQualifs {\n         has_mut_interior: HasMutInterior::in_any_value_of_ty(cx, ty),\n         needs_drop: NeedsDrop::in_any_value_of_ty(cx, ty),\n     }\n@@ -26,7 +26,7 @@ pub trait Qualif {\n     /// Whether this `Qualif` is cleared when a local is moved from.\n     const IS_CLEARED_ON_MOVE: bool = false;\n \n-    fn in_qualif_set(set: &QualifSet) -> bool;\n+    fn in_qualifs(qualifs: &ConstQualifs) -> bool;\n \n     /// Return the qualification that is (conservatively) correct for any value\n     /// of the type.\n@@ -121,7 +121,7 @@ pub trait Qualif {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty)\n                     } else {\n                         let qualifs = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n-                        let qualif = Self::in_qualif_set(&qualifs);\n+                        let qualif = Self::in_qualifs(&qualifs);\n \n                         // Just in case the type is more specific than\n                         // the definition, e.g., impl associated const\n@@ -209,8 +209,8 @@ pub struct HasMutInterior;\n impl Qualif for HasMutInterior {\n     const ANALYSIS_NAME: &'static str = \"flow_has_mut_interior\";\n \n-    fn in_qualif_set(set: &QualifSet) -> bool {\n-        set.has_mut_interior\n+    fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n+        qualifs.has_mut_interior\n     }\n \n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {\n@@ -278,8 +278,8 @@ impl Qualif for NeedsDrop {\n     const ANALYSIS_NAME: &'static str = \"flow_needs_drop\";\n     const IS_CLEARED_ON_MOVE: bool = true;\n \n-    fn in_qualif_set(set: &QualifSet) -> bool {\n-        set.needs_drop\n+    fn in_qualifs(qualifs: &ConstQualifs) -> bool {\n+        qualifs.needs_drop\n     }\n \n     fn in_any_value_of_ty(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {"}, {"sha": "21e7c9ce565f0103d99903f5b85f0ca1775c8e37", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ea95e94f518ccdd84483e59dfbb5db31a83fe016", "patch": "@@ -113,7 +113,7 @@ impl Qualifs<'a, 'mir, 'tcx> {\n             || self.indirectly_mutable.get().contains(local)\n     }\n \n-    fn in_return_place(&mut self, item: &Item<'_, 'tcx>) -> QualifSet {\n+    fn in_return_place(&mut self, item: &Item<'_, 'tcx>) -> ConstQualifs {\n         // Find the `Return` terminator if one exists.\n         //\n         // If no `Return` terminator exists, this MIR is divergent. Just return the conservative\n@@ -136,7 +136,7 @@ impl Qualifs<'a, 'mir, 'tcx> {\n \n         let return_loc = item.body.terminator_loc(return_block);\n \n-        QualifSet {\n+        ConstQualifs {\n             needs_drop: self.needs_drop_lazy_seek(RETURN_PLACE, return_loc),\n             has_mut_interior: self.has_mut_interior_lazy_seek(RETURN_PLACE, return_loc),\n         }\n@@ -253,7 +253,7 @@ impl Validator<'a, 'mir, 'tcx> {\n         }\n     }\n \n-    pub fn qualifs_in_return_place(&mut self) -> QualifSet {\n+    pub fn qualifs_in_return_place(&mut self) -> ConstQualifs {\n         self.qualifs.in_return_place(self.item)\n     }\n "}, {"sha": "897e37858a68edec0f07345321c5bc75a6ca1a03", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea95e94f518ccdd84483e59dfbb5db31a83fe016/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=ea95e94f518ccdd84483e59dfbb5db31a83fe016", "patch": "@@ -1,7 +1,7 @@\n use crate::{build, shim};\n use rustc_index::vec::IndexVec;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::mir::{Body, MirPhase, Promoted, QualifSet};\n+use rustc::mir::{Body, MirPhase, Promoted, ConstQualifs};\n use rustc::ty::{TyCtxt, InstanceDef, TypeFoldable};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -184,7 +184,7 @@ pub fn run_passes(\n     body.phase = mir_phase;\n }\n \n-fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> QualifSet {\n+fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n     let const_kind = check_consts::ConstKind::for_item(tcx, def_id);\n \n     // No need to const-check a non-const `fn`."}]}