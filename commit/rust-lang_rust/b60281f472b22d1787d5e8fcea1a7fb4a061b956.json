{"sha": "b60281f472b22d1787d5e8fcea1a7fb4a061b956", "node_id": "C_kwDOAAsO6NoAKGI2MDI4MWY0NzJiMjJkMTc4N2Q1ZThmY2VhMWE3ZmI0YTA2MWI5NTY", "commit": {"author": {"name": "Arpad Borsos", "email": "arpad.borsos@sentry.io", "date": "2022-12-21T12:41:28Z"}, "committer": {"name": "Arpad Borsos", "email": "arpad.borsos@sentry.io", "date": "2022-12-21T12:41:28Z"}, "message": "Test that async blocks are UnwindSafe\n\nThis was a regression from the reverted #105250 which is now covered by a test.", "tree": {"sha": "d38bc8d828ed472bde67d3ae2b237c89e2342d0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d38bc8d828ed472bde67d3ae2b237c89e2342d0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60281f472b22d1787d5e8fcea1a7fb4a061b956", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEGpY8kJL+amSMRbJCVw8gFjFZy1UFAmOi/0MACgkQVw8gFjFZ\ny1VVnw//bxDZ+VQmYDrPnBdIBz7WEJ66/G+q6THNKoMO9aNThqg3TOiibfWvCTbB\nJDmLTrliWmIS6wsa4yro05Amiwkr2GBWeRHUvAdo2HojlMjAs70Z5QGoKTCSWTw4\ndaSOMA/0y3tIOENXLlZ8tXiJNpz70McEa33pAtmztmi6sxJSOp5NQDiOG04v9xwe\nKPUQLbFqcMxbpq39IdSjNkoD6HJGO+Df2wyu8azSicWzdzlCQgiEuTU+iOR3tha8\nvUztpZwRE23zrTdrFLAe6H2FODJHumSmNXNlXuNK8pmyXGGns3JMXy9fcdUCTATi\nNxlxRAoZhnrNRnYofi3RGSJK6fwhaDE+p/dixrJLbvvQC2kUzzseu9bJXngL/7+3\nqvASW88tqF+QXbH4Z3gRnHl9V3+jfjjHbsJct5YD7zCplAv1NWelBH6D+dGp2uRh\ncjhxvegS+AXOT5xbb28SHQD40uXNBSTerokDq/Zv4cu3kYd8vdXYMuBnJsaQKNwD\nj0lfFjb4xy2aPrL6EbefJTXLLCjvzoXkLr9RLDpJNFRyYi2nWvi15ElT2rfmH5Zb\nbGkhbX+6cWw2HBkURRx9S4lJh+cwUpKlAqZgKamnIfHs/GYHgxmo/W5QsT3YF6Md\ndQfD7sphAjRwD9oLXE88eLvjgEcq5Hgv5L6zDMbBassBp8j6JpQ=\n=jSbx\n-----END PGP SIGNATURE-----", "payload": "tree d38bc8d828ed472bde67d3ae2b237c89e2342d0f\nparent 1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b\nauthor Arpad Borsos <arpad.borsos@sentry.io> 1671626488 +0100\ncommitter Arpad Borsos <arpad.borsos@sentry.io> 1671626488 +0100\n\nTest that async blocks are UnwindSafe\n\nThis was a regression from the reverted #105250 which is now covered by a test.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60281f472b22d1787d5e8fcea1a7fb4a061b956", "html_url": "https://github.com/rust-lang/rust/commit/b60281f472b22d1787d5e8fcea1a7fb4a061b956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60281f472b22d1787d5e8fcea1a7fb4a061b956/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b", "html_url": "https://github.com/rust-lang/rust/commit/1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "56ed2847292d186fecd5d20487b076ae23be7e87", "filename": "src/test/ui/async-await/async-is-unwindsafe.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b60281f472b22d1787d5e8fcea1a7fb4a061b956/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60281f472b22d1787d5e8fcea1a7fb4a061b956/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.rs?ref=b60281f472b22d1787d5e8fcea1a7fb4a061b956", "patch": "@@ -0,0 +1,30 @@\n+// edition:2018\n+\n+fn is_unwindsafe(_: impl std::panic::UnwindSafe) {}\n+\n+fn main() {\n+    // A normal future created by an async block takes a `&mut Context<'_>` argument.\n+    // That should not leak through to the whole async block.\n+    is_unwindsafe(async {\n+        async {}.await; // this needs an inner await point\n+    });\n+\n+    is_unwindsafe(async {\n+        //~^ ERROR the type `&mut Context<'_>` may not be safely transferred across an unwind boundary\n+        use std::ptr::null;\n+        use std::task::{Context, RawWaker, RawWakerVTable, Waker};\n+        let waker = unsafe {\n+            Waker::from_raw(RawWaker::new(\n+                null(),\n+                &RawWakerVTable::new(|_| todo!(), |_| todo!(), |_| todo!(), |_| todo!()),\n+            ))\n+        };\n+        let mut cx = Context::from_waker(&waker);\n+        let cx_ref = &mut cx;\n+\n+        async {}.await; // this needs an inner await point\n+\n+        // in this case, `&mut Context<'_>` is *truly* alive across an await point\n+        drop(cx_ref);\n+    });\n+}"}, {"sha": "d6404b30e74f1bffc4b0ec450ee3271ee2f978e6", "filename": "src/test/ui/async-await/async-is-unwindsafe.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b60281f472b22d1787d5e8fcea1a7fb4a061b956/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b60281f472b22d1787d5e8fcea1a7fb4a061b956/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-is-unwindsafe.stderr?ref=b60281f472b22d1787d5e8fcea1a7fb4a061b956", "patch": "@@ -0,0 +1,38 @@\n+error[E0277]: the type `&mut Context<'_>` may not be safely transferred across an unwind boundary\n+  --> $DIR/async-is-unwindsafe.rs:12:19\n+   |\n+LL |       is_unwindsafe(async {\n+   |  ___________________^\n+LL | |\n+LL | |         use std::ptr::null;\n+LL | |         use std::task::{Context, RawWaker, RawWakerVTable, Waker};\n+...  |\n+LL | |         drop(cx_ref);\n+LL | |     });\n+   | |     ^\n+   | |     |\n+   | |_____`&mut Context<'_>` may not be safely transferred across an unwind boundary\n+   |       within this `[async block@$DIR/async-is-unwindsafe.rs:12:19: 29:6]`\n+   |\n+   = help: within `[async block@$DIR/async-is-unwindsafe.rs:12:19: 29:6]`, the trait `UnwindSafe` is not implemented for `&mut Context<'_>`\n+   = note: `UnwindSafe` is implemented for `&std::task::Context<'_>`, but not for `&mut std::task::Context<'_>`\n+note: future does not implement `UnwindSafe` as this value is used across an await\n+  --> $DIR/async-is-unwindsafe.rs:25:17\n+   |\n+LL |         let cx_ref = &mut cx;\n+   |             ------ has type `&mut Context<'_>` which does not implement `UnwindSafe`\n+LL |\n+LL |         async {}.await; // this needs an inner await point\n+   |                 ^^^^^^ await occurs here, with `cx_ref` maybe used later\n+...\n+LL |     });\n+   |     - `cx_ref` is later dropped here\n+note: required by a bound in `is_unwindsafe`\n+  --> $DIR/async-is-unwindsafe.rs:3:26\n+   |\n+LL | fn is_unwindsafe(_: impl std::panic::UnwindSafe) {}\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_unwindsafe`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}