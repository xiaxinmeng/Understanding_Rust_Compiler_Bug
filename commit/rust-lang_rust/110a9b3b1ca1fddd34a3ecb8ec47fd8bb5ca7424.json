{"sha": "110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMGE5YjNiMWNhMWZkZGQzNGEzZWNiOGVjNDdmZDhiYjVjYTc0MjQ=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-08-27T13:00:50Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-08-27T13:00:50Z"}, "message": "Add comment and fix fmt issue", "tree": {"sha": "6d2c55d42177e04e6707401faa79e9f6e3d9a1e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d2c55d42177e04e6707401faa79e9f6e3d9a1e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424", "html_url": "https://github.com/rust-lang/rust/commit/110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fcfd6e136a31ea2a199b489e4df315a937fcd6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fcfd6e136a31ea2a199b489e4df315a937fcd6a", "html_url": "https://github.com/rust-lang/rust/commit/8fcfd6e136a31ea2a199b489e4df315a937fcd6a"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "7c99a37f6e7f814fa4364de4b51e9d54e79ff6a9", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=110a9b3b1ca1fddd34a3ecb8ec47fd8bb5ca7424", "patch": "@@ -268,10 +268,21 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                     if def.variants.len() > 1 {\n                                         needs_to_be_read = true;\n                                     } else if let Some(variant) = def.variants.iter().next() {\n+                                        // We need to handle `const` in match arms slightly differently\n+                                        // as they are not processed the same way as other match arms.\n+                                        // Consider this const `const OP1: Opcode = Opcode(0x1)`, this\n+                                        // will generate a pattern with kind Path while if use Opcode(0x1)\n+                                        // this will generate pattern TupleStruct and Lit.\n+                                        // When dealing with pat kind Path we need to make additional checks\n+                                        // to ensure we have all the info needed to make a decision on whether\n+                                        // to borrow discr.\n+                                        //\n                                         // If the pat kind is a Path we want to check whether the\n                                         // variant contains at least one field. If that's the case,\n                                         // we want to borrow discr.\n-                                        if matches!(pat.kind, PatKind::Path(..)) && variant.fields.len() > 0 {\n+                                        if matches!(pat.kind, PatKind::Path(..))\n+                                            && variant.fields.len() > 0\n+                                        {\n                                             needs_to_be_read = true;\n                                         }\n                                     }"}]}