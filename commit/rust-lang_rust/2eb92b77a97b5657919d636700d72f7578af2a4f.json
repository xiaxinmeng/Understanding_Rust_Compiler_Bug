{"sha": "2eb92b77a97b5657919d636700d72f7578af2a4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYjkyYjc3YTk3YjU2NTc5MTlkNjM2NzAwZDcyZjc1NzhhZjJhNGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-11T17:26:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-11T17:26:24Z"}, "message": "Add a flag to force generating toplevel crate map\n\nAs we start to move runtime components into the crate map, it's becoming harder\nand harder to start the runtime from a C function as rust is embedded in another\napplication. Right now if you compile a rust crate as a dynamic library which is\nthen linked to another application, when using std::rt::start there are no I/O\nlocal services, even though rustuv was linked against and requested. The reason\nfor this is that there is no top level crate map available specifying where to\nfind libuv I/O.\n\nThis option is not meant to be used regularly, but rather whenever compiling a\nfinal library crate and linking it into another application. This lifts the\nrequirement that to get a crate map you must have the final destination be an\nexecutable.", "tree": {"sha": "709f241d16953388a40171dbfff5c6ebb578fc9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/709f241d16953388a40171dbfff5c6ebb578fc9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb92b77a97b5657919d636700d72f7578af2a4f", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb92b77a97b5657919d636700d72f7578af2a4f", "html_url": "https://github.com/rust-lang/rust/commit/2eb92b77a97b5657919d636700d72f7578af2a4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb92b77a97b5657919d636700d72f7578af2a4f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e602ac563422e13a18be9f79100f96359d582a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e602ac563422e13a18be9f79100f96359d582a", "html_url": "https://github.com/rust-lang/rust/commit/b5e602ac563422e13a18be9f79100f96359d582a"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "d08127501b4d216d204bbe1b02709b9c99dbe25f", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2eb92b77a97b5657919d636700d72f7578af2a4f/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb92b77a97b5657919d636700d72f7578af2a4f/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=2eb92b77a97b5657919d636700d72f7578af2a4f", "patch": "@@ -76,6 +76,7 @@ pub static no_vectorize_loops:      uint = 1 << 26;\n pub static no_vectorize_slp:        uint = 1 << 27;\n pub static no_prepopulate_passes:   uint = 1 << 28;\n pub static use_softfp:              uint = 1 << 29;\n+pub static gen_crate_map:           uint = 1 << 30;\n \n pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n     ~[(\"verbose\", \"in general, enable more debug printouts\", verbose),\n@@ -128,6 +129,7 @@ pub fn debugging_opts_map() -> ~[(&'static str, &'static str, uint)] {\n       \"Don't run LLVM's SLP vectorization passes\",\n       no_vectorize_slp),\n      (\"soft-float\", \"Generate software floating point library calls\", use_softfp),\n+     (\"gen-crate-map\", \"Force generation of a toplevel crate map\", gen_crate_map),\n     ]\n }\n \n@@ -331,6 +333,9 @@ impl Session_ {\n     pub fn no_vectorize_slp(&self) -> bool {\n         self.debugging_opt(no_vectorize_slp)\n     }\n+    pub fn gen_crate_map(&self) -> bool {\n+        self.debugging_opt(gen_crate_map)\n+    }\n \n     // pointless function, now...\n     pub fn str_of(&self, id: ast::Ident) -> @str {"}, {"sha": "403e0c3d377e7cd9e20bd5db6a224b9624cb9103", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2eb92b77a97b5657919d636700d72f7578af2a4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb92b77a97b5657919d636700d72f7578af2a4f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2eb92b77a97b5657919d636700d72f7578af2a4f", "patch": "@@ -2961,7 +2961,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     let mut n_subcrates = 1;\n     let cstore = sess.cstore;\n     while cstore::have_crate_data(cstore, n_subcrates) { n_subcrates += 1; }\n-    let mapname = if *sess.building_library {\n+    let mapname = if *sess.building_library && !sess.gen_crate_map() {\n         format!(\"{}_{}_{}\", mapmeta.name, mapmeta.vers, mapmeta.extras_hash)\n     } else {\n         ~\"toplevel\""}]}