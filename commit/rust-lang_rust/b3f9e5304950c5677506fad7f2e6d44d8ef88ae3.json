{"sha": "b3f9e5304950c5677506fad7f2e6d44d8ef88ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZjllNTMwNDk1MGM1Njc3NTA2ZmFkN2YyZTZkNDRkOGVmODhhZTM=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-31T15:26:32Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-04-01T14:55:26Z"}, "message": "Implement 'GetSystemTimeAsFileTime' shim for Windows", "tree": {"sha": "927db8e1e38c2978473c5beb2708f997a2765dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/927db8e1e38c2978473c5beb2708f997a2765dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3", "html_url": "https://github.com/rust-lang/rust/commit/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552775b5937577f7a127153227d5f0f924ab9eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/552775b5937577f7a127153227d5f0f924ab9eb2", "html_url": "https://github.com/rust-lang/rust/commit/552775b5937577f7a127153227d5f0f924ab9eb2"}], "stats": {"total": 94, "additions": 73, "deletions": 21}, "files": [{"sha": "7d22b85b18ebfd743b2f6e148ccb4543acfe3903", "filename": "src/helpers.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=b3f9e5304950c5677506fad7f2e6d44d8ef88ae3", "patch": "@@ -73,17 +73,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .not_undef()\n     }\n \n+    /// Helper function to get a `libc` constant as an `i32`.\n+    fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n+        // TODO: Cache the result.\n+        self.eval_libc(name)?.to_i32()\n+    }\n+\n     /// Helper function to get a `windows` constant as a `Scalar`.\n-    fn eval_windows(&mut self, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n+    fn eval_windows(&mut self, module: &str, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n         self.eval_context_mut()\n-            .eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", name])?\n+            .eval_path_scalar(&[\"std\", \"sys\", \"windows\", module, name])?\n             .not_undef()\n     }\n \n-    /// Helper function to get a `libc` constant as an `i32`.\n-    fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n+    /// Helper function to get a `windows` constant as an `u64`.\n+    fn eval_windows_u64(&mut self, module: &str, name: &str) -> InterpResult<'tcx, u64> {\n         // TODO: Cache the result.\n-        self.eval_libc(name)?.to_i32()\n+        self.eval_windows(module, name)?.to_u64()\n     }\n \n     /// Helper function to get the `TyAndLayout` of a `libc` type\n@@ -93,6 +99,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.layout_of(ty)\n     }\n \n+    /// Helper function to get the `TyAndLayout` of a `windows` type\n+    fn windows_ty_layout(&mut self, name: &str) -> InterpResult<'tcx, TyAndLayout<'tcx>> {\n+        let this = self.eval_context_mut();\n+        let ty = this.resolve_path(&[\"std\", \"sys\", \"windows\", \"c\", name]).monomorphic_ty(*this.tcx);\n+        this.layout_of(ty)\n+    }\n+\n     /// Write a 0 of the appropriate size to `dest`.\n     fn write_null(&mut self, dest: PlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n         self.eval_context_mut().write_scalar(Scalar::from_int(0, dest.layout.size), dest)\n@@ -350,7 +363,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n-    // Writes several `ImmTy`s contiguosly into memory. This is useful when you have to pack\n+    // Writes several `ImmTy`s contiguously into memory. This is useful when you have to pack\n     // different values into a struct.\n     fn write_packed_immediates(\n         &mut self,\n@@ -439,7 +452,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             })?\n         } else if target_os == \"windows\" {\n             // FIXME: we have to finish implementing the Windows equivalent of this.\n-            this.eval_windows(match e.kind() {\n+            this.eval_windows(\"c\", match e.kind() {\n                 NotFound => \"ERROR_FILE_NOT_FOUND\",\n                 _ => throw_unsup_format!(\"io error {} cannot be transformed into a raw os error\", e)\n             })?"}, {"sha": "3ffe4fc421f99ecee3858daf46d790669abab32d", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=b3f9e5304950c5677506fad7f2e6d44d8ef88ae3", "patch": "@@ -143,7 +143,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 windows_check_buffer_size(this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?)\n             }\n             None => {\n-                let envvar_not_found = this.eval_windows(\"ERROR_ENVVAR_NOT_FOUND\")?;\n+                let envvar_not_found = this.eval_windows(\"c\", \"ERROR_ENVVAR_NOT_FOUND\")?;\n                 this.set_last_error(envvar_not_found)?;\n                 0 // return zero upon failure\n             }"}, {"sha": "ee39773d71f8374cc68d955eb4d8b1129c1c63ff", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=b3f9e5304950c5677506fad7f2e6d44d8ef88ae3", "patch": "@@ -167,6 +167,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 )?;\n             }\n \n+            // Time related shims\n+            \"GetSystemTimeAsFileTime\" => {\n+                this.GetSystemTimeAsFileTime(args[0])?;\n+            }\n+\n             // Miscellaneous\n             \"SystemFunction036\" => {\n                 // The actual name of 'RtlGenRandom'"}, {"sha": "d501fa8a0fdb88f32ed55f4253fd3be2efe69223", "filename": "src/shims/time.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=b3f9e5304950c5677506fad7f2e6d44d8ef88ae3", "patch": "@@ -3,7 +3,9 @@ use std::convert::TryFrom;\n \n use crate::stacked_borrows::Tag;\n use crate::*;\n-use helpers::immty_from_int_checked;\n+use helpers::{immty_from_int_checked, immty_from_uint_checked};\n+\n+use rustc_middle::ty::layout::LayoutOf;\n \n /// Returns the time elapsed between the provided time and the unix epoch as a `Duration`.\n pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Duration> {\n@@ -85,6 +87,36 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(0)\n     }\n \n+    #[allow(non_snake_case)]\n+    fn GetSystemTimeAsFileTime(&mut self, LPFILETIME_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+\n+        this.assert_target_os(\"windows\", \"GetSystemTimeAsFileTime\");\n+        this.check_no_isolation(\"GetSystemTimeAsFileTime\")?;\n+\n+        let NANOS_PER_SEC = this.eval_windows_u64(\"time\", \"NANOS_PER_SEC\")?;\n+        let INTERVALS_PER_SEC = this.eval_windows_u64(\"time\", \"INTERVALS_PER_SEC\")?;\n+        let INTERVALS_TO_UNIX_EPOCH = this.eval_windows_u64(\"time\", \"INTERVALS_TO_UNIX_EPOCH\")?;\n+        let NANOS_PER_INTERVAL = NANOS_PER_SEC / INTERVALS_PER_SEC;\n+        let SECONDS_TO_UNIX_EPOCH = INTERVALS_TO_UNIX_EPOCH / INTERVALS_PER_SEC;\n+\n+        let duration = system_time_to_duration(&SystemTime::now())?\n+            .checked_add(Duration::from_secs(SECONDS_TO_UNIX_EPOCH))\n+            .unwrap();        \n+        let duration_ticks = u64::try_from(duration.as_nanos() / u128::from(NANOS_PER_INTERVAL))\n+            .map_err(|_| err_unsup_format!(\"programs running longer than 2^64 ticks are not supported\"))?;\n+\n+        let dwLowDateTime = u32::try_from(duration_ticks & 0x00000000FFFFFFFF).unwrap();\n+        let dwHighDateTime = u32::try_from((duration_ticks & 0xFFFFFFFF00000000) >> 32).unwrap();\n+        let DWORD_tylayout = this.layout_of(this.tcx.types.u32)?;\n+        let imms = [\n+            immty_from_uint_checked(dwLowDateTime, DWORD_tylayout)?,\n+            immty_from_uint_checked(dwHighDateTime, DWORD_tylayout)?,\n+        ];\n+        this.write_packed_immediates(this.deref_operand(LPFILETIME_op)?, &imms)?;\n+        Ok(())\n+    }\n+\n     fn mach_absolute_time(&self) -> InterpResult<'tcx, u64> {\n         let this = self.eval_context_ref();\n "}, {"sha": "fc2059fa25612862628b462c01a905911c1e6168", "filename": "tests/run-pass/time.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/tests%2Frun-pass%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f9e5304950c5677506fad7f2e6d44d8ef88ae3/tests%2Frun-pass%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftime.rs?ref=b3f9e5304950c5677506fad7f2e6d44d8ef88ae3", "patch": "@@ -1,4 +1,3 @@\n-// ignore-windows: TODO clock shims are not implemented on Windows\n // compile-flags: -Zmiri-disable-isolation\n \n use std::time::{SystemTime, Instant};\n@@ -14,17 +13,20 @@ fn main() {\n     assert_eq!(now1 + diff, now2);\n     assert_eq!(now2 - diff, now1);\n \n-    let now1 = Instant::now();\n-    // Do some work to make time pass.\n-    for _ in 0..10 { drop(vec![42]); }\n-    let now2 = Instant::now();\n-    assert!(now2 > now1);\n-\n-    #[cfg(target_os = \"linux\")] // TODO: macOS does not support Instant subtraction\n+    #[cfg(not(windows))] // `Instant` shims not yet implemented on Windows\n     {\n-        let diff = now2.duration_since(now1);\n-        assert!(diff.as_micros() > 0);\n-        assert_eq!(now1 + diff, now2);\n-        assert_eq!(now2 - diff, now1);\n+        let now1 = Instant::now();\n+        // Do some work to make time pass.\n+        for _ in 0..10 { drop(vec![42]); }\n+        let now2 = Instant::now();\n+        assert!(now2 > now1);\n+\n+        #[cfg(target_os = \"linux\")] // TODO: macOS does not support Instant subtraction\n+        {\n+            let diff = now2.duration_since(now1);\n+            assert!(diff.as_micros() > 0);\n+            assert_eq!(now1 + diff, now2);\n+            assert_eq!(now2 - diff, now1);\n+        }\n     }\n }"}]}