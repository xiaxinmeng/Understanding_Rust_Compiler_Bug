{"sha": "8d1f5336c2dda92b007e8a4306315f7e81c76424", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMWY1MzM2YzJkZGE5MmIwMDdlOGE0MzA2MzE1ZjdlODFjNzY0MjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T09:07:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-12T10:01:20Z"}, "message": "also test unsafe cast intrinsic (happy cases)", "tree": {"sha": "e7e9b224841a95c744c84af3f03d16067e131cb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7e9b224841a95c744c84af3f03d16067e131cb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1f5336c2dda92b007e8a4306315f7e81c76424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1f5336c2dda92b007e8a4306315f7e81c76424", "html_url": "https://github.com/rust-lang/rust/commit/8d1f5336c2dda92b007e8a4306315f7e81c76424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1f5336c2dda92b007e8a4306315f7e81c76424/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85dff8b67adce34efe9c651f687e5445e3e3325b", "url": "https://api.github.com/repos/rust-lang/rust/commits/85dff8b67adce34efe9c651f687e5445e3e3325b", "html_url": "https://github.com/rust-lang/rust/commit/85dff8b67adce34efe9c651f687e5445e3e3325b"}], "stats": {"total": 185, "additions": 125, "deletions": 60}, "files": [{"sha": "4c30cd01c4c00e6a9d0bcfe3f7533f922663e868", "filename": "tests/run-pass/float.rs", "status": "modified", "additions": 125, "deletions": 60, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/8d1f5336c2dda92b007e8a4306315f7e81c76424/tests%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1f5336c2dda92b007e8a4306315f7e81c76424/tests%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat.rs?ref=8d1f5336c2dda92b007e8a4306315f7e81c76424", "patch": "@@ -10,6 +10,63 @@ fn assert_eq<T: PartialEq + Debug>(x: T, y: T) {\n     assert_eq!(x, y);\n }\n \n+trait FloatToInt<Int>: Copy {\n+    fn cast(self) -> Int;\n+    unsafe fn cast_unchecked(self) -> Int;\n+}\n+\n+impl FloatToInt<i8> for f32 {\n+    fn cast(self) -> i8 { self as _ }\n+    unsafe fn cast_unchecked(self) -> i8 { self.to_int_unchecked() }\n+}\n+impl FloatToInt<i32> for f32 {\n+    fn cast(self) -> i32 { self as _ }\n+    unsafe fn cast_unchecked(self) -> i32 { self.to_int_unchecked() }\n+}\n+impl FloatToInt<u32> for f32 {\n+    fn cast(self) -> u32 { self as _ }\n+    unsafe fn cast_unchecked(self) -> u32 { self.to_int_unchecked() }\n+}\n+impl FloatToInt<i64> for f32 {\n+    fn cast(self) -> i64 { self as _ }\n+    unsafe fn cast_unchecked(self) -> i64 { self.to_int_unchecked() }\n+}\n+impl FloatToInt<u64> for f32 {\n+    fn cast(self) -> u64 { self as _ }\n+    unsafe fn cast_unchecked(self) -> u64 { self.to_int_unchecked() }\n+}\n+\n+impl FloatToInt<i8> for f64 {\n+    fn cast(self) -> i8 { self as _ }\n+    unsafe fn cast_unchecked(self) -> i8 { self.to_int_unchecked() }\n+}\n+impl FloatToInt<i32> for f64 {\n+    fn cast(self) -> i32 { self as _ }\n+    unsafe fn cast_unchecked(self) -> i32 { self.to_int_unchecked() }\n+}\n+impl FloatToInt<u32> for f64 {\n+    fn cast(self) -> u32 { self as _ }\n+    unsafe fn cast_unchecked(self) -> u32 { self.to_int_unchecked() }\n+}\n+impl FloatToInt<i64> for f64 {\n+    fn cast(self) -> i64 { self as _ }\n+    unsafe fn cast_unchecked(self) -> i64 { self.to_int_unchecked() }\n+}\n+impl FloatToInt<u64> for f64 {\n+    fn cast(self) -> u64 { self as _ }\n+    unsafe fn cast_unchecked(self) -> u64 { self.to_int_unchecked() }\n+}\n+\n+/// Test this cast both via `as` and via `approx_unchecked` (i.e., it must not saturate).\n+#[track_caller]\n+#[inline(never)]\n+fn test_cast<F, I>(x: F, y: I)\n+    where F: FloatToInt<I>, I: PartialEq + Debug\n+{\n+    assert_eq!(x.cast(), y);\n+    assert_eq!(unsafe { x.cast_unchecked() }, y);\n+}\n+\n fn main() {\n     basic();\n     casts();\n@@ -50,19 +107,23 @@ fn basic() {\n }\n \n fn casts() {\n+    // f32 -> i8\n+    test_cast::<f32, i8>(127.99, 127);\n+    test_cast::<f32, i8>(-128.99, -128);\n+\n     // f32 -> i32\n-    assert_eq::<i32>(0.0f32 as i32, 0);\n-    assert_eq::<i32>(-0.0f32 as i32, 0);\n-    assert_eq::<i32>(/*0x1p-149*/ f32::from_bits(0x00000001) as i32, 0);\n-    assert_eq::<i32>(/*-0x1p-149*/ f32::from_bits(0x80000001) as i32, 0);\n-    assert_eq::<i32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd) as i32, 1);\n-    assert_eq::<i32>(/*-0x1.19999ap+0*/ f32::from_bits(0xbf8ccccd) as i32, -1);\n-    assert_eq::<i32>(1.9f32 as i32, 1);\n-    assert_eq::<i32>(-1.9f32 as i32, -1);\n-    assert_eq::<i32>(5.0f32 as i32, 5);\n-    assert_eq::<i32>(-5.0f32 as i32, -5);\n-    assert_eq::<i32>(2147483520.0f32 as i32, 2147483520);\n-    assert_eq::<i32>(-2147483648.0f32 as i32, -2147483648);\n+    test_cast::<f32, i32>(0.0, 0);\n+    test_cast::<f32, i32>(-0.0, 0);\n+    test_cast::<f32, i32>(/*0x1p-149*/ f32::from_bits(0x00000001), 0);\n+    test_cast::<f32, i32>(/*-0x1p-149*/ f32::from_bits(0x80000001), 0);\n+    test_cast::<f32, i32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd), 1);\n+    test_cast::<f32, i32>(/*-0x1.19999ap+0*/ f32::from_bits(0xbf8ccccd), -1);\n+    test_cast::<f32, i32>(1.9, 1);\n+    test_cast::<f32, i32>(-1.9, -1);\n+    test_cast::<f32, i32>(5.0, 5);\n+    test_cast::<f32, i32>(-5.0, -5);\n+    test_cast::<f32, i32>(2147483520.0, 2147483520);\n+    test_cast::<f32, i32>(-2147483648.0, -2147483648);\n     // unrepresentable casts\n     assert_eq::<i32>(2147483648.0f32 as i32, i32::MAX);\n     assert_eq::<i32>(-2147483904.0f32 as i32, i32::MIN);\n@@ -74,19 +135,19 @@ fn casts() {\n     assert_eq::<i32>((-f32::NAN) as i32, 0);\n \n     // f32 -> u32\n-    assert_eq::<u32>(0.0f32 as u32, 0);\n-    assert_eq::<u32>(-0.0f32 as u32, 0);\n-    assert_eq::<u32>(/*0x1p-149*/ f32::from_bits(0x1) as u32, 0);\n-    assert_eq::<u32>(/*-0x1p-149*/ f32::from_bits(0x80000001) as u32, 0);\n-    assert_eq::<u32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd) as u32, 1);\n-    assert_eq::<u32>(1.9f32 as u32, 1);\n-    assert_eq::<u32>(5.0f32 as u32, 5);\n-    assert_eq::<u32>(2147483648.0f32 as u32, 0x8000_0000);\n-    assert_eq::<u32>(4294967040.0f32 as u32, 0u32.wrapping_sub(256));\n-    assert_eq::<u32>(/*-0x1.ccccccp-1*/ f32::from_bits(0xbf666666) as u32, 0);\n-    assert_eq::<u32>(/*-0x1.fffffep-1*/ f32::from_bits(0xbf7fffff) as u32, 0);\n-    assert_eq::<u32>((u32::MAX-127) as f32 as u32, u32::MAX); // rounding loss\n-    assert_eq::<u32>((u32::MAX-128) as f32 as u32, u32::MAX-255); // rounding loss\n+    test_cast::<f32, u32>(0.0, 0);\n+    test_cast::<f32, u32>(-0.0, 0);\n+    test_cast::<f32, u32>(/*0x1p-149*/ f32::from_bits(0x1), 0);\n+    test_cast::<f32, u32>(/*-0x1p-149*/ f32::from_bits(0x80000001), 0);\n+    test_cast::<f32, u32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd), 1);\n+    test_cast::<f32, u32>(1.9, 1);\n+    test_cast::<f32, u32>(5.0, 5);\n+    test_cast::<f32, u32>(2147483648.0, 0x8000_0000);\n+    test_cast::<f32, u32>(4294967040.0, 0u32.wrapping_sub(256));\n+    test_cast::<f32, u32>(/*-0x1.ccccccp-1*/ f32::from_bits(0xbf666666), 0);\n+    test_cast::<f32, u32>(/*-0x1.fffffep-1*/ f32::from_bits(0xbf7fffff), 0);\n+    test_cast::<f32, u32>((u32::MAX-127) as f32, u32::MAX); // rounding loss\n+    test_cast::<f32, u32>((u32::MAX-128) as f32, u32::MAX-255); // rounding loss\n     // unrepresentable casts\n     assert_eq::<u32>(4294967296.0f32 as u32, u32::MAX);\n     assert_eq::<u32>(-5.0f32 as u32, 0);\n@@ -98,40 +159,44 @@ fn casts() {\n     assert_eq::<u32>((-f32::NAN) as u32, 0);\n \n     // f32 -> i64\n-    assert_eq::<i64>(4294967296.0f32 as i64, 4294967296);\n-    assert_eq::<i64>(-4294967296.0f32 as i64, -4294967296);\n-    assert_eq::<i64>(9223371487098961920.0f32 as i64, 9223371487098961920);\n-    assert_eq::<i64>(-9223372036854775808.0f32 as i64, -9223372036854775808);\n+    test_cast::<f32, i64>(4294967296.0, 4294967296);\n+    test_cast::<f32, i64>(-4294967296.0, -4294967296);\n+    test_cast::<f32, i64>(9223371487098961920.0, 9223371487098961920);\n+    test_cast::<f32, i64>(-9223372036854775808.0, -9223372036854775808);\n+\n+    // f64 -> i8\n+    test_cast::<f64, i8>(127.99, 127);\n+    test_cast::<f64, i8>(-128.99, -128);\n \n     // f64 -> i32\n-    assert_eq::<i32>(0.0f64 as i32, 0);\n-    assert_eq::<i32>(-0.0f64 as i32, 0);\n-    assert_eq::<i32>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a) as i32, 1);\n-    assert_eq::<i32>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a) as i32, -1);\n-    assert_eq::<i32>(1.9f64 as i32, 1);\n-    assert_eq::<i32>(-1.9f64 as i32, -1);\n-    assert_eq::<i32>(1e8f64 as i32, 100_000_000);\n-    assert_eq::<i32>(2147483647.0f64 as i32, 2147483647);\n-    assert_eq::<i32>(-2147483648.0f64 as i32, -2147483648);\n+    test_cast::<f64, i32>(0.0, 0);\n+    test_cast::<f64, i32>(-0.0, 0);\n+    test_cast::<f64, i32>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a), 1);\n+    test_cast::<f64, i32>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a), -1);\n+    test_cast::<f64, i32>(1.9, 1);\n+    test_cast::<f64, i32>(-1.9, -1);\n+    test_cast::<f64, i32>(1e8, 100_000_000);\n+    test_cast::<f64, i32>(2147483647.0, 2147483647);\n+    test_cast::<f64, i32>(-2147483648.0, -2147483648);\n     // unrepresentable casts\n     assert_eq::<i32>(2147483648.0f64 as i32, i32::MAX);\n     assert_eq::<i32>(-2147483649.0f64 as i32, i32::MIN);\n \n     // f64 -> i64\n-    assert_eq::<i64>(0.0f64 as i64, 0);\n-    assert_eq::<i64>(-0.0f64 as i64, 0);\n-    assert_eq::<i64>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1) as i64, 0);\n-    assert_eq::<i64>(/*-0x0.0000000000001p-1022*/ f64::from_bits(0x8000000000000001) as i64, 0);\n-    assert_eq::<i64>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a) as i64, 1);\n-    assert_eq::<i64>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a) as i64, -1);\n-    assert_eq::<i64>(5.0f64 as i64, 5);\n-    assert_eq::<i64>(5.9f64 as i64, 5);\n-    assert_eq::<i64>(-5.0f64 as i64, -5);\n-    assert_eq::<i64>(-5.9f64 as i64, -5);\n-    assert_eq::<i64>(4294967296.0f64 as i64, 4294967296);\n-    assert_eq::<i64>(-4294967296.0f64 as i64, -4294967296);\n-    assert_eq::<i64>(9223372036854774784.0f64 as i64, 9223372036854774784);\n-    assert_eq::<i64>(-9223372036854775808.0f64 as i64, -9223372036854775808);\n+    test_cast::<f64, i64>(0.0, 0);\n+    test_cast::<f64, i64>(-0.0, 0);\n+    test_cast::<f64, i64>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1), 0);\n+    test_cast::<f64, i64>(/*-0x0.0000000000001p-1022*/ f64::from_bits(0x8000000000000001), 0);\n+    test_cast::<f64, i64>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a), 1);\n+    test_cast::<f64, i64>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a), -1);\n+    test_cast::<f64, i64>(5.0, 5);\n+    test_cast::<f64, i64>(5.9, 5);\n+    test_cast::<f64, i64>(-5.0, -5);\n+    test_cast::<f64, i64>(-5.9, -5);\n+    test_cast::<f64, i64>(4294967296.0, 4294967296);\n+    test_cast::<f64, i64>(-4294967296.0, -4294967296);\n+    test_cast::<f64, i64>(9223372036854774784.0, 9223372036854774784);\n+    test_cast::<f64, i64>(-9223372036854775808.0, -9223372036854775808);\n     // unrepresentable casts\n     assert_eq::<i64>(9223372036854775808.0f64 as i64, i64::MAX);\n     assert_eq::<i64>(-9223372036854777856.0f64 as i64, i64::MIN);\n@@ -143,14 +208,14 @@ fn casts() {\n     assert_eq::<i64>((-f64::NAN) as i64, 0);\n \n     // f64 -> u64\n-    assert_eq::<u64>(0.0f64 as u64, 0);\n-    assert_eq::<u64>(-0.0f64 as u64, 0);\n-    assert_eq::<u64>(5.0f64 as u64, 5);\n-    assert_eq::<u64>(-5.0f64 as u64, 0);\n-    assert_eq::<u64>(1e16f64 as u64, 10000000000000000);\n-    assert_eq::<u64>((u64::MAX-1023) as f64 as u64, u64::MAX); // rounding loss\n-    assert_eq::<u64>((u64::MAX-1024) as f64 as u64, u64::MAX-2047); // rounding loss\n-    assert_eq::<u64>(9223372036854775808.0f64 as u64, 9223372036854775808);\n+    test_cast::<f64, u64>(0.0, 0);\n+    test_cast::<f64, u64>(-0.0, 0);\n+    test_cast::<f64, u64>(5.0, 5);\n+    test_cast::<f64, u64>(-5.0, 0);\n+    test_cast::<f64, u64>(1e16, 10000000000000000);\n+    test_cast::<f64, u64>((u64::MAX-1023) as f64, u64::MAX); // rounding loss\n+    test_cast::<f64, u64>((u64::MAX-1024) as f64, u64::MAX-2047); // rounding loss\n+    test_cast::<f64, u64>(9223372036854775808.0, 9223372036854775808);\n     // unrepresentable casts\n     assert_eq::<u64>(18446744073709551616.0f64 as u64, u64::MAX);\n     assert_eq::<u64>(f64::MAX as u64, u64::MAX);"}]}