{"sha": "c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MWQwMjFmNmQ5N2MxMDFmZjlkMjAxZTViZjhlNzhlZGE4YzhhMWI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-15T01:59:14Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-15T01:59:14Z"}, "message": "Commence moving pexp into ast, for eventual merger with expr.", "tree": {"sha": "b4092e0477f57fc36080ec148b8f759194f9bbee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4092e0477f57fc36080ec148b8f759194f9bbee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b", "html_url": "https://github.com/rust-lang/rust/commit/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b504b3f8d5a3374d079e70c3d6c6d01612e49ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf", "html_url": "https://github.com/rust-lang/rust/commit/b504b3f8d5a3374d079e70c3d6c6d01612e49ecf"}], "stats": {"total": 312, "additions": 158, "deletions": 154}, "files": [{"sha": "661bfe997673d47e08f26877a5f3bada8b7eefca", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b", "patch": "@@ -324,6 +324,37 @@ and expr =\n   | EXPR_unary of (unop * atom)\n   | EXPR_atom of atom\n \n+(* FIXME: The redundancy between exprs and pexps is temporary.\n+ * it'll just take a large-ish number of revisions to eliminate. *)\n+\n+and pexp' =\n+    PEXP_call of (pexp * pexp array)\n+  | PEXP_spawn of (domain * string * pexp)\n+  | PEXP_bind of (pexp * pexp option array)\n+  | PEXP_rec of ((ident * mutability * pexp) array * pexp option)\n+  | PEXP_tup of ((mutability * pexp) array)\n+  | PEXP_vec of mutability * (pexp array)\n+  | PEXP_port\n+  | PEXP_chan of (pexp option)\n+  | PEXP_binop of (binop * pexp * pexp)\n+  | PEXP_lazy_and of (pexp * pexp)\n+  | PEXP_lazy_or of (pexp * pexp)\n+  | PEXP_unop of (unop * pexp)\n+  | PEXP_lval of plval\n+  | PEXP_lit of lit\n+  | PEXP_str of string\n+  | PEXP_box of mutability * pexp\n+  | PEXP_custom of name * (pexp array) * (string option)\n+\n+and plval =\n+    PLVAL_ident of ident\n+  | PLVAL_app of (ident * (ty array))\n+  | PLVAL_ext_name of (pexp * name_component)\n+  | PLVAL_ext_pexp of (pexp * pexp)\n+  | PLVAL_ext_deref of pexp\n+\n+and pexp = pexp' Common.identified\n+\n and lit =\n   | LIT_nil\n   | LIT_bool of bool\n@@ -375,7 +406,6 @@ and unop =\n   | UNOP_neg\n   | UNOP_cast of ty identified\n \n-\n and header_slots = ((slot identified) * ident) array\n \n and header_tup = (slot identified) array"}, {"sha": "d856b1310c452dd5446f87eb8a2618943b6ed253", "filename": "src/boot/fe/cexp.ml", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b/src%2Fboot%2Ffe%2Fcexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b/src%2Fboot%2Ffe%2Fcexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fcexp.ml?ref=c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b", "patch": "@@ -25,9 +25,9 @@ open Parser;;\n  * \n  *)\n \n-type meta = (Ast.ident * Pexp.pexp) array;;\n+type meta = (Ast.ident * Ast.pexp) array;;\n \n-type meta_pat = (Ast.ident * (Pexp.pexp option)) array;;\n+type meta_pat = (Ast.ident * (Ast.pexp option)) array;;\n \n type auth = (Ast.name * Ast.effect);;\n \n@@ -42,22 +42,22 @@ type cexp =\n   | CEXP_auth of auth identified\n \n and cexp_alt =\n-    { alt_val: Pexp.pexp;\n-      alt_arms: (Pexp.pexp * cexp array) array;\n+    { alt_val: Ast.pexp;\n+      alt_arms: (Ast.pexp * cexp array) array;\n       alt_else: cexp array }\n \n and cexp_let =\n     { let_ident: Ast.ident;\n-      let_value: Pexp.pexp;\n+      let_value: Ast.pexp;\n       let_body: cexp array; }\n \n and cexp_src =\n     { src_ident: Ast.ident;\n-      src_path: Pexp.pexp option }\n+      src_path: Ast.pexp option }\n \n and cexp_dir =\n     { dir_ident: Ast.ident;\n-      dir_path: Pexp.pexp option;\n+      dir_path: Ast.pexp option;\n       dir_body: cexp array }\n \n and cexp_use =\n@@ -67,7 +67,7 @@ and cexp_use =\n and cexp_nat =\n     { nat_abi: string;\n       nat_ident: Ast.ident;\n-      nat_path: Pexp.pexp option;\n+      nat_path: Ast.pexp option;\n       (* \n        * FIXME: possibly support embedding optional strings as\n        * symbol-names, to handle mangling schemes that aren't\n@@ -80,7 +80,7 @@ and cexp_nat =\n \n (* Cexp grammar. *)\n \n-let parse_meta_input (ps:pstate) : (Ast.ident * Pexp.pexp option) =\n+let parse_meta_input (ps:pstate) : (Ast.ident * Ast.pexp option) =\n   let lab = (ctxt \"meta input: label\" Pexp.parse_ident ps) in\n     match peek ps with\n         EQ ->\n@@ -120,7 +120,7 @@ let parse_optional_meta_pat\n       LPAREN -> parse_meta_pat ps\n     | _ ->\n         let apos = lexpos ps in\n-          [| (\"name\", Some (span ps apos apos (Pexp.PEXP_str ident))) |]\n+          [| (\"name\", Some (span ps apos apos (Ast.PEXP_str ident))) |]\n ;;\n \n let rec parse_cexps (ps:pstate) (term:Token.token) : cexp array =\n@@ -282,7 +282,7 @@ and parse_cexp (ps:pstate) : cexp =\n       | _ -> raise (unexpected ps)\n \n \n-and  parse_eq_pexp_opt (ps:pstate) : Pexp.pexp option =\n+and  parse_eq_pexp_opt (ps:pstate) : Ast.pexp option =\n   match peek ps with\n       EQ ->\n         begin\n@@ -493,9 +493,9 @@ and eval_cexp (env:env) (exp:cexp) : cdir array =\n     | CEXP_auth a -> [| CDIR_auth a.node |]\n \n \n-and eval_pexp (env:env) (exp:Pexp.pexp) : pval =\n+and eval_pexp (env:env) (exp:Ast.pexp) : pval =\n   match exp.node with\n-    | Pexp.PEXP_binop (bop, a, b) ->\n+    | Ast.PEXP_binop (bop, a, b) ->\n         begin\n           let av = eval_pexp env a in\n           let bv = eval_pexp env b in\n@@ -518,7 +518,7 @@ and eval_pexp (env:env) (exp:Pexp.pexp) : pval =\n                       end\n         end\n \n-    | Pexp.PEXP_unop (uop, a) ->\n+    | Ast.PEXP_unop (uop, a) ->\n         begin\n           match uop with\n               Ast.UNOP_not ->\n@@ -528,29 +528,29 @@ and eval_pexp (env:env) (exp:Pexp.pexp) : pval =\n             | _ -> bug () \"Unexpected unop in Cexp.eval_pexp\"\n         end\n \n-    | Pexp.PEXP_lval (Pexp.PLVAL_ident ident) ->\n+    | Ast.PEXP_lval (Ast.PLVAL_ident ident) ->\n         begin\n           match ltab_search !(env.env_bindings) ident with\n               None -> raise (err (Printf.sprintf \"no binding for '%s' found\"\n                                     ident) env.env_ps)\n             | Some v -> v\n         end\n \n-    | Pexp.PEXP_lit (Ast.LIT_bool b) ->\n+    | Ast.PEXP_lit (Ast.LIT_bool b) ->\n         PVAL_bool b\n \n-    | Pexp.PEXP_lit (Ast.LIT_int i)\n-    | Pexp.PEXP_lit (Ast.LIT_uint i)\n-    | Pexp.PEXP_lit (Ast.LIT_mach_int (_, i)) ->\n+    | Ast.PEXP_lit (Ast.LIT_int i)\n+    | Ast.PEXP_lit (Ast.LIT_uint i)\n+    | Ast.PEXP_lit (Ast.LIT_mach_int (_, i)) ->\n         PVAL_num i\n \n-    | Pexp.PEXP_str s ->\n+    | Ast.PEXP_str s ->\n         PVAL_str s\n \n     | _ -> bug () \"unexpected Pexp in Cexp.eval_pexp\"\n \n \n-and eval_pexp_to_str (env:env) (exp:Pexp.pexp) : string =\n+and eval_pexp_to_str (env:env) (exp:Ast.pexp) : string =\n   match eval_pexp env exp with\n       PVAL_str s -> s\n     | v -> unexpected_val \"str\" v\n@@ -560,10 +560,10 @@ and need_num (cv:pval) : int64 =\n       PVAL_num n -> n\n     | v -> unexpected_val \"num\" v\n \n-and eval_pexp_to_num (env:env) (exp:Pexp.pexp) : int64 =\n+and eval_pexp_to_num (env:env) (exp:Ast.pexp) : int64 =\n   need_num (eval_pexp env exp)\n \n-and eval_pexp_to_bool (env:env) (exp:Pexp.pexp) : bool =\n+and eval_pexp_to_bool (env:env) (exp:Ast.pexp) : bool =\n   match eval_pexp env exp with\n       PVAL_bool b -> b\n     | v -> unexpected_val \"bool\" v"}, {"sha": "f57044161fdc3cf0f0431c2bc6e13712688450cf", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 104, "deletions": 130, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=c61d021f6d97c101ff9d201e5bf8e78eda8c8a1b", "patch": "@@ -16,35 +16,6 @@ open Parser;;\n  * routine.\n  *)\n \n-type pexp' =\n-    PEXP_call of (pexp * pexp array)\n-  | PEXP_spawn of (Ast.domain * string * pexp)\n-  | PEXP_bind of (pexp * pexp option array)\n-  | PEXP_rec of ((Ast.ident * Ast.mutability * pexp) array * pexp option)\n-  | PEXP_tup of ((Ast.mutability * pexp) array)\n-  | PEXP_vec of Ast.mutability * (pexp array)\n-  | PEXP_port\n-  | PEXP_chan of (pexp option)\n-  | PEXP_binop of (Ast.binop * pexp * pexp)\n-  | PEXP_lazy_and of (pexp * pexp)\n-  | PEXP_lazy_or of (pexp * pexp)\n-  | PEXP_unop of (Ast.unop * pexp)\n-  | PEXP_lval of plval\n-  | PEXP_lit of Ast.lit\n-  | PEXP_str of string\n-  | PEXP_box of Ast.mutability * pexp\n-  | PEXP_custom of Ast.name * (pexp array) * (string option)\n-\n-and plval =\n-    PLVAL_ident of Ast.ident\n-  | PLVAL_app of (Ast.ident * (Ast.ty array))\n-  | PLVAL_ext_name of (pexp * Ast.name_component)\n-  | PLVAL_ext_pexp of (pexp * pexp)\n-  | PLVAL_ext_deref of pexp\n-\n-and pexp = pexp' Common.identified\n-;;\n-\n (* Pexp grammar. Includes names, idents, types, constrs, binops and unops,\n    etc. *)\n \n@@ -407,7 +378,8 @@ and parse_ty (ps:pstate) : Ast.ty =\n   parse_constrained_ty ps\n \n \n-and parse_rec_input (ps:pstate) : (Ast.ident * Ast.mutability * pexp) =\n+and parse_rec_input (ps:pstate)\n+    : (Ast.ident * Ast.mutability * Ast.pexp) =\n   let mutability = parse_mutability ps in\n   let lab = (ctxt \"rec input: label\" parse_ident ps) in\n     match peek ps with\n@@ -418,19 +390,19 @@ and parse_rec_input (ps:pstate) : (Ast.ident * Ast.mutability * pexp) =\n       | _ -> raise (unexpected ps)\n \n \n-and parse_rec_body (ps:pstate) : pexp' = (*((Ast.ident * pexp) array) =*)\n+and parse_rec_body (ps:pstate) : Ast.pexp' =\n   begin\n     expect ps LPAREN;\n     match peek ps with\n-        RPAREN -> PEXP_rec ([||], None)\n+        RPAREN -> Ast.PEXP_rec ([||], None)\n       | WITH -> raise (err \"empty record extension\" ps)\n       | _ ->\n           let inputs = one_or_more COMMA parse_rec_input ps in\n           let labels = Array.map (fun (l, _, _) -> l) inputs in\n             begin\n               check_dup_rec_labels ps labels;\n               match peek ps with\n-                  RPAREN -> (bump ps; PEXP_rec (inputs, None))\n+                  RPAREN -> (bump ps; Ast.PEXP_rec (inputs, None))\n                 | WITH ->\n                     begin\n                       bump ps;\n@@ -439,7 +411,7 @@ and parse_rec_body (ps:pstate) : pexp' = (*((Ast.ident * pexp) array) =*)\n                           parse_pexp ps\n                       in\n                         expect ps RPAREN;\n-                        PEXP_rec (inputs, Some base)\n+                        Ast.PEXP_rec (inputs, Some base)\n                     end\n                 | _ -> raise (err \"expected 'with' or ')'\" ps)\n             end\n@@ -456,7 +428,7 @@ and parse_lit (ps:pstate) : Ast.lit =\n     | _ -> raise (unexpected ps)\n \n \n-and parse_bottom_pexp (ps:pstate) : pexp =\n+and parse_bottom_pexp (ps:pstate) : Ast.pexp =\n   check_rstr_start ps;\n   let apos = lexpos ps in\n   match peek ps with\n@@ -466,15 +438,15 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n         let mutability = parse_mutability ps in\n         let inner = parse_pexp ps in\n         let bpos = lexpos ps in\n-          span ps apos bpos (PEXP_box (mutability, inner))\n+          span ps apos bpos (Ast.PEXP_box (mutability, inner))\n \n     | TUP ->\n         bump ps;\n         let pexps =\n           ctxt \"paren pexps(s)\" (rstr false parse_mutable_and_pexp_list) ps\n         in\n         let bpos = lexpos ps in\n-          span ps apos bpos (PEXP_tup pexps)\n+          span ps apos bpos (Ast.PEXP_tup pexps)\n \n     | REC ->\n           bump ps;\n@@ -495,21 +467,21 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n         in\n         let pexps = ctxt \"vec pexp: exprs\" parse_pexp_list ps in\n         let bpos = lexpos ps in\n-          span ps apos bpos (PEXP_vec (mutability, pexps))\n+          span ps apos bpos (Ast.PEXP_vec (mutability, pexps))\n \n \n     | LIT_STR s ->\n         bump ps;\n         let bpos = lexpos ps in\n-          span ps apos bpos (PEXP_str s)\n+          span ps apos bpos (Ast.PEXP_str s)\n \n     | PORT ->\n         begin\n             bump ps;\n             expect ps LPAREN;\n             expect ps RPAREN;\n             let bpos = lexpos ps in\n-              span ps apos bpos (PEXP_port)\n+              span ps apos bpos (Ast.PEXP_port)\n         end\n \n     | CHAN ->\n@@ -530,7 +502,7 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n                 | _ -> raise (unexpected ps)\n             in\n             let bpos = lexpos ps in\n-              span ps apos bpos (PEXP_chan port)\n+              span ps apos bpos (Ast.PEXP_chan port)\n         end\n \n     | SPAWN ->\n@@ -560,7 +532,7 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n                    characters *)\n             | None -> Session.string_of_span { lo = apos; hi = bpos }\n         in\n-          span ps apos bpos (PEXP_spawn (domain, name, pexp))\n+          span ps apos bpos (Ast.PEXP_spawn (domain, name, pexp))\n \n     | BIND ->\n         let apos = lexpos ps in\n@@ -572,7 +544,7 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n                 (paren_comma_list parse_bind_arg) ps\n             in\n             let bpos = lexpos ps in\n-              span ps apos bpos (PEXP_bind (pexp, args))\n+              span ps apos bpos (Ast.PEXP_bind (pexp, args))\n           end\n \n     | IDENT i ->\n@@ -587,13 +559,13 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n                          (Some COMMA) parse_ty) ps\n                   in\n                   let bpos = lexpos ps in\n-                    span ps apos bpos (PEXP_lval (PLVAL_app (i, tys)))\n+                    span ps apos bpos (Ast.PEXP_lval (Ast.PLVAL_app (i, tys)))\n                 end\n \n             | _ ->\n                 begin\n                   let bpos = lexpos ps in\n-                    span ps apos bpos (PEXP_lval (PLVAL_ident i))\n+                    span ps apos bpos (Ast.PEXP_lval (Ast.PLVAL_ident i))\n                 end\n         end\n \n@@ -602,7 +574,7 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n         bump ps;\n         let inner = parse_pexp ps in\n         let bpos = lexpos ps in\n-          span ps apos bpos (PEXP_lval (PLVAL_ext_deref inner))\n+          span ps apos bpos (Ast.PEXP_lval (Ast.PLVAL_ext_deref inner))\n \n     | POUND ->\n         bump ps;\n@@ -626,7 +598,7 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n         in\n         let bpos = lexpos ps in\n           span ps apos bpos\n-            (PEXP_custom (name, args, str))\n+            (Ast.PEXP_custom (name, args, str))\n \n     | LPAREN ->\n         begin\n@@ -635,7 +607,7 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n               RPAREN ->\n                 bump ps;\n                 let bpos = lexpos ps in\n-                  span ps apos bpos (PEXP_lit Ast.LIT_nil)\n+                  span ps apos bpos (Ast.PEXP_lit Ast.LIT_nil)\n             | _ ->\n                 let pexp = parse_pexp ps in\n                   expect ps RPAREN;\n@@ -645,16 +617,16 @@ and parse_bottom_pexp (ps:pstate) : pexp =\n     | _ ->\n         let lit = parse_lit ps in\n         let bpos = lexpos ps in\n-          span ps apos bpos (PEXP_lit lit)\n+          span ps apos bpos (Ast.PEXP_lit lit)\n \n \n-and parse_bind_arg (ps:pstate) : pexp option =\n+and parse_bind_arg (ps:pstate) : Ast.pexp option =\n   match peek ps with\n       UNDERSCORE -> (bump ps; None)\n     | _ -> Some (parse_pexp ps)\n \n \n-and parse_ext_pexp (ps:pstate) (pexp:pexp) : pexp =\n+and parse_ext_pexp (ps:pstate) (pexp:Ast.pexp) : Ast.pexp =\n   let apos = lexpos ps in\n     match peek ps with\n         LPAREN ->\n@@ -663,7 +635,7 @@ and parse_ext_pexp (ps:pstate) (pexp:pexp) : pexp =\n           else\n             let args = parse_pexp_list ps in\n             let bpos = lexpos ps in\n-            let ext = span ps apos bpos (PEXP_call (pexp, args)) in\n+            let ext = span ps apos bpos (Ast.PEXP_call (pexp, args)) in\n               parse_ext_pexp ps ext\n \n       | DOT ->\n@@ -677,39 +649,39 @@ and parse_ext_pexp (ps:pstate) (pexp:pexp) : pexp =\n                       expect ps RPAREN;\n                       let bpos = lexpos ps in\n                         span ps apos bpos\n-                          (PEXP_lval (PLVAL_ext_pexp (pexp, rhs)))\n+                          (Ast.PEXP_lval (Ast.PLVAL_ext_pexp (pexp, rhs)))\n                 | _ ->\n                     let rhs = parse_name_component ps in\n                     let bpos = lexpos ps in\n                       span ps apos bpos\n-                        (PEXP_lval (PLVAL_ext_name (pexp, rhs)))\n+                        (Ast.PEXP_lval (Ast.PLVAL_ext_name (pexp, rhs)))\n             in\n               parse_ext_pexp ps ext\n           end\n \n       | _ -> pexp\n \n \n-and parse_negation_pexp (ps:pstate) : pexp =\n+and parse_negation_pexp (ps:pstate) : Ast.pexp =\n     let apos = lexpos ps in\n       match peek ps with\n           NOT ->\n             bump ps;\n             let rhs = ctxt \"negation pexp\" parse_negation_pexp ps in\n             let bpos = lexpos ps in\n-              span ps apos bpos (PEXP_unop (Ast.UNOP_not, rhs))\n+              span ps apos bpos (Ast.PEXP_unop (Ast.UNOP_not, rhs))\n \n         | TILDE ->\n             bump ps;\n             let rhs = ctxt \"negation pexp\" parse_negation_pexp ps in\n             let bpos = lexpos ps in\n-              span ps apos bpos (PEXP_unop (Ast.UNOP_bitnot, rhs))\n+              span ps apos bpos (Ast.PEXP_unop (Ast.UNOP_bitnot, rhs))\n \n         | MINUS ->\n             bump ps;\n             let rhs = ctxt \"negation pexp\" parse_negation_pexp ps in\n             let bpos = lexpos ps in\n-              span ps apos bpos (PEXP_unop (Ast.UNOP_neg, rhs))\n+              span ps apos bpos (Ast.PEXP_unop (Ast.UNOP_neg, rhs))\n \n         | _ ->\n             let lhs = parse_bottom_pexp ps in\n@@ -722,19 +694,19 @@ and binop_build\n     (ps:pstate)\n     (name:string)\n     (apos:pos)\n-    (rhs_parse_fn:pstate -> pexp)\n-    (lhs:pexp)\n-    (step_fn:pexp -> pexp)\n+    (rhs_parse_fn:pstate -> Ast.pexp)\n+    (lhs:Ast.pexp)\n+    (step_fn:Ast.pexp -> Ast.pexp)\n     (op:Ast.binop)\n-    : pexp =\n+    : Ast.pexp =\n   bump ps;\n   let rhs = (ctxt (name ^ \" rhs\") rhs_parse_fn ps) in\n   let bpos = lexpos ps in\n-  let node = span ps apos bpos (PEXP_binop (op, lhs, rhs)) in\n+  let node = span ps apos bpos (Ast.PEXP_binop (op, lhs, rhs)) in\n     step_fn node\n \n \n-and parse_factor_pexp (ps:pstate) : pexp =\n+and parse_factor_pexp (ps:pstate) : Ast.pexp =\n   let name = \"factor pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_negation_pexp ps in\n@@ -749,7 +721,7 @@ and parse_factor_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n-and parse_term_pexp (ps:pstate) : pexp =\n+and parse_term_pexp (ps:pstate) : Ast.pexp =\n   let name = \"term pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_factor_pexp ps in\n@@ -763,7 +735,7 @@ and parse_term_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n-and parse_shift_pexp (ps:pstate) : pexp =\n+and parse_shift_pexp (ps:pstate) : Ast.pexp =\n   let name = \"shift pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_term_pexp ps in\n@@ -778,7 +750,7 @@ and parse_shift_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n-and parse_and_pexp (ps:pstate) : pexp =\n+and parse_and_pexp (ps:pstate) : Ast.pexp =\n   let name = \"and pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_shift_pexp ps in\n@@ -791,7 +763,7 @@ and parse_and_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n-and parse_xor_pexp (ps:pstate) : pexp =\n+and parse_xor_pexp (ps:pstate) : Ast.pexp =\n   let name = \"xor pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_and_pexp ps in\n@@ -804,7 +776,7 @@ and parse_xor_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n-and parse_or_pexp (ps:pstate) : pexp =\n+and parse_or_pexp (ps:pstate) : Ast.pexp =\n   let name = \"or pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_xor_pexp ps in\n@@ -817,7 +789,7 @@ and parse_or_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n-and parse_as_pexp (ps:pstate) : pexp =\n+and parse_as_pexp (ps:pstate) : Ast.pexp =\n   let apos = lexpos ps in\n   let pexp = ctxt \"as pexp\" parse_or_pexp ps in\n   let rec step accum =\n@@ -830,7 +802,7 @@ and parse_as_pexp (ps:pstate) : pexp =\n           let t = span ps tapos bpos t in\n           let node =\n             span ps apos bpos\n-              (PEXP_unop ((Ast.UNOP_cast t), accum))\n+              (Ast.PEXP_unop ((Ast.UNOP_cast t), accum))\n           in\n             step node\n \n@@ -839,7 +811,7 @@ and parse_as_pexp (ps:pstate) : pexp =\n     step pexp\n \n \n-and parse_relational_pexp (ps:pstate) : pexp =\n+and parse_relational_pexp (ps:pstate) : Ast.pexp =\n   let name = \"relational pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_as_pexp ps in\n@@ -855,7 +827,7 @@ and parse_relational_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n-and parse_equality_pexp (ps:pstate) : pexp =\n+and parse_equality_pexp (ps:pstate) : Ast.pexp =\n   let name = \"equality pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_relational_pexp ps in\n@@ -869,7 +841,7 @@ and parse_equality_pexp (ps:pstate) : pexp =\n     step lhs\n \n \n-and parse_andand_pexp (ps:pstate) : pexp =\n+and parse_andand_pexp (ps:pstate) : Ast.pexp =\n   let name = \"andand pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_equality_pexp ps in\n@@ -879,15 +851,15 @@ and parse_andand_pexp (ps:pstate) : pexp =\n           bump ps;\n           let rhs = parse_equality_pexp ps in\n           let bpos = lexpos ps in\n-          let node = span ps apos bpos (PEXP_lazy_and (accum, rhs)) in\n+          let node = span ps apos bpos (Ast.PEXP_lazy_and (accum, rhs)) in\n             step node\n \n       | _   -> accum\n   in\n     step lhs\n \n \n-and parse_oror_pexp (ps:pstate) : pexp =\n+and parse_oror_pexp (ps:pstate) : Ast.pexp =\n   let name = \"oror pexp\" in\n   let apos = lexpos ps in\n   let lhs = ctxt (name ^ \" lhs\") parse_andand_pexp ps in\n@@ -897,29 +869,30 @@ and parse_oror_pexp (ps:pstate) : pexp =\n           bump ps;\n           let rhs = parse_andand_pexp ps in\n           let bpos = lexpos ps in\n-          let node = span ps apos bpos (PEXP_lazy_or (accum, rhs)) in\n+          let node = span ps apos bpos (Ast.PEXP_lazy_or (accum, rhs)) in\n             step node\n \n       | _  -> accum\n   in\n     step lhs\n \n \n-and parse_pexp (ps:pstate) : pexp =\n+and parse_pexp (ps:pstate) : Ast.pexp =\n   parse_oror_pexp ps\n \n-and parse_mutable_and_pexp (ps:pstate) : (Ast.mutability * pexp) =\n+and parse_mutable_and_pexp (ps:pstate) : (Ast.mutability * Ast.pexp) =\n   let mutability = parse_mutability ps in\n   (mutability, parse_as_pexp ps)\n \n-and parse_pexp_list (ps:pstate) : pexp array =\n+and parse_pexp_list (ps:pstate) : Ast.pexp array =\n   match peek ps with\n       LPAREN ->\n         bracketed_zero_or_more LPAREN RPAREN (Some COMMA)\n           (ctxt \"pexp list\" parse_pexp) ps\n     | _ -> raise (unexpected ps)\n \n-and parse_mutable_and_pexp_list (ps:pstate) : (Ast.mutability * pexp) array =\n+and parse_mutable_and_pexp_list (ps:pstate)\n+    : (Ast.mutability * Ast.pexp) array =\n   match peek ps with\n       LPAREN ->\n         bracketed_zero_or_more LPAREN RPAREN (Some COMMA)\n@@ -981,32 +954,33 @@ let expand_pexp_custom\n  *     result of the pexp is prepended, and the temporary atom is used.\n  *)\n \n-let rec desugar_lval (ps:pstate) (pexp:pexp) : (Ast.stmt array * Ast.lval) =\n+let rec desugar_lval (ps:pstate) (pexp:Ast.pexp)\n+    : (Ast.stmt array * Ast.lval) =\n   let s = Hashtbl.find ps.pstate_sess.Session.sess_spans pexp.id in\n   let (apos, bpos) = (s.lo, s.hi) in\n     match pexp.node with\n \n-        PEXP_lval (PLVAL_ident ident) ->\n+        Ast.PEXP_lval (Ast.PLVAL_ident ident) ->\n           let nb = span ps apos bpos (Ast.BASE_ident ident) in\n             ([||], Ast.LVAL_base nb)\n \n-      | PEXP_lval (PLVAL_app (ident, tys)) ->\n+      | Ast.PEXP_lval (Ast.PLVAL_app (ident, tys)) ->\n           let nb = span ps apos bpos (Ast.BASE_app (ident, tys)) in\n             ([||], Ast.LVAL_base nb)\n \n-      | PEXP_lval (PLVAL_ext_name (base_pexp, comp)) ->\n+      | Ast.PEXP_lval (Ast.PLVAL_ext_name (base_pexp, comp)) ->\n           let (base_stmts, base_atom) = desugar_expr_atom ps base_pexp in\n           let base_lval = atom_lval ps base_atom in\n             (base_stmts, Ast.LVAL_ext (base_lval, Ast.COMP_named comp))\n \n-      | PEXP_lval (PLVAL_ext_pexp (base_pexp, ext_pexp)) ->\n+      | Ast.PEXP_lval (Ast.PLVAL_ext_pexp (base_pexp, ext_pexp)) ->\n           let (base_stmts, base_atom) = desugar_expr_atom ps base_pexp in\n           let (ext_stmts, ext_atom) = desugar_expr_atom ps ext_pexp in\n           let base_lval = atom_lval ps base_atom in\n             (Array.append base_stmts ext_stmts,\n              Ast.LVAL_ext (base_lval, Ast.COMP_atom (clone_atom ps ext_atom)))\n \n-      | PEXP_lval (PLVAL_ext_deref base_pexp) ->\n+      | Ast.PEXP_lval (Ast.PLVAL_ext_deref base_pexp) ->\n           let (base_stmts, base_atom) = desugar_expr_atom ps base_pexp in\n           let base_lval = atom_lval ps base_atom in\n             (base_stmts, Ast.LVAL_ext (base_lval, Ast.COMP_deref))\n@@ -1018,15 +992,15 @@ let rec desugar_lval (ps:pstate) (pexp:pexp) : (Ast.stmt array * Ast.lval) =\n \n and desugar_expr\n     (ps:pstate)\n-    (pexp:pexp)\n+    (pexp:Ast.pexp)\n     : (Ast.stmt array * Ast.expr) =\n   match pexp.node with\n \n-      PEXP_unop (op, pe) ->\n+      Ast.PEXP_unop (op, pe) ->\n         let (stmts, at) = desugar_expr_atom ps pe in\n           (stmts, Ast.EXPR_unary (op, at))\n \n-    | PEXP_binop (op, lhs, rhs) ->\n+    | Ast.PEXP_binop (op, lhs, rhs) ->\n           let (lhs_stmts, lhs_atom) = desugar_expr_atom ps lhs in\n           let (rhs_stmts, rhs_atom) = desugar_expr_atom ps rhs in\n             (Array.append lhs_stmts rhs_stmts,\n@@ -1039,7 +1013,7 @@ and desugar_expr\n \n and desugar_opt_expr_atom\n     (ps:pstate)\n-    (po:pexp option)\n+    (po:Ast.pexp option)\n     : (Ast.stmt array * Ast.atom option) =\n   match po with\n       None -> ([| |], None)\n@@ -1050,55 +1024,55 @@ and desugar_opt_expr_atom\n \n and desugar_expr_atom\n     (ps:pstate)\n-    (pexp:pexp)\n+    (pexp:Ast.pexp)\n     : (Ast.stmt array * Ast.atom) =\n   let s = Hashtbl.find ps.pstate_sess.Session.sess_spans pexp.id in\n   let (apos, bpos) = (s.lo, s.hi) in\n     match pexp.node with\n \n-        PEXP_unop _\n-      | PEXP_binop _\n-      | PEXP_lazy_or _\n-      | PEXP_lazy_and _\n-      | PEXP_rec _\n-      | PEXP_tup _\n-      | PEXP_str _\n-      | PEXP_vec _\n-      | PEXP_port\n-      | PEXP_chan _\n-      | PEXP_call _\n-      | PEXP_bind _\n-      | PEXP_spawn _\n-      | PEXP_custom _\n-      | PEXP_box _ ->\n+        Ast.PEXP_unop _\n+      | Ast.PEXP_binop _\n+      | Ast.PEXP_lazy_or _\n+      | Ast.PEXP_lazy_and _\n+      | Ast.PEXP_rec _\n+      | Ast.PEXP_tup _\n+      | Ast.PEXP_str _\n+      | Ast.PEXP_vec _\n+      | Ast.PEXP_port\n+      | Ast.PEXP_chan _\n+      | Ast.PEXP_call _\n+      | Ast.PEXP_bind _\n+      | Ast.PEXP_spawn _\n+      | Ast.PEXP_custom _\n+      | Ast.PEXP_box _ ->\n           let (_, tmp, decl_stmt) = build_tmp ps slot_auto apos bpos in\n           let stmts = desugar_expr_init ps tmp pexp in\n             (Array.append [| decl_stmt |] stmts,\n              Ast.ATOM_lval (clone_lval ps tmp))\n \n-      | PEXP_lit lit ->\n+      | Ast.PEXP_lit lit ->\n           ([||], Ast.ATOM_literal (span ps apos bpos lit))\n \n-      | PEXP_lval _ ->\n+      | Ast.PEXP_lval _ ->\n           let (stmts, lval) = desugar_lval ps pexp in\n             (stmts, Ast.ATOM_lval lval)\n \n and desugar_expr_atoms\n     (ps:pstate)\n-    (pexps:pexp array)\n+    (pexps:Ast.pexp array)\n     : (Ast.stmt array * Ast.atom array) =\n   arj1st (Array.map (desugar_expr_atom ps) pexps)\n \n and desugar_opt_expr_atoms\n     (ps:pstate)\n-    (pexps:pexp option array)\n+    (pexps:Ast.pexp option array)\n     : (Ast.stmt array * Ast.atom option array) =\n   arj1st (Array.map (desugar_opt_expr_atom ps) pexps)\n \n and desugar_expr_init\n     (ps:pstate)\n     (dst_lval:Ast.lval)\n-    (pexp:pexp)\n+    (pexp:Ast.pexp)\n     : (Ast.stmt array) =\n   let s = Hashtbl.find ps.pstate_sess.Session.sess_spans pexp.id in\n   let (apos, bpos) = (s.lo, s.hi) in\n@@ -1111,12 +1085,12 @@ and desugar_expr_init\n \n     match pexp.node with\n \n-        PEXP_lit _\n-      | PEXP_lval _ ->\n+        Ast.PEXP_lit _\n+      | Ast.PEXP_lval _ ->\n           let (stmts, atom) = desugar_expr_atom ps pexp in\n             aa stmts [| ss (cp (Ast.EXPR_atom atom)) |]\n \n-      | PEXP_binop (op, lhs, rhs) ->\n+      | Ast.PEXP_binop (op, lhs, rhs) ->\n           let (lhs_stmts, lhs_atom) = desugar_expr_atom ps lhs in\n           let (rhs_stmts, rhs_atom) = desugar_expr_atom ps rhs in\n           let copy_stmt =\n@@ -1126,7 +1100,7 @@ and desugar_expr_init\n \n       (* x = a && b ==> if (a) { x = b; } else { x = false; } *)\n \n-      | PEXP_lazy_and (lhs, rhs) ->\n+      | Ast.PEXP_lazy_and (lhs, rhs) ->\n           let (lhs_stmts, lhs_atom) = desugar_expr_atom ps lhs in\n           let (rhs_stmts, rhs_atom) = desugar_expr_atom ps rhs in\n           let sthen =\n@@ -1145,7 +1119,7 @@ and desugar_expr_init\n \n       (* x = a || b ==> if (a) { x = true; } else { x = b; } *)\n \n-      | PEXP_lazy_or (lhs, rhs) ->\n+      | Ast.PEXP_lazy_or (lhs, rhs) ->\n           let (lhs_stmts, lhs_atom) = desugar_expr_atom ps lhs in\n           let (rhs_stmts, rhs_atom) = desugar_expr_atom ps rhs in\n           let sthen =\n@@ -1163,30 +1137,30 @@ and desugar_expr_init\n             aa lhs_stmts [| sif |]\n \n \n-      | PEXP_unop (op, rhs) ->\n+      | Ast.PEXP_unop (op, rhs) ->\n           let (rhs_stmts, rhs_atom) = desugar_expr_atom ps rhs in\n           let expr = Ast.EXPR_unary (op, rhs_atom) in\n           let copy_stmt = ss (cp expr) in\n             aa rhs_stmts [| copy_stmt |]\n \n-      | PEXP_call (fn, args) ->\n+      | Ast.PEXP_call (fn, args) ->\n           let (fn_stmts, fn_atom) = desugar_expr_atom ps fn in\n           let (arg_stmts, arg_atoms) = desugar_expr_atoms ps args in\n           let fn_lval = atom_lval ps fn_atom in\n           let call_stmt = ss (Ast.STMT_call (dst_lval, fn_lval, arg_atoms)) in\n             ac [ fn_stmts; arg_stmts; [| call_stmt |] ]\n \n-      | PEXP_bind (fn, args) ->\n+      | Ast.PEXP_bind (fn, args) ->\n           let (fn_stmts, fn_atom) = desugar_expr_atom ps fn in\n           let (arg_stmts, arg_atoms) = desugar_opt_expr_atoms ps args in\n           let fn_lval = atom_lval ps fn_atom in\n           let bind_stmt = ss (Ast.STMT_bind (dst_lval, fn_lval, arg_atoms)) in\n             ac [ fn_stmts; arg_stmts; [| bind_stmt |] ]\n \n-      | PEXP_spawn (domain, name, sub) ->\n+      | Ast.PEXP_spawn (domain, name, sub) ->\n           begin\n             match sub.node with\n-                PEXP_call (fn, args) ->\n+                Ast.PEXP_call (fn, args) ->\n                   let (fn_stmts, fn_atom) = desugar_expr_atom ps fn in\n                   let (arg_stmts, arg_atoms) = desugar_expr_atoms ps args in\n                   let fn_lval = atom_lval ps fn_atom in\n@@ -1198,7 +1172,7 @@ and desugar_expr_init\n               | _ -> raise (err \"non-call spawn\" ps)\n           end\n \n-      | PEXP_rec (args, base) ->\n+      | Ast.PEXP_rec (args, base) ->\n           let (arg_stmts, entries) =\n             arj1st\n               begin\n@@ -1229,7 +1203,7 @@ and desugar_expr_init\n                       aa arg_stmts [| rec_stmt |]\n             end\n \n-      | PEXP_tup args ->\n+      | Ast.PEXP_tup args ->\n           let muts = Array.to_list (Array.map fst args) in\n           let (arg_stmts, arg_atoms) =\n             desugar_expr_atoms ps (Array.map snd args)\n@@ -1239,21 +1213,21 @@ and desugar_expr_init\n           let stmt = ss (Ast.STMT_new_tup (dst_lval, tup_args)) in\n             aa arg_stmts [| stmt |]\n \n-      | PEXP_str s ->\n+      | Ast.PEXP_str s ->\n           let stmt = ss (Ast.STMT_new_str (dst_lval, s)) in\n             [| stmt |]\n \n-      | PEXP_vec (mutability, args) ->\n+      | Ast.PEXP_vec (mutability, args) ->\n           let (arg_stmts, arg_atoms) = desugar_expr_atoms ps args in\n           let stmt =\n             ss (Ast.STMT_new_vec (dst_lval, mutability, arg_atoms))\n           in\n             aa arg_stmts [| stmt |]\n \n-      | PEXP_port ->\n+      | Ast.PEXP_port ->\n           [| ss (Ast.STMT_new_port dst_lval) |]\n \n-      | PEXP_chan pexp_opt ->\n+      | Ast.PEXP_chan pexp_opt ->\n           let (port_stmts, port_opt) =\n             match pexp_opt with\n                 None -> ([||], None)\n@@ -1272,7 +1246,7 @@ and desugar_expr_init\n           in\n             aa port_stmts [| chan_stmt |]\n \n-      | PEXP_box (mutability, arg) ->\n+      | Ast.PEXP_box (mutability, arg) ->\n           let (arg_stmts, arg_mode_atom) =\n             desugar_expr_atom ps arg\n           in\n@@ -1281,7 +1255,7 @@ and desugar_expr_init\n           in\n             aa arg_stmts [| stmt |]\n \n-      | PEXP_custom (n, a, b) ->\n+      | Ast.PEXP_custom (n, a, b) ->\n           let (arg_stmts, args) = desugar_expr_atoms ps a in\n           let stmts =\n             expand_pexp_custom ps dst_lval n args b ss"}]}