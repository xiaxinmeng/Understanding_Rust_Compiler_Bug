{"sha": "f9c1336873d65805ad34129939d800dbf59daf61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YzEzMzY4NzNkNjU4MDVhZDM0MTI5OTM5ZDgwMGRiZjU5ZGFmNjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T15:18:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T15:37:55Z"}, "message": "More clarifications", "tree": {"sha": "6ab5f2b70691fb4dc1098769459741e54d0d3807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ab5f2b70691fb4dc1098769459741e54d0d3807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c1336873d65805ad34129939d800dbf59daf61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c1336873d65805ad34129939d800dbf59daf61", "html_url": "https://github.com/rust-lang/rust/commit/f9c1336873d65805ad34129939d800dbf59daf61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c1336873d65805ad34129939d800dbf59daf61/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc287b8f9b7711a38d97be3b619758bb05d54c45", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc287b8f9b7711a38d97be3b619758bb05d54c45", "html_url": "https://github.com/rust-lang/rust/commit/bc287b8f9b7711a38d97be3b619758bb05d54c45"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "5e41473623628e285fd3082647cdde8b998f993a", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=f9c1336873d65805ad34129939d800dbf59daf61", "patch": "@@ -233,7 +233,7 @@ pub(crate) fn external_docs(\n     let definition = match_ast! {\n         match node {\n             ast::NameRef(name_ref) => classify_name_ref(&sema, &name_ref).map(|d| d.definition(sema.db)),\n-            ast::Name(name) => classify_name(&sema, &name).map(|d| d.definition_or_reference(sema.db)),\n+            ast::Name(name) => classify_name(&sema, &name).map(|d| d.reference_or_definition(sema.db)),\n             _ => None,\n         }\n     };"}, {"sha": "be2f81aabc750f1d61f961c7f43003702114552d", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=f9c1336873d65805ad34129939d800dbf59daf61", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn goto_definition(\n                 reference_definition(&sema, &name_ref).to_vec()\n             },\n             ast::Name(name) => {\n-                let def = classify_name(&sema, &name)?.definition_or_reference(sema.db);\n+                let def = classify_name(&sema, &name)?.reference_or_definition(sema.db);\n                 let nav = def.try_to_nav(sema.db)?;\n                 vec![nav]\n             },"}, {"sha": "95d872b832a84944cc5e54a3a513eaaca80b5269", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=f9c1336873d65805ad34129939d800dbf59daf61", "patch": "@@ -132,7 +132,7 @@ fn find_name(\n     opt_name: Option<ast::Name>,\n ) -> Option<RangeInfo<Definition>> {\n     if let Some(name) = opt_name {\n-        let def = classify_name(sema, &name)?.definition_or_reference(sema.db);\n+        let def = classify_name(sema, &name)?.reference_or_definition(sema.db);\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, def));\n     }"}, {"sha": "928f771a9462007355ea33553d5f2310e62dd992", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=f9c1336873d65805ad34129939d800dbf59daf61", "patch": "@@ -459,9 +459,9 @@ fn highlight_element(\n                     highlight_def(db, def) | HighlightModifier::Definition\n                 }\n                 Some(NameClass::ConstReference(def)) => highlight_def(db, def),\n-                Some(NameClass::PatFieldShorthand { field, .. }) => {\n+                Some(NameClass::PatFieldShorthand { field_ref, .. }) => {\n                     let mut h = HighlightTag::Field.into();\n-                    if let Definition::Field(field) = field {\n+                    if let Definition::Field(field) = field_ref {\n                         if let VariantDef::Union(_) = field.parent_def(db) {\n                             h |= HighlightModifier::Unsafe;\n                         }"}, {"sha": "717581593b874223895f576b9cd2225fe8a119dd", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=f9c1336873d65805ad34129939d800dbf59daf61", "patch": "@@ -81,12 +81,12 @@ impl Definition {\n pub enum NameClass {\n     ExternCrate(Crate),\n     Definition(Definition),\n-    /// `None` in `if let None = Some(82) {}`\n+    /// `None` in `if let None = Some(82) {}`.\n     ConstReference(Definition),\n-    /// `field` in `if let Foo { field } = todo!() {}`\n+    /// `field` in `if let Foo { field } = foo`.\n     PatFieldShorthand {\n-        local: Local,\n-        field: Definition,\n+        local_def: Local,\n+        field_ref: Definition,\n     },\n }\n \n@@ -96,18 +96,18 @@ impl NameClass {\n             NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) => it,\n             NameClass::ConstReference(_) => return None,\n-            /// Both `local` and `field` are definitions here, but only `local`\n-            /// is the definition which is introduced by this name.\n-            NameClass::PatFieldShorthand { local, field: _ } => Definition::Local(local),\n+            NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n+                Definition::Local(local_def)\n+            }\n         };\n         Some(res)\n     }\n \n-    pub fn definition_or_reference(self, db: &dyn HirDatabase) -> Definition {\n+    pub fn reference_or_definition(self, db: &dyn HirDatabase) -> Definition {\n         match self {\n             NameClass::ExternCrate(krate) => Definition::ModuleDef(krate.root_module(db).into()),\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n-            NameClass::PatFieldShorthand { local: _, field } => field,\n+            NameClass::PatFieldShorthand { local_def: _, field_ref } => field_ref,\n         }\n     }\n }\n@@ -165,7 +165,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                     if record_pat_field.name_ref().is_none() {\n                         if let Some(field) = sema.resolve_record_pat_field(&record_pat_field) {\n                             let field = Definition::Field(field);\n-                            return Some(NameClass::PatFieldShorthand { local, field });\n+                            return Some(NameClass::PatFieldShorthand { local_def: local, field_ref: field });\n                         }\n                     }\n                 }"}, {"sha": "8048aa621627bce0e3b871fab103d7206cc1b7ae", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1336873d65805ad34129939d800dbf59daf61/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=f9c1336873d65805ad34129939d800dbf59daf61", "patch": "@@ -314,9 +314,9 @@ impl<'a> FindUsages<'a> {\n \n     fn found_name(&self, name: &ast::Name, sink: &mut dyn FnMut(Reference) -> bool) -> bool {\n         match classify_name(self.sema, name) {\n-            Some(NameClass::PatFieldShorthand { local: _, field }) => {\n+            Some(NameClass::PatFieldShorthand { local_def: _, field_ref }) => {\n                 let reference = match self.def {\n-                    Definition::Field(_) if &field == self.def => Reference {\n+                    Definition::Field(_) if &field_ref == self.def => Reference {\n                         file_range: self.sema.original_range(name.syntax()),\n                         kind: ReferenceKind::FieldShorthandForField,\n                         // FIXME: mutable patterns should have `Write` access"}]}