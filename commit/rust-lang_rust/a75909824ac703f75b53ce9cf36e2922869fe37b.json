{"sha": "a75909824ac703f75b53ce9cf36e2922869fe37b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NTkwOTgyNGFjNzAzZjc1YjUzY2U5Y2YzNmUyOTIyODY5ZmUzN2I=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-11-28T14:30:48Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-12-15T09:35:20Z"}, "message": "Remove now unnecessary code\n\nThis code was introduced in #27565 to mark types in paths alive. It is now unnecessary since #37676.", "tree": {"sha": "684044a868a8a7e0eb3b8bdf58f0435d93ca1cd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/684044a868a8a7e0eb3b8bdf58f0435d93ca1cd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a75909824ac703f75b53ce9cf36e2922869fe37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a75909824ac703f75b53ce9cf36e2922869fe37b", "html_url": "https://github.com/rust-lang/rust/commit/a75909824ac703f75b53ce9cf36e2922869fe37b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a75909824ac703f75b53ce9cf36e2922869fe37b/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ad7232422f7e5bbfa0e52dabe36c12677df19e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad7232422f7e5bbfa0e52dabe36c12677df19e2", "html_url": "https://github.com/rust-lang/rust/commit/7ad7232422f7e5bbfa0e52dabe36c12677df19e2"}], "stats": {"total": 23, "additions": 5, "deletions": 18}, "files": [{"sha": "eb494685f49044537c3def000ceb8558fde4a64e", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a75909824ac703f75b53ce9cf36e2922869fe37b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75909824ac703f75b53ce9cf36e2922869fe37b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a75909824ac703f75b53ce9cf36e2922869fe37b", "patch": "@@ -86,20 +86,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn handle_definition(&mut self, id: ast::NodeId, def: Def) {\n-        // If `bar` is a trait item, make sure to mark Foo as alive in `Foo::bar`\n-        match def {\n-            Def::AssociatedTy(..) | Def::Method(_) | Def::AssociatedConst(_)\n-            if self.tcx.trait_of_item(def.def_id()).is_some() => {\n-                if let Some(substs) = self.tcx.tables().item_substs.get(&id) {\n-                    if let ty::TyAdt(tyid, _) = substs.substs.type_at(0).sty {\n-                        self.check_def_id(tyid.did);\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-\n+    fn handle_definition(&mut self, def: Def) {\n         match def {\n             Def::Const(_) | Def::AssociatedConst(..) => {\n                 self.check_def_id(def.def_id());\n@@ -241,7 +228,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         match expr.node {\n             hir::ExprPath(ref qpath @ hir::QPath::TypeRelative(..)) => {\n                 let def = self.tcx.tables().qpath_def(qpath, expr.id);\n-                self.handle_definition(expr.id, def);\n+                self.handle_definition(def);\n             }\n             hir::ExprMethodCall(..) => {\n                 self.lookup_and_handle_method(expr.id);\n@@ -281,7 +268,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n             }\n             PatKind::Path(ref qpath @ hir::QPath::TypeRelative(..)) => {\n                 let def = self.tcx.tables().qpath_def(qpath, pat.id);\n-                self.handle_definition(pat.id, def);\n+                self.handle_definition(def);\n             }\n             _ => ()\n         }\n@@ -291,8 +278,8 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         self.ignore_non_const_paths = false;\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path, id: ast::NodeId) {\n-        self.handle_definition(id, path.def);\n+    fn visit_path(&mut self, path: &'tcx hir::Path, _: ast::NodeId) {\n+        self.handle_definition(path.def);\n         intravisit::walk_path(self, path);\n     }\n }"}]}