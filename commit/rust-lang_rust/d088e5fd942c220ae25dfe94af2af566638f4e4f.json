{"sha": "d088e5fd942c220ae25dfe94af2af566638f4e4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwODhlNWZkOTQyYzIyMGFlMjVkZmU5NGFmMmFmNTY2NjM4ZjRlNGY=", "commit": {"author": {"name": "Michael Darakananda", "email": "pongad@gmail.com", "date": "2014-01-25T06:40:54Z"}, "committer": {"name": "Michael Darakananda", "email": "pongad@gmail.com", "date": "2014-02-01T05:27:28Z"}, "message": "Added minmax function.\nTests ok", "tree": {"sha": "52af82c486b161abbfdfe2971d28bad2b85e59b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52af82c486b161abbfdfe2971d28bad2b85e59b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d088e5fd942c220ae25dfe94af2af566638f4e4f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d088e5fd942c220ae25dfe94af2af566638f4e4f", "html_url": "https://github.com/rust-lang/rust/commit/d088e5fd942c220ae25dfe94af2af566638f4e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d088e5fd942c220ae25dfe94af2af566638f4e4f/comments", "author": {"login": "pongad", "id": 1617025, "node_id": "MDQ6VXNlcjE2MTcwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1617025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pongad", "html_url": "https://github.com/pongad", "followers_url": "https://api.github.com/users/pongad/followers", "following_url": "https://api.github.com/users/pongad/following{/other_user}", "gists_url": "https://api.github.com/users/pongad/gists{/gist_id}", "starred_url": "https://api.github.com/users/pongad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pongad/subscriptions", "organizations_url": "https://api.github.com/users/pongad/orgs", "repos_url": "https://api.github.com/users/pongad/repos", "events_url": "https://api.github.com/users/pongad/events{/privacy}", "received_events_url": "https://api.github.com/users/pongad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pongad", "id": 1617025, "node_id": "MDQ6VXNlcjE2MTcwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1617025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pongad", "html_url": "https://github.com/pongad", "followers_url": "https://api.github.com/users/pongad/followers", "following_url": "https://api.github.com/users/pongad/following{/other_user}", "gists_url": "https://api.github.com/users/pongad/gists{/gist_id}", "starred_url": "https://api.github.com/users/pongad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pongad/subscriptions", "organizations_url": "https://api.github.com/users/pongad/orgs", "repos_url": "https://api.github.com/users/pongad/repos", "events_url": "https://api.github.com/users/pongad/events{/privacy}", "received_events_url": "https://api.github.com/users/pongad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edfb546e4b2b0aa6dbb6316709b80e034539d09d", "url": "https://api.github.com/repos/rust-lang/rust/commits/edfb546e4b2b0aa6dbb6316709b80e034539d09d", "html_url": "https://github.com/rust-lang/rust/commit/edfb546e4b2b0aa6dbb6316709b80e034539d09d"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "194dd12fc75b4763f97dcd2b8e6837db23ce2028", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/d088e5fd942c220ae25dfe94af2af566638f4e4f/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d088e5fd942c220ae25dfe94af2af566638f4e4f/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=d088e5fd942c220ae25dfe94af2af566638f4e4f", "patch": "@@ -882,6 +882,39 @@ pub trait OrdIterator<A> {\n     /// assert!(a.iter().min().unwrap() == &1);\n     /// ```\n     fn min(&mut self) -> Option<A>;\n+\n+    /// `min_max` finds the mininum and maximum elements in the iterator.\n+    ///\n+    /// The return type `MinMaxResult` is an enum of three variants:\n+    /// - `NoElements` if the iterator is empty.\n+    /// - `OneElement(x)` if the iterator has exactly one element.\n+    /// - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two values are equal if and only if\n+    /// there is more than one element in the iterator and all elements are equal.\n+    ///\n+    /// On an iterator of length `n`, `min_max` does `1.5 * n` comparisons,\n+    /// and so faster than calling `min` and `max separately which does `2 * n` comparisons.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::iter::{NoElements, OneElement, MinMax};\n+    ///\n+    /// let v: [int, ..0] = [];\n+    /// assert_eq!(v.iter().min_max(), NoElements);\n+    ///\n+    /// let v = [1i];\n+    /// assert!(v.iter().min_max() == OneElement(&1));\n+    ///\n+    /// let v = [1i, 2, 3, 4, 5];\n+    /// assert!(v.iter().min_max() == MinMax(&1, &5));\n+    ///\n+    /// let v = [1i, 2, 3, 4, 5, 6];\n+    /// assert!(v.iter().min_max() == MinMax(&1, &6));\n+    ///\n+    /// let v = [1i, 1, 1, 1];\n+    /// assert!(v.iter().min_max() == MinMax(&1, &1));\n+    /// ```\n+    fn min_max(&mut self) -> MinMaxResult<A>;\n }\n \n impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n@@ -904,6 +937,91 @@ impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n             }\n         })\n     }\n+\n+    fn min_max(&mut self) -> MinMaxResult<A> {\n+        let (mut min, mut max) = match self.next() {\n+            None => return NoElements,\n+            Some(x) => {\n+                match self.next() {\n+                    None => return OneElement(x),\n+                    Some(y) => if x < y {(x, y)} else {(y,x)}\n+                }\n+            }\n+        };\n+\n+        loop {\n+            // `first` and `second` are the two next elements we want to look at.\n+            // We first compare `first` and `second` (#1). The smaller one is then compared to\n+            // current mininum (#2). The larger one is compared to current maximum (#3). This\n+            // way we do 3 comparisons for 2 elements.\n+            let first = match self.next() {\n+                None => break,\n+                Some(x) => x\n+            };\n+            let second = match self.next() {\n+                None => {\n+                    if first < min {\n+                        min = first;\n+                    } else if first > max {\n+                        max = first;\n+                    }\n+                    break;\n+                }\n+                Some(x) => x\n+            };\n+            if first < second {\n+                if first < min {min = first;}\n+                if max < second {max = second;}\n+            } else {\n+                if second < min {min = second;}\n+                if max < first {max = first;}\n+            }\n+        }\n+\n+        MinMax(min, max)\n+    }\n+}\n+\n+/// `MinMaxResult` is an enum returned by `min_max`. See `OrdIterator::min_max` for more detail.\n+#[deriving(Clone, Eq)]\n+pub enum MinMaxResult<T> {\n+    /// Empty iterator\n+    NoElements,\n+\n+    /// Iterator with one element, so the minimum and maximum are the same\n+    OneElement(T),\n+\n+    /// More than one element in the iterator, the first element is not larger than the second\n+    MinMax(T, T)\n+}\n+\n+impl<T: Clone> MinMaxResult<T> {\n+    /// `into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n+    /// `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n+    /// `Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\n+    /// performing this operation will make one clone of `x`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::iter::{NoElements, OneElement, MinMax, MinMaxResult};\n+    ///\n+    /// let r: MinMaxResult<int> = NoElements;\n+    /// assert_eq!(r.into_option(), None)\n+    ///\n+    /// let r = OneElement(1);\n+    /// assert_eq!(r.into_option(), Some((1,1)));\n+    ///\n+    /// let r = MinMax(1,2);\n+    /// assert_eq!(r.into_option(), Some((1,2)));\n+    /// ```\n+    pub fn into_option(self) -> Option<(T,T)> {\n+        match self {\n+            NoElements => None,\n+            OneElement(x) => Some((x.clone(), x)),\n+            MinMax(x, y) => Some((x, y))\n+        }\n+    }\n }\n \n /// A trait for iterators that are cloneable.\n@@ -2944,4 +3062,34 @@ mod tests {\n         it.next();\n         assert!( it.is_empty() );\n     }\n+\n+    #[test]\n+    fn test_min_max() {\n+        let v: [int, ..0] = [];\n+        assert_eq!(v.iter().min_max(), NoElements);\n+\n+        let v = [1i];\n+        assert!(v.iter().min_max() == OneElement(&1));\n+\n+        let v = [1i, 2, 3, 4, 5];\n+        assert!(v.iter().min_max() == MinMax(&1, &5));\n+\n+        let v = [1i, 2, 3, 4, 5, 6];\n+        assert!(v.iter().min_max() == MinMax(&1, &6));\n+\n+        let v = [1i, 1, 1, 1];\n+        assert!(v.iter().min_max() == MinMax(&1, &1));\n+    }\n+\n+    #[test]\n+    fn test_MinMaxResult() {\n+        let r: MinMaxResult<int> = NoElements;\n+        assert_eq!(r.into_option(), None)\n+\n+        let r = OneElement(1);\n+        assert_eq!(r.into_option(), Some((1,1)));\n+\n+        let r = MinMax(1,2);\n+        assert_eq!(r.into_option(), Some((1,2)));\n+    }\n }"}]}