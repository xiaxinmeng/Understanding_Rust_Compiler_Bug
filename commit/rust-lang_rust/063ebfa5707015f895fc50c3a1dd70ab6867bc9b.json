{"sha": "063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "node_id": "C_kwDOAAsO6NoAKDA2M2ViZmE1NzA3MDE1Zjg5NWZjNTBjM2ExZGQ3MGFiNjg2N2JjOWI", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-07-07T13:01:43Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-08-12T08:53:07Z"}, "message": "Use enum2<_> instead of enum<_> for Cpp-like debuginfo enum type names.\n\nAnd add more comments about niche tag enum encoding.", "tree": {"sha": "1009c9ff1c236c70143b84a37a244529d7b01a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1009c9ff1c236c70143b84a37a244529d7b01a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "html_url": "https://github.com/rust-lang/rust/commit/063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "622da5d834e862112e860db1fc0404bd8604f578", "url": "https://api.github.com/repos/rust-lang/rust/commits/622da5d834e862112e860db1fc0404bd8604f578", "html_url": "https://github.com/rust-lang/rust/commit/622da5d834e862112e860db1fc0404bd8604f578"}], "stats": {"total": 160, "additions": 87, "deletions": 73}, "files": [{"sha": "7a32e2550433db4880d54d2cf3f75d65aad924c5", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -68,7 +68,7 @@ const SINGLE_VARIANT_VIRTUAL_DISR: u64 = 0;\n /// It's roughly equivalent to the following C/C++ code:\n ///\n /// ```c\n-/// union enum$<{fully-qualified-name}> {\n+/// union enum2$<{fully-qualified-name}> {\n ///   struct Variant0 {\n ///     struct {name-of-variant-0} {\n ///        <variant 0 fields>\n@@ -91,12 +91,27 @@ const SINGLE_VARIANT_VIRTUAL_DISR: u64 = 0;\n /// }\n /// ```\n ///\n-/// As you can see, the type name is wrapped `enum$`. This way we can have a\n-/// single NatVis rule for handling all enums.\n+/// As you can see, the type name is wrapped in `enum2$<_>`. This way we can\n+/// have a single NatVis rule for handling all enums. The `2` in `enum2$<_>`\n+/// is an encoding version tag, so that debuggers can decide to decode this\n+/// differently than the previous `enum$<_>` encoding emitted by earlier\n+/// compiler versions.\n ///\n-/// For niche-tag enums, a variant might correspond to a range of tag values.\n-/// In that case the variant struct has a `DISCR_BEGIN` and `DISCR_END` field\n-/// instead of DISCR_EXACT.\n+/// Niche-tag enums have one special variant, usually called the\n+/// \"dataful variant\". This variant has a field that\n+/// doubles as the tag of the enum. The variant is active when the value of\n+/// that field is within a pre-defined range. Therefore the variant struct\n+/// has a `DISCR_BEGIN` and `DISCR_END` field instead of `DISCR_EXACT` in\n+/// that case. Both `DISCR_BEGIN` and `DISCR_END` are inclusive bounds.\n+/// Note that these ranges can wrap around, so that `DISCR_END < DISCR_BEGIN`.\n+///\n+/// The field in the top-level union that corresponds to the dataful variant\n+/// is called `variant_fallback` instead of `variant<index>`. This is mainly\n+/// an optimization that enables a shorter NatVis definition. That way we\n+/// only need to specify a `tag == variantX.DISCR_EXACT` entry for the indexed\n+/// variants. Otherwise we'd need to have that and then an additional entry\n+/// checking `in_range(variantX.DISCR_BEGIN, variantX.DISCR_END)` for each\n+/// index.\n ///\n /// Single-variant enums don't actually have a tag field. In this case we\n /// emit a static tag field (that always has the value 0) so we can use the"}, {"sha": "135ed680da2dc7ad998c2ee25f75be979959662f", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -389,7 +389,7 @@ fn push_debuginfo_type_name<'tcx>(\n             // Name will be \"{closure_env#0}<T1, T2, ...>\", \"{generator_env#0}<T1, T2, ...>\", or\n             // \"{async_fn_env#0}<T1, T2, ...>\", etc.\n             // In the case of cpp-like debuginfo, the name additionally gets wrapped inside of\n-            // an artificial `enum$<>` type, as defined in msvc_enum_fallback().\n+            // an artificial `enum2$<>` type, as defined in msvc_enum_fallback().\n             if cpp_like_debuginfo && t.is_generator() {\n                 let ty_and_layout = tcx.layout_of(ParamEnv::reveal_all().and(t)).unwrap();\n                 msvc_enum_fallback(\n@@ -434,7 +434,7 @@ fn push_debuginfo_type_name<'tcx>(\n         visited: &mut FxHashSet<Ty<'tcx>>,\n     ) {\n         debug_assert!(!wants_c_like_enum_debuginfo(ty_and_layout));\n-        output.push_str(\"enum$<\");\n+        output.push_str(\"enum2$<\");\n         push_inner(output, visited);\n         push_close_angle_bracket(true, output);\n     }"}, {"sha": "82f47b7814e0490f7fa42128ccfacdd49fa4ce0b", "filename": "src/etc/natvis/intrinsic.natvis", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Fetc%2Fnatvis%2Fintrinsic.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fintrinsic.natvis?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -1,4 +1,4 @@\n-\ufeff<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n   <Type Name=\"str\">\n     <DisplayString>{(char*)data_ptr,[length]s8}</DisplayString>\n@@ -154,7 +154,7 @@\n     This is the visualizer for all enums. It takes care of selecting the active variant.\n     See `compiler\\rustc_codegen_llvm\\src\\debuginfo\\metadata\\enums\\cpp_like.rs` for more information.\n   -->\n-  <Type Name=\"enum$&lt;*&gt;\">\n+  <Type Name=\"enum2$&lt;*&gt;\">\n     <Intrinsic Name=\"in_range\" Expression=\"(start &lt;= end) ? ((tag &gt;= start) &amp;&amp; (tag &lt;= end)) : ((tag &gt;= start) || (tag &lt;= end))\">\n       <Parameter Name=\"start\" Type=\"unsigned __int64\" />\n       <Parameter Name=\"end\" Type=\"unsigned __int64\" />"}, {"sha": "11c4ae2f65929c4e7d63268f197c3036647b4592", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -41,26 +41,26 @@\n \n // cdb-command: g\n // cdb-command: dx b\n-// cdb-check: b                : Unresumed [Type: enum$<generator_objects::main::generator_env$0>]\n+// cdb-check: b                : Unresumed [Type: enum2$<generator_objects::main::generator_env$0>]\n // cdb-check:    [+0x[...]] _ref__a          : 0x[...] : 5 [Type: int *]\n \n // cdb-command: g\n // cdb-command: dx b\n-// cdb-check: b                : Suspend0 [Type: enum$<generator_objects::main::generator_env$0>]\n+// cdb-check: b                : Suspend0 [Type: enum2$<generator_objects::main::generator_env$0>]\n // cdb-check:    [+0x[...]] c                : 6 [Type: int]\n // cdb-check:    [+0x[...]] d                : 7 [Type: int]\n // cdb-check:    [+0x[...]] _ref__a          : 0x[...] : 5 [Type: int *]\n \n // cdb-command: g\n // cdb-command: dx b\n-// cdb-check: b                : Suspend1 [Type: enum$<generator_objects::main::generator_env$0>]\n+// cdb-check: b                : Suspend1 [Type: enum2$<generator_objects::main::generator_env$0>]\n // cdb-check:    [+0x[...]] c                : 7 [Type: int]\n // cdb-check:    [+0x[...]] d                : 8 [Type: int]\n // cdb-check:    [+0x[...]] _ref__a          : 0x[...] : 6 [Type: int *]\n \n // cdb-command: g\n // cdb-command: dx b\n-// cdb-check: b                : Returned [Type: enum$<generator_objects::main::generator_env$0>]\n+// cdb-check: b                : Returned [Type: enum2$<generator_objects::main::generator_env$0>]\n // cdb-check:    [+0x[...]] _ref__a          : 0x[...] : 6 [Type: int *]\n \n #![feature(omit_gdb_pretty_printer_section, generators, generator_trait)]"}, {"sha": "d27520c5cbaaed5af546070fd1d849e1644421b8", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -4,106 +4,105 @@\n // cdb-command: g\n \n // cdb-command: dx a\n-// cdb-check:a                : Some [Type: enum$<core::option::Option<msvc_pretty_enums::CStyleEnum> >]\n+// cdb-check:a                : Some [Type: enum2$<core::option::Option<msvc_pretty_enums::CStyleEnum> >]\n // cdb-check:    [+0x000] __0              : Low (0x2) [Type: msvc_pretty_enums::CStyleEnum]\n \n // cdb-command: dx b\n-// cdb-check:b                : None [Type: enum$<core::option::Option<msvc_pretty_enums::CStyleEnum> >]\n+// cdb-check:b                : None [Type: enum2$<core::option::Option<msvc_pretty_enums::CStyleEnum> >]\n \n // cdb-command: dx c\n-// cdb-check:c                : Tag1 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum>]\n+// cdb-check:c                : Tag1 [Type: enum2$<msvc_pretty_enums::NicheLayoutEnum>]\n \n // cdb-command: dx d\n-// cdb-check:d                : Data [Type: enum$<msvc_pretty_enums::NicheLayoutEnum>]\n+// cdb-check:d                : Data [Type: enum2$<msvc_pretty_enums::NicheLayoutEnum>]\n // cdb-check:    [+0x000] my_data          : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n \n // cdb-command: dx e\n-// cdb-check:e                : Tag2 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum>]\n+// cdb-check:e                : Tag2 [Type: enum2$<msvc_pretty_enums::NicheLayoutEnum>]\n \n // cdb-command: dx f\n-// cdb-check:f                : Some [Type: enum$<core::option::Option<ref$<u32> > >]\n+// cdb-check:f                : Some [Type: enum2$<core::option::Option<ref$<u32> > >]\n // cdb-check:    [+0x000] __0              : 0x[...] : 0x1 [Type: unsigned int *]\n \n // cdb-command: dx g\n-// cdb-check:g                : None [Type: enum$<core::option::Option<ref$<u32> > >]\n+// cdb-check:g                : None [Type: enum2$<core::option::Option<ref$<u32> > >]\n \n // cdb-command: dx h\n-// cdb-check:h                : Some [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:h                : Some [Type: enum2$<core::option::Option<u32> >]\n // cdb-check:    [+0x004] __0              : 0xc [Type: unsigned int]\n \n // cdb-command: dx i\n-// cdb-check:i                : None [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:i                : None [Type: enum2$<core::option::Option<u32> >]\n \n // cdb-command: dx j\n // cdb-check:j                : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n \n // cdb-command: dx k\n-// cdb-check:k                : Some [Type: enum$<core::option::Option<alloc::string::String> >]\n+// cdb-check:k                : Some [Type: enum2$<core::option::Option<alloc::string::String> >]\n // cdb-check:    [+0x000] __0              : \"IAMA optional string!\" [Type: alloc::string::String]\n \n // cdb-command: dx l\n-// cdb-check:l                : Ok [Type: enum$<core::result::Result<u32,enum$<msvc_pretty_enums::Empty> > >]\n+// cdb-check:l                : Ok [Type: enum2$<core::result::Result<u32,enum2$<msvc_pretty_enums::Empty> > >]\n // cdb-check:    [+0x000] __0              : 0x2a [Type: unsigned int]\n \n // cdb-command: dx niche128_some\n-// cdb-check:niche128_some    : Some [Type: enum$<core::option::Option<core::num::nonzero::NonZeroI128> >]\n+// cdb-check: niche128_some    : Some [Type: enum2$<core::option::Option<core::num::nonzero::NonZeroI128> >]\n // Note: we can't actually read the value of the field because CDB cannot handle 128 bit integers.\n // cdb-check:    [+0x000] __0 [...] [Type: core::num::nonzero::NonZeroI128]\n \n // cdb-command: dx niche128_none\n-// cdb-check: niche128_none    : None [Type: enum$<core::option::Option<core::num::nonzero::NonZeroI128> >]\n+// cdb-check: niche128_none    : None [Type: enum2$<core::option::Option<core::num::nonzero::NonZeroI128> >]\n \n // cdb-command: dx niche_w_fields_1_some,d\n-// cdb-check: niche_w_fields_1_some,d : A [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields1>]\n+// cdb-check: niche_w_fields_1_some,d : A [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields1>]\n // cdb-check:     [+0x[...]] __0              : 0x[...] : 77 [Type: unsigned char *]\n // cdb-check:     [+0x[...]] __1              : 7 [Type: unsigned int]\n \n // cdb-command: dx niche_w_fields_1_none,d\n-// cdb-check: niche_w_fields_1_none,d : B [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields1>]\n+// cdb-check: niche_w_fields_1_none,d : B [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields1>]\n // cdb-check:     [+0x[...]] __0              : 99 [Type: unsigned int]\n \n // cdb-command: dx niche_w_fields_2_some,d\n-// cdb-check: niche_w_fields_2_some,d : A [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields2>]\n-// cdb-check:     [<Raw View>]     [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields2>]\n+// cdb-check: niche_w_fields_2_some,d : A [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields2>]\n // cdb-check:     [+0x[...]] __0              : 800 [Type: core::num::nonzero::NonZeroU32]\n // cdb-check:     [+0x[...]] __1              : 900 [Type: unsigned __int64]\n \n // cdb-command: dx niche_w_fields_2_none,d\n-// cdb-check: niche_w_fields_2_none,d : B [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields2>]\n+// cdb-check: niche_w_fields_2_none,d : B [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields2>]\n // cdb-check:     [+0x[...]] __0              : 1000 [Type: unsigned __int64]\n \n // cdb-command: dx niche_w_fields_3_some,d\n-// cdb-check: niche_w_fields_3_some,d : A [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields3>]\n+// cdb-check: niche_w_fields_3_some,d : A [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields3>]\n // cdb-check:     [+0x[...]] __0              : 137 [Type: unsigned char]\n // cdb-check:     [+0x[...]] __1              : true [Type: bool]\n \n // cdb-command: dx niche_w_fields_3_niche1,d\n-// cdb-check: niche_w_fields_3_niche1,d : B [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields3>]\n+// cdb-check: niche_w_fields_3_niche1,d : B [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields3>]\n // cdb-check:     [+0x[...]] __0              : 12 [Type: unsigned char]\n \n // cdb-command: dx niche_w_fields_3_niche2,d\n-// cdb-check: niche_w_fields_3_niche2,d : C [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields3>]\n+// cdb-check: niche_w_fields_3_niche2,d : C [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields3>]\n // cdb-check:     [+0x[...]] __0              : false [Type: bool]\n \n // cdb-command: dx niche_w_fields_3_niche3,d\n-// cdb-check: niche_w_fields_3_niche3,d : D [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields3>]\n+// cdb-check: niche_w_fields_3_niche3,d : D [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields3>]\n // cdb-check:     [+0x[...]] __0              : 34 [Type: unsigned char]\n \n // cdb-command: dx niche_w_fields_3_niche4,d\n-// cdb-check: niche_w_fields_3_niche4,d : E [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields3>]\n+// cdb-check: niche_w_fields_3_niche4,d : E [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields3>]\n // cdb-check:     [+0x[...]] __0              : 56 [Type: unsigned char]\n \n // cdb-command: dx niche_w_fields_3_niche5,d\n-// cdb-check: niche_w_fields_3_niche5,d : F [Type: enum$<msvc_pretty_enums::NicheLayoutWithFields3>]\n+// cdb-check: niche_w_fields_3_niche5,d : F [Type: enum2$<msvc_pretty_enums::NicheLayoutWithFields3>]\n \n // cdb-command: dx -r3 niche_w_fields_std_result_ok,d\n-// cdb-check: niche_w_fields_std_result_ok,d : Ok [Type: enum$<core::result::Result<alloc::boxed::Box<slice$<u8>,alloc::alloc::Global>,u64> >]\n+// cdb-check: niche_w_fields_std_result_ok,d : Ok [Type: enum2$<core::result::Result<alloc::boxed::Box<slice$<u8>,alloc::alloc::Global>,u64> >]\n // cdb-check:    [+0x[...]] __0              [Type: alloc::boxed::Box<slice$<u8>,alloc::alloc::Global>]\n // cdb-check:        [+0x[...]] data_ptr         : [...]\n // cdb-check:        [+0x[...]] length           : 3 [...]\n \n // cdb-command: dx -r3 niche_w_fields_std_result_err,d\n-// cdb-check: niche_w_fields_std_result_err,d : Err [Type: enum$<core::result::Result<alloc::boxed::Box<slice$<u8>,alloc::alloc::Global>,u64> >]\n+// cdb-check: niche_w_fields_std_result_err,d : Err [Type: enum2$<core::result::Result<alloc::boxed::Box<slice$<u8>,alloc::alloc::Global>,u64> >]\n // cdb-check:    [+0x[...]] __0              : 789 [Type: unsigned __int64]\n \n use std::num::{NonZeroI128, NonZeroU32};"}, {"sha": "9630952cbaae0c41b44c5b8e390b97201bac3392", "filename": "src/test/debuginfo/msvc-scalarpair-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -18,10 +18,10 @@\n // cdb-command: g\n \n // cdb-command: dx o1\n-// cdb-check:o1               : Some [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:o1               : Some [Type: enum2$<core::option::Option<u32> >]\n // cdb-check:    [+0x004] __0              : 0x4d2 [Type: [...]]\n // cdb-command: dx o2\n-// cdb-check:o2               : Some [Type: enum$<core::option::Option<u64> >]\n+// cdb-check:o2               : Some [Type: enum2$<core::option::Option<u64> >]\n // cdb-check:    [+0x008] __0              : 0x162e [Type: unsigned __int64]\n \n // cdb-command: g"}, {"sha": "e5b8ff1bcfd38d89aa92d6774ef454c5a8aa533e", "filename": "src/test/debuginfo/mutex.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmutex.rs?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -21,15 +21,14 @@\n \n //\n // cdb-command:dx lock,d\n-// cdb-check:lock,d           : Ok [Type: enum$<core::result::Result<std::sync::mutex::MutexGuard<i32>,enum$<std::sync::poison::TryLockError<std::sync::mutex::MutexGuard<i32> >, 0, 1, Poisoned> > >]\n+// cdb-check:lock,d           : Ok [Type: enum2$<core::result::Result<std::sync::mutex::MutexGuard<i32>,enum2$<std::sync::poison::TryLockError<std::sync::mutex::MutexGuard<i32> >, 0, 1, Poisoned> > >]\n // cdb-check:    [variant]        : Ok\n // cdb-check:    [...] __0              [Type: std::sync::mutex::MutexGuard<i32>]\n \n use std::sync::Mutex;\n \n #[allow(unused_variables)]\n-fn main()\n-{\n+fn main() {\n     let m = Mutex::new(0);\n     let lock = m.try_lock();\n     zzz(); // #break"}, {"sha": "a51b37205e8aa2cb8cd443b6b3f6035af8106871", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -116,17 +116,17 @@\n // cdb-check:    [chars]          : \"IAMA OS string [...]\"\n \n // cdb-command: dx some\n-// cdb-check:some             : Some [Type: enum$<core::option::Option<i16> >]\n-// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<i16> >]\n+// cdb-check:some             : Some [Type: enum2$<core::option::Option<i16> >]\n+// cdb-check:    [<Raw View>]     [Type: enum2$<core::option::Option<i16> >]\n // cdb-check:    [+0x002] __0              : 8 [Type: short]\n \n // cdb-command: dx none\n-// cdb-check:none             : None [Type: enum$<core::option::Option<i64> >]\n-// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<i64> >]\n+// cdb-check:none             : None [Type: enum2$<core::option::Option<i64> >]\n+// cdb-check:    [<Raw View>]     [Type: enum2$<core::option::Option<i64> >]\n \n // cdb-command: dx some_string\n-// cdb-check:some_string      : Some [Type: enum$<core::option::Option<alloc::string::String> >]\n-// cdb-check:    [<Raw View>]     [Type: enum$<core::option::Option<alloc::string::String> >]\n+// cdb-check:some_string      : Some [Type: enum2$<core::option::Option<alloc::string::String> >]\n+// cdb-check:    [<Raw View>]     [Type: enum2$<core::option::Option<alloc::string::String> >]\n // cdb-check:    [+0x000] __0              : \"IAMA optional string!\" [Type: alloc::string::String]\n \n // cdb-command: dx linkedlist"}, {"sha": "cdac47a784d94339567d2d713d9abaede6b4b610", "filename": "src/test/debuginfo/result-types.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Fresult-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fresult-types.rs?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -7,15 +7,14 @@\n // cdb-command: g\n \n // cdb-command: dx x,d\n-// cdb-check:x,d              : Ok [Type: enum$<core::result::Result<i32,str> >]\n+// cdb-check:x,d              : Ok [Type: enum2$<core::result::Result<i32,str> >]\n // cdb-check:    [...] __0              : -3 [Type: int]\n \n // cdb-command: dx y\n-// cdb-check:y                : Err [Type: enum$<core::result::Result<i32,str> >]\n+// cdb-check:y                : Err [Type: enum2$<core::result::Result<i32,str> >]\n // cdb-check:    [...] __0              : \"Some error message\" [Type: str]\n \n-fn main()\n-{\n+fn main() {\n     let x: Result<i32, &str> = Ok(-3);\n     assert_eq!(x.is_ok(), true);\n \n@@ -25,4 +24,6 @@ fn main()\n     zzz(); // #break.\n }\n \n-fn zzz() { () }\n+fn zzz() {\n+    ()\n+}"}, {"sha": "9cc99d7767c1f927a635b29d66f53a9631249b89", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063ebfa5707015f895fc50c3a1dd70ab6867bc9b/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=063ebfa5707015f895fc50c3a1dd70ab6867bc9b", "patch": "@@ -175,51 +175,51 @@\n // 0-sized structs appear to be optimized away in some cases, so only check the structs that do\n // actually appear.\n // cdb-command:dv /t *_struct\n-// cdb-check:struct type_names::GenericStruct<enum$<type_names::mod1::Enum2>,f64> mut_generic_struct = [...]\n+// cdb-check:struct type_names::GenericStruct<enum2$<type_names::mod1::Enum2>,f64> mut_generic_struct = [...]\n \n // ENUMS\n // cdb-command:dv /t *_enum_*\n-// cdb-check:union enum$<type_names::Enum1> simple_enum_1 = [...]\n-// cdb-check:union enum$<type_names::Enum1> simple_enum_2 = [...]\n-// cdb-check:union enum$<type_names::mod1::Enum2> simple_enum_3 = [...]\n-// cdb-check:union enum$<type_names::mod1::mod2::Enum3<type_names::mod1::Struct2> > generic_enum_1 = [...]\n-// cdb-check:union enum$<type_names::mod1::mod2::Enum3<type_names::Struct1> > generic_enum_2 = [...]\n+// cdb-check:union enum2$<type_names::Enum1> simple_enum_1 = [...]\n+// cdb-check:union enum2$<type_names::Enum1> simple_enum_2 = [...]\n+// cdb-check:union enum2$<type_names::mod1::Enum2> simple_enum_3 = [...]\n+// cdb-check:union enum2$<type_names::mod1::mod2::Enum3<type_names::mod1::Struct2> > generic_enum_1 = [...]\n+// cdb-check:union enum2$<type_names::mod1::mod2::Enum3<type_names::Struct1> > generic_enum_2 = [...]\n \n // TUPLES\n // cdb-command:dv /t tuple*\n-// cdb-check:struct tuple$<u32,type_names::Struct1,enum$<type_names::mod1::mod2::Enum3<type_names::mod1::Struct2> > > tuple1 = [...]\n-// cdb-check:struct tuple$<tuple$<type_names::Struct1,type_names::mod1::mod2::Struct3>,enum$<type_names::mod1::Enum2>,char> tuple2 = [...]\n+// cdb-check:struct tuple$<u32,type_names::Struct1,enum2$<type_names::mod1::mod2::Enum3<type_names::mod1::Struct2> > > tuple1 = [...]\n+// cdb-check:struct tuple$<tuple$<type_names::Struct1,type_names::mod1::mod2::Struct3>,enum2$<type_names::mod1::Enum2>,char> tuple2 = [...]\n \n // BOX\n // cdb-command:dv /t box*\n // cdb-check:struct tuple$<alloc::boxed::Box<f32,alloc::alloc::Global>,i32> box1 = [...]\n-// cdb-check:struct tuple$<alloc::boxed::Box<enum$<type_names::mod1::mod2::Enum3<f32> >,alloc::alloc::Global>,i32> box2 = [...]\n+// cdb-check:struct tuple$<alloc::boxed::Box<enum2$<type_names::mod1::mod2::Enum3<f32> >,alloc::alloc::Global>,i32> box2 = [...]\n \n // REFERENCES\n // cdb-command:dv /t *ref*\n // cdb-check:struct tuple$<ref$<type_names::Struct1>,i32> ref1 = [...]\n // cdb-check:struct tuple$<ref$<type_names::GenericStruct<char,type_names::Struct1> >,i32> ref2 = [...]\n // cdb-check:struct tuple$<ref_mut$<type_names::Struct1>,i32> mut_ref1 = [...]\n-// cdb-check:struct tuple$<ref_mut$<type_names::GenericStruct<enum$<type_names::mod1::Enum2>,f64> >,i32> mut_ref2 = [...]\n+// cdb-check:struct tuple$<ref_mut$<type_names::GenericStruct<enum2$<type_names::mod1::Enum2>,f64> >,i32> mut_ref2 = [...]\n \n // RAW POINTERS\n // cdb-command:dv /t *_ptr*\n // cdb-check:struct tuple$<ptr_mut$<type_names::Struct1>,isize> mut_ptr1 = [...]\n // cdb-check:struct tuple$<ptr_mut$<isize>,isize> mut_ptr2 = [...]\n-// cdb-check:struct tuple$<ptr_mut$<enum$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >,isize> mut_ptr3 = [...]\n+// cdb-check:struct tuple$<ptr_mut$<enum2$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >,isize> mut_ptr3 = [...]\n // cdb-check:struct tuple$<ptr_const$<type_names::Struct1>,isize> const_ptr1 = [...]\n // cdb-check:struct tuple$<ptr_const$<isize>,isize> const_ptr2 = [...]\n-// cdb-check:struct tuple$<ptr_const$<enum$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >,isize> const_ptr3 = [...]\n+// cdb-check:struct tuple$<ptr_const$<enum2$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >,isize> const_ptr3 = [...]\n \n // VECTORS\n // cdb-command:dv /t *vec*\n // cdb-check:struct tuple$<array$<type_names::Struct1,3>,i16> fixed_size_vec1 = [...]\n // cdb-check:struct tuple$<array$<usize,3>,i16> fixed_size_vec2 = [...]\n // cdb-check:struct alloc::vec::Vec<usize,alloc::alloc::Global> vec1 = [...]\n-// cdb-check:struct alloc::vec::Vec<enum$<type_names::mod1::Enum2>,alloc::alloc::Global> vec2 = [...]\n+// cdb-check:struct alloc::vec::Vec<enum2$<type_names::mod1::Enum2>,alloc::alloc::Global> vec2 = [...]\n // cdb-command:dv /t slice*\n // cdb-check:struct slice$<usize> slice1 = [...]\n-// cdb-check:struct slice$<enum$<type_names::mod1::Enum2> > slice2 = [...]\n+// cdb-check:struct slice$<enum2$<type_names::mod1::Enum2> > slice2 = [...]\n \n // TRAITS\n // cdb-command:dv /t *_trait\n@@ -238,16 +238,16 @@\n // cdb-check:struct tuple$<type_names::mod1::Struct2 (*)(type_names::GenericStruct<u16,u8>),usize> unsafe_fn_with_return_value = [...]\n // cdb-check:struct tuple$<type_names::Struct1 (*)(),usize> extern_c_fn_with_return_value = [...]\n // cdb-check:struct tuple$<usize (*)(f64),usize> rust_fn_with_return_value = [...]\n-// cdb-check:struct tuple$<void (*)(enum$<core::result::Result<char,f64> >),usize> unsafe_fn = [...]\n+// cdb-check:struct tuple$<void (*)(enum2$<core::result::Result<char,f64> >),usize> unsafe_fn = [...]\n // cdb-check:struct tuple$<void (*)(isize),usize> extern_c_fn = [...]\n-// cdb-check:struct tuple$<void (*)(enum$<core::option::Option<isize> >,enum$<core::option::Option<ref$<type_names::mod1::Struct2> > >),usize> rust_fn = [...]\n+// cdb-check:struct tuple$<void (*)(enum2$<core::option::Option<isize> >,enum2$<core::option::Option<ref$<type_names::mod1::Struct2> > >),usize> rust_fn = [...]\n // cdb-command:dv /t *_function*\n // cdb-check:struct tuple$<isize (*)(ptr_const$<u8>, ...),usize> variadic_function = [...]\n // cdb-check:struct tuple$<type_names::mod1::mod2::Struct3 (*)(type_names::mod1::mod2::Struct3),usize> generic_function_struct3 = [...]\n // cdb-check:struct tuple$<isize (*)(isize),usize> generic_function_int = [...]\n // cdb-command:dx Debugger.State.Scripts.@\"type-names.cdb\".Contents.getFunctionDetails(\"rust_fn\")\n // cdb-check:Return Type: void\n-// cdb-check:Parameter Types: enum$<core::option::Option<isize> >,enum$<core::option::Option<ref$<type_names::mod1::Struct2> > >\n+// cdb-check:Parameter Types: enum2$<core::option::Option<isize> >,enum2$<core::option::Option<ref$<type_names::mod1::Struct2> > >\n // cdb-command:dx Debugger.State.Scripts.@\"type-names.cdb\".Contents.getFunctionDetails(\"rust_fn_with_return_value\")\n // cdb-check:Return Type: usize\n // cdb-check:Parameter Types: f64"}]}