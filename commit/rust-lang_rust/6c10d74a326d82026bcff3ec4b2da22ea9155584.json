{"sha": "6c10d74a326d82026bcff3ec4b2da22ea9155584", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMTBkNzRhMzI2ZDgyMDI2YmNmZjNlYzRiMmRhMjJlYTkxNTU1ODQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-19T10:54:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-11-24T22:30:13Z"}, "message": "Remove the GraphExtents, the design of which seems bogus. They carried\nthe right information, but it's hard to maintain in the face of\noptimizations, and in the form that the analyses probably actually want.", "tree": {"sha": "7c8dac5ed6f016211add0baa05d0cd1585dbce9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8dac5ed6f016211add0baa05d0cd1585dbce9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c10d74a326d82026bcff3ec4b2da22ea9155584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c10d74a326d82026bcff3ec4b2da22ea9155584", "html_url": "https://github.com/rust-lang/rust/commit/6c10d74a326d82026bcff3ec4b2da22ea9155584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c10d74a326d82026bcff3ec4b2da22ea9155584/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a3fe32eb71bc2e0946d5e7c61c21157f554b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a3fe32eb71bc2e0946d5e7c61c21157f554b5e", "html_url": "https://github.com/rust-lang/rust/commit/29a3fe32eb71bc2e0946d5e7c61c21157f554b5e"}], "stats": {"total": 133, "additions": 33, "deletions": 100}, "files": [{"sha": "e44e3936885244c5e2403e6a8e3d4f4aa0e1ae24", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=6c10d74a326d82026bcff3ec4b2da22ea9155584", "patch": "@@ -26,13 +26,6 @@ impl<'tcx> CFG<'tcx> {\n         &mut self.basic_blocks[blk.index()]\n     }\n \n-    pub fn end_point(&self, block: BasicBlock) -> ExecutionPoint {\n-        ExecutionPoint {\n-            block: block,\n-            statement: self.block_data(block).statements.len() as u32,\n-        }\n-    }\n-\n     pub fn start_new_block(&mut self) -> BasicBlock {\n         let node_index = self.basic_blocks.len();\n         self.basic_blocks.push(BasicBlockData::new(Terminator::Diverge));"}, {"sha": "3f3bceef1ebc37a203cb8350b06b089c29eae332", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=6c10d74a326d82026bcff3ec4b2da22ea9155584", "patch": "@@ -70,7 +70,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 this.cfg.push_assign(block, expr_span, &result, rvalue);\n \n                 // schedule a shallow free of that memory, lest we unwind:\n-                let extent = this.extent_of_innermost_scope().unwrap();\n+                let extent = this.extent_of_innermost_scope();\n                 this.schedule_drop(expr_span, extent, DropKind::Free, &result, value_ty);\n \n                 // initialize the box contents:"}, {"sha": "7d79e90b3f188ddcf098725a016bacfffa9cdb56", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=6c10d74a326d82026bcff3ec4b2da22ea9155584", "patch": "@@ -206,7 +206,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n             ExprKind::Return { value } => {\n                 unpack!(block = this.into(&Lvalue::ReturnPointer, block, value));\n-                let extent = this.extent_of_outermost_scope().unwrap();\n+                let extent = this.extent_of_outermost_scope();\n                 this.exit_scope(expr_span, extent, block, END_BLOCK);\n                 this.cfg.start_new_block().unit()\n             }"}, {"sha": "cc6155844bc9a7b060d8e17372936ce5959c5abd", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=6c10d74a326d82026bcff3ec4b2da22ea9155584", "patch": "@@ -42,7 +42,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         // suitable extent for all of the bindings in this match. It's\n         // easiest to do this up front because some of these arms may\n         // be unreachable or reachable multiple times.\n-        let var_extent = self.extent_of_innermost_scope().unwrap();\n+        let var_extent = self.extent_of_innermost_scope();\n         for arm in &arms {\n             self.declare_bindings(var_extent, &arm.patterns[0]);\n         }"}, {"sha": "f67c2920ba39f935b3f6d3c828a145bc4d0f2812", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=6c10d74a326d82026bcff3ec4b2da22ea9155584", "patch": "@@ -19,7 +19,6 @@ use syntax::codemap::Span;\n \n struct Builder<'a, 'tcx: 'a> {\n     hir: Cx<'a, 'tcx>,\n-    extents: FnvHashMap<CodeExtent, Vec<GraphExtent>>,\n     cfg: CFG<'tcx>,\n     scopes: Vec<scope::Scope<'tcx>>,\n     loop_scopes: Vec<scope::LoopScope>,\n@@ -92,7 +91,6 @@ pub fn construct<'a,'tcx>(mut hir: Cx<'a,'tcx>,\n     let mut builder = Builder {\n         hir: hir,\n         cfg: cfg,\n-        extents: FnvHashMap(),\n         scopes: vec![],\n         loop_scopes: vec![],\n         temp_decls: temp_decls,\n@@ -117,7 +115,6 @@ pub fn construct<'a,'tcx>(mut hir: Cx<'a,'tcx>,\n \n     Mir {\n         basic_blocks: builder.cfg.basic_blocks,\n-        extents: builder.extents,\n         var_decls: builder.var_decls,\n         arg_decls: arg_decls,\n         temp_decls: builder.temp_decls,"}, {"sha": "987424f4ac77adb1eb8e9794b12bbb605e3dd7a6", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 30, "deletions": 43, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=6c10d74a326d82026bcff3ec4b2da22ea9155584", "patch": "@@ -94,7 +94,6 @@ use syntax::codemap::Span;\n \n pub struct Scope<'tcx> {\n     extent: CodeExtent,\n-    exits: Vec<ExecutionPoint>,\n     drops: Vec<(DropKind, Span, Lvalue<'tcx>)>,\n     cached_block: Option<BasicBlock>,\n }\n@@ -116,7 +115,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                                -> BlockAnd<R>\n         where F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>\n     {\n-        let extent = self.extent_of_innermost_scope().unwrap();\n+        let extent = self.extent_of_innermost_scope();\n         let loop_scope = LoopScope {\n             extent: extent.clone(),\n             continue_block: loop_block,\n@@ -128,60 +127,50 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         r\n     }\n \n-    /// Start a scope. The closure `f` should translate the contents\n-    /// of the scope. See module comment for more details.\n-    pub fn in_scope<F, R>(&mut self, extent: CodeExtent, block: BasicBlock, f: F) -> BlockAnd<R>\n+    /// Convenience wrapper that pushes a scope and then executes `f`\n+    /// to build its contents, popping the scope afterwards.\n+    pub fn in_scope<F, R>(&mut self, extent: CodeExtent, mut block: BasicBlock, f: F) -> BlockAnd<R>\n         where F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_scope(extent={:?}, block={:?})\", extent, block);\n+        self.push_scope(extent, block);\n+        let rv = unpack!(block = f(self));\n+        assert_eq!(self.extent_of_innermost_scope(), extent);\n+        self.pop_scope(block);\n+        debug!(\"in_scope: exiting extent={:?} block={:?}\", extent, block);\n+        block.and(rv)\n+    }\n \n-        let start_point = self.cfg.end_point(block);\n+    /// Push a scope onto the stack. You can then build code in this\n+    /// scope and call `pop_scope` afterwards. Note that these two\n+    /// calls must be paired; using `in_scope` as a convenience\n+    /// wrapper maybe preferable.\n+    pub fn push_scope(&mut self, extent: CodeExtent, block: BasicBlock) {\n+        debug!(\"push_scope({:?}, {:?})\", extent, block);\n \n         // push scope, execute `f`, then pop scope again\n         self.scopes.push(Scope {\n             extent: extent.clone(),\n             drops: vec![],\n-            exits: vec![],\n             cached_block: None,\n         });\n-        let BlockAnd(fallthrough_block, rv) = f(self);\n-        let mut scope = self.scopes.pop().unwrap();\n+    }\n+\n+    /// Pops the innermost scope, adding any drops onto the end of\n+    /// `block` that are needed.  This must match 1-to-1 with\n+    /// `push_scope`.\n+    pub fn pop_scope(&mut self, block: BasicBlock) {\n+        debug!(\"pop_scope({:?})\", block);\n+        let scope = self.scopes.pop().unwrap();\n \n         // add in any drops needed on the fallthrough path (any other\n         // exiting paths, such as those that arise from `break`, will\n         // have drops already)\n         for (kind, span, lvalue) in scope.drops {\n-            self.cfg.push_drop(fallthrough_block, span, kind, &lvalue);\n+            self.cfg.push_drop(block, span, kind, &lvalue);\n         }\n-\n-        // add the implicit fallthrough edge\n-        scope.exits.push(self.cfg.end_point(fallthrough_block));\n-\n-        // compute the extent from start to finish and store it in the graph\n-        let graph_extent = self.graph_extent(start_point, scope.exits);\n-        self.extents.entry(extent)\n-                    .or_insert(vec![])\n-                    .push(graph_extent);\n-\n-        debug!(\"in_scope: exiting extent={:?} fallthrough_block={:?}\", extent, fallthrough_block);\n-        fallthrough_block.and(rv)\n     }\n \n-    /// Creates a graph extent (SEME region) from an entry point and\n-    /// exit points.\n-    fn graph_extent(&self, entry: ExecutionPoint, exits: Vec<ExecutionPoint>) -> GraphExtent {\n-        if exits.len() == 1 && entry.block == exits[0].block {\n-            GraphExtent {\n-                entry: entry,\n-                exit: GraphExtentExit::Statement(exits[0].statement),\n-            }\n-        } else {\n-            GraphExtent {\n-                entry: entry,\n-                exit: GraphExtentExit::Points(exits),\n-            }\n-        }\n-    }\n \n     /// Finds the loop scope for a given label. This is used for\n     /// resolving `break` and `continue`.\n@@ -232,8 +221,6 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             for &(kind, drop_span, ref lvalue) in &scope.drops {\n                 self.cfg.push_drop(block, drop_span, kind, lvalue);\n             }\n-\n-            scope.exits.push(self.cfg.end_point(block));\n         }\n \n         self.cfg.terminate(block, Terminator::Goto { target: target });\n@@ -272,12 +259,12 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         }\n     }\n \n-    pub fn extent_of_innermost_scope(&self) -> Option<CodeExtent> {\n-        self.scopes.last().map(|scope| scope.extent)\n+    pub fn extent_of_innermost_scope(&self) -> CodeExtent {\n+        self.scopes.last().map(|scope| scope.extent).unwrap()\n     }\n \n-    pub fn extent_of_outermost_scope(&self) -> Option<CodeExtent> {\n-        self.scopes.first().map(|scope| scope.extent)\n+    pub fn extent_of_outermost_scope(&self) -> CodeExtent {\n+        self.scopes.first().map(|scope| scope.extent).unwrap()\n     }\n }\n "}, {"sha": "dad8961a7883a0eda268df9d1cb0428e4420f667", "filename": "src/librustc_mir/repr.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c10d74a326d82026bcff3ec4b2da22ea9155584/src%2Flibrustc_mir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Frepr.rs?ref=6c10d74a326d82026bcff3ec4b2da22ea9155584", "patch": "@@ -10,11 +10,9 @@\n \n use rustc::middle::const_eval::ConstVal;\n use rustc::middle::def_id::DefId;\n-use rustc::middle::region::CodeExtent;\n use rustc::middle::subst::Substs;\n use rustc::middle::ty::{AdtDef, ClosureSubsts, FnOutput, Region, Ty};\n use rustc_back::slice;\n-use rustc_data_structures::fnv::FnvHashMap;\n use rustc_front::hir::InlineAsm;\n use syntax::ast::Name;\n use syntax::codemap::Span;\n@@ -156,48 +154,6 @@ pub struct ArgDecl<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-// Graph extents\n-\n-/// A moment in the flow of execution. It corresponds to a point in\n-/// between two statements:\n-///\n-///    BB[block]:\n-///                          <--- if statement == 0\n-///        STMT[0]\n-///                          <--- if statement == 1\n-///        STMT[1]\n-///        ...\n-///                          <--- if statement == n-1\n-///        STMT[n-1]\n-///                          <--- if statement == n\n-///\n-/// where the block has `n` statements.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub struct ExecutionPoint {\n-    pub block: BasicBlock,\n-    pub statement: u32,\n-}\n-\n-/// A single-entry-multiple-exit region in the graph. We build one of\n-/// these for every node-id during MIR construction. By construction\n-/// we are assured that the entry dominates all points within, and\n-/// that, for every interior point X, it is postdominated by some exit.\n-pub struct GraphExtent {\n-    pub entry: ExecutionPoint,\n-    pub exit: GraphExtentExit,\n-}\n-\n-pub enum GraphExtentExit {\n-    /// `Statement(X)`: a very common special case covering a span\n-    /// that is local to a single block. It starts at the entry point\n-    /// and extends until the start of statement `X` (non-inclusive).\n-    Statement(u32),\n-\n-    /// The more general case where the exits are a set of points.\n-    Points(Vec<ExecutionPoint>),\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock\n "}]}