{"sha": "72cc4bd33b0d1b975173f4032581040fa354b724", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyY2M0YmQzM2IwZDFiOTc1MTczZjQwMzI1ODEwNDBmYTM1NGI3MjQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-24T11:27:30Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Inline encode and decode methods", "tree": {"sha": "5ea4cb8a4f2ed32d734fd5fba482c4626d008a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea4cb8a4f2ed32d734fd5fba482c4626d008a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72cc4bd33b0d1b975173f4032581040fa354b724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72cc4bd33b0d1b975173f4032581040fa354b724", "html_url": "https://github.com/rust-lang/rust/commit/72cc4bd33b0d1b975173f4032581040fa354b724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72cc4bd33b0d1b975173f4032581040fa354b724/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be12b242ce08ea7f83ab51b1d0027b9db9f2d737", "url": "https://api.github.com/repos/rust-lang/rust/commits/be12b242ce08ea7f83ab51b1d0027b9db9f2d737", "html_url": "https://github.com/rust-lang/rust/commit/be12b242ce08ea7f83ab51b1d0027b9db9f2d737"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "e498b5582bf054d5d302d25ff6f977701971cec9", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 27, "deletions": 36, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/72cc4bd33b0d1b975173f4032581040fa354b724/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72cc4bd33b0d1b975173f4032581040fa354b724/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=72cc4bd33b0d1b975173f4032581040fa354b724", "patch": "@@ -627,7 +627,7 @@ impl<'tcx> IntRange<'tcx> {\n                     if let Some(hi) = hi.assert_bits(ty) {\n                         // Perform a shift if the underlying types are signed,\n                         // which makes the interval arithmetic simpler.\n-                        let (lo, hi) = Self::encode(tcx, ty, lo..=hi);\n+                        let (lo, hi) = Self::encode(tcx, ty, (lo, hi));\n                         // Make sure the interval is well-formed.\n                         return if lo > hi || lo == hi && *end == RangeEnd::Excluded {\n                             None\n@@ -642,7 +642,7 @@ impl<'tcx> IntRange<'tcx> {\n             ConstantValue(val) => {\n                 let ty = val.ty;\n                 if let Some(val) = val.assert_bits(ty) {\n-                    let (lo, hi) = Self::encode(tcx, ty, val..=val);\n+                    let (lo, hi) = Self::encode(tcx, ty, (val, val));\n                     Some(IntRange { range: lo..=hi, ty })\n                 } else {\n                     None\n@@ -654,50 +654,44 @@ impl<'tcx> IntRange<'tcx> {\n         }\n     }\n \n-    fn convert(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-               ty: Ty<'tcx>,\n-               range: RangeInclusive<u128>,\n-               encode: bool)\n-               -> (u128, u128) {\n-        // We ensure that all integer values are contiguous: that is, that their\n-        // minimum value is represented by 0, so that comparisons and increments/\n-        // decrements on interval endpoints work consistently whether the endpoints\n-        // are signed or unsigned.\n-        let (lo, hi) = range.into_inner();\n+    fn encode(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+              ty: Ty<'tcx>,\n+              (lo, hi): (u128, u128))\n+              -> (u128, u128) {\n         match ty.sty {\n             ty::TyInt(_) => {\n                 // FIXME(49937): refactor these bit manipulations into interpret.\n                 let bits = tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n                               .unwrap().size.bits() as u128;\n                 let min = 1u128 << (bits - 1);\n                 let mask = !0u128 >> (128 - bits);\n-                if encode {\n-                    let offset = |x: u128| x.wrapping_sub(min) & mask;\n-                    (offset(lo), offset(hi))\n-                } else {\n-                    let offset = |x: u128| x.wrapping_add(min) & mask;\n-                    (offset(lo), offset(hi))\n-                }\n+                let offset = |x: u128| x.wrapping_sub(min) & mask;\n+                (offset(lo), offset(hi))\n             }\n-            ty::TyUint(_) | ty::TyChar => {\n-                (lo, hi)\n-            }\n-            _ => bug!(\"`IntRange` should only contain integer types\")\n+            _ => (lo, hi)\n         }\n     }\n \n-    fn encode(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n-              ty: Ty<'tcx>,\n-              range: RangeInclusive<u128>)\n-              -> (u128, u128) {\n-        Self::convert(tcx, ty, range, true)\n-    }\n-\n     fn decode(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n               ty: Ty<'tcx>,\n               range: RangeInclusive<u128>)\n-              -> (u128, u128) {\n-        Self::convert(tcx, ty, range, false)\n+              -> Constructor<'tcx> {\n+        let (lo, hi) = range.into_inner();\n+        let (lo, hi) = match ty.sty {\n+            ty::TyInt(_) => {\n+                // FIXME(49937): refactor these bit manipulations into interpret.\n+                let bits = tcx.layout_of(ty::ParamEnv::reveal_all().and(ty))\n+                              .unwrap().size.bits() as u128;\n+                let min = 1u128 << (bits - 1);\n+                let mask = !0u128 >> (128 - bits);\n+                let offset = |x: u128| x.wrapping_add(min) & mask;\n+                (offset(lo), offset(hi))\n+            }\n+            _ => (lo, hi)\n+        };\n+        ConstantRange(ty::Const::from_bits(tcx, lo, ty),\n+                      ty::Const::from_bits(tcx, hi, ty),\n+                      RangeEnd::Included)\n     }\n \n     fn into_inner(self) -> (u128, u128) {\n@@ -739,10 +733,7 @@ fn ranges_subtract_pattern<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         }\n         // Convert the remaining ranges from pairs to inclusive `ConstantRange`s.\n         remaining_ranges.into_iter().map(|r| {\n-            let (lo, hi) = IntRange::decode(cx.tcx, ty, r);\n-            ConstantRange(ty::Const::from_bits(cx.tcx, lo, ty),\n-                          ty::Const::from_bits(cx.tcx, hi, ty),\n-                          RangeEnd::Included)\n+            IntRange::decode(cx.tcx, ty, r)\n         }).collect()\n     } else {\n         ranges"}]}