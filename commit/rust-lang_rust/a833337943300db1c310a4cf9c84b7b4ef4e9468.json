{"sha": "a833337943300db1c310a4cf9c84b7b4ef4e9468", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzMzMzc5NDMzMDBkYjFjMzEwYTRjZjljODRiN2I0ZWY0ZTk0Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-18T05:48:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-18T05:48:56Z"}, "message": "auto merge of #21288 : brson/rust/snaps, r=alexcrichton\n\nThis fixes the issues mentioned in https://github.com/rust-lang/rust/pull/21236, as well as the one https://github.com/rust-lang/rust/issues/21230 where `CFG_BOOTSTRAP_KEY` was being set to simply 'N'. It changes the build such that `RUSTC_BOOTSTRAP_KEY` is only exported on -beta and -stable, so that the behavior of the -dev, -nightly, and snapshot compilers is the same everywhere.\r\n\r\nHaven't run it completely through 'make check' yet, but the I have verified that the aforementioned issues are fixed.\r\n\r\nr? @alexcrichton cc @eddyb", "tree": {"sha": "7834caf30f35c3ac85ea122333b7ba7c07cc767c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7834caf30f35c3ac85ea122333b7ba7c07cc767c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a833337943300db1c310a4cf9c84b7b4ef4e9468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a833337943300db1c310a4cf9c84b7b4ef4e9468", "html_url": "https://github.com/rust-lang/rust/commit/a833337943300db1c310a4cf9c84b7b4ef4e9468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a833337943300db1c310a4cf9c84b7b4ef4e9468/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6da8827482418b6ee89eaf3c66b8693c4cc649e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6da8827482418b6ee89eaf3c66b8693c4cc649e8", "html_url": "https://github.com/rust-lang/rust/commit/6da8827482418b6ee89eaf3c66b8693c4cc649e8"}, {"sha": "8b2335a01d000300cca7d8b12210e605424eedb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2335a01d000300cca7d8b12210e605424eedb4", "html_url": "https://github.com/rust-lang/rust/commit/8b2335a01d000300cca7d8b12210e605424eedb4"}], "stats": {"total": 697, "additions": 218, "deletions": 479}, "files": [{"sha": "712db849039a9a72836172ee179e1c2cb034f06a", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/configure", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -612,7 +612,7 @@ putvar CFG_RELEASE_CHANNEL\n # channel.\n # Basing CFG_BOOTSTRAP_KEY on CFG_BOOTSTRAP_KEY lets it get picked up\n # during a Makefile reconfig.\n-CFG_BOOTSTRAP_KEY=\"${CFG_BOOTSTRAP_KEY-`date +%N`}\"\n+CFG_BOOTSTRAP_KEY=\"${CFG_BOOTSTRAP_KEY-`date +%H:%M:%S`}\"\n putvar CFG_BOOTSTRAP_KEY\n \n step_msg \"looking for build programs\""}, {"sha": "8c910f4759610436a5efab78c64405828e9a7e4c", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -330,10 +330,10 @@ ifdef CFG_DISABLE_UNSTABLE_FEATURES\n CFG_INFO := $(info cfg: disabling unstable features (CFG_DISABLE_UNSTABLE_FEATURES))\n # Turn on feature-staging\n export CFG_DISABLE_UNSTABLE_FEATURES\n-endif\n # Subvert unstable feature lints to do the self-build\n-export CFG_BOOTSTRAP_KEY\n export RUSTC_BOOTSTRAP_KEY:=$(CFG_BOOTSTRAP_KEY)\n+endif\n+export CFG_BOOTSTRAP_KEY\n \n ######################################################################\n # Per-stage targets and runner"}, {"sha": "f3514c6e7bc8264e71799fa8a22129bcdcee5682", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -13,6 +13,7 @@\n #![feature(slicing_syntax, unboxed_closures)]\n #![feature(box_syntax)]\n #![feature(int_uint)]\n+#![allow(unstable)]\n \n #![deny(warnings)]\n "}, {"sha": "5f086280a65a5a6d96528b278e55b182774f73f0", "filename": "src/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(unstable)]\n+\n #[cfg(rustdoc)]\n extern crate \"rustdoc\" as this;\n "}, {"sha": "8ad0c152dc8ed61a5758a35148f46556f161bf6d", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -117,14 +117,6 @@ impl<T: ?Sized + Ord> Ord for Box<T> {\n #[stable]\n impl<T: ?Sized + Eq> Eq for Box<T> {}\n \n-#[cfg(stage0)]\n-impl<S: hash::Writer, T: ?Sized + Hash<S>> Hash<S> for Box<T> {\n-    #[inline]\n-    fn hash(&self, state: &mut S) {\n-        (**self).hash(state);\n-    }\n-}\n-#[cfg(not(stage0))]\n impl<S: hash::Hasher, T: ?Sized + Hash<S>> Hash<S> for Box<T> {\n     #[inline]\n     fn hash(&self, state: &mut S) {"}, {"sha": "811e32e747dfd194f29e85dbc95f598fdd878cb6", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -66,6 +66,7 @@\n \n #![no_std]\n #![allow(unknown_features)]\n+#![allow(unstable)]\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(optin_builtin_traits)]"}, {"sha": "7191a7af346b08eccf908429b31d48df07405d50", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -686,14 +686,6 @@ impl<T: Ord> Ord for Rc<T> {\n }\n \n // FIXME (#18248) Make `T` `Sized?`\n-#[cfg(stage0)]\n-impl<S: hash::Writer, T: Hash<S>> Hash<S> for Rc<T> {\n-    #[inline]\n-    fn hash(&self, state: &mut S) {\n-        (**self).hash(state);\n-    }\n-}\n-#[cfg(not(stage0))]\n impl<S: hash::Hasher, T: Hash<S>> Hash<S> for Rc<T> {\n     #[inline]\n     fn hash(&self, state: &mut S) {"}, {"sha": "7458cc60c15c28e32d09ebb718bcfd60b4f99248", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -34,6 +34,7 @@\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![allow(missing_docs)]\n+#![allow(unstable)]\n \n extern crate alloc;\n "}, {"sha": "3ac6b2775bfa86ece9816ae21b5e30d85c1ad312", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -24,8 +24,6 @@ use core::cmp::Ordering;\n use core::default::Default;\n use core::fmt::Show;\n use core::hash::{Hash, Hasher};\n-#[cfg(stage0)]\n-use core::hash::Writer;\n use core::iter::{Map, FromIterator};\n use core::ops::{Index, IndexMut};\n use core::{iter, fmt, mem};\n@@ -822,16 +820,6 @@ impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n }\n \n #[stable]\n-#[cfg(stage0)]\n-impl<S: Writer, K: Hash<S>, V: Hash<S>> Hash<S> for BTreeMap<K, V> {\n-    fn hash(&self, state: &mut S) {\n-        for elt in self.iter() {\n-            elt.hash(state);\n-        }\n-    }\n-}\n-#[stable]\n-#[cfg(not(stage0))]\n impl<S: Hasher, K: Hash<S>, V: Hash<S>> Hash<S> for BTreeMap<K, V> {\n     fn hash(&self, state: &mut S) {\n         for elt in self.iter() {"}, {"sha": "797042c32161143c69fe2b945fb3f0599c7f353e", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -28,6 +28,7 @@\n #![feature(unboxed_closures)]\n #![feature(old_impl_check)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n #![no_std]\n \n #[macro_use]"}, {"sha": "5d35d8a86795a57ad50202612c75ddc52d5a4d6d", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -830,15 +830,6 @@ impl fmt::Show for String {\n }\n \n #[unstable = \"waiting on Hash stabilization\"]\n-#[cfg(stage0)]\n-impl<H: hash::Writer> hash::Hash<H> for String {\n-    #[inline]\n-    fn hash(&self, hasher: &mut H) {\n-        (**self).hash(hasher)\n-    }\n-}\n-#[unstable = \"waiting on Hash stabilization\"]\n-#[cfg(not(stage0))]\n impl<H: hash::Writer + hash::Hasher> hash::Hash<H> for String {\n     #[inline]\n     fn hash(&self, hasher: &mut H) {"}, {"sha": "689d96b4b295503474b719c5fee5d55d2dea4dda", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -1222,14 +1222,6 @@ impl<T:Clone> Clone for Vec<T> {\n     }\n }\n \n-#[cfg(stage0)]\n-impl<S: hash::Writer, T: Hash<S>> Hash<S> for Vec<T> {\n-    #[inline]\n-    fn hash(&self, state: &mut S) {\n-        self.as_slice().hash(state);\n-    }\n-}\n-#[cfg(not(stage0))]\n impl<S: hash::Writer + hash::Hasher, T: Hash<S>> Hash<S> for Vec<T> {\n     #[inline]\n     fn hash(&self, state: &mut S) {"}, {"sha": "535722f93bfd62382e580c9c85c67dade92f4891", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -180,25 +180,6 @@ impl<'a> Arguments<'a> {\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)] #[inline]\n     #[unstable = \"implementation detail of the `format_args!` macro\"]\n-    #[cfg(stage0)] // SNAP 9e4e524\n-    pub fn with_placeholders(pieces: &'a [&'a str],\n-                             fmt: &'a [rt::Argument<'a>],\n-                             args: &'a [Argument<'a>]) -> Arguments<'a> {\n-        Arguments {\n-            pieces: pieces,\n-            fmt: Some(fmt),\n-            args: args\n-        }\n-    }\n-    /// This function is used to specify nonstandard formatting parameters.\n-    /// The `pieces` array must be at least as long as `fmt` to construct\n-    /// a valid Arguments structure. Also, any `Count` within `fmt` that is\n-    /// `CountIsParam` or `CountIsNextParam` has to point to an argument\n-    /// created with `argumentuint`. However, failing to do so doesn't cause\n-    /// unsafety, but will ignore invalid .\n-    #[doc(hidden)] #[inline]\n-    #[unstable = \"implementation detail of the `format_args!` macro\"]\n-    #[cfg(not(stage0))]\n     pub fn with_placeholders(pieces: &'a [&'a str],\n                              fmt: &'a [rt::Argument],\n                              args: &'a [Argument<'a>]) -> Arguments<'a> {\n@@ -226,10 +207,6 @@ pub struct Arguments<'a> {\n     pieces: &'a [&'a str],\n \n     // Placeholder specs, or `None` if all specs are default (as in \"{}{}\").\n-    // SNAP 9e4e524\n-    #[cfg(stage0)]\n-    fmt: Option<&'a [rt::Argument<'a>]>,\n-    #[cfg(not(stage0))]\n     fmt: Option<&'a [rt::Argument]>,\n \n     // Dynamic arguments for interpolation, to be interleaved with string"}, {"sha": "bea322191552b5719703ccc1e0efe5cd938245e3", "filename": "src/libcore/fmt/rt.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -21,21 +21,12 @@ pub use self::Count::*;\n pub use self::Position::*;\n pub use self::Flag::*;\n \n-// SNAP 9e4e524\n #[doc(hidden)]\n #[derive(Copy)]\n-#[cfg(not(stage0))]\n pub struct Argument {\n     pub position: Position,\n     pub format: FormatSpec,\n }\n-#[doc(hidden)]\n-#[derive(Copy)]\n-#[cfg(stage0)]\n-pub struct Argument<'a> {\n-    pub position: Position,\n-    pub format: FormatSpec,\n-}\n \n #[doc(hidden)]\n #[derive(Copy)]"}, {"sha": "37e4a105a30cb3b8ad27257a45ffd27790a0b208", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 118, "deletions": 292, "changes": 410, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -58,7 +58,13 @@\n \n #![unstable = \"module was recently redesigned\"]\n \n+use prelude::*;\n+\n+use borrow::{Cow, ToOwned};\n use default::Default;\n+use intrinsics::TypeId;\n+use mem;\n+use num::Int;\n \n pub use self::sip::SipHasher;\n \n@@ -70,19 +76,6 @@ mod sip;\n /// to compute the hash. Specific implementations of this trait may specialize\n /// for particular instances of `H` in order to be able to optimize the hashing\n /// behavior.\n-#[cfg(stage0)]\n-pub trait Hash<H> {\n-    /// Feeds this value into the state given, updating the hasher as necessary.\n-    fn hash(&self, state: &mut H);\n-}\n-\n-/// A hashable type.\n-///\n-/// The `H` type parameter is an abstract hash state that is used by the `Hash`\n-/// to compute the hash. Specific implementations of this trait may specialize\n-/// for particular instances of `H` in order to be able to optimize the hashing\n-/// behavior.\n-#[cfg(not(stage0))]\n pub trait Hash<H: Hasher> {\n     /// Feeds this value into the state given, updating the hasher as necessary.\n     fn hash(&self, state: &mut H);\n@@ -121,314 +114,147 @@ pub fn hash<T: Hash<H>, H: Hasher + Default>(value: &T) -> H::Output {\n \n //////////////////////////////////////////////////////////////////////////////\n \n-#[cfg(stage0)]\n-mod impls {\n-    use prelude::*;\n-\n-    use borrow::{Cow, ToOwned};\n-    use intrinsics::TypeId;\n-    use mem;\n-    use super::{Hash, Writer};\n-    use num::Int;\n-\n-    macro_rules! impl_hash {\n-        ($ty:ident, $uty:ident) => {\n-            impl<S: Writer> Hash<S> for $ty {\n-                #[inline]\n-                fn hash(&self, state: &mut S) {\n-                    let a: [u8; ::$ty::BYTES] = unsafe {\n-                        mem::transmute((*self as $uty).to_le() as $ty)\n-                    };\n-                    state.write(a.as_slice())\n-                }\n-            }\n-        }\n-    }\n-\n-    impl_hash! { u8, u8 }\n-    impl_hash! { u16, u16 }\n-    impl_hash! { u32, u32 }\n-    impl_hash! { u64, u64 }\n-    impl_hash! { uint, uint }\n-    impl_hash! { i8, u8 }\n-    impl_hash! { i16, u16 }\n-    impl_hash! { i32, u32 }\n-    impl_hash! { i64, u64 }\n-    impl_hash! { int, uint }\n-\n-    impl<S: Writer> Hash<S> for bool {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            (*self as u8).hash(state);\n-        }\n-    }\n-\n-    impl<S: Writer> Hash<S> for char {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            (*self as u32).hash(state);\n-        }\n-    }\n-\n-    impl<S: Writer> Hash<S> for str {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            state.write(self.as_bytes());\n-            0xffu8.hash(state)\n-        }\n-    }\n-\n-    macro_rules! impl_hash_tuple {\n-        () => (\n-            impl<S> Hash<S> for () {\n-                #[inline]\n-                fn hash(&self, _state: &mut S) {}\n-            }\n-        );\n-\n-        ( $($name:ident)+) => (\n-            impl<S, $($name: Hash<S>),*> Hash<S> for ($($name,)*) {\n-                #[inline]\n-                #[allow(non_snake_case)]\n-                fn hash(&self, state: &mut S) {\n-                    match *self {\n-                        ($(ref $name,)*) => {\n-                            $(\n-                                $name.hash(state);\n-                            )*\n-                        }\n-                    }\n-                }\n-            }\n-        );\n-    }\n-\n-    impl_hash_tuple! {}\n-    impl_hash_tuple! { A }\n-    impl_hash_tuple! { A B }\n-    impl_hash_tuple! { A B C }\n-    impl_hash_tuple! { A B C D }\n-    impl_hash_tuple! { A B C D E }\n-    impl_hash_tuple! { A B C D E F }\n-    impl_hash_tuple! { A B C D E F G }\n-    impl_hash_tuple! { A B C D E F G H }\n-    impl_hash_tuple! { A B C D E F G H I }\n-    impl_hash_tuple! { A B C D E F G H I J }\n-    impl_hash_tuple! { A B C D E F G H I J K }\n-    impl_hash_tuple! { A B C D E F G H I J K L }\n-\n-    impl<S: Writer, T: Hash<S>> Hash<S> for [T] {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            self.len().hash(state);\n-            for elt in self.iter() {\n-                elt.hash(state);\n+macro_rules! impl_hash {\n+    ($ty:ident, $uty:ident) => {\n+        impl<S: Writer + Hasher> Hash<S> for $ty {\n+            #[inline]\n+            fn hash(&self, state: &mut S) {\n+                let a: [u8; ::$ty::BYTES] = unsafe {\n+                    mem::transmute((*self as $uty).to_le() as $ty)\n+                };\n+                state.write(a.as_slice())\n             }\n         }\n     }\n-\n-\n-    impl<'a, S, T: ?Sized + Hash<S>> Hash<S> for &'a T {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            (**self).hash(state);\n-        }\n-    }\n-\n-    impl<'a, S, T: ?Sized + Hash<S>> Hash<S> for &'a mut T {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            (**self).hash(state);\n-        }\n-    }\n-\n-    impl<S: Writer, T> Hash<S> for *const T {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            // NB: raw-pointer Hash does _not_ dereference\n-            // to the target; it just gives you the pointer-bytes.\n-            (*self as uint).hash(state);\n-        }\n-    }\n-\n-    impl<S: Writer, T> Hash<S> for *mut T {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            // NB: raw-pointer Hash does _not_ dereference\n-            // to the target; it just gives you the pointer-bytes.\n-            (*self as uint).hash(state);\n-        }\n-    }\n-\n-    impl<S: Writer> Hash<S> for TypeId {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            self.hash().hash(state)\n-        }\n-    }\n-\n-    impl<'a, T, B: ?Sized, S> Hash<S> for Cow<'a, T, B>\n-        where B: Hash<S> + ToOwned<T>\n-    {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            Hash::hash(&**self, state)\n-        }\n-    }\n }\n \n-#[cfg(not(stage0))]\n-mod impls {\n-    use prelude::*;\n-\n-    use borrow::{Cow, ToOwned};\n-    use intrinsics::TypeId;\n-    use mem;\n-    use super::{Hash, Writer, Hasher};\n-    use num::Int;\n-\n-    macro_rules! impl_hash {\n-        ($ty:ident, $uty:ident) => {\n-            impl<S: Writer + Hasher> Hash<S> for $ty {\n-                #[inline]\n-                fn hash(&self, state: &mut S) {\n-                    let a: [u8; ::$ty::BYTES] = unsafe {\n-                        mem::transmute((*self as $uty).to_le() as $ty)\n-                    };\n-                    state.write(a.as_slice())\n-                }\n-            }\n-        }\n+impl_hash! { u8, u8 }\n+impl_hash! { u16, u16 }\n+impl_hash! { u32, u32 }\n+impl_hash! { u64, u64 }\n+impl_hash! { uint, uint }\n+impl_hash! { i8, u8 }\n+impl_hash! { i16, u16 }\n+impl_hash! { i32, u32 }\n+impl_hash! { i64, u64 }\n+impl_hash! { int, uint }\n+\n+impl<S: Writer + Hasher> Hash<S> for bool {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        (*self as u8).hash(state);\n     }\n+}\n \n-    impl_hash! { u8, u8 }\n-    impl_hash! { u16, u16 }\n-    impl_hash! { u32, u32 }\n-    impl_hash! { u64, u64 }\n-    impl_hash! { uint, uint }\n-    impl_hash! { i8, u8 }\n-    impl_hash! { i16, u16 }\n-    impl_hash! { i32, u32 }\n-    impl_hash! { i64, u64 }\n-    impl_hash! { int, uint }\n-\n-    impl<S: Writer + Hasher> Hash<S> for bool {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            (*self as u8).hash(state);\n-        }\n+impl<S: Writer + Hasher> Hash<S> for char {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        (*self as u32).hash(state);\n     }\n+}\n \n-    impl<S: Writer + Hasher> Hash<S> for char {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            (*self as u32).hash(state);\n-        }\n+impl<S: Writer + Hasher> Hash<S> for str {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        state.write(self.as_bytes());\n+        0xffu8.hash(state)\n     }\n+}\n \n-    impl<S: Writer + Hasher> Hash<S> for str {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            state.write(self.as_bytes());\n-            0xffu8.hash(state)\n+macro_rules! impl_hash_tuple {\n+    () => (\n+        impl<S: Hasher> Hash<S> for () {\n+            #[inline]\n+            fn hash(&self, _state: &mut S) {}\n         }\n-    }\n-\n-    macro_rules! impl_hash_tuple {\n-        () => (\n-            impl<S: Hasher> Hash<S> for () {\n-                #[inline]\n-                fn hash(&self, _state: &mut S) {}\n-            }\n-        );\n-\n-        ( $($name:ident)+) => (\n-            impl<S: Hasher, $($name: Hash<S>),*> Hash<S> for ($($name,)*) {\n-                #[inline]\n-                #[allow(non_snake_case)]\n-                fn hash(&self, state: &mut S) {\n-                    match *self {\n-                        ($(ref $name,)*) => {\n-                            $(\n-                                $name.hash(state);\n-                            )*\n-                        }\n+    );\n+\n+    ( $($name:ident)+) => (\n+        impl<S: Hasher, $($name: Hash<S>),*> Hash<S> for ($($name,)*) {\n+            #[inline]\n+            #[allow(non_snake_case)]\n+            fn hash(&self, state: &mut S) {\n+                match *self {\n+                    ($(ref $name,)*) => {\n+                        $(\n+                            $name.hash(state);\n+                        )*\n                     }\n                 }\n             }\n-        );\n-    }\n-\n-    impl_hash_tuple! {}\n-    impl_hash_tuple! { A }\n-    impl_hash_tuple! { A B }\n-    impl_hash_tuple! { A B C }\n-    impl_hash_tuple! { A B C D }\n-    impl_hash_tuple! { A B C D E }\n-    impl_hash_tuple! { A B C D E F }\n-    impl_hash_tuple! { A B C D E F G }\n-    impl_hash_tuple! { A B C D E F G H }\n-    impl_hash_tuple! { A B C D E F G H I }\n-    impl_hash_tuple! { A B C D E F G H I J }\n-    impl_hash_tuple! { A B C D E F G H I J K }\n-    impl_hash_tuple! { A B C D E F G H I J K L }\n+        }\n+    );\n+}\n \n-    impl<S: Writer + Hasher, T: Hash<S>> Hash<S> for [T] {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            self.len().hash(state);\n-            for elt in self.iter() {\n-                elt.hash(state);\n-            }\n+impl_hash_tuple! {}\n+impl_hash_tuple! { A }\n+impl_hash_tuple! { A B }\n+impl_hash_tuple! { A B C }\n+impl_hash_tuple! { A B C D }\n+impl_hash_tuple! { A B C D E }\n+impl_hash_tuple! { A B C D E F }\n+impl_hash_tuple! { A B C D E F G }\n+impl_hash_tuple! { A B C D E F G H }\n+impl_hash_tuple! { A B C D E F G H I }\n+impl_hash_tuple! { A B C D E F G H I J }\n+impl_hash_tuple! { A B C D E F G H I J K }\n+impl_hash_tuple! { A B C D E F G H I J K L }\n+\n+impl<S: Writer + Hasher, T: Hash<S>> Hash<S> for [T] {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        self.len().hash(state);\n+        for elt in self.iter() {\n+            elt.hash(state);\n         }\n     }\n+}\n \n \n-    impl<'a, S: Hasher, T: ?Sized + Hash<S>> Hash<S> for &'a T {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            (**self).hash(state);\n-        }\n+impl<'a, S: Hasher, T: ?Sized + Hash<S>> Hash<S> for &'a T {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        (**self).hash(state);\n     }\n+}\n \n-    impl<'a, S: Hasher, T: ?Sized + Hash<S>> Hash<S> for &'a mut T {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            (**self).hash(state);\n-        }\n+impl<'a, S: Hasher, T: ?Sized + Hash<S>> Hash<S> for &'a mut T {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        (**self).hash(state);\n     }\n+}\n \n-    impl<S: Writer + Hasher, T> Hash<S> for *const T {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            // NB: raw-pointer Hash does _not_ dereference\n-            // to the target; it just gives you the pointer-bytes.\n-            (*self as uint).hash(state);\n-        }\n+impl<S: Writer + Hasher, T> Hash<S> for *const T {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        // NB: raw-pointer Hash does _not_ dereference\n+        // to the target; it just gives you the pointer-bytes.\n+        (*self as uint).hash(state);\n     }\n+}\n \n-    impl<S: Writer + Hasher, T> Hash<S> for *mut T {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            // NB: raw-pointer Hash does _not_ dereference\n-            // to the target; it just gives you the pointer-bytes.\n-            (*self as uint).hash(state);\n-        }\n+impl<S: Writer + Hasher, T> Hash<S> for *mut T {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        // NB: raw-pointer Hash does _not_ dereference\n+        // to the target; it just gives you the pointer-bytes.\n+        (*self as uint).hash(state);\n     }\n+}\n \n-    impl<S: Writer + Hasher> Hash<S> for TypeId {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            self.hash().hash(state)\n-        }\n+impl<S: Writer + Hasher> Hash<S> for TypeId {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        self.hash().hash(state)\n     }\n+}\n \n-    impl<'a, T, B: ?Sized, S: Hasher> Hash<S> for Cow<'a, T, B>\n-        where B: Hash<S> + ToOwned<T>\n-    {\n-        #[inline]\n-        fn hash(&self, state: &mut S) {\n-            Hash::hash(&**self, state)\n-        }\n+impl<'a, T, B: ?Sized, S: Hasher> Hash<S> for Cow<'a, T, B>\n+    where B: Hash<S> + ToOwned<T>\n+{\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        Hash::hash(&**self, state)\n     }\n }"}, {"sha": "40db0def626675478b99b42c2fa835b2b8e69b64", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -42,7 +42,6 @@\n #![unstable]\n #![allow(missing_docs)]\n \n-#[cfg(not(stage0))]\n use marker::Sized;\n \n pub type GlueFn = extern \"Rust\" fn(*const i8);\n@@ -207,12 +206,8 @@ extern \"rust-intrinsic\" {\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n-    #[cfg(not(stage0))]\n     pub fn type_id<T: ?Sized + 'static>() -> TypeId;\n \n-    #[cfg(stage0)]\n-    pub fn type_id<T: 'static>() -> TypeId;\n-\n     /// Create a value initialized to zero.\n     ///\n     /// `init` is unsafe because it returns a zeroed-out datum,\n@@ -562,15 +557,9 @@ pub struct TypeId {\n \n impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been instantiated with\n-    #[cfg(not(stage0))]\n     pub fn of<T: ?Sized + 'static>() -> TypeId {\n         unsafe { type_id::<T>() }\n     }\n \n-    #[cfg(stage0)]\n-    pub fn of<T: 'static>() -> TypeId {\n-        unsafe { type_id::<T>() }\n-    }\n-\n     pub fn hash(&self) -> u64 { self.t }\n }"}, {"sha": "0005db36c278a2ef78970551deea9705bfac4693", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -2753,9 +2753,9 @@ macro_rules! step_impl_no_between {\n }\n \n step_impl!(uint u8 u16 u32 int i8 i16 i32);\n-#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+#[cfg(target_pointer_width = \"64\")]\n step_impl!(u64 i64);\n-#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+#[cfg(target_pointer_width = \"32\")]\n step_impl_no_between!(u64 i64);\n \n "}, {"sha": "0b150d1ecf90bd9c7358593446f75f5f06b7761e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -58,7 +58,6 @@\n \n #![no_std]\n #![allow(unknown_features, raw_pointer_derive)]\n-#![cfg_attr(stage0, allow(unused_attributes))]\n #![allow(unknown_features)] #![feature(intrinsics, lang_items)]\n #![feature(simd, unsafe_destructor, slicing_syntax)]\n #![feature(unboxed_closures)]"}, {"sha": "83011db35cec85d777fefbaad7cab129db204c76", "filename": "src/libcore/num/int.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -16,8 +16,5 @@\n \n #![deprecated = \"replaced by isize\"]\n \n-#[cfg(stage0)] #[cfg(target_word_size = \"32\")] int_module! { int, 32 }\n-#[cfg(stage0)] #[cfg(target_word_size = \"64\")] int_module! { int, 64 }\n-\n-#[cfg(not(stage0))] #[cfg(target_pointer_width = \"32\")] int_module! { int, 32 }\n-#[cfg(not(stage0))] #[cfg(target_pointer_width = \"64\")] int_module! { int, 64 }\n+#[cfg(target_pointer_width = \"32\")] int_module! { int, 32 }\n+#[cfg(target_pointer_width = \"64\")] int_module! { int, 64 }"}, {"sha": "e4711c92c599c499125b123fedd04113a0308268", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -17,9 +17,7 @@\n #![stable]\n #![doc(primitive = \"isize\")]\n \n-#[cfg(any(all(stage0, target_word_size = \"32\"),\n-          all(not(stage0), target_pointer_width = \"32\")))]\n+#[cfg(target_pointer_width = \"32\")]\n int_module! { isize, 32 }\n-#[cfg(any(all(stage0, target_word_size = \"64\"),\n-          all(not(stage0), target_pointer_width = \"64\")))]\n+#[cfg(target_pointer_width = \"64\")]\n int_module! { isize, 64 }"}, {"sha": "599a5515e3b48c37fd9501cbff763e2b83802d40", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -496,7 +496,7 @@ uint_impl! { u64 = u64, 64,\n     intrinsics::u64_sub_with_overflow,\n     intrinsics::u64_mul_with_overflow }\n \n-#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+#[cfg(target_pointer_width = \"32\")]\n uint_impl! { uint = u32, 32,\n     intrinsics::ctpop32,\n     intrinsics::ctlz32,\n@@ -506,7 +506,7 @@ uint_impl! { uint = u32, 32,\n     intrinsics::u32_sub_with_overflow,\n     intrinsics::u32_mul_with_overflow }\n \n-#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+#[cfg(target_pointer_width = \"64\")]\n uint_impl! { uint = u64, 64,\n     intrinsics::ctpop64,\n     intrinsics::ctlz64,\n@@ -601,13 +601,13 @@ int_impl! { i64 = i64, u64, 64,\n     intrinsics::i64_sub_with_overflow,\n     intrinsics::i64_mul_with_overflow }\n \n-#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+#[cfg(target_pointer_width = \"32\")]\n int_impl! { int = i32, u32, 32,\n     intrinsics::i32_add_with_overflow,\n     intrinsics::i32_sub_with_overflow,\n     intrinsics::i32_mul_with_overflow }\n \n-#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+#[cfg(target_pointer_width = \"64\")]\n int_impl! { int = i64, u64, 64,\n     intrinsics::i64_add_with_overflow,\n     intrinsics::i64_sub_with_overflow,"}, {"sha": "db7177e26fa2746013c3d84499f6a96c0779cc45", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -719,8 +719,6 @@ macro_rules! shl_impl {\n     )\n }\n \n-// SNAP 9e4e524e0\n-#[cfg(not(stage0))]\n macro_rules! shl_impl_all {\n     ($($t:ty)*) => ($(\n         shl_impl! { $t, u8 }\n@@ -737,13 +735,6 @@ macro_rules! shl_impl_all {\n     )*)\n }\n \n-#[cfg(stage0)]\n-macro_rules! shl_impl_all {\n-    ($($t:ty)*) => ($(\n-        shl_impl! { $t, usize }\n-    )*)\n-}\n-\n shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n /// The `Shr` trait is used to specify the functionality of `>>`.\n@@ -798,8 +789,6 @@ macro_rules! shr_impl {\n     )\n }\n \n-// SNAP 9e4e524e0\n-#[cfg(not(stage0))]\n macro_rules! shr_impl_all {\n     ($($t:ty)*) => ($(\n         shr_impl! { $t, u8 }\n@@ -816,13 +805,6 @@ macro_rules! shr_impl_all {\n     )*)\n }\n \n-#[cfg(stage0)]\n-macro_rules! shr_impl_all {\n-    ($($t:ty)*) => ($(\n-        shr_impl! { $t, usize }\n-    )*)\n-}\n-\n shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n \n /// The `Index` trait is used to specify the functionality of indexing operations"}, {"sha": "0c7b72612fae1f726c17792570d17a441b73881d", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -12,6 +12,7 @@\n #![feature(unboxed_closures)]\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate core;\n extern crate test;"}, {"sha": "f0a2ab3d1d6ccef3584c52b0b558d02343ddf533", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -18,6 +18,7 @@\n #![unstable]\n #![staged_api]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "0ff153274410a8fc920158408f6c223ef4532443", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -26,6 +26,7 @@\n \n #![feature(slicing_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n pub use self::Piece::*;\n pub use self::Position::*;"}, {"sha": "c2114d4c6df6df57a36bb8460609b60cf4da2f31", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -88,6 +88,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![feature(slicing_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n #![deny(missing_docs)]\n \n #[cfg(test)] #[macro_use] extern crate log;"}, {"sha": "2d7d88f0f35e00171bd508026b73198cb9a713d2", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -274,6 +274,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n #![feature(slicing_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n use self::LabelText::*;\n "}, {"sha": "0ad18e253292711496fe06b9e1fbefcc6fa1c68c", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -13,6 +13,7 @@\n #![cfg_attr(not(feature = \"cargo-build\"), unstable)]\n #![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n #![no_std]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\","}, {"sha": "dbd88434127859284c290cd85174b4d25ea5324e", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -169,6 +169,7 @@\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n #![deny(missing_docs)]\n \n extern crate regex;"}, {"sha": "853eb41d011b47ec9ee69475d8cc8100cb4651a8", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -23,6 +23,7 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n #![no_std]\n #![unstable]\n #![staged_api]"}, {"sha": "f28600e5e6973c7947329199e6e2e2c72921dd98", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -27,6 +27,7 @@\n #![allow(unknown_features)]\n #![feature(slicing_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate serialize;\n #[macro_use] extern crate log;"}, {"sha": "002b74cf1efa4afda248cf8b7d2581e0a645e5c9", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -24,6 +24,7 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n #![allow(unknown_features)]\n+#![allow(unstable)]\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]"}, {"sha": "628690645514a2f28bb7c225d2a3449558637e59", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -29,6 +29,7 @@\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![feature(rustc_diagnostic_macros)]\n+#![allow(unstable)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "ddee1f79d6a6856b5ce71175424d849f03eec65d", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -274,12 +274,12 @@ fn find_libdir(sysroot: &Path) -> String {\n         }\n     }\n \n-    #[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+    #[cfg(target_pointer_width = \"64\")]\n     fn primary_libdir_name() -> String {\n         \"lib64\".to_string()\n     }\n \n-    #[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+    #[cfg(target_pointer_width = \"32\")]\n     fn primary_libdir_name() -> String {\n         \"lib32\".to_string()\n     }"}, {"sha": "34e4993c54da30e16f8cde71055e2693d7b7c9bc", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -947,13 +947,6 @@ impl<'tcx> PartialEq for TyS<'tcx> {\n }\n impl<'tcx> Eq for TyS<'tcx> {}\n \n-#[cfg(stage0)]\n-impl<'tcx, S: Writer> Hash<S> for TyS<'tcx> {\n-    fn hash(&self, s: &mut S) {\n-        (self as *const _).hash(s)\n-    }\n-}\n-#[cfg(not(stage0))]\n impl<'tcx, S: Writer + Hasher> Hash<S> for TyS<'tcx> {\n     fn hash(&self, s: &mut S) {\n         (self as *const _).hash(s)"}, {"sha": "d778b916b67482fcb45229d21f12fe5c61b864ff", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -32,6 +32,7 @@\n #![allow(unknown_features)]\n #![feature(slicing_syntax, box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate syntax;\n extern crate serialize;"}, {"sha": "4dd9b3ad2ef9753fa46d5315bc28b17fece89f20", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -23,6 +23,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![allow(non_camel_case_types)]\n+#![allow(unstable)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "50ff4546c3783beca403127c8b0e0f16aad52bf7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -29,6 +29,7 @@\n #![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "4c9a25f42fb7797e5f08a112208b9f41303d6f5d", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -26,6 +26,7 @@\n #![feature(link_args)]\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate libc;\n #[macro_use] #[no_link] extern crate rustc_bitflags;"}, {"sha": "9b5913c659bb489733bcc46e7aff05104cd00ba3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -19,6 +19,7 @@\n \n #![feature(rustc_diagnostic_macros)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "8c1e847748c3dd20d1ee3f2e5704e41a5d7ca7b2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -20,6 +20,7 @@\n #![feature(slicing_syntax)]\n #![feature(rustc_diagnostic_macros)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "c3e88e65b2fd0a7e78028cc019da909d9f060bfa", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -29,6 +29,7 @@\n #![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "47b5cd4b11e0f1a2b99c56ce85124fe8c985471e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -79,6 +79,7 @@ This API is completely unstable and subject to change.\n #![feature(rustc_diagnostic_macros)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![allow(non_camel_case_types)]\n+#![allow(unstable)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "71bd53009af0b55fb90048f737d0d0fad7ed5d05", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -20,6 +20,7 @@\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "b24e1bd685f1ebbd88cf685bbc10c75e488a26f4", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -24,11 +24,11 @@ Core encoding and decoding interfaces.\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![allow(unknown_features)]\n-#![cfg_attr(stage0, allow(unused_attributes))]\n #![feature(box_syntax)]\n #![feature(old_impl_check)]\n #![feature(slicing_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n // test harness access\n #[cfg(test)] extern crate test;"}, {"sha": "ddb8129630f758c66d03092c3c2af6721daff0dc", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -112,6 +112,8 @@\n #![feature(old_impl_check)]\n #![feature(optin_builtin_traits)]\n #![feature(int_uint)]\n+#![feature(int_uint)]\n+#![allow(unstable)]\n \n // Don't link to std. We are std.\n #![no_std]"}, {"sha": "3432767d6cd8ce1e68475e703bc5e3e3e6ad96f5", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -424,14 +424,12 @@ mod tests {\n         assert_eq!(int::MIN.to_u32(),  None);\n         assert_eq!(int::MIN.to_u64(),  None);\n \n-        #[cfg(any(all(stage0, target_word_size = \"32\"),\n-                  all(not(stage0), target_pointer_width = \"32\")))]\n+        #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n             assert_eq!(int::MIN.to_i32(), Some(int::MIN as i32));\n         }\n \n-        #[cfg(any(all(stage0, target_word_size = \"64\"),\n-                  all(not(stage0), target_pointer_width = \"64\")))]\n+        #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n             assert_eq!(int::MIN.to_i32(), None);\n         }\n@@ -494,14 +492,12 @@ mod tests {\n         assert_eq!(i64::MIN.to_u32(),  None);\n         assert_eq!(i64::MIN.to_u64(),  None);\n \n-        #[cfg(any(all(stage0, target_word_size = \"32\"),\n-                  all(not(stage0), target_pointer_width = \"32\")))]\n+        #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n             assert_eq!(i64::MIN.to_int(), None);\n         }\n \n-        #[cfg(any(all(stage0, target_word_size = \"64\"),\n-                  all(not(stage0), target_pointer_width = \"64\")))]\n+        #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n             assert_eq!(i64::MIN.to_int(), Some(i64::MIN as int));\n         }\n@@ -521,15 +517,13 @@ mod tests {\n         // int::MAX.to_u32() is word-size specific\n         assert_eq!(int::MAX.to_u64(),  Some(int::MAX as u64));\n \n-        #[cfg(any(all(stage0, target_word_size = \"32\"),\n-                  all(not(stage0), target_pointer_width = \"32\")))]\n+        #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n             assert_eq!(int::MAX.to_i32(), Some(int::MAX as i32));\n             assert_eq!(int::MAX.to_u32(), Some(int::MAX as u32));\n         }\n \n-        #[cfg(any(all(stage0, target_word_size = \"64\"),\n-                  all(not(stage0), target_pointer_width = \"64\")))]\n+        #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n             assert_eq!(int::MAX.to_i32(), None);\n             assert_eq!(int::MAX.to_u32(), None);\n@@ -593,15 +587,13 @@ mod tests {\n         assert_eq!(i64::MAX.to_u32(),  None);\n         assert_eq!(i64::MAX.to_u64(),  Some(i64::MAX as u64));\n \n-        #[cfg(any(all(stage0, target_word_size = \"32\"),\n-                  all(not(stage0), target_pointer_width = \"32\")))]\n+        #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n             assert_eq!(i64::MAX.to_int(),  None);\n             assert_eq!(i64::MAX.to_uint(), None);\n         }\n \n-        #[cfg(any(all(stage0, target_word_size = \"64\"),\n-                  all(not(stage0), target_pointer_width = \"64\")))]\n+        #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n             assert_eq!(i64::MAX.to_int(),  Some(i64::MAX as int));\n             assert_eq!(i64::MAX.to_uint(), Some(i64::MAX as uint));\n@@ -692,15 +684,13 @@ mod tests {\n         // uint::MAX.to_u32() is word-size specific\n         assert_eq!(uint::MAX.to_u64(),  Some(uint::MAX as u64));\n \n-        #[cfg(any(all(stage0, target_word_size = \"32\"),\n-                  all(not(stage0), target_pointer_width = \"32\")))]\n+        #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n             assert_eq!(uint::MAX.to_u32(), Some(uint::MAX as u32));\n             assert_eq!(uint::MAX.to_i64(), Some(uint::MAX as i64));\n         }\n \n-        #[cfg(any(all(stage0, target_word_size = \"64\"),\n-                  all(not(stage0), target_pointer_width = \"64\")))]\n+        #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n             assert_eq!(uint::MAX.to_u32(), None);\n             assert_eq!(uint::MAX.to_i64(), None);\n@@ -750,14 +740,12 @@ mod tests {\n         assert_eq!(u32::MAX.to_u32(),  Some(u32::MAX as u32));\n         assert_eq!(u32::MAX.to_u64(),  Some(u32::MAX as u64));\n \n-        #[cfg(any(all(stage0, target_word_size = \"32\"),\n-                  all(not(stage0), target_pointer_width = \"32\")))]\n+        #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n             assert_eq!(u32::MAX.to_int(),  None);\n         }\n \n-        #[cfg(any(all(stage0, target_word_size = \"64\"),\n-                  all(not(stage0), target_pointer_width = \"64\")))]\n+        #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n             assert_eq!(u32::MAX.to_int(),  Some(u32::MAX as int));\n         }\n@@ -778,14 +766,12 @@ mod tests {\n         assert_eq!(u64::MAX.to_u32(),  None);\n         assert_eq!(u64::MAX.to_u64(),  Some(u64::MAX as u64));\n \n-        #[cfg(any(all(stage0, target_word_size = \"32\"),\n-                  all(not(stage0), target_pointer_width = \"32\")))]\n+        #[cfg(target_pointer_width = \"32\")]\n         fn check_word_size() {\n             assert_eq!(u64::MAX.to_uint(), None);\n         }\n \n-        #[cfg(any(all(stage0, target_word_size = \"64\"),\n-                  all(not(stage0), target_pointer_width = \"64\")))]\n+        #[cfg(target_pointer_width = \"64\")]\n         fn check_word_size() {\n             assert_eq!(u64::MAX.to_uint(), Some(u64::MAX as uint));\n         }"}, {"sha": "23387d29553137cd36de3c52653e84276ea7d040", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -230,9 +230,9 @@ use rc::Rc;\n use result::Result::{Ok, Err};\n use vec::Vec;\n \n-#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+#[cfg(target_pointer_width = \"32\")]\n use core_rand::IsaacRng as IsaacWordRng;\n-#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+#[cfg(target_pointer_width = \"64\")]\n use core_rand::Isaac64Rng as IsaacWordRng;\n \n pub use core_rand::{Rand, Rng, SeedableRng, Open01, Closed01};"}, {"sha": "d8b8598723607a6d256376f55ad1b9f84a714c6d", "filename": "src/libstd/sys/common/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fbacktrace.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -12,10 +12,10 @@ use prelude::v1::*;\n \n use io::IoResult;\n \n-#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+#[cfg(target_pointer_width = \"64\")]\n pub const HEX_WIDTH: uint = 18;\n \n-#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+#[cfg(target_pointer_width = \"32\")]\n pub const HEX_WIDTH: uint = 10;\n \n // All rust symbols are in theory lists of \"::\"-separated identifiers. Some"}, {"sha": "9016d1a2c99cab743260fd85d83f28d7697e3779", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -173,13 +173,13 @@ mod signal {\n     unsafe impl ::marker::Sync for sigaction { }\n \n     #[repr(C)]\n-    #[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+    #[cfg(target_pointer_width = \"32\")]\n     pub struct sigset_t {\n         __val: [libc::c_ulong; 32],\n     }\n \n     #[repr(C)]\n-    #[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+    #[cfg(target_pointer_width = \"64\")]\n     pub struct sigset_t {\n         __val: [libc::c_ulong; 16],\n     }"}, {"sha": "2b5ced5085bbe8dff987e25e9cd63ce582e0f464", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -183,14 +183,12 @@ mod imp {\n             sa_restorer: *mut libc::c_void,\n         }\n \n-        #[cfg(any(all(stage0, target_word_size = \"32\"),\n-                  all(not(stage0), target_pointer_width = \"32\")))]\n+        #[cfg(target_pointer_width = \"32\")]\n         #[repr(C)]\n         pub struct sigset_t {\n             __val: [libc::c_ulong; 32],\n         }\n-        #[cfg(any(all(stage0, target_word_size = \"64\"),\n-                  all(not(stage0), target_pointer_width = \"64\")))]\n+        #[cfg(target_pointer_width = \"64\")]\n         #[repr(C)]\n         pub struct sigset_t {\n             __val: [libc::c_ulong; 16],"}, {"sha": "fa675a9fcaaec620cba8818f31069ecf3e5e5acd", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -28,6 +28,7 @@\n #![feature(box_syntax)]\n #![feature(quote, unsafe_destructor)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate arena;\n extern crate fmt_macros;"}, {"sha": "37fa8703706e07aece792932b1eaba8fb09cb5b9", "filename": "src/libsyntax/ptr.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibsyntax%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibsyntax%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fptr.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -38,7 +38,6 @@\n \n use std::fmt::{self, Show};\n use std::hash::{Hash, Hasher};\n-#[cfg(stage0)] use std::hash::Writer;\n use std::ops::Deref;\n use std::ptr;\n \n@@ -107,13 +106,6 @@ impl<T: Show> Show for P<T> {\n     }\n }\n \n-#[cfg(stage0)]\n-impl<S: Writer, T: Hash<S>> Hash<S> for P<T> {\n-    fn hash(&self, state: &mut S) {\n-        (**self).hash(state);\n-    }\n-}\n-#[cfg(not(stage0))]\n impl<S: Hasher, T: Hash<S>> Hash<S> for P<T> {\n     fn hash(&self, state: &mut S) {\n         (**self).hash(state);"}, {"sha": "027c5a1a708326da3e737961a129686399c2f293", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -52,6 +52,7 @@\n #![feature(slicing_syntax)]\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n #![deny(missing_docs)]\n \n #[macro_use] extern crate log;"}, {"sha": "b9e37156dc7a015708902d7a436fd6c830b70cac", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -35,6 +35,7 @@\n #![feature(asm, slicing_syntax)]\n #![feature(box_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate getopts;\n extern crate regex;"}, {"sha": "fbe912ced905b131c4f9e2551a77bb99e3cd65b3", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -31,6 +31,7 @@\n #![no_std]\n #![feature(slicing_syntax)]\n #![allow(unknown_features)] #![feature(int_uint)]\n+#![allow(unstable)]\n \n extern crate core;\n "}, {"sha": "ea72c653087d39a7bfbd371630d97be4bb6abe74", "filename": "src/rustbook/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fmain.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(slicing_syntax, box_syntax)]\n+#![allow(unstable)]\n \n extern crate regex;\n "}, {"sha": "16fb109bb7d2be3a9a37dd51ccac9fa752254381", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -1,3 +1,12 @@\n+S 2015-01-15 9ade482\n+  freebsd-x86_64 eb8f52c6e8dc24a293456d5e4dc5d1072442e758\n+  linux-i386 0197ad7179d74eba06a8b46432548caf226aa03d\n+  linux-x86_64 03459f8b216e96ed8b9abe25a42a75859195103d\n+  macos-i386 b5c004883ddff84159f11a3329cde682e0b7f75b\n+  macos-x86_64 b69ea42e1c995682adf0390ed4ef8a762c001a4e\n+  winnt-i386 7fa6e35d26bbffa3888d440a0d5f116414ef8c0a\n+  winnt-x86_64 ac04a4f1f26e0219d91e7eae6f580ca3cfee4231\n+\n S 2015-01-07 9e4e524\n   freebsd-x86_64 2563d33151bce1bbe08a85d712564bddc7503fc6\n   linux-i386 d8b73fc9aa3ad72ce1408a41e35d78dba10eb4d4"}, {"sha": "ee86c6ca1f06ff69eb1ce447341285a98c32b825", "filename": "src/test/compile-fail/fail-no-dead-code-core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-no-dead-code-core.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -10,6 +10,7 @@\n \n #![deny(dead_code)]\n #![allow(unreachable_code)]\n+#![allow(unstable)]\n \n #[macro_use] extern crate core;\n "}, {"sha": "6e7c05370b99d17d410226e42fa1c6a9ebfd281a", "filename": "src/test/compile-fail/huge-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-enum.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -12,12 +12,12 @@\n \n // FIXME: work properly with higher limits\n \n-#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+#[cfg(target_pointer_width = \"32\")]\n fn main() {\n     let big: Option<[u32; (1<<29)-1]> = None;\n }\n \n-#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+#[cfg(target_pointer_width = \"64\")]\n fn main() {\n     let big: Option<[u32; (1<<45)-1]> = None;\n }"}, {"sha": "1f5264aef6113856cdd778c49adbcab20486e5d6", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -13,14 +13,14 @@\n \n #![feature(box_syntax)]\n \n-#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+#[cfg(target_pointer_width = \"64\")]\n fn main() {\n     let n = 0us;\n     let a = box [&n; 0xF000000000000000us];\n     println!(\"{}\", a[0xFFFFFFu]);\n }\n \n-#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+#[cfg(target_pointer_width = \"32\")]\n fn main() {\n     let n = 0us;\n     let a = box [&n; 0xFFFFFFFFu];"}, {"sha": "eaefe55e066b42c0d971e732a416671a423c2948", "filename": "src/test/compile-fail/issue-17999.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![deny(unused_variables)]\n+#![allow(unstable)]\n \n fn main() {\n     for _ in range(1is, 101) {"}, {"sha": "5706453a2205222c9998075b75d5dc499035c1c2", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![deny(improper_ctypes)]\n+#![allow(unstable)]\n \n extern crate libc;\n "}, {"sha": "ceba33360d947702a042842d72b7f5a4f4647246", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -13,6 +13,7 @@\n #![allow(non_camel_case_types)]\n #![allow(non_upper_case_globals)]\n #![allow(missing_copy_implementations)]\n+#![allow(unstable)]\n #![deny(dead_code)]\n \n #![crate_type=\"lib\"]"}, {"sha": "89ab78968d04fe57aeccdc0e6b351cffc4576238", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n+#![allow(unstable)]\n #![deny(dead_code)]\n \n #![crate_type=\"lib\"]"}, {"sha": "3221be220d98ca863a34746bece491598e401498", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -10,6 +10,7 @@\n \n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n+#![allow(unstable)]\n #![deny(dead_code)]\n \n extern crate libc;"}, {"sha": "4c880eda099ca58845d68c041561b56389b615b0", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -10,6 +10,7 @@\n \n #![deny(exceeding_bitshifts)]\n #![allow(unused_variables)]\n+#![allow(unstable)]\n #![allow(dead_code)]\n \n fn main() {"}, {"sha": "ae156356b79b42500f4988fae4e95c28e975ad52", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -12,6 +12,7 @@\n \n #![deny(unused_extern_crates)]\n #![allow(unused_variables)]\n+#![allow(unstable)]\n \n extern crate libc; //~ ERROR: unused extern crate\n "}, {"sha": "d9f899ede048209145efb5f34119abb676106962", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -11,6 +11,7 @@\n // ignore-tidy-linelength\n \n #![allow(dead_code)]\n+#![allow(unstable)]\n #![deny(non_snake_case)]\n \n use std::io::File;"}, {"sha": "f27ee376f52041e59bc2fc746a2dba6538b7e3cc", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -10,6 +10,7 @@\n \n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n+#![allow(unstable)]\n #![allow(dead_code, non_camel_case_types)]\n \n fn f1(x: isize) {"}, {"sha": "b04f2edd142402b8f4dcb37e0fd069ab4256209a", "filename": "src/test/compile-fail/unused-attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n #![deny(unused_attributes)]\n #![allow(dead_code, unused_imports)]\n+#![allow(unstable)]\n \n #![foo] //~ ERROR unused attribute\n "}, {"sha": "5083bd23207306be0fe056e17c259dde134666c0", "filename": "src/test/run-pass/huge-largest-array.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhuge-largest-array.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -10,12 +10,12 @@\n \n use std::mem::size_of;\n \n-#[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n+#[cfg(target_pointer_width = \"32\")]\n pub fn main() {\n     assert_eq!(size_of::<[u8; (1 << 31) - 1]>(), (1 << 31) - 1);\n }\n \n-#[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n+#[cfg(target_pointer_width = \"64\")]\n pub fn main() {\n     assert_eq!(size_of::<[u8; (1 << 47) - 1]>(), (1 << 47) - 1);\n }"}, {"sha": "c22fb811a7b9e4402c45008946322275afd05e65", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -14,6 +14,7 @@\n #![deny(warnings)]\n #![allow(unused_must_use)]\n #![allow(unknown_features)]\n+#![allow(unstable)]\n #![feature(box_syntax)]\n \n use std::fmt;"}, {"sha": "f557f662e8104d4547e403a9a5d1802fb5c191b4", "filename": "src/test/run-pass/issue-11958.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Frun-pass%2Fissue-11958.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11958.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -12,6 +12,7 @@\n \n // Pretty printing tests complain about `use std::predule::*`\n #![allow(unused_imports)]\n+#![allow(unstable)]\n \n // We shouldn't need to rebind a moved upvar as mut if it's already\n // marked as mut"}, {"sha": "4c72e4fdb73ec71d7ad87e3a908dc8b6155f3ec5", "filename": "src/test/run-pass/issue-16671.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a833337943300db1c310a4cf9c84b7b4ef4e9468/src%2Ftest%2Frun-pass%2Fissue-16671.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16671.rs?ref=a833337943300db1c310a4cf9c84b7b4ef4e9468", "patch": "@@ -14,6 +14,7 @@\n \n // Pretty printing tests complain about `use std::predule::*`\n #![allow(unused_imports)]\n+#![allow(unstable)]\n \n // A var moved into a proc, that has a mutable loan path should\n // not trigger a misleading unused_mut warning."}]}