{"sha": "84209994ad8039a590332de390b68b52e79c29b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MjA5OTk0YWQ4MDM5YTU5MDMzMmRlMzkwYjY4YjUyZTc5YzI5YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-03T10:26:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-03T10:26:03Z"}, "message": "Auto merge of #7316 - lengyijun:rc_mutex, r=llogiq\n\nAdd new lint: `rc_mutex`\n\nchangelog: Add new lint `rc_mutex`.\n\nIt lints on `Rc<Mutex<T>>`.\n\n`Rc<Mutex<T>>` should be corrected to `Rc<RefCell<T>>`", "tree": {"sha": "9aef4c8191ec3e892219616c37909dbd5f19d6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aef4c8191ec3e892219616c37909dbd5f19d6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84209994ad8039a590332de390b68b52e79c29b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84209994ad8039a590332de390b68b52e79c29b2", "html_url": "https://github.com/rust-lang/rust/commit/84209994ad8039a590332de390b68b52e79c29b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84209994ad8039a590332de390b68b52e79c29b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2abeac17f83a65d7f649537c32c0d335da9ef14b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2abeac17f83a65d7f649537c32c0d335da9ef14b", "html_url": "https://github.com/rust-lang/rust/commit/2abeac17f83a65d7f649537c32c0d335da9ef14b"}, {"sha": "b9cc2feaaa0111385db4ea0b1ff846202d6ab9b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9cc2feaaa0111385db4ea0b1ff846202d6ab9b4", "html_url": "https://github.com/rust-lang/rust/commit/b9cc2feaaa0111385db4ea0b1ff846202d6ab9b4"}], "stats": {"total": 125, "additions": 124, "deletions": 1}, "files": [{"sha": "1dc43f77f836364ad15a59bdcc3e255b98f32965", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84209994ad8039a590332de390b68b52e79c29b2/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/84209994ad8039a590332de390b68b52e79c29b2/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=84209994ad8039a590332de390b68b52e79c29b2", "patch": "@@ -2744,6 +2744,7 @@ Released 2018-09-13\n [`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n [`range_zip_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len\n [`rc_buffer`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer\n+[`rc_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure"}, {"sha": "0a468ccf25a36c63cd604961c78e8f61dc2fac8e", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84209994ad8039a590332de390b68b52e79c29b2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84209994ad8039a590332de390b68b52e79c29b2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=84209994ad8039a590332de390b68b52e79c29b2", "patch": "@@ -944,6 +944,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         types::LINKEDLIST,\n         types::OPTION_OPTION,\n         types::RC_BUFFER,\n+        types::RC_MUTEX,\n         types::REDUNDANT_ALLOCATION,\n         types::TYPE_COMPLEXITY,\n         types::VEC_BOX,\n@@ -1042,6 +1043,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(strings::STRING_TO_STRING),\n         LintId::of(strings::STR_TO_STRING),\n         LintId::of(types::RC_BUFFER),\n+        LintId::of(types::RC_MUTEX),\n         LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n         LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n         LintId::of(verbose_file_reads::VERBOSE_FILE_READS),"}, {"sha": "c26268a875cc06123b05968d2d3ca9e5701647f1", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/84209994ad8039a590332de390b68b52e79c29b2/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84209994ad8039a590332de390b68b52e79c29b2/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=84209994ad8039a590332de390b68b52e79c29b2", "patch": "@@ -3,6 +3,7 @@ mod box_vec;\n mod linked_list;\n mod option_option;\n mod rc_buffer;\n+mod rc_mutex;\n mod redundant_allocation;\n mod type_complexity;\n mod utils;\n@@ -250,12 +251,41 @@ declare_clippy_lint! {\n     \"usage of very complex types that might be better factored into `type` definitions\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `Rc<Mutex<T>>`.\n+    ///\n+    /// **Why is this bad?** `Rc` is used in single thread and `Mutex` is used in multi thread.\n+    /// Consider using `Rc<RefCell<T>>` in single thread or `Arc<Mutex<T>>` in multi thread.\n+    ///\n+    /// **Known problems:** Sometimes combining generic types can lead to the requirement that a\n+    /// type use Rc in conjunction with Mutex. We must consider those cases false positives, but\n+    /// alas they are quite hard to rule out. Luckily they are also rare.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// use std::rc::Rc;\n+    /// use std::sync::Mutex;\n+    /// fn foo(interned: Rc<Mutex<i32>>) { ... }\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust,ignore\n+    /// use std::rc::Rc;\n+    /// use std::cell::RefCell\n+    /// fn foo(interned: Rc<RefCell<i32>>) { ... }\n+    /// ```\n+    pub RC_MUTEX,\n+    restriction,\n+    \"usage of `Rc<Mutex<T>>`\"\n+}\n+\n pub struct Types {\n     vec_box_size_threshold: u64,\n     type_complexity_threshold: u64,\n }\n \n-impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, TYPE_COMPLEXITY]);\n+impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, RC_MUTEX, TYPE_COMPLEXITY]);\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n@@ -375,6 +405,7 @@ impl Types {\n                     triggered |= vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);\n                     triggered |= option_option::check(cx, hir_ty, qpath, def_id);\n                     triggered |= linked_list::check(cx, hir_ty, def_id);\n+                    triggered |= rc_mutex::check(cx, hir_ty, qpath, def_id);\n \n                     if triggered {\n                         return;"}, {"sha": "bd7a0ee6408fa2078868c1d493d8d4192dc9ad30", "filename": "clippy_lints/src/types/rc_mutex.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/84209994ad8039a590332de390b68b52e79c29b2/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84209994ad8039a590332de390b68b52e79c29b2/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs?ref=84209994ad8039a590332de390b68b52e79c29b2", "patch": "@@ -0,0 +1,27 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_ty_param_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_hir::{self as hir, def_id::DefId, QPath};\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+\n+use super::RC_MUTEX;\n+\n+pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n+    if_chain! {\n+        if cx.tcx.is_diagnostic_item(sym::Rc, def_id) ;\n+        if let Some(_) = is_ty_param_diagnostic_item(cx, qpath, sym!(mutex_type)) ;\n+\n+        then{\n+            span_lint(\n+                cx,\n+                RC_MUTEX,\n+                hir_ty.span,\n+                \"found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\",\n+            );\n+            return true;\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "657a3ecf6a006146575f6fe4d8b71c6a979a12f9", "filename": "tests/ui/rc_mutex.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/84209994ad8039a590332de390b68b52e79c29b2/tests%2Fui%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84209994ad8039a590332de390b68b52e79c29b2/tests%2Fui%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.rs?ref=84209994ad8039a590332de390b68b52e79c29b2", "patch": "@@ -0,0 +1,34 @@\n+#![warn(clippy::rc_mutex)]\n+#![allow(clippy::blacklisted_name)]\n+\n+use std::rc::Rc;\n+use std::sync::Mutex;\n+\n+pub struct MyStruct {\n+    foo: Rc<Mutex<i32>>,\n+}\n+\n+pub struct SubT<T> {\n+    foo: T,\n+}\n+\n+pub enum MyEnum {\n+    One,\n+    Two,\n+}\n+\n+pub fn test1<T>(foo: Rc<Mutex<T>>) {}\n+\n+pub fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+\n+pub fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n+\n+fn main() {\n+    test1(Rc::new(Mutex::new(1)));\n+    test2(Rc::new(Mutex::new(MyEnum::One)));\n+    test3(Rc::new(Mutex::new(SubT { foo: 1 })));\n+\n+    let _my_struct = MyStruct {\n+        foo: Rc::new(Mutex::new(1)),\n+    };\n+}"}, {"sha": "8e58e2bc2d0bf1b5a66658cc4471dd1ea3ac8650", "filename": "tests/ui/rc_mutex.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/84209994ad8039a590332de390b68b52e79c29b2/tests%2Fui%2Frc_mutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84209994ad8039a590332de390b68b52e79c29b2/tests%2Fui%2Frc_mutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.stderr?ref=84209994ad8039a590332de390b68b52e79c29b2", "patch": "@@ -0,0 +1,28 @@\n+error: found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n+  --> $DIR/rc_mutex.rs:8:10\n+   |\n+LL |     foo: Rc<Mutex<i32>>,\n+   |          ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::rc-mutex` implied by `-D warnings`\n+\n+error: found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n+  --> $DIR/rc_mutex.rs:20:22\n+   |\n+LL | pub fn test1<T>(foo: Rc<Mutex<T>>) {}\n+   |                      ^^^^^^^^^^^^\n+\n+error: found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n+  --> $DIR/rc_mutex.rs:22:19\n+   |\n+LL | pub fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+   |                   ^^^^^^^^^^^^^^^^^\n+\n+error: found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n+  --> $DIR/rc_mutex.rs:24:19\n+   |\n+LL | pub fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}