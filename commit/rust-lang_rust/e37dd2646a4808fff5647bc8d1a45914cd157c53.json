{"sha": "e37dd2646a4808fff5647bc8d1a45914cd157c53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzN2RkMjY0NmE0ODA4ZmZmNTY0N2JjOGQxYTQ1OTE0Y2QxNTdjNTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-26T06:11:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-26T18:12:20Z"}, "message": "Clone all data before before putting it in a test closure\n\nPutting shared boxes into a closure then running that closure in parallel\ntasks seems like a recipe for refcounting disaster.\n\nThis doesn't completely fix the problems when running in parallel, but I'm\nworking on it.", "tree": {"sha": "50db2dd293e22ec83ce8d02fe5ecfa755e24e579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50db2dd293e22ec83ce8d02fe5ecfa755e24e579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e37dd2646a4808fff5647bc8d1a45914cd157c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e37dd2646a4808fff5647bc8d1a45914cd157c53", "html_url": "https://github.com/rust-lang/rust/commit/e37dd2646a4808fff5647bc8d1a45914cd157c53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e37dd2646a4808fff5647bc8d1a45914cd157c53/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f110c206097e9483cbe68be50eca80ac63abcbbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f110c206097e9483cbe68be50eca80ac63abcbbd", "html_url": "https://github.com/rust-lang/rust/commit/f110c206097e9483cbe68be50eca80ac63abcbbd"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "b424b4bf605bb2b3d1b70038b9c33939b5a7d9aa", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e37dd2646a4808fff5647bc8d1a45914cd157c53/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37dd2646a4808fff5647bc8d1a45914cd157c53/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=e37dd2646a4808fff5647bc8d1a45914cd157c53", "patch": "@@ -207,9 +207,39 @@ iter iter_header(&str testfile) -> str {\n }\n \n fn make_test_fn(&cx cx, &str testfile) -> test::test_fn {\n-    auto testcx = rec(config = cx.config,\n-                      procsrv = procsrv::clone(cx.procsrv));\n-    bind run_test(testcx, testfile)\n+    // We're doing some ferociously unsafe nonsense here by creating a closure\n+    // and letting the test runner spawn it into a task. To avoid having\n+    // different tasks fighting over their refcounts and then the wrong task\n+    // freeing a box we need to clone everything, and make sure our closure\n+    // outlives all the tasks.\n+    fn clonestr(&str s) -> str {\n+        str::unsafe_from_bytes(str::bytes(s))\n+    }\n+\n+    fn cloneoptstr(&option::t[str] s) -> option::t[str] {\n+        alt s {\n+          option::some(?s) { option::some(clonestr(s)) }\n+          option::none { option::none }\n+        }\n+    }\n+\n+    auto configclone = rec(\n+        compile_lib_path = clonestr(cx.config.compile_lib_path),\n+        run_lib_path = clonestr(cx.config.run_lib_path),\n+        rustc_path = clonestr(cx.config.rustc_path),\n+        src_base = clonestr(cx.config.src_base),\n+        build_base = clonestr(cx.config.build_base),\n+        stage_id = clonestr(cx.config.stage_id),\n+        mode = cx.config.mode,\n+        run_ignored = cx.config.run_ignored,\n+        filter = cloneoptstr(cx.config.filter),\n+        runtool = cloneoptstr(cx.config.runtool),\n+        rustcflags = cloneoptstr(cx.config.rustcflags),\n+        verbose = cx.config.verbose);\n+    auto cxclone = rec(config = configclone,\n+                       procsrv = procsrv::clone(cx.procsrv));\n+    auto testfileclone = clonestr(testfile);\n+    ret bind run_test(cxclone, testfileclone);\n }\n \n fn run_test(cx cx, str testfile) {"}]}