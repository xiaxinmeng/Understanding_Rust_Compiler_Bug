{"sha": "4488f9bc0fa8661b7109d7ce94a275846222c816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ODhmOWJjMGZhODY2MWI3MTA5ZDdjZTk0YTI3NTg0NjIyMmM4MTY=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-06-23T17:39:27Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-06-23T17:39:27Z"}, "message": "rustdoc: Fix a few issues with associated consts\n\n* Make sure private consts are stripped.\n* Don't show a code block for the value if there is none.\n* Make sure default values are shown in impls.\n* Make sure docs from the trait are used if the impl has no docs.", "tree": {"sha": "89b6f859b7a7e4d42fe93cc30e35cfca99850317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89b6f859b7a7e4d42fe93cc30e35cfca99850317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4488f9bc0fa8661b7109d7ce94a275846222c816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4488f9bc0fa8661b7109d7ce94a275846222c816", "html_url": "https://github.com/rust-lang/rust/commit/4488f9bc0fa8661b7109d7ce94a275846222c816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4488f9bc0fa8661b7109d7ce94a275846222c816/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229d0d3266002d343cdd2f4a3bf7f2fe9da15f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/229d0d3266002d343cdd2f4a3bf7f2fe9da15f38", "html_url": "https://github.com/rust-lang/rust/commit/229d0d3266002d343cdd2f4a3bf7f2fe9da15f38"}], "stats": {"total": 151, "additions": 108, "deletions": 43}, "files": [{"sha": "db1bb28c890962299e5148c59993d2a5e2b9b542", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 26, "deletions": 40, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4488f9bc0fa8661b7109d7ce94a275846222c816/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4488f9bc0fa8661b7109d7ce94a275846222c816/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4488f9bc0fa8661b7109d7ce94a275846222c816", "patch": "@@ -1628,55 +1628,47 @@ fn plain_summary_line(s: Option<&str>) -> String {\n \n fn document(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item) -> fmt::Result {\n     document_stability(w, cx, item)?;\n-    document_full(w, item, cx.render_type)?;\n+    let prefix = render_assoc_const_value(item);\n+    document_full(w, item, cx.render_type, &prefix)?;\n     Ok(())\n }\n \n fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLink,\n-                  render_type: RenderType) -> fmt::Result {\n+                  render_type: RenderType, prefix: &str) -> fmt::Result {\n     if let Some(s) = item.doc_value() {\n         let markdown = if s.contains('\\n') {\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n             format!(\"{}\", &plain_summary_line(Some(s)))\n         };\n-        write!(w, \"<div class='docblock'>{}</div>\",\n-               Markdown(&markdown, render_type))?;\n+        write!(w, \"<div class='docblock'>{}{}</div>\", prefix, Markdown(&markdown, render_type))?;\n+    } else if !prefix.is_empty() {\n+        write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n     Ok(())\n }\n \n-fn md_render_assoc_item(item: &clean::Item) -> String {\n+fn render_assoc_const_value(item: &clean::Item) -> String {\n     match item.inner {\n-        clean::AssociatedConstItem(ref ty, ref default) => {\n-            if let Some(default) = default.as_ref() {\n-                format!(\"```\\n{}: {:#} = {}\\n```\\n\\n\", item.name.as_ref().unwrap(), ty, default)\n-            } else {\n-                format!(\"```\\n{}: {:#}\\n```\\n\\n\", item.name.as_ref().unwrap(), ty)\n-            }\n+        clean::AssociatedConstItem(ref ty, Some(ref default)) => {\n+            highlight::render_with_highlighting(\n+                &format!(\"{}: {:#} = {}\", item.name.as_ref().unwrap(), ty, default),\n+                None,\n+                None,\n+                None,\n+            )\n         }\n         _ => String::new(),\n     }\n }\n \n-fn get_doc_value(item: &clean::Item) -> Option<&str> {\n-    let x = item.doc_value();\n-    if x.is_none() {\n-        match item.inner {\n-            clean::AssociatedConstItem(_, _) => Some(\"\"),\n-            _ => None,\n-        }\n-    } else {\n-        x\n-    }\n-}\n-\n fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n-                 render_type: RenderType) -> fmt::Result {\n-    if let Some(s) = get_doc_value(item) {\n-        write!(w, \"<div class='docblock'>{}</div>\",\n-               Markdown(&format!(\"{}{}\", md_render_assoc_item(item), s), render_type))?;\n+                 render_type: RenderType, prefix: &str) -> fmt::Result {\n+    if let Some(s) = item.doc_value() {\n+        write!(w, \"<div class='docblock'>{}{}</div>\", prefix, Markdown(s, render_type))?;\n+    } else if !prefix.is_empty() {\n+        write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n     Ok(())\n }\n@@ -2960,14 +2952,6 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                 assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n                 write!(w, \"</code></span></h4>\\n\")?;\n             }\n-            clean::ConstantItem(ref c) => {\n-                let id = derive_id(format!(\"{}.{}\", item_type, name));\n-                let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n-                write!(w, \"<h4 id='{}' class=\\\"{}\\\">\", id, item_type)?;\n-                write!(w, \"<span id='{}' class='invisible'><code>\", ns_id)?;\n-                assoc_const(w, item, &c.type_, Some(&c.expr), link.anchor(&id))?;\n-                write!(w, \"</code></span></h4>\\n\")?;\n-            }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n                 let id = derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n@@ -2981,6 +2965,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         }\n \n         if render_method_item || render_mode == RenderMode::Normal {\n+            let prefix = render_assoc_const_value(item);\n             if !is_default_item {\n                 if let Some(t) = trait_ {\n                     // The trait item may have been stripped so we might not\n@@ -2989,20 +2974,21 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n                         // We need the stability of the item from the trait\n                         // because impls can't have a stability.\n                         document_stability(w, cx, it)?;\n-                        if get_doc_value(item).is_some() {\n-                            document_full(w, item, cx.render_type)?;\n+                        if item.doc_value().is_some() {\n+                            document_full(w, item, cx.render_type, &prefix)?;\n                         } else {\n                             // In case the item isn't documented,\n                             // provide short documentation from the trait.\n-                            document_short(w, it, link, cx.render_type)?;\n+                            document_short(w, it, link, cx.render_type, &prefix)?;\n                         }\n                     }\n                 } else {\n-                    document(w, cx, item)?;\n+                    document_stability(w, cx, item)?;\n+                    document_full(w, item, cx.render_type, &prefix)?;\n                 }\n             } else {\n                 document_stability(w, cx, item)?;\n-                document_short(w, item, link, cx.render_type)?;\n+                document_short(w, item, link, cx.render_type, &prefix)?;\n             }\n         }\n         Ok(())"}, {"sha": "41fd9efe61e0139bd5b7a0cd33115d983d24ea34", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4488f9bc0fa8661b7109d7ce94a275846222c816/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4488f9bc0fa8661b7109d7ce94a275846222c816/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=4488f9bc0fa8661b7109d7ce94a275846222c816", "patch": "@@ -83,7 +83,8 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             clean::TraitItem(..) | clean::FunctionItem(..) |\n             clean::VariantItem(..) | clean::MethodItem(..) |\n             clean::ForeignFunctionItem(..) | clean::ForeignStaticItem(..) |\n-            clean::ConstantItem(..) | clean::UnionItem(..) => {\n+            clean::ConstantItem(..) | clean::UnionItem(..) |\n+            clean::AssociatedConstItem(..) => {\n                 if i.def_id.is_local() {\n                     if !self.access_levels.is_exported(i.def_id) {\n                         return None;\n@@ -117,8 +118,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             // Primitives are never stripped\n             clean::PrimitiveItem(..) => {}\n \n-            // Associated consts and types are never stripped\n-            clean::AssociatedConstItem(..) |\n+            // Associated types are never stripped\n             clean::AssociatedTypeItem(..) => {}\n         }\n "}, {"sha": "8720d419a4de69712bab4935c87469773fc637d2", "filename": "src/test/rustdoc/assoc-consts.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4488f9bc0fa8661b7109d7ce94a275846222c816/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4488f9bc0fa8661b7109d7ce94a275846222c816/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts.rs?ref=4488f9bc0fa8661b7109d7ce94a275846222c816", "patch": "@@ -16,10 +16,28 @@ pub trait Foo {\n     // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n     // @has - '//*[@class=\"docblock\"]' 'FOO: usize = 12'\n     const FOO: usize = 12;\n+    // @has - '//*[@id=\"associatedconstant.FOO_NO_DEFAULT\"]' 'const FOO_NO_DEFAULT: bool'\n+    const FOO_NO_DEFAULT: bool;\n+    // @!has - FOO_HIDDEN\n+    #[doc(hidden)]\n+    const FOO_HIDDEN: u8 = 0;\n }\n \n pub struct Bar;\n \n+impl Foo for Bar {\n+    // @has assoc_consts/struct.Bar.html '//code' 'impl Foo for Bar'\n+    // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n+    // @has - '//*[@class=\"docblock\"]' 'FOO: usize = 12'\n+    const FOO: usize = 12;\n+    // @has - '//*[@id=\"associatedconstant.FOO_NO_DEFAULT\"]' 'const FOO_NO_DEFAULT: bool'\n+    // @has - '//*[@class=\"docblock\"]' 'FOO_NO_DEFAULT: bool = false'\n+    const FOO_NO_DEFAULT: bool = false;\n+    // @!has - FOO_HIDDEN\n+    #[doc(hidden)]\n+    const FOO_HIDDEN: u8 = 0;\n+}\n+\n impl Bar {\n     // @has assoc_consts/struct.Bar.html '//*[@id=\"associatedconstant.BAR\"]' \\\n     //      'const BAR: usize'\n@@ -44,3 +62,64 @@ impl Bar {\n     // @has - '//*[@class=\"docblock\"]' \"F: fn(_: &(ToString + 'static)) = f\"\n     pub const F: fn(_: &(ToString + 'static)) = f;\n }\n+\n+impl Bar {\n+    // @!has assoc_consts/struct.Bar.html 'BAR_PRIVATE'\n+    const BAR_PRIVATE: char = 'a';\n+    // @!has assoc_consts/struct.Bar.html 'BAR_HIDDEN'\n+    #[doc(hidden)]\n+    pub const BAR_HIDDEN: &'static str = \"a\";\n+}\n+\n+// @has assoc_consts/trait.Qux.html\n+pub trait Qux {\n+    // @has - '//*[@id=\"associatedconstant.QUX0\"]' 'const QUX0: u8'\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX0 in trait.\"\n+    /// Docs for QUX0 in trait.\n+    const QUX0: u8;\n+    // @has - '//*[@id=\"associatedconstant.QUX1\"]' 'const QUX1: i8'\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX1 in trait.\"\n+    /// Docs for QUX1 in trait.\n+    const QUX1: i8;\n+    // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT0\"]' 'const QUX_DEFAULT0: u16'\n+    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT0: u16 = 1\"\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT0 in trait.\"\n+    /// Docs for QUX_DEFAULT0 in trait.\n+    const QUX_DEFAULT0: u16 = 1;\n+    // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT1\"]' 'const QUX_DEFAULT1: i16'\n+    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT1: i16 = 2\"\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT1 in trait.\"\n+    /// Docs for QUX_DEFAULT1 in trait.\n+    const QUX_DEFAULT1: i16 = 2;\n+    // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT2\"]' 'const QUX_DEFAULT2: u32'\n+    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT2: u32 = 3\"\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT2 in trait.\"\n+    /// Docs for QUX_DEFAULT2 in trait.\n+    const QUX_DEFAULT2: u32 = 3;\n+}\n+\n+// @has assoc_consts/struct.Bar.html '//code' 'impl Qux for Bar'\n+impl Qux for Bar {\n+    // @has - '//*[@id=\"associatedconstant.QUX0\"]' 'const QUX0: u8'\n+    // @has - '//*[@class=\"docblock\"]' \"QUX0: u8 = 4\"\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX0 in trait.\"\n+    /// Docs for QUX0 in trait.\n+    const QUX0: u8 = 4;\n+    // @has - '//*[@id=\"associatedconstant.QUX1\"]' 'const QUX1: i8'\n+    // @has - '//*[@class=\"docblock\"]' \"QUX1: i8 = 5\"\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX1 in impl.\"\n+    /// Docs for QUX1 in impl.\n+    const QUX1: i8 = 5;\n+    // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT0\"]' 'const QUX_DEFAULT0: u16'\n+    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT0: u16 = 6\"\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT0 in trait.\"\n+    const QUX_DEFAULT0: u16 = 6;\n+    // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT1\"]' 'const QUX_DEFAULT1: i16'\n+    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT1: i16 = 7\"\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT1 in impl.\"\n+    /// Docs for QUX_DEFAULT1 in impl.\n+    const QUX_DEFAULT1: i16 = 7;\n+    // @has - '//*[@id=\"associatedconstant.QUX_DEFAULT2\"]' 'const QUX_DEFAULT2: u32'\n+    // @has - '//*[@class=\"docblock\"]' \"QUX_DEFAULT2: u32 = 3\"\n+    // @has - '//*[@class=\"docblock\"]' \"Docs for QUX_DEFAULT2 in trait.\"\n+}"}]}