{"sha": "0e866af1f720ed487fb08bd40b69d7a4e168519c", "node_id": "C_kwDOAAsO6NoAKDBlODY2YWYxZjcyMGVkNDg3ZmIwOGJkNDBiNjlkN2E0ZTE2ODUxOWM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-13T17:43:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-19T08:58:01Z"}, "message": "Only clear locals that are known to be written to.", "tree": {"sha": "70b92da290eee9fa5f8bf211b042f0511298de70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b92da290eee9fa5f8bf211b042f0511298de70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e866af1f720ed487fb08bd40b69d7a4e168519c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e866af1f720ed487fb08bd40b69d7a4e168519c", "html_url": "https://github.com/rust-lang/rust/commit/0e866af1f720ed487fb08bd40b69d7a4e168519c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e866af1f720ed487fb08bd40b69d7a4e168519c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f177b7cb91acd9debd1ed974e6521edb2ab6b097", "url": "https://api.github.com/repos/rust-lang/rust/commits/f177b7cb91acd9debd1ed974e6521edb2ab6b097", "html_url": "https://github.com/rust-lang/rust/commit/f177b7cb91acd9debd1ed974e6521edb2ab6b097"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "b73ba198afe78f904b81da3e98facc9f368f3629", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0e866af1f720ed487fb08bd40b69d7a4e168519c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e866af1f720ed487fb08bd40b69d7a4e168519c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=0e866af1f720ed487fb08bd40b69d7a4e168519c", "patch": "@@ -4,6 +4,7 @@\n use either::Right;\n \n use rustc_const_eval::const_eval::CheckAlignment;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n@@ -151,12 +152,17 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n pub struct ConstPropMachine<'mir, 'tcx> {\n     /// The virtual call stack.\n     stack: Vec<Frame<'mir, 'tcx>>,\n+    pub written_only_inside_own_block_locals: FxHashSet<Local>,\n     pub can_const_prop: IndexVec<Local, ConstPropMode>,\n }\n \n impl ConstPropMachine<'_, '_> {\n     pub fn new(can_const_prop: IndexVec<Local, ConstPropMode>) -> Self {\n-        Self { stack: Vec::new(), can_const_prop }\n+        Self {\n+            stack: Vec::new(),\n+            written_only_inside_own_block_locals: Default::default(),\n+            can_const_prop,\n+        }\n     }\n }\n \n@@ -249,7 +255,10 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n                     \"tried to write to a local that is marked as not propagatable\"\n                 )\n             }\n-            ConstPropMode::OnlyInsideOwnBlock | ConstPropMode::FullConstProp => {}\n+            ConstPropMode::OnlyInsideOwnBlock => {\n+                ecx.machine.written_only_inside_own_block_locals.insert(local);\n+            }\n+            ConstPropMode::FullConstProp => {}\n         }\n         ecx.machine.stack[frame].locals[local].access_mut()\n     }\n@@ -416,6 +425,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn remove_const(ecx: &mut InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>, local: Local) {\n         ecx.frame_mut().locals[local].value =\n             LocalValue::Live(interpret::Operand::Immediate(interpret::Immediate::Uninit));\n+        ecx.machine.written_only_inside_own_block_locals.remove(&local);\n     }\n \n     /// Returns the value, if any, of evaluating `c`.\n@@ -693,7 +703,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn ensure_not_propagated(&mut self, local: Local) {\n+    fn ensure_not_propagated(&self, local: Local) {\n         if cfg!(debug_assertions) {\n             assert!(\n                 self.get_const(local.into()).is_none()\n@@ -963,17 +973,30 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n         // We remove all Locals which are restricted in propagation to their containing blocks and\n         // which were modified in the current block.\n         // Take it out of the ecx so we can get a mutable reference to the ecx for `remove_const`.\n-        let can_const_prop = std::mem::take(&mut self.ecx.machine.can_const_prop);\n-        for (local, &mode) in can_const_prop.iter_enumerated() {\n+        let mut written_only_inside_own_block_locals =\n+            std::mem::take(&mut self.ecx.machine.written_only_inside_own_block_locals);\n+\n+        // This loop can get very hot for some bodies: it check each local in each bb.\n+        // To avoid this quadratic behaviour, we only clear the locals that were modified inside\n+        // the current block.\n+        for local in written_only_inside_own_block_locals.drain() {\n+            debug_assert_eq!(\n+                self.ecx.machine.can_const_prop[local],\n+                ConstPropMode::OnlyInsideOwnBlock\n+            );\n+            Self::remove_const(&mut self.ecx, local);\n+        }\n+        self.ecx.machine.written_only_inside_own_block_locals =\n+            written_only_inside_own_block_locals;\n+\n+        #[cfg(debug_assertions)]\n+        for (local, &mode) in self.ecx.machine.can_const_prop.iter_enumerated() {\n             match mode {\n                 ConstPropMode::FullConstProp => {}\n-                ConstPropMode::NoPropagation => self.ensure_not_propagated(local),\n-                ConstPropMode::OnlyInsideOwnBlock => {\n-                    Self::remove_const(&mut self.ecx, local);\n+                ConstPropMode::NoPropagation | ConstPropMode::OnlyInsideOwnBlock => {\n                     self.ensure_not_propagated(local);\n                 }\n             }\n         }\n-        self.ecx.machine.can_const_prop = can_const_prop;\n     }\n }"}, {"sha": "aeefadf94085432c407a318ead9e32bbef1c633c", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e866af1f720ed487fb08bd40b69d7a4e168519c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e866af1f720ed487fb08bd40b69d7a4e168519c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=0e866af1f720ed487fb08bd40b69d7a4e168519c", "patch": "@@ -247,6 +247,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn remove_const(ecx: &mut InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>, local: Local) {\n         ecx.frame_mut().locals[local].value =\n             LocalValue::Live(interpret::Operand::Immediate(interpret::Immediate::Uninit));\n+        ecx.machine.written_only_inside_own_block_locals.remove(&local);\n     }\n \n     fn lint_root(&self, source_info: SourceInfo) -> Option<HirId> {\n@@ -484,7 +485,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         Some(())\n     }\n \n-    fn ensure_not_propagated(&mut self, local: Local) {\n+    fn ensure_not_propagated(&self, local: Local) {\n         if cfg!(debug_assertions) {\n             assert!(\n                 self.get_const(local.into()).is_none()\n@@ -691,17 +692,30 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n         // We remove all Locals which are restricted in propagation to their containing blocks and\n         // which were modified in the current block.\n         // Take it out of the ecx so we can get a mutable reference to the ecx for `remove_const`.\n-        let can_const_prop = std::mem::take(&mut self.ecx.machine.can_const_prop);\n-        for (local, &mode) in can_const_prop.iter_enumerated() {\n+        let mut written_only_inside_own_block_locals =\n+            std::mem::take(&mut self.ecx.machine.written_only_inside_own_block_locals);\n+\n+        // This loop can get very hot for some bodies: it check each local in each bb.\n+        // To avoid this quadratic behaviour, we only clear the locals that were modified inside\n+        // the current block.\n+        for local in written_only_inside_own_block_locals.drain() {\n+            debug_assert_eq!(\n+                self.ecx.machine.can_const_prop[local],\n+                ConstPropMode::OnlyInsideOwnBlock\n+            );\n+            Self::remove_const(&mut self.ecx, local);\n+        }\n+        self.ecx.machine.written_only_inside_own_block_locals =\n+            written_only_inside_own_block_locals;\n+\n+        #[cfg(debug_assertions)]\n+        for (local, &mode) in self.ecx.machine.can_const_prop.iter_enumerated() {\n             match mode {\n                 ConstPropMode::FullConstProp => {}\n-                ConstPropMode::NoPropagation => self.ensure_not_propagated(local),\n-                ConstPropMode::OnlyInsideOwnBlock => {\n-                    Self::remove_const(&mut self.ecx, local);\n+                ConstPropMode::NoPropagation | ConstPropMode::OnlyInsideOwnBlock => {\n                     self.ensure_not_propagated(local);\n                 }\n             }\n         }\n-        self.ecx.machine.can_const_prop = can_const_prop;\n     }\n }"}]}