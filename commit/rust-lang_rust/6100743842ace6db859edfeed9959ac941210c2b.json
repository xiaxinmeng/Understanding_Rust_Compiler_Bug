{"sha": "6100743842ace6db859edfeed9959ac941210c2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMDA3NDM4NDJhY2U2ZGI4NTllZGZlZWQ5OTU5YWM5NDEyMTBjMmI=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2016-01-19T07:40:07Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2016-01-19T07:42:55Z"}, "message": "Improve error message for non-exhaustive patterns\n\nChanges error message from displaying first found missing constructor witness to showing up to 10, if necessary.\n\nFixes issue #16884.", "tree": {"sha": "a6707f7329ab3a2d0d166cdf587ee13dd788a77b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6707f7329ab3a2d0d166cdf587ee13dd788a77b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6100743842ace6db859edfeed9959ac941210c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6100743842ace6db859edfeed9959ac941210c2b", "html_url": "https://github.com/rust-lang/rust/commit/6100743842ace6db859edfeed9959ac941210c2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6100743842ace6db859edfeed9959ac941210c2b/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "html_url": "https://github.com/rust-lang/rust/commit/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "2d882b4c97d88d2334b2cd7983e65ffa02bd0119", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6100743842ace6db859edfeed9959ac941210c2b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6100743842ace6db859edfeed9959ac941210c2b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=6100743842ace6db859edfeed9959ac941210c2b", "patch": "@@ -368,31 +368,34 @@ fn raw_pat<'a>(p: &'a Pat) -> &'a Pat {\n fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, matrix: &Matrix, source: hir::MatchSource) {\n     match is_useful(cx, matrix, &[DUMMY_WILD_PAT], ConstructWitness) {\n         UsefulWithWitness(pats) => {\n-            let witness = match &pats[..] {\n-                [ref witness] => &**witness,\n-                [] => DUMMY_WILD_PAT,\n-                _ => unreachable!()\n+            let witnesses = match &pats[..] {\n+                [] => vec![DUMMY_WILD_PAT],\n+                [p..] => {\n+                    p.iter().map(|w| &**w ).collect()\n+                }\n             };\n             match source {\n                 hir::MatchSource::ForLoopDesugar => {\n-                    // `witness` has the form `Some(<head>)`, peel off the `Some`\n-                    let witness = match witness.node {\n+                    // `witnesses[0]` has the form `Some(<head>)`, peel off the `Some`\n+                    let witness = match witnesses[0].node {\n                         hir::PatEnum(_, Some(ref pats)) => match &pats[..] {\n                             [ref pat] => &**pat,\n                             _ => unreachable!(),\n                         },\n                         _ => unreachable!(),\n                     };\n-\n                     span_err!(cx.tcx.sess, sp, E0297,\n                         \"refutable pattern in `for` loop binding: \\\n                                 `{}` not covered\",\n                                 pat_to_string(witness));\n                 },\n                 _ => {\n+                    let pattern_strings: Vec<_> = witnesses.iter().map(|w| {\n+                        pat_to_string(w)\n+                    }).take(10).collect();\n                     span_err!(cx.tcx.sess, sp, E0004,\n                         \"non-exhaustive patterns: `{}` not covered\",\n-                        pat_to_string(witness)\n+                        pattern_strings.join(\"`, `\")\n                     );\n                 },\n             }\n@@ -594,14 +597,14 @@ impl<'tcx, 'container> ty::AdtDefData<'tcx, 'container> {\n     }\n }\n \n-fn missing_constructor(cx: &MatchCheckCtxt, &Matrix(ref rows): &Matrix,\n-                       left_ty: Ty, max_slice_length: usize) -> Option<Constructor> {\n+fn missing_constructors(cx: &MatchCheckCtxt, &Matrix(ref rows): &Matrix,\n+                       left_ty: Ty, max_slice_length: usize) -> Vec<Constructor> {\n     let used_constructors: Vec<Constructor> = rows.iter()\n         .flat_map(|row| pat_constructors(cx, row[0], left_ty, max_slice_length))\n         .collect();\n     all_constructors(cx, left_ty, max_slice_length)\n         .into_iter()\n-        .find(|c| !used_constructors.contains(c))\n+        .filter(|c| !used_constructors.contains(c)).collect()\n }\n \n /// This determines the set of all possible constructors of a pattern matching\n@@ -680,8 +683,8 @@ fn is_useful(cx: &MatchCheckCtxt,\n \n     let constructors = pat_constructors(cx, v[0], left_ty, max_slice_length);\n     if constructors.is_empty() {\n-        match missing_constructor(cx, matrix, left_ty, max_slice_length) {\n-            None => {\n+        match &missing_constructors(cx, matrix, left_ty, max_slice_length)[..] {\n+            [] => {\n                 all_constructors(cx, left_ty, max_slice_length).into_iter().map(|c| {\n                     match is_useful_specialized(cx, matrix, v, c.clone(), left_ty, witness) {\n                         UsefulWithWitness(pats) => UsefulWithWitness({\n@@ -701,7 +704,7 @@ fn is_useful(cx: &MatchCheckCtxt,\n                 }).find(|result| result != &NotUseful).unwrap_or(NotUseful)\n             },\n \n-            Some(constructor) => {\n+            [constructors..] => {\n                 let matrix = rows.iter().filter_map(|r| {\n                     if pat_is_binding_or_wild(&cx.tcx.def_map.borrow(), raw_pat(r[0])) {\n                         Some(r[1..].to_vec())\n@@ -711,10 +714,11 @@ fn is_useful(cx: &MatchCheckCtxt,\n                 }).collect();\n                 match is_useful(cx, &matrix, &v[1..], witness) {\n                     UsefulWithWitness(pats) => {\n-                        let arity = constructor_arity(cx, &constructor, left_ty);\n-                        let wild_pats = vec![DUMMY_WILD_PAT; arity];\n-                        let enum_pat = construct_witness(cx, &constructor, wild_pats, left_ty);\n-                        let mut new_pats = vec![enum_pat];\n+                        let mut new_pats: Vec<_> = constructors.into_iter().map(|constructor| {\n+                            let arity = constructor_arity(cx, &constructor, left_ty);\n+                            let wild_pats = vec![DUMMY_WILD_PAT; arity];\n+                            construct_witness(cx, &constructor, wild_pats, left_ty)\n+                        }).collect();\n                         new_pats.extend(pats);\n                         UsefulWithWitness(new_pats)\n                     },"}, {"sha": "62e61e8bf59f7ee67c1b0849407b045aab92ec48", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6100743842ace6db859edfeed9959ac941210c2b/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6100743842ace6db859edfeed9959ac941210c2b/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=6100743842ace6db859edfeed9959ac941210c2b", "patch": "@@ -34,7 +34,7 @@ fn struct_with_a_nested_enum_and_vector() {\n \n fn enum_with_multiple_missing_variants() {\n     match Color::Red {\n-    //~^ ERROR non-exhaustive patterns: `Red` not covered\n+    //~^ ERROR non-exhaustive patterns: `Red`, `Green` not covered\n         Color::CustomRGBA { .. } => ()\n     }\n }"}]}