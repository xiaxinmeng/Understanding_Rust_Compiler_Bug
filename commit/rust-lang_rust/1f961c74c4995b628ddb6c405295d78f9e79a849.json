{"sha": "1f961c74c4995b628ddb6c405295d78f9e79a849", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTYxYzc0YzQ5OTViNjI4ZGRiNmM0MDUyOTVkNzhmOWU3OWE4NDk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-15T04:11:50Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-15T04:32:07Z"}, "message": "fix range_step{,_inclusive} with negative step", "tree": {"sha": "43e570fe97651bfb3a5ea8978e3463c6c0d0fb70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43e570fe97651bfb3a5ea8978e3463c6c0d0fb70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f961c74c4995b628ddb6c405295d78f9e79a849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f961c74c4995b628ddb6c405295d78f9e79a849", "html_url": "https://github.com/rust-lang/rust/commit/1f961c74c4995b628ddb6c405295d78f9e79a849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f961c74c4995b628ddb6c405295d78f9e79a849/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2231dce929a2c525df7cb10e5ab3258804a3a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2231dce929a2c525df7cb10e5ab3258804a3a36", "html_url": "https://github.com/rust-lang/rust/commit/a2231dce929a2c525df7cb10e5ab3258804a3a36"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "0b608e58c0e67452ec3ec75a1911f2e41d6916bb", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f961c74c4995b628ddb6c405295d78f9e79a849/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f961c74c4995b628ddb6c405295d78f9e79a849/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=1f961c74c4995b628ddb6c405295d78f9e79a849", "patch": "@@ -1857,7 +1857,7 @@ pub fn range_step<A: CheckedAdd + Ord + Clone + Zero>(start: A, stop: A, step: A\n impl<A: CheckedAdd + Ord + Clone> Iterator<A> for RangeStep<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        if (self.rev && self.state > self.stop) || self.state < self.stop {\n+        if (self.rev && self.state > self.stop) || (!self.rev && self.state < self.stop) {\n             let result = self.state.clone();\n             match self.state.checked_add(&self.step) {\n                 Some(x) => self.state = x,\n@@ -1891,22 +1891,14 @@ pub fn range_step_inclusive<A: CheckedAdd + Ord + Clone + Zero>(start: A, stop:\n impl<A: CheckedAdd + Ord + Clone + Eq> Iterator<A> for RangeStepInclusive<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        if !self.done {\n-            if (self.rev && self.state > self.stop) || self.state < self.stop {\n-                let result = self.state.clone();\n-                match self.state.checked_add(&self.step) {\n-                    Some(x) => self.state = x,\n-                    None => self.done = true\n-                }\n-                Some(result)\n-            } else {\n-                if self.state == self.stop {\n-                    self.done = true;\n-                    Some(self.state.clone())\n-                } else {\n-                    None\n-                }\n+        if !self.done && ((self.rev && self.state >= self.stop) ||\n+                          (!self.rev && self.state <= self.stop)) {\n+            let result = self.state.clone();\n+            match self.state.checked_add(&self.step) {\n+                Some(x) => self.state = x,\n+                None => self.done = true\n             }\n+            Some(result)\n         } else {\n             None\n         }\n@@ -2726,13 +2718,15 @@ mod tests {\n     fn test_range_step() {\n         assert_eq!(range_step(0i, 20, 5).collect::<~[int]>(), ~[0, 5, 10, 15]);\n         assert_eq!(range_step(20i, 0, -5).collect::<~[int]>(), ~[20, 15, 10, 5]);\n+        assert_eq!(range_step(20i, 0, -6).collect::<~[int]>(), ~[20, 14, 8, 2]);\n         assert_eq!(range_step(200u8, 255, 50).collect::<~[u8]>(), ~[200u8, 250]);\n     }\n \n     #[test]\n     fn test_range_step_inclusive() {\n         assert_eq!(range_step_inclusive(0i, 20, 5).collect::<~[int]>(), ~[0, 5, 10, 15, 20]);\n         assert_eq!(range_step_inclusive(20i, 0, -5).collect::<~[int]>(), ~[20, 15, 10, 5, 0]);\n+        assert_eq!(range_step_inclusive(20i, 0, -6).collect::<~[int]>(), ~[20, 14, 8, 2]);\n         assert_eq!(range_step_inclusive(200u8, 255, 50).collect::<~[u8]>(), ~[200u8, 250]);\n     }\n "}]}