{"sha": "2b89b437fb38a4388d8f868f13d1200a22157e8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiODliNDM3ZmIzOGE0Mzg4ZDhmODY4ZjEzZDEyMDBhMjIxNTdlOGE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-09T00:28:36Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-11T22:51:09Z"}, "message": "Normalize self types for monomorphization.", "tree": {"sha": "04b4c5ac16c231436f56ed19b55bbaa45df98afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b4c5ac16c231436f56ed19b55bbaa45df98afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b89b437fb38a4388d8f868f13d1200a22157e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b89b437fb38a4388d8f868f13d1200a22157e8a", "html_url": "https://github.com/rust-lang/rust/commit/2b89b437fb38a4388d8f868f13d1200a22157e8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b89b437fb38a4388d8f868f13d1200a22157e8a/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310", "html_url": "https://github.com/rust-lang/rust/commit/82ae2fa93abbdf2b7437e9a8df4b4a18df0bf310"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "948d3481fa00e86fcf3fb64d6bdfd3b85c1b74f4", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b89b437fb38a4388d8f868f13d1200a22157e8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b89b437fb38a4388d8f868f13d1200a22157e8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=2b89b437fb38a4388d8f868f13d1200a22157e8a", "patch": "@@ -250,7 +250,7 @@ pub fn trans_fn_ref_with_vtables(\n         def_id: ast::def_id,   // def id of fn\n         ref_id: ast::node_id,  // node id of use of fn; may be zero if N/A\n         type_params: &[ty::t], // values for fn's ty params\n-        vtables: Option<typeck::vtable_res>)\n+        vtables: Option<typeck::vtable_res>) // vtables for the call\n      -> FnData {\n     //!\n     //"}, {"sha": "ebc4bfa5cd521d8545d6467bd30755bf9ecc19c0", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2b89b437fb38a4388d8f868f13d1200a22157e8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b89b437fb38a4388d8f868f13d1200a22157e8a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=2b89b437fb38a4388d8f868f13d1200a22157e8a", "patch": "@@ -63,24 +63,26 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n     assert!(real_substs.tps.iter().all(|t| !ty::type_needs_infer(*t)));\n     let _icx = push_ctxt(\"monomorphic_fn\");\n     let mut must_cast = false;\n-    let substs = real_substs.tps.iter().transform(|t| {\n+\n+    let do_normalize = |t: &ty::t| {\n         match normalize_for_monomorphization(ccx.tcx, *t) {\n           Some(t) => { must_cast = true; t }\n           None => *t\n         }\n-    }).collect::<~[ty::t]>();\n-\n-    for real_substs.tps.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n-    for substs.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n-    let param_uses = type_use::type_uses_for(ccx, fn_id, substs.len());\n+    };\n \n     let psubsts = @param_substs {\n-        tys: substs,\n+        tys: real_substs.tps.map(|x| do_normalize(x)),\n         vtables: vtables,\n-        self_ty: real_substs.self_ty,\n+        self_ty: real_substs.self_ty.map(|x| do_normalize(x)),\n         self_vtable: self_vtable\n     };\n \n+    for real_substs.tps.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n+    for psubsts.tys.iter().advance |s| { assert!(!ty::type_has_params(*s)); }\n+    let param_uses = type_use::type_uses_for(ccx, fn_id, psubsts.tys.len());\n+\n+\n     let hash_id = make_mono_id(ccx, fn_id, impl_did_opt,\n                                &*psubsts,\n                                Some(param_uses));"}]}