{"sha": "46673bb08ffa22f21287349d966d875038e41b37", "node_id": "C_kwDOAAsO6NoAKDQ2NjczYmIwOGZmYTIyZjIxMjg3MzQ5ZDk2NmQ4NzUwMzhlNDFiMzc", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-07-17T10:11:05Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-07-17T10:16:49Z"}, "message": "Simplify Windows `hashmap_random_keys`", "tree": {"sha": "0fba4ac3e3ac3407863fe89d6070b679d4ec282b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fba4ac3e3ac3407863fe89d6070b679d4ec282b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46673bb08ffa22f21287349d966d875038e41b37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmLT4ZIACgkQcTRy8vRW\nJ96tMA//baE/GmjyhTGC0qAA73kt8u5weAKU2/TTbas2zw3ID9t02jRg/NKNoHPW\nicYgDYZ8lU3AWHKdXfNANOlOvFR/mYikgyFxk+pfEH5esOBlz975G5WekN+nHIci\nebfKZwdqG3SPWipwrdVDBHLz068Xdc2n7Y4aPZos/k0f8R8Zwk/2iNQ749kbVhtG\nMKft/Hw+0jYHGf4Bh7wNuUnU6EtGPNEXgZJlnI+SxhpfsQ/P/r1EFu3XbKtNHpQR\nYW7ubwImGwxkJRVkxNNaUZgEM3paUWW4lYbzbxHLbtg0RNuLEbUOL/uWKt5yT6oJ\nBJKXRWXLoXWOJNo1jRQO9vs8bH/NHjvifYETfH7xPQaaAOonezWYMOcjpfv097La\nJ0kDgzxEn/4g/MUyAayJn1Ew5z7kVo68+syDWsGERy8SWCvgCoMhNrf9B39Ak4nG\nTC84HtYkFC9jCBqBBBCU6KMogzXFrpY7qS/bxECUiVHPzliR2+uzQqE0hMqZ4Spu\n9j8qjdnUZdn4lwAdJkXCpZzWzk+yANTESo0X158/ApusCp7NqFNpIOP/W3Uyq3JV\nRbuKdCHj/3rwto9R5zInkyNJoymjTH+H1rgnHhv9jGrJLXDINlJWU97xnb9xsbHf\neqySj7OTuksCumRwD+ZcxQTG4QancdjVoN7/KRAQBJlF5pntQcQ=\n=hP+b\n-----END PGP SIGNATURE-----", "payload": "tree 0fba4ac3e3ac3407863fe89d6070b679d4ec282b\nparent 1cd72b734318720adb99dc72147bb8169ef76ffe\nauthor Chris Denton <christophersdenton@gmail.com> 1658052665 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1658053009 +0100\n\nSimplify Windows `hashmap_random_keys`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46673bb08ffa22f21287349d966d875038e41b37", "html_url": "https://github.com/rust-lang/rust/commit/46673bb08ffa22f21287349d966d875038e41b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46673bb08ffa22f21287349d966d875038e41b37/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd72b734318720adb99dc72147bb8169ef76ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd72b734318720adb99dc72147bb8169ef76ffe", "html_url": "https://github.com/rust-lang/rust/commit/1cd72b734318720adb99dc72147bb8169ef76ffe"}], "stats": {"total": 68, "additions": 8, "deletions": 60}, "files": [{"sha": "f8fd93a7398e1b75c35d255e30e24447461b9cc4", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 8, "deletions": 60, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/46673bb08ffa22f21287349d966d875038e41b37/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46673bb08ffa22f21287349d966d875038e41b37/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=46673bb08ffa22f21287349d966d875038e41b37", "patch": "@@ -1,62 +1,9 @@\n use crate::io;\n use crate::mem;\n-use crate::sync;\n+use crate::ptr;\n use crate::sys::c;\n \n-/// The kinds of HashMap RNG that may be available\n-#[derive(Clone, Copy, Debug, PartialEq)]\n-enum HashMapRng {\n-    Preferred,\n-    Fallback,\n-}\n-\n pub fn hashmap_random_keys() -> (u64, u64) {\n-    match get_hashmap_rng() {\n-        HashMapRng::Preferred => {\n-            preferred_rng().expect(\"couldn't generate random bytes with preferred RNG\")\n-        }\n-        HashMapRng::Fallback => {\n-            fallback_rng().expect(\"couldn't generate random bytes with fallback RNG\")\n-        }\n-    }\n-}\n-\n-/// Returns the HashMap RNG that should be used\n-///\n-/// Panics if they are both broken\n-fn get_hashmap_rng() -> HashMapRng {\n-    // Assume that if the preferred RNG is broken the first time we use it, it likely means\n-    // that: the DLL has failed to load, there is no point to calling it over-and-over again,\n-    // and we should cache the result\n-    static VALUE: sync::OnceLock<HashMapRng> = sync::OnceLock::new();\n-    *VALUE.get_or_init(choose_hashmap_rng)\n-}\n-\n-/// Test whether we should use the preferred or fallback RNG\n-///\n-/// If the preferred RNG is successful, we choose it. Otherwise, if the fallback RNG is successful,\n-/// we choose that\n-///\n-/// Panics if both the preferred and the fallback RNG are both non-functional\n-fn choose_hashmap_rng() -> HashMapRng {\n-    let preferred_error = match preferred_rng() {\n-        Ok(_) => return HashMapRng::Preferred,\n-        Err(e) => e,\n-    };\n-\n-    match fallback_rng() {\n-        Ok(_) => return HashMapRng::Fallback,\n-        Err(fallback_error) => panic!(\n-            \"preferred RNG broken: `{}`, fallback RNG broken: `{}`\",\n-            preferred_error, fallback_error\n-        ),\n-    }\n-}\n-\n-/// Generate random numbers using the preferred RNG function (BCryptGenRandom)\n-fn preferred_rng() -> Result<(u64, u64), io::Error> {\n-    use crate::ptr;\n-\n     let mut v = (0, 0);\n     let ret = unsafe {\n         c::BCryptGenRandom(\n@@ -66,22 +13,23 @@ fn preferred_rng() -> Result<(u64, u64), io::Error> {\n             c::BCRYPT_USE_SYSTEM_PREFERRED_RNG,\n         )\n     };\n-\n-    if ret == 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n+    if ret != 0 { fallback_rng() } else { v }\n }\n \n /// Generate random numbers using the fallback RNG function (RtlGenRandom)\n #[cfg(not(target_vendor = \"uwp\"))]\n-fn fallback_rng() -> Result<(u64, u64), io::Error> {\n+#[inline(never)]\n+fn fallback_rng() -> (u64, u64) {\n     let mut v = (0, 0);\n     let ret =\n         unsafe { c::RtlGenRandom(&mut v as *mut _ as *mut u8, mem::size_of_val(&v) as c::ULONG) };\n \n-    if ret != 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n+    if ret != 0 { v } else { panic!(\"fallback RNG broken: {}\", io::Error::last_os_error()) }\n }\n \n /// We can't use RtlGenRandom with UWP, so there is no fallback\n #[cfg(target_vendor = \"uwp\")]\n-fn fallback_rng() -> Result<(u64, u64), io::Error> {\n-    Err(io::const_io_error!(io::ErrorKind::Unsupported, \"RtlGenRandom() not supported on UWP\"))\n+#[inline(never)]\n+fn fallback_rng() -> (u64, u64) {\n+    panic!(\"fallback RNG broken: RtlGenRandom() not supported on UWP\");\n }"}]}