{"sha": "6b42ad5ea0b3c885393ee104770b4be743807fbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNDJhZDVlYTBiM2M4ODUzOTNlZTEwNDc3MGI0YmU3NDM4MDdmYmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-27T04:57:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-27T05:00:15Z"}, "message": "Enforce copy restrictions on let initializers", "tree": {"sha": "755afdd4733947671fa44b085634776989bd24ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/755afdd4733947671fa44b085634776989bd24ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b42ad5ea0b3c885393ee104770b4be743807fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b42ad5ea0b3c885393ee104770b4be743807fbb", "html_url": "https://github.com/rust-lang/rust/commit/6b42ad5ea0b3c885393ee104770b4be743807fbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b42ad5ea0b3c885393ee104770b4be743807fbb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e13fe4473aca574fc50345ca20989f86218dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e13fe4473aca574fc50345ca20989f86218dc6", "html_url": "https://github.com/rust-lang/rust/commit/07e13fe4473aca574fc50345ca20989f86218dc6"}], "stats": {"total": 85, "additions": 67, "deletions": 18}, "files": [{"sha": "3880d4c36015d3fd4e15ce9eca35bd63f79cfa78", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -212,9 +212,29 @@ fn check_expr(tcx: ty::ctxt, e: @ast::expr) {\n     }\n }\n \n+fn check_stmt(tcx: ty::ctxt, stmt: @ast::stmt) {\n+    alt stmt.node {\n+      ast::stmt_decl(@{node: ast::decl_local(locals), _}, _) {\n+        for (let_style, local) in locals {\n+            alt local.node.init {\n+              option::some({op: ast::init_assign., expr}) {\n+                need_expr_kind(tcx, expr,\n+                               ast::kind_shared,\n+                               \"local initializer\");\n+                check_copy(tcx, expr);\n+              }\n+              _ { /* fall through */ }\n+            }\n+        }\n+      }\n+      _ { /* fall through */ }\n+    }\n+}\n+\n fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n     let visit =\n-        visit::mk_simple_visitor(@{visit_expr: bind check_expr(tcx, _)\n+        visit::mk_simple_visitor(@{visit_expr: bind check_expr(tcx, _),\n+                                   visit_stmt: bind check_stmt(tcx, _)\n                                       with *visit::default_simple_visitor()});\n     visit::visit_crate(*crate, (), visit);\n     tcx.sess.abort_if_errors();"}, {"sha": "7a95ea49aafd95696750fc9566c839d41d877d1b", "filename": "src/lib/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -114,7 +114,7 @@ fn spawn_inner(-thunk: fn(), notify: option<comm::chan<task_notification>>) ->\n     let raw_thunk: {code: u32, env: u32} = cast(thunk);\n \n     // set up the task pointer\n-    let task_ptr = rust_task_ptr(rustrt::get_task_pointer(id));\n+    let task_ptr <- rust_task_ptr(rustrt::get_task_pointer(id));\n \n     assert (ptr::null() != (**task_ptr).stack_ptr);\n "}, {"sha": "a20aa639c1592809eab46769fd677edd679917a4", "filename": "src/test/compile-fail/resource-let.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Fcompile-fail%2Fresource-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Fcompile-fail%2Fresource-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresource-let.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -0,0 +1,12 @@\n+// error-pattern: mismatched kind\n+\n+resource r(b: bool) {\n+}\n+\n+fn main() {\n+    // Kind analysis considers this a copy, which isn't strictly true,\n+    // but for many assignment initializers could be.  To actually\n+    // assign a resource to a local we can still use a move\n+    // initializer.\n+    let i = r(true);\n+}\n\\ No newline at end of file"}, {"sha": "695d50182b580d0ebb4214b5c79ee8ac5d069276", "filename": "src/test/compile-fail/resource-let2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Fcompile-fail%2Fresource-let2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Fcompile-fail%2Fresource-let2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresource-let2.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -0,0 +1,9 @@\n+// error-pattern: mismatched kind\n+\n+resource r(b: bool) {\n+}\n+\n+fn main() {\n+    let i <- r(true);\n+    let j = i;\n+}\n\\ No newline at end of file"}, {"sha": "71de1196238e2fd04edfc23fbf7de6180c0acbb4", "filename": "src/test/compile-fail/unique-pinned-nocopy-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy-2.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern: mismatched kind\n+\n+resource r(b: bool) {\n+}\n+\n+fn main() {\n+    let i = ~r(true);\n+}\n\\ No newline at end of file"}, {"sha": "584795a7d866ee701453818eb81c3e3f25d32e0a", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn(T, T) -> bool;\n \n-fn test_generic<T>(expected: T, eq: compare<T>) {\n+fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "f604df830a3c624b05e7d39af0377ffbb6ea5806", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -3,7 +3,7 @@\n // -*- rust -*-\n type compare<T> = fn(~T, ~T) -> bool;\n \n-fn test_generic<T>(expected: ~T, eq: compare<T>) {\n+fn test_generic<@T>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "d26f4470ad4f16b171e06f00a42d05acfec957d0", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn(T, T) -> bool;\n \n-fn test_generic<T>(expected: T, eq: compare<T>) {\n+fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "8df90fa595b74eca086e5dbf0155ee7df390df21", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn(T, T) -> bool;\n \n-fn test_generic<T>(expected: T, eq: compare<T>) {\n+fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = alt true { true { expected } };\n     assert (eq(expected, actual));\n }"}, {"sha": "f427afea0689ea1eab124a6229c154f328984ae8", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn(T, T) -> bool;\n \n-fn test_generic<T>(expected: T, eq: compare<T>) {\n+fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "0c49dac3c33b9398a86c523a108ba4fbeca82281", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -3,7 +3,7 @@\n // -*- rust -*-\n type compare<T> = fn(~T, ~T) -> bool;\n \n-fn test_generic<T>(expected: ~T, eq: compare<T>) {\n+fn test_generic<@T>(expected: ~T, eq: compare<T>) {\n     let actual: ~T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "535b1431685cb8108a4ce28a3e8dc4e19c8fe35f", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn(T, T) -> bool;\n \n-fn test_generic<T>(expected: T, eq: compare<T>) {\n+fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "5324fe1e38d054aaffc6ddd866ba41a00f1c1b67", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -6,7 +6,7 @@\n // Tests for standalone blocks as expressions with dynamic type sizes\n type compare<T> = fn(T, T) -> bool;\n \n-fn test_generic<T>(expected: T, eq: compare<T>) {\n+fn test_generic<@T>(expected: T, eq: compare<T>) {\n     let actual: T = { expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "4db6abc517933b81ef49635c4ca7d984872f8c17", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n type compare<T> = fn(T, T) -> bool;\n \n-fn test_generic<T>(expected: T, not_expected: T, eq: compare<T>) {\n+fn test_generic<@T>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "f8c9710e36d7ad8c0cf8dc28014fa13d7b248249", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -6,7 +6,7 @@\n // Tests for if as expressions with dynamic type sizes\n type compare<T> = fn(T, T) -> bool;\n \n-fn test_generic<T>(expected: T, not_expected: T, eq: compare<T>) {\n+fn test_generic<@T>(expected: T, not_expected: T, eq: compare<T>) {\n     let actual: T = if true { expected } else { not_expected };\n     assert (eq(expected, actual));\n }"}, {"sha": "f866e2077abd2e81a2812f3e60bac8ee104dbe66", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn f<T>(t: T) { let t1: T = t; }\n+fn f<@T>(t: T) { let t1: T = t; }\n \n fn main() { let x = {x: @10, y: @12}; f(x); }"}, {"sha": "b69376610f9f2d9dc414874a6d9d6c6d0cf6cc76", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -5,7 +5,7 @@ iter range(lo: uint, hi: uint) -> uint {\n     while lo_ < hi { put lo_; lo_ += 1u; }\n }\n \n-fn create_index<T>(index: [{a: T, b: uint}], hash_fn: fn(T) -> uint) {\n+fn create_index<@T>(index: [{a: T, b: uint}], hash_fn: fn(T) -> uint) {\n     for each i: uint in range(0u, 256u) { let bucket: [T] = []; }\n }\n "}, {"sha": "23f0c13f8956fe751b2f3eba701331f1e124242d", "filename": "src/test/run-pass/unique-swap2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Funique-swap2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b42ad5ea0b3c885393ee104770b4be743807fbb/src%2Ftest%2Frun-pass%2Funique-swap2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-swap2.rs?ref=6b42ad5ea0b3c885393ee104770b4be743807fbb", "patch": "@@ -7,8 +7,8 @@ fn test1() {\n     let i = @mutable 100;\n     let j = @mutable 200;\n     {\n-        let x = ~r(i);\n-        let y = ~r(j);\n+        let x <- ~r(i);\n+        let y <- ~r(j);\n         x <-> y;\n         assert ***x == 200;\n         assert ***y == 100;\n@@ -20,8 +20,8 @@ fn test1() {\n fn test2() {\n     let i = @mutable 0;\n     {\n-        let x = ~r(i);\n-        let y = ~r(i);\n+        let x <- ~r(i);\n+        let y <- ~r(i);\n         x <-> y;\n     }\n     assert *i == 2;"}]}