{"sha": "7274447c36949bb63bef0a78bc23f8842d8c7320", "node_id": "C_kwDOAAsO6NoAKDcyNzQ0NDdjMzY5NDliYjYzYmVmMGE3OGJjMjNmODg0MmQ4YzczMjA", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-10T15:09:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-10T15:09:34Z"}, "message": "Rollup merge of #96861 - m-ou-se:std-use-prelude-2021, r=joshtriplett\n\nUse Rust 2021 prelude in std itself.", "tree": {"sha": "2d732628fffb16a2f099da57a2f53c7bb78c5263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d732628fffb16a2f099da57a2f53c7bb78c5263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7274447c36949bb63bef0a78bc23f8842d8c7320", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJieoAuCRBK7hj4Ov3rIwAAhBgIAKHau7CZLuJX6DlOikZTfHN1\nat2T1nrHE9gHkQ7X0VwPYNzFqms8LSxX+UBQSQz7/jYWGosi9XogboGvcEFpvPLD\nSoiqua5ohIL/GPiZQfVU1n3Uv3l/iMaeMeWfxM/cq6Dovnysziq4hAmZfMLmCB9m\nXfb+gKzj8bVxFjNYlLa5oo/wSmdKell49oDbOtQzf3oxoVNcqCgDWOlHpicIbCNy\nEHz8c5HiOmBZx+kMZgs1NzX3MlvfqvSsC4+92muCouO2BkMgtXgLTUsbcCfYeAC1\nhY6bG3iuZl6bg8RevTgB2t/7lG5h3Rr8JzAcQnQbBbh9rAxgOExAGzvlMNGi8vc=\n=WkxF\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d732628fffb16a2f099da57a2f53c7bb78c5263\nparent ac977275282cc8e9fc580e565cb6c005e60a7164\nparent 4f212f08cf0edb1fe990c8ca30fef09c27606682\nauthor Yuki Okushi <jtitor@2k36.org> 1652195374 +0900\ncommitter GitHub <noreply@github.com> 1652195374 +0900\n\nRollup merge of #96861 - m-ou-se:std-use-prelude-2021, r=joshtriplett\n\nUse Rust 2021 prelude in std itself.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7274447c36949bb63bef0a78bc23f8842d8c7320", "html_url": "https://github.com/rust-lang/rust/commit/7274447c36949bb63bef0a78bc23f8842d8c7320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7274447c36949bb63bef0a78bc23f8842d8c7320/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac977275282cc8e9fc580e565cb6c005e60a7164", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac977275282cc8e9fc580e565cb6c005e60a7164", "html_url": "https://github.com/rust-lang/rust/commit/ac977275282cc8e9fc580e565cb6c005e60a7164"}, {"sha": "4f212f08cf0edb1fe990c8ca30fef09c27606682", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f212f08cf0edb1fe990c8ca30fef09c27606682", "html_url": "https://github.com/rust-lang/rust/commit/4f212f08cf0edb1fe990c8ca30fef09c27606682"}], "stats": {"total": 50, "additions": 7, "deletions": 43}, "files": [{"sha": "977714281fbbea8169a30c44dc26f0ffe2b94547", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -12,7 +12,7 @@ use crate::collections::TryReserveErrorKind;\n use crate::fmt::{self, Debug};\n #[allow(deprecated)]\n use crate::hash::{BuildHasher, Hash, Hasher, SipHasher13};\n-use crate::iter::{FromIterator, FusedIterator};\n+use crate::iter::FusedIterator;\n use crate::ops::Index;\n use crate::sys;\n "}, {"sha": "13bba0a6fd8922c613f32f73ba90c2a4795f0277", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -7,7 +7,7 @@ use crate::borrow::Borrow;\n use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{BuildHasher, Hash};\n-use crate::iter::{Chain, FromIterator, FusedIterator};\n+use crate::iter::{Chain, FusedIterator};\n use crate::ops::{BitAnd, BitOr, BitXor, Sub};\n \n use super::map::{map_try_reserve_error, RandomState};"}, {"sha": "ae13275e4b35d7869478db492b25b1efc60720c8", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -6,7 +6,7 @@ use crate::cmp;\n use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::iter::{Extend, FromIterator};\n+use crate::iter::Extend;\n use crate::ops;\n use crate::rc::Rc;\n use crate::str::FromStr;"}, {"sha": "0ce6ae00ee250e5054b2072a51bdc4416981a126", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -7,8 +7,6 @@ use crate::alloc::Allocator;\n use crate::cmp;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut, ReadBuf, SeekFrom};\n \n-use core::convert::TryInto;\n-\n /// A `Cursor` wraps an in-memory buffer and provides it with a\n /// [`Seek`] implementation.\n ///"}, {"sha": "94812e3fe3b2c483b15019c6695d8e2704fa2921", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -252,7 +252,6 @@\n mod tests;\n \n use crate::cmp;\n-use crate::convert::TryInto;\n use crate::fmt;\n use crate::mem::replace;\n use crate::ops::{Deref, DerefMut};"}, {"sha": "6dc3fd9858451910ce5ee74a98970374a325e591", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -343,7 +343,7 @@\n // to import the prelude implicitly when building crates that depend on std.\n #[prelude_import]\n #[allow(unused)]\n-use prelude::v1::*;\n+use prelude::rust_2021::*;\n \n // Access to Bencher, etc.\n #[cfg(test)]"}, {"sha": "81dd042425c1d0dfd52addbf74379f6865ecf2af", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -2,7 +2,6 @@\n mod tests;\n \n use crate::cmp::Ordering;\n-use crate::convert::TryInto;\n use crate::fmt;\n use crate::hash;\n use crate::io::{self, Write};"}, {"sha": "069b66099855956d6d6d41b236baefd05ebfe52d", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -6,7 +6,6 @@\n #[cfg(test)]\n mod tests;\n \n-use crate::convert::TryInto as _;\n use crate::error::Error;\n use crate::fmt;\n use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, SocketAddr, SocketAddrV4, SocketAddrV6};"}, {"sha": "9e31b8b32a19738744e65362c4241e27df6de127", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,5 +1,4 @@\n use super::{sockaddr_un, SocketAddr};\n-use crate::convert::TryFrom;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::marker::PhantomData;\n use crate::mem::{size_of, zeroed};"}, {"sha": "c1f11c56b8f65a1a01f78e9857907d45302209c3", "filename": "library/std/src/os/unix/net/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -10,7 +10,6 @@ use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n ))]\n-use crate::iter::FromIterator;\n #[cfg(any(\n     target_os = \"android\",\n     target_os = \"dragonfly\","}, {"sha": "41758f2ced111caf2ec5f79be494d93cab70cba6", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -3,7 +3,6 @@\n #![unstable(feature = \"io_safety\", issue = \"87074\")]\n \n use super::raw::{AsRawHandle, FromRawHandle, IntoRawHandle, RawHandle};\n-use crate::convert::TryFrom;\n use crate::fmt;\n use crate::fs;\n use crate::io;"}, {"sha": "74547617150b0b48bd22294456d8fbe43766072e", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};\n use crate::net::{IpAddr, Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};"}, {"sha": "c17e6c8af62763c6f13ac388f0a32ee48a8e16c6", "filename": "library/std/src/sys/hermit/time.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ftime.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,7 +1,6 @@\n #![allow(dead_code)]\n \n use crate::cmp::Ordering;\n-use crate::convert::TryInto;\n use crate::sys::hermit::abi;\n use crate::sys::hermit::abi::timespec;\n use crate::sys::hermit::abi::{CLOCK_MONOTONIC, CLOCK_REALTIME, NSEC_PER_SEC};"}, {"sha": "44d409444bca48ec90efdbc059e8ce1bc0f4e8a9", "filename": "library/std/src/sys/itron/spin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fspin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fspin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fspin.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,7 +1,6 @@\n use super::abi;\n use crate::{\n     cell::UnsafeCell,\n-    convert::TryFrom,\n     mem::MaybeUninit,\n     sync::atomic::{AtomicBool, AtomicUsize, Ordering},\n };"}, {"sha": "d28f57f33be20566de33bd7a79389a85067105a6", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -8,7 +8,6 @@ use super::{\n };\n use crate::{\n     cell::UnsafeCell,\n-    convert::TryFrom,\n     ffi::CStr,\n     hint, io,\n     mem::ManuallyDrop,"}, {"sha": "427ea0d80e10739aff897e15a162feb833a60d9a", "filename": "library/std/src/sys/itron/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Ftime.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,5 +1,5 @@\n use super::{abi, error::expect_success};\n-use crate::{convert::TryInto, mem::MaybeUninit, time::Duration};\n+use crate::{mem::MaybeUninit, time::Duration};\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n pub struct Instant(abi::SYSTIM);"}, {"sha": "2f99abba77667a46de92aef2fc10455b1f54ea7f", "filename": "library/std/src/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,5 +1,4 @@\n use crate::cmp;\n-use crate::convert::TryFrom;\n use crate::io::{Error as IoError, ErrorKind, IoSlice, IoSliceMut, Result as IoResult};\n use crate::sys::rand::rdrand64;\n use crate::time::{Duration, Instant};"}, {"sha": "1d899525081b97a1c4ea6e05c3d50f8ed8016161", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::TryFrom;\n use crate::error;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};"}, {"sha": "ce31cb45a69a1aef67290687d9b818e26654cf9d", "filename": "library/std/src/sys/solid/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ftime.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,5 +1,5 @@\n use super::{abi, error::expect_success};\n-use crate::{convert::TryInto, mem::MaybeUninit, time::Duration};\n+use crate::{mem::MaybeUninit, time::Duration};\n \n pub use super::itron::time::Instant;\n "}, {"sha": "5d0fb07900326fd218856b7b2fd923653cdc5d3d", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -943,7 +943,6 @@ impl File {\n     }\n \n     pub fn truncate(&self, size: u64) -> io::Result<()> {\n-        use crate::convert::TryInto;\n         let size: off64_t =\n             size.try_into().map_err(|e| io::Error::new(io::ErrorKind::InvalidInput, e))?;\n         cvt_r(|| unsafe { ftruncate64(self.as_raw_fd(), size) }).map(drop)"}, {"sha": "8d5ad18997d07859a03e5d1778f878458cf72f52", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -136,7 +136,6 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n \n #[cfg(target_os = \"openbsd\")]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n-    use crate::convert::TryInto;\n     use crate::ptr::{null, null_mut};\n     let timespec = timeout.and_then(|d| {\n         Some(libc::timespec {\n@@ -185,8 +184,6 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n \n #[cfg(target_os = \"dragonfly\")]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n-    use crate::convert::TryFrom;\n-\n     // A timeout of 0 means infinite.\n     // We round smaller timeouts up to 1 millisecond.\n     // Overflows are rounded up to an infinite timeout."}, {"sha": "8f7abb55e237644ef0b03d90c6b58cc09ec20dbd", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -45,7 +45,6 @@\n //! * complexity\n \n use crate::cmp::min;\n-use crate::convert::TryInto;\n use crate::fs::{File, Metadata};\n use crate::io::copy::generic_copy;\n use crate::io::{"}, {"sha": "9967588939ac9f675338ab67474bf02f9c92de82", "filename": "library/std/src/sys/unix/l4re.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -9,7 +9,6 @@ macro_rules! unimpl {\n \n pub mod net {\n     #![allow(warnings)]\n-    use crate::convert::TryFrom;\n     use crate::fmt;\n     use crate::io::{self, IoSlice, IoSliceMut};\n     use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};"}, {"sha": "73f5d3a618badc12e557e77f9f0af05624b31bed", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io;\n use crate::mem;"}, {"sha": "23bb6d6c15f637fe1a36f61b5f5400d8125cefc9", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n use crate::mem;"}, {"sha": "5db57ee9e9e18691e346fa7081cf31d9dc4992da", "filename": "library/std/src/sys/unix/process/process_unsupported.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unsupported.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io;\n use crate::io::ErrorKind;"}, {"sha": "200ef6719679845ca7ed9076ebc7a23bc46ccbea", "filename": "library/std/src/sys/unix/process/process_vxworks.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_vxworks.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::{TryFrom, TryInto};\n use crate::fmt;\n use crate::io::{self, Error, ErrorKind};\n use crate::num::NonZeroI32;"}, {"sha": "2e596486f9c8690e1a132bcf07289e5bef02d85c", "filename": "library/std/src/sys/unix/process/zircon.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,6 +1,5 @@\n #![allow(non_camel_case_types, unused)]\n \n-use crate::convert::TryInto;\n use crate::io;\n use crate::mem::MaybeUninit;\n use crate::os::raw::c_char;"}, {"sha": "333182bdad4de809d7313d430f8ebc4209952a95", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -2,7 +2,6 @@ use crate::fmt;\n use crate::time::Duration;\n \n pub use self::inner::Instant;\n-use crate::convert::TryInto;\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;\n pub const UNIX_EPOCH: SystemTime = SystemTime { t: Timespec::zero() };\n@@ -127,7 +126,6 @@ impl Timespec {\n     }\n \n     pub fn to_timespec(&self) -> Option<libc::timespec> {\n-        use crate::convert::TryInto;\n         Some(libc::timespec {\n             tv_sec: self.tv_sec.try_into().ok()?,\n             tv_nsec: self.tv_nsec.try_into().ok()?,"}, {"sha": "360115d5033747c298c23d1d8a9c48d3bc1eaefc", "filename": "library/std/src/sys/unsupported/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};"}, {"sha": "937b1b850e7ba7201a61161c3d42ff41efa127d6", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -2,7 +2,6 @@\n \n use super::err2io;\n use super::fd::WasiFd;\n-use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};"}, {"sha": "f4fbe9f48554b0e19fb2db3db3ceb2adf5b09c6d", "filename": "library/std/src/sys/wasm/atomics/futex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fatomics%2Ffutex.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,5 +1,4 @@\n use crate::arch::wasm32;\n-use crate::convert::TryInto;\n use crate::sync::atomic::AtomicU32;\n use crate::time::Duration;\n "}, {"sha": "157d8a044d3cd815ff2cda9c7fc69c01314c52bb", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,6 +1,5 @@\n use crate::os::windows::prelude::*;\n \n-use crate::convert::TryInto;\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::io::{self, Error, IoSlice, IoSliceMut, ReadBuf, SeekFrom};"}, {"sha": "8e5325b80e4a50564b86bb70eda44b08028611cf", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -5,7 +5,6 @@ mod tests;\n \n use crate::cmp;\n use crate::collections::BTreeMap;\n-use crate::convert::{TryFrom, TryInto};\n use crate::env;\n use crate::env::consts::{EXE_EXTENSION, EXE_SUFFIX};\n use crate::ffi::{OsStr, OsString};"}, {"sha": "c5c9e97e646fb94fa6960c1da38ba09f1265f04b", "filename": "library/std/src/sys/windows/thread.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,4 +1,3 @@\n-use crate::convert::TryInto;\n use crate::ffi::CStr;\n use crate::io;\n use crate::num::NonZeroUsize;"}, {"sha": "d876e0f6f3c03b5bf8a590d78c4461b1429585de", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -57,7 +57,6 @@\n // [3]: https://docs.microsoft.com/en-us/archive/msdn-magazine/2012/november/windows-with-c-the-evolution-of-synchronization-in-windows-and-c\n // [4]: Windows Internals, Part 1, ISBN 9780735671300\n \n-use crate::convert::TryFrom;\n use crate::pin::Pin;\n use crate::ptr;\n use crate::sync::atomic::{"}, {"sha": "8f46781c7534092a6f11d8d4205eebff812b2fcc", "filename": "library/std/src/sys/windows/time.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ftime.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -1,5 +1,4 @@\n use crate::cmp::Ordering;\n-use crate::convert::TryInto;\n use crate::fmt;\n use crate::mem;\n use crate::sys::c;"}, {"sha": "05425f4a3622ce04167f4df5dca684774bfd17ce", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -2,7 +2,6 @@\n mod tests;\n \n use crate::cmp;\n-use crate::convert::{TryFrom, TryInto};\n use crate::ffi::CString;\n use crate::fmt;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut};"}, {"sha": "57fa4989358a4f5d880aa142a6dcfdf907693610", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7274447c36949bb63bef0a78bc23f8842d8c7320/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=7274447c36949bb63bef0a78bc23f8842d8c7320", "patch": "@@ -25,7 +25,7 @@ use crate::char;\n use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::iter::{FromIterator, FusedIterator};\n+use crate::iter::FusedIterator;\n use crate::mem;\n use crate::ops;\n use crate::rc::Rc;"}]}