{"sha": "ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNTJjZjFlY2Q0ZjY1ZmYyYThjMzk1M2MzNWIwMDZlNzNhNjBlYTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:26:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-15T15:26:29Z"}, "message": "remove Cancelable from Module API", "tree": {"sha": "0cb202b9c3a670dee6667d7f636b01a71ae554c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cb202b9c3a670dee6667d7f636b01a71ae554c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "html_url": "https://github.com/rust-lang/rust/commit/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91feed736f91a3790b2f5a5d0d879c06843bce95", "url": "https://api.github.com/repos/rust-lang/rust/commits/91feed736f91a3790b2f5a5d0d879c06843bce95", "html_url": "https://github.com/rust-lang/rust/commit/91feed736f91a3790b2f5a5d0d879c06843bce95"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "aed0ea9582409fa785cfb27a3c40fe91228698fe", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "patch": "@@ -78,12 +78,12 @@ pub enum Problem {\n \n impl Module {\n     /// Name of this module.\n-    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n+    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n         self.name_impl(db)\n     }\n \n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(&self, db: &impl HirDatabase) -> Cancelable<(FileId, ModuleSource)> {\n+    pub fn definition_source(&self, db: &impl HirDatabase) -> (FileId, ModuleSource) {\n         self.definition_source_impl(db)\n     }\n \n@@ -92,7 +92,7 @@ impl Module {\n     pub fn declaration_source(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<Option<(FileId, TreeArc<ast::Module>)>> {\n+    ) -> Option<(FileId, TreeArc<ast::Module>)> {\n         self.declaration_source_impl(db)\n     }\n "}, {"sha": "127dcc5702c51ac52aaf0239ef69c5b211a00e6a", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "patch": "@@ -30,17 +30,14 @@ impl Module {\n         Module::new(def_id)\n     }\n \n-    pub(crate) fn name_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n+    pub(crate) fn name_impl(&self, db: &impl HirDatabase) -> Option<Name> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n-        let link = ctry!(loc.module_id.parent_link(&module_tree));\n-        Ok(Some(link.name(&module_tree).clone()))\n+        let link = loc.module_id.parent_link(&module_tree)?;\n+        Some(link.name(&module_tree).clone())\n     }\n \n-    pub fn definition_source_impl(\n-        &self,\n-        db: &impl HirDatabase,\n-    ) -> Cancelable<(FileId, ModuleSource)> {\n+    pub fn definition_source_impl(&self, db: &impl HirDatabase) -> (FileId, ModuleSource) {\n         let loc = self.def_id.loc(db);\n         let file_id = loc.source_item_id.file_id.as_original_file();\n         let syntax_node = db.file_item(loc.source_item_id);\n@@ -50,23 +47,23 @@ impl Module {\n             let module = ast::Module::cast(&syntax_node).unwrap();\n             ModuleSource::Module(module.to_owned())\n         };\n-        Ok((file_id, module_source))\n+        (file_id, module_source)\n     }\n \n     pub fn declaration_source_impl(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<Option<(FileId, TreeArc<ast::Module>)>> {\n+    ) -> Option<(FileId, TreeArc<ast::Module>)> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n-        let link = ctry!(loc.module_id.parent_link(&module_tree));\n+        let link = loc.module_id.parent_link(&module_tree)?;\n         let file_id = link\n             .owner(&module_tree)\n             .source(&module_tree)\n             .file_id\n             .as_original_file();\n         let src = link.source(&module_tree, db);\n-        Ok(Some((file_id, src)))\n+        Some((file_id, src))\n     }\n \n     pub(crate) fn krate_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {"}, {"sha": "ce9087b49b706c80ad2bba970d25430c3d960a18", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "patch": "@@ -167,7 +167,7 @@ impl ModuleImplBlocks {\n     }\n \n     fn collect(&mut self, db: &impl HirDatabase, module: Module) -> Cancelable<()> {\n-        let (file_id, module_source) = module.definition_source(db)?;\n+        let (file_id, module_source) = module.definition_source(db);\n         let node = match &module_source {\n             ModuleSource::SourceFile(node) => node.syntax(),\n             ModuleSource::Module(node) => node"}, {"sha": "f422bb9a70536c470235bc43324e8bbe51dd89b2", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "patch": "@@ -20,7 +20,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) ->\n     }\n \n     let module_scope = module.scope(ctx.db)?;\n-    let (file_id, _) = module.definition_source(ctx.db)?;\n+    let (file_id, _) = module.definition_source(ctx.db);\n     module_scope\n         .entries()\n         .filter(|(_name, res)| {"}, {"sha": "7562b9a1f420debc4833d38a9fd9d14b694ff716", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "patch": "@@ -73,9 +73,9 @@ impl NavigationTarget {\n         db: &RootDatabase,\n         module: hir::Module,\n     ) -> Cancelable<NavigationTarget> {\n-        let (file_id, source) = module.definition_source(db)?;\n+        let (file_id, source) = module.definition_source(db);\n         let name = module\n-            .name(db)?\n+            .name(db)\n             .map(|it| it.to_string().into())\n             .unwrap_or_default();\n         let res = match source {\n@@ -94,10 +94,10 @@ impl NavigationTarget {\n         module: hir::Module,\n     ) -> Cancelable<NavigationTarget> {\n         let name = module\n-            .name(db)?\n+            .name(db)\n             .map(|it| it.to_string().into())\n             .unwrap_or_default();\n-        if let Some((file_id, source)) = module.declaration_source(db)? {\n+        if let Some((file_id, source)) = module.declaration_source(db) {\n             return Ok(NavigationTarget::from_syntax(\n                 file_id,\n                 name,"}, {"sha": "c0d4bda941c9a249aca5ab38388b7ed3a2828796", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=ca52cf1ecd4f65ff2a8c3953c35b006e73a60ea8", "patch": "@@ -83,8 +83,7 @@ fn runnable_mod(db: &RootDatabase, file_id: FileId, module: &ast::Module) -> Opt\n         .ok()?\n         .into_iter()\n         .rev()\n-        .filter_map(|it| it.name(db).ok())\n-        .filter_map(|it| it)\n+        .filter_map(|it| it.name(db))\n         .join(\"::\");\n     Some(Runnable {\n         range,"}]}