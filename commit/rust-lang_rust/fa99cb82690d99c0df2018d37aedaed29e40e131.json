{"sha": "fa99cb82690d99c0df2018d37aedaed29e40e131", "node_id": "C_kwDOAAsO6NoAKGZhOTljYjgyNjkwZDk5YzBkZjIwMThkMzdhZWRhZWQyOWU0MGUxMzE", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-11-08T23:45:55Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-11-09T23:27:14Z"}, "message": "Allow and add `track_caller` to generators\n\nThis patch allows the usage of the `track_caller` annotation on\ngenerators, as well as sets them conditionally if the parent also has\n`track_caller` set.\n\nAlso add this annotation on the `GenFuture`'s `poll()` function.", "tree": {"sha": "9310734b5f13537a4a3ef7fdf817d808be5cbe4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9310734b5f13537a4a3ef7fdf817d808be5cbe4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa99cb82690d99c0df2018d37aedaed29e40e131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa99cb82690d99c0df2018d37aedaed29e40e131", "html_url": "https://github.com/rust-lang/rust/commit/fa99cb82690d99c0df2018d37aedaed29e40e131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa99cb82690d99c0df2018d37aedaed29e40e131/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3db41d13f08db377c9bc516d8f285f61ed668edd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3db41d13f08db377c9bc516d8f285f61ed668edd", "html_url": "https://github.com/rust-lang/rust/commit/3db41d13f08db377c9bc516d8f285f61ed668edd"}], "stats": {"total": 65, "additions": 40, "deletions": 25}, "files": [{"sha": "6f68f679cc00af40ed4c86fe12bbf9f69a36b120", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fa99cb82690d99c0df2018d37aedaed29e40e131/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa99cb82690d99c0df2018d37aedaed29e40e131/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=fa99cb82690d99c0df2018d37aedaed29e40e131", "patch": "@@ -617,33 +617,47 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             hir::ExprKind::Closure(c)\n         };\n-        let generator_hir_id = self.lower_node_id(closure_node_id);\n-        // FIXME: only add track caller if the parent is track_caller\n-        self.lower_attrs(\n-            generator_hir_id,\n-            &[Attribute {\n-                kind: AttrKind::Normal(ptr::P(NormalAttr {\n-                    item: AttrItem {\n-                        path: Path::from_ident(Ident::new(sym::track_caller, span)),\n-                        args: MacArgs::Empty,\n+        let mut parent_has_track_caller = false;\n+        for attrs in self.attrs.values() {\n+            for attr in attrs.into_iter() {\n+                if attr.has_name(sym::track_caller) {\n+                    parent_has_track_caller = true;\n+                    break;\n+                }\n+            }\n+            if parent_has_track_caller {\n+                break;\n+            }\n+        }\n+        let unstable_span =\n+            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n+\n+        let hir_id = if parent_has_track_caller {\n+            let generator_hir_id = self.lower_node_id(closure_node_id);\n+            self.lower_attrs(\n+                generator_hir_id,\n+                &[Attribute {\n+                    kind: AttrKind::Normal(ptr::P(NormalAttr {\n+                        item: AttrItem {\n+                            path: Path::from_ident(Ident::new(sym::track_caller, span)),\n+                            args: MacArgs::Empty,\n+                            tokens: None,\n+                        },\n                         tokens: None,\n-                    },\n-                    tokens: None,\n-                })),\n-                id: self.tcx.sess.parse_sess.attr_id_generator.mk_attr_id(),\n-                style: AttrStyle::Outer,\n-                span,\n-            }],\n-        );\n-        let generator = hir::Expr {\n-            hir_id: generator_hir_id,\n-            kind: generator_kind,\n-            span: self.lower_span(span),\n+                    })),\n+                    id: self.tcx.sess.parse_sess.attr_id_generator.mk_attr_id(),\n+                    style: AttrStyle::Outer,\n+                    span: unstable_span,\n+                }],\n+            );\n+            generator_hir_id\n+        } else {\n+            self.lower_node_id(closure_node_id)\n         };\n \n+        let generator = hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) };\n+\n         // `future::from_generator`:\n-        let unstable_span =\n-            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n         let gen_future = self.expr_lang_item_path(\n             unstable_span,\n             hir::LangItem::FromGenerator,"}, {"sha": "107cf92c1c0f7c9bb515051591665807010221c1", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa99cb82690d99c0df2018d37aedaed29e40e131/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa99cb82690d99c0df2018d37aedaed29e40e131/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=fa99cb82690d99c0df2018d37aedaed29e40e131", "patch": "@@ -82,6 +82,7 @@ where\n \n     impl<T: Generator<ResumeTy, Yield = ()>> Future for GenFuture<T> {\n         type Output = T::Return;\n+        #[track_caller]\n         fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n             // SAFETY: Safe because we're !Unpin + !Drop, and this is just a field projection.\n             let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };"}, {"sha": "4e659da9ee069a3e9955d0f46d36bf747114a3f4", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa99cb82690d99c0df2018d37aedaed29e40e131/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa99cb82690d99c0df2018d37aedaed29e40e131/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=fa99cb82690d99c0df2018d37aedaed29e40e131", "patch": "@@ -70,6 +70,6 @@ fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n }\n \n fn main() {\n-    assert_eq!(panicked_at(|| block_on(foo())), 39);\n-    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 52);\n+    assert_eq!(panicked_at(|| block_on(foo())), 40);\n+    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 53);\n }", "previous_filename": "src/test/ui/async-await/panic-track-caller.rs"}]}