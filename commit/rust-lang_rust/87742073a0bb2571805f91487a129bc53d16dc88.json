{"sha": "87742073a0bb2571805f91487a129bc53d16dc88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NzQyMDczYTBiYjI1NzE4MDVmOTE0ODdhMTI5YmM1M2QxNmRjODg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T02:01:38Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:39Z"}, "message": "And --bless tests accordingly for those exceptions.", "tree": {"sha": "5aca156109121148c91a806a7cd77d7a482d7219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aca156109121148c91a806a7cd77d7a482d7219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87742073a0bb2571805f91487a129bc53d16dc88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87742073a0bb2571805f91487a129bc53d16dc88", "html_url": "https://github.com/rust-lang/rust/commit/87742073a0bb2571805f91487a129bc53d16dc88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87742073a0bb2571805f91487a129bc53d16dc88/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ccd6a33c9601ec68d87cf28f4a7e97a2623c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ccd6a33c9601ec68d87cf28f4a7e97a2623c95", "html_url": "https://github.com/rust-lang/rust/commit/18ccd6a33c9601ec68d87cf28f4a7e97a2623c95"}], "stats": {"total": 732, "additions": 198, "deletions": 534}, "files": [{"sha": "20a6fd83faa327fa9a6e63d86f7798abbc1337d7", "filename": "src/test/ui/associated-path-shl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fassociated-path-shl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fassociated-path-shl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-path-shl.rs?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -5,6 +5,5 @@ fn main() {\n     let _ = <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n     let <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n     let 0 ..= <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n-                           //~^ ERROR only char and numeric types are allowed in range patterns\n     <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n }"}, {"sha": "71ee93f4835fbc92c10e1a7184ee600e34f45e49", "filename": "src/test/ui/associated-path-shl.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fassociated-path-shl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fassociated-path-shl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-path-shl.stderr?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -23,21 +23,11 @@ LL |     let 0 ..= <<A>::B>::C;\n    |                 ^ not found in this scope\n \n error[E0412]: cannot find type `A` in this scope\n-  --> $DIR/associated-path-shl.rs:9:7\n+  --> $DIR/associated-path-shl.rs:8:7\n    |\n LL |     <<A>::B>::C;\n    |       ^ not found in this scope\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/associated-path-shl.rs:7:15\n-   |\n-LL |     let 0 ..= <<A>::B>::C;\n-   |               ^^^^^^^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {integer}\n-   = note: end type: [type error]\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0029, E0412.\n-For more information about an error, try `rustc --explain E0029`.\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "d97b693f520983dbc86e9779b2e933a935075926", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.rs?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -4,8 +4,7 @@ fn main() {\n     match [5..4, 99..105, 43..44] {\n         [_, 99.., _] => {},\n         //~^ ERROR `X..` range patterns are not supported\n-        //~| ERROR arbitrary expressions aren't allowed in patterns\n-        //~| ERROR only char and numeric types are allowed in range patterns\n+        //~| ERROR mismatched types\n         _ => {},\n     }\n }"}, {"sha": "4ecd8515ee164e28016b8131bba4813e4003e660", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -4,21 +4,17 @@ error: `X..` range patterns are not supported\n LL |         [_, 99.., _] => {},\n    |             ^^^^ help: try using the maximum value for the type: `99..MAX`\n \n-error: arbitrary expressions aren't allowed in patterns\n+error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision.rs:5:13\n    |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [_, 99.., _] => {},\n-   |             ^^^^\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/exclusive_range_pattern_syntax_collision.rs:5:13\n-   |\n-LL |         [_, 99.., _] => {},\n-   |             ^^^^ ranges require char or numeric types\n+   |             ^^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: start type: {integer}\n-   = note: end type: [type error]\n+   = note: expected type `std::ops::Range<{integer}>`\n+              found type `{integer}`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0029`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "09f459c9862ee03c01008388429b7c8fbae335c7", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.rs?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -4,9 +4,8 @@ fn main() {\n     match [5..4, 99..105, 43..44] {\n         [_, 99..] => {},\n         //~^ ERROR `X..` range patterns are not supported\n-        //~| ERROR arbitrary expressions aren't allowed in patterns\n         //~| ERROR pattern requires 2 elements but array has 3\n-        //~| ERROR only char and numeric types are allowed in range patterns\n+        //~| ERROR mismatched types\n         _ => {},\n     }\n }"}, {"sha": "922d26923158b8580834d6704cc0f3fc26aba190", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -4,28 +4,24 @@ error: `X..` range patterns are not supported\n LL |         [_, 99..] => {},\n    |             ^^^^ help: try using the maximum value for the type: `99..MAX`\n \n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/exclusive_range_pattern_syntax_collision2.rs:5:13\n-   |\n-LL |         [_, 99..] => {},\n-   |             ^^^^\n-\n error[E0527]: pattern requires 2 elements but array has 3\n   --> $DIR/exclusive_range_pattern_syntax_collision2.rs:5:9\n    |\n LL |         [_, 99..] => {},\n    |         ^^^^^^^^^ expected 3 elements\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision2.rs:5:13\n    |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [_, 99..] => {},\n-   |             ^^^^ ranges require char or numeric types\n+   |             ^^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: start type: {integer}\n-   = note: end type: [type error]\n+   = note: expected type `std::ops::Range<{integer}>`\n+              found type `{integer}`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0029, E0527.\n-For more information about an error, try `rustc --explain E0029`.\n+Some errors have detailed explanations: E0308, E0527.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "95e58b1d48c88cae40440c04b97fc35638e9b074", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.rs?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -4,8 +4,7 @@ fn main() {\n     match [5..4, 99..105, 43..44] {\n         [..9, 99..100, _] => {},\n         //~^ ERROR `..X` range patterns are not supported\n-        //~| ERROR arbitrary expressions aren't allowed in patterns\n-        //~| ERROR only char and numeric types are allowed in range patterns\n+        //~| ERROR mismatched types\n         //~| ERROR mismatched types\n         _ => {},\n     }"}, {"sha": "8907b875f8e116d4440a6bb988e6ee69acf5e088", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -4,20 +4,16 @@ error: `..X` range patterns are not supported\n LL |         [..9, 99..100, _] => {},\n    |          ^^^ help: try using the minimum value for the type: `MIN..9`\n \n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:10\n-   |\n-LL |         [..9, 99..100, _] => {},\n-   |          ^^^\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:10\n    |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n LL |         [..9, 99..100, _] => {},\n-   |          ^^^ ranges require char or numeric types\n+   |          ^^^ expected struct `std::ops::Range`, found integer\n    |\n-   = note: start type: [type error]\n-   = note: end type: {integer}\n+   = note: expected type `std::ops::Range<{integer}>`\n+              found type `{integer}`\n \n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:15\n@@ -30,7 +26,6 @@ LL |         [..9, 99..100, _] => {},\n    = note: expected type `std::ops::Range<{integer}>`\n               found type `{integer}`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0029, E0308.\n-For more information about an error, try `rustc --explain E0029`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "2f03160430a22fa4df6befd3495e0f3a5cab158a", "filename": "src/test/ui/parser/pat-tuple-4.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -1,10 +1,11 @@\n fn main() {\n+    const PAT: u8 = 0;\n+\n     match 0 {\n-        (.. pat) => {}\n+        (.. PAT) => {}\n         //~^ ERROR `..X` range patterns are not supported\n-        //~| ERROR arbitrary expressions aren't allowed in patterns\n-        //~| ERROR cannot find value `pat` in this scope\n         //~| ERROR exclusive range pattern syntax is experimental\n-        //~| ERROR only char and numeric types are allowed in range patterns\n     }\n }\n+\n+const RECOVERY_WITNESS: () = 0; //~ ERROR mismatched types"}, {"sha": "af3ecce1846497d485d7ad5bf0671d593b79cc9e", "filename": "src/test/ui/parser/pat-tuple-4.stderr", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -1,40 +1,28 @@\n error: `..X` range patterns are not supported\n-  --> $DIR/pat-tuple-4.rs:3:10\n+  --> $DIR/pat-tuple-4.rs:5:10\n    |\n-LL |         (.. pat) => {}\n-   |          ^^^^^^ help: try using the minimum value for the type: `MIN..pat`\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/pat-tuple-4.rs:3:10\n-   |\n-LL |         (.. pat) => {}\n-   |          ^^^^^^\n-\n-error[E0425]: cannot find value `pat` in this scope\n-  --> $DIR/pat-tuple-4.rs:3:13\n-   |\n-LL |         (.. pat) => {}\n-   |             ^^^ not found in this scope\n+LL |         (.. PAT) => {}\n+   |          ^^^^^^ help: try using the minimum value for the type: `MIN..PAT`\n \n error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/pat-tuple-4.rs:3:10\n+  --> $DIR/pat-tuple-4.rs:5:10\n    |\n-LL |         (.. pat) => {}\n+LL |         (.. PAT) => {}\n    |          ^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/pat-tuple-4.rs:3:10\n+error[E0308]: mismatched types\n+  --> $DIR/pat-tuple-4.rs:11:30\n    |\n-LL |         (.. pat) => {}\n-   |          ^^^^^^ ranges require char or numeric types\n+LL | const RECOVERY_WITNESS: () = 0;\n+   |                              ^ expected (), found integer\n    |\n-   = note: start type: [type error]\n-   = note: end type: [type error]\n+   = note: expected type `()`\n+              found type `{integer}`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0029, E0425, E0658.\n-For more information about an error, try `rustc --explain E0029`.\n+Some errors have detailed explanations: E0308, E0658.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "5334ef93bb3bd1e6c8be8505893dd3bb1065d7fd", "filename": "src/test/ui/parser/pat-tuple-5.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.rs?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -1,10 +1,10 @@\n fn main() {\n+    const PAT: u8 = 0;\n+\n     match (0, 1) {\n-        (pat ..) => {}\n+        (PAT ..) => {}\n         //~^ ERROR `X..` range patterns are not supported\n-        //~| ERROR arbitrary expressions aren't allowed in patterns\n-        //~| ERROR cannot find value `pat` in this scope\n         //~| ERROR exclusive range pattern syntax is experimental\n-        //~| ERROR only char and numeric types are allowed in range patterns\n+        //~| ERROR mismatched types\n     }\n }"}, {"sha": "09ebdc29a21613cbe0dc25278324d6678f593d2d", "filename": "src/test/ui/parser/pat-tuple-5.stderr", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -1,40 +1,30 @@\n error: `X..` range patterns are not supported\n-  --> $DIR/pat-tuple-5.rs:3:10\n+  --> $DIR/pat-tuple-5.rs:5:10\n    |\n-LL |         (pat ..) => {}\n-   |          ^^^^^^ help: try using the maximum value for the type: `pat..MAX`\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/pat-tuple-5.rs:3:10\n-   |\n-LL |         (pat ..) => {}\n-   |          ^^^^^^\n-\n-error[E0425]: cannot find value `pat` in this scope\n-  --> $DIR/pat-tuple-5.rs:3:10\n-   |\n-LL |         (pat ..) => {}\n-   |          ^^^ not found in this scope\n+LL |         (PAT ..) => {}\n+   |          ^^^^^^ help: try using the maximum value for the type: `PAT..MAX`\n \n error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/pat-tuple-5.rs:3:10\n+  --> $DIR/pat-tuple-5.rs:5:10\n    |\n-LL |         (pat ..) => {}\n+LL |         (PAT ..) => {}\n    |          ^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/pat-tuple-5.rs:3:10\n+error[E0308]: mismatched types\n+  --> $DIR/pat-tuple-5.rs:5:10\n    |\n-LL |         (pat ..) => {}\n-   |          ^^^^^^ ranges require char or numeric types\n+LL |     match (0, 1) {\n+   |           ------ this match expression has type `({integer}, {integer})`\n+LL |         (PAT ..) => {}\n+   |          ^^^^^^ expected tuple, found u8\n    |\n-   = note: start type: [type error]\n-   = note: end type: [type error]\n+   = note: expected type `({integer}, {integer})`\n+              found type `u8`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0029, E0425, E0658.\n-For more information about an error, try `rustc --explain E0029`.\n+Some errors have detailed explanations: E0308, E0658.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "c66652ff4fa01ef73cc0e5200e0d875894a0407a", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 48, "deletions": 84, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -55,105 +55,69 @@ fn inclusive2_from_to() {\n }\n \n fn exclusive_from() {\n-    if let 0.. = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X..` range patterns are not supported\n-    if let X.. = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X..` range patterns are not supported\n-    if let true.. = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X..` range patterns are not supported\n-    if let .0.. = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X..` range patterns are not supported\n-    //~| ERROR float literals must have an integer part\n+    if let 0.. = 0 {} //~ ERROR `X..` range patterns are not supported\n+    if let X.. = 0 {} //~ ERROR `X..` range patterns are not supported\n+    if let true.. = 0 {} //~ ERROR `X..` range patterns are not supported\n+    //~^ ERROR only char and numeric types\n+    if let .0.. = 0 {} //~ ERROR `X..` range patterns are not supported\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR mismatched types\n }\n \n fn inclusive_from() {\n-    if let 0..= = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X..=` range patterns are not supported\n-    if let X..= = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X..=` range patterns are not supported\n-    if let true..= = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X..=` range patterns are not supported\n-    if let .0..= = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X..=` range patterns are not supported\n-    //~| ERROR float literals must have an integer part\n+    if let 0..= = 0 {} //~ ERROR `X..=` range patterns are not supported\n+    if let X..= = 0 {} //~ ERROR `X..=` range patterns are not supported\n+    if let true..= = 0 {} //~ ERROR `X..=` range patterns are not supported\n+    //~| ERROR only char and numeric types\n+    if let .0..= = 0 {} //~ ERROR `X..=` range patterns are not supported\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR mismatched types\n }\n \n fn inclusive2_from() {\n-    if let 0... = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X...` range patterns are not supported\n-    //~| ERROR `...` range patterns are deprecated\n-    if let X... = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X...` range patterns are not supported\n-    //~| ERROR `...` range patterns are deprecated\n-    if let true... = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X...` range patterns are not supported\n-    //~| ERROR `...` range patterns are deprecated\n-    if let .0... = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `X...` range patterns are not supported\n-    //~| ERROR float literals must have an integer part\n+    if let 0... = 0 {} //~ ERROR `X...` range patterns are not supported\n+    //~^ ERROR `...` range patterns are deprecated\n+    if let X... = 0 {} //~ ERROR `X...` range patterns are not supported\n+    //~^ ERROR `...` range patterns are deprecated\n+    if let true... = 0 {} //~ ERROR `X...` range patterns are not supported\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| ERROR only char and numeric types\n+    if let .0... = 0 {} //~ ERROR `X...` range patterns are not supported\n+    //~^ ERROR float literals must have an integer part\n     //~| ERROR `...` range patterns are deprecated\n+    //~| ERROR mismatched types\n }\n \n fn exclusive_to() {\n-    if let ..0 = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `..X` range patterns are not supported\n-    if let ..Y = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `..X` range patterns are not supported\n-    if let ..true = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `..X` range patterns are not supported\n-    if let .. .0 = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `..X` range patterns are not supported\n-    //~| ERROR float literals must have an integer part\n+    if let ..0 = 0 {} //~ ERROR `..X` range patterns are not supported\n+    if let ..Y = 0 {} //~ ERROR `..X` range patterns are not supported\n+    if let ..true = 0 {} //~ ERROR `..X` range patterns are not supported\n+    //~| ERROR only char and numeric types\n+    if let .. .0 = 0 {} //~ ERROR `..X` range patterns are not supported\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR mismatched types\n }\n \n fn inclusive_to() {\n-    if let ..=3 = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `..=X` range patterns are not supported\n-    if let ..=Y = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `..=X` range patterns are not supported\n-    if let ..=true = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `..=X` range patterns are not supported\n-    if let ..=.0 = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `..=X` range patterns are not supported\n-    //~| ERROR float literals must have an integer part\n+    if let ..=3 = 0 {} //~ ERROR `..=X` range patterns are not supported\n+    if let ..=Y = 0 {} //~ ERROR `..=X` range patterns are not supported\n+    if let ..=true = 0 {} //~ ERROR `..=X` range patterns are not supported\n+    //~| ERROR only char and numeric types\n+    if let ..=.0 = 0 {} //~ ERROR `..=X` range patterns are not supported\n+    //~^ ERROR float literals must have an integer part\n+    //~| ERROR mismatched types\n }\n \n fn inclusive2_to() {\n-    if let ...3 = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `...X` range patterns are not supported\n-    //~| ERROR `...` range patterns are deprecated\n-    if let ...Y = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `...X` range patterns are not supported\n-    //~| ERROR `...` range patterns are deprecated\n-    if let ...true = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `...X` range patterns are not supported\n-    //~| ERROR `...` range patterns are deprecated\n-    if let ....3 = 0 {} //~ ERROR only char and numeric types\n-    //~^ ERROR arbitrary expressions aren't allowed in patterns\n-    //~| ERROR `...X` range patterns are not supported\n-    //~| ERROR float literals must have an integer part\n+    if let ...3 = 0 {} //~ ERROR `...X` range patterns are not supported\n+    //~^ ERROR `...` range patterns are deprecated\n+    if let ...Y = 0 {} //~ ERROR `...X` range patterns are not supported\n+    //~^ ERROR `...` range patterns are deprecated\n+    if let ...true = 0 {} //~ ERROR `...X` range patterns are not supported\n+    //~^ ERROR `...` range patterns are deprecated\n+    //~| ERROR only char and numeric types\n+    if let ....3 = 0 {} //~ ERROR `...X` range patterns are not supported\n+    //~^ ERROR float literals must have an integer part\n     //~| ERROR `...` range patterns are deprecated\n+    //~| ERROR mismatched types\n }"}, {"sha": "c50d5e6eb61537d83d3b25ec74343774dce304dd", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 80, "deletions": 332, "changes": 412, "blob_url": "https://github.com/rust-lang/rust/blob/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87742073a0bb2571805f91487a129bc53d16dc88/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=87742073a0bb2571805f91487a129bc53d16dc88", "patch": "@@ -41,322 +41,178 @@ LL |     if let 0.. = 0 {}\n    |            ^^^ help: try using the maximum value for the type: `0..MAX`\n \n error: `X..` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:61:12\n+  --> $DIR/recover-range-pats.rs:59:12\n    |\n LL |     if let X.. = 0 {}\n    |            ^^^ help: try using the maximum value for the type: `X..MAX`\n \n error: `X..` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:64:12\n+  --> $DIR/recover-range-pats.rs:60:12\n    |\n LL |     if let true.. = 0 {}\n    |            ^^^^^^ help: try using the maximum value for the type: `true..MAX`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:67:12\n+  --> $DIR/recover-range-pats.rs:62:12\n    |\n LL |     if let .0.. = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error: `X..` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:67:12\n+  --> $DIR/recover-range-pats.rs:62:12\n    |\n LL |     if let .0.. = 0 {}\n    |            ^^^^ help: try using the maximum value for the type: `0.0..MAX`\n \n error: `X..=` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:74:12\n+  --> $DIR/recover-range-pats.rs:68:12\n    |\n LL |     if let 0..= = 0 {}\n    |            ^^^^ help: try using the maximum value for the type: `0..=MAX`\n \n error: `X..=` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:77:12\n+  --> $DIR/recover-range-pats.rs:69:12\n    |\n LL |     if let X..= = 0 {}\n    |            ^^^^ help: try using the maximum value for the type: `X..=MAX`\n \n error: `X..=` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:80:12\n+  --> $DIR/recover-range-pats.rs:70:12\n    |\n LL |     if let true..= = 0 {}\n    |            ^^^^^^^ help: try using the maximum value for the type: `true..=MAX`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:83:12\n+  --> $DIR/recover-range-pats.rs:72:12\n    |\n LL |     if let .0..= = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error: `X..=` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:83:12\n+  --> $DIR/recover-range-pats.rs:72:12\n    |\n LL |     if let .0..= = 0 {}\n    |            ^^^^^ help: try using the maximum value for the type: `0.0..=MAX`\n \n error: `X...` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:90:12\n+  --> $DIR/recover-range-pats.rs:78:12\n    |\n LL |     if let 0... = 0 {}\n    |            ^^^^ help: try using the maximum value for the type: `0...MAX`\n \n error: `X...` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:94:12\n+  --> $DIR/recover-range-pats.rs:80:12\n    |\n LL |     if let X... = 0 {}\n    |            ^^^^ help: try using the maximum value for the type: `X...MAX`\n \n error: `X...` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:98:12\n+  --> $DIR/recover-range-pats.rs:82:12\n    |\n LL |     if let true... = 0 {}\n    |            ^^^^^^^ help: try using the maximum value for the type: `true...MAX`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:102:12\n+  --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0... = 0 {}\n    |            ^^ help: must have an integer part: `0.0`\n \n error: `X...` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:102:12\n+  --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0... = 0 {}\n    |            ^^^^^ help: try using the maximum value for the type: `0.0...MAX`\n \n error: `..X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:110:12\n+  --> $DIR/recover-range-pats.rs:92:12\n    |\n LL |     if let ..0 = 0 {}\n    |            ^^^ help: try using the minimum value for the type: `MIN..0`\n \n error: `..X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:113:12\n+  --> $DIR/recover-range-pats.rs:93:12\n    |\n LL |     if let ..Y = 0 {}\n    |            ^^^ help: try using the minimum value for the type: `MIN..Y`\n \n error: `..X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:116:12\n+  --> $DIR/recover-range-pats.rs:94:12\n    |\n LL |     if let ..true = 0 {}\n    |            ^^^^^^ help: try using the minimum value for the type: `MIN..true`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:119:15\n+  --> $DIR/recover-range-pats.rs:96:15\n    |\n LL |     if let .. .0 = 0 {}\n    |               ^^ help: must have an integer part: `0.0`\n \n error: `..X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:119:12\n+  --> $DIR/recover-range-pats.rs:96:12\n    |\n LL |     if let .. .0 = 0 {}\n    |            ^^^^^ help: try using the minimum value for the type: `MIN..0.0`\n \n error: `..=X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:126:12\n+  --> $DIR/recover-range-pats.rs:102:12\n    |\n LL |     if let ..=3 = 0 {}\n    |            ^^^^ help: try using the minimum value for the type: `MIN..=3`\n \n error: `..=X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:129:12\n+  --> $DIR/recover-range-pats.rs:103:12\n    |\n LL |     if let ..=Y = 0 {}\n    |            ^^^^ help: try using the minimum value for the type: `MIN..=Y`\n \n error: `..=X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:132:12\n+  --> $DIR/recover-range-pats.rs:104:12\n    |\n LL |     if let ..=true = 0 {}\n    |            ^^^^^^^ help: try using the minimum value for the type: `MIN..=true`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:135:15\n+  --> $DIR/recover-range-pats.rs:106:15\n    |\n LL |     if let ..=.0 = 0 {}\n    |               ^^ help: must have an integer part: `0.0`\n \n error: `..=X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:135:12\n+  --> $DIR/recover-range-pats.rs:106:12\n    |\n LL |     if let ..=.0 = 0 {}\n    |            ^^^^^ help: try using the minimum value for the type: `MIN..=0.0`\n \n error: `...X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:142:12\n+  --> $DIR/recover-range-pats.rs:112:12\n    |\n LL |     if let ...3 = 0 {}\n    |            ^^^^ help: try using the minimum value for the type: `MIN...3`\n \n error: `...X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:146:12\n+  --> $DIR/recover-range-pats.rs:114:12\n    |\n LL |     if let ...Y = 0 {}\n    |            ^^^^ help: try using the minimum value for the type: `MIN...Y`\n \n error: `...X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:150:12\n+  --> $DIR/recover-range-pats.rs:116:12\n    |\n LL |     if let ...true = 0 {}\n    |            ^^^^^^^ help: try using the minimum value for the type: `MIN...true`\n \n error: float literals must have an integer part\n-  --> $DIR/recover-range-pats.rs:154:15\n+  --> $DIR/recover-range-pats.rs:119:15\n    |\n LL |     if let ....3 = 0 {}\n    |               ^^ help: must have an integer part: `0.3`\n \n error: `...X` range patterns are not supported\n-  --> $DIR/recover-range-pats.rs:154:12\n-   |\n-LL |     if let ....3 = 0 {}\n-   |            ^^^^^ help: try using the minimum value for the type: `MIN...0.3`\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:58:12\n-   |\n-LL |     if let 0.. = 0 {}\n-   |            ^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:61:12\n-   |\n-LL |     if let X.. = 0 {}\n-   |            ^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:64:12\n-   |\n-LL |     if let true.. = 0 {}\n-   |            ^^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:67:12\n-   |\n-LL |     if let .0.. = 0 {}\n-   |            ^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:74:12\n-   |\n-LL |     if let 0..= = 0 {}\n-   |            ^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:77:12\n-   |\n-LL |     if let X..= = 0 {}\n-   |            ^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:80:12\n-   |\n-LL |     if let true..= = 0 {}\n-   |            ^^^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:83:12\n-   |\n-LL |     if let .0..= = 0 {}\n-   |            ^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:90:12\n-   |\n-LL |     if let 0... = 0 {}\n-   |            ^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:94:12\n-   |\n-LL |     if let X... = 0 {}\n-   |            ^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:98:12\n-   |\n-LL |     if let true... = 0 {}\n-   |            ^^^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:102:12\n-   |\n-LL |     if let .0... = 0 {}\n-   |            ^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:110:12\n-   |\n-LL |     if let ..0 = 0 {}\n-   |            ^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:113:12\n-   |\n-LL |     if let ..Y = 0 {}\n-   |            ^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:116:12\n-   |\n-LL |     if let ..true = 0 {}\n-   |            ^^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n   --> $DIR/recover-range-pats.rs:119:12\n    |\n-LL |     if let .. .0 = 0 {}\n-   |            ^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:126:12\n-   |\n-LL |     if let ..=3 = 0 {}\n-   |            ^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:129:12\n-   |\n-LL |     if let ..=Y = 0 {}\n-   |            ^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:132:12\n-   |\n-LL |     if let ..=true = 0 {}\n-   |            ^^^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:135:12\n-   |\n-LL |     if let ..=.0 = 0 {}\n-   |            ^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:142:12\n-   |\n-LL |     if let ...3 = 0 {}\n-   |            ^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:146:12\n-   |\n-LL |     if let ...Y = 0 {}\n-   |            ^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:150:12\n-   |\n-LL |     if let ...true = 0 {}\n-   |            ^^^^^^^\n-\n-error: arbitrary expressions aren't allowed in patterns\n-  --> $DIR/recover-range-pats.rs:154:12\n-   |\n LL |     if let ....3 = 0 {}\n-   |            ^^^^^\n+   |            ^^^^^ help: try using the minimum value for the type: `MIN...0.3`\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:41:13\n@@ -413,49 +269,49 @@ LL |     if let X... .0 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:90:13\n+  --> $DIR/recover-range-pats.rs:78:13\n    |\n LL |     if let 0... = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:94:13\n+  --> $DIR/recover-range-pats.rs:80:13\n    |\n LL |     if let X... = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:98:16\n+  --> $DIR/recover-range-pats.rs:82:16\n    |\n LL |     if let true... = 0 {}\n    |                ^^^ help: use `..=` for an inclusive range\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:102:14\n+  --> $DIR/recover-range-pats.rs:85:14\n    |\n LL |     if let .0... = 0 {}\n    |              ^^^ help: use `..=` for an inclusive range\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:142:12\n+  --> $DIR/recover-range-pats.rs:112:12\n    |\n LL |     if let ...3 = 0 {}\n    |            ^^^ help: use `..=` for an inclusive range\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:146:12\n+  --> $DIR/recover-range-pats.rs:114:12\n    |\n LL |     if let ...Y = 0 {}\n    |            ^^^ help: use `..=` for an inclusive range\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:150:12\n+  --> $DIR/recover-range-pats.rs:116:12\n    |\n LL |     if let ...true = 0 {}\n    |            ^^^ help: use `..=` for an inclusive range\n \n error: `...` range patterns are deprecated\n-  --> $DIR/recover-range-pats.rs:154:12\n+  --> $DIR/recover-range-pats.rs:119:12\n    |\n LL |     if let ....3 = 0 {}\n    |            ^^^ help: use `..=` for an inclusive range\n@@ -569,222 +425,114 @@ LL |     if let X... .0 = 0 {}\n               found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:58:12\n-   |\n-LL |     if let 0.. = 0 {}\n-   |            ^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {integer}\n-   = note: end type: [type error]\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:61:12\n-   |\n-LL |     if let X.. = 0 {}\n-   |            ^^^ ranges require char or numeric types\n-   |\n-   = note: start type: u8\n-   = note: end type: [type error]\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:64:12\n+  --> $DIR/recover-range-pats.rs:60:12\n    |\n LL |     if let true.. = 0 {}\n-   |            ^^^^^^ ranges require char or numeric types\n+   |            ^^^^ ranges require char or numeric types\n    |\n    = note: start type: bool\n    = note: end type: [type error]\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:67:12\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:62:12\n    |\n LL |     if let .0.. = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n+   |            ^^^^ expected integer, found floating-point number\n    |\n-   = note: start type: {float}\n-   = note: end type: [type error]\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:74:12\n-   |\n-LL |     if let 0..= = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {integer}\n-   = note: end type: [type error]\n+   = note: expected type `{integer}`\n+              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:77:12\n-   |\n-LL |     if let X..= = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: u8\n-   = note: end type: [type error]\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:80:12\n+  --> $DIR/recover-range-pats.rs:70:12\n    |\n LL |     if let true..= = 0 {}\n-   |            ^^^^^^^ ranges require char or numeric types\n+   |            ^^^^ ranges require char or numeric types\n    |\n    = note: start type: bool\n    = note: end type: [type error]\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:83:12\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:72:12\n    |\n LL |     if let .0..= = 0 {}\n-   |            ^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {float}\n-   = note: end type: [type error]\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:90:12\n-   |\n-LL |     if let 0... = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {integer}\n-   = note: end type: [type error]\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:94:12\n-   |\n-LL |     if let X... = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n+   |            ^^^^^ expected integer, found floating-point number\n    |\n-   = note: start type: u8\n-   = note: end type: [type error]\n+   = note: expected type `{integer}`\n+              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:98:12\n+  --> $DIR/recover-range-pats.rs:82:12\n    |\n LL |     if let true... = 0 {}\n-   |            ^^^^^^^ ranges require char or numeric types\n+   |            ^^^^ ranges require char or numeric types\n    |\n    = note: start type: bool\n    = note: end type: [type error]\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:102:12\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0... = 0 {}\n-   |            ^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: {float}\n-   = note: end type: [type error]\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:110:12\n-   |\n-LL |     if let ..0 = 0 {}\n-   |            ^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: {integer}\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:113:12\n-   |\n-LL |     if let ..Y = 0 {}\n-   |            ^^^ ranges require char or numeric types\n+   |            ^^^^^ expected integer, found floating-point number\n    |\n-   = note: start type: [type error]\n-   = note: end type: u8\n+   = note: expected type `{integer}`\n+              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:116:12\n+  --> $DIR/recover-range-pats.rs:94:14\n    |\n LL |     if let ..true = 0 {}\n-   |            ^^^^^^ ranges require char or numeric types\n+   |              ^^^^ ranges require char or numeric types\n    |\n    = note: start type: [type error]\n    = note: end type: bool\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:119:12\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:96:12\n    |\n LL |     if let .. .0 = 0 {}\n-   |            ^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: {float}\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:126:12\n-   |\n-LL |     if let ..=3 = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: {integer}\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:129:12\n-   |\n-LL |     if let ..=Y = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n+   |            ^^^^^ expected integer, found floating-point number\n    |\n-   = note: start type: [type error]\n-   = note: end type: u8\n+   = note: expected type `{integer}`\n+              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:132:12\n+  --> $DIR/recover-range-pats.rs:104:15\n    |\n LL |     if let ..=true = 0 {}\n-   |            ^^^^^^^ ranges require char or numeric types\n+   |               ^^^^ ranges require char or numeric types\n    |\n    = note: start type: [type error]\n    = note: end type: bool\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:135:12\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:106:12\n    |\n LL |     if let ..=.0 = 0 {}\n-   |            ^^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: {float}\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:142:12\n-   |\n-LL |     if let ...3 = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n-   |\n-   = note: start type: [type error]\n-   = note: end type: {integer}\n-\n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:146:12\n-   |\n-LL |     if let ...Y = 0 {}\n-   |            ^^^^ ranges require char or numeric types\n+   |            ^^^^^ expected integer, found floating-point number\n    |\n-   = note: start type: [type error]\n-   = note: end type: u8\n+   = note: expected type `{integer}`\n+              found type `{float}`\n \n error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:150:12\n+  --> $DIR/recover-range-pats.rs:116:15\n    |\n LL |     if let ...true = 0 {}\n-   |            ^^^^^^^ ranges require char or numeric types\n+   |               ^^^^ ranges require char or numeric types\n    |\n    = note: start type: [type error]\n    = note: end type: bool\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n-  --> $DIR/recover-range-pats.rs:154:12\n+error[E0308]: mismatched types\n+  --> $DIR/recover-range-pats.rs:119:12\n    |\n LL |     if let ....3 = 0 {}\n-   |            ^^^^^ ranges require char or numeric types\n+   |            ^^^^^ expected integer, found floating-point number\n    |\n-   = note: start type: [type error]\n-   = note: end type: {float}\n+   = note: expected type `{integer}`\n+              found type `{float}`\n \n-error: aborting due to 112 previous errors\n+error: aborting due to 76 previous errors\n \n Some errors have detailed explanations: E0029, E0308.\n For more information about an error, try `rustc --explain E0029`."}]}