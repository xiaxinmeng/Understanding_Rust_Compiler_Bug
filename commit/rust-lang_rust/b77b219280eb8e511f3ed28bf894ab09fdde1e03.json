{"sha": "b77b219280eb8e511f3ed28bf894ab09fdde1e03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3N2IyMTkyODBlYjhlNTExZjNlZDI4YmY4OTRhYjA5ZmRkZTFlMDM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-12T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-03-30T19:42:16Z"}, "message": "Lint unnamed address comparisons", "tree": {"sha": "7c2ab232afd0aa3b053fe446f920432e61995b98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c2ab232afd0aa3b053fe446f920432e61995b98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b77b219280eb8e511f3ed28bf894ab09fdde1e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b77b219280eb8e511f3ed28bf894ab09fdde1e03", "html_url": "https://github.com/rust-lang/rust/commit/b77b219280eb8e511f3ed28bf894ab09fdde1e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b77b219280eb8e511f3ed28bf894ab09fdde1e03/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "563da5248d867e7147b084161bee040a241a7419", "url": "https://api.github.com/repos/rust-lang/rust/commits/563da5248d867e7147b084161bee040a241a7419", "html_url": "https://github.com/rust-lang/rust/commit/563da5248d867e7147b084161bee040a241a7419"}], "stats": {"total": 325, "additions": 323, "deletions": 2}, "files": [{"sha": "f3b1073988b097c077ad15dea86a6fdefe133db8", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -1271,6 +1271,7 @@ Released 2018-09-13\n [`float_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic\n [`float_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\n [`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const\n+[`fn_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_address_comparisons\n [`fn_params_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n [`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n@@ -1540,6 +1541,7 @@ Released 2018-09-13\n [`vec_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_box\n [`verbose_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask\n [`verbose_file_reads`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_file_reads\n+[`vtable_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#vtable_address_comparisons\n [`while_immutable_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_immutable_condition\n [`while_let_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop\n [`while_let_on_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator"}, {"sha": "856058e58b02c3e857e7bfacfe99048efc02f76a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 361 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 363 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "5d5b5d9a6da5c7dfe3630fe8b453b360177d1b14", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -309,6 +309,7 @@ pub mod trivially_copy_pass_by_ref;\n pub mod try_err;\n pub mod types;\n pub mod unicode;\n+pub mod unnamed_address;\n pub mod unsafe_removed_from_name;\n pub mod unused_io_amount;\n pub mod unused_self;\n@@ -818,6 +819,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unicode::NON_ASCII_LITERAL,\n         &unicode::UNICODE_NOT_NFC,\n         &unicode::ZERO_WIDTH_SPACE,\n+        &unnamed_address::FN_ADDRESS_COMPARISONS,\n+        &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n         &unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         &unused_io_amount::UNUSED_IO_AMOUNT,\n         &unused_self::UNUSED_SELF,\n@@ -1027,6 +1030,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box macro_use::MacroUseImports);\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n+    store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1378,6 +1382,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n+        LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n@@ -1631,6 +1637,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CAST_REF_TO_MUT),\n         LintId::of(&types::UNIT_CMP),\n         LintId::of(&unicode::ZERO_WIDTH_SPACE),\n+        LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n+        LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n     ]);"}, {"sha": "b6473fc594eec3bbc80d8ac2d678ef28e1d38e19", "filename": "clippy_lints/src/unnamed_address.rs", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/clippy_lints%2Fsrc%2Funnamed_address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/clippy_lints%2Fsrc%2Funnamed_address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnamed_address.rs?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -0,0 +1,133 @@\n+use crate::utils::{match_def_path, paths, span_lint, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for comparisons with an address of a function item.\n+    ///\n+    /// **Why is this bad?** Function item address is not guaranteed to be unique and could vary\n+    /// between different code generation units. Furthermore different function items could have\n+    /// the same address after being merged together.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// type F = fn();\n+    /// fn a() {}\n+    /// let f: F = a;\n+    /// if f == a {\n+    ///     // ...\n+    /// }\n+    /// ```\n+    pub FN_ADDRESS_COMPARISONS,\n+    correctness,\n+    \"comparison with an address of a function item\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for comparisons with an address of a trait vtable.\n+    ///\n+    /// **Why is this bad?** Comparing trait objects pointers compares an vtable addresses which\n+    /// are not guaranteed to be unique and could vary between different code generation units.\n+    /// Furthermore vtables for different types could have the same address after being merged\n+    /// together.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// let a: Rc<dyn Trait> = ...\n+    /// let b: Rc<dyn Trait> = ...\n+    /// if Rc::ptr_eq(&a, &b) {\n+    ///     ...\n+    /// }\n+    /// ```\n+    pub VTABLE_ADDRESS_COMPARISONS,\n+    correctness,\n+    \"comparison with an address of a trait vtable\"\n+}\n+\n+declare_lint_pass!(UnnamedAddress => [FN_ADDRESS_COMPARISONS, VTABLE_ADDRESS_COMPARISONS]);\n+\n+impl LateLintPass<'_, '_> for UnnamedAddress {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+        fn is_comparison(binop: BinOpKind) -> bool {\n+            match binop {\n+                BinOpKind::Eq | BinOpKind::Lt | BinOpKind::Le | BinOpKind::Ne | BinOpKind::Ge | BinOpKind::Gt => true,\n+                _ => false,\n+            }\n+        }\n+\n+        fn is_trait_ptr(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+            match cx.tables.expr_ty_adjusted(expr).kind {\n+                ty::RawPtr(ty::TypeAndMut { ty, .. }) => ty.is_trait(),\n+                _ => false,\n+            }\n+        }\n+\n+        fn is_fn_def(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+            if let ty::FnDef(..) = cx.tables.expr_ty(expr).kind {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Binary(binop, ref left, ref right) = expr.kind;\n+            if is_comparison(binop.node);\n+            if is_trait_ptr(cx, left) && is_trait_ptr(cx, right);\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    VTABLE_ADDRESS_COMPARISONS,\n+                    expr.span,\n+                    \"comparing trait object pointers compares a non-unique vtable address\",\n+                    \"consider extracting and comparing data pointers only\",\n+                );\n+            }\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Call(ref func, [ref _left, ref _right]) = expr.kind;\n+            if let ExprKind::Path(ref func_qpath) = func.kind;\n+            if let Some(def_id) = cx.tables.qpath_res(func_qpath, func.hir_id).opt_def_id();\n+            if match_def_path(cx, def_id, &paths::PTR_EQ) ||\n+                match_def_path(cx, def_id, &paths::RC_PTR_EQ) ||\n+                match_def_path(cx, def_id, &paths::ARC_PTR_EQ);\n+            let ty_param = cx.tables.node_substs(func.hir_id).type_at(0);\n+            if ty_param.is_trait();\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    VTABLE_ADDRESS_COMPARISONS,\n+                    expr.span,\n+                    \"comparing trait object pointers compares a non-unique vtable address\",\n+                    \"consider extracting and comparing data pointers only\",\n+                );\n+            }\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::Binary(binop, ref left, ref right) = expr.kind;\n+            if is_comparison(binop.node);\n+            if cx.tables.expr_ty_adjusted(left).is_fn_ptr() &&\n+                cx.tables.expr_ty_adjusted(right).is_fn_ptr();\n+            if is_fn_def(cx, left) || is_fn_def(cx, right);\n+            then {\n+                span_lint(\n+                    cx,\n+                    FN_ADDRESS_COMPARISONS,\n+                    expr.span,\n+                    \"comparing with a non-unique address of a function item\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "4a4ee5baf002f063f4ac134854cee8088a9ff65a", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -3,6 +3,7 @@\n \n pub const ANY_TRAIT: [&str; 3] = [\"std\", \"any\", \"Any\"];\n pub const ARC: [&str; 3] = [\"alloc\", \"sync\", \"Arc\"];\n+pub const ARC_PTR_EQ: [&str; 4] = [\"alloc\", \"sync\", \"Arc\", \"ptr_eq\"];\n pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n@@ -74,6 +75,7 @@ pub const PATH: [&str; 3] = [\"std\", \"path\", \"Path\"];\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n+pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];\n@@ -90,6 +92,7 @@ pub const RANGE_TO_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeToInclusive\"];\n pub const RANGE_TO_INCLUSIVE_STD: [&str; 3] = [\"std\", \"ops\", \"RangeToInclusive\"];\n pub const RANGE_TO_STD: [&str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n+pub const RC_PTR_EQ: [&str; 4] = [\"alloc\", \"rc\", \"Rc\", \"ptr_eq\"];\n pub const RECEIVER: [&str; 4] = [\"std\", \"sync\", \"mpsc\", \"Receiver\"];\n pub const REGEX: [&str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];"}, {"sha": "fa51af156efd7378a1326acdfb37563e2b2189b0", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 361] = [\n+pub const ALL_LINTS: [Lint; 363] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -623,6 +623,13 @@ pub const ALL_LINTS: [Lint; 361] = [\n         deprecation: None,\n         module: \"misc\",\n     },\n+    Lint {\n+        name: \"fn_address_comparisons\",\n+        group: \"correctness\",\n+        desc: \"comparison with an address of a function item\",\n+        deprecation: None,\n+        module: \"unnamed_address\",\n+    },\n     Lint {\n         name: \"fn_params_excessive_bools\",\n         group: \"pedantic\",\n@@ -2408,6 +2415,13 @@ pub const ALL_LINTS: [Lint; 361] = [\n         deprecation: None,\n         module: \"verbose_file_reads\",\n     },\n+    Lint {\n+        name: \"vtable_address_comparisons\",\n+        group: \"correctness\",\n+        desc: \"comparison with an address of a trait vtable\",\n+        deprecation: None,\n+        module: \"unnamed_address\",\n+    },\n     Lint {\n         name: \"while_immutable_condition\",\n         group: \"correctness\","}, {"sha": "362dcb4fd80ca350d3220060fe1139786b68754f", "filename": "tests/ui/fn_address_comparisons.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/tests%2Fui%2Ffn_address_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/tests%2Fui%2Ffn_address_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_address_comparisons.rs?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -0,0 +1,20 @@\n+use std::fmt::Debug;\n+use std::ptr;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+fn a() {}\n+\n+#[warn(clippy::fn_address_comparisons)]\n+fn main() {\n+    type F = fn();\n+    let f: F = a;\n+    let g: F = f;\n+\n+    // These should fail:\n+    let _ = f == a;\n+    let _ = f != a;\n+\n+    // These should be fine:\n+    let _ = f == g;\n+}"}, {"sha": "9c1b5419a4319a7249fe196357db1ddf491cce64", "filename": "tests/ui/fn_address_comparisons.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/tests%2Fui%2Ffn_address_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/tests%2Fui%2Ffn_address_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_address_comparisons.stderr?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -0,0 +1,16 @@\n+error: comparing with a non-unique address of a function item\n+  --> $DIR/fn_address_comparisons.rs:15:13\n+   |\n+LL |     let _ = f == a;\n+   |             ^^^^^^\n+   |\n+   = note: `-D clippy::fn-address-comparisons` implied by `-D warnings`\n+\n+error: comparing with a non-unique address of a function item\n+  --> $DIR/fn_address_comparisons.rs:16:13\n+   |\n+LL |     let _ = f != a;\n+   |             ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c91d96ee18a31972c1856196c149856634d8dbba", "filename": "tests/ui/vtable_address_comparisons.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/tests%2Fui%2Fvtable_address_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/tests%2Fui%2Fvtable_address_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvtable_address_comparisons.rs?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -0,0 +1,42 @@\n+use std::fmt::Debug;\n+use std::ptr;\n+use std::rc::Rc;\n+use std::sync::Arc;\n+\n+#[warn(clippy::vtable_address_comparisons)]\n+fn main() {\n+    let a: *const dyn Debug = &1 as &dyn Debug;\n+    let b: *const dyn Debug = &1 as &dyn Debug;\n+\n+    // These should fail:\n+    let _ = a == b;\n+    let _ = a != b;\n+    let _ = a < b;\n+    let _ = a <= b;\n+    let _ = a > b;\n+    let _ = a >= b;\n+    ptr::eq(a, b);\n+\n+    let a = &1 as &dyn Debug;\n+    let b = &1 as &dyn Debug;\n+    ptr::eq(a, b);\n+\n+    let a: Rc<dyn Debug> = Rc::new(1);\n+    Rc::ptr_eq(&a, &a);\n+\n+    let a: Arc<dyn Debug> = Arc::new(1);\n+    Arc::ptr_eq(&a, &a);\n+\n+    // These should be fine:\n+    let a = &1;\n+    ptr::eq(a, a);\n+\n+    let a = Rc::new(1);\n+    Rc::ptr_eq(&a, &a);\n+\n+    let a = Arc::new(1);\n+    Arc::ptr_eq(&a, &a);\n+\n+    let a: &[u8] = b\"\";\n+    ptr::eq(a, a);\n+}"}, {"sha": "76bd57217d784323c9a86f2b2881f033daad7e13", "filename": "tests/ui/vtable_address_comparisons.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b77b219280eb8e511f3ed28bf894ab09fdde1e03/tests%2Fui%2Fvtable_address_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b77b219280eb8e511f3ed28bf894ab09fdde1e03/tests%2Fui%2Fvtable_address_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvtable_address_comparisons.stderr?ref=b77b219280eb8e511f3ed28bf894ab09fdde1e03", "patch": "@@ -0,0 +1,83 @@\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:12:13\n+   |\n+LL |     let _ = a == b;\n+   |             ^^^^^^\n+   |\n+   = note: `-D clippy::vtable-address-comparisons` implied by `-D warnings`\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:13:13\n+   |\n+LL |     let _ = a != b;\n+   |             ^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:14:13\n+   |\n+LL |     let _ = a < b;\n+   |             ^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:15:13\n+   |\n+LL |     let _ = a <= b;\n+   |             ^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:16:13\n+   |\n+LL |     let _ = a > b;\n+   |             ^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:17:13\n+   |\n+LL |     let _ = a >= b;\n+   |             ^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:18:5\n+   |\n+LL |     ptr::eq(a, b);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:22:5\n+   |\n+LL |     ptr::eq(a, b);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:25:5\n+   |\n+LL |     Rc::ptr_eq(&a, &a);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: comparing trait object pointers compares a non-unique vtable address\n+  --> $DIR/vtable_address_comparisons.rs:28:5\n+   |\n+LL |     Arc::ptr_eq(&a, &a);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider extracting and comparing data pointers only\n+\n+error: aborting due to 10 previous errors\n+"}]}