{"sha": "cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmODM0MWZjOWUxYzE4Yzk3M2E2NzQ0ZWNkN2ViYjk3YWRiZDMwMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-16T18:31:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-16T18:31:46Z"}, "message": "auto merge of #6457 : nikomatsakis/rust/issue-6308-closure-bounds, r=brson\n\nAdd BuiltinBounds to closure type: parse and handle subtyping,\r\nbut do not integrate with kindck etc (requires a snapshot first)\r\n\r\nr? @brson", "tree": {"sha": "226edd1b4ba496dedd2c4aeb450b49384d0845d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226edd1b4ba496dedd2c4aeb450b49384d0845d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "html_url": "https://github.com/rust-lang/rust/commit/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53196bb364426fb2b8db16f6748836779cd031c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/53196bb364426fb2b8db16f6748836779cd031c7", "html_url": "https://github.com/rust-lang/rust/commit/53196bb364426fb2b8db16f6748836779cd031c7"}, {"sha": "035c01af93fd23f10e233a8a9b651af20744e1d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/035c01af93fd23f10e233a8a9b651af20744e1d1", "html_url": "https://github.com/rust-lang/rust/commit/035c01af93fd23f10e233a8a9b651af20744e1d1"}], "stats": {"total": 322, "additions": 261, "deletions": 61}, "files": [{"sha": "55a0755f5e3f9bdb2c2935b0cde80174ed23600a", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -470,12 +470,14 @@ fn parse_closure_ty(st: @mut PState, conv: conv_did) -> ty::ClosureTy {\n     let purity = parse_purity(next(st));\n     let onceness = parse_onceness(next(st));\n     let region = parse_region(st);\n+    let bounds = parse_bounds(st, conv);\n     let sig = parse_sig(st, conv);\n     ty::ClosureTy {\n         purity: purity,\n         sigil: sigil,\n         onceness: onceness,\n         region: region,\n+        bounds: bounds.builtin_bounds,\n         sig: sig\n     }\n }\n@@ -540,10 +542,10 @@ pub fn parse_type_param_def_data(data: @~[u8], start: uint,\n \n fn parse_type_param_def(st: @mut PState, conv: conv_did) -> ty::TypeParameterDef {\n     ty::TypeParameterDef {def_id: parse_def(st, NominalType, conv),\n-                          bounds: parse_bounds(st, conv)}\n+                          bounds: @parse_bounds(st, conv)}\n }\n \n-fn parse_bounds(st: @mut PState, conv: conv_did) -> @ty::ParamBounds {\n+fn parse_bounds(st: @mut PState, conv: conv_did) -> ty::ParamBounds {\n     let mut param_bounds = ty::ParamBounds {\n         builtin_bounds: ty::EmptyBuiltinBounds(),\n         trait_bounds: ~[]\n@@ -566,7 +568,7 @@ fn parse_bounds(st: @mut PState, conv: conv_did) -> @ty::ParamBounds {\n                 param_bounds.trait_bounds.push(@parse_trait_ref(st, conv));\n             }\n             '.' => {\n-                return @param_bounds;\n+                return param_bounds;\n             }\n             _ => {\n                 fail!(\"parse_bounds: bad bounds\")"}, {"sha": "5f799f4994677fd8121e5216d7e524439e191c0b", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -380,6 +380,9 @@ fn enc_closure_ty(w: @io::Writer, cx: @ctxt, ft: &ty::ClosureTy) {\n     enc_purity(w, ft.purity);\n     enc_onceness(w, ft.onceness);\n     enc_region(w, cx, ft.region);\n+    let bounds = ty::ParamBounds {builtin_bounds: ft.bounds,\n+                                  trait_bounds: ~[]};\n+    enc_bounds(w, cx, &bounds);\n     enc_fn_sig(w, cx, &ft.sig);\n }\n \n@@ -392,7 +395,7 @@ fn enc_fn_sig(w: @io::Writer, cx: @ctxt, fsig: &ty::FnSig) {\n     enc_ty(w, cx, fsig.output);\n }\n \n-fn enc_bounds(w: @io::Writer, cx: @ctxt, bs: @ty::ParamBounds) {\n+fn enc_bounds(w: @io::Writer, cx: @ctxt, bs: &ty::ParamBounds) {\n     for bs.builtin_bounds.each |bound| {\n         match bound {\n             ty::BoundOwned => w.write_char('S'),"}, {"sha": "dd5658d7600fded01ac2f3cc625a7434b13ba628", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -20,6 +20,7 @@ use middle::lint::{allow, level, unused_imports};\n use middle::lint::{get_lint_level, get_lint_settings_level};\n use middle::pat_util::pat_bindings;\n \n+use syntax::ast::{TyParamBound, ty_closure};\n use syntax::ast::{RegionTyParamBound, TraitTyParamBound, _mod, add, arm};\n use syntax::ast::{binding_mode, bitand, bitor, bitxor, blk};\n use syntax::ast::{bind_infer, bind_by_ref, bind_by_copy};\n@@ -3732,14 +3733,20 @@ pub impl Resolver {\n                                type_parameters: &OptVec<TyParam>,\n                                visitor: ResolveVisitor) {\n         for type_parameters.each |type_parameter| {\n-            for type_parameter.bounds.each |&bound| {\n-                match bound {\n-                    TraitTyParamBound(tref) => {\n-                        self.resolve_trait_reference(tref, visitor)\n-                    }\n-                    RegionTyParamBound => {}\n-                }\n+            for type_parameter.bounds.each |bound| {\n+                self.resolve_type_parameter_bound(bound, visitor);\n+            }\n+        }\n+    }\n+\n+    fn resolve_type_parameter_bound(@mut self,\n+                                    type_parameter_bound: &TyParamBound,\n+                                    visitor: ResolveVisitor) {\n+        match *type_parameter_bound {\n+            TraitTyParamBound(tref) => {\n+                self.resolve_trait_reference(tref, visitor)\n             }\n+            RegionTyParamBound => {}\n         }\n     }\n \n@@ -4070,6 +4077,13 @@ pub impl Resolver {\n                 }\n             }\n \n+            ty_closure(c) => {\n+                for c.bounds.each |bound| {\n+                    self.resolve_type_parameter_bound(bound, visitor);\n+                }\n+                visit_ty(ty, (), visitor);\n+            }\n+\n             _ => {\n                 // Just resolve embedded types.\n                 visit_ty(ty, (), visitor);"}, {"sha": "fd545ca2c6ea8b70e7e783513b016ce7bfd9c680", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -818,6 +818,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                 sigil: ast::BorrowedSigil,\n                 onceness: ast::Many,\n                 region: ty::re_bound(ty::br_anon(0)),\n+                bounds: ty::EmptyBuiltinBounds(),\n                 sig: FnSig {\n                     bound_lifetime_names: opt_vec::Empty,\n                     inputs: ~[ star_u8 ],"}, {"sha": "ccc906f2ee8afceddeb11a19a2c3aaf2931e9b97", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -330,6 +330,7 @@ pub fn normalize_for_monomorphization(tcx: ty::ctxt,\n                 sigil: sigil,\n                 onceness: ast::Many,\n                 region: ty::re_static,\n+                bounds: ty::EmptyBuiltinBounds(),\n                 sig: ty::FnSig {bound_lifetime_names: opt_vec::Empty,\n                                 inputs: ~[],\n                                 output: ty::mk_nil()}})"}, {"sha": "fe1326fcdca3d70064b091aa13be7e25461946f0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -22,7 +22,7 @@ use middle::typeck;\n use middle;\n use util::ppaux::{note_and_explain_region, bound_region_to_str};\n use util::ppaux::{trait_store_to_str, ty_to_str, vstore_to_str};\n-use util::ppaux::Repr;\n+use util::ppaux::{Repr, UserString};\n use util::common::{indenter};\n use util::enum_set::{EnumSet, CLike};\n \n@@ -390,7 +390,8 @@ pub struct ClosureTy {\n     sigil: ast::Sigil,\n     onceness: ast::Onceness,\n     region: Region,\n-    sig: FnSig\n+    bounds: BuiltinBounds,\n+    sig: FnSig,\n }\n \n /**\n@@ -685,6 +686,7 @@ pub enum type_err {\n     terr_int_mismatch(expected_found<IntVarValue>),\n     terr_float_mismatch(expected_found<ast::float_ty>),\n     terr_traits(expected_found<ast::def_id>),\n+    terr_builtin_bounds(expected_found<BuiltinBounds>),\n }\n \n #[deriving(Eq, IterBytes)]\n@@ -707,6 +709,15 @@ pub fn EmptyBuiltinBounds() -> BuiltinBounds {\n     EnumSet::empty()\n }\n \n+pub fn AllBuiltinBounds() -> BuiltinBounds {\n+    let mut set = EnumSet::empty();\n+    set.add(BoundCopy);\n+    set.add(BoundStatic);\n+    set.add(BoundOwned);\n+    set.add(BoundConst);\n+    set\n+}\n+\n impl CLike for BuiltinBound {\n     pub fn to_uint(&self) -> uint {\n         *self as uint\n@@ -3169,6 +3180,7 @@ pub fn adjust_ty(cx: ctxt,\n                                        sigil: s,\n                                        onceness: ast::Many,\n                                        region: r,\n+                                       bounds: ty::AllBuiltinBounds(),\n                                        sig: copy b.sig})\n                 }\n                 ref b => {\n@@ -3697,6 +3709,19 @@ pub fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n                  item_path_str(cx, values.expected),\n                  item_path_str(cx, values.found))\n         }\n+        terr_builtin_bounds(values) => {\n+            if values.expected.is_empty() {\n+                fmt!(\"expected no bounds but found `%s`\",\n+                     values.found.user_string(cx))\n+            } else if values.found.is_empty() {\n+                fmt!(\"expected bounds `%s` but found no bounds\",\n+                     values.expected.user_string(cx))\n+            } else {\n+                fmt!(\"expected bounds `%s` but found bounds `%s`\",\n+                     values.expected.user_string(cx),\n+                     values.found.user_string(cx))\n+            }\n+        }\n         terr_self_substs => {\n             ~\"inconsistent self substitution\" // XXX this is more of a bug\n         }"}, {"sha": "222493b05645601188e5b2c3a635834c0c38d460", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 76, "deletions": 12, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -59,6 +59,7 @@ use middle::ty;\n use middle::typeck::rscope::in_binding_rscope;\n use middle::typeck::rscope::{region_scope, RegionError};\n use middle::typeck::rscope::RegionParamNames;\n+use middle::typeck::lookup_def_tcx;\n \n use syntax::abi::AbiSet;\n use syntax::{ast, ast_util};\n@@ -220,7 +221,6 @@ pub fn ast_path_to_trait_ref<AC:AstConv,RS:region_scope + Copy + 'static>(\n     return trait_ref;\n }\n \n-\n pub fn ast_path_to_ty<AC:AstConv,RS:region_scope + Copy + 'static>(\n         this: &AC,\n         rscope: &RS,\n@@ -377,11 +377,13 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + 'static>(\n                                             bf.abis, &bf.lifetimes, &bf.decl))\n       }\n       ast::ty_closure(ref f) => {\n+          let bounds = conv_builtin_bounds(this.tcx(), &f.bounds);\n           let fn_decl = ty_of_closure(this,\n                                       rscope,\n                                       f.sigil,\n                                       f.purity,\n                                       f.onceness,\n+                                      bounds,\n                                       f.region,\n                                       &f.decl,\n                                       None,\n@@ -646,17 +648,18 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + 'static>(\n }\n \n pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + 'static>(\n-        this: &AC,\n-        rscope: &RS,\n-        sigil: ast::Sigil,\n-        purity: ast::purity,\n-        onceness: ast::Onceness,\n-        opt_lifetime: Option<@ast::Lifetime>,\n-        decl: &ast::fn_decl,\n-        expected_sig: Option<ty::FnSig>,\n-        lifetimes: &OptVec<ast::Lifetime>,\n-        span: span)\n-     -> ty::ClosureTy\n+    this: &AC,\n+    rscope: &RS,\n+    sigil: ast::Sigil,\n+    purity: ast::purity,\n+    onceness: ast::Onceness,\n+    bounds: ty::BuiltinBounds,\n+    opt_lifetime: Option<@ast::Lifetime>,\n+    decl: &ast::fn_decl,\n+    expected_sig: Option<ty::FnSig>,\n+    lifetimes: &OptVec<ast::Lifetime>,\n+    span: span)\n+    -> ty::ClosureTy\n {\n     // The caller should not both provide explicit bound lifetime\n     // names and expected types.  Either we infer the bound lifetime\n@@ -713,8 +716,69 @@ pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + 'static>(\n         sigil: sigil,\n         onceness: onceness,\n         region: bound_region,\n+        bounds: bounds,\n         sig: ty::FnSig {bound_lifetime_names: bound_lifetime_names,\n                         inputs: input_tys,\n                         output: output_ty}\n     }\n }\n+\n+fn conv_builtin_bounds(tcx: ty::ctxt,\n+                       ast_bounds: &OptVec<ast::TyParamBound>)\n+                       -> ty::BuiltinBounds {\n+    //! Converts a list of bounds from the AST into a `BuiltinBounds`\n+    //! struct. Reports an error if any of the bounds that appear\n+    //! in the AST refer to general traits and not the built-in traits\n+    //! like `Copy` or `Owned`. Used to translate the bounds that\n+    //! appear in closure and trait types, where only builtin bounds are\n+    //! legal.\n+\n+    let mut builtin_bounds = ty::EmptyBuiltinBounds();\n+    for ast_bounds.each |ast_bound| {\n+        match *ast_bound {\n+            ast::TraitTyParamBound(b) => {\n+                match lookup_def_tcx(tcx, b.path.span, b.ref_id) {\n+                    ast::def_trait(trait_did) => {\n+                        if try_add_builtin_trait(tcx,\n+                                                 trait_did,\n+                                                 &mut builtin_bounds) {\n+                            loop; // success\n+                        }\n+                    }\n+                    _ => { }\n+                }\n+                tcx.sess.span_fatal(\n+                    b.path.span,\n+                    fmt!(\"only the builtin traits can be used \\\n+                          as closure or object bounds\"));\n+            }\n+            ast::RegionTyParamBound => {\n+                builtin_bounds.add(ty::BoundStatic);\n+            }\n+        }\n+    }\n+    builtin_bounds\n+}\n+\n+pub fn try_add_builtin_trait(tcx: ty::ctxt,\n+                             trait_def_id: ast::def_id,\n+                             builtin_bounds: &mut ty::BuiltinBounds) -> bool {\n+    //! Checks whether `trait_ref` refers to one of the builtin\n+    //! traits, like `Copy` or `Owned`, and adds the corresponding\n+    //! bound to the set `builtin_bounds` if so. Returns true if `trait_ref`\n+    //! is a builtin trait.\n+\n+    let li = &tcx.lang_items;\n+    if trait_def_id == li.owned_trait() {\n+        builtin_bounds.add(ty::BoundOwned);\n+        true\n+    } else if trait_def_id == li.copy_trait() {\n+        builtin_bounds.add(ty::BoundCopy);\n+        true\n+    } else if trait_def_id == li.const_trait() {\n+        builtin_bounds.add(ty::BoundConst);\n+        true\n+    } else {\n+        false\n+    }\n+}"}, {"sha": "8d32bb7f677566c11b76e2bbfb267599d0b0e34a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -1661,19 +1661,22 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let (expected_sig,\n              expected_purity,\n              expected_sigil,\n-             expected_onceness) = {\n+             expected_onceness,\n+             expected_bounds) = {\n             match expected_sty {\n                 Some(ty::ty_closure(ref cenv)) => {\n                     let id = expr.id;\n                     let (_, _, sig) =\n                         replace_bound_regions_in_fn_sig(\n                             tcx, @Nil, None, &cenv.sig,\n                             |br| ty::re_bound(ty::br_cap_avoid(id, @br)));\n-                    (Some(sig), cenv.purity, cenv.sigil, cenv.onceness)\n+                    (Some(sig), cenv.purity, cenv.sigil,\n+                     cenv.onceness, cenv.bounds)\n                 }\n                 _ => {\n                     // Not an error! Means we're inferring the closure type\n-                    (None, ast::impure_fn, ast::BorrowedSigil, ast::Many)\n+                    (None, ast::impure_fn, ast::BorrowedSigil,\n+                     ast::Many, ty::EmptyBuiltinBounds())\n                 }\n             }\n         };\n@@ -1687,15 +1690,16 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n \n         // construct the function type\n         let fn_ty = astconv::ty_of_closure(fcx,\n-                                               fcx,\n-                                               sigil,\n-                                               purity,\n-                                               expected_onceness,\n-                                               None,\n-                                               decl,\n-                                               expected_sig,\n-                                               &opt_vec::Empty,\n-                                               expr.span);\n+                                           fcx,\n+                                           sigil,\n+                                           purity,\n+                                           expected_onceness,\n+                                           expected_bounds,\n+                                           None,\n+                                           decl,\n+                                           expected_sig,\n+                                           &opt_vec::Empty,\n+                                           expr.span);\n \n         let fty_sig;\n         let fty = if error_happened {\n@@ -3526,6 +3530,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n             sigil: ast::BorrowedSigil,\n             onceness: ast::Once,\n             region: ty::re_bound(ty::br_anon(0)),\n+            bounds: ty::EmptyBuiltinBounds(),\n             sig: ty::FnSig {\n                 bound_lifetime_names: opt_vec::Empty,\n                 inputs: ~[ty::mk_imm_ptr(ccx.tcx, ty::mk_mach_uint(ast::ty_u8))],"}, {"sha": "6c7f73177fadf3ecf1bde2aac988f83e474eb9ec", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -1207,25 +1207,21 @@ pub fn ty_generics(ccx: &CrateCtxt,\n             builtin_bounds: ty::EmptyBuiltinBounds(),\n             trait_bounds: ~[]\n         };\n-        for ast_bounds.each |b| {\n-            match b {\n-                &TraitTyParamBound(b) => {\n-                    let li = &ccx.tcx.lang_items;\n+        for ast_bounds.each |ast_bound| {\n+            match *ast_bound {\n+                TraitTyParamBound(b) => {\n                     let ty = ty::mk_param(ccx.tcx, param_ty.idx, param_ty.def_id);\n                     let trait_ref = instantiate_trait_ref(ccx, b, rp, generics, ty);\n-                    if trait_ref.def_id == li.owned_trait() {\n-                        param_bounds.builtin_bounds.add(ty::BoundOwned);\n-                    } else if trait_ref.def_id == li.copy_trait() {\n-                        param_bounds.builtin_bounds.add(ty::BoundCopy);\n-                    } else if trait_ref.def_id == li.const_trait() {\n-                        param_bounds.builtin_bounds.add(ty::BoundConst);\n-                    } else {\n+                    if !astconv::try_add_builtin_trait(\n+                        ccx.tcx, trait_ref.def_id,\n+                        &mut param_bounds.builtin_bounds)\n+                    {\n                         // Must be a user-defined trait\n                         param_bounds.trait_bounds.push(trait_ref);\n                     }\n                 }\n \n-                &RegionTyParamBound => {\n+                RegionTyParamBound => {\n                     param_bounds.builtin_bounds.add(ty::BoundStatic);\n                 }\n             }"}, {"sha": "3c337d17f8684e0d012d42be1182368bca3f5c0b", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -56,6 +56,7 @@\n \n use middle::ty::{FloatVar, FnSig, IntVar, TyVar};\n use middle::ty::{IntType, UintType, substs};\n+use middle::ty::{BuiltinBounds};\n use middle::ty;\n use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lub::Lub;\n@@ -100,6 +101,7 @@ pub trait Combine {\n     fn purities(&self, a: purity, b: purity) -> cres<purity>;\n     fn abis(&self, a: AbiSet, b: AbiSet) -> cres<AbiSet>;\n     fn oncenesses(&self, a: Onceness, b: Onceness) -> cres<Onceness>;\n+    fn bounds(&self, a: BuiltinBounds, b: BuiltinBounds) -> cres<BuiltinBounds>;\n     fn contraregions(&self, a: ty::Region, b: ty::Region)\n                   -> cres<ty::Region>;\n     fn regions(&self, a: ty::Region, b: ty::Region) -> cres<ty::Region>;\n@@ -372,11 +374,13 @@ pub fn super_closure_tys<C:Combine>(\n     let r = if_ok!(this.contraregions(a_f.region, b_f.region));\n     let purity = if_ok!(this.purities(a_f.purity, b_f.purity));\n     let onceness = if_ok!(this.oncenesses(a_f.onceness, b_f.onceness));\n+    let bounds = if_ok!(this.bounds(a_f.bounds, b_f.bounds));\n     let sig = if_ok!(this.fn_sigs(&a_f.sig, &b_f.sig));\n     Ok(ty::ClosureTy {purity: purity,\n                       sigil: p,\n                       onceness: onceness,\n                       region: r,\n+                      bounds: bounds,\n                       sig: sig})\n }\n "}, {"sha": "9ade6de6cf4fd7f4436d6f1f3b65c02c15a17f7f", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty::{BuiltinBounds};\n use middle::ty::RegionVid;\n use middle::ty;\n use middle::typeck::infer::combine::*;\n@@ -114,6 +115,12 @@ impl Combine for Glb {\n         }\n     }\n \n+    fn bounds(&self, a: BuiltinBounds, b: BuiltinBounds) -> cres<BuiltinBounds> {\n+        // More bounds is a subtype of fewer bounds, so\n+        // the GLB (mutual subtype) is the union.\n+        Ok(a.union(b))\n+    }\n+\n     fn regions(&self, a: ty::Region, b: ty::Region) -> cres<ty::Region> {\n         debug!(\"%s.regions(%?, %?)\",\n                self.tag(),"}, {"sha": "82fd4e3ae6dd69295604b35f18293683f9468ee4", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty::{BuiltinBounds};\n use middle::ty::RegionVid;\n use middle::ty;\n use middle::typeck::infer::combine::*;\n@@ -100,6 +101,12 @@ impl Combine for Lub {\n         }\n     }\n \n+    fn bounds(&self, a: BuiltinBounds, b: BuiltinBounds) -> cres<BuiltinBounds> {\n+        // More bounds is a subtype of fewer bounds, so\n+        // the LUB (mutual supertype) is the intersection.\n+        Ok(a.intersection(b))\n+    }\n+\n     fn contraregions(&self, a: ty::Region, b: ty::Region)\n                     -> cres<ty::Region> {\n         return Glb(**self).regions(a, b);"}, {"sha": "8da3d7bfa000d0f8a828f5092ba4671a9c26bd11", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty::{BuiltinBounds};\n use middle::ty;\n use middle::ty::TyVar;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n@@ -99,6 +100,19 @@ impl Combine for Sub {\n         })\n     }\n \n+    fn bounds(&self, a: BuiltinBounds, b: BuiltinBounds) -> cres<BuiltinBounds> {\n+        // More bounds is a subtype of fewer bounds.\n+        //\n+        // e.g., fn:Copy() <: fn(), because the former is a function\n+        // that only closes over copyable things, but the latter is\n+        // any function at all.\n+        if a.contains(b) {\n+            Ok(a)\n+        } else {\n+            Err(ty::terr_builtin_bounds(expected_found(self, a, b)))\n+        }\n+    }\n+\n     fn tys(&self, a: ty::t, b: ty::t) -> cres<ty::t> {\n         debug!(\"%s.tys(%s, %s)\", self.tag(),\n                a.inf_str(self.infcx), b.inf_str(self.infcx));"}, {"sha": "801561350ae44a4b6a6852194db932506de794bb", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -12,7 +12,9 @@ use core;\n \n #[deriving(Eq, IterBytes)]\n pub struct EnumSet<E> {\n-    bits: uint\n+    // We must maintain the invariant that no bits are set\n+    // for which no variant exists\n+    priv bits: uint\n }\n \n pub trait CLike {\n@@ -37,10 +39,18 @@ pub impl<E:CLike> EnumSet<E> {\n         (self.bits & e.bits) != 0\n     }\n \n+    fn intersection(&self, e: EnumSet<E>) -> EnumSet<E> {\n+        EnumSet {bits: self.bits & e.bits}\n+    }\n+\n     fn contains(&self, e: EnumSet<E>) -> bool {\n         (self.bits & e.bits) == e.bits\n     }\n \n+    fn union(&self, e: EnumSet<E>) -> EnumSet<E> {\n+        EnumSet {bits: self.bits | e.bits}\n+    }\n+\n     fn add(&mut self, e: E) {\n         self.bits |= bit(e);\n     }"}, {"sha": "dcbbd7ab53111ae7728a25ff6f3a4af426779f5d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -828,7 +828,8 @@ pub struct TyClosure {\n     lifetimes: OptVec<Lifetime>,\n     purity: purity,\n     onceness: Onceness,\n-    decl: fn_decl\n+    decl: fn_decl,\n+    bounds: OptVec<TyParamBound>\n }\n \n #[deriving(Eq, Encodable, Decodable)]"}, {"sha": "275a7b963a4bf8602ab93db12be4b9229772b54d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -589,6 +589,7 @@ pub fn noop_fold_ty(t: &ty_, fld: @ast_fold) -> ty_ {\n                 purity: f.purity,\n                 region: f.region,\n                 onceness: f.onceness,\n+                bounds: f.bounds.map(|x| fold_ty_param_bound(x, fld)),\n                 decl: fold_fn_decl(&f.decl, fld),\n                 lifetimes: copy f.lifetimes,\n             })"}, {"sha": "25b45a5f3b5cc013c2e93269ffd81813544e0564", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -395,12 +395,13 @@ pub impl Parser {\n                         -> ty_ {\n         /*\n \n-        (&|~|@) ['r] [pure|unsafe] [once] fn <'lt> (S) -> T\n-        ^~~~~~^ ^~~^ ^~~~~~~~~~~~^ ^~~~~^    ^~~~^ ^~^    ^\n-           |     |     |             |         |    |     |\n-           |     |     |             |         |    |   Return type\n-           |     |     |             |         |  Argument types\n-           |     |     |             |     Lifetimes\n+        (&|~|@) ['r] [pure|unsafe] [once] fn [:Bounds] <'lt> (S) -> T\n+        ^~~~~~^ ^~~^ ^~~~~~~~~~~~^ ^~~~~^    ^~~~~~~~^ ^~~~^ ^~^    ^\n+           |     |     |             |           |       |    |     |\n+           |     |     |             |           |       |    |   Return type\n+           |     |     |             |           |       |  Argument types\n+           |     |     |             |           |   Lifetimes\n+           |     |     |             |       Closure bounds\n            |     |     |          Once-ness (a.k.a., affine)\n            |     |   Purity\n            | Lifetime bound\n@@ -414,6 +415,7 @@ pub impl Parser {\n         let purity = self.parse_unsafety();\n         let onceness = parse_onceness(self);\n         self.expect_keyword(\"fn\");\n+        let bounds = self.parse_optional_ty_param_bounds();\n \n         if self.parse_fn_ty_sigil().is_some() {\n             self.obsolete(*self.span, ObsoletePostFnTySigil);\n@@ -426,6 +428,7 @@ pub impl Parser {\n             region: region,\n             purity: purity,\n             onceness: onceness,\n+            bounds: bounds,\n             decl: decl,\n             lifetimes: lifetimes,\n         });\n@@ -2851,9 +2854,9 @@ pub impl Parser {\n     // matches optbounds = ( ( : ( boundseq )? )? )\n     // where   boundseq  = ( bound + boundseq ) | bound\n     // and     bound     = 'static | ty\n-    fn parse_optional_ty_param_bounds(&self) -> @OptVec<TyParamBound> {\n+    fn parse_optional_ty_param_bounds(&self) -> OptVec<TyParamBound> {\n         if !self.eat(&token::COLON) {\n-            return @opt_vec::Empty;\n+            return opt_vec::Empty;\n         }\n \n         let mut result = opt_vec::Empty;\n@@ -2907,13 +2910,13 @@ pub impl Parser {\n             }\n         }\n \n-        return @result;\n+        return result;\n     }\n \n     // matches typaram = IDENT optbounds\n     fn parse_ty_param(&self) -> TyParam {\n         let ident = self.parse_ident();\n-        let bounds = self.parse_optional_ty_param_bounds();\n+        let bounds = @self.parse_optional_ty_param_bounds();\n         ast::TyParam { ident: ident, id: self.get_id(), bounds: bounds }\n     }\n "}, {"sha": "a3484cb33dcaecb81a3260e72281eb9e7be5a3e8", "filename": "src/test/compile-fail/closure-bounds-not-builtin.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-not-builtin.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -0,0 +1,8 @@\n+\n+trait Foo {}\n+\n+fn take(f: &fn:Foo()) {\n+    //~^ ERROR only the builtin traits can be used as closure or object bounds\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "ebec113cedc532136e1dd30361d4ea853f135893", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf8341fc9e1c18c973a6744ecd7ebb97adbd3025/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=cf8341fc9e1c18c973a6744ecd7ebb97adbd3025", "patch": "@@ -0,0 +1,34 @@\n+fn take_any(_: &fn()) {\n+}\n+\n+fn take_copyable(_: &fn:Copy()) {\n+}\n+\n+fn take_copyable_owned(_: &fn:Copy+Owned()) {\n+}\n+\n+fn give_any(f: &fn()) {\n+    take_any(f);\n+    take_copyable(f); //~ ERROR expected bounds `Copy` but found no bounds\n+    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Owned` but found no bounds\n+}\n+\n+fn give_copyable(f: &fn:Copy()) {\n+    take_any(f);\n+    take_copyable(f);\n+    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Owned` but found bounds `Copy`\n+}\n+\n+fn give_owned(f: &fn:Owned()) {\n+    take_any(f);\n+    take_copyable(f); //~ ERROR expected bounds `Copy` but found bounds `Owned`\n+    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Owned` but found bounds `Owned`\n+}\n+\n+fn give_copyable_owned(f: &fn:Copy+Owned()) {\n+    take_any(f);\n+    take_copyable(f);\n+    take_copyable_owned(f);\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}]}