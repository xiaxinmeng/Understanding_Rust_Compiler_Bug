{"sha": "5d6ee0db96aada145725838379f909bbb8aa2312", "node_id": "C_kwDOAAsO6NoAKDVkNmVlMGRiOTZhYWRhMTQ1NzI1ODM4Mzc5ZjkwOWJiYjhhYTIzMTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-10T02:27:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-10T02:27:43Z"}, "message": "Auto merge of #93836 - matthiaskrgr:rollup-d1ssiwl, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #91443 (Better suggestions when user tries to collect into an unsized `[_]`)\n - #91504 (`#[used(linker)]` attribute)\n - #93503 (debuginfo: Fix DW_AT_containing_type vtable debuginfo regression)\n - #93753 (Complete removal of #[main] attribute from compiler)\n - #93799 (Fix typo in `std::fmt` docs)\n - #93813 (Make a few cleanup MIR passes public)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f92e6e48436a2b3b0b6a9521b8dfe6515e3932f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f92e6e48436a2b3b0b6a9521b8dfe6515e3932f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d6ee0db96aada145725838379f909bbb8aa2312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d6ee0db96aada145725838379f909bbb8aa2312", "html_url": "https://github.com/rust-lang/rust/commit/5d6ee0db96aada145725838379f909bbb8aa2312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d6ee0db96aada145725838379f909bbb8aa2312/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7aca895980f25f6d2d3c48e10fd04656764d1e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7aca895980f25f6d2d3c48e10fd04656764d1e4", "html_url": "https://github.com/rust-lang/rust/commit/e7aca895980f25f6d2d3c48e10fd04656764d1e4"}, {"sha": "323880646d7595cf10f621163ae3f00a5861867f", "url": "https://api.github.com/repos/rust-lang/rust/commits/323880646d7595cf10f621163ae3f00a5861867f", "html_url": "https://github.com/rust-lang/rust/commit/323880646d7595cf10f621163ae3f00a5861867f"}], "stats": {"total": 628, "additions": 544, "deletions": 84}, "files": [{"sha": "ddc2b88191bd0e8e032d05e1220579ec09071fe7", "filename": "compiler/rustc_codegen_gcc/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -144,7 +144,7 @@ impl<'gcc, 'tcx> StaticMethods for CodegenCx<'gcc, 'tcx> {\n             // TODO(antoyo): set link section.\n         }\n \n-        if attrs.flags.contains(CodegenFnAttrFlags::USED) {\n+        if attrs.flags.contains(CodegenFnAttrFlags::USED) || attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER) {\n             self.add_used_global(global.to_rvalue());\n         }\n     }"}, {"sha": "6707de933522b4a569d77659125965981bb9cb9a", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -522,6 +522,9 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n             }\n \n             if attrs.flags.contains(CodegenFnAttrFlags::USED) {\n+                // `USED` and `USED_LINKER` can't be used together.\n+                assert!(!attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER));\n+\n                 // The semantics of #[used] in Rust only require the symbol to make it into the\n                 // object file. It is explicitly allowed for the linker to strip the symbol if it\n                 // is dead. As such, use llvm.compiler.used instead of llvm.used.\n@@ -530,6 +533,12 @@ impl<'ll> StaticMethods for CodegenCx<'ll, '_> {\n                 // in some versions of the gold linker.\n                 self.add_compiler_used_global(g);\n             }\n+            if attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER) {\n+                // `USED` and `USED_LINKER` can't be used together.\n+                assert!(!attrs.flags.contains(CodegenFnAttrFlags::USED));\n+\n+                self.add_used_global(g);\n+            }\n         }\n     }\n "}, {"sha": "da997dd98792fea8451cc8549c860f1244b901ac", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 146, "deletions": 35, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -21,6 +21,7 @@ use crate::value::Value;\n \n use cstr::cstr;\n use rustc_codegen_ssa::debuginfo::type_names::cpp_like_debuginfo;\n+use rustc_codegen_ssa::debuginfo::type_names::VTableNameKind;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n@@ -276,6 +277,12 @@ impl<'ll, 'tcx> TypeMap<'ll, 'tcx> {\n     ) -> String {\n         format!(\"{}_variant_part\", self.get_unique_type_id_as_string(enum_type_id))\n     }\n+\n+    /// Gets the `UniqueTypeId` for the type of a vtable.\n+    fn get_unique_type_id_of_vtable_type(&mut self, vtable_type_name: &str) -> UniqueTypeId {\n+        let interner_key = self.unique_id_interner.intern(vtable_type_name);\n+        interner_key\n+    }\n }\n \n /// A description of some recursive type. It can either be already finished (as\n@@ -351,14 +358,15 @@ impl<'ll, 'tcx> RecursiveTypeDescription<'ll, 'tcx> {\n \n                 // ... then create the member descriptions ...\n                 let member_descriptions = member_description_factory.create_member_descriptions(cx);\n+                let type_params = compute_type_parameters(cx, unfinished_type);\n \n                 // ... and attach them to the stub to complete it.\n                 set_members_of_composite_type(\n                     cx,\n-                    unfinished_type,\n                     member_holding_stub,\n                     member_descriptions,\n                     None,\n+                    type_params,\n                 );\n                 MetadataCreationResult::new(metadata_stub, true)\n             }\n@@ -983,7 +991,17 @@ fn foreign_type_metadata<'ll, 'tcx>(\n     debug!(\"foreign_type_metadata: {:?}\", t);\n \n     let name = compute_debuginfo_type_name(cx.tcx, t, false);\n-    create_struct_stub(cx, t, &name, unique_type_id, NO_SCOPE_METADATA, DIFlags::FlagZero)\n+    let (size, align) = cx.size_and_align_of(t);\n+    create_struct_stub(\n+        cx,\n+        size,\n+        align,\n+        &name,\n+        unique_type_id,\n+        NO_SCOPE_METADATA,\n+        DIFlags::FlagZero,\n+        None,\n+    )\n }\n \n fn param_type_metadata<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n@@ -1299,14 +1317,17 @@ fn prepare_struct_metadata<'ll, 'tcx>(\n     };\n \n     let containing_scope = get_namespace_for_item(cx, struct_def_id);\n+    let (size, align) = cx.size_and_align_of(struct_type);\n \n     let struct_metadata_stub = create_struct_stub(\n         cx,\n-        struct_type,\n+        size,\n+        align,\n         &struct_name,\n         unique_type_id,\n         Some(containing_scope),\n         DIFlags::FlagZero,\n+        None,\n     );\n \n     create_and_register_recursive_type_forward_declaration(\n@@ -1398,15 +1419,18 @@ fn prepare_tuple_metadata<'ll, 'tcx>(\n     unique_type_id: UniqueTypeId,\n     containing_scope: Option<&'ll DIScope>,\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n+    let (size, align) = cx.size_and_align_of(tuple_type);\n     let tuple_name = compute_debuginfo_type_name(cx.tcx, tuple_type, false);\n \n     let struct_stub = create_struct_stub(\n         cx,\n-        tuple_type,\n+        size,\n+        align,\n         &tuple_name[..],\n         unique_type_id,\n         containing_scope,\n         DIFlags::FlagZero,\n+        None,\n     );\n \n     create_and_register_recursive_type_forward_declaration(\n@@ -1581,13 +1605,14 @@ impl<'ll, 'tcx> EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     describe_enum_variant(cx, self.layout, variant_info, self_metadata);\n \n                 let member_descriptions = member_description_factory.create_member_descriptions(cx);\n+                let type_params = compute_type_parameters(cx, self.enum_type);\n \n                 set_members_of_composite_type(\n                     cx,\n-                    self.enum_type,\n                     variant_type_metadata,\n                     member_descriptions,\n                     Some(&self.common_members),\n+                    type_params,\n                 );\n                 vec![MemberDescription {\n                     name: variant_info.variant_name(),\n@@ -1648,13 +1673,14 @@ impl<'ll, 'tcx> EnumMemberDescriptionFactory<'ll, 'tcx> {\n \n                         let member_descriptions =\n                             member_desc_factory.create_member_descriptions(cx);\n+                        let type_params = compute_type_parameters(cx, self.enum_type);\n \n                         set_members_of_composite_type(\n                             cx,\n-                            self.enum_type,\n                             variant_type_metadata,\n                             member_descriptions,\n                             Some(&self.common_members),\n+                            type_params,\n                         );\n \n                         MemberDescription {\n@@ -1777,13 +1803,14 @@ impl<'ll, 'tcx> EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     );\n \n                     let member_descriptions = member_desc_factory.create_member_descriptions(cx);\n+                    let type_params = compute_type_parameters(cx, self.enum_type);\n \n                     set_members_of_composite_type(\n                         cx,\n-                        self.enum_type,\n                         variant_type_metadata,\n                         member_descriptions,\n                         Some(&self.common_members),\n+                        type_params,\n                     );\n \n                     let (size, align) =\n@@ -1823,13 +1850,14 @@ impl<'ll, 'tcx> EnumMemberDescriptionFactory<'ll, 'tcx> {\n \n                             let member_descriptions =\n                                 member_desc_factory.create_member_descriptions(cx);\n+                            let type_params = compute_type_parameters(cx, self.enum_type);\n \n                             set_members_of_composite_type(\n                                 cx,\n-                                self.enum_type,\n                                 variant_type_metadata,\n                                 member_descriptions,\n                                 Some(&self.common_members),\n+                                type_params,\n                             );\n \n                             let niche_value = calculate_niche_value(i);\n@@ -1965,13 +1993,18 @@ fn describe_enum_variant<'ll, 'tcx>(\n             .type_map\n             .borrow_mut()\n             .get_unique_type_id_of_enum_variant(cx, layout.ty, variant_name);\n+\n+        let (size, align) = cx.size_and_align_of(layout.ty);\n+\n         create_struct_stub(\n             cx,\n-            layout.ty,\n+            size,\n+            align,\n             variant_name,\n             unique_type_id,\n             Some(containing_scope),\n             DIFlags::FlagZero,\n+            None,\n         )\n     });\n \n@@ -2308,33 +2341,38 @@ fn composite_type_metadata<'ll, 'tcx>(\n     member_descriptions: Vec<MemberDescription<'ll>>,\n     containing_scope: Option<&'ll DIScope>,\n ) -> &'ll DICompositeType {\n+    let (size, align) = cx.size_and_align_of(composite_type);\n+\n     // Create the (empty) struct metadata node ...\n     let composite_type_metadata = create_struct_stub(\n         cx,\n-        composite_type,\n+        size,\n+        align,\n         composite_type_name,\n         composite_type_unique_id,\n         containing_scope,\n         DIFlags::FlagZero,\n+        None,\n     );\n+\n     // ... and immediately create and add the member descriptions.\n     set_members_of_composite_type(\n         cx,\n-        composite_type,\n         composite_type_metadata,\n         member_descriptions,\n         None,\n+        compute_type_parameters(cx, composite_type),\n     );\n \n     composite_type_metadata\n }\n \n fn set_members_of_composite_type<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n-    composite_type: Ty<'tcx>,\n     composite_type_metadata: &'ll DICompositeType,\n     member_descriptions: Vec<MemberDescription<'ll>>,\n     common_members: Option<&Vec<Option<&'ll DIType>>>,\n+    type_params: &'ll DIArray,\n ) {\n     // In some rare cases LLVM metadata uniquing would lead to an existing type\n     // description being used instead of a new one created in\n@@ -2361,13 +2399,12 @@ fn set_members_of_composite_type<'ll, 'tcx>(\n         member_metadata.extend(other_members.iter());\n     }\n \n-    let type_params = compute_type_parameters(cx, composite_type);\n     unsafe {\n-        let type_array = create_DIArray(DIB(cx), &member_metadata);\n+        let field_array = create_DIArray(DIB(cx), &member_metadata);\n         llvm::LLVMRustDICompositeTypeReplaceArrays(\n             DIB(cx),\n             composite_type_metadata,\n-            Some(type_array),\n+            Some(field_array),\n             Some(type_params),\n         );\n     }\n@@ -2420,14 +2457,14 @@ fn compute_type_parameters<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -\n /// with `set_members_of_composite_type()`.\n fn create_struct_stub<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n-    struct_type: Ty<'tcx>,\n-    struct_type_name: &str,\n+    size: Size,\n+    align: Align,\n+    type_name: &str,\n     unique_type_id: UniqueTypeId,\n     containing_scope: Option<&'ll DIScope>,\n     flags: DIFlags,\n+    vtable_holder: Option<&'ll DIType>,\n ) -> &'ll DICompositeType {\n-    let (struct_size, struct_align) = cx.size_and_align_of(struct_type);\n-\n     let type_map = debug_context(cx).type_map.borrow();\n     let unique_type_id = type_map.get_unique_type_id_as_string(unique_type_id);\n \n@@ -2440,17 +2477,17 @@ fn create_struct_stub<'ll, 'tcx>(\n         llvm::LLVMRustDIBuilderCreateStructType(\n             DIB(cx),\n             containing_scope,\n-            struct_type_name.as_ptr().cast(),\n-            struct_type_name.len(),\n+            type_name.as_ptr().cast(),\n+            type_name.len(),\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n-            struct_size.bits(),\n-            struct_align.bits() as u32,\n+            size.bits(),\n+            align.bits() as u32,\n             flags,\n             None,\n             empty_array,\n             0,\n-            None,\n+            vtable_holder,\n             unique_type_id.as_ptr().cast(),\n             unique_type_id.len(),\n         )\n@@ -2556,6 +2593,14 @@ pub fn create_global_var_metadata<'ll>(cx: &CodegenCx<'ll, '_>, def_id: DefId, g\n }\n \n /// Generates LLVM debuginfo for a vtable.\n+///\n+/// The vtable type looks like a struct with a field for each function pointer and super-trait\n+/// pointer it contains (plus the `size` and `align` fields).\n+///\n+/// Except for `size`, `align`, and `drop_in_place`, the field names don't try to mirror\n+/// the name of the method they implement. This can be implemented in the future once there\n+/// is a proper disambiguation scheme for dealing with methods from different traits that have\n+/// the same name.\n fn vtable_type_metadata<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     ty: Ty<'tcx>,\n@@ -2572,16 +2617,81 @@ fn vtable_type_metadata<'ll, 'tcx>(\n         COMMON_VTABLE_ENTRIES\n     };\n \n-    // FIXME: We describe the vtable as an array of *const () pointers. The length of the array is\n-    //        correct - but we could create a more accurate description, e.g. by describing it\n-    //        as a struct where each field has a name that corresponds to the name of the method\n-    //        it points to.\n-    //        However, this is not entirely straightforward because there might be multiple\n-    //        methods with the same name if the vtable is for multiple traits. So for now we keep\n-    //        things simple instead of adding some ad-hoc disambiguation scheme.\n-    let vtable_type = tcx.mk_array(tcx.mk_imm_ptr(tcx.types.unit), vtable_entries.len() as u64);\n+    // All function pointers are described as opaque pointers. This could be improved in the future\n+    // by describing them as actual function pointers.\n+    let void_pointer_ty = tcx.mk_imm_ptr(tcx.types.unit);\n+    let void_pointer_type_debuginfo = type_metadata(cx, void_pointer_ty);\n+    let usize_debuginfo = type_metadata(cx, tcx.types.usize);\n+    let (pointer_size, pointer_align) = cx.size_and_align_of(void_pointer_ty);\n+    // If `usize` is not pointer-sized and -aligned then the size and alignment computations\n+    // for the vtable as a whole would be wrong. Let's make sure this holds even on weird\n+    // platforms.\n+    assert_eq!(cx.size_and_align_of(tcx.types.usize), (pointer_size, pointer_align));\n+\n+    let vtable_type_name =\n+        compute_debuginfo_vtable_name(cx.tcx, ty, poly_trait_ref, VTableNameKind::Type);\n+    let unique_type_id = debug_context(cx)\n+        .type_map\n+        .borrow_mut()\n+        .get_unique_type_id_of_vtable_type(&vtable_type_name);\n+    let size = pointer_size * vtable_entries.len() as u64;\n+\n+    // This gets mapped to a DW_AT_containing_type attribute which allows GDB to correlate\n+    // the vtable to the type it is for.\n+    let vtable_holder = type_metadata(cx, ty);\n+\n+    let vtable_type_metadata = create_struct_stub(\n+        cx,\n+        size,\n+        pointer_align,\n+        &vtable_type_name,\n+        unique_type_id,\n+        NO_SCOPE_METADATA,\n+        DIFlags::FlagArtificial,\n+        Some(vtable_holder),\n+    );\n+\n+    // Create a field for each entry in the vtable.\n+    let fields: Vec<_> = vtable_entries\n+        .iter()\n+        .enumerate()\n+        .filter_map(|(index, vtable_entry)| {\n+            let (field_name, field_type) = match vtable_entry {\n+                ty::VtblEntry::MetadataDropInPlace => {\n+                    (\"drop_in_place\".to_string(), void_pointer_type_debuginfo)\n+                }\n+                ty::VtblEntry::Method(_) => {\n+                    // Note: This code does not try to give a proper name to each method\n+                    //       because there might be multiple methods with the same name\n+                    //       (coming from different traits).\n+                    (format!(\"__method{}\", index), void_pointer_type_debuginfo)\n+                }\n+                ty::VtblEntry::TraitVPtr(_) => {\n+                    // Note: In the future we could try to set the type of this pointer\n+                    //       to the type that we generate for the corresponding vtable.\n+                    (format!(\"__super_trait_ptr{}\", index), void_pointer_type_debuginfo)\n+                }\n+                ty::VtblEntry::MetadataAlign => (\"align\".to_string(), usize_debuginfo),\n+                ty::VtblEntry::MetadataSize => (\"size\".to_string(), usize_debuginfo),\n+                ty::VtblEntry::Vacant => return None,\n+            };\n+\n+            Some(MemberDescription {\n+                name: field_name,\n+                type_metadata: field_type,\n+                offset: pointer_size * index as u64,\n+                size: pointer_size,\n+                align: pointer_align,\n+                flags: DIFlags::FlagZero,\n+                discriminant: None,\n+                source_info: None,\n+            })\n+        })\n+        .collect();\n \n-    type_metadata(cx, vtable_type)\n+    let type_params = create_DIArray(DIB(cx), &[]);\n+    set_members_of_composite_type(cx, vtable_type_metadata, fields, None, type_params);\n+    vtable_type_metadata\n }\n \n /// Creates debug information for the given vtable, which is for the\n@@ -2603,11 +2713,12 @@ pub fn create_vtable_metadata<'ll, 'tcx>(\n         return;\n     }\n \n-    let vtable_name = compute_debuginfo_vtable_name(cx.tcx, ty, poly_trait_ref);\n+    let vtable_name =\n+        compute_debuginfo_vtable_name(cx.tcx, ty, poly_trait_ref, VTableNameKind::GlobalVariable);\n     let vtable_type = vtable_type_metadata(cx, ty, poly_trait_ref);\n+    let linkage_name = \"\";\n \n     unsafe {\n-        let linkage_name = \"\";\n         llvm::LLVMRustDIBuilderCreateStaticVariable(\n             DIB(cx),\n             NO_SCOPE_METADATA,"}, {"sha": "3cb19c0eec624b4e8460efff15d413e51fac6f18", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -469,7 +469,14 @@ fn push_debuginfo_type_name<'tcx>(\n     }\n }\n \n-/// Computes a name for the global variable storing a vtable.\n+pub enum VTableNameKind {\n+    // Is the name for the const/static holding the vtable?\n+    GlobalVariable,\n+    // Is the name for the type of the vtable?\n+    Type,\n+}\n+\n+/// Computes a name for the global variable storing a vtable (or the type of that global variable).\n ///\n /// The name is of the form:\n ///\n@@ -478,10 +485,15 @@ fn push_debuginfo_type_name<'tcx>(\n /// or, when generating C++-like names:\n ///\n /// `impl$<path::to::SomeType, path::to::SomeTrait>::vtable$`\n+///\n+/// If `kind` is `VTableNameKind::Type` then the last component is `{vtable_ty}` instead of just\n+/// `{vtable}`, so that the type and the corresponding global variable get assigned different\n+/// names.\n pub fn compute_debuginfo_vtable_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     t: Ty<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n+    kind: VTableNameKind,\n ) -> String {\n     let cpp_like_debuginfo = cpp_like_debuginfo(tcx);\n \n@@ -514,7 +526,12 @@ pub fn compute_debuginfo_vtable_name<'tcx>(\n \n     push_close_angle_bracket(cpp_like_debuginfo, &mut vtable_name);\n \n-    let suffix = if cpp_like_debuginfo { \"::vtable$\" } else { \"::{vtable}\" };\n+    let suffix = match (cpp_like_debuginfo, kind) {\n+        (true, VTableNameKind::GlobalVariable) => \"::vtable$\",\n+        (false, VTableNameKind::GlobalVariable) => \"::{vtable}\",\n+        (true, VTableNameKind::Type) => \"::vtable_type$\",\n+        (false, VTableNameKind::Type) => \"::{vtable_type}\",\n+    };\n \n     vtable_name.reserve_exact(suffix.len());\n     vtable_name.push_str(suffix);"}, {"sha": "0248d3235dfe35e474efd9e99a289b1c93d96e73", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -531,6 +531,8 @@ declare_features! (\n     ///\n     /// NOTE: A limited form of `union U { ... }` was accepted in 1.19.0.\n     (active, untagged_unions, \"1.13.0\", Some(55149), None),\n+    /// Allows using the `#[used(linker)]` (or `#[used(compiler)]`) attribute.\n+    (active, used_with_arg, \"1.60.0\", Some(93798), None),\n     /// Allows `extern \"wasm\" fn`\n     (active, wasm_abi, \"1.53.0\", Some(83788), None),\n     // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!"}, {"sha": "599ac7f33104c308c1e239f9ff11510acaebd9eb", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -324,7 +324,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(export_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(link_section, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_mangle, Normal, template!(Word), WarnFollowing),\n-    ungated!(used, Normal, template!(Word), WarnFollowing),\n+    ungated!(used, Normal, template!(Word, List: \"compiler|linker\"), WarnFollowing),\n \n     // Limits:\n     ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n@@ -339,7 +339,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     // Entry point:\n-    ungated!(main, Normal, template!(Word), WarnFollowing),\n     ungated!(start, Normal, template!(Word), WarnFollowing),\n     ungated!(no_start, CrateLevel, template!(Word), WarnFollowing),\n     ungated!(no_main, CrateLevel, template!(Word), WarnFollowing),"}, {"sha": "54eb2dc9e2890647b5f4652627c27e32e05a55b9", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -89,6 +89,8 @@ bitflags! {\n         /// the MIR `InstrumentCoverage` pass and not added to the coverage map\n         /// during codegen.\n         const NO_COVERAGE               = 1 << 15;\n+        /// `#[used(linker)]`: indicates that LLVM nor the linker can eliminate this function.\n+        const USED_LINKER               = 1 << 16;\n     }\n }\n "}, {"sha": "991d10a8547ff3d4eb87424322889666e33cfddd", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -43,7 +43,8 @@ mod add_retag;\n mod check_const_item_mutation;\n mod check_packed_ref;\n pub mod check_unsafety;\n-mod cleanup_post_borrowck;\n+// This pass is public to allow external drivers to perform MIR cleanup\n+pub mod cleanup_post_borrowck;\n mod const_debuginfo;\n mod const_goto;\n mod const_prop;\n@@ -65,7 +66,8 @@ mod match_branches;\n mod multiple_return_terminators;\n mod normalize_array_len;\n mod nrvo;\n-mod remove_false_edges;\n+// This pass is public to allow external drivers to perform MIR cleanup\n+pub mod remove_false_edges;\n mod remove_noop_landing_pads;\n mod remove_storage_markers;\n mod remove_uninit_drops;\n@@ -75,7 +77,8 @@ mod required_consts;\n mod reveal_all;\n mod separate_const_switch;\n mod shim;\n-mod simplify;\n+// This pass is public to allow external drivers to perform MIR cleanup\n+pub mod simplify;\n mod simplify_branches;\n mod simplify_comparison_integral;\n mod simplify_try;"}, {"sha": "479a08e43c01a78b64110a0785280942195bc311", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -1741,12 +1741,46 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     fn check_used(&self, attrs: &[Attribute], target: Target) {\n+        let mut used_linker_span = None;\n+        let mut used_compiler_span = None;\n         for attr in attrs {\n             if attr.has_name(sym::used) && target != Target::Static {\n                 self.tcx\n                     .sess\n                     .span_err(attr.span, \"attribute must be applied to a `static` variable\");\n             }\n+            let inner = attr.meta_item_list();\n+            match inner.as_deref() {\n+                Some([item]) if item.has_name(sym::linker) => {\n+                    if used_linker_span.is_none() {\n+                        used_linker_span = Some(attr.span);\n+                    }\n+                }\n+                Some([item]) if item.has_name(sym::compiler) => {\n+                    if used_compiler_span.is_none() {\n+                        used_compiler_span = Some(attr.span);\n+                    }\n+                }\n+                Some(_) => {\n+                    // This error case is handled in rustc_typeck::collect.\n+                }\n+                None => {\n+                    // Default case (compiler) when arg isn't defined.\n+                    if used_compiler_span.is_none() {\n+                        used_compiler_span = Some(attr.span);\n+                    }\n+                }\n+            }\n+        }\n+        if let (Some(linker_span), Some(compiler_span)) = (used_linker_span, used_compiler_span) {\n+            let spans = vec![linker_span, compiler_span];\n+            self.tcx\n+                .sess\n+                .struct_span_err(\n+                    spans,\n+                    \"`used(compiler)` and `used(linker)` can't be used together\",\n+                )\n+                .emit();\n         }\n     }\n "}, {"sha": "dc3ce1afa3361beff88760c9edba3c01b66deece", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -466,7 +466,10 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n \n     // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n     // forcefully, e.g., for placing it in a specific section.\n-    if cg_attrs.contains_extern_indicator() || cg_attrs.flags.contains(CodegenFnAttrFlags::USED) {\n+    if cg_attrs.contains_extern_indicator()\n+        || cg_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+        || cg_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n+    {\n         return true;\n     }\n "}, {"sha": "6a9c260f1c0ae799d810242b91dee8f5eea57761", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -449,6 +449,7 @@ symbols! {\n         compare_exchange_weak,\n         compile_error,\n         compile_error_macro,\n+        compiler,\n         compiler_builtins,\n         compiler_fence,\n         concat,\n@@ -668,6 +669,7 @@ symbols! {\n         fill,\n         finish,\n         flags,\n+        float,\n         float_to_int_unchecked,\n         floorf32,\n         floorf64,\n@@ -771,6 +773,8 @@ symbols! {\n         inline_const_pat,\n         inout,\n         instruction_set,\n+        integer_: \"integer\",\n+        integral,\n         intel,\n         into_future,\n         into_iter,\n@@ -815,6 +819,7 @@ symbols! {\n         link_ordinal,\n         link_section,\n         linkage,\n+        linker,\n         lint_reasons,\n         literal,\n         load,\n@@ -1463,6 +1468,7 @@ symbols! {\n         use_extern_macros,\n         use_nested_groups,\n         used,\n+        used_with_arg,\n         usize,\n         v1,\n         va_arg,"}, {"sha": "bdf677a63b632d0de11c2700f64e62a0f81809f5", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -62,6 +62,10 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut errored = false;\n         let mut item_iter = items.iter();\n \n+        let parse_value = |value_str| {\n+            OnUnimplementedFormatString::try_parse(tcx, trait_def_id, value_str, span).map(Some)\n+        };\n+\n         let condition = if is_root {\n             None\n         } else {\n@@ -86,7 +90,14 @@ impl<'tcx> OnUnimplementedDirective {\n                         None,\n                     )\n                 })?;\n-            attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |_| true);\n+            attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |item| {\n+                if let Some(symbol) = item.value_str() {\n+                    if parse_value(symbol).is_err() {\n+                        errored = true;\n+                    }\n+                }\n+                true\n+            });\n             Some(cond.clone())\n         };\n \n@@ -97,10 +108,6 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut subcommands = vec![];\n         let mut append_const_msg = None;\n \n-        let parse_value = |value_str| {\n-            OnUnimplementedFormatString::try_parse(tcx, trait_def_id, value_str, span).map(Some)\n-        };\n-\n         for item in item_iter {\n             if item.has_name(sym::message) && message.is_none() {\n                 if let Some(message_) = item.value_str() {\n@@ -221,6 +228,9 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut append_const_msg = None;\n         info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n+        let options_map: FxHashMap<Symbol, String> =\n+            options.iter().filter_map(|(k, v)| v.as_ref().map(|v| (*k, v.to_owned()))).collect();\n+\n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n                 if !attr::eval_condition(\n@@ -229,7 +239,11 @@ impl<'tcx> OnUnimplementedDirective {\n                     Some(tcx.features()),\n                     &mut |c| {\n                         c.ident().map_or(false, |ident| {\n-                            options.contains(&(ident.name, c.value_str().map(|s| s.to_string())))\n+                            let value = c.value_str().map(|s| {\n+                                OnUnimplementedFormatString(s).format(tcx, trait_ref, &options_map)\n+                            });\n+\n+                            options.contains(&(ident.name, value))\n                         })\n                     },\n                 ) {\n@@ -257,13 +271,11 @@ impl<'tcx> OnUnimplementedDirective {\n             append_const_msg = command.append_const_msg.clone();\n         }\n \n-        let options: FxHashMap<Symbol, String> =\n-            options.iter().filter_map(|(k, v)| v.as_ref().map(|v| (*k, v.to_owned()))).collect();\n         OnUnimplementedNote {\n-            label: label.map(|l| l.format(tcx, trait_ref, &options)),\n-            message: message.map(|m| m.format(tcx, trait_ref, &options)),\n-            note: note.map(|n| n.format(tcx, trait_ref, &options)),\n-            enclosing_scope: enclosing_scope.map(|e_s| e_s.format(tcx, trait_ref, &options)),\n+            label: label.map(|l| l.format(tcx, trait_ref, &options_map)),\n+            message: message.map(|m| m.format(tcx, trait_ref, &options_map)),\n+            note: note.map(|n| n.format(tcx, trait_ref, &options_map)),\n+            enclosing_scope: enclosing_scope.map(|e_s| e_s.format(tcx, trait_ref, &options_map)),\n             append_const_msg,\n         }\n     }\n@@ -306,6 +318,12 @@ impl<'tcx> OnUnimplementedFormatString {\n                     Position::ArgumentNamed(s) if s == sym::from_desugaring => (),\n                     // `{ItemContext}` is allowed\n                     Position::ArgumentNamed(s) if s == sym::ItemContext => (),\n+                    // `{integral}` and `{integer}` and `{float}` are allowed\n+                    Position::ArgumentNamed(s)\n+                        if s == sym::integral || s == sym::integer_ || s == sym::float =>\n+                    {\n+                        ()\n+                    }\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => {\n                         match generics.params.iter().find(|param| param.name == s) {\n@@ -385,6 +403,12 @@ impl<'tcx> OnUnimplementedFormatString {\n                                 &empty_string\n                             } else if s == sym::ItemContext {\n                                 &item_context\n+                            } else if s == sym::integral {\n+                                \"{integral}\"\n+                            } else if s == sym::integer_ {\n+                                \"{integer}\"\n+                            } else if s == sym::float {\n+                                \"{float}\"\n                             } else {\n                                 bug!(\n                                     \"broken on_unimplemented {:?} for {:?}: \\"}, {"sha": "7b9f1afe271c26546d25df0dd64f6897410b698b", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-filelength\n //! \"Collection\" is the process of determining the type and other external\n //! details of each item in Rust. Collection is specifically concerned\n //! with *inter-procedural* things -- for example, for a function\n@@ -2856,7 +2857,42 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::rustc_std_internal_symbol) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n         } else if attr.has_name(sym::used) {\n-            codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n+            let inner = attr.meta_item_list();\n+            match inner.as_deref() {\n+                Some([item]) if item.has_name(sym::linker) => {\n+                    if !tcx.features().used_with_arg {\n+                        feature_err(\n+                            &tcx.sess.parse_sess,\n+                            sym::used_with_arg,\n+                            attr.span,\n+                            \"`#[used(linker)]` is currently unstable\",\n+                        )\n+                        .emit();\n+                    }\n+                    codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED_LINKER;\n+                }\n+                Some([item]) if item.has_name(sym::compiler) => {\n+                    if !tcx.features().used_with_arg {\n+                        feature_err(\n+                            &tcx.sess.parse_sess,\n+                            sym::used_with_arg,\n+                            attr.span,\n+                            \"`#[used(compiler)]` is currently unstable\",\n+                        )\n+                        .emit();\n+                    }\n+                    codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n+                }\n+                Some(_) => {\n+                    tcx.sess\n+                        .struct_span_err(\n+                            attr.span,\n+                            \"expected `used`, `used(compiler)` or `used(linker)`\",\n+                        )\n+                        .emit();\n+                }\n+                None => codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED,\n+            }\n         } else if attr.has_name(sym::cmse_nonsecure_entry) {\n             if !matches!(tcx.fn_sig(id).abi(), abi::Abi::C { .. }) {\n                 struct_span_err!("}, {"sha": "aeb7554f8e914ec1117b3cce8a35f9f16e40376b", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -74,7 +74,7 @@\n //! identifier '=' expression\n //! ```\n //!\n-//! For example, the following [`format!`] expressions all use named argument:\n+//! For example, the following [`format!`] expressions all use named arguments:\n //!\n //! ```\n //! format!(\"{argument}\", argument = \"test\");   // => \"test\""}, {"sha": "637d7bc44885e96902413d6eed0290f06004babf", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -81,6 +81,32 @@\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n+    on(\n+        _Self = \"[{A}]\",\n+        message = \"a value of type `{Self}` cannot be built since `{Self}` has no definite size\",\n+        label = \"try explicitly collecting into a `Vec<{A}>`\",\n+    ),\n+    on(\n+        all(\n+            A = \"{integer}\",\n+            any(\n+                _Self = \"[i8]\",\n+                _Self = \"[i16]\",\n+                _Self = \"[i32]\",\n+                _Self = \"[i64]\",\n+                _Self = \"[i128]\",\n+                _Self = \"[isize]\",\n+                _Self = \"[u8]\",\n+                _Self = \"[u16]\",\n+                _Self = \"[u32]\",\n+                _Self = \"[u64]\",\n+                _Self = \"[u128]\",\n+                _Self = \"[usize]\"\n+            )\n+        ),\n+        message = \"a value of type `{Self}` cannot be built since `{Self}` has no definite size\",\n+        label = \"try explicitly collecting into a `Vec<{A}>`\",\n+    ),\n     message = \"a value of type `{Self}` cannot be built from an iterator \\\n                over elements of type `{A}`\",\n     label = \"value of type `{Self}` cannot be built from `std::iter::Iterator<Item={A}>`\""}, {"sha": "b9cb4f93d07d8159e8a4016380a6a140a8793620", "filename": "src/test/codegen/debug-vtable.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-vtable.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -9,19 +9,41 @@\n // compile-flags: -Cdebuginfo=2 -Copt-level=0 -Csymbol-mangling-version=v0\n // ignore-tidy-linelength\n \n+// NONMSVC: ![[USIZE:[0-9]+]] = !DIBasicType(name: \"usize\"\n+// MSVC: ![[USIZE:[0-9]+]] = !DIDerivedType(tag: DW_TAG_typedef, name: \"usize\"\n+// NONMSVC: ![[PTR:[0-9]+]] = !DIDerivedType(tag: DW_TAG_pointer_type, name: \"*const ()\"\n+// MSVC: ![[PTR:[0-9]+]] = !DIDerivedType(tag: DW_TAG_pointer_type, name: \"ptr_const$<tuple$<> >\"\n+\n // NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTrait>::{vtable}\"\n // MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTrait>::vtable$\"\n-// NONMSVC: !DIDerivedType(tag: DW_TAG_pointer_type, name: \"*const ()\",\n-// MSVC: !DIDerivedType(tag: DW_TAG_pointer_type, name: \"ptr_const$<tuple$<> >\",\n-// CHECK: !DISubrange(count: 5\n+\n+// NONMSVC: ![[VTABLE_TY0:[0-9]+]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"<debug_vtable::Foo as debug_vtable::SomeTrait>::{vtable_type}\", {{.*}} size: {{320|160}}, align: {{64|32}}, flags: DIFlagArtificial, {{.*}} vtableHolder: ![[FOO_TYPE:[0-9]+]],\n+// MSVC: ![[VTABLE_TY0:[0-9]+]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTrait>::vtable_type$\", {{.*}} size: {{320|160}}, align: {{64|32}}, flags: DIFlagArtificial, {{.*}} vtableHolder: ![[FOO_TYPE:[0-9]+]],\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"drop_in_place\", scope: ![[VTABLE_TY0]], {{.*}} baseType: ![[PTR]], size: {{64|32}}, align: {{64|32}})\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"size\", scope: ![[VTABLE_TY0]], {{.*}} baseType: ![[USIZE]], size: {{64|32}}, align: {{64|32}}, offset: {{64|32}})\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"align\", scope: ![[VTABLE_TY0]], {{.*}} baseType: ![[USIZE]], size: {{64|32}}, align: {{64|32}}, offset: {{128|64}})\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"__method3\", scope: ![[VTABLE_TY0]], {{.*}} baseType: ![[PTR]], size: {{64|32}}, align: {{64|32}}, offset: {{192|96}})\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"__method4\", scope: ![[VTABLE_TY0]], {{.*}} baseType: ![[PTR]], size: {{64|32}}, align: {{64|32}}, offset: {{256|128}})\n+// CHECK: ![[FOO_TYPE]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Foo\",\n \n // NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::Foo as debug_vtable::SomeTraitWithGenerics<u64, i8>>::{vtable}\"\n // MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTraitWithGenerics<u64,i8> >::vtable$\"\n-// CHECK: !DISubrange(count: 4\n+\n+// NONMSVC: ![[VTABLE_TY1:[0-9]+]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"<debug_vtable::Foo as debug_vtable::SomeTraitWithGenerics<u64, i8>>::{vtable_type}\", {{.*}}, size: {{256|128}}, align: {{64|32}}, flags: DIFlagArtificial, {{.*}}, vtableHolder: ![[FOO_TYPE]],\n+// MSVC: ![[VTABLE_TY1:[0-9]+]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"impl$<debug_vtable::Foo, debug_vtable::SomeTraitWithGenerics<u64,i8> >::vtable_type$\", {{.*}}, size: {{256|128}}, align: {{64|32}}, flags: DIFlagArtificial, {{.*}}, vtableHolder: ![[FOO_TYPE]],\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"drop_in_place\", scope: ![[VTABLE_TY1]], {{.*}} baseType: ![[PTR]], size: {{64|32}}, align: {{64|32}})\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"size\", scope: ![[VTABLE_TY1]], {{.*}} baseType: ![[USIZE]], size: {{64|32}}, align: {{64|32}}, offset: {{64|32}})\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"align\", scope: ![[VTABLE_TY1]], {{.*}} baseType: ![[USIZE]], size: {{64|32}}, align: {{64|32}}, offset: {{128|64}})\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"__method3\", scope: ![[VTABLE_TY1]], {{.*}} baseType: ![[PTR]], size: {{64|32}}, align: {{64|32}}, offset: {{192|96}})\n \n // NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::Foo as _>::{vtable}\"\n // MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::Foo, _>::vtable$\"\n-// CHECK: !DISubrange(count: 3\n+\n+// NONMSVC: ![[VTABLE_TY2:[0-9]+]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"<debug_vtable::Foo as _>::{vtable_type}\", {{.*}}, size: {{192|96}}, align: {{64|32}}, flags: DIFlagArtificial, {{.*}}, vtableHolder: ![[FOO_TYPE]],\n+// MSVC: ![[VTABLE_TY2:[0-9]+]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"impl$<debug_vtable::Foo, _>::vtable_type$\", {{.*}}, size: {{192|96}}, align: {{64|32}}, flags: DIFlagArtificial, {{.*}}, vtableHolder: ![[FOO_TYPE]],\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"drop_in_place\", scope: ![[VTABLE_TY2]], {{.*}}, baseType: ![[PTR]], size: {{64|32}}, align: {{64|32}})\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"size\", scope: ![[VTABLE_TY2]], {{.*}}, baseType: ![[USIZE]], size: {{64|32}}, align: {{64|32}}, offset: {{64|32}})\n+// CHECK: !DIDerivedType(tag: DW_TAG_member, name: \"align\", scope: ![[VTABLE_TY2]], {{.*}}, baseType: ![[USIZE]], size: {{64|32}}, align: {{64|32}}, offset: {{128|64}})\n \n // NONMSVC: !DIGlobalVariable(name: \"<debug_vtable::bar::{closure_env#0} as core::ops::function::FnOnce<(core::option::Option<&dyn core::ops::function::Fn<(), Output=()>>)>>::{vtable}\"\n // MSVC: !DIGlobalVariable(name: \"impl$<debug_vtable::bar::closure_env$0, core::ops::function::FnOnce<tuple$<enum$<core::option::Option<ref$<dyn$<core::ops::function::Fn<tuple$<>,assoc$<Output,tuple$<> > > > > >, {{.*}}, {{.*}}, Some> > > >::vtable$\"\n@@ -34,6 +56,9 @@\n \n #![crate_type = \"lib\"]\n \n+// Force emission for debuginfo for usize and *const() early..\n+pub static mut XYZ: Option<(usize, *const ())> = None;\n+\n pub struct Foo;\n \n pub trait SomeTrait {"}, {"sha": "ad59f740b567f7ad58974ba473ebd19d7f678f22", "filename": "src/test/codegen/debuginfo-generic-closure-env-names.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fcodegen%2Fdebuginfo-generic-closure-env-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fcodegen%2Fdebuginfo-generic-closure-env-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebuginfo-generic-closure-env-names.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -17,35 +17,34 @@\n \n // compile-flags: -Cdebuginfo=2 --edition 2021 -Copt-level=0 -Csymbol-mangling-version=v0\n \n-\n-// CHECK: [[non_generic_closure_NAMESPACE:!.*]] = !DINamespace(name: \"non_generic_closure\"\n-// CHECK: [[function_containing_closure_NAMESPACE:!.*]] = !DINamespace(name: \"function_containing_closure\"\n-// CHECK: [[generic_async_function_NAMESPACE:!.*]] = !DINamespace(name: \"generic_async_function\"\n-// CHECK: [[generic_async_block_NAMESPACE:!.*]] = !DINamespace(name: \"generic_async_block\"\n-\n // non_generic_closure()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}\", scope: [[non_generic_closure_NAMESPACE]]\n-// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0\", scope: [[non_generic_closure_NAMESPACE]]\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}\", scope: ![[non_generic_closure_NAMESPACE:[0-9]+]],\n+// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0\", scope: ![[non_generic_closure_NAMESPACE:[0-9]+]],\n+// CHECK: ![[non_generic_closure_NAMESPACE]] = !DINamespace(name: \"non_generic_closure\"\n+\n+// CHECK: ![[function_containing_closure_NAMESPACE:[0-9]+]] = !DINamespace(name: \"function_containing_closure\"\n+// CHECK: ![[generic_async_function_NAMESPACE:[0-9]+]] = !DINamespace(name: \"generic_async_function\"\n+// CHECK: ![[generic_async_block_NAMESPACE:[0-9]+]] = !DINamespace(name: \"generic_async_block\"\n \n // function_containing_closure<u32>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<u32>\", scope: [[function_containing_closure_NAMESPACE]]\n-// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<u32>\", scope: [[function_containing_closure_NAMESPACE]]\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<u32>\", scope: ![[function_containing_closure_NAMESPACE]]\n+// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<u32>\", scope: ![[function_containing_closure_NAMESPACE]]\n \n // generic_async_function<Foo>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: [[generic_async_function_NAMESPACE]]\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: ![[generic_async_function_NAMESPACE]]\n \n // generic_async_function<u32>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<u32>\", scope: [[generic_async_function_NAMESPACE]]\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_fn_env#0}<u32>\", scope: ![[generic_async_function_NAMESPACE]]\n \n // generic_async_block<Foo>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: [[generic_async_block_NAMESPACE]]\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: ![[generic_async_block_NAMESPACE]]\n \n // generic_async_block<u32>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<u32>\", scope: [[generic_async_block_NAMESPACE]]\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{async_block_env#0}<u32>\", scope: ![[generic_async_block_NAMESPACE]]\n \n // function_containing_closure<Foo>()\n-// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: [[function_containing_closure_NAMESPACE]]\n-// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<debuginfo_generic_closure_env_names::Foo>\", scope: [[function_containing_closure_NAMESPACE]]\n+// NONMSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"{closure_env#0}<debuginfo_generic_closure_env_names::Foo>\", scope: ![[function_containing_closure_NAMESPACE]]\n+// MSVC: !DICompositeType(tag: DW_TAG_structure_type, name: \"closure_env$0<debuginfo_generic_closure_env_names::Foo>\", scope: ![[function_containing_closure_NAMESPACE]]\n \n \n #![crate_type = \"lib\"]\n@@ -54,15 +53,14 @@ use std::future::Future;\n pub struct Foo;\n \n pub fn non_generic_closure(x: Foo) -> Box<dyn FnOnce() -> Foo> {\n-    // This static only exists to trigger generating the namespace debuginfo for\n-    // `function_containing_closure` at a predictable, early point, which makes\n-    // writing the FileCheck tests above simpler.\n-    static _X: u8 = 0;\n     return Box::new(move || x);\n }\n \n fn function_containing_closure<T: 'static>(x: T) -> impl FnOnce() -> T {\n-    static _X: u8 = 0; // Same as above\n+    // This static only exists to trigger generating the namespace debuginfo for\n+    // `function_containing_closure` at a predictable, early point, which makes\n+    // writing the FileCheck tests above simpler.\n+    static _X: u8 = 0;\n \n     return move || x;\n }"}, {"sha": "5bff50a40d4e8e813f2edf40ae4fd713a4da8aa1", "filename": "src/test/codegen/used_with_arg.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fcodegen%2Fused_with_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fcodegen%2Fused_with_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fused_with_arg.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type = \"lib\"]\n+#![feature(used_with_arg)]\n+\n+// CHECK: @llvm.used = appending global [1 x i8*]{{.*}}USED_LINKER\n+#[used(linker)]\n+static mut USED_LINKER: [usize; 1] = [0];\n+\n+// CHECK-NEXT: @llvm.compiler.used = appending global [1 x i8*]{{.*}}USED_COMPILER\n+#[used(compiler)]\n+static mut USED_COMPILER: [usize; 1] = [0];"}, {"sha": "0e887469d4466ddb49104bd472b20f089841163e", "filename": "src/test/ui/attributes/main-removed-1.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-1.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,2 @@\n+#[main]  //~ ERROR cannot find attribute `main` in this scope\n+fn main() {}"}, {"sha": "2422c5c3b623946e7e43c92769c97218552138eb", "filename": "src/test/ui/attributes/main-removed-1.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-1.stderr?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,10 @@\n+error: cannot find attribute `main` in this scope\n+  --> $DIR/main-removed-1.rs:1:3\n+   |\n+LL | #[main]\n+   |   ^^^^\n+   |\n+   = note: `main` is in scope, but it is a function, not an attribute\n+\n+error: aborting due to previous error\n+"}, {"sha": "196b5be2dd0864164b3257147904ffa570bb202c", "filename": "src/test/ui/attributes/main-removed-2/auxiliary/tokyo.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-2%2Fauxiliary%2Ftokyo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-2%2Fauxiliary%2Ftokyo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-2%2Fauxiliary%2Ftokyo.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,12 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn main(_: TokenStream, input: TokenStream) -> TokenStream {\n+    \"fn main() { println!(\\\"Hello Tokyo!\\\"); }\".parse().unwrap()\n+}"}, {"sha": "e8fecf825fa83b6f7e4e08162a2c6d1814e1cd16", "filename": "src/test/ui/attributes/main-removed-2/main.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-2%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-2%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fmain-removed-2%2Fmain.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+// aux-build:tokyo.rs\n+// compile-flags:--extern tokyo\n+// edition:2021\n+\n+use tokyo::main;\n+\n+#[main]\n+fn main() {\n+    panic!(\"the #[main] macro should replace this with non-panicking code\")\n+}"}, {"sha": "ad80ff53f0ef0766dea85ebf3cd7ac6c4ee44232", "filename": "src/test/ui/attributes/used_with_arg.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fused_with_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fused_with_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fused_with_arg.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,19 @@\n+#![feature(used_with_arg)]\n+\n+#[used(linker)]\n+static mut USED_LINKER: [usize; 1] = [0];\n+\n+#[used(compiler)]\n+static mut USED_COMPILER: [usize; 1] = [0];\n+\n+#[used(compiler)] //~ ERROR `used(compiler)` and `used(linker)` can't be used together\n+#[used(linker)]\n+static mut USED_COMPILER_LINKER2: [usize; 1] = [0];\n+\n+#[used(compiler)] //~ ERROR `used(compiler)` and `used(linker)` can't be used together\n+#[used(linker)]\n+#[used(compiler)]\n+#[used(linker)]\n+static mut USED_COMPILER_LINKER3: [usize; 1] = [0];\n+\n+fn main() {}"}, {"sha": "440e5c4a5a020ed97b722cf40d572e0dedc5109e", "filename": "src/test/ui/attributes/used_with_arg.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fused_with_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fused_with_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fused_with_arg.stderr?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,18 @@\n+error: `used(compiler)` and `used(linker)` can't be used together\n+  --> $DIR/used_with_arg.rs:9:1\n+   |\n+LL | #[used(compiler)]\n+   | ^^^^^^^^^^^^^^^^^\n+LL | #[used(linker)]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: `used(compiler)` and `used(linker)` can't be used together\n+  --> $DIR/used_with_arg.rs:13:1\n+   |\n+LL | #[used(compiler)]\n+   | ^^^^^^^^^^^^^^^^^\n+LL | #[used(linker)]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "2e17fcfd7a4933cbcb31cfaf6dcea30f19f425b8", "filename": "src/test/ui/attributes/used_with_multi_args.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fused_with_multi_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fused_with_multi_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fused_with_multi_args.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,6 @@\n+#![feature(used_with_arg)]\n+\n+#[used(compiler, linker)] //~ expected `used`, `used(compiler)` or `used(linker)`\n+static mut USED_COMPILER_LINKER: [usize; 1] = [0];\n+\n+fn main() {}"}, {"sha": "c93aafcfc7cce0f7323dfea20b37559ef921314b", "filename": "src/test/ui/attributes/used_with_multi_args.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fused_with_multi_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fattributes%2Fused_with_multi_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fused_with_multi_args.stderr?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,8 @@\n+error: expected `used`, `used(compiler)` or `used(linker)`\n+  --> $DIR/used_with_multi_args.rs:3:1\n+   |\n+LL | #[used(compiler, linker)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1c8f01bdef116b62b37e21d02f7b864aba5ff206", "filename": "src/test/ui/feature-gates/feature-gate-used_with_arg.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-used_with_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-used_with_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-used_with_arg.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,7 @@\n+#[used(linker)] //~ ERROR `#[used(linker)]` is currently unstable\n+static mut USED_LINKER: [usize; 1] = [0];\n+\n+#[used(compiler)] //~ ERROR `#[used(compiler)]` is currently unstable\n+static mut USED_COMPILER: [usize; 1] = [0];\n+\n+fn main() {}"}, {"sha": "d115bf4e365a7a172fb5cf170bce99dc297806e2", "filename": "src/test/ui/feature-gates/feature-gate-used_with_arg.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-used_with_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-used_with_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-used_with_arg.stderr?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: `#[used(linker)]` is currently unstable\n+  --> $DIR/feature-gate-used_with_arg.rs:1:1\n+   |\n+LL | #[used(linker)]\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93798 <https://github.com/rust-lang/rust/issues/93798> for more information\n+   = help: add `#![feature(used_with_arg)]` to the crate attributes to enable\n+\n+error[E0658]: `#[used(compiler)]` is currently unstable\n+  --> $DIR/feature-gate-used_with_arg.rs:4:1\n+   |\n+LL | #[used(compiler)]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #93798 <https://github.com/rust-lang/rust/issues/93798> for more information\n+   = help: add `#![feature(used_with_arg)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "905752dec7478749119da406f960da1469203698", "filename": "src/test/ui/iterators/collect-into-slice.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.rs?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,15 @@\n+fn process_slice(data: &[i32]) {\n+    //~^ NOTE required by a bound in this\n+    todo!()\n+}\n+\n+fn main() {\n+    let some_generated_vec = (0..10).collect();\n+    //~^ ERROR the size for values of type `[i32]` cannot be known at compilation time\n+    //~| ERROR a value of type `[i32]` cannot be built since `[i32]` has no definite size\n+    //~| NOTE try explicitly collecting into a `Vec<{integer}>`\n+    //~| NOTE required by a bound in `collect`\n+    //~| NOTE all local variables must have a statically known size\n+    //~| NOTE doesn't have a size known at compile-time\n+    process_slice(&some_generated_vec);\n+}"}, {"sha": "521f239451d2f9913793f4488d3403cd26e1f2cb", "filename": "src/test/ui/iterators/collect-into-slice.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d6ee0db96aada145725838379f909bbb8aa2312/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fcollect-into-slice.stderr?ref=5d6ee0db96aada145725838379f909bbb8aa2312", "patch": "@@ -0,0 +1,26 @@\n+error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n+  --> $DIR/collect-into-slice.rs:7:9\n+   |\n+LL |     let some_generated_vec = (0..10).collect();\n+   |         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[i32]`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+\n+error[E0277]: a value of type `[i32]` cannot be built since `[i32]` has no definite size\n+  --> $DIR/collect-into-slice.rs:7:38\n+   |\n+LL |     let some_generated_vec = (0..10).collect();\n+   |                                      ^^^^^^^ try explicitly collecting into a `Vec<{integer}>`\n+   |\n+   = help: the trait `FromIterator<{integer}>` is not implemented for `[i32]`\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}