{"sha": "159886863b59aff80da2510a37e7bff9c13e0352", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTg4Njg2M2I1OWFmZjgwZGEyNTEwYTM3ZTdiZmY5YzEzZTAzNTI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-05T22:54:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-05T22:54:21Z"}, "message": "Rollup merge of #51753 - gruberb:document-from-conversions-libstdpath, r=QuietMisdreavus\n\nDocument `From` implementations\n\nThis PR is solves part of https://github.com/rust-lang/rust/issues/51430. It's my first PR, so I might need some guidance from @skade (as already mentioned in the issue).\n\nThe purpose of the PR is to document the `impl From` inside `path.rs` and answering the questions:\n- What does it convert?\n- Does it allocate memory?\n- How expensive are the allocations?\n\nI gave it a first shot, though an experienced rust developer might want to look over it.", "tree": {"sha": "dca2f036beadc44384e0588a0b7af79a1ce02941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca2f036beadc44384e0588a0b7af79a1ce02941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/159886863b59aff80da2510a37e7bff9c13e0352", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCFcdCRBK7hj4Ov3rIwAAdHIIAHISxEubfLSmoB2aoF9Vka/p\nDPcSoMMBSV/1U1vCHUK43eRmBUfbab28AvFGtqj+wC9PSk4a4rm+hfkOKhjjJpds\nIx6qUSbchC0c6TNweX4sXPF7kSwcl6/iF4uOft53uw2lUCO24whS+PpwWrEAlsq/\nUpeQl8Dti+pQLvVpdL4dvEr3enIAIaBH4wG2ti3lyZmUUPJOrQ5mmxTsc5UvhV2S\nCXflEEdzR2LWT7gxzBJLc7Zu+h4vD6HkuA+/MBcegnUNDpudlNzHxTF++jp/A9t2\nvZrfZ6ZTyWS1AaKZG06VPcb8wg58EkLBb8vWiU2017bKz54O9YjQe5uS4KppkEk=\n=Zv4h\n-----END PGP SIGNATURE-----\n", "payload": "tree dca2f036beadc44384e0588a0b7af79a1ce02941\nparent b866f7d258a2428e004039eb0f3fabd73cc9d6ae\nparent 450a8a6f354ac9b19d5980837ea0f34cd6c7ece6\nauthor Pietro Albini <pietro@pietroalbini.org> 1544050461 +0100\ncommitter GitHub <noreply@github.com> 1544050461 +0100\n\nRollup merge of #51753 - gruberb:document-from-conversions-libstdpath, r=QuietMisdreavus\n\nDocument `From` implementations\n\nThis PR is solves part of https://github.com/rust-lang/rust/issues/51430. It's my first PR, so I might need some guidance from @skade (as already mentioned in the issue).\n\nThe purpose of the PR is to document the `impl From` inside `path.rs` and answering the questions:\n- What does it convert?\n- Does it allocate memory?\n- How expensive are the allocations?\n\nI gave it a first shot, though an experienced rust developer might want to look over it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/159886863b59aff80da2510a37e7bff9c13e0352", "html_url": "https://github.com/rust-lang/rust/commit/159886863b59aff80da2510a37e7bff9c13e0352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/159886863b59aff80da2510a37e7bff9c13e0352/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b866f7d258a2428e004039eb0f3fabd73cc9d6ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b866f7d258a2428e004039eb0f3fabd73cc9d6ae", "html_url": "https://github.com/rust-lang/rust/commit/b866f7d258a2428e004039eb0f3fabd73cc9d6ae"}, {"sha": "450a8a6f354ac9b19d5980837ea0f34cd6c7ece6", "url": "https://api.github.com/repos/rust-lang/rust/commits/450a8a6f354ac9b19d5980837ea0f34cd6c7ece6", "html_url": "https://github.com/rust-lang/rust/commit/450a8a6f354ac9b19d5980837ea0f34cd6c7ece6"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "9fad40c564944ee378f247d8db26750a532f74fb", "filename": "src/libstd/path.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/159886863b59aff80da2510a37e7bff9c13e0352/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/159886863b59aff80da2510a37e7bff9c13e0352/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=159886863b59aff80da2510a37e7bff9c13e0352", "patch": "@@ -1397,13 +1397,20 @@ impl<'a> From<&'a Path> for Box<Path> {\n \n #[stable(feature = \"path_buf_from_box\", since = \"1.18.0\")]\n impl From<Box<Path>> for PathBuf {\n+    /// Converts a `Box<Path>` into a `PathBuf`\n+    ///\n+    /// This conversion does not allocate or copy memory.\n     fn from(boxed: Box<Path>) -> PathBuf {\n         boxed.into_path_buf()\n     }\n }\n \n #[stable(feature = \"box_from_path_buf\", since = \"1.20.0\")]\n impl From<PathBuf> for Box<Path> {\n+    /// Converts a `PathBuf` into a `Box<Path>`\n+    ///\n+    /// This conversion currently should not allocate memory,\n+    /// but this behavior is not guaranteed on all platforms or in all future versions.\n     fn from(p: PathBuf) -> Box<Path> {\n         p.into_boxed_path()\n     }\n@@ -1426,20 +1433,29 @@ impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for PathBuf {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<OsString> for PathBuf {\n+    /// Converts a `OsString` into a `PathBuf`\n+    ///\n+    /// This conversion does not allocate or copy memory.\n     fn from(s: OsString) -> PathBuf {\n         PathBuf { inner: s }\n     }\n }\n \n #[stable(feature = \"from_path_buf_for_os_string\", since = \"1.14.0\")]\n impl From<PathBuf> for OsString {\n+    /// Converts a `PathBuf` into a `OsString`\n+    ///\n+    /// This conversion does not allocate or copy memory.\n     fn from(path_buf : PathBuf) -> OsString {\n         path_buf.inner\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for PathBuf {\n+    /// Converts a `String` into a `PathBuf`\n+    ///\n+    /// This conversion does not allocate or copy memory.\n     fn from(s: String) -> PathBuf {\n         PathBuf::from(OsString::from(s))\n     }\n@@ -1536,6 +1552,7 @@ impl<'a> From<Cow<'a, Path>> for PathBuf {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Arc<Path> {\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.into_os_string());\n@@ -1545,6 +1562,7 @@ impl From<PathBuf> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Arc<Path> {\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: &Path) -> Arc<Path> {\n         let arc: Arc<OsStr> = Arc::from(s.as_os_str());\n@@ -1554,6 +1572,7 @@ impl<'a> From<&'a Path> for Arc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<PathBuf> for Rc<Path> {\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: PathBuf) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.into_os_string());\n@@ -1563,6 +1582,7 @@ impl From<PathBuf> for Rc<Path> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl<'a> From<&'a Path> for Rc<Path> {\n+    /// Converts a Path into a Rc by copying the Path data into a new Rc buffer.\n     #[inline]\n     fn from(s: &Path) -> Rc<Path> {\n         let rc: Rc<OsStr> = Rc::from(s.as_os_str());"}]}