{"sha": "1e8dc45fb502c39a81ddda532d35a4c3dbd6b4ad", "node_id": "C_kwDOAAsO6NoAKDFlOGRjNDVmYjUwMmMzOWE4MWRkZGE1MzJkMzVhNGMzZGJkNmI0YWQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-04T23:33:49Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-04T23:36:56Z"}, "message": "Rearrange `to_internal`.\n\n`TokenTree::Punct` is handled outside the `match`. This commits moves it\ninside the `match`, avoiding the need for the `return`s and making it\neasier to read.", "tree": {"sha": "501885ee6d5af15019061ee0515ba32095df2bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501885ee6d5af15019061ee0515ba32095df2bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e8dc45fb502c39a81ddda532d35a4c3dbd6b4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e8dc45fb502c39a81ddda532d35a4c3dbd6b4ad", "html_url": "https://github.com/rust-lang/rust/commit/1e8dc45fb502c39a81ddda532d35a4c3dbd6b4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e8dc45fb502c39a81ddda532d35a4c3dbd6b4ad/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092255976862c1f0121bb4446acd38336a860c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/092255976862c1f0121bb4446acd38336a860c4f", "html_url": "https://github.com/rust-lang/rust/commit/092255976862c1f0121bb4446acd38336a860c4f"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "a7b94a40f5c02e7acd4a33abff43273bc393faf5", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 40, "deletions": 41, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1e8dc45fb502c39a81ddda532d35a4c3dbd6b4ad/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e8dc45fb502c39a81ddda532d35a4c3dbd6b4ad/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=1e8dc45fb502c39a81ddda532d35a4c3dbd6b4ad", "patch": "@@ -246,18 +246,49 @@ impl ToInternal<TokenStream> for (TokenTree<TokenStream, Span, Symbol>, &mut Rus\n         use rustc_ast::token::*;\n \n         let (tree, rustc) = self;\n-        let (ch, joint, span) = match tree {\n-            TokenTree::Punct(Punct { ch, joint, span }) => (ch, joint, span),\n+        match tree {\n+            TokenTree::Punct(Punct { ch, joint, span }) => {\n+                let kind = match ch {\n+                    b'=' => Eq,\n+                    b'<' => Lt,\n+                    b'>' => Gt,\n+                    b'!' => Not,\n+                    b'~' => Tilde,\n+                    b'+' => BinOp(Plus),\n+                    b'-' => BinOp(Minus),\n+                    b'*' => BinOp(Star),\n+                    b'/' => BinOp(Slash),\n+                    b'%' => BinOp(Percent),\n+                    b'^' => BinOp(Caret),\n+                    b'&' => BinOp(And),\n+                    b'|' => BinOp(Or),\n+                    b'@' => At,\n+                    b'.' => Dot,\n+                    b',' => Comma,\n+                    b';' => Semi,\n+                    b':' => Colon,\n+                    b'#' => Pound,\n+                    b'$' => Dollar,\n+                    b'?' => Question,\n+                    b'\\'' => SingleQuote,\n+                    _ => unreachable!(),\n+                };\n+                if joint {\n+                    tokenstream::TokenStream::token_joint(kind, span)\n+                } else {\n+                    tokenstream::TokenStream::token_alone(kind, span)\n+                }\n+            }\n             TokenTree::Group(Group { delimiter, stream, span: DelimSpan { open, close, .. } }) => {\n-                return tokenstream::TokenStream::delimited(\n+                tokenstream::TokenStream::delimited(\n                     tokenstream::DelimSpan { open, close },\n                     delimiter.to_internal(),\n                     stream.unwrap_or_default(),\n-                );\n+                )\n             }\n             TokenTree::Ident(self::Ident { sym, is_raw, span }) => {\n                 rustc.sess().symbol_gallery.insert(sym, span);\n-                return tokenstream::TokenStream::token_alone(Ident(sym, is_raw), span);\n+                tokenstream::TokenStream::token_alone(Ident(sym, is_raw), span)\n             }\n             TokenTree::Literal(self::Literal {\n                 kind: self::LitKind::Integer,\n@@ -270,7 +301,7 @@ impl ToInternal<TokenStream> for (TokenTree<TokenStream, Span, Symbol>, &mut Rus\n                 let integer = TokenKind::lit(token::Integer, symbol, suffix);\n                 let a = tokenstream::TokenTree::token_alone(minus, span);\n                 let b = tokenstream::TokenTree::token_alone(integer, span);\n-                return [a, b].into_iter().collect();\n+                [a, b].into_iter().collect()\n             }\n             TokenTree::Literal(self::Literal {\n                 kind: self::LitKind::Float,\n@@ -283,46 +314,14 @@ impl ToInternal<TokenStream> for (TokenTree<TokenStream, Span, Symbol>, &mut Rus\n                 let float = TokenKind::lit(token::Float, symbol, suffix);\n                 let a = tokenstream::TokenTree::token_alone(minus, span);\n                 let b = tokenstream::TokenTree::token_alone(float, span);\n-                return [a, b].into_iter().collect();\n+                [a, b].into_iter().collect()\n             }\n             TokenTree::Literal(self::Literal { kind, symbol, suffix, span }) => {\n-                return tokenstream::TokenStream::token_alone(\n+                tokenstream::TokenStream::token_alone(\n                     TokenKind::lit(kind.to_internal(), symbol, suffix),\n                     span,\n-                );\n+                )\n             }\n-        };\n-\n-        let kind = match ch {\n-            b'=' => Eq,\n-            b'<' => Lt,\n-            b'>' => Gt,\n-            b'!' => Not,\n-            b'~' => Tilde,\n-            b'+' => BinOp(Plus),\n-            b'-' => BinOp(Minus),\n-            b'*' => BinOp(Star),\n-            b'/' => BinOp(Slash),\n-            b'%' => BinOp(Percent),\n-            b'^' => BinOp(Caret),\n-            b'&' => BinOp(And),\n-            b'|' => BinOp(Or),\n-            b'@' => At,\n-            b'.' => Dot,\n-            b',' => Comma,\n-            b';' => Semi,\n-            b':' => Colon,\n-            b'#' => Pound,\n-            b'$' => Dollar,\n-            b'?' => Question,\n-            b'\\'' => SingleQuote,\n-            _ => unreachable!(),\n-        };\n-\n-        if joint {\n-            tokenstream::TokenStream::token_joint(kind, span)\n-        } else {\n-            tokenstream::TokenStream::token_alone(kind, span)\n         }\n     }\n }"}]}