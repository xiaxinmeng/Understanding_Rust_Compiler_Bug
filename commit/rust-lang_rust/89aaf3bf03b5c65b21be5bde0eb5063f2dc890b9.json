{"sha": "89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YWFmM2JmMDNiNWM2NWIyMWJlNWJkZTBlYjUwNjNmMmRjODkwYjk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-03T09:53:47Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-03T09:53:47Z"}, "message": "Use correct width and tactic for struct literal", "tree": {"sha": "734b73bf6b5c19485752a79beca80a7f2332175a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/734b73bf6b5c19485752a79beca80a7f2332175a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9", "html_url": "https://github.com/rust-lang/rust/commit/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eafad96ad301f69eff104bc6f3e6b39fb29a9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eafad96ad301f69eff104bc6f3e6b39fb29a9d2", "html_url": "https://github.com/rust-lang/rust/commit/7eafad96ad301f69eff104bc6f3e6b39fb29a9d2"}], "stats": {"total": 71, "additions": 29, "deletions": 42}, "files": [{"sha": "e6b6c53fa2e41fea44ca62fa7364f5351d59b836", "filename": "src/expr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9", "patch": "@@ -2601,32 +2601,35 @@ fn rewrite_struct_lit<'a>(\n         span.hi,\n     );\n     let item_vec = items.collect::<Vec<_>>();\n+    let fields_str = wrap_struct_field(context, &fields_str, shape, v_shape, one_line_width);\n+    Some(format!(\"{} {{{}}}\", path_str, fields_str))\n \n-    let tactic = struct_lit_tactic(h_shape, context, &item_vec);\n-    let nested_shape = shape_for_tactic(tactic, h_shape, v_shape);\n-    let fmt = struct_lit_formatting(nested_shape, tactic, context, base.is_some());\n+    // FIXME if context.config.struct_lit_style() == Visual, but we run out\n+    // of space, we should fall back to BlockIndent.\n+}\n \n-    let fields_str = try_opt!(write_list(&item_vec, &fmt));\n-    let fields_str = if context.config.struct_lit_style() == IndentStyle::Block &&\n+pub fn wrap_struct_field(\n+    context: &RewriteContext,\n+    fields_str: &str,\n+    shape: Shape,\n+    nested_shape: Shape,\n+    one_line_width: usize,\n+) -> String {\n+    if context.config.struct_lit_style() == IndentStyle::Block &&\n         (fields_str.contains('\\n') ||\n              context.config.struct_lit_multiline_style() == MultilineStyle::ForceMulti ||\n-             fields_str.len() > h_shape.map(|s| s.width).unwrap_or(0))\n+             fields_str.len() > one_line_width)\n     {\n         format!(\n             \"\\n{}{}\\n{}\",\n-            v_shape.indent.to_string(context.config),\n+            nested_shape.indent.to_string(context.config),\n             fields_str,\n             shape.indent.to_string(context.config)\n         )\n     } else {\n         // One liner or visual indent.\n         format!(\" {} \", fields_str)\n-    };\n-\n-    Some(format!(\"{} {{{}}}\", path_str, fields_str))\n-\n-    // FIXME if context.config.struct_lit_style() == Visual, but we run out\n-    // of space, we should fall back to BlockIndent.\n+    }\n }\n \n pub fn struct_lit_field_separator(config: &Config) -> &str {"}, {"sha": "d6cb00b55cd3c59590fc72415e4252051dc8fbb3", "filename": "src/lists.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9", "patch": "@@ -555,8 +555,13 @@ pub fn struct_lit_shape(\n             }\n         }\n     };\n-    let h_shape = shape.sub_width(prefix_width + suffix_width);\n-    Some((h_shape, v_shape))\n+    let shape_width = shape.width.checked_sub(prefix_width + suffix_width);\n+    if let Some(w) = shape_width {\n+        let shape_width = cmp::min(w, context.config.struct_lit_width());\n+        Some((Some(Shape::legacy(shape_width, shape.indent)), v_shape))\n+    } else {\n+        Some((None, v_shape))\n+    }\n }\n \n // Compute the tactic for the internals of a struct-lit-like thing.\n@@ -566,16 +571,10 @@ pub fn struct_lit_tactic(\n     items: &[ListItem],\n ) -> DefinitiveListTactic {\n     if let Some(h_shape) = h_shape {\n-        let mut prelim_tactic = match (context.config.struct_lit_style(), items.len()) {\n+        let prelim_tactic = match (context.config.struct_lit_style(), items.len()) {\n             (IndentStyle::Visual, 1) => ListTactic::HorizontalVertical,\n             _ => context.config.struct_lit_multiline_style().to_list_tactic(),\n         };\n-\n-        if prelim_tactic == ListTactic::HorizontalVertical && items.len() > 1 {\n-            prelim_tactic =\n-                ListTactic::LimitedHorizontalVertical(context.config.struct_lit_width());\n-        }\n-\n         definitive_tactic(items, prelim_tactic, h_shape.width)\n     } else {\n         DefinitiveListTactic::Vertical"}, {"sha": "cda7a108609e5201db3c9f285897a763c990556b", "filename": "src/patterns.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=89aaf3bf03b5c65b21be5bde0eb5063f2dc890b9", "patch": "@@ -10,12 +10,12 @@\n \n use Shape;\n use codemap::SpanUtils;\n-use config::{IndentStyle, MultilineStyle};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{wrap_str, format_mutability, mk_sp};\n use lists::{DefinitiveListTactic, SeparatorTactic, itemize_list, struct_lit_shape,\n             struct_lit_tactic, shape_for_tactic, struct_lit_formatting, write_list};\n-use expr::{rewrite_call_inner, rewrite_unary_prefix, rewrite_pair, can_be_overflowed_expr};\n+use expr::{rewrite_call_inner, rewrite_unary_prefix, rewrite_pair, can_be_overflowed_expr,\n+           wrap_struct_field};\n use types::{rewrite_path, PathContext};\n use super::Spanned;\n use comment::FindUncommented;\n@@ -181,9 +181,10 @@ fn rewrite_struct_pat(\n     let fmt = struct_lit_formatting(nested_shape, tactic, context, false);\n \n     let mut fields_str = try_opt!(write_list(&item_vec, &fmt));\n+    let one_line_width = h_shape.map_or(0, |shape| shape.width);\n \n     if elipses {\n-        if fields_str.contains('\\n') {\n+        if fields_str.contains('\\n') || fields_str.len() > one_line_width {\n             // Add a missing trailing comma.\n             if fmt.trailing_separator == SeparatorTactic::Never {\n                 fields_str.push_str(\",\");\n@@ -205,23 +206,7 @@ fn rewrite_struct_pat(\n         }\n     }\n \n-\n-    let fields_str = if context.config.struct_lit_style() == IndentStyle::Block &&\n-        (fields_str.contains('\\n') ||\n-             context.config.struct_lit_multiline_style() == MultilineStyle::ForceMulti ||\n-             fields_str.len() > h_shape.map(|s| s.width).unwrap_or(0))\n-    {\n-        format!(\n-            \"\\n{}{}\\n{}\",\n-            v_shape.indent.to_string(context.config),\n-            fields_str,\n-            shape.indent.to_string(context.config)\n-        )\n-    } else {\n-        // One liner or visual indent.\n-        format!(\" {} \", fields_str)\n-    };\n-\n+    let fields_str = wrap_struct_field(context, &fields_str, shape, v_shape, one_line_width);\n     Some(format!(\"{} {{{}}}\", path_str, fields_str))\n }\n "}]}