{"sha": "a676a3666253ee739c127a8bb4a3b94e878e7908", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NzZhMzY2NjI1M2VlNzM5YzEyN2E4YmI0YTNiOTRlODc4ZTc5MDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T23:04:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-24T23:04:55Z"}, "message": "Rollup merge of #62736 - lqd:polonius_tests3, r=matthewjasper\n\nPolonius: fix some cases of `killed` fact generation, and most of the `ui` test suite\n\nSince basic Polonius functionality was re-enabled by @matthewjasper in #54468, some tests were still failing in the polonius compare-mode.\n\nThis PR fixes all but one test in the `ui` suite by:\n- fixing some bugs in the fact generation code, related to the `killed` relation: Polonius would incorrectly reject some NLL-accepted code, because of these missing `killed` facts.\n- ignoring some tests in the polonius compare-mode: a lot of those manually test the NLL or migrate mode, and the failures were mostly artifacts of the test revisions, e.g. that `-Z polonius` requires full NLLs. Some others were also both failing with NLL and succeeding with Polonius, which we can't encode in tests at the moment.\n- blessing the output of some tests: whenever Polonius and NLL have basically the same errors, except for diagnostics differences, the Polonius output is blessed. Whenever we've advanced into a less experimental phase, we'll want to revisit these cases (much like we did on the NLL test suite last year) to specifically work on diagnostics.\n\nFact generation changes:\n- we now kill loans on the destination place of `Call` terminators\n- we now kill loans on the locals destroyed by `StorageDead`\n- we now also handle assignments to projections: killing the loans on a either a deref-ed local, or the ones whose `borrowed_place` conflicts with the current place.\n\nOne failing test remains: an overflow during fact generation, on a case of polymorphic recursion (and which I'll continue investigating later).\n\nThis adds some tests for the fact generation changes, with some simple Polonius cases similar to the existing smoke tests, but also for some cases encountered in the wild (in the `rand` crate for example).\n\nA more detailed write-up is available [here](https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view) with an explanation for each test failure, the steps taken to resolve it (as a commit in the current PR), NLL and Polonius outputs (and diff), etc.\n\nSince they've worked on this before, and we've discussed some of these failures together:\n\nr? @matthewjasper", "tree": {"sha": "70f0c25d5fd4f40332cb65ff678a566980fb0bd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f0c25d5fd4f40332cb65ff678a566980fb0bd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a676a3666253ee739c127a8bb4a3b94e878e7908", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOOQXCRBK7hj4Ov3rIwAAdHIIAESb8ZdklwEW9Edp4Cuzq3gV\nD2Pa28idJRc1QqnEcgyUw6mhPUANZqrh34aBiMeCIRT88wbI/mUwG0Yi+q7HwbsL\nCO8T8ZZfQcCFN18IxruRP78c6minM2mBHhhtU2Krjc4WFFuRTF32BNdfppklO9EN\nv7CZ72y/z/1UwYZVyBYNTJzYR9fDMlCgHvmQj9Ln8XdmUy1zJCnmy6hsI2p0vT4+\na2yNpxckrGggBWkPtbpMGWMdX+7lrCn+21EohkfpEm8mqlPpCKAnZ/Gi87IBjH20\n42jzRnFIXph1VjjmTTj355f1F8cZUfoItwlxDvSJ6NWYZsvlUlFoI+4oufa/bW8=\n=aN8F\n-----END PGP SIGNATURE-----\n", "payload": "tree 70f0c25d5fd4f40332cb65ff678a566980fb0bd8\nparent 40be4000b9a093eb85eb9e93a87c344c686d23da\nparent e16bede3f503b85685e80b39942fbc0b0e11a721\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564009495 +0200\ncommitter GitHub <noreply@github.com> 1564009495 +0200\n\nRollup merge of #62736 - lqd:polonius_tests3, r=matthewjasper\n\nPolonius: fix some cases of `killed` fact generation, and most of the `ui` test suite\n\nSince basic Polonius functionality was re-enabled by @matthewjasper in #54468, some tests were still failing in the polonius compare-mode.\n\nThis PR fixes all but one test in the `ui` suite by:\n- fixing some bugs in the fact generation code, related to the `killed` relation: Polonius would incorrectly reject some NLL-accepted code, because of these missing `killed` facts.\n- ignoring some tests in the polonius compare-mode: a lot of those manually test the NLL or migrate mode, and the failures were mostly artifacts of the test revisions, e.g. that `-Z polonius` requires full NLLs. Some others were also both failing with NLL and succeeding with Polonius, which we can't encode in tests at the moment.\n- blessing the output of some tests: whenever Polonius and NLL have basically the same errors, except for diagnostics differences, the Polonius output is blessed. Whenever we've advanced into a less experimental phase, we'll want to revisit these cases (much like we did on the NLL test suite last year) to specifically work on diagnostics.\n\nFact generation changes:\n- we now kill loans on the destination place of `Call` terminators\n- we now kill loans on the locals destroyed by `StorageDead`\n- we now also handle assignments to projections: killing the loans on a either a deref-ed local, or the ones whose `borrowed_place` conflicts with the current place.\n\nOne failing test remains: an overflow during fact generation, on a case of polymorphic recursion (and which I'll continue investigating later).\n\nThis adds some tests for the fact generation changes, with some simple Polonius cases similar to the existing smoke tests, but also for some cases encountered in the wild (in the `rand` crate for example).\n\nA more detailed write-up is available [here](https://hackmd.io/CjYB0fs4Q9CweyeTdKWyEg?view) with an explanation for each test failure, the steps taken to resolve it (as a commit in the current PR), NLL and Polonius outputs (and diff), etc.\n\nSince they've worked on this before, and we've discussed some of these failures together:\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a676a3666253ee739c127a8bb4a3b94e878e7908", "html_url": "https://github.com/rust-lang/rust/commit/a676a3666253ee739c127a8bb4a3b94e878e7908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a676a3666253ee739c127a8bb4a3b94e878e7908/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40be4000b9a093eb85eb9e93a87c344c686d23da", "url": "https://api.github.com/repos/rust-lang/rust/commits/40be4000b9a093eb85eb9e93a87c344c686d23da", "html_url": "https://github.com/rust-lang/rust/commit/40be4000b9a093eb85eb9e93a87c344c686d23da"}, {"sha": "e16bede3f503b85685e80b39942fbc0b0e11a721", "url": "https://api.github.com/repos/rust-lang/rust/commits/e16bede3f503b85685e80b39942fbc0b0e11a721", "html_url": "https://github.com/rust-lang/rust/commit/e16bede3f503b85685e80b39942fbc0b0e11a721"}], "stats": {"total": 941, "additions": 892, "deletions": 49}, "files": [{"sha": "95c3299693b68eabbf5ffa4e96bf2427f11b4158", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 120, "deletions": 17, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -3,12 +3,15 @@ use crate::borrow_check::location::LocationTable;\n use crate::borrow_check::nll::ToRegionVid;\n use crate::borrow_check::nll::facts::AllFacts;\n use crate::borrow_check::nll::region_infer::values::LivenessValues;\n+use crate::borrow_check::places_conflict;\n use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n-use rustc::mir::{BasicBlock, BasicBlockData, Location, Body, Place, PlaceBase, Rvalue};\n-use rustc::mir::{SourceInfo, Statement, Terminator};\n-use rustc::mir::UserTypeProjection;\n+use rustc::mir::{\n+    BasicBlock, BasicBlockData, Body, Local, Location, Place, PlaceBase, Projection,\n+    ProjectionElem, Rvalue, SourceInfo, Statement, StatementKind, Terminator, TerminatorKind,\n+    UserTypeProjection,\n+};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty};\n use rustc::ty::subst::SubstsRef;\n@@ -27,6 +30,7 @@ pub(super) fn generate_constraints<'cx, 'tcx>(\n         liveness_constraints,\n         location_table,\n         all_facts,\n+        body,\n     };\n \n     for (bb, data) in body.basic_blocks().iter_enumerated() {\n@@ -41,6 +45,7 @@ struct ConstraintGeneration<'cg, 'cx, 'tcx> {\n     location_table: &'cg LocationTable,\n     liveness_constraints: &'cg mut LivenessValues<RegionVid>,\n     borrow_set: &'cg BorrowSet<'tcx>,\n+    body: &'cg Body<'tcx>,\n }\n \n impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n@@ -114,6 +119,17 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n                 self.location_table\n                     .start_index(location.successor_within_block()),\n             ));\n+\n+            // If there are borrows on this now dead local, we need to record them as `killed`.\n+            if let StatementKind::StorageDead(ref local) = statement.kind {\n+                record_killed_borrows_for_local(\n+                    all_facts,\n+                    self.borrow_set,\n+                    self.location_table,\n+                    local,\n+                    location,\n+                );\n+            }\n         }\n \n         self.super_statement(statement, location);\n@@ -127,20 +143,7 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n     ) {\n         // When we see `X = ...`, then kill borrows of\n         // `(*X).foo` and so forth.\n-        if let Some(all_facts) = self.all_facts {\n-            if let Place {\n-                base: PlaceBase::Local(temp),\n-                projection: None,\n-            } = place {\n-                if let Some(borrow_indices) = self.borrow_set.local_map.get(temp) {\n-                    all_facts.killed.reserve(borrow_indices.len());\n-                    for &borrow_index in borrow_indices {\n-                        let location_index = self.location_table.mid_index(location);\n-                        all_facts.killed.push((borrow_index, location_index));\n-                    }\n-                }\n-            }\n-        }\n+        self.record_killed_borrows_for_place(place, location);\n \n         self.super_assign(place, rvalue, location);\n     }\n@@ -167,6 +170,14 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n             }\n         }\n \n+        // A `Call` terminator's return value can be a local which has borrows,\n+        // so we need to record those as `killed` as well.\n+        if let TerminatorKind::Call { ref destination, .. } = terminator.kind {\n+            if let Some((place, _)) = destination {\n+                self.record_killed_borrows_for_place(place, location);\n+            }\n+        }\n+\n         self.super_terminator(terminator, location);\n     }\n \n@@ -201,4 +212,96 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n                 self.liveness_constraints.add_element(vid, location);\n             });\n     }\n+\n+    /// When recording facts for Polonius, records the borrows on the specified place\n+    /// as `killed`. For example, when assigning to a local, or on a call's return destination.\n+    fn record_killed_borrows_for_place(&mut self, place: &Place<'tcx>, location: Location) {\n+        if let Some(all_facts) = self.all_facts {\n+            // Depending on the `Place` we're killing:\n+            // - if it's a local, or a single deref of a local,\n+            //   we kill all the borrows on the local.\n+            // - if it's a deeper projection, we have to filter which\n+            //   of the borrows are killed: the ones whose `borrowed_place`\n+            //   conflicts with the `place`.\n+            match place {\n+                Place {\n+                    base: PlaceBase::Local(local),\n+                    projection: None,\n+                } |\n+                Place {\n+                    base: PlaceBase::Local(local),\n+                    projection: Some(box Projection {\n+                        base: None,\n+                        elem: ProjectionElem::Deref,\n+                    }),\n+                } => {\n+                    debug!(\n+                        \"Recording `killed` facts for borrows of local={:?} at location={:?}\",\n+                        local, location\n+                    );\n+\n+                    record_killed_borrows_for_local(\n+                        all_facts,\n+                        self.borrow_set,\n+                        self.location_table,\n+                        local,\n+                        location,\n+                    );\n+                }\n+\n+                Place {\n+                    base: PlaceBase::Static(_),\n+                    ..\n+                } => {\n+                    // Ignore kills of static or static mut variables.\n+                }\n+\n+                Place {\n+                    base: PlaceBase::Local(local),\n+                    projection: Some(_),\n+                } => {\n+                    // Kill conflicting borrows of the innermost local.\n+                    debug!(\n+                        \"Recording `killed` facts for borrows of \\\n+                            innermost projected local={:?} at location={:?}\",\n+                        local, location\n+                    );\n+\n+                    if let Some(borrow_indices) = self.borrow_set.local_map.get(local) {\n+                        for &borrow_index in borrow_indices {\n+                            let places_conflict = places_conflict::places_conflict(\n+                                self.infcx.tcx,\n+                                self.body,\n+                                &self.borrow_set.borrows[borrow_index].borrowed_place,\n+                                place,\n+                                places_conflict::PlaceConflictBias::NoOverlap,\n+                            );\n+\n+                            if places_conflict {\n+                                let location_index = self.location_table.mid_index(location);\n+                                all_facts.killed.push((borrow_index, location_index));\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// When recording facts for Polonius, records the borrows on the specified local as `killed`.\n+fn record_killed_borrows_for_local(\n+    all_facts: &mut AllFacts,\n+    borrow_set: &BorrowSet<'_>,\n+    location_table: &LocationTable,\n+    local: &Local,\n+    location: Location,\n+) {\n+    if let Some(borrow_indices) = borrow_set.local_map.get(local) {\n+        all_facts.killed.reserve(borrow_indices.len());\n+        for &borrow_index in borrow_indices {\n+            let location_index = location_table.mid_index(location);\n+            all_facts.killed.push((borrow_index, location_index));\n+        }\n+    }\n }"}, {"sha": "89af8764557ff58e29428659c9e67dcc989b80d9", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.polonius.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,16 @@\n+error[E0597]: `books` does not live long enough\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:11:17\n+   |\n+LL |     Box::new(|| books.push(4))\n+   |     ------------^^^^^---------\n+   |     |        |  |\n+   |     |        |  borrowed value does not live long enough\n+   |     |        value captured here\n+   |     borrow later used here\n+LL |\n+LL | }\n+   | - `books` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d97883ad47a509f1c1cb51f015adbebfc682960f", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.edition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n warning[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/borrowck-migrate-to-nll.rs:25:18\n+  --> $DIR/borrowck-migrate-to-nll.rs:26:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             ---"}, {"sha": "a64df9df25948058b9ca092475cc918e779bfd1c", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -10,6 +10,7 @@\n // just ignore it instead:\n \n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n // revisions: zflag edition\n //[zflag]compile-flags: -Z borrowck=migrate"}, {"sha": "d97883ad47a509f1c1cb51f015adbebfc682960f", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.zflag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n warning[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/borrowck-migrate-to-nll.rs:25:18\n+  --> $DIR/borrowck-migrate-to-nll.rs:26:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             ---"}, {"sha": "c1564cf07e68aa9f629855975a15f3448c4011a1", "filename": "src/test/ui/borrowck/issue-45983.migrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/issue-45983.rs:19:27\n+  --> $DIR/issue-45983.rs:20:27\n    |\n LL |     let x = None;\n    |         - borrowed data cannot be stored into here..."}, {"sha": "dff0b4cebace96e6291a9dc4706f987a400a16a9", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/issue-45983.rs:19:18\n+  --> $DIR/issue-45983.rs:20:18\n    |\n LL |     let x = None;\n    |         - `x` is declared here, outside of the closure body\n@@ -9,7 +9,7 @@ LL |     give_any(|y| x = Some(y));\n    |               `y` is a reference that is only valid in the closure body\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-45983.rs:19:18\n+  --> $DIR/issue-45983.rs:20:18\n    |\n LL |     let x = None;\n    |         - help: consider changing this to be mutable: `mut x`"}, {"sha": "3cd282077424b711c18bac66a3c96ecce90f836b", "filename": "src/test/ui/borrowck/issue-45983.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -7,6 +7,7 @@\n // revisions, don't worry about the --compare-mode=nll on this test.\n \n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n //[nll]compile-flags: -Z borrowck=mir\n "}, {"sha": "a5b2e8762746c70deb6b760cf67cd9ce62b558d5", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.polonius.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,59 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:5:21\n+   |\n+LL |     let ref mut x = 1234543;\n+   |                     ^^^^^^^ creates a temporary which is freed while still in use\n+LL |     x\n+   |     - borrow later used here\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:10:25\n+   |\n+LL |     let (ref mut x, ) = (1234543, );\n+   |                         ^^^^^^^^^^^ creates a temporary which is freed while still in use\n+LL |     x\n+   |     - borrow later used here\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:15:5\n+   |\n+LL |       match 1234543 {\n+   |       ^     ------- temporary value created here\n+   |  _____|\n+   | |\n+LL | |         ref mut x => x\n+LL | |     }\n+   | |_____^ returns a value referencing data owned by the current function\n+\n+error[E0515]: cannot return value referencing temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:21:5\n+   |\n+LL |       match (123443,) {\n+   |       ^     --------- temporary value created here\n+   |  _____|\n+   | |\n+LL | |         (ref mut x,) => x,\n+LL | |     }\n+   | |_____^ returns a value referencing data owned by the current function\n+\n+error[E0515]: cannot return reference to temporary value\n+  --> $DIR/promote-ref-mut-in-let-issue-46557.rs:27:5\n+   |\n+LL |     &mut 1234543\n+   |     ^^^^^-------\n+   |     |    |\n+   |     |    temporary value created here\n+   |     returns a reference to data owned by the current function\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0515, E0716.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "88e9ced03ddde60f57628a61d5e431e8f02698a1", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2015.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:18:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n@@ -11,7 +11,7 @@ LL |     v.extend(shared);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:28:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n    |\n LL |     v.extend(&v);\n    |     ^^------^--^\n@@ -21,7 +21,7 @@ LL |     v.extend(&v);\n    |     mutable borrow occurs here\n \n warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:39:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here"}, {"sha": "88e9ced03ddde60f57628a61d5e431e8f02698a1", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2018.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:18:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n@@ -11,7 +11,7 @@ LL |     v.extend(shared);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:28:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n    |\n LL |     v.extend(&v);\n    |     ^^------^--^\n@@ -21,7 +21,7 @@ LL |     v.extend(&v);\n    |     mutable borrow occurs here\n \n warning: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:39:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here"}, {"sha": "52017394e898e901a5e7602ba02874ef1ea828c7", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2015.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:18:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     v.extend(shared);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:28:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n    |\n LL |     v.extend(&v);\n    |     ^^------^--^\n@@ -20,7 +20,7 @@ LL |     v.extend(&v);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:39:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here"}, {"sha": "52017394e898e901a5e7602ba02874ef1ea828c7", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2018.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:18:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:19:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n@@ -10,7 +10,7 @@ LL |     v.extend(shared);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:28:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:29:5\n    |\n LL |     v.extend(&v);\n    |     ^^------^--^\n@@ -20,7 +20,7 @@ LL |     v.extend(&v);\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/two-phase-reservation-sharing-interference-2.rs:39:5\n+  --> $DIR/two-phase-reservation-sharing-interference-2.rs:40:5\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here"}, {"sha": "14f687c23780c080eb1685c9ff47f435b210840d", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -3,6 +3,7 @@\n // everyone else.\n \n //ignore-compare-mode-nll\n+//ignore-compare-mode-polonius\n \n //revisions: migrate2015 migrate2018 nll2015 nll2018\n "}, {"sha": "7b246426a23334c8e6fbf0b74bf38ed56bc7f0bc", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.polonius.stderr", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,148 @@\n+error[E0503]: cannot use `self.cx` because it was mutably borrowed\n+  --> $DIR/two-phase-surprise-no-conflict.rs:21:23\n+   |\n+LL |         let _mut_borrow = &mut *self;\n+   |                           ---------- borrow of `*self` occurs here\n+LL |         let _access = self.cx;\n+   |                       ^^^^^^^ use of borrowed `*self`\n+LL |\n+LL |         _mut_borrow;\n+   |         ----------- borrow later used here\n+\n+error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:57:17\n+   |\n+LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n+   |                 ^^^^^---------^^-----------^^^^^^^^^^^^^^^^^\n+   |                 |    |          |\n+   |                 |    |          immutable borrow occurs here\n+   |                 |    immutable borrow later used by call\n+   |                 mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:119:51\n+   |\n+LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n+   |     --- ---------------                           ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:122:54\n+   |\n+LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:125:53\n+   |\n+LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:128:44\n+   |\n+LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:138:5\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n+   |     |   |                                        |\n+   |     |   |                                        immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:141:5\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ^^^^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n+   |     |   |                                       |\n+   |     |   |                                       immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:144:5\n+   |\n+LL |     reg.register_ref(&CapturePass::new(&reg.sess_mut));\n+   |     ^^^^------------^^^^^^^^^^^^^^^^^^^-------------^^\n+   |     |   |                              |\n+   |     |   |                              immutable borrow occurs here\n+   |     |   immutable borrow later used by call\n+   |     mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:154:5\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ^^^^--------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n+   |     |   |                                            |\n+   |     |   |                                            first mutable borrow occurs here\n+   |     |   first borrow later used by call\n+   |     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:154:54\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:158:5\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ^^^^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n+   |     |   |                                           |\n+   |     |   |                                           first mutable borrow occurs here\n+   |     |   first borrow later used by call\n+   |     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:158:53\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:162:5\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     ^^^^------------^^^^^^^^^^^^^^^^^^^^^^^-----------------^^\n+   |     |   |                                  |\n+   |     |   |                                  first mutable borrow occurs here\n+   |     |   first borrow later used by call\n+   |     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:162:44\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |     |   |\n+   |     |   first borrow later used by call\n+   |     first mutable borrow occurs here\n+\n+error: aborting due to 15 previous errors\n+\n+Some errors have detailed explanations: E0499, E0502, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "cf41bd7bdb1ebb3b1502fa9a6c9bd3a2f2b609b2", "filename": "src/test/ui/consts/promote_const_let.polonius.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote_const_let.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,29 @@\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/promote_const_let.rs:4:9\n+   |\n+LL |     let x: &'static u32 = {\n+   |         - borrow later stored here\n+LL |         let y = 42;\n+LL |         &y\n+   |         ^^ borrowed value does not live long enough\n+LL |     };\n+   |     - `y` dropped here while still borrowed\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote_const_let.rs:6:28\n+   |\n+LL |       let x: &'static u32 = &{\n+   |  ____________------------____^\n+   | |            |\n+   | |            type annotation requires that borrow lasts for `'static`\n+LL | |         let y = 42;\n+LL | |         y\n+LL | |     };\n+   | |_____^ creates a temporary which is freed while still in use\n+LL |   }\n+   |   - temporary value is freed at the end of this statement\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "dbcb0fcebb73df995c9593808ede5da417c4f40c", "filename": "src/test/ui/dropck/dropck_trait_cycle_checked.polonius.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck_trait_cycle_checked.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,74 @@\n+error[E0597]: `o2` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:111:13\n+   |\n+LL |     o1.set0(&o2);\n+   |             ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | `o2` dropped here while still borrowed\n+   | borrow might be used here, when `o2` is dropped and runs the destructor for type `std::boxed::Box<dyn Obj<'_>>`\n+\n+error[E0597]: `o3` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:112:13\n+   |\n+LL |     o1.set1(&o3);\n+   |             ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | `o3` dropped here while still borrowed\n+   | borrow might be used here, when `o3` is dropped and runs the destructor for type `std::boxed::Box<dyn Obj<'_>>`\n+\n+error[E0597]: `o2` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:113:13\n+   |\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n+...\n+LL |     o2.set0(&o2);\n+   |             ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `o2` dropped here while still borrowed\n+\n+error[E0597]: `o3` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:114:13\n+   |\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                                         -------- cast requires that `o3` is borrowed for `'static`\n+...\n+LL |     o2.set1(&o3);\n+   |             ^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `o3` dropped here while still borrowed\n+\n+error[E0597]: `o1` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:115:13\n+   |\n+LL |     o3.set0(&o1);\n+   |             ^^^ borrowed value does not live long enough\n+LL |     o3.set1(&o2);\n+LL | }\n+   | -\n+   | |\n+   | `o1` dropped here while still borrowed\n+   | borrow might be used here, when `o1` is dropped and runs the destructor for type `std::boxed::Box<dyn Obj<'_>>`\n+\n+error[E0597]: `o2` does not live long enough\n+  --> $DIR/dropck_trait_cycle_checked.rs:116:13\n+   |\n+LL |     let (o1, o2, o3): (Box<dyn Obj>, Box<dyn Obj>, Box<dyn Obj>) = (O::new(), O::new(), O::new());\n+   |                                                                               -------- cast requires that `o2` is borrowed for `'static`\n+...\n+LL |     o3.set1(&o2);\n+   |             ^^^ borrowed value does not live long enough\n+LL | }\n+   | - `o2` dropped here while still borrowed\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "47b48b399c25c7cbabde881a468e9fcc5d3c2c8d", "filename": "src/test/ui/emit-artifact-notifications.polonius.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Femit-artifact-notifications.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Femit-artifact-notifications.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-artifact-notifications.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/emit-artifact-notifications.polonius/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "8ec752409ab00483c89e3dbaee6b3a94bf7eff27", "filename": "src/test/ui/feature-gates/feature-gate-nll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -3,6 +3,7 @@\n \n // Don't use compare-mode=nll, since that turns on NLL.\n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n #![feature(rustc_attrs)]\n "}, {"sha": "e5b28bbfa2477227e48f633e6fe153a27ce36e81", "filename": "src/test/ui/feature-gates/feature-gate-nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-nll.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n warning[E0502]: cannot borrow `*x.1` as immutable because it is also borrowed as mutable\n-  --> $DIR/feature-gate-nll.rs:14:13\n+  --> $DIR/feature-gate-nll.rs:15:13\n    |\n LL |     let m = &mut x;\n    |             ------ mutable borrow occurs here\n@@ -14,7 +14,7 @@ LL |     m;\n    = note: for more information, try `rustc --explain E0729`\n \n error: compilation successful\n-  --> $DIR/feature-gate-nll.rs:10:1\n+  --> $DIR/feature-gate-nll.rs:11:1\n    |\n LL | / fn main() {\n LL | |     let mut x = (33, &0);"}, {"sha": "530bf368f676e41476eb9948e91e939a268c5e97", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.polonius.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,20 @@\n+error[E0597]: `b` does not live long enough\n+  --> $DIR/ref-escapes-but-not-over-yield.rs:11:13\n+   |\n+LL |       let mut b = move || {\n+   |  _________________-\n+LL | |         yield();\n+LL | |         let b = 5;\n+LL | |         a = &b;\n+   | |             ^^ borrowed value does not live long enough\n+LL | |\n+LL | |     };\n+   | |     -\n+   | |     |\n+   | |     `b` dropped here while still borrowed\n+   | |_____... and the borrow might be used here, when that temporary is dropped and runs the destructor for generator\n+   |       a temporary with access to the borrow is created here ...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "e7deca7644b0e2d40f371a494bcc48a1187f32fa", "filename": "src/test/ui/hrtb/issue-30786.migrate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.migrate.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,11 +1,11 @@\n error: implementation of `Stream` is not general enough\n-  --> $DIR/issue-30786.rs:107:22\n+  --> $DIR/issue-30786.rs:108:22\n    |\n LL |     let map = source.map(|x: &_| x);\n    |                      ^^^\n    |\n-   = note: `Stream` would have to be implemented for the type `&'0 mut Map<Repeat, [closure@$DIR/issue-30786.rs:107:26: 107:35]>`, for any lifetime `'0`\n-   = note: but `Stream` is actually implemented for the type `&'1 mut Map<Repeat, [closure@$DIR/issue-30786.rs:107:26: 107:35]>`, for some specific lifetime `'1`\n+   = note: `Stream` would have to be implemented for the type `&'0 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for any lifetime `'0`\n+   = note: but `Stream` is actually implemented for the type `&'1 mut Map<Repeat, [closure@$DIR/issue-30786.rs:108:26: 108:35]>`, for some specific lifetime `'1`\n \n error: aborting due to previous error\n "}, {"sha": "8614d86d93ac3436eb3c5d649cd378931081447e", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,11 +1,11 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:111:18\n+  --> $DIR/issue-30786.rs:112:18\n    |\n LL |     let filter = map.filter(|x: &_| true);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:113:17\n+  --> $DIR/issue-30786.rs:114:17\n    |\n LL |     let count = filter.count(); // Assert that we still have a valid stream.\n    |                 ^^^^^^^^^^^^^^"}, {"sha": "b9920a1950498d3416be579c9c5a3b70574f7674", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -12,6 +12,7 @@\n // revisions, don't worry about the --compare-mode=nll on this test.\n \n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n //[nll]compile-flags: -Z borrowck=mir\n "}, {"sha": "2e99572d018281ab1174e744c756be8c131e856b", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.migrate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:51:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:52:5\n    |\n LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n    |              -- lifetime `'a` defined here\n@@ -14,7 +14,7 @@ LL | }\n    = note: for more information, try `rustc --explain E0729`\n \n warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    -- lifetime `'a` defined here\n@@ -29,7 +29,7 @@ LL | }\n    = note: for more information, try `rustc --explain E0729`\n \n warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:74:5\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n    |                          -- lifetime `'a` defined here\n@@ -44,7 +44,7 @@ LL | }\n    = note: for more information, try `rustc --explain E0729`\n \n error: compilation successful\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:80:1\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:81:1\n    |\n LL | / fn main() {\n LL | |     let mut x = 1;"}, {"sha": "45b22511d27d641c0a8c189434b0f37a2ff8784d", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:51:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:52:5\n    |\n LL | fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n    |              -- lifetime `'a` defined here\n@@ -10,7 +10,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:62:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:63:5\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    -- lifetime `'a` defined here\n@@ -21,7 +21,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:74:5\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n    |                          -- lifetime `'a` defined here"}, {"sha": "9f261884f3d2d43568c836ce6c3327e1c32947ee", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -7,6 +7,7 @@\n \n // revisions: nll migrate\n // ignore-compare-mode-nll\n+// ignore-compare-mode-polonius\n \n // This test is going to pass in the migrate revision, because the AST-borrowck\n // accepted this code in the past (see notes below). So we use `#[rustc_error]`"}, {"sha": "2df6d5d61fc46d975283d7b334bdb2e1d38a7989", "filename": "src/test/ui/nll/get_default.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fget_default.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fget_default.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,15 @@\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n+  --> $DIR/get_default.rs:32:17\n+   |\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 map.set(String::new()); // Both AST and MIR error here\n+   |                 ^^^ mutable borrow occurs here\n+LL |\n+LL |                 return v;\n+   |                        - immutable borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "0a4c20d15159f251dbf09eda16e318153833b13b", "filename": "src/test/ui/nll/issue-46589.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,3 +1,9 @@\n+// This tests passes in Polonius mode, so is skipped in the automated compare-mode.\n+// We will manually check it passes in Polonius tests, as we can't have a test here\n+// which conditionally passes depending on a test revision/compile-flags.\n+\n+// ignore-compare-mode-polonius\n+\n struct Foo;\n \n impl Foo {"}, {"sha": "82cd364eeffd0c42d1c39428ae83a7343b020295", "filename": "src/test/ui/nll/issue-46589.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `**other` as mutable more than once at a time\n-  --> $DIR/issue-46589.rs:17:21\n+  --> $DIR/issue-46589.rs:23:21\n    |\n LL |         *other = match (*other).get_self() {\n    |                        -------- first mutable borrow occurs here"}, {"sha": "eb8442b31d7c73b323076b65fee62c112f77bfa5", "filename": "src/test/ui/nll/loan_ends_mid_block_pair.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `data.0` because it is borrowed\n+  --> $DIR/loan_ends_mid_block_pair.rs:12:5\n+   |\n+LL |     let c = &mut data.0;\n+   |             ----------- borrow of `data.0` occurs here\n+LL |     capitalize(c);\n+LL |     data.0 = 'e';\n+   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n+...\n+LL |     capitalize(c);\n+   |                - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "a80c62d19d5a6b34824fe11c7419fa0730748c02", "filename": "src/test/ui/nll/polonius/assignment-kills-loans.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-kills-loans.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,88 @@\n+#![allow(dead_code)]\n+\n+// This tests the various kinds of assignments there are. Polonius used to generate `killed`\n+// facts only on simple assigments, but not projections, incorrectly causing errors to be emitted\n+// for code accepted by NLL. They are all variations from example code in the NLL RFC.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct List<T> {\n+    value: T,\n+    next: Option<Box<List<T>>>,\n+}\n+\n+// Assignment to a local: the `list` assignment should clear the existing\n+// borrows of `list.value` and `list.next`\n+fn assignment_to_local<T>(mut list: &mut List<T>) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.value);\n+        if let Some(n) = list.next.as_mut() {\n+            list = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Assignment to a deref projection: the `*list` assignment should clear the existing\n+// borrows of `list.value` and `list.next`\n+fn assignment_to_deref_projection<T>(mut list: Box<&mut List<T>>) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.value);\n+        if let Some(n) = list.next.as_mut() {\n+            *list = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Assignment to a field projection: the `list.0` assignment should clear the existing\n+// borrows of `list.0.value` and `list.0.next`\n+fn assignment_to_field_projection<T>(mut list: (&mut List<T>,)) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.0.value);\n+        if let Some(n) = list.0.next.as_mut() {\n+            list.0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Assignment to a deref field projection: the `*list.0` assignment should clear the existing\n+// borrows of `list.0.value` and `list.0.next`\n+fn assignment_to_deref_field_projection<T>(mut list: (Box<&mut List<T>>,)) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut list.0.value);\n+        if let Some(n) = list.0.next.as_mut() {\n+            *list.0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+// Similar to `assignment_to_deref_field_projection` but through a longer projection chain\n+fn assignment_through_projection_chain<T>(\n+    mut list: (((((Box<&mut List<T>>,),),),),),\n+) -> Vec<&mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut ((((list.0).0).0).0).0.value);\n+        if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n+            *((((list.0).0).0).0).0 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "c0ba1b983fc35ebff2668d270a370a46a9db6b8e", "filename": "src/test/ui/nll/polonius/assignment-to-differing-field.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,50 @@\n+#![allow(dead_code)]\n+\n+// Compared to `assignment-kills-loans.rs`, we check here\n+// that we do not kill too many borrows. Assignments to the `.1`\n+// field projections should leave the borrows on `.0` intact.\n+\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct List<T> {\n+    value: T,\n+    next: Option<Box<List<T>>>,\n+}\n+\n+\n+fn assignment_to_field_projection<'a, T>(\n+    mut list: (&'a mut List<T>, &'a mut List<T>),\n+) -> Vec<&'a mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut (list.0).value);\n+        //~^ ERROR cannot borrow `list.0.value` as mutable\n+\n+        if let Some(n) = (list.0).next.as_mut() {\n+        //~^ ERROR cannot borrow `list.0.next` as mutable\n+            list.1 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn assignment_through_projection_chain<'a, T>(\n+    mut list: (((((Box<&'a mut List<T>>, Box<&'a mut List<T>>),),),),),\n+) -> Vec<&'a mut T> {\n+    let mut result = vec![];\n+    loop {\n+        result.push(&mut ((((list.0).0).0).0).0.value);\n+        //~^ ERROR cannot borrow `list.0.0.0.0.0.value` as mutable\n+\n+        if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n+        //~^ ERROR cannot borrow `list.0.0.0.0.0.next` as mutable\n+            *((((list.0).0).0).0).1 = n;\n+        } else {\n+            return result;\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "07ca021b53bce5b8ebadc036173f2139c8b17206", "filename": "src/test/ui/nll/polonius/assignment-to-differing-field.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,51 @@\n+error[E0499]: cannot borrow `list.0.value` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:21:21\n+   |\n+LL | fn assignment_to_field_projection<'a, T>(\n+   |                                   -- lifetime `'a` defined here\n+...\n+LL |         result.push(&mut (list.0).value);\n+   |                     ^^^^^^^^^^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\n+...\n+LL |             return result;\n+   |                    ------ returning this value requires that `list.0.value` is borrowed for `'a`\n+\n+error[E0499]: cannot borrow `list.0.next` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:24:26\n+   |\n+LL | fn assignment_to_field_projection<'a, T>(\n+   |                                   -- lifetime `'a` defined here\n+...\n+LL |         if let Some(n) = (list.0).next.as_mut() {\n+   |                          ^^^^^^^^^^^^^---------\n+   |                          |\n+   |                          mutable borrow starts here in previous iteration of loop\n+   |                          argument requires that `list.0.next` is borrowed for `'a`\n+\n+error[E0499]: cannot borrow `list.0.0.0.0.0.value` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:38:21\n+   |\n+LL | fn assignment_through_projection_chain<'a, T>(\n+   |                                        -- lifetime `'a` defined here\n+...\n+LL |         result.push(&mut ((((list.0).0).0).0).0.value);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\n+...\n+LL |             return result;\n+   |                    ------ returning this value requires that `list.0.0.0.0.0.value` is borrowed for `'a`\n+\n+error[E0499]: cannot borrow `list.0.0.0.0.0.next` as mutable more than once at a time\n+  --> $DIR/assignment-to-differing-field.rs:41:26\n+   |\n+LL | fn assignment_through_projection_chain<'a, T>(\n+   |                                        -- lifetime `'a` defined here\n+...\n+LL |         if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^---------\n+   |                          |\n+   |                          mutable borrow starts here in previous iteration of loop\n+   |                          argument requires that `list.0.0.0.0.0.next` is borrowed for `'a`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0499`."}, {"sha": "57dc140110246bd6f184c05215d56f3ecfc6331f", "filename": "src/test/ui/nll/polonius/call-kills-loans.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fcall-kills-loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fcall-kills-loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fcall-kills-loans.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,24 @@\n+// `Call` terminators can write to a local which has existing loans\n+// and those need to be killed like a regular assignment to a local.\n+// This is a simplified version of issue 47680, is correctly accepted\n+// by NLL but was incorrectly rejected by Polonius because of these\n+// missing `killed` facts.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct Thing;\n+\n+impl Thing {\n+    fn next(&mut self) -> &mut Self { unimplemented!() }\n+}\n+\n+fn main() {\n+    let mut temp = &mut Thing;\n+\n+    loop {\n+        let v = temp.next();\n+        temp = v; // accepted by NLL, was incorrectly rejected by Polonius\n+    }\n+}"}, {"sha": "b5792587ff0ec625e2bfb26255be0734087b9b1f", "filename": "src/test/ui/nll/polonius/issue-46589.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fissue-46589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fissue-46589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fissue-46589.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,32 @@\n+// This test is a copy of `ui/nll/issue-46589.rs` which fails in NLL but succeeds in Polonius.\n+// As we can't have a test here which conditionally passes depending on a test\n+// revision/compile-flags. We ensure here that it passes in Polonius mode.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn get_self(&mut self) -> Option<&mut Self> {\n+        Some(self)\n+    }\n+\n+    fn new_self(&mut self) -> &mut Self {\n+        self\n+    }\n+\n+    fn trigger_bug(&mut self) {\n+        let other = &mut (&mut *self);\n+\n+        *other = match (*other).get_self() {\n+            Some(s) => s,\n+            None => (*other).new_self()\n+        };\n+\n+        let c = other;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "bea5e4559988e7efe5246562117147418de3f488", "filename": "src/test/ui/nll/polonius/polonius-smoke-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "previous_filename": "src/test/ui/nll/polonius-smoke-test.rs"}, {"sha": "dbc5b7a019a697359eff2bf4149378b3fbf147ff", "filename": "src/test/ui/nll/polonius/polonius-smoke-test.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fpolonius-smoke-test.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "previous_filename": "src/test/ui/nll/polonius-smoke-test.stderr"}, {"sha": "ff801cbf9f35dafb94ecb12db535c0d4d5466613", "filename": "src/test/ui/nll/polonius/storagedead-kills-loans.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fstoragedead-kills-loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fstoragedead-kills-loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fstoragedead-kills-loans.rs?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,29 @@\n+// Whenever a `StorageDead` MIR statement destroys a value `x`,\n+// we should kill all loans of `x`. This is extracted from `rand 0.4.6`,\n+// is correctly accepted by NLL but was incorrectly rejected by\n+// Polonius because of these missing `killed` facts.\n+\n+// check-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+use std::{io, mem};\n+use std::io::Read;\n+\n+#[allow(dead_code)]\n+fn fill(r: &mut dyn Read, mut buf: &mut [u8]) -> io::Result<()> {\n+    while buf.len() > 0 {\n+        match r.read(buf).unwrap() {\n+            0 => return Err(io::Error::new(io::ErrorKind::Other,\n+                                           \"end of file reached\")),\n+            n => buf = &mut mem::replace(&mut buf, &mut [])[n..],\n+            // ^- Polonius had multiple errors on the previous line (where NLL has none)\n+            // as it didn't know `buf` was killed here, and would\n+            // incorrectly reject both the borrow expression, and the assignment.\n+        }\n+    }\n+    Ok(())\n+}\n+\n+fn main() {\n+}"}, {"sha": "8e3cf59cffb44392efef77e735cec8d45d4b0892", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.polonius.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,15 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/return-ref-mut-issue-46557.rs:4:21\n+   |\n+LL |     let ref mut x = 1234543;\n+   |                     ^^^^^^^ creates a temporary which is freed while still in use\n+LL |     x\n+   |     - borrow later used here\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "a1a1b8c63dac38cfc04ff8162cc2f536d560c84e", "filename": "src/test/ui/save-analysis/emit-notifications.polonius.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,2 @@\n+{\"artifact\":\"$TEST_BUILD_DIR/save-analysis/emit-notifications.polonius/save-analysis/libemit_notifications.json\",\"emit\":\"save-analysis\"}\n+{\"artifact\":\"$TEST_BUILD_DIR/save-analysis/emit-notifications.polonius/libemit_notifications.rlib\",\"emit\":\"link\"}"}, {"sha": "4b906f75149af30ca900d06094f67c4190775ccc", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.polonius.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.polonius.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a676a3666253ee739c127a8bb4a3b94e878e7908/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.polonius.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.polonius.stderr?ref=a676a3666253ee739c127a8bb4a3b94e878e7908", "patch": "@@ -0,0 +1,60 @@\n+error[E0597]: `factorial` does not live long enough\n+  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:15:17\n+   |\n+LL |     let f = |x: u32| -> u32 {\n+   |             --------------- value captured here\n+LL |         let g = factorial.as_ref().unwrap();\n+   |                 ^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | `factorial` dropped here while still borrowed\n+   | borrow might be used here, when `factorial` is dropped and runs the destructor for type `std::option::Option<std::boxed::Box<dyn std::ops::Fn(u32) -> u32>>`\n+\n+error[E0506]: cannot assign to `factorial` because it is borrowed\n+  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:20:5\n+   |\n+LL |     let f = |x: u32| -> u32 {\n+   |             --------------- borrow of `factorial` occurs here\n+LL |         let g = factorial.as_ref().unwrap();\n+   |                 --------- borrow occurs due to use in closure\n+...\n+LL |     factorial = Some(Box::new(f));\n+   |     ^^^^^^^^^\n+   |     |\n+   |     assignment to borrowed `factorial` occurs here\n+   |     borrow later used here\n+\n+error[E0597]: `factorial` does not live long enough\n+  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:28:17\n+   |\n+LL |     let f = |x: u32| -> u32 {\n+   |             --------------- value captured here\n+LL |         let g = factorial.as_ref().unwrap();\n+   |                 ^^^^^^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | -\n+   | |\n+   | `factorial` dropped here while still borrowed\n+   | borrow might be used here, when `factorial` is dropped and runs the destructor for type `std::option::Option<std::boxed::Box<dyn std::ops::Fn(u32) -> u32>>`\n+\n+error[E0506]: cannot assign to `factorial` because it is borrowed\n+  --> $DIR/unboxed-closures-failed-recursive-fn-1.rs:33:5\n+   |\n+LL |     let f = |x: u32| -> u32 {\n+   |             --------------- borrow of `factorial` occurs here\n+LL |         let g = factorial.as_ref().unwrap();\n+   |                 --------- borrow occurs due to use in closure\n+...\n+LL |     factorial = Some(Box::new(f));\n+   |     ^^^^^^^^^\n+   |     |\n+   |     assignment to borrowed `factorial` occurs here\n+   |     borrow later used here\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0506, E0597.\n+For more information about an error, try `rustc --explain E0506`."}]}