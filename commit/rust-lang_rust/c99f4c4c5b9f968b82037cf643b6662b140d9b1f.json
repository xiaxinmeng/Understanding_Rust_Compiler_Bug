{"sha": "c99f4c4c5b9f968b82037cf643b6662b140d9b1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OWY0YzRjNWI5Zjk2OGI4MjAzN2NmNjQzYjY2NjJiMTQwZDliMWY=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-02-27T16:00:01Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2018-02-28T11:41:36Z"}, "message": "Stabilize LocalKey::try_with", "tree": {"sha": "56e38b4172ad4e4899f0a29aff53e40165d23935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56e38b4172ad4e4899f0a29aff53e40165d23935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c99f4c4c5b9f968b82037cf643b6662b140d9b1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c99f4c4c5b9f968b82037cf643b6662b140d9b1f", "html_url": "https://github.com/rust-lang/rust/commit/c99f4c4c5b9f968b82037cf643b6662b140d9b1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c99f4c4c5b9f968b82037cf643b6662b140d9b1f/comments", "author": null, "committer": null, "parents": [{"sha": "29f5c699b11a6a148f097f82eaa05202f8799bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f5c699b11a6a148f097f82eaa05202f8799bbc", "html_url": "https://github.com/rust-lang/rust/commit/29f5c699b11a6a148f097f82eaa05202f8799bbc"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "f01ca18851d776c35b7cb1f381d5f3ba24c04b3b", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c99f4c4c5b9f968b82037cf643b6662b140d9b1f/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99f4c4c5b9f968b82037cf643b6662b140d9b1f/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=c99f4c4c5b9f968b82037cf643b6662b140d9b1f", "patch": "@@ -17,7 +17,9 @@ use io::{self, Initializer, BufReader, LineWriter};\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n-use thread::{LocalKey, LocalKeyState};\n+use thread::LocalKey;\n+#[allow(deprecated)]\n+use thread::LocalKeyState;\n \n /// Stdout used by print! and println! macros\n thread_local! {\n@@ -668,6 +670,7 @@ pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n /// thread, it will just fall back to the global stream.\n ///\n /// However, if the actual I/O causes an error, this function does panic.\n+#[allow(deprecated)]\n fn print_to<T>(args: fmt::Arguments,\n                local_s: &'static LocalKey<RefCell<Option<Box<Write+Send>>>>,\n                global_s: fn() -> T,"}, {"sha": "b6dbcf8914cbf8dfa237a5e425ad6d975824da7c", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c99f4c4c5b9f968b82037cf643b6662b140d9b1f/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99f4c4c5b9f968b82037cf643b6662b140d9b1f/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=c99f4c4c5b9f968b82037cf643b6662b140d9b1f", "patch": "@@ -199,6 +199,7 @@ macro_rules! __thread_local_inner {\n #[unstable(feature = \"thread_local_state\",\n            reason = \"state querying was recently added\",\n            issue = \"27716\")]\n+#[rustc_deprecated(since = \"1.26.0\", reason = \"use `LocalKey::try_with` instead\")]\n #[derive(Debug, Eq, PartialEq, Copy, Clone)]\n pub enum LocalKeyState {\n     /// All keys are in this state whenever a thread starts. Keys will\n@@ -234,25 +235,19 @@ pub enum LocalKeyState {\n }\n \n /// An error returned by [`LocalKey::try_with`](struct.LocalKey.html#method.try_with).\n-#[unstable(feature = \"thread_local_state\",\n-           reason = \"state querying was recently added\",\n-           issue = \"27716\")]\n+#[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n pub struct AccessError {\n     _private: (),\n }\n \n-#[unstable(feature = \"thread_local_state\",\n-           reason = \"state querying was recently added\",\n-           issue = \"27716\")]\n+#[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n impl fmt::Debug for AccessError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"AccessError\").finish()\n     }\n }\n \n-#[unstable(feature = \"thread_local_state\",\n-           reason = \"state querying was recently added\",\n-           issue = \"27716\")]\n+#[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n impl fmt::Display for AccessError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(\"already destroyed\", f)\n@@ -341,6 +336,8 @@ impl<T: 'static> LocalKey<T> {\n     #[unstable(feature = \"thread_local_state\",\n                reason = \"state querying was recently added\",\n                issue = \"27716\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use `LocalKey::try_with` instead\")]\n+    #[allow(deprecated)]\n     pub fn state(&'static self) -> LocalKeyState {\n         unsafe {\n             match (self.inner)() {\n@@ -365,11 +362,11 @@ impl<T: 'static> LocalKey<T> {\n     ///\n     /// This function will still `panic!()` if the key is uninitialized and the\n     /// key's initializer panics.\n-    #[unstable(feature = \"thread_local_state\",\n-               reason = \"state querying was recently added\",\n-               issue = \"27716\")]\n+    #[stable(feature = \"thread_local_try_with\", since = \"1.26.0\")]\n     pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>\n-                      where F: FnOnce(&T) -> R {\n+    where\n+        F: FnOnce(&T) -> R,\n+    {\n         unsafe {\n             let slot = (self.inner)().ok_or(AccessError {\n                 _private: (),\n@@ -530,6 +527,7 @@ pub mod os {\n mod tests {\n     use sync::mpsc::{channel, Sender};\n     use cell::{Cell, UnsafeCell};\n+    #[allow(deprecated)]\n     use super::LocalKeyState;\n     use thread;\n \n@@ -565,6 +563,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn states() {\n         struct Foo;\n         impl Drop for Foo {\n@@ -602,6 +601,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn circular() {\n         struct S1;\n         struct S2;\n@@ -642,6 +642,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn self_referential() {\n         struct S1;\n         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));\n@@ -663,6 +664,7 @@ mod tests {\n     // test on macOS.\n     #[test]\n     #[cfg_attr(target_os = \"macos\", ignore)]\n+    #[allow(deprecated)]\n     fn dtors_in_dtors_in_dtors() {\n         struct S1(Sender<()>);\n         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));"}, {"sha": "01898679bdcfc7668b159a1be0c18cbaacc37310", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c99f4c4c5b9f968b82037cf643b6662b140d9b1f/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99f4c4c5b9f968b82037cf643b6662b140d9b1f/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=c99f4c4c5b9f968b82037cf643b6662b140d9b1f", "patch": "@@ -191,7 +191,10 @@ use time::Duration;\n #[macro_use] mod local;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::local::{LocalKey, LocalKeyState, AccessError};\n+pub use self::local::{LocalKey, AccessError};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n+pub use self::local::LocalKeyState;\n \n // The types used by the thread_local! macro to access TLS keys. Note that there\n // are two types, the \"OS\" type and the \"fast\" type. The OS thread local key"}, {"sha": "b5b9fb561ae7e317feb168fd79d4d387a507e809", "filename": "src/test/run-pass/tls-init-on-init.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c99f4c4c5b9f968b82037cf643b6662b140d9b1f/src%2Ftest%2Frun-pass%2Ftls-init-on-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c99f4c4c5b9f968b82037cf643b6662b140d9b1f/src%2Ftest%2Frun-pass%2Ftls-init-on-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftls-init-on-init.rs?ref=c99f4c4c5b9f968b82037cf643b6662b140d9b1f", "patch": "@@ -11,6 +11,7 @@\n // ignore-emscripten no threads support\n \n #![feature(thread_local_state)]\n+#![allow(deprecated)]\n \n use std::thread::{self, LocalKeyState};\n use std::sync::atomic::{AtomicUsize, Ordering, ATOMIC_USIZE_INIT};"}]}