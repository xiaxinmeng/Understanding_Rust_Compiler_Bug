{"sha": "7129f172aee6d5143ca36d81defd47dd0c113ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMjlmMTcyYWVlNmQ1MTQzY2EzNmQ4MWRlZmQ0N2RkMGMxMTNjZTM=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-26T04:46:24Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-26T04:46:24Z"}, "message": "Improve diagnostics that result from the fix for #18335", "tree": {"sha": "a7771ddda9f63233ee49d77cb29468116bd93cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7771ddda9f63233ee49d77cb29468116bd93cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7129f172aee6d5143ca36d81defd47dd0c113ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7129f172aee6d5143ca36d81defd47dd0c113ce3", "html_url": "https://github.com/rust-lang/rust/commit/7129f172aee6d5143ca36d81defd47dd0c113ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7129f172aee6d5143ca36d81defd47dd0c113ce3/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1062955b46950114ed3a0a71c043e9644afdce48", "url": "https://api.github.com/repos/rust-lang/rust/commits/1062955b46950114ed3a0a71c043e9644afdce48", "html_url": "https://github.com/rust-lang/rust/commit/1062955b46950114ed3a0a71c043e9644afdce48"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "bdcf01b21abd99b6978460cbe5e2031b7cef9b7a", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7129f172aee6d5143ca36d81defd47dd0c113ce3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7129f172aee6d5143ca36d81defd47dd0c113ce3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=7129f172aee6d5143ca36d81defd47dd0c113ce3", "patch": "@@ -777,13 +777,28 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         // Otherwise, just a plain error.\n         match assignee_cmt.note {\n             mc::NoteClosureEnv(upvar_id) => {\n-                self.bccx.span_err(\n-                    assignment_span,\n-                    format!(\"cannot assign to {}\",\n-                            self.bccx.cmt_to_string(&*assignee_cmt)).as_slice());\n-                self.bccx.span_note(\n-                    self.tcx().map.span(upvar_id.closure_expr_id),\n-                    \"consider changing this closure to take self by mutable reference\");\n+                // If this is an `Fn` closure, it simply can't mutate upvars.\n+                // If it's an `FnMut` closure, the original variable was declared immutable.\n+                // We need to determine which is the case here.\n+                let kind = match assignee_cmt.upvar().unwrap().cat {\n+                    mc::cat_upvar(mc::Upvar { kind, .. }) => kind,\n+                    _ => unreachable!()\n+                };\n+                if kind == ty::FnUnboxedClosureKind {\n+                    self.bccx.span_err(\n+                        assignment_span,\n+                        format!(\"cannot assign to {}\",\n+                                self.bccx.cmt_to_string(&*assignee_cmt)).as_slice());\n+                    self.bccx.span_note(\n+                        self.tcx().map.span(upvar_id.closure_expr_id),\n+                        \"consider changing this closure to take self by mutable reference\");\n+                } else {\n+                    self.bccx.span_err(\n+                        assignment_span,\n+                        format!(\"cannot assign to {} {}\",\n+                                assignee_cmt.mutbl.to_user_str(),\n+                                self.bccx.cmt_to_string(&*assignee_cmt)).as_slice());\n+                }\n             }\n             _ => match opt_loan_path(&assignee_cmt) {\n                 Some(lp) => {"}, {"sha": "06249b956b67dc0a8691f23bb414fec423cdafc3", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7129f172aee6d5143ca36d81defd47dd0c113ce3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7129f172aee6d5143ca36d81defd47dd0c113ce3/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=7129f172aee6d5143ca36d81defd47dd0c113ce3", "patch": "@@ -626,7 +626,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         match err.code {\n             err_mutbl => {\n                 let descr = match err.cmt.note {\n-                    mc::NoteClosureEnv(_) => {\n+                    mc::NoteClosureEnv(_) | mc::NoteUpvarRef(_) => {\n                         self.cmt_to_string(&*err.cmt)\n                     }\n                     _ => match opt_loan_path(&err.cmt) {\n@@ -762,11 +762,20 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         match code {\n             err_mutbl(..) => {\n                 match err.cmt.note {\n-                    mc::NoteClosureEnv(upvar_id) => {\n-                        self.tcx.sess.span_note(\n-                            self.tcx.map.span(upvar_id.closure_expr_id),\n-                            \"consider changing this closure to take \\\n-                             self by mutable reference\");\n+                    mc::NoteClosureEnv(upvar_id) | mc::NoteUpvarRef(upvar_id) => {\n+                        // If this is an `Fn` closure, it simply can't mutate upvars.\n+                        // If it's an `FnMut` closure, the original variable was declared immutable.\n+                        // We need to determine which is the case here.\n+                        let kind = match err.cmt.upvar().unwrap().cat {\n+                            mc::cat_upvar(mc::Upvar { kind, .. }) => kind,\n+                            _ => unreachable!()\n+                        };\n+                        if kind == ty::FnUnboxedClosureKind {\n+                            self.tcx.sess.span_note(\n+                                self.tcx.map.span(upvar_id.closure_expr_id),\n+                                \"consider changing this closure to take \\\n+                                 self by mutable reference\");\n+                        }\n                     }\n                     _ => {}\n                 }"}]}