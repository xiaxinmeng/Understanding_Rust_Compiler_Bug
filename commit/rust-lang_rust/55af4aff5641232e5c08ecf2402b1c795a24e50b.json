{"sha": "55af4aff5641232e5c08ecf2402b1c795a24e50b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YWY0YWZmNTY0MTIzMmU1YzA4ZWNmMjQwMmIxYzc5NWEyNGU1MGI=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-11-22T07:48:55Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-11-23T04:18:35Z"}, "message": "Change how rustdoc shows constants and statics to be more similar to other items\n\nFixes #19046.", "tree": {"sha": "0c08ebeef30ecce203e7eb0427165d0618753e65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c08ebeef30ecce203e7eb0427165d0618753e65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55af4aff5641232e5c08ecf2402b1c795a24e50b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55af4aff5641232e5c08ecf2402b1c795a24e50b", "html_url": "https://github.com/rust-lang/rust/commit/55af4aff5641232e5c08ecf2402b1c795a24e50b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55af4aff5641232e5c08ecf2402b1c795a24e50b/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b5655cb84284f30b7c6a00dff82546d83abeeca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5655cb84284f30b7c6a00dff82546d83abeeca", "html_url": "https://github.com/rust-lang/rust/commit/6b5655cb84284f30b7c6a00dff82546d83abeeca"}], "stats": {"total": 92, "additions": 35, "deletions": 57}, "files": [{"sha": "3b9c38d18fdbb8530012ff56453df04a5b3ab8d6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 35, "deletions": 57, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/55af4aff5641232e5c08ecf2402b1c795a24e50b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55af4aff5641232e5c08ecf2402b1c795a24e50b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=55af4aff5641232e5c08ecf2402b1c795a24e50b", "patch": "@@ -1386,6 +1386,8 @@ impl<'a> fmt::Show for Item<'a> {\n             clean::TypedefItem(ref t) => item_typedef(fmt, self.item, t),\n             clean::MacroItem(ref m) => item_macro(fmt, self.item, m),\n             clean::PrimitiveItem(ref p) => item_primitive(fmt, self.item, p),\n+            clean::StaticItem(ref i) => item_static(fmt, self.item, i),\n+            clean::ConstantItem(ref c) => item_constant(fmt, self.item, c),\n             _ => Ok(())\n         }\n     }\n@@ -1411,13 +1413,6 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     return s\n }\n \n-fn blank<'a>(s: Option<&'a str>) -> &'a str {\n-    match s {\n-        Some(s) => s,\n-        None => \"\"\n-    }\n-}\n-\n fn shorter<'a>(s: Option<&'a str>) -> &'a str {\n     match s {\n         Some(s) => match s.find_str(\"\\n\\n\") {\n@@ -1528,57 +1523,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                         id = short, name = name));\n         }\n \n-        struct Initializer<'a>(&'a str, Item<'a>);\n-        impl<'a> fmt::Show for Initializer<'a> {\n-            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-                let Initializer(s, item) = *self;\n-                if s.len() == 0 { return Ok(()); }\n-                try!(write!(f, \"<code> = </code>\"));\n-                if s.contains(\"\\n\") {\n-                    match item.href() {\n-                        Some(url) => {\n-                            write!(f, \"<a href='{}'>[definition]</a>\",\n-                                   url)\n-                        }\n-                        None => Ok(()),\n-                    }\n-                } else {\n-                    write!(f, \"<code>{}</code>\", s.as_slice())\n-                }\n-            }\n-        }\n-\n         match myitem.inner {\n-            clean::StaticItem(ref s) | clean::ForeignStaticItem(ref s) => {\n-                try!(write!(w, \"\n-                    <tr>\n-                        <td>{}<code>{}static {}{}: {}</code>{}</td>\n-                        <td class='docblock'>{}&nbsp;</td>\n-                    </tr>\n-                \",\n-                ConciseStability(&myitem.stability),\n-                VisSpace(myitem.visibility),\n-                MutableSpace(s.mutability),\n-                *myitem.name.as_ref().unwrap(),\n-                s.type_,\n-                Initializer(s.expr.as_slice(), Item { cx: cx, item: myitem }),\n-                Markdown(blank(myitem.doc_value()))));\n-            }\n-            clean::ConstantItem(ref s) => {\n-                try!(write!(w, \"\n-                    <tr>\n-                        <td>{}<code>{}const {}: {}</code>{}</td>\n-                        <td class='docblock'>{}&nbsp;</td>\n-                    </tr>\n-                \",\n-                ConciseStability(&myitem.stability),\n-                VisSpace(myitem.visibility),\n-                *myitem.name.as_ref().unwrap(),\n-                s.type_,\n-                Initializer(s.expr.as_slice(), Item { cx: cx, item: myitem }),\n-                Markdown(blank(myitem.doc_value()))));\n-            }\n-\n             clean::ViewItemItem(ref item) => {\n                 match item.inner {\n                     clean::ExternCrate(ref name, ref src, _) => {\n@@ -1625,6 +1570,39 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     write!(w, \"</table>\")\n }\n \n+struct Initializer<'a>(&'a str);\n+impl<'a> fmt::Show for Initializer<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let Initializer(s) = *self;\n+        if s.len() == 0 { return Ok(()); }\n+        try!(write!(f, \"<code> = </code>\"));\n+        write!(f, \"<code>{}</code>\", s.as_slice())\n+    }\n+}\n+\n+fn item_constant(w: &mut fmt::Formatter, it: &clean::Item,\n+                 c: &clean::Constant) -> fmt::Result {\n+    try!(write!(w, \"<pre class='rust const'>{vis}const \\\n+                    {name}: {typ}{init}</pre>\",\n+           vis = VisSpace(it.visibility),\n+           name = it.name.as_ref().unwrap().as_slice(),\n+           typ = c.type_,\n+           init = Initializer(c.expr.as_slice())));\n+    document(w, it)\n+}\n+\n+fn item_static(w: &mut fmt::Formatter, it: &clean::Item,\n+               s: &clean::Static) -> fmt::Result {\n+    try!(write!(w, \"<pre class='rust static'>{vis}static {mutability}\\\n+                    {name}: {typ}{init}</pre>\",\n+           vis = VisSpace(it.visibility),\n+           mutability = MutableSpace(s.mutability),\n+           name = it.name.as_ref().unwrap().as_slice(),\n+           typ = s.type_,\n+           init = Initializer(s.expr.as_slice())));\n+    document(w, it)\n+}\n+\n fn item_function(w: &mut fmt::Formatter, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n     try!(write!(w, \"<pre class='rust fn'>{vis}{fn_style}fn \\"}]}