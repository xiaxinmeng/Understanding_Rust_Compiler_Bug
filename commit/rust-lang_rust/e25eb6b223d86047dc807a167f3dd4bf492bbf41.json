{"sha": "e25eb6b223d86047dc807a167f3dd4bf492bbf41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNWViNmIyMjNkODYwNDdkYzgwN2ExNjdmM2RkNGJmNDkyYmJmNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-30T03:46:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-30T03:46:25Z"}, "message": "auto merge of #15256 : erickt/rust/optimizations, r=alexcrichton\n\nThe bug #11084 causes `option::collect` and `result::collect` about twice as slower as it should because llvm is having some trouble optimizing away the scan closure. This gets rid of it so now those functions perform equivalent to a hand written version.\r\n\r\nThis also adds an impl of `Default` for `Rc` along the way.", "tree": {"sha": "b0c22f04747ee2122e32e8c101e371be5fca01c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0c22f04747ee2122e32e8c101e371be5fca01c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e25eb6b223d86047dc807a167f3dd4bf492bbf41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e25eb6b223d86047dc807a167f3dd4bf492bbf41", "html_url": "https://github.com/rust-lang/rust/commit/e25eb6b223d86047dc807a167f3dd4bf492bbf41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e25eb6b223d86047dc807a167f3dd4bf492bbf41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae48286a99627391e30da3888217e6050230cfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae48286a99627391e30da3888217e6050230cfe", "html_url": "https://github.com/rust-lang/rust/commit/9ae48286a99627391e30da3888217e6050230cfe"}, {"sha": "ab1bd3adf673ef7a515242a2dcc09ce360d41d9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c", "html_url": "https://github.com/rust-lang/rust/commit/ab1bd3adf673ef7a515242a2dcc09ce360d41d9c"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "e3127030842acee212c57d14907b41d438e19698", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e25eb6b223d86047dc807a167f3dd4bf492bbf41/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25eb6b223d86047dc807a167f3dd4bf492bbf41/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=e25eb6b223d86047dc807a167f3dd4bf492bbf41", "patch": "@@ -27,6 +27,7 @@ use core::mem::transmute;\n use core::cell::Cell;\n use core::clone::Clone;\n use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n+use core::default::Default;\n use core::kinds::marker;\n use core::ops::{Deref, Drop};\n use core::option::{Option, Some, None};\n@@ -152,6 +153,13 @@ impl<T> Clone for Rc<T> {\n     }\n }\n \n+impl<T: Default> Default for Rc<T> {\n+    #[inline]\n+    fn default() -> Rc<T> {\n+        Rc::new(Default::default())\n+    }\n+}\n+\n impl<T: PartialEq> PartialEq for Rc<T> {\n     #[inline(always)]\n     fn eq(&self, other: &Rc<T>) -> bool { **self == **other }"}, {"sha": "4fd98538af7ddc93068901d28b657698a6d20f05", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e25eb6b223d86047dc807a167f3dd4bf492bbf41/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25eb6b223d86047dc807a167f3dd4bf492bbf41/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=e25eb6b223d86047dc807a167f3dd4bf492bbf41", "patch": "@@ -265,8 +265,6 @@ pub fn hash_with_keys<T: Hash<SipState>>(k0: u64, k1: u64, value: &T) -> u64 {\n     state.result()\n }\n \n-\n-\n #[cfg(test)]\n mod tests {\n     use test::Bencher;"}, {"sha": "b8612ed93e02dcd39dd1229c1e8da14a460b9f16", "filename": "src/libcore/option.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e25eb6b223d86047dc807a167f3dd4bf492bbf41/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25eb6b223d86047dc807a167f3dd4bf492bbf41/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e25eb6b223d86047dc807a167f3dd4bf492bbf41", "patch": "@@ -587,20 +587,32 @@ impl<A> ExactSize<A> for Item<A> {}\n /// ```\n #[inline]\n pub fn collect<T, Iter: Iterator<Option<T>>, V: FromIterator<T>>(iter: Iter) -> Option<V> {\n-    // FIXME(#11084): This should be twice as fast once this bug is closed.\n-    let mut iter = iter.scan(false, |state, x| {\n-        match x {\n-            Some(x) => Some(x),\n-            None => {\n-                *state = true;\n-                None\n+    // FIXME(#11084): This could be replaced with Iterator::scan when this\n+    // performance bug is closed.\n+\n+    struct Adapter<Iter> {\n+        iter: Iter,\n+        found_none: bool,\n+    }\n+\n+    impl<T, Iter: Iterator<Option<T>>> Iterator<T> for Adapter<Iter> {\n+        #[inline]\n+        fn next(&mut self) -> Option<T> {\n+            match self.iter.next() {\n+                Some(Some(value)) => Some(value),\n+                Some(None) => {\n+                    self.found_none = true;\n+                    None\n+                }\n+                None => None,\n             }\n         }\n-    });\n+    }\n \n-    let v: V = FromIterator::from_iter(iter.by_ref());\n+    let mut adapter = Adapter { iter: iter, found_none: false };\n+    let v: V = FromIterator::from_iter(adapter.by_ref());\n \n-    if iter.state {\n+    if adapter.found_none {\n         None\n     } else {\n         Some(v)"}, {"sha": "5cbbf30cd360721c912bdb4e63fd07031c6e93c9", "filename": "src/libcore/result.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e25eb6b223d86047dc807a167f3dd4bf492bbf41/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25eb6b223d86047dc807a167f3dd4bf492bbf41/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e25eb6b223d86047dc807a167f3dd4bf492bbf41", "patch": "@@ -585,20 +585,32 @@ impl<T: Show, E> Result<T, E> {\n /// ```\n #[inline]\n pub fn collect<T, E, Iter: Iterator<Result<T, E>>, V: FromIterator<T>>(iter: Iter) -> Result<V, E> {\n-    // FIXME(#11084): This should be twice as fast once this bug is closed.\n-    let mut iter = iter.scan(None, |state, x| {\n-        match x {\n-            Ok(x) => Some(x),\n-            Err(err) => {\n-                *state = Some(err);\n-                None\n+    // FIXME(#11084): This could be replaced with Iterator::scan when this\n+    // performance bug is closed.\n+\n+    struct Adapter<Iter, E> {\n+        iter: Iter,\n+        err: Option<E>,\n+    }\n+\n+    impl<T, E, Iter: Iterator<Result<T, E>>> Iterator<T> for Adapter<Iter, E> {\n+        #[inline]\n+        fn next(&mut self) -> Option<T> {\n+            match self.iter.next() {\n+                Some(Ok(value)) => Some(value),\n+                Some(Err(err)) => {\n+                    self.err = Some(err);\n+                    None\n+                }\n+                None => None,\n             }\n         }\n-    });\n+    }\n \n-    let v: V = FromIterator::from_iter(iter.by_ref());\n+    let mut adapter = Adapter { iter: iter, err: None };\n+    let v: V = FromIterator::from_iter(adapter.by_ref());\n \n-    match iter.state {\n+    match adapter.err {\n         Some(err) => Err(err),\n         None => Ok(v),\n     }"}]}