{"sha": "fc08779185e92e456be2e72170f25587d35350f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDg3NzkxODVlOTJlNDU2YmUyZTcyMTcwZjI1NTg3ZDM1MzUwZjg=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-28T08:00:54Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-28T08:03:38Z"}, "message": "rustdoc: remove extraneous .move_iter().collect()s\n\nThe impl of Clean for Vec obsoleted these long, long ago.", "tree": {"sha": "403d7f416787dc3c4b4dbe33dc1678aaf9f02829", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/403d7f416787dc3c4b4dbe33dc1678aaf9f02829"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc08779185e92e456be2e72170f25587d35350f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc08779185e92e456be2e72170f25587d35350f8", "html_url": "https://github.com/rust-lang/rust/commit/fc08779185e92e456be2e72170f25587d35350f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc08779185e92e456be2e72170f25587d35350f8/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "531a3c680d31b52fab99b50fe9a52c55505b9ac9", "url": "https://api.github.com/repos/rust-lang/rust/commits/531a3c680d31b52fab99b50fe9a52c55505b9ac9", "html_url": "https://github.com/rust-lang/rust/commit/531a3c680d31b52fab99b50fe9a52c55505b9ac9"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "002f887834747bfe383d65cccb77315d4a802661", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/fc08779185e92e456be2e72170f25587d35350f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc08779185e92e456be2e72170f25587d35350f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=fc08779185e92e456be2e72170f25587d35350f8", "patch": "@@ -347,18 +347,18 @@ impl Clean<Item> for doctree::Module {\n             }\n         }\n         let items: Vec<Vec<Item> > = vec!(\n-            self.structs.clean().move_iter().collect(),\n-            self.enums.clean().move_iter().collect(),\n-            self.fns.clean().move_iter().collect(),\n+            self.structs.clean(),\n+            self.enums.clean(),\n+            self.fns.clean(),\n             foreigns,\n-            self.mods.clean().move_iter().collect(),\n-            self.typedefs.clean().move_iter().collect(),\n-            self.statics.clean().move_iter().collect(),\n-            self.traits.clean().move_iter().collect(),\n-            self.impls.clean().move_iter().collect(),\n+            self.mods.clean(),\n+            self.typedefs.clean(),\n+            self.statics.clean(),\n+            self.traits.clean(),\n+            self.impls.clean(),\n             self.view_items.clean().move_iter()\n                            .flat_map(|s| s.move_iter()).collect(),\n-            self.macros.clean().move_iter().collect()\n+            self.macros.clean(),\n         );\n \n         // determine if we should display the inner contents or\n@@ -406,7 +406,7 @@ impl Clean<Attribute> for ast::MetaItem {\n         match self.node {\n             ast::MetaWord(ref s) => Word(s.get().to_string()),\n             ast::MetaList(ref s, ref l) => {\n-                List(s.get().to_string(), l.clean().move_iter().collect())\n+                List(s.get().to_string(), l.clean())\n             }\n             ast::MetaNameValue(ref s, ref v) => {\n                 NameValue(s.get().to_string(), lit_to_string(v))\n@@ -460,7 +460,7 @@ impl Clean<TyParam> for ast::TyParam {\n         TyParam {\n             name: self.ident.clean(),\n             did: ast::DefId { krate: ast::LOCAL_CRATE, node: self.id },\n-            bounds: self.bounds.clean().move_iter().collect(),\n+            bounds: self.bounds.clean(),\n             default: self.default.clean()\n         }\n     }\n@@ -688,7 +688,7 @@ impl Clean<Item> for ast::Method {\n         };\n         Item {\n             name: Some(self.pe_ident().clean()),\n-            attrs: self.attrs.clean().move_iter().collect(),\n+            attrs: self.attrs.clean(),\n             source: self.span.clean(),\n             def_id: ast_util::local_def(self.id),\n             visibility: self.pe_vis().clean(),\n@@ -727,7 +727,7 @@ impl Clean<Item> for ast::TypeMethod {\n         };\n         Item {\n             name: Some(self.ident.clean()),\n-            attrs: self.attrs.clean().move_iter().collect(),\n+            attrs: self.attrs.clean(),\n             source: self.span.clean(),\n             def_id: ast_util::local_def(self.id),\n             visibility: None,\n@@ -805,7 +805,7 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n             onceness: self.onceness,\n             fn_style: self.fn_style,\n             bounds: match self.bounds {\n-                Some(ref x) => x.clean().move_iter().collect(),\n+                Some(ref x) => x.clean(),\n                 None        => Vec::new()\n             },\n         }\n@@ -1178,7 +1178,7 @@ impl Clean<Type> for ast::Ty {\n             TyTup(ref tys) => Tuple(tys.iter().map(|x| x.clean()).collect()),\n             TyPath(ref p, ref tpbs, id) => {\n                 resolve_type(p.clean(),\n-                             tpbs.clean().map(|x| x.move_iter().collect()),\n+                             tpbs.clean().map(|x| x),\n                              id)\n             }\n             TyClosure(ref c, region) => Closure(box c.clean(), region.clean()),\n@@ -1307,7 +1307,7 @@ impl Clean<Item> for ast::StructField {\n         };\n         Item {\n             name: name.clean(),\n-            attrs: self.node.attrs.clean().move_iter().collect(),\n+            attrs: self.node.attrs.clean(),\n             source: self.span.clean(),\n             visibility: Some(vis),\n             stability: get_stability(ast_util::local_def(self.node.id)),\n@@ -1398,7 +1398,7 @@ impl Clean<VariantStruct> for syntax::ast::StructDef {\n     fn clean(&self) -> VariantStruct {\n         VariantStruct {\n             struct_type: doctree::struct_type_from_def(self),\n-            fields: self.fields.clean().move_iter().collect(),\n+            fields: self.fields.clean(),\n             fields_stripped: false,\n         }\n     }\n@@ -1566,7 +1566,7 @@ impl Clean<Path> for ast::Path {\n     fn clean(&self) -> Path {\n         Path {\n             global: self.global,\n-            segments: self.segments.clean().move_iter().collect(),\n+            segments: self.segments.clean(),\n         }\n     }\n }\n@@ -1582,8 +1582,8 @@ impl Clean<PathSegment> for ast::PathSegment {\n     fn clean(&self) -> PathSegment {\n         PathSegment {\n             name: self.identifier.clean(),\n-            lifetimes: self.lifetimes.clean().move_iter().collect(),\n-            types: self.types.clean().move_iter().collect()\n+            lifetimes: self.lifetimes.clean(),\n+            types: self.types.clean(),\n         }\n     }\n }\n@@ -1650,7 +1650,7 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n         BareFunctionDecl {\n             fn_style: self.fn_style,\n             generics: Generics {\n-                lifetimes: self.lifetimes.clean().move_iter().collect(),\n+                lifetimes: self.lifetimes.clean(),\n                 type_params: Vec::new(),\n             },\n             decl: self.decl.clean(),\n@@ -1755,7 +1755,7 @@ impl Clean<Vec<Item>> for ast::ViewItem {\n         let convert = |node: &ast::ViewItem_| {\n             Item {\n                 name: None,\n-                attrs: self.attrs.clean().move_iter().collect(),\n+                attrs: self.attrs.clean(),\n                 source: self.span.clean(),\n                 def_id: ast_util::local_def(0),\n                 visibility: self.vis.clean(),\n@@ -1850,7 +1850,7 @@ impl Clean<ViewPath> for ast::ViewPath {\n                 GlobImport(resolve_use_source(p.clean(), id)),\n             ast::ViewPathList(ref p, ref pl, id) => {\n                 ImportList(resolve_use_source(p.clean(), id),\n-                           pl.clean().move_iter().collect())\n+                           pl.clean())\n             }\n         }\n     }\n@@ -1903,7 +1903,7 @@ impl Clean<Item> for ast::ForeignItem {\n         };\n         Item {\n             name: Some(self.ident.clean()),\n-            attrs: self.attrs.clean().move_iter().collect(),\n+            attrs: self.attrs.clean(),\n             source: self.span.clean(),\n             def_id: ast_util::local_def(self.id),\n             visibility: self.vis.clean(),"}]}