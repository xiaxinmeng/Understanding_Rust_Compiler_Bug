{"sha": "5c77a0d7a7543addab9ca5c4c32c330fb8620e83", "node_id": "C_kwDOAAsO6NoAKDVjNzdhMGQ3YTc1NDNhZGRhYjljYTVjNGMzMmMzMzBmYjg2MjBlODM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-06-03T15:08:29Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-06-03T15:23:02Z"}, "message": "Remove unneeded `Buffer` allocations when `&mut fmt::Write` can be used directly", "tree": {"sha": "b6ac5d98d2706eefc71426940314fbf206f6989c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6ac5d98d2706eefc71426940314fbf206f6989c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c77a0d7a7543addab9ca5c4c32c330fb8620e83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c77a0d7a7543addab9ca5c4c32c330fb8620e83", "html_url": "https://github.com/rust-lang/rust/commit/5c77a0d7a7543addab9ca5c4c32c330fb8620e83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c77a0d7a7543addab9ca5c4c32c330fb8620e83/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e17cef9e29961636db63730784caea4b7d47ff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e17cef9e29961636db63730784caea4b7d47ff5", "html_url": "https://github.com/rust-lang/rust/commit/1e17cef9e29961636db63730784caea4b7d47ff5"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "df17ab07b576dcfde6f4d59205f0c71770516eaf", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c77a0d7a7543addab9ca5c4c32c330fb8620e83/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c77a0d7a7543addab9ca5c4c32c330fb8620e83/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5c77a0d7a7543addab9ca5c4c32c330fb8620e83", "patch": "@@ -1038,9 +1038,9 @@ fn render_attributes_in_pre<'a, 'b: 'a>(\n \n // When an attribute is rendered inside a <code> tag, it is formatted using\n // a div to produce a newline after it.\n-fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item, tcx: TyCtxt<'_>) {\n+fn render_attributes_in_code(w: &mut impl fmt::Write, it: &clean::Item, tcx: TyCtxt<'_>) {\n     for a in it.attributes(tcx, false) {\n-        write!(w, \"<div class=\\\"code-attribute\\\">{}</div>\", a);\n+        write!(w, \"<div class=\\\"code-attribute\\\">{}</div>\", a).unwrap();\n     }\n }\n "}, {"sha": "5bf5b9ef6180926d0680a4586f67dd269d823e33", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5c77a0d7a7543addab9ca5c4c32c330fb8620e83/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c77a0d7a7543addab9ca5c4c32c330fb8620e83/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=5c77a0d7a7543addab9ca5c4c32c330fb8620e83", "patch": "@@ -1431,30 +1431,28 @@ fn item_proc_macro(\n     it: &clean::Item,\n     m: &clean::ProcMacro,\n ) {\n-    let mut buffer = Buffer::new();\n-    wrap_item(&mut buffer, |buffer| {\n+    wrap_item(w, |buffer| {\n         let name = it.name.expect(\"proc-macros always have names\");\n         match m.kind {\n             MacroKind::Bang => {\n-                write!(buffer, \"{}!() {{ /* proc-macro */ }}\", name);\n+                write!(buffer, \"{}!() {{ /* proc-macro */ }}\", name).unwrap();\n             }\n             MacroKind::Attr => {\n-                write!(buffer, \"#[{}]\", name);\n+                write!(buffer, \"#[{}]\", name).unwrap();\n             }\n             MacroKind::Derive => {\n-                write!(buffer, \"#[derive({})]\", name);\n+                write!(buffer, \"#[derive({})]\", name).unwrap();\n                 if !m.helpers.is_empty() {\n-                    buffer.push_str(\"\\n{\\n\");\n-                    buffer.push_str(\"    // Attributes available to this derive:\\n\");\n+                    buffer.write_str(\"\\n{\\n    // Attributes available to this derive:\\n\").unwrap();\n                     for attr in &m.helpers {\n-                        writeln!(buffer, \"    #[{}]\", attr);\n+                        writeln!(buffer, \"    #[{}]\", attr).unwrap();\n                     }\n-                    buffer.push_str(\"}\\n\");\n+                    buffer.write_str(\"}\\n\").unwrap();\n                 }\n             }\n         }\n     });\n-    write!(w, \"{}{}\", buffer.into_inner(), document(cx, it, None, HeadingOffset::H2)).unwrap();\n+    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2)).unwrap();\n }\n \n fn item_primitive(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n@@ -1571,8 +1569,7 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n }\n \n fn item_static(w: &mut impl fmt::Write, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n-    let mut buffer = Buffer::new();\n-    wrap_item(&mut buffer, |buffer| {\n+    wrap_item(w, |buffer| {\n         render_attributes_in_code(buffer, it, cx.tcx());\n         write!(\n             buffer,\n@@ -1581,29 +1578,27 @@ fn item_static(w: &mut impl fmt::Write, cx: &mut Context<'_>, it: &clean::Item,\n             mutability = s.mutability.print_with_space(),\n             name = it.name.unwrap(),\n             typ = s.type_.print(cx)\n-        );\n+        )\n+        .unwrap();\n     });\n \n-    write!(w, \"{}\", buffer.into_inner()).unwrap();\n-\n     write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2)).unwrap();\n }\n \n fn item_foreign_type(w: &mut impl fmt::Write, cx: &mut Context<'_>, it: &clean::Item) {\n-    let mut buffer = Buffer::new();\n-    wrap_item(&mut buffer, |buffer| {\n-        buffer.write_str(\"extern {\\n\");\n+    wrap_item(w, |buffer| {\n+        buffer.write_str(\"extern {\\n\").unwrap();\n         render_attributes_in_code(buffer, it, cx.tcx());\n         write!(\n             buffer,\n             \"    {}type {};\\n}}\",\n             visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n             it.name.unwrap(),\n-        );\n+        )\n+        .unwrap();\n     });\n \n-    write!(w, \"{}{}\", buffer.into_inner(), document(cx, it, None, HeadingOffset::H2)).unwrap();\n-\n+    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2)).unwrap();\n     write!(w, \"{}\", render_assoc_items(cx, it, it.item_id.expect_def_id(), AssocItemRender::All))\n         .unwrap();\n }"}]}