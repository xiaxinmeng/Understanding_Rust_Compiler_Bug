{"sha": "1763fcb36d85767fa1fee4c2de66fc2855633fcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NjNmY2IzNmQ4NTc2N2ZhMWZlZTRjMmRlNjZmYzI4NTU2MzNmY2Q=", "commit": {"author": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-09-30T22:04:21Z"}, "committer": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-09-30T22:04:21Z"}, "message": "Don't crash on non-existent path in constant.\n\nThe behavior here isn't really ideal, but we can't really do much better\ngiven the current state of constant evaluation.\n\nFixes #28670, and probably a bunch of duplicates.", "tree": {"sha": "a7458523ca93550091f86bf76b7a262decb9721d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7458523ca93550091f86bf76b7a262decb9721d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1763fcb36d85767fa1fee4c2de66fc2855633fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1763fcb36d85767fa1fee4c2de66fc2855633fcd", "html_url": "https://github.com/rust-lang/rust/commit/1763fcb36d85767fa1fee4c2de66fc2855633fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1763fcb36d85767fa1fee4c2de66fc2855633fcd/comments", "author": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb167e14784edff2021869b92dff4dd585e64a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb167e14784edff2021869b92dff4dd585e64a2", "html_url": "https://github.com/rust-lang/rust/commit/dcb167e14784edff2021869b92dff4dd585e64a2"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "50e74d196e67469cb975e9339a992b8105b6a587", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1763fcb36d85767fa1fee4c2de66fc2855633fcd/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1763fcb36d85767fa1fee4c2de66fc2855633fcd/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=1763fcb36d85767fa1fee4c2de66fc2855633fcd", "patch": "@@ -388,6 +388,7 @@ pub enum ErrKind {\n     ShiftRightWithOverflow,\n     MissingStructField,\n     NonConstPath,\n+    UnresolvedPath,\n     ExpectedConstTuple,\n     ExpectedConstStruct,\n     TupleIndexOutOfBounds,\n@@ -424,7 +425,8 @@ impl ConstEvalErr {\n             ShiftLeftWithOverflow => \"attempted left shift with overflow\".into_cow(),\n             ShiftRightWithOverflow => \"attempted right shift with overflow\".into_cow(),\n             MissingStructField  => \"nonexistent struct field\".into_cow(),\n-            NonConstPath        => \"non-constant path in constant expr\".into_cow(),\n+            NonConstPath        => \"non-constant path in constant expression\".into_cow(),\n+            UnresolvedPath => \"unresolved path in constant expression\".into_cow(),\n             ExpectedConstTuple => \"expected constant tuple\".into_cow(),\n             ExpectedConstStruct => \"expected constant struct\".into_cow(),\n             TupleIndexOutOfBounds => \"tuple index out of bounds\".into_cow(),\n@@ -916,7 +918,20 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n         }\n       }\n       hir::ExprPath(..) => {\n-          let opt_def = tcx.def_map.borrow().get(&e.id).map(|d| d.full_def());\n+          let opt_def = if let Some(def) = tcx.def_map.borrow().get(&e.id) {\n+              // After type-checking, def_map contains definition of the\n+              // item referred to by the path. During type-checking, it\n+              // can contain the raw output of path resolution, which\n+              // might be a partially resolved path.\n+              // FIXME: There's probably a better way to make sure we don't\n+              // panic here.\n+              if def.depth != 0 {\n+                  signal!(e, UnresolvedPath);\n+              }\n+              Some(def.full_def())\n+          } else {\n+              None\n+          };\n           let (const_expr, const_ty) = match opt_def {\n               Some(def::DefConst(def_id)) => {\n                   if def_id.is_local() {"}, {"sha": "3c4ad5a56ec362ba221e64cf879cd5ea3acf2616", "filename": "src/test/compile-fail/invalid-path-in-const.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1763fcb36d85767fa1fee4c2de66fc2855633fcd/src%2Ftest%2Fcompile-fail%2Finvalid-path-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1763fcb36d85767fa1fee4c2de66fc2855633fcd/src%2Ftest%2Fcompile-fail%2Finvalid-path-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-path-in-const.rs?ref=1763fcb36d85767fa1fee4c2de66fc2855633fcd", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    fn f(a: [u8; u32::DOESNOTEXIST]) {}\n+    //~^ ERROR unresolved path in constant expression\n+}"}]}