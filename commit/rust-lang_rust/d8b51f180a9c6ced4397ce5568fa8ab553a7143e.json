{"sha": "d8b51f180a9c6ced4397ce5568fa8ab553a7143e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YjUxZjE4MGE5YzZjZWQ0Mzk3Y2U1NTY4ZmE4YWI1NTNhNzE0M2U=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-05-29T01:05:25Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-05-29T01:05:25Z"}, "message": "Added tests for the implementations", "tree": {"sha": "9f9ca2c219468aa006f483641e68516f8798c8f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f9ca2c219468aa006f483641e68516f8798c8f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b51f180a9c6ced4397ce5568fa8ab553a7143e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b51f180a9c6ced4397ce5568fa8ab553a7143e", "html_url": "https://github.com/rust-lang/rust/commit/d8b51f180a9c6ced4397ce5568fa8ab553a7143e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b51f180a9c6ced4397ce5568fa8ab553a7143e/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2031e99d772091854d716df5bdf227f8be9b6397", "url": "https://api.github.com/repos/rust-lang/rust/commits/2031e99d772091854d716df5bdf227f8be9b6397", "html_url": "https://github.com/rust-lang/rust/commit/2031e99d772091854d716df5bdf227f8be9b6397"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "2500099853237d1c044a772e84f65ba93f56b421", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8b51f180a9c6ced4397ce5568fa8ab553a7143e/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b51f180a9c6ced4397ce5568fa8ab553a7143e/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=d8b51f180a9c6ced4397ce5568fa8ab553a7143e", "patch": "@@ -1,4 +1,4 @@\n-use core::num::{IntErrorKind, NonZeroI32, NonZeroI8, NonZeroU32, NonZeroU8};\n+use core::num::{TryFromIntError, IntErrorKind, NonZeroI32, NonZeroI8, NonZeroU32, NonZeroU8};\n use core::option::Option::{self, None, Some};\n use std::mem::size_of;\n \n@@ -176,3 +176,21 @@ fn test_nonzero_bitor_assign() {\n     target |= 0;\n     assert_eq!(target.get(), 0b1011_1111);\n }\n+\n+#[test]\n+fn test_nonzero_from_int_on_success() {\n+    assert_eq!(NonZeroU8::try_from(5), Ok(NonZeroU8::new(5)));\n+    assert_eq!(NonZeroU32::try_from(5), Ok(NonZeroU32::new(5)));\n+\n+    assert_eq!(NonZeroI8::try_from(-5), Ok(NonZeroI8::new(-5)));\n+    assert_eq!(NonZeroI32::try_from(-5), Ok(NonZeroI32::new(-5)));\n+}\n+\n+#[test]\n+fn test_nonzero_from_int_on_err() {\n+    assert_eq!(NonZeroU8::try_from(0), Err(TryFromIntError(())));\n+    assert_eq!(NonZeroU32::try_from(0), Err(TryFromIntError(())));\n+\n+    assert_eq!(NonZeroI8::try_from(0), Err(TryFromIntError(())));\n+    assert_eq!(NonZeroI32::try_from(0), Err(TryFromIntError(())));\n+}"}]}