{"sha": "7cb5920372017b81b954705c03d0b24e60c3e223", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYjU5MjAzNzIwMTdiODFiOTU0NzA1YzAzZDBiMjRlNjBjM2UyMjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-19T20:10:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-19T20:10:00Z"}, "message": "Merge #8888\n\n8888: fix: fix unresolved attribute fallback again r=jonas-schievink a=jonas-schievink\n\n`ModItem`s are per-file, so we have to track the file if we store them in the crate-level `DefCollector`.\r\n\r\nFixes the remaining issue in https://github.com/rust-analyzer/rust-analyzer/pull/8882#issuecomment-844379170\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "be5bb32dfc5a6853843975b98f99ba8de3f059c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5bb32dfc5a6853843975b98f99ba8de3f059c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cb5920372017b81b954705c03d0b24e60c3e223", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgpXCYCRBK7hj4Ov3rIwAAlR0IAKz/BBWuIohprHip/x+tbYsF\n1MVH/qimdTpqsZjQ4WbAxJkygZItTDLv+LrhcI0PULXLrd9Xr3sowEdf/RQ3w9SJ\n3rGuTIzKjp6RM0EiDfd3KUsAESRriiRHXAIkJV/xZ3EHEQrS7ADOuJgE1CShF7Fr\nH8ChSZJJ6WvgWBKGlCdJwWyYG3+8aKn2DhHhLNEW/RIbU2SXwTAidsEPg8pwNaf0\ng/8bIpwc/w5BDMvYKXRRuQv+Nk0cRFdVbJbA+Bf0X9ihPZ5E4YA0U/zp2D+Pnclo\nuOzKArLNM8Z2Q0iZS/SJAxhNI+BlE1rR64NtWzXQaHS98RZOIjrQDsjsEz86vds=\n=YD/+\n-----END PGP SIGNATURE-----\n", "payload": "tree be5bb32dfc5a6853843975b98f99ba8de3f059c1\nparent 49922cb2c3cd8390891cda9acb88b4b979db8911\nparent 4a84c3fb21e3357fb3b82179edd924ceeb84379a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621455000 +0000\ncommitter GitHub <noreply@github.com> 1621455000 +0000\n\nMerge #8888\n\n8888: fix: fix unresolved attribute fallback again r=jonas-schievink a=jonas-schievink\n\n`ModItem`s are per-file, so we have to track the file if we store them in the crate-level `DefCollector`.\r\n\r\nFixes the remaining issue in https://github.com/rust-analyzer/rust-analyzer/pull/8882#issuecomment-844379170\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cb5920372017b81b954705c03d0b24e60c3e223", "html_url": "https://github.com/rust-lang/rust/commit/7cb5920372017b81b954705c03d0b24e60c3e223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cb5920372017b81b954705c03d0b24e60c3e223/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49922cb2c3cd8390891cda9acb88b4b979db8911", "url": "https://api.github.com/repos/rust-lang/rust/commits/49922cb2c3cd8390891cda9acb88b4b979db8911", "html_url": "https://github.com/rust-lang/rust/commit/49922cb2c3cd8390891cda9acb88b4b979db8911"}, {"sha": "4a84c3fb21e3357fb3b82179edd924ceeb84379a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a84c3fb21e3357fb3b82179edd924ceeb84379a", "html_url": "https://github.com/rust-lang/rust/commit/4a84c3fb21e3357fb3b82179edd924ceeb84379a"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "02ceb8d5059d66fa70d963942dc25ed86e0bd406", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cb5920372017b81b954705c03d0b24e60c3e223/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb5920372017b81b954705c03d0b24e60c3e223/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=7cb5920372017b81b954705c03d0b24e60c3e223", "patch": "@@ -246,7 +246,7 @@ struct DefCollector<'a> {\n     proc_macros: Vec<(Name, ProcMacroExpander)>,\n     exports_proc_macros: bool,\n     from_glob_import: PerNsGlobImports,\n-    ignore_attrs_on: FxHashSet<ModItem>,\n+    ignore_attrs_on: FxHashSet<InFile<ModItem>>,\n }\n \n impl DefCollector<'_> {\n@@ -372,9 +372,9 @@ impl DefCollector<'_> {\n         let mut added_items = false;\n         let unexpanded_macros = std::mem::replace(&mut self.unexpanded_macros, Vec::new());\n         for directive in &unexpanded_macros {\n-            if let MacroDirectiveKind::Attr { mod_item, .. } = &directive.kind {\n+            if let MacroDirectiveKind::Attr { ast_id, mod_item, .. } = &directive.kind {\n                 // Make sure to only add such items once.\n-                if !self.ignore_attrs_on.insert(*mod_item) {\n+                if !self.ignore_attrs_on.insert(ast_id.ast_id.with_value(*mod_item)) {\n                     continue;\n                 }\n \n@@ -1463,7 +1463,7 @@ impl ModCollector<'_, '_> {\n \n         // We failed to resolve an attribute on this item earlier, and are falling back to treating\n         // the item as-is.\n-        if self.def_collector.ignore_attrs_on.contains(&mod_item) {\n+        if self.def_collector.ignore_attrs_on.contains(&InFile::new(self.file_id, mod_item)) {\n             return Ok(());\n         }\n "}, {"sha": "6eb5f97be15149daba20e8a5eff9f310cc156b41", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7cb5920372017b81b954705c03d0b24e60c3e223/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cb5920372017b81b954705c03d0b24e60c3e223/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=7cb5920372017b81b954705c03d0b24e60c3e223", "patch": "@@ -706,6 +706,35 @@ fn builtin_derive_with_unresolved_attributes_fall_back() {\n     assert_eq!(map.modules[map.root].scope.impls().len(), 1);\n }\n \n+#[test]\n+fn unresolved_attributes_fall_back_track_per_file_moditems() {\n+    // Tests that we track per-file ModItems when ignoring an unresolved attribute.\n+    // Just tracking the `ModItem` leads to `Foo` getting ignored.\n+\n+    check(\n+        r#\"\n+        //- /main.rs crate:main\n+\n+        mod submod;\n+\n+        #[unresolved]\n+        struct Foo;\n+\n+        //- /submod.rs\n+        #[unresolved]\n+        struct Bar;\n+        \"#,\n+        expect![[r#\"\n+            crate\n+            Foo: t v\n+            submod: t\n+\n+            crate::submod\n+            Bar: t v\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn macro_expansion_overflow() {\n     cov_mark::check!(macro_expansion_overflow);"}]}