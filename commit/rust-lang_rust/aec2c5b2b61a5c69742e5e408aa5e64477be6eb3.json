{"sha": "aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYzJjNWIyYjYxYTVjNjk3NDJlNWU0MDhhYTVlNjQ0NzdiZTZlYjM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-05-25T15:56:19Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-26T12:14:22Z"}, "message": "Update tests for updated array_into_iter lint.", "tree": {"sha": "c5a181bcdc31e5334230c52303270b591a9acb31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5a181bcdc31e5334230c52303270b591a9acb31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "html_url": "https://github.com/rust-lang/rust/commit/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cfe2a5fc621092ef4a14c22e2855fa07b690cac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfe2a5fc621092ef4a14c22e2855fa07b690cac", "html_url": "https://github.com/rust-lang/rust/commit/5cfe2a5fc621092ef4a14c22e2855fa07b690cac"}], "stats": {"total": 220, "additions": 166, "deletions": 54}, "files": [{"sha": "255ebfbd8f9e29a1653738724c91da66748a82a2", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.rs?ref=aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "patch": "@@ -12,11 +12,11 @@ fn main() {\n     // Before 2021, the method dispatched to `IntoIterator for &[T; N]`,\n     // which we continue to support for compatibility.\n     let _: Iter<'_, i32> = array.into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     let _: Iter<'_, i32> = Box::new(array).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     // The `array_into_iter` lint doesn't cover other wrappers that deref to an array."}, {"sha": "b6ca4ba22836a6c425fe13bc5f00a655c779b141", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "patch": "@@ -1,21 +1,37 @@\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-2018.rs:14:34\n    |\n LL |     let _: Iter<'_, i32> = array.into_iter();\n-   |                                  ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                                  ^^^^^^^^^\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     let _: Iter<'_, i32> = array.iter();\n+   |                                  ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     let _: Iter<'_, i32> = IntoIterator::into_iter(array);\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-2018.rs:18:44\n    |\n LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n-   |                                            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                                            ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     let _: Iter<'_, i32> = Box::new(array).iter();\n+   |                                            ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     let _: Iter<'_, i32> = IntoIterator::into_iter(Box::new(array));\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^               ^\n \n warning: 2 warnings emitted\n "}, {"sha": "f206134d83fdb38a014c6eb637cfb0c2eeddbd47", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "patch": "@@ -7,42 +7,42 @@ fn main() {\n \n     // Expressions that should trigger the lint\n     small.iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     [1, 2].iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     big.iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     [0u8; 33].iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     Box::new(small).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new([1, 2]).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(big).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new([0u8; 33]).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     Box::new(Box::new(small)).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new([1, 2])).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new(big)).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new([0u8; 33])).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     // Expressions that should not"}, {"sha": "a43a7ea797f4276d65f0c1ffbb2652afe13fdd15", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "patch": "@@ -7,42 +7,42 @@ fn main() {\n \n     // Expressions that should trigger the lint\n     small.into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     [1, 2].into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     big.into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     [0u8; 33].into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     Box::new(small).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new([1, 2]).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(big).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new([0u8; 33]).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     Box::new(Box::new(small)).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new([1, 2])).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new(big)).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n     Box::new(Box::new([0u8; 33])).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this changes meaning\n \n     // Expressions that should not"}, {"sha": "fb34384b4e53e8f3ec02c2698549dae34737b8b6", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 120, "deletions": 24, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aec2c5b2b61a5c69742e5e408aa5e64477be6eb3/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=aec2c5b2b61a5c69742e5e408aa5e64477be6eb3", "patch": "@@ -1,111 +1,207 @@\n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:9:11\n    |\n LL |     small.into_iter();\n-   |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |           ^^^^^^^^^\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     small.iter();\n+   |           ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(small);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:12:12\n    |\n LL |     [1, 2].into_iter();\n-   |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |            ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     [1, 2].iter();\n+   |            ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter([1, 2]);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^      ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:15:9\n    |\n LL |     big.into_iter();\n-   |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |         ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     big.iter();\n+   |         ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(big);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^   ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:18:15\n    |\n LL |     [0u8; 33].into_iter();\n-   |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |               ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     [0u8; 33].iter();\n+   |               ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter([0u8; 33]);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^         ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:22:21\n    |\n LL |     Box::new(small).into_iter();\n-   |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                     ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(small).iter();\n+   |                     ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(small));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^               ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:25:22\n    |\n LL |     Box::new([1, 2]).into_iter();\n-   |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                      ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new([1, 2]).iter();\n+   |                      ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new([1, 2]));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:28:19\n    |\n LL |     Box::new(big).into_iter();\n-   |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                   ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(big).iter();\n+   |                   ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(big));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^             ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:31:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n-   |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                         ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new([0u8; 33]).iter();\n+   |                         ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new([0u8; 33]));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                   ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:35:31\n    |\n LL |     Box::new(Box::new(small)).into_iter();\n-   |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                               ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(Box::new(small)).iter();\n+   |                               ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(Box::new(small)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                         ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:38:32\n    |\n LL |     Box::new(Box::new([1, 2])).into_iter();\n-   |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                                ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(Box::new([1, 2])).iter();\n+   |                                ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(Box::new([1, 2])));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                          ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:41:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n-   |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                             ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(Box::new(big)).iter();\n+   |                             ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(Box::new(big)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                       ^\n \n-warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call resolves to `<&[T; N] as IntoIterator>::into_iter` (due to backwards compatibility), but will resolve to <[T; N] as IntoIterator>::into_iter in Rust 2021.\n   --> $DIR/into-iter-on-arrays-lint.rs:44:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();\n-   |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n+   |                                   ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n+   |\n+LL |     Box::new(Box::new([0u8; 33])).iter();\n+   |                                   ^^^^\n+help: or use `IntoIterator::into_iter(..)` instead of `.into_iter()` to explicitly iterate by value\n+   |\n+LL |     IntoIterator::into_iter(Box::new(Box::new([0u8; 33])));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^                             ^\n \n warning: 12 warnings emitted\n "}]}