{"sha": "d6c88f493677a968e16ecc6f183bb95a7d37351e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Yzg4ZjQ5MzY3N2E5NjhlMTZlY2M2ZjE4M2JiOTVhN2QzNzM1MWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-29T00:30:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:27Z"}, "message": "rustc: Move crate_hash to a query", "tree": {"sha": "feec73d0c56f2985a38ec40c456728e0c729b28e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feec73d0c56f2985a38ec40c456728e0c729b28e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c88f493677a968e16ecc6f183bb95a7d37351e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c88f493677a968e16ecc6f183bb95a7d37351e", "html_url": "https://github.com/rust-lang/rust/commit/d6c88f493677a968e16ecc6f183bb95a7d37351e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c88f493677a968e16ecc6f183bb95a7d37351e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc1fd321d46089249510f78880356af3e7b6961", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc1fd321d46089249510f78880356af3e7b6961", "html_url": "https://github.com/rust-lang/rust/commit/ebc1fd321d46089249510f78880356af3e7b6961"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "5c574205fe86247b7619863c6395213b5cbf8bc8", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=d6c88f493677a968e16ecc6f183bb95a7d37351e", "patch": "@@ -540,6 +540,7 @@ define_dep_nodes!( <'tcx>\n     [] PluginRegistrarFn(CrateNum),\n     [] DeriveRegistrarFn(CrateNum),\n     [] CrateDisambiguator(CrateNum),\n+    [] CrateHash(CrateNum),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "d7b32abbcd22052ca6e05ba81fb4fe3df03ea710", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=d6c88f493677a968e16ecc6f183bb95a7d37351e", "patch": "@@ -253,7 +253,6 @@ pub trait CrateStore {\n     fn crate_name(&self, cnum: CrateNum) -> Symbol;\n     /// The name of the crate as it is stored in the crate's metadata.\n     fn original_crate_name(&self, cnum: CrateNum) -> Symbol;\n-    fn crate_hash(&self, cnum: CrateNum) -> Svh;\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n@@ -353,7 +352,6 @@ impl CrateStore for DummyCrateStore {\n     fn original_crate_name(&self, cnum: CrateNum) -> Symbol {\n         bug!(\"original_crate_name\")\n     }\n-    fn crate_hash(&self, cnum: CrateNum) -> Svh { bug!(\"crate_hash\") }\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey { bug!(\"def_key\") }"}, {"sha": "48fca7e643b64d4bf124843e156711572bbf5d37", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=d6c88f493677a968e16ecc6f183bb95a7d37351e", "patch": "@@ -13,6 +13,7 @@ use errors::{Diagnostic, DiagnosticBuilder};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, HirId};\n+use hir::svh::Svh;\n use lint;\n use middle::const_val;\n use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary};\n@@ -617,6 +618,12 @@ impl<'tcx> QueryDescription for queries::crate_disambiguator<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::crate_hash<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"looking up the hash a crate\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1198,6 +1205,7 @@ define_maps! { <'tcx>\n     [] fn plugin_registrar_fn: PluginRegistrarFn(CrateNum) -> Option<DefId>,\n     [] fn derive_registrar_fn: DeriveRegistrarFn(CrateNum) -> Option<DefId>,\n     [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> Symbol,\n+    [] fn crate_hash: CrateHash(CrateNum) -> Svh,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "434c82095bd9a98d0e21cbf8a3639d934646202c", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=d6c88f493677a968e16ecc6f183bb95a7d37351e", "patch": "@@ -632,7 +632,7 @@ pub fn find_metadata_hashes_for(tcx: TyCtxt, cnum: CrateNum) -> Option<PathBuf>\n         }\n     };\n \n-    let target_svh = tcx.sess.cstore.crate_hash(cnum);\n+    let target_svh = tcx.crate_hash(cnum);\n     let target_svh = base_n::encode(target_svh.as_u64(), INT_ENCODE_BASE);\n \n     let sub_dir = find_metadata_hashes_iter(&target_svh, dir_entries.filter_map(|e| {"}, {"sha": "44d6788c773651569c5164b90d9fe5eabf177f28", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=d6c88f493677a968e16ecc6f183bb95a7d37351e", "patch": "@@ -133,7 +133,7 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n     fn load_data(&mut self, cnum: CrateNum) {\n         debug!(\"load_data(cnum={})\", cnum);\n \n-        let svh = self.tcx.sess.cstore.crate_hash(cnum);\n+        let svh = self.tcx.crate_hash(cnum);\n         let old = self.crate_hashes.insert(cnum, svh);\n         debug!(\"load_data: svh={}\", svh);\n         assert!(old.is_none(), \"loaded data for crate {:?} twice\", cnum);"}, {"sha": "1933949e92264adda6c3a116c0dbfb82f4148244", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=d6c88f493677a968e16ecc6f183bb95a7d37351e", "patch": "@@ -126,10 +126,6 @@ impl CStore {\n         self.metas.borrow().get(&cnum).unwrap().clone()\n     }\n \n-    pub fn get_crate_hash(&self, cnum: CrateNum) -> Svh {\n-        self.get_crate_data(cnum).hash()\n-    }\n-\n     pub fn set_crate_data(&self, cnum: CrateNum, data: Rc<CrateMetadata>) {\n         self.metas.borrow_mut().insert(cnum, data);\n     }"}, {"sha": "12f9b9f07b358d2e902c82a1a17ed8f4278775bf", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d6c88f493677a968e16ecc6f183bb95a7d37351e", "patch": "@@ -177,7 +177,6 @@ provide! { <'tcx> tcx, def_id, cdata,\n     }\n     crate_disambiguator => { cdata.disambiguator() }\n     crate_hash => { cdata.hash() }\n-    original_crate_name => { cdata.name() }\n }\n \n pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n@@ -286,11 +285,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).name()\n     }\n \n-    fn crate_hash(&self, cnum: CrateNum) -> Svh\n-    {\n-        self.get_crate_hash(cnum)\n-    }\n-\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to."}, {"sha": "777e0f20827305c2e7da3b5f0ca99ccbf59a582f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c88f493677a968e16ecc6f183bb95a7d37351e/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d6c88f493677a968e16ecc6f183bb95a7d37351e", "patch": "@@ -1296,7 +1296,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             .map(|&cnum| {\n                 let dep = CrateDep {\n                     name: cstore.original_crate_name(cnum),\n-                    hash: cstore.crate_hash(cnum),\n+                    hash: self.tcx.crate_hash(cnum),\n                     kind: cstore.dep_kind(cnum),\n                 };\n                 (cnum, dep)"}]}