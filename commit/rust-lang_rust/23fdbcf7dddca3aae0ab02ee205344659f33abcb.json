{"sha": "23fdbcf7dddca3aae0ab02ee205344659f33abcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZmRiY2Y3ZGRkY2EzYWFlMGFiMDJlZTIwNTM0NDY1OWYzM2FiY2I=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-02-15T21:51:37Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-02-15T22:22:56Z"}, "message": "Add a method to LimitReader to return the limit\n\nThis is useful in contexts like this:\n\nlet size = rdr.read_be_i32() as uint;\nlet mut limit = LimitReader::new(rdr.by_ref(), size);\nlet thing = read_a_thing(&mut limit);\nassert!(limit.limit() == 0);", "tree": {"sha": "f407ce7495e666fe33fb62b0f0d44a4aeca7f7d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f407ce7495e666fe33fb62b0f0d44a4aeca7f7d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23fdbcf7dddca3aae0ab02ee205344659f33abcb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23fdbcf7dddca3aae0ab02ee205344659f33abcb", "html_url": "https://github.com/rust-lang/rust/commit/23fdbcf7dddca3aae0ab02ee205344659f33abcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23fdbcf7dddca3aae0ab02ee205344659f33abcb/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7aa4c477e7ccc51f19805c42b74cf22dfe22c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7aa4c477e7ccc51f19805c42b74cf22dfe22c39", "html_url": "https://github.com/rust-lang/rust/commit/a7aa4c477e7ccc51f19805c42b74cf22dfe22c39"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "79ae9faf6295ba861a66ee9f3dd98cbc70353179", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/23fdbcf7dddca3aae0ab02ee205344659f33abcb/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23fdbcf7dddca3aae0ab02ee205344659f33abcb/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=23fdbcf7dddca3aae0ab02ee205344659f33abcb", "patch": "@@ -24,7 +24,18 @@ impl<R: Reader> LimitReader<R> {\n     pub fn new(r: R, limit: uint) -> LimitReader<R> {\n         LimitReader { limit: limit, inner: r }\n     }\n+\n+    /// Consumes the `LimitReader`, returning the underlying `Reader`.\n     pub fn unwrap(self) -> R { self.inner }\n+\n+    /// Returns the number of bytes that can be read before the `LimitReader`\n+    /// will return EOF.\n+    ///\n+    /// # Note\n+    ///\n+    /// The reader may reach EOF after reading fewer bytes than indicated by\n+    /// this method if the underlying reader reaches EOF.\n+    pub fn limit(&self) -> uint { self.limit }\n }\n \n impl<R: Reader> Reader for LimitReader<R> {\n@@ -190,7 +201,7 @@ mod test {\n     use prelude::*;\n \n     #[test]\n-    fn test_bounded_reader_unlimited() {\n+    fn test_limit_reader_unlimited() {\n         let mut r = MemReader::new(~[0, 1, 2]);\n         {\n             let mut r = LimitReader::new(r.by_ref(), 4);\n@@ -199,7 +210,7 @@ mod test {\n     }\n \n     #[test]\n-    fn test_bound_reader_limited() {\n+    fn test_limit_reader_limited() {\n         let mut r = MemReader::new(~[0, 1, 2]);\n         {\n             let mut r = LimitReader::new(r.by_ref(), 2);\n@@ -208,6 +219,17 @@ mod test {\n         assert_eq!(~[2], r.read_to_end().unwrap());\n     }\n \n+    #[test]\n+    fn test_limit_reader_limit() {\n+        let r = MemReader::new(~[0, 1, 2]);\n+        let mut r = LimitReader::new(r, 3);\n+        assert_eq!(3, r.limit());\n+        assert_eq!(0, r.read_byte().unwrap());\n+        assert_eq!(2, r.limit());\n+        assert_eq!(~[1, 2], r.read_to_end().unwrap());\n+        assert_eq!(0, r.limit());\n+    }\n+\n     #[test]\n     fn test_null_writer() {\n         let mut s = NullWriter;"}]}