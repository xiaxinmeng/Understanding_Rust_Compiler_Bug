{"sha": "2347944aaec8b78c128acdc26fa83b6ebe8b1cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNDc5NDRhYWVjOGI3OGMxMjhhY2RjMjZmYTgzYjZlYmU4YjFjZjI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-10T20:59:44Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-10T20:59:44Z"}, "message": "Use local error macros in references/rename", "tree": {"sha": "f976ba585c1c8b571450e4f0e071a874c6a74de7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f976ba585c1c8b571450e4f0e071a874c6a74de7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2347944aaec8b78c128acdc26fa83b6ebe8b1cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2347944aaec8b78c128acdc26fa83b6ebe8b1cf2", "html_url": "https://github.com/rust-lang/rust/commit/2347944aaec8b78c128acdc26fa83b6ebe8b1cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2347944aaec8b78c128acdc26fa83b6ebe8b1cf2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "919a1d7b278ada6063c948df7e63d3ef735af343", "url": "https://api.github.com/repos/rust-lang/rust/commits/919a1d7b278ada6063c948df7e63d3ef735af343", "html_url": "https://github.com/rust-lang/rust/commit/919a1d7b278ada6063c948df7e63d3ef735af343"}], "stats": {"total": 69, "additions": 30, "deletions": 39}, "files": [{"sha": "6040fc1f8a745b9c1995ab82f4dc8a8d4bd8d5d2", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 30, "deletions": 39, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2347944aaec8b78c128acdc26fa83b6ebe8b1cf2/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347944aaec8b78c128acdc26fa83b6ebe8b1cf2/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=2347944aaec8b78c128acdc26fa83b6ebe8b1cf2", "patch": "@@ -36,6 +36,15 @@ impl fmt::Display for RenameError {\n \n impl Error for RenameError {}\n \n+macro_rules! format_err {\n+    ($fmt:expr) => {RenameError(format!($fmt))};\n+    ($fmt:expr, $($arg:tt)+) => {RenameError(format!($fmt, $($arg)+))}\n+}\n+\n+macro_rules! bail {\n+    ($($tokens:tt)*) => {return Err(format_err!($($tokens)*))}\n+}\n+\n pub(crate) fn prepare_rename(\n     db: &RootDatabase,\n     position: FilePosition,\n@@ -119,16 +128,13 @@ fn check_identifier(new_name: &str) -> RenameResult<IdentifierKind> {\n                 Ok(IdentifierKind::Lifetime)\n             }\n             (SyntaxKind::LIFETIME_IDENT, _) => {\n-                Err(format!(\"Invalid name `{0}`: Cannot rename lifetime to {0}\", new_name))\n+                bail!(\"Invalid name `{0}`: Cannot rename lifetime to {0}\", new_name)\n             }\n-            (_, Some(syntax_error)) => {\n-                Err(format!(\"Invalid name `{}`: {}\", new_name, syntax_error))\n-            }\n-            (_, None) => Err(format!(\"Invalid name `{}`: not an identifier\", new_name)),\n+            (_, Some(syntax_error)) => bail!(\"Invalid name `{}`: {}\", new_name, syntax_error),\n+            (_, None) => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n         },\n-        None => Err(format!(\"Invalid name `{}`: not an identifier\", new_name)),\n+        None => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n     }\n-    .map_err(RenameError)\n }\n \n fn find_module_at_offset(\n@@ -164,7 +170,7 @@ fn find_all_refs(\n     position: FilePosition,\n ) -> RenameResult<RangeInfo<ReferenceSearchResult>> {\n     crate::references::find_all_refs(sema, position, None)\n-        .ok_or_else(|| RenameError(\"No references found at position\".to_string()))\n+        .ok_or_else(|| format_err!(\"No references found at position\"))\n }\n \n fn source_edit_from_reference(\n@@ -237,10 +243,7 @@ fn rename_mod(\n     new_name: &str,\n ) -> RenameResult<RangeInfo<SourceChange>> {\n     if IdentifierKind::Ident != check_identifier(new_name)? {\n-        return Err(RenameError(format!(\n-            \"Invalid name `{0}`: cannot rename module to {0}\",\n-            new_name\n-        )));\n+        bail!(\"Invalid name `{0}`: cannot rename module to {0}\", new_name);\n     }\n     let mut source_file_edits = Vec::new();\n     let mut file_system_edits = Vec::new();\n@@ -291,27 +294,26 @@ fn rename_to_self(\n \n     let (fn_def, fn_ast) = find_node_at_offset::<ast::Fn>(syn, position.offset)\n         .and_then(|fn_ast| sema.to_def(&fn_ast).zip(Some(fn_ast)))\n-        .ok_or_else(|| RenameError(\"No surrounding method declaration found\".to_string()))?;\n+        .ok_or_else(|| format_err!(\"No surrounding method declaration found\"))?;\n     let param_range = fn_ast\n         .param_list()\n         .and_then(|p| p.params().next())\n-        .ok_or_else(|| RenameError(\"Method has no parameters\".to_string()))?\n+        .ok_or_else(|| format_err!(\"Method has no parameters\"))?\n         .syntax()\n         .text_range();\n     if !param_range.contains(position.offset) {\n-        return Err(RenameError(\"Only the first parameter can be self\".to_string()));\n+        bail!(\"Only the first parameter can be self\");\n     }\n \n     let impl_block = find_node_at_offset::<ast::Impl>(syn, position.offset)\n         .and_then(|def| sema.to_def(&def))\n-        .ok_or_else(|| RenameError(\"No impl block found for function\".to_string()))?;\n+        .ok_or_else(|| format_err!(\"No impl block found for function\"))?;\n     if fn_def.self_param(sema.db).is_some() {\n-        return Err(RenameError(\"Method already has a self parameter\".to_string()));\n+        bail!(\"Method already has a self parameter\");\n     }\n \n     let params = fn_def.assoc_fn_params(sema.db);\n-    let first_param =\n-        params.first().ok_or_else(|| RenameError(\"Method has no parameters\".into()))?;\n+    let first_param = params.first().ok_or_else(|| format_err!(\"Method has no parameters\"))?;\n     let first_param_ty = first_param.ty();\n     let impl_ty = impl_block.target_ty(sema.db);\n     let (ty, self_param) = if impl_ty.remove_ref().is_some() {\n@@ -324,7 +326,7 @@ fn rename_to_self(\n     };\n \n     if ty != impl_ty {\n-        return Err(RenameError(\"Parameter type differs from impl block type\".to_string()));\n+        bail!(\"Parameter type differs from impl block type\");\n     }\n \n     let RangeInfo { range, info: refs } = find_all_refs(sema, position)?;\n@@ -334,7 +336,7 @@ fn rename_to_self(\n         .partition(|reference| param_range.intersect(reference.file_range.range).is_some());\n \n     if param_ref.is_empty() {\n-        return Err(RenameError(\"Parameter to rename not found\".to_string()));\n+        bail!(\"Parameter to rename not found\");\n     }\n \n     let mut edits = usages\n@@ -385,9 +387,7 @@ fn rename_self_to_param(\n ) -> Result<RangeInfo<SourceChange>, RenameError> {\n     let ident_kind = check_identifier(new_name)?;\n     match ident_kind {\n-        IdentifierKind::Lifetime => {\n-            return Err(RenameError(format!(\"Invalid name `{}`: not an identifier\", new_name)))\n-        }\n+        IdentifierKind::Lifetime => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n         IdentifierKind::ToSelf => {\n             // no-op\n             return Ok(RangeInfo::new(self_token.text_range(), SourceChange::default()));\n@@ -399,7 +399,7 @@ fn rename_self_to_param(\n \n     let text = sema.db.file_text(position.file_id);\n     let fn_def = find_node_at_offset::<ast::Fn>(syn, position.offset)\n-        .ok_or_else(|| RenameError(\"No surrounding method declaration found\".to_string()))?;\n+        .ok_or_else(|| format_err!(\"No surrounding method declaration found\"))?;\n     let search_range = fn_def.syntax().text_range();\n \n     let mut edits: Vec<SourceFileEdit> = vec![];\n@@ -414,7 +414,7 @@ fn rename_self_to_param(\n         {\n             let edit = if let Some(ref self_param) = ast::SelfParam::cast(usage.parent()) {\n                 text_edit_from_self_param(syn, self_param, new_name)\n-                    .ok_or_else(|| RenameError(\"No target type found\".to_string()))?\n+                    .ok_or_else(|| format_err!(\"No target type found\"))?\n             } else {\n                 TextEdit::replace(usage.text_range(), String::from(new_name))\n             };\n@@ -423,9 +423,7 @@ fn rename_self_to_param(\n     }\n \n     if edits.len() > 1 && ident_kind == IdentifierKind::Underscore {\n-        return Err(RenameError(format!(\n-            \"Cannot rename reference to `_` as it is being referenced multiple times\",\n-        )));\n+        bail!(\"Cannot rename reference to `_` as it is being referenced multiple times\");\n     }\n \n     let range = ast::SelfParam::cast(self_token.parent())\n@@ -446,15 +444,10 @@ fn rename_reference(\n         (IdentifierKind::ToSelf, ReferenceKind::Lifetime)\n         | (IdentifierKind::Underscore, ReferenceKind::Lifetime)\n         | (IdentifierKind::Ident, ReferenceKind::Lifetime) => {\n-            return Err(RenameError(format!(\n-                \"Invalid name `{}`: not a lifetime identifier\",\n-                new_name\n-            )))\n+            bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name)\n         }\n         (IdentifierKind::Lifetime, ReferenceKind::Lifetime) => (),\n-        (IdentifierKind::Lifetime, _) => {\n-            return Err(RenameError(format!(\"Invalid name `{}`: not an identifier\", new_name)))\n-        }\n+        (IdentifierKind::Lifetime, _) => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n         (IdentifierKind::ToSelf, ReferenceKind::SelfKw) => {\n             //no-op\n             return Ok(RangeInfo::new(range, SourceChange::default()));\n@@ -463,9 +456,7 @@ fn rename_reference(\n             return rename_to_self(sema, position);\n         }\n         (IdentifierKind::Underscore, _) if !refs.references.is_empty() => {\n-            return Err(RenameError(format!(\n-                \"Cannot rename reference to `_` as it is being referenced multiple times\",\n-            )))\n+            bail!(\"Cannot rename reference to `_` as it is being referenced multiple times\")\n         }\n         (IdentifierKind::Ident, _) | (IdentifierKind::Underscore, _) => (),\n     }"}]}