{"sha": "f29ac5a680f57851f68ad2584972e605402156a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOWFjNWE2ODBmNTc4NTFmNjhhZDI1ODQ5NzJlNjA1NDAyMTU2YTk=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-12T08:57:04Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-12T08:57:04Z"}, "message": "Deny bare trait objects in librustc_typeck", "tree": {"sha": "ade1ae6dab976a6c1f52c694163e90fd36cfec60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ade1ae6dab976a6c1f52c694163e90fd36cfec60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29ac5a680f57851f68ad2584972e605402156a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29ac5a680f57851f68ad2584972e605402156a9", "html_url": "https://github.com/rust-lang/rust/commit/f29ac5a680f57851f68ad2584972e605402156a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29ac5a680f57851f68ad2584972e605402156a9/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c946c2539e9690fab5dbf7ac217ec696ac263cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c946c2539e9690fab5dbf7ac217ec696ac263cf3", "html_url": "https://github.com/rust-lang/rust/commit/c946c2539e9690fab5dbf7ac217ec696ac263cf3"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "5e38c0bbcb4a3c5e6670409ea3ccd864e34109f4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f29ac5a680f57851f68ad2584972e605402156a9", "patch": "@@ -98,7 +98,7 @@ struct ParamRange {\n /// This type must not appear anywhere in other converted types.\n const TRAIT_OBJECT_DUMMY_SELF: ty::TypeVariants<'static> = ty::TyInfer(ty::FreshTy(0));\n \n-impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n+impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     pub fn ast_region_to_region(&self,\n         lifetime: &hir::Lifetime,\n         def: Option<&ty::GenericParamDef>)"}, {"sha": "f2745d06390e87f469ce7ecc28fdb641af856a86", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=f29ac5a680f57851f68ad2584972e605402156a9", "patch": "@@ -604,7 +604,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// If there is no expected signature, then we will convert the\n     /// types that the user gave into a signature.\n     fn supplied_sig_of_closure(&self, decl: &hir::FnDecl) -> ty::PolyFnSig<'tcx> {\n-        let astconv: &AstConv = self;\n+        let astconv: &dyn AstConv = self;\n \n         // First, convert the types that the user supplied (if any).\n         let supplied_arguments = decl.inputs.iter().map(|a| astconv.ast_ty_to_ty(a));\n@@ -630,7 +630,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// so should yield an error, but returns back a signature where\n     /// all parameters are of type `TyErr`.\n     fn error_sig_of_closure(&self, decl: &hir::FnDecl) -> ty::PolyFnSig<'tcx> {\n-        let astconv: &AstConv = self;\n+        let astconv: &dyn AstConv = self;\n \n         let supplied_arguments = decl.inputs.iter().map(|a| {\n             // Convert the types that the user supplied (if any), but ignore them."}, {"sha": "e3b0b8cccf31c073e069913044ed20d9fd62a88d", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=f29ac5a680f57851f68ad2584972e605402156a9", "patch": "@@ -1071,7 +1071,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n     pub fn coerce_forced_unit<'a>(&mut self,\n                                   fcx: &FnCtxt<'a, 'gcx, 'tcx>,\n                                   cause: &ObligationCause<'tcx>,\n-                                  augment_error: &mut FnMut(&mut DiagnosticBuilder),\n+                                  augment_error: &mut dyn FnMut(&mut DiagnosticBuilder),\n                                   label_unit_as_expected: bool)\n     {\n         self.coerce_inner(fcx,\n@@ -1090,7 +1090,7 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                         cause: &ObligationCause<'tcx>,\n                         expression: Option<&'gcx hir::Expr>,\n                         mut expression_ty: Ty<'tcx>,\n-                        augment_error: Option<&mut FnMut(&mut DiagnosticBuilder)>,\n+                        augment_error: Option<&mut dyn FnMut(&mut DiagnosticBuilder)>,\n                         label_expression_as_expected: bool)\n     {\n         // Incorporate whatever type inference information we have"}, {"sha": "b7233217d5f3b8c1c1e7ed8a0f9c37d2546faaf2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=f29ac5a680f57851f68ad2584972e605402156a9", "patch": "@@ -526,7 +526,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn resolve<T>(&self, x: &T, span: &Locatable) -> T::Lifted\n+    fn resolve<T>(&self, x: &T, span: &dyn Locatable) -> T::Lifted\n     where\n         T: TypeFoldable<'tcx> + ty::Lift<'gcx>,\n     {\n@@ -580,14 +580,14 @@ impl Locatable for hir::HirId {\n struct Resolver<'cx, 'gcx: 'cx + 'tcx, 'tcx: 'cx> {\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     infcx: &'cx InferCtxt<'cx, 'gcx, 'tcx>,\n-    span: &'cx Locatable,\n+    span: &'cx dyn Locatable,\n     body: &'gcx hir::Body,\n }\n \n impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n     fn new(\n         fcx: &'cx FnCtxt<'cx, 'gcx, 'tcx>,\n-        span: &'cx Locatable,\n+        span: &'cx dyn Locatable,\n         body: &'gcx hir::Body,\n     ) -> Resolver<'cx, 'gcx, 'tcx> {\n         Resolver {"}, {"sha": "393904583ca42560c862b94940110d8337a48aff", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=f29ac5a680f57851f68ad2584972e605402156a9", "patch": "@@ -212,7 +212,7 @@ pub fn coerce_unsized_info<'a, 'gcx>(gcx: TyCtxt<'a, 'gcx, 'gcx>,\n         let cause = ObligationCause::misc(span, impl_node_id);\n         let check_mutbl = |mt_a: ty::TypeAndMut<'gcx>,\n                            mt_b: ty::TypeAndMut<'gcx>,\n-                           mk_ptr: &Fn(Ty<'gcx>) -> Ty<'gcx>| {\n+                           mk_ptr: &dyn Fn(Ty<'gcx>) -> Ty<'gcx>| {\n             if (mt_a.mutbl, mt_b.mutbl) == (hir::MutImmutable, hir::MutMutable) {\n                 infcx.report_mismatched_types(&cause,\n                                              mk_ptr(mt_b.ty),"}, {"sha": "5fa98e3ebe6951b1477271aa40bab9ccb9c87cbb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f29ac5a680f57851f68ad2584972e605402156a9", "patch": "@@ -1244,7 +1244,7 @@ fn impl_polarity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n // Is it marked with ?Sized\n-fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n+fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &dyn AstConv<'gcx, 'tcx>,\n                                 ast_bounds: &[hir::GenericBound],\n                                 span: Span) -> bool\n {\n@@ -1598,7 +1598,7 @@ pub enum SizedByDefault { Yes, No, }\n /// Translate the AST's notion of ty param bounds (which are an enum consisting of a newtyped Ty or\n /// a region) to ty's notion of ty param bounds, which can either be user-defined traits, or the\n /// built-in trait (formerly known as kind): Send.\n-pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n+pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &dyn AstConv<'gcx, 'tcx>,\n                                         param_ty: Ty<'tcx>,\n                                         ast_bounds: &[hir::GenericBound],\n                                         sized_by_default: SizedByDefault,\n@@ -1646,7 +1646,7 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n /// because this can be anywhere from 0 predicates (`T:?Sized` adds no\n /// predicates) to 1 (`T:Foo`) to many (`T:Bar<X=i32>` adds `T:Bar`\n /// and `<T as Bar>::X == i32`).\n-fn predicates_from_bound<'tcx>(astconv: &AstConv<'tcx, 'tcx>,\n+fn predicates_from_bound<'tcx>(astconv: &dyn AstConv<'tcx, 'tcx>,\n                                param_ty: Ty<'tcx>,\n                                bound: &hir::GenericBound)\n                                -> Vec<ty::Predicate<'tcx>>"}, {"sha": "4d957c9aa4520eed64f80847bbf0e9ece29c547a", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=f29ac5a680f57851f68ad2584972e605402156a9", "patch": "@@ -2338,7 +2338,7 @@ Rust does not currently support this. A simple example that causes this error:\n \n ```compile_fail,E0225\n fn main() {\n-    let _: Box<std::io::Read + std::io::Write>;\n+    let _: Box<dyn std::io::Read + std::io::Write>;\n }\n ```\n \n@@ -2348,7 +2348,7 @@ auto traits. For example, the following compiles correctly:\n \n ```\n fn main() {\n-    let _: Box<std::io::Read + Send + Sync>;\n+    let _: Box<dyn std::io::Read + Send + Sync>;\n }\n ```\n \"##,"}, {"sha": "b50f55effad456e1052b5da2ddf9b66d4ea30420", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29ac5a680f57851f68ad2584972e605402156a9/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=f29ac5a680f57851f68ad2584972e605402156a9", "patch": "@@ -70,6 +70,7 @@ This API is completely unstable and subject to change.\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n+#![deny(bare_trait_objects)]\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}]}