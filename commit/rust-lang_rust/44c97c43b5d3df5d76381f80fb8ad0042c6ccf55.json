{"sha": "44c97c43b5d3df5d76381f80fb8ad0042c6ccf55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0Yzk3YzQzYjVkM2RmNWQ3NjM4MWY4MGZiOGFkMDA0MmM2Y2NmNTU=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-03-06T13:32:54Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-03-06T13:50:09Z"}, "message": "Fix & test leak of some BTreeMap nodes on panic during `into_iter`", "tree": {"sha": "98abd6c59b19239937f9c0d740aa8a894ae0b3fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98abd6c59b19239937f9c0d740aa8a894ae0b3fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55", "html_url": "https://github.com/rust-lang/rust/commit/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "865b44a3e330f3ef8be0f6edf69896c9ed957ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/865b44a3e330f3ef8be0f6edf69896c9ed957ac0", "html_url": "https://github.com/rust-lang/rust/commit/865b44a3e330f3ef8be0f6edf69896c9ed957ac0"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "9da324ba2d4f14c3d73fc910394c000658cbd12b", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=44c97c43b5d3df5d76381f80fb8ad0042c6ccf55", "patch": "@@ -1477,6 +1477,14 @@ impl<K, V> Drop for IntoIter<K, V> {\n                 // Continue the same loop we perform below. This only runs when unwinding, so we\n                 // don't have to care about panics this time (they'll abort).\n                 while let Some(_) = self.0.next() {}\n+\n+                // No need to avoid the shared root, because the tree was definitely not empty.\n+                unsafe {\n+                    let mut node = ptr::read(&self.0.front).into_node().forget_type();\n+                    while let Some(parent) = node.deallocate_and_ascend() {\n+                        node = parent.into_node().forget_type();\n+                    }\n+                }\n             }\n         }\n \n@@ -1491,7 +1499,8 @@ impl<K, V> Drop for IntoIter<K, V> {\n             if node.is_shared_root() {\n                 return;\n             }\n-\n+            // Most of the nodes have been deallocated while traversing\n+            // but one pile from a leaf up to the root is left standing.\n             while let Some(parent) = node.deallocate_and_ascend() {\n                 node = parent.into_node().forget_type();\n             }"}, {"sha": "d05eec19346de86e9ea93deaba8b492a837d6fae", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c97c43b5d3df5d76381f80fb8ad0042c6ccf55/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=44c97c43b5d3df5d76381f80fb8ad0042c6ccf55", "patch": "@@ -1021,7 +1021,7 @@ fn test_split_off_large_random_sorted() {\n }\n \n #[test]\n-fn test_into_iter_drop_leak() {\n+fn test_into_iter_drop_leak_1() {\n     static DROPS: AtomicU32 = AtomicU32::new(0);\n \n     struct D;\n@@ -1045,3 +1045,27 @@ fn test_into_iter_drop_leak() {\n \n     assert_eq!(DROPS.load(Ordering::SeqCst), 5);\n }\n+\n+#[test]\n+fn test_into_iter_drop_leak_2() {\n+    let size = 12; // to obtain tree with 2 levels (having edges to leaf nodes)\n+    static DROPS: AtomicU32 = AtomicU32::new(0);\n+    static PANIC_POINT: AtomicU32 = AtomicU32::new(0);\n+\n+    struct D;\n+    impl Drop for D {\n+        fn drop(&mut self) {\n+            if DROPS.fetch_add(1, Ordering::SeqCst) == PANIC_POINT.load(Ordering::SeqCst) {\n+                panic!(\"panic in `drop`\");\n+            }\n+        }\n+    }\n+\n+    for panic_point in vec![0, 1, size - 2, size - 1] {\n+        DROPS.store(0, Ordering::SeqCst);\n+        PANIC_POINT.store(panic_point, Ordering::SeqCst);\n+        let map: BTreeMap<_, _> = (0..size).map(|i| (i, D)).collect();\n+        catch_unwind(move || drop(map.into_iter())).ok();\n+        assert_eq!(DROPS.load(Ordering::SeqCst), size);\n+    }\n+}"}]}