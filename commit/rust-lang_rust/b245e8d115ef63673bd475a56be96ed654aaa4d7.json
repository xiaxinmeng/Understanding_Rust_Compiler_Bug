{"sha": "b245e8d115ef63673bd475a56be96ed654aaa4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNDVlOGQxMTVlZjYzNjczYmQ0NzVhNTZiZTk2ZWQ2NTRhYWE0ZDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-15T13:18:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-15T13:18:26Z"}, "message": "Merge #8015\n\n8015:  Introduce Semantics::visit_file_defs r=matklad a=Veykril\n\nSee https://github.com/rust-analyzer/rust-analyzer/issues/3538#issuecomment-798920601\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f0b935409cc603a6a87eb172698c8260359eb3da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b935409cc603a6a87eb172698c8260359eb3da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b245e8d115ef63673bd475a56be96ed654aaa4d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT16iCRBK7hj4Ov3rIwAAdHIIAEgBiLfugj5OmaJLrztBP644\nzoFJ4/hgdnE4tw9+pCjyT+65u/ldDqiweoN1ixSoJqgPFjC7MOplQq2jrj7e70V0\n4e+0FuBBO2lA4rHYhUy0SMlVg0OXZUhFTEEI66jsxoeK5co9GA5v88AqOJVXhOFv\nMqjp8eIWijWSWv7OQIK12Vqwtk3WkBmTWGJzmpRph0DV8VFhev9Ba6C+8EbQ1Akd\naqsWgl9tDx6xl4g76qeopTSIds8n3/Nz4oikrJM315aV33mdG3Ah/z5kKaORjTib\nFUL4upX6ga9C6PnoDfbOJXeSeWGaZWq4s572xjZtf32l/sydfoSrbkjq/zAdpo0=\n=uFoq\n-----END PGP SIGNATURE-----\n", "payload": "tree f0b935409cc603a6a87eb172698c8260359eb3da\nparent 0ac7a19d0c35f0c77a9c3a6209d8ff0e2cf1b035\nparent 41745f48d5f867ff0896ce7906b5b4c04e72a767\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615814306 +0000\ncommitter GitHub <noreply@github.com> 1615814306 +0000\n\nMerge #8015\n\n8015:  Introduce Semantics::visit_file_defs r=matklad a=Veykril\n\nSee https://github.com/rust-analyzer/rust-analyzer/issues/3538#issuecomment-798920601\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b245e8d115ef63673bd475a56be96ed654aaa4d7", "html_url": "https://github.com/rust-lang/rust/commit/b245e8d115ef63673bd475a56be96ed654aaa4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b245e8d115ef63673bd475a56be96ed654aaa4d7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ac7a19d0c35f0c77a9c3a6209d8ff0e2cf1b035", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac7a19d0c35f0c77a9c3a6209d8ff0e2cf1b035", "html_url": "https://github.com/rust-lang/rust/commit/0ac7a19d0c35f0c77a9c3a6209d8ff0e2cf1b035"}, {"sha": "41745f48d5f867ff0896ce7906b5b4c04e72a767", "url": "https://api.github.com/repos/rust-lang/rust/commits/41745f48d5f867ff0896ce7906b5b4c04e72a767", "html_url": "https://github.com/rust-lang/rust/commit/41745f48d5f867ff0896ce7906b5b4c04e72a767"}], "stats": {"total": 175, "additions": 108, "deletions": 67}, "files": [{"sha": "72492f8266ba051282dfa74871b583d02f5eedeb", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 59, "deletions": 28, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/b245e8d115ef63673bd475a56be96ed654aaa4d7/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b245e8d115ef63673bd475a56be96ed654aaa4d7/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=b245e8d115ef63673bd475a56be96ed654aaa4d7", "patch": "@@ -1,17 +1,18 @@\n-use hir::Semantics;\n+use either::Either;\n+use hir::{HasSource, Semantics};\n use ide_db::{\n-    base_db::{FileId, FilePosition, FileRange, SourceDatabase},\n-    RootDatabase, SymbolKind,\n+    base_db::{FileId, FilePosition, FileRange},\n+    helpers::visit_file_defs,\n+    RootDatabase,\n };\n-use syntax::TextRange;\n+use syntax::{ast::NameOwner, AstNode, TextRange, TextSize};\n \n use crate::{\n-    file_structure::file_structure,\n     fn_references::find_all_methods,\n     goto_implementation::goto_implementation,\n     references::find_all_refs,\n     runnables::{runnables, Runnable},\n-    NavigationTarget, RunnableKind, StructureNodeKind,\n+    NavigationTarget, RunnableKind,\n };\n \n // Feature: Annotations\n@@ -75,41 +76,56 @@ pub(crate) fn annotations(\n         }\n     }\n \n-    file_structure(&db.parse(file_id).tree())\n-        .into_iter()\n-        .filter(|node| {\n-            matches!(\n-                node.kind,\n-                StructureNodeKind::SymbolKind(SymbolKind::Trait)\n-                    | StructureNodeKind::SymbolKind(SymbolKind::Struct)\n-                    | StructureNodeKind::SymbolKind(SymbolKind::Enum)\n-                    | StructureNodeKind::SymbolKind(SymbolKind::Union)\n-                    | StructureNodeKind::SymbolKind(SymbolKind::Const)\n-            )\n-        })\n-        .for_each(|node| {\n-            if config.annotate_impls\n-                && node.kind != StructureNodeKind::SymbolKind(SymbolKind::Const)\n-            {\n+    visit_file_defs(&Semantics::new(db), file_id, &mut |def| match def {\n+        Either::Left(def) => {\n+            let node = match def {\n+                hir::ModuleDef::Const(konst) => {\n+                    konst.source(db).and_then(|node| range_and_position_of(&node.value))\n+                }\n+                hir::ModuleDef::Trait(trait_) => {\n+                    trait_.source(db).and_then(|node| range_and_position_of(&node.value))\n+                }\n+                hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {\n+                    strukt.source(db).and_then(|node| range_and_position_of(&node.value))\n+                }\n+                hir::ModuleDef::Adt(hir::Adt::Enum(enum_)) => {\n+                    enum_.source(db).and_then(|node| range_and_position_of(&node.value))\n+                }\n+                hir::ModuleDef::Adt(hir::Adt::Union(union)) => {\n+                    union.source(db).and_then(|node| range_and_position_of(&node.value))\n+                }\n+                _ => None,\n+            };\n+            let (offset, range) = match node {\n+                Some(node) => node,\n+                None => return,\n+            };\n+\n+            if config.annotate_impls && !matches!(def, hir::ModuleDef::Const(_)) {\n                 annotations.push(Annotation {\n-                    range: node.node_range,\n+                    range,\n                     kind: AnnotationKind::HasImpls {\n-                        position: FilePosition { file_id, offset: node.navigation_range.start() },\n+                        position: FilePosition { file_id, offset },\n                         data: None,\n                     },\n                 });\n             }\n-\n             if config.annotate_references {\n                 annotations.push(Annotation {\n-                    range: node.node_range,\n+                    range,\n                     kind: AnnotationKind::HasReferences {\n-                        position: FilePosition { file_id, offset: node.navigation_range.start() },\n+                        position: FilePosition { file_id, offset },\n                         data: None,\n                     },\n                 });\n             }\n-        });\n+\n+            fn range_and_position_of(node: &dyn NameOwner) -> Option<(TextSize, TextRange)> {\n+                Some((node.name()?.syntax().text_range().start(), node.syntax().text_range()))\n+            }\n+        }\n+        Either::Right(_) => (),\n+    });\n \n     if config.annotate_method_references {\n         annotations.extend(find_all_methods(db, file_id).into_iter().map(|method| Annotation {\n@@ -936,4 +952,19 @@ mod tests {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_no_annotations_outside_module_tree() {\n+        check(\n+            r#\"\n+//- /foo.rs\n+struct Foo;\n+//- /lib.rs\n+// this file comes last since `check` checks the first file only\n+\"#,\n+            expect![[r#\"\n+                []\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "0c7a8fbf807e8e03b5be03f005ea71ca574b3565", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b245e8d115ef63673bd475a56be96ed654aaa4d7/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b245e8d115ef63673bd475a56be96ed654aaa4d7/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=b245e8d115ef63673bd475a56be96ed654aaa4d7", "patch": "@@ -2,11 +2,13 @@ use std::fmt;\n \n use ast::NameOwner;\n use cfg::CfgExpr;\n+use either::Either;\n use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics};\n use ide_assists::utils::test_related_attribute;\n use ide_db::{\n     base_db::{FilePosition, FileRange},\n     defs::Definition,\n+    helpers::visit_file_defs,\n     search::SearchScope,\n     RootDatabase, SymbolKind,\n };\n@@ -102,13 +104,27 @@ impl Runnable {\n // |===\n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let sema = Semantics::new(db);\n-    let module = match sema.to_module_def(file_id) {\n-        None => return Vec::new(),\n-        Some(it) => it,\n-    };\n \n     let mut res = Vec::new();\n-    runnables_mod(&sema, &mut res, module);\n+    visit_file_defs(&sema, file_id, &mut |def| match def {\n+        Either::Left(def) => {\n+            let runnable = match def {\n+                hir::ModuleDef::Module(it) => runnable_mod(&sema, it),\n+                hir::ModuleDef::Function(it) => runnable_fn(&sema, it),\n+                _ => None,\n+            };\n+            res.extend(runnable.or_else(|| module_def_doctest(&sema, def)))\n+        }\n+        Either::Right(impl_) => {\n+            res.extend(impl_.items(db).into_iter().filter_map(|assoc| match assoc {\n+                hir::AssocItem::Function(it) => {\n+                    runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n+                }\n+                hir::AssocItem::Const(it) => module_def_doctest(&sema, it.into()),\n+                hir::AssocItem::TypeAlias(it) => module_def_doctest(&sema, it.into()),\n+            }))\n+        }\n+    });\n     res\n }\n \n@@ -211,39 +227,6 @@ fn parent_test_module(sema: &Semantics<RootDatabase>, fn_def: &ast::Fn) -> Optio\n     })\n }\n \n-fn runnables_mod(sema: &Semantics<RootDatabase>, acc: &mut Vec<Runnable>, module: hir::Module) {\n-    acc.extend(module.declarations(sema.db).into_iter().filter_map(|def| {\n-        let runnable = match def {\n-            hir::ModuleDef::Module(it) => runnable_mod(&sema, it),\n-            hir::ModuleDef::Function(it) => runnable_fn(&sema, it),\n-            _ => None,\n-        };\n-        runnable.or_else(|| module_def_doctest(&sema, def))\n-    }));\n-\n-    acc.extend(module.impl_defs(sema.db).into_iter().flat_map(|it| it.items(sema.db)).filter_map(\n-        |def| match def {\n-            hir::AssocItem::Function(it) => {\n-                runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n-            }\n-            hir::AssocItem::Const(it) => module_def_doctest(&sema, it.into()),\n-            hir::AssocItem::TypeAlias(it) => module_def_doctest(&sema, it.into()),\n-        },\n-    ));\n-\n-    for def in module.declarations(sema.db) {\n-        if let hir::ModuleDef::Module(submodule) = def {\n-            match submodule.definition_source(sema.db).value {\n-                hir::ModuleSource::Module(_) => runnables_mod(sema, acc, submodule),\n-                hir::ModuleSource::SourceFile(_) => {\n-                    cov_mark::hit!(dont_recurse_in_outline_submodules)\n-                }\n-                hir::ModuleSource::BlockExpr(_) => {} // inner items aren't runnable\n-            }\n-        }\n-    }\n-}\n-\n pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) -> Option<Runnable> {\n     let func = def.source(sema.db)?;\n     let name_string = def.name(sema.db).to_string();\n@@ -1178,7 +1161,6 @@ mod tests {\n \n     #[test]\n     fn dont_recurse_in_outline_submodules() {\n-        cov_mark::check!(dont_recurse_in_outline_submodules);\n         check(\n             r#\"\n //- /lib.rs"}, {"sha": "9992a92bdf20ac7edad870d44f3048f3a7a73136", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b245e8d115ef63673bd475a56be96ed654aaa4d7/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b245e8d115ef63673bd475a56be96ed654aaa4d7/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=b245e8d115ef63673bd475a56be96ed654aaa4d7", "patch": "@@ -2,6 +2,10 @@\n pub mod insert_use;\n pub mod import_assets;\n \n+use std::collections::VecDeque;\n+\n+use base_db::FileId;\n+use either::Either;\n use hir::{Crate, Enum, ItemInNs, MacroDef, Module, ModuleDef, Name, ScopeDef, Semantics, Trait};\n use syntax::ast::{self, make};\n \n@@ -39,6 +43,30 @@ pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n     make::path_from_segments(segments, is_abs)\n }\n \n+/// Iterates all `ModuleDef`s and `Impl` blocks of the given file.\n+pub fn visit_file_defs(\n+    sema: &Semantics<RootDatabase>,\n+    file_id: FileId,\n+    cb: &mut dyn FnMut(Either<hir::ModuleDef, hir::Impl>),\n+) {\n+    let db = sema.db;\n+    let module = match sema.to_module_def(file_id) {\n+        Some(it) => it,\n+        None => return,\n+    };\n+    let mut defs: VecDeque<_> = module.declarations(db).into();\n+    while let Some(def) = defs.pop_front() {\n+        if let ModuleDef::Module(submodule) = def {\n+            if let hir::ModuleSource::Module(_) = submodule.definition_source(db).value {\n+                defs.extend(submodule.declarations(db));\n+                submodule.impl_defs(db).into_iter().for_each(|impl_| cb(Either::Right(impl_)));\n+            }\n+        }\n+        cb(Either::Left(def));\n+    }\n+    module.impl_defs(db).into_iter().for_each(|impl_| cb(Either::Right(impl_)));\n+}\n+\n /// Helps with finding well-know things inside the standard library. This is\n /// somewhat similar to the known paths infra inside hir, but it different; We\n /// want to make sure that IDE specific paths don't become interesting inside"}]}