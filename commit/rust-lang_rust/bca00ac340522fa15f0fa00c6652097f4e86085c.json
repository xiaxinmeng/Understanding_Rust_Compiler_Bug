{"sha": "bca00ac340522fa15f0fa00c6652097f4e86085c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYTAwYWMzNDA1MjJmYTE1ZjBmYTAwYzY2NTIwOTdmNGU4NjA4NWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-28T01:21:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-28T01:21:45Z"}, "message": "Merge #9033\n\n9033: Complete keywords in (Assoc)ItemList with leading attribute r=Veykril a=Veykril\n\nFixes #7673\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "7a3ebc4a1414dbd3d9c2d85647cdda860c17efbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3ebc4a1414dbd3d9c2d85647cdda860c17efbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bca00ac340522fa15f0fa00c6652097f4e86085c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgsEWpCRBK7hj4Ov3rIwAAEbsIAHAe0gWSQ4OPN2GgS6GaevqH\nj1PZ3O3xq0XAFLBI+0I6N5IyMMHjZr3F7W5BdLpM+/N828+67LUgPviudMXwBAN9\nLAZWYsKzHj3mL7HYutwGcoyYt24/rXHReALIDCZ841FYChdXudFXXbp67J1jICKB\nujhT28Uk4opBQ3FiPnqwuHasAAM2EsumlJ01SXlpzBy5H3SL1szqswbblXIMWhN/\n7t53tPTzX4qucj4vf2b7cZxqJlwWIU1KPy0ssHBqRoWJZJjaR6sOu6j3vBUbkScT\nRJztd5QI3rdw1eFIVGdnjqMmTPamXg0Do6YLrml+ZarXU0K8Knb0hvWxRCWPGII=\n=S3Ph\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a3ebc4a1414dbd3d9c2d85647cdda860c17efbe\nparent 3a1598c3bcbf089239c2fdff698b9c02670362b3\nparent 1894db49b1e4c3200e9f561feb7f9891e54e1453\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622164905 +0000\ncommitter GitHub <noreply@github.com> 1622164905 +0000\n\nMerge #9033\n\n9033: Complete keywords in (Assoc)ItemList with leading attribute r=Veykril a=Veykril\n\nFixes #7673\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bca00ac340522fa15f0fa00c6652097f4e86085c", "html_url": "https://github.com/rust-lang/rust/commit/bca00ac340522fa15f0fa00c6652097f4e86085c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bca00ac340522fa15f0fa00c6652097f4e86085c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a1598c3bcbf089239c2fdff698b9c02670362b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a1598c3bcbf089239c2fdff698b9c02670362b3", "html_url": "https://github.com/rust-lang/rust/commit/3a1598c3bcbf089239c2fdff698b9c02670362b3"}, {"sha": "1894db49b1e4c3200e9f561feb7f9891e54e1453", "url": "https://api.github.com/repos/rust-lang/rust/commits/1894db49b1e4c3200e9f561feb7f9891e54e1453", "html_url": "https://github.com/rust-lang/rust/commit/1894db49b1e4c3200e9f561feb7f9891e54e1453"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "c9673df85d2d8ee7aaf4d8ea56f41dc86311a637", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bca00ac340522fa15f0fa00c6652097f4e86085c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca00ac340522fa15f0fa00c6652097f4e86085c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=bca00ac340522fa15f0fa00c6652097f4e86085c", "patch": "@@ -394,6 +394,21 @@ fn quux() -> i32 {\n         );\n     }\n \n+    #[test]\n+    fn test_keywords_in_impl_def_with_attr() {\n+        check(\n+            r\"impl My { #[foo] $0 }\",\n+            expect![[r#\"\n+                kw fn\n+                kw const\n+                kw type\n+                kw unsafe\n+                kw pub(crate)\n+                kw pub\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_keywords_in_loop() {\n         check("}, {"sha": "c8a88367d784fab96b2f1afc762661b0acb6fd26", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bca00ac340522fa15f0fa00c6652097f4e86085c/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca00ac340522fa15f0fa00c6652097f4e86085c/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=bca00ac340522fa15f0fa00c6652097f4e86085c", "patch": "@@ -25,9 +25,10 @@ pub(crate) enum ImmediateLocation {\n }\n \n pub(crate) fn determine_location(tok: SyntaxToken) -> Option<ImmediateLocation> {\n-    // First \"expand\" the element we are completing to its maximum so that we can check in what\n-    // context it immediately lies. This for example means if the token is a NameRef at the end of\n-    // a path, we want to look at where the path is in the tree.\n+    // First walk the element we are completing up to its highest node that has the same text range\n+    // as the element so that we can check in what context it immediately lies. We only do this for\n+    // NameRef -> Path as that's the only thing that makes sense to being \"expanded\" semantically.\n+    // We only wanna do this if the NameRef is the last segment of the path.\n     let node = match tok.parent().and_then(ast::NameLike::cast)? {\n         ast::NameLike::NameRef(name_ref) => {\n             if let Some(segment) = name_ref.syntax().parent().and_then(ast::PathSegment::cast) {\n@@ -47,7 +48,20 @@ pub(crate) fn determine_location(tok: SyntaxToken) -> Option<ImmediateLocation>\n         it @ ast::NameLike::Name(_) | it @ ast::NameLike::Lifetime(_) => it.syntax().clone(),\n     };\n     let parent = match node.parent() {\n-        Some(parent) => parent,\n+        Some(parent) => match ast::MacroCall::cast(parent.clone()) {\n+            // When a path is being typed in an (Assoc)ItemList the parser will always emit a macro_call.\n+            // This is usually fine as the node expansion code above already accounts for that with\n+            // the ancestors call, but there is one exception to this which is that when an attribute\n+            // precedes it the code above will not walk the Path to the parent MacroCall as their ranges differ.\n+            Some(call)\n+                if call.excl_token().is_none()\n+                    && call.token_tree().is_none()\n+                    && call.semicolon_token().is_none() =>\n+            {\n+                call.syntax().parent()?\n+            }\n+            _ => parent,\n+        },\n         // SourceFile\n         None => {\n             return match node.kind() {"}]}