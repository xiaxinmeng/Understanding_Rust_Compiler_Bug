{"sha": "9a7890d73af5ebe4bf862fa727427e290da1391b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNzg5MGQ3M2FmNWViZTRiZjg2MmZhNzI3NDI3ZTI5MGRhMTM5MWI=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-02T21:33:26Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-22T21:59:24Z"}, "message": "Centralize ident interner generation.", "tree": {"sha": "ab7db3f5f973934aed69d3eb0c7e79c18ccf7732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab7db3f5f973934aed69d3eb0c7e79c18ccf7732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a7890d73af5ebe4bf862fa727427e290da1391b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7890d73af5ebe4bf862fa727427e290da1391b", "html_url": "https://github.com/rust-lang/rust/commit/9a7890d73af5ebe4bf862fa727427e290da1391b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a7890d73af5ebe4bf862fa727427e290da1391b/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744fea1a4f1b826def484aa4584e939fa272a8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/744fea1a4f1b826def484aa4584e939fa272a8c3", "html_url": "https://github.com/rust-lang/rust/commit/744fea1a4f1b826def484aa4584e939fa272a8c3"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "b741b43b99bbb0778228447f4f40f7dbc9208f75", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=9a7890d73af5ebe4bf862fa727427e290da1391b", "patch": "@@ -260,8 +260,7 @@ fn check_variants_T<T: copy>(\n                     @as_str(|a|pprust::print_crate(\n                         codemap,\n                         // Assuming we're not generating any token_trees\n-                        syntax::util::interner::mk::<@~str>(\n-                            |x| str::hash(*x), |x,y| str::eq(*x,*y)),\n+                        syntax::parse::token::mk_ident_interner(),\n                         diagnostic::mk_span_handler(handler, codemap),\n                         crate2,\n                         filename,\n@@ -423,8 +422,7 @@ fn parse_and_print(code: @~str) -> ~str {\n                pprust::print_crate(\n                    sess.cm,\n                    // Assuming there are no token_trees\n-                   syntax::util::interner::mk::<@~str>(\n-                       |x| str::hash(*x), |x,y| str::eq(*x,*y)),\n+                   syntax::parse::token::mk_ident_interner(),\n                    sess.span_diagnostic,\n                    crate,\n                    filename,\n@@ -572,8 +570,7 @@ fn check_variants(files: ~[~str], cx: context) {\n                    as_str(|a| pprust::print_crate(\n                        sess.cm,\n                        // Assuming no token_trees\n-                       syntax::util::interner::mk::<@~str>(\n-                            |x| str::hash(*x), |x,y| str::eq(*x,*y)),\n+                       syntax::parse::token::mk_ident_interner(),\n                        sess.span_diagnostic,\n                        crate,\n                        file,"}, {"sha": "a166957231e4c0a06cc196b31a0cd07f821a4ac2", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=9a7890d73af5ebe4bf862fa727427e290da1391b", "patch": "@@ -1,9 +1,9 @@\n-import util::interner::interner;\n import diagnostic::span_handler;\n import ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,ident};\n import earley_parser::{named_match, matched_seq, matched_nonterminal};\n import codemap::span;\n-import parse::token::{EOF, INTERPOLATED, IDENT, token, nt_ident};\n+import parse::token::{EOF, INTERPOLATED, IDENT, token, nt_ident,\n+                      ident_interner};\n import std::map::{hashmap, box_str_hash};\n \n export tt_reader,  new_tt_reader, dup_tt_reader, tt_next_token;\n@@ -25,7 +25,7 @@ type tt_frame = @{\n \n type tt_reader = @{\n     sp_diag: span_handler,\n-    interner: interner<@~str>,\n+    interner: ident_interner,\n     mut cur: tt_frame,\n     /* for MBE-style macro transcription */\n     interpolations: std::map::hashmap<ident, @named_match>,\n@@ -39,7 +39,7 @@ type tt_reader = @{\n /** This can do Macro-By-Example transcription. On the other hand, if\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n-fn new_tt_reader(sp_diag: span_handler, itr: interner<@~str>,\n+fn new_tt_reader(sp_diag: span_handler, itr: ident_interner,\n                  interp: option<std::map::hashmap<ident,@named_match>>,\n                  src: ~[ast::token_tree])\n     -> tt_reader {"}, {"sha": "bb21ba92679e6ca2d9841f8c5104bd0bf1765790", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=9a7890d73af5ebe4bf862fa727427e290da1391b", "patch": "@@ -19,12 +19,13 @@ import ast::node_id;\n import util::interner;\n import diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n import lexer::{reader, string_reader};\n+import parse::token::{ident_interner, mk_ident_interner};\n \n type parse_sess = @{\n     cm: codemap::codemap,\n     mut next_id: node_id,\n     span_diagnostic: span_handler,\n-    interner: interner::interner<@~str>,\n+    interner: ident_interner,\n     // these two must be kept up to date\n     mut chpos: uint,\n     mut byte_pos: uint\n@@ -33,21 +34,19 @@ type parse_sess = @{\n fn new_parse_sess(demitter: option<emitter>) -> parse_sess {\n     let cm = codemap::new_codemap();\n     return @{cm: cm,\n-          mut next_id: 1,\n-          span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n-          interner: interner::mk::<@~str>(|x| str::hash(*x),\n-                                          |x,y| str::eq(*x, *y)),\n-          mut chpos: 0u, mut byte_pos: 0u};\n+             mut next_id: 1,\n+             span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n+             interner: mk_ident_interner(),\n+             mut chpos: 0u, mut byte_pos: 0u};\n }\n \n fn new_parse_sess_special_handler(sh: span_handler, cm: codemap::codemap)\n     -> parse_sess {\n     return @{cm: cm,\n-          mut next_id: 1,\n-          span_diagnostic: sh,\n-          interner: interner::mk::<@~str>(|x| str::hash(*x),\n-                                          |x,y| str::eq(*x, *y)),\n-          mut chpos: 0u, mut byte_pos: 0u};\n+             mut next_id: 1,\n+             span_diagnostic: sh,\n+             interner: mk_ident_interner(),\n+             mut chpos: 0u, mut byte_pos: 0u};\n }\n \n fn parse_crate_from_file(input: ~str, cfg: ast::crate_cfg,"}, {"sha": "b10da4482e4970575598935be4d3954f13e7e025", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=9a7890d73af5ebe4bf862fa727427e290da1391b", "patch": "@@ -276,10 +276,7 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n                                 srdr: io::Reader) ->\n    {cmnts: ~[cmnt], lits: ~[lit]} {\n     let src = @str::from_bytes(srdr.read_whole_stream());\n-    let itr = interner::mk::<@~str>(\n-        |x| str::hash(*x),\n-        |x,y| str::eq(*x, *y)\n-    );\n+    let itr = parse::token::mk_ident_interner();\n     let rdr = lexer::new_low_level_string_reader\n         (span_diagnostic, codemap::new_filemap(path, src, 0u, 0u), itr);\n "}, {"sha": "a796073c9dd964bd381a0a1edb4b97ef4b3f7910", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=9a7890d73af5ebe4bf862fa727427e290da1391b", "patch": "@@ -1,4 +1,3 @@\n-import util::interner::interner;\n import diagnostic::span_handler;\n import codemap::span;\n import ext::tt::transcribe::{tt_reader,  new_tt_reader, dup_tt_reader,\n@@ -14,7 +13,7 @@ trait reader {\n     fn next_token() -> {tok: token::token, sp: span};\n     fn fatal(~str) -> !;\n     fn span_diag() -> span_handler;\n-    pure fn interner() -> interner<@~str>;\n+    pure fn interner() -> token::ident_interner;\n     fn peek() -> {tok: token::token, sp: span};\n     fn dup() -> reader;\n }\n@@ -27,15 +26,15 @@ type string_reader = @{\n     mut curr: char,\n     mut chpos: uint,\n     filemap: codemap::filemap,\n-    interner: interner<@~str>,\n+    interner: token::ident_interner,\n     /* cached: */\n     mut peek_tok: token::token,\n     mut peek_span: span\n };\n \n fn new_string_reader(span_diagnostic: span_handler,\n                      filemap: codemap::filemap,\n-                     itr: interner<@~str>) -> string_reader {\n+                     itr: token::ident_interner) -> string_reader {\n     let r = new_low_level_string_reader(span_diagnostic, filemap, itr);\n     string_advance_token(r); /* fill in peek_* */\n     return r;\n@@ -44,7 +43,7 @@ fn new_string_reader(span_diagnostic: span_handler,\n /* For comments.rs, which hackily pokes into 'pos' and 'curr' */\n fn new_low_level_string_reader(span_diagnostic: span_handler,\n                                filemap: codemap::filemap,\n-                               itr: interner<@~str>)\n+                               itr: token::ident_interner)\n     -> string_reader {\n     let r = @{span_diagnostic: span_diagnostic, src: filemap.src,\n               mut col: 0u, mut pos: 0u, mut curr: -1 as char,\n@@ -79,7 +78,7 @@ impl string_reader: reader {\n         self.span_diagnostic.span_fatal(copy self.peek_span, m)\n     }\n     fn span_diag() -> span_handler { self.span_diagnostic }\n-    pure fn interner() -> interner<@~str> { self.interner }\n+    pure fn interner() -> token::ident_interner { self.interner }\n     fn peek() -> {tok: token::token, sp: span} {\n         {tok: self.peek_tok, sp: self.peek_span}\n     }\n@@ -101,7 +100,7 @@ impl tt_reader: reader {\n         self.sp_diag.span_fatal(copy self.cur_span, m);\n     }\n     fn span_diag() -> span_handler { self.sp_diag }\n-    pure fn interner() -> interner<@~str> { self.interner }\n+    pure fn interner() -> token::ident_interner { self.interner }\n     fn peek() -> {tok: token::token, sp: span} {\n         { tok: self.cur_tok, sp: self.cur_span }\n     }"}, {"sha": "a1309e3ecef63f7016f6b249ed1c9833ff7e089d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=9a7890d73af5ebe4bf862fa727427e290da1391b", "patch": "@@ -277,6 +277,14 @@ pure fn is_bar(t: token) -> bool {\n     match t { BINOP(OR) | OROR => true, _ => false }\n }\n \n+type ident_interner = util::interner::interner<@~str>;\n+\n+fn mk_ident_interner() -> ident_interner {\n+    let rv = @interner::mk::<@~str>(|x| str::hash(*x),\n+                                    |x,y| str::eq(*x, *y));\n+    rv\n+}\n+\n /**\n  * All the valid words that have meaning in the Rust language.\n  *"}, {"sha": "b8872f76d8d83d07c11239753fa0e7ca497c6f1e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7890d73af5ebe4bf862fa727427e290da1391b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9a7890d73af5ebe4bf862fa727427e290da1391b", "patch": "@@ -1,5 +1,4 @@\n-import parse::comments;\n-import parse::lexer;\n+import parse::{comments, lexer, token};\n import codemap::codemap;\n import pp::{break_offset, word, printer,\n             space, zerobreak, hardbreak, breaks, consistent,\n@@ -30,7 +29,7 @@ fn no_ann() -> pp_ann {\n type ps =\n     @{s: pp::printer,\n       cm: option<codemap>,\n-      intr: interner::interner<@~str>,\n+      intr: token::ident_interner,\n       comments: option<~[comments::cmnt]>,\n       literals: option<~[comments::lit]>,\n       mut cur_cmnt: uint,\n@@ -51,8 +50,7 @@ fn end(s: ps) {\n fn rust_printer(writer: io::Writer) -> ps {\n     return @{s: pp::mk_printer(writer, default_columns),\n              cm: none::<codemap>,\n-             intr: interner::mk::<@~str>(|x| str::hash(*x),\n-                                         |x,y| str::eq(*x, *y)),\n+             intr: token::mk_ident_interner(),\n              comments: none::<~[comments::cmnt]>,\n              literals: none::<~[comments::lit]>,\n              mut cur_cmnt: 0u,"}]}