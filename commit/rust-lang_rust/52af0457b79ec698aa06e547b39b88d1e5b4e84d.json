{"sha": "52af0457b79ec698aa06e547b39b88d1e5b4e84d", "node_id": "C_kwDOAAsO6NoAKDUyYWYwNDU3Yjc5ZWM2OThhYTA2ZTU0N2IzOWI4OGQxZTViNGU4NGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-15T10:00:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-15T10:00:00Z"}, "message": "Auto merge of #2789 - RalfJung:rustup, r=RalfJung\n\nRustup", "tree": {"sha": "ba0769c8b2e29eb20b5f935fba4567c73e4ec0b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba0769c8b2e29eb20b5f935fba4567c73e4ec0b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52af0457b79ec698aa06e547b39b88d1e5b4e84d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52af0457b79ec698aa06e547b39b88d1e5b4e84d", "html_url": "https://github.com/rust-lang/rust/commit/52af0457b79ec698aa06e547b39b88d1e5b4e84d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52af0457b79ec698aa06e547b39b88d1e5b4e84d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2", "html_url": "https://github.com/rust-lang/rust/commit/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2"}, {"sha": "1a2908bfaa4e8283b08aa3c29ff41515f247e322", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2908bfaa4e8283b08aa3c29ff41515f247e322", "html_url": "https://github.com/rust-lang/rust/commit/1a2908bfaa4e8283b08aa3c29ff41515f247e322"}], "stats": {"total": 47292, "additions": 27798, "deletions": 19494}, "files": [{"sha": "7c17dfd8c8edc15dbbe2fb55a3c35d4bfb7afd92", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -54,7 +54,7 @@ jobs:\n             tidy: true\n             os: ubuntu-20.04-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-13\n+          - name: x86_64-gnu-llvm-14\n             tidy: false\n             os: ubuntu-20.04-xl\n             env: {}\n@@ -300,11 +300,7 @@ jobs:\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-20.04-xl\n-          - name: x86_64-gnu-llvm-13\n-            env:\n-              RUST_BACKTRACE: 1\n-            os: ubuntu-20.04-xl\n-          - name: x86_64-gnu-llvm-13-stage1\n+          - name: x86_64-gnu-llvm-14-stage1\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-20.04-xl"}, {"sha": "726d4c3d1d262aee252b422562a85fd7a1264f2b", "filename": ".mailmap", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -419,18 +419,18 @@ Nixon Enraght-Moony <nixon.emoony@gmail.com>\n NODA Kai <nodakai@gmail.com>\n oliver <16816606+o752d@users.noreply.github.com>\n Oliver Middleton <olliemail27@gmail.com> <ollie27@users.noreply.github.com>\n-Oliver Scherer <oliver.schneider@kit.edu> <git-spam-no-reply9815368754983@oli-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu> <git-spam9815368754983@oli-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu> <github333195615777966@oli-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu> <rust19446194516@oli-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu> <git-no-reply-9879165716479413131@oli-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu> <git1984941651981@oli-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu> <github35764891676564198441@oli-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu> <github6541940@oli-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu> <oli-obk@users.noreply.github.com>\n-Oliver Scherer <oliver.schneider@kit.edu> <public.oliver.schneider@kit.edu>\n-Oliver Scherer <oliver.schneider@kit.edu> <obk8176014uqher834@olio-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <git-spam-no-reply9815368754983@oli-obk.de>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <git-spam9815368754983@oli-obk.de>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <github333195615777966@oli-obk.de>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <rust19446194516@oli-obk.de>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <git-no-reply-9879165716479413131@oli-obk.de>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <git1984941651981@oli-obk.de>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <github35764891676564198441@oli-obk.de>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <github6541940@oli-obk.de>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <public.oliver.schneider@kit.edu>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <oliver.schneider@kit.edu>\n+Oliver Scherer <oli-obk@users.noreply.github.com> <obk8176014uqher834@olio-obk.de>\n+Oliver Scherer <oli-obk@users.noreply.github.com>\n \u00d6mer Sinan A\u011facan <omeragacan@gmail.com>\n Ophir LOJKINE <pere.jobs@gmail.com>\n O\u017ebolt Menegatti <ozbolt.menegatti@gmail.com> gareins <ozbolt.menegatti@gmail.com>"}, {"sha": "15f051d0cff1a4001838aa47d42b184744ba39f0", "filename": "Cargo.lock", "status": "modified", "additions": 82, "deletions": 71, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -179,7 +179,7 @@ dependencies = [\n  \"quote\",\n  \"serde\",\n  \"syn\",\n- \"toml\",\n+ \"toml 0.5.7\",\n ]\n \n [[package]]\n@@ -291,7 +291,7 @@ dependencies = [\n  \"serde_json\",\n  \"sha2\",\n  \"tar\",\n- \"toml\",\n+ \"toml 0.5.7\",\n ]\n \n [[package]]\n@@ -307,7 +307,7 @@ dependencies = [\n  \"indexmap\",\n  \"serde\",\n  \"serde_json\",\n- \"toml\",\n+ \"toml 0.5.7\",\n ]\n \n [[package]]\n@@ -408,6 +408,7 @@ dependencies = [\n  \"tempfile\",\n  \"termcolor\",\n  \"time 0.3.17\",\n+ \"toml 0.7.2\",\n  \"toml_edit\",\n  \"unicode-width\",\n  \"unicode-xid\",\n@@ -449,7 +450,7 @@ dependencies = [\n name = \"cargo-miri\"\n version = \"0.1.0\"\n dependencies = [\n- \"cargo_metadata 0.15.0\",\n+ \"cargo_metadata 0.15.3\",\n  \"directories\",\n  \"rustc-build-sysroot\",\n  \"rustc-workspace-hack\",\n@@ -500,7 +501,7 @@ dependencies = [\n  \"tar\",\n  \"termcolor\",\n  \"time 0.3.17\",\n- \"toml_edit\",\n+ \"toml 0.7.2\",\n  \"url\",\n  \"windows-sys 0.45.0\",\n ]\n@@ -540,15 +541,16 @@ dependencies = [\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.15.0\"\n+version = \"0.15.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3abb7553d5b9b8421c6de7cb02606ff15e0c6eea7d8eadd75ef013fd636bec36\"\n+checksum = \"08a1ec454bc3eead8719cb56e15dbbfecdbc14e4b3a3ae4936cc6e31f5fc0d07\"\n dependencies = [\n  \"camino\",\n  \"cargo-platform 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver\",\n  \"serde\",\n  \"serde_json\",\n+ \"thiserror\",\n ]\n \n [[package]]\n@@ -732,6 +734,7 @@ dependencies = [\n name = \"clippy\"\n version = \"0.1.69\"\n dependencies = [\n+ \"clap 4.1.4\",\n  \"clippy_lints\",\n  \"clippy_utils\",\n  \"compiletest_rs\",\n@@ -753,7 +756,7 @@ dependencies = [\n  \"termize\",\n  \"tester\",\n  \"tokio\",\n- \"toml\",\n+ \"toml 0.5.7\",\n  \"walkdir\",\n ]\n \n@@ -762,7 +765,7 @@ name = \"clippy_dev\"\n version = \"0.0.1\"\n dependencies = [\n  \"aho-corasick\",\n- \"clap 3.2.20\",\n+ \"clap 4.1.4\",\n  \"indoc\",\n  \"itertools\",\n  \"opener\",\n@@ -774,7 +777,7 @@ dependencies = [\n name = \"clippy_lints\"\n version = \"0.1.69\"\n dependencies = [\n- \"cargo_metadata 0.14.0\",\n+ \"cargo_metadata 0.15.3\",\n  \"clippy_utils\",\n  \"declare_clippy_lint\",\n  \"if_chain\",\n@@ -787,7 +790,7 @@ dependencies = [\n  \"serde\",\n  \"serde_json\",\n  \"tempfile\",\n- \"toml\",\n+ \"toml 0.5.7\",\n  \"unicode-normalization\",\n  \"unicode-script\",\n  \"url\",\n@@ -851,16 +854,6 @@ dependencies = [\n  \"winapi\",\n ]\n \n-[[package]]\n-name = \"combine\"\n-version = \"4.6.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"35ed6e9d84f0b51a7f52daf1c7d71dd136fd7a3f41a8462b8cdb8c78d920fad4\"\n-dependencies = [\n- \"bytes\",\n- \"memchr\",\n-]\n-\n [[package]]\n name = \"commoncrypto\"\n version = \"0.2.0\"\n@@ -881,9 +874,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.85\"\n+version = \"0.1.87\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"13e81c6cd7ab79f51a0c927d22858d61ad12bd0b3865f0b13ece02a4486aeabb\"\n+checksum = \"f867ce54c09855ccd135ad4a50c777182a0c7af5ff20a8f537617bd648b10d50\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\",\n@@ -893,6 +886,7 @@ dependencies = [\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n+ \"build_helper\",\n  \"colored\",\n  \"diff\",\n  \"getopts\",\n@@ -2033,23 +2027,21 @@ checksum = \"3c1ad908cc71012b7bea4d0c53ba96a8cba9962f048fa68d143376143d863b7a\"\n \n [[package]]\n name = \"icu_list\"\n-version = \"1.0.0\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c40218275f081c4493f190357c5395647b06734c2dc3dcb41cc099a0f60168b1\"\n+checksum = \"01a65ff0cab77c33c7e165c858eaa6e84a09f1e485dd495d9d0ae61083c6f786\"\n dependencies = [\n  \"displaydoc\",\n- \"icu_locid\",\n  \"icu_provider\",\n  \"regex-automata 0.2.0\",\n  \"writeable\",\n- \"zerovec\",\n ]\n \n [[package]]\n name = \"icu_locid\"\n-version = \"1.0.0\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"34b3de5d99a0e275fe6193b9586dbf37364daebc0d39c89b5cf8376a53b789e8\"\n+checksum = \"71d7a98ecb812760b5f077e55a4763edeefa7ccc30d6eb5680a70841ede81928\"\n dependencies = [\n  \"displaydoc\",\n  \"litemap\",\n@@ -2060,9 +2052,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_provider\"\n-version = \"1.0.1\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2f911086e3c521a8a824d4f8bfd87769645ced2f07ff913b521c0d793be07100\"\n+checksum = \"a86816c97bc4e613086497f9479f63e120315e056763e8c4435604f98d21d82d\"\n dependencies = [\n  \"displaydoc\",\n  \"icu_locid\",\n@@ -2076,9 +2068,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_provider_adapters\"\n-version = \"1.0.0\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"980c71d8a91b246ebbb97847178a4b816eea39d1d550c70ee566384555bb6545\"\n+checksum = \"8e89bf33962b24bb48a4a21330c20c9ff17949338ea376360dd9eda2c209dca1\"\n dependencies = [\n  \"icu_locid\",\n  \"icu_provider\",\n@@ -2089,9 +2081,9 @@ dependencies = [\n \n [[package]]\n name = \"icu_provider_macros\"\n-version = \"1.0.0\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"38cf6f5b65cf81f0b4298da647101acbfe6ae0e25263f92bd7a22597e9d6d606\"\n+checksum = \"9ddb07844c2ffc4c28840e799e9e54ff054393cf090740decf25624e9d94b93a\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -2320,15 +2312,6 @@ dependencies = [\n  \"serde_json\",\n ]\n \n-[[package]]\n-name = \"kstring\"\n-version = \"2.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ec3066350882a1cd6d950d055997f379ac37fd39f81cd4d8ed186032eb3c5747\"\n-dependencies = [\n- \"static_assertions\",\n-]\n-\n [[package]]\n name = \"lazy_static\"\n version = \"1.4.0\"\n@@ -2466,9 +2449,9 @@ checksum = \"f051f77a7c8e6957c0696eac88f26b0117e54f52d3fc682ab19397a8812846a4\"\n \n [[package]]\n name = \"litemap\"\n-version = \"0.6.0\"\n+version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f34a3f4798fac63fb48cf277eefa38f94d3443baff555bb98e4f56bc9092368e\"\n+checksum = \"575d8a551c59104b4df91269921e5eab561aa1b77c618dac0414b5d44a4617de\"\n \n [[package]]\n name = \"lld-wrapper\"\n@@ -2578,7 +2561,7 @@ dependencies = [\n  \"serde_json\",\n  \"shlex\",\n  \"tempfile\",\n- \"toml\",\n+ \"toml 0.5.7\",\n  \"topological-sort\",\n ]\n \n@@ -2724,6 +2707,15 @@ dependencies = [\n  \"version_check\",\n ]\n \n+[[package]]\n+name = \"nom8\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ae01545c9c7fc4486ab7debaf2aad7003ac19431791868fb2e8066df97fad2f8\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"normalize-line-endings\"\n version = \"0.3.0\"\n@@ -3762,7 +3754,6 @@ dependencies = [\n  \"icu_locid\",\n  \"icu_provider\",\n  \"icu_provider_adapters\",\n- \"litemap\",\n  \"zerovec\",\n ]\n \n@@ -4004,7 +3995,6 @@ dependencies = [\n  \"rustc_span\",\n  \"tracing\",\n  \"unic-langid\",\n- \"writeable\",\n ]\n \n [[package]]\n@@ -4613,6 +4603,7 @@ name = \"rustc_resolve\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n+ \"pulldown-cmark 0.9.2\",\n  \"rustc_arena\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n@@ -4773,6 +4764,7 @@ checksum = \"8ba09476327c4b70ccefb6180f046ef588c26a24cf5d269a9feba316eb4f029f\"\n name = \"rustc_trait_selection\"\n version = \"0.0.0\"\n dependencies = [\n+ \"itertools\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n@@ -4878,7 +4870,6 @@ dependencies = [\n  \"itertools\",\n  \"minifier\",\n  \"once_cell\",\n- \"pulldown-cmark 0.9.2\",\n  \"rayon\",\n  \"regex\",\n  \"rustdoc-json-types\",\n@@ -4958,7 +4949,7 @@ dependencies = [\n  \"serde_json\",\n  \"term\",\n  \"thiserror\",\n- \"toml\",\n+ \"toml 0.5.7\",\n  \"unicode-segmentation\",\n  \"unicode-width\",\n  \"unicode_categories\",\n@@ -5124,6 +5115,15 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"serde_spanned\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0efd8caf556a6cebd3b285caf480045fcc1ac04f6bd786b09a6f11af30c4fcf4\"\n+dependencies = [\n+ \"serde\",\n+]\n+\n [[package]]\n name = \"sha1\"\n version = \"0.10.5\"\n@@ -5656,9 +5656,9 @@ dependencies = [\n \n [[package]]\n name = \"tinystr\"\n-version = \"0.7.0\"\n+version = \"0.7.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f8aeafdfd935e4a7fe16a91ab711fa52d54df84f9c8f7ca5837a9d1d902ef4c2\"\n+checksum = \"7ac3f5b6856e931e15e07b478e98c8045239829a65f9156d4fa7e7788197a5ef\"\n dependencies = [\n  \"displaydoc\",\n  \"zerovec\",\n@@ -5700,26 +5700,37 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"toml\"\n+version = \"0.7.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f7afcae9e3f0fe2c370fd4657108972cbb2fa9db1b9f84849cefd80741b01cb6\"\n+dependencies = [\n+ \"serde\",\n+ \"serde_spanned\",\n+ \"toml_datetime\",\n+ \"toml_edit\",\n+]\n+\n [[package]]\n name = \"toml_datetime\"\n-version = \"0.5.0\"\n+version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"808b51e57d0ef8f71115d8f3a01e7d3750d01c79cac4b3eda910f4389fdf92fd\"\n+checksum = \"3ab8ed2edee10b50132aed5f331333428b011c99402b5a534154ed15746f9622\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"toml_edit\"\n-version = \"0.15.0\"\n+version = \"0.19.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b1541ba70885967e662f69d31ab3aeca7b1aaecfcd58679590b893e9239c3646\"\n+checksum = \"5e6a7712b49e1775fb9a7b998de6635b299237f48b404dde71704f2e0e7f37e5\"\n dependencies = [\n- \"combine\",\n  \"indexmap\",\n- \"itertools\",\n- \"kstring\",\n+ \"nom8\",\n  \"serde\",\n+ \"serde_spanned\",\n  \"toml_datetime\",\n ]\n \n@@ -5864,7 +5875,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"54ddb6f31025943e2f9d59237f433711c461a43d9415974c3eb3a4902edc1c1f\"\n dependencies = [\n  \"bstr 1.0.1\",\n- \"cargo_metadata 0.15.0\",\n+ \"cargo_metadata 0.15.3\",\n  \"color-eyre\",\n  \"colored\",\n  \"crossbeam-channel\",\n@@ -6337,9 +6348,9 @@ checksum = \"447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd\"\n \n [[package]]\n name = \"writeable\"\n-version = \"0.5.0\"\n+version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f8e6ab4f5da1b24daf2c590cfac801bacb27b15b4f050e84eb60149ea726f06b\"\n+checksum = \"92d74a687e3b9a7a129db0a8c82b4d464eb9c36f5a66ca68572a7e5f1cfdb5bc\"\n \n [[package]]\n name = \"xattr\"\n@@ -6396,9 +6407,9 @@ dependencies = [\n \n [[package]]\n name = \"yoke\"\n-version = \"0.6.2\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1fe1d55ca72c32d573bfbd5cb2f0ca65a497854c44762957a6d3da96041a5184\"\n+checksum = \"222180af14a6b54ef2c33493c1eff77ae95a3687a21b243e752624006fb8f26e\"\n dependencies = [\n  \"serde\",\n  \"stable_deref_trait\",\n@@ -6408,9 +6419,9 @@ dependencies = [\n \n [[package]]\n name = \"yoke-derive\"\n-version = \"0.6.1\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1346e4cd025ae818b88566eac7eb65ab33a994ea55f355c86889af2e7e56b14e\"\n+checksum = \"ca800d73d6b7a7ee54f2608205c98b549fca71c9500c1abcb3abdc7708b4a8cb\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -6447,9 +6458,9 @@ checksum = \"c394b5bd0c6f669e7275d9c20aa90ae064cb22e75a1cad54e1b34088034b149f\"\n \n [[package]]\n name = \"zerovec\"\n-version = \"0.9.0\"\n+version = \"0.9.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b9d919a74c17749ccb17beaf6405562e413cd94e98ba52ca1e64bbe7eefbd8b8\"\n+checksum = \"154df60c74c4a844bc04a53cef4fc18a909d3ea07e19f5225eaba86209da3aa6\"\n dependencies = [\n  \"yoke\",\n  \"zerofrom\",\n@@ -6458,9 +6469,9 @@ dependencies = [\n \n [[package]]\n name = \"zerovec-derive\"\n-version = \"0.9.0\"\n+version = \"0.9.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"490e5f878c2856225e884c35927e7ea6db3c24cdb7229b72542c7526ad7ed49e\"\n+checksum = \"2154cb6e2a748163354165e22c6a555effb09ca2d16334767bf66bb404f2206e\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "00d0171de6dfc7ea7d487038458480cc8563dc7f", "filename": "RELEASES.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,3 +1,10 @@\n+Version 1.67.1 (2023-02-09)\n+===========================\n+\n+- [Fix interoperability with thin archives.](https://github.com/rust-lang/rust/pull/107360)\n+- [Fix an internal error in the compiler build process.](https://github.com/rust-lang/rust/pull/105624)\n+- [Downgrade `clippy::uninlined_format_args` to pedantic.](https://github.com/rust-lang/rust-clippy/pull/10265)\n+\n Version 1.67.0 (2023-01-26)\n ==========================\n "}, {"sha": "54858b52008f9b3d7a2848cf6f5cb8378a6be965", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 71, "deletions": 75, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,11 +1,5 @@\n use super::*;\n-use std::{\n-    borrow::Borrow,\n-    cmp,\n-    fmt::Debug,\n-    iter,\n-    ops::{Bound, Deref},\n-};\n+use std::{borrow::Borrow, cmp, iter, ops::Bound};\n \n #[cfg(feature = \"randomize\")]\n use rand::{seq::SliceRandom, SeedableRng};\n@@ -33,7 +27,7 @@ pub trait LayoutCalculator {\n     fn delay_bug(&self, txt: &str);\n     fn current_data_layout(&self) -> Self::TargetDataLayoutRef;\n \n-    fn scalar_pair<V: Idx>(&self, a: Scalar, b: Scalar) -> LayoutS<V> {\n+    fn scalar_pair(&self, a: Scalar, b: Scalar) -> LayoutS {\n         let dl = self.current_data_layout();\n         let dl = dl.borrow();\n         let b_align = b.align(dl);\n@@ -49,7 +43,7 @@ pub trait LayoutCalculator {\n             .max_by_key(|niche| niche.available(dl));\n \n         LayoutS {\n-            variants: Variants::Single { index: V::new(0) },\n+            variants: Variants::Single { index: VariantIdx::new(0) },\n             fields: FieldsShape::Arbitrary {\n                 offsets: vec![Size::ZERO, b_offset],\n                 memory_index: vec![0, 1],\n@@ -61,13 +55,13 @@ pub trait LayoutCalculator {\n         }\n     }\n \n-    fn univariant<'a, V: Idx, F: Deref<Target = &'a LayoutS<V>> + Debug>(\n+    fn univariant(\n         &self,\n         dl: &TargetDataLayout,\n-        fields: &[F],\n+        fields: &[Layout<'_>],\n         repr: &ReprOptions,\n         kind: StructKind,\n-    ) -> Option<LayoutS<V>> {\n+    ) -> Option<LayoutS> {\n         let pack = repr.pack;\n         let mut align = if pack.is_some() { dl.i8_align } else { dl.aggregate_align };\n         let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();\n@@ -76,17 +70,17 @@ pub trait LayoutCalculator {\n             let end =\n                 if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };\n             let optimizing = &mut inverse_memory_index[..end];\n-            let effective_field_align = |f: &F| {\n+            let effective_field_align = |layout: Layout<'_>| {\n                 if let Some(pack) = pack {\n                     // return the packed alignment in bytes\n-                    f.align.abi.min(pack).bytes()\n+                    layout.align().abi.min(pack).bytes()\n                 } else {\n                     // returns log2(effective-align).\n                     // This is ok since `pack` applies to all fields equally.\n                     // The calculation assumes that size is an integer multiple of align, except for ZSTs.\n                     //\n                     // group [u8; 4] with align-4 or [u8; 6] with align-2 fields\n-                    f.align.abi.bytes().max(f.size.bytes()).trailing_zeros() as u64\n+                    layout.align().abi.bytes().max(layout.size().bytes()).trailing_zeros() as u64\n                 }\n             };\n \n@@ -111,9 +105,9 @@ pub trait LayoutCalculator {\n                             // Place ZSTs first to avoid \"interesting offsets\",\n                             // especially with only one or two non-ZST fields.\n                             // Then place largest alignments first, largest niches within an alignment group last\n-                            let f = &fields[x as usize];\n-                            let niche_size = f.largest_niche.map_or(0, |n| n.available(dl));\n-                            (!f.is_zst(), cmp::Reverse(effective_field_align(f)), niche_size)\n+                            let f = fields[x as usize];\n+                            let niche_size = f.largest_niche().map_or(0, |n| n.available(dl));\n+                            (!f.0.is_zst(), cmp::Reverse(effective_field_align(f)), niche_size)\n                         });\n                     }\n \n@@ -123,8 +117,8 @@ pub trait LayoutCalculator {\n                         // And put the largest niche in an alignment group at the end\n                         // so it can be used as discriminant in jagged enums\n                         optimizing.sort_by_key(|&x| {\n-                            let f = &fields[x as usize];\n-                            let niche_size = f.largest_niche.map_or(0, |n| n.available(dl));\n+                            let f = fields[x as usize];\n+                            let niche_size = f.largest_niche().map_or(0, |n| n.available(dl));\n                             (effective_field_align(f), niche_size)\n                         });\n                     }\n@@ -160,23 +154,23 @@ pub trait LayoutCalculator {\n                 ));\n             }\n \n-            if field.is_unsized() {\n+            if field.0.is_unsized() {\n                 sized = false;\n             }\n \n             // Invariant: offset < dl.obj_size_bound() <= 1<<61\n             let field_align = if let Some(pack) = pack {\n-                field.align.min(AbiAndPrefAlign::new(pack))\n+                field.align().min(AbiAndPrefAlign::new(pack))\n             } else {\n-                field.align\n+                field.align()\n             };\n             offset = offset.align_to(field_align.abi);\n             align = align.max(field_align);\n \n             debug!(\"univariant offset: {:?} field: {:#?}\", offset, field);\n             offsets[i as usize] = offset;\n \n-            if let Some(mut niche) = field.largest_niche {\n+            if let Some(mut niche) = field.largest_niche() {\n                 let available = niche.available(dl);\n                 if available > largest_niche_available {\n                     largest_niche_available = available;\n@@ -185,7 +179,7 @@ pub trait LayoutCalculator {\n                 }\n             }\n \n-            offset = offset.checked_add(field.size, dl)?;\n+            offset = offset.checked_add(field.size(), dl)?;\n         }\n         if let Some(repr_align) = repr.align {\n             align = align.max(AbiAndPrefAlign::new(repr_align));\n@@ -205,24 +199,26 @@ pub trait LayoutCalculator {\n         // Unpack newtype ABIs and find scalar pairs.\n         if sized && size.bytes() > 0 {\n             // All other fields must be ZSTs.\n-            let mut non_zst_fields = fields.iter().enumerate().filter(|&(_, f)| !f.is_zst());\n+            let mut non_zst_fields = fields.iter().enumerate().filter(|&(_, f)| !f.0.is_zst());\n \n             match (non_zst_fields.next(), non_zst_fields.next(), non_zst_fields.next()) {\n                 // We have exactly one non-ZST field.\n                 (Some((i, field)), None, None) => {\n                     // Field fills the struct and it has a scalar or scalar pair ABI.\n-                    if offsets[i].bytes() == 0 && align.abi == field.align.abi && size == field.size\n+                    if offsets[i].bytes() == 0\n+                        && align.abi == field.align().abi\n+                        && size == field.size()\n                     {\n-                        match field.abi {\n+                        match field.abi() {\n                             // For plain scalars, or vectors of them, we can't unpack\n                             // newtypes for `#[repr(C)]`, as that affects C ABIs.\n                             Abi::Scalar(_) | Abi::Vector { .. } if optimize => {\n-                                abi = field.abi;\n+                                abi = field.abi();\n                             }\n                             // But scalar pairs are Rust-specific and get\n                             // treated as aggregates by C ABIs anyway.\n                             Abi::ScalarPair(..) => {\n-                                abi = field.abi;\n+                                abi = field.abi();\n                             }\n                             _ => {}\n                         }\n@@ -231,15 +227,15 @@ pub trait LayoutCalculator {\n \n                 // Two non-ZST fields, and they're both scalars.\n                 (Some((i, a)), Some((j, b)), None) => {\n-                    match (a.abi, b.abi) {\n+                    match (a.abi(), b.abi()) {\n                         (Abi::Scalar(a), Abi::Scalar(b)) => {\n                             // Order by the memory placement, not source order.\n                             let ((i, a), (j, b)) = if offsets[i] < offsets[j] {\n                                 ((i, a), (j, b))\n                             } else {\n                                 ((j, b), (i, a))\n                             };\n-                            let pair = self.scalar_pair::<V>(a, b);\n+                            let pair = self.scalar_pair(a, b);\n                             let pair_offsets = match pair.fields {\n                                 FieldsShape::Arbitrary { ref offsets, ref memory_index } => {\n                                     assert_eq!(memory_index, &[0, 1]);\n@@ -264,11 +260,11 @@ pub trait LayoutCalculator {\n                 _ => {}\n             }\n         }\n-        if fields.iter().any(|f| f.abi.is_uninhabited()) {\n+        if fields.iter().any(|f| f.abi().is_uninhabited()) {\n             abi = Abi::Uninhabited;\n         }\n         Some(LayoutS {\n-            variants: Variants::Single { index: V::new(0) },\n+            variants: Variants::Single { index: VariantIdx::new(0) },\n             fields: FieldsShape::Arbitrary { offsets, memory_index },\n             abi,\n             largest_niche,\n@@ -277,11 +273,11 @@ pub trait LayoutCalculator {\n         })\n     }\n \n-    fn layout_of_never_type<V: Idx>(&self) -> LayoutS<V> {\n+    fn layout_of_never_type(&self) -> LayoutS {\n         let dl = self.current_data_layout();\n         let dl = dl.borrow();\n         LayoutS {\n-            variants: Variants::Single { index: V::new(0) },\n+            variants: Variants::Single { index: VariantIdx::new(0) },\n             fields: FieldsShape::Primitive,\n             abi: Abi::Uninhabited,\n             largest_niche: None,\n@@ -290,18 +286,18 @@ pub trait LayoutCalculator {\n         }\n     }\n \n-    fn layout_of_struct_or_enum<'a, V: Idx, F: Deref<Target = &'a LayoutS<V>> + Debug>(\n+    fn layout_of_struct_or_enum(\n         &self,\n         repr: &ReprOptions,\n-        variants: &IndexVec<V, Vec<F>>,\n+        variants: &IndexVec<VariantIdx, Vec<Layout<'_>>>,\n         is_enum: bool,\n         is_unsafe_cell: bool,\n         scalar_valid_range: (Bound<u128>, Bound<u128>),\n         discr_range_of_repr: impl Fn(i128, i128) -> (Integer, bool),\n-        discriminants: impl Iterator<Item = (V, i128)>,\n+        discriminants: impl Iterator<Item = (VariantIdx, i128)>,\n         niche_optimize_enum: bool,\n         always_sized: bool,\n-    ) -> Option<LayoutS<V>> {\n+    ) -> Option<LayoutS> {\n         let dl = self.current_data_layout();\n         let dl = dl.borrow();\n \n@@ -316,9 +312,9 @@ pub trait LayoutCalculator {\n         // but *not* an encoding of the discriminant (e.g., a tag value).\n         // See issue #49298 for more details on the need to leave space\n         // for non-ZST uninhabited data (mostly partial initialization).\n-        let absent = |fields: &[F]| {\n-            let uninhabited = fields.iter().any(|f| f.abi.is_uninhabited());\n-            let is_zst = fields.iter().all(|f| f.is_zst());\n+        let absent = |fields: &[Layout<'_>]| {\n+            let uninhabited = fields.iter().any(|f| f.abi().is_uninhabited());\n+            let is_zst = fields.iter().all(|f| f.0.is_zst());\n             uninhabited && is_zst\n         };\n         let (present_first, present_second) = {\n@@ -335,7 +331,7 @@ pub trait LayoutCalculator {\n             }\n             // If it's a struct, still compute a layout so that we can still compute the\n             // field offsets.\n-            None => V::new(0),\n+            None => VariantIdx::new(0),\n         };\n \n         let is_struct = !is_enum ||\n@@ -439,12 +435,12 @@ pub trait LayoutCalculator {\n         // variant layouts, so we can't store them in the\n         // overall LayoutS. Store the overall LayoutS\n         // and the variant LayoutSs here until then.\n-        struct TmpLayout<V: Idx> {\n-            layout: LayoutS<V>,\n-            variants: IndexVec<V, LayoutS<V>>,\n+        struct TmpLayout {\n+            layout: LayoutS,\n+            variants: IndexVec<VariantIdx, LayoutS>,\n         }\n \n-        let calculate_niche_filling_layout = || -> Option<TmpLayout<V>> {\n+        let calculate_niche_filling_layout = || -> Option<TmpLayout> {\n             if niche_optimize_enum {\n                 return None;\n             }\n@@ -464,15 +460,16 @@ pub trait LayoutCalculator {\n \n                     Some(st)\n                 })\n-                .collect::<Option<IndexVec<V, _>>>()?;\n+                .collect::<Option<IndexVec<VariantIdx, _>>>()?;\n \n             let largest_variant_index = variant_layouts\n                 .iter_enumerated()\n                 .max_by_key(|(_i, layout)| layout.size.bytes())\n                 .map(|(i, _layout)| i)?;\n \n-            let all_indices = (0..=variants.len() - 1).map(V::new);\n-            let needs_disc = |index: V| index != largest_variant_index && !absent(&variants[index]);\n+            let all_indices = (0..=variants.len() - 1).map(VariantIdx::new);\n+            let needs_disc =\n+                |index: VariantIdx| index != largest_variant_index && !absent(&variants[index]);\n             let niche_variants = all_indices.clone().find(|v| needs_disc(*v)).unwrap().index()\n                 ..=all_indices.rev().find(|v| needs_disc(*v)).unwrap().index();\n \n@@ -482,7 +479,7 @@ pub trait LayoutCalculator {\n             let (field_index, niche, (niche_start, niche_scalar)) = variants[largest_variant_index]\n                 .iter()\n                 .enumerate()\n-                .filter_map(|(j, field)| Some((j, field.largest_niche?)))\n+                .filter_map(|(j, field)| Some((j, field.largest_niche()?)))\n                 .max_by_key(|(_, niche)| niche.available(dl))\n                 .and_then(|(j, niche)| Some((j, niche, niche.reserve(dl, count)?)))?;\n             let niche_offset =\n@@ -514,7 +511,7 @@ pub trait LayoutCalculator {\n                 match layout.fields {\n                     FieldsShape::Arbitrary { ref mut offsets, .. } => {\n                         for (j, offset) in offsets.iter_mut().enumerate() {\n-                            if !variants[i][j].is_zst() {\n+                            if !variants[i][j].0.is_zst() {\n                                 *offset += this_offset;\n                             }\n                         }\n@@ -572,8 +569,8 @@ pub trait LayoutCalculator {\n                     tag: niche_scalar,\n                     tag_encoding: TagEncoding::Niche {\n                         untagged_variant: largest_variant_index,\n-                        niche_variants: (V::new(*niche_variants.start())\n-                            ..=V::new(*niche_variants.end())),\n+                        niche_variants: (VariantIdx::new(*niche_variants.start())\n+                            ..=VariantIdx::new(*niche_variants.end())),\n                         niche_start,\n                     },\n                     tag_field: 0,\n@@ -598,7 +595,7 @@ pub trait LayoutCalculator {\n         let discr_type = repr.discr_type();\n         let bits = Integer::from_attr(dl, discr_type).size().bits();\n         for (i, mut val) in discriminants {\n-            if variants[i].iter().any(|f| f.abi.is_uninhabited()) {\n+            if variants[i].iter().any(|f| f.abi().is_uninhabited()) {\n                 continue;\n             }\n             if discr_type.is_signed() {\n@@ -636,7 +633,7 @@ pub trait LayoutCalculator {\n         if repr.c() {\n             for fields in variants {\n                 for field in fields {\n-                    prefix_align = prefix_align.max(field.align.abi);\n+                    prefix_align = prefix_align.max(field.align().abi);\n                 }\n             }\n         }\n@@ -655,16 +652,16 @@ pub trait LayoutCalculator {\n                 // Find the first field we can't move later\n                 // to make room for a larger discriminant.\n                 for field in st.fields.index_by_increasing_offset().map(|j| &field_layouts[j]) {\n-                    if !field.is_zst() || field.align.abi.bytes() != 1 {\n-                        start_align = start_align.min(field.align.abi);\n+                    if !field.0.is_zst() || field.align().abi.bytes() != 1 {\n+                        start_align = start_align.min(field.align().abi);\n                         break;\n                     }\n                 }\n                 size = cmp::max(size, st.size);\n                 align = align.max(st.align);\n                 Some(st)\n             })\n-            .collect::<Option<IndexVec<V, _>>>()?;\n+            .collect::<Option<IndexVec<VariantIdx, _>>>()?;\n \n         // Align the maximum variant size to the largest alignment.\n         size = size.align_to(align.abi);\n@@ -759,7 +756,7 @@ pub trait LayoutCalculator {\n                 let FieldsShape::Arbitrary { ref offsets, .. } = layout_variant.fields else {\n                     panic!();\n                 };\n-                let mut fields = iter::zip(field_layouts, offsets).filter(|p| !p.0.is_zst());\n+                let mut fields = iter::zip(field_layouts, offsets).filter(|p| !p.0.0.is_zst());\n                 let (field, offset) = match (fields.next(), fields.next()) {\n                     (None, None) => {\n                         common_prim_initialized_in_all_variants = false;\n@@ -771,7 +768,7 @@ pub trait LayoutCalculator {\n                         break;\n                     }\n                 };\n-                let prim = match field.abi {\n+                let prim = match field.abi() {\n                     Abi::Scalar(scalar) => {\n                         common_prim_initialized_in_all_variants &=\n                             matches!(scalar, Scalar::Initialized { .. });\n@@ -802,7 +799,7 @@ pub trait LayoutCalculator {\n                     // Common prim might be uninit.\n                     Scalar::Union { value: prim }\n                 };\n-                let pair = self.scalar_pair::<V>(tag, prim_scalar);\n+                let pair = self.scalar_pair(tag, prim_scalar);\n                 let pair_offsets = match pair.fields {\n                     FieldsShape::Arbitrary { ref offsets, ref memory_index } => {\n                         assert_eq!(memory_index, &[0, 1]);\n@@ -862,9 +859,8 @@ pub trait LayoutCalculator {\n                 // pick the layout with the larger niche; otherwise,\n                 // pick tagged as it has simpler codegen.\n                 use cmp::Ordering::*;\n-                let niche_size = |tmp_l: &TmpLayout<V>| {\n-                    tmp_l.layout.largest_niche.map_or(0, |n| n.available(dl))\n-                };\n+                let niche_size =\n+                    |tmp_l: &TmpLayout| tmp_l.layout.largest_niche.map_or(0, |n| n.available(dl));\n                 match (tl.layout.size.cmp(&nl.layout.size), niche_size(&tl).cmp(&niche_size(&nl))) {\n                     (Greater, _) => nl,\n                     (Equal, Less) => nl,\n@@ -884,11 +880,11 @@ pub trait LayoutCalculator {\n         Some(best_layout.layout)\n     }\n \n-    fn layout_of_union<'a, V: Idx, F: Deref<Target = &'a LayoutS<V>> + Debug>(\n+    fn layout_of_union(\n         &self,\n         repr: &ReprOptions,\n-        variants: &IndexVec<V, Vec<F>>,\n-    ) -> Option<LayoutS<V>> {\n+        variants: &IndexVec<VariantIdx, Vec<Layout<'_>>>,\n+    ) -> Option<LayoutS> {\n         let dl = self.current_data_layout();\n         let dl = dl.borrow();\n         let mut align = if repr.pack.is_some() { dl.i8_align } else { dl.aggregate_align };\n@@ -900,15 +896,15 @@ pub trait LayoutCalculator {\n         let optimize = !repr.inhibit_union_abi_opt();\n         let mut size = Size::ZERO;\n         let mut abi = Abi::Aggregate { sized: true };\n-        let index = V::new(0);\n+        let index = VariantIdx::new(0);\n         for field in &variants[index] {\n-            assert!(field.is_sized());\n-            align = align.max(field.align);\n+            assert!(field.0.is_sized());\n+            align = align.max(field.align());\n \n             // If all non-ZST fields have the same ABI, forward this ABI\n-            if optimize && !field.is_zst() {\n+            if optimize && !field.0.is_zst() {\n                 // Discard valid range information and allow undef\n-                let field_abi = match field.abi {\n+                let field_abi = match field.abi() {\n                     Abi::Scalar(x) => Abi::Scalar(x.to_union()),\n                     Abi::ScalarPair(x, y) => Abi::ScalarPair(x.to_union(), y.to_union()),\n                     Abi::Vector { element: x, count } => {\n@@ -926,7 +922,7 @@ pub trait LayoutCalculator {\n                 }\n             }\n \n-            size = cmp::max(size, field.size);\n+            size = cmp::max(size, field.size());\n         }\n \n         if let Some(pack) = repr.pack {"}, {"sha": "c88a60c62b9df7de4913c4787358b751eeaf7755", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -8,6 +8,7 @@ use std::ops::{Add, AddAssign, Mul, RangeInclusive, Sub};\n use std::str::FromStr;\n \n use bitflags::bitflags;\n+use rustc_data_structures::intern::Interned;\n #[cfg(feature = \"nightly\")]\n use rustc_data_structures::stable_hasher::StableOrd;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -1250,9 +1251,9 @@ impl Abi {\n \n #[derive(PartialEq, Eq, Hash, Clone, Debug)]\n #[cfg_attr(feature = \"nightly\", derive(HashStable_Generic))]\n-pub enum Variants<V: Idx> {\n+pub enum Variants {\n     /// Single enum variants, structs/tuples, unions, and all non-ADTs.\n-    Single { index: V },\n+    Single { index: VariantIdx },\n \n     /// Enum-likes with more than one inhabited variant: each variant comes with\n     /// a *discriminant* (usually the same as the variant index but the user can\n@@ -1262,15 +1263,15 @@ pub enum Variants<V: Idx> {\n     /// For enums, the tag is the sole field of the layout.\n     Multiple {\n         tag: Scalar,\n-        tag_encoding: TagEncoding<V>,\n+        tag_encoding: TagEncoding,\n         tag_field: usize,\n-        variants: IndexVec<V, LayoutS<V>>,\n+        variants: IndexVec<VariantIdx, LayoutS>,\n     },\n }\n \n #[derive(PartialEq, Eq, Hash, Clone, Debug)]\n #[cfg_attr(feature = \"nightly\", derive(HashStable_Generic))]\n-pub enum TagEncoding<V: Idx> {\n+pub enum TagEncoding {\n     /// The tag directly stores the discriminant, but possibly with a smaller layout\n     /// (so converting the tag to the discriminant can require sign extension).\n     Direct,\n@@ -1285,7 +1286,11 @@ pub enum TagEncoding<V: Idx> {\n     /// For example, `Option<(usize, &T)>`  is represented such that\n     /// `None` has a null pointer for the second tuple field, and\n     /// `Some` is the identity function (with a non-null reference).\n-    Niche { untagged_variant: V, niche_variants: RangeInclusive<V>, niche_start: u128 },\n+    Niche {\n+        untagged_variant: VariantIdx,\n+        niche_variants: RangeInclusive<VariantIdx>,\n+        niche_start: u128,\n+    },\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n@@ -1372,9 +1377,14 @@ impl Niche {\n     }\n }\n \n+rustc_index::newtype_index! {\n+    #[derive(HashStable_Generic)]\n+    pub struct VariantIdx {}\n+}\n+\n #[derive(PartialEq, Eq, Hash, Clone)]\n #[cfg_attr(feature = \"nightly\", derive(HashStable_Generic))]\n-pub struct LayoutS<V: Idx> {\n+pub struct LayoutS {\n     /// Says where the fields are located within the layout.\n     pub fields: FieldsShape,\n \n@@ -1385,7 +1395,7 @@ pub struct LayoutS<V: Idx> {\n     ///\n     /// To access all fields of this layout, both `fields` and the fields of the active variant\n     /// must be taken into account.\n-    pub variants: Variants<V>,\n+    pub variants: Variants,\n \n     /// The `abi` defines how this data is passed between functions, and it defines\n     /// value restrictions via `valid_range`.\n@@ -1404,13 +1414,13 @@ pub struct LayoutS<V: Idx> {\n     pub size: Size,\n }\n \n-impl<V: Idx> LayoutS<V> {\n+impl LayoutS {\n     pub fn scalar<C: HasDataLayout>(cx: &C, scalar: Scalar) -> Self {\n         let largest_niche = Niche::from_scalar(cx, Size::ZERO, scalar);\n         let size = scalar.size(cx);\n         let align = scalar.align(cx);\n         LayoutS {\n-            variants: Variants::Single { index: V::new(0) },\n+            variants: Variants::Single { index: VariantIdx::new(0) },\n             fields: FieldsShape::Primitive,\n             abi: Abi::Scalar(scalar),\n             largest_niche,\n@@ -1420,7 +1430,7 @@ impl<V: Idx> LayoutS<V> {\n     }\n }\n \n-impl<V: Idx> fmt::Debug for LayoutS<V> {\n+impl fmt::Debug for LayoutS {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // This is how `Layout` used to print before it become\n         // `Interned<LayoutS>`. We print it like this to avoid having to update\n@@ -1437,6 +1447,43 @@ impl<V: Idx> fmt::Debug for LayoutS<V> {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Hash, HashStable_Generic)]\n+#[rustc_pass_by_value]\n+pub struct Layout<'a>(pub Interned<'a, LayoutS>);\n+\n+impl<'a> fmt::Debug for Layout<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // See comment on `<LayoutS as Debug>::fmt` above.\n+        self.0.0.fmt(f)\n+    }\n+}\n+\n+impl<'a> Layout<'a> {\n+    pub fn fields(self) -> &'a FieldsShape {\n+        &self.0.0.fields\n+    }\n+\n+    pub fn variants(self) -> &'a Variants {\n+        &self.0.0.variants\n+    }\n+\n+    pub fn abi(self) -> Abi {\n+        self.0.0.abi\n+    }\n+\n+    pub fn largest_niche(self) -> Option<Niche> {\n+        self.0.0.largest_niche\n+    }\n+\n+    pub fn align(self) -> AbiAndPrefAlign {\n+        self.0.0.align\n+    }\n+\n+    pub fn size(self) -> Size {\n+        self.0.0.size\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum PointerKind {\n     /// Shared reference. `frozen` indicates the absence of any `UnsafeCell`.\n@@ -1464,7 +1511,7 @@ pub enum InitKind {\n     UninitMitigated0x01Fill,\n }\n \n-impl<V: Idx> LayoutS<V> {\n+impl LayoutS {\n     /// Returns `true` if the layout corresponds to an unsized type.\n     pub fn is_unsized(&self) -> bool {\n         self.abi.is_unsized()"}, {"sha": "e75d2f77dbbad8eb9491e338e76d5258a3461d9f", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 311, "deletions": 315, "changes": 626, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -40,84 +40,65 @@ impl MarkedAttrs {\n     }\n }\n \n-impl NestedMetaItem {\n-    /// Returns the `MetaItem` if `self` is a `NestedMetaItem::MetaItem`.\n-    pub fn meta_item(&self) -> Option<&MetaItem> {\n-        match self {\n-            NestedMetaItem::MetaItem(item) => Some(item),\n-            _ => None,\n-        }\n-    }\n+pub struct AttrIdGenerator(WorkerLocal<Cell<u32>>);\n \n-    /// Returns the `MetaItemLit` if `self` is a `NestedMetaItem::Literal`s.\n-    pub fn lit(&self) -> Option<&MetaItemLit> {\n-        match self {\n-            NestedMetaItem::Lit(lit) => Some(lit),\n-            _ => None,\n-        }\n-    }\n+#[cfg(debug_assertions)]\n+static MAX_ATTR_ID: AtomicU32 = AtomicU32::new(u32::MAX);\n \n-    /// Returns `true` if this list item is a MetaItem with a name of `name`.\n-    pub fn has_name(&self, name: Symbol) -> bool {\n-        self.meta_item().map_or(false, |meta_item| meta_item.has_name(name))\n-    }\n+impl AttrIdGenerator {\n+    pub fn new() -> Self {\n+        // We use `(index as u32).reverse_bits()` to initialize the\n+        // starting value of AttrId in each worker thread.\n+        // The `index` is the index of the worker thread.\n+        // This ensures that the AttrId generated in each thread is unique.\n+        AttrIdGenerator(WorkerLocal::new(|index| {\n+            let index: u32 = index.try_into().unwrap();\n \n-    /// For a single-segment meta item, returns its name; otherwise, returns `None`.\n-    pub fn ident(&self) -> Option<Ident> {\n-        self.meta_item().and_then(|meta_item| meta_item.ident())\n-    }\n-    pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or_else(Ident::empty).name\n-    }\n+            #[cfg(debug_assertions)]\n+            {\n+                let max_id = ((index + 1).next_power_of_two() - 1).bitxor(u32::MAX).reverse_bits();\n+                MAX_ATTR_ID.fetch_min(max_id, Ordering::Release);\n+            }\n \n-    /// Gets the string value if `self` is a `MetaItem` and the `MetaItem` is a\n-    /// `MetaItemKind::NameValue` variant containing a string, otherwise `None`.\n-    pub fn value_str(&self) -> Option<Symbol> {\n-        self.meta_item().and_then(|meta_item| meta_item.value_str())\n+            Cell::new(index.reverse_bits())\n+        }))\n     }\n \n-    /// Returns a name and single literal value tuple of the `MetaItem`.\n-    pub fn name_value_literal(&self) -> Option<(Symbol, &MetaItemLit)> {\n-        self.meta_item().and_then(|meta_item| {\n-            meta_item.meta_item_list().and_then(|meta_item_list| {\n-                if meta_item_list.len() == 1\n-                    && let Some(ident) = meta_item.ident()\n-                    && let Some(lit) = meta_item_list[0].lit()\n-                {\n-                    return Some((ident.name, lit));\n-                }\n-                None\n-            })\n-        })\n-    }\n+    pub fn mk_attr_id(&self) -> AttrId {\n+        let id = self.0.get();\n \n-    /// Gets a list of inner meta items from a list `MetaItem` type.\n-    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n-        self.meta_item().and_then(|meta_item| meta_item.meta_item_list())\n-    }\n+        // Ensure the assigned attr_id does not overlap the bits\n+        // representing the number of threads.\n+        #[cfg(debug_assertions)]\n+        assert!(id <= MAX_ATTR_ID.load(Ordering::Acquire));\n \n-    /// Returns `true` if the variant is `MetaItem`.\n-    pub fn is_meta_item(&self) -> bool {\n-        self.meta_item().is_some()\n+        self.0.set(id + 1);\n+        AttrId::from_u32(id)\n     }\n+}\n \n-    /// Returns `true` if `self` is a `MetaItem` and the meta item is a word.\n-    pub fn is_word(&self) -> bool {\n-        self.meta_item().map_or(false, |meta_item| meta_item.is_word())\n+impl Attribute {\n+    pub fn get_normal_item(&self) -> &AttrItem {\n+        match &self.kind {\n+            AttrKind::Normal(normal) => &normal.item,\n+            AttrKind::DocComment(..) => panic!(\"unexpected doc comment\"),\n+        }\n     }\n \n-    /// See [`MetaItem::name_value_literal_span`].\n-    pub fn name_value_literal_span(&self) -> Option<Span> {\n-        self.meta_item()?.name_value_literal_span()\n+    pub fn unwrap_normal_item(self) -> AttrItem {\n+        match self.kind {\n+            AttrKind::Normal(normal) => normal.into_inner().item,\n+            AttrKind::DocComment(..) => panic!(\"unexpected doc comment\"),\n+        }\n     }\n-}\n \n-impl Attribute {\n-    #[inline]\n-    pub fn has_name(&self, name: Symbol) -> bool {\n-        match &self.kind {\n-            AttrKind::Normal(normal) => normal.item.path == name,\n-            AttrKind::DocComment(..) => false,\n+    /// Returns `true` if it is a sugared doc comment (`///` or `//!` for example).\n+    /// So `#[doc = \"doc\"]` (which is a doc comment) and `#[doc(...)]` (which is not\n+    /// a doc comment) will return `false`.\n+    pub fn is_doc_comment(&self) -> bool {\n+        match self.kind {\n+            AttrKind::Normal(..) => false,\n+            AttrKind::DocComment(..) => true,\n         }\n     }\n \n@@ -138,17 +119,11 @@ impl Attribute {\n         self.ident().unwrap_or_else(Ident::empty).name\n     }\n \n-    pub fn value_str(&self) -> Option<Symbol> {\n-        match &self.kind {\n-            AttrKind::Normal(normal) => normal.item.value_str(),\n-            AttrKind::DocComment(..) => None,\n-        }\n-    }\n-\n-    pub fn meta_item_list(&self) -> Option<Vec<NestedMetaItem>> {\n+    #[inline]\n+    pub fn has_name(&self, name: Symbol) -> bool {\n         match &self.kind {\n-            AttrKind::Normal(normal) => normal.item.meta_item_list(),\n-            AttrKind::DocComment(..) => None,\n+            AttrKind::Normal(normal) => normal.item.path == name,\n+            AttrKind::DocComment(..) => false,\n         }\n     }\n \n@@ -159,112 +134,18 @@ impl Attribute {\n             false\n         }\n     }\n-}\n \n-impl MetaItem {\n-    /// For a single-segment meta item, returns its name; otherwise, returns `None`.\n-    pub fn ident(&self) -> Option<Ident> {\n-        if self.path.segments.len() == 1 { Some(self.path.segments[0].ident) } else { None }\n-    }\n-    pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or_else(Ident::empty).name\n-    }\n-\n-    /// ```text\n-    /// Example:\n-    ///     #[attribute(name = \"value\")]\n-    ///                 ^^^^^^^^^^^^^^\n-    /// ```\n-    pub fn name_value_literal(&self) -> Option<&MetaItemLit> {\n+    pub fn meta_item_list(&self) -> Option<Vec<NestedMetaItem>> {\n         match &self.kind {\n-            MetaItemKind::NameValue(v) => Some(v),\n-            _ => None,\n+            AttrKind::Normal(normal) => normal.item.meta_item_list(),\n+            AttrKind::DocComment(..) => None,\n         }\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n-        self.kind.value_str()\n-    }\n-\n-    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n         match &self.kind {\n-            MetaItemKind::List(l) => Some(&**l),\n-            _ => None,\n-        }\n-    }\n-\n-    pub fn is_word(&self) -> bool {\n-        matches!(self.kind, MetaItemKind::Word)\n-    }\n-\n-    pub fn has_name(&self, name: Symbol) -> bool {\n-        self.path == name\n-    }\n-\n-    /// This is used in case you want the value span instead of the whole attribute. Example:\n-    ///\n-    /// ```text\n-    /// #[doc(alias = \"foo\")]\n-    /// ```\n-    ///\n-    /// In here, it'll return a span for `\"foo\"`.\n-    pub fn name_value_literal_span(&self) -> Option<Span> {\n-        Some(self.name_value_literal()?.span)\n-    }\n-}\n-\n-impl AttrArgsEq {\n-    fn value_str(&self) -> Option<Symbol> {\n-        match self {\n-            AttrArgsEq::Ast(expr) => match expr.kind {\n-                ExprKind::Lit(token_lit) => {\n-                    LitKind::from_token_lit(token_lit).ok().and_then(|lit| lit.str())\n-                }\n-                _ => None,\n-            },\n-            AttrArgsEq::Hir(lit) => lit.kind.str(),\n-        }\n-    }\n-}\n-\n-impl AttrItem {\n-    pub fn span(&self) -> Span {\n-        self.args.span().map_or(self.path.span, |args_span| self.path.span.to(args_span))\n-    }\n-\n-    pub fn meta(&self, span: Span) -> Option<MetaItem> {\n-        Some(MetaItem { path: self.path.clone(), kind: self.meta_kind()?, span })\n-    }\n-\n-    pub fn meta_kind(&self) -> Option<MetaItemKind> {\n-        MetaItemKind::from_attr_args(&self.args)\n-    }\n-\n-    fn meta_item_list(&self) -> Option<Vec<NestedMetaItem>> {\n-        match &self.args {\n-            AttrArgs::Delimited(args) if args.delim == MacDelimiter::Parenthesis => {\n-                MetaItemKind::list_from_tokens(args.tokens.clone())\n-            }\n-            AttrArgs::Delimited(_) | AttrArgs::Eq(..) | AttrArgs::Empty => None,\n-        }\n-    }\n-\n-    fn value_str(&self) -> Option<Symbol> {\n-        match &self.args {\n-            AttrArgs::Eq(_, args) => args.value_str(),\n-            AttrArgs::Delimited(_) | AttrArgs::Empty => None,\n-        }\n-    }\n-}\n-\n-impl Attribute {\n-    /// Returns `true` if it is a sugared doc comment (`///` or `//!` for example).\n-    /// So `#[doc = \"doc\"]` (which is a doc comment) and `#[doc(...)]` (which is not\n-    /// a doc comment) will return `false`.\n-    pub fn is_doc_comment(&self) -> bool {\n-        match self.kind {\n-            AttrKind::Normal(..) => false,\n-            AttrKind::DocComment(..) => true,\n+            AttrKind::Normal(normal) => normal.item.value_str(),\n+            AttrKind::DocComment(..) => None,\n         }\n     }\n \n@@ -299,20 +180,6 @@ impl Attribute {\n         self.doc_str().map_or(false, |s| comments::may_have_doc_links(s.as_str()))\n     }\n \n-    pub fn get_normal_item(&self) -> &AttrItem {\n-        match &self.kind {\n-            AttrKind::Normal(normal) => &normal.item,\n-            AttrKind::DocComment(..) => panic!(\"unexpected doc comment\"),\n-        }\n-    }\n-\n-    pub fn unwrap_normal_item(self) -> AttrItem {\n-        match self.kind {\n-            AttrKind::Normal(normal) => normal.into_inner().item,\n-            AttrKind::DocComment(..) => panic!(\"unexpected doc comment\"),\n-        }\n-    }\n-\n     /// Extracts the MetaItem from inside this Attribute.\n     pub fn meta(&self) -> Option<MetaItem> {\n         match &self.kind {\n@@ -344,130 +211,102 @@ impl Attribute {\n     }\n }\n \n-pub struct AttrIdGenerator(WorkerLocal<Cell<u32>>);\n-\n-#[cfg(debug_assertions)]\n-static MAX_ATTR_ID: AtomicU32 = AtomicU32::new(u32::MAX);\n-\n-impl AttrIdGenerator {\n-    pub fn new() -> Self {\n-        // We use `(index as u32).reverse_bits()` to initialize the\n-        // starting value of AttrId in each worker thread.\n-        // The `index` is the index of the worker thread.\n-        // This ensures that the AttrId generated in each thread is unique.\n-        AttrIdGenerator(WorkerLocal::new(|index| {\n-            let index: u32 = index.try_into().unwrap();\n+impl AttrItem {\n+    pub fn span(&self) -> Span {\n+        self.args.span().map_or(self.path.span, |args_span| self.path.span.to(args_span))\n+    }\n \n-            #[cfg(debug_assertions)]\n-            {\n-                let max_id = ((index + 1).next_power_of_two() - 1).bitxor(u32::MAX).reverse_bits();\n-                MAX_ATTR_ID.fetch_min(max_id, Ordering::Release);\n+    fn meta_item_list(&self) -> Option<Vec<NestedMetaItem>> {\n+        match &self.args {\n+            AttrArgs::Delimited(args) if args.delim == MacDelimiter::Parenthesis => {\n+                MetaItemKind::list_from_tokens(args.tokens.clone())\n             }\n-\n-            Cell::new(index.reverse_bits())\n-        }))\n+            AttrArgs::Delimited(_) | AttrArgs::Eq(..) | AttrArgs::Empty => None,\n+        }\n     }\n \n-    pub fn mk_attr_id(&self) -> AttrId {\n-        let id = self.0.get();\n-\n-        // Ensure the assigned attr_id does not overlap the bits\n-        // representing the number of threads.\n-        #[cfg(debug_assertions)]\n-        assert!(id <= MAX_ATTR_ID.load(Ordering::Acquire));\n-\n-        self.0.set(id + 1);\n-        AttrId::from_u32(id)\n+    fn value_str(&self) -> Option<Symbol> {\n+        match &self.args {\n+            AttrArgs::Eq(_, args) => args.value_str(),\n+            AttrArgs::Delimited(_) | AttrArgs::Empty => None,\n+        }\n     }\n-}\n \n-pub fn mk_attr(\n-    g: &AttrIdGenerator,\n-    style: AttrStyle,\n-    path: Path,\n-    args: AttrArgs,\n-    span: Span,\n-) -> Attribute {\n-    mk_attr_from_item(g, AttrItem { path, args, tokens: None }, None, style, span)\n-}\n-\n-pub fn mk_attr_from_item(\n-    g: &AttrIdGenerator,\n-    item: AttrItem,\n-    tokens: Option<LazyAttrTokenStream>,\n-    style: AttrStyle,\n-    span: Span,\n-) -> Attribute {\n-    Attribute {\n-        kind: AttrKind::Normal(P(NormalAttr { item, tokens })),\n-        id: g.mk_attr_id(),\n-        style,\n-        span,\n+    pub fn meta(&self, span: Span) -> Option<MetaItem> {\n+        Some(MetaItem { path: self.path.clone(), kind: self.meta_kind()?, span })\n     }\n-}\n \n-pub fn mk_attr_word(g: &AttrIdGenerator, style: AttrStyle, name: Symbol, span: Span) -> Attribute {\n-    let path = Path::from_ident(Ident::new(name, span));\n-    let args = AttrArgs::Empty;\n-    mk_attr(g, style, path, args, span)\n-}\n-\n-pub fn mk_attr_name_value_str(\n-    g: &AttrIdGenerator,\n-    style: AttrStyle,\n-    name: Symbol,\n-    val: Symbol,\n-    span: Span,\n-) -> Attribute {\n-    let lit = token::Lit::new(token::Str, escape_string_symbol(val), None);\n-    let expr = P(Expr {\n-        id: DUMMY_NODE_ID,\n-        kind: ExprKind::Lit(lit),\n-        span,\n-        attrs: AttrVec::new(),\n-        tokens: None,\n-    });\n-    let path = Path::from_ident(Ident::new(name, span));\n-    let args = AttrArgs::Eq(span, AttrArgsEq::Ast(expr));\n-    mk_attr(g, style, path, args, span)\n+    pub fn meta_kind(&self) -> Option<MetaItemKind> {\n+        MetaItemKind::from_attr_args(&self.args)\n+    }\n }\n \n-pub fn mk_attr_nested_word(\n-    g: &AttrIdGenerator,\n-    style: AttrStyle,\n-    outer: Symbol,\n-    inner: Symbol,\n-    span: Span,\n-) -> Attribute {\n-    let inner_tokens = TokenStream::new(vec![TokenTree::Token(\n-        Token::from_ast_ident(Ident::new(inner, span)),\n-        Spacing::Alone,\n-    )]);\n-    let outer_ident = Ident::new(outer, span);\n-    let path = Path::from_ident(outer_ident);\n-    let attr_args = AttrArgs::Delimited(DelimArgs {\n-        dspan: DelimSpan::from_single(span),\n-        delim: MacDelimiter::Parenthesis,\n-        tokens: inner_tokens,\n-    });\n-    mk_attr(g, style, path, attr_args, span)\n+impl AttrArgsEq {\n+    fn value_str(&self) -> Option<Symbol> {\n+        match self {\n+            AttrArgsEq::Ast(expr) => match expr.kind {\n+                ExprKind::Lit(token_lit) => {\n+                    LitKind::from_token_lit(token_lit).ok().and_then(|lit| lit.str())\n+                }\n+                _ => None,\n+            },\n+            AttrArgsEq::Hir(lit) => lit.kind.str(),\n+        }\n+    }\n }\n \n-pub fn mk_doc_comment(\n-    g: &AttrIdGenerator,\n-    comment_kind: CommentKind,\n-    style: AttrStyle,\n-    data: Symbol,\n-    span: Span,\n-) -> Attribute {\n-    Attribute { kind: AttrKind::DocComment(comment_kind, data), id: g.mk_attr_id(), style, span }\n-}\n+impl MetaItem {\n+    /// For a single-segment meta item, returns its name; otherwise, returns `None`.\n+    pub fn ident(&self) -> Option<Ident> {\n+        if self.path.segments.len() == 1 { Some(self.path.segments[0].ident) } else { None }\n+    }\n \n-pub fn list_contains_name(items: &[NestedMetaItem], name: Symbol) -> bool {\n-    items.iter().any(|item| item.has_name(name))\n-}\n+    pub fn name_or_empty(&self) -> Symbol {\n+        self.ident().unwrap_or_else(Ident::empty).name\n+    }\n+\n+    pub fn has_name(&self, name: Symbol) -> bool {\n+        self.path == name\n+    }\n+\n+    pub fn is_word(&self) -> bool {\n+        matches!(self.kind, MetaItemKind::Word)\n+    }\n+\n+    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n+        match &self.kind {\n+            MetaItemKind::List(l) => Some(&**l),\n+            _ => None,\n+        }\n+    }\n+\n+    /// ```text\n+    /// Example:\n+    ///     #[attribute(name = \"value\")]\n+    ///                 ^^^^^^^^^^^^^^\n+    /// ```\n+    pub fn name_value_literal(&self) -> Option<&MetaItemLit> {\n+        match &self.kind {\n+            MetaItemKind::NameValue(v) => Some(v),\n+            _ => None,\n+        }\n+    }\n+\n+    /// This is used in case you want the value span instead of the whole attribute. Example:\n+    ///\n+    /// ```text\n+    /// #[doc(alias = \"foo\")]\n+    /// ```\n+    ///\n+    /// In here, it'll return a span for `\"foo\"`.\n+    pub fn name_value_literal_span(&self) -> Option<Span> {\n+        Some(self.name_value_literal()?.span)\n+    }\n+\n+    pub fn value_str(&self) -> Option<Symbol> {\n+        self.kind.value_str()\n+    }\n \n-impl MetaItem {\n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItem>\n     where\n         I: Iterator<Item = TokenTree>,\n@@ -564,6 +403,24 @@ impl MetaItemKind {\n         }\n     }\n \n+    fn from_tokens(\n+        tokens: &mut iter::Peekable<impl Iterator<Item = TokenTree>>,\n+    ) -> Option<MetaItemKind> {\n+        match tokens.peek() {\n+            Some(TokenTree::Delimited(_, Delimiter::Parenthesis, inner_tokens)) => {\n+                let inner_tokens = inner_tokens.clone();\n+                tokens.next();\n+                MetaItemKind::list_from_tokens(inner_tokens).map(MetaItemKind::List)\n+            }\n+            Some(TokenTree::Delimited(..)) => None,\n+            Some(TokenTree::Token(Token { kind: token::Eq, .. }, _)) => {\n+                tokens.next();\n+                MetaItemKind::name_value_from_tokens(tokens)\n+            }\n+            _ => Some(MetaItemKind::Word),\n+        }\n+    }\n+\n     fn from_attr_args(args: &AttrArgs) -> Option<MetaItemKind> {\n         match args {\n             AttrArgs::Empty => Some(MetaItemKind::Word),\n@@ -585,24 +442,6 @@ impl MetaItemKind {\n             AttrArgs::Eq(_, AttrArgsEq::Hir(lit)) => Some(MetaItemKind::NameValue(lit.clone())),\n         }\n     }\n-\n-    fn from_tokens(\n-        tokens: &mut iter::Peekable<impl Iterator<Item = TokenTree>>,\n-    ) -> Option<MetaItemKind> {\n-        match tokens.peek() {\n-            Some(TokenTree::Delimited(_, Delimiter::Parenthesis, inner_tokens)) => {\n-                let inner_tokens = inner_tokens.clone();\n-                tokens.next();\n-                MetaItemKind::list_from_tokens(inner_tokens).map(MetaItemKind::List)\n-            }\n-            Some(TokenTree::Delimited(..)) => None,\n-            Some(TokenTree::Token(Token { kind: token::Eq, .. }, _)) => {\n-                tokens.next();\n-                MetaItemKind::name_value_from_tokens(tokens)\n-            }\n-            _ => Some(MetaItemKind::Word),\n-        }\n-    }\n }\n \n impl NestedMetaItem {\n@@ -613,6 +452,77 @@ impl NestedMetaItem {\n         }\n     }\n \n+    /// For a single-segment meta item, returns its name; otherwise, returns `None`.\n+    pub fn ident(&self) -> Option<Ident> {\n+        self.meta_item().and_then(|meta_item| meta_item.ident())\n+    }\n+\n+    pub fn name_or_empty(&self) -> Symbol {\n+        self.ident().unwrap_or_else(Ident::empty).name\n+    }\n+\n+    /// Returns `true` if this list item is a MetaItem with a name of `name`.\n+    pub fn has_name(&self, name: Symbol) -> bool {\n+        self.meta_item().map_or(false, |meta_item| meta_item.has_name(name))\n+    }\n+\n+    /// Returns `true` if `self` is a `MetaItem` and the meta item is a word.\n+    pub fn is_word(&self) -> bool {\n+        self.meta_item().map_or(false, |meta_item| meta_item.is_word())\n+    }\n+\n+    /// Gets a list of inner meta items from a list `MetaItem` type.\n+    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n+        self.meta_item().and_then(|meta_item| meta_item.meta_item_list())\n+    }\n+\n+    /// Returns a name and single literal value tuple of the `MetaItem`.\n+    pub fn name_value_literal(&self) -> Option<(Symbol, &MetaItemLit)> {\n+        self.meta_item().and_then(|meta_item| {\n+            meta_item.meta_item_list().and_then(|meta_item_list| {\n+                if meta_item_list.len() == 1\n+                    && let Some(ident) = meta_item.ident()\n+                    && let Some(lit) = meta_item_list[0].lit()\n+                {\n+                    return Some((ident.name, lit));\n+                }\n+                None\n+            })\n+        })\n+    }\n+\n+    /// See [`MetaItem::name_value_literal_span`].\n+    pub fn name_value_literal_span(&self) -> Option<Span> {\n+        self.meta_item()?.name_value_literal_span()\n+    }\n+\n+    /// Gets the string value if `self` is a `MetaItem` and the `MetaItem` is a\n+    /// `MetaItemKind::NameValue` variant containing a string, otherwise `None`.\n+    pub fn value_str(&self) -> Option<Symbol> {\n+        self.meta_item().and_then(|meta_item| meta_item.value_str())\n+    }\n+\n+    /// Returns the `MetaItemLit` if `self` is a `NestedMetaItem::Literal`s.\n+    pub fn lit(&self) -> Option<&MetaItemLit> {\n+        match self {\n+            NestedMetaItem::Lit(lit) => Some(lit),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Returns the `MetaItem` if `self` is a `NestedMetaItem::MetaItem`.\n+    pub fn meta_item(&self) -> Option<&MetaItem> {\n+        match self {\n+            NestedMetaItem::MetaItem(item) => Some(item),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Returns `true` if the variant is `MetaItem`.\n+    pub fn is_meta_item(&self) -> bool {\n+        self.meta_item().is_some()\n+    }\n+\n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<NestedMetaItem>\n     where\n         I: Iterator<Item = TokenTree>,\n@@ -634,3 +544,89 @@ impl NestedMetaItem {\n         MetaItem::from_tokens(tokens).map(NestedMetaItem::MetaItem)\n     }\n }\n+\n+pub fn mk_doc_comment(\n+    g: &AttrIdGenerator,\n+    comment_kind: CommentKind,\n+    style: AttrStyle,\n+    data: Symbol,\n+    span: Span,\n+) -> Attribute {\n+    Attribute { kind: AttrKind::DocComment(comment_kind, data), id: g.mk_attr_id(), style, span }\n+}\n+\n+pub fn mk_attr(\n+    g: &AttrIdGenerator,\n+    style: AttrStyle,\n+    path: Path,\n+    args: AttrArgs,\n+    span: Span,\n+) -> Attribute {\n+    mk_attr_from_item(g, AttrItem { path, args, tokens: None }, None, style, span)\n+}\n+\n+pub fn mk_attr_from_item(\n+    g: &AttrIdGenerator,\n+    item: AttrItem,\n+    tokens: Option<LazyAttrTokenStream>,\n+    style: AttrStyle,\n+    span: Span,\n+) -> Attribute {\n+    Attribute {\n+        kind: AttrKind::Normal(P(NormalAttr { item, tokens })),\n+        id: g.mk_attr_id(),\n+        style,\n+        span,\n+    }\n+}\n+\n+pub fn mk_attr_word(g: &AttrIdGenerator, style: AttrStyle, name: Symbol, span: Span) -> Attribute {\n+    let path = Path::from_ident(Ident::new(name, span));\n+    let args = AttrArgs::Empty;\n+    mk_attr(g, style, path, args, span)\n+}\n+\n+pub fn mk_attr_nested_word(\n+    g: &AttrIdGenerator,\n+    style: AttrStyle,\n+    outer: Symbol,\n+    inner: Symbol,\n+    span: Span,\n+) -> Attribute {\n+    let inner_tokens = TokenStream::new(vec![TokenTree::Token(\n+        Token::from_ast_ident(Ident::new(inner, span)),\n+        Spacing::Alone,\n+    )]);\n+    let outer_ident = Ident::new(outer, span);\n+    let path = Path::from_ident(outer_ident);\n+    let attr_args = AttrArgs::Delimited(DelimArgs {\n+        dspan: DelimSpan::from_single(span),\n+        delim: MacDelimiter::Parenthesis,\n+        tokens: inner_tokens,\n+    });\n+    mk_attr(g, style, path, attr_args, span)\n+}\n+\n+pub fn mk_attr_name_value_str(\n+    g: &AttrIdGenerator,\n+    style: AttrStyle,\n+    name: Symbol,\n+    val: Symbol,\n+    span: Span,\n+) -> Attribute {\n+    let lit = token::Lit::new(token::Str, escape_string_symbol(val), None);\n+    let expr = P(Expr {\n+        id: DUMMY_NODE_ID,\n+        kind: ExprKind::Lit(lit),\n+        span,\n+        attrs: AttrVec::new(),\n+        tokens: None,\n+    });\n+    let path = Path::from_ident(Ident::new(name, span));\n+    let args = AttrArgs::Eq(span, AttrArgsEq::Ast(expr));\n+    mk_attr(g, style, path, args, span)\n+}\n+\n+pub fn list_contains_name(items: &[NestedMetaItem], name: Symbol) -> bool {\n+    items.iter().any(|item| item.has_name(name))\n+}"}, {"sha": "184fea8683295209d8f2995614b55d5364bc230f", "filename": "compiler/rustc_baked_icu_data/Cargo.toml", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2FCargo.toml?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -4,12 +4,11 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-icu_list = \"1.0.0\"\n-icu_locid = \"1.0.0\"\n-icu_provider = \"1.0.1\"\n-icu_provider_adapters = \"1.0.0\"\n-litemap = \"0.6.0\"\n-zerovec = \"0.9.0\"\n+icu_list = \"1.1.0\"\n+icu_locid = \"1.1.0\"\n+icu_provider = \"1.1.0\"\n+icu_provider_adapters = \"1.1.0\"\n+zerovec = \"0.9.2\"\n \n [features]\n rustc_use_parallel_compiler = ['icu_provider/sync']"}, {"sha": "230288766764caab87ef151e34e3847949bdbf98", "filename": "compiler/rustc_baked_icu_data/src/data/any.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fany.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,42 +1,2 @@\n // @generated\n-impl AnyProvider for BakedDataProvider {\n-    fn load_any(&self, key: DataKey, req: DataRequest) -> Result<AnyResponse, DataError> {\n-        const ANDLISTV1MARKER: ::icu_provider::DataKeyHash =\n-            ::icu_list::provider::AndListV1Marker::KEY.hashed();\n-        const COLLATIONFALLBACKSUPPLEMENTV1MARKER: ::icu_provider::DataKeyHash =\n-            ::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker::KEY\n-                .hashed();\n-        const LOCALEFALLBACKLIKELYSUBTAGSV1MARKER: ::icu_provider::DataKeyHash =\n-            ::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker::KEY\n-                .hashed();\n-        const LOCALEFALLBACKPARENTSV1MARKER: ::icu_provider::DataKeyHash =\n-            ::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker::KEY\n-                .hashed();\n-        #[allow(clippy::match_single_binding)]\n-        match key.hashed() {\n-            ANDLISTV1MARKER => list::and_v1::DATA\n-                .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n-                .copied()\n-                .map(AnyPayload::from_static_ref)\n-                .ok_or(DataErrorKind::MissingLocale),\n-            COLLATIONFALLBACKSUPPLEMENTV1MARKER => fallback::supplement::co_v1::DATA\n-                .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n-                .copied()\n-                .map(AnyPayload::from_static_ref)\n-                .ok_or(DataErrorKind::MissingLocale),\n-            LOCALEFALLBACKLIKELYSUBTAGSV1MARKER => fallback::likelysubtags_v1::DATA\n-                .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n-                .copied()\n-                .map(AnyPayload::from_static_ref)\n-                .ok_or(DataErrorKind::MissingLocale),\n-            LOCALEFALLBACKPARENTSV1MARKER => fallback::parents_v1::DATA\n-                .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n-                .copied()\n-                .map(AnyPayload::from_static_ref)\n-                .ok_or(DataErrorKind::MissingLocale),\n-            _ => Err(DataErrorKind::MissingDataKey),\n-        }\n-        .map_err(|e| e.with_req(key, req))\n-        .map(|payload| AnyResponse { payload: Some(payload), metadata: Default::default() })\n-    }\n-}\n+impl_any_provider!(BakedDataProvider);"}, {"sha": "0a90c832e8c79b9ae018dd71c5cb15bc29bf01c9", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/likelysubtags_v1.rs", "status": "removed", "additions": 0, "deletions": 733, "changes": 733, "blob_url": "https://github.com/rust-lang/rust/blob/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1.rs?ref=8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2", "patch": "@@ -1,733 +0,0 @@\n-// @generated\n-type DataStruct = < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker as :: icu_provider :: DataMarker > :: Yokeable ;\n-pub static DATA: litemap::LiteMap<&str, &DataStruct, &[(&str, &DataStruct)]> =\n-    litemap::LiteMap::from_sorted_store_unchecked(&[(\"und\", UND)]);\n-static UND: &DataStruct =\n-    &::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1 {\n-        l2s: unsafe {\n-            #[allow(unused_unsafe)]\n-            ::zerovec::ZeroMap::from_parts_unchecked(\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        97u8, 98u8, 0u8, 97u8, 98u8, 113u8, 97u8, 100u8, 112u8, 97u8, 100u8, 121u8,\n-                        97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 104u8, 111u8, 97u8, 106u8,\n-                        116u8, 97u8, 107u8, 107u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8, 97u8,\n-                        112u8, 99u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n-                        114u8, 113u8, 97u8, 114u8, 115u8, 97u8, 114u8, 121u8, 97u8, 114u8, 122u8,\n-                        97u8, 115u8, 0u8, 97u8, 115u8, 101u8, 97u8, 118u8, 0u8, 97u8, 118u8, 108u8,\n-                        97u8, 119u8, 97u8, 98u8, 97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 112u8,\n-                        98u8, 97u8, 120u8, 98u8, 99u8, 113u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8,\n-                        98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n-                        0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n-                        104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 106u8, 105u8,\n-                        98u8, 106u8, 106u8, 98u8, 108u8, 116u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8,\n-                        98u8, 112u8, 121u8, 98u8, 113u8, 105u8, 98u8, 114u8, 97u8, 98u8, 114u8,\n-                        104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 113u8, 98u8, 115u8, 116u8, 98u8,\n-                        116u8, 118u8, 98u8, 117u8, 97u8, 98u8, 121u8, 110u8, 99u8, 99u8, 112u8,\n-                        99u8, 101u8, 0u8, 99u8, 104u8, 109u8, 99u8, 104u8, 114u8, 99u8, 106u8,\n-                        97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 109u8, 103u8, 99u8,\n-                        111u8, 112u8, 99u8, 114u8, 0u8, 99u8, 114u8, 104u8, 99u8, 114u8, 107u8,\n-                        99u8, 114u8, 108u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8,\n-                        0u8, 99u8, 118u8, 0u8, 100u8, 97u8, 114u8, 100u8, 99u8, 99u8, 100u8, 103u8,\n-                        108u8, 100u8, 109u8, 102u8, 100u8, 111u8, 105u8, 100u8, 114u8, 104u8,\n-                        100u8, 114u8, 115u8, 100u8, 116u8, 121u8, 100u8, 118u8, 0u8, 100u8, 122u8,\n-                        0u8, 101u8, 103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8,\n-                        115u8, 103u8, 101u8, 116u8, 116u8, 102u8, 97u8, 0u8, 102u8, 105u8, 97u8,\n-                        102u8, 117u8, 98u8, 103u8, 97u8, 110u8, 103u8, 98u8, 109u8, 103u8, 98u8,\n-                        122u8, 103u8, 101u8, 122u8, 103u8, 103u8, 110u8, 103u8, 106u8, 107u8,\n-                        103u8, 106u8, 117u8, 103u8, 108u8, 107u8, 103u8, 109u8, 118u8, 103u8,\n-                        111u8, 102u8, 103u8, 111u8, 109u8, 103u8, 111u8, 110u8, 103u8, 111u8,\n-                        116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 117u8, 0u8, 103u8,\n-                        118u8, 114u8, 103u8, 119u8, 99u8, 103u8, 119u8, 116u8, 104u8, 97u8, 107u8,\n-                        104u8, 97u8, 122u8, 104u8, 100u8, 121u8, 104u8, 101u8, 0u8, 104u8, 105u8,\n-                        0u8, 104u8, 108u8, 117u8, 104u8, 109u8, 100u8, 104u8, 110u8, 100u8, 104u8,\n-                        110u8, 101u8, 104u8, 110u8, 106u8, 104u8, 110u8, 111u8, 104u8, 111u8, 99u8,\n-                        104u8, 111u8, 106u8, 104u8, 115u8, 110u8, 104u8, 121u8, 0u8, 105u8, 105u8,\n-                        0u8, 105u8, 110u8, 104u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 106u8,\n-                        97u8, 0u8, 106u8, 105u8, 0u8, 106u8, 109u8, 108u8, 107u8, 97u8, 0u8, 107u8,\n-                        97u8, 97u8, 107u8, 97u8, 119u8, 107u8, 98u8, 100u8, 107u8, 98u8, 121u8,\n-                        107u8, 100u8, 116u8, 107u8, 102u8, 114u8, 107u8, 102u8, 121u8, 107u8,\n-                        104u8, 98u8, 107u8, 104u8, 110u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8,\n-                        107u8, 106u8, 103u8, 107u8, 107u8, 0u8, 107u8, 109u8, 0u8, 107u8, 110u8,\n-                        0u8, 107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8,\n-                        113u8, 121u8, 107u8, 114u8, 99u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n-                        107u8, 116u8, 98u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8, 118u8,\n-                        120u8, 107u8, 120u8, 99u8, 107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8,\n-                        120u8, 112u8, 107u8, 121u8, 0u8, 107u8, 122u8, 104u8, 108u8, 97u8, 98u8,\n-                        108u8, 97u8, 100u8, 108u8, 97u8, 104u8, 108u8, 98u8, 101u8, 108u8, 99u8,\n-                        112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8, 108u8, 105u8, 102u8,\n-                        108u8, 105u8, 115u8, 108u8, 107u8, 105u8, 108u8, 109u8, 110u8, 108u8,\n-                        111u8, 0u8, 108u8, 114u8, 99u8, 108u8, 117u8, 122u8, 108u8, 119u8, 108u8,\n-                        108u8, 122u8, 104u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 100u8,\n-                        101u8, 109u8, 100u8, 102u8, 109u8, 100u8, 120u8, 109u8, 102u8, 97u8, 109u8,\n-                        103u8, 112u8, 109u8, 107u8, 0u8, 109u8, 107u8, 105u8, 109u8, 108u8, 0u8,\n-                        109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8, 114u8,\n-                        0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8, 111u8, 109u8,\n-                        116u8, 114u8, 109u8, 118u8, 121u8, 109u8, 119u8, 114u8, 109u8, 119u8,\n-                        119u8, 109u8, 121u8, 0u8, 109u8, 121u8, 109u8, 109u8, 121u8, 118u8, 109u8,\n-                        121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 110u8, 110u8, 101u8, 0u8,\n-                        110u8, 101u8, 119u8, 110u8, 110u8, 112u8, 110u8, 111u8, 100u8, 110u8,\n-                        111u8, 101u8, 110u8, 111u8, 110u8, 110u8, 113u8, 111u8, 110u8, 115u8,\n-                        107u8, 110u8, 115u8, 116u8, 111u8, 106u8, 0u8, 111u8, 106u8, 115u8, 111u8,\n-                        114u8, 0u8, 111u8, 114u8, 117u8, 111u8, 115u8, 0u8, 111u8, 115u8, 97u8,\n-                        111u8, 116u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8, 112u8, 97u8,\n-                        0u8, 112u8, 97u8, 108u8, 112u8, 101u8, 111u8, 112u8, 104u8, 108u8, 112u8,\n-                        104u8, 110u8, 112u8, 107u8, 97u8, 112u8, 110u8, 116u8, 112u8, 112u8, 97u8,\n-                        112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 115u8, 0u8, 114u8, 97u8,\n-                        106u8, 114u8, 104u8, 103u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8,\n-                        114u8, 107u8, 116u8, 114u8, 109u8, 116u8, 114u8, 117u8, 0u8, 114u8, 117u8,\n-                        101u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8, 115u8, 97u8, 104u8, 115u8,\n-                        97u8, 116u8, 115u8, 97u8, 122u8, 115u8, 99u8, 107u8, 115u8, 99u8, 108u8,\n-                        115u8, 100u8, 0u8, 115u8, 100u8, 104u8, 115u8, 103u8, 97u8, 115u8, 103u8,\n-                        119u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8, 104u8, 117u8,\n-                        115u8, 105u8, 0u8, 115u8, 107u8, 114u8, 115u8, 109u8, 112u8, 115u8, 111u8,\n-                        103u8, 115u8, 111u8, 117u8, 115u8, 114u8, 0u8, 115u8, 114u8, 98u8, 115u8,\n-                        114u8, 120u8, 115u8, 119u8, 98u8, 115u8, 119u8, 118u8, 115u8, 121u8, 108u8,\n-                        115u8, 121u8, 114u8, 116u8, 97u8, 0u8, 116u8, 97u8, 106u8, 116u8, 99u8,\n-                        121u8, 116u8, 100u8, 100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8,\n-                        116u8, 101u8, 0u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8,\n-                        108u8, 116u8, 104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8,\n-                        105u8, 103u8, 116u8, 107u8, 116u8, 116u8, 114u8, 119u8, 116u8, 115u8,\n-                        100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 106u8, 116u8, 116u8, 0u8, 116u8,\n-                        116u8, 115u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8,\n-                        118u8, 117u8, 100u8, 105u8, 117u8, 100u8, 109u8, 117u8, 103u8, 0u8, 117u8,\n-                        103u8, 97u8, 117u8, 107u8, 0u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n-                        117u8, 114u8, 0u8, 118u8, 97u8, 105u8, 119u8, 97u8, 108u8, 119u8, 98u8,\n-                        113u8, 119u8, 98u8, 114u8, 119u8, 110u8, 105u8, 119u8, 115u8, 103u8, 119u8,\n-                        116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 99u8, 111u8, 120u8, 99u8, 114u8,\n-                        120u8, 108u8, 99u8, 120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8,\n-                        110u8, 120u8, 109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8,\n-                        112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 105u8, 0u8,\n-                        121u8, 117u8, 101u8, 122u8, 100u8, 106u8, 122u8, 103u8, 104u8, 122u8,\n-                        104u8, 0u8, 122u8, 104u8, 120u8, 122u8, 107u8, 116u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 84u8, 105u8, 98u8,\n-                        116u8, 67u8, 121u8, 114u8, 108u8, 65u8, 118u8, 115u8, 116u8, 65u8, 114u8,\n-                        97u8, 98u8, 65u8, 104u8, 111u8, 109u8, 65u8, 114u8, 97u8, 98u8, 88u8,\n-                        115u8, 117u8, 120u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8, 105u8,\n-                        65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8,\n-                        65u8, 114u8, 109u8, 105u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n-                        98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 66u8, 101u8, 110u8,\n-                        103u8, 83u8, 103u8, 110u8, 119u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8,\n-                        97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 65u8,\n-                        114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 66u8, 97u8, 109u8, 117u8,\n-                        69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8,\n-                        98u8, 84u8, 97u8, 109u8, 108u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8,\n-                        118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n-                        114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8, 68u8, 101u8, 118u8, 97u8,\n-                        68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8,\n-                        105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 118u8, 116u8, 66u8, 101u8,\n-                        110u8, 103u8, 84u8, 105u8, 98u8, 116u8, 66u8, 101u8, 110u8, 103u8, 65u8,\n-                        114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8,\n-                        101u8, 118u8, 97u8, 66u8, 97u8, 115u8, 115u8, 69u8, 116u8, 104u8, 105u8,\n-                        68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n-                        105u8, 67u8, 97u8, 107u8, 109u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8,\n-                        114u8, 108u8, 67u8, 104u8, 101u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8,\n-                        104u8, 97u8, 109u8, 65u8, 114u8, 97u8, 98u8, 83u8, 111u8, 121u8, 111u8,\n-                        67u8, 111u8, 112u8, 116u8, 67u8, 97u8, 110u8, 115u8, 67u8, 121u8, 114u8,\n-                        108u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8,\n-                        110u8, 115u8, 80u8, 97u8, 117u8, 99u8, 67u8, 121u8, 114u8, 108u8, 67u8,\n-                        121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8,\n-                        65u8, 114u8, 97u8, 98u8, 77u8, 101u8, 100u8, 102u8, 68u8, 101u8, 118u8,\n-                        97u8, 77u8, 111u8, 110u8, 103u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8,\n-                        118u8, 97u8, 84u8, 104u8, 97u8, 97u8, 84u8, 105u8, 98u8, 116u8, 69u8,\n-                        103u8, 121u8, 112u8, 75u8, 97u8, 108u8, 105u8, 71u8, 114u8, 101u8, 107u8,\n-                        71u8, 111u8, 110u8, 109u8, 73u8, 116u8, 97u8, 108u8, 65u8, 114u8, 97u8,\n-                        98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n-                        115u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8,\n-                        104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 65u8,\n-                        114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8,\n-                        69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 101u8, 108u8,\n-                        117u8, 71u8, 111u8, 116u8, 104u8, 67u8, 112u8, 114u8, 116u8, 66u8, 101u8,\n-                        110u8, 103u8, 71u8, 117u8, 106u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n-                        114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 65u8,\n-                        114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 72u8, 101u8, 98u8, 114u8,\n-                        68u8, 101u8, 118u8, 97u8, 72u8, 108u8, 117u8, 119u8, 80u8, 108u8, 114u8,\n-                        100u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8,\n-                        110u8, 112u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 68u8,\n-                        101u8, 118u8, 97u8, 72u8, 97u8, 110u8, 115u8, 65u8, 114u8, 109u8, 110u8,\n-                        89u8, 105u8, 105u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 97u8, 110u8,\n-                        115u8, 72u8, 101u8, 98u8, 114u8, 74u8, 112u8, 97u8, 110u8, 72u8, 101u8,\n-                        98u8, 114u8, 68u8, 101u8, 118u8, 97u8, 71u8, 101u8, 111u8, 114u8, 67u8,\n-                        121u8, 114u8, 108u8, 75u8, 97u8, 119u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n-                        65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 68u8, 101u8, 118u8,\n-                        97u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 108u8, 117u8, 68u8, 101u8,\n-                        118u8, 97u8, 77u8, 121u8, 109u8, 114u8, 65u8, 114u8, 97u8, 98u8, 76u8,\n-                        97u8, 111u8, 111u8, 67u8, 121u8, 114u8, 108u8, 75u8, 104u8, 109u8, 114u8,\n-                        75u8, 110u8, 100u8, 97u8, 75u8, 111u8, 114u8, 101u8, 67u8, 121u8, 114u8,\n-                        108u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8,\n-                        114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8,\n-                        116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8,\n-                        65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8,\n-                        97u8, 84u8, 104u8, 97u8, 105u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n-                        114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 76u8, 105u8, 110u8, 97u8, 72u8,\n-                        101u8, 98u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8,\n-                        84u8, 104u8, 97u8, 105u8, 76u8, 101u8, 112u8, 99u8, 67u8, 121u8, 114u8,\n-                        108u8, 68u8, 101u8, 118u8, 97u8, 76u8, 105u8, 115u8, 117u8, 65u8, 114u8,\n-                        97u8, 98u8, 84u8, 101u8, 108u8, 117u8, 76u8, 97u8, 111u8, 111u8, 65u8,\n-                        114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 72u8,\n-                        97u8, 110u8, 115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n-                        65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n-                        105u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8,\n-                        114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 77u8, 108u8, 121u8, 109u8, 67u8,\n-                        121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 77u8, 121u8, 109u8, 114u8,\n-                        68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8,\n-                        108u8, 77u8, 114u8, 111u8, 111u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8,\n-                        97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8, 110u8, 112u8, 77u8,\n-                        121u8, 109u8, 114u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n-                        77u8, 97u8, 110u8, 100u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n-                        115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 87u8, 99u8,\n-                        104u8, 111u8, 76u8, 97u8, 110u8, 97u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n-                        117u8, 110u8, 114u8, 78u8, 107u8, 111u8, 111u8, 67u8, 97u8, 110u8, 115u8,\n-                        84u8, 110u8, 115u8, 97u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8,\n-                        115u8, 79u8, 114u8, 121u8, 97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n-                        114u8, 108u8, 79u8, 115u8, 103u8, 101u8, 65u8, 114u8, 97u8, 98u8, 79u8,\n-                        114u8, 107u8, 104u8, 79u8, 117u8, 103u8, 114u8, 71u8, 117u8, 114u8, 117u8,\n-                        80u8, 104u8, 108u8, 105u8, 88u8, 112u8, 101u8, 111u8, 65u8, 114u8, 97u8,\n-                        98u8, 80u8, 104u8, 110u8, 120u8, 66u8, 114u8, 97u8, 104u8, 71u8, 114u8,\n-                        101u8, 107u8, 68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 97u8, 114u8, 65u8,\n-                        114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n-                        111u8, 104u8, 103u8, 84u8, 102u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n-                        66u8, 101u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n-                        108u8, 67u8, 121u8, 114u8, 108u8, 75u8, 97u8, 110u8, 97u8, 68u8, 101u8,\n-                        118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 79u8, 108u8, 99u8, 107u8, 83u8,\n-                        97u8, 117u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8,\n-                        65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 79u8, 103u8, 97u8, 109u8,\n-                        69u8, 116u8, 104u8, 105u8, 84u8, 102u8, 110u8, 103u8, 77u8, 121u8, 109u8,\n-                        114u8, 65u8, 114u8, 97u8, 98u8, 83u8, 105u8, 110u8, 104u8, 65u8, 114u8,\n-                        97u8, 98u8, 83u8, 97u8, 109u8, 114u8, 83u8, 111u8, 103u8, 100u8, 84u8,\n-                        104u8, 97u8, 105u8, 67u8, 121u8, 114u8, 108u8, 83u8, 111u8, 114u8, 97u8,\n-                        68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8,\n-                        97u8, 66u8, 101u8, 110u8, 103u8, 83u8, 121u8, 114u8, 99u8, 84u8, 97u8,\n-                        109u8, 108u8, 68u8, 101u8, 118u8, 97u8, 75u8, 110u8, 100u8, 97u8, 84u8,\n-                        97u8, 108u8, 101u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n-                        84u8, 101u8, 108u8, 117u8, 67u8, 121u8, 114u8, 108u8, 84u8, 104u8, 97u8,\n-                        105u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8,\n-                        118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 69u8, 116u8, 104u8, 105u8, 68u8,\n-                        101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8,\n-                        68u8, 101u8, 118u8, 97u8, 84u8, 105u8, 98u8, 116u8, 67u8, 121u8, 114u8,\n-                        108u8, 84u8, 104u8, 97u8, 105u8, 84u8, 97u8, 110u8, 103u8, 84u8, 111u8,\n-                        116u8, 111u8, 67u8, 121u8, 114u8, 108u8, 65u8, 103u8, 104u8, 98u8, 67u8,\n-                        121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 85u8, 103u8, 97u8, 114u8,\n-                        67u8, 121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 66u8, 101u8, 110u8,\n-                        103u8, 65u8, 114u8, 97u8, 98u8, 86u8, 97u8, 105u8, 105u8, 69u8, 116u8,\n-                        104u8, 105u8, 84u8, 101u8, 108u8, 117u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n-                        114u8, 97u8, 98u8, 71u8, 111u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n-                        72u8, 97u8, 110u8, 115u8, 67u8, 104u8, 114u8, 115u8, 67u8, 97u8, 114u8,\n-                        105u8, 76u8, 121u8, 99u8, 105u8, 76u8, 121u8, 100u8, 105u8, 71u8, 101u8,\n-                        111u8, 114u8, 77u8, 97u8, 110u8, 105u8, 77u8, 101u8, 114u8, 99u8, 78u8,\n-                        97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 80u8, 114u8, 116u8, 105u8,\n-                        83u8, 97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 101u8, 98u8,\n-                        114u8, 72u8, 97u8, 110u8, 116u8, 65u8, 114u8, 97u8, 98u8, 84u8, 102u8,\n-                        110u8, 103u8, 72u8, 97u8, 110u8, 115u8, 78u8, 115u8, 104u8, 117u8, 75u8,\n-                        105u8, 116u8, 115u8,\n-                    ])\n-                },\n-            )\n-        },\n-        lr2s: unsafe {\n-            #[allow(unused_unsafe)]\n-            ::zerovec::ZeroMap2d::from_parts_unchecked(\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        97u8, 122u8, 0u8, 104u8, 97u8, 0u8, 107u8, 107u8, 0u8, 107u8, 117u8, 0u8,\n-                        107u8, 121u8, 0u8, 109u8, 97u8, 110u8, 109u8, 110u8, 0u8, 109u8, 115u8,\n-                        0u8, 112u8, 97u8, 0u8, 114u8, 105u8, 102u8, 115u8, 100u8, 0u8, 115u8,\n-                        114u8, 0u8, 116u8, 103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8,\n-                        117u8, 122u8, 0u8, 121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        3u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 10u8, 0u8, 0u8,\n-                        0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 15u8,\n-                        0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                        0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 26u8,\n-                        0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8, 29u8, 0u8, 0u8, 0u8, 44u8, 0u8, 0u8,\n-                        0u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        73u8, 81u8, 0u8, 73u8, 82u8, 0u8, 82u8, 85u8, 0u8, 67u8, 77u8, 0u8, 83u8,\n-                        68u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 73u8, 82u8, 0u8, 77u8, 78u8,\n-                        0u8, 76u8, 66u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 71u8, 78u8, 0u8,\n-                        67u8, 78u8, 0u8, 67u8, 67u8, 0u8, 80u8, 75u8, 0u8, 78u8, 76u8, 0u8, 73u8,\n-                        78u8, 0u8, 77u8, 69u8, 0u8, 82u8, 79u8, 0u8, 82u8, 85u8, 0u8, 84u8, 82u8,\n-                        0u8, 80u8, 75u8, 0u8, 75u8, 90u8, 0u8, 77u8, 78u8, 0u8, 78u8, 80u8, 0u8,\n-                        65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 65u8, 85u8, 0u8, 66u8,\n-                        78u8, 0u8, 71u8, 66u8, 0u8, 71u8, 70u8, 0u8, 72u8, 75u8, 0u8, 73u8, 68u8,\n-                        0u8, 77u8, 79u8, 0u8, 80u8, 65u8, 0u8, 80u8, 70u8, 0u8, 80u8, 72u8, 0u8,\n-                        83u8, 82u8, 0u8, 84u8, 72u8, 0u8, 84u8, 87u8, 0u8, 85u8, 83u8, 0u8, 86u8,\n-                        78u8, 0u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n-                        108u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n-                        98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n-                        98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8,\n-                        110u8, 78u8, 107u8, 111u8, 111u8, 77u8, 111u8, 110u8, 103u8, 65u8, 114u8,\n-                        97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8, 110u8, 68u8, 101u8,\n-                        118u8, 97u8, 76u8, 97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 76u8,\n-                        97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 65u8, 114u8, 97u8, 98u8,\n-                        67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8,\n-                        97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 72u8, 97u8,\n-                        110u8, 115u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n-                        97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n-                        72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8,\n-                        116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8,\n-                        110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n-                        97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n-                    ])\n-                },\n-            )\n-        },\n-        l2r: unsafe {\n-            #[allow(unused_unsafe)]\n-            ::zerovec::ZeroMap::from_parts_unchecked(\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        97u8, 97u8, 0u8, 97u8, 98u8, 0u8, 97u8, 98u8, 114u8, 97u8, 99u8, 101u8,\n-                        97u8, 99u8, 104u8, 97u8, 100u8, 97u8, 97u8, 100u8, 112u8, 97u8, 100u8,\n-                        121u8, 97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 102u8, 0u8, 97u8, 103u8,\n-                        113u8, 97u8, 104u8, 111u8, 97u8, 106u8, 116u8, 97u8, 107u8, 0u8, 97u8,\n-                        107u8, 107u8, 97u8, 108u8, 110u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8,\n-                        97u8, 109u8, 111u8, 97u8, 110u8, 0u8, 97u8, 110u8, 110u8, 97u8, 111u8,\n-                        122u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n-                        114u8, 110u8, 97u8, 114u8, 111u8, 97u8, 114u8, 113u8, 97u8, 114u8, 115u8,\n-                        97u8, 114u8, 121u8, 97u8, 114u8, 122u8, 97u8, 115u8, 0u8, 97u8, 115u8,\n-                        97u8, 97u8, 115u8, 101u8, 97u8, 115u8, 116u8, 97u8, 116u8, 106u8, 97u8,\n-                        118u8, 0u8, 97u8, 119u8, 97u8, 97u8, 121u8, 0u8, 97u8, 122u8, 0u8, 98u8,\n-                        97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 110u8, 98u8, 97u8, 112u8, 98u8,\n-                        97u8, 114u8, 98u8, 97u8, 115u8, 98u8, 97u8, 120u8, 98u8, 98u8, 99u8, 98u8,\n-                        98u8, 106u8, 98u8, 99u8, 105u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8, 98u8,\n-                        101u8, 109u8, 98u8, 101u8, 119u8, 98u8, 101u8, 122u8, 98u8, 102u8, 100u8,\n-                        98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n-                        0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n-                        104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 105u8, 0u8,\n-                        98u8, 105u8, 107u8, 98u8, 105u8, 110u8, 98u8, 106u8, 106u8, 98u8, 106u8,\n-                        110u8, 98u8, 106u8, 116u8, 98u8, 107u8, 109u8, 98u8, 107u8, 117u8, 98u8,\n-                        108u8, 97u8, 98u8, 108u8, 103u8, 98u8, 108u8, 116u8, 98u8, 109u8, 0u8,\n-                        98u8, 109u8, 113u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8, 98u8, 112u8, 121u8,\n-                        98u8, 113u8, 105u8, 98u8, 113u8, 118u8, 98u8, 114u8, 0u8, 98u8, 114u8,\n-                        97u8, 98u8, 114u8, 104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 0u8, 98u8,\n-                        115u8, 113u8, 98u8, 115u8, 115u8, 98u8, 116u8, 111u8, 98u8, 116u8, 118u8,\n-                        98u8, 117u8, 97u8, 98u8, 117u8, 99u8, 98u8, 117u8, 103u8, 98u8, 117u8,\n-                        109u8, 98u8, 118u8, 98u8, 98u8, 121u8, 110u8, 98u8, 121u8, 118u8, 98u8,\n-                        122u8, 101u8, 99u8, 97u8, 0u8, 99u8, 97u8, 100u8, 99u8, 99u8, 104u8, 99u8,\n-                        99u8, 112u8, 99u8, 101u8, 0u8, 99u8, 101u8, 98u8, 99u8, 103u8, 103u8, 99u8,\n-                        104u8, 0u8, 99u8, 104u8, 107u8, 99u8, 104u8, 109u8, 99u8, 104u8, 111u8,\n-                        99u8, 104u8, 112u8, 99u8, 104u8, 114u8, 99u8, 105u8, 99u8, 99u8, 106u8,\n-                        97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 108u8, 99u8, 99u8,\n-                        109u8, 103u8, 99u8, 111u8, 0u8, 99u8, 111u8, 112u8, 99u8, 112u8, 115u8,\n-                        99u8, 114u8, 0u8, 99u8, 114u8, 103u8, 99u8, 114u8, 104u8, 99u8, 114u8,\n-                        107u8, 99u8, 114u8, 108u8, 99u8, 114u8, 115u8, 99u8, 115u8, 0u8, 99u8,\n-                        115u8, 98u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8, 0u8,\n-                        99u8, 118u8, 0u8, 99u8, 121u8, 0u8, 100u8, 97u8, 0u8, 100u8, 97u8, 102u8,\n-                        100u8, 97u8, 107u8, 100u8, 97u8, 114u8, 100u8, 97u8, 118u8, 100u8, 99u8,\n-                        99u8, 100u8, 101u8, 0u8, 100u8, 101u8, 110u8, 100u8, 103u8, 114u8, 100u8,\n-                        106u8, 101u8, 100u8, 109u8, 102u8, 100u8, 110u8, 106u8, 100u8, 111u8,\n-                        105u8, 100u8, 114u8, 104u8, 100u8, 115u8, 98u8, 100u8, 116u8, 109u8, 100u8,\n-                        116u8, 112u8, 100u8, 116u8, 121u8, 100u8, 117u8, 97u8, 100u8, 118u8, 0u8,\n-                        100u8, 121u8, 111u8, 100u8, 121u8, 117u8, 100u8, 122u8, 0u8, 101u8, 98u8,\n-                        117u8, 101u8, 101u8, 0u8, 101u8, 102u8, 105u8, 101u8, 103u8, 108u8, 101u8,\n-                        103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8, 110u8, 0u8,\n-                        101u8, 111u8, 0u8, 101u8, 115u8, 0u8, 101u8, 115u8, 103u8, 101u8, 115u8,\n-                        117u8, 101u8, 116u8, 0u8, 101u8, 116u8, 116u8, 101u8, 117u8, 0u8, 101u8,\n-                        119u8, 111u8, 101u8, 120u8, 116u8, 102u8, 97u8, 0u8, 102u8, 97u8, 110u8,\n-                        102u8, 102u8, 0u8, 102u8, 102u8, 109u8, 102u8, 105u8, 0u8, 102u8, 105u8,\n-                        97u8, 102u8, 105u8, 108u8, 102u8, 105u8, 116u8, 102u8, 106u8, 0u8, 102u8,\n-                        111u8, 0u8, 102u8, 111u8, 110u8, 102u8, 114u8, 0u8, 102u8, 114u8, 99u8,\n-                        102u8, 114u8, 112u8, 102u8, 114u8, 114u8, 102u8, 114u8, 115u8, 102u8,\n-                        117u8, 98u8, 102u8, 117u8, 100u8, 102u8, 117u8, 102u8, 102u8, 117u8, 113u8,\n-                        102u8, 117u8, 114u8, 102u8, 117u8, 118u8, 102u8, 118u8, 114u8, 102u8,\n-                        121u8, 0u8, 103u8, 97u8, 0u8, 103u8, 97u8, 97u8, 103u8, 97u8, 103u8, 103u8,\n-                        97u8, 110u8, 103u8, 97u8, 121u8, 103u8, 98u8, 109u8, 103u8, 98u8, 122u8,\n-                        103u8, 99u8, 114u8, 103u8, 100u8, 0u8, 103u8, 101u8, 122u8, 103u8, 103u8,\n-                        110u8, 103u8, 105u8, 108u8, 103u8, 106u8, 107u8, 103u8, 106u8, 117u8,\n-                        103u8, 108u8, 0u8, 103u8, 108u8, 107u8, 103u8, 110u8, 0u8, 103u8, 111u8,\n-                        109u8, 103u8, 111u8, 110u8, 103u8, 111u8, 114u8, 103u8, 111u8, 115u8,\n-                        103u8, 111u8, 116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 115u8,\n-                        119u8, 103u8, 117u8, 0u8, 103u8, 117u8, 98u8, 103u8, 117u8, 99u8, 103u8,\n-                        117u8, 114u8, 103u8, 117u8, 122u8, 103u8, 118u8, 0u8, 103u8, 118u8, 114u8,\n-                        103u8, 119u8, 105u8, 104u8, 97u8, 0u8, 104u8, 97u8, 107u8, 104u8, 97u8,\n-                        119u8, 104u8, 97u8, 122u8, 104u8, 101u8, 0u8, 104u8, 105u8, 0u8, 104u8,\n-                        105u8, 102u8, 104u8, 105u8, 108u8, 104u8, 108u8, 117u8, 104u8, 109u8,\n-                        100u8, 104u8, 110u8, 100u8, 104u8, 110u8, 101u8, 104u8, 110u8, 106u8,\n-                        104u8, 110u8, 110u8, 104u8, 110u8, 111u8, 104u8, 111u8, 0u8, 104u8, 111u8,\n-                        99u8, 104u8, 111u8, 106u8, 104u8, 114u8, 0u8, 104u8, 115u8, 98u8, 104u8,\n-                        115u8, 110u8, 104u8, 116u8, 0u8, 104u8, 117u8, 0u8, 104u8, 117u8, 114u8,\n-                        104u8, 121u8, 0u8, 104u8, 122u8, 0u8, 105u8, 97u8, 0u8, 105u8, 98u8, 97u8,\n-                        105u8, 98u8, 98u8, 105u8, 100u8, 0u8, 105u8, 102u8, 101u8, 105u8, 103u8,\n-                        0u8, 105u8, 105u8, 0u8, 105u8, 107u8, 0u8, 105u8, 108u8, 111u8, 105u8,\n-                        110u8, 0u8, 105u8, 110u8, 104u8, 105u8, 111u8, 0u8, 105u8, 115u8, 0u8,\n-                        105u8, 116u8, 0u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 105u8, 122u8,\n-                        104u8, 106u8, 97u8, 0u8, 106u8, 97u8, 109u8, 106u8, 98u8, 111u8, 106u8,\n-                        103u8, 111u8, 106u8, 105u8, 0u8, 106u8, 109u8, 99u8, 106u8, 109u8, 108u8,\n-                        106u8, 117u8, 116u8, 106u8, 118u8, 0u8, 106u8, 119u8, 0u8, 107u8, 97u8,\n-                        0u8, 107u8, 97u8, 97u8, 107u8, 97u8, 98u8, 107u8, 97u8, 99u8, 107u8, 97u8,\n-                        106u8, 107u8, 97u8, 109u8, 107u8, 97u8, 111u8, 107u8, 97u8, 119u8, 107u8,\n-                        98u8, 100u8, 107u8, 98u8, 121u8, 107u8, 99u8, 103u8, 107u8, 99u8, 107u8,\n-                        107u8, 100u8, 101u8, 107u8, 100u8, 104u8, 107u8, 100u8, 116u8, 107u8,\n-                        101u8, 97u8, 107u8, 101u8, 110u8, 107u8, 102u8, 111u8, 107u8, 102u8, 114u8,\n-                        107u8, 102u8, 121u8, 107u8, 103u8, 0u8, 107u8, 103u8, 101u8, 107u8, 103u8,\n-                        112u8, 107u8, 104u8, 97u8, 107u8, 104u8, 98u8, 107u8, 104u8, 110u8, 107u8,\n-                        104u8, 113u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8, 107u8, 105u8, 0u8,\n-                        107u8, 105u8, 117u8, 107u8, 106u8, 0u8, 107u8, 106u8, 103u8, 107u8, 107u8,\n-                        0u8, 107u8, 107u8, 106u8, 107u8, 108u8, 0u8, 107u8, 108u8, 110u8, 107u8,\n-                        109u8, 0u8, 107u8, 109u8, 98u8, 107u8, 110u8, 0u8, 107u8, 110u8, 102u8,\n-                        107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8, 111u8,\n-                        115u8, 107u8, 112u8, 101u8, 107u8, 114u8, 99u8, 107u8, 114u8, 105u8, 107u8,\n-                        114u8, 106u8, 107u8, 114u8, 108u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n-                        107u8, 115u8, 98u8, 107u8, 115u8, 102u8, 107u8, 115u8, 104u8, 107u8, 116u8,\n-                        114u8, 107u8, 117u8, 0u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8,\n-                        118u8, 114u8, 107u8, 118u8, 120u8, 107u8, 119u8, 0u8, 107u8, 119u8, 107u8,\n-                        107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8, 120u8, 112u8, 107u8,\n-                        121u8, 0u8, 107u8, 122u8, 106u8, 107u8, 122u8, 116u8, 108u8, 97u8, 0u8,\n-                        108u8, 97u8, 98u8, 108u8, 97u8, 100u8, 108u8, 97u8, 103u8, 108u8, 97u8,\n-                        104u8, 108u8, 97u8, 106u8, 108u8, 98u8, 0u8, 108u8, 98u8, 101u8, 108u8,\n-                        98u8, 119u8, 108u8, 99u8, 112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8,\n-                        108u8, 103u8, 0u8, 108u8, 105u8, 0u8, 108u8, 105u8, 102u8, 108u8, 105u8,\n-                        106u8, 108u8, 105u8, 108u8, 108u8, 105u8, 115u8, 108u8, 106u8, 112u8,\n-                        108u8, 107u8, 105u8, 108u8, 107u8, 116u8, 108u8, 109u8, 110u8, 108u8,\n-                        109u8, 111u8, 108u8, 110u8, 0u8, 108u8, 111u8, 0u8, 108u8, 111u8, 108u8,\n-                        108u8, 111u8, 122u8, 108u8, 114u8, 99u8, 108u8, 116u8, 0u8, 108u8, 116u8,\n-                        103u8, 108u8, 117u8, 0u8, 108u8, 117u8, 97u8, 108u8, 117u8, 111u8, 108u8,\n-                        117u8, 121u8, 108u8, 117u8, 122u8, 108u8, 118u8, 0u8, 108u8, 119u8, 108u8,\n-                        108u8, 122u8, 104u8, 108u8, 122u8, 122u8, 109u8, 97u8, 100u8, 109u8, 97u8,\n-                        102u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 97u8, 107u8, 109u8,\n-                        97u8, 110u8, 109u8, 97u8, 115u8, 109u8, 97u8, 122u8, 109u8, 100u8, 102u8,\n-                        109u8, 100u8, 104u8, 109u8, 100u8, 114u8, 109u8, 101u8, 110u8, 109u8,\n-                        101u8, 114u8, 109u8, 102u8, 97u8, 109u8, 102u8, 101u8, 109u8, 103u8, 0u8,\n-                        109u8, 103u8, 104u8, 109u8, 103u8, 111u8, 109u8, 103u8, 112u8, 109u8,\n-                        103u8, 121u8, 109u8, 104u8, 0u8, 109u8, 105u8, 0u8, 109u8, 105u8, 99u8,\n-                        109u8, 105u8, 110u8, 109u8, 107u8, 0u8, 109u8, 108u8, 0u8, 109u8, 108u8,\n-                        115u8, 109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8,\n-                        111u8, 0u8, 109u8, 111u8, 101u8, 109u8, 111u8, 104u8, 109u8, 111u8, 115u8,\n-                        109u8, 114u8, 0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8,\n-                        111u8, 109u8, 115u8, 0u8, 109u8, 116u8, 0u8, 109u8, 116u8, 114u8, 109u8,\n-                        117u8, 97u8, 109u8, 117u8, 115u8, 109u8, 118u8, 121u8, 109u8, 119u8, 107u8,\n-                        109u8, 119u8, 114u8, 109u8, 119u8, 118u8, 109u8, 119u8, 119u8, 109u8,\n-                        120u8, 99u8, 109u8, 121u8, 0u8, 109u8, 121u8, 118u8, 109u8, 121u8, 120u8,\n-                        109u8, 121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 0u8, 110u8, 97u8,\n-                        110u8, 110u8, 97u8, 112u8, 110u8, 97u8, 113u8, 110u8, 98u8, 0u8, 110u8,\n-                        99u8, 104u8, 110u8, 100u8, 0u8, 110u8, 100u8, 99u8, 110u8, 100u8, 115u8,\n-                        110u8, 101u8, 0u8, 110u8, 101u8, 119u8, 110u8, 103u8, 0u8, 110u8, 103u8,\n-                        108u8, 110u8, 104u8, 101u8, 110u8, 104u8, 119u8, 110u8, 105u8, 106u8,\n-                        110u8, 105u8, 117u8, 110u8, 106u8, 111u8, 110u8, 108u8, 0u8, 110u8, 109u8,\n-                        103u8, 110u8, 110u8, 0u8, 110u8, 110u8, 104u8, 110u8, 110u8, 112u8, 110u8,\n-                        111u8, 0u8, 110u8, 111u8, 100u8, 110u8, 111u8, 101u8, 110u8, 111u8, 110u8,\n-                        110u8, 113u8, 111u8, 110u8, 114u8, 0u8, 110u8, 115u8, 107u8, 110u8, 115u8,\n-                        111u8, 110u8, 115u8, 116u8, 110u8, 117u8, 115u8, 110u8, 118u8, 0u8, 110u8,\n-                        120u8, 113u8, 110u8, 121u8, 0u8, 110u8, 121u8, 109u8, 110u8, 121u8, 110u8,\n-                        110u8, 122u8, 105u8, 111u8, 99u8, 0u8, 111u8, 106u8, 0u8, 111u8, 106u8,\n-                        115u8, 111u8, 107u8, 97u8, 111u8, 109u8, 0u8, 111u8, 114u8, 0u8, 111u8,\n-                        115u8, 0u8, 111u8, 115u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8,\n-                        112u8, 97u8, 0u8, 112u8, 97u8, 103u8, 112u8, 97u8, 108u8, 112u8, 97u8,\n-                        109u8, 112u8, 97u8, 112u8, 112u8, 97u8, 117u8, 112u8, 99u8, 100u8, 112u8,\n-                        99u8, 109u8, 112u8, 100u8, 99u8, 112u8, 100u8, 116u8, 112u8, 101u8, 111u8,\n-                        112u8, 102u8, 108u8, 112u8, 104u8, 110u8, 112u8, 105u8, 115u8, 112u8,\n-                        107u8, 97u8, 112u8, 107u8, 111u8, 112u8, 108u8, 0u8, 112u8, 109u8, 115u8,\n-                        112u8, 110u8, 116u8, 112u8, 111u8, 110u8, 112u8, 112u8, 97u8, 112u8, 113u8,\n-                        109u8, 112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 114u8, 103u8, 112u8,\n-                        115u8, 0u8, 112u8, 116u8, 0u8, 112u8, 117u8, 117u8, 113u8, 117u8, 0u8,\n-                        113u8, 117u8, 99u8, 113u8, 117u8, 103u8, 114u8, 97u8, 106u8, 114u8, 99u8,\n-                        102u8, 114u8, 101u8, 106u8, 114u8, 103u8, 110u8, 114u8, 104u8, 103u8,\n-                        114u8, 105u8, 97u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8, 114u8, 107u8,\n-                        116u8, 114u8, 109u8, 0u8, 114u8, 109u8, 102u8, 114u8, 109u8, 111u8, 114u8,\n-                        109u8, 116u8, 114u8, 109u8, 117u8, 114u8, 110u8, 0u8, 114u8, 110u8, 103u8,\n-                        114u8, 111u8, 0u8, 114u8, 111u8, 98u8, 114u8, 111u8, 102u8, 114u8, 116u8,\n-                        109u8, 114u8, 117u8, 0u8, 114u8, 117u8, 101u8, 114u8, 117u8, 103u8, 114u8,\n-                        119u8, 0u8, 114u8, 119u8, 107u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8,\n-                        115u8, 97u8, 102u8, 115u8, 97u8, 104u8, 115u8, 97u8, 113u8, 115u8, 97u8,\n-                        115u8, 115u8, 97u8, 116u8, 115u8, 97u8, 118u8, 115u8, 97u8, 122u8, 115u8,\n-                        98u8, 112u8, 115u8, 99u8, 0u8, 115u8, 99u8, 107u8, 115u8, 99u8, 110u8,\n-                        115u8, 99u8, 111u8, 115u8, 100u8, 0u8, 115u8, 100u8, 99u8, 115u8, 100u8,\n-                        104u8, 115u8, 101u8, 0u8, 115u8, 101u8, 102u8, 115u8, 101u8, 104u8, 115u8,\n-                        101u8, 105u8, 115u8, 101u8, 115u8, 115u8, 103u8, 0u8, 115u8, 103u8, 97u8,\n-                        115u8, 103u8, 115u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8,\n-                        105u8, 0u8, 115u8, 105u8, 100u8, 115u8, 107u8, 0u8, 115u8, 107u8, 114u8,\n-                        115u8, 108u8, 0u8, 115u8, 108u8, 105u8, 115u8, 108u8, 121u8, 115u8, 109u8,\n-                        0u8, 115u8, 109u8, 97u8, 115u8, 109u8, 100u8, 115u8, 109u8, 106u8, 115u8,\n-                        109u8, 110u8, 115u8, 109u8, 112u8, 115u8, 109u8, 115u8, 115u8, 110u8, 0u8,\n-                        115u8, 110u8, 98u8, 115u8, 110u8, 107u8, 115u8, 111u8, 0u8, 115u8, 111u8,\n-                        103u8, 115u8, 111u8, 117u8, 115u8, 113u8, 0u8, 115u8, 114u8, 0u8, 115u8,\n-                        114u8, 98u8, 115u8, 114u8, 110u8, 115u8, 114u8, 114u8, 115u8, 114u8, 120u8,\n-                        115u8, 115u8, 0u8, 115u8, 115u8, 121u8, 115u8, 116u8, 0u8, 115u8, 116u8,\n-                        113u8, 115u8, 117u8, 0u8, 115u8, 117u8, 107u8, 115u8, 117u8, 115u8, 115u8,\n-                        118u8, 0u8, 115u8, 119u8, 0u8, 115u8, 119u8, 98u8, 115u8, 119u8, 99u8,\n-                        115u8, 119u8, 103u8, 115u8, 119u8, 118u8, 115u8, 120u8, 110u8, 115u8,\n-                        121u8, 108u8, 115u8, 121u8, 114u8, 115u8, 122u8, 108u8, 116u8, 97u8, 0u8,\n-                        116u8, 97u8, 106u8, 116u8, 98u8, 119u8, 116u8, 99u8, 121u8, 116u8, 100u8,\n-                        100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8, 116u8, 100u8, 117u8,\n-                        116u8, 101u8, 0u8, 116u8, 101u8, 109u8, 116u8, 101u8, 111u8, 116u8, 101u8,\n-                        116u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8, 108u8, 116u8,\n-                        104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8, 105u8, 103u8,\n-                        116u8, 105u8, 118u8, 116u8, 107u8, 0u8, 116u8, 107u8, 108u8, 116u8, 107u8,\n-                        114u8, 116u8, 107u8, 116u8, 116u8, 108u8, 0u8, 116u8, 108u8, 121u8, 116u8,\n-                        109u8, 104u8, 116u8, 110u8, 0u8, 116u8, 111u8, 0u8, 116u8, 111u8, 103u8,\n-                        116u8, 111u8, 107u8, 116u8, 112u8, 105u8, 116u8, 114u8, 0u8, 116u8, 114u8,\n-                        117u8, 116u8, 114u8, 118u8, 116u8, 114u8, 119u8, 116u8, 115u8, 0u8, 116u8,\n-                        115u8, 100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 103u8, 116u8, 115u8,\n-                        106u8, 116u8, 116u8, 0u8, 116u8, 116u8, 106u8, 116u8, 116u8, 115u8, 116u8,\n-                        116u8, 116u8, 116u8, 117u8, 109u8, 116u8, 118u8, 108u8, 116u8, 119u8,\n-                        113u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8, 0u8, 116u8,\n-                        121u8, 118u8, 116u8, 122u8, 109u8, 117u8, 100u8, 105u8, 117u8, 100u8,\n-                        109u8, 117u8, 103u8, 0u8, 117u8, 103u8, 97u8, 117u8, 107u8, 0u8, 117u8,\n-                        108u8, 105u8, 117u8, 109u8, 98u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n-                        117u8, 114u8, 0u8, 117u8, 122u8, 0u8, 118u8, 97u8, 105u8, 118u8, 101u8,\n-                        0u8, 118u8, 101u8, 99u8, 118u8, 101u8, 112u8, 118u8, 105u8, 0u8, 118u8,\n-                        105u8, 99u8, 118u8, 108u8, 115u8, 118u8, 109u8, 102u8, 118u8, 109u8, 119u8,\n-                        118u8, 111u8, 0u8, 118u8, 111u8, 116u8, 118u8, 114u8, 111u8, 118u8, 117u8,\n-                        110u8, 119u8, 97u8, 0u8, 119u8, 97u8, 101u8, 119u8, 97u8, 108u8, 119u8,\n-                        97u8, 114u8, 119u8, 98u8, 112u8, 119u8, 98u8, 113u8, 119u8, 98u8, 114u8,\n-                        119u8, 108u8, 115u8, 119u8, 110u8, 105u8, 119u8, 111u8, 0u8, 119u8, 115u8,\n-                        103u8, 119u8, 116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 97u8, 118u8, 120u8,\n-                        99u8, 111u8, 120u8, 99u8, 114u8, 120u8, 104u8, 0u8, 120u8, 108u8, 99u8,\n-                        120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8, 110u8, 120u8,\n-                        109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8, 111u8, 103u8,\n-                        120u8, 112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 97u8,\n-                        111u8, 121u8, 97u8, 112u8, 121u8, 97u8, 118u8, 121u8, 98u8, 98u8, 121u8,\n-                        105u8, 0u8, 121u8, 111u8, 0u8, 121u8, 114u8, 108u8, 121u8, 117u8, 97u8,\n-                        121u8, 117u8, 101u8, 122u8, 97u8, 0u8, 122u8, 97u8, 103u8, 122u8, 100u8,\n-                        106u8, 122u8, 101u8, 97u8, 122u8, 103u8, 104u8, 122u8, 104u8, 0u8, 122u8,\n-                        104u8, 120u8, 122u8, 107u8, 116u8, 122u8, 108u8, 109u8, 122u8, 109u8,\n-                        105u8, 122u8, 117u8, 0u8, 122u8, 122u8, 97u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        69u8, 84u8, 0u8, 71u8, 69u8, 0u8, 71u8, 72u8, 0u8, 73u8, 68u8, 0u8, 85u8,\n-                        71u8, 0u8, 71u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 73u8, 82u8,\n-                        0u8, 84u8, 78u8, 0u8, 90u8, 65u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8,\n-                        84u8, 78u8, 0u8, 71u8, 72u8, 0u8, 73u8, 81u8, 0u8, 88u8, 75u8, 0u8, 82u8,\n-                        85u8, 0u8, 69u8, 84u8, 0u8, 78u8, 71u8, 0u8, 69u8, 83u8, 0u8, 78u8, 71u8,\n-                        0u8, 73u8, 68u8, 0u8, 84u8, 71u8, 0u8, 69u8, 71u8, 0u8, 73u8, 82u8, 0u8,\n-                        67u8, 76u8, 0u8, 66u8, 79u8, 0u8, 68u8, 90u8, 0u8, 83u8, 65u8, 0u8, 77u8,\n-                        65u8, 0u8, 69u8, 71u8, 0u8, 73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 85u8, 83u8,\n-                        0u8, 69u8, 83u8, 0u8, 67u8, 65u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n-                        66u8, 79u8, 0u8, 65u8, 90u8, 0u8, 82u8, 85u8, 0u8, 80u8, 75u8, 0u8, 73u8,\n-                        68u8, 0u8, 78u8, 80u8, 0u8, 65u8, 84u8, 0u8, 67u8, 77u8, 0u8, 67u8, 77u8,\n-                        0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 67u8, 73u8, 0u8, 66u8, 89u8, 0u8,\n-                        83u8, 68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 67u8,\n-                        77u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 71u8,\n-                        0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n-                        73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 86u8, 85u8, 0u8, 80u8, 72u8, 0u8, 78u8,\n-                        71u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8, 83u8, 78u8, 0u8, 67u8, 77u8,\n-                        0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 77u8, 89u8, 0u8, 86u8, 78u8, 0u8,\n-                        77u8, 76u8, 0u8, 77u8, 76u8, 0u8, 66u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n-                        78u8, 0u8, 73u8, 82u8, 0u8, 67u8, 73u8, 0u8, 70u8, 82u8, 0u8, 73u8, 78u8,\n-                        0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 65u8, 0u8, 76u8, 82u8, 0u8,\n-                        67u8, 77u8, 0u8, 80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 82u8, 85u8, 0u8, 89u8,\n-                        84u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 71u8, 81u8, 0u8, 69u8, 82u8,\n-                        0u8, 67u8, 77u8, 0u8, 77u8, 76u8, 0u8, 69u8, 83u8, 0u8, 85u8, 83u8, 0u8,\n-                        78u8, 71u8, 0u8, 66u8, 68u8, 0u8, 82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 85u8,\n-                        71u8, 0u8, 71u8, 85u8, 0u8, 70u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8, 83u8,\n-                        0u8, 67u8, 65u8, 0u8, 85u8, 83u8, 0u8, 85u8, 83u8, 0u8, 75u8, 72u8, 0u8,\n-                        86u8, 78u8, 0u8, 73u8, 81u8, 0u8, 67u8, 65u8, 0u8, 77u8, 78u8, 0u8, 70u8,\n-                        82u8, 0u8, 69u8, 71u8, 0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8,\n-                        0u8, 85u8, 65u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 83u8, 67u8, 0u8,\n-                        67u8, 90u8, 0u8, 80u8, 76u8, 0u8, 67u8, 65u8, 0u8, 77u8, 77u8, 0u8, 82u8,\n-                        85u8, 0u8, 82u8, 85u8, 0u8, 71u8, 66u8, 0u8, 68u8, 75u8, 0u8, 67u8, 73u8,\n-                        0u8, 85u8, 83u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8, 73u8, 78u8, 0u8,\n-                        68u8, 69u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 78u8, 69u8, 0u8, 78u8,\n-                        71u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 68u8, 69u8,\n-                        0u8, 77u8, 76u8, 0u8, 77u8, 89u8, 0u8, 78u8, 80u8, 0u8, 67u8, 77u8, 0u8,\n-                        77u8, 86u8, 0u8, 83u8, 78u8, 0u8, 66u8, 70u8, 0u8, 66u8, 84u8, 0u8, 75u8,\n-                        69u8, 0u8, 71u8, 72u8, 0u8, 78u8, 71u8, 0u8, 73u8, 84u8, 0u8, 69u8, 71u8,\n-                        0u8, 77u8, 77u8, 0u8, 71u8, 82u8, 0u8, 85u8, 83u8, 0u8, 48u8, 48u8, 49u8,\n-                        69u8, 83u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8, 69u8, 69u8, 0u8, 73u8,\n-                        84u8, 0u8, 69u8, 83u8, 0u8, 67u8, 77u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n-                        0u8, 71u8, 81u8, 0u8, 83u8, 78u8, 0u8, 77u8, 76u8, 0u8, 70u8, 73u8, 0u8,\n-                        83u8, 68u8, 0u8, 80u8, 72u8, 0u8, 83u8, 69u8, 0u8, 70u8, 74u8, 0u8, 70u8,\n-                        79u8, 0u8, 66u8, 74u8, 0u8, 70u8, 82u8, 0u8, 85u8, 83u8, 0u8, 70u8, 82u8,\n-                        0u8, 68u8, 69u8, 0u8, 68u8, 69u8, 0u8, 67u8, 77u8, 0u8, 87u8, 70u8, 0u8,\n-                        71u8, 78u8, 0u8, 78u8, 69u8, 0u8, 73u8, 84u8, 0u8, 78u8, 71u8, 0u8, 83u8,\n-                        68u8, 0u8, 78u8, 76u8, 0u8, 73u8, 69u8, 0u8, 71u8, 72u8, 0u8, 77u8, 68u8,\n-                        0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 73u8, 82u8, 0u8,\n-                        71u8, 70u8, 0u8, 71u8, 66u8, 0u8, 69u8, 84u8, 0u8, 78u8, 80u8, 0u8, 75u8,\n-                        73u8, 0u8, 80u8, 75u8, 0u8, 80u8, 75u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n-                        0u8, 80u8, 89u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n-                        78u8, 76u8, 0u8, 85u8, 65u8, 0u8, 67u8, 89u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n-                        72u8, 0u8, 73u8, 78u8, 0u8, 66u8, 82u8, 0u8, 67u8, 79u8, 0u8, 71u8, 72u8,\n-                        0u8, 75u8, 69u8, 0u8, 73u8, 77u8, 0u8, 78u8, 80u8, 0u8, 67u8, 65u8, 0u8,\n-                        78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 65u8, 70u8, 0u8, 73u8,\n-                        76u8, 0u8, 73u8, 78u8, 0u8, 70u8, 74u8, 0u8, 80u8, 72u8, 0u8, 84u8, 82u8,\n-                        0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8,\n-                        80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 80u8, 71u8, 0u8, 73u8, 78u8, 0u8, 73u8,\n-                        78u8, 0u8, 72u8, 82u8, 0u8, 68u8, 69u8, 0u8, 67u8, 78u8, 0u8, 72u8, 84u8,\n-                        0u8, 72u8, 85u8, 0u8, 67u8, 65u8, 0u8, 65u8, 77u8, 0u8, 78u8, 65u8, 0u8,\n-                        48u8, 48u8, 49u8, 77u8, 89u8, 0u8, 78u8, 71u8, 0u8, 73u8, 68u8, 0u8, 84u8,\n-                        71u8, 0u8, 78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 80u8, 72u8,\n-                        0u8, 73u8, 68u8, 0u8, 82u8, 85u8, 0u8, 48u8, 48u8, 49u8, 73u8, 83u8, 0u8,\n-                        73u8, 84u8, 0u8, 67u8, 65u8, 0u8, 73u8, 76u8, 0u8, 82u8, 85u8, 0u8, 74u8,\n-                        80u8, 0u8, 74u8, 77u8, 0u8, 48u8, 48u8, 49u8, 67u8, 77u8, 0u8, 85u8, 65u8,\n-                        0u8, 84u8, 90u8, 0u8, 78u8, 80u8, 0u8, 68u8, 75u8, 0u8, 73u8, 68u8, 0u8,\n-                        73u8, 68u8, 0u8, 71u8, 69u8, 0u8, 85u8, 90u8, 0u8, 68u8, 90u8, 0u8, 77u8,\n-                        77u8, 0u8, 78u8, 71u8, 0u8, 75u8, 69u8, 0u8, 77u8, 76u8, 0u8, 73u8, 68u8,\n-                        0u8, 82u8, 85u8, 0u8, 78u8, 69u8, 0u8, 78u8, 71u8, 0u8, 90u8, 87u8, 0u8,\n-                        84u8, 90u8, 0u8, 84u8, 71u8, 0u8, 84u8, 72u8, 0u8, 67u8, 86u8, 0u8, 67u8,\n-                        77u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 68u8,\n-                        0u8, 73u8, 68u8, 0u8, 66u8, 82u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8,\n-                        73u8, 78u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8,\n-                        69u8, 0u8, 84u8, 82u8, 0u8, 78u8, 65u8, 0u8, 76u8, 65u8, 0u8, 75u8, 90u8,\n-                        0u8, 67u8, 77u8, 0u8, 71u8, 76u8, 0u8, 75u8, 69u8, 0u8, 75u8, 72u8, 0u8,\n-                        65u8, 79u8, 0u8, 73u8, 78u8, 0u8, 71u8, 87u8, 0u8, 75u8, 82u8, 0u8, 82u8,\n-                        85u8, 0u8, 73u8, 78u8, 0u8, 70u8, 77u8, 0u8, 76u8, 82u8, 0u8, 82u8, 85u8,\n-                        0u8, 83u8, 76u8, 0u8, 80u8, 72u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n-                        73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 67u8, 77u8, 0u8, 68u8, 69u8, 0u8, 77u8,\n-                        89u8, 0u8, 84u8, 82u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 73u8, 68u8,\n-                        0u8, 80u8, 75u8, 0u8, 71u8, 66u8, 0u8, 67u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n-                        84u8, 72u8, 0u8, 80u8, 75u8, 0u8, 75u8, 71u8, 0u8, 77u8, 89u8, 0u8, 77u8,\n-                        89u8, 0u8, 86u8, 65u8, 0u8, 71u8, 82u8, 0u8, 73u8, 76u8, 0u8, 84u8, 90u8,\n-                        0u8, 80u8, 75u8, 0u8, 85u8, 71u8, 0u8, 76u8, 85u8, 0u8, 82u8, 85u8, 0u8,\n-                        73u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n-                        71u8, 0u8, 78u8, 76u8, 0u8, 78u8, 80u8, 0u8, 73u8, 84u8, 0u8, 67u8, 65u8,\n-                        0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 82u8, 0u8, 85u8, 83u8, 0u8,\n-                        73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 67u8, 68u8, 0u8, 76u8, 65u8, 0u8, 67u8,\n-                        68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 82u8, 0u8, 76u8, 84u8, 0u8, 76u8, 86u8,\n-                        0u8, 67u8, 68u8, 0u8, 67u8, 68u8, 0u8, 75u8, 69u8, 0u8, 75u8, 69u8, 0u8,\n-                        73u8, 82u8, 0u8, 76u8, 86u8, 0u8, 84u8, 72u8, 0u8, 67u8, 78u8, 0u8, 84u8,\n-                        82u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8,\n-                        0u8, 73u8, 68u8, 0u8, 71u8, 77u8, 0u8, 75u8, 69u8, 0u8, 77u8, 88u8, 0u8,\n-                        82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 73u8, 68u8, 0u8, 83u8, 76u8, 0u8, 75u8,\n-                        69u8, 0u8, 84u8, 72u8, 0u8, 77u8, 85u8, 0u8, 77u8, 71u8, 0u8, 77u8, 90u8,\n-                        0u8, 67u8, 77u8, 0u8, 78u8, 80u8, 0u8, 84u8, 90u8, 0u8, 77u8, 72u8, 0u8,\n-                        78u8, 90u8, 0u8, 67u8, 65u8, 0u8, 73u8, 68u8, 0u8, 77u8, 75u8, 0u8, 73u8,\n-                        78u8, 0u8, 83u8, 68u8, 0u8, 77u8, 78u8, 0u8, 73u8, 78u8, 0u8, 77u8, 77u8,\n-                        0u8, 82u8, 79u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 66u8, 70u8, 0u8,\n-                        73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 82u8, 85u8, 0u8, 66u8, 68u8, 0u8, 77u8,\n-                        89u8, 0u8, 77u8, 84u8, 0u8, 73u8, 78u8, 0u8, 67u8, 77u8, 0u8, 85u8, 83u8,\n-                        0u8, 80u8, 75u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n-                        85u8, 83u8, 0u8, 90u8, 87u8, 0u8, 77u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n-                        71u8, 0u8, 73u8, 82u8, 0u8, 73u8, 82u8, 0u8, 78u8, 82u8, 0u8, 67u8, 78u8,\n-                        0u8, 73u8, 84u8, 0u8, 78u8, 65u8, 0u8, 78u8, 79u8, 0u8, 77u8, 88u8, 0u8,\n-                        90u8, 87u8, 0u8, 77u8, 90u8, 0u8, 68u8, 69u8, 0u8, 78u8, 80u8, 0u8, 78u8,\n-                        80u8, 0u8, 78u8, 65u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 88u8,\n-                        0u8, 73u8, 68u8, 0u8, 78u8, 85u8, 0u8, 73u8, 78u8, 0u8, 78u8, 76u8, 0u8,\n-                        67u8, 77u8, 0u8, 78u8, 79u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 78u8,\n-                        79u8, 0u8, 84u8, 72u8, 0u8, 73u8, 78u8, 0u8, 83u8, 69u8, 0u8, 71u8, 78u8,\n-                        0u8, 90u8, 65u8, 0u8, 67u8, 65u8, 0u8, 90u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n-                        83u8, 83u8, 0u8, 85u8, 83u8, 0u8, 67u8, 78u8, 0u8, 77u8, 87u8, 0u8, 84u8,\n-                        90u8, 0u8, 85u8, 71u8, 0u8, 71u8, 72u8, 0u8, 70u8, 82u8, 0u8, 67u8, 65u8,\n-                        0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 69u8, 84u8, 0u8, 73u8, 78u8, 0u8,\n-                        71u8, 69u8, 0u8, 85u8, 83u8, 0u8, 77u8, 78u8, 0u8, 49u8, 52u8, 51u8, 73u8,\n-                        78u8, 0u8, 80u8, 72u8, 0u8, 73u8, 82u8, 0u8, 80u8, 72u8, 0u8, 65u8, 87u8,\n-                        0u8, 80u8, 87u8, 0u8, 70u8, 82u8, 0u8, 78u8, 71u8, 0u8, 85u8, 83u8, 0u8,\n-                        67u8, 65u8, 0u8, 73u8, 82u8, 0u8, 68u8, 69u8, 0u8, 76u8, 66u8, 0u8, 83u8,\n-                        66u8, 0u8, 73u8, 78u8, 0u8, 75u8, 69u8, 0u8, 80u8, 76u8, 0u8, 73u8, 84u8,\n-                        0u8, 71u8, 82u8, 0u8, 70u8, 77u8, 0u8, 73u8, 78u8, 0u8, 67u8, 65u8, 0u8,\n-                        80u8, 75u8, 0u8, 73u8, 82u8, 0u8, 48u8, 48u8, 49u8, 65u8, 70u8, 0u8, 66u8,\n-                        82u8, 0u8, 71u8, 65u8, 0u8, 80u8, 69u8, 0u8, 71u8, 84u8, 0u8, 69u8, 67u8,\n-                        0u8, 73u8, 78u8, 0u8, 82u8, 69u8, 0u8, 73u8, 68u8, 0u8, 73u8, 84u8, 0u8,\n-                        77u8, 77u8, 0u8, 73u8, 78u8, 0u8, 77u8, 65u8, 0u8, 78u8, 80u8, 0u8, 66u8,\n-                        68u8, 0u8, 67u8, 72u8, 0u8, 70u8, 73u8, 0u8, 67u8, 72u8, 0u8, 73u8, 82u8,\n-                        0u8, 83u8, 69u8, 0u8, 66u8, 73u8, 0u8, 77u8, 90u8, 0u8, 82u8, 79u8, 0u8,\n-                        73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 70u8, 74u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n-                        65u8, 0u8, 83u8, 66u8, 0u8, 82u8, 87u8, 0u8, 84u8, 90u8, 0u8, 74u8, 80u8,\n-                        0u8, 73u8, 78u8, 0u8, 71u8, 72u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8,\n-                        73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8, 0u8, 84u8,\n-                        90u8, 0u8, 73u8, 84u8, 0u8, 73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 71u8, 66u8,\n-                        0u8, 80u8, 75u8, 0u8, 73u8, 84u8, 0u8, 73u8, 82u8, 0u8, 78u8, 79u8, 0u8,\n-                        67u8, 73u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 76u8, 0u8, 67u8,\n-                        70u8, 0u8, 73u8, 69u8, 0u8, 76u8, 84u8, 0u8, 77u8, 65u8, 0u8, 77u8, 77u8,\n-                        0u8, 76u8, 75u8, 0u8, 69u8, 84u8, 0u8, 83u8, 75u8, 0u8, 80u8, 75u8, 0u8,\n-                        83u8, 73u8, 0u8, 80u8, 76u8, 0u8, 73u8, 68u8, 0u8, 87u8, 83u8, 0u8, 83u8,\n-                        69u8, 0u8, 65u8, 79u8, 0u8, 83u8, 69u8, 0u8, 70u8, 73u8, 0u8, 73u8, 76u8,\n-                        0u8, 70u8, 73u8, 0u8, 90u8, 87u8, 0u8, 77u8, 89u8, 0u8, 77u8, 76u8, 0u8,\n-                        83u8, 79u8, 0u8, 85u8, 90u8, 0u8, 84u8, 72u8, 0u8, 65u8, 76u8, 0u8, 82u8,\n-                        83u8, 0u8, 73u8, 78u8, 0u8, 83u8, 82u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8,\n-                        0u8, 90u8, 65u8, 0u8, 69u8, 82u8, 0u8, 90u8, 65u8, 0u8, 68u8, 69u8, 0u8,\n-                        73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 71u8, 78u8, 0u8, 83u8, 69u8, 0u8, 84u8,\n-                        90u8, 0u8, 89u8, 84u8, 0u8, 67u8, 68u8, 0u8, 68u8, 69u8, 0u8, 73u8, 78u8,\n-                        0u8, 73u8, 68u8, 0u8, 66u8, 68u8, 0u8, 73u8, 81u8, 0u8, 80u8, 76u8, 0u8,\n-                        73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n-                        78u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 77u8, 89u8, 0u8, 73u8, 78u8,\n-                        0u8, 83u8, 76u8, 0u8, 85u8, 71u8, 0u8, 84u8, 76u8, 0u8, 84u8, 74u8, 0u8,\n-                        84u8, 72u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 69u8,\n-                        84u8, 0u8, 69u8, 82u8, 0u8, 78u8, 71u8, 0u8, 84u8, 77u8, 0u8, 84u8, 75u8,\n-                        0u8, 65u8, 90u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 65u8, 90u8, 0u8,\n-                        78u8, 69u8, 0u8, 90u8, 65u8, 0u8, 84u8, 79u8, 0u8, 77u8, 87u8, 0u8, 48u8,\n-                        48u8, 49u8, 80u8, 71u8, 0u8, 84u8, 82u8, 0u8, 84u8, 82u8, 0u8, 84u8, 87u8,\n-                        0u8, 80u8, 75u8, 0u8, 90u8, 65u8, 0u8, 71u8, 82u8, 0u8, 78u8, 80u8, 0u8,\n-                        80u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 85u8, 71u8, 0u8, 84u8,\n-                        72u8, 0u8, 65u8, 90u8, 0u8, 77u8, 87u8, 0u8, 84u8, 86u8, 0u8, 78u8, 69u8,\n-                        0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 70u8, 0u8, 82u8, 85u8, 0u8,\n-                        77u8, 65u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 67u8, 78u8, 0u8, 83u8,\n-                        89u8, 0u8, 85u8, 65u8, 0u8, 70u8, 77u8, 0u8, 65u8, 79u8, 0u8, 73u8, 78u8,\n-                        0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 85u8, 90u8, 0u8, 76u8, 82u8, 0u8,\n-                        90u8, 65u8, 0u8, 73u8, 84u8, 0u8, 82u8, 85u8, 0u8, 86u8, 78u8, 0u8, 83u8,\n-                        88u8, 0u8, 66u8, 69u8, 0u8, 68u8, 69u8, 0u8, 77u8, 90u8, 0u8, 48u8, 48u8,\n-                        49u8, 82u8, 85u8, 0u8, 69u8, 69u8, 0u8, 84u8, 90u8, 0u8, 66u8, 69u8, 0u8,\n-                        67u8, 72u8, 0u8, 69u8, 84u8, 0u8, 80u8, 72u8, 0u8, 65u8, 85u8, 0u8, 73u8,\n-                        78u8, 0u8, 73u8, 78u8, 0u8, 87u8, 70u8, 0u8, 75u8, 77u8, 0u8, 83u8, 78u8,\n-                        0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 66u8, 82u8, 0u8,\n-                        85u8, 90u8, 0u8, 84u8, 82u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8, 0u8, 84u8,\n-                        82u8, 0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 83u8, 65u8,\n-                        0u8, 73u8, 78u8, 0u8, 85u8, 71u8, 0u8, 73u8, 82u8, 0u8, 89u8, 69u8, 0u8,\n-                        78u8, 80u8, 0u8, 77u8, 90u8, 0u8, 70u8, 77u8, 0u8, 67u8, 77u8, 0u8, 67u8,\n-                        77u8, 0u8, 48u8, 48u8, 49u8, 78u8, 71u8, 0u8, 66u8, 82u8, 0u8, 77u8, 88u8,\n-                        0u8, 72u8, 75u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 75u8, 77u8, 0u8,\n-                        78u8, 76u8, 0u8, 77u8, 65u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 67u8,\n-                        78u8, 0u8, 84u8, 71u8, 0u8, 77u8, 89u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8,\n-                        0u8,\n-                    ])\n-                },\n-            )\n-        },\n-        ls2r: unsafe {\n-            #[allow(unused_unsafe)]\n-            ::zerovec::ZeroMap2d::from_parts_unchecked(\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        97u8, 114u8, 99u8, 97u8, 122u8, 0u8, 99u8, 117u8, 0u8, 101u8, 110u8, 0u8,\n-                        102u8, 102u8, 0u8, 103u8, 114u8, 99u8, 107u8, 107u8, 0u8, 107u8, 117u8,\n-                        0u8, 107u8, 121u8, 0u8, 108u8, 105u8, 102u8, 109u8, 97u8, 110u8, 109u8,\n-                        110u8, 0u8, 112u8, 97u8, 0u8, 112u8, 97u8, 108u8, 115u8, 100u8, 0u8, 116u8,\n-                        103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8, 117u8, 122u8, 0u8,\n-                        121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        2u8, 0u8, 0u8, 0u8, 3u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8,\n-                        0u8, 6u8, 0u8, 0u8, 0u8, 7u8, 0u8, 0u8, 0u8, 8u8, 0u8, 0u8, 0u8, 10u8, 0u8,\n-                        0u8, 0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8,\n-                        15u8, 0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 20u8, 0u8,\n-                        0u8, 0u8, 21u8, 0u8, 0u8, 0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8,\n-                        24u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        78u8, 98u8, 97u8, 116u8, 80u8, 97u8, 108u8, 109u8, 65u8, 114u8, 97u8, 98u8,\n-                        71u8, 108u8, 97u8, 103u8, 83u8, 104u8, 97u8, 119u8, 65u8, 100u8, 108u8,\n-                        109u8, 76u8, 105u8, 110u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8,\n-                        97u8, 98u8, 89u8, 101u8, 122u8, 105u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8,\n-                        116u8, 110u8, 76u8, 105u8, 109u8, 98u8, 78u8, 107u8, 111u8, 111u8, 77u8,\n-                        111u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 80u8, 104u8, 108u8, 112u8,\n-                        68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 111u8, 106u8, 83u8, 105u8, 110u8,\n-                        100u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8,\n-                        118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 66u8,\n-                        111u8, 112u8, 111u8, 72u8, 97u8, 110u8, 98u8, 72u8, 97u8, 110u8, 116u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        74u8, 79u8, 0u8, 83u8, 89u8, 0u8, 73u8, 82u8, 0u8, 66u8, 71u8, 0u8, 71u8,\n-                        66u8, 0u8, 71u8, 78u8, 0u8, 71u8, 82u8, 0u8, 67u8, 78u8, 0u8, 73u8, 81u8,\n-                        0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n-                        71u8, 78u8, 0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n-                        78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8, 90u8,\n-                        0u8, 78u8, 80u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 84u8, 87u8, 0u8,\n-                        84u8, 87u8, 0u8, 84u8, 87u8, 0u8,\n-                    ])\n-                },\n-            )\n-        },\n-    };"}, {"sha": "57f7496dcff8b8bbfe7ceee7abdf43cb4ea5862f", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/likelysubtags_v1/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,6 @@\n+// @generated\n+type DataStruct = < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker as :: icu_provider :: DataMarker > :: Yokeable ;\n+pub fn lookup(locale: &icu_provider::DataLocale) -> Option<&'static DataStruct> {\n+    locale.is_empty().then(|| &UND)\n+}\n+static UND: DataStruct = include!(\"und.rs.data\");"}, {"sha": "4fd177834e9c464e4cd6f293bf22c5d445542e18", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/likelysubtags_v1/und.rs.data", "status": "added", "additions": 728, "deletions": 0, "changes": 728, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Flikelysubtags_v1%2Fund.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,728 @@\n+::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1 {\n+    l2s: unsafe {\n+        #[allow(unused_unsafe)]\n+        ::zerovec::ZeroMap::from_parts_unchecked(\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    97u8, 98u8, 0u8, 97u8, 98u8, 113u8, 97u8, 100u8, 112u8, 97u8, 100u8, 121u8,\n+                    97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 104u8, 111u8, 97u8, 106u8,\n+                    116u8, 97u8, 107u8, 107u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8, 97u8,\n+                    112u8, 99u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n+                    114u8, 113u8, 97u8, 114u8, 115u8, 97u8, 114u8, 121u8, 97u8, 114u8, 122u8,\n+                    97u8, 115u8, 0u8, 97u8, 115u8, 101u8, 97u8, 118u8, 0u8, 97u8, 118u8, 108u8,\n+                    97u8, 119u8, 97u8, 98u8, 97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 112u8,\n+                    98u8, 97u8, 120u8, 98u8, 99u8, 113u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8,\n+                    98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n+                    0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n+                    104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 106u8, 105u8,\n+                    98u8, 106u8, 106u8, 98u8, 108u8, 116u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8,\n+                    98u8, 112u8, 121u8, 98u8, 113u8, 105u8, 98u8, 114u8, 97u8, 98u8, 114u8,\n+                    104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 113u8, 98u8, 115u8, 116u8, 98u8,\n+                    116u8, 118u8, 98u8, 117u8, 97u8, 98u8, 121u8, 110u8, 99u8, 99u8, 112u8,\n+                    99u8, 101u8, 0u8, 99u8, 104u8, 109u8, 99u8, 104u8, 114u8, 99u8, 106u8,\n+                    97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 109u8, 103u8, 99u8,\n+                    111u8, 112u8, 99u8, 114u8, 0u8, 99u8, 114u8, 104u8, 99u8, 114u8, 107u8,\n+                    99u8, 114u8, 108u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8,\n+                    0u8, 99u8, 118u8, 0u8, 100u8, 97u8, 114u8, 100u8, 99u8, 99u8, 100u8, 103u8,\n+                    108u8, 100u8, 109u8, 102u8, 100u8, 111u8, 105u8, 100u8, 114u8, 104u8,\n+                    100u8, 114u8, 115u8, 100u8, 116u8, 121u8, 100u8, 118u8, 0u8, 100u8, 122u8,\n+                    0u8, 101u8, 103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8,\n+                    115u8, 103u8, 101u8, 116u8, 116u8, 102u8, 97u8, 0u8, 102u8, 105u8, 97u8,\n+                    102u8, 117u8, 98u8, 103u8, 97u8, 110u8, 103u8, 98u8, 109u8, 103u8, 98u8,\n+                    122u8, 103u8, 101u8, 122u8, 103u8, 103u8, 110u8, 103u8, 106u8, 107u8,\n+                    103u8, 106u8, 117u8, 103u8, 108u8, 107u8, 103u8, 109u8, 118u8, 103u8,\n+                    111u8, 102u8, 103u8, 111u8, 109u8, 103u8, 111u8, 110u8, 103u8, 111u8,\n+                    116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 117u8, 0u8, 103u8,\n+                    118u8, 114u8, 103u8, 119u8, 99u8, 103u8, 119u8, 116u8, 104u8, 97u8, 107u8,\n+                    104u8, 97u8, 122u8, 104u8, 100u8, 121u8, 104u8, 101u8, 0u8, 104u8, 105u8,\n+                    0u8, 104u8, 108u8, 117u8, 104u8, 109u8, 100u8, 104u8, 110u8, 100u8, 104u8,\n+                    110u8, 101u8, 104u8, 110u8, 106u8, 104u8, 110u8, 111u8, 104u8, 111u8, 99u8,\n+                    104u8, 111u8, 106u8, 104u8, 115u8, 110u8, 104u8, 121u8, 0u8, 105u8, 105u8,\n+                    0u8, 105u8, 110u8, 104u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 106u8,\n+                    97u8, 0u8, 106u8, 105u8, 0u8, 106u8, 109u8, 108u8, 107u8, 97u8, 0u8, 107u8,\n+                    97u8, 97u8, 107u8, 97u8, 119u8, 107u8, 98u8, 100u8, 107u8, 98u8, 121u8,\n+                    107u8, 100u8, 116u8, 107u8, 102u8, 114u8, 107u8, 102u8, 121u8, 107u8,\n+                    104u8, 98u8, 107u8, 104u8, 110u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8,\n+                    107u8, 106u8, 103u8, 107u8, 107u8, 0u8, 107u8, 109u8, 0u8, 107u8, 110u8,\n+                    0u8, 107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8,\n+                    113u8, 121u8, 107u8, 114u8, 99u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n+                    107u8, 116u8, 98u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8, 118u8,\n+                    120u8, 107u8, 120u8, 99u8, 107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8,\n+                    120u8, 112u8, 107u8, 121u8, 0u8, 107u8, 122u8, 104u8, 108u8, 97u8, 98u8,\n+                    108u8, 97u8, 100u8, 108u8, 97u8, 104u8, 108u8, 98u8, 101u8, 108u8, 99u8,\n+                    112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8, 108u8, 105u8, 102u8,\n+                    108u8, 105u8, 115u8, 108u8, 107u8, 105u8, 108u8, 109u8, 110u8, 108u8,\n+                    111u8, 0u8, 108u8, 114u8, 99u8, 108u8, 117u8, 122u8, 108u8, 119u8, 108u8,\n+                    108u8, 122u8, 104u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 100u8,\n+                    101u8, 109u8, 100u8, 102u8, 109u8, 100u8, 120u8, 109u8, 102u8, 97u8, 109u8,\n+                    103u8, 112u8, 109u8, 107u8, 0u8, 109u8, 107u8, 105u8, 109u8, 108u8, 0u8,\n+                    109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8, 114u8,\n+                    0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8, 111u8, 109u8,\n+                    116u8, 114u8, 109u8, 118u8, 121u8, 109u8, 119u8, 114u8, 109u8, 119u8,\n+                    119u8, 109u8, 121u8, 0u8, 109u8, 121u8, 109u8, 109u8, 121u8, 118u8, 109u8,\n+                    121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 110u8, 110u8, 101u8, 0u8,\n+                    110u8, 101u8, 119u8, 110u8, 110u8, 112u8, 110u8, 111u8, 100u8, 110u8,\n+                    111u8, 101u8, 110u8, 111u8, 110u8, 110u8, 113u8, 111u8, 110u8, 115u8,\n+                    107u8, 110u8, 115u8, 116u8, 111u8, 106u8, 0u8, 111u8, 106u8, 115u8, 111u8,\n+                    114u8, 0u8, 111u8, 114u8, 117u8, 111u8, 115u8, 0u8, 111u8, 115u8, 97u8,\n+                    111u8, 116u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8, 112u8, 97u8,\n+                    0u8, 112u8, 97u8, 108u8, 112u8, 101u8, 111u8, 112u8, 104u8, 108u8, 112u8,\n+                    104u8, 110u8, 112u8, 107u8, 97u8, 112u8, 110u8, 116u8, 112u8, 112u8, 97u8,\n+                    112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 115u8, 0u8, 114u8, 97u8,\n+                    106u8, 114u8, 104u8, 103u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8,\n+                    114u8, 107u8, 116u8, 114u8, 109u8, 116u8, 114u8, 117u8, 0u8, 114u8, 117u8,\n+                    101u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8, 115u8, 97u8, 104u8, 115u8,\n+                    97u8, 116u8, 115u8, 97u8, 122u8, 115u8, 99u8, 107u8, 115u8, 99u8, 108u8,\n+                    115u8, 100u8, 0u8, 115u8, 100u8, 104u8, 115u8, 103u8, 97u8, 115u8, 103u8,\n+                    119u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8, 104u8, 117u8,\n+                    115u8, 105u8, 0u8, 115u8, 107u8, 114u8, 115u8, 109u8, 112u8, 115u8, 111u8,\n+                    103u8, 115u8, 111u8, 117u8, 115u8, 114u8, 0u8, 115u8, 114u8, 98u8, 115u8,\n+                    114u8, 120u8, 115u8, 119u8, 98u8, 115u8, 119u8, 118u8, 115u8, 121u8, 108u8,\n+                    115u8, 121u8, 114u8, 116u8, 97u8, 0u8, 116u8, 97u8, 106u8, 116u8, 99u8,\n+                    121u8, 116u8, 100u8, 100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8,\n+                    116u8, 101u8, 0u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8,\n+                    108u8, 116u8, 104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8,\n+                    105u8, 103u8, 116u8, 107u8, 116u8, 116u8, 114u8, 119u8, 116u8, 115u8,\n+                    100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 106u8, 116u8, 116u8, 0u8, 116u8,\n+                    116u8, 115u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8,\n+                    118u8, 117u8, 100u8, 105u8, 117u8, 100u8, 109u8, 117u8, 103u8, 0u8, 117u8,\n+                    103u8, 97u8, 117u8, 107u8, 0u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n+                    117u8, 114u8, 0u8, 118u8, 97u8, 105u8, 119u8, 97u8, 108u8, 119u8, 98u8,\n+                    113u8, 119u8, 98u8, 114u8, 119u8, 110u8, 105u8, 119u8, 115u8, 103u8, 119u8,\n+                    116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 99u8, 111u8, 120u8, 99u8, 114u8,\n+                    120u8, 108u8, 99u8, 120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8,\n+                    110u8, 120u8, 109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8,\n+                    112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 105u8, 0u8,\n+                    121u8, 117u8, 101u8, 122u8, 100u8, 106u8, 122u8, 103u8, 104u8, 122u8,\n+                    104u8, 0u8, 122u8, 104u8, 120u8, 122u8, 107u8, 116u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 84u8, 105u8, 98u8,\n+                    116u8, 67u8, 121u8, 114u8, 108u8, 65u8, 118u8, 115u8, 116u8, 65u8, 114u8,\n+                    97u8, 98u8, 65u8, 104u8, 111u8, 109u8, 65u8, 114u8, 97u8, 98u8, 88u8,\n+                    115u8, 117u8, 120u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8, 105u8,\n+                    65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8,\n+                    65u8, 114u8, 109u8, 105u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n+                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 66u8, 101u8, 110u8,\n+                    103u8, 83u8, 103u8, 110u8, 119u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8,\n+                    97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 65u8,\n+                    114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 66u8, 97u8, 109u8, 117u8,\n+                    69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8,\n+                    98u8, 84u8, 97u8, 109u8, 108u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8,\n+                    118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n+                    114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8, 68u8, 101u8, 118u8, 97u8,\n+                    68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8,\n+                    105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 118u8, 116u8, 66u8, 101u8,\n+                    110u8, 103u8, 84u8, 105u8, 98u8, 116u8, 66u8, 101u8, 110u8, 103u8, 65u8,\n+                    114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8,\n+                    101u8, 118u8, 97u8, 66u8, 97u8, 115u8, 115u8, 69u8, 116u8, 104u8, 105u8,\n+                    68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n+                    105u8, 67u8, 97u8, 107u8, 109u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8,\n+                    114u8, 108u8, 67u8, 104u8, 101u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8,\n+                    104u8, 97u8, 109u8, 65u8, 114u8, 97u8, 98u8, 83u8, 111u8, 121u8, 111u8,\n+                    67u8, 111u8, 112u8, 116u8, 67u8, 97u8, 110u8, 115u8, 67u8, 121u8, 114u8,\n+                    108u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8,\n+                    110u8, 115u8, 80u8, 97u8, 117u8, 99u8, 67u8, 121u8, 114u8, 108u8, 67u8,\n+                    121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8,\n+                    65u8, 114u8, 97u8, 98u8, 77u8, 101u8, 100u8, 102u8, 68u8, 101u8, 118u8,\n+                    97u8, 77u8, 111u8, 110u8, 103u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8,\n+                    118u8, 97u8, 84u8, 104u8, 97u8, 97u8, 84u8, 105u8, 98u8, 116u8, 69u8,\n+                    103u8, 121u8, 112u8, 75u8, 97u8, 108u8, 105u8, 71u8, 114u8, 101u8, 107u8,\n+                    71u8, 111u8, 110u8, 109u8, 73u8, 116u8, 97u8, 108u8, 65u8, 114u8, 97u8,\n+                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n+                    115u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8,\n+                    104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 65u8,\n+                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8,\n+                    69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8, 97u8, 84u8, 101u8, 108u8,\n+                    117u8, 71u8, 111u8, 116u8, 104u8, 67u8, 112u8, 114u8, 116u8, 66u8, 101u8,\n+                    110u8, 103u8, 71u8, 117u8, 106u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n+                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 65u8,\n+                    114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 72u8, 101u8, 98u8, 114u8,\n+                    68u8, 101u8, 118u8, 97u8, 72u8, 108u8, 117u8, 119u8, 80u8, 108u8, 114u8,\n+                    100u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8,\n+                    110u8, 112u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 68u8,\n+                    101u8, 118u8, 97u8, 72u8, 97u8, 110u8, 115u8, 65u8, 114u8, 109u8, 110u8,\n+                    89u8, 105u8, 105u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 97u8, 110u8,\n+                    115u8, 72u8, 101u8, 98u8, 114u8, 74u8, 112u8, 97u8, 110u8, 72u8, 101u8,\n+                    98u8, 114u8, 68u8, 101u8, 118u8, 97u8, 71u8, 101u8, 111u8, 114u8, 67u8,\n+                    121u8, 114u8, 108u8, 75u8, 97u8, 119u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n+                    65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 68u8, 101u8, 118u8,\n+                    97u8, 68u8, 101u8, 118u8, 97u8, 84u8, 97u8, 108u8, 117u8, 68u8, 101u8,\n+                    118u8, 97u8, 77u8, 121u8, 109u8, 114u8, 65u8, 114u8, 97u8, 98u8, 76u8,\n+                    97u8, 111u8, 111u8, 67u8, 121u8, 114u8, 108u8, 75u8, 104u8, 109u8, 114u8,\n+                    75u8, 110u8, 100u8, 97u8, 75u8, 111u8, 114u8, 101u8, 67u8, 121u8, 114u8,\n+                    108u8, 68u8, 101u8, 118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8,\n+                    114u8, 108u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 69u8,\n+                    116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8,\n+                    65u8, 114u8, 97u8, 98u8, 69u8, 116u8, 104u8, 105u8, 68u8, 101u8, 118u8,\n+                    97u8, 84u8, 104u8, 97u8, 105u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n+                    114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 76u8, 105u8, 110u8, 97u8, 72u8,\n+                    101u8, 98u8, 114u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8,\n+                    84u8, 104u8, 97u8, 105u8, 76u8, 101u8, 112u8, 99u8, 67u8, 121u8, 114u8,\n+                    108u8, 68u8, 101u8, 118u8, 97u8, 76u8, 105u8, 115u8, 117u8, 65u8, 114u8,\n+                    97u8, 98u8, 84u8, 101u8, 108u8, 117u8, 76u8, 97u8, 111u8, 111u8, 65u8,\n+                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 84u8, 104u8, 97u8, 105u8, 72u8,\n+                    97u8, 110u8, 115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n+                    65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 69u8, 116u8, 104u8,\n+                    105u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8,\n+                    114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 77u8, 108u8, 121u8, 109u8, 67u8,\n+                    121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 77u8, 121u8, 109u8, 114u8,\n+                    68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 67u8, 121u8, 114u8,\n+                    108u8, 77u8, 114u8, 111u8, 111u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8,\n+                    97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 109u8, 110u8, 112u8, 77u8,\n+                    121u8, 109u8, 114u8, 69u8, 116u8, 104u8, 105u8, 67u8, 121u8, 114u8, 108u8,\n+                    77u8, 97u8, 110u8, 100u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8,\n+                    115u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 87u8, 99u8,\n+                    104u8, 111u8, 76u8, 97u8, 110u8, 97u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n+                    117u8, 110u8, 114u8, 78u8, 107u8, 111u8, 111u8, 67u8, 97u8, 110u8, 115u8,\n+                    84u8, 110u8, 115u8, 97u8, 67u8, 97u8, 110u8, 115u8, 67u8, 97u8, 110u8,\n+                    115u8, 79u8, 114u8, 121u8, 97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8,\n+                    114u8, 108u8, 79u8, 115u8, 103u8, 101u8, 65u8, 114u8, 97u8, 98u8, 79u8,\n+                    114u8, 107u8, 104u8, 79u8, 117u8, 103u8, 114u8, 71u8, 117u8, 114u8, 117u8,\n+                    80u8, 104u8, 108u8, 105u8, 88u8, 112u8, 101u8, 111u8, 65u8, 114u8, 97u8,\n+                    98u8, 80u8, 104u8, 110u8, 120u8, 66u8, 114u8, 97u8, 104u8, 71u8, 114u8,\n+                    101u8, 107u8, 68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 97u8, 114u8, 65u8,\n+                    114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8, 97u8, 82u8,\n+                    111u8, 104u8, 103u8, 84u8, 102u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n+                    66u8, 101u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n+                    108u8, 67u8, 121u8, 114u8, 108u8, 75u8, 97u8, 110u8, 97u8, 68u8, 101u8,\n+                    118u8, 97u8, 67u8, 121u8, 114u8, 108u8, 79u8, 108u8, 99u8, 107u8, 83u8,\n+                    97u8, 117u8, 114u8, 68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8,\n+                    65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 79u8, 103u8, 97u8, 109u8,\n+                    69u8, 116u8, 104u8, 105u8, 84u8, 102u8, 110u8, 103u8, 77u8, 121u8, 109u8,\n+                    114u8, 65u8, 114u8, 97u8, 98u8, 83u8, 105u8, 110u8, 104u8, 65u8, 114u8,\n+                    97u8, 98u8, 83u8, 97u8, 109u8, 114u8, 83u8, 111u8, 103u8, 100u8, 84u8,\n+                    104u8, 97u8, 105u8, 67u8, 121u8, 114u8, 108u8, 83u8, 111u8, 114u8, 97u8,\n+                    68u8, 101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 68u8, 101u8, 118u8,\n+                    97u8, 66u8, 101u8, 110u8, 103u8, 83u8, 121u8, 114u8, 99u8, 84u8, 97u8,\n+                    109u8, 108u8, 68u8, 101u8, 118u8, 97u8, 75u8, 110u8, 100u8, 97u8, 84u8,\n+                    97u8, 108u8, 101u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8,\n+                    84u8, 101u8, 108u8, 117u8, 67u8, 121u8, 114u8, 108u8, 84u8, 104u8, 97u8,\n+                    105u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8, 118u8, 97u8, 68u8, 101u8,\n+                    118u8, 97u8, 69u8, 116u8, 104u8, 105u8, 69u8, 116u8, 104u8, 105u8, 68u8,\n+                    101u8, 118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 71u8, 114u8, 101u8, 107u8,\n+                    68u8, 101u8, 118u8, 97u8, 84u8, 105u8, 98u8, 116u8, 67u8, 121u8, 114u8,\n+                    108u8, 84u8, 104u8, 97u8, 105u8, 84u8, 97u8, 110u8, 103u8, 84u8, 111u8,\n+                    116u8, 111u8, 67u8, 121u8, 114u8, 108u8, 65u8, 103u8, 104u8, 98u8, 67u8,\n+                    121u8, 114u8, 108u8, 65u8, 114u8, 97u8, 98u8, 85u8, 103u8, 97u8, 114u8,\n+                    67u8, 121u8, 114u8, 108u8, 66u8, 101u8, 110u8, 103u8, 66u8, 101u8, 110u8,\n+                    103u8, 65u8, 114u8, 97u8, 98u8, 86u8, 97u8, 105u8, 105u8, 69u8, 116u8,\n+                    104u8, 105u8, 84u8, 101u8, 108u8, 117u8, 68u8, 101u8, 118u8, 97u8, 65u8,\n+                    114u8, 97u8, 98u8, 71u8, 111u8, 110u8, 103u8, 68u8, 101u8, 118u8, 97u8,\n+                    72u8, 97u8, 110u8, 115u8, 67u8, 104u8, 114u8, 115u8, 67u8, 97u8, 114u8,\n+                    105u8, 76u8, 121u8, 99u8, 105u8, 76u8, 121u8, 100u8, 105u8, 71u8, 101u8,\n+                    111u8, 114u8, 77u8, 97u8, 110u8, 105u8, 77u8, 101u8, 114u8, 99u8, 78u8,\n+                    97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 80u8, 114u8, 116u8, 105u8,\n+                    83u8, 97u8, 114u8, 98u8, 68u8, 101u8, 118u8, 97u8, 72u8, 101u8, 98u8,\n+                    114u8, 72u8, 97u8, 110u8, 116u8, 65u8, 114u8, 97u8, 98u8, 84u8, 102u8,\n+                    110u8, 103u8, 72u8, 97u8, 110u8, 115u8, 78u8, 115u8, 104u8, 117u8, 75u8,\n+                    105u8, 116u8, 115u8,\n+                ])\n+            },\n+        )\n+    },\n+    lr2s: unsafe {\n+        #[allow(unused_unsafe)]\n+        ::zerovec::ZeroMap2d::from_parts_unchecked(\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    97u8, 122u8, 0u8, 104u8, 97u8, 0u8, 107u8, 107u8, 0u8, 107u8, 117u8, 0u8,\n+                    107u8, 121u8, 0u8, 109u8, 97u8, 110u8, 109u8, 110u8, 0u8, 109u8, 115u8,\n+                    0u8, 112u8, 97u8, 0u8, 114u8, 105u8, 102u8, 115u8, 100u8, 0u8, 115u8,\n+                    114u8, 0u8, 116u8, 103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8,\n+                    117u8, 122u8, 0u8, 121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    3u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 10u8, 0u8, 0u8,\n+                    0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 15u8,\n+                    0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                    0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 26u8,\n+                    0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8, 29u8, 0u8, 0u8, 0u8, 44u8, 0u8, 0u8,\n+                    0u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    73u8, 81u8, 0u8, 73u8, 82u8, 0u8, 82u8, 85u8, 0u8, 67u8, 77u8, 0u8, 83u8,\n+                    68u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 73u8, 82u8, 0u8, 77u8, 78u8,\n+                    0u8, 76u8, 66u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 71u8, 78u8, 0u8,\n+                    67u8, 78u8, 0u8, 67u8, 67u8, 0u8, 80u8, 75u8, 0u8, 78u8, 76u8, 0u8, 73u8,\n+                    78u8, 0u8, 77u8, 69u8, 0u8, 82u8, 79u8, 0u8, 82u8, 85u8, 0u8, 84u8, 82u8,\n+                    0u8, 80u8, 75u8, 0u8, 75u8, 90u8, 0u8, 77u8, 78u8, 0u8, 78u8, 80u8, 0u8,\n+                    65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 65u8, 85u8, 0u8, 66u8,\n+                    78u8, 0u8, 71u8, 66u8, 0u8, 71u8, 70u8, 0u8, 72u8, 75u8, 0u8, 73u8, 68u8,\n+                    0u8, 77u8, 79u8, 0u8, 80u8, 65u8, 0u8, 80u8, 70u8, 0u8, 80u8, 72u8, 0u8,\n+                    83u8, 82u8, 0u8, 84u8, 72u8, 0u8, 84u8, 87u8, 0u8, 85u8, 83u8, 0u8, 86u8,\n+                    78u8, 0u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8,\n+                    108u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n+                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8,\n+                    98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8,\n+                    110u8, 78u8, 107u8, 111u8, 111u8, 77u8, 111u8, 110u8, 103u8, 65u8, 114u8,\n+                    97u8, 98u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8, 116u8, 110u8, 68u8, 101u8,\n+                    118u8, 97u8, 76u8, 97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 76u8,\n+                    97u8, 116u8, 110u8, 76u8, 97u8, 116u8, 110u8, 65u8, 114u8, 97u8, 98u8,\n+                    67u8, 121u8, 114u8, 108u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8, 118u8,\n+                    97u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 72u8, 97u8,\n+                    110u8, 115u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n+                    97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n+                    72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8,\n+                    116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8,\n+                    110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8, 72u8,\n+                    97u8, 110u8, 116u8, 72u8, 97u8, 110u8, 116u8,\n+                ])\n+            },\n+        )\n+    },\n+    l2r: unsafe {\n+        #[allow(unused_unsafe)]\n+        ::zerovec::ZeroMap::from_parts_unchecked(\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    97u8, 97u8, 0u8, 97u8, 98u8, 0u8, 97u8, 98u8, 114u8, 97u8, 99u8, 101u8,\n+                    97u8, 99u8, 104u8, 97u8, 100u8, 97u8, 97u8, 100u8, 112u8, 97u8, 100u8,\n+                    121u8, 97u8, 101u8, 0u8, 97u8, 101u8, 98u8, 97u8, 102u8, 0u8, 97u8, 103u8,\n+                    113u8, 97u8, 104u8, 111u8, 97u8, 106u8, 116u8, 97u8, 107u8, 0u8, 97u8,\n+                    107u8, 107u8, 97u8, 108u8, 110u8, 97u8, 108u8, 116u8, 97u8, 109u8, 0u8,\n+                    97u8, 109u8, 111u8, 97u8, 110u8, 0u8, 97u8, 110u8, 110u8, 97u8, 111u8,\n+                    122u8, 97u8, 112u8, 100u8, 97u8, 114u8, 0u8, 97u8, 114u8, 99u8, 97u8,\n+                    114u8, 110u8, 97u8, 114u8, 111u8, 97u8, 114u8, 113u8, 97u8, 114u8, 115u8,\n+                    97u8, 114u8, 121u8, 97u8, 114u8, 122u8, 97u8, 115u8, 0u8, 97u8, 115u8,\n+                    97u8, 97u8, 115u8, 101u8, 97u8, 115u8, 116u8, 97u8, 116u8, 106u8, 97u8,\n+                    118u8, 0u8, 97u8, 119u8, 97u8, 97u8, 121u8, 0u8, 97u8, 122u8, 0u8, 98u8,\n+                    97u8, 0u8, 98u8, 97u8, 108u8, 98u8, 97u8, 110u8, 98u8, 97u8, 112u8, 98u8,\n+                    97u8, 114u8, 98u8, 97u8, 115u8, 98u8, 97u8, 120u8, 98u8, 98u8, 99u8, 98u8,\n+                    98u8, 106u8, 98u8, 99u8, 105u8, 98u8, 101u8, 0u8, 98u8, 101u8, 106u8, 98u8,\n+                    101u8, 109u8, 98u8, 101u8, 119u8, 98u8, 101u8, 122u8, 98u8, 102u8, 100u8,\n+                    98u8, 102u8, 113u8, 98u8, 102u8, 116u8, 98u8, 102u8, 121u8, 98u8, 103u8,\n+                    0u8, 98u8, 103u8, 99u8, 98u8, 103u8, 110u8, 98u8, 103u8, 120u8, 98u8,\n+                    104u8, 98u8, 98u8, 104u8, 105u8, 98u8, 104u8, 111u8, 98u8, 105u8, 0u8,\n+                    98u8, 105u8, 107u8, 98u8, 105u8, 110u8, 98u8, 106u8, 106u8, 98u8, 106u8,\n+                    110u8, 98u8, 106u8, 116u8, 98u8, 107u8, 109u8, 98u8, 107u8, 117u8, 98u8,\n+                    108u8, 97u8, 98u8, 108u8, 103u8, 98u8, 108u8, 116u8, 98u8, 109u8, 0u8,\n+                    98u8, 109u8, 113u8, 98u8, 110u8, 0u8, 98u8, 111u8, 0u8, 98u8, 112u8, 121u8,\n+                    98u8, 113u8, 105u8, 98u8, 113u8, 118u8, 98u8, 114u8, 0u8, 98u8, 114u8,\n+                    97u8, 98u8, 114u8, 104u8, 98u8, 114u8, 120u8, 98u8, 115u8, 0u8, 98u8,\n+                    115u8, 113u8, 98u8, 115u8, 115u8, 98u8, 116u8, 111u8, 98u8, 116u8, 118u8,\n+                    98u8, 117u8, 97u8, 98u8, 117u8, 99u8, 98u8, 117u8, 103u8, 98u8, 117u8,\n+                    109u8, 98u8, 118u8, 98u8, 98u8, 121u8, 110u8, 98u8, 121u8, 118u8, 98u8,\n+                    122u8, 101u8, 99u8, 97u8, 0u8, 99u8, 97u8, 100u8, 99u8, 99u8, 104u8, 99u8,\n+                    99u8, 112u8, 99u8, 101u8, 0u8, 99u8, 101u8, 98u8, 99u8, 103u8, 103u8, 99u8,\n+                    104u8, 0u8, 99u8, 104u8, 107u8, 99u8, 104u8, 109u8, 99u8, 104u8, 111u8,\n+                    99u8, 104u8, 112u8, 99u8, 104u8, 114u8, 99u8, 105u8, 99u8, 99u8, 106u8,\n+                    97u8, 99u8, 106u8, 109u8, 99u8, 107u8, 98u8, 99u8, 108u8, 99u8, 99u8,\n+                    109u8, 103u8, 99u8, 111u8, 0u8, 99u8, 111u8, 112u8, 99u8, 112u8, 115u8,\n+                    99u8, 114u8, 0u8, 99u8, 114u8, 103u8, 99u8, 114u8, 104u8, 99u8, 114u8,\n+                    107u8, 99u8, 114u8, 108u8, 99u8, 114u8, 115u8, 99u8, 115u8, 0u8, 99u8,\n+                    115u8, 98u8, 99u8, 115u8, 119u8, 99u8, 116u8, 100u8, 99u8, 117u8, 0u8,\n+                    99u8, 118u8, 0u8, 99u8, 121u8, 0u8, 100u8, 97u8, 0u8, 100u8, 97u8, 102u8,\n+                    100u8, 97u8, 107u8, 100u8, 97u8, 114u8, 100u8, 97u8, 118u8, 100u8, 99u8,\n+                    99u8, 100u8, 101u8, 0u8, 100u8, 101u8, 110u8, 100u8, 103u8, 114u8, 100u8,\n+                    106u8, 101u8, 100u8, 109u8, 102u8, 100u8, 110u8, 106u8, 100u8, 111u8,\n+                    105u8, 100u8, 114u8, 104u8, 100u8, 115u8, 98u8, 100u8, 116u8, 109u8, 100u8,\n+                    116u8, 112u8, 100u8, 116u8, 121u8, 100u8, 117u8, 97u8, 100u8, 118u8, 0u8,\n+                    100u8, 121u8, 111u8, 100u8, 121u8, 117u8, 100u8, 122u8, 0u8, 101u8, 98u8,\n+                    117u8, 101u8, 101u8, 0u8, 101u8, 102u8, 105u8, 101u8, 103u8, 108u8, 101u8,\n+                    103u8, 121u8, 101u8, 107u8, 121u8, 101u8, 108u8, 0u8, 101u8, 110u8, 0u8,\n+                    101u8, 111u8, 0u8, 101u8, 115u8, 0u8, 101u8, 115u8, 103u8, 101u8, 115u8,\n+                    117u8, 101u8, 116u8, 0u8, 101u8, 116u8, 116u8, 101u8, 117u8, 0u8, 101u8,\n+                    119u8, 111u8, 101u8, 120u8, 116u8, 102u8, 97u8, 0u8, 102u8, 97u8, 110u8,\n+                    102u8, 102u8, 0u8, 102u8, 102u8, 109u8, 102u8, 105u8, 0u8, 102u8, 105u8,\n+                    97u8, 102u8, 105u8, 108u8, 102u8, 105u8, 116u8, 102u8, 106u8, 0u8, 102u8,\n+                    111u8, 0u8, 102u8, 111u8, 110u8, 102u8, 114u8, 0u8, 102u8, 114u8, 99u8,\n+                    102u8, 114u8, 112u8, 102u8, 114u8, 114u8, 102u8, 114u8, 115u8, 102u8,\n+                    117u8, 98u8, 102u8, 117u8, 100u8, 102u8, 117u8, 102u8, 102u8, 117u8, 113u8,\n+                    102u8, 117u8, 114u8, 102u8, 117u8, 118u8, 102u8, 118u8, 114u8, 102u8,\n+                    121u8, 0u8, 103u8, 97u8, 0u8, 103u8, 97u8, 97u8, 103u8, 97u8, 103u8, 103u8,\n+                    97u8, 110u8, 103u8, 97u8, 121u8, 103u8, 98u8, 109u8, 103u8, 98u8, 122u8,\n+                    103u8, 99u8, 114u8, 103u8, 100u8, 0u8, 103u8, 101u8, 122u8, 103u8, 103u8,\n+                    110u8, 103u8, 105u8, 108u8, 103u8, 106u8, 107u8, 103u8, 106u8, 117u8,\n+                    103u8, 108u8, 0u8, 103u8, 108u8, 107u8, 103u8, 110u8, 0u8, 103u8, 111u8,\n+                    109u8, 103u8, 111u8, 110u8, 103u8, 111u8, 114u8, 103u8, 111u8, 115u8,\n+                    103u8, 111u8, 116u8, 103u8, 114u8, 99u8, 103u8, 114u8, 116u8, 103u8, 115u8,\n+                    119u8, 103u8, 117u8, 0u8, 103u8, 117u8, 98u8, 103u8, 117u8, 99u8, 103u8,\n+                    117u8, 114u8, 103u8, 117u8, 122u8, 103u8, 118u8, 0u8, 103u8, 118u8, 114u8,\n+                    103u8, 119u8, 105u8, 104u8, 97u8, 0u8, 104u8, 97u8, 107u8, 104u8, 97u8,\n+                    119u8, 104u8, 97u8, 122u8, 104u8, 101u8, 0u8, 104u8, 105u8, 0u8, 104u8,\n+                    105u8, 102u8, 104u8, 105u8, 108u8, 104u8, 108u8, 117u8, 104u8, 109u8,\n+                    100u8, 104u8, 110u8, 100u8, 104u8, 110u8, 101u8, 104u8, 110u8, 106u8,\n+                    104u8, 110u8, 110u8, 104u8, 110u8, 111u8, 104u8, 111u8, 0u8, 104u8, 111u8,\n+                    99u8, 104u8, 111u8, 106u8, 104u8, 114u8, 0u8, 104u8, 115u8, 98u8, 104u8,\n+                    115u8, 110u8, 104u8, 116u8, 0u8, 104u8, 117u8, 0u8, 104u8, 117u8, 114u8,\n+                    104u8, 121u8, 0u8, 104u8, 122u8, 0u8, 105u8, 97u8, 0u8, 105u8, 98u8, 97u8,\n+                    105u8, 98u8, 98u8, 105u8, 100u8, 0u8, 105u8, 102u8, 101u8, 105u8, 103u8,\n+                    0u8, 105u8, 105u8, 0u8, 105u8, 107u8, 0u8, 105u8, 108u8, 111u8, 105u8,\n+                    110u8, 0u8, 105u8, 110u8, 104u8, 105u8, 111u8, 0u8, 105u8, 115u8, 0u8,\n+                    105u8, 116u8, 0u8, 105u8, 117u8, 0u8, 105u8, 119u8, 0u8, 105u8, 122u8,\n+                    104u8, 106u8, 97u8, 0u8, 106u8, 97u8, 109u8, 106u8, 98u8, 111u8, 106u8,\n+                    103u8, 111u8, 106u8, 105u8, 0u8, 106u8, 109u8, 99u8, 106u8, 109u8, 108u8,\n+                    106u8, 117u8, 116u8, 106u8, 118u8, 0u8, 106u8, 119u8, 0u8, 107u8, 97u8,\n+                    0u8, 107u8, 97u8, 97u8, 107u8, 97u8, 98u8, 107u8, 97u8, 99u8, 107u8, 97u8,\n+                    106u8, 107u8, 97u8, 109u8, 107u8, 97u8, 111u8, 107u8, 97u8, 119u8, 107u8,\n+                    98u8, 100u8, 107u8, 98u8, 121u8, 107u8, 99u8, 103u8, 107u8, 99u8, 107u8,\n+                    107u8, 100u8, 101u8, 107u8, 100u8, 104u8, 107u8, 100u8, 116u8, 107u8,\n+                    101u8, 97u8, 107u8, 101u8, 110u8, 107u8, 102u8, 111u8, 107u8, 102u8, 114u8,\n+                    107u8, 102u8, 121u8, 107u8, 103u8, 0u8, 107u8, 103u8, 101u8, 107u8, 103u8,\n+                    112u8, 107u8, 104u8, 97u8, 107u8, 104u8, 98u8, 107u8, 104u8, 110u8, 107u8,\n+                    104u8, 113u8, 107u8, 104u8, 116u8, 107u8, 104u8, 119u8, 107u8, 105u8, 0u8,\n+                    107u8, 105u8, 117u8, 107u8, 106u8, 0u8, 107u8, 106u8, 103u8, 107u8, 107u8,\n+                    0u8, 107u8, 107u8, 106u8, 107u8, 108u8, 0u8, 107u8, 108u8, 110u8, 107u8,\n+                    109u8, 0u8, 107u8, 109u8, 98u8, 107u8, 110u8, 0u8, 107u8, 110u8, 102u8,\n+                    107u8, 111u8, 0u8, 107u8, 111u8, 105u8, 107u8, 111u8, 107u8, 107u8, 111u8,\n+                    115u8, 107u8, 112u8, 101u8, 107u8, 114u8, 99u8, 107u8, 114u8, 105u8, 107u8,\n+                    114u8, 106u8, 107u8, 114u8, 108u8, 107u8, 114u8, 117u8, 107u8, 115u8, 0u8,\n+                    107u8, 115u8, 98u8, 107u8, 115u8, 102u8, 107u8, 115u8, 104u8, 107u8, 116u8,\n+                    114u8, 107u8, 117u8, 0u8, 107u8, 117u8, 109u8, 107u8, 118u8, 0u8, 107u8,\n+                    118u8, 114u8, 107u8, 118u8, 120u8, 107u8, 119u8, 0u8, 107u8, 119u8, 107u8,\n+                    107u8, 120u8, 108u8, 107u8, 120u8, 109u8, 107u8, 120u8, 112u8, 107u8,\n+                    121u8, 0u8, 107u8, 122u8, 106u8, 107u8, 122u8, 116u8, 108u8, 97u8, 0u8,\n+                    108u8, 97u8, 98u8, 108u8, 97u8, 100u8, 108u8, 97u8, 103u8, 108u8, 97u8,\n+                    104u8, 108u8, 97u8, 106u8, 108u8, 98u8, 0u8, 108u8, 98u8, 101u8, 108u8,\n+                    98u8, 119u8, 108u8, 99u8, 112u8, 108u8, 101u8, 112u8, 108u8, 101u8, 122u8,\n+                    108u8, 103u8, 0u8, 108u8, 105u8, 0u8, 108u8, 105u8, 102u8, 108u8, 105u8,\n+                    106u8, 108u8, 105u8, 108u8, 108u8, 105u8, 115u8, 108u8, 106u8, 112u8,\n+                    108u8, 107u8, 105u8, 108u8, 107u8, 116u8, 108u8, 109u8, 110u8, 108u8,\n+                    109u8, 111u8, 108u8, 110u8, 0u8, 108u8, 111u8, 0u8, 108u8, 111u8, 108u8,\n+                    108u8, 111u8, 122u8, 108u8, 114u8, 99u8, 108u8, 116u8, 0u8, 108u8, 116u8,\n+                    103u8, 108u8, 117u8, 0u8, 108u8, 117u8, 97u8, 108u8, 117u8, 111u8, 108u8,\n+                    117u8, 121u8, 108u8, 117u8, 122u8, 108u8, 118u8, 0u8, 108u8, 119u8, 108u8,\n+                    108u8, 122u8, 104u8, 108u8, 122u8, 122u8, 109u8, 97u8, 100u8, 109u8, 97u8,\n+                    102u8, 109u8, 97u8, 103u8, 109u8, 97u8, 105u8, 109u8, 97u8, 107u8, 109u8,\n+                    97u8, 110u8, 109u8, 97u8, 115u8, 109u8, 97u8, 122u8, 109u8, 100u8, 102u8,\n+                    109u8, 100u8, 104u8, 109u8, 100u8, 114u8, 109u8, 101u8, 110u8, 109u8,\n+                    101u8, 114u8, 109u8, 102u8, 97u8, 109u8, 102u8, 101u8, 109u8, 103u8, 0u8,\n+                    109u8, 103u8, 104u8, 109u8, 103u8, 111u8, 109u8, 103u8, 112u8, 109u8,\n+                    103u8, 121u8, 109u8, 104u8, 0u8, 109u8, 105u8, 0u8, 109u8, 105u8, 99u8,\n+                    109u8, 105u8, 110u8, 109u8, 107u8, 0u8, 109u8, 108u8, 0u8, 109u8, 108u8,\n+                    115u8, 109u8, 110u8, 0u8, 109u8, 110u8, 105u8, 109u8, 110u8, 119u8, 109u8,\n+                    111u8, 0u8, 109u8, 111u8, 101u8, 109u8, 111u8, 104u8, 109u8, 111u8, 115u8,\n+                    109u8, 114u8, 0u8, 109u8, 114u8, 100u8, 109u8, 114u8, 106u8, 109u8, 114u8,\n+                    111u8, 109u8, 115u8, 0u8, 109u8, 116u8, 0u8, 109u8, 116u8, 114u8, 109u8,\n+                    117u8, 97u8, 109u8, 117u8, 115u8, 109u8, 118u8, 121u8, 109u8, 119u8, 107u8,\n+                    109u8, 119u8, 114u8, 109u8, 119u8, 118u8, 109u8, 119u8, 119u8, 109u8,\n+                    120u8, 99u8, 109u8, 121u8, 0u8, 109u8, 121u8, 118u8, 109u8, 121u8, 120u8,\n+                    109u8, 121u8, 122u8, 109u8, 122u8, 110u8, 110u8, 97u8, 0u8, 110u8, 97u8,\n+                    110u8, 110u8, 97u8, 112u8, 110u8, 97u8, 113u8, 110u8, 98u8, 0u8, 110u8,\n+                    99u8, 104u8, 110u8, 100u8, 0u8, 110u8, 100u8, 99u8, 110u8, 100u8, 115u8,\n+                    110u8, 101u8, 0u8, 110u8, 101u8, 119u8, 110u8, 103u8, 0u8, 110u8, 103u8,\n+                    108u8, 110u8, 104u8, 101u8, 110u8, 104u8, 119u8, 110u8, 105u8, 106u8,\n+                    110u8, 105u8, 117u8, 110u8, 106u8, 111u8, 110u8, 108u8, 0u8, 110u8, 109u8,\n+                    103u8, 110u8, 110u8, 0u8, 110u8, 110u8, 104u8, 110u8, 110u8, 112u8, 110u8,\n+                    111u8, 0u8, 110u8, 111u8, 100u8, 110u8, 111u8, 101u8, 110u8, 111u8, 110u8,\n+                    110u8, 113u8, 111u8, 110u8, 114u8, 0u8, 110u8, 115u8, 107u8, 110u8, 115u8,\n+                    111u8, 110u8, 115u8, 116u8, 110u8, 117u8, 115u8, 110u8, 118u8, 0u8, 110u8,\n+                    120u8, 113u8, 110u8, 121u8, 0u8, 110u8, 121u8, 109u8, 110u8, 121u8, 110u8,\n+                    110u8, 122u8, 105u8, 111u8, 99u8, 0u8, 111u8, 106u8, 0u8, 111u8, 106u8,\n+                    115u8, 111u8, 107u8, 97u8, 111u8, 109u8, 0u8, 111u8, 114u8, 0u8, 111u8,\n+                    115u8, 0u8, 111u8, 115u8, 97u8, 111u8, 116u8, 107u8, 111u8, 117u8, 105u8,\n+                    112u8, 97u8, 0u8, 112u8, 97u8, 103u8, 112u8, 97u8, 108u8, 112u8, 97u8,\n+                    109u8, 112u8, 97u8, 112u8, 112u8, 97u8, 117u8, 112u8, 99u8, 100u8, 112u8,\n+                    99u8, 109u8, 112u8, 100u8, 99u8, 112u8, 100u8, 116u8, 112u8, 101u8, 111u8,\n+                    112u8, 102u8, 108u8, 112u8, 104u8, 110u8, 112u8, 105u8, 115u8, 112u8,\n+                    107u8, 97u8, 112u8, 107u8, 111u8, 112u8, 108u8, 0u8, 112u8, 109u8, 115u8,\n+                    112u8, 110u8, 116u8, 112u8, 111u8, 110u8, 112u8, 112u8, 97u8, 112u8, 113u8,\n+                    109u8, 112u8, 114u8, 97u8, 112u8, 114u8, 100u8, 112u8, 114u8, 103u8, 112u8,\n+                    115u8, 0u8, 112u8, 116u8, 0u8, 112u8, 117u8, 117u8, 113u8, 117u8, 0u8,\n+                    113u8, 117u8, 99u8, 113u8, 117u8, 103u8, 114u8, 97u8, 106u8, 114u8, 99u8,\n+                    102u8, 114u8, 101u8, 106u8, 114u8, 103u8, 110u8, 114u8, 104u8, 103u8,\n+                    114u8, 105u8, 97u8, 114u8, 105u8, 102u8, 114u8, 106u8, 115u8, 114u8, 107u8,\n+                    116u8, 114u8, 109u8, 0u8, 114u8, 109u8, 102u8, 114u8, 109u8, 111u8, 114u8,\n+                    109u8, 116u8, 114u8, 109u8, 117u8, 114u8, 110u8, 0u8, 114u8, 110u8, 103u8,\n+                    114u8, 111u8, 0u8, 114u8, 111u8, 98u8, 114u8, 111u8, 102u8, 114u8, 116u8,\n+                    109u8, 114u8, 117u8, 0u8, 114u8, 117u8, 101u8, 114u8, 117u8, 103u8, 114u8,\n+                    119u8, 0u8, 114u8, 119u8, 107u8, 114u8, 121u8, 117u8, 115u8, 97u8, 0u8,\n+                    115u8, 97u8, 102u8, 115u8, 97u8, 104u8, 115u8, 97u8, 113u8, 115u8, 97u8,\n+                    115u8, 115u8, 97u8, 116u8, 115u8, 97u8, 118u8, 115u8, 97u8, 122u8, 115u8,\n+                    98u8, 112u8, 115u8, 99u8, 0u8, 115u8, 99u8, 107u8, 115u8, 99u8, 110u8,\n+                    115u8, 99u8, 111u8, 115u8, 100u8, 0u8, 115u8, 100u8, 99u8, 115u8, 100u8,\n+                    104u8, 115u8, 101u8, 0u8, 115u8, 101u8, 102u8, 115u8, 101u8, 104u8, 115u8,\n+                    101u8, 105u8, 115u8, 101u8, 115u8, 115u8, 103u8, 0u8, 115u8, 103u8, 97u8,\n+                    115u8, 103u8, 115u8, 115u8, 104u8, 105u8, 115u8, 104u8, 110u8, 115u8,\n+                    105u8, 0u8, 115u8, 105u8, 100u8, 115u8, 107u8, 0u8, 115u8, 107u8, 114u8,\n+                    115u8, 108u8, 0u8, 115u8, 108u8, 105u8, 115u8, 108u8, 121u8, 115u8, 109u8,\n+                    0u8, 115u8, 109u8, 97u8, 115u8, 109u8, 100u8, 115u8, 109u8, 106u8, 115u8,\n+                    109u8, 110u8, 115u8, 109u8, 112u8, 115u8, 109u8, 115u8, 115u8, 110u8, 0u8,\n+                    115u8, 110u8, 98u8, 115u8, 110u8, 107u8, 115u8, 111u8, 0u8, 115u8, 111u8,\n+                    103u8, 115u8, 111u8, 117u8, 115u8, 113u8, 0u8, 115u8, 114u8, 0u8, 115u8,\n+                    114u8, 98u8, 115u8, 114u8, 110u8, 115u8, 114u8, 114u8, 115u8, 114u8, 120u8,\n+                    115u8, 115u8, 0u8, 115u8, 115u8, 121u8, 115u8, 116u8, 0u8, 115u8, 116u8,\n+                    113u8, 115u8, 117u8, 0u8, 115u8, 117u8, 107u8, 115u8, 117u8, 115u8, 115u8,\n+                    118u8, 0u8, 115u8, 119u8, 0u8, 115u8, 119u8, 98u8, 115u8, 119u8, 99u8,\n+                    115u8, 119u8, 103u8, 115u8, 119u8, 118u8, 115u8, 120u8, 110u8, 115u8,\n+                    121u8, 108u8, 115u8, 121u8, 114u8, 115u8, 122u8, 108u8, 116u8, 97u8, 0u8,\n+                    116u8, 97u8, 106u8, 116u8, 98u8, 119u8, 116u8, 99u8, 121u8, 116u8, 100u8,\n+                    100u8, 116u8, 100u8, 103u8, 116u8, 100u8, 104u8, 116u8, 100u8, 117u8,\n+                    116u8, 101u8, 0u8, 116u8, 101u8, 109u8, 116u8, 101u8, 111u8, 116u8, 101u8,\n+                    116u8, 116u8, 103u8, 0u8, 116u8, 104u8, 0u8, 116u8, 104u8, 108u8, 116u8,\n+                    104u8, 113u8, 116u8, 104u8, 114u8, 116u8, 105u8, 0u8, 116u8, 105u8, 103u8,\n+                    116u8, 105u8, 118u8, 116u8, 107u8, 0u8, 116u8, 107u8, 108u8, 116u8, 107u8,\n+                    114u8, 116u8, 107u8, 116u8, 116u8, 108u8, 0u8, 116u8, 108u8, 121u8, 116u8,\n+                    109u8, 104u8, 116u8, 110u8, 0u8, 116u8, 111u8, 0u8, 116u8, 111u8, 103u8,\n+                    116u8, 111u8, 107u8, 116u8, 112u8, 105u8, 116u8, 114u8, 0u8, 116u8, 114u8,\n+                    117u8, 116u8, 114u8, 118u8, 116u8, 114u8, 119u8, 116u8, 115u8, 0u8, 116u8,\n+                    115u8, 100u8, 116u8, 115u8, 102u8, 116u8, 115u8, 103u8, 116u8, 115u8,\n+                    106u8, 116u8, 116u8, 0u8, 116u8, 116u8, 106u8, 116u8, 116u8, 115u8, 116u8,\n+                    116u8, 116u8, 116u8, 117u8, 109u8, 116u8, 118u8, 108u8, 116u8, 119u8,\n+                    113u8, 116u8, 120u8, 103u8, 116u8, 120u8, 111u8, 116u8, 121u8, 0u8, 116u8,\n+                    121u8, 118u8, 116u8, 122u8, 109u8, 117u8, 100u8, 105u8, 117u8, 100u8,\n+                    109u8, 117u8, 103u8, 0u8, 117u8, 103u8, 97u8, 117u8, 107u8, 0u8, 117u8,\n+                    108u8, 105u8, 117u8, 109u8, 98u8, 117u8, 110u8, 114u8, 117u8, 110u8, 120u8,\n+                    117u8, 114u8, 0u8, 117u8, 122u8, 0u8, 118u8, 97u8, 105u8, 118u8, 101u8,\n+                    0u8, 118u8, 101u8, 99u8, 118u8, 101u8, 112u8, 118u8, 105u8, 0u8, 118u8,\n+                    105u8, 99u8, 118u8, 108u8, 115u8, 118u8, 109u8, 102u8, 118u8, 109u8, 119u8,\n+                    118u8, 111u8, 0u8, 118u8, 111u8, 116u8, 118u8, 114u8, 111u8, 118u8, 117u8,\n+                    110u8, 119u8, 97u8, 0u8, 119u8, 97u8, 101u8, 119u8, 97u8, 108u8, 119u8,\n+                    97u8, 114u8, 119u8, 98u8, 112u8, 119u8, 98u8, 113u8, 119u8, 98u8, 114u8,\n+                    119u8, 108u8, 115u8, 119u8, 110u8, 105u8, 119u8, 111u8, 0u8, 119u8, 115u8,\n+                    103u8, 119u8, 116u8, 109u8, 119u8, 117u8, 117u8, 120u8, 97u8, 118u8, 120u8,\n+                    99u8, 111u8, 120u8, 99u8, 114u8, 120u8, 104u8, 0u8, 120u8, 108u8, 99u8,\n+                    120u8, 108u8, 100u8, 120u8, 109u8, 102u8, 120u8, 109u8, 110u8, 120u8,\n+                    109u8, 114u8, 120u8, 110u8, 97u8, 120u8, 110u8, 114u8, 120u8, 111u8, 103u8,\n+                    120u8, 112u8, 114u8, 120u8, 115u8, 97u8, 120u8, 115u8, 114u8, 121u8, 97u8,\n+                    111u8, 121u8, 97u8, 112u8, 121u8, 97u8, 118u8, 121u8, 98u8, 98u8, 121u8,\n+                    105u8, 0u8, 121u8, 111u8, 0u8, 121u8, 114u8, 108u8, 121u8, 117u8, 97u8,\n+                    121u8, 117u8, 101u8, 122u8, 97u8, 0u8, 122u8, 97u8, 103u8, 122u8, 100u8,\n+                    106u8, 122u8, 101u8, 97u8, 122u8, 103u8, 104u8, 122u8, 104u8, 0u8, 122u8,\n+                    104u8, 120u8, 122u8, 107u8, 116u8, 122u8, 108u8, 109u8, 122u8, 109u8,\n+                    105u8, 122u8, 117u8, 0u8, 122u8, 122u8, 97u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    69u8, 84u8, 0u8, 71u8, 69u8, 0u8, 71u8, 72u8, 0u8, 73u8, 68u8, 0u8, 85u8,\n+                    71u8, 0u8, 71u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 73u8, 82u8,\n+                    0u8, 84u8, 78u8, 0u8, 90u8, 65u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8,\n+                    84u8, 78u8, 0u8, 71u8, 72u8, 0u8, 73u8, 81u8, 0u8, 88u8, 75u8, 0u8, 82u8,\n+                    85u8, 0u8, 69u8, 84u8, 0u8, 78u8, 71u8, 0u8, 69u8, 83u8, 0u8, 78u8, 71u8,\n+                    0u8, 73u8, 68u8, 0u8, 84u8, 71u8, 0u8, 69u8, 71u8, 0u8, 73u8, 82u8, 0u8,\n+                    67u8, 76u8, 0u8, 66u8, 79u8, 0u8, 68u8, 90u8, 0u8, 83u8, 65u8, 0u8, 77u8,\n+                    65u8, 0u8, 69u8, 71u8, 0u8, 73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 85u8, 83u8,\n+                    0u8, 69u8, 83u8, 0u8, 67u8, 65u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n+                    66u8, 79u8, 0u8, 65u8, 90u8, 0u8, 82u8, 85u8, 0u8, 80u8, 75u8, 0u8, 73u8,\n+                    68u8, 0u8, 78u8, 80u8, 0u8, 65u8, 84u8, 0u8, 67u8, 77u8, 0u8, 67u8, 77u8,\n+                    0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 67u8, 73u8, 0u8, 66u8, 89u8, 0u8,\n+                    83u8, 68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 67u8,\n+                    77u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 71u8,\n+                    0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n+                    73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 86u8, 85u8, 0u8, 80u8, 72u8, 0u8, 78u8,\n+                    71u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8, 83u8, 78u8, 0u8, 67u8, 77u8,\n+                    0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 77u8, 89u8, 0u8, 86u8, 78u8, 0u8,\n+                    77u8, 76u8, 0u8, 77u8, 76u8, 0u8, 66u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n+                    78u8, 0u8, 73u8, 82u8, 0u8, 67u8, 73u8, 0u8, 70u8, 82u8, 0u8, 73u8, 78u8,\n+                    0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 66u8, 65u8, 0u8, 76u8, 82u8, 0u8,\n+                    67u8, 77u8, 0u8, 80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 82u8, 85u8, 0u8, 89u8,\n+                    84u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 71u8, 81u8, 0u8, 69u8, 82u8,\n+                    0u8, 67u8, 77u8, 0u8, 77u8, 76u8, 0u8, 69u8, 83u8, 0u8, 85u8, 83u8, 0u8,\n+                    78u8, 71u8, 0u8, 66u8, 68u8, 0u8, 82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 85u8,\n+                    71u8, 0u8, 71u8, 85u8, 0u8, 70u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8, 83u8,\n+                    0u8, 67u8, 65u8, 0u8, 85u8, 83u8, 0u8, 85u8, 83u8, 0u8, 75u8, 72u8, 0u8,\n+                    86u8, 78u8, 0u8, 73u8, 81u8, 0u8, 67u8, 65u8, 0u8, 77u8, 78u8, 0u8, 70u8,\n+                    82u8, 0u8, 69u8, 71u8, 0u8, 80u8, 72u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8,\n+                    0u8, 85u8, 65u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 83u8, 67u8, 0u8,\n+                    67u8, 90u8, 0u8, 80u8, 76u8, 0u8, 67u8, 65u8, 0u8, 77u8, 77u8, 0u8, 82u8,\n+                    85u8, 0u8, 82u8, 85u8, 0u8, 71u8, 66u8, 0u8, 68u8, 75u8, 0u8, 67u8, 73u8,\n+                    0u8, 85u8, 83u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8, 73u8, 78u8, 0u8,\n+                    68u8, 69u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 78u8, 69u8, 0u8, 78u8,\n+                    71u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 68u8, 69u8,\n+                    0u8, 77u8, 76u8, 0u8, 77u8, 89u8, 0u8, 78u8, 80u8, 0u8, 67u8, 77u8, 0u8,\n+                    77u8, 86u8, 0u8, 83u8, 78u8, 0u8, 66u8, 70u8, 0u8, 66u8, 84u8, 0u8, 75u8,\n+                    69u8, 0u8, 71u8, 72u8, 0u8, 78u8, 71u8, 0u8, 73u8, 84u8, 0u8, 69u8, 71u8,\n+                    0u8, 77u8, 77u8, 0u8, 71u8, 82u8, 0u8, 85u8, 83u8, 0u8, 48u8, 48u8, 49u8,\n+                    69u8, 83u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8, 69u8, 69u8, 0u8, 73u8,\n+                    84u8, 0u8, 69u8, 83u8, 0u8, 67u8, 77u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n+                    0u8, 71u8, 81u8, 0u8, 83u8, 78u8, 0u8, 77u8, 76u8, 0u8, 70u8, 73u8, 0u8,\n+                    83u8, 68u8, 0u8, 80u8, 72u8, 0u8, 83u8, 69u8, 0u8, 70u8, 74u8, 0u8, 70u8,\n+                    79u8, 0u8, 66u8, 74u8, 0u8, 70u8, 82u8, 0u8, 85u8, 83u8, 0u8, 70u8, 82u8,\n+                    0u8, 68u8, 69u8, 0u8, 68u8, 69u8, 0u8, 67u8, 77u8, 0u8, 87u8, 70u8, 0u8,\n+                    71u8, 78u8, 0u8, 78u8, 69u8, 0u8, 73u8, 84u8, 0u8, 78u8, 71u8, 0u8, 83u8,\n+                    68u8, 0u8, 78u8, 76u8, 0u8, 73u8, 69u8, 0u8, 71u8, 72u8, 0u8, 77u8, 68u8,\n+                    0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 73u8, 82u8, 0u8,\n+                    71u8, 70u8, 0u8, 71u8, 66u8, 0u8, 69u8, 84u8, 0u8, 78u8, 80u8, 0u8, 75u8,\n+                    73u8, 0u8, 80u8, 75u8, 0u8, 80u8, 75u8, 0u8, 69u8, 83u8, 0u8, 73u8, 82u8,\n+                    0u8, 80u8, 89u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n+                    78u8, 76u8, 0u8, 85u8, 65u8, 0u8, 67u8, 89u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n+                    72u8, 0u8, 73u8, 78u8, 0u8, 66u8, 82u8, 0u8, 67u8, 79u8, 0u8, 71u8, 72u8,\n+                    0u8, 75u8, 69u8, 0u8, 73u8, 77u8, 0u8, 78u8, 80u8, 0u8, 67u8, 65u8, 0u8,\n+                    78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 65u8, 70u8, 0u8, 73u8,\n+                    76u8, 0u8, 73u8, 78u8, 0u8, 70u8, 74u8, 0u8, 80u8, 72u8, 0u8, 84u8, 82u8,\n+                    0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 73u8, 78u8, 0u8, 85u8, 83u8, 0u8,\n+                    80u8, 72u8, 0u8, 80u8, 75u8, 0u8, 80u8, 71u8, 0u8, 73u8, 78u8, 0u8, 73u8,\n+                    78u8, 0u8, 72u8, 82u8, 0u8, 68u8, 69u8, 0u8, 67u8, 78u8, 0u8, 72u8, 84u8,\n+                    0u8, 72u8, 85u8, 0u8, 67u8, 65u8, 0u8, 65u8, 77u8, 0u8, 78u8, 65u8, 0u8,\n+                    48u8, 48u8, 49u8, 77u8, 89u8, 0u8, 78u8, 71u8, 0u8, 73u8, 68u8, 0u8, 84u8,\n+                    71u8, 0u8, 78u8, 71u8, 0u8, 67u8, 78u8, 0u8, 85u8, 83u8, 0u8, 80u8, 72u8,\n+                    0u8, 73u8, 68u8, 0u8, 82u8, 85u8, 0u8, 48u8, 48u8, 49u8, 73u8, 83u8, 0u8,\n+                    73u8, 84u8, 0u8, 67u8, 65u8, 0u8, 73u8, 76u8, 0u8, 82u8, 85u8, 0u8, 74u8,\n+                    80u8, 0u8, 74u8, 77u8, 0u8, 48u8, 48u8, 49u8, 67u8, 77u8, 0u8, 85u8, 65u8,\n+                    0u8, 84u8, 90u8, 0u8, 78u8, 80u8, 0u8, 68u8, 75u8, 0u8, 73u8, 68u8, 0u8,\n+                    73u8, 68u8, 0u8, 71u8, 69u8, 0u8, 85u8, 90u8, 0u8, 68u8, 90u8, 0u8, 77u8,\n+                    77u8, 0u8, 78u8, 71u8, 0u8, 75u8, 69u8, 0u8, 77u8, 76u8, 0u8, 73u8, 68u8,\n+                    0u8, 82u8, 85u8, 0u8, 78u8, 69u8, 0u8, 78u8, 71u8, 0u8, 90u8, 87u8, 0u8,\n+                    84u8, 90u8, 0u8, 84u8, 71u8, 0u8, 84u8, 72u8, 0u8, 67u8, 86u8, 0u8, 67u8,\n+                    77u8, 0u8, 67u8, 73u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 68u8,\n+                    0u8, 73u8, 68u8, 0u8, 66u8, 82u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8,\n+                    73u8, 78u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8,\n+                    69u8, 0u8, 84u8, 82u8, 0u8, 78u8, 65u8, 0u8, 76u8, 65u8, 0u8, 75u8, 90u8,\n+                    0u8, 67u8, 77u8, 0u8, 71u8, 76u8, 0u8, 75u8, 69u8, 0u8, 75u8, 72u8, 0u8,\n+                    65u8, 79u8, 0u8, 73u8, 78u8, 0u8, 71u8, 87u8, 0u8, 75u8, 82u8, 0u8, 82u8,\n+                    85u8, 0u8, 73u8, 78u8, 0u8, 70u8, 77u8, 0u8, 76u8, 82u8, 0u8, 82u8, 85u8,\n+                    0u8, 83u8, 76u8, 0u8, 80u8, 72u8, 0u8, 82u8, 85u8, 0u8, 73u8, 78u8, 0u8,\n+                    73u8, 78u8, 0u8, 84u8, 90u8, 0u8, 67u8, 77u8, 0u8, 68u8, 69u8, 0u8, 77u8,\n+                    89u8, 0u8, 84u8, 82u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 73u8, 68u8,\n+                    0u8, 80u8, 75u8, 0u8, 71u8, 66u8, 0u8, 67u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n+                    84u8, 72u8, 0u8, 80u8, 75u8, 0u8, 75u8, 71u8, 0u8, 77u8, 89u8, 0u8, 77u8,\n+                    89u8, 0u8, 86u8, 65u8, 0u8, 71u8, 82u8, 0u8, 73u8, 76u8, 0u8, 84u8, 90u8,\n+                    0u8, 80u8, 75u8, 0u8, 85u8, 71u8, 0u8, 76u8, 85u8, 0u8, 82u8, 85u8, 0u8,\n+                    73u8, 68u8, 0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n+                    71u8, 0u8, 78u8, 76u8, 0u8, 78u8, 80u8, 0u8, 73u8, 84u8, 0u8, 67u8, 65u8,\n+                    0u8, 67u8, 78u8, 0u8, 73u8, 68u8, 0u8, 73u8, 82u8, 0u8, 85u8, 83u8, 0u8,\n+                    73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 67u8, 68u8, 0u8, 76u8, 65u8, 0u8, 67u8,\n+                    68u8, 0u8, 90u8, 77u8, 0u8, 73u8, 82u8, 0u8, 76u8, 84u8, 0u8, 76u8, 86u8,\n+                    0u8, 67u8, 68u8, 0u8, 67u8, 68u8, 0u8, 75u8, 69u8, 0u8, 75u8, 69u8, 0u8,\n+                    73u8, 82u8, 0u8, 76u8, 86u8, 0u8, 84u8, 72u8, 0u8, 67u8, 78u8, 0u8, 84u8,\n+                    82u8, 0u8, 73u8, 68u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8,\n+                    0u8, 73u8, 68u8, 0u8, 71u8, 77u8, 0u8, 75u8, 69u8, 0u8, 77u8, 88u8, 0u8,\n+                    82u8, 85u8, 0u8, 80u8, 72u8, 0u8, 73u8, 68u8, 0u8, 83u8, 76u8, 0u8, 75u8,\n+                    69u8, 0u8, 84u8, 72u8, 0u8, 77u8, 85u8, 0u8, 77u8, 71u8, 0u8, 77u8, 90u8,\n+                    0u8, 67u8, 77u8, 0u8, 78u8, 80u8, 0u8, 84u8, 90u8, 0u8, 77u8, 72u8, 0u8,\n+                    78u8, 90u8, 0u8, 67u8, 65u8, 0u8, 73u8, 68u8, 0u8, 77u8, 75u8, 0u8, 73u8,\n+                    78u8, 0u8, 83u8, 68u8, 0u8, 77u8, 78u8, 0u8, 73u8, 78u8, 0u8, 77u8, 77u8,\n+                    0u8, 82u8, 79u8, 0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 66u8, 70u8, 0u8,\n+                    73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 82u8, 85u8, 0u8, 66u8, 68u8, 0u8, 77u8,\n+                    89u8, 0u8, 77u8, 84u8, 0u8, 73u8, 78u8, 0u8, 67u8, 77u8, 0u8, 85u8, 83u8,\n+                    0u8, 80u8, 75u8, 0u8, 77u8, 76u8, 0u8, 73u8, 78u8, 0u8, 73u8, 68u8, 0u8,\n+                    85u8, 83u8, 0u8, 90u8, 87u8, 0u8, 77u8, 77u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n+                    71u8, 0u8, 73u8, 82u8, 0u8, 73u8, 82u8, 0u8, 78u8, 82u8, 0u8, 67u8, 78u8,\n+                    0u8, 73u8, 84u8, 0u8, 78u8, 65u8, 0u8, 78u8, 79u8, 0u8, 77u8, 88u8, 0u8,\n+                    90u8, 87u8, 0u8, 77u8, 90u8, 0u8, 68u8, 69u8, 0u8, 78u8, 80u8, 0u8, 78u8,\n+                    80u8, 0u8, 78u8, 65u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 88u8,\n+                    0u8, 73u8, 68u8, 0u8, 78u8, 85u8, 0u8, 73u8, 78u8, 0u8, 78u8, 76u8, 0u8,\n+                    67u8, 77u8, 0u8, 78u8, 79u8, 0u8, 67u8, 77u8, 0u8, 73u8, 78u8, 0u8, 78u8,\n+                    79u8, 0u8, 84u8, 72u8, 0u8, 73u8, 78u8, 0u8, 83u8, 69u8, 0u8, 71u8, 78u8,\n+                    0u8, 90u8, 65u8, 0u8, 67u8, 65u8, 0u8, 90u8, 65u8, 0u8, 73u8, 78u8, 0u8,\n+                    83u8, 83u8, 0u8, 85u8, 83u8, 0u8, 67u8, 78u8, 0u8, 77u8, 87u8, 0u8, 84u8,\n+                    90u8, 0u8, 85u8, 71u8, 0u8, 71u8, 72u8, 0u8, 70u8, 82u8, 0u8, 67u8, 65u8,\n+                    0u8, 67u8, 65u8, 0u8, 67u8, 65u8, 0u8, 69u8, 84u8, 0u8, 73u8, 78u8, 0u8,\n+                    71u8, 69u8, 0u8, 85u8, 83u8, 0u8, 77u8, 78u8, 0u8, 49u8, 52u8, 51u8, 73u8,\n+                    78u8, 0u8, 80u8, 72u8, 0u8, 73u8, 82u8, 0u8, 80u8, 72u8, 0u8, 65u8, 87u8,\n+                    0u8, 80u8, 87u8, 0u8, 70u8, 82u8, 0u8, 78u8, 71u8, 0u8, 85u8, 83u8, 0u8,\n+                    67u8, 65u8, 0u8, 73u8, 82u8, 0u8, 68u8, 69u8, 0u8, 76u8, 66u8, 0u8, 83u8,\n+                    66u8, 0u8, 73u8, 78u8, 0u8, 75u8, 69u8, 0u8, 80u8, 76u8, 0u8, 73u8, 84u8,\n+                    0u8, 71u8, 82u8, 0u8, 70u8, 77u8, 0u8, 73u8, 78u8, 0u8, 67u8, 65u8, 0u8,\n+                    80u8, 75u8, 0u8, 73u8, 82u8, 0u8, 48u8, 48u8, 49u8, 65u8, 70u8, 0u8, 66u8,\n+                    82u8, 0u8, 71u8, 65u8, 0u8, 80u8, 69u8, 0u8, 71u8, 84u8, 0u8, 69u8, 67u8,\n+                    0u8, 73u8, 78u8, 0u8, 82u8, 69u8, 0u8, 73u8, 68u8, 0u8, 73u8, 84u8, 0u8,\n+                    77u8, 77u8, 0u8, 73u8, 78u8, 0u8, 77u8, 65u8, 0u8, 78u8, 80u8, 0u8, 66u8,\n+                    68u8, 0u8, 67u8, 72u8, 0u8, 70u8, 73u8, 0u8, 67u8, 72u8, 0u8, 73u8, 82u8,\n+                    0u8, 83u8, 69u8, 0u8, 66u8, 73u8, 0u8, 77u8, 90u8, 0u8, 82u8, 79u8, 0u8,\n+                    73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 70u8, 74u8, 0u8, 82u8, 85u8, 0u8, 85u8,\n+                    65u8, 0u8, 83u8, 66u8, 0u8, 82u8, 87u8, 0u8, 84u8, 90u8, 0u8, 74u8, 80u8,\n+                    0u8, 73u8, 78u8, 0u8, 71u8, 72u8, 0u8, 82u8, 85u8, 0u8, 75u8, 69u8, 0u8,\n+                    73u8, 68u8, 0u8, 73u8, 78u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8, 0u8, 84u8,\n+                    90u8, 0u8, 73u8, 84u8, 0u8, 73u8, 78u8, 0u8, 73u8, 84u8, 0u8, 71u8, 66u8,\n+                    0u8, 80u8, 75u8, 0u8, 73u8, 84u8, 0u8, 73u8, 82u8, 0u8, 78u8, 79u8, 0u8,\n+                    67u8, 73u8, 0u8, 77u8, 90u8, 0u8, 77u8, 88u8, 0u8, 77u8, 76u8, 0u8, 67u8,\n+                    70u8, 0u8, 73u8, 69u8, 0u8, 76u8, 84u8, 0u8, 77u8, 65u8, 0u8, 77u8, 77u8,\n+                    0u8, 76u8, 75u8, 0u8, 69u8, 84u8, 0u8, 83u8, 75u8, 0u8, 80u8, 75u8, 0u8,\n+                    83u8, 73u8, 0u8, 80u8, 76u8, 0u8, 73u8, 68u8, 0u8, 87u8, 83u8, 0u8, 83u8,\n+                    69u8, 0u8, 65u8, 79u8, 0u8, 83u8, 69u8, 0u8, 70u8, 73u8, 0u8, 73u8, 76u8,\n+                    0u8, 70u8, 73u8, 0u8, 90u8, 87u8, 0u8, 77u8, 89u8, 0u8, 77u8, 76u8, 0u8,\n+                    83u8, 79u8, 0u8, 85u8, 90u8, 0u8, 84u8, 72u8, 0u8, 65u8, 76u8, 0u8, 82u8,\n+                    83u8, 0u8, 73u8, 78u8, 0u8, 83u8, 82u8, 0u8, 83u8, 78u8, 0u8, 73u8, 78u8,\n+                    0u8, 90u8, 65u8, 0u8, 69u8, 82u8, 0u8, 90u8, 65u8, 0u8, 68u8, 69u8, 0u8,\n+                    73u8, 68u8, 0u8, 84u8, 90u8, 0u8, 71u8, 78u8, 0u8, 83u8, 69u8, 0u8, 84u8,\n+                    90u8, 0u8, 89u8, 84u8, 0u8, 67u8, 68u8, 0u8, 68u8, 69u8, 0u8, 73u8, 78u8,\n+                    0u8, 73u8, 68u8, 0u8, 66u8, 68u8, 0u8, 73u8, 81u8, 0u8, 80u8, 76u8, 0u8,\n+                    73u8, 78u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 73u8, 78u8, 0u8, 67u8,\n+                    78u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 77u8, 89u8, 0u8, 73u8, 78u8,\n+                    0u8, 83u8, 76u8, 0u8, 85u8, 71u8, 0u8, 84u8, 76u8, 0u8, 84u8, 74u8, 0u8,\n+                    84u8, 72u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 78u8, 80u8, 0u8, 69u8,\n+                    84u8, 0u8, 69u8, 82u8, 0u8, 78u8, 71u8, 0u8, 84u8, 77u8, 0u8, 84u8, 75u8,\n+                    0u8, 65u8, 90u8, 0u8, 78u8, 80u8, 0u8, 80u8, 72u8, 0u8, 65u8, 90u8, 0u8,\n+                    78u8, 69u8, 0u8, 90u8, 65u8, 0u8, 84u8, 79u8, 0u8, 77u8, 87u8, 0u8, 48u8,\n+                    48u8, 49u8, 80u8, 71u8, 0u8, 84u8, 82u8, 0u8, 84u8, 82u8, 0u8, 84u8, 87u8,\n+                    0u8, 80u8, 75u8, 0u8, 90u8, 65u8, 0u8, 71u8, 82u8, 0u8, 78u8, 80u8, 0u8,\n+                    80u8, 72u8, 0u8, 66u8, 84u8, 0u8, 82u8, 85u8, 0u8, 85u8, 71u8, 0u8, 84u8,\n+                    72u8, 0u8, 65u8, 90u8, 0u8, 77u8, 87u8, 0u8, 84u8, 86u8, 0u8, 78u8, 69u8,\n+                    0u8, 67u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 70u8, 0u8, 82u8, 85u8, 0u8,\n+                    77u8, 65u8, 0u8, 82u8, 85u8, 0u8, 82u8, 85u8, 0u8, 67u8, 78u8, 0u8, 83u8,\n+                    89u8, 0u8, 85u8, 65u8, 0u8, 70u8, 77u8, 0u8, 65u8, 79u8, 0u8, 73u8, 78u8,\n+                    0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 85u8, 90u8, 0u8, 76u8, 82u8, 0u8,\n+                    90u8, 65u8, 0u8, 73u8, 84u8, 0u8, 82u8, 85u8, 0u8, 86u8, 78u8, 0u8, 83u8,\n+                    88u8, 0u8, 66u8, 69u8, 0u8, 68u8, 69u8, 0u8, 77u8, 90u8, 0u8, 48u8, 48u8,\n+                    49u8, 82u8, 85u8, 0u8, 69u8, 69u8, 0u8, 84u8, 90u8, 0u8, 66u8, 69u8, 0u8,\n+                    67u8, 72u8, 0u8, 69u8, 84u8, 0u8, 80u8, 72u8, 0u8, 65u8, 85u8, 0u8, 73u8,\n+                    78u8, 0u8, 73u8, 78u8, 0u8, 87u8, 70u8, 0u8, 75u8, 77u8, 0u8, 83u8, 78u8,\n+                    0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 67u8, 78u8, 0u8, 66u8, 82u8, 0u8,\n+                    85u8, 90u8, 0u8, 84u8, 82u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8, 0u8, 84u8,\n+                    82u8, 0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 83u8, 65u8,\n+                    0u8, 73u8, 78u8, 0u8, 85u8, 71u8, 0u8, 73u8, 82u8, 0u8, 89u8, 69u8, 0u8,\n+                    78u8, 80u8, 0u8, 77u8, 90u8, 0u8, 70u8, 77u8, 0u8, 67u8, 77u8, 0u8, 67u8,\n+                    77u8, 0u8, 48u8, 48u8, 49u8, 78u8, 71u8, 0u8, 66u8, 82u8, 0u8, 77u8, 88u8,\n+                    0u8, 72u8, 75u8, 0u8, 67u8, 78u8, 0u8, 83u8, 68u8, 0u8, 75u8, 77u8, 0u8,\n+                    78u8, 76u8, 0u8, 77u8, 65u8, 0u8, 67u8, 78u8, 0u8, 67u8, 78u8, 0u8, 67u8,\n+                    78u8, 0u8, 84u8, 71u8, 0u8, 77u8, 89u8, 0u8, 90u8, 65u8, 0u8, 84u8, 82u8,\n+                    0u8,\n+                ])\n+            },\n+        )\n+    },\n+    ls2r: unsafe {\n+        #[allow(unused_unsafe)]\n+        ::zerovec::ZeroMap2d::from_parts_unchecked(\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    97u8, 114u8, 99u8, 97u8, 122u8, 0u8, 99u8, 117u8, 0u8, 101u8, 110u8, 0u8,\n+                    102u8, 102u8, 0u8, 103u8, 114u8, 99u8, 107u8, 107u8, 0u8, 107u8, 117u8,\n+                    0u8, 107u8, 121u8, 0u8, 108u8, 105u8, 102u8, 109u8, 97u8, 110u8, 109u8,\n+                    110u8, 0u8, 112u8, 97u8, 0u8, 112u8, 97u8, 108u8, 115u8, 100u8, 0u8, 116u8,\n+                    103u8, 0u8, 117u8, 103u8, 0u8, 117u8, 110u8, 114u8, 117u8, 122u8, 0u8,\n+                    121u8, 117u8, 101u8, 122u8, 104u8, 0u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    2u8, 0u8, 0u8, 0u8, 3u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 5u8, 0u8, 0u8,\n+                    0u8, 6u8, 0u8, 0u8, 0u8, 7u8, 0u8, 0u8, 0u8, 8u8, 0u8, 0u8, 0u8, 10u8, 0u8,\n+                    0u8, 0u8, 12u8, 0u8, 0u8, 0u8, 13u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8,\n+                    15u8, 0u8, 0u8, 0u8, 16u8, 0u8, 0u8, 0u8, 17u8, 0u8, 0u8, 0u8, 20u8, 0u8,\n+                    0u8, 0u8, 21u8, 0u8, 0u8, 0u8, 22u8, 0u8, 0u8, 0u8, 23u8, 0u8, 0u8, 0u8,\n+                    24u8, 0u8, 0u8, 0u8, 25u8, 0u8, 0u8, 0u8, 28u8, 0u8, 0u8, 0u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    78u8, 98u8, 97u8, 116u8, 80u8, 97u8, 108u8, 109u8, 65u8, 114u8, 97u8, 98u8,\n+                    71u8, 108u8, 97u8, 103u8, 83u8, 104u8, 97u8, 119u8, 65u8, 100u8, 108u8,\n+                    109u8, 76u8, 105u8, 110u8, 98u8, 65u8, 114u8, 97u8, 98u8, 65u8, 114u8,\n+                    97u8, 98u8, 89u8, 101u8, 122u8, 105u8, 65u8, 114u8, 97u8, 98u8, 76u8, 97u8,\n+                    116u8, 110u8, 76u8, 105u8, 109u8, 98u8, 78u8, 107u8, 111u8, 111u8, 77u8,\n+                    111u8, 110u8, 103u8, 65u8, 114u8, 97u8, 98u8, 80u8, 104u8, 108u8, 112u8,\n+                    68u8, 101u8, 118u8, 97u8, 75u8, 104u8, 111u8, 106u8, 83u8, 105u8, 110u8,\n+                    100u8, 65u8, 114u8, 97u8, 98u8, 67u8, 121u8, 114u8, 108u8, 68u8, 101u8,\n+                    118u8, 97u8, 65u8, 114u8, 97u8, 98u8, 72u8, 97u8, 110u8, 115u8, 66u8,\n+                    111u8, 112u8, 111u8, 72u8, 97u8, 110u8, 98u8, 72u8, 97u8, 110u8, 116u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    74u8, 79u8, 0u8, 83u8, 89u8, 0u8, 73u8, 82u8, 0u8, 66u8, 71u8, 0u8, 71u8,\n+                    66u8, 0u8, 71u8, 78u8, 0u8, 71u8, 82u8, 0u8, 67u8, 78u8, 0u8, 73u8, 81u8,\n+                    0u8, 71u8, 69u8, 0u8, 67u8, 78u8, 0u8, 84u8, 82u8, 0u8, 73u8, 78u8, 0u8,\n+                    71u8, 78u8, 0u8, 67u8, 78u8, 0u8, 80u8, 75u8, 0u8, 67u8, 78u8, 0u8, 73u8,\n+                    78u8, 0u8, 73u8, 78u8, 0u8, 73u8, 78u8, 0u8, 80u8, 75u8, 0u8, 75u8, 90u8,\n+                    0u8, 78u8, 80u8, 0u8, 65u8, 70u8, 0u8, 67u8, 78u8, 0u8, 84u8, 87u8, 0u8,\n+                    84u8, 87u8, 0u8, 84u8, 87u8, 0u8,\n+                ])\n+            },\n+        )\n+    },\n+}"}, {"sha": "f07b4b80649efa273bdb807a71f5d31b0de40632", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/parents_v1.rs", "status": "removed", "additions": 0, "deletions": 207, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1.rs?ref=8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2", "patch": "@@ -1,207 +0,0 @@\n-// @generated\n-type DataStruct = < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker as :: icu_provider :: DataMarker > :: Yokeable ;\n-pub static DATA: litemap::LiteMap<&str, &DataStruct, &[(&str, &DataStruct)]> =\n-    litemap::LiteMap::from_sorted_store_unchecked(&[(\"und\", UND)]);\n-static UND: &DataStruct = &::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1 {\n-    parents: unsafe {\n-        #[allow(unused_unsafe)]\n-        ::zerovec::ZeroMap::from_parts_unchecked(\n-            unsafe {\n-                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                    131u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 11u8, 0u8, 16u8, 0u8, 21u8, 0u8,\n-                    26u8, 0u8, 31u8, 0u8, 36u8, 0u8, 41u8, 0u8, 46u8, 0u8, 51u8, 0u8, 56u8, 0u8,\n-                    61u8, 0u8, 66u8, 0u8, 71u8, 0u8, 76u8, 0u8, 81u8, 0u8, 86u8, 0u8, 91u8, 0u8,\n-                    96u8, 0u8, 101u8, 0u8, 106u8, 0u8, 111u8, 0u8, 116u8, 0u8, 121u8, 0u8, 126u8,\n-                    0u8, 131u8, 0u8, 136u8, 0u8, 141u8, 0u8, 146u8, 0u8, 151u8, 0u8, 156u8, 0u8,\n-                    161u8, 0u8, 166u8, 0u8, 171u8, 0u8, 176u8, 0u8, 181u8, 0u8, 186u8, 0u8, 191u8,\n-                    0u8, 196u8, 0u8, 201u8, 0u8, 206u8, 0u8, 211u8, 0u8, 216u8, 0u8, 221u8, 0u8,\n-                    226u8, 0u8, 231u8, 0u8, 236u8, 0u8, 241u8, 0u8, 246u8, 0u8, 251u8, 0u8, 0u8,\n-                    1u8, 5u8, 1u8, 10u8, 1u8, 15u8, 1u8, 20u8, 1u8, 25u8, 1u8, 30u8, 1u8, 35u8,\n-                    1u8, 40u8, 1u8, 45u8, 1u8, 50u8, 1u8, 55u8, 1u8, 60u8, 1u8, 65u8, 1u8, 70u8,\n-                    1u8, 75u8, 1u8, 80u8, 1u8, 85u8, 1u8, 90u8, 1u8, 95u8, 1u8, 100u8, 1u8, 105u8,\n-                    1u8, 110u8, 1u8, 115u8, 1u8, 120u8, 1u8, 125u8, 1u8, 130u8, 1u8, 135u8, 1u8,\n-                    140u8, 1u8, 145u8, 1u8, 150u8, 1u8, 155u8, 1u8, 160u8, 1u8, 165u8, 1u8, 170u8,\n-                    1u8, 175u8, 1u8, 180u8, 1u8, 185u8, 1u8, 190u8, 1u8, 195u8, 1u8, 200u8, 1u8,\n-                    205u8, 1u8, 210u8, 1u8, 215u8, 1u8, 220u8, 1u8, 225u8, 1u8, 230u8, 1u8, 235u8,\n-                    1u8, 240u8, 1u8, 245u8, 1u8, 250u8, 1u8, 255u8, 1u8, 4u8, 2u8, 9u8, 2u8, 14u8,\n-                    2u8, 19u8, 2u8, 24u8, 2u8, 29u8, 2u8, 34u8, 2u8, 39u8, 2u8, 44u8, 2u8, 49u8,\n-                    2u8, 54u8, 2u8, 59u8, 2u8, 64u8, 2u8, 71u8, 2u8, 73u8, 2u8, 75u8, 2u8, 77u8,\n-                    2u8, 82u8, 2u8, 87u8, 2u8, 92u8, 2u8, 97u8, 2u8, 102u8, 2u8, 107u8, 2u8, 112u8,\n-                    2u8, 117u8, 2u8, 122u8, 2u8, 127u8, 2u8, 132u8, 2u8, 101u8, 110u8, 45u8, 49u8,\n-                    53u8, 48u8, 101u8, 110u8, 45u8, 65u8, 71u8, 101u8, 110u8, 45u8, 65u8, 73u8,\n-                    101u8, 110u8, 45u8, 65u8, 84u8, 101u8, 110u8, 45u8, 65u8, 85u8, 101u8, 110u8,\n-                    45u8, 66u8, 66u8, 101u8, 110u8, 45u8, 66u8, 69u8, 101u8, 110u8, 45u8, 66u8,\n-                    77u8, 101u8, 110u8, 45u8, 66u8, 83u8, 101u8, 110u8, 45u8, 66u8, 87u8, 101u8,\n-                    110u8, 45u8, 66u8, 90u8, 101u8, 110u8, 45u8, 67u8, 67u8, 101u8, 110u8, 45u8,\n-                    67u8, 72u8, 101u8, 110u8, 45u8, 67u8, 75u8, 101u8, 110u8, 45u8, 67u8, 77u8,\n-                    101u8, 110u8, 45u8, 67u8, 88u8, 101u8, 110u8, 45u8, 67u8, 89u8, 101u8, 110u8,\n-                    45u8, 68u8, 69u8, 101u8, 110u8, 45u8, 68u8, 71u8, 101u8, 110u8, 45u8, 68u8,\n-                    75u8, 101u8, 110u8, 45u8, 68u8, 77u8, 101u8, 110u8, 45u8, 69u8, 82u8, 101u8,\n-                    110u8, 45u8, 70u8, 73u8, 101u8, 110u8, 45u8, 70u8, 74u8, 101u8, 110u8, 45u8,\n-                    70u8, 75u8, 101u8, 110u8, 45u8, 70u8, 77u8, 101u8, 110u8, 45u8, 71u8, 66u8,\n-                    101u8, 110u8, 45u8, 71u8, 68u8, 101u8, 110u8, 45u8, 71u8, 71u8, 101u8, 110u8,\n-                    45u8, 71u8, 72u8, 101u8, 110u8, 45u8, 71u8, 73u8, 101u8, 110u8, 45u8, 71u8,\n-                    77u8, 101u8, 110u8, 45u8, 71u8, 89u8, 101u8, 110u8, 45u8, 72u8, 75u8, 101u8,\n-                    110u8, 45u8, 73u8, 69u8, 101u8, 110u8, 45u8, 73u8, 76u8, 101u8, 110u8, 45u8,\n-                    73u8, 77u8, 101u8, 110u8, 45u8, 73u8, 78u8, 101u8, 110u8, 45u8, 73u8, 79u8,\n-                    101u8, 110u8, 45u8, 74u8, 69u8, 101u8, 110u8, 45u8, 74u8, 77u8, 101u8, 110u8,\n-                    45u8, 75u8, 69u8, 101u8, 110u8, 45u8, 75u8, 73u8, 101u8, 110u8, 45u8, 75u8,\n-                    78u8, 101u8, 110u8, 45u8, 75u8, 89u8, 101u8, 110u8, 45u8, 76u8, 67u8, 101u8,\n-                    110u8, 45u8, 76u8, 82u8, 101u8, 110u8, 45u8, 76u8, 83u8, 101u8, 110u8, 45u8,\n-                    77u8, 71u8, 101u8, 110u8, 45u8, 77u8, 79u8, 101u8, 110u8, 45u8, 77u8, 83u8,\n-                    101u8, 110u8, 45u8, 77u8, 84u8, 101u8, 110u8, 45u8, 77u8, 85u8, 101u8, 110u8,\n-                    45u8, 77u8, 86u8, 101u8, 110u8, 45u8, 77u8, 87u8, 101u8, 110u8, 45u8, 77u8,\n-                    89u8, 101u8, 110u8, 45u8, 78u8, 65u8, 101u8, 110u8, 45u8, 78u8, 70u8, 101u8,\n-                    110u8, 45u8, 78u8, 71u8, 101u8, 110u8, 45u8, 78u8, 76u8, 101u8, 110u8, 45u8,\n-                    78u8, 82u8, 101u8, 110u8, 45u8, 78u8, 85u8, 101u8, 110u8, 45u8, 78u8, 90u8,\n-                    101u8, 110u8, 45u8, 80u8, 71u8, 101u8, 110u8, 45u8, 80u8, 75u8, 101u8, 110u8,\n-                    45u8, 80u8, 78u8, 101u8, 110u8, 45u8, 80u8, 87u8, 101u8, 110u8, 45u8, 82u8,\n-                    87u8, 101u8, 110u8, 45u8, 83u8, 66u8, 101u8, 110u8, 45u8, 83u8, 67u8, 101u8,\n-                    110u8, 45u8, 83u8, 68u8, 101u8, 110u8, 45u8, 83u8, 69u8, 101u8, 110u8, 45u8,\n-                    83u8, 71u8, 101u8, 110u8, 45u8, 83u8, 72u8, 101u8, 110u8, 45u8, 83u8, 73u8,\n-                    101u8, 110u8, 45u8, 83u8, 76u8, 101u8, 110u8, 45u8, 83u8, 83u8, 101u8, 110u8,\n-                    45u8, 83u8, 88u8, 101u8, 110u8, 45u8, 83u8, 90u8, 101u8, 110u8, 45u8, 84u8,\n-                    67u8, 101u8, 110u8, 45u8, 84u8, 75u8, 101u8, 110u8, 45u8, 84u8, 79u8, 101u8,\n-                    110u8, 45u8, 84u8, 84u8, 101u8, 110u8, 45u8, 84u8, 86u8, 101u8, 110u8, 45u8,\n-                    84u8, 90u8, 101u8, 110u8, 45u8, 85u8, 71u8, 101u8, 110u8, 45u8, 86u8, 67u8,\n-                    101u8, 110u8, 45u8, 86u8, 71u8, 101u8, 110u8, 45u8, 86u8, 85u8, 101u8, 110u8,\n-                    45u8, 87u8, 83u8, 101u8, 110u8, 45u8, 90u8, 65u8, 101u8, 110u8, 45u8, 90u8,\n-                    77u8, 101u8, 110u8, 45u8, 90u8, 87u8, 101u8, 115u8, 45u8, 65u8, 82u8, 101u8,\n-                    115u8, 45u8, 66u8, 79u8, 101u8, 115u8, 45u8, 66u8, 82u8, 101u8, 115u8, 45u8,\n-                    66u8, 90u8, 101u8, 115u8, 45u8, 67u8, 76u8, 101u8, 115u8, 45u8, 67u8, 79u8,\n-                    101u8, 115u8, 45u8, 67u8, 82u8, 101u8, 115u8, 45u8, 67u8, 85u8, 101u8, 115u8,\n-                    45u8, 68u8, 79u8, 101u8, 115u8, 45u8, 69u8, 67u8, 101u8, 115u8, 45u8, 71u8,\n-                    84u8, 101u8, 115u8, 45u8, 72u8, 78u8, 101u8, 115u8, 45u8, 77u8, 88u8, 101u8,\n-                    115u8, 45u8, 78u8, 73u8, 101u8, 115u8, 45u8, 80u8, 65u8, 101u8, 115u8, 45u8,\n-                    80u8, 69u8, 101u8, 115u8, 45u8, 80u8, 82u8, 101u8, 115u8, 45u8, 80u8, 89u8,\n-                    101u8, 115u8, 45u8, 83u8, 86u8, 101u8, 115u8, 45u8, 85u8, 83u8, 101u8, 115u8,\n-                    45u8, 85u8, 89u8, 101u8, 115u8, 45u8, 86u8, 69u8, 104u8, 105u8, 45u8, 76u8,\n-                    97u8, 116u8, 110u8, 104u8, 116u8, 110u8, 98u8, 110u8, 110u8, 112u8, 116u8,\n-                    45u8, 65u8, 79u8, 112u8, 116u8, 45u8, 67u8, 72u8, 112u8, 116u8, 45u8, 67u8,\n-                    86u8, 112u8, 116u8, 45u8, 70u8, 82u8, 112u8, 116u8, 45u8, 71u8, 81u8, 112u8,\n-                    116u8, 45u8, 71u8, 87u8, 112u8, 116u8, 45u8, 76u8, 85u8, 112u8, 116u8, 45u8,\n-                    77u8, 79u8, 112u8, 116u8, 45u8, 77u8, 90u8, 112u8, 116u8, 45u8, 83u8, 84u8,\n-                    112u8, 116u8, 45u8, 84u8, 76u8, 122u8, 104u8, 45u8, 72u8, 97u8, 110u8, 116u8,\n-                    45u8, 77u8, 79u8,\n-                ])\n-            },\n-            unsafe {\n-                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8,\n-                    48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n-                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n-                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 115u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8,\n-                    57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8,\n-                    115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8,\n-                    57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8,\n-                    115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n-                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8,\n-                    57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8,\n-                    115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 73u8, 78u8, 0u8, 102u8, 114u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 1u8, 72u8, 84u8, 0u8, 110u8, 111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 110u8, 111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8,\n-                    84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8,\n-                    112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 122u8, 104u8, 0u8, 1u8, 72u8, 97u8, 110u8,\n-                    116u8, 1u8, 72u8, 75u8, 0u8,\n-                ])\n-            },\n-        )\n-    },\n-};"}, {"sha": "ce04af868aa54561590e20e8c3d2a703e0de24c7", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/parents_v1/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,6 @@\n+// @generated\n+type DataStruct = < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker as :: icu_provider :: DataMarker > :: Yokeable ;\n+pub fn lookup(locale: &icu_provider::DataLocale) -> Option<&'static DataStruct> {\n+    locale.is_empty().then(|| &UND)\n+}\n+static UND: DataStruct = include!(\"und.rs.data\");"}, {"sha": "5ead959083cc8fc6201b370493b009e723986f3b", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/parents_v1/und.rs.data", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fparents_v1%2Fund.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,216 @@\n+::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1 {\n+    parents: unsafe {\n+        #[allow(unused_unsafe)]\n+        ::zerovec::ZeroMap::from_parts_unchecked(\n+            unsafe {\n+                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n+                    131u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 11u8, 0u8, 16u8, 0u8, 21u8, 0u8,\n+                    26u8, 0u8, 31u8, 0u8, 36u8, 0u8, 41u8, 0u8, 46u8, 0u8, 51u8, 0u8, 56u8,\n+                    0u8, 61u8, 0u8, 66u8, 0u8, 71u8, 0u8, 76u8, 0u8, 81u8, 0u8, 86u8, 0u8,\n+                    91u8, 0u8, 96u8, 0u8, 101u8, 0u8, 106u8, 0u8, 111u8, 0u8, 116u8, 0u8,\n+                    121u8, 0u8, 126u8, 0u8, 131u8, 0u8, 136u8, 0u8, 141u8, 0u8, 146u8, 0u8,\n+                    151u8, 0u8, 156u8, 0u8, 161u8, 0u8, 166u8, 0u8, 171u8, 0u8, 176u8, 0u8,\n+                    181u8, 0u8, 186u8, 0u8, 191u8, 0u8, 196u8, 0u8, 201u8, 0u8, 206u8, 0u8,\n+                    211u8, 0u8, 216u8, 0u8, 221u8, 0u8, 226u8, 0u8, 231u8, 0u8, 236u8, 0u8,\n+                    241u8, 0u8, 246u8, 0u8, 251u8, 0u8, 0u8, 1u8, 5u8, 1u8, 10u8, 1u8, 15u8,\n+                    1u8, 20u8, 1u8, 25u8, 1u8, 30u8, 1u8, 35u8, 1u8, 40u8, 1u8, 45u8, 1u8,\n+                    50u8, 1u8, 55u8, 1u8, 60u8, 1u8, 65u8, 1u8, 70u8, 1u8, 75u8, 1u8, 80u8,\n+                    1u8, 85u8, 1u8, 90u8, 1u8, 95u8, 1u8, 100u8, 1u8, 105u8, 1u8, 110u8, 1u8,\n+                    115u8, 1u8, 120u8, 1u8, 125u8, 1u8, 130u8, 1u8, 135u8, 1u8, 140u8, 1u8,\n+                    145u8, 1u8, 150u8, 1u8, 155u8, 1u8, 160u8, 1u8, 165u8, 1u8, 170u8, 1u8,\n+                    175u8, 1u8, 180u8, 1u8, 185u8, 1u8, 190u8, 1u8, 195u8, 1u8, 200u8, 1u8,\n+                    205u8, 1u8, 210u8, 1u8, 215u8, 1u8, 220u8, 1u8, 225u8, 1u8, 230u8, 1u8,\n+                    235u8, 1u8, 240u8, 1u8, 245u8, 1u8, 250u8, 1u8, 255u8, 1u8, 4u8, 2u8, 9u8,\n+                    2u8, 14u8, 2u8, 19u8, 2u8, 24u8, 2u8, 29u8, 2u8, 34u8, 2u8, 39u8, 2u8,\n+                    44u8, 2u8, 49u8, 2u8, 54u8, 2u8, 59u8, 2u8, 64u8, 2u8, 71u8, 2u8, 73u8,\n+                    2u8, 75u8, 2u8, 77u8, 2u8, 82u8, 2u8, 87u8, 2u8, 92u8, 2u8, 97u8, 2u8,\n+                    102u8, 2u8, 107u8, 2u8, 112u8, 2u8, 117u8, 2u8, 122u8, 2u8, 127u8, 2u8,\n+                    132u8, 2u8, 101u8, 110u8, 45u8, 49u8, 53u8, 48u8, 101u8, 110u8, 45u8, 65u8,\n+                    71u8, 101u8, 110u8, 45u8, 65u8, 73u8, 101u8, 110u8, 45u8, 65u8, 84u8,\n+                    101u8, 110u8, 45u8, 65u8, 85u8, 101u8, 110u8, 45u8, 66u8, 66u8, 101u8,\n+                    110u8, 45u8, 66u8, 69u8, 101u8, 110u8, 45u8, 66u8, 77u8, 101u8, 110u8,\n+                    45u8, 66u8, 83u8, 101u8, 110u8, 45u8, 66u8, 87u8, 101u8, 110u8, 45u8, 66u8,\n+                    90u8, 101u8, 110u8, 45u8, 67u8, 67u8, 101u8, 110u8, 45u8, 67u8, 72u8,\n+                    101u8, 110u8, 45u8, 67u8, 75u8, 101u8, 110u8, 45u8, 67u8, 77u8, 101u8,\n+                    110u8, 45u8, 67u8, 88u8, 101u8, 110u8, 45u8, 67u8, 89u8, 101u8, 110u8,\n+                    45u8, 68u8, 69u8, 101u8, 110u8, 45u8, 68u8, 71u8, 101u8, 110u8, 45u8, 68u8,\n+                    75u8, 101u8, 110u8, 45u8, 68u8, 77u8, 101u8, 110u8, 45u8, 69u8, 82u8,\n+                    101u8, 110u8, 45u8, 70u8, 73u8, 101u8, 110u8, 45u8, 70u8, 74u8, 101u8,\n+                    110u8, 45u8, 70u8, 75u8, 101u8, 110u8, 45u8, 70u8, 77u8, 101u8, 110u8,\n+                    45u8, 71u8, 66u8, 101u8, 110u8, 45u8, 71u8, 68u8, 101u8, 110u8, 45u8, 71u8,\n+                    71u8, 101u8, 110u8, 45u8, 71u8, 72u8, 101u8, 110u8, 45u8, 71u8, 73u8,\n+                    101u8, 110u8, 45u8, 71u8, 77u8, 101u8, 110u8, 45u8, 71u8, 89u8, 101u8,\n+                    110u8, 45u8, 72u8, 75u8, 101u8, 110u8, 45u8, 73u8, 69u8, 101u8, 110u8,\n+                    45u8, 73u8, 76u8, 101u8, 110u8, 45u8, 73u8, 77u8, 101u8, 110u8, 45u8, 73u8,\n+                    78u8, 101u8, 110u8, 45u8, 73u8, 79u8, 101u8, 110u8, 45u8, 74u8, 69u8,\n+                    101u8, 110u8, 45u8, 74u8, 77u8, 101u8, 110u8, 45u8, 75u8, 69u8, 101u8,\n+                    110u8, 45u8, 75u8, 73u8, 101u8, 110u8, 45u8, 75u8, 78u8, 101u8, 110u8,\n+                    45u8, 75u8, 89u8, 101u8, 110u8, 45u8, 76u8, 67u8, 101u8, 110u8, 45u8, 76u8,\n+                    82u8, 101u8, 110u8, 45u8, 76u8, 83u8, 101u8, 110u8, 45u8, 77u8, 71u8,\n+                    101u8, 110u8, 45u8, 77u8, 79u8, 101u8, 110u8, 45u8, 77u8, 83u8, 101u8,\n+                    110u8, 45u8, 77u8, 84u8, 101u8, 110u8, 45u8, 77u8, 85u8, 101u8, 110u8,\n+                    45u8, 77u8, 86u8, 101u8, 110u8, 45u8, 77u8, 87u8, 101u8, 110u8, 45u8, 77u8,\n+                    89u8, 101u8, 110u8, 45u8, 78u8, 65u8, 101u8, 110u8, 45u8, 78u8, 70u8,\n+                    101u8, 110u8, 45u8, 78u8, 71u8, 101u8, 110u8, 45u8, 78u8, 76u8, 101u8,\n+                    110u8, 45u8, 78u8, 82u8, 101u8, 110u8, 45u8, 78u8, 85u8, 101u8, 110u8,\n+                    45u8, 78u8, 90u8, 101u8, 110u8, 45u8, 80u8, 71u8, 101u8, 110u8, 45u8, 80u8,\n+                    75u8, 101u8, 110u8, 45u8, 80u8, 78u8, 101u8, 110u8, 45u8, 80u8, 87u8,\n+                    101u8, 110u8, 45u8, 82u8, 87u8, 101u8, 110u8, 45u8, 83u8, 66u8, 101u8,\n+                    110u8, 45u8, 83u8, 67u8, 101u8, 110u8, 45u8, 83u8, 68u8, 101u8, 110u8,\n+                    45u8, 83u8, 69u8, 101u8, 110u8, 45u8, 83u8, 71u8, 101u8, 110u8, 45u8, 83u8,\n+                    72u8, 101u8, 110u8, 45u8, 83u8, 73u8, 101u8, 110u8, 45u8, 83u8, 76u8,\n+                    101u8, 110u8, 45u8, 83u8, 83u8, 101u8, 110u8, 45u8, 83u8, 88u8, 101u8,\n+                    110u8, 45u8, 83u8, 90u8, 101u8, 110u8, 45u8, 84u8, 67u8, 101u8, 110u8,\n+                    45u8, 84u8, 75u8, 101u8, 110u8, 45u8, 84u8, 79u8, 101u8, 110u8, 45u8, 84u8,\n+                    84u8, 101u8, 110u8, 45u8, 84u8, 86u8, 101u8, 110u8, 45u8, 84u8, 90u8,\n+                    101u8, 110u8, 45u8, 85u8, 71u8, 101u8, 110u8, 45u8, 86u8, 67u8, 101u8,\n+                    110u8, 45u8, 86u8, 71u8, 101u8, 110u8, 45u8, 86u8, 85u8, 101u8, 110u8,\n+                    45u8, 87u8, 83u8, 101u8, 110u8, 45u8, 90u8, 65u8, 101u8, 110u8, 45u8, 90u8,\n+                    77u8, 101u8, 110u8, 45u8, 90u8, 87u8, 101u8, 115u8, 45u8, 65u8, 82u8,\n+                    101u8, 115u8, 45u8, 66u8, 79u8, 101u8, 115u8, 45u8, 66u8, 82u8, 101u8,\n+                    115u8, 45u8, 66u8, 90u8, 101u8, 115u8, 45u8, 67u8, 76u8, 101u8, 115u8,\n+                    45u8, 67u8, 79u8, 101u8, 115u8, 45u8, 67u8, 82u8, 101u8, 115u8, 45u8, 67u8,\n+                    85u8, 101u8, 115u8, 45u8, 68u8, 79u8, 101u8, 115u8, 45u8, 69u8, 67u8,\n+                    101u8, 115u8, 45u8, 71u8, 84u8, 101u8, 115u8, 45u8, 72u8, 78u8, 101u8,\n+                    115u8, 45u8, 77u8, 88u8, 101u8, 115u8, 45u8, 78u8, 73u8, 101u8, 115u8,\n+                    45u8, 80u8, 65u8, 101u8, 115u8, 45u8, 80u8, 69u8, 101u8, 115u8, 45u8, 80u8,\n+                    82u8, 101u8, 115u8, 45u8, 80u8, 89u8, 101u8, 115u8, 45u8, 83u8, 86u8,\n+                    101u8, 115u8, 45u8, 85u8, 83u8, 101u8, 115u8, 45u8, 85u8, 89u8, 101u8,\n+                    115u8, 45u8, 86u8, 69u8, 104u8, 105u8, 45u8, 76u8, 97u8, 116u8, 110u8,\n+                    104u8, 116u8, 110u8, 98u8, 110u8, 110u8, 112u8, 116u8, 45u8, 65u8, 79u8,\n+                    112u8, 116u8, 45u8, 67u8, 72u8, 112u8, 116u8, 45u8, 67u8, 86u8, 112u8,\n+                    116u8, 45u8, 70u8, 82u8, 112u8, 116u8, 45u8, 71u8, 81u8, 112u8, 116u8,\n+                    45u8, 71u8, 87u8, 112u8, 116u8, 45u8, 76u8, 85u8, 112u8, 116u8, 45u8, 77u8,\n+                    79u8, 112u8, 116u8, 45u8, 77u8, 90u8, 112u8, 116u8, 45u8, 83u8, 84u8,\n+                    112u8, 116u8, 45u8, 84u8, 76u8, 122u8, 104u8, 45u8, 72u8, 97u8, 110u8,\n+                    116u8, 45u8, 77u8, 79u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n+                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8,\n+                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n+                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n+                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n+                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n+                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n+                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n+                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n+                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n+                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    49u8, 53u8, 48u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n+                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n+                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    48u8, 48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8,\n+                    48u8, 49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8,\n+                    49u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8,\n+                    101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8,\n+                    110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 48u8, 48u8, 49u8, 101u8, 115u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8,\n+                    49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8,\n+                    57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8,\n+                    101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8,\n+                    115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    1u8, 52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    52u8, 49u8, 57u8, 101u8, 115u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 52u8,\n+                    49u8, 57u8, 101u8, 110u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 73u8, 78u8,\n+                    0u8, 102u8, 114u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 72u8, 84u8, 0u8,\n+                    110u8, 111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 110u8,\n+                    111u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 112u8, 116u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                    0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8,\n+                    80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8,\n+                    84u8, 0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8,\n+                    0u8, 112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8,\n+                    112u8, 116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8,\n+                    116u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8,\n+                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 112u8, 116u8, 0u8, 0u8,\n+                    0u8, 0u8, 0u8, 0u8, 1u8, 80u8, 84u8, 0u8, 122u8, 104u8, 0u8, 1u8, 72u8,\n+                    97u8, 110u8, 116u8, 1u8, 72u8, 75u8, 0u8,\n+                ])\n+            },\n+        )\n+    },\n+}"}, {"sha": "7df33c12e3d5a6c28a06547c4af3f31b325aa268", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/supplement/co_v1.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1.rs?ref=8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2", "patch": "@@ -1,41 +0,0 @@\n-// @generated\n-type DataStruct = < :: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker as :: icu_provider :: DataMarker > :: Yokeable ;\n-pub static DATA: litemap::LiteMap<&str, &DataStruct, &[(&str, &DataStruct)]> =\n-    litemap::LiteMap::from_sorted_store_unchecked(&[(\"und\", UND)]);\n-static UND: &DataStruct =\n-    &::icu_provider_adapters::fallback::provider::LocaleFallbackSupplementV1 {\n-        parents: unsafe {\n-            #[allow(unused_unsafe)]\n-            ::zerovec::ZeroMap::from_parts_unchecked(\n-                unsafe {\n-                    ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                        1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 121u8, 117u8, 101u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::ZeroVec::from_bytes_unchecked(&[\n-                        122u8, 104u8, 0u8, 1u8, 72u8, 97u8, 110u8, 116u8, 0u8, 0u8, 0u8, 0u8,\n-                    ])\n-                },\n-            )\n-        },\n-        unicode_extension_defaults: unsafe {\n-            #[allow(unused_unsafe)]\n-            ::zerovec::ZeroMap2d::from_parts_unchecked(\n-                unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[99u8, 111u8]) },\n-                unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[2u8, 0u8, 0u8, 0u8]) },\n-                unsafe {\n-                    ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                        2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 122u8, 104u8, 122u8, 104u8, 45u8,\n-                        72u8, 97u8, 110u8, 116u8,\n-                    ])\n-                },\n-                unsafe {\n-                    ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n-                        2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 112u8, 105u8, 110u8, 121u8, 105u8,\n-                        110u8, 115u8, 116u8, 114u8, 111u8, 107u8, 101u8,\n-                    ])\n-                },\n-            )\n-        },\n-    };"}, {"sha": "9023647138b1bd7597812cc96db0839bf2fe8169", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/supplement/co_v1/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,6 @@\n+// @generated\n+type DataStruct = < :: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker as :: icu_provider :: DataMarker > :: Yokeable ;\n+pub fn lookup(locale: &icu_provider::DataLocale) -> Option<&'static DataStruct> {\n+    locale.is_empty().then(|| &UND)\n+}\n+static UND: DataStruct = include!(\"und.rs.data\");"}, {"sha": "7d70e78c327507efa39bbf0ebabcf27fe58ef3e5", "filename": "compiler/rustc_baked_icu_data/src/data/fallback/supplement/co_v1/und.rs.data", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Ffallback%2Fsupplement%2Fco_v1%2Fund.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,36 @@\n+::icu_provider_adapters::fallback::provider::LocaleFallbackSupplementV1 {\n+    parents: unsafe {\n+        #[allow(unused_unsafe)]\n+        ::zerovec::ZeroMap::from_parts_unchecked(\n+            unsafe {\n+                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n+                    1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 121u8, 117u8, 101u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::ZeroVec::from_bytes_unchecked(&[\n+                    122u8, 104u8, 0u8, 1u8, 72u8, 97u8, 110u8, 116u8, 0u8, 0u8, 0u8, 0u8,\n+                ])\n+            },\n+        )\n+    },\n+    unicode_extension_defaults: unsafe {\n+        #[allow(unused_unsafe)]\n+        ::zerovec::ZeroMap2d::from_parts_unchecked(\n+            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[99u8, 111u8]) },\n+            unsafe { ::zerovec::ZeroVec::from_bytes_unchecked(&[2u8, 0u8, 0u8, 0u8]) },\n+            unsafe {\n+                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n+                    2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 122u8, 104u8, 122u8, 104u8, 45u8,\n+                    72u8, 97u8, 110u8, 116u8,\n+                ])\n+            },\n+            unsafe {\n+                ::zerovec::VarZeroVec::from_bytes_unchecked(&[\n+                    2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 6u8, 0u8, 112u8, 105u8, 110u8, 121u8, 105u8,\n+                    110u8, 115u8, 116u8, 114u8, 111u8, 107u8, 101u8,\n+                ])\n+            },\n+        )\n+    },\n+}"}, {"sha": "9cae549e118d55dc9300e0c1d284cf56489724a9", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1.rs", "status": "removed", "additions": 0, "deletions": 1161, "changes": 1161, "blob_url": "https://github.com/rust-lang/rust/blob/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1.rs?ref=8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2", "patch": "@@ -1,1161 +0,0 @@\n-// @generated\n-type DataStruct = <::icu_list::provider::AndListV1Marker as ::icu_provider::DataMarker>::Yokeable;\n-pub static DATA: litemap::LiteMap<&str, &DataStruct, &[(&str, &DataStruct)]> =\n-    litemap::LiteMap::from_sorted_store_unchecked(&[\n-        (\"en\", EN),\n-        (\"es\", ES),\n-        (\"fr\", FR),\n-        (\"it\", IT),\n-        (\"ja\", JA),\n-        (\"pt\", PT),\n-        (\"ru\", RU),\n-        (\"tr\", TR),\n-        (\"und\", UND),\n-        (\"zh\", ZH_ZH_HANS),\n-        (\"zh-Hans\", ZH_ZH_HANS),\n-        (\"zh-Hant\", ZH_HANT),\n-    ]);\n-static EN: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", and \", 6u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" and \", 5u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", & \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" & \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-]);\n-static ES: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n-        special_case: Some(::icu_list::provider::SpecialCasePattern {\n-            condition: unsafe {\n-                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n-                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n-                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n-                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n-                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n-                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n-                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n-                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n-                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n-                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n-                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n-                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n-                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n-                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n-                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n-                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n-                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                    0u8, 35u8, 0u8, 0u8, 0u8,\n-                ])\n-            },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n-        }),\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n-        special_case: Some(::icu_list::provider::SpecialCasePattern {\n-            condition: unsafe {\n-                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n-                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n-                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n-                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n-                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n-                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n-                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n-                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n-                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n-                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n-                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n-                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n-                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n-                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n-                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n-                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n-                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                    0u8, 35u8, 0u8, 0u8, 0u8,\n-                ])\n-            },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n-        }),\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n-        special_case: Some(::icu_list::provider::SpecialCasePattern {\n-            condition: unsafe {\n-                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n-                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n-                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n-                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n-                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n-                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n-                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n-                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n-                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n-                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n-                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n-                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n-                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n-                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n-                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n-                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n-                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                    0u8, 35u8, 0u8, 0u8, 0u8,\n-                ])\n-            },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n-        }),\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n-        special_case: Some(::icu_list::provider::SpecialCasePattern {\n-            condition: unsafe {\n-                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n-                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n-                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n-                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n-                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n-                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n-                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n-                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n-                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n-                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n-                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n-                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n-                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n-                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n-                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n-                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n-                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                    0u8, 35u8, 0u8, 0u8, 0u8,\n-                ])\n-            },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n-        }),\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n-        special_case: Some(::icu_list::provider::SpecialCasePattern {\n-            condition: unsafe {\n-                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n-                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n-                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n-                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n-                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n-                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n-                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n-                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n-                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n-                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n-                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n-                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n-                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n-                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n-                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n-                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n-                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                    0u8, 35u8, 0u8, 0u8, 0u8,\n-                ])\n-            },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n-        }),\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n-        },\n-        special_case: Some(::icu_list::provider::SpecialCasePattern {\n-            condition: unsafe {\n-                ::icu_list::provider::StringMatcher::from_dfa_bytes_unchecked(&[\n-                    114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8, 120u8, 45u8,\n-                    97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8, 45u8, 100u8, 102u8, 97u8,\n-                    45u8, 115u8, 112u8, 97u8, 114u8, 115u8, 101u8, 0u8, 0u8, 255u8, 254u8, 0u8,\n-                    0u8, 2u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 1u8, 2u8, 2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n-                    7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8, 13u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n-                    14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n-                    15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8,\n-                    16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n-                    17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8, 18u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n-                    19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8,\n-                    21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 22u8,\n-                    23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8,\n-                    27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8,\n-                    0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8,\n-                    0u8, 5u8, 5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n-                    0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8,\n-                    104u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8,\n-                    4u8, 7u8, 9u8, 9u8, 11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8,\n-                    23u8, 23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n-                    0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 236u8,\n-                    0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8, 251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8,\n-                    25u8, 1u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    68u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 16u8, 0u8, 0u8,\n-                    191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8, 0u8,\n-                    221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n-                    0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8,\n-                    0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8,\n-                    18u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n-                    0u8, 35u8, 0u8, 0u8, 0u8,\n-                ])\n-            },\n-            pattern: unsafe {\n-                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-            },\n-        }),\n-    },\n-]);\n-static FR: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-]);\n-static IT: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-]);\n-static JA: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-]);\n-static PT: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-]);\n-static RU: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-]);\n-static TR: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-]);\n-static UND: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n-        },\n-        special_case: None,\n-    },\n-]);\n-static ZH_HANT: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-]);\n-static ZH_ZH_HANS: &DataStruct = &::icu_list::provider::ListFormatterPatternsV1([\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-    ::icu_list::provider::ConditionalListJoinerPattern {\n-        default: unsafe {\n-            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n-        },\n-        special_case: None,\n-    },\n-]);"}, {"sha": "cb5cbfa87c2393f47e79e56e10e4ba4092819ed8", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/en.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fen.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fen.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fen.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", and \", 6u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" and \", 5u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", & \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" & \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "51f9109751818df3fdaced421eb13eff0153eb70", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/es.rs.data", "status": "added", "additions": 836, "deletions": 0, "changes": 836, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fes.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fes.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fes.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,836 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n+                    if cfg!(target_endian = \"little\") {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n+                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                            0u8,\n+                        ]\n+                    } else {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n+                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n+                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8,\n+                        ]\n+                    },\n+                )\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n+                    if cfg!(target_endian = \"little\") {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n+                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                            0u8,\n+                        ]\n+                    } else {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n+                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n+                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8,\n+                        ]\n+                    },\n+                )\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n+                    if cfg!(target_endian = \"little\") {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n+                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                            0u8,\n+                        ]\n+                    } else {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n+                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n+                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8,\n+                        ]\n+                    },\n+                )\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n+                    if cfg!(target_endian = \"little\") {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n+                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                            0u8,\n+                        ]\n+                    } else {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n+                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n+                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8,\n+                        ]\n+                    },\n+                )\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n+                    if cfg!(target_endian = \"little\") {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n+                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                            0u8,\n+                        ]\n+                    } else {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n+                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n+                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8,\n+                        ]\n+                    },\n+                )\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" y \", 3u8)\n+        },\n+        special_case: Some(::icu_list::provider::SpecialCasePattern {\n+            condition: unsafe {\n+                ::icu_list::provider::SerdeDFA::from_dfa_bytes_unchecked(\n+                    if cfg!(target_endian = \"little\") {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 255u8, 254u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 40u8, 1u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 9u8,\n+                            0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8,\n+                            0u8,\n+                        ]\n+                    } else {\n+                        &[\n+                            114u8, 117u8, 115u8, 116u8, 45u8, 114u8, 101u8, 103u8, 101u8,\n+                            120u8, 45u8, 97u8, 117u8, 116u8, 111u8, 109u8, 97u8, 116u8, 97u8,\n+                            45u8, 100u8, 102u8, 97u8, 45u8, 115u8, 112u8, 97u8, 114u8, 115u8,\n+                            101u8, 0u8, 0u8, 0u8, 0u8, 254u8, 255u8, 0u8, 0u8, 0u8, 2u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8,\n+                            2u8, 2u8, 3u8, 4u8, 4u8, 5u8, 6u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8, 7u8,\n+                            7u8, 7u8, 7u8, 7u8, 8u8, 9u8, 9u8, 9u8, 10u8, 11u8, 11u8, 12u8,\n+                            13u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8, 14u8,\n+                            14u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 15u8,\n+                            15u8, 15u8, 15u8, 15u8, 15u8, 15u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8, 16u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8,\n+                            17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 17u8, 18u8,\n+                            18u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8,\n+                            19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 19u8, 20u8, 21u8,\n+                            21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8, 21u8,\n+                            22u8, 23u8, 23u8, 24u8, 25u8, 25u8, 25u8, 26u8, 27u8, 27u8, 27u8,\n+                            27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 27u8, 0u8, 0u8, 1u8,\n+                            40u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 128u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 5u8, 0u8, 5u8,\n+                            5u8, 6u8, 6u8, 12u8, 12u8, 13u8, 13u8, 0u8, 0u8, 83u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 83u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 27u8, 0u8, 0u8, 18u8, 0u8,\n+                            0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 0u8, 3u8, 0u8, 6u8, 6u8, 13u8, 13u8,\n+                            0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 104u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 14u8, 0u8, 0u8, 0u8, 2u8, 2u8, 4u8, 7u8, 9u8, 9u8,\n+                            11u8, 14u8, 19u8, 19u8, 20u8, 20u8, 21u8, 21u8, 22u8, 22u8, 23u8,\n+                            23u8, 24u8, 24u8, 25u8, 25u8, 26u8, 26u8, 0u8, 0u8, 68u8, 0u8, 0u8,\n+                            0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8, 68u8, 0u8, 0u8, 0u8,\n+                            68u8, 0u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 206u8, 0u8, 0u8, 0u8,\n+                            221u8, 0u8, 0u8, 0u8, 236u8, 0u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            251u8, 0u8, 0u8, 0u8, 10u8, 1u8, 0u8, 0u8, 25u8, 1u8, 0u8, 0u8,\n+                            18u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 68u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 17u8, 17u8, 0u8,\n+                            0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8,\n+                            17u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8,\n+                            0u8, 15u8, 16u8, 0u8, 0u8, 191u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 2u8, 0u8, 16u8, 17u8, 0u8, 0u8, 221u8, 0u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 17u8, 0u8, 0u8, 221u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 2u8, 0u8, 15u8, 15u8, 0u8,\n+                            0u8, 221u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8,\n+                            4u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8,\n+                            0u8, 0u8, 9u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8, 0u8, 18u8, 0u8, 0u8,\n+                            0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 35u8, 0u8, 0u8, 0u8,\n+                            35u8,\n+                        ]\n+                    },\n+                )\n+            },\n+            pattern: unsafe {\n+                ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+            },\n+        }),\n+    },\n+])"}, {"sha": "66ec8f600f48a190bb804f6837ce196a6ad5eeb6", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/fr.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ffr.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ffr.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ffr.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" et \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "cbccf1120d2ce5c5bcb2440f7fb42a8997dccd18", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/it.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fit.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fit.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fit.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "9fd168375cbeda318a3ec30c5d3b2665db83cd9a", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/ja.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fja.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fja.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fja.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "e20941f0c6767339ed000e4655062ea6072533de", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/mod.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,22 @@\n+// @generated\n+type DataStruct = <::icu_list::provider::AndListV1Marker as ::icu_provider::DataMarker>::Yokeable;\n+pub fn lookup(locale: &icu_provider::DataLocale) -> Option<&'static DataStruct> {\n+    static KEYS: [&str; 12usize] =\n+        [\"en\", \"es\", \"fr\", \"it\", \"ja\", \"pt\", \"ru\", \"tr\", \"und\", \"zh\", \"zh-Hans\", \"zh-Hant\"];\n+    static DATA: [&DataStruct; 12usize] =\n+        [&EN, &ES, &FR, &IT, &JA, &PT, &RU, &TR, &UND, &ZH, &ZH, &ZH_HANT];\n+    KEYS.binary_search_by(|k| locale.strict_cmp(k.as_bytes()).reverse())\n+        .ok()\n+        .map(|i| unsafe { *DATA.get_unchecked(i) })\n+}\n+static EN: DataStruct = include!(\"en.rs.data\");\n+static ES: DataStruct = include!(\"es.rs.data\");\n+static FR: DataStruct = include!(\"fr.rs.data\");\n+static IT: DataStruct = include!(\"it.rs.data\");\n+static JA: DataStruct = include!(\"ja.rs.data\");\n+static PT: DataStruct = include!(\"pt.rs.data\");\n+static RU: DataStruct = include!(\"ru.rs.data\");\n+static TR: DataStruct = include!(\"tr.rs.data\");\n+static UND: DataStruct = include!(\"und.rs.data\");\n+static ZH_HANT: DataStruct = include!(\"zh-Hant.rs.data\");\n+static ZH: DataStruct = include!(\"zh.rs.data\");"}, {"sha": "403975213efa3f86190e8395b498c0543211ec1c", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/pt.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fpt.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fpt.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fpt.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" e \", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "933cb85c8fe4afec61edc74fd3020a96023aed85", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/ru.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fru.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fru.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fru.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" \u0438 \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "286eaf69f34781fd87061bdf48c4a1f2fd4d2495", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/tr.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ftr.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ftr.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Ftr.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\" ve \", 4u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "2d2c9bcecb1b6dc33512fcd591e34d5836340be7", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/und.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fund.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fund.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fund.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\", \", 2u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "5d96cc85e8c210bf5a25b85a41e403d3df4d3333", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/zh-Hant.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh-Hant.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh-Hant.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh-Hant.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "4a38374caf4c49b34ad49726a50d9eee9793929e", "filename": "compiler/rustc_baked_icu_data/src/data/list/and_v1/zh.rs.data", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh.rs.data", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh.rs.data", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Flist%2Fand_v1%2Fzh.rs.data?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,74 @@\n+::icu_list::provider::ListFormatterPatternsV1([\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u548c\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+    ::icu_list::provider::ConditionalListJoinerPattern {\n+        default: unsafe {\n+            ::icu_list::provider::ListJoinerPattern::from_parts_unchecked(\"\u3001\", 3u8)\n+        },\n+        special_case: None,\n+    },\n+])"}, {"sha": "ce33339ad9983f0150c6de98458588618aaefcd7", "filename": "compiler/rustc_baked_icu_data/src/data/mod.rs", "status": "modified", "additions": 105, "deletions": 82, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_baked_icu_data%2Fsrc%2Fdata%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,90 +1,113 @@\n // @generated\n mod fallback;\n mod list;\n-/// This data provider was programmatically generated by [`icu_datagen`](\n-/// https://unicode-org.github.io/icu4x-docs/doc/icu_datagen/enum.Out.html#variant.Module).\n-#[non_exhaustive]\n-pub struct BakedDataProvider;\n use ::icu_provider::prelude::*;\n-impl DataProvider<::icu_list::provider::AndListV1Marker> for BakedDataProvider {\n-    fn load(\n-        &self,\n-        req: DataRequest,\n-    ) -> Result<DataResponse<::icu_list::provider::AndListV1Marker>, DataError> {\n-        Ok(DataResponse {\n-            metadata: Default::default(),\n-            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(\n-                *list::and_v1::DATA\n-                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())\n+/// Implement [`DataProvider<M>`] on the given struct using the data\n+/// hardcoded in this module. This allows the struct to be used with\n+/// `icu`'s `_unstable` constructors.\n+///\n+/// This macro can only be called from its definition-site, i.e. right\n+/// after `include!`-ing the generated module.\n+///\n+/// ```compile_fail\n+/// struct MyDataProvider;\n+/// include!(\"/path/to/generated/mod.rs\");\n+/// impl_data_provider(MyDataProvider);\n+/// ```\n+#[allow(unused_macros)]\n+macro_rules! impl_data_provider {\n+    ($ provider : path) => {\n+        impl DataProvider<::icu_list::provider::AndListV1Marker> for $provider {\n+            fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_list::provider::AndListV1Marker>, DataError> {\n+                list::and_v1::lookup(&req.locale)\n+                    .map(zerofrom::ZeroFrom::zero_from)\n+                    .map(DataPayload::from_owned)\n+                    .map(|payload| DataResponse { metadata: Default::default(), payload: Some(payload) })\n+                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_list::provider::AndListV1Marker::KEY, req))\n+            }\n+        }\n+        impl DataProvider<::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker> for $provider {\n+            fn load(\n+                &self,\n+                req: DataRequest,\n+            ) -> Result<DataResponse<::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker>, DataError> {\n+                fallback::supplement::co_v1::lookup(&req.locale)\n+                    .map(zerofrom::ZeroFrom::zero_from)\n+                    .map(DataPayload::from_owned)\n+                    .map(|payload| DataResponse { metadata: Default::default(), payload: Some(payload) })\n                     .ok_or_else(|| {\n                         DataErrorKind::MissingLocale\n-                            .with_req(::icu_list::provider::AndListV1Marker::KEY, req)\n-                    })?,\n-            ))),\n-        })\n-    }\n-}\n-impl DataProvider<::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker>\n-    for BakedDataProvider\n-{\n-    fn load(\n-        &self,\n-        req: DataRequest,\n-    ) -> Result<\n-        DataResponse<\n-            ::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker,\n-        >,\n-        DataError,\n-    > {\n-        Ok(DataResponse {\n-            metadata: Default::default(),\n-            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(\n-                *fallback::supplement::co_v1::DATA.get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).ok_or_else(|| {\n-                    DataErrorKind::MissingLocale.with_req(::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker::KEY, req)\n-                })?,\n-            ))),\n-        })\n-    }\n-}\n-impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker>\n-    for BakedDataProvider\n-{\n-    fn load(\n-        &self,\n-        req: DataRequest,\n-    ) -> Result<\n-        DataResponse<\n-            ::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker,\n-        >,\n-        DataError,\n-    > {\n-        Ok(DataResponse {\n-            metadata: Default::default(),\n-            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(\n-                *fallback::likelysubtags_v1::DATA.get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).ok_or_else(|| {\n-                    DataErrorKind::MissingLocale.with_req(::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker::KEY, req)\n-                })?,\n-            ))),\n-        })\n-    }\n+                            .with_req(::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker::KEY, req)\n+                    })\n+            }\n+        }\n+        impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker> for $provider {\n+            fn load(\n+                &self,\n+                req: DataRequest,\n+            ) -> Result<DataResponse<::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker>, DataError> {\n+                fallback::likelysubtags_v1::lookup(&req.locale)\n+                    .map(zerofrom::ZeroFrom::zero_from)\n+                    .map(DataPayload::from_owned)\n+                    .map(|payload| DataResponse { metadata: Default::default(), payload: Some(payload) })\n+                    .ok_or_else(|| {\n+                        DataErrorKind::MissingLocale\n+                            .with_req(::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker::KEY, req)\n+                    })\n+            }\n+        }\n+        impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker> for $provider {\n+            fn load(\n+                &self,\n+                req: DataRequest,\n+            ) -> Result<DataResponse<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker>, DataError> {\n+                fallback::parents_v1::lookup(&req.locale)\n+                    .map(zerofrom::ZeroFrom::zero_from)\n+                    .map(DataPayload::from_owned)\n+                    .map(|payload| DataResponse { metadata: Default::default(), payload: Some(payload) })\n+                    .ok_or_else(|| {\n+                        DataErrorKind::MissingLocale.with_req(::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker::KEY, req)\n+                    })\n+            }\n+        }\n+    };\n }\n-impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker>\n-    for BakedDataProvider\n-{\n-    fn load(\n-        &self,\n-        req: DataRequest,\n-    ) -> Result<\n-        DataResponse<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker>,\n-        DataError,\n-    > {\n-        Ok(DataResponse {\n-            metadata: Default::default(),\n-            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(\n-                *fallback::parents_v1::DATA.get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).ok_or_else(|| {\n-                    DataErrorKind::MissingLocale.with_req(::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker::KEY, req)\n-                })?,\n-            ))),\n-        })\n-    }\n+/// Implement [`AnyProvider`] on the given struct using the data\n+/// hardcoded in this module. This allows the struct to be used with\n+/// `icu`'s `_any` constructors.\n+///\n+/// This macro can only be called from its definition-site, i.e. right\n+/// after `include!`-ing the generated module.\n+///\n+/// ```compile_fail\n+/// struct MyAnyProvider;\n+/// include!(\"/path/to/generated/mod.rs\");\n+/// impl_any_provider(MyAnyProvider);\n+/// ```\n+#[allow(unused_macros)]\n+macro_rules! impl_any_provider {\n+    ($ provider : path) => {\n+        impl AnyProvider for $provider {\n+            fn load_any(&self, key: DataKey, req: DataRequest) -> Result<AnyResponse, DataError> {\n+                const ANDLISTV1MARKER: ::icu_provider::DataKeyHash = ::icu_list::provider::AndListV1Marker::KEY.hashed();\n+                const COLLATIONFALLBACKSUPPLEMENTV1MARKER: ::icu_provider::DataKeyHash =\n+                    ::icu_provider_adapters::fallback::provider::CollationFallbackSupplementV1Marker::KEY.hashed();\n+                const LOCALEFALLBACKLIKELYSUBTAGSV1MARKER: ::icu_provider::DataKeyHash =\n+                    ::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker::KEY.hashed();\n+                const LOCALEFALLBACKPARENTSV1MARKER: ::icu_provider::DataKeyHash =\n+                    ::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker::KEY.hashed();\n+                match key.hashed() {\n+                    ANDLISTV1MARKER => list::and_v1::lookup(&req.locale).map(AnyPayload::from_static_ref),\n+                    COLLATIONFALLBACKSUPPLEMENTV1MARKER => fallback::supplement::co_v1::lookup(&req.locale).map(AnyPayload::from_static_ref),\n+                    LOCALEFALLBACKLIKELYSUBTAGSV1MARKER => fallback::likelysubtags_v1::lookup(&req.locale).map(AnyPayload::from_static_ref),\n+                    LOCALEFALLBACKPARENTSV1MARKER => fallback::parents_v1::lookup(&req.locale).map(AnyPayload::from_static_ref),\n+                    _ => return Err(DataErrorKind::MissingDataKey.with_req(key, req)),\n+                }\n+                .map(|payload| AnyResponse { payload: Some(payload), metadata: Default::default() })\n+                .ok_or_else(|| DataErrorKind::MissingLocale.with_req(key, req))\n+            }\n+        }\n+    };\n }\n+pub struct BakedDataProvider;\n+impl_data_provider!(BakedDataProvider);"}, {"sha": "237e063d8d11faf3522a929f917815883ea2bd76", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -343,11 +343,11 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                     let note = match closure_kind_ty.to_opt_closure_kind() {\n                         Some(ty::ClosureKind::Fn) => {\n                             \"closure implements `Fn`, so references to captured variables \\\n-                                can't escape the closure\"\n+                             can't escape the closure\"\n                         }\n                         Some(ty::ClosureKind::FnMut) => {\n                             \"closure implements `FnMut`, so references to captured variables \\\n-                                can't escape the closure\"\n+                             can't escape the closure\"\n                         }\n                         Some(ty::ClosureKind::FnOnce) => {\n                             bug!(\"BrEnv in a `FnOnce` closure\");\n@@ -364,7 +364,11 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 ty::BoundRegionKind::BrAnon(..) => None,\n             },\n \n-            ty::ReLateBound(..) | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReErased => None,\n+            ty::ReLateBound(..)\n+            | ty::ReVar(..)\n+            | ty::RePlaceholder(..)\n+            | ty::ReErased\n+            | ty::ReError(_) => None,\n         }\n     }\n "}, {"sha": "f2693bded590bb73505e9eb4ccc7a45e5860109c", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::traits::ObligationCauseCode;\n-use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n \n use crate::{\n@@ -746,20 +746,33 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n         debug!(?choice_regions, \"after ub\");\n \n-        // If we ruled everything out, we're done.\n-        if choice_regions.is_empty() {\n-            return false;\n-        }\n-\n-        // Otherwise, we need to find the minimum remaining choice, if\n-        // any, and take that.\n-        debug!(\"choice_regions remaining are {:#?}\", choice_regions);\n-        let Some(&min_choice) = choice_regions.iter().find(|&r1| {\n+        // At this point we can pick any member of `choice_regions`, but to avoid potential\n+        // non-determinism we will pick the *unique minimum* choice.\n+        //\n+        // Because universal regions are only partially ordered (i.e, not every two regions are\n+        // comparable), we will ignore any region that doesn't compare to all others when picking\n+        // the minimum choice.\n+        // For example, consider `choice_regions = ['static, 'a, 'b, 'c, 'd, 'e]`, where\n+        // `'static: 'a, 'static: 'b, 'a: 'c, 'b: 'c, 'c: 'd, 'c: 'e`.\n+        // `['d, 'e]` are ignored because they do not compare - the same goes for `['a, 'b]`.\n+        let totally_ordered_subset = choice_regions.iter().copied().filter(|&r1| {\n             choice_regions.iter().all(|&r2| {\n-                self.universal_region_relations.outlives(r2, *r1)\n+                self.universal_region_relations.outlives(r1, r2)\n+                    || self.universal_region_relations.outlives(r2, r1)\n             })\n+        });\n+        // Now we're left with `['static, 'c]`. Pick `'c` as the minimum!\n+        let Some(min_choice) = totally_ordered_subset.reduce(|r1, r2| {\n+            let r1_outlives_r2 = self.universal_region_relations.outlives(r1, r2);\n+            let r2_outlives_r1 = self.universal_region_relations.outlives(r2, r1);\n+            match (r1_outlives_r2, r2_outlives_r1) {\n+                (true, true) => r1.min(r2),\n+                (true, false) => r2,\n+                (false, true) => r1,\n+                (false, false) => bug!(\"incomparable regions in total order\"),\n+            }\n         }) else {\n-            debug!(\"no choice region outlived by all others\");\n+            debug!(\"no unique minimum choice\");\n             return false;\n         };\n "}, {"sha": "c7b22d5f2e604ca20b2d311a81dc7a319debae80", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -91,11 +91,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     }\n                     None => {\n                         subst_regions.push(vid);\n-                        infcx.tcx.sess.delay_span_bug(\n+                        infcx.tcx.re_error_with_message(\n                             concrete_type.span,\n                             \"opaque type with non-universal region substs\",\n-                        );\n-                        infcx.tcx.lifetimes.re_static\n+                        )\n                     }\n                 }\n             };"}, {"sha": "6a3748fded5549497501ea1a067af2b8c2d259f6", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -187,6 +187,7 @@ pub(crate) struct PlaceholderIndices {\n }\n \n impl PlaceholderIndices {\n+    /// Returns the `PlaceholderIndex` for the inserted `PlaceholderRegion`\n     pub(crate) fn insert(&mut self, placeholder: ty::PlaceholderRegion) -> PlaceholderIndex {\n         let (index, _) = self.indices.insert_full(placeholder);\n         index.into()"}, {"sha": "2dd24fe03403840eb5c7166f9871956b6d17c160", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 87, "deletions": 68, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -8,6 +8,7 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::query::OutlivesBound;\n use rustc_middle::ty::{self, RegionVid, Ty};\n+use rustc_span::Span;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n use std::rc::Rc;\n use type_op::TypeOpOutput;\n@@ -217,8 +218,27 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n         self.inverse_outlives.add(fr_b, fr_a);\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     pub(crate) fn create(mut self) -> CreateResult<'tcx> {\n         let span = self.infcx.tcx.def_span(self.universal_regions.defining_ty.def_id());\n+\n+        // Insert the facts we know from the predicates. Why? Why not.\n+        let param_env = self.param_env;\n+        self.add_outlives_bounds(outlives::explicit_outlives_bounds(param_env));\n+\n+        // - outlives is reflexive, so `'r: 'r` for every region `'r`\n+        // - `'static: 'r` for every region `'r`\n+        // - `'r: 'fn_body` for every (other) universally quantified\n+        //   region `'r`, all of which are provided by our caller\n+        let fr_static = self.universal_regions.fr_static;\n+        let fr_fn_body = self.universal_regions.fr_fn_body;\n+        for fr in self.universal_regions.universal_regions() {\n+            debug!(\"build: relating free region {:?} to itself and to 'static\", fr);\n+            self.relate_universal_regions(fr, fr);\n+            self.relate_universal_regions(fr_static, fr);\n+            self.relate_universal_regions(fr, fr_fn_body);\n+        }\n+\n         let unnormalized_input_output_tys = self\n             .universal_regions\n             .unnormalized_input_tys\n@@ -236,78 +256,58 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n         //   the `relations` is built.\n         let mut normalized_inputs_and_output =\n             Vec::with_capacity(self.universal_regions.unnormalized_input_tys.len() + 1);\n-        let constraint_sets: Vec<_> = unnormalized_input_output_tys\n-            .flat_map(|ty| {\n-                debug!(\"build: input_or_output={:?}\", ty);\n-                // We add implied bounds from both the unnormalized and normalized ty.\n-                // See issue #87748\n-                let constraints_implied1 = self.add_implied_bounds(ty);\n-                let TypeOpOutput { output: norm_ty, constraints: constraints1, .. } = self\n-                    .param_env\n-                    .and(type_op::normalize::Normalize::new(ty))\n-                    .fully_perform(self.infcx)\n-                    .unwrap_or_else(|_| {\n-                        let reported = self\n-                            .infcx\n-                            .tcx\n-                            .sess\n-                            .delay_span_bug(span, &format!(\"failed to normalize {:?}\", ty));\n-                        TypeOpOutput {\n-                            output: self.infcx.tcx.ty_error_with_guaranteed(reported),\n-                            constraints: None,\n-                            error_info: None,\n-                        }\n-                    });\n-                // Note: we need this in examples like\n-                // ```\n-                // trait Foo {\n-                //   type Bar;\n-                //   fn foo(&self) -> &Self::Bar;\n-                // }\n-                // impl Foo for () {\n-                //   type Bar = ();\n-                //   fn foo(&self) -> &() {}\n-                // }\n-                // ```\n-                // Both &Self::Bar and &() are WF\n-                let constraints_implied2 =\n-                    if ty != norm_ty { self.add_implied_bounds(norm_ty) } else { None };\n-                normalized_inputs_and_output.push(norm_ty);\n-                constraints1.into_iter().chain(constraints_implied1).chain(constraints_implied2)\n-            })\n-            .collect();\n+        let mut constraints = vec![];\n+        for ty in unnormalized_input_output_tys {\n+            debug!(\"build: input_or_output={:?}\", ty);\n+            // We add implied bounds from both the unnormalized and normalized ty.\n+            // See issue #87748\n+            let constraints_unnorm = self.add_implied_bounds(ty);\n+            if let Some(c) = constraints_unnorm {\n+                constraints.push(c)\n+            }\n+            let TypeOpOutput { output: norm_ty, constraints: constraints_normalize, .. } = self\n+                .param_env\n+                .and(type_op::normalize::Normalize::new(ty))\n+                .fully_perform(self.infcx)\n+                .unwrap_or_else(|_| {\n+                    self.infcx\n+                        .tcx\n+                        .sess\n+                        .delay_span_bug(span, &format!(\"failed to normalize {:?}\", ty));\n+                    TypeOpOutput {\n+                        output: self.infcx.tcx.ty_error(),\n+                        constraints: None,\n+                        error_info: None,\n+                    }\n+                });\n+            if let Some(c) = constraints_normalize {\n+                constraints.push(c)\n+            }\n \n-        // Insert the facts we know from the predicates. Why? Why not.\n-        let param_env = self.param_env;\n-        self.add_outlives_bounds(outlives::explicit_outlives_bounds(param_env));\n+            // Note: we need this in examples like\n+            // ```\n+            // trait Foo {\n+            //   type Bar;\n+            //   fn foo(&self) -> &Self::Bar;\n+            // }\n+            // impl Foo for () {\n+            //   type Bar = ();\n+            //   fn foo(&self) ->&() {}\n+            // }\n+            // ```\n+            // Both &Self::Bar and &() are WF\n+            if ty != norm_ty {\n+                let constraints_norm = self.add_implied_bounds(norm_ty);\n+                if let Some(c) = constraints_norm {\n+                    constraints.push(c)\n+                }\n+            }\n \n-        // Finally:\n-        // - outlives is reflexive, so `'r: 'r` for every region `'r`\n-        // - `'static: 'r` for every region `'r`\n-        // - `'r: 'fn_body` for every (other) universally quantified\n-        //   region `'r`, all of which are provided by our caller\n-        let fr_static = self.universal_regions.fr_static;\n-        let fr_fn_body = self.universal_regions.fr_fn_body;\n-        for fr in self.universal_regions.universal_regions() {\n-            debug!(\"build: relating free region {:?} to itself and to 'static\", fr);\n-            self.relate_universal_regions(fr, fr);\n-            self.relate_universal_regions(fr_static, fr);\n-            self.relate_universal_regions(fr, fr_fn_body);\n+            normalized_inputs_and_output.push(norm_ty);\n         }\n \n-        for data in &constraint_sets {\n-            constraint_conversion::ConstraintConversion::new(\n-                self.infcx,\n-                &self.universal_regions,\n-                &self.region_bound_pairs,\n-                self.implicit_region_bound,\n-                self.param_env,\n-                Locations::All(span),\n-                span,\n-                ConstraintCategory::Internal,\n-                &mut self.constraints,\n-            )\n-            .convert_all(data);\n+        for c in constraints {\n+            self.push_region_constraints(c, span);\n         }\n \n         CreateResult {\n@@ -321,6 +321,24 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n         }\n     }\n \n+    #[instrument(skip(self, data), level = \"debug\")]\n+    fn push_region_constraints(&mut self, data: &QueryRegionConstraints<'tcx>, span: Span) {\n+        debug!(\"constraints generated: {:#?}\", data);\n+\n+        constraint_conversion::ConstraintConversion::new(\n+            self.infcx,\n+            &self.universal_regions,\n+            &self.region_bound_pairs,\n+            self.implicit_region_bound,\n+            self.param_env,\n+            Locations::All(span),\n+            span,\n+            ConstraintCategory::Internal,\n+            &mut self.constraints,\n+        )\n+        .convert_all(data);\n+    }\n+\n     /// Update the type of a single local, which should represent\n     /// either the return type of the MIR or one of its arguments. At\n     /// the same time, compute and add any implied bounds that come\n@@ -332,6 +350,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n             .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })\n             .fully_perform(self.infcx)\n             .unwrap_or_else(|_| bug!(\"failed to compute implied bounds {:?}\", ty));\n+        debug!(?bounds, ?constraints);\n         self.add_outlives_bounds(bounds);\n         constraints\n     }"}, {"sha": "5b7adae66acf71b62759d0db52b4fa3257f8ede4", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -910,6 +910,8 @@ pub(crate) struct MirTypeckRegionConstraints<'tcx> {\n }\n \n impl<'tcx> MirTypeckRegionConstraints<'tcx> {\n+    /// Creates a `Region` for a given `PlaceholderRegion`, or returns the\n+    /// region that corresponds to a previously created one.\n     fn placeholder_region(\n         &mut self,\n         infcx: &InferCtxt<'tcx>,\n@@ -1780,7 +1782,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // than 1.\n                 // If the length is larger than 1, the repeat expression will need to copy the\n                 // element, so we require the `Copy` trait.\n-                if len.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n+                if len.try_eval_target_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n                     match operand {\n                         Operand::Copy(..) | Operand::Constant(..) => {\n                             // These are always okay: direct use of a const, or a value that can evidently be copied."}, {"sha": "8dd06187877c864c79c5394fda5586eeac987276", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,4 +1,4 @@\n-use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n+use rustc_infer::infer::nll_relate::{TypeRelating, TypeRelatingDelegate};\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n@@ -140,10 +140,6 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         );\n     }\n \n-    fn normalization() -> NormalizationStrategy {\n-        NormalizationStrategy::Eager\n-    }\n-\n     fn forbid_inference_vars() -> bool {\n         true\n     }"}, {"sha": "56930c89b2c6421e1a145e8150c0424011f32457", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -167,6 +167,9 @@ struct UniversalRegionIndices<'tcx> {\n     /// contains an entry for `ReStatic` -- it might be nice to just\n     /// use a substs, and then handle `ReStatic` another way.\n     indices: FxHashMap<ty::Region<'tcx>, RegionVid>,\n+\n+    /// The vid assigned to `'static`. Used only for diagnostics.\n+    pub fr_static: RegionVid,\n }\n \n #[derive(Debug, PartialEq)]\n@@ -609,7 +612,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let subst_mapping =\n             iter::zip(identity_substs.regions(), fr_substs.regions().map(|r| r.to_region_vid()));\n \n-        UniversalRegionIndices { indices: global_mapping.chain(subst_mapping).collect() }\n+        UniversalRegionIndices { indices: global_mapping.chain(subst_mapping).collect(), fr_static }\n     }\n \n     fn compute_inputs_and_output(\n@@ -821,6 +824,11 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n         if let ty::ReVar(..) = *r {\n             r.to_region_vid()\n+        } else if r.is_error() {\n+            // We use the `'static` `RegionVid` because `ReError` doesn't actually exist in the\n+            // `UniversalRegionIndices`. This is fine because 1) it is a fallback only used if\n+            // errors are being emitted and 2) it leaves the happy path unaffected.\n+            self.fr_static\n         } else {\n             *self\n                 .indices"}, {"sha": "dd5c85531fd7fb565dc5588ee80ad2d6520f6648", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -761,8 +761,7 @@ impl<'a> TraitDef<'a> {\n         let path = cx.path_all(self.span, false, vec![type_ident], self_params);\n         let self_type = cx.ty_path(path);\n \n-        let attr = cx.attr_word(sym::automatically_derived, self.span);\n-        let attrs = thin_vec![attr];\n+        let attrs = thin_vec![cx.attr_word(sym::automatically_derived, self.span),];\n         let opt_trait_ref = Some(trait_ref);\n \n         cx.item("}, {"sha": "9d3ed3ac5d0c38dc7d7d656c1821f9467448f699", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/main.yml", "status": "modified", "additions": 128, "deletions": 18, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -21,6 +21,7 @@ jobs:\n         cargo fmt --check\n         rustfmt --check build_system/mod.rs\n \n+\n   build:\n     runs-on: ${{ matrix.os }}\n     timeout-minutes: 60\n@@ -33,7 +34,7 @@ jobs:\n       fail-fast: false\n       matrix:\n         include:\n-          - os: ubuntu-20.04 # FIXME switch to ubuntu-22.04 once #1303 is fixed\n+          - os: ubuntu-latest\n             env:\n               TARGET_TRIPLE: x86_64-unknown-linux-gnu\n           - os: macos-latest\n@@ -112,23 +113,6 @@ jobs:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n       run: ./y.rs test\n \n-    - name: Package prebuilt cg_clif\n-      run: tar cvfJ cg_clif.tar.xz dist\n-\n-    - name: Upload prebuilt cg_clif\n-      if: matrix.os == 'windows-latest' || matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n-      uses: actions/upload-artifact@v3\n-      with:\n-        name: cg_clif-${{ matrix.env.TARGET_TRIPLE }}\n-        path: cg_clif.tar.xz\n-\n-    - name: Upload prebuilt cg_clif (cross compile)\n-      if: matrix.os != 'windows-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n-      uses: actions/upload-artifact@v3\n-      with:\n-        name: cg_clif-${{ runner.os }}-cross-x86_64-mingw\n-        path: cg_clif.tar.xz\n-\n \n   abi_cafe:\n     runs-on: ${{ matrix.os }}\n@@ -185,3 +169,129 @@ jobs:\n       env:\n         TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n       run: ./y.rs abi-cafe\n+\n+\n+  bench:\n+    runs-on: ubuntu-latest\n+    timeout-minutes: 60\n+\n+    defaults:\n+      run:\n+        shell: bash\n+\n+    steps:\n+    - uses: actions/checkout@v3\n+\n+    - name: Cache cargo target dir\n+      uses: actions/cache@v3\n+      with:\n+        path: build/cg_clif\n+        key: ${{ runner.os }}-x86_64-unknown-linux-gnu-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Cache cargo bin dir\n+      uses: actions/cache@v3\n+      with:\n+        path: ~/.cargo/bin\n+        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-bin-dir-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Use sparse cargo registry\n+      run: |\n+        cat >> ~/.cargo/config.toml <<EOF\n+        [unstable]\n+        sparse-registry = true\n+        EOF\n+\n+    - name: Install hyperfine\n+      run: cargo install hyperfine || true\n+\n+    - name: Prepare dependencies\n+      run: ./y.rs prepare\n+\n+    - name: Build\n+      run: CI_OPT=1 ./y.rs build --sysroot none\n+\n+    - name: Benchmark\n+      run: CI_OPT=1 ./y.rs bench\n+\n+\n+  dist:\n+    runs-on: ${{ matrix.os }}\n+    timeout-minutes: 60\n+\n+    defaults:\n+      run:\n+        shell: bash\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        include:\n+          # FIXME update at some point in the future once most distros use a newer glibc\n+          - os: ubuntu-20.04\n+            env:\n+              TARGET_TRIPLE: x86_64-unknown-linux-gnu\n+          - os: macos-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-apple-darwin\n+          # cross-compile from Linux to Windows using mingw\n+          - os: ubuntu-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-gnu\n+          - os: windows-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-msvc\n+          - os: windows-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-gnu\n+\n+    steps:\n+    - uses: actions/checkout@v3\n+\n+    - name: Cache cargo target dir\n+      uses: actions/cache@v3\n+      with:\n+        path: build/cg_clif\n+        key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-dist-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Set MinGW as the default toolchain\n+      if: matrix.os == 'windows-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      run: rustup set default-host x86_64-pc-windows-gnu\n+\n+    - name: Install MinGW toolchain and wine\n+      if: matrix.os == 'ubuntu-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      run: |\n+        sudo apt-get update\n+        sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable\n+\n+    - name: Use sparse cargo registry\n+      run: |\n+        cat >> ~/.cargo/config.toml <<EOF\n+        [unstable]\n+        sparse-registry = true\n+        EOF\n+\n+    - name: Prepare dependencies\n+      run: ./y.rs prepare\n+\n+    - name: Build backend\n+      run: CI_OPT=1 ./y.rs build --sysroot none\n+\n+    - name: Build sysroot\n+      run: CI_OPT=1 ./y.rs build\n+\n+    - name: Package prebuilt cg_clif\n+      run: tar cvfJ cg_clif.tar.xz dist\n+\n+    - name: Upload prebuilt cg_clif\n+      if: matrix.os == 'windows-latest' || matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n+      uses: actions/upload-artifact@v3\n+      with:\n+        name: cg_clif-${{ matrix.env.TARGET_TRIPLE }}\n+        path: cg_clif.tar.xz\n+\n+    - name: Upload prebuilt cg_clif (cross compile)\n+      if: matrix.os != 'windows-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      uses: actions/upload-artifact@v3\n+      with:\n+        name: cg_clif-${{ runner.os }}-cross-x86_64-mingw\n+        path: cg_clif.tar.xz"}, {"sha": "b7e0b68a2a27a2cdb9ad71da9d885f7e4d8dc8db", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -34,9 +34,9 @@ dependencies = [\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.78\"\n+version = \"1.0.79\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a20104e2335ce8a659d6dd92a51a767a0c062599c73b343fd152cb401e828c3d\"\n+checksum = \"50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f\"\n \n [[package]]\n name = \"cfg-if\""}, {"sha": "0da27f529b3ecd730a2f7a0cdfe16c55b04909b1", "filename": "compiler/rustc_codegen_cranelift/build_system/abi_cafe.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fabi_cafe.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -6,11 +6,10 @@ use super::prepare::GitRepo;\n use super::utils::{spawn_and_wait, CargoProject, Compiler};\n use super::SysrootKind;\n \n-pub(crate) static ABI_CAFE_REPO: GitRepo =\n+static ABI_CAFE_REPO: GitRepo =\n     GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n \n-pub(crate) static ABI_CAFE: CargoProject =\n-    CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n+static ABI_CAFE: CargoProject = CargoProject::new(&ABI_CAFE_REPO.source_dir(), \"abi_cafe\");\n \n pub(crate) fn run(\n     channel: &str,\n@@ -19,6 +18,9 @@ pub(crate) fn run(\n     cg_clif_dylib: &Path,\n     bootstrap_host_compiler: &Compiler,\n ) {\n+    ABI_CAFE_REPO.fetch(dirs);\n+    spawn_and_wait(ABI_CAFE.fetch(\"cargo\", &bootstrap_host_compiler.rustc, dirs));\n+\n     eprintln!(\"Building sysroot for abi-cafe\");\n     build_sysroot::build_sysroot(\n         dirs,"}, {"sha": "a9a851d0a8afc882e0c24cc7f60c8259c0905fbf", "filename": "compiler/rustc_codegen_cranelift/build_system/bench.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbench.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -5,20 +5,20 @@ use std::path::Path;\n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n use super::rustc_info::get_file_name;\n-use super::utils::{hyperfine_command, is_ci, spawn_and_wait, CargoProject, Compiler};\n+use super::utils::{hyperfine_command, spawn_and_wait, CargoProject, Compiler};\n \n-pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n+static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"ebobby\",\n     \"simple-raytracer\",\n     \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n     \"<none>\",\n );\n \n // Use a separate target dir for the initial LLVM build to reduce unnecessary recompiles\n-pub(crate) static SIMPLE_RAYTRACER_LLVM: CargoProject =\n+static SIMPLE_RAYTRACER_LLVM: CargoProject =\n     CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer_llvm\");\n \n-pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n+static SIMPLE_RAYTRACER: CargoProject =\n     CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n \n pub(crate) fn benchmark(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n@@ -32,6 +32,15 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n         std::process::exit(1);\n     }\n \n+    if !SIMPLE_RAYTRACER_REPO.source_dir().to_path(dirs).exists() {\n+        SIMPLE_RAYTRACER_REPO.fetch(dirs);\n+        spawn_and_wait(SIMPLE_RAYTRACER.fetch(\n+            &bootstrap_host_compiler.cargo,\n+            &bootstrap_host_compiler.rustc,\n+            dirs,\n+        ));\n+    }\n+\n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n     let build_cmd = SIMPLE_RAYTRACER_LLVM.build(bootstrap_host_compiler, dirs);\n     spawn_and_wait(build_cmd);\n@@ -45,10 +54,7 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n     )\n     .unwrap();\n \n-    let run_runs = env::var(\"RUN_RUNS\")\n-        .unwrap_or(if is_ci() { \"2\" } else { \"10\" }.to_string())\n-        .parse()\n-        .unwrap();\n+    let bench_runs = env::var(\"BENCH_RUNS\").unwrap_or_else(|_| \"10\".to_string()).parse().unwrap();\n \n     eprintln!(\"[BENCH COMPILE] ebobby/simple-raytracer\");\n     let cargo_clif =\n@@ -57,24 +63,24 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n     let target_dir = SIMPLE_RAYTRACER.target_dir(dirs);\n \n     let clean_cmd = format!(\n-        \"cargo clean --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        \"RUSTC=rustc cargo clean --manifest-path {manifest_path} --target-dir {target_dir}\",\n         manifest_path = manifest_path.display(),\n         target_dir = target_dir.display(),\n     );\n     let llvm_build_cmd = format!(\n-        \"cargo build --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        \"RUSTC=rustc cargo build --manifest-path {manifest_path} --target-dir {target_dir}\",\n         manifest_path = manifest_path.display(),\n         target_dir = target_dir.display(),\n     );\n     let clif_build_cmd = format!(\n-        \"{cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir}\",\n+        \"RUSTC=rustc {cargo_clif} build --manifest-path {manifest_path} --target-dir {target_dir}\",\n         cargo_clif = cargo_clif.display(),\n         manifest_path = manifest_path.display(),\n         target_dir = target_dir.display(),\n     );\n \n     let bench_compile =\n-        hyperfine_command(1, run_runs, Some(&clean_cmd), &llvm_build_cmd, &clif_build_cmd);\n+        hyperfine_command(1, bench_runs, Some(&clean_cmd), &llvm_build_cmd, &clif_build_cmd);\n \n     spawn_and_wait(bench_compile);\n \n@@ -87,7 +93,7 @@ fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n \n     let mut bench_run = hyperfine_command(\n         0,\n-        run_runs,\n+        bench_runs,\n         None,\n         Path::new(\".\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")).to_str().unwrap(),\n         Path::new(\".\").join(get_file_name(\"raytracer_cg_clif\", \"bin\")).to_str().unwrap(),"}, {"sha": "4b740fa2db65f32947b1f86663193b22074ac585", "filename": "compiler/rustc_codegen_cranelift/build_system/build_backend.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -3,7 +3,7 @@ use std::path::PathBuf;\n \n use super::path::{Dirs, RelPath};\n use super::rustc_info::get_file_name;\n-use super::utils::{is_ci, CargoProject, Compiler};\n+use super::utils::{is_ci, is_ci_opt, CargoProject, Compiler};\n \n pub(crate) static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"cg_clif\");\n \n@@ -26,7 +26,9 @@ pub(crate) fn build_backend(\n         // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n         cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n \n-        cmd.env(\"CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS\", \"true\");\n+        if !is_ci_opt() {\n+            cmd.env(\"CARGO_PROFILE_RELEASE_DEBUG_ASSERTIONS\", \"true\");\n+        }\n     }\n \n     if use_unstable_features {"}, {"sha": "2e04f2c68116ca749da28b81aaef687985e62d9c", "filename": "compiler/rustc_codegen_cranelift/build_system/build_sysroot.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -248,6 +248,9 @@ fn build_clif_sysroot_for_triple(\n         build_cmd.arg(\"--release\");\n     }\n     build_cmd.env(\"__CARGO_DEFAULT_LIB_METADATA\", \"cg_clif\");\n+    if compiler.triple.contains(\"apple\") {\n+        build_cmd.env(\"CARGO_PROFILE_RELEASE_SPLIT_DEBUGINFO\", \"packed\");\n+    }\n     spawn_and_wait(build_cmd);\n \n     for entry in fs::read_dir(build_dir.join(\"deps\")).unwrap() {"}, {"sha": "8a53acdf7e3968983c7c31507bb3f4f8c3817c88", "filename": "compiler/rustc_codegen_cranelift/build_system/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -2,7 +2,7 @@ use std::env;\n use std::path::PathBuf;\n use std::process;\n \n-use self::utils::{is_ci, Compiler};\n+use self::utils::{is_ci, is_ci_opt, Compiler};\n \n mod abi_cafe;\n mod bench;\n@@ -53,8 +53,10 @@ pub fn main() {\n         // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n         env::set_var(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n \n-        // Enable the Cranelift verifier\n-        env::set_var(\"CG_CLIF_ENABLE_VERIFIER\", \"1\");\n+        if !is_ci_opt() {\n+            // Enable the Cranelift verifier\n+            env::set_var(\"CG_CLIF_ENABLE_VERIFIER\", \"1\");\n+        }\n     }\n \n     let mut args = env::args().skip(1);"}, {"sha": "50b1b7836dee1427e0b2476428032e776b65bf00", "filename": "compiler/rustc_codegen_cranelift/build_system/prepare.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -11,22 +11,18 @@ use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spaw\n pub(crate) fn prepare(dirs: &Dirs) {\n     RelPath::DOWNLOAD.ensure_fresh(dirs);\n \n-    spawn_and_wait(super::build_backend::CG_CLIF.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::build_backend::CG_CLIF.fetch(\"cargo\", \"rustc\", dirs));\n \n     prepare_sysroot(dirs);\n-    spawn_and_wait(super::build_sysroot::STANDARD_LIBRARY.fetch(\"cargo\", dirs));\n-    spawn_and_wait(super::tests::LIBCORE_TESTS.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::build_sysroot::STANDARD_LIBRARY.fetch(\"cargo\", \"rustc\", dirs));\n+    spawn_and_wait(super::tests::LIBCORE_TESTS.fetch(\"cargo\", \"rustc\", dirs));\n \n-    super::abi_cafe::ABI_CAFE_REPO.fetch(dirs);\n-    spawn_and_wait(super::abi_cafe::ABI_CAFE.fetch(\"cargo\", dirs));\n     super::tests::RAND_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::RAND.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::tests::RAND.fetch(\"cargo\", \"rustc\", dirs));\n     super::tests::REGEX_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::REGEX.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::tests::REGEX.fetch(\"cargo\", \"rustc\", dirs));\n     super::tests::PORTABLE_SIMD_REPO.fetch(dirs);\n-    spawn_and_wait(super::tests::PORTABLE_SIMD.fetch(\"cargo\", dirs));\n-    super::bench::SIMPLE_RAYTRACER_REPO.fetch(dirs);\n-    spawn_and_wait(super::bench::SIMPLE_RAYTRACER.fetch(\"cargo\", dirs));\n+    spawn_and_wait(super::tests::PORTABLE_SIMD.fetch(\"cargo\", \"rustc\", dirs));\n }\n \n fn prepare_sysroot(dirs: &Dirs) {\n@@ -80,7 +76,7 @@ impl GitRepo {\n         }\n     }\n \n-    fn fetch(&self, dirs: &Dirs) {\n+    pub(crate) fn fetch(&self, dirs: &Dirs) {\n         match self.url {\n             GitRepoUrl::Github { user, repo } => {\n                 clone_repo_shallow_github("}, {"sha": "e9486888f86a4093bd98bd3d71a79b4c45788a9c", "filename": "compiler/rustc_codegen_cranelift/build_system/tests.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Ftests.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,4 +1,3 @@\n-use super::bench::SIMPLE_RAYTRACER;\n use super::build_sysroot::{self, SYSROOT_SRC};\n use super::config;\n use super::path::{Dirs, RelPath};\n@@ -134,10 +133,6 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(build_cmd);\n         }\n     }),\n-    TestCase::custom(\"test.simple-raytracer\", &|runner| {\n-        SIMPLE_RAYTRACER.clean(&runner.dirs);\n-        spawn_and_wait(SIMPLE_RAYTRACER.build(&runner.target_compiler, &runner.dirs));\n-    }),\n     TestCase::custom(\"test.libcore\", &|runner| {\n         LIBCORE_TESTS.clean(&runner.dirs);\n "}, {"sha": "abc5bab49422468454948ea77f79891c6c5f873c", "filename": "compiler/rustc_codegen_cranelift/build_system/utils.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -121,10 +121,18 @@ impl CargoProject {\n     }\n \n     #[must_use]\n-    pub(crate) fn fetch(&self, cargo: impl AsRef<Path>, dirs: &Dirs) -> Command {\n+    pub(crate) fn fetch(\n+        &self,\n+        cargo: impl AsRef<Path>,\n+        rustc: impl AsRef<Path>,\n+        dirs: &Dirs,\n+    ) -> Command {\n         let mut cmd = Command::new(cargo.as_ref());\n \n-        cmd.arg(\"fetch\").arg(\"--manifest-path\").arg(self.manifest_path(dirs));\n+        cmd.env(\"RUSTC\", rustc.as_ref())\n+            .arg(\"fetch\")\n+            .arg(\"--manifest-path\")\n+            .arg(self.manifest_path(dirs));\n \n         cmd\n     }\n@@ -271,5 +279,9 @@ pub(crate) fn copy_dir_recursively(from: &Path, to: &Path) {\n }\n \n pub(crate) fn is_ci() -> bool {\n-    env::var(\"CI\").as_deref() == Ok(\"true\")\n+    env::var(\"CI\").is_ok()\n+}\n+\n+pub(crate) fn is_ci_opt() -> bool {\n+    env::var(\"CI_OPT\").is_ok()\n }"}, {"sha": "d6e3924a24d643f7550553874b7eb4d47495f577", "filename": "compiler/rustc_codegen_cranelift/config.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fconfig.txt", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fconfig.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fconfig.txt?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -44,7 +44,6 @@ aot.issue-72793\n \n testsuite.extended_sysroot\n test.rust-random/rand\n-test.simple-raytracer\n test.libcore\n test.regex-shootout-regex-dna\n test.regex"}, {"sha": "40fb54b915992b11257b306c543d6b82bf446872", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-01-20\"\n+channel = \"nightly-2023-02-06\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "e14a129dbc2d05f32263b7ff763754e1bba52875", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -91,6 +91,7 @@ rm tests/ui/proc-macro/proc-macro-deprecated-attr.rs # same\n rm tests/ui/proc-macro/quote-debug.rs # same\n rm tests/ui/proc-macro/no-missing-docs.rs # same\n rm tests/ui/rust-2018/proc-macro-crate-in-paths.rs # same\n+rm tests/ui/proc-macro/allowed-signatures.rs # same\n \n # doesn't work due to the way the rustc test suite is invoked.\n # should work when using ./x.py test the way it is intended"}, {"sha": "abf63e33c35370ce39bbccb9d0c999217a0ce330", "filename": "compiler/rustc_codegen_cranelift/src/abi/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -98,12 +98,12 @@ pub(super) fn add_local_place_comments<'tcx>(\n         }\n         CPlaceInner::VarPair(place_local, var1, var2) => {\n             assert_eq!(local, place_local);\n-            (\"ssa\", Cow::Owned(format!(\",var=({}, {})\", var1.index(), var2.index())))\n+            (\"ssa\", Cow::Owned(format!(\"var=({}, {})\", var1.index(), var2.index())))\n         }\n         CPlaceInner::VarLane(_local, _var, _lane) => unreachable!(),\n         CPlaceInner::Addr(ptr, meta) => {\n             let meta = if let Some(meta) = meta {\n-                Cow::Owned(format!(\",meta={}\", meta))\n+                Cow::Owned(format!(\"meta={}\", meta))\n             } else {\n                 Cow::Borrowed(\"\")\n             };"}, {"sha": "1c73957ca571c0af73a40ddc6ff7bf17c63ebb37", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 14, "deletions": 61, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -70,74 +70,27 @@ fn codegen_inner(\n             params: arg_tys.iter().cloned().map(AbiParam::new).collect(),\n             returns: output.into_iter().map(AbiParam::new).collect(),\n         };\n-\n-        let caller_name = format!(\"__rust_{}\", method.name);\n-        let callee_name = kind.fn_name(method.name);\n-\n-        let func_id = module.declare_function(&caller_name, Linkage::Export, &sig).unwrap();\n-\n-        let callee_func_id = module.declare_function(&callee_name, Linkage::Import, &sig).unwrap();\n-\n-        let mut ctx = Context::new();\n-        ctx.func.signature = sig.clone();\n-        {\n-            let mut func_ctx = FunctionBuilderContext::new();\n-            let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n-\n-            let block = bcx.create_block();\n-            bcx.switch_to_block(block);\n-            let args = arg_tys\n-                .into_iter()\n-                .map(|ty| bcx.append_block_param(block, ty))\n-                .collect::<Vec<Value>>();\n-\n-            let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);\n-            let call_inst = bcx.ins().call(callee_func_ref, &args);\n-            let results = bcx.inst_results(call_inst).to_vec(); // Clone to prevent borrow error\n-\n-            bcx.ins().return_(&results);\n-            bcx.seal_all_blocks();\n-            bcx.finalize();\n-        }\n-        module.define_function(func_id, &mut ctx).unwrap();\n-        unwind_context.add_function(func_id, &ctx, module.isa());\n+        crate::common::create_wrapper_function(\n+            module,\n+            unwind_context,\n+            sig,\n+            &format!(\"__rust_{}\", method.name),\n+            &kind.fn_name(method.name),\n+        );\n     }\n \n     let sig = Signature {\n         call_conv: module.target_config().default_call_conv,\n         params: vec![AbiParam::new(usize_ty), AbiParam::new(usize_ty)],\n         returns: vec![],\n     };\n-\n-    let callee_name = alloc_error_handler_kind.fn_name(sym::oom);\n-\n-    let func_id =\n-        module.declare_function(\"__rust_alloc_error_handler\", Linkage::Export, &sig).unwrap();\n-\n-    let callee_func_id = module.declare_function(&callee_name, Linkage::Import, &sig).unwrap();\n-\n-    let mut ctx = Context::new();\n-    ctx.func.signature = sig;\n-    {\n-        let mut func_ctx = FunctionBuilderContext::new();\n-        let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n-\n-        let block = bcx.create_block();\n-        bcx.switch_to_block(block);\n-        let args = (&[usize_ty, usize_ty])\n-            .iter()\n-            .map(|&ty| bcx.append_block_param(block, ty))\n-            .collect::<Vec<Value>>();\n-\n-        let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);\n-        bcx.ins().call(callee_func_ref, &args);\n-\n-        bcx.ins().trap(TrapCode::UnreachableCodeReached);\n-        bcx.seal_all_blocks();\n-        bcx.finalize();\n-    }\n-    module.define_function(func_id, &mut ctx).unwrap();\n-    unwind_context.add_function(func_id, &ctx, module.isa());\n+    crate::common::create_wrapper_function(\n+        module,\n+        unwind_context,\n+        sig,\n+        \"__rust_alloc_error_handler\",\n+        &alloc_error_handler_kind.fn_name(sym::oom),\n+    );\n \n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n     let mut data_ctx = DataContext::new();"}, {"sha": "95778de3abafcc798a769edb9adc95f409c80a52", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 59, "deletions": 34, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -21,23 +21,6 @@ pub(crate) struct CodegenedFunction {\n     func_debug_cx: Option<FunctionDebugContext>,\n }\n \n-#[cfg_attr(not(feature = \"jit\"), allow(dead_code))]\n-pub(crate) fn codegen_and_compile_fn<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    cx: &mut crate::CodegenCx,\n-    cached_context: &mut Context,\n-    module: &mut dyn Module,\n-    instance: Instance<'tcx>,\n-) {\n-    let _inst_guard =\n-        crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));\n-\n-    let cached_func = std::mem::replace(&mut cached_context.func, Function::new());\n-    let codegened_func = codegen_fn(tcx, cx, cached_func, module, instance);\n-\n-    compile_fn(cx, cached_context, module, codegened_func);\n-}\n-\n pub(crate) fn codegen_fn<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     cx: &mut crate::CodegenCx,\n@@ -47,6 +30,9 @@ pub(crate) fn codegen_fn<'tcx>(\n ) -> CodegenedFunction {\n     debug_assert!(!instance.substs.needs_infer());\n \n+    let symbol_name = tcx.symbol_name(instance).name.to_string();\n+    let _timer = tcx.prof.generic_activity_with_arg(\"codegen fn\", &*symbol_name);\n+\n     let mir = tcx.instance_mir(instance.def);\n     let _mir_guard = crate::PrintOnPanic(|| {\n         let mut buf = Vec::new();\n@@ -58,7 +44,6 @@ pub(crate) fn codegen_fn<'tcx>(\n     });\n \n     // Declare function\n-    let symbol_name = tcx.symbol_name(instance).name.to_string();\n     let sig = get_function_sig(tcx, module.target_config().default_call_conv, instance);\n     let func_id = module.declare_function(&symbol_name, Linkage::Local, &sig).unwrap();\n \n@@ -112,7 +97,7 @@ pub(crate) fn codegen_fn<'tcx>(\n         next_ssa_var: 0,\n     };\n \n-    tcx.sess.time(\"codegen clif ir\", || codegen_fn_body(&mut fx, start_block));\n+    tcx.prof.generic_activity(\"codegen clif ir\").run(|| codegen_fn_body(&mut fx, start_block));\n     fx.bcx.seal_all_blocks();\n     fx.bcx.finalize();\n \n@@ -146,6 +131,9 @@ pub(crate) fn compile_fn(\n     module: &mut dyn Module,\n     codegened_func: CodegenedFunction,\n ) {\n+    let _timer =\n+        cx.profiler.generic_activity_with_arg(\"compile function\", &*codegened_func.symbol_name);\n+\n     let clif_comments = codegened_func.clif_comments;\n \n     // Store function in context\n@@ -191,9 +179,30 @@ pub(crate) fn compile_fn(\n     };\n \n     // Define function\n-    cx.profiler.verbose_generic_activity(\"define function\").run(|| {\n+    cx.profiler.generic_activity(\"define function\").run(|| {\n         context.want_disasm = cx.should_write_ir;\n         module.define_function(codegened_func.func_id, context).unwrap();\n+\n+        if cx.profiler.enabled() {\n+            let mut recording_args = false;\n+            cx.profiler\n+                .generic_activity_with_arg_recorder(\n+                    \"define function (clif pass timings)\",\n+                    |recorder| {\n+                        let pass_times = cranelift_codegen::timing::take_current();\n+                        // Replace newlines with | as measureme doesn't allow control characters like\n+                        // newlines inside strings.\n+                        recorder.record_arg(format!(\"{}\", pass_times).replace(\"\\n\", \" | \"));\n+                        recording_args = true;\n+                    },\n+                )\n+                .run(|| {\n+                    if recording_args {\n+                        // Wait a tiny bit to ensure chrome's profiler doesn't hide the event\n+                        std::thread::sleep(std::time::Duration::from_nanos(2))\n+                    }\n+                });\n+        }\n     });\n \n     if cx.should_write_ir {\n@@ -220,7 +229,7 @@ pub(crate) fn compile_fn(\n     let isa = module.isa();\n     let debug_context = &mut cx.debug_context;\n     let unwind_context = &mut cx.unwind_context;\n-    cx.profiler.verbose_generic_activity(\"generate debug info\").run(|| {\n+    cx.profiler.generic_activity(\"generate debug info\").run(|| {\n         if let Some(debug_context) = debug_context {\n             codegened_func.func_debug_cx.unwrap().finalize(\n                 debug_context,\n@@ -237,7 +246,7 @@ pub(crate) fn verify_func(\n     writer: &crate::pretty_clif::CommentWriter,\n     func: &Function,\n ) {\n-    tcx.sess.time(\"verify clif ir\", || {\n+    tcx.prof.generic_activity(\"verify clif ir\").run(|| {\n         let flags = cranelift_codegen::settings::Flags::new(cranelift_codegen::settings::builder());\n         match cranelift_codegen::verify_function(&func, &flags) {\n             Ok(_) => {}\n@@ -273,7 +282,10 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n         fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n         return;\n     }\n-    fx.tcx.sess.time(\"codegen prelude\", || crate::abi::codegen_fn_prelude(fx, start_block));\n+    fx.tcx\n+        .prof\n+        .generic_activity(\"codegen prelude\")\n+        .run(|| crate::abi::codegen_fn_prelude(fx, start_block));\n \n     for (bb, bb_data) in fx.mir.basic_blocks.iter_enumerated() {\n         let block = fx.get_block(bb);\n@@ -434,7 +446,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 cleanup: _,\n                 from_hir_call: _,\n             } => {\n-                fx.tcx.sess.time(\"codegen call\", || {\n+                fx.tcx.prof.generic_activity(\"codegen call\").run(|| {\n                     crate::abi::codegen_terminator_call(\n                         fx,\n                         mir::SourceInfo { span: *fn_span, ..source_info },\n@@ -778,17 +790,30 @@ fn codegen_stmt<'tcx>(\n                     let val = CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n                     lval.write_cvalue(fx, val);\n                 }\n-                Rvalue::Aggregate(ref kind, ref operands) => match kind.as_ref() {\n-                    AggregateKind::Array(_ty) => {\n-                        for (i, operand) in operands.iter().enumerate() {\n-                            let operand = codegen_operand(fx, operand);\n-                            let index = fx.bcx.ins().iconst(fx.pointer_type, i as i64);\n-                            let to = lval.place_index(fx, index);\n-                            to.write_cvalue(fx, operand);\n+                Rvalue::Aggregate(ref kind, ref operands) => {\n+                    let (variant_index, variant_dest, active_field_index) = match **kind {\n+                        mir::AggregateKind::Adt(_, variant_index, _, _, active_field_index) => {\n+                            let variant_dest = lval.downcast_variant(fx, variant_index);\n+                            (variant_index, variant_dest, active_field_index)\n                         }\n+                        _ => (VariantIdx::from_u32(0), lval, None),\n+                    };\n+                    if active_field_index.is_some() {\n+                        assert_eq!(operands.len(), 1);\n+                    }\n+                    for (i, operand) in operands.iter().enumerate() {\n+                        let operand = codegen_operand(fx, operand);\n+                        let field_index = active_field_index.unwrap_or(i);\n+                        let to = if let mir::AggregateKind::Array(_) = **kind {\n+                            let index = fx.bcx.ins().iconst(fx.pointer_type, field_index as i64);\n+                            variant_dest.place_index(fx, index)\n+                        } else {\n+                            variant_dest.place_field(fx, mir::Field::new(field_index))\n+                        };\n+                        to.write_cvalue(fx, operand);\n                     }\n-                    _ => unreachable!(\"shouldn't exist at codegen {:?}\", to_place_and_rval.1),\n-                },\n+                    crate::discriminant::codegen_set_discriminant(fx, lval, variant_index);\n+                }\n             }\n         }\n         StatementKind::StorageLive(_)\n@@ -832,7 +857,7 @@ fn codegen_stmt<'tcx>(\n fn codegen_array_len<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, place: CPlace<'tcx>) -> Value {\n     match *place.layout().ty.kind() {\n         ty::Array(_elem_ty, len) => {\n-            let len = fx.monomorphize(len).eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n+            let len = fx.monomorphize(len).eval_target_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n             fx.bcx.ins().iconst(fx.pointer_type, len)\n         }\n         ty::Slice(_elem_ty) => {"}, {"sha": "a8be0d32cc8c7c4d6d2948134bf7e8abf2bcd8a7", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -254,6 +254,44 @@ pub(crate) fn type_sign(ty: Ty<'_>) -> bool {\n     }\n }\n \n+pub(crate) fn create_wrapper_function(\n+    module: &mut dyn Module,\n+    unwind_context: &mut UnwindContext,\n+    sig: Signature,\n+    wrapper_name: &str,\n+    callee_name: &str,\n+) {\n+    let wrapper_func_id = module.declare_function(wrapper_name, Linkage::Export, &sig).unwrap();\n+    let callee_func_id = module.declare_function(callee_name, Linkage::Import, &sig).unwrap();\n+\n+    let mut ctx = Context::new();\n+    ctx.func.signature = sig;\n+    {\n+        let mut func_ctx = FunctionBuilderContext::new();\n+        let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n+\n+        let block = bcx.create_block();\n+        bcx.switch_to_block(block);\n+        let func = &mut bcx.func.stencil;\n+        let args = func\n+            .signature\n+            .params\n+            .iter()\n+            .map(|param| func.dfg.append_block_param(block, param.value_type))\n+            .collect::<Vec<Value>>();\n+\n+        let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);\n+        let call_inst = bcx.ins().call(callee_func_ref, &args);\n+        let results = bcx.inst_results(call_inst).to_vec(); // Clone to prevent borrow error\n+\n+        bcx.ins().return_(&results);\n+        bcx.seal_all_blocks();\n+        bcx.finalize();\n+    }\n+    module.define_function(wrapper_func_id, &mut ctx).unwrap();\n+    unwind_context.add_function(wrapper_func_id, &ctx, module.isa());\n+}\n+\n pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) cx: &'clif mut crate::CodegenCx,\n     pub(crate) module: &'m mut dyn Module,"}, {"sha": "8a53baa763a7debeddf78d5769708676bfed9e7c", "filename": "compiler/rustc_codegen_cranelift/src/compiler_builtins.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,14 +1,33 @@\n+#[cfg(all(unix, feature = \"jit\"))]\n+use std::ffi::c_int;\n+#[cfg(feature = \"jit\")]\n+use std::ffi::c_void;\n+\n+// FIXME replace with core::ffi::c_size_t once stablized\n+#[allow(non_camel_case_types)]\n+#[cfg(feature = \"jit\")]\n+type size_t = usize;\n+\n macro_rules! builtin_functions {\n-    ($register:ident; $(fn $name:ident($($arg_name:ident: $arg_ty:ty),*) -> $ret_ty:ty;)*) => {\n+    (\n+        $register:ident;\n+        $(\n+            $(#[$attr:meta])?\n+            fn $name:ident($($arg_name:ident: $arg_ty:ty),*) -> $ret_ty:ty;\n+        )*\n+    ) => {\n         #[cfg(feature = \"jit\")]\n         #[allow(improper_ctypes)]\n         extern \"C\" {\n-            $(fn $name($($arg_name: $arg_ty),*) -> $ret_ty;)*\n+            $(\n+                $(#[$attr])?\n+                fn $name($($arg_name: $arg_ty),*) -> $ret_ty;\n+            )*\n         }\n \n         #[cfg(feature = \"jit\")]\n         pub(crate) fn $register(builder: &mut cranelift_jit::JITBuilder) {\n-            for (name, val) in [$((stringify!($name), $name as *const u8)),*] {\n+            for (name, val) in [$($(#[$attr])? (stringify!($name), $name as *const u8)),*] {\n                 builder.symbol(name, val);\n             }\n         }\n@@ -40,4 +59,17 @@ builtin_functions! {\n     fn __fixdfti(f: f64) -> i128;\n     fn __fixunssfti(f: f32) -> u128;\n     fn __fixunsdfti(f: f64) -> u128;\n+\n+    // allocator\n+    // NOTE: These need to be mentioned here despite not being part of compiler_builtins because\n+    // newer glibc resolve dlsym(\"malloc\") to libc.so despite the override in the rustc binary to\n+    // use jemalloc. Libraries opened with dlopen still get the jemalloc version, causing multiple\n+    // allocators to be mixed, resulting in a crash.\n+    fn calloc(nobj: size_t, size: size_t) -> *mut c_void;\n+    #[cfg(unix)]\n+    fn posix_memalign(memptr: *mut *mut c_void, align: size_t, size: size_t) -> c_int;\n+    fn malloc(size: size_t) -> *mut c_void;\n+    fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;\n+    fn free(p: *mut c_void) -> ();\n+\n }"}, {"sha": "263401e1c4b8343f76a2ad52e8fc90097a58a1c7", "filename": "compiler/rustc_codegen_cranelift/src/config.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -42,12 +42,6 @@ pub struct BackendConfig {\n     /// Defaults to the value of `CG_CLIF_JIT_ARGS`.\n     pub jit_args: Vec<String>,\n \n-    /// Display the time it took to perform codegen for a crate.\n-    ///\n-    /// Defaults to true when the `CG_CLIF_DISPLAY_CG_TIME` env var is set to 1 or false otherwise.\n-    /// Can be set using `-Cllvm-args=display_cg_time=...`.\n-    pub display_cg_time: bool,\n-\n     /// Enable the Cranelift ir verifier for all compilation passes. If not set it will only run\n     /// once before passing the clif ir to Cranelift for compilation.\n     ///\n@@ -73,7 +67,6 @@ impl Default for BackendConfig {\n                 let args = std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n                 args.split(' ').map(|arg| arg.to_string()).collect()\n             },\n-            display_cg_time: bool_env_var(\"CG_CLIF_DISPLAY_CG_TIME\"),\n             enable_verifier: cfg!(debug_assertions) || bool_env_var(\"CG_CLIF_ENABLE_VERIFIER\"),\n             disable_incr_cache: bool_env_var(\"CG_CLIF_DISABLE_INCR_CACHE\"),\n         }\n@@ -92,7 +85,6 @@ impl BackendConfig {\n             if let Some((name, value)) = opt.split_once('=') {\n                 match name {\n                     \"mode\" => config.codegen_mode = value.parse()?,\n-                    \"display_cg_time\" => config.display_cg_time = parse_bool(name, value)?,\n                     \"enable_verifier\" => config.enable_verifier = parse_bool(name, value)?,\n                     \"disable_incr_cache\" => config.disable_incr_cache = parse_bool(name, value)?,\n                     _ => return Err(format!(\"Unknown option `{}`\", name)),"}, {"sha": "58b01dfb5b0ec84b25600137467fbe733ca1fe51", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 72, "deletions": 58, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -272,25 +272,25 @@ fn module_codegen(\n         ConcurrencyLimiterToken,\n     ),\n ) -> OngoingModuleCodegen {\n-    let (cgu_name, mut cx, mut module, codegened_functions) = tcx.sess.time(\"codegen cgu\", || {\n-        let cgu = tcx.codegen_unit(cgu_name);\n-        let mono_items = cgu.items_in_deterministic_order(tcx);\n-\n-        let mut module = make_module(tcx.sess, &backend_config, cgu_name.as_str().to_string());\n-\n-        let mut cx = crate::CodegenCx::new(\n-            tcx,\n-            backend_config.clone(),\n-            module.isa(),\n-            tcx.sess.opts.debuginfo != DebugInfo::None,\n-            cgu_name,\n-        );\n-        super::predefine_mono_items(tcx, &mut module, &mono_items);\n-        let mut codegened_functions = vec![];\n-        for (mono_item, _) in mono_items {\n-            match mono_item {\n-                MonoItem::Fn(inst) => {\n-                    tcx.sess.time(\"codegen fn\", || {\n+    let (cgu_name, mut cx, mut module, codegened_functions) =\n+        tcx.prof.verbose_generic_activity_with_arg(\"codegen cgu\", cgu_name.as_str()).run(|| {\n+            let cgu = tcx.codegen_unit(cgu_name);\n+            let mono_items = cgu.items_in_deterministic_order(tcx);\n+\n+            let mut module = make_module(tcx.sess, &backend_config, cgu_name.as_str().to_string());\n+\n+            let mut cx = crate::CodegenCx::new(\n+                tcx,\n+                backend_config.clone(),\n+                module.isa(),\n+                tcx.sess.opts.debuginfo != DebugInfo::None,\n+                cgu_name,\n+            );\n+            super::predefine_mono_items(tcx, &mut module, &mono_items);\n+            let mut codegened_functions = vec![];\n+            for (mono_item, _) in mono_items {\n+                match mono_item {\n+                    MonoItem::Fn(inst) => {\n                         let codegened_function = crate::base::codegen_fn(\n                             tcx,\n                             &mut cx,\n@@ -299,53 +299,68 @@ fn module_codegen(\n                             inst,\n                         );\n                         codegened_functions.push(codegened_function);\n-                    });\n-                }\n-                MonoItem::Static(def_id) => {\n-                    crate::constant::codegen_static(tcx, &mut module, def_id)\n-                }\n-                MonoItem::GlobalAsm(item_id) => {\n-                    crate::global_asm::codegen_global_asm_item(tcx, &mut cx.global_asm, item_id);\n+                    }\n+                    MonoItem::Static(def_id) => {\n+                        crate::constant::codegen_static(tcx, &mut module, def_id)\n+                    }\n+                    MonoItem::GlobalAsm(item_id) => {\n+                        crate::global_asm::codegen_global_asm_item(\n+                            tcx,\n+                            &mut cx.global_asm,\n+                            item_id,\n+                        );\n+                    }\n                 }\n             }\n-        }\n-        crate::main_shim::maybe_create_entry_wrapper(\n-            tcx,\n-            &mut module,\n-            &mut cx.unwind_context,\n-            false,\n-            cgu.is_primary(),\n-        );\n+            crate::main_shim::maybe_create_entry_wrapper(\n+                tcx,\n+                &mut module,\n+                &mut cx.unwind_context,\n+                false,\n+                cgu.is_primary(),\n+            );\n \n-        let cgu_name = cgu.name().as_str().to_owned();\n+            let cgu_name = cgu.name().as_str().to_owned();\n \n-        (cgu_name, cx, module, codegened_functions)\n-    });\n+            (cgu_name, cx, module, codegened_functions)\n+        });\n \n     OngoingModuleCodegen::Async(std::thread::spawn(move || {\n-        cx.profiler.clone().verbose_generic_activity(\"compile functions\").run(|| {\n-            let mut cached_context = Context::new();\n-            for codegened_func in codegened_functions {\n-                crate::base::compile_fn(&mut cx, &mut cached_context, &mut module, codegened_func);\n-            }\n-        });\n+        cx.profiler.clone().verbose_generic_activity_with_arg(\"compile functions\", &*cgu_name).run(\n+            || {\n+                let mut cached_context = Context::new();\n+                for codegened_func in codegened_functions {\n+                    crate::base::compile_fn(\n+                        &mut cx,\n+                        &mut cached_context,\n+                        &mut module,\n+                        codegened_func,\n+                    );\n+                }\n+            },\n+        );\n \n-        let global_asm_object_file =\n-            cx.profiler.verbose_generic_activity(\"compile assembly\").run(|| {\n+        let global_asm_object_file = cx\n+            .profiler\n+            .verbose_generic_activity_with_arg(\"compile assembly\", &*cgu_name)\n+            .run(|| {\n                 crate::global_asm::compile_global_asm(&global_asm_config, &cgu_name, &cx.global_asm)\n             })?;\n \n-        let codegen_result = cx.profiler.verbose_generic_activity(\"write object file\").run(|| {\n-            emit_cgu(\n-                &global_asm_config.output_filenames,\n-                &cx.profiler,\n-                cgu_name,\n-                module,\n-                cx.debug_context,\n-                cx.unwind_context,\n-                global_asm_object_file,\n-            )\n-        });\n+        let codegen_result = cx\n+            .profiler\n+            .verbose_generic_activity_with_arg(\"write object file\", &*cgu_name)\n+            .run(|| {\n+                emit_cgu(\n+                    &global_asm_config.output_filenames,\n+                    &cx.profiler,\n+                    cgu_name,\n+                    module,\n+                    cx.debug_context,\n+                    cx.unwind_context,\n+                    global_asm_object_file,\n+                )\n+            });\n         std::mem::drop(token);\n         codegen_result\n     }))\n@@ -375,7 +390,7 @@ pub(crate) fn run_aot(\n \n     let mut concurrency_limiter = ConcurrencyLimiter::new(tcx.sess, cgus.len());\n \n-    let modules = super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n+    let modules = tcx.sess.time(\"codegen mono items\", || {\n         cgus.iter()\n             .map(|cgu| {\n                 let cgu_reuse = if backend_config.disable_incr_cache {\n@@ -437,7 +452,6 @@ pub(crate) fn run_aot(\n     };\n \n     let metadata_module = if need_metadata_module {\n-        let _timer = tcx.prof.generic_activity(\"codegen crate metadata\");\n         let (metadata_cgu_name, tmp_file) = tcx.sess.time(\"write compressed metadata\", || {\n             use rustc_middle::mir::mono::CodegenUnitNameBuilder;\n "}, {"sha": "8b5a2da2c5944d631de0499f1905029de5c4b3c8", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -121,22 +121,20 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         .into_iter()\n         .collect::<Vec<(_, (_, _))>>();\n \n-    super::time(tcx, backend_config.display_cg_time, \"codegen mono items\", || {\n+    tcx.sess.time(\"codegen mono items\", || {\n         super::predefine_mono_items(tcx, &mut jit_module, &mono_items);\n         for (mono_item, _) in mono_items {\n             match mono_item {\n                 MonoItem::Fn(inst) => match backend_config.codegen_mode {\n                     CodegenMode::Aot => unreachable!(),\n                     CodegenMode::Jit => {\n-                        tcx.sess.time(\"codegen fn\", || {\n-                            crate::base::codegen_and_compile_fn(\n-                                tcx,\n-                                &mut cx,\n-                                &mut cached_context,\n-                                &mut jit_module,\n-                                inst,\n-                            )\n-                        });\n+                        codegen_and_compile_fn(\n+                            tcx,\n+                            &mut cx,\n+                            &mut cached_context,\n+                            &mut jit_module,\n+                            inst,\n+                        );\n                     }\n                     CodegenMode::JitLazy => {\n                         codegen_shim(tcx, &mut cx, &mut cached_context, &mut jit_module, inst)\n@@ -219,6 +217,24 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     }\n }\n \n+pub(crate) fn codegen_and_compile_fn<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    cx: &mut crate::CodegenCx,\n+    cached_context: &mut Context,\n+    module: &mut dyn Module,\n+    instance: Instance<'tcx>,\n+) {\n+    tcx.prof.generic_activity(\"codegen and compile fn\").run(|| {\n+        let _inst_guard =\n+            crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));\n+\n+        let cached_func = std::mem::replace(&mut cached_context.func, Function::new());\n+        let codegened_func = crate::base::codegen_fn(tcx, cx, cached_func, module, instance);\n+\n+        crate::base::compile_fn(cx, cached_context, module, codegened_func);\n+    });\n+}\n+\n extern \"C\" fn clif_jit_fn(\n     instance_ptr: *const Instance<'static>,\n     trampoline_ptr: *const u8,\n@@ -271,15 +287,7 @@ fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) ->\n                 false,\n                 Symbol::intern(\"dummy_cgu_name\"),\n             );\n-            tcx.sess.time(\"codegen fn\", || {\n-                crate::base::codegen_and_compile_fn(\n-                    tcx,\n-                    &mut cx,\n-                    &mut Context::new(),\n-                    jit_module,\n-                    instance,\n-                )\n-            });\n+            codegen_and_compile_fn(tcx, &mut cx, &mut Context::new(), jit_module, instance);\n \n             assert!(cx.global_asm.is_empty());\n             jit_module.finalize_definitions().unwrap();"}, {"sha": "d09d3a529759cab809e2e8d637b23999fcf57d23", "filename": "compiler/rustc_codegen_cranelift/src/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -17,7 +17,7 @@ fn predefine_mono_items<'tcx>(\n     module: &mut dyn Module,\n     mono_items: &[(MonoItem<'tcx>, (RLinkage, Visibility))],\n ) {\n-    tcx.sess.time(\"predefine functions\", || {\n+    tcx.prof.generic_activity(\"predefine functions\").run(|| {\n         let is_compiler_builtins = tcx.is_compiler_builtins(LOCAL_CRATE);\n         for &(mono_item, (linkage, visibility)) in mono_items {\n             match mono_item {\n@@ -39,16 +39,3 @@ fn predefine_mono_items<'tcx>(\n         }\n     });\n }\n-\n-fn time<R>(tcx: TyCtxt<'_>, display: bool, name: &'static str, f: impl FnOnce() -> R) -> R {\n-    if display {\n-        println!(\"[{:<30}: {}] start\", tcx.crate_name(LOCAL_CRATE), name);\n-        let before = std::time::Instant::now();\n-        let res = tcx.sess.time(name, f);\n-        let after = std::time::Instant::now();\n-        println!(\"[{:<30}: {}] end time: {:?}\", tcx.crate_name(LOCAL_CRATE), name, after - before);\n-        res\n-    } else {\n-        tcx.sess.time(name, f)\n-    }\n-}"}, {"sha": "46c78ce6a1e344d251c62256d4db238f62154351", "filename": "compiler/rustc_codegen_cranelift/src/global_asm.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fglobal_asm.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -7,7 +7,7 @@ use std::process::{Command, Stdio};\n use std::sync::Arc;\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n-use rustc_hir::ItemId;\n+use rustc_hir::{InlineAsmOperand, ItemId};\n use rustc_session::config::{OutputFilenames, OutputType};\n \n use crate::prelude::*;\n@@ -23,7 +23,46 @@ pub(crate) fn codegen_global_asm_item(tcx: TyCtxt<'_>, global_asm: &mut String,\n         for piece in asm.template {\n             match *piece {\n                 InlineAsmTemplatePiece::String(ref s) => global_asm.push_str(s),\n-                InlineAsmTemplatePiece::Placeholder { .. } => todo!(),\n+                InlineAsmTemplatePiece::Placeholder { operand_idx, modifier: _, span: op_sp } => {\n+                    match asm.operands[operand_idx].0 {\n+                        InlineAsmOperand::Const { ref anon_const } => {\n+                            let const_value =\n+                                tcx.const_eval_poly(anon_const.def_id.to_def_id()).unwrap_or_else(\n+                                    |_| span_bug!(op_sp, \"asm const cannot be resolved\"),\n+                                );\n+                            let ty = tcx.typeck_body(anon_const.body).node_type(anon_const.hir_id);\n+                            let string = rustc_codegen_ssa::common::asm_const_to_str(\n+                                tcx,\n+                                op_sp,\n+                                const_value,\n+                                RevealAllLayoutCx(tcx).layout_of(ty),\n+                            );\n+                            global_asm.push_str(&string);\n+                        }\n+                        InlineAsmOperand::SymFn { anon_const } => {\n+                            let ty = tcx.typeck_body(anon_const.body).node_type(anon_const.hir_id);\n+                            let instance = match ty.kind() {\n+                                &ty::FnDef(def_id, substs) => Instance::new(def_id, substs),\n+                                _ => span_bug!(op_sp, \"asm sym is not a function\"),\n+                            };\n+                            let symbol = tcx.symbol_name(instance);\n+                            // FIXME handle the case where the function was made private to the\n+                            // current codegen unit\n+                            global_asm.push_str(symbol.name);\n+                        }\n+                        InlineAsmOperand::SymStatic { path: _, def_id } => {\n+                            let instance = Instance::mono(tcx, def_id).polymorphize(tcx);\n+                            let symbol = tcx.symbol_name(instance);\n+                            global_asm.push_str(symbol.name);\n+                        }\n+                        InlineAsmOperand::In { .. }\n+                        | InlineAsmOperand::Out { .. }\n+                        | InlineAsmOperand::InOut { .. }\n+                        | InlineAsmOperand::SplitInOut { .. } => {\n+                            span_bug!(op_sp, \"invalid operand type for global_asm!\")\n+                        }\n+                    }\n+                }\n             }\n         }\n         global_asm.push_str(\"\\n.att_syntax\\n\\n\");"}, {"sha": "6206fbf7dd571505c5954fff7cb55e6ee560870c", "filename": "compiler/rustc_codegen_cranelift/src/inline_asm.rs", "status": "modified", "additions": 143, "deletions": 46, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -9,9 +9,33 @@ use rustc_middle::mir::InlineAsmOperand;\n use rustc_span::sym;\n use rustc_target::asm::*;\n \n+enum CInlineAsmOperand<'tcx> {\n+    In {\n+        reg: InlineAsmRegOrRegClass,\n+        value: CValue<'tcx>,\n+    },\n+    Out {\n+        reg: InlineAsmRegOrRegClass,\n+        late: bool,\n+        place: Option<CPlace<'tcx>>,\n+    },\n+    InOut {\n+        reg: InlineAsmRegOrRegClass,\n+        _late: bool,\n+        in_value: CValue<'tcx>,\n+        out_place: Option<CPlace<'tcx>>,\n+    },\n+    Const {\n+        value: String,\n+    },\n+    Symbol {\n+        symbol: String,\n+    },\n+}\n+\n pub(crate) fn codegen_inline_asm<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    _span: Span,\n+    span: Span,\n     template: &[InlineAsmTemplatePiece],\n     operands: &[InlineAsmOperand<'tcx>],\n     options: InlineAsmOptions,\n@@ -198,6 +222,81 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n         }\n     }\n \n+    let operands = operands\n+        .into_iter()\n+        .map(|operand| match *operand {\n+            InlineAsmOperand::In { reg, ref value } => {\n+                CInlineAsmOperand::In { reg, value: crate::base::codegen_operand(fx, value) }\n+            }\n+            InlineAsmOperand::Out { reg, late, ref place } => CInlineAsmOperand::Out {\n+                reg,\n+                late,\n+                place: place.map(|place| crate::base::codegen_place(fx, place)),\n+            },\n+            InlineAsmOperand::InOut { reg, late, ref in_value, ref out_place } => {\n+                CInlineAsmOperand::InOut {\n+                    reg,\n+                    _late: late,\n+                    in_value: crate::base::codegen_operand(fx, in_value),\n+                    out_place: out_place.map(|place| crate::base::codegen_place(fx, place)),\n+                }\n+            }\n+            InlineAsmOperand::Const { ref value } => {\n+                let (const_value, ty) = crate::constant::eval_mir_constant(fx, &*value)\n+                    .unwrap_or_else(|| span_bug!(span, \"asm const cannot be resolved\"));\n+                let value = rustc_codegen_ssa::common::asm_const_to_str(\n+                    fx.tcx,\n+                    span,\n+                    const_value,\n+                    fx.layout_of(ty),\n+                );\n+                CInlineAsmOperand::Const { value }\n+            }\n+            InlineAsmOperand::SymFn { ref value } => {\n+                let literal = fx.monomorphize(value.literal);\n+                if let ty::FnDef(def_id, substs) = *literal.ty().kind() {\n+                    let instance = ty::Instance::resolve_for_fn_ptr(\n+                        fx.tcx,\n+                        ty::ParamEnv::reveal_all(),\n+                        def_id,\n+                        substs,\n+                    )\n+                    .unwrap();\n+                    let symbol = fx.tcx.symbol_name(instance);\n+\n+                    // Pass a wrapper rather than the function itself as the function itself may not\n+                    // be exported from the main codegen unit and may thus be unreachable from the\n+                    // object file created by an external assembler.\n+                    let inline_asm_index = fx.cx.inline_asm_index.get();\n+                    fx.cx.inline_asm_index.set(inline_asm_index + 1);\n+                    let wrapper_name = format!(\n+                        \"__inline_asm_{}_wrapper_n{}\",\n+                        fx.cx.cgu_name.as_str().replace('.', \"__\").replace('-', \"_\"),\n+                        inline_asm_index\n+                    );\n+                    let sig =\n+                        get_function_sig(fx.tcx, fx.target_config.default_call_conv, instance);\n+                    create_wrapper_function(\n+                        fx.module,\n+                        &mut fx.cx.unwind_context,\n+                        sig,\n+                        &wrapper_name,\n+                        symbol.name,\n+                    );\n+\n+                    CInlineAsmOperand::Symbol { symbol: wrapper_name }\n+                } else {\n+                    span_bug!(span, \"invalid type for asm sym (fn)\");\n+                }\n+            }\n+            InlineAsmOperand::SymStatic { def_id } => {\n+                assert!(fx.tcx.is_static(def_id));\n+                let instance = Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n+                CInlineAsmOperand::Symbol { symbol: fx.tcx.symbol_name(instance).name.to_owned() }\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n     let mut inputs = Vec::new();\n     let mut outputs = Vec::new();\n \n@@ -206,7 +305,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n         arch: fx.tcx.sess.asm_arch.unwrap(),\n         enclosing_def_id: fx.instance.def_id(),\n         template,\n-        operands,\n+        operands: &operands,\n         options,\n         registers: Vec::new(),\n         stack_slots_clobber: Vec::new(),\n@@ -229,36 +328,22 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n     fx.cx.global_asm.push_str(&generated_asm);\n \n     for (i, operand) in operands.iter().enumerate() {\n-        match *operand {\n-            InlineAsmOperand::In { reg: _, ref value } => {\n-                inputs.push((\n-                    asm_gen.stack_slots_input[i].unwrap(),\n-                    crate::base::codegen_operand(fx, value).load_scalar(fx),\n-                ));\n-            }\n-            InlineAsmOperand::Out { reg: _, late: _, place } => {\n+        match operand {\n+            CInlineAsmOperand::In { reg: _, value } => {\n+                inputs.push((asm_gen.stack_slots_input[i].unwrap(), value.load_scalar(fx)));\n+            }\n+            CInlineAsmOperand::Out { reg: _, late: _, place } => {\n                 if let Some(place) = place {\n-                    outputs.push((\n-                        asm_gen.stack_slots_output[i].unwrap(),\n-                        crate::base::codegen_place(fx, place),\n-                    ));\n+                    outputs.push((asm_gen.stack_slots_output[i].unwrap(), place.clone()));\n                 }\n             }\n-            InlineAsmOperand::InOut { reg: _, late: _, ref in_value, out_place } => {\n-                inputs.push((\n-                    asm_gen.stack_slots_input[i].unwrap(),\n-                    crate::base::codegen_operand(fx, in_value).load_scalar(fx),\n-                ));\n+            CInlineAsmOperand::InOut { reg: _, _late: _, in_value, out_place } => {\n+                inputs.push((asm_gen.stack_slots_input[i].unwrap(), in_value.load_scalar(fx)));\n                 if let Some(out_place) = out_place {\n-                    outputs.push((\n-                        asm_gen.stack_slots_output[i].unwrap(),\n-                        crate::base::codegen_place(fx, out_place),\n-                    ));\n+                    outputs.push((asm_gen.stack_slots_output[i].unwrap(), out_place.clone()));\n                 }\n             }\n-            InlineAsmOperand::Const { value: _ } => todo!(),\n-            InlineAsmOperand::SymFn { value: _ } => todo!(),\n-            InlineAsmOperand::SymStatic { def_id: _ } => todo!(),\n+            CInlineAsmOperand::Const { value: _ } | CInlineAsmOperand::Symbol { symbol: _ } => {}\n         }\n     }\n \n@@ -280,7 +365,7 @@ struct InlineAssemblyGenerator<'a, 'tcx> {\n     arch: InlineAsmArch,\n     enclosing_def_id: DefId,\n     template: &'a [InlineAsmTemplatePiece],\n-    operands: &'a [InlineAsmOperand<'tcx>],\n+    operands: &'a [CInlineAsmOperand<'tcx>],\n     options: InlineAsmOptions,\n     registers: Vec<Option<InlineAsmReg>>,\n     stack_slots_clobber: Vec<Option<Size>>,\n@@ -304,18 +389,20 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         // Add explicit registers to the allocated set.\n         for (i, operand) in self.operands.iter().enumerate() {\n             match *operand {\n-                InlineAsmOperand::In { reg: InlineAsmRegOrRegClass::Reg(reg), .. } => {\n+                CInlineAsmOperand::In { reg: InlineAsmRegOrRegClass::Reg(reg), .. } => {\n                     regs[i] = Some(reg);\n                     allocated.entry(reg).or_default().0 = true;\n                 }\n-                InlineAsmOperand::Out {\n-                    reg: InlineAsmRegOrRegClass::Reg(reg), late: true, ..\n+                CInlineAsmOperand::Out {\n+                    reg: InlineAsmRegOrRegClass::Reg(reg),\n+                    late: true,\n+                    ..\n                 } => {\n                     regs[i] = Some(reg);\n                     allocated.entry(reg).or_default().1 = true;\n                 }\n-                InlineAsmOperand::Out { reg: InlineAsmRegOrRegClass::Reg(reg), .. }\n-                | InlineAsmOperand::InOut { reg: InlineAsmRegOrRegClass::Reg(reg), .. } => {\n+                CInlineAsmOperand::Out { reg: InlineAsmRegOrRegClass::Reg(reg), .. }\n+                | CInlineAsmOperand::InOut { reg: InlineAsmRegOrRegClass::Reg(reg), .. } => {\n                     regs[i] = Some(reg);\n                     allocated.insert(reg, (true, true));\n                 }\n@@ -326,12 +413,12 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         // Allocate out/inout/inlateout registers first because they are more constrained.\n         for (i, operand) in self.operands.iter().enumerate() {\n             match *operand {\n-                InlineAsmOperand::Out {\n+                CInlineAsmOperand::Out {\n                     reg: InlineAsmRegOrRegClass::RegClass(class),\n                     late: false,\n                     ..\n                 }\n-                | InlineAsmOperand::InOut {\n+                | CInlineAsmOperand::InOut {\n                     reg: InlineAsmRegOrRegClass::RegClass(class), ..\n                 } => {\n                     let mut alloc_reg = None;\n@@ -360,7 +447,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         // Allocate in/lateout.\n         for (i, operand) in self.operands.iter().enumerate() {\n             match *operand {\n-                InlineAsmOperand::In { reg: InlineAsmRegOrRegClass::RegClass(class), .. } => {\n+                CInlineAsmOperand::In { reg: InlineAsmRegOrRegClass::RegClass(class), .. } => {\n                     let mut alloc_reg = None;\n                     for &reg in &map[&class] {\n                         let mut used = false;\n@@ -380,7 +467,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                     regs[i] = Some(reg);\n                     allocated.entry(reg).or_default().0 = true;\n                 }\n-                InlineAsmOperand::Out {\n+                CInlineAsmOperand::Out {\n                     reg: InlineAsmRegOrRegClass::RegClass(class),\n                     late: true,\n                     ..\n@@ -455,7 +542,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         // Allocate stack slots for inout\n         for (i, operand) in self.operands.iter().enumerate() {\n             match *operand {\n-                InlineAsmOperand::InOut { reg, out_place: Some(_), .. } => {\n+                CInlineAsmOperand::InOut { reg, out_place: Some(_), .. } => {\n                     let slot = new_slot(reg.reg_class());\n                     slots_input[i] = Some(slot);\n                     slots_output[i] = Some(slot);\n@@ -470,8 +557,8 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         // Allocate stack slots for input\n         for (i, operand) in self.operands.iter().enumerate() {\n             match *operand {\n-                InlineAsmOperand::In { reg, .. }\n-                | InlineAsmOperand::InOut { reg, out_place: None, .. } => {\n+                CInlineAsmOperand::In { reg, .. }\n+                | CInlineAsmOperand::InOut { reg, out_place: None, .. } => {\n                     slots_input[i] = Some(new_slot(reg.reg_class()));\n                 }\n                 _ => (),\n@@ -487,7 +574,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         // Allocate stack slots for output\n         for (i, operand) in self.operands.iter().enumerate() {\n             match *operand {\n-                InlineAsmOperand::Out { reg, place: Some(_), .. } => {\n+                CInlineAsmOperand::Out { reg, place: Some(_), .. } => {\n                     slots_output[i] = Some(new_slot(reg.reg_class()));\n                 }\n                 _ => (),\n@@ -549,13 +636,23 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n                     generated_asm.push_str(s);\n                 }\n                 InlineAsmTemplatePiece::Placeholder { operand_idx, modifier, span: _ } => {\n-                    if self.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n-                        generated_asm.push('%');\n+                    match self.operands[*operand_idx] {\n+                        CInlineAsmOperand::In { .. }\n+                        | CInlineAsmOperand::Out { .. }\n+                        | CInlineAsmOperand::InOut { .. } => {\n+                            if self.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n+                                generated_asm.push('%');\n+                            }\n+                            self.registers[*operand_idx]\n+                                .unwrap()\n+                                .emit(&mut generated_asm, self.arch, *modifier)\n+                                .unwrap();\n+                        }\n+                        CInlineAsmOperand::Const { ref value } => {\n+                            generated_asm.push_str(value);\n+                        }\n+                        CInlineAsmOperand::Symbol { ref symbol } => generated_asm.push_str(symbol),\n                     }\n-                    self.registers[*operand_idx]\n-                        .unwrap()\n-                        .emit(&mut generated_asm, self.arch, *modifier)\n-                        .unwrap();\n                 }\n             }\n         }"}, {"sha": "892e7c30e2f7a425d6cebde69198ed26bb766800", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -218,34 +218,18 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     let intrinsic = fx.tcx.item_name(instance.def_id());\n     let substs = instance.substs;\n \n-    let target = if let Some(target) = target {\n-        target\n-    } else {\n-        // Insert non returning intrinsics here\n-        match intrinsic {\n-            sym::abort => {\n-                fx.bcx.ins().trap(TrapCode::User(0));\n-            }\n-            sym::transmute => {\n-                crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n-            }\n-            _ => unimplemented!(\"unsupported intrinsic {}\", intrinsic),\n-        }\n-        return;\n-    };\n-\n     if intrinsic.as_str().starts_with(\"simd_\") {\n         self::simd::codegen_simd_intrinsic_call(\n             fx,\n             intrinsic,\n             substs,\n             args,\n             destination,\n-            target,\n+            target.expect(\"target for simd intrinsic\"),\n             source_info.span,\n         );\n     } else if codegen_float_intrinsic_call(fx, intrinsic, args, destination) {\n-        let ret_block = fx.get_block(target);\n+        let ret_block = fx.get_block(target.expect(\"target for float intrinsic\"));\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n         codegen_regular_intrinsic_call(\n@@ -255,7 +239,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             substs,\n             args,\n             destination,\n-            Some(target),\n+            target,\n             source_info,\n         );\n     }\n@@ -382,6 +366,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     match intrinsic {\n+        sym::abort => {\n+            fx.bcx.ins().trap(TrapCode::User(0));\n+            return;\n+        }\n         sym::likely | sym::unlikely => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n \n@@ -579,6 +567,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         sym::transmute => {\n             intrinsic_args!(fx, args => (from); intrinsic);\n \n+            if ret.layout().abi.is_uninhabited() {\n+                crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n+                return;\n+            }\n+\n             ret.write_cvalue_transmute(fx, from);\n         }\n         sym::write_bytes | sym::volatile_set_memory => {"}, {"sha": "a1d63acfb61667e2c9fa60fdb8ba181e02adc48f", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -141,7 +141,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let idx_ty = fx.monomorphize(idx.ty(fx.mir, fx.tcx));\n                 match idx_ty.kind() {\n                     ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => len\n-                        .try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all())\n+                        .try_eval_target_usize(fx.tcx, ty::ParamEnv::reveal_all())\n                         .unwrap_or_else(|| {\n                             span_bug!(span, \"could not evaluate shuffle index array length\")\n                         })\n@@ -735,7 +735,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => {}\n                 ty::Array(elem, len)\n                     if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n-                        && len.try_eval_usize(fx.tcx, ty::ParamEnv::reveal_all())\n+                        && len.try_eval_target_usize(fx.tcx, ty::ParamEnv::reveal_all())\n                             == Some(expected_bytes) => {}\n                 _ => {\n                     fx.tcx.sess.span_fatal("}, {"sha": "c7fe382bac4e3be45f55bf4daea2888bf6a9c80c", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -86,7 +86,7 @@ mod prelude {\n     pub(crate) use rustc_middle::ty::layout::{self, LayoutOf, TyAndLayout};\n     pub(crate) use rustc_middle::ty::{\n         self, FloatTy, Instance, InstanceDef, IntTy, ParamEnv, Ty, TyCtxt, TypeAndMut,\n-        TypeFoldable, TypeVisitable, UintTy,\n+        TypeFoldable, UintTy,\n     };\n     pub(crate) use rustc_target::abi::{Abi, Scalar, Size, VariantIdx};\n "}, {"sha": "a0745582d666948008974acfdff7f9b0b36491b2", "filename": "compiler/rustc_codegen_cranelift/src/unsize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Funsize.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn unsized_info<'tcx>(\n         (&ty::Array(_, len), &ty::Slice(_)) => fx\n             .bcx\n             .ins()\n-            .iconst(fx.pointer_type, len.eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64),\n+            .iconst(fx.pointer_type, len.eval_target_usize(fx.tcx, ParamEnv::reveal_all()) as i64),\n         (\n             &ty::Dynamic(ref data_a, _, src_dyn_kind),\n             &ty::Dynamic(ref data_b, _, target_dyn_kind),"}, {"sha": "cc1edaa97d800c6df58ca606530824a0c07ec990", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -564,8 +564,8 @@ impl<'tcx> CPlace<'tcx> {\n             CPlaceInner::Var(_local, var) => {\n                 if let ty::Array(element, len) = dst_layout.ty.kind() {\n                     // Can only happen for vector types\n-                    let len =\n-                        u32::try_from(len.eval_usize(fx.tcx, ParamEnv::reveal_all())).unwrap();\n+                    let len = u32::try_from(len.eval_target_usize(fx.tcx, ParamEnv::reveal_all()))\n+                        .unwrap();\n                     let vector_ty = fx.clif_type(*element).unwrap().by(len).unwrap();\n \n                     let data = match from.0 {\n@@ -588,10 +588,13 @@ impl<'tcx> CPlace<'tcx> {\n                 return;\n             }\n             CPlaceInner::VarPair(_local, var1, var2) => {\n-                let (ptr, meta) = from.force_stack(fx);\n-                assert!(meta.is_none());\n-                let (data1, data2) =\n-                    CValue(CValueInner::ByRef(ptr, None), dst_layout).load_scalar_pair(fx);\n+                let (data1, data2) = if from.layout().ty == dst_layout.ty {\n+                    CValue(from.0, dst_layout).load_scalar_pair(fx)\n+                } else {\n+                    let (ptr, meta) = from.force_stack(fx);\n+                    assert!(meta.is_none());\n+                    CValue(CValueInner::ByRef(ptr, None), dst_layout).load_scalar_pair(fx)\n+                };\n                 let (dst_ty1, dst_ty2) = fx.clif_pair_type(self.layout().ty).unwrap();\n                 transmute_value(fx, var1, data1, dst_ty1);\n                 transmute_value(fx, var2, data2, dst_ty2);"}, {"sha": "cb8168b407184b93bb32be47a8ee0b1b366e2698", "filename": "compiler/rustc_codegen_gcc/src/intrinsic/simd.rs", "status": "modified", "additions": 233, "deletions": 174, "changes": 407, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fintrinsic%2Fsimd.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,6 +1,6 @@\n use std::cmp::Ordering;\n \n-use gccjit::{BinaryOp, RValue, Type, ToRValue};\n+use gccjit::{BinaryOp, RValue, ToRValue, Type};\n use rustc_codegen_ssa::base::compare_simd_types;\n use rustc_codegen_ssa::common::TypeKind;\n use rustc_codegen_ssa::mir::operand::OperandRef;\n@@ -10,52 +10,57 @@ use rustc_hir as hir;\n use rustc_middle::span_bug;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::{Span, Symbol, sym};\n+use rustc_span::{sym, Span, Symbol};\n use rustc_target::abi::Align;\n \n use crate::builder::Builder;\n use crate::errors::{\n-    InvalidMonomorphizationInvalidFloatVector,\n-    InvalidMonomorphizationNotFloat,\n-    InvalidMonomorphizationUnrecognized,\n-    InvalidMonomorphizationExpectedSignedUnsigned,\n-    InvalidMonomorphizationUnsupportedElement,\n-    InvalidMonomorphizationInvalidBitmask,\n-    InvalidMonomorphizationSimdShuffle,\n-    InvalidMonomorphizationExpectedSimd,\n-    InvalidMonomorphizationMaskType,\n-    InvalidMonomorphizationReturnLength,\n-    InvalidMonomorphizationReturnLengthInputType,\n-    InvalidMonomorphizationReturnElement,\n-    InvalidMonomorphizationReturnType,\n-    InvalidMonomorphizationInsertedType,\n-    InvalidMonomorphizationReturnIntegerType,\n-    InvalidMonomorphizationMismatchedLengths,\n-    InvalidMonomorphizationUnsupportedCast,\n-    InvalidMonomorphizationUnsupportedOperation\n+    InvalidMonomorphizationExpectedSignedUnsigned, InvalidMonomorphizationExpectedSimd,\n+    InvalidMonomorphizationInsertedType, InvalidMonomorphizationInvalidBitmask,\n+    InvalidMonomorphizationInvalidFloatVector, InvalidMonomorphizationMaskType,\n+    InvalidMonomorphizationMismatchedLengths, InvalidMonomorphizationNotFloat,\n+    InvalidMonomorphizationReturnElement, InvalidMonomorphizationReturnIntegerType,\n+    InvalidMonomorphizationReturnLength, InvalidMonomorphizationReturnLengthInputType,\n+    InvalidMonomorphizationReturnType, InvalidMonomorphizationSimdShuffle,\n+    InvalidMonomorphizationUnrecognized, InvalidMonomorphizationUnsupportedCast,\n+    InvalidMonomorphizationUnsupportedElement, InvalidMonomorphizationUnsupportedOperation,\n };\n use crate::intrinsic;\n \n-pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>, name: Symbol, callee_ty: Ty<'tcx>, args: &[OperandRef<'tcx, RValue<'gcc>>], ret_ty: Ty<'tcx>, llret_ty: Type<'gcc>, span: Span) -> Result<RValue<'gcc>, ()> {\n+pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(\n+    bx: &mut Builder<'a, 'gcc, 'tcx>,\n+    name: Symbol,\n+    callee_ty: Ty<'tcx>,\n+    args: &[OperandRef<'tcx, RValue<'gcc>>],\n+    ret_ty: Ty<'tcx>,\n+    llret_ty: Type<'gcc>,\n+    span: Span,\n+) -> Result<RValue<'gcc>, ()> {\n     // macros for error handling:\n     macro_rules! return_error {\n-        ($err:expr) => {\n-            {\n-                bx.sess().emit_err($err);\n-                return Err(());\n-            }\n-        }\n+        ($err:expr) => {{\n+            bx.sess().emit_err($err);\n+            return Err(());\n+        }};\n     }\n     macro_rules! require {\n         ($cond:expr, $err:expr) => {\n             if !$cond {\n                 return_error!($err);\n             }\n-        }\n+        };\n     }\n     macro_rules! require_simd {\n         ($ty: expr, $position: expr) => {\n-            require!($ty.is_simd(), InvalidMonomorphizationExpectedSimd { span, name, position: $position, found_ty: $ty })\n+            require!(\n+                $ty.is_simd(),\n+                InvalidMonomorphizationExpectedSimd {\n+                    span,\n+                    name,\n+                    position: $position,\n+                    found_ty: $ty\n+                }\n+            )\n         };\n     }\n \n@@ -77,7 +82,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n             ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => args[0].immediate(),\n             ty::Array(elem, len)\n                 if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n-                    && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n+                    && len.try_eval_target_usize(bx.tcx, ty::ParamEnv::reveal_all())\n                         == Some(expected_bytes) =>\n             {\n                 let place = PlaceRef::alloca(bx, args[0].layout);\n@@ -86,9 +91,13 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                 let ptr = bx.pointercast(place.llval, bx.cx.type_ptr_to(int_ty));\n                 bx.load(int_ty, ptr, Align::ONE)\n             }\n-            _ => return_error!(\n-                InvalidMonomorphizationInvalidBitmask { span, name, ty: mask_ty, expected_int_bits, expected_bytes }\n-            ),\n+            _ => return_error!(InvalidMonomorphizationInvalidBitmask {\n+                span,\n+                name,\n+                ty: mask_ty,\n+                expected_int_bits,\n+                expected_bytes\n+            }),\n         };\n \n         let arg1 = args[1].immediate();\n@@ -129,11 +138,18 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         let (out_len, out_ty) = ret_ty.simd_size_and_type(bx.tcx());\n         require!(\n             in_len == out_len,\n-            InvalidMonomorphizationReturnLengthInputType { span, name, in_len, in_ty, ret_ty, out_len }\n+            InvalidMonomorphizationReturnLengthInputType {\n+                span,\n+                name,\n+                in_len,\n+                in_ty,\n+                ret_ty,\n+                out_len\n+            }\n         );\n         require!(\n             bx.type_kind(bx.element_type(llret_ty)) == TypeKind::Integer,\n-            InvalidMonomorphizationReturnIntegerType {span, name, ret_ty, out_ty}\n+            InvalidMonomorphizationReturnIntegerType { span, name, ret_ty, out_ty }\n         );\n \n         return Ok(compare_simd_types(\n@@ -147,26 +163,26 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n     }\n \n     if let Some(stripped) = name.as_str().strip_prefix(\"simd_shuffle\") {\n-        let n: u64 =\n-            if stripped.is_empty() {\n-                // Make sure this is actually an array, since typeck only checks the length-suffixed\n-                // version of this intrinsic.\n-                match args[2].layout.ty.kind() {\n-                    ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n-                        len.try_eval_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n-                            span_bug!(span, \"could not evaluate shuffle index array length\")\n-                        })\n-                    }\n-                    _ => return_error!(\n-                        InvalidMonomorphizationSimdShuffle { span, name, ty: args[2].layout.ty }\n-                    ),\n+        let n: u64 = if stripped.is_empty() {\n+            // Make sure this is actually an array, since typeck only checks the length-suffixed\n+            // version of this intrinsic.\n+            match args[2].layout.ty.kind() {\n+                ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n+                    len.try_eval_target_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(\n+                        || span_bug!(span, \"could not evaluate shuffle index array length\"),\n+                    )\n                 }\n+                _ => return_error!(InvalidMonomorphizationSimdShuffle {\n+                    span,\n+                    name,\n+                    ty: args[2].layout.ty\n+                }),\n             }\n-            else {\n-                stripped.parse().unwrap_or_else(|_| {\n-                    span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n-                })\n-            };\n+        } else {\n+            stripped.parse().unwrap_or_else(|_| {\n+                span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n+            })\n+        };\n \n         require_simd!(ret_ty, \"return\");\n \n@@ -182,14 +198,10 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n \n         let vector = args[2].immediate();\n \n-        return Ok(bx.shuffle_vector(\n-            args[0].immediate(),\n-            args[1].immediate(),\n-            vector,\n-        ));\n+        return Ok(bx.shuffle_vector(args[0].immediate(), args[1].immediate(), vector));\n     }\n \n-    #[cfg(feature=\"master\")]\n+    #[cfg(feature = \"master\")]\n     if name == sym::simd_insert {\n         require!(\n             in_elem == arg_tys[2],\n@@ -205,44 +217,44 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         // not be an l-value. So, call a builtin to set the element.\n         // TODO(antoyo): perhaps we could create a new vector or maybe there's a GIMPLE instruction for that?\n         // TODO(antoyo): don't use target specific builtins here.\n-        let func_name =\n-            match in_len {\n-                2 => {\n-                    if element_type == bx.i64_type {\n-                        \"__builtin_ia32_vec_set_v2di\"\n-                    }\n-                    else {\n-                        unimplemented!();\n-                    }\n-                },\n-                4 => {\n-                    if element_type == bx.i32_type {\n-                        \"__builtin_ia32_vec_set_v4si\"\n-                    }\n-                    else {\n-                        unimplemented!();\n-                    }\n-                },\n-                8 => {\n-                    if element_type == bx.i16_type {\n-                        \"__builtin_ia32_vec_set_v8hi\"\n-                    }\n-                    else {\n-                        unimplemented!();\n-                    }\n-                },\n-                _ => unimplemented!(\"Len: {}\", in_len),\n-            };\n+        let func_name = match in_len {\n+            2 => {\n+                if element_type == bx.i64_type {\n+                    \"__builtin_ia32_vec_set_v2di\"\n+                } else {\n+                    unimplemented!();\n+                }\n+            }\n+            4 => {\n+                if element_type == bx.i32_type {\n+                    \"__builtin_ia32_vec_set_v4si\"\n+                } else {\n+                    unimplemented!();\n+                }\n+            }\n+            8 => {\n+                if element_type == bx.i16_type {\n+                    \"__builtin_ia32_vec_set_v8hi\"\n+                } else {\n+                    unimplemented!();\n+                }\n+            }\n+            _ => unimplemented!(\"Len: {}\", in_len),\n+        };\n         let builtin = bx.context.get_target_builtin_function(func_name);\n         let param1_type = builtin.get_param(0).to_rvalue().get_type();\n         // TODO(antoyo): perhaps use __builtin_convertvector for vector casting.\n         let vector = bx.cx.bitcast_if_needed(vector, param1_type);\n-        let result = bx.context.new_call(None, builtin, &[vector, value, bx.context.new_cast(None, index, bx.int_type)]);\n+        let result = bx.context.new_call(\n+            None,\n+            builtin,\n+            &[vector, value, bx.context.new_cast(None, index, bx.int_type)],\n+        );\n         // TODO(antoyo): perhaps use __builtin_convertvector for vector casting.\n         return Ok(bx.context.new_bitcast(None, result, vector.get_type()));\n     }\n \n-    #[cfg(feature=\"master\")]\n+    #[cfg(feature = \"master\")]\n     if name == sym::simd_extract {\n         require!(\n             ret_ty == in_elem,\n@@ -273,7 +285,14 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         let (out_len, out_elem) = ret_ty.simd_size_and_type(bx.tcx());\n         require!(\n             in_len == out_len,\n-            InvalidMonomorphizationReturnLengthInputType { span, name, in_len, in_ty, ret_ty, out_len }\n+            InvalidMonomorphizationReturnLengthInputType {\n+                span,\n+                name,\n+                in_len,\n+                in_ty,\n+                ret_ty,\n+                out_len\n+            }\n         );\n         // casting cares about nominal type, not just structural type\n         if in_elem == out_elem {\n@@ -322,19 +341,27 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n \n             let cast_vec_element = |index| {\n                 let index = bx.context.new_rvalue_from_int(bx.int_type, index);\n-                bx.context.new_cast(None, bx.context.new_array_access(None, array, index).to_rvalue(), out_type)\n+                bx.context.new_cast(\n+                    None,\n+                    bx.context.new_array_access(None, array, index).to_rvalue(),\n+                    out_type,\n+                )\n             };\n \n-            bx.context.new_rvalue_from_vector(None, vector_type, &[\n-                cast_vec_element(0),\n-                cast_vec_element(1),\n-                cast_vec_element(2),\n-                cast_vec_element(3),\n-                cast_vec_element(4),\n-                cast_vec_element(5),\n-                cast_vec_element(6),\n-                cast_vec_element(7),\n-            ])\n+            bx.context.new_rvalue_from_vector(\n+                None,\n+                vector_type,\n+                &[\n+                    cast_vec_element(0),\n+                    cast_vec_element(1),\n+                    cast_vec_element(2),\n+                    cast_vec_element(3),\n+                    cast_vec_element(4),\n+                    cast_vec_element(5),\n+                    cast_vec_element(6),\n+                    cast_vec_element(7),\n+                ],\n+            )\n         };\n \n         match (in_style, out_style) {\n@@ -385,9 +412,14 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n             }\n             _ => { /* Unsupported. Fallthrough. */ }\n         }\n-        return_error!(\n-            InvalidMonomorphizationUnsupportedCast { span, name, in_ty, in_elem, ret_ty, out_elem }\n-        );\n+        return_error!(InvalidMonomorphizationUnsupportedCast {\n+            span,\n+            name,\n+            in_ty,\n+            in_elem,\n+            ret_ty,\n+            out_elem\n+        });\n     }\n \n     macro_rules! arith_binary {\n@@ -414,54 +446,60 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         args: &[OperandRef<'tcx, RValue<'gcc>>],\n     ) -> Result<RValue<'gcc>, ()> {\n         macro_rules! return_error {\n-            ($err:expr) => {\n-                {\n-                    bx.sess().emit_err($err);\n-                    return Err(());\n-                }\n-            }\n+            ($err:expr) => {{\n+                bx.sess().emit_err($err);\n+                return Err(());\n+            }};\n         }\n-        let (elem_ty_str, elem_ty) =\n-            if let ty::Float(f) = in_elem.kind() {\n-                let elem_ty = bx.cx.type_float_from_ty(*f);\n-                match f.bit_width() {\n-                    32 => (\"f32\", elem_ty),\n-                    64 => (\"f64\", elem_ty),\n-                    _ => {\n-                        return_error!(InvalidMonomorphizationInvalidFloatVector { span, name, elem_ty: f.name_str(), vec_ty: in_ty });\n-                    }\n+        let (elem_ty_str, elem_ty) = if let ty::Float(f) = in_elem.kind() {\n+            let elem_ty = bx.cx.type_float_from_ty(*f);\n+            match f.bit_width() {\n+                32 => (\"f32\", elem_ty),\n+                64 => (\"f64\", elem_ty),\n+                _ => {\n+                    return_error!(InvalidMonomorphizationInvalidFloatVector {\n+                        span,\n+                        name,\n+                        elem_ty: f.name_str(),\n+                        vec_ty: in_ty\n+                    });\n                 }\n             }\n-            else {\n-                return_error!(InvalidMonomorphizationNotFloat { span, name, ty: in_ty });\n-            };\n+        } else {\n+            return_error!(InvalidMonomorphizationNotFloat { span, name, ty: in_ty });\n+        };\n \n         let vec_ty = bx.cx.type_vector(elem_ty, in_len);\n \n-        let (intr_name, fn_ty) =\n-            match name {\n-                sym::simd_ceil => (\"ceil\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fabs => (\"fabs\", bx.type_func(&[vec_ty], vec_ty)), // TODO(antoyo): pand with 170141183420855150465331762880109871103\n-                sym::simd_fcos => (\"cos\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fexp2 => (\"exp2\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fexp => (\"exp\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_flog10 => (\"log10\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_flog2 => (\"log2\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_flog => (\"log\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fma => (\"fma\", bx.type_func(&[vec_ty, vec_ty, vec_ty], vec_ty)),\n-                sym::simd_fpowi => (\"powi\", bx.type_func(&[vec_ty, bx.type_i32()], vec_ty)),\n-                sym::simd_fpow => (\"pow\", bx.type_func(&[vec_ty, vec_ty], vec_ty)),\n-                sym::simd_fsin => (\"sin\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_fsqrt => (\"sqrt\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_round => (\"round\", bx.type_func(&[vec_ty], vec_ty)),\n-                sym::simd_trunc => (\"trunc\", bx.type_func(&[vec_ty], vec_ty)),\n-                _ => return_error!(InvalidMonomorphizationUnrecognized { span, name })\n-            };\n+        let (intr_name, fn_ty) = match name {\n+            sym::simd_ceil => (\"ceil\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fabs => (\"fabs\", bx.type_func(&[vec_ty], vec_ty)), // TODO(antoyo): pand with 170141183420855150465331762880109871103\n+            sym::simd_fcos => (\"cos\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fexp2 => (\"exp2\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fexp => (\"exp\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_flog10 => (\"log10\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_flog2 => (\"log2\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_flog => (\"log\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fma => (\"fma\", bx.type_func(&[vec_ty, vec_ty, vec_ty], vec_ty)),\n+            sym::simd_fpowi => (\"powi\", bx.type_func(&[vec_ty, bx.type_i32()], vec_ty)),\n+            sym::simd_fpow => (\"pow\", bx.type_func(&[vec_ty, vec_ty], vec_ty)),\n+            sym::simd_fsin => (\"sin\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fsqrt => (\"sqrt\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_round => (\"round\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_trunc => (\"trunc\", bx.type_func(&[vec_ty], vec_ty)),\n+            _ => return_error!(InvalidMonomorphizationUnrecognized { span, name }),\n+        };\n         let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", intr_name, in_len, elem_ty_str);\n         let function = intrinsic::llvm::intrinsic(llvm_name, &bx.cx);\n         let function: RValue<'gcc> = unsafe { std::mem::transmute(function) };\n-        let c = bx.call(fn_ty, None, function, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None);\n+        let c = bx.call(\n+            fn_ty,\n+            None,\n+            function,\n+            &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n+            None,\n+        );\n         Ok(c)\n     }\n \n@@ -518,7 +556,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         simd_neg: Int => neg, Float => fneg;\n     }\n \n-    #[cfg(feature=\"master\")]\n+    #[cfg(feature = \"master\")]\n     if name == sym::simd_saturating_add || name == sym::simd_saturating_sub {\n         let lhs = args[0].immediate();\n         let rhs = args[1].immediate();\n@@ -536,18 +574,23 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                 });\n             }\n         };\n-        let builtin_name =\n-            match (signed, is_add, in_len, elem_width) {\n-                (true, true, 32, 8) => \"__builtin_ia32_paddsb256\", // TODO(antoyo): cast arguments to unsigned.\n-                (false, true, 32, 8) => \"__builtin_ia32_paddusb256\",\n-                (true, true, 16, 16) => \"__builtin_ia32_paddsw256\",\n-                (false, true, 16, 16) => \"__builtin_ia32_paddusw256\",\n-                (true, false, 16, 16) => \"__builtin_ia32_psubsw256\",\n-                (false, false, 16, 16) => \"__builtin_ia32_psubusw256\",\n-                (true, false, 32, 8) => \"__builtin_ia32_psubsb256\",\n-                (false, false, 32, 8) => \"__builtin_ia32_psubusb256\",\n-                _ => unimplemented!(\"signed: {}, is_add: {}, in_len: {}, elem_width: {}\", signed, is_add, in_len, elem_width),\n-            };\n+        let builtin_name = match (signed, is_add, in_len, elem_width) {\n+            (true, true, 32, 8) => \"__builtin_ia32_paddsb256\", // TODO(antoyo): cast arguments to unsigned.\n+            (false, true, 32, 8) => \"__builtin_ia32_paddusb256\",\n+            (true, true, 16, 16) => \"__builtin_ia32_paddsw256\",\n+            (false, true, 16, 16) => \"__builtin_ia32_paddusw256\",\n+            (true, false, 16, 16) => \"__builtin_ia32_psubsw256\",\n+            (false, false, 16, 16) => \"__builtin_ia32_psubusw256\",\n+            (true, false, 32, 8) => \"__builtin_ia32_psubsb256\",\n+            (false, false, 32, 8) => \"__builtin_ia32_psubusb256\",\n+            _ => unimplemented!(\n+                \"signed: {}, is_add: {}, in_len: {}, elem_width: {}\",\n+                signed,\n+                is_add,\n+                in_len,\n+                elem_width\n+            ),\n+        };\n         let vec_ty = bx.cx.type_vector(elem_ty, in_len as u64);\n \n         let func = bx.context.get_target_builtin_function(builtin_name);\n@@ -575,8 +618,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                             // if overflow occurs, the result is the\n                             // mathematical result modulo 2^n:\n                             Ok(bx.$op(args[1].immediate(), r))\n-                        }\n-                        else {\n+                        } else {\n                             Ok(bx.vector_reduce_op(args[0].immediate(), $vec_op))\n                         }\n                     }\n@@ -585,12 +627,17 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                             // ordered arithmetic reductions take an accumulator\n                             let acc = args[1].immediate();\n                             Ok(bx.$float_reduce(acc, args[0].immediate()))\n-                        }\n-                        else {\n+                        } else {\n                             Ok(bx.vector_reduce_op(args[0].immediate(), $vec_op))\n                         }\n                     }\n-                    _ => return_error!(InvalidMonomorphizationUnsupportedElement { span, name, in_ty, elem_ty: in_elem, ret_ty }),\n+                    _ => return_error!(InvalidMonomorphizationUnsupportedElement {\n+                        span,\n+                        name,\n+                        in_ty,\n+                        elem_ty: in_elem,\n+                        ret_ty\n+                    }),\n                 };\n             }\n         };\n@@ -603,13 +650,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         add,\n         0.0 // TODO: Use this argument.\n     );\n-    arith_red!(\n-        simd_reduce_mul_unordered: BinaryOp::Mult,\n-        vector_reduce_fmul_fast,\n-        false,\n-        mul,\n-        1.0\n-    );\n+    arith_red!(simd_reduce_mul_unordered: BinaryOp::Mult, vector_reduce_fmul_fast, false, mul, 1.0);\n \n     macro_rules! minmax_red {\n         ($name:ident: $reduction:ident) => {\n@@ -619,8 +660,16 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                     InvalidMonomorphizationReturnType { span, name, in_elem, in_ty, ret_ty }\n                 );\n                 return match in_elem.kind() {\n-                    ty::Int(_) | ty::Uint(_) | ty::Float(_) => Ok(bx.$reduction(args[0].immediate())),\n-                    _ => return_error!(InvalidMonomorphizationUnsupportedElement { span, name, in_ty, elem_ty: in_elem, ret_ty }),\n+                    ty::Int(_) | ty::Uint(_) | ty::Float(_) => {\n+                        Ok(bx.$reduction(args[0].immediate()))\n+                    }\n+                    _ => return_error!(InvalidMonomorphizationUnsupportedElement {\n+                        span,\n+                        name,\n+                        in_ty,\n+                        elem_ty: in_elem,\n+                        ret_ty\n+                    }),\n                 };\n             }\n         };\n@@ -641,7 +690,13 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                 } else {\n                     match in_elem.kind() {\n                         ty::Int(_) | ty::Uint(_) => {}\n-                        _ => return_error!(InvalidMonomorphizationUnsupportedElement { span, name, in_ty, elem_ty: in_elem, ret_ty }),\n+                        _ => return_error!(InvalidMonomorphizationUnsupportedElement {\n+                            span,\n+                            name,\n+                            in_ty,\n+                            elem_ty: in_elem,\n+                            ret_ty\n+                        }),\n                     }\n \n                     // boolean reductions operate on vectors of i1s:\n@@ -654,9 +709,13 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n                         let r = bx.vector_reduce_op(input, $op);\n                         Ok(if !$boolean { r } else { bx.zext(r, bx.type_bool()) })\n                     }\n-                    _ => return_error!(\n-                        InvalidMonomorphizationUnsupportedElement { span, name, in_ty, elem_ty: in_elem, ret_ty }\n-                    ),\n+                    _ => return_error!(InvalidMonomorphizationUnsupportedElement {\n+                        span,\n+                        name,\n+                        in_ty,\n+                        elem_ty: in_elem,\n+                        ret_ty\n+                    }),\n                 };\n             }\n         };"}, {"sha": "7a4ec494c8e7fab862d7a8ab77a1916c3b41f7a6", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -118,7 +118,8 @@ pub fn frame_pointer_type_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attr\n \n /// Tell LLVM what instrument function to insert.\n #[inline]\n-fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {\n+fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> SmallVec<[&'ll Attribute; 4]> {\n+    let mut attrs = SmallVec::new();\n     if cx.sess().opts.unstable_opts.instrument_mcount {\n         // Similar to `clang -pg` behavior. Handled by the\n         // `post-inline-ee-instrument` LLVM pass.\n@@ -127,14 +128,41 @@ fn instrument_function_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribu\n         // See test/CodeGen/mcount.c in clang.\n         let mcount_name = cx.sess().target.mcount.as_ref();\n \n-        Some(llvm::CreateAttrStringValue(\n+        attrs.push(llvm::CreateAttrStringValue(\n             cx.llcx,\n             \"instrument-function-entry-inlined\",\n             &mcount_name,\n-        ))\n-    } else {\n-        None\n+        ));\n+    }\n+    if let Some(options) = &cx.sess().opts.unstable_opts.instrument_xray {\n+        // XRay instrumentation is similar to __cyg_profile_func_{enter,exit}.\n+        // Function prologue and epilogue are instrumented with NOP sleds,\n+        // a runtime library later replaces them with detours into tracing code.\n+        if options.always {\n+            attrs.push(llvm::CreateAttrStringValue(cx.llcx, \"function-instrument\", \"xray-always\"));\n+        }\n+        if options.never {\n+            attrs.push(llvm::CreateAttrStringValue(cx.llcx, \"function-instrument\", \"xray-never\"));\n+        }\n+        if options.ignore_loops {\n+            attrs.push(llvm::CreateAttrString(cx.llcx, \"xray-ignore-loops\"));\n+        }\n+        // LLVM will not choose the default for us, but rather requires specific\n+        // threshold in absence of \"xray-always\". Use the same default as Clang.\n+        let threshold = options.instruction_threshold.unwrap_or(200);\n+        attrs.push(llvm::CreateAttrStringValue(\n+            cx.llcx,\n+            \"xray-instruction-threshold\",\n+            &threshold.to_string(),\n+        ));\n+        if options.skip_entry {\n+            attrs.push(llvm::CreateAttrString(cx.llcx, \"xray-skip-entry\"));\n+        }\n+        if options.skip_exit {\n+            attrs.push(llvm::CreateAttrString(cx.llcx, \"xray-skip-exit\"));\n+        }\n     }\n+    attrs\n }\n \n fn nojumptables_attr<'ll>(cx: &CodegenCx<'ll, '_>) -> Option<&'ll Attribute> {"}, {"sha": "dd3268d7780c6acdc18a7a537e17d5b340dbb9c3", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -183,6 +183,12 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n             // able to control the *exact* spelling of each of the symbols that are being imported:\n             // hence we don't want `dlltool` adding leading underscores automatically.\n             let dlltool = find_binutils_dlltool(sess);\n+            let temp_prefix = {\n+                let mut path = PathBuf::from(&output_path);\n+                path.pop();\n+                path.push(lib_name);\n+                path\n+            };\n             let result = std::process::Command::new(dlltool)\n                 .args([\n                     \"-d\",\n@@ -192,6 +198,8 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n                     \"-l\",\n                     output_path.to_str().unwrap(),\n                     \"--no-leading-underscore\",\n+                    \"--temp-prefix\",\n+                    temp_prefix.to_str().unwrap(),\n                 ])\n                 .output();\n "}, {"sha": "92629aa18d4586ad574494350844c170c799eaa5", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -3,7 +3,6 @@ use crate::common::{self, CodegenCx};\n use crate::debuginfo;\n use crate::errors::{InvalidMinimumAlignment, SymbolAlreadyDefined};\n use crate::llvm::{self, True};\n-use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -56,13 +55,7 @@ pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: ConstAllocation<\n         // to avoid the cost of generating large complex const expressions.\n         // For example, `[(u32, u8); 1024 * 1024]` contains uninit padding in each element,\n         // and would result in `{ [5 x i8] zeroinitializer, [3 x i8] undef, ...repeat 1M times... }`.\n-        let max = if llvm_util::get_version() < (14, 0, 0) {\n-            // Generating partially-uninit consts inhibits optimizations in LLVM < 14.\n-            // See https://github.com/rust-lang/rust/issues/84565.\n-            1\n-        } else {\n-            cx.sess().opts.unstable_opts.uninit_const_chunk_threshold\n-        };\n+        let max = cx.sess().opts.unstable_opts.uninit_const_chunk_threshold;\n         let allow_uninit_chunks = chunks.clone().take(max.saturating_add(1)).count() <= max;\n \n         if allow_uninit_chunks {"}, {"sha": "120dc59dfb3b6a7bbc06e6ea42e2cea233738526", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -143,17 +143,6 @@ pub unsafe fn create_module<'ll>(\n \n     let mut target_data_layout = sess.target.data_layout.to_string();\n     let llvm_version = llvm_util::get_version();\n-    if llvm_version < (14, 0, 0) {\n-        if sess.target.llvm_target == \"i686-pc-windows-msvc\"\n-            || sess.target.llvm_target == \"i586-pc-windows-msvc\"\n-        {\n-            target_data_layout =\n-                \"e-m:x-p:32:32-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:32-n8:16:32-a:0:32-S32\"\n-                    .to_string();\n-        } else if sess.target.arch == \"wasm32\" {\n-            target_data_layout = target_data_layout.replace(\"-p10:8:8-p20:8:8\", \"\");\n-        }\n-    }\n     if llvm_version < (16, 0, 0) {\n         if sess.target.arch == \"s390x\" {\n             target_data_layout = target_data_layout.replace(\"-v128:64\", \"\");"}, {"sha": "c1b3f34e5a6d43f4bba9107c739e7e55e46d34ed", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -132,7 +132,7 @@ fn build_fixed_size_array_di_node<'ll, 'tcx>(\n \n     let (size, align) = cx.size_and_align_of(array_type);\n \n-    let upper_bound = len.eval_usize(cx.tcx, ty::ParamEnv::reveal_all()) as c_longlong;\n+    let upper_bound = len.eval_target_usize(cx.tcx, ty::ParamEnv::reveal_all()) as c_longlong;\n \n     let subrange =\n         unsafe { Some(llvm::LLVMRustDIBuilderGetOrCreateSubrange(DIB(cx), 0, upper_bound)) };"}, {"sha": "b0295481ca5a37836f2d06edff6cf8bcd9afe3fb", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -877,7 +877,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => args[0].immediate(),\n             ty::Array(elem, len)\n                 if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n-                    && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n+                    && len.try_eval_target_usize(bx.tcx, ty::ParamEnv::reveal_all())\n                         == Some(expected_bytes) =>\n             {\n                 let place = PlaceRef::alloca(bx, args[0].layout);\n@@ -957,9 +957,9 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             // version of this intrinsic.\n             match args[2].layout.ty.kind() {\n                 ty::Array(ty, len) if matches!(ty.kind(), ty::Uint(ty::UintTy::U32)) => {\n-                    len.try_eval_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(|| {\n-                        span_bug!(span, \"could not evaluate shuffle index array length\")\n-                    })\n+                    len.try_eval_target_usize(bx.cx.tcx, ty::ParamEnv::reveal_all()).unwrap_or_else(\n+                        || span_bug!(span, \"could not evaluate shuffle index array length\"),\n+                    )\n                 }\n                 _ => return_error!(InvalidMonomorphization::SimdShuffle {\n                     span,\n@@ -1123,7 +1123,7 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             }\n             ty::Array(elem, len)\n                 if matches!(elem.kind(), ty::Uint(ty::UintTy::U8))\n-                    && len.try_eval_usize(bx.tcx, ty::ParamEnv::reveal_all())\n+                    && len.try_eval_target_usize(bx.tcx, ty::ParamEnv::reveal_all())\n                         == Some(expected_bytes) =>\n             {\n                 // Zero-extend iN to the array length:"}, {"sha": "20b1dd9415386bb2258877d69015b54813115f8d", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -152,13 +152,7 @@ pub fn time_trace_profiler_finish(file_name: &Path) {\n pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]> {\n     let arch = if sess.target.arch == \"x86_64\" { \"x86\" } else { &*sess.target.arch };\n     match (arch, s) {\n-        (\"x86\", \"sse4.2\") => {\n-            if get_version() >= (14, 0, 0) {\n-                smallvec![\"sse4.2\", \"crc32\"]\n-            } else {\n-                smallvec![\"sse4.2\"]\n-            }\n-        }\n+        (\"x86\", \"sse4.2\") => smallvec![\"sse4.2\", \"crc32\"],\n         (\"x86\", \"pclmulqdq\") => smallvec![\"pclmul\"],\n         (\"x86\", \"rdrand\") => smallvec![\"rdrnd\"],\n         (\"x86\", \"bmi1\") => smallvec![\"bmi\"],\n@@ -217,7 +211,7 @@ pub fn check_tied_features(\n /// Must express features in the way Rust understands them\n pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n-    let mut features: Vec<Symbol> = supported_target_features(sess)\n+    supported_target_features(sess)\n         .iter()\n         .filter_map(|&(feature, gate)| {\n             if sess.is_nightly_build() || allow_unstable || gate.is_none() {\n@@ -237,16 +231,7 @@ pub fn target_features(sess: &Session, allow_unstable: bool) -> Vec<Symbol> {\n             true\n         })\n         .map(|feature| Symbol::intern(feature))\n-        .collect();\n-\n-    // LLVM 14 changed the ABI for i128 arguments to __float/__fix builtins on Win64\n-    // (see https://reviews.llvm.org/D110413). This unstable target feature is intended for use\n-    // by compiler-builtins, to export the builtins with the expected, LLVM-version-dependent ABI.\n-    // The target feature can be dropped once we no longer support older LLVM versions.\n-    if sess.is_nightly_build() && get_version() >= (14, 0, 0) {\n-        features.push(Symbol::intern(\"llvm14-builtins-abi\"));\n-    }\n-    features\n+        .collect()\n }\n \n pub fn print_version() {\n@@ -494,11 +479,6 @@ pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<Str\n         .flatten();\n     features.extend(feats);\n \n-    // FIXME: Move v8a to target definition list when earliest supported LLVM is 14.\n-    if get_version() >= (14, 0, 0) && sess.target.arch == \"aarch64\" {\n-        features.push(\"+v8a\".into());\n-    }\n-\n     if diagnostics && let Some(f) = check_tied_features(sess, &featsmap) {\n         sess.emit_err(TargetFeatureDisableOrEnable {\n             features: f,"}, {"sha": "0cb4bc806a1370db7b1b9fe135ed15f8ea0b05fc", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,6 +1,5 @@\n use crate::common::*;\n use crate::context::TypeLowering;\n-use crate::llvm_util::get_version;\n use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n use rustc_middle::bug;\n@@ -43,10 +42,8 @@ fn uncached_llvm_type<'a, 'tcx>(\n         // in problematically distinct types due to HRTB and subtyping (see #47638).\n         // ty::Dynamic(..) |\n         ty::Adt(..) | ty::Closure(..) | ty::Foreign(..) | ty::Generator(..) | ty::Str\n-            // For performance reasons we use names only when emitting LLVM IR. Unless we are on\n-            // LLVM < 14, where the use of unnamed types resulted in various issues, e.g., #76213,\n-            // #79564, and #79246.\n-            if get_version() < (14, 0, 0) || !cx.sess().fewer_names() =>\n+            // For performance reasons we use names only when emitting LLVM IR.\n+            if !cx.sess().fewer_names() =>\n         {\n             let mut name = with_no_visible_paths!(with_no_trimmed_paths!(layout.ty.to_string()));\n             if let (&ty::Adt(def, _), &Variants::Single { index }) ="}, {"sha": "66ec8f5f57d212935164ebdba14839c539058cfb", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -203,7 +203,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             }\n         }\n \n-        self.src_archives.push((archive_path.to_owned(), archive_map));\n+        self.src_archives.push((archive_path, archive_map));\n         Ok(())\n     }\n "}, {"sha": "6e136db38954abad97ed8ab30d469d29474c1f7a", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -148,7 +148,7 @@ pub fn unsized_info<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         cx.tcx().struct_lockstep_tails_erasing_lifetimes(source, target, bx.param_env());\n     match (source.kind(), target.kind()) {\n         (&ty::Array(_, len), &ty::Slice(_)) => {\n-            cx.const_usize(len.eval_usize(cx.tcx(), ty::ParamEnv::reveal_all()))\n+            cx.const_usize(len.eval_target_usize(cx.tcx(), ty::ParamEnv::reveal_all()))\n         }\n         (\n             &ty::Dynamic(ref data_a, _, src_dyn_kind),"}, {"sha": "f2469fde3b65703897f167449a49b459078bf892", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -181,16 +181,24 @@ fn push_debuginfo_type_name<'tcx>(\n                 push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n                 match len.kind() {\n                     ty::ConstKind::Param(param) => write!(output, \",{}>\", param.name).unwrap(),\n-                    _ => write!(output, \",{}>\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n-                        .unwrap(),\n+                    _ => write!(\n+                        output,\n+                        \",{}>\",\n+                        len.eval_target_usize(tcx, ty::ParamEnv::reveal_all())\n+                    )\n+                    .unwrap(),\n                 }\n             } else {\n                 output.push('[');\n                 push_debuginfo_type_name(tcx, inner_type, true, output, visited);\n                 match len.kind() {\n                     ty::ConstKind::Param(param) => write!(output, \"; {}]\", param.name).unwrap(),\n-                    _ => write!(output, \"; {}]\", len.eval_usize(tcx, ty::ParamEnv::reveal_all()))\n-                        .unwrap(),\n+                    _ => write!(\n+                        output,\n+                        \"; {}]\",\n+                        len.eval_target_usize(tcx, ty::ParamEnv::reveal_all())\n+                    )\n+                    .unwrap(),\n                 }\n             }\n         }"}, {"sha": "708f3bc0c78f942e39d549e929f719b4d0298646", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -385,10 +385,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     calculate_debuginfo_offset(bx, local, &var, base);\n \n                 // Create a variable which will be a pointer to the actual value\n-                let ptr_ty = bx.tcx().mk_ty(ty::RawPtr(ty::TypeAndMut {\n-                    mutbl: mir::Mutability::Mut,\n-                    ty: place.layout.ty,\n-                }));\n+                let ptr_ty = bx\n+                    .tcx()\n+                    .mk_ptr(ty::TypeAndMut { mutbl: mir::Mutability::Mut, ty: place.layout.ty });\n                 let ptr_layout = bx.layout_of(ptr_ty);\n                 let alloca = PlaceRef::alloca(bx, ptr_layout);\n                 bx.set_var_name(alloca.llval, &(var.name.to_string() + \".dbg.spill\"));"}, {"sha": "de1734332d448f01cadfcbf99bc230182fa0189f", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -3,7 +3,7 @@ use crate::traits::*;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, TyAndLayout};\n-use rustc_middle::ty::{self, Instance, Ty, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n use rustc_target::abi::call::{FnAbi, PassMode};\n \n use std::iter;"}, {"sha": "7c8d23a3329c6775beb8a0631d51cf1500f620d5", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -100,8 +100,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                 }\n \n-                let count =\n-                    self.monomorphize(count).eval_usize(bx.cx().tcx(), ty::ParamEnv::reveal_all());\n+                let count = self\n+                    .monomorphize(count)\n+                    .eval_target_usize(bx.cx().tcx(), ty::ParamEnv::reveal_all());\n \n                 bx.write_operand_repeatedly(cg_elem, count, dest);\n             }\n@@ -492,7 +493,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         if let Some(index) = place.as_local() {\n             if let LocalRef::Operand(Some(op)) = self.locals[index] {\n                 if let ty::Array(_, n) = op.layout.ty.kind() {\n-                    let n = n.eval_usize(bx.cx().tcx(), ty::ParamEnv::reveal_all());\n+                    let n = n.eval_target_usize(bx.cx().tcx(), ty::ParamEnv::reveal_all());\n                     return bx.cx().const_usize(n);\n                 }\n             }"}, {"sha": "b4a49e1df610c8bedd90e7712dfd8c5b674faebe", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -54,7 +54,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     trace!(\n         \"eval_body_using_ecx: pushing stack frame for global: {}{}\",\n-        with_no_trimmed_paths!(ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id()))),\n+        with_no_trimmed_paths!(ecx.tcx.def_path_str(cid.instance.def_id())),\n         cid.promoted.map_or_else(String::new, |p| format!(\"::promoted[{:?}]\", p))\n     );\n "}, {"sha": "3bd586c81b0bdc6a1ef71d2786ce3c7a79569c16", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -107,7 +107,7 @@ pub(crate) fn try_destructure_mir_constant<'tcx>(\n \n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty().kind() {\n-        ty::Array(_, len) => (len.eval_usize(tcx, param_env) as usize, None, op),\n+        ty::Array(_, len) => (len.eval_target_usize(tcx, param_env) as usize, None, op),\n         ty::Adt(def, _) if def.variants().is_empty() => {\n             throw_ub!(Unreachable)\n         }"}, {"sha": "fc546e4de0ef61e57d8431383f0bd962136a78c0", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -193,7 +193,7 @@ fn get_info_on_unsized_field<'tcx>(\n \n     // Have to adjust type for ty::Str\n     let unsized_inner_ty = match unsized_inner_ty.kind() {\n-        ty::Str => tcx.mk_ty(ty::Uint(ty::UintTy::U8)),\n+        ty::Str => tcx.types.u8,\n         _ => unsized_inner_ty,\n     };\n \n@@ -216,7 +216,7 @@ fn create_pointee_place<'tcx>(\n \n         let (unsized_inner_ty, num_elems) = get_info_on_unsized_field(ty, valtree, tcx);\n         let unsized_inner_ty = match unsized_inner_ty.kind() {\n-            ty::Str => tcx.mk_ty(ty::Uint(ty::UintTy::U8)),\n+            ty::Str => tcx.types.u8,\n             _ => unsized_inner_ty,\n         };\n         let unsized_inner_ty_size ="}, {"sha": "9d00e338d453c7e29584fe15cb51823e52e47115", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -328,8 +328,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             (&ty::Array(_, length), &ty::Slice(_)) => {\n                 let ptr = self.read_scalar(src)?;\n                 // u64 cast is from usize to u64, which is always good\n-                let val =\n-                    Immediate::new_slice(ptr, length.eval_usize(*self.tcx, self.param_env), self);\n+                let val = Immediate::new_slice(\n+                    ptr,\n+                    length.eval_target_usize(*self.tcx, self.param_env),\n+                    self,\n+                );\n                 self.write_immediate(val, dest)\n             }\n             (ty::Dynamic(data_a, ..), ty::Dynamic(data_b, ..)) => {"}, {"sha": "5b7b0dc66d1871fd5cfddc090893e92f98e5c14f", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -517,7 +517,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         // Allow these casts, but make the pointer not dereferenceable.\n         // (I.e., they behave like transmutation.)\n         // This is correct because no pointers can ever be exposed in compile-time evaluation.\n-        Ok(Pointer::from_addr(addr))\n+        Ok(Pointer::from_addr_invalid(addr))\n     }\n \n     #[inline(always)]"}, {"sha": "f83e5ba59dc3e87bca3cc4ba31bbcee71067efb8", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -178,7 +178,7 @@ impl<'tcx, Prov: Provenance> MPlaceTy<'tcx, Prov> {\n     pub fn fake_alloc_zst(layout: TyAndLayout<'tcx>) -> Self {\n         assert!(layout.is_zst());\n         let align = layout.align.abi;\n-        let ptr = Pointer::from_addr(align.bytes()); // no provenance, absolute address\n+        let ptr = Pointer::from_addr_invalid(align.bytes()); // no provenance, absolute address\n         MPlaceTy { mplace: MemPlace { ptr, meta: MemPlaceMeta::None }, layout, align }\n     }\n "}, {"sha": "581cb6421f734a804d294d17f1e8ad7ca33ee431", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,5 +1,5 @@\n use rustc_middle::mir::interpret::InterpResult;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use std::ops::ControlFlow;\n \n /// Checks whether a type contains generic parameters which require substitution.\n@@ -21,7 +21,7 @@ where\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for UsedParamsNeedSubstVisitor<'tcx> {\n         type BreakTy = FoundParam;\n \n         fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "faf741de60a16312c8a8295c15e4f5689817286f", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -473,7 +473,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                     // that this is merely a ZST and it is already eligible for promotion.\n                     // This may require an RFC?\n                     /*\n-                    ty::Array(_, len) if len.try_eval_usize(cx.tcx, cx.param_env) == Some(0)\n+                    ty::Array(_, len) if len.try_eval_target_usize(cx.tcx, cx.param_env) == Some(0)\n                         => true,\n                     */\n                     _ => false,"}, {"sha": "bb4b7ad50b8f23e7099ef7c0c96dcb2c953332c9", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -217,10 +217,10 @@ impl Qualif for CustomEq {\n \n     fn in_adt_inherently<'tcx>(\n         cx: &ConstCx<'_, 'tcx>,\n-        adt: AdtDef<'tcx>,\n+        def: AdtDef<'tcx>,\n         substs: SubstsRef<'tcx>,\n     ) -> bool {\n-        let ty = cx.tcx.mk_ty(ty::Adt(adt, substs));\n+        let ty = cx.tcx.mk_adt(def, substs);\n         !ty.is_structural_eq_shallow(cx.tcx)\n     }\n }"}, {"sha": "7009d3b38ae4362372338245fbb0d1ac3c8a3e9b", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -364,31 +364,33 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     ProjectionElem::Index(local) => {\n                         let mut promotable = false;\n                         // Only accept if we can predict the index and are indexing an array.\n-                        let val =\n-                            if let TempState::Defined { location: loc, .. } = self.temps[local] {\n-                                let block = &self.body[loc.block];\n-                                if loc.statement_index < block.statements.len() {\n-                                    let statement = &block.statements[loc.statement_index];\n-                                    match &statement.kind {\n-                                        StatementKind::Assign(box (\n-                                            _,\n-                                            Rvalue::Use(Operand::Constant(c)),\n-                                        )) => c.literal.try_eval_usize(self.tcx, self.param_env),\n-                                        _ => None,\n-                                    }\n-                                } else {\n-                                    None\n+                        let val = if let TempState::Defined { location: loc, .. } =\n+                            self.temps[local]\n+                        {\n+                            let block = &self.body[loc.block];\n+                            if loc.statement_index < block.statements.len() {\n+                                let statement = &block.statements[loc.statement_index];\n+                                match &statement.kind {\n+                                    StatementKind::Assign(box (\n+                                        _,\n+                                        Rvalue::Use(Operand::Constant(c)),\n+                                    )) => c.literal.try_eval_target_usize(self.tcx, self.param_env),\n+                                    _ => None,\n                                 }\n                             } else {\n                                 None\n-                            };\n+                            }\n+                        } else {\n+                            None\n+                        };\n                         if let Some(idx) = val {\n                             // Determine the type of the thing we are indexing.\n                             let ty = place_base.ty(self.body, self.tcx).ty;\n                             match ty.kind() {\n                                 ty::Array(_, len) => {\n                                     // It's an array; determine its length.\n-                                    if let Some(len) = len.try_eval_usize(self.tcx, self.param_env)\n+                                    if let Some(len) =\n+                                        len.try_eval_target_usize(self.tcx, self.param_env)\n                                     {\n                                         // If the index is in-bounds, go ahead.\n                                         if idx < len {\n@@ -470,7 +472,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 // mutably without consequences. However, only &mut []\n                 // is allowed right now.\n                 if let ty::Array(_, len) = ty.kind() {\n-                    match len.try_eval_usize(self.tcx, self.param_env) {\n+                    match len.try_eval_target_usize(self.tcx, self.param_env) {\n                         Some(0) => {}\n                         _ => return Err(Unpromotable),\n                     }"}, {"sha": "56c60d59d2858676f336c247079f263ef33208f5", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::{\n     RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n     TerminatorKind, UnOp, START_BLOCK,\n };\n-use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n use rustc_mir_dataflow::storage::always_storage_live_locals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n@@ -231,6 +231,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             return true;\n         }\n \n+        // We sometimes have to use `defining_opaque_types` for subtyping\n+        // to succeed here and figuring out how exactly that should work\n+        // is annoying. It is harmless enough to just not validate anything\n+        // in that case. We still check this after analysis as all opque\n+        // types have been revealed at this point.\n+        if (src, dest).has_opaque_types() {\n+            return true;\n+        }\n+\n         crate::util::is_subtype(self.tcx, self.param_env, src, dest)\n     }\n }"}, {"sha": "28fcf80b31beec30ecf59eb015a86c0c84f577b2", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,5 +1,5 @@\n use rustc_index::vec::{Idx, IndexVec};\n-use std::mem;\n+use std::{mem, rc::Rc, sync::Arc};\n \n pub trait IdFunctor: Sized {\n     type Inner;\n@@ -65,3 +65,52 @@ impl<I: Idx, T> IdFunctor for IndexVec<I, T> {\n         self.raw.try_map_id(f).map(IndexVec::from_raw)\n     }\n }\n+\n+macro_rules! rc {\n+    ($($rc:ident),+) => {$(\n+        impl<T: Clone> IdFunctor for $rc<T> {\n+            type Inner = T;\n+\n+            #[inline]\n+            fn try_map_id<F, E>(mut self, mut f: F) -> Result<Self, E>\n+            where\n+                F: FnMut(Self::Inner) -> Result<Self::Inner, E>,\n+            {\n+                // We merely want to replace the contained `T`, if at all possible,\n+                // so that we don't needlessly allocate a new `$rc` or indeed clone\n+                // the contained type.\n+                unsafe {\n+                    // First step is to ensure that we have a unique reference to\n+                    // the contained type, which `$rc::make_mut` will accomplish (by\n+                    // allocating a new `$rc` and cloning the `T` only if required).\n+                    // This is done *before* casting to `$rc<ManuallyDrop<T>>` so that\n+                    // panicking during `make_mut` does not leak the `T`.\n+                    $rc::make_mut(&mut self);\n+\n+                    // Casting to `$rc<ManuallyDrop<T>>` is safe because `ManuallyDrop`\n+                    // is `repr(transparent)`.\n+                    let ptr = $rc::into_raw(self).cast::<mem::ManuallyDrop<T>>();\n+                    let mut unique = $rc::from_raw(ptr);\n+\n+                    // Call to `$rc::make_mut` above guarantees that `unique` is the\n+                    // sole reference to the contained value, so we can avoid doing\n+                    // a checked `get_mut` here.\n+                    let slot = $rc::get_mut_unchecked(&mut unique);\n+\n+                    // Semantically move the contained type out from `unique`, fold\n+                    // it, then move the folded value back into `unique`. Should\n+                    // folding fail, `ManuallyDrop` ensures that the \"moved-out\"\n+                    // value is not re-dropped.\n+                    let owned = mem::ManuallyDrop::take(slot);\n+                    let folded = f(owned)?;\n+                    *slot = mem::ManuallyDrop::new(folded);\n+\n+                    // Cast back to `$rc<T>`.\n+                    Ok($rc::from_raw($rc::into_raw(unique).cast()))\n+                }\n+            }\n+        }\n+    )+};\n+}\n+\n+rc! { Rc, Arc }"}, {"sha": "a94e52fdfe604d35a257942067ca4befd1fa3bcf", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -26,6 +26,7 @@\n #![feature(test)]\n #![feature(thread_id_value)]\n #![feature(vec_into_raw_parts)]\n+#![feature(get_mut_unchecked)]\n #![allow(rustc::default_hash_types)]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "e0d77cdaebb3698cc64614b958370223495df800", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -486,6 +486,14 @@ impl<HCX> ToStableHashKey<HCX> for String {\n     }\n }\n \n+impl<HCX, T1: ToStableHashKey<HCX>, T2: ToStableHashKey<HCX>> ToStableHashKey<HCX> for (T1, T2) {\n+    type KeyType = (T1::KeyType, T2::KeyType);\n+    #[inline]\n+    fn to_stable_hash_key(&self, hcx: &HCX) -> Self::KeyType {\n+        (self.0.to_stable_hash_key(hcx), self.1.to_stable_hash_key(hcx))\n+    }\n+}\n+\n impl<CTX> HashStable<CTX> for bool {\n     #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {"}, {"sha": "1067fcebcf39514dc8e20adcb75f1cef3da3d64d", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -23,7 +23,7 @@ use rustc_codegen_ssa::{traits::CodegenBackend, CodegenErrors, CodegenResults};\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n-use rustc_errors::{ErrorGuaranteed, PResult};\n+use rustc_errors::{ErrorGuaranteed, PResult, TerminalUrl};\n use rustc_feature::find_gated_cfg;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n@@ -624,7 +624,10 @@ fn print_crate_info(\n                 println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n             }\n             FileNames | CrateName => {\n-                let attrs = attrs.as_ref().unwrap();\n+                let Some(attrs) = attrs.as_ref() else {\n+                    // no crate attributes, print out an error and exit\n+                    return Compilation::Continue;\n+                };\n                 let t_outputs = rustc_interface::util::build_output_filenames(attrs, sess);\n                 let id = rustc_session::output::find_crate_name(sess, attrs);\n                 if *req == PrintRequest::CrateName {\n@@ -1188,6 +1191,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         None,\n         false,\n         false,\n+        TerminalUrl::No,\n     ));\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n "}, {"sha": "27783d60be46d7b503cce5ca9f49856a4a96d38c", "filename": "compiler/rustc_error_messages/Cargo.toml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_error_messages%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_error_messages%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2FCargo.toml?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -16,10 +16,9 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n tracing = \"0.1\"\n unic-langid = { version = \"0.9.0\", features = [\"macros\"] }\n-icu_list = \"1.0.0\"\n-writeable = \"0.5.0\"\n-icu_locid = \"1.0.0\"\n-icu_provider_adapters = \"1.0.0\"\n+icu_list = \"1.1.0\"\n+icu_locid = \"1.1.0\"\n+icu_provider_adapters = \"1.1.0\"\n \n [features]\n rustc_use_parallel_compiler = ['rustc_baked_icu_data/rustc_use_parallel_compiler']"}, {"sha": "a3b6b5e8138b68ed2e84b37abad09be4ef2577ac", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -18,7 +18,7 @@ borrowck_generic_does_not_live_long_enough =\n     `{$kind}` does not live long enough\n \n borrowck_move_borrowed =\n-    cannot move out of `{$desc}` beacause it is borrowed\n+    cannot move out of `{$desc}` because it is borrowed\n \n borrowck_var_does_not_need_mut =\n     variable does not need to be mutable\n@@ -87,10 +87,10 @@ borrowck_use_due_to_use_closure =\n     use occurs due to use in closure\n \n borrowck_assign_due_to_use_closure =\n-    assign occurs due to use in closure\n+    assignment occurs due to use in closure\n \n borrowck_assign_part_due_to_use_closure =\n-    assign to part occurs due to use in closure\n+    assignment to part occurs due to use in closure\n \n borrowck_capture_immute =\n     capture is immutable because of use here"}, {"sha": "c9cf7b62071fe0daa003562de45d31585f40b3dd", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -585,3 +585,118 @@ parse_negative_bounds_not_supported = negative bounds are not supported\n parse_help_set_edition_cargo = set `edition = \"{$edition}\"` in `Cargo.toml`\n parse_help_set_edition_standalone = pass `--edition {$edition}` to `rustc`\n parse_note_edition_guide = for more on editions, read https://doc.rust-lang.org/edition-guide\n+\n+parse_unexpected_token_after_dot = unexpected token: `{$actual}`\n+\n+parse_cannot_be_raw_ident = `{$ident}` cannot be a raw identifier\n+\n+parse_cr_doc_comment = bare CR not allowed in {$block ->\n+    [true] block doc-comment\n+    *[false] doc-comment\n+}\n+\n+parse_no_digits_literal = no valid digits found for number\n+\n+parse_invalid_digit_literal = invalid digit for a base {$base} literal\n+\n+parse_empty_exponent_float = expected at least one digit in exponent\n+\n+parse_float_literal_unsupported_base = {$base} float literal is not supported\n+\n+parse_more_than_one_char = character literal may only contain one codepoint\n+    .followed_by = this `{$chr}` is followed by the combining {$len ->\n+        [one] mark\n+        *[other] marks\n+        } `{$escaped_marks}`\n+    .non_printing = there are non-printing characters, the full sequence is `{$escaped}`\n+    .consider_normalized = consider using the normalized form `{$ch}` of this character\n+    .remove_non = consider removing the non-printing characters\n+    .use_double_quotes = if you meant to write a {$is_byte ->\n+        [true] byte string\n+        *[false] `str`\n+        } literal, use double quotes\n+\n+parse_no_brace_unicode_escape = incorrect unicode escape sequence\n+    .label = {parse_no_brace_unicode_escape}\n+    .use_braces = format of unicode escape sequences uses braces\n+    .format_of_unicode = format of unicode escape sequences is `\\u{\"{...}\"}`\n+\n+parse_invalid_unicode_escape = invalid unicode character escape\n+    .label = invalid escape\n+    .help = unicode escape must {$surrogate ->\n+    [true] not be a surrogate\n+    *[false] be at most 10FFFF\n+    }\n+\n+parse_escape_only_char = {$byte ->\n+    [true] byte\n+    *[false] character\n+    } constant must be escaped: `{$escaped_msg}`\n+    .escape = escape the character\n+\n+parse_bare_cr = {$double_quotes ->\n+    [true] bare CR not allowed in string, use `\\r` instead\n+    *[false] character constant must be escaped: `\\r`\n+    }\n+    .escape = escape the character\n+\n+parse_bare_cr_in_raw_string = bare CR not allowed in raw string\n+\n+parse_too_short_hex_escape = numeric character escape is too short\n+\n+parse_invalid_char_in_escape = {parse_invalid_char_in_escape_msg}: `{$ch}`\n+    .label = {parse_invalid_char_in_escape_msg}\n+\n+parse_invalid_char_in_escape_msg = invalid character in {$is_hex ->\n+    [true] numeric character\n+    *[false] unicode\n+    } escape\n+\n+parse_out_of_range_hex_escape = out of range hex escape\n+    .label = must be a character in the range [\\x00-\\x7f]\n+\n+parse_leading_underscore_unicode_escape = {parse_leading_underscore_unicode_escape_label}: `_`\n+parse_leading_underscore_unicode_escape_label = invalid start of unicode escape\n+\n+parse_overlong_unicode_escape = overlong unicode escape\n+    .label = must have at most 6 hex digits\n+\n+parse_unclosed_unicode_escape = unterminated unicode escape\n+    .label = missing a closing `{\"}\"}`\n+    .terminate = terminate the unicode escape\n+\n+parse_unicode_escape_in_byte = unicode escape in byte string\n+    .label = {parse_unicode_escape_in_byte}\n+    .help = unicode escape sequences cannot be used as a byte or in a byte string\n+\n+parse_empty_unicode_escape = empty unicode escape\n+    .label = this escape must have at least 1 hex digit\n+\n+parse_zero_chars = empty character literal\n+    .label = {parse_zero_chars}\n+\n+parse_lone_slash = invalid trailing slash in literal\n+    .label = {parse_lone_slash}\n+\n+parse_unskipped_whitespace = non-ASCII whitespace symbol '{$ch}' is not skipped\n+    .label = {parse_unskipped_whitespace}\n+\n+parse_multiple_skipped_lines = multiple lines skipped by escaped newline\n+    .label = skipping everything up to and including this point\n+\n+parse_unknown_prefix = prefix `{$prefix}` is unknown\n+    .label = unknown prefix\n+    .note =  prefixed identifiers and literals are reserved since Rust 2021\n+    .suggestion_br = use `br` for a raw byte string\n+    .suggestion_whitespace = consider inserting whitespace here\n+\n+parse_too_many_hashes = too many `#` symbols: raw strings may be delimited by up to 255 `#` symbols, but found {$num}\n+\n+parse_unknown_start_of_token = unknown start of token: {$escaped}\n+    .sugg_quotes = Unicode characters '\u201c' (Left Double Quotation Mark) and '\u201d' (Right Double Quotation Mark) look like '{$ascii_str}' ({$ascii_name}), but are not\n+    .sugg_other = Unicode character '{$ch}' ({$u_name}) looks like '{$ascii_str}' ({$ascii_name}), but it is not\n+    .help_null = source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used\n+    .note_repeats = character appears {$repeats ->\n+        [one] once more\n+        *[other] {$repeats} more times\n+    }"}, {"sha": "fe553edab4276ffacd618b99ffd877bad142a588", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -25,6 +25,8 @@ session_profile_sample_use_file_does_not_exist = file `{$path}` passed to `-C pr\n \n session_target_requires_unwind_tables = target requires unwind tables, they cannot be disabled with `-C force-unwind-tables=no`\n \n+session_instrumentation_not_supported = {$us} instrumentation is not supported for this target\n+\n session_sanitizer_not_supported = {$us} sanitizer is not supported for this target\n \n session_sanitizers_not_supported = {$us} sanitizers are not supported for this target"}, {"sha": "4f2cc8b0351cb2f1aee21ab56e824e8ec1632ae0", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -18,7 +18,7 @@ use crate::translation::{to_fluent_args, Translate};\n use crate::{\n     diagnostic::DiagnosticLocation, CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage,\n     FluentBundle, Handler, LazyFallbackBundle, Level, MultiSpan, SubDiagnostic,\n-    SubstitutionHighlight, SuggestionStyle,\n+    SubstitutionHighlight, SuggestionStyle, TerminalUrl,\n };\n use rustc_lint_defs::pluralize;\n \n@@ -66,6 +66,7 @@ impl HumanReadableErrorType {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n         let color = color_config.suggests_using_colors();\n@@ -80,6 +81,7 @@ impl HumanReadableErrorType {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         )\n     }\n }\n@@ -652,6 +654,7 @@ pub struct EmitterWriter {\n \n     macro_backtrace: bool,\n     track_diagnostics: bool,\n+    terminal_url: TerminalUrl,\n }\n \n #[derive(Debug)]\n@@ -672,6 +675,7 @@ impl EmitterWriter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n@@ -685,6 +689,7 @@ impl EmitterWriter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         }\n     }\n \n@@ -699,6 +704,7 @@ impl EmitterWriter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n@@ -711,6 +717,7 @@ impl EmitterWriter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         }\n     }\n \n@@ -1378,7 +1385,13 @@ impl EmitterWriter {\n             // only render error codes, not lint codes\n             if let Some(DiagnosticId::Error(ref code)) = *code {\n                 buffer.append(0, \"[\", Style::Level(*level));\n-                buffer.append(0, code, Style::Level(*level));\n+                let code = if let TerminalUrl::Yes = self.terminal_url {\n+                    let path = \"https://doc.rust-lang.org/error_codes\";\n+                    format!(\"\\x1b]8;;{path}/{code}.html\\x07{code}\\x1b]8;;\\x07\")\n+                } else {\n+                    code.clone()\n+                };\n+                buffer.append(0, &code, Style::Level(*level));\n                 buffer.append(0, \"]\", Style::Level(*level));\n                 label_width += 2 + code.len();\n             }\n@@ -1796,17 +1809,17 @@ impl EmitterWriter {\n                 // telling users to make a change but not clarifying *where*.\n                 let loc = sm.lookup_char_pos(parts[0].span.lo());\n                 if loc.file.name != sm.span_to_filename(span) && loc.file.name.is_real() {\n-                    buffer.puts(row_num - 1, 0, \"--> \", Style::LineNumber);\n-                    buffer.append(\n-                        row_num - 1,\n-                        &format!(\n-                            \"{}:{}:{}\",\n-                            sm.filename_for_diagnostics(&loc.file.name),\n-                            sm.doctest_offset_line(&loc.file.name, loc.line),\n-                            loc.col.0 + 1,\n-                        ),\n-                        Style::LineAndColumn,\n-                    );\n+                    let arrow = \"--> \";\n+                    buffer.puts(row_num - 1, 0, arrow, Style::LineNumber);\n+                    let filename = sm.filename_for_diagnostics(&loc.file.name);\n+                    let offset = sm.doctest_offset_line(&loc.file.name, loc.line);\n+                    let message = format!(\"{}:{}:{}\", filename, offset, loc.col.0 + 1);\n+                    if row_num == 2 {\n+                        let col = usize::max(max_line_num_len + 1, arrow.len());\n+                        buffer.puts(1, col, &message, Style::LineAndColumn);\n+                    } else {\n+                        buffer.append(row_num - 1, &message, Style::LineAndColumn);\n+                    }\n                     for _ in 0..max_line_num_len {\n                         buffer.prepend(row_num - 1, \" \", Style::NoStyle);\n                     }"}, {"sha": "e475fc725c33b01014928a136dd2e91b9b588d5c", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -17,6 +17,7 @@ use crate::translation::{to_fluent_args, Translate};\n use crate::DiagnosticId;\n use crate::{\n     CodeSuggestion, FluentBundle, LazyFallbackBundle, MultiSpan, SpanLabel, SubDiagnostic,\n+    TerminalUrl,\n };\n use rustc_lint_defs::Applicability;\n \n@@ -47,6 +48,7 @@ pub struct JsonEmitter {\n     diagnostic_width: Option<usize>,\n     macro_backtrace: bool,\n     track_diagnostics: bool,\n+    terminal_url: TerminalUrl,\n }\n \n impl JsonEmitter {\n@@ -60,6 +62,7 @@ impl JsonEmitter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::BufWriter::new(io::stderr())),\n@@ -73,6 +76,7 @@ impl JsonEmitter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         }\n     }\n \n@@ -84,6 +88,7 @@ impl JsonEmitter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(\n@@ -96,6 +101,7 @@ impl JsonEmitter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         )\n     }\n \n@@ -110,6 +116,7 @@ impl JsonEmitter {\n         diagnostic_width: Option<usize>,\n         macro_backtrace: bool,\n         track_diagnostics: bool,\n+        terminal_url: TerminalUrl,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n@@ -123,6 +130,7 @@ impl JsonEmitter {\n             diagnostic_width,\n             macro_backtrace,\n             track_diagnostics,\n+            terminal_url,\n         }\n     }\n \n@@ -360,6 +368,7 @@ impl Diagnostic {\n                 je.diagnostic_width,\n                 je.macro_backtrace,\n                 je.track_diagnostics,\n+                je.terminal_url,\n             )\n             .ui_testing(je.ui_testing)\n             .emit_diagnostic(diag);"}, {"sha": "f161532d3b7e2ac89d37993dc580ed4ed20806f4", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -4,7 +4,7 @@ use crate::json::JsonEmitter;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n \n use crate::emitter::{ColorConfig, HumanReadableErrorType};\n-use crate::Handler;\n+use crate::{Handler, TerminalUrl};\n use rustc_span::{BytePos, Span};\n \n use std::str;\n@@ -60,6 +60,7 @@ fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n             None,\n             false,\n             false,\n+            TerminalUrl::No,\n         );\n \n         let span = Span::with_root_ctxt(BytePos(span.0), BytePos(span.1));"}, {"sha": "83b733d4c067736691fe5d5901a3c659644eacbe", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -573,6 +573,7 @@ impl Handler {\n             None,\n             flags.macro_backtrace,\n             flags.track_diagnostics,\n+            TerminalUrl::No,\n         ));\n         Self::with_emitter_and_flags(emitter, flags)\n     }\n@@ -1838,6 +1839,13 @@ pub fn add_elided_lifetime_in_path_suggestion(\n     );\n }\n \n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum TerminalUrl {\n+    No,\n+    Yes,\n+    Auto,\n+}\n+\n /// Useful type to use with `Result<>` indicate that an error has already\n /// been reported to the user, so no need to continue checking.\n #[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq, PartialOrd, Ord)]"}, {"sha": "f80141403bf150cb2252762869c97fb9b064c77e", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -8,7 +8,7 @@ use rustc_span::{BytePos, Span};\n \n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::EmitterWriter;\n-use rustc_errors::{Handler, MultiSpan, PResult};\n+use rustc_errors::{Handler, MultiSpan, PResult, TerminalUrl};\n \n use std::io;\n use std::io::prelude::*;\n@@ -152,6 +152,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n             None,\n             false,\n             false,\n+            TerminalUrl::No,\n         );\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         #[allow(rustc::untranslatable_diagnostic)]"}, {"sha": "493a9cd89e3b63fa98af2b59130e331a52e6ef3f", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -414,7 +414,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     // Linking:\n-    gated!(naked, Normal, template!(Word), WarnFollowing, @only_local: true, naked_functions, experimental!(naked)),\n+    gated!(\n+        naked, Normal, template!(Word), WarnFollowing, @only_local: true,\n+        naked_functions, experimental!(naked)\n+    ),\n \n     // Plugins:\n     BuiltinAttribute {\n@@ -441,7 +444,8 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     // RFC #1268\n     gated!(\n-        marker, Normal, template!(Word), WarnFollowing, marker_trait_attr, experimental!(marker)\n+        marker, Normal, template!(Word), WarnFollowing, @only_local: true,\n+        marker_trait_attr, experimental!(marker)\n     ),\n     gated!(\n         thread_local, Normal, template!(Word), WarnFollowing,\n@@ -682,14 +686,17 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"language items are subject to change\",\n     ),\n     rustc_attr!(\n-        rustc_pass_by_value, Normal,\n-        template!(Word), ErrorFollowing,\n+        rustc_pass_by_value, Normal, template!(Word), ErrorFollowing,\n         \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n     ),\n     rustc_attr!(\n         rustc_coherence_is_core, AttributeType::CrateLevel, template!(Word), ErrorFollowing, @only_local: true,\n         \"#![rustc_coherence_is_core] allows inherent methods on builtin types, only intended to be used in `core`.\"\n     ),\n+    rustc_attr!(\n+        rustc_coinductive, AttributeType::Normal, template!(Word), WarnFollowing, @only_local: true,\n+        \"#![rustc_coinductive] changes a trait to be coinductive, allowing cycles in the trait solver.\"\n+    ),\n     rustc_attr!(\n         rustc_allow_incoherent_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: true,\n         \"#[rustc_allow_incoherent_impl] has to be added to all impl items of an incoherent inherent impl.\""}, {"sha": "f1801a0f844f7fbec25a7b8e0e191e83d51d257c", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -2,6 +2,8 @@ use crate::hir;\n \n use rustc_ast as ast;\n use rustc_ast::NodeId;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::ToStableHashKey;\n use rustc_macros::HashStable_Generic;\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::hygiene::MacroKind;\n@@ -472,7 +474,8 @@ impl PartialRes {\n \n /// Different kinds of symbols can coexist even if they share the same textual name.\n /// Therefore, they each have a separate universe (known as a \"namespace\").\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+#[derive(HashStable_Generic)]\n pub enum Namespace {\n     /// The type namespace includes `struct`s, `enum`s, `union`s, `trait`s, and `mod`s\n     /// (and, by extension, crates).\n@@ -499,6 +502,15 @@ impl Namespace {\n     }\n }\n \n+impl<CTX: crate::HashStableContext> ToStableHashKey<CTX> for Namespace {\n+    type KeyType = Namespace;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &CTX) -> Namespace {\n+        *self\n+    }\n+}\n+\n /// Just a helper \u2012 separate structure for each namespace.\n #[derive(Copy, Clone, Default, Debug)]\n pub struct PerNS<T> {\n@@ -760,3 +772,5 @@ pub enum LifetimeRes {\n     /// HACK: This is used to recover the NodeId of an elided lifetime.\n     ElidedAnchor { start: NodeId, end: NodeId },\n }\n+\n+pub type DocLinkResMap = FxHashMap<(Symbol, Namespace), Option<Res<NodeId>>>;"}, {"sha": "cd3c620cbb768b482a87efa65e06a2f416050a1d", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -92,7 +92,7 @@ impl DefPathTable {\n /// The definition table containing node definitions.\n /// It holds the `DefPathTable` for `LocalDefId`s/`DefPath`s.\n /// It also stores mappings to convert `LocalDefId`s to/from `HirId`s.\n-#[derive(Clone, Debug)]\n+#[derive(Debug)]\n pub struct Definitions {\n     table: DefPathTable,\n     next_disambiguator: FxHashMap<(LocalDefId, DefPathData), u32>,"}, {"sha": "7cb3b6e1525b2bc476034645f73e73fc1b668415", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -3460,7 +3460,7 @@ pub struct Upvar {\n // The TraitCandidate's import_ids is empty if the trait is defined in the same module, and\n // has length > 0 if the trait is found through an chain of imports, starting with the\n // import/use statement in the scope where the trait is used.\n-#[derive(Encodable, Decodable, Clone, Debug, HashStable_Generic)]\n+#[derive(Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct TraitCandidate {\n     pub def_id: DefId,\n     pub import_ids: SmallVec<[LocalDefId; 1]>,"}, {"sha": "8c753a99a09f09b3c27d8fc6a088fb551fdd3cda", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -263,11 +263,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     // elision. `resolve_lifetime` should have\n                     // reported an error in this case -- but if\n                     // not, let's error out.\n-                    tcx.sess.delay_span_bug(lifetime.ident.span, \"unelided lifetime in signature\");\n-\n-                    // Supply some dummy value. We don't have an\n-                    // `re_error`, annoyingly, so use `'static`.\n-                    tcx.lifetimes.re_static\n+                    tcx.re_error_with_message(lifetime.ident.span, \"unelided lifetime in signature\")\n                 })\n             }\n         }\n@@ -481,11 +477,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             debug!(?param, \"unelided lifetime in signature\");\n \n                             // This indicates an illegal lifetime in a non-assoc-trait position\n-                            tcx.sess.delay_span_bug(self.span, \"unelided lifetime in signature\");\n-\n-                            // Supply some dummy value. We don't have an\n-                            // `re_error`, annoyingly, so use `'static`.\n-                            tcx.lifetimes.re_static\n+                            tcx.re_error_with_message(self.span, \"unelided lifetime in signature\")\n                         })\n                         .into(),\n                     GenericParamDefKind::Type { has_default, .. } => {\n@@ -1258,7 +1250,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 //\n                 // Calling `skip_binder` is okay, because `add_bounds` expects the `param_ty`\n                 // parameter to have a skipped binder.\n-                let param_ty = tcx.mk_ty(ty::Alias(ty::Projection, projection_ty.skip_binder()));\n+                let param_ty = tcx.mk_alias(ty::Projection, projection_ty.skip_binder());\n                 self.add_bounds(param_ty, ast_bounds.iter(), bounds, candidate.bound_vars());\n             }\n         }\n@@ -1328,6 +1320,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ty::Clause::RegionOutlives(_) => bug!(),\n                 },\n                 ty::PredicateKind::WellFormed(_)\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(_, _, _)\n                 | ty::PredicateKind::Subtype(_)\n@@ -1622,14 +1615,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             \"the lifetime bound for this object type cannot be deduced \\\n                              from context; please supply an explicit bound\"\n                         );\n-                        if borrowed {\n+                        let e = if borrowed {\n                             // We will have already emitted an error E0106 complaining about a\n                             // missing named lifetime in `&dyn Trait`, so we elide this one.\n-                            err.delay_as_bug();\n+                            err.delay_as_bug()\n                         } else {\n-                            err.emit();\n-                        }\n-                        tcx.lifetimes.re_static\n+                            err.emit()\n+                        };\n+                        tcx.re_error(e)\n                     })\n                 }\n             })\n@@ -2937,7 +2930,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 };\n \n-                tcx.mk_ty(ty::Array(self.ast_ty_to_ty(ty), length))\n+                tcx.mk_array_with_const_len(self.ast_ty_to_ty(ty), length)\n             }\n             hir::TyKind::Typeof(e) => {\n                 let ty_erased = tcx.type_of(e.def_id);"}, {"sha": "1d26ca70f38f33b24db78b58a3c84863b02fb88f", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -121,7 +121,7 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n \n         let param_env = tcx.param_env(item_def_id);\n         for field in &def.non_enum_variant().fields {\n-            let field_ty = field.ty(tcx, substs);\n+            let field_ty = tcx.normalize_erasing_regions(param_env, field.ty(tcx, substs));\n \n             if !allowed_union_field(field_ty, tcx, param_env) {\n                 let (field_span, ty_span) = match tcx.hir().get_if_local(field.did) {\n@@ -261,7 +261,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         selftys: Vec<(Span, Option<String>)>,\n     }\n \n-    impl<'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+    impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Ty<'tcx>;\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -901,7 +901,7 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n         }\n \n         let len = if let ty::Array(_ty, c) = e.kind() {\n-            c.try_eval_usize(tcx, tcx.param_env(def.did()))\n+            c.try_eval_target_usize(tcx, tcx.param_env(def.did()))\n         } else {\n             Some(fields.len() as u64)\n         };\n@@ -1447,7 +1447,7 @@ fn opaque_type_cycle_error(\n                     opaques: Vec<DefId>,\n                     closures: Vec<DefId>,\n                 }\n-                impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypeCollector {\n+                impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeCollector {\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {"}, {"sha": "a926deb2393ded2c94a9f5528bba23c90f328259", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -16,7 +16,7 @@ use rustc_infer::traits::util;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::util::ExplicitSelf;\n use rustc_middle::ty::{\n-    self, DefIdTree, InternalSubsts, Ty, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, InternalSubsts, Ty, TypeFoldable, TypeSuperFoldable,\n };\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n@@ -464,8 +464,8 @@ struct RemapLateBound<'a, 'tcx> {\n     mapping: &'a FxHashMap<ty::BoundRegionKind, ty::BoundRegionKind>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for RemapLateBound<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RemapLateBound<'_, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -786,13 +786,7 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                     }\n                     let Some(ty::ReEarlyBound(e)) = map.get(&region.into()).map(|r| r.expect_region().kind())\n                     else {\n-                        tcx\n-                            .sess\n-                            .delay_span_bug(\n-                                return_span,\n-                                \"expected ReFree to map to ReEarlyBound\"\n-                            );\n-                        return tcx.lifetimes.re_static;\n+                        return tcx.re_error_with_message(return_span, \"expected ReFree to map to ReEarlyBound\")\n                     };\n                     tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n                         def_id: e.def_id,\n@@ -835,14 +829,14 @@ impl<'a, 'tcx> ImplTraitInTraitCollector<'a, 'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.ocx.infcx.tcx\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if let ty::Alias(ty::Projection, proj) = ty.kind()\n-            && self.tcx().def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n+            && self.interner().def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n         {\n             if let Some((ty, _)) = self.types.get(&proj.def_id) {\n                 return *ty;\n@@ -858,7 +852,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n             });\n             self.types.insert(proj.def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n-            for (pred, pred_span) in self.tcx().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.tcx(), proj.substs) {\n+            for (pred, pred_span) in self.interner().bound_explicit_item_bounds(proj.def_id).subst_iter_copied(self.interner(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n                     &ObligationCause::misc(self.span, self.body_id),\n@@ -867,7 +861,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n                 );\n \n                 self.ocx.register_obligation(traits::Obligation::new(\n-                    self.tcx(),\n+                    self.interner(),\n                     ObligationCause::new(\n                         self.span,\n                         self.body_id,\n@@ -1933,10 +1927,10 @@ pub(super) fn check_type_bounds<'tcx>(\n             let kind = ty::BoundTyKind::Param(param.def_id, param.name);\n             let bound_var = ty::BoundVariableKind::Ty(kind);\n             bound_vars.push(bound_var);\n-            tcx.mk_ty(ty::Bound(\n+            tcx.mk_bound(\n                 ty::INNERMOST,\n                 ty::BoundTy { var: ty::BoundVar::from_usize(bound_vars.len() - 1), kind },\n-            ))\n+            )\n             .into()\n         }\n         GenericParamDefKind::Lifetime => {"}, {"sha": "16e7dcd0060da3edf4ca129dae518432cf294e5f", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -16,8 +16,8 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, AdtKind, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n-    TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, AdtKind, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperVisitable,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts};\n use rustc_session::parse::feature_err;\n@@ -603,8 +603,7 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<'tcx>>(\n                 // our example, the type was `Self`, which will also be\n                 // `Self` in the GAT.\n                 let ty_param = gat_generics.param_at(*ty_idx, tcx);\n-                let ty_param = tcx\n-                    .mk_ty(ty::Param(ty::ParamTy { index: ty_param.index, name: ty_param.name }));\n+                let ty_param = tcx.mk_ty_param(ty_param.index, ty_param.name);\n                 // Same for the region. In our example, 'a corresponds\n                 // to the 'me parameter.\n                 let region_param = gat_generics.param_at(*region_a_idx, tcx);\n@@ -773,7 +772,7 @@ impl<'tcx> GATSubstCollector<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for GATSubstCollector<'tcx> {\n     type BreakTy = !;\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -1436,7 +1435,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             struct CountParams {\n                 params: FxHashSet<u32>,\n             }\n-            impl<'tcx> ty::visit::TypeVisitor<'tcx> for CountParams {\n+            impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for CountParams {\n                 type BreakTy = ();\n \n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "940a450101ca07dff1a9feb4cf0f237ae9991dc5", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -57,7 +57,7 @@ const ADD_ATTR: &str =\n     \"alternatively add `#[rustc_allow_incoherent_impl]` to the relevant impl items\";\n \n impl<'tcx> InherentCollect<'tcx> {\n-    fn check_def_id(&mut self, item: &hir::Item<'_>, self_ty: Ty<'tcx>, def_id: DefId) {\n+    fn check_def_id(&mut self, item: &hir::Item<'_>, self_ty: Ty<'tcx>, def_id: DefId, span: Span) {\n         let impl_def_id = item.owner_id;\n         if let Some(def_id) = def_id.as_local() {\n             // Add the implementation to the mapping from implementation to base\n@@ -76,12 +76,12 @@ impl<'tcx> InherentCollect<'tcx> {\n             if !self.tcx.has_attr(def_id, sym::rustc_has_incoherent_inherent_impls) {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    item.span,\n+                    span,\n                     E0390,\n                     \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n                 )\n                 .help(INTO_DEFINING_CRATE)\n-                .span_help(item.span, ADD_ATTR_TO_TY)\n+                .span_help(span, ADD_ATTR_TO_TY)\n                 .emit();\n                 return;\n             }\n@@ -93,12 +93,12 @@ impl<'tcx> InherentCollect<'tcx> {\n                 {\n                     struct_span_err!(\n                         self.tcx.sess,\n-                        item.span,\n+                        span,\n                         E0390,\n                         \"cannot define inherent `impl` for a type outside of the crate where the type is defined\",\n                     )\n                     .help(INTO_DEFINING_CRATE)\n-                    .span_help(impl_item.span, ADD_ATTR)\n+                    .span_help(self.tcx.hir().span(impl_item.id.hir_id()), ADD_ATTR)\n                     .emit();\n                     return;\n                 }\n@@ -112,12 +112,12 @@ impl<'tcx> InherentCollect<'tcx> {\n         } else {\n             struct_span_err!(\n                 self.tcx.sess,\n-                item.span,\n+                span,\n                 E0116,\n                 \"cannot define inherent `impl` for a type outside of the crate \\\n                               where the type is defined\"\n             )\n-            .span_label(item.span, \"impl for type defined outside of crate.\")\n+            .span_label(span, \"impl for type defined outside of crate.\")\n             .note(\"define and implement a trait or new type instead\")\n             .emit();\n         }\n@@ -182,29 +182,30 @@ impl<'tcx> InherentCollect<'tcx> {\n         }\n \n         let item = self.tcx.hir().item(id);\n-        let hir::ItemKind::Impl(hir::Impl { of_trait: None, self_ty: ty, items, .. }) = item.kind else {\n+        let impl_span = self.tcx.hir().span(id.hir_id());\n+        let hir::ItemKind::Impl(hir::Impl { of_trait: None, items, .. }) = item.kind else {\n             return;\n         };\n \n         let self_ty = self.tcx.type_of(item.owner_id);\n         match *self_ty.kind() {\n             ty::Adt(def, _) => {\n-                self.check_def_id(item, self_ty, def.did());\n+                self.check_def_id(item, self_ty, def.did(), impl_span);\n             }\n             ty::Foreign(did) => {\n-                self.check_def_id(item, self_ty, did);\n+                self.check_def_id(item, self_ty, did, impl_span);\n             }\n             ty::Dynamic(data, ..) if data.principal_def_id().is_some() => {\n-                self.check_def_id(item, self_ty, data.principal_def_id().unwrap());\n+                self.check_def_id(item, self_ty, data.principal_def_id().unwrap(), impl_span);\n             }\n             ty::Dynamic(..) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    ty.span,\n+                    impl_span,\n                     E0785,\n                     \"cannot define inherent `impl` for a dyn auto trait\"\n                 )\n-                .span_label(ty.span, \"impl requires at least one non-auto trait\")\n+                .span_label(impl_span, \"impl requires at least one non-auto trait\")\n                 .note(\"define and implement a new trait or type instead\")\n                 .emit();\n             }\n@@ -221,17 +222,17 @@ impl<'tcx> InherentCollect<'tcx> {\n             | ty::Never\n             | ty::FnPtr(_)\n             | ty::Tuple(..) => {\n-                self.check_primitive_impl(item.owner_id.def_id, self_ty, items, ty.span)\n+                self.check_primitive_impl(item.owner_id.def_id, self_ty, items, impl_span)\n             }\n             ty::Alias(..) | ty::Param(_) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n-                    ty.span,\n+                    impl_span,\n                     E0118,\n                     \"no nominal type found for inherent implementation\"\n                 );\n \n-                err.span_label(ty.span, \"impl requires a nominal type\")\n+                err.span_label(impl_span, \"impl requires a nominal type\")\n                     .note(\"either implement a trait on it or create a newtype to wrap it instead\");\n \n                 err.emit();"}, {"sha": "d0db8cabfddb27f8c7db1e584ca10da005f51691", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -8,7 +8,7 @@ use rustc_hir as hir;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{\n-    self, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, AliasKind, ImplPolarity, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n };\n use rustc_session::lint;\n use rustc_span::def_id::{DefId, LocalDefId};\n@@ -552,7 +552,7 @@ fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty:\n         seen: FxHashSet<DefId>,\n     }\n \n-    impl<'tcx> TypeVisitor<'tcx> for DisableAutoTraitVisitor<'tcx> {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for DisableAutoTraitVisitor<'tcx> {\n         type BreakTy = ();\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             let tcx = self.tcx;"}, {"sha": "9f33d84ab52067e176b92f8f3d6d5b7b610b92cc", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -934,9 +934,10 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     }\n \n     let is_marker = tcx.has_attr(def_id, sym::marker);\n+    let rustc_coinductive = tcx.has_attr(def_id, sym::rustc_coinductive);\n     let skip_array_during_method_dispatch =\n         tcx.has_attr(def_id, sym::rustc_skip_array_during_method_dispatch);\n-    let spec_kind = if tcx.has_attr(def_id, sym::rustc_unsafe_specialization_marker) {\n+    let specialization_kind = if tcx.has_attr(def_id, sym::rustc_unsafe_specialization_marker) {\n         ty::trait_def::TraitSpecializationKind::Marker\n     } else if tcx.has_attr(def_id, sym::rustc_specialization_trait) {\n         ty::trait_def::TraitSpecializationKind::AlwaysApplicable\n@@ -1036,16 +1037,17 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n             no_dups.then_some(list)\n         });\n \n-    ty::TraitDef::new(\n+    ty::TraitDef {\n         def_id,\n         unsafety,\n         paren_sugar,\n-        is_auto,\n+        has_auto_impl: is_auto,\n         is_marker,\n+        is_coinductive: rustc_coinductive || is_auto,\n         skip_array_during_method_dispatch,\n-        spec_kind,\n+        specialization_kind,\n         must_implement_one_of,\n-    )\n+    }\n }\n \n fn are_suggestable_generic_args(generic_args: &[hir::GenericArg<'_>]) -> bool {"}, {"sha": "3f8d620fe6934f4ed57f84d988dbe0f02a30380b", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::{GenericArg, GenericParam, GenericParamKind, HirIdMap, LifetimeNa\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n-use rustc_middle::ty::{self, DefIdTree, TyCtxt, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, DefIdTree, TyCtxt, TypeSuperVisitable};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -1752,7 +1752,7 @@ fn is_late_bound_map(\n \n     use std::ops::ControlFlow;\n     use ty::Ty;\n-    impl<'tcx> TypeVisitor<'tcx> for ConstrainedCollectorPostAstConv {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ConstrainedCollectorPostAstConv {\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<!> {\n             match t.kind() {\n                 ty::Param(param_ty) => {"}, {"sha": "54fcccb0c11e4e507ff365e7e5ba403b6c742696", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{\n-    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeSuperFoldable, TypeVisitable,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n@@ -850,8 +850,8 @@ fn infer_placeholder_type<'a>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> TypeFolder<'tcx> for MakeNameable<'tcx> {\n-        fn tcx(&self) -> TyCtxt<'tcx> {\n+    impl<'tcx> TypeFolder<TyCtxt<'tcx>> for MakeNameable<'tcx> {\n+        fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n "}, {"sha": "072676c400d4ea6da11f8fb46194e709749f2e41", "filename": "compiler/rustc_hir_analysis/src/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::source_map::Span;\n use std::ops::ControlFlow;\n@@ -56,7 +56,7 @@ struct ParameterCollector {\n     include_nonconstraining: bool,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ParameterCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *t.kind() {\n             ty::Alias(ty::Projection, ..) if !self.include_nonconstraining => {"}, {"sha": "8fc4610ae85677057b8568b18b2aca35e3eb07d0", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::{ForeignItem, ForeignItemKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ObligationCause, WellFormedLoc};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Region, TyCtxt, TypeFoldable, TypeFolder};\n+use rustc_middle::ty::{self, ir::TypeFolder, Region, TyCtxt, TypeFoldable};\n use rustc_span::def_id::LocalDefId;\n use rustc_trait_selection::traits;\n \n@@ -189,8 +189,8 @@ struct EraseAllBoundRegions<'tcx> {\n // us an inaccurate span for an error message, but cannot\n // lead to unsoundness (we call `delay_span_bug` at the start\n // of `diagnostic_hir_wf_check`).\n-impl<'tcx> TypeFolder<'tcx> for EraseAllBoundRegions<'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseAllBoundRegions<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {"}, {"sha": "02f77f9d6afba4793721ff0e0832f11be7df9119", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -517,6 +517,7 @@ fn trait_predicate_kind<'tcx>(\n         ty::PredicateKind::Clause(ty::Clause::RegionOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(_))\n+        | ty::PredicateKind::AliasEq(..)\n         | ty::PredicateKind::WellFormed(_)\n         | ty::PredicateKind::Subtype(_)\n         | ty::PredicateKind::Coerce(_)"}, {"sha": "ecd6849426dbf8dcd089f7bf82b673428ee0b80e", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -55,6 +55,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     ty::PredicateKind::Clause(ty::Clause::Trait(..))\n                     | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                     | ty::PredicateKind::WellFormed(..)\n+                    | ty::PredicateKind::AliasEq(..)\n                     | ty::PredicateKind::ObjectSafe(..)\n                     | ty::PredicateKind::ClosureKind(..)\n                     | ty::PredicateKind::Subtype(..)"}, {"sha": "c5c5f63a108b396e2ca9c95d9d72e250e559fe57", "filename": "compiler/rustc_hir_analysis/src/outlives/utils.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -170,6 +170,8 @@ fn is_free_region(region: Region<'_>) -> bool {\n         // ignore it. We can't put it on the struct header anyway.\n         ty::ReLateBound(..) => false,\n \n+        ty::ReError(_) => false,\n+\n         // These regions don't appear in types from type declarations:\n         ty::ReErased | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReFree(..) => {\n             bug!(\"unexpected region in outlives inference: {:?}\", region);"}, {"sha": "b0cf0387f87a99c123fd91937c0d8a0b65dbd438", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -409,6 +409,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // way early-bound regions do, so we skip them here.\n             }\n \n+            ty::ReError(_) => {}\n+\n             ty::ReFree(..) | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReErased => {\n                 // We don't expect to see anything but 'static or bound\n                 // regions when visiting member types or method types."}, {"sha": "fb63bf224741a6cdbb87e8f268b9b30fa9da5fa2", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -7,8 +7,10 @@ use rustc_arena::DroplessArena;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n+#[cfg(not(bootstrap))]\n+use rustc_middle::ty::TypeVisitable;\n use rustc_middle::ty::{self, CrateVariancesMap, SubstsRef, Ty, TyCtxt};\n-use rustc_middle::ty::{DefIdTree, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::{DefIdTree, TypeSuperVisitable};\n use std::ops::ControlFlow;\n \n /// Defines the `TermsContext` basically houses an arena where we can\n@@ -99,7 +101,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         }\n     }\n \n-    impl<'tcx> ty::TypeVisitor<'tcx> for OpaqueTypeLifetimeCollector<'tcx> {\n+    impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeLifetimeCollector<'tcx> {\n         #[instrument(level = \"trace\", skip(self), ret)]\n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::RegionKind::ReEarlyBound(ebr) = r.kind() {"}, {"sha": "e19ef2ff3bf481a874445e4e18808061dce0d0b8", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // #55810: Type check patterns first so we get types for all bindings.\n         let scrut_span = scrut.span.find_ancestor_inside(expr.span).unwrap_or(scrut.span);\n         for arm in arms {\n-            self.check_pat_top(&arm.pat, scrutinee_ty, Some(scrut_span), true);\n+            self.check_pat_top(&arm.pat, scrutinee_ty, Some(scrut_span), Some(scrut));\n         }\n \n         // Now typecheck the blocks."}, {"sha": "05f6d8e607211b424f47e26a3b6f58045ae74151", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -90,7 +90,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n     for (idx, (param_ty, param)) in inputs_fn.chain(maybe_va_list).zip(body.params).enumerate() {\n         // Check the pattern.\n         let ty_span = try { inputs_hir?.get(idx)?.span };\n-        fcx.check_pat_top(&param.pat, param_ty, ty_span, false);\n+        fcx.check_pat_top(&param.pat, param_ty, ty_span, None);\n \n         // Check that argument is Sized.\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n@@ -264,9 +264,7 @@ fn check_lang_start_fn<'tcx>(\n         // for example `start`'s generic should be a type parameter\n         let generics = tcx.generics_of(def_id);\n         let fn_generic = generics.param_at(0, tcx);\n-        let generic_tykind =\n-            ty::Param(ty::ParamTy { index: fn_generic.index, name: fn_generic.name });\n-        let generic_ty = tcx.mk_ty(generic_tykind);\n+        let generic_ty = tcx.mk_ty_param(fn_generic.index, fn_generic.name);\n         let expected_fn_sig =\n             tcx.mk_fn_sig([].iter(), &generic_ty, false, hir::Unsafety::Normal, Abi::Rust);\n         let expected_ty = tcx.mk_fn_ptr(Binder::dummy(expected_fn_sig));"}, {"sha": "b1268c5f7923e6445821b892c9fe9bee30073a71", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::infer::{InferOk, InferResult};\n use rustc_macros::{TypeFoldable, TypeVisitable};\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, Ty, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -232,7 +232,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 struct MentionsTy<'tcx> {\n                     expected_ty: Ty<'tcx>,\n                 }\n-                impl<'tcx> TypeVisitor<'tcx> for MentionsTy<'tcx> {\n+                impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for MentionsTy<'tcx> {\n                     type BreakTy = ();\n \n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "ae00042eae73d544f8cb555f82001f6ae74ff462", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -273,12 +273,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ct_op: |c| c,\n             ty_op: |t| match *t.kind() {\n                 ty::Infer(ty::TyVar(_)) => self.tcx.mk_ty_var(ty::TyVid::from_u32(0)),\n-                ty::Infer(ty::IntVar(_)) => {\n-                    self.tcx.mk_ty_infer(ty::IntVar(ty::IntVid { index: 0 }))\n-                }\n-                ty::Infer(ty::FloatVar(_)) => {\n-                    self.tcx.mk_ty_infer(ty::FloatVar(ty::FloatVid { index: 0 }))\n-                }\n+                ty::Infer(ty::IntVar(_)) => self.tcx.mk_int_var(ty::IntVid { index: 0 }),\n+                ty::Infer(ty::FloatVar(_)) => self.tcx.mk_float_var(ty::FloatVid { index: 0 }),\n                 _ => t,\n             },\n         };"}, {"sha": "2f79071f6dc58d537de9e721c9bd344251bea5dc", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1396,7 +1396,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let count = self.array_length_to_const(count);\n-        if let Some(count) = count.try_eval_usize(tcx, self.param_env) {\n+        if let Some(count) = count.try_eval_target_usize(tcx, self.param_env) {\n             self.suggest_array_len(expr, count);\n         }\n \n@@ -1429,7 +1429,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.check_repeat_element_needs_copy_bound(element, count, element_ty);\n \n-        tcx.mk_ty(ty::Array(t, count))\n+        tcx.mk_array_with_const_len(t, count)\n     }\n \n     fn check_repeat_element_needs_copy_bound(\n@@ -1463,7 +1463,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // If the length is 0, we don't create any elements, so we don't copy any. If the length is 1, we\n         // don't copy that one element, we move it. Only check for Copy if the length is larger.\n-        if count.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n+        if count.try_eval_target_usize(tcx, self.param_env).map_or(true, |len| len > 1) {\n             let lang_item = self.tcx.require_lang_item(LangItem::Copy, None);\n             let code = traits::ObligationCauseCode::RepeatElementCopy { is_const_fn };\n             self.require_type_meets(element_ty, element.span, code, lang_item);\n@@ -2602,7 +2602,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         len: ty::Const<'tcx>,\n     ) {\n         if let (Some(len), Ok(user_index)) =\n-            (len.try_eval_usize(self.tcx, self.param_env), field.as_str().parse::<u64>())\n+            (len.try_eval_target_usize(self.tcx, self.param_env), field.as_str().parse::<u64>())\n             && let Ok(base) = self.tcx.sess.source_map().span_to_snippet(base.span)\n         {\n             let help = \"instead of using tuple indexing, use array indexing\";"}, {"sha": "52c2dabee293e55c4dbf27dc49ed20855ee17e42", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -669,6 +669,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n                 | ty::PredicateKind::WellFormed(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 // N.B., this predicate is created by breaking down a"}, {"sha": "f434fb922893dad1ffac8c87c8d407d5071b6371", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -3,7 +3,9 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCauseCode;\n-use rustc_middle::ty::{self, DefIdTree, Ty, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{\n+    self, ir::TypeVisitor, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+};\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits;\n \n@@ -247,7 +249,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         t: T,\n     ) -> Option<ty::GenericArg<'tcx>> {\n         struct FindAmbiguousParameter<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, DefId);\n-        impl<'tcx> TypeVisitor<'tcx> for FindAmbiguousParameter<'_, 'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for FindAmbiguousParameter<'_, 'tcx> {\n             type BreakTy = ty::GenericArg<'tcx>;\n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n                 if let Some(origin) = self.0.type_var_origin(ty)\n@@ -802,18 +804,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut walk = ty.walk();\n         while let Some(arg) = walk.next() {\n             if arg == param_to_point_at {\n-            return true;\n-        } else if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-            && let ty::Alias(ty::Projection, ..) = ty.kind()\n-        {\n-            // This logic may seem a bit strange, but typically when\n-            // we have a projection type in a function signature, the\n-            // argument that's being passed into that signature is\n-            // not actually constraining that projection's substs in\n-            // a meaningful way. So we skip it, and see improvements\n-            // in some UI tests.\n-            walk.skip_current_subtree();\n-        }\n+                return true;\n+            }\n+            if let ty::GenericArgKind::Type(ty) = arg.unpack()\n+                && let ty::Alias(ty::Projection, ..) = ty.kind()\n+            {\n+                // This logic may seem a bit strange, but typically when\n+                // we have a projection type in a function signature, the\n+                // argument that's being passed into that signature is\n+                // not actually constraining that projection's substs in\n+                // a meaningful way. So we skip it, and see improvements\n+                // in some UI tests.\n+                walk.skip_current_subtree();\n+            }\n         }\n         false\n     }"}, {"sha": "9c7a84ce198e8fa9411fde54a60220071f9055c4", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1330,11 +1330,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Does the expected pattern type originate from an expression and what is the span?\n         let (origin_expr, ty_span) = match (decl.ty, decl.init) {\n-            (Some(ty), _) => (false, Some(ty.span)), // Bias towards the explicit user type.\n+            (Some(ty), _) => (None, Some(ty.span)), // Bias towards the explicit user type.\n             (_, Some(init)) => {\n-                (true, Some(init.span.find_ancestor_inside(decl.span).unwrap_or(init.span)))\n+                (Some(init), Some(init.span.find_ancestor_inside(decl.span).unwrap_or(init.span)))\n             } // No explicit type; so use the scrutinee.\n-            _ => (false, None), // We have `let $pat;`, so the expected type is unconstrained.\n+            _ => (None, None), // We have `let $pat;`, so the expected type is unconstrained.\n         };\n \n         // Type check the pattern. Override if necessary to avoid knock-on errors."}, {"sha": "29ed9a24ecfdfe77502fe3b8b9d7ec98b04999cf", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -647,7 +647,8 @@ fn check_must_not_suspend_ty<'tcx>(\n                 hir_id,\n                 SuspendCheckData {\n                     descr_pre,\n-                    plural_len: len.try_eval_usize(fcx.tcx, fcx.param_env).unwrap_or(0) as usize\n+                    plural_len: len.try_eval_target_usize(fcx.tcx, fcx.param_env).unwrap_or(0)\n+                        as usize\n                         + 1,\n                     ..data\n                 },"}, {"sha": "60e0ce3494d4383b0d3d096352a356a48d51abf4", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -51,7 +51,6 @@\n use rustc_middle::hir::place::*;\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n use rustc_data_structures::fx::FxIndexMap;"}, {"sha": "b5e6727bfbadf7c8b05ba0209a46ecaca7f59f25", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::AssocItem;\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::ToPredicate;\n-use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n use rustc_session::lint;\n use rustc_span::def_id::DefId;\n@@ -837,6 +837,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n             }\n         });\n@@ -951,24 +952,38 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         let trait_ref = self.tcx.mk_trait_ref(trait_def_id, trait_substs);\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n-            // For trait aliases, assume all supertraits are relevant.\n-            let bounds = iter::once(ty::Binder::dummy(trait_ref));\n-            self.elaborate_bounds(bounds, |this, new_trait_ref, item| {\n-                let new_trait_ref = this.erase_late_bound_regions(new_trait_ref);\n+            // For trait aliases, recursively assume all explicitly named traits are relevant\n+            for expansion in traits::expand_trait_aliases(\n+                self.tcx,\n+                iter::once((ty::Binder::dummy(trait_ref), self.span)),\n+            ) {\n+                let bound_trait_ref = expansion.trait_ref();\n+                for item in self.impl_or_trait_item(bound_trait_ref.def_id()) {\n+                    if !self.has_applicable_self(&item) {\n+                        self.record_static_candidate(CandidateSource::Trait(\n+                            bound_trait_ref.def_id(),\n+                        ));\n+                    } else {\n+                        let new_trait_ref = self.erase_late_bound_regions(bound_trait_ref);\n \n-                let (xform_self_ty, xform_ret_ty) =\n-                    this.xform_self_ty(&item, new_trait_ref.self_ty(), new_trait_ref.substs);\n-                this.push_candidate(\n-                    Candidate {\n-                        xform_self_ty,\n-                        xform_ret_ty,\n-                        item,\n-                        import_ids: import_ids.clone(),\n-                        kind: TraitCandidate(new_trait_ref),\n-                    },\n-                    false,\n-                );\n-            });\n+                        let (xform_self_ty, xform_ret_ty) = self.xform_self_ty(\n+                            &item,\n+                            new_trait_ref.self_ty(),\n+                            new_trait_ref.substs,\n+                        );\n+                        self.push_candidate(\n+                            Candidate {\n+                                xform_self_ty,\n+                                xform_ret_ty,\n+                                item,\n+                                import_ids: import_ids.clone(),\n+                                kind: TraitCandidate(new_trait_ref),\n+                            },\n+                            false,\n+                        );\n+                    }\n+                }\n+            }\n         } else {\n             debug_assert!(self.tcx.is_trait(trait_def_id));\n             if self.tcx.trait_is_auto(trait_def_id) {"}, {"sha": "c8256e7ec08e61fbf015699c5380257775cc8227", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::ty::adjustment::{\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n-    self, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, IsSuggestable, Ty, TyCtxt, TypeSuperFoldable, TypeVisitable,\n };\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n@@ -963,8 +963,8 @@ fn is_builtin_binop<'tcx>(lhs: Ty<'tcx>, rhs: Ty<'tcx>, op: hir::BinOp) -> bool\n \n struct TypeParamEraser<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, Span);\n \n-impl<'tcx> TypeFolder<'tcx> for TypeParamEraser<'_, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for TypeParamEraser<'_, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.0.tcx\n     }\n "}, {"sha": "e909511346dcec65bf3e5f2fa7ac9d56b9a6d9a4", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -46,7 +46,7 @@ struct TopInfo<'tcx> {\n     /// Was the origin of the `span` from a scrutinee expression?\n     ///\n     /// Otherwise there is no scrutinee and it could be e.g. from the type of a formal parameter.\n-    origin_expr: bool,\n+    origin_expr: Option<&'tcx hir::Expr<'tcx>>,\n     /// The span giving rise to the `expected` type, if one could be provided.\n     ///\n     /// If `origin_expr` is `true`, then this is the span of the scrutinee as in:\n@@ -74,7 +74,8 @@ struct TopInfo<'tcx> {\n \n impl<'tcx> FnCtxt<'_, 'tcx> {\n     fn pattern_cause(&self, ti: TopInfo<'tcx>, cause_span: Span) -> ObligationCause<'tcx> {\n-        let code = Pattern { span: ti.span, root_ty: ti.expected, origin_expr: ti.origin_expr };\n+        let code =\n+            Pattern { span: ti.span, root_ty: ti.expected, origin_expr: ti.origin_expr.is_some() };\n         self.cause(cause_span, code)\n     }\n \n@@ -85,7 +86,14 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n         actual: Ty<'tcx>,\n         ti: TopInfo<'tcx>,\n     ) -> Option<DiagnosticBuilder<'tcx, ErrorGuaranteed>> {\n-        self.demand_eqtype_with_origin(&self.pattern_cause(ti, cause_span), expected, actual)\n+        let mut diag =\n+            self.demand_eqtype_with_origin(&self.pattern_cause(ti, cause_span), expected, actual)?;\n+        if let Some(expr) = ti.origin_expr {\n+            self.suggest_fn_call(&mut diag, expr, expected, |output| {\n+                self.can_eq(self.param_env, output, actual).is_ok()\n+            });\n+        }\n+        Some(diag)\n     }\n \n     fn demand_eqtype_pat(\n@@ -127,7 +135,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &'tcx Pat<'tcx>,\n         expected: Ty<'tcx>,\n         span: Option<Span>,\n-        origin_expr: bool,\n+        origin_expr: Option<&'tcx hir::Expr<'tcx>>,\n     ) {\n         let info = TopInfo { expected, origin_expr, span };\n         self.check_pat(pat, expected, INITIAL_BM, info);\n@@ -1288,7 +1296,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             )\n         });\n         let element_tys = tcx.mk_type_list(element_tys_iter);\n-        let pat_ty = tcx.mk_ty(ty::Tuple(element_tys));\n+        let pat_ty = tcx.intern_tup(element_tys);\n         if let Some(mut err) = self.demand_eqtype_pat_diag(span, expected, pat_ty, ti) {\n             let reported = err.emit();\n             // Walk subpatterns with an expected type of `err` in this case to silence\n@@ -2055,7 +2063,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         len: ty::Const<'tcx>,\n         min_len: u64,\n     ) -> (Option<Ty<'tcx>>, Ty<'tcx>) {\n-        if let Some(len) = len.try_eval_usize(self.tcx, self.param_env) {\n+        if let Some(len) = len.try_eval_target_usize(self.tcx, self.param_env) {\n             // Now we know the length...\n             if slice.is_none() {\n                 // ...and since there is no variable-length pattern,\n@@ -2146,7 +2154,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n         } else if self.autoderef(span, expected_ty)\n             .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n-            && let (Some(span), true) = (ti.span, ti.origin_expr)\n+            && let Some(span) = ti.span\n+            && let Some(_) = ti.origin_expr\n             && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span)\n         {\n             let ty = self.resolve_vars_if_possible(ti.expected);"}, {"sha": "b6c9a88c82dadd610839033f9f99964cff5d3642", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -13,8 +13,8 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::visit::TypeSuperVisitable;\n use rustc_middle::ty::TypeckResults;\n use rustc_middle::ty::{self, ClosureSizeProfileData, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n@@ -561,7 +561,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             struct RecursionChecker {\n                 def_id: LocalDefId,\n             }\n-            impl<'tcx> ty::TypeVisitor<'tcx> for RecursionChecker {\n+            impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for RecursionChecker {\n                 type BreakTy = ();\n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *t.kind() {\n@@ -763,8 +763,8 @@ struct EraseEarlyRegions<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseEarlyRegions<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n@@ -779,8 +779,8 @@ impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -797,7 +797,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 let e = self.report_error(t);\n                 self.replaced_with_error = Some(e);\n-                self.tcx().ty_error_with_guaranteed(e)\n+                self.interner().ty_error_with_guaranteed(e)\n             }\n         }\n     }\n@@ -814,7 +814,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 let e = self.report_error(ct);\n                 self.replaced_with_error = Some(e);\n-                self.tcx().const_error_with_guaranteed(ct.ty(), e)\n+                self.interner().const_error_with_guaranteed(ct.ty(), e)\n             }\n         }\n     }"}, {"sha": "5d861a78af8002f5fadde9634125a0f35cfc6a60", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -31,6 +31,8 @@ impl<'a> DescriptionCtx<'a> {\n \n             ty::RePlaceholder(_) => return None,\n \n+            ty::ReError(_) => return None,\n+\n             // FIXME(#13998) RePlaceholder should probably print like\n             // ReFree rather than dumping Debug output on the user.\n             //"}, {"sha": "6bfdeda3a246087c3f02a2687983bdc4a6be01ae", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -10,7 +10,7 @@ use crate::infer::canonical::{\n };\n use crate::infer::InferCtxt;\n use rustc_middle::ty::flags::FlagComputation;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, BoundVar, InferConst, List, Ty, TyCtxt, TypeFlags};\n use std::sync::atomic::Ordering;\n@@ -203,12 +203,10 @@ impl CanonicalizeMode for CanonicalizeQueryResponse {\n                 // rust-lang/rust#57464: `impl Trait` can leak local\n                 // scopes (in manner violating typeck). Therefore, use\n                 // `delay_span_bug` to allow type error over an ICE.\n-                ty::tls::with(|tcx| {\n-                    tcx.sess.delay_span_bug(\n-                        rustc_span::DUMMY_SP,\n-                        &format!(\"unexpected region in query response: `{:?}`\", r),\n-                    );\n-                });\n+                canonicalizer.tcx.sess.delay_span_bug(\n+                    rustc_span::DUMMY_SP,\n+                    &format!(\"unexpected region in query response: `{:?}`\", r),\n+                );\n                 r\n             }\n         }\n@@ -328,8 +326,8 @@ struct Canonicalizer<'cx, 'tcx> {\n     binder_index: ty::DebruijnIndex,\n }\n \n-impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -371,6 +369,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n \n             ty::ReStatic\n             | ty::ReEarlyBound(..)\n+            | ty::ReError(_)\n             | ty::ReFree(_)\n             | ty::RePlaceholder(..)\n             | ty::ReErased => self.canonicalize_mode.canonicalize_free_region(self, r),\n@@ -739,7 +738,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n         let var = self.canonical_var(info, r.into());\n         let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32(), None) };\n         let region = ty::ReLateBound(self.binder_index, br);\n-        self.tcx().mk_region(region)\n+        self.interner().mk_region(region)\n     }\n \n     /// Given a type variable `ty_var` of the given kind, first check\n@@ -753,7 +752,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.fold_ty(bound_to)\n         } else {\n             let var = self.canonical_var(info, ty_var.into());\n-            self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))\n+            self.interner().mk_bound(self.binder_index, var.into())\n         }\n     }\n \n@@ -772,7 +771,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n             self.fold_const(bound_to)\n         } else {\n             let var = self.canonical_var(info, const_var.into());\n-            self.tcx().mk_const(\n+            self.interner().mk_const(\n                 ty::ConstKind::Bound(self.binder_index, var),\n                 self.fold_ty(const_var.ty()),\n             )"}, {"sha": "d5cb3fb24984871cb8393a0a4d79c1faeb6b8ba0", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -124,7 +124,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             CanonicalVarKind::PlaceholderTy(ty::PlaceholderType { universe, name }) => {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderType { universe: universe_mapped, name };\n-                self.tcx.mk_ty(ty::Placeholder(placeholder_mapped)).into()\n+                self.tcx.mk_placeholder(placeholder_mapped).into()\n             }\n \n             CanonicalVarKind::Region(ui) => self"}, {"sha": "0c97217bd6a5dbda676e00acd798c5a650d6e7a3", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -12,7 +12,7 @@ use crate::infer::canonical::{\n     Canonical, CanonicalQueryResponse, CanonicalVarValues, Certainty, OriginalQueryValues,\n     QueryOutlivesConstraint, QueryRegionConstraints, QueryResponse,\n };\n-use crate::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n+use crate::infer::nll_relate::{TypeRelating, TypeRelatingDelegate};\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::{InferCtxt, InferOk, InferResult, NllRegionVariableOrigin};\n use crate::traits::query::{Fallible, NoSolution};\n@@ -717,10 +717,6 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         });\n     }\n \n-    fn normalization() -> NormalizationStrategy {\n-        NormalizationStrategy::Eager\n-    }\n-\n     fn forbid_inference_vars() -> bool {\n         true\n     }"}, {"sha": "964222307bcafc8158c17ef6e66de65631acd0bc", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 97, "deletions": 34, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -31,15 +31,17 @@ use super::{InferCtxt, MiscVariable, TypeTrace};\n use crate::traits::{Obligation, PredicateObligations};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::infer::canonical::OriginalQueryValues;\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n+use rustc_middle::traits::query::NoSolution;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{\n-    self, FallibleTypeFolder, InferConst, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, ir::FallibleTypeFolder, AliasKind, InferConst, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable,\n };\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n@@ -74,7 +76,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         b: Ty<'tcx>,\n     ) -> RelateResult<'tcx, Ty<'tcx>>\n     where\n-        R: TypeRelation<'tcx>,\n+        R: ObligationEmittingRelation<'tcx>,\n     {\n         let a_is_expected = relation.a_is_expected();\n \n@@ -122,6 +124,15 @@ impl<'tcx> InferCtxt<'tcx> {\n                 Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))\n             }\n \n+            (ty::Alias(AliasKind::Projection, _), _) if self.tcx.trait_solver_next() => {\n+                relation.register_type_equate_obligation(a.into(), b.into());\n+                Ok(b)\n+            }\n+            (_, ty::Alias(AliasKind::Projection, _)) if self.tcx.trait_solver_next() => {\n+                relation.register_type_equate_obligation(b.into(), a.into());\n+                Ok(a)\n+            }\n+\n             _ => ty::relate::super_relate_tys(relation, a, b),\n         }\n     }\n@@ -133,7 +144,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         b: ty::Const<'tcx>,\n     ) -> RelateResult<'tcx, ty::Const<'tcx>>\n     where\n-        R: ConstEquateRelation<'tcx>,\n+        R: ObligationEmittingRelation<'tcx>,\n     {\n         debug!(\"{}.consts({:?}, {:?})\", relation.tag(), a, b);\n         if a == b {\n@@ -143,6 +154,34 @@ impl<'tcx> InferCtxt<'tcx> {\n         let a = self.shallow_resolve(a);\n         let b = self.shallow_resolve(b);\n \n+        // We should never have to relate the `ty` field on `Const` as it is checked elsewhere that consts have the\n+        // correct type for the generic param they are an argument for. However there have been a number of cases\n+        // historically where asserting that the types are equal has found bugs in the compiler so this is valuable\n+        // to check even if it is a bit nasty impl wise :(\n+        //\n+        // This probe is probably not strictly necessary but it seems better to be safe and not accidentally find\n+        // ourselves with a check to find bugs being required for code to compile because it made inference progress.\n+        self.probe(|_| {\n+            if a.ty() == b.ty() {\n+                return;\n+            }\n+\n+            // We don't have access to trait solving machinery in `rustc_infer` so the logic for determining if the\n+            // two const param's types are able to be equal has to go through a canonical query with the actual logic\n+            // in `rustc_trait_selection`.\n+            let canonical = self.canonicalize_query(\n+                (relation.param_env(), a.ty(), b.ty()),\n+                &mut OriginalQueryValues::default(),\n+            );\n+\n+            if let Err(NoSolution) = self.tcx.check_tys_might_be_eq(canonical) {\n+                self.tcx.sess.delay_span_bug(\n+                    DUMMY_SP,\n+                    &format!(\"cannot relate consts of different types (a={:?}, b={:?})\", a, b,),\n+                );\n+            }\n+        });\n+\n         match (a.kind(), b.kind()) {\n             (\n                 ty::ConstKind::Infer(InferConst::Var(a_vid)),\n@@ -169,15 +208,15 @@ impl<'tcx> InferCtxt<'tcx> {\n                 // FIXME(#59490): Need to remove the leak check to accommodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n-                    relation.const_equate_obligation(a, b);\n+                    relation.register_const_equate_obligation(a, b);\n                 }\n                 return Ok(b);\n             }\n             (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {\n                 // FIXME(#59490): Need to remove the leak check to accommodate\n                 // escaping bound variables here.\n                 if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n-                    relation.const_equate_obligation(a, b);\n+                    relation.register_const_equate_obligation(a, b);\n                 }\n                 return Ok(a);\n             }\n@@ -435,32 +474,21 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         Ok(Generalization { ty, needs_wf })\n     }\n \n-    pub fn add_const_equate_obligation(\n+    pub fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.obligations.extend(obligations.into_iter());\n+    }\n+\n+    pub fn register_predicates(\n         &mut self,\n-        a_is_expected: bool,\n-        a: ty::Const<'tcx>,\n-        b: ty::Const<'tcx>,\n+        obligations: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n     ) {\n-        let predicate = if a_is_expected {\n-            ty::PredicateKind::ConstEquate(a, b)\n-        } else {\n-            ty::PredicateKind::ConstEquate(b, a)\n-        };\n-        self.obligations.push(Obligation::new(\n-            self.tcx(),\n-            self.trace.cause.clone(),\n-            self.param_env,\n-            ty::Binder::dummy(predicate),\n-        ));\n+        self.obligations.extend(obligations.into_iter().map(|to_pred| {\n+            Obligation::new(self.infcx.tcx, self.trace.cause.clone(), self.param_env, to_pred)\n+        }))\n     }\n \n     pub fn mark_ambiguous(&mut self) {\n-        self.obligations.push(Obligation::new(\n-            self.tcx(),\n-            self.trace.cause.clone(),\n-            self.param_env,\n-            ty::Binder::dummy(ty::PredicateKind::Ambiguous),\n-        ));\n+        self.register_predicates([ty::Binder::dummy(ty::PredicateKind::Ambiguous)]);\n     }\n }\n \n@@ -705,6 +733,10 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 return Ok(r);\n             }\n \n+            ty::ReError(_) => {\n+                return Ok(r);\n+            }\n+\n             ty::RePlaceholder(..)\n             | ty::ReVar(..)\n             | ty::ReStatic\n@@ -775,11 +807,42 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     }\n }\n \n-pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {\n+pub trait ObligationEmittingRelation<'tcx>: TypeRelation<'tcx> {\n+    /// Register obligations that must hold in order for this relation to hold\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>);\n+\n+    /// Register predicates that must hold in order for this relation to hold. Uses\n+    /// a default obligation cause, [`ObligationEmittingRelation::register_obligations`] should\n+    /// be used if control over the obligaton causes is required.\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ToPredicate<'tcx>>,\n+    );\n+\n     /// Register an obligation that both constants must be equal to each other.\n     ///\n     /// If they aren't equal then the relation doesn't hold.\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n+    fn register_const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n+        let (a, b) = if self.a_is_expected() { (a, b) } else { (b, a) };\n+\n+        self.register_predicates([ty::Binder::dummy(if self.tcx().trait_solver_next() {\n+            ty::PredicateKind::AliasEq(a.into(), b.into())\n+        } else {\n+            ty::PredicateKind::ConstEquate(a, b)\n+        })]);\n+    }\n+\n+    /// Register an obligation that both types must be equal to each other.\n+    ///\n+    /// If they aren't equal then the relation doesn't hold.\n+    fn register_type_equate_obligation(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) {\n+        let (a, b) = if self.a_is_expected() { (a, b) } else { (b, a) };\n+\n+        self.register_predicates([ty::Binder::dummy(ty::PredicateKind::AliasEq(\n+            a.into(),\n+            b.into(),\n+        ))]);\n+    }\n }\n \n fn int_unification_error<'tcx>(\n@@ -811,10 +874,10 @@ struct ConstInferUnifier<'cx, 'tcx> {\n     target_vid: ty::ConstVid<'tcx>,\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for ConstInferUnifier<'_, 'tcx> {\n     type Error = TypeError<'tcx>;\n \n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -842,7 +905,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                             .borrow_mut()\n                             .type_variables()\n                             .new_var(self.for_universe, origin);\n-                        Ok(self.tcx().mk_ty_var(new_var_id))\n+                        Ok(self.interner().mk_ty_var(new_var_id))\n                     }\n                 }\n             }\n@@ -861,7 +924,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         match *r {\n             // Never make variables for regions bound within the type itself,\n             // nor for erased regions.\n-            ty::ReLateBound(..) | ty::ReErased => {\n+            ty::ReLateBound(..) | ty::ReErased | ty::ReError(_) => {\n                 return Ok(r);\n             }\n \n@@ -920,7 +983,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                                         },\n                                     },\n                                 );\n-                            Ok(self.tcx().mk_const(new_var_id, c.ty()))\n+                            Ok(self.interner().mk_const(new_var_id, c.ty()))\n                         }\n                     }\n                 }"}, {"sha": "742c01efff60352f5f995516571780c56af37d07", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,4 +1,6 @@\n-use super::combine::{CombineFields, ConstEquateRelation, RelationDir};\n+use crate::traits::PredicateObligations;\n+\n+use super::combine::{CombineFields, ObligationEmittingRelation, RelationDir};\n use super::Subtype;\n \n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n@@ -198,8 +200,15 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n     }\n }\n \n-impl<'tcx> ConstEquateRelation<'tcx> for Equate<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+impl<'tcx> ObligationEmittingRelation<'tcx> for Equate<'_, '_, 'tcx> {\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.fields.register_predicates(obligations);\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.fields.register_obligations(obligations);\n     }\n }"}, {"sha": "1d3fcf7571ebc83ca542c940c4250215be652739", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 106, "deletions": 12, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -64,6 +64,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::Node;\n use rustc_middle::dep_graph::DepContext;\n@@ -134,6 +135,8 @@ pub(super) fn note_and_explain_region<'tcx>(\n \n         ty::RePlaceholder(_) => return,\n \n+        ty::ReError(_) => return,\n+\n         // FIXME(#13998) RePlaceholder should probably print like\n         // ReFree rather than dumping Debug output on the user.\n         //\n@@ -313,6 +316,9 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n                 )\n             }\n         }\n+        ty::ReError(_) => {\n+            err.delay_as_bug();\n+        }\n         _ => {\n             // Ugh. This is a painful case: the hidden region is not one\n             // that we can easily summarize or explain. This can happen\n@@ -1486,7 +1492,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);\n@@ -1778,14 +1784,24 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                             }\n                         }))\n                     {\n-                        diag.note_expected_found_extra(\n-                            &expected_label,\n-                            expected,\n-                            &found_label,\n-                            found,\n-                            &sort_string(values.expected, exp_p),\n-                            &sort_string(values.found, found_p),\n-                        );\n+                        if let Some(ExpectedFound { found: found_ty, .. }) = exp_found {\n+                            // `Future` is a special opaque type that the compiler\n+                            // will try to hide in some case such as `async fn`, so\n+                            // to make an error more use friendly we will\n+                            // avoid to suggest a mismatch type with a\n+                            // type that the user usually are not usign\n+                            // directly such as `impl Future<Output = u8>`.\n+                            if !self.tcx.ty_is_opaque_future(found_ty) {\n+                                diag.note_expected_found_extra(\n+                                    &expected_label,\n+                                    expected,\n+                                    &found_label,\n+                                    found,\n+                                    &sort_string(values.expected, exp_p),\n+                                    &sort_string(values.found, found_p),\n+                                );\n+                            }\n+                        }\n                     }\n                 }\n                 _ => {\n@@ -1970,6 +1986,70 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         (ty::Bool, ty::Tuple(list)) => if list.len() == 0 {\n                             self.suggest_let_for_letchains(&mut err, &trace.cause, span);\n                         }\n+                        (ty::Array(_, _), ty::Array(_, _)) => 'block: {\n+                            let hir = self.tcx.hir();\n+                            let TypeError::FixedArraySize(sz) = terr else {\n+                                break 'block;\n+                            };\n+                            let tykind = match hir.find_by_def_id(trace.cause.body_id) {\n+                                Some(hir::Node::Item(hir::Item {\n+                                    kind: hir::ItemKind::Fn(_, _, body_id),\n+                                    ..\n+                                })) => {\n+                                    let body = hir.body(*body_id);\n+                                    struct LetVisitor<'v> {\n+                                        span: Span,\n+                                        result: Option<&'v hir::Ty<'v>>,\n+                                    }\n+                                    impl<'v> Visitor<'v> for LetVisitor<'v> {\n+                                        fn visit_stmt(&mut self, s: &'v hir::Stmt<'v>) {\n+                                            if self.result.is_some() {\n+                                                return;\n+                                            }\n+                                            // Find a local statement where the initializer has\n+                                            // the same span as the error and the type is specified.\n+                                            if let hir::Stmt {\n+                                                kind: hir::StmtKind::Local(hir::Local {\n+                                                    init: Some(hir::Expr {\n+                                                        span: init_span,\n+                                                        ..\n+                                                    }),\n+                                                    ty: Some(array_ty),\n+                                                    ..\n+                                                }),\n+                                                ..\n+                                            } = s\n+                                            && init_span == &self.span {\n+                                                self.result = Some(*array_ty);\n+                                            }\n+                                        }\n+                                    }\n+                                    let mut visitor = LetVisitor {span, result: None};\n+                                    visitor.visit_body(body);\n+                                    visitor.result.map(|r| &r.peel_refs().kind)\n+                                }\n+                                Some(hir::Node::Item(hir::Item {\n+                                    kind: hir::ItemKind::Const(ty, _),\n+                                    ..\n+                                })) => {\n+                                    Some(&ty.peel_refs().kind)\n+                                }\n+                                _ => None\n+                            };\n+\n+                            if let Some(tykind) = tykind\n+                                && let hir::TyKind::Array(_, length) = tykind\n+                                && let hir::ArrayLen::Body(hir::AnonConst { hir_id, .. }) = length\n+                                && let Some(span) = self.tcx.hir().opt_span(*hir_id)\n+                            {\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"consider specifying the actual array length\",\n+                                    sz.found,\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n                         _ => {}\n                     }\n                 }\n@@ -2546,7 +2626,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             );\n \n             err.note_expected_found(&\"\", sup_expected, &\"\", sup_found);\n-            err.emit();\n+            if sub_region.is_error() | sup_region.is_error() {\n+                err.delay_as_bug();\n+            } else {\n+                err.emit();\n+            }\n             return;\n         }\n \n@@ -2562,7 +2646,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         );\n \n         self.note_region_origin(&mut err, &sub_origin);\n-        err.emit();\n+        if sub_region.is_error() | sup_region.is_error() {\n+            err.delay_as_bug();\n+        } else {\n+            err.emit();\n+        }\n     }\n \n     /// Determine whether an error associated with the given span and definition\n@@ -2841,6 +2929,7 @@ impl IntoDiagnosticArg for ObligationCauseAsDiagArg<'_> {\n pub enum TyCategory {\n     Closure,\n     Opaque,\n+    OpaqueFuture,\n     Generator(hir::GeneratorKind),\n     Foreign,\n }\n@@ -2850,6 +2939,7 @@ impl TyCategory {\n         match self {\n             Self::Closure => \"closure\",\n             Self::Opaque => \"opaque type\",\n+            Self::OpaqueFuture => \"future\",\n             Self::Generator(gk) => gk.descr(),\n             Self::Foreign => \"foreign type\",\n         }\n@@ -2858,7 +2948,11 @@ impl TyCategory {\n     pub fn from_ty(tcx: TyCtxt<'_>, ty: Ty<'_>) -> Option<(Self, DefId)> {\n         match *ty.kind() {\n             ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => Some((Self::Opaque, def_id)),\n+            ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) => {\n+                let kind =\n+                    if tcx.ty_is_opaque_future(ty) { Self::OpaqueFuture } else { Self::Opaque };\n+                Some((kind, def_id))\n+            }\n             ty::Generator(def_id, ..) => {\n                 Some((Self::Generator(tcx.generator_kind(def_id).unwrap()), def_id))\n             }"}, {"sha": "c092efbb557cf76acbf6ec427ecacec9e8e036be", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -158,8 +158,12 @@ fn fmt_printer<'a, 'tcx>(infcx: &'a InferCtxt<'tcx>, ns: Namespace) -> FmtPrinte\n         if infcx.probe_ty_var(ty_vid).is_ok() {\n             warn!(\"resolved ty var in error message\");\n         }\n-        if let TypeVariableOriginKind::TypeParameterDefinition(name, _) =\n-            infcx.inner.borrow_mut().type_variables().var_origin(ty_vid).kind\n+\n+        let mut infcx_inner = infcx.inner.borrow_mut();\n+        let ty_vars = infcx_inner.type_variables();\n+        let var_origin = ty_vars.var_origin(ty_vid);\n+        if let TypeVariableOriginKind::TypeParameterDefinition(name, _) = var_origin.kind\n+            && !var_origin.span.from_expansion()\n         {\n             Some(name)\n         } else {\n@@ -254,7 +258,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     if let TypeVariableOriginKind::TypeParameterDefinition(name, def_id) =\n                         var_origin.kind\n                     {\n-                        if name != kw::SelfUpper {\n+                        if name != kw::SelfUpper && !var_origin.span.from_expansion() {\n                             return InferenceDiagnosticsData {\n                                 name: name.to_string(),\n                                 span: Some(var_origin.span),\n@@ -780,7 +784,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         // The sources are listed in order of preference here.\n         let tcx = self.infcx.tcx;\n         let ctx = CostCtxt { tcx };\n-        let base_cost = match source.kind {\n+        match source.kind {\n             InferSourceKind::LetBinding { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::ClosureArg { ty, .. } => ctx.ty_cost(ty),\n             InferSourceKind::GenericArg { def_id, generic_args, .. } => {\n@@ -797,17 +801,17 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             InferSourceKind::ClosureReturn { ty, should_wrap_expr, .. } => {\n                 30 + ctx.ty_cost(ty) + if should_wrap_expr.is_some() { 10 } else { 0 }\n             }\n-        };\n-\n-        let suggestion_may_apply = if source.from_expansion() { 10000 } else { 0 };\n-\n-        base_cost + suggestion_may_apply\n+        }\n     }\n \n     /// Uses `fn source_cost` to determine whether this inference source is preferable to\n     /// previous sources. We generally prefer earlier sources.\n     #[instrument(level = \"debug\", skip(self))]\n     fn update_infer_source(&mut self, mut new_source: InferSource<'tcx>) {\n+        if new_source.from_expansion() {\n+            return;\n+        }\n+\n         let cost = self.source_cost(&new_source) + self.attempt;\n         debug!(?cost);\n         self.attempt += 1;\n@@ -819,6 +823,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             // `let x: _ = iter.collect();`, as this is a very common case.\n             *def_id = Some(did);\n         }\n+\n         if cost < self.infer_source_cost {\n             self.infer_source_cost = cost;\n             self.infer_source = Some(new_source);"}, {"sha": "641477e907dfaa2e8b3d74cbaebcbffd2ce4bc8e", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -17,7 +17,8 @@ use rustc_hir::{\n     TyKind,\n };\n use rustc_middle::ty::{\n-    self, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, AssocItemContainer, StaticLifetimeVisitor, Ty, TyCtxt,\n+    TypeSuperVisitable,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n@@ -539,7 +540,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n /// Collect all the trait objects in a type that could have received an implicit `'static` lifetime.\n pub struct TraitObjectVisitor(pub FxIndexSet<DefId>);\n \n-impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for TraitObjectVisitor {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Dynamic(preds, re, _) if re.is_static() => {"}, {"sha": "d295881d5d7a0b6bf758a2ed792e95cead57e7d2", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for HighlightBuilder<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for HighlightBuilder<'tcx> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !r.has_name() && self.counter <= 3 {\n                     self.highlight.highlighting_region(r, self.counter);"}, {"sha": "bdd09a995dc23a96b53b2a8f584b25821baa7132", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         sub: Region<'tcx>,\n         sup: Region<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        match origin {\n+        let mut err = match origin {\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n                 let mut err = self.report_and_explain_type_error(trace, terr);\n@@ -299,7 +299,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n                 err\n             }\n+        };\n+        if sub.is_error() || sup.is_error() {\n+            err.delay_as_bug();\n         }\n+        err\n     }\n \n     pub fn suggest_copy_trait_method_bounds("}, {"sha": "7d9a53d1c025ff15e9cfa15f6908880a5ebb6fd0", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -238,31 +238,17 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 }\n             },\n             (_, Some(ty)) if self.same_type_modulo_infer(exp_found.expected, ty) => {\n-                diag.span_suggestion_verbose(\n-                    exp_span.shrink_to_hi(),\n-                    \"consider `await`ing on the `Future`\",\n-                    \".await\",\n-                    Applicability::MaybeIncorrect,\n-                );\n+                self.suggest_await_on_future(diag, exp_span);\n+                diag.span_note(exp_span, \"calling an async function returns a future\");\n             }\n             (Some(ty), _) if self.same_type_modulo_infer(ty, exp_found.found) => match cause.code()\n             {\n                 ObligationCauseCode::Pattern { span: Some(then_span), .. } => {\n-                    diag.span_suggestion_verbose(\n-                        then_span.shrink_to_hi(),\n-                        \"consider `await`ing on the `Future`\",\n-                        \".await\",\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    self.suggest_await_on_future(diag, then_span.shrink_to_hi());\n                 }\n                 ObligationCauseCode::IfExpression(box IfExpressionCause { then_id, .. }) => {\n                     let then_span = self.find_block_span_from_hir_id(*then_id);\n-                    diag.span_suggestion_verbose(\n-                        then_span.shrink_to_hi(),\n-                        \"consider `await`ing on the `Future`\",\n-                        \".await\",\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    self.suggest_await_on_future(diag, then_span.shrink_to_hi());\n                 }\n                 ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                     ref prior_arms,\n@@ -283,6 +269,15 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n     }\n \n+    pub fn suggest_await_on_future(&self, diag: &mut Diagnostic, sp: Span) {\n+        diag.span_suggestion_verbose(\n+            sp.shrink_to_hi(),\n+            \"consider `await`ing on the `Future`\",\n+            \".await\",\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     pub(super) fn suggest_accessing_field_where_appropriate(\n         &self,\n         cause: &ObligationCause<'tcx>,"}, {"sha": "41bffdc684da43650edc660159b42bc150a86b81", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -33,8 +33,8 @@\n use super::InferCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::infer::unify_key::ToType;\n-use rustc_middle::ty::fold::TypeFolder;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable};\n+use rustc_middle::ty::fold::ir::TypeFolder;\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use std::collections::hash_map::Entry;\n \n pub struct TypeFreshener<'a, 'tcx> {\n@@ -58,14 +58,9 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n         }\n     }\n \n-    fn freshen_ty<F>(\n-        &mut self,\n-        opt_ty: Option<Ty<'tcx>>,\n-        key: ty::InferTy,\n-        freshener: F,\n-    ) -> Ty<'tcx>\n+    fn freshen_ty<F>(&mut self, opt_ty: Option<Ty<'tcx>>, key: ty::InferTy, mk_fresh: F) -> Ty<'tcx>\n     where\n-        F: FnOnce(u32) -> ty::InferTy,\n+        F: FnOnce(u32) -> Ty<'tcx>,\n     {\n         if let Some(ty) = opt_ty {\n             return ty.fold_with(self);\n@@ -76,7 +71,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n             Entry::Vacant(entry) => {\n                 let index = self.ty_freshen_count;\n                 self.ty_freshen_count += 1;\n-                let t = self.infcx.tcx.mk_ty_infer(freshener(index));\n+                let t = mk_fresh(index);\n                 entry.insert(t);\n                 t\n             }\n@@ -110,8 +105,8 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for TypeFreshener<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -126,15 +121,16 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::ReFree(_)\n             | ty::ReVar(_)\n             | ty::RePlaceholder(..)\n+            | ty::ReError(_)\n             | ty::ReErased => {\n                 // replace all free regions with 'erased\n-                self.tcx().lifetimes.re_erased\n+                self.interner().lifetimes.re_erased\n             }\n             ty::ReStatic => {\n                 if self.keep_static {\n                     r\n                 } else {\n-                    self.tcx().lifetimes.re_erased\n+                    self.interner().lifetimes.re_erased\n                 }\n             }\n         }\n@@ -203,7 +199,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n         match v {\n             ty::TyVar(v) => {\n                 let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();\n-                Some(self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy))\n+                Some(self.freshen_ty(opt_ty, ty::TyVar(v), |n| self.infcx.tcx.mk_fresh_ty(n)))\n             }\n \n             ty::IntVar(v) => Some(\n@@ -215,7 +211,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n                         .probe_value(v)\n                         .map(|v| v.to_type(self.infcx.tcx)),\n                     ty::IntVar(v),\n-                    ty::FreshIntTy,\n+                    |n| self.infcx.tcx.mk_fresh_int_ty(n),\n                 ),\n             ),\n \n@@ -228,7 +224,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n                         .probe_value(v)\n                         .map(|v| v.to_type(self.infcx.tcx)),\n                     ty::FloatVar(v),\n-                    ty::FreshFloatTy,\n+                    |n| self.infcx.tcx.mk_fresh_float_ty(n),\n                 ),\n             ),\n "}, {"sha": "cc2f19a5704900bd4f95c4746a44cc73168675aa", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::{self, ConstVid, FloatVid, IntVid, RegionVid, Ty, TyCtxt, TyVid};\n \n use super::type_variable::TypeVariableOrigin;\n@@ -175,8 +175,8 @@ pub struct InferenceFudger<'a, 'tcx> {\n     const_vars: (Range<ConstVid<'tcx>>, Vec<ConstVariableOrigin>),\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for InferenceFudger<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for InferenceFudger<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "74abca7bbea36bbfd1f7b5a8c76189d3f593cde0", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,12 +1,11 @@\n //! Greatest lower bound. See [`lattice`].\n \n-use super::combine::CombineFields;\n+use super::combine::{CombineFields, ObligationEmittingRelation};\n use super::lattice::{self, LatticeDir};\n use super::InferCtxt;\n use super::Subtype;\n \n-use crate::infer::combine::ConstEquateRelation;\n-use crate::traits::{ObligationCause, PredicateObligation};\n+use crate::traits::{ObligationCause, PredicateObligations};\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n@@ -136,10 +135,6 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx,\n         &self.fields.trace.cause\n     }\n \n-    fn add_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>) {\n-        self.fields.obligations.extend(obligations)\n-    }\n-\n     fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n         let mut sub = self.fields.sub(self.a_is_expected);\n         sub.relate(v, a)?;\n@@ -152,8 +147,15 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Glb<'combine, 'infcx,\n     }\n }\n \n-impl<'tcx> ConstEquateRelation<'tcx> for Glb<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+impl<'tcx> ObligationEmittingRelation<'tcx> for Glb<'_, '_, 'tcx> {\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.fields.register_predicates(obligations);\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.fields.register_obligations(obligations);\n     }\n }"}, {"sha": "39940f4592ded7982d93515c880121f5ecb320b3", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -88,10 +88,10 @@ impl<'tcx> InferCtxt<'tcx> {\n                 }))\n             },\n             types: &mut |bound_ty: ty::BoundTy| {\n-                self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: next_universe,\n                     name: bound_ty.kind,\n-                }))\n+                })\n             },\n             consts: &mut |bound_var: ty::BoundVar, ty| {\n                 self.tcx"}, {"sha": "f377ac1d19e9c66a0554c7e113e45353f91e66de", "filename": "compiler/rustc_infer/src/infer/lattice.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flattice.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -17,11 +17,12 @@\n //!\n //! [lattices]: https://en.wikipedia.org/wiki/Lattice_(order)\n \n+use super::combine::ObligationEmittingRelation;\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::InferCtxt;\n \n-use crate::traits::{ObligationCause, PredicateObligation};\n-use rustc_middle::ty::relate::{RelateResult, TypeRelation};\n+use crate::traits::ObligationCause;\n+use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::TyVar;\n use rustc_middle::ty::{self, Ty};\n \n@@ -30,13 +31,11 @@ use rustc_middle::ty::{self, Ty};\n ///\n /// GLB moves \"down\" the lattice (to smaller values); LUB moves\n /// \"up\" the lattice (to bigger values).\n-pub trait LatticeDir<'f, 'tcx>: TypeRelation<'tcx> {\n+pub trait LatticeDir<'f, 'tcx>: ObligationEmittingRelation<'tcx> {\n     fn infcx(&self) -> &'f InferCtxt<'tcx>;\n \n     fn cause(&self) -> &ObligationCause<'tcx>;\n \n-    fn add_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>);\n-\n     fn define_opaque_types(&self) -> bool;\n \n     // Relates the type `v` to `a` and `b` such that `v` represents\n@@ -113,7 +112,7 @@ where\n         | (_, &ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }))\n             if this.define_opaque_types() && def_id.is_local() =>\n         {\n-            this.add_obligations(\n+            this.register_obligations(\n                 infcx\n                     .handle_opaque_type(a, b, this.a_is_expected(), this.cause(), this.param_env())?\n                     .obligations,"}, {"sha": "4a2210bdb68d020113ce4e7d5db8aa13e0823b5a", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -17,7 +17,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::PlaceholderRegion;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_middle::ty::{ReEarlyBound, ReErased, ReFree, ReStatic};\n+use rustc_middle::ty::{ReEarlyBound, ReErased, ReError, ReFree, ReStatic};\n use rustc_middle::ty::{ReLateBound, RePlaceholder, ReVar};\n use rustc_middle::ty::{Region, RegionVid};\n use rustc_span::Span;\n@@ -216,6 +216,8 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 Ok(self.tcx().lifetimes.re_static)\n             }\n \n+            ReError(_) => Ok(a_region),\n+\n             ReEarlyBound(_) | ReFree(_) => {\n                 // All empty regions are less than early-bound, free,\n                 // and scope regions.\n@@ -436,7 +438,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             (VarValue::Value(a), VarValue::Empty(_)) => {\n                 match *a {\n-                    ReLateBound(..) | ReErased => {\n+                    ReLateBound(..) | ReErased | ReError(_) => {\n                         bug!(\"cannot relate region: {:?}\", a);\n                     }\n \n@@ -465,7 +467,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             (VarValue::Empty(a_ui), VarValue::Value(b)) => {\n                 match *b {\n-                    ReLateBound(..) | ReErased => {\n+                    ReLateBound(..) | ReErased | ReError(_) => {\n                         bug!(\"cannot relate region: {:?}\", b);\n                     }\n \n@@ -546,6 +548,10 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 );\n             }\n \n+            (ReError(_), _) => a,\n+\n+            (_, ReError(_)) => b,\n+\n             (ReStatic, _) | (_, ReStatic) => {\n                 // nothing lives longer than `'static`\n                 self.tcx().lifetimes.re_static\n@@ -1040,7 +1046,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n             ty::ReVar(rid) => match self.values[rid] {\n                 VarValue::Empty(_) => r,\n                 VarValue::Value(r) => r,\n-                VarValue::ErrorValue => tcx.lifetimes.re_static,\n+                VarValue::ErrorValue => tcx.re_error_misc(),\n             },\n             _ => r,\n         };"}, {"sha": "f997171b97f2740a07029830f81967b16b39c98e", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,12 +1,11 @@\n //! Least upper bound. See [`lattice`].\n \n-use super::combine::CombineFields;\n+use super::combine::{CombineFields, ObligationEmittingRelation};\n use super::lattice::{self, LatticeDir};\n use super::InferCtxt;\n use super::Subtype;\n \n-use crate::infer::combine::ConstEquateRelation;\n-use crate::traits::{ObligationCause, PredicateObligation};\n+use crate::traits::{ObligationCause, PredicateObligations};\n use rustc_middle::ty::relate::{Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n@@ -127,12 +126,6 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n     }\n }\n \n-impl<'tcx> ConstEquateRelation<'tcx> for Lub<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n-    }\n-}\n-\n impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx, 'tcx> {\n     fn infcx(&self) -> &'infcx InferCtxt<'tcx> {\n         self.fields.infcx\n@@ -142,10 +135,6 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx,\n         &self.fields.trace.cause\n     }\n \n-    fn add_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>) {\n-        self.fields.obligations.extend(obligations)\n-    }\n-\n     fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()> {\n         let mut sub = self.fields.sub(self.a_is_expected);\n         sub.relate(a, v)?;\n@@ -157,3 +146,16 @@ impl<'combine, 'infcx, 'tcx> LatticeDir<'infcx, 'tcx> for Lub<'combine, 'infcx,\n         self.fields.define_opaque_types\n     }\n }\n+\n+impl<'tcx> ObligationEmittingRelation<'tcx> for Lub<'_, '_, 'tcx> {\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.fields.register_predicates(obligations);\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.fields.register_obligations(obligations)\n+    }\n+}"}, {"sha": "b5a10ea659037eb611a7035c095271667f9935b3", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -4,6 +4,7 @@ pub use self::LateBoundRegionConversionTime::*;\n pub use self::RegionVariableOrigin::*;\n pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n+pub use combine::ObligationEmittingRelation;\n \n use self::opaque_types::OpaqueTypeStorage;\n pub(crate) use self::undo_log::{InferCtxtUndoLogs, Snapshot, UndoLog};\n@@ -25,7 +26,7 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BoundVarReplacerDelegate;\n-use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::visit::TypeVisitable;\n@@ -1851,8 +1852,8 @@ struct InferenceLiteralEraser<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for InferenceLiteralEraser<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for InferenceLiteralEraser<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1869,8 +1870,8 @@ struct ShallowResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for ShallowResolver<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -2063,21 +2064,21 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n         idx: u32,\n     }\n \n-    impl<'tcx> TypeFolder<'tcx> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n-        fn tcx(&self) -> TyCtxt<'tcx> {\n+    impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n+        fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n \n         fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n             if let ty::Infer(_) = t.kind() {\n-                self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+                self.tcx.mk_placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::ROOT,\n                     name: ty::BoundTyKind::Anon({\n                         let idx = self.idx;\n                         self.idx += 1;\n                         idx\n                     }),\n-                }))\n+                })\n             } else {\n                 t.super_fold_with(self)\n             }"}, {"sha": "644774c93c2a46aa8f1d0630ec856f27fc2607c9", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 22, "deletions": 71, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -21,26 +21,21 @@\n //!   thing we relate in chalk are basically domain goals and their\n //!   constituents)\n \n-use crate::infer::combine::ConstEquateRelation;\n use crate::infer::InferCtxt;\n use crate::infer::{ConstVarValue, ConstVariableValue};\n use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n-use crate::traits::{Obligation, PredicateObligation};\n+use crate::traits::{Obligation, PredicateObligations};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n use rustc_span::Span;\n use std::fmt::Debug;\n use std::ops::ControlFlow;\n \n-#[derive(PartialEq)]\n-pub enum NormalizationStrategy {\n-    Lazy,\n-    Eager,\n-}\n+use super::combine::ObligationEmittingRelation;\n \n pub struct TypeRelating<'me, 'tcx, D>\n where\n@@ -92,7 +87,7 @@ pub trait TypeRelatingDelegate<'tcx> {\n         info: ty::VarianceDiagInfo<'tcx>,\n     );\n \n-    fn register_obligations(&mut self, obligations: Vec<PredicateObligation<'tcx>>);\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>);\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n     fn create_next_universe(&mut self) -> ty::UniverseIndex;\n@@ -125,9 +120,6 @@ pub trait TypeRelatingDelegate<'tcx> {\n     /// relation stating that `'?0: 'a`).\n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx>;\n \n-    /// Define the normalization strategy to use, eager or lazy.\n-    fn normalization() -> NormalizationStrategy;\n-\n     /// Enables some optimizations if we do not expect inference variables\n     /// in the RHS of the relation.\n     fn forbid_inference_vars() -> bool;\n@@ -265,38 +257,6 @@ where\n         self.delegate.push_outlives(sup, sub, info);\n     }\n \n-    /// Relate a projection type and some value type lazily. This will always\n-    /// succeed, but we push an additional `ProjectionEq` goal depending\n-    /// on the value type:\n-    /// - if the value type is any type `T` which is not a projection, we push\n-    ///   `ProjectionEq(projection = T)`.\n-    /// - if the value type is another projection `other_projection`, we create\n-    ///   a new inference variable `?U` and push the two goals\n-    ///   `ProjectionEq(projection = ?U)`, `ProjectionEq(other_projection = ?U)`.\n-    fn relate_projection_ty(\n-        &mut self,\n-        projection_ty: ty::AliasTy<'tcx>,\n-        value_ty: Ty<'tcx>,\n-    ) -> Ty<'tcx> {\n-        use rustc_span::DUMMY_SP;\n-\n-        match *value_ty.kind() {\n-            ty::Alias(ty::Projection, other_projection_ty) => {\n-                let var = self.infcx.next_ty_var(TypeVariableOrigin {\n-                    kind: TypeVariableOriginKind::MiscVariable,\n-                    span: DUMMY_SP,\n-                });\n-                // FIXME(lazy-normalization): This will always ICE, because the recursive\n-                // call will end up in the _ arm below.\n-                self.relate_projection_ty(projection_ty, var);\n-                self.relate_projection_ty(other_projection_ty, var);\n-                var\n-            }\n-\n-            _ => bug!(\"should never be invoked with eager normalization\"),\n-        }\n-    }\n-\n     /// Relate a type inference variable with a value type. This works\n     /// by creating a \"generalization\" G of the value where all the\n     /// lifetimes are replaced with fresh inference values. This\n@@ -335,12 +295,6 @@ where\n                 return Ok(value_ty);\n             }\n \n-            ty::Alias(ty::Projection, projection_ty)\n-                if D::normalization() == NormalizationStrategy::Lazy =>\n-            {\n-                return Ok(self.relate_projection_ty(projection_ty, self.infcx.tcx.mk_ty_var(vid)));\n-            }\n-\n             _ => (),\n         }\n \n@@ -627,18 +581,6 @@ where\n                 self.relate_opaques(a, b)\n             }\n \n-            (&ty::Alias(ty::Projection, projection_ty), _)\n-                if D::normalization() == NormalizationStrategy::Lazy =>\n-            {\n-                Ok(self.relate_projection_ty(projection_ty, b))\n-            }\n-\n-            (_, &ty::Alias(ty::Projection, projection_ty))\n-                if D::normalization() == NormalizationStrategy::Lazy =>\n-            {\n-                Ok(self.relate_projection_ty(projection_ty, a))\n-            }\n-\n             _ => {\n                 debug!(?a, ?b, ?self.ambient_variance);\n \n@@ -813,17 +755,26 @@ where\n     }\n }\n \n-impl<'tcx, D> ConstEquateRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n+impl<'tcx, D> ObligationEmittingRelation<'tcx> for TypeRelating<'_, 'tcx, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.delegate.register_obligations(vec![Obligation::new(\n-            self.tcx(),\n-            ObligationCause::dummy(),\n-            self.param_env(),\n-            ty::Binder::dummy(ty::PredicateKind::ConstEquate(a, b)),\n-        )]);\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.delegate.register_obligations(\n+            obligations\n+                .into_iter()\n+                .map(|to_pred| {\n+                    Obligation::new(self.tcx(), ObligationCause::dummy(), self.param_env(), to_pred)\n+                })\n+                .collect(),\n+        );\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.delegate.register_obligations(obligations);\n     }\n }\n \n@@ -841,7 +792,7 @@ struct ScopeInstantiator<'me, 'tcx> {\n     bound_region_scope: &'me mut BoundRegionScope<'tcx>,\n }\n \n-impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n+impl<'me, 'tcx> TypeVisitor<TyCtxt<'tcx>> for ScopeInstantiator<'me, 'tcx> {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,"}, {"sha": "5635e8adf34f8df74f1208270e98d7008cb02532", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -12,8 +12,8 @@ use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::GenericArgKind;\n use rustc_middle::ty::{\n-    self, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n-    TypeVisitable, TypeVisitor,\n+    self, ir::TypeVisitor, OpaqueHiddenType, OpaqueTypeKey, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperVisitable, TypeVisitable,\n };\n use rustc_span::Span;\n \n@@ -431,7 +431,7 @@ pub struct ConstrainOpaqueTypeRegionVisitor<'tcx, OP: FnMut(ty::Region<'tcx>)> {\n     pub op: OP,\n }\n \n-impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n+impl<'tcx, OP> TypeVisitor<TyCtxt<'tcx>> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {"}, {"sha": "a8e668d81eae30371927ce582686d65ca354ff2b", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -21,6 +21,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n         .filter_map(move |kind| match kind {\n             ty::PredicateKind::Clause(ty::Clause::Projection(..))\n             | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n+            | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::WellFormed(..)"}, {"sha": "bae246418b05ac7a167ab9bd794fd6ab12771b50", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -207,6 +207,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n     ///\n     /// In some cases, such as when `erased_ty` represents a `ty::Param`, however,\n     /// the result is precise.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn declared_generic_bounds_from_env_for_erased_ty(\n         &self,\n         erased_ty: Ty<'tcx>,"}, {"sha": "f795047709e4033088ed6c65df34a12fe622e24f", "filename": "compiler/rustc_infer/src/infer/projection.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fprojection.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -21,16 +21,28 @@ impl<'tcx> InferCtxt<'tcx> {\n         recursion_depth: usize,\n         obligations: &mut Vec<PredicateObligation<'tcx>>,\n     ) -> Ty<'tcx> {\n-        let def_id = projection_ty.def_id;\n-        let ty_var = self.next_ty_var(TypeVariableOrigin {\n-            kind: TypeVariableOriginKind::NormalizeProjectionType,\n-            span: self.tcx.def_span(def_id),\n-        });\n-        let projection =\n-            ty::Binder::dummy(ty::ProjectionPredicate { projection_ty, term: ty_var.into() });\n-        let obligation =\n-            Obligation::with_depth(self.tcx, cause, recursion_depth, param_env, projection);\n-        obligations.push(obligation);\n-        ty_var\n+        if self.tcx.trait_solver_next() {\n+            // FIXME(-Ztrait-solver=next): Instead of branching here,\n+            // completely change the normalization routine with the new solver.\n+            //\n+            // The new solver correctly handles projection equality so this hack\n+            // is not necessary. if re-enabled it should emit `PredicateKind::AliasEq`\n+            // not `PredicateKind::Clause(Clause::Projection(..))` as in the new solver\n+            // `Projection` is used as `normalizes-to` which will fail for `<T as Trait>::Assoc eq ?0`.\n+            return projection_ty.to_ty(self.tcx);\n+        } else {\n+            let def_id = projection_ty.def_id;\n+            let ty_var = self.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::NormalizeProjectionType,\n+                span: self.tcx.def_span(def_id),\n+            });\n+            let projection = ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::Projection(\n+                ty::ProjectionPredicate { projection_ty, term: ty_var.into() },\n+            )));\n+            let obligation =\n+                Obligation::with_depth(self.tcx, cause, recursion_depth, param_env, projection);\n+            obligations.push(obligation);\n+            ty_var\n+        }\n     }\n }"}, {"sha": "cb24375c7a3feb4fd6f81bbe8e06027467412cbb", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -696,9 +696,11 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n \n     pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {\n         match *region {\n-            ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {\n-                ty::UniverseIndex::ROOT\n-            }\n+            ty::ReStatic\n+            | ty::ReErased\n+            | ty::ReFree(..)\n+            | ty::ReEarlyBound(..)\n+            | ty::ReError(_) => ty::UniverseIndex::ROOT,\n             ty::RePlaceholder(placeholder) => placeholder.universe,\n             ty::ReVar(vid) => self.var_universe(vid),\n             ty::ReLateBound(..) => bug!(\"universe(): encountered bound region {:?}\", region),"}, {"sha": "008bf1e9c5dc4841a4cc86b95a57fae91e37207b", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,9 +1,12 @@\n use super::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use super::{FixupError, FixupResult, InferCtxt, Span};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFolder, TypeSuperFoldable};\n-use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitor};\n-use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::fold::{\n+    ir::{FallibleTypeFolder, TypeFolder},\n+    TypeSuperFoldable,\n+};\n+use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable};\n+use rustc_middle::ty::{self, Const, InferConst, Ty, TyCtxt, TypeFoldable};\n \n use std::ops::ControlFlow;\n \n@@ -28,9 +31,9 @@ impl<'a, 'tcx> OpportunisticVarResolver<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n-        TypeFolder::tcx(&self.shallow_resolver)\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticVarResolver<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n+        TypeFolder::interner(&self.shallow_resolver)\n     }\n \n     #[inline]\n@@ -70,8 +73,8 @@ impl<'a, 'tcx> OpportunisticRegionResolver<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticRegionResolver<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n@@ -92,7 +95,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n                     .opportunistic_resolve_var(rid);\n-                TypeFolder::tcx(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n+                TypeFolder::interner(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n             }\n             _ => r,\n         }\n@@ -124,7 +127,7 @@ impl<'a, 'tcx> UnresolvedTypeOrConstFinder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n+impl<'a, 'tcx> TypeVisitor<TyCtxt<'tcx>> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n     type BreakTy = (ty::Term<'tcx>, Option<Span>);\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let t = self.infcx.shallow_resolve(t);\n@@ -208,10 +211,10 @@ struct FullTypeResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n+impl<'a, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for FullTypeResolver<'a, 'tcx> {\n     type Error = FixupError<'tcx>;\n \n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "bf1b34415470c5fde25357c65c1bb7da9667fedb", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,8 +1,7 @@\n use super::combine::{CombineFields, RelationDir};\n-use super::SubregionOrigin;\n+use super::{ObligationEmittingRelation, SubregionOrigin};\n \n-use crate::infer::combine::ConstEquateRelation;\n-use crate::traits::Obligation;\n+use crate::traits::{Obligation, PredicateObligations};\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::TyVar;\n@@ -228,8 +227,15 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n     }\n }\n \n-impl<'tcx> ConstEquateRelation<'tcx> for Sub<'_, '_, 'tcx> {\n-    fn const_equate_obligation(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>) {\n-        self.fields.add_const_equate_obligation(self.a_is_expected, a, b);\n+impl<'tcx> ObligationEmittingRelation<'tcx> for Sub<'_, '_, 'tcx> {\n+    fn register_predicates(\n+        &mut self,\n+        obligations: impl IntoIterator<Item = impl ty::ToPredicate<'tcx>>,\n+    ) {\n+        self.fields.register_predicates(obligations);\n+    }\n+\n+    fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n+        self.fields.register_obligations(obligations);\n     }\n }"}, {"sha": "95df6cd62b90bd59888a2812fa5fc0e5f888dc1e", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,8 +1,8 @@\n use crate::traits;\n use crate::traits::project::Normalized;\n-use rustc_middle::ty;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use rustc_middle::ty::visit::{TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, ir, TyCtxt};\n \n use std::fmt;\n use std::ops::ControlFlow;\n@@ -61,7 +61,7 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n \n-impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx, O> {\n+impl<'tcx, O: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for traits::Obligation<'tcx, O> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(traits::Obligation {\n             cause: self.cause,\n@@ -72,7 +72,7 @@ impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx\n     }\n }\n \n-impl<'tcx, O: TypeVisitable<'tcx>> TypeVisitable<'tcx> for traits::Obligation<'tcx, O> {\n+impl<'tcx, O: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for traits::Obligation<'tcx, O> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)?;\n         self.param_env.visit_with(visitor)"}, {"sha": "e617eb68d477587db3dae0666ad02f52f4fa2481", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -294,6 +294,9 @@ impl<'tcx> Elaborator<'tcx> {\n                 // Nothing to elaborate\n             }\n             ty::PredicateKind::Ambiguous => {}\n+            ty::PredicateKind::AliasEq(..) => {\n+                // No\n+            }\n         }\n     }\n }"}, {"sha": "bc6d7c209971c84f9c5d78f72c1bb9cfb9bd2083", "filename": "compiler/rustc_interface/src/callbacks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -38,7 +38,7 @@ fn track_diagnostic(diagnostic: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnost\n \n             // Diagnostics are tracked, we can ignore the dependency.\n             let icx = tls::ImplicitCtxt { task_deps: TaskDepsRef::Ignore, ..icx.clone() };\n-            return tls::enter_context(&icx, move |_| (*f)(diagnostic));\n+            return tls::enter_context(&icx, move || (*f)(diagnostic));\n         }\n \n         // In any other case, invoke diagnostics anyway."}, {"sha": "d504aea77d0dac6ae8d51c7a0a73806c163815e4", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,4 +1,3 @@\n-pub use crate::passes::BoxedResolver;\n use crate::util;\n \n use rustc_ast::token;"}, {"sha": "6a94d19001e11d68b6ef718672bec3f9a9b4e281", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 8, "deletions": 115, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -23,9 +23,9 @@ use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_a\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n-use rustc_resolve::{Resolver, ResolverArenas};\n+use rustc_resolve::Resolver;\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::cstore::{CrateStoreDyn, MetadataLoader, MetadataLoaderDyn, Untracked};\n+use rustc_session::cstore::{CrateStoreDyn, MetadataLoader, Untracked};\n use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n@@ -35,13 +35,9 @@ use rustc_target::spec::PanicStrategy;\n use rustc_trait_selection::traits;\n \n use std::any::Any;\n-use std::cell::RefCell;\n use std::ffi::OsString;\n use std::io::{self, BufWriter, Write};\n-use std::marker::PhantomPinned;\n use std::path::{Path, PathBuf};\n-use std::pin::Pin;\n-use std::rc::Rc;\n use std::sync::{Arc, LazyLock};\n use std::{env, fs, iter};\n \n@@ -75,93 +71,6 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n     counter.count\n }\n \n-pub use boxed_resolver::BoxedResolver;\n-mod boxed_resolver {\n-    use super::*;\n-\n-    pub struct BoxedResolver(Pin<Box<BoxedResolverInner>>);\n-\n-    struct BoxedResolverInner {\n-        session: Lrc<Session>,\n-        resolver_arenas: Option<ResolverArenas<'static>>,\n-        resolver: Option<Resolver<'static>>,\n-        _pin: PhantomPinned,\n-    }\n-\n-    // Note: Drop order is important to prevent dangling references. Resolver must be dropped first,\n-    // then resolver_arenas and session.\n-    impl Drop for BoxedResolverInner {\n-        fn drop(&mut self) {\n-            self.resolver.take();\n-            self.resolver_arenas.take();\n-        }\n-    }\n-\n-    impl BoxedResolver {\n-        pub(super) fn new(\n-            session: Lrc<Session>,\n-            make_resolver: impl for<'a> FnOnce(&'a Session, &'a ResolverArenas<'a>) -> Resolver<'a>,\n-        ) -> BoxedResolver {\n-            let mut boxed_resolver = Box::new(BoxedResolverInner {\n-                session,\n-                resolver_arenas: Some(Resolver::arenas()),\n-                resolver: None,\n-                _pin: PhantomPinned,\n-            });\n-            // SAFETY: `make_resolver` takes a resolver arena with an arbitrary lifetime and\n-            // returns a resolver with the same lifetime as the arena. We ensure that the arena\n-            // outlives the resolver in the drop impl and elsewhere so these transmutes are sound.\n-            unsafe {\n-                let resolver = make_resolver(\n-                    std::mem::transmute::<&Session, &Session>(&boxed_resolver.session),\n-                    std::mem::transmute::<&ResolverArenas<'_>, &ResolverArenas<'_>>(\n-                        boxed_resolver.resolver_arenas.as_ref().unwrap(),\n-                    ),\n-                );\n-                boxed_resolver.resolver = Some(resolver);\n-                BoxedResolver(Pin::new_unchecked(boxed_resolver))\n-            }\n-        }\n-\n-        pub fn access<F: for<'a> FnOnce(&mut Resolver<'a>) -> R, R>(&mut self, f: F) -> R {\n-            // SAFETY: The resolver doesn't need to be pinned.\n-            let mut resolver = unsafe {\n-                self.0.as_mut().map_unchecked_mut(|boxed_resolver| &mut boxed_resolver.resolver)\n-            };\n-            f((&mut *resolver).as_mut().unwrap())\n-        }\n-\n-        pub fn to_resolver_outputs(resolver: Rc<RefCell<BoxedResolver>>) -> ty::ResolverOutputs {\n-            match Rc::try_unwrap(resolver) {\n-                Ok(resolver) => {\n-                    let mut resolver = resolver.into_inner();\n-                    // SAFETY: The resolver doesn't need to be pinned.\n-                    let mut resolver = unsafe {\n-                        resolver\n-                            .0\n-                            .as_mut()\n-                            .map_unchecked_mut(|boxed_resolver| &mut boxed_resolver.resolver)\n-                    };\n-                    resolver.take().unwrap().into_outputs()\n-                }\n-                Err(resolver) => resolver.borrow_mut().access(|resolver| resolver.clone_outputs()),\n-            }\n-        }\n-    }\n-}\n-\n-pub fn create_resolver(\n-    sess: Lrc<Session>,\n-    metadata_loader: Box<MetadataLoaderDyn>,\n-    krate: &ast::Crate,\n-    crate_name: Symbol,\n-) -> BoxedResolver {\n-    trace!(\"create_resolver\");\n-    BoxedResolver::new(sess, move |sess, resolver_arenas| {\n-        Resolver::new(sess, krate, crate_name, metadata_loader, resolver_arenas)\n-    })\n-}\n-\n pub fn register_plugins<'a>(\n     sess: &'a Session,\n     metadata_loader: &'a dyn MetadataLoader,\n@@ -267,7 +176,7 @@ pub fn configure_and_expand(\n     lint_store: &LintStore,\n     mut krate: ast::Crate,\n     crate_name: Symbol,\n-    resolver: &mut Resolver<'_>,\n+    resolver: &mut Resolver<'_, '_>,\n ) -> Result<ast::Crate> {\n     trace!(\"configure_and_expand\");\n     pre_expansion_lint(sess, lint_store, resolver.registered_tools(), &krate, crate_name);\n@@ -738,30 +647,16 @@ pub static DEFAULT_EXTERN_QUERY_PROVIDERS: LazyLock<ExternProviders> = LazyLock:\n     extern_providers\n });\n \n-pub struct QueryContext<'tcx> {\n-    gcx: &'tcx GlobalCtxt<'tcx>,\n-}\n-\n-impl<'tcx> QueryContext<'tcx> {\n-    pub fn enter<F, R>(&mut self, f: F) -> R\n-    where\n-        F: FnOnce(TyCtxt<'tcx>) -> R,\n-    {\n-        let icx = ty::tls::ImplicitCtxt::new(self.gcx);\n-        ty::tls::enter_context(&icx, |_| f(icx.tcx))\n-    }\n-}\n-\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<LintStore>,\n     dep_graph: DepGraph,\n     untracked: Untracked,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n-    global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n+    gcx_cell: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n     hir_arena: &'tcx WorkerLocal<rustc_hir::Arena<'tcx>>,\n-) -> QueryContext<'tcx> {\n+) -> &'tcx GlobalCtxt<'tcx> {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to\n     // incr. comp. yet.\n@@ -785,8 +680,8 @@ pub fn create_global_ctxt<'tcx>(\n         TcxQueries::new(local_providers, extern_providers, query_result_on_disk_cache)\n     });\n \n-    let gcx = sess.time(\"setup_global_ctxt\", || {\n-        global_ctxt.get_or_init(move || {\n+    sess.time(\"setup_global_ctxt\", || {\n+        gcx_cell.get_or_init(move || {\n             TyCtxt::create_global_ctxt(\n                 sess,\n                 lint_store,\n@@ -799,9 +694,7 @@ pub fn create_global_ctxt<'tcx>(\n                 rustc_query_impl::query_callbacks(arena),\n             )\n         })\n-    });\n-\n-    QueryContext { gcx }\n+    })\n }\n \n /// Runs the resolution, type-checking, region checking and other"}, {"sha": "d727efdafc278a5534a07da127a4376f731bdbb6", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 38, "deletions": 41, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::{FailedWritingFile, RustcErrorFatal, RustcErrorUnexpectedAnnotation};\n use crate::interface::{Compiler, Result};\n-use crate::passes::{self, BoxedResolver, QueryContext};\n+use crate::passes;\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -15,13 +15,13 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::ty::{self, GlobalCtxt, TyCtxt};\n use rustc_query_impl::Queries as TcxQueries;\n+use rustc_resolve::Resolver;\n use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::{output::find_crate_name, Session};\n use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n use std::any::Any;\n use std::cell::{RefCell, RefMut};\n-use std::rc::Rc;\n use std::sync::Arc;\n \n /// Represent the result of a query.\n@@ -64,7 +64,7 @@ impl<'a, T> std::ops::DerefMut for QueryResult<'a, T> {\n     }\n }\n \n-impl<'a, 'tcx> QueryResult<'a, QueryContext<'tcx>> {\n+impl<'a, 'tcx> QueryResult<'a, &'tcx GlobalCtxt<'tcx>> {\n     pub fn enter<T>(&mut self, f: impl FnOnce(TyCtxt<'tcx>) -> T) -> T {\n         (*self.0).get_mut().enter(f)\n     }\n@@ -78,7 +78,7 @@ impl<T> Default for Query<T> {\n \n pub struct Queries<'tcx> {\n     compiler: &'tcx Compiler,\n-    gcx: OnceCell<GlobalCtxt<'tcx>>,\n+    gcx_cell: OnceCell<GlobalCtxt<'tcx>>,\n     queries: OnceCell<TcxQueries<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n@@ -88,27 +88,26 @@ pub struct Queries<'tcx> {\n     parse: Query<ast::Crate>,\n     crate_name: Query<Symbol>,\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n-    expansion: Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    global_ctxt: Query<QueryContext<'tcx>>,\n+    // This just points to what's in `gcx_cell`.\n+    gcx: Query<&'tcx GlobalCtxt<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n }\n \n impl<'tcx> Queries<'tcx> {\n     pub fn new(compiler: &'tcx Compiler) -> Queries<'tcx> {\n         Queries {\n             compiler,\n-            gcx: OnceCell::new(),\n+            gcx_cell: OnceCell::new(),\n             queries: OnceCell::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n             hir_arena: WorkerLocal::new(|_| rustc_hir::Arena::default()),\n             dep_graph_future: Default::default(),\n             parse: Default::default(),\n             crate_name: Default::default(),\n             register_plugins: Default::default(),\n-            expansion: Default::default(),\n             dep_graph: Default::default(),\n-            global_ctxt: Default::default(),\n+            gcx: Default::default(),\n             ongoing_codegen: Default::default(),\n         }\n     }\n@@ -168,29 +167,6 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn expansion(\n-        &self,\n-    ) -> Result<QueryResult<'_, (Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>>\n-    {\n-        trace!(\"expansion\");\n-        self.expansion.compute(|| {\n-            let crate_name = *self.crate_name()?.borrow();\n-            let (krate, lint_store) = self.register_plugins()?.steal();\n-            let _timer = self.session().timer(\"configure_and_expand\");\n-            let sess = self.session();\n-            let mut resolver = passes::create_resolver(\n-                sess.clone(),\n-                self.codegen_backend().metadata_loader(),\n-                &krate,\n-                crate_name,\n-            );\n-            let krate = resolver.access(|resolver| {\n-                passes::configure_and_expand(sess, &lint_store, krate, crate_name, resolver)\n-            })?;\n-            Ok((Lrc::new(krate), Rc::new(RefCell::new(resolver)), lint_store))\n-        })\n-    }\n-\n     fn dep_graph(&self) -> Result<QueryResult<'_, DepGraph>> {\n         self.dep_graph.compute(|| {\n             let sess = self.session();\n@@ -207,29 +183,50 @@ impl<'tcx> Queries<'tcx> {\n         })\n     }\n \n-    pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, QueryContext<'tcx>>> {\n-        self.global_ctxt.compute(|| {\n+    pub fn global_ctxt(&'tcx self) -> Result<QueryResult<'_, &'tcx GlobalCtxt<'tcx>>> {\n+        self.gcx.compute(|| {\n             let crate_name = *self.crate_name()?.borrow();\n-            let (krate, resolver, lint_store) = self.expansion()?.steal();\n+            let (krate, lint_store) = self.register_plugins()?.steal();\n+            let (krate, resolver_outputs) = {\n+                let _timer = self.session().timer(\"configure_and_expand\");\n+                let sess = self.session();\n+\n+                let arenas = Resolver::arenas();\n+                let mut resolver = Resolver::new(\n+                    sess,\n+                    &krate,\n+                    crate_name,\n+                    self.codegen_backend().metadata_loader(),\n+                    &arenas,\n+                );\n+                let krate = passes::configure_and_expand(\n+                    sess,\n+                    &lint_store,\n+                    krate,\n+                    crate_name,\n+                    &mut resolver,\n+                )?;\n+                (Lrc::new(krate), resolver.into_outputs())\n+            };\n \n             let ty::ResolverOutputs {\n                 untracked,\n                 global_ctxt: untracked_resolutions,\n                 ast_lowering: untracked_resolver_for_lowering,\n-            } = BoxedResolver::to_resolver_outputs(resolver);\n+            } = resolver_outputs;\n \n-            let mut qcx = passes::create_global_ctxt(\n+            let gcx = passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,\n                 self.dep_graph()?.steal(),\n                 untracked,\n                 &self.queries,\n-                &self.gcx,\n+                &self.gcx_cell,\n                 &self.arena,\n                 &self.hir_arena,\n             );\n \n-            qcx.enter(|tcx| {\n+            gcx.enter(|tcx| {\n                 let feed = tcx.feed_unit_query();\n                 feed.resolver_for_lowering(\n                     tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n@@ -239,7 +236,7 @@ impl<'tcx> Queries<'tcx> {\n                 let feed = tcx.feed_local_crate();\n                 feed.crate_name(crate_name);\n             });\n-            Ok(qcx)\n+            Ok(gcx)\n         })\n     }\n \n@@ -387,7 +384,7 @@ impl Compiler {\n \n         // NOTE: intentionally does not compute the global context if it hasn't been built yet,\n         // since that likely means there was a parse error.\n-        if let Some(Ok(gcx)) = &mut *queries.global_ctxt.result.borrow_mut() {\n+        if let Some(Ok(gcx)) = &mut *queries.gcx.result.borrow_mut() {\n             let gcx = gcx.get_mut();\n             // We assume that no queries are run past here. If there are new queries\n             // after this point, they'll show up as \"<unknown>\" in self-profiling data."}, {"sha": "0d3499ca9a0488c217b2ce77ea3d07b1b993e2e0", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n use rustc_session::config::Input;\n+use rustc_session::config::InstrumentXRay;\n use rustc_session::config::TraitSolver;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{\n@@ -755,6 +756,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(inline_mir_threshold, Some(123));\n     tracked!(instrument_coverage, Some(InstrumentCoverage::All));\n     tracked!(instrument_mcount, true);\n+    tracked!(instrument_xray, Some(InstrumentXRay::default()));\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });"}, {"sha": "f18c0aa377fb4c7588853ee37c8cf0b21264ddbd", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1594,12 +1594,14 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     // Ignore projections, as they can only be global\n                     // if the trait bound is global\n                     Clause(Clause::Projection(..)) |\n+                    AliasEq(..) |\n                     // Ignore bounds that a user can't type\n                     WellFormed(..) |\n                     ObjectSafe(..) |\n                     ClosureKind(..) |\n                     Subtype(..) |\n                     Coerce(..) |\n+                    // FIXME(generic_const_exprs): `ConstEvaluatable` can be written\n                     ConstEvaluatable(..) |\n                     ConstEquate(..) |\n                     Ambiguous |\n@@ -2603,7 +2605,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                     ty.tuple_fields().iter().find_map(|field| ty_find_init_error(cx, field, init))\n                 }\n                 Array(ty, len) => {\n-                    if matches!(len.try_eval_usize(cx.tcx, cx.param_env), Some(v) if v > 0) {\n+                    if matches!(len.try_eval_target_usize(cx.tcx, cx.param_env), Some(v) if v > 0) {\n                         // Array length known at array non-empty -- recurse.\n                         ty_find_init_error(cx, *ty, init)\n                     } else {"}, {"sha": "972240f42cf4649b667ecbf286a16ecc8a12654f", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -837,9 +837,17 @@ pub trait LintContext: Sized {\n                             (use_span, \"'_\".to_owned())\n                         };\n                         debug!(?deletion_span, ?use_span);\n+\n+                        // issue 107998 for the case such as a wrong function pointer type\n+                        // `deletion_span` is empty and there is no need to report lifetime uses here\n+                        let suggestions = if deletion_span.is_empty() {\n+                            vec![(use_span, replace_lt)]\n+                        } else {\n+                            vec![(deletion_span, String::new()), (use_span, replace_lt)]\n+                        };\n                         db.multipart_suggestion(\n                             msg,\n-                            vec![(deletion_span, String::new()), (use_span, replace_lt)],\n+                            suggestions,\n                             Applicability::MachineApplicable,\n                         );\n                     }"}, {"sha": "548f30ec97264574d4b45db8ff38851052dd5f75", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -146,7 +146,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n             // If this is a &str or String, we can confidently give the `\"{}\", ` suggestion.\n             let is_str = matches!(\n                 ty.kind(),\n-                ty::Ref(_, r, _) if *r.kind() == ty::Str,\n+                ty::Ref(_, r, _) if r.is_str(),\n             ) || matches!(\n                 ty.ty_adt_def(),\n                 Some(ty_def) if Some(ty_def.did()) == cx.tcx.lang_items().string(),"}, {"sha": "88c6ea7efb28195bbb4577b66361f25fc17d48a9", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1144,7 +1144,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         struct ProhibitOpaqueTypes;\n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueTypes {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueTypes {\n             type BreakTy = Ty<'tcx>;\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "3a92f5806c9efc95ef119a64b5a6d8c6a308773d", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -309,7 +309,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                         None\n                     }\n                 }\n-                ty::Array(ty, len) => match len.try_eval_usize(cx.tcx, cx.param_env) {\n+                ty::Array(ty, len) => match len.try_eval_target_usize(cx.tcx, cx.param_env) {\n                     // If the array is empty we don't lint, to avoid false positives\n                     Some(0) | None => None,\n                     // If the array is definitely non-empty, we can do `#[must_use]` checking."}, {"sha": "fbc1d8ef310c69b896e4a9e608bfaf37d7c22fd4", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 3, "deletions": 41, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -14,6 +14,7 @@\n #include \"llvm/IR/AssemblyAnnotationWriter.h\"\n #include \"llvm/IR/IntrinsicInst.h\"\n #include \"llvm/IR/Verifier.h\"\n+#include \"llvm/MC/TargetRegistry.h\"\n #include \"llvm/Object/ObjectFile.h\"\n #include \"llvm/Object/IRObjectFile.h\"\n #include \"llvm/Passes/PassBuilder.h\"\n@@ -25,11 +26,6 @@\n #include \"llvm/Support/VirtualFileSystem.h\"\n #endif\n #include \"llvm/Support/Host.h\"\n-#if LLVM_VERSION_LT(14, 0)\n-#include \"llvm/Support/TargetRegistry.h\"\n-#else\n-#include \"llvm/MC/TargetRegistry.h\"\n-#endif\n #include \"llvm/Target/TargetMachine.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n@@ -267,10 +263,6 @@ enum class LLVMRustPassBuilderOptLevel {\n   Oz,\n };\n \n-#if LLVM_VERSION_LT(14,0)\n-using OptimizationLevel = PassBuilder::OptimizationLevel;\n-#endif\n-\n static OptimizationLevel fromRust(LLVMRustPassBuilderOptLevel Level) {\n   switch (Level) {\n   case LLVMRustPassBuilderOptLevel::O0:\n@@ -747,27 +739,18 @@ LLVMRustOptimize(\n \n   if (SanitizerOptions) {\n     if (SanitizerOptions->SanitizeMemory) {\n-#if LLVM_VERSION_GE(14, 0)\n       MemorySanitizerOptions Options(\n           SanitizerOptions->SanitizeMemoryTrackOrigins,\n           SanitizerOptions->SanitizeMemoryRecover,\n           /*CompileKernel=*/false,\n           /*EagerChecks=*/true);\n-#else\n-      MemorySanitizerOptions Options(\n-          SanitizerOptions->SanitizeMemoryTrackOrigins,\n-          SanitizerOptions->SanitizeMemoryRecover,\n-          /*CompileKernel=*/false);\n-#endif\n       OptimizerLastEPCallbacks.push_back(\n         [Options](ModulePassManager &MPM, OptimizationLevel Level) {\n-#if LLVM_VERSION_GE(14, 0) && LLVM_VERSION_LT(16, 0)\n+#if LLVM_VERSION_LT(16, 0)\n           MPM.addPass(ModuleMemorySanitizerPass(Options));\n+          MPM.addPass(createModuleToFunctionPassAdaptor(MemorySanitizerPass(Options)));\n #else\n           MPM.addPass(MemorySanitizerPass(Options));\n-#endif\n-#if LLVM_VERSION_LT(16, 0)\n-          MPM.addPass(createModuleToFunctionPassAdaptor(MemorySanitizerPass(Options)));\n #endif\n         }\n       );\n@@ -776,11 +759,7 @@ LLVMRustOptimize(\n     if (SanitizerOptions->SanitizeThread) {\n       OptimizerLastEPCallbacks.push_back(\n         [](ModulePassManager &MPM, OptimizationLevel Level) {\n-#if LLVM_VERSION_GE(14, 0)\n           MPM.addPass(ModuleThreadSanitizerPass());\n-#else\n-          MPM.addPass(ThreadSanitizerPass());\n-#endif\n           MPM.addPass(createModuleToFunctionPassAdaptor(ThreadSanitizerPass()));\n         }\n       );\n@@ -792,7 +771,6 @@ LLVMRustOptimize(\n #if LLVM_VERSION_LT(15, 0)\n           MPM.addPass(RequireAnalysisPass<ASanGlobalsMetadataAnalysis, Module>());\n #endif\n-#if LLVM_VERSION_GE(14, 0)\n           AddressSanitizerOptions opts = AddressSanitizerOptions{\n             /*CompileKernel=*/false,\n             SanitizerOptions->SanitizeAddressRecover,\n@@ -803,29 +781,17 @@ LLVMRustOptimize(\n           MPM.addPass(ModuleAddressSanitizerPass(opts));\n #else\n           MPM.addPass(AddressSanitizerPass(opts));\n-#endif\n-#else\n-          MPM.addPass(ModuleAddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover));\n-          MPM.addPass(createModuleToFunctionPassAdaptor(AddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeAddressRecover,\n-              /*UseAfterScope=*/true)));\n #endif\n         }\n       );\n     }\n     if (SanitizerOptions->SanitizeHWAddress) {\n       OptimizerLastEPCallbacks.push_back(\n         [SanitizerOptions](ModulePassManager &MPM, OptimizationLevel Level) {\n-#if LLVM_VERSION_GE(14, 0)\n           HWAddressSanitizerOptions opts(\n               /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover,\n               /*DisableOptimization=*/false);\n           MPM.addPass(HWAddressSanitizerPass(opts));\n-#else\n-          MPM.addPass(HWAddressSanitizerPass(\n-              /*CompileKernel=*/false, SanitizerOptions->SanitizeHWAddressRecover));\n-#endif\n         }\n       );\n     }\n@@ -1328,11 +1294,7 @@ extern \"C\" bool\n LLVMRustPrepareThinLTOResolveWeak(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   Module &Mod = *unwrap(M);\n   const auto &DefinedGlobals = Data->ModuleToDefinedGVSummaries.lookup(Mod.getModuleIdentifier());\n-#if LLVM_VERSION_GE(14, 0)\n   thinLTOFinalizeInModule(Mod, DefinedGlobals, /*PropagateAttrs=*/true);\n-#else\n-  thinLTOResolvePrevailingInModule(Mod, DefinedGlobals);\n-#endif\n   return true;\n }\n "}, {"sha": "b1e6534944db37ff1c08ffa83cb57bbcf4f8324f", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -63,11 +63,7 @@ static LLVM_THREAD_LOCAL char *LastError;\n //\n // Notably it exits the process with code 101, unlike LLVM's default of 1.\n static void FatalErrorHandler(void *UserData,\n-#if LLVM_VERSION_LT(14, 0)\n-                              const std::string& Reason,\n-#else\n                               const char* Reason,\n-#endif\n                               bool GenCrashDiag) {\n   // Do the same thing that the default error handler does.\n   std::cerr << \"LLVM ERROR: \" << Reason << std::endl;\n@@ -249,18 +245,10 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n template<typename T> static inline void AddAttributes(T *t, unsigned Index,\n                                                       LLVMAttributeRef *Attrs, size_t AttrsLen) {\n   AttributeList PAL = t->getAttributes();\n-  AttributeList PALNew;\n-#if LLVM_VERSION_LT(14, 0)\n-  AttrBuilder B;\n-  for (LLVMAttributeRef Attr : makeArrayRef(Attrs, AttrsLen))\n-    B.addAttribute(unwrap(Attr));\n-  PALNew = PAL.addAttributes(t->getContext(), Index, B);\n-#else\n   AttrBuilder B(t->getContext());\n   for (LLVMAttributeRef Attr : ArrayRef<LLVMAttributeRef>(Attrs, AttrsLen))\n     B.addAttribute(unwrap(Attr));\n-  PALNew = PAL.addAttributesAtIndex(t->getContext(), Index, B);\n-#endif\n+  AttributeList PALNew = PAL.addAttributesAtIndex(t->getContext(), Index, B);\n   t->setAttributes(PALNew);\n }\n "}, {"sha": "22924efa9484240a2d128c104fa41e1e570160ab", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -14,7 +14,7 @@\n //!\n //! ```\n //! fn main() {\n-//!     rustc_log::init_rustc_env_logger().unwrap();\n+//!     rustc_log::init_env_logger(\"LOG\").unwrap();\n //!\n //!     let edition = rustc_span::edition::Edition::Edition2021;\n //!     rustc_span::create_session_globals_then(edition, || {\n@@ -23,9 +23,9 @@\n //! }\n //! ```\n //!\n-//! Now `RUSTC_LOG=debug cargo run` will run your minimal main.rs and show\n+//! Now `LOG=debug cargo run` will run your minimal main.rs and show\n //! rustc's debug logging. In a workflow like this, one might also add\n-//! `std::env::set_var(\"RUSTC_LOG\", \"debug\")` to the top of main so that `cargo\n+//! `std::env::set_var(\"LOG\", \"debug\")` to the top of main so that `cargo\n //! run` by itself is sufficient to get logs.\n //!\n //! The reason rustc_log is a tiny separate crate, as opposed to exposing the\n@@ -53,12 +53,6 @@ use tracing_subscriber::fmt::{\n };\n use tracing_subscriber::layer::SubscriberExt;\n \n-pub fn init_rustc_env_logger() -> Result<(), Error> {\n-    init_env_logger(\"RUSTC_LOG\")\n-}\n-\n-/// In contrast to `init_rustc_env_logger` this allows you to choose an env var\n-/// other than `RUSTC_LOG`.\n pub fn init_env_logger(env: &str) -> Result<(), Error> {\n     let filter = match env::var(env) {\n         Ok(env) => EnvFilter::new(env),\n@@ -98,7 +92,7 @@ pub fn init_env_logger(env: &str) -> Result<(), Error> {\n             let fmt_layer = tracing_subscriber::fmt::layer()\n                 .with_writer(io::stderr)\n                 .without_time()\n-                .event_format(BacktraceFormatter { backtrace_target: str.to_string() });\n+                .event_format(BacktraceFormatter { backtrace_target: str });\n             let subscriber = subscriber.with(fmt_layer);\n             tracing::subscriber::set_global_default(subscriber).unwrap();\n         }"}, {"sha": "d2cb6ee9f71fbeae63787cf12d42e09b6ddac8ea", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -124,8 +124,27 @@ decl_derive!([TyDecodable] => serialize::type_decodable_derive);\n decl_derive!([TyEncodable] => serialize::type_encodable_derive);\n decl_derive!([MetadataDecodable] => serialize::meta_decodable_derive);\n decl_derive!([MetadataEncodable] => serialize::meta_encodable_derive);\n-decl_derive!([TypeFoldable, attributes(type_foldable)] => type_foldable::type_foldable_derive);\n-decl_derive!([TypeVisitable, attributes(type_visitable)] => type_visitable::type_visitable_derive);\n+decl_derive!(\n+    [TypeFoldable, attributes(type_foldable)] =>\n+    /// Derives `TypeFoldable` for the annotated `struct` or `enum` (`union` is not supported).\n+    ///\n+    /// The fold will produce a value of the same struct or enum variant as the input, with\n+    /// each field respectively folded using the `TypeFoldable` implementation for its type.\n+    /// However, if a field of a struct or an enum variant is annotated with\n+    /// `#[type_foldable(identity)]` then that field will retain its incumbent value (and its\n+    /// type is not required to implement `TypeFoldable`).\n+    type_foldable::type_foldable_derive\n+);\n+decl_derive!(\n+    [TypeVisitable, attributes(type_visitable)] =>\n+    /// Derives `TypeVisitable` for the annotated `struct` or `enum` (`union` is not supported).\n+    ///\n+    /// Each field of the struct or enum variant will be visited in definition order, using the\n+    /// `TypeVisitable` implementation for its type. However, if a field of a struct or an enum\n+    /// variant is annotated with `#[type_visitable(ignore)]` then that field will not be\n+    /// visited (and its type is not required to implement `TypeVisitable`).\n+    type_visitable::type_visitable_derive\n+);\n decl_derive!([Lift, attributes(lift)] => lift::lift_derive);\n decl_derive!(\n     [Diagnostic, attributes("}, {"sha": "51729a377d9577f063f536139df03a2602530ebb", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,5 +1,5 @@\n-use quote::quote;\n-use syn::parse_quote;\n+use quote::{quote, ToTokens};\n+use syn::{parse_quote, Attribute, Meta, NestedMeta};\n \n pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     if let syn::Data::Union(_) = s.ast().data {\n@@ -16,14 +16,35 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n         let bindings = vi.bindings();\n         vi.construct(|_, index| {\n             let bind = &bindings[index];\n-            quote! {\n-                ::rustc_middle::ty::fold::TypeFoldable::try_fold_with(#bind, __folder)?\n+\n+            // retain value of fields with #[type_foldable(identity)]\n+            let fixed = bind\n+                .ast()\n+                .attrs\n+                .iter()\n+                .map(Attribute::parse_meta)\n+                .filter_map(Result::ok)\n+                .flat_map(|attr| match attr {\n+                    Meta::List(list) if list.path.is_ident(\"type_foldable\") => list.nested,\n+                    _ => Default::default(),\n+                })\n+                .any(|nested| match nested {\n+                    NestedMeta::Meta(Meta::Path(path)) => path.is_ident(\"identity\"),\n+                    _ => false,\n+                });\n+\n+            if fixed {\n+                bind.to_token_stream()\n+            } else {\n+                quote! {\n+                    ::rustc_middle::ty::fold::ir::TypeFoldable::try_fold_with(#bind, __folder)?\n+                }\n             }\n         })\n     });\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::fold::TypeFoldable<'tcx>),\n+        quote!(::rustc_middle::ty::fold::ir::TypeFoldable<::rustc_middle::ty::TyCtxt<'tcx>>),\n         quote! {\n             fn try_fold_with<__F: ::rustc_middle::ty::fold::FallibleTypeFolder<'tcx>>(\n                 self,"}, {"sha": "0a16a371fdc94e25f11b994dfebfbd81151d492d", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,25 +1,42 @@\n use quote::quote;\n-use syn::parse_quote;\n+use syn::{parse_quote, Attribute, Meta, NestedMeta};\n \n pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     if let syn::Data::Union(_) = s.ast().data {\n         panic!(\"cannot derive on union\")\n     }\n \n+    // ignore fields with #[type_visitable(ignore)]\n+    s.filter(|bi| {\n+        !bi.ast()\n+            .attrs\n+            .iter()\n+            .map(Attribute::parse_meta)\n+            .filter_map(Result::ok)\n+            .flat_map(|attr| match attr {\n+                Meta::List(list) if list.path.is_ident(\"type_visitable\") => list.nested,\n+                _ => Default::default(),\n+            })\n+            .any(|nested| match nested {\n+                NestedMeta::Meta(Meta::Path(path)) => path.is_ident(\"ignore\"),\n+                _ => false,\n+            })\n+    });\n+\n     if !s.ast().generics.lifetimes().any(|lt| lt.lifetime.ident == \"tcx\") {\n         s.add_impl_generic(parse_quote! { 'tcx });\n     }\n \n     s.add_bounds(synstructure::AddBounds::Generics);\n     let body_visit = s.each(|bind| {\n         quote! {\n-            ::rustc_middle::ty::visit::TypeVisitable::visit_with(#bind, __visitor)?;\n+            ::rustc_middle::ty::visit::ir::TypeVisitable::visit_with(#bind, __visitor)?;\n         }\n     });\n     s.bind_with(|_| synstructure::BindStyle::Move);\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::visit::TypeVisitable<'tcx>),\n+        quote!(::rustc_middle::ty::visit::ir::TypeVisitable<::rustc_middle::ty::TyCtxt<'tcx>>),\n         quote! {\n             fn visit_with<__V: ::rustc_middle::ty::visit::TypeVisitor<'tcx>>(\n                 &self,"}, {"sha": "c357f294279fb0edfab60fd00c0a1ffcda24c3f5", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_ast::{self as ast, *};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::{Lrc, ReadGuard};\n+use rustc_data_structures::sync::ReadGuard;\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n@@ -30,11 +30,10 @@ use proc_macro::bridge::client::ProcMacro;\n use std::ops::Fn;\n use std::path::Path;\n use std::time::Duration;\n-use std::{cmp, env};\n+use std::{cmp, env, iter};\n \n-#[derive(Clone)]\n pub struct CStore {\n-    metas: IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>,\n+    metas: IndexVec<CrateNum, Option<Box<CrateMetadata>>>,\n     injected_panic_runtime: Option<CrateNum>,\n     /// This crate needs an allocator and either provides it itself, or finds it in a dependency.\n     /// If the above is true, then this field denotes the kind of the found allocator.\n@@ -153,7 +152,7 @@ impl CStore {\n \n     fn set_crate_data(&mut self, cnum: CrateNum, data: CrateMetadata) {\n         assert!(self.metas[cnum].is_none(), \"Overwriting crate metadata entry\");\n-        self.metas[cnum] = Some(Lrc::new(data));\n+        self.metas[cnum] = Some(Box::new(data));\n     }\n \n     pub(crate) fn iter_crate_data(&self) -> impl Iterator<Item = (CrateNum, &CrateMetadata)> {\n@@ -245,7 +244,7 @@ impl CStore {\n             // order to make array indices in `metas` match with the\n             // corresponding `CrateNum`. This first entry will always remain\n             // `None`.\n-            metas: IndexVec::from_elem_n(None, 1),\n+            metas: IndexVec::from_iter(iter::once(None)),\n             injected_panic_runtime: None,\n             allocator_kind: None,\n             alloc_error_handler_kind: None,"}, {"sha": "3457e51f8e6e9c18478621d6e2d9bd646e28c17f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::sync::{Lock, LockGuard, Lrc, OnceCell};\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, DeriveProcMacro};\n-use rustc_hir::def::{CtorKind, DefKind, Res};\n+use rustc_hir::def::{CtorKind, DefKind, DocLinkResMap, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::diagnostic_items::DiagnosticItems;\n@@ -1163,45 +1163,18 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n-    /// Decodes all inherent impls in the crate (for rustdoc).\n-    fn get_inherent_impls(self) -> impl Iterator<Item = (DefId, DefId)> + 'a {\n-        (0..self.root.tables.inherent_impls.size()).flat_map(move |i| {\n-            let ty_index = DefIndex::from_usize(i);\n-            let ty_def_id = self.local_def_id(ty_index);\n-            self.root\n-                .tables\n-                .inherent_impls\n-                .get(self, ty_index)\n-                .decode(self)\n-                .map(move |impl_index| (ty_def_id, self.local_def_id(impl_index)))\n-        })\n-    }\n-\n     /// Decodes all traits in the crate (for rustdoc and rustc diagnostics).\n     fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {\n         self.root.traits.decode(self).map(move |index| self.local_def_id(index))\n     }\n \n     /// Decodes all trait impls in the crate (for rustdoc).\n-    fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {\n-        self.cdata.trait_impls.iter().flat_map(move |(&(trait_cnum_raw, trait_index), impls)| {\n-            let trait_def_id = DefId {\n-                krate: self.cnum_map[CrateNum::from_u32(trait_cnum_raw)],\n-                index: trait_index,\n-            };\n-            impls.decode(self).map(move |(impl_index, simplified_self_ty)| {\n-                (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)\n-            })\n+    fn get_trait_impls(self) -> impl Iterator<Item = DefId> + 'a {\n+        self.cdata.trait_impls.values().flat_map(move |impls| {\n+            impls.decode(self).map(move |(impl_index, _)| self.local_def_id(impl_index))\n         })\n     }\n \n-    fn get_all_incoherent_impls(self) -> impl Iterator<Item = DefId> + 'a {\n-        self.cdata\n-            .incoherent_impls\n-            .values()\n-            .flat_map(move |impls| impls.decode(self).map(move |idx| self.local_def_id(idx)))\n-    }\n-\n     fn get_incoherent_impls(self, tcx: TyCtxt<'tcx>, simp: SimplifiedType) -> &'tcx [DefId] {\n         if let Some(impls) = self.cdata.incoherent_impls.get(&simp) {\n             tcx.arena.alloc_from_iter(impls.decode(self).map(|idx| self.local_def_id(idx)))\n@@ -1598,6 +1571,24 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn get_is_intrinsic(self, index: DefIndex) -> bool {\n         self.root.tables.is_intrinsic.get(self, index)\n     }\n+\n+    fn get_doc_link_resolutions(self, index: DefIndex) -> DocLinkResMap {\n+        self.root\n+            .tables\n+            .doc_link_resolutions\n+            .get(self, index)\n+            .expect(\"no resolutions for a doc link\")\n+            .decode(self)\n+    }\n+\n+    fn get_doc_link_traits_in_scope(self, index: DefIndex) -> impl Iterator<Item = DefId> + 'a {\n+        self.root\n+            .tables\n+            .doc_link_traits_in_scope\n+            .get(self, index)\n+            .expect(\"no traits in scope for a doc link\")\n+            .decode(self)\n+    }\n }\n \n impl CrateMetadata {"}, {"sha": "8082a8903204779f66ac8e30943d240554358572", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 44, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -304,6 +304,7 @@ provide! { tcx, def_id, other, cdata,\n     extra_filename => { cdata.root.extra_filename.clone() }\n \n     traits_in_crate => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n+    trait_impls_in_crate => { tcx.arena.alloc_from_iter(cdata.get_trait_impls()) }\n     implementations_of_trait => { cdata.get_implementations_of_trait(tcx, other) }\n     crate_incoherent_impls => { cdata.get_incoherent_impls(tcx, other) }\n \n@@ -345,6 +346,10 @@ provide! { tcx, def_id, other, cdata,\n     expn_that_defined => { cdata.get_expn_that_defined(def_id.index, tcx.sess) }\n     generator_diagnostic_data => { cdata.get_generator_diagnostic_data(tcx, def_id.index) }\n     is_doc_hidden => { cdata.get_attr_flags(def_id.index).contains(AttrFlags::IS_DOC_HIDDEN) }\n+    doc_link_resolutions => { tcx.arena.alloc(cdata.get_doc_link_resolutions(def_id.index)) }\n+    doc_link_traits_in_scope => {\n+        tcx.arena.alloc_from_iter(cdata.get_doc_link_traits_in_scope(def_id.index))\n+    }\n }\n \n pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n@@ -604,50 +609,6 @@ impl CStore {\n     ) -> Span {\n         self.get_crate_data(cnum).get_proc_macro_quoted_span(id, sess)\n     }\n-\n-    /// Decodes all trait impls in the crate (for rustdoc).\n-    pub fn trait_impls_in_crate_untracked(\n-        &self,\n-        cnum: CrateNum,\n-    ) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + '_ {\n-        self.get_crate_data(cnum).get_trait_impls()\n-    }\n-\n-    /// Decodes all inherent impls in the crate (for rustdoc).\n-    pub fn inherent_impls_in_crate_untracked(\n-        &self,\n-        cnum: CrateNum,\n-    ) -> impl Iterator<Item = (DefId, DefId)> + '_ {\n-        self.get_crate_data(cnum).get_inherent_impls()\n-    }\n-\n-    /// Decodes all incoherent inherent impls in the crate (for rustdoc).\n-    pub fn incoherent_impls_in_crate_untracked(\n-        &self,\n-        cnum: CrateNum,\n-    ) -> impl Iterator<Item = DefId> + '_ {\n-        self.get_crate_data(cnum).get_all_incoherent_impls()\n-    }\n-\n-    pub fn associated_item_def_ids_untracked<'a>(\n-        &'a self,\n-        def_id: DefId,\n-        sess: &'a Session,\n-    ) -> impl Iterator<Item = DefId> + 'a {\n-        self.get_crate_data(def_id.krate).get_associated_item_def_ids(def_id.index, sess)\n-    }\n-\n-    pub fn may_have_doc_links_untracked(&self, def_id: DefId) -> bool {\n-        self.get_crate_data(def_id.krate)\n-            .get_attr_flags(def_id.index)\n-            .contains(AttrFlags::MAY_HAVE_DOC_LINKS)\n-    }\n-\n-    pub fn is_doc_hidden_untracked(&self, def_id: DefId) -> bool {\n-        self.get_crate_data(def_id.krate)\n-            .get_attr_flags(def_id.index)\n-            .contains(AttrFlags::IS_DOC_HIDDEN)\n-    }\n }\n \n impl CrateStore for CStore {"}, {"sha": "060ade8a42f71c5262bbd196208040091b4ac8f7", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -3,7 +3,6 @@ use crate::rmeta::def_path_hash_map::DefPathHashMapRef;\n use crate::rmeta::table::TableBuilder;\n use crate::rmeta::*;\n \n-use rustc_ast::util::comments;\n use rustc_ast::Attribute;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n@@ -772,7 +771,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n struct AnalyzeAttrState {\n     is_exported: bool,\n-    may_have_doc_links: bool,\n     is_doc_hidden: bool,\n }\n \n@@ -790,15 +788,12 @@ fn analyze_attr(attr: &Attribute, state: &mut AnalyzeAttrState) -> bool {\n     let mut should_encode = false;\n     if rustc_feature::is_builtin_only_local(attr.name_or_empty()) {\n         // Attributes marked local-only don't need to be encoded for downstream crates.\n-    } else if let Some(s) = attr.doc_str() {\n+    } else if attr.doc_str().is_some() {\n         // We keep all doc comments reachable to rustdoc because they might be \"imported\" into\n         // downstream crates if they use `#[doc(inline)]` to copy an item's documentation into\n         // their own.\n         if state.is_exported {\n             should_encode = true;\n-            if comments::may_have_doc_links(s.as_str()) {\n-                state.may_have_doc_links = true;\n-            }\n         }\n     } else if attr.has_name(sym::doc) {\n         // If this is a `doc` attribute that doesn't have anything except maybe `inline` (as in\n@@ -1139,7 +1134,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let tcx = self.tcx;\n         let mut state = AnalyzeAttrState {\n             is_exported: tcx.effective_visibilities(()).is_exported(def_id),\n-            may_have_doc_links: false,\n             is_doc_hidden: false,\n         };\n         let attr_iter = tcx\n@@ -1151,9 +1145,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         record_array!(self.tables.attributes[def_id.to_def_id()] <- attr_iter);\n \n         let mut attr_flags = AttrFlags::empty();\n-        if state.may_have_doc_links {\n-            attr_flags |= AttrFlags::MAY_HAVE_DOC_LINKS;\n-        }\n         if state.is_doc_hidden {\n             attr_flags |= AttrFlags::IS_DOC_HIDDEN;\n         }\n@@ -1231,6 +1222,14 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 def_id.index\n             }));\n         }\n+\n+        for (def_id, res_map) in &tcx.resolutions(()).doc_link_resolutions {\n+            record!(self.tables.doc_link_resolutions[def_id.to_def_id()] <- res_map);\n+        }\n+\n+        for (def_id, traits) in &tcx.resolutions(()).doc_link_traits_in_scope {\n+            record_array!(self.tables.doc_link_traits_in_scope[def_id.to_def_id()] <- traits);\n+        }\n     }\n \n     #[instrument(level = \"trace\", skip(self))]\n@@ -1715,6 +1714,12 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.lookup_stability[LOCAL_CRATE.as_def_id()] <- stability);\n             }\n             self.encode_deprecation(LOCAL_CRATE.as_def_id());\n+            if let Some(res_map) = tcx.resolutions(()).doc_link_resolutions.get(&CRATE_DEF_ID) {\n+                record!(self.tables.doc_link_resolutions[LOCAL_CRATE.as_def_id()] <- res_map);\n+            }\n+            if let Some(traits) = tcx.resolutions(()).doc_link_traits_in_scope.get(&CRATE_DEF_ID) {\n+                record_array!(self.tables.doc_link_traits_in_scope[LOCAL_CRATE.as_def_id()] <- traits);\n+            }\n \n             // Normally, this information is encoded when we walk the items\n             // defined in this crate. However, we skip doing that for proc-macro crates,\n@@ -2225,6 +2230,18 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: &Path) {\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n+        doc_link_resolutions: |tcx, def_id| {\n+            tcx.resolutions(())\n+                .doc_link_resolutions\n+                .get(&def_id.expect_local())\n+                .expect(\"no resolutions for a doc link\")\n+        },\n+        doc_link_traits_in_scope: |tcx, def_id| {\n+            tcx.resolutions(())\n+                .doc_link_traits_in_scope\n+                .get(&def_id.expect_local())\n+                .expect(\"no traits in scope for a doc link\")\n+        },\n         traits_in_crate: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n \n@@ -2239,6 +2256,22 @@ pub fn provide(providers: &mut Providers) {\n             traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));\n             tcx.arena.alloc_slice(&traits)\n         },\n+        trait_impls_in_crate: |tcx, cnum| {\n+            assert_eq!(cnum, LOCAL_CRATE);\n+\n+            let mut trait_impls = Vec::new();\n+            for id in tcx.hir().items() {\n+                if matches!(tcx.def_kind(id.owner_id), DefKind::Impl)\n+                    && tcx.impl_trait_ref(id.owner_id).is_some()\n+                {\n+                    trait_impls.push(id.owner_id.to_def_id())\n+                }\n+            }\n+\n+            // Bring everything into deterministic order.\n+            trait_impls.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));\n+            tcx.arena.alloc_slice(&trait_impls)\n+        },\n \n         ..*providers\n     }"}, {"sha": "9227609cc8b668c126aa43cc73b8bf9b6f8d3167", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -9,7 +9,7 @@ use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, DefKind};\n+use rustc_hir::def::{CtorKind, DefKind, DocLinkResMap};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n use rustc_hir::lang_items::LangItem;\n@@ -413,6 +413,8 @@ define_tables! {\n     module_reexports: Table<DefIndex, LazyArray<ModChild>>,\n     deduced_param_attrs: Table<DefIndex, LazyArray<DeducedParamAttrs>>,\n     trait_impl_trait_tys: Table<DefIndex, LazyValue<FxHashMap<DefId, Ty<'static>>>>,\n+    doc_link_resolutions: Table<DefIndex, LazyValue<DocLinkResMap>>,\n+    doc_link_traits_in_scope: Table<DefIndex, LazyArray<DefId>>,\n }\n \n #[derive(TyEncodable, TyDecodable)]\n@@ -426,8 +428,7 @@ struct VariantData {\n bitflags::bitflags! {\n     #[derive(Default)]\n     pub struct AttrFlags: u8 {\n-        const MAY_HAVE_DOC_LINKS = 1 << 0;\n-        const IS_DOC_HIDDEN      = 1 << 1;\n+        const IS_DOC_HIDDEN = 1 << 0;\n     }\n }\n "}, {"sha": "38a559d892a35a0c3b7f12863169ce80fc646d78", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -8,7 +8,7 @@\n macro_rules! arena_types {\n     ($macro:path) => (\n         $macro!([\n-            [] layout: rustc_target::abi::LayoutS<rustc_target::abi::VariantIdx>,\n+            [] layout: rustc_target::abi::LayoutS,\n             [] fn_abi: rustc_target::abi::call::FnAbi<'tcx, rustc_middle::ty::Ty<'tcx>>,\n             // AdtDef are interned and compared by address\n             [decode] adt_def: rustc_middle::ty::AdtDefData,\n@@ -113,6 +113,7 @@ macro_rules! arena_types {\n             [decode] trait_impl_trait_tys: rustc_data_structures::fx::FxHashMap<rustc_hir::def_id::DefId, rustc_middle::ty::Ty<'tcx>>,\n             [] bit_set_u32: rustc_index::bit_set::BitSet<u32>,\n             [] external_constraints: rustc_middle::traits::solve::ExternalConstraintsData<'tcx>,\n+            [decode] doc_link_resolutions: rustc_hir::def::DocLinkResMap,\n         ]);\n     )\n }"}, {"sha": "2e82efba1924efa0bde696ae7f02c133bcbd2a97", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -55,7 +55,7 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n         ty::tls::with_context(|icx| {\n             let icx = ty::tls::ImplicitCtxt { task_deps, ..icx.clone() };\n \n-            ty::tls::enter_context(&icx, |_| op())\n+            ty::tls::enter_context(&icx, op)\n         })\n     }\n "}, {"sha": "ada516aa0329d2cb47987fc90cc54cbb1c07a5cb", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -42,7 +42,7 @@ pub struct Canonical<'tcx, V> {\n \n pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n \n-impl<'tcx> ty::TypeFoldable<'tcx> for CanonicalVarInfos<'tcx> {\n+impl<'tcx> ty::ir::TypeFoldable<TyCtxt<'tcx>> for CanonicalVarInfos<'tcx> {\n     fn try_fold_with<F: ty::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -345,9 +345,9 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n             var_values: tcx.mk_substs(infos.iter().enumerate().map(\n                 |(i, info)| -> ty::GenericArg<'tcx> {\n                     match info.kind {\n-                        CanonicalVarKind::Ty(_) | CanonicalVarKind::PlaceholderTy(_) => tcx\n-                            .mk_ty(ty::Bound(ty::INNERMOST, ty::BoundVar::from_usize(i).into()))\n-                            .into(),\n+                        CanonicalVarKind::Ty(_) | CanonicalVarKind::PlaceholderTy(_) => {\n+                            tcx.mk_bound(ty::INNERMOST, ty::BoundVar::from_usize(i).into()).into()\n+                        }\n                         CanonicalVarKind::Region(_) | CanonicalVarKind::PlaceholderRegion(_) => {\n                             let br = ty::BoundRegion {\n                                 var: ty::BoundVar::from_usize(i),"}, {"sha": "e6cd38c0f1584661073539e572ec350bed32fb89", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -34,6 +34,7 @@\n #![feature(get_mut_unchecked)]\n #![feature(if_let_guard)]\n #![feature(iter_from_generator)]\n+#![feature(local_key_cell_methods)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(extern_types)]\n@@ -47,18 +48,17 @@\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n #![feature(control_flow_enum)]\n-#![feature(associated_type_defaults)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![feature(try_reserve_kind)]\n #![feature(nonzero_ops)]\n-#![feature(unwrap_infallible)]\n #![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(intra_doc_pointers)]\n #![feature(yeet_expr)]\n #![feature(result_option_inspect)]\n #![feature(const_option)]\n+#![feature(trait_alias)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]\n "}, {"sha": "57d66ac6a039e27cb79af4e543264ec56c89f103", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 3, "deletions": 145, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -69,7 +69,7 @@ macro_rules! CloneLiftImpls {\n macro_rules! TrivialTypeTraversalImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n-            impl<$tcx> $crate::ty::fold::TypeFoldable<$tcx> for $ty {\n+            impl<$tcx> $crate::ty::fold::ir::TypeFoldable<$crate::ty::TyCtxt<$tcx>> for $ty {\n                 fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n                     self,\n                     _: &mut F,\n@@ -86,7 +86,7 @@ macro_rules! TrivialTypeTraversalImpls {\n                 }\n             }\n \n-            impl<$tcx> $crate::ty::visit::TypeVisitable<$tcx> for $ty {\n+            impl<$tcx> $crate::ty::visit::ir::TypeVisitable<$crate::ty::TyCtxt<$tcx>> for $ty {\n                 #[inline]\n                 fn visit_with<F: $crate::ty::visit::TypeVisitor<$tcx>>(\n                     &self,\n@@ -101,7 +101,7 @@ macro_rules! TrivialTypeTraversalImpls {\n \n     ($($ty:ty,)+) => {\n         TrivialTypeTraversalImpls! {\n-            for <'tcx> {\n+            for<'tcx> {\n                 $($ty,)+\n             }\n         }\n@@ -115,145 +115,3 @@ macro_rules! TrivialTypeTraversalAndLiftImpls {\n         CloneLiftImpls! { $($t)* }\n     }\n }\n-\n-#[macro_export]\n-macro_rules! EnumTypeTraversalImpl {\n-    (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n-        $($variants:tt)*\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::fold::TypeFoldable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn try_fold_with<V: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n-                self,\n-                folder: &mut V,\n-            ) -> ::std::result::Result<Self, V::Error> {\n-                EnumTypeTraversalImpl!(@FoldVariants(self, folder) input($($variants)*) output())\n-            }\n-        }\n-    };\n-\n-    (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n-        $($variants:tt)*\n-    } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::visit::TypeVisitable<$tcx> for $s\n-            $(where $($wc)*)*\n-        {\n-            fn visit_with<V: $crate::ty::visit::TypeVisitor<$tcx>>(\n-                &self,\n-                visitor: &mut V,\n-            ) -> ::std::ops::ControlFlow<V::BreakTy> {\n-                EnumTypeTraversalImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n-            }\n-        }\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr) input() output($($output:tt)*)) => {\n-        Ok(match $this {\n-            $($output)*\n-        })\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant ( $($variant_arg),* ) => {\n-                        $variant (\n-                            $($crate::ty::fold::TypeFoldable::try_fold_with($variant_arg, $folder)?),*\n-                        )\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant { $($variant_arg),* } => {\n-                        $variant {\n-                            $($variant_arg: $crate::ty::fold::TypeFoldable::fold_with(\n-                                $variant_arg, $folder\n-                            )?),* }\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@FoldVariants($this:expr, $folder:expr)\n-     input( ($variant:path), $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @FoldVariants($this, $folder)\n-                input($($input)*)\n-                output(\n-                    $variant => { $variant }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr) input() output($($output:tt)*)) => {\n-        match $this {\n-            $($output)*\n-        }\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path) ( $($variant_arg:ident),* ) , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant ( $($variant_arg),* ) => {\n-                        $($crate::ty::visit::TypeVisitable::visit_with(\n-                            $variant_arg, $visitor\n-                        )?;)*\n-                        ::std::ops::ControlFlow::Continue(())\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path) { $($variant_arg:ident),* $(,)? } , $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant { $($variant_arg),* } => {\n-                        $($crate::ty::visit::TypeVisitable::visit_with(\n-                            $variant_arg, $visitor\n-                        )?;)*\n-                        ::std::ops::ControlFlow::Continue(())\n-                    }\n-                    $($output)*\n-                )\n-        )\n-    };\n-\n-    (@VisitVariants($this:expr, $visitor:expr)\n-     input( ($variant:path), $($input:tt)*)\n-     output( $($output:tt)*) ) => {\n-        EnumTypeTraversalImpl!(\n-            @VisitVariants($this, $visitor)\n-                input($($input)*)\n-                output(\n-                    $variant => { ::std::ops::ControlFlow::Continue(()) }\n-                    $($output)*\n-                )\n-        )\n-    };\n-}"}, {"sha": "c5137cf0666ea9e189d9261e1bc9b7871c2e473a", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -323,7 +323,7 @@ impl fmt::Display for UndefinedBehaviorInfo {\n                 write!(\n                     f,\n                     \"{msg}{pointer} is a dangling pointer (it has no provenance)\",\n-                    pointer = Pointer::<Option<AllocId>>::from_addr(*i),\n+                    pointer = Pointer::<Option<AllocId>>::from_addr_invalid(*i),\n                 )\n             }\n             AlignmentCheckFailed { required, has } => write!("}, {"sha": "ab667c22a14534d6312fad598781a5651e72da6f", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -251,14 +251,16 @@ impl<Prov> Pointer<Option<Prov>> {\n }\n \n impl<Prov> Pointer<Option<Prov>> {\n+    /// Creates a pointer to the given address, with invalid provenance (i.e., cannot be used for\n+    /// any memory access).\n     #[inline(always)]\n-    pub fn from_addr(addr: u64) -> Self {\n+    pub fn from_addr_invalid(addr: u64) -> Self {\n         Pointer { provenance: None, offset: Size::from_bytes(addr) }\n     }\n \n     #[inline(always)]\n     pub fn null() -> Self {\n-        Pointer::from_addr(0)\n+        Pointer::from_addr_invalid(0)\n     }\n }\n "}, {"sha": "77594e3440e3605f03679c4dc50f2929f0c2f02c", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -322,7 +322,7 @@ impl<'tcx, Prov: Provenance> Scalar<Prov> {\n             Right(ptr) => Ok(ptr.into()),\n             Left(bits) => {\n                 let addr = u64::try_from(bits).unwrap();\n-                Ok(Pointer::from_addr(addr))\n+                Ok(Pointer::from_addr_invalid(addr))\n             }\n         }\n     }"}, {"sha": "6996d91a80dcc428bb38f38f522af2cf2b20b435", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -7,10 +7,10 @@ use crate::mir::interpret::{\n };\n use crate::mir::visit::MirVisitable;\n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable};\n+use crate::ty::fold::{ir::TypeFoldable, FallibleTypeFolder};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, DefIdTree, List, Ty, TyCtxt};\n+use crate::ty::{self, ir, DefIdTree, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n use crate::ty::{GenericArg, InternalSubsts, SubstsRef};\n \n@@ -27,7 +27,6 @@ use polonius_engine::Atom;\n pub use rustc_ast::Mutability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_serialize::{Decodable, Encodable};\n use rustc_span::symbol::Symbol;\n@@ -62,7 +61,6 @@ pub use terminator::*;\n \n pub mod traversal;\n mod type_foldable;\n-mod type_visitable;\n pub mod visit;\n \n pub use self::generic_graph::graphviz_safe_def_name;\n@@ -705,7 +703,11 @@ pub enum BindingForm<'tcx> {\n     RefForGuard,\n }\n \n-TrivialTypeTraversalAndLiftImpls! { BindingForm<'tcx>, }\n+TrivialTypeTraversalAndLiftImpls! {\n+    for<'tcx> {\n+        BindingForm<'tcx>,\n+    }\n+}\n \n mod binding_form_impl {\n     use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -1640,6 +1642,14 @@ impl<'tcx> PlaceRef<'tcx> {\n         }\n     }\n \n+    /// Returns `true` if this `Place` contains a `Deref` projection.\n+    ///\n+    /// If `Place::is_indirect` returns false, the caller knows that the `Place` refers to the\n+    /// same region of memory as its base.\n+    pub fn is_indirect(&self) -> bool {\n+        self.projection.iter().any(|elem| elem.is_indirect())\n+    }\n+\n     /// If MirPhase >= Derefered and if projection contains Deref,\n     /// It's guaranteed to be in the first place\n     pub fn has_deref(&self) -> bool {\n@@ -2340,9 +2350,13 @@ impl<'tcx> ConstantKind<'tcx> {\n     }\n \n     #[inline]\n-    pub fn try_eval_usize(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Option<u64> {\n+    pub fn try_eval_target_usize(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Option<u64> {\n         match self {\n-            Self::Ty(ct) => ct.try_eval_usize(tcx, param_env),\n+            Self::Ty(ct) => ct.try_eval_target_usize(tcx, param_env),\n             Self::Val(val, _) => val.try_to_machine_usize(tcx),\n             Self::Unevaluated(uneval, _) => {\n                 match tcx.const_eval_resolve(param_env, *uneval, None) {\n@@ -2742,7 +2756,7 @@ impl UserTypeProjection {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for UserTypeProjection {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(UserTypeProjection {\n             base: self.base.try_fold_with(folder)?,\n@@ -2751,7 +2765,7 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for UserTypeProjection {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for UserTypeProjection {\n     fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit."}, {"sha": "e2ab3fd35b331c084cd9510a418e635aa314e087", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -161,6 +161,8 @@ pub struct GeneratorLayout<'tcx> {\n     /// Which saved locals are storage-live at the same time. Locals that do not\n     /// have conflicts with each other are allowed to overlap in the computed\n     /// layout.\n+    #[type_foldable(identity)]\n+    #[type_visitable(ignore)]\n     pub storage_conflicts: BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal>,\n }\n "}, {"sha": "97dc8a99f9b0e072734630b78001bf11e9edaca0", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -97,7 +97,7 @@ impl<'tcx> PlaceTy<'tcx> {\n                     ty::Slice(..) => self.ty,\n                     ty::Array(inner, _) if !from_end => tcx.mk_array(*inner, (to - from) as u64),\n                     ty::Array(inner, size) if from_end => {\n-                        let size = size.eval_usize(tcx, param_env);\n+                        let size = size.eval_target_usize(tcx, param_env);\n                         let len = size - (from as u64) - (to as u64);\n                         tcx.mk_array(*inner, len)\n                     }\n@@ -162,7 +162,7 @@ impl<'tcx> Rvalue<'tcx> {\n         match *self {\n             Rvalue::Use(ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Repeat(ref operand, count) => {\n-                tcx.mk_ty(ty::Array(operand.ty(local_decls, tcx), count))\n+                tcx.mk_array_with_const_len(operand.ty(local_decls, tcx), count)\n             }\n             Rvalue::ThreadLocalRef(did) => {\n                 let static_ty = tcx.type_of(did);"}, {"sha": "ce06a0ef0608fa09328f4e68087ecc4560cb108b", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -30,26 +30,20 @@ TrivialTypeTraversalImpls! {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx [InlineAsmTemplatePiece] {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [InlineAsmTemplatePiece] {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx [Span] {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [Span] {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<PlaceElem<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n }\n-\n-impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n-        Ok(self)\n-    }\n-}"}, {"sha": "d44c6809bd8305da53c92e7b9c0878475781bec4", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=8deed11af9a49960fcec3bf2b5e43f24dc2a1cf2", "patch": "@@ -1,9 +0,0 @@\n-//! `TypeVisitable` implementations for MIR types\n-\n-use super::*;\n-\n-impl<'tcx, R: Idx, C: Idx> TypeVisitable<'tcx> for BitMatrix<R, C> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::Continue(())\n-    }\n-}"}, {"sha": "dc02fd53ed02cd26d2d2832c4d02c374fcea6ca3", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -8,7 +8,7 @@ use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, layout::TyAndLayout, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::hir_id::{HirId, OwnerId};\n-use rustc_query_system::query::{DefaultCacheSelector, VecCacheSelector};\n+use rustc_query_system::query::{DefaultCacheSelector, SingleCacheSelector, VecCacheSelector};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -45,7 +45,7 @@ pub trait Key: Sized {\n }\n \n impl Key for () {\n-    type CacheSelector = DefaultCacheSelector<Self>;\n+    type CacheSelector = SingleCacheSelector;\n \n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {"}, {"sha": "f02e3a9aa29f61f0e66bbca2cd3acbc4ad8f3cf0", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1836,6 +1836,11 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query trait_impls_in_crate(_: CrateNum) -> &'tcx [DefId] {\n+        desc { \"fetching all trait impls in a crate\" }\n+        separate_provide_extern\n+    }\n+\n     /// The list of symbols exported from the given crate.\n     ///\n     /// - All names contained in `exported_symbols(cnum)` are guaranteed to\n@@ -2156,4 +2161,23 @@ rustc_queries! {\n         desc { |tcx| \"deducing parameter attributes for {}\", tcx.def_path_str(def_id) }\n         separate_provide_extern\n     }\n+\n+    query doc_link_resolutions(def_id: DefId) -> &'tcx DocLinkResMap {\n+        eval_always\n+        desc { \"resolutions for documentation links for a module\" }\n+        separate_provide_extern\n+    }\n+\n+    query doc_link_traits_in_scope(def_id: DefId) -> &'tcx [DefId] {\n+        eval_always\n+        desc { \"traits in scope for documentation links for a module\" }\n+        separate_provide_extern\n+    }\n+\n+    /// Used in `super_combine_consts` to ICE if the type of the two consts are definitely not going to end up being\n+    /// equal to eachother. This might return `Ok` even if the types are unequal, but will never return `Err` if\n+    /// the types might be equal.\n+    query check_tys_might_be_eq(arg: Canonical<'tcx, (ty::ParamEnv<'tcx>, Ty<'tcx>, Ty<'tcx>)>) -> Result<(), NoSolution> {\n+        desc { \"check whether two const param are definitely not equal to eachother\"}\n+    }\n }"}, {"sha": "bddf84880d297368f995f05a5932691c4dfa2a5b", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -2,7 +2,10 @@ use std::ops::ControlFlow;\n \n use rustc_data_structures::intern::Interned;\n \n-use crate::ty::{FallibleTypeFolder, Ty, TypeFoldable, TypeFolder, TypeVisitable, TypeVisitor};\n+use crate::ty::{\n+    ir::{self, TypeFoldable, TypeVisitable},\n+    FallibleTypeFolder, Ty, TyCtxt, TypeFolder, TypeVisitor,\n+};\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub struct ExternalConstraints<'tcx>(pub(crate) Interned<'tcx, ExternalConstraintsData<'tcx>>);\n@@ -23,27 +26,29 @@ pub struct ExternalConstraintsData<'tcx> {\n     pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ExternalConstraints<'tcx> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        Ok(FallibleTypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n-            regions: (),\n-            opaque_types: self\n-                .opaque_types\n-                .iter()\n-                .map(|opaque| opaque.try_fold_with(folder))\n-                .collect::<Result<_, F::Error>>()?,\n-        }))\n+        Ok(ir::FallibleTypeFolder::interner(folder).intern_external_constraints(\n+            ExternalConstraintsData {\n+                regions: (),\n+                opaque_types: self\n+                    .opaque_types\n+                    .iter()\n+                    .map(|opaque| opaque.try_fold_with(folder))\n+                    .collect::<Result<_, F::Error>>()?,\n+            },\n+        ))\n     }\n \n     fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        TypeFolder::tcx(folder).intern_external_constraints(ExternalConstraintsData {\n+        ir::TypeFolder::interner(folder).intern_external_constraints(ExternalConstraintsData {\n             regions: (),\n             opaque_types: self.opaque_types.iter().map(|opaque| opaque.fold_with(folder)).collect(),\n         })\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ExternalConstraints<'tcx> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(\n         &self,\n         visitor: &mut V,"}, {"sha": "b7f0a0be75ee2c104b714341719b66bafc09744a", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,7 +1,6 @@\n //! A subset of a mir body used for const evaluatability checking.\n use crate::ty::{\n-    self, Const, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, ir::TypeFolder, Const, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n };\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n@@ -53,8 +52,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             tcx: TyCtxt<'tcx>,\n         }\n \n-        impl<'tcx> TypeFolder<'tcx> for Expander<'tcx> {\n-            fn tcx(&self) -> TyCtxt<'tcx> {\n+        impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Expander<'tcx> {\n+            fn interner(&self) -> TyCtxt<'tcx> {\n                 self.tcx\n             }\n             fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {"}, {"sha": "3ad56e8f273df7e7f04ab3d567e1bf60c64aae9f", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -175,7 +175,7 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     /// Creates an interned usize constant.\n-    pub fn from_usize(tcx: TyCtxt<'tcx>, n: u64) -> Self {\n+    pub fn from_target_usize(tcx: TyCtxt<'tcx>, n: u64) -> Self {\n         Self::from_bits(tcx, n as u128, ParamEnv::empty().and(tcx.types.usize))\n     }\n \n@@ -201,7 +201,11 @@ impl<'tcx> Const<'tcx> {\n     }\n \n     #[inline]\n-    pub fn try_eval_usize(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Option<u64> {\n+    pub fn try_eval_target_usize(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n+    ) -> Option<u64> {\n         self.kind().eval(tcx, param_env).try_to_machine_usize(tcx)\n     }\n \n@@ -229,8 +233,8 @@ impl<'tcx> Const<'tcx> {\n \n     #[inline]\n     /// Panics if the value cannot be evaluated or doesn't contain a valid `usize`.\n-    pub fn eval_usize(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {\n-        self.try_eval_usize(tcx, param_env)\n+    pub fn eval_target_usize(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> u64 {\n+        self.try_eval_target_usize(tcx, param_env)\n             .unwrap_or_else(|| bug!(\"expected usize, got {:#?}\", self))\n     }\n "}, {"sha": "4aef071cd98274ca90b1c0e38a7315981c7333ee", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 137, "deletions": 16, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -100,9 +100,11 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type AdtDef = ty::AdtDef<'tcx>;\n     type SubstsRef = ty::SubstsRef<'tcx>;\n     type DefId = DefId;\n+    type Binder<T> = Binder<'tcx, T>;\n     type Ty = Ty<'tcx>;\n     type Const = ty::Const<'tcx>;\n     type Region = Region<'tcx>;\n+    type Predicate = Predicate<'tcx>;\n     type TypeAndMut = TypeAndMut<'tcx>;\n     type Mutability = hir::Mutability;\n     type Movability = hir::Movability;\n@@ -147,7 +149,7 @@ pub struct CtxtInterners<'tcx> {\n     const_: InternedSet<'tcx, ConstData<'tcx>>,\n     const_allocation: InternedSet<'tcx, Allocation>,\n     bound_variable_kinds: InternedSet<'tcx, List<ty::BoundVariableKind>>,\n-    layout: InternedSet<'tcx, LayoutS<VariantIdx>>,\n+    layout: InternedSet<'tcx, LayoutS>,\n     adt_def: InternedSet<'tcx, AdtDefData>,\n     external_constraints: InternedSet<'tcx, ExternalConstraintsData<'tcx>>,\n }\n@@ -241,6 +243,11 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n }\n \n+const NUM_PREINTERNED_TY_VARS: u32 = 100;\n+const NUM_PREINTERNED_FRESH_TYS: u32 = 20;\n+const NUM_PREINTERNED_FRESH_INT_TYS: u32 = 3;\n+const NUM_PREINTERNED_FRESH_FLOAT_TYS: u32 = 3;\n+\n pub struct CommonTypes<'tcx> {\n     pub unit: Ty<'tcx>,\n     pub bool: Ty<'tcx>,\n@@ -266,7 +273,20 @@ pub struct CommonTypes<'tcx> {\n     /// Dummy type used for the `Self` of a `TraitRef` created for converting\n     /// a trait object, and which gets removed in `ExistentialTraitRef`.\n     /// This type must not appear anywhere in other converted types.\n+    /// `Infer(ty::FreshTy(0))` does the job.\n     pub trait_object_dummy_self: Ty<'tcx>,\n+\n+    /// Pre-interned `Infer(ty::TyVar(n))` for small values of `n`.\n+    pub ty_vars: Vec<Ty<'tcx>>,\n+\n+    /// Pre-interned `Infer(ty::FreshTy(n))` for small values of `n`.\n+    pub fresh_tys: Vec<Ty<'tcx>>,\n+\n+    /// Pre-interned `Infer(ty::FreshIntTy(n))` for small values of `n`.\n+    pub fresh_int_tys: Vec<Ty<'tcx>>,\n+\n+    /// Pre-interned `Infer(ty::FreshFloatTy(n))` for small values of `n`.\n+    pub fresh_float_tys: Vec<Ty<'tcx>>,\n }\n \n pub struct CommonLifetimes<'tcx> {\n@@ -289,6 +309,15 @@ impl<'tcx> CommonTypes<'tcx> {\n     ) -> CommonTypes<'tcx> {\n         let mk = |ty| interners.intern_ty(ty, sess, untracked);\n \n+        let ty_vars =\n+            (0..NUM_PREINTERNED_TY_VARS).map(|n| mk(Infer(ty::TyVar(TyVid::from(n))))).collect();\n+        let fresh_tys: Vec<_> =\n+            (0..NUM_PREINTERNED_FRESH_TYS).map(|n| mk(Infer(ty::FreshTy(n)))).collect();\n+        let fresh_int_tys: Vec<_> =\n+            (0..NUM_PREINTERNED_FRESH_INT_TYS).map(|n| mk(Infer(ty::FreshIntTy(n)))).collect();\n+        let fresh_float_tys: Vec<_> =\n+            (0..NUM_PREINTERNED_FRESH_FLOAT_TYS).map(|n| mk(Infer(ty::FreshFloatTy(n)))).collect();\n+\n         CommonTypes {\n             unit: mk(Tuple(List::empty())),\n             bool: mk(Bool),\n@@ -311,7 +340,12 @@ impl<'tcx> CommonTypes<'tcx> {\n             str_: mk(Str),\n             self_param: mk(ty::Param(ty::ParamTy { index: 0, name: kw::SelfUpper })),\n \n-            trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),\n+            trait_object_dummy_self: fresh_tys[0],\n+\n+            ty_vars,\n+            fresh_tys,\n+            fresh_int_tys,\n+            fresh_float_tys,\n         }\n     }\n }\n@@ -468,6 +502,18 @@ pub struct GlobalCtxt<'tcx> {\n     pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,\n }\n \n+impl<'tcx> GlobalCtxt<'tcx> {\n+    /// Installs `self` in a `TyCtxt` and `ImplicitCtxt` for the duration of\n+    /// `f`.\n+    pub fn enter<'a: 'tcx, F, R>(&'a self, f: F) -> R\n+    where\n+        F: FnOnce(TyCtxt<'tcx>) -> R,\n+    {\n+        let icx = tls::ImplicitCtxt::new(self);\n+        tls::enter_context(&icx, || f(icx.tcx))\n+    }\n+}\n+\n impl<'tcx> TyCtxt<'tcx> {\n     /// Expects a body and returns its codegen attributes.\n     ///\n@@ -649,6 +695,30 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Error(reported))\n     }\n \n+    /// Constructs a `RegionKind::ReError` lifetime.\n+    #[track_caller]\n+    pub fn re_error(self, reported: ErrorGuaranteed) -> Region<'tcx> {\n+        self.mk_region(ty::ReError(reported))\n+    }\n+\n+    /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` to ensure it\n+    /// gets used.\n+    #[track_caller]\n+    pub fn re_error_misc(self) -> Region<'tcx> {\n+        self.re_error_with_message(\n+            DUMMY_SP,\n+            \"RegionKind::ReError constructed but no error reported\",\n+        )\n+    }\n+\n+    /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` with the given\n+    /// `msg` to ensure it gets used.\n+    #[track_caller]\n+    pub fn re_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Region<'tcx> {\n+        let reported = self.sess.delay_span_bug(span, msg);\n+        self.re_error(reported)\n+    }\n+\n     /// Like [TyCtxt::ty_error] but for constants, with current `ErrorGuaranteed`\n     #[track_caller]\n     pub fn const_error_with_guaranteed(\n@@ -1450,7 +1520,7 @@ direct_interners! {\n     region: mk_region(RegionKind<'tcx>): Region -> Region<'tcx>,\n     const_: mk_const_internal(ConstData<'tcx>): Const -> Const<'tcx>,\n     const_allocation: intern_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n-    layout: intern_layout(LayoutS<VariantIdx>): Layout -> Layout<'tcx>,\n+    layout: intern_layout(LayoutS): Layout -> Layout<'tcx>,\n     adt_def: intern_adt_def(AdtDefData): AdtDef -> AdtDef<'tcx>,\n     external_constraints: intern_external_constraints(ExternalConstraintsData<'tcx>): ExternalConstraints -> ExternalConstraints<'tcx>,\n }\n@@ -1568,6 +1638,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if *r == kind { r } else { self.mk_region(kind) }\n     }\n \n+    // Avoid this in favour of more specific `mk_*` methods, where possible.\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline]\n     pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {\n@@ -1716,7 +1787,12 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n-        self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))\n+        self.mk_ty(Array(ty, ty::Const::from_target_usize(self, n)))\n+    }\n+\n+    #[inline]\n+    pub fn mk_array_with_const_len(self, ty: Ty<'tcx>, ct: Const<'tcx>) -> Ty<'tcx> {\n+        self.mk_ty(Array(ty, ct))\n     }\n \n     #[inline]\n@@ -1726,11 +1802,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n-        self.mk_ty(Tuple(self.intern_type_list(&ts)))\n+        if ts.is_empty() { self.types.unit } else { self.mk_ty(Tuple(self.intern_type_list(&ts))) }\n     }\n \n     pub fn mk_tup<I: InternAs<Ty<'tcx>, Ty<'tcx>>>(self, iter: I) -> I::Output {\n-        iter.intern_with(|ts| self.mk_ty(Tuple(self.intern_type_list(&ts))))\n+        iter.intern_with(|ts| self.intern_tup(ts))\n     }\n \n     #[inline]\n@@ -1794,7 +1870,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         item_def_id: DefId,\n         substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n     ) -> Ty<'tcx> {\n-        self.mk_ty(Alias(ty::Projection, self.mk_alias_ty(item_def_id, substs)))\n+        self.mk_alias(ty::Projection, self.mk_alias_ty(item_def_id, substs))\n     }\n \n     #[inline]\n@@ -1832,28 +1908,54 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n-        self.mk_ty_infer(TyVar(v))\n+    pub fn mk_const(self, kind: impl Into<ty::ConstKind<'tcx>>, ty: Ty<'tcx>) -> Const<'tcx> {\n+        self.mk_const_internal(ty::ConstData { kind: kind.into(), ty })\n     }\n \n     #[inline]\n-    pub fn mk_const(self, kind: impl Into<ty::ConstKind<'tcx>>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const_internal(ty::ConstData { kind: kind.into(), ty })\n+    pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.types.ty_vars.get(v.as_usize()).copied().unwrap_or_else(|| self.mk_ty(Infer(TyVar(v))))\n     }\n \n     #[inline]\n     pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {\n-        self.mk_ty_infer(IntVar(v))\n+        self.mk_ty(Infer(IntVar(v)))\n     }\n \n     #[inline]\n     pub fn mk_float_var(self, v: FloatVid) -> Ty<'tcx> {\n-        self.mk_ty_infer(FloatVar(v))\n+        self.mk_ty(Infer(FloatVar(v)))\n+    }\n+\n+    #[inline]\n+    pub fn mk_fresh_ty(self, n: u32) -> Ty<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.types\n+            .fresh_tys\n+            .get(n as usize)\n+            .copied()\n+            .unwrap_or_else(|| self.mk_ty(Infer(ty::FreshTy(n))))\n     }\n \n     #[inline]\n-    pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {\n-        self.mk_ty(Infer(it))\n+    pub fn mk_fresh_int_ty(self, n: u32) -> Ty<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.types\n+            .fresh_int_tys\n+            .get(n as usize)\n+            .copied()\n+            .unwrap_or_else(|| self.mk_ty(Infer(ty::FreshIntTy(n))))\n+    }\n+\n+    #[inline]\n+    pub fn mk_fresh_float_ty(self, n: u32) -> Ty<'tcx> {\n+        // Use a pre-interned one when possible.\n+        self.types\n+            .fresh_float_tys\n+            .get(n as usize)\n+            .copied()\n+            .unwrap_or_else(|| self.mk_ty(Infer(ty::FreshFloatTy(n))))\n     }\n \n     #[inline]\n@@ -1876,9 +1978,24 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn mk_bound(self, index: ty::DebruijnIndex, bound_ty: ty::BoundTy) -> Ty<'tcx> {\n+        self.mk_ty(Bound(index, bound_ty))\n+    }\n+\n+    #[inline]\n+    pub fn mk_placeholder(self, placeholder: ty::PlaceholderType) -> Ty<'tcx> {\n+        self.mk_ty(Placeholder(placeholder))\n+    }\n+\n+    #[inline]\n+    pub fn mk_alias(self, kind: ty::AliasKind, alias_ty: ty::AliasTy<'tcx>) -> Ty<'tcx> {\n+        self.mk_ty(Alias(kind, alias_ty))\n+    }\n+\n     #[inline]\n     pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n-        self.mk_ty(Alias(ty::Opaque, self.mk_alias_ty(def_id, substs)))\n+        self.mk_alias(ty::Opaque, self.mk_alias_ty(def_id, substs))\n     }\n \n     pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {\n@@ -2218,6 +2335,10 @@ impl<'tcx> TyCtxt<'tcx> {\n             })\n         )\n     }\n+\n+    pub fn trait_solver_next(self) -> bool {\n+        self.sess.opts.unstable_opts.trait_solver == rustc_session::config::TraitSolver::Next\n+    }\n }\n \n impl<'tcx> TyCtxtAt<'tcx> {"}, {"sha": "5426ac8d739924d6cfb5637c8481d01db29f619e", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -89,9 +89,8 @@ mod tlv {\n     /// This is used to set the pointer to the new `ImplicitCtxt`.\n     #[inline]\n     pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: *const (), f: F) -> R {\n-        let old = get_tlv();\n-        let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n-        TLV.with(|tlv| tlv.set(value));\n+        let old = TLV.replace(value);\n+        let _reset = rustc_data_structures::OnDrop(move || TLV.set(old));\n         f()\n     }\n }\n@@ -110,9 +109,9 @@ unsafe fn downcast<'a, 'tcx>(context: *const ()) -> &'a ImplicitCtxt<'a, 'tcx> {\n #[inline]\n pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R\n where\n-    F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,\n+    F: FnOnce() -> R,\n {\n-    tlv::with_tlv(erase(context), || f(&context))\n+    tlv::with_tlv(erase(context), f)\n }\n \n /// Allows access to the current `ImplicitCtxt` in a closure if one is available."}, {"sha": "fc529f5d1d0993e938e48624f58d0e49bdf96ab4", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -3,9 +3,10 @@\n use std::ops::ControlFlow;\n \n use crate::ty::{\n-    visit::TypeVisitable, AliasTy, Const, ConstKind, DefIdTree, FallibleTypeFolder, InferConst,\n-    InferTy, Opaque, PolyTraitPredicate, Projection, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n-    TypeSuperVisitable, TypeVisitor,\n+    ir::{FallibleTypeFolder, TypeVisitor},\n+    visit::TypeVisitable,\n+    AliasTy, Const, ConstKind, DefIdTree, InferConst, InferTy, Opaque, PolyTraitPredicate,\n+    Projection, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeSuperVisitable,\n };\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -460,7 +461,7 @@ pub struct IsSuggestableVisitor<'tcx> {\n     infer_suggestable: bool,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for IsSuggestableVisitor<'tcx> {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -535,10 +536,10 @@ pub struct MakeSuggestableFolder<'tcx> {\n     infer_suggestable: bool,\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for MakeSuggestableFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for MakeSuggestableFolder<'tcx> {\n     type Error = ();\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "d3b031bf8755c80dec327444df1f92be883146b9", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,5 +1,4 @@\n-use crate::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n-use crate::ty::visit::TypeVisitable;\n+use crate::ty::fold::{ir::TypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::{self, Ty, TyCtxt, TypeFlags};\n \n pub(super) fn provide(providers: &mut ty::query::Providers) {\n@@ -35,8 +34,8 @@ struct RegionEraserVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RegionEraserVisitor<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "9c171a69d064f13483c75c5a029a80fd3c61e5f1", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> Ty<'tcx> {\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Alias(ty::Projection, _) => \"associated type\".into(),\n             ty::Param(p) => format!(\"type parameter `{p}`\").into(),\n-            ty::Alias(ty::Opaque, ..) => \"opaque type\".into(),\n+            ty::Alias(ty::Opaque, ..) => if tcx.ty_is_opaque_future(self) { \"future\".into() } else { \"opaque type\".into() },\n             ty::Error(_) => \"type error\".into(),\n             _ => {\n                 let width = tcx.sess.diagnostic_width();"}, {"sha": "258bc9c3e4188cd7da2a81738de77bd2f696e2a7", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -264,10 +264,7 @@ impl FlagComputation {\n                 term,\n             })) => {\n                 self.add_projection_ty(projection_ty);\n-                match term.unpack() {\n-                    ty::TermKind::Ty(ty) => self.add_ty(ty),\n-                    ty::TermKind::Const(c) => self.add_const(c),\n-                }\n+                self.add_term(term);\n             }\n             ty::PredicateKind::WellFormed(arg) => {\n                 self.add_substs(slice::from_ref(&arg));\n@@ -287,6 +284,10 @@ impl FlagComputation {\n                 self.add_ty(ty);\n             }\n             ty::PredicateKind::Ambiguous => {}\n+            ty::PredicateKind::AliasEq(t1, t2) => {\n+                self.add_term(t1);\n+                self.add_term(t2);\n+            }\n         }\n     }\n \n@@ -380,4 +381,11 @@ impl FlagComputation {\n             }\n         }\n     }\n+\n+    fn add_term(&mut self, term: ty::Term<'_>) {\n+        match term.unpack() {\n+            ty::TermKind::Ty(ty) => self.add_ty(ty),\n+            ty::TermKind::Const(ct) => self.add_const(ct),\n+        }\n+    }\n }"}, {"sha": "352daa8fc298889e73afab1fc6c33a793983ff48", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 19, "deletions": 213, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,209 +1,18 @@\n-//! A folding traversal mechanism for complex data structures that contain type\n-//! information.\n-//!\n-//! This is a modifying traversal. It consumes the data structure, producing a\n-//! (possibly) modified version of it. Both fallible and infallible versions are\n-//! available. The name is potentially confusing, because this traversal is more\n-//! like `Iterator::map` than `Iterator::fold`.\n-//!\n-//! This traversal has limited flexibility. Only a small number of \"types of\n-//! interest\" within the complex data structures can receive custom\n-//! modification. These are the ones containing the most important type-related\n-//! information, such as `Ty`, `Predicate`, `Region`, and `Const`.\n-//!\n-//! There are three groups of traits involved in each traversal.\n-//! - `TypeFoldable`. This is implemented once for many types, including:\n-//!   - Types of interest, for which the methods delegate to the folder.\n-//!   - All other types, including generic containers like `Vec` and `Option`.\n-//!     It defines a \"skeleton\" of how they should be folded.\n-//! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n-//!   and defines the folding \"skeleton\" for these types.\n-//! - `TypeFolder`/`FallibleTypeFolder. One of these is implemented for each\n-//!   folder. This defines how types of interest are folded.\n-//!\n-//! This means each fold is a mixture of (a) generic folding operations, and (b)\n-//! custom fold operations that are specific to the folder.\n-//! - The `TypeFoldable` impls handle most of the traversal, and call into\n-//!   `TypeFolder`/`FallibleTypeFolder` when they encounter a type of interest.\n-//! - A `TypeFolder`/`FallibleTypeFolder` may call into another `TypeFoldable`\n-//!   impl, because some of the types of interest are recursive and can contain\n-//!   other types of interest.\n-//! - A `TypeFolder`/`FallibleTypeFolder` may also call into a `TypeSuperFoldable`\n-//!   impl, because each folder might provide custom handling only for some types\n-//!   of interest, or only for some variants of each type of interest, and then\n-//!   use default traversal for the remaining cases.\n-//!\n-//! For example, if you have `struct S(Ty, U)` where `S: TypeFoldable` and `U:\n-//! TypeFoldable`, and an instance `s = S(ty, u)`, it would be folded like so:\n-//! ```text\n-//! s.fold_with(folder) calls\n-//! - ty.fold_with(folder) calls\n-//!   - folder.fold_ty(ty) may call\n-//!     - ty.super_fold_with(folder)\n-//! - u.fold_with(folder)\n-//! ```\n use crate::ty::{self, Binder, BoundTy, Ty, TyCtxt, TypeVisitable};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n \n use std::collections::BTreeMap;\n \n-/// This trait is implemented for every type that can be folded,\n-/// providing the skeleton of the traversal.\n-///\n-/// To implement this conveniently, use the derive macro located in\n-/// `rustc_macros`.\n-pub trait TypeFoldable<'tcx>: TypeVisitable<'tcx> {\n-    /// The entry point for folding. To fold a value `t` with a folder `f`\n-    /// call: `t.try_fold_with(f)`.\n-    ///\n-    /// For most types, this just traverses the value, calling `try_fold_with`\n-    /// on each field/element.\n-    ///\n-    /// For types of interest (such as `Ty`), the implementation of method\n-    /// calls a folder method specifically for that type (such as\n-    /// `F::try_fold_ty`). This is where control transfers from `TypeFoldable`\n-    /// to `TypeFolder`.\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error>;\n-\n-    /// A convenient alternative to `try_fold_with` for use with infallible\n-    /// folders. Do not override this method, to ensure coherence with\n-    /// `try_fold_with`.\n-    fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        self.try_fold_with(folder).into_ok()\n-    }\n-}\n-\n-// This trait is implemented for types of interest.\n-pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n-    /// Provides a default fold for a type of interest. This should only be\n-    /// called within `TypeFolder` methods, when a non-custom traversal is\n-    /// desired for the value of the type of interest passed to that method.\n-    /// For example, in `MyFolder::try_fold_ty(ty)`, it is valid to call\n-    /// `ty.try_super_fold_with(self)`, but any other folding should be done\n-    /// with `xyz.try_fold_with(self)`.\n-    fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error>;\n-\n-    /// A convenient alternative to `try_super_fold_with` for use with\n-    /// infallible folders. Do not override this method, to ensure coherence\n-    /// with `try_super_fold_with`.\n-    fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        self.try_super_fold_with(folder).into_ok()\n-    }\n-}\n-\n-/// This trait is implemented for every infallible folding traversal. There is\n-/// a fold method defined for every type of interest. Each such method has a\n-/// default that does an \"identity\" fold. Implementations of these methods\n-/// often fall back to a `super_fold_with` method if the primary argument\n-/// doesn't satisfy a particular condition.\n-///\n-/// A blanket implementation of [`FallibleTypeFolder`] will defer to\n-/// the infallible methods of this trait to ensure that the two APIs\n-/// are coherent.\n-pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n-    fn tcx(&self) -> TyCtxt<'tcx>;\n-\n-    fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        t.super_fold_with(self)\n-    }\n-\n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        t.super_fold_with(self)\n-    }\n-\n-    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        r.super_fold_with(self)\n-    }\n-\n-    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        c.super_fold_with(self)\n-    }\n-\n-    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n-        p.super_fold_with(self)\n-    }\n-}\n-\n-/// This trait is implemented for every folding traversal. There is a fold\n-/// method defined for every type of interest. Each such method has a default\n-/// that does an \"identity\" fold.\n-///\n-/// A blanket implementation of this trait (that defers to the relevant\n-/// method of [`TypeFolder`]) is provided for all infallible folders in\n-/// order to ensure the two APIs are coherent.\n-pub trait FallibleTypeFolder<'tcx>: Sized {\n-    type Error;\n-\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n-\n-    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        t.try_super_fold_with(self)\n-    }\n+pub trait TypeFoldable<'tcx> = ir::TypeFoldable<TyCtxt<'tcx>> + TypeVisitable<'tcx>;\n+pub trait TypeSuperFoldable<'tcx> = ir::TypeSuperFoldable<TyCtxt<'tcx>>;\n+pub trait TypeFolder<'tcx> = ir::TypeFolder<TyCtxt<'tcx>>;\n+pub trait FallibleTypeFolder<'tcx> = ir::FallibleTypeFolder<TyCtxt<'tcx>>;\n \n-    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n-        t.try_super_fold_with(self)\n-    }\n-\n-    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {\n-        r.try_super_fold_with(self)\n-    }\n-\n-    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n-        c.try_super_fold_with(self)\n-    }\n-\n-    fn try_fold_predicate(\n-        &mut self,\n-        p: ty::Predicate<'tcx>,\n-    ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n-        p.try_super_fold_with(self)\n-    }\n-}\n-\n-// This blanket implementation of the fallible trait for infallible folders\n-// delegates to infallible methods to ensure coherence.\n-impl<'tcx, F> FallibleTypeFolder<'tcx> for F\n-where\n-    F: TypeFolder<'tcx>,\n-{\n-    type Error = !;\n-\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n-        TypeFolder::tcx(self)\n-    }\n-\n-    fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, !>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        Ok(self.fold_binder(t))\n-    }\n-\n-    fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, !> {\n-        Ok(self.fold_ty(t))\n-    }\n-\n-    fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, !> {\n-        Ok(self.fold_region(r))\n-    }\n-\n-    fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, !> {\n-        Ok(self.fold_const(c))\n-    }\n-\n-    fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {\n-        Ok(self.fold_predicate(p))\n-    }\n+pub mod ir {\n+    pub use rustc_type_ir::fold::{\n+        FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable,\n+    };\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -221,13 +30,13 @@ where\n     pub ct_op: H,\n }\n \n-impl<'tcx, F, G, H> TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>\n+impl<'tcx, F, G, H> ir::TypeFolder<TyCtxt<'tcx>> for BottomUpFolder<'tcx, F, G, H>\n where\n     F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n     H: FnMut(ty::Const<'tcx>) -> ty::Const<'tcx>,\n {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -311,8 +120,8 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -385,11 +194,11 @@ impl<'tcx, D: BoundVarReplacerDelegate<'tcx>> BoundVarReplacer<'tcx, D> {\n     }\n }\n \n-impl<'tcx, D> TypeFolder<'tcx> for BoundVarReplacer<'tcx, D>\n+impl<'tcx, D> ir::TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'tcx, D>\n where\n     D: BoundVarReplacerDelegate<'tcx>,\n {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -562,10 +371,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     ))\n                 },\n                 types: &mut |t: ty::BoundTy| {\n-                    self.mk_ty(ty::Bound(\n-                        ty::INNERMOST,\n-                        ty::BoundTy { var: shift_bv(t.var), kind: t.kind },\n-                    ))\n+                    self.mk_bound(ty::INNERMOST, ty::BoundTy { var: shift_bv(t.var), kind: t.kind })\n                 },\n                 consts: &mut |c, ty: Ty<'tcx>| {\n                     self.mk_const(ty::ConstKind::Bound(ty::INNERMOST, shift_bv(c)), ty)\n@@ -614,7 +420,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon(index as u32))\n                     })\n                     .expect_ty();\n-                self.tcx.mk_ty(ty::Bound(ty::INNERMOST, BoundTy { var, kind }))\n+                self.tcx.mk_bound(ty::INNERMOST, BoundTy { var, kind })\n             }\n             fn replace_const(&mut self, bv: ty::BoundVar, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n                 let entry = self.map.entry(bv);\n@@ -654,8 +460,8 @@ impl<'tcx> Shifter<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'tcx> ir::TypeFolder<TyCtxt<'tcx>> for Shifter<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -684,7 +490,7 @@ impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n         match *ty.kind() {\n             ty::Bound(debruijn, bound_ty) if debruijn >= self.current_index => {\n                 let debruijn = debruijn.shifted_in(self.amount);\n-                self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))\n+                self.tcx.mk_bound(debruijn, bound_ty)\n             }\n \n             _ if ty.has_vars_bound_at_or_above(self.current_index) => ty.super_fold_with(self),"}, {"sha": "ea95a38f272c6d2be527f64da82d09dd3992c478", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -100,7 +100,7 @@ impl GenericParamDef {\n         preceding_substs: &[ty::GenericArg<'tcx>],\n     ) -> ty::GenericArg<'tcx> {\n         match &self.kind {\n-            ty::GenericParamDefKind::Lifetime => tcx.lifetimes.re_static.into(),\n+            ty::GenericParamDefKind::Lifetime => tcx.re_error_misc().into(),\n             ty::GenericParamDefKind::Type { .. } => tcx.ty_error().into(),\n             ty::GenericParamDefKind::Const { .. } => {\n                 tcx.const_error(tcx.bound_type_of(self.def_id).subst(tcx, preceding_substs)).into()"}, {"sha": "8d0c7bf2f478f73e7f1be18380f710c0006ca0c2", "filename": "compiler/rustc_middle/src/ty/inhabitedness/inhabited_predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> InhabitedPredicate<'tcx> {\n         match self {\n             Self::False => Ok(false),\n             Self::True => Ok(true),\n-            Self::ConstIsZero(const_) => match const_.try_eval_usize(tcx, param_env) {\n+            Self::ConstIsZero(const_) => match const_.try_eval_target_usize(tcx, param_env) {\n                 None | Some(0) => Ok(true),\n                 Some(1..) => Ok(false),\n             },"}, {"sha": "55f2395e531a5240582629df3a1fce9f9d94707e", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,6 +1,6 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable, TypeVisitable};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable};\n use crate::ty::{EarlyBinder, InternalSubsts, SubstsRef};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::Namespace;\n@@ -674,8 +674,8 @@ fn polymorphize<'tcx>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> ty::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n-        fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+    impl<'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for PolymorphizationFolder<'tcx> {\n+        fn interner(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }\n "}, {"sha": "1d76f435e26d951a0211145c591acdcbd10c97a7", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1120,6 +1120,13 @@ impl From<call::AdjustForForeignAbiError> for FnAbiError<'_> {\n \n impl<'tcx> fmt::Display for FnAbiError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        #[cfg(bootstrap)]\n+        match self {\n+            Self::Layout(err) => fmt::Display::fmt(err, f),\n+            Self::AdjustForForeignAbi(err) => fmt::Display::fmt(err, f),\n+        }\n+\n+        #[cfg(not(bootstrap))]\n         match self {\n             Self::Layout(err) => err.fmt(f),\n             Self::AdjustForForeignAbi(err) => err.fmt(f),"}, {"sha": "8e6fd231f2570ce1f77fd55d7d9a72172dc8aa59", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 73, "deletions": 12, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorKind, CtorOf, DefKind, LifetimeRes, Res};\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind, DocLinkResMap, LifetimeRes, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LocalDefIdMap};\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n@@ -46,7 +46,7 @@ use rustc_serialize::{Decodable, Encodable};\n use rustc_session::cstore::Untracked;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{ExpnId, Span};\n+use rustc_span::{ExpnId, ExpnKind, Span};\n use rustc_target::abi::{Align, Integer, IntegerType, VariantIdx};\n pub use rustc_target::abi::{ReprFlags, ReprOptions};\n use rustc_type_ir::WithCachedTypeInfo;\n@@ -146,6 +146,10 @@ mod structural_impls;\n mod sty;\n mod typeck_results;\n \n+pub mod ir {\n+    pub use super::{fold::ir::*, visit::ir::*};\n+}\n+\n // Data types\n \n pub type RegisteredTools = FxHashSet<Ident>;\n@@ -181,6 +185,9 @@ pub struct ResolverGlobalCtxt {\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: FxHashMap<Span, Span>,\n     pub registered_tools: RegisteredTools,\n+    pub doc_link_resolutions: FxHashMap<LocalDefId, DocLinkResMap>,\n+    pub doc_link_traits_in_scope: FxHashMap<LocalDefId, Vec<DefId>>,\n+    pub all_macro_rules: FxHashMap<Symbol, Res<ast::NodeId>>,\n }\n \n /// Resolutions that should only be used for lowering.\n@@ -545,6 +552,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Clause(Clause::RegionOutlives(_))\n             | PredicateKind::Clause(Clause::TypeOutlives(_))\n             | PredicateKind::Clause(Clause::Projection(_))\n+            | PredicateKind::AliasEq(..)\n             | PredicateKind::ObjectSafe(_)\n             | PredicateKind::ClosureKind(_, _, _)\n             | PredicateKind::Subtype(_)\n@@ -632,6 +640,12 @@ pub enum PredicateKind<'tcx> {\n     /// A marker predicate that is always ambiguous.\n     /// Used for coherence to mark opaque types as possibly equal to each other but ambiguous.\n     Ambiguous,\n+\n+    /// Separate from `Clause::Projection` which is used for normalization in new solver.\n+    /// This predicate requires two terms to be equal to eachother.\n+    ///\n+    /// Only used for new solver\n+    AliasEq(Term<'tcx>, Term<'tcx>),\n }\n \n /// The crate outlives map is computed during typeck and contains the\n@@ -904,13 +918,13 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Term<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for Term<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for Term<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self.unpack().try_fold_with(folder)?.pack())\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for Term<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for Term<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.unpack().visit_with(visitor)\n     }\n@@ -963,6 +977,33 @@ impl<'tcx> Term<'tcx> {\n             TermKind::Const(c) => c.into(),\n         }\n     }\n+\n+    /// This function returns `None` for `AliasKind::Opaque`.\n+    ///\n+    /// FIXME: rename `AliasTy` to `AliasTerm` and make sure we correctly\n+    /// deal with constants.\n+    pub fn to_alias_term_no_opaque(&self, tcx: TyCtxt<'tcx>) -> Option<AliasTy<'tcx>> {\n+        match self.unpack() {\n+            TermKind::Ty(ty) => match ty.kind() {\n+                ty::Alias(kind, alias_ty) => match kind {\n+                    AliasKind::Projection => Some(*alias_ty),\n+                    AliasKind::Opaque => None,\n+                },\n+                _ => None,\n+            },\n+            TermKind::Const(ct) => match ct.kind() {\n+                ConstKind::Unevaluated(uv) => Some(tcx.mk_alias_ty(uv.def.did, uv.substs)),\n+                _ => None,\n+            },\n+        }\n+    }\n+\n+    pub fn is_infer(&self) -> bool {\n+        match self.unpack() {\n+            TermKind::Ty(ty) => ty.is_ty_or_numeric_infer(),\n+            TermKind::Const(ct) => ct.is_ct_infer(),\n+        }\n+    }\n }\n \n const TAG_MASK: usize = 0b11;\n@@ -1152,6 +1193,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::Trait(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Projection(..))\n+            | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n@@ -1171,6 +1213,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::Projection(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Trait(..))\n+            | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n@@ -1191,6 +1234,7 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::Clause(Clause::TypeOutlives(data)) => Some(predicate.rebind(data)),\n             PredicateKind::Clause(Clause::Trait(..))\n             | PredicateKind::Clause(Clause::Projection(..))\n+            | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n@@ -1576,7 +1620,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n     fn try_fold_with<F: ty::fold::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -1589,7 +1633,7 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ParamEnv<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)\n@@ -2344,15 +2388,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.trait_def(trait_def_id).has_auto_impl\n     }\n \n+    /// Returns `true` if this is coinductive, either because it is\n+    /// an auto trait or because it has the `#[rustc_coinductive]` attribute.\n+    pub fn trait_is_coinductive(self, trait_def_id: DefId) -> bool {\n+        self.trait_def(trait_def_id).is_coinductive\n+    }\n+\n     /// Returns `true` if this is a trait alias.\n     pub fn trait_is_alias(self, trait_def_id: DefId) -> bool {\n         self.def_kind(trait_def_id) == DefKind::TraitAlias\n     }\n \n-    pub fn trait_is_coinductive(self, trait_def_id: DefId) -> bool {\n-        self.trait_is_auto(trait_def_id) || self.lang_items().sized_trait() == Some(trait_def_id)\n-    }\n-\n     /// Returns layout of a generator. Layout might be unavailable if the\n     /// generator is tainted by errors.\n     pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {\n@@ -2390,8 +2436,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         None\n     }\n \n-    /// If the given `DefId` belongs to a trait that was automatically derived, returns `true`.\n-    pub fn is_builtin_derive(self, def_id: DefId) -> bool {\n+    /// Check if the given `DefId` is `#\\[automatically_derived\\], *and*\n+    /// whether it was produced by expanding a builtin derive macro.\n+    pub fn is_builtin_derived(self, def_id: DefId) -> bool {\n+        if self.is_automatically_derived(def_id)\n+            && let Some(def_id) = def_id.as_local()\n+            && let outer = self.def_span(def_id).ctxt().outer_expn_data()\n+            && matches!(outer.kind, ExpnKind::Macro(MacroKind::Derive, _))\n+            && self.has_attr(outer.macro_def_id.unwrap(), sym::rustc_builtin_macro)\n+        {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+    /// Check if the given `DefId` is `#\\[automatically_derived\\]`.\n+    pub fn is_automatically_derived(self, def_id: DefId) -> bool {\n         self.has_attr(def_id, sym::automatically_derived)\n     }\n "}, {"sha": "825e5fbe232fc82a543491d31c2f16ce6e33e707", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -9,7 +9,10 @@\n \n use crate::mir;\n use crate::traits::query::NoSolution;\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder};\n+use crate::ty::fold::{\n+    ir::{FallibleTypeFolder, TypeFolder},\n+    TypeFoldable,\n+};\n use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt};\n \n #[derive(Debug, Copy, Clone, HashStable, TyEncodable, TyDecodable)]\n@@ -202,8 +205,8 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for NormalizeAfterErasingRegionsFolder<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -238,10 +241,10 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     type Error = NormalizationError<'tcx>;\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n "}, {"sha": "66c878c8b6358a013ebc5eeea06187bb6433765f", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,7 +1,9 @@\n use crate::error::ConstNotUsedTraitAlias;\n-use crate::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use crate::ty::fold::{ir::TypeFolder, TypeSuperFoldable};\n use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+#[cfg(not(bootstrap))]\n+use crate::ty::TypeFoldable;\n+use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n@@ -91,8 +93,8 @@ impl<'tcx> ReverseMapper<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -109,6 +111,8 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             // them.\n             ty::ReErased => return r,\n \n+            ty::ReError(_) => return r,\n+\n             // The regions that we expect from borrow checking.\n             ty::ReEarlyBound(_) | ty::ReFree(_) => {}\n \n@@ -125,20 +129,21 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             Some(u) => panic!(\"region mapped to unexpected kind: {:?}\", u),\n             None if self.do_not_error => self.tcx.lifetimes.re_static,\n             None => {\n-                self.tcx\n+                let e = self\n+                    .tcx\n                     .sess\n                     .struct_span_err(self.span, \"non-defining opaque type use in defining scope\")\n                     .span_label(\n                         self.span,\n                         format!(\n                             \"lifetime `{}` is part of concrete type but not used in \\\n-                                 parameter list of the `impl Trait` type alias\",\n+                             parameter list of the `impl Trait` type alias\",\n                             r\n                         ),\n                     )\n                     .emit();\n \n-                self.tcx().lifetimes.re_static\n+                self.interner().re_error(e)\n             }\n         }\n     }\n@@ -183,7 +188,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                                 .emit();\n                         }\n \n-                        self.tcx().ty_error()\n+                        self.interner().ty_error()\n                     }\n                 }\n             }\n@@ -211,7 +216,7 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                             });\n                         }\n \n-                        self.tcx().const_error(ct.ty())\n+                        self.interner().const_error(ct.ty())\n                     }\n                 }\n             }"}, {"sha": "303675d3ca5c1854fda3d8f8247fd569d26236a7", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -81,6 +81,8 @@ trivially_parameterized_over_tcx! {\n     rustc_hir::IsAsync,\n     rustc_hir::LangItem,\n     rustc_hir::def::DefKind,\n+    rustc_hir::def::DocLinkResMap,\n+    rustc_hir::def_id::DefId,\n     rustc_hir::def_id::DefIndex,\n     rustc_hir::definitions::DefKey,\n     rustc_index::bit_set::BitSet<u32>,"}, {"sha": "f50a5d89d3d1ec8c91944684e510f201c9f6d359", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -22,7 +22,6 @@ use rustc_target::spec::abi::Abi;\n use smallvec::SmallVec;\n \n use std::cell::Cell;\n-use std::char;\n use std::collections::BTreeMap;\n use std::fmt::{self, Write as _};\n use std::iter;\n@@ -1210,7 +1209,7 @@ pub trait PrettyPrinter<'tcx>:\n                 // in order to place the projections inside the `<...>`.\n                 if !resugared {\n                     // Use a type that can't appear in defaults of type parameters.\n-                    let dummy_cx = cx.tcx().mk_ty_infer(ty::FreshTy(0));\n+                    let dummy_cx = cx.tcx().mk_fresh_ty(0);\n                     let principal = principal.with_self_ty(cx.tcx(), dummy_cx);\n \n                     let args = cx\n@@ -2114,7 +2113,7 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n \n             ty::ReVar(_) if identify_regions => true,\n \n-            ty::ReVar(_) | ty::ReErased => false,\n+            ty::ReVar(_) | ty::ReErased | ty::ReError(_) => false,\n \n             ty::ReStatic => true,\n         }\n@@ -2194,6 +2193,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n             ty::ReVar(_) => {}\n             ty::ReErased => {}\n+            ty::ReError(_) => {}\n             ty::ReStatic => {\n                 p!(\"'static\");\n                 return Ok(self);\n@@ -2221,8 +2221,8 @@ struct RegionFolder<'a, 'tcx> {\n             ),\n }\n \n-impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+impl<'a, 'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -2493,7 +2493,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::TypeVisitor<'tcx> for RegionNameCollector<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for RegionNameCollector<'tcx> {\n             type BreakTy = ();\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -2696,7 +2696,7 @@ define_print_and_forward_display! {\n \n     ty::ExistentialTraitRef<'tcx> {\n         // Use a type that can't appear in defaults of type parameters.\n-        let dummy_self = cx.tcx().mk_ty_infer(ty::FreshTy(0));\n+        let dummy_self = cx.tcx().mk_fresh_ty(0);\n         let trait_ref = self.with_self_ty(cx.tcx(), dummy_self);\n         p!(print(trait_ref.print_only_trait_path()))\n     }\n@@ -2841,6 +2841,7 @@ define_print_and_forward_display! {\n                 p!(\"the type `\", print(ty), \"` is found in the environment\")\n             }\n             ty::PredicateKind::Ambiguous => p!(\"ambiguous\"),\n+            ty::PredicateKind::AliasEq(t1, t2) => p!(print(t1), \" == \", print(t2)),\n         }\n     }\n "}, {"sha": "bec70974dde048cb1627ef1ba1f30e0682d7a3f2", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -45,7 +45,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unord::UnordSet;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n-use rustc_hir::def::DefKind;\n+use rustc_hir::def::{DefKind, DocLinkResMap};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId};\n use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};"}, {"sha": "33b509ec490ba32ec5e2495e305454b2f8f3f9f1", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -9,7 +9,6 @@ use crate::ty::{self, Expr, ImplSubject, Term, TermKind, Ty, TyCtxt, TypeFoldabl\n use crate::ty::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n-use rustc_span::DUMMY_SP;\n use rustc_target::spec::abi;\n use std::iter;\n \n@@ -502,7 +501,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {\n             let t = relation.relate(a_t, b_t)?;\n             match relation.relate(sz_a, sz_b) {\n-                Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n+                Ok(sz) => Ok(tcx.mk_array_with_const_len(t, sz)),\n                 Err(err) => {\n                     // Check whether the lengths are both concrete/known values,\n                     // but are unequal, for better diagnostics.\n@@ -511,8 +510,8 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n                     // we however cannot end up with errors in `Relate` during both\n                     // `type_of` and `predicates_of`. This means that evaluating the\n                     // constants should not cause cycle errors here.\n-                    let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());\n-                    let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());\n+                    let sz_a = sz_a.try_eval_target_usize(tcx, relation.param_env());\n+                    let sz_b = sz_b.try_eval_target_usize(tcx, relation.param_env());\n                     match (sz_a, sz_b) {\n                         (Some(sz_a_val), Some(sz_b_val)) if sz_a_val != sz_b_val => Err(\n                             TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),\n@@ -594,25 +593,6 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     debug!(\"{}.super_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n     let tcx = relation.tcx();\n \n-    let a_ty;\n-    let b_ty;\n-    if relation.tcx().features().adt_const_params {\n-        a_ty = tcx.normalize_erasing_regions(relation.param_env(), a.ty());\n-        b_ty = tcx.normalize_erasing_regions(relation.param_env(), b.ty());\n-    } else {\n-        a_ty = tcx.erase_regions(a.ty());\n-        b_ty = tcx.erase_regions(b.ty());\n-    }\n-    if a_ty != b_ty {\n-        relation.tcx().sess.delay_span_bug(\n-            DUMMY_SP,\n-            &format!(\n-                \"cannot relate constants ({:?}, {:?}) of different types: {} != {}\",\n-                a, b, a_ty, b_ty\n-            ),\n-        );\n-    }\n-\n     // HACK(const_generics): We still need to eagerly evaluate consts when\n     // relating them because during `normalize_param_env_or_error`,\n     // we may relate an evaluated constant in a obligation against"}, {"sha": "97ee2b1fc5dd1b1781c5df2ad7ea7d8a1e7713fa", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 55, "deletions": 269, "changes": 324, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,20 +1,19 @@\n-//! This module contains implements of the `Lift` and `TypeFoldable`\n-//! traits for various types in the Rust compiler. Most are written by\n-//! hand, though we've recently added some macros and proc-macros to help with the tedium.\n+//! This module contains implementations of the `Lift`, `TypeFoldable` and\n+//! `TypeVisitable` traits for various types in the Rust compiler. Most are\n+//! written by hand, though we've recently added some macros and proc-macros\n+//! to help with the tedium.\n \n use crate::mir::interpret;\n use crate::mir::{Field, ProjectionKind};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n+use crate::ty::fold::{ir::TypeSuperFoldable, FallibleTypeFolder, TypeFoldable};\n use crate::ty::print::{with_no_trimmed_paths, FmtPrinter, Printer};\n-use crate::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n-use crate::ty::{self, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n-use rustc_data_structures::functor::IdFunctor;\n+use crate::ty::visit::{ir::TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use crate::ty::{self, ir, AliasTy, InferConst, Lift, Term, TermKind, Ty, TyCtxt};\n use rustc_hir::def::Namespace;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::abi::TyAndLayout;\n \n use std::fmt;\n-use std::mem::ManuallyDrop;\n use std::ops::ControlFlow;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -177,6 +176,7 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n                 write!(f, \"TypeWellFormedFromEnv({:?})\", ty)\n             }\n             ty::PredicateKind::Ambiguous => write!(f, \"Ambiguous\"),\n+            ty::PredicateKind::AliasEq(t1, t2) => write!(f, \"AliasEq({t1:?}, {t2:?})\"),\n         }\n     }\n }\n@@ -194,17 +194,27 @@ impl<'tcx> fmt::Debug for AliasTy<'tcx> {\n // Atomic structs\n //\n // For things that don't carry any arena-allocated data (and are\n-// copy...), just add them to this list.\n+// copy...), just add them to one of these lists as appropriat.\n \n-TrivialTypeTraversalAndLiftImpls! {\n+// For things for which the type library provides traversal implementations\n+// for all Interners, we only need to provide a Lift implementation:\n+CloneLiftImpls! {\n     (),\n     bool,\n     usize,\n-    ::rustc_target::abi::VariantIdx,\n     u16,\n     u32,\n     u64,\n     String,\n+    rustc_type_ir::DebruijnIndex,\n+}\n+\n+// For things about which the type library does not know, or does not\n+// provide any traversal implementations, we need to provide both a Lift\n+// implementation and traversal implementations (the latter only for\n+// TyCtxt<'_> interners).\n+TrivialTypeTraversalAndLiftImpls! {\n+    ::rustc_target::abi::VariantIdx,\n     crate::middle::region::Scope,\n     crate::ty::FloatTy,\n     ::rustc_ast::InlineAsmOptions,\n@@ -256,7 +266,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     Field,\n     interpret::Scalar,\n     rustc_target::abi::Size,\n-    rustc_type_ir::DebruijnIndex,\n     ty::BoundVar,\n     ty::Placeholder<ty::BoundVar>,\n }\n@@ -359,235 +368,34 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n }\n \n ///////////////////////////////////////////////////////////////////////////\n-// TypeFoldable implementations.\n+// Traversal implementations.\n \n /// AdtDefs are basically the same as a DefId.\n-impl<'tcx> TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::AdtDef<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<(T, U), F::Error> {\n-        Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> TypeVisitable<'tcx> for (T, U) {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.0.visit_with(visitor)?;\n-        self.1.visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>\n-    for (A, B, C)\n-{\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        self,\n-        folder: &mut F,\n-    ) -> Result<(A, B, C), F::Error> {\n-        Ok((\n-            self.0.try_fold_with(folder)?,\n-            self.1.try_fold_with(folder)?,\n-            self.2.try_fold_with(folder)?,\n-        ))\n-    }\n-}\n-\n-impl<'tcx, A: TypeVisitable<'tcx>, B: TypeVisitable<'tcx>, C: TypeVisitable<'tcx>>\n-    TypeVisitable<'tcx> for (A, B, C)\n-{\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.0.visit_with(visitor)?;\n-        self.1.visit_with(visitor)?;\n-        self.2.visit_with(visitor)\n-    }\n-}\n-\n-EnumTypeTraversalImpl! {\n-    impl<'tcx, T> TypeFoldable<'tcx> for Option<T> {\n-        (Some)(a),\n-        (None),\n-    } where T: TypeFoldable<'tcx>\n-}\n-EnumTypeTraversalImpl! {\n-    impl<'tcx, T> TypeVisitable<'tcx> for Option<T> {\n-        (Some)(a),\n-        (None),\n-    } where T: TypeVisitable<'tcx>\n-}\n-\n-EnumTypeTraversalImpl! {\n-    impl<'tcx, T, E> TypeFoldable<'tcx> for Result<T, E> {\n-        (Ok)(a),\n-        (Err)(a),\n-    } where T: TypeFoldable<'tcx>, E: TypeFoldable<'tcx>,\n-}\n-EnumTypeTraversalImpl! {\n-    impl<'tcx, T, E> TypeVisitable<'tcx> for Result<T, E> {\n-        (Ok)(a),\n-        (Err)(a),\n-    } where T: TypeVisitable<'tcx>, E: TypeVisitable<'tcx>,\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        mut self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        // We merely want to replace the contained `T`, if at all possible,\n-        // so that we don't needlessly allocate a new `Rc` or indeed clone\n-        // the contained type.\n-        unsafe {\n-            // First step is to ensure that we have a unique reference to\n-            // the contained type, which `Rc::make_mut` will accomplish (by\n-            // allocating a new `Rc` and cloning the `T` only if required).\n-            // This is done *before* casting to `Rc<ManuallyDrop<T>>` so that\n-            // panicking during `make_mut` does not leak the `T`.\n-            Rc::make_mut(&mut self);\n-\n-            // Casting to `Rc<ManuallyDrop<T>>` is safe because `ManuallyDrop`\n-            // is `repr(transparent)`.\n-            let ptr = Rc::into_raw(self).cast::<ManuallyDrop<T>>();\n-            let mut unique = Rc::from_raw(ptr);\n-\n-            // Call to `Rc::make_mut` above guarantees that `unique` is the\n-            // sole reference to the contained value, so we can avoid doing\n-            // a checked `get_mut` here.\n-            let slot = Rc::get_mut_unchecked(&mut unique);\n-\n-            // Semantically move the contained type out from `unique`, fold\n-            // it, then move the folded value back into `unique`. Should\n-            // folding fail, `ManuallyDrop` ensures that the \"moved-out\"\n-            // value is not re-dropped.\n-            let owned = ManuallyDrop::take(slot);\n-            let folded = owned.try_fold_with(folder)?;\n-            *slot = ManuallyDrop::new(folded);\n-\n-            // Cast back to `Rc<T>`.\n-            Ok(Rc::from_raw(Rc::into_raw(unique).cast()))\n-        }\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Rc<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        (**self).visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n-        mut self,\n-        folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        // We merely want to replace the contained `T`, if at all possible,\n-        // so that we don't needlessly allocate a new `Arc` or indeed clone\n-        // the contained type.\n-        unsafe {\n-            // First step is to ensure that we have a unique reference to\n-            // the contained type, which `Arc::make_mut` will accomplish (by\n-            // allocating a new `Arc` and cloning the `T` only if required).\n-            // This is done *before* casting to `Arc<ManuallyDrop<T>>` so that\n-            // panicking during `make_mut` does not leak the `T`.\n-            Arc::make_mut(&mut self);\n-\n-            // Casting to `Arc<ManuallyDrop<T>>` is safe because `ManuallyDrop`\n-            // is `repr(transparent)`.\n-            let ptr = Arc::into_raw(self).cast::<ManuallyDrop<T>>();\n-            let mut unique = Arc::from_raw(ptr);\n-\n-            // Call to `Arc::make_mut` above guarantees that `unique` is the\n-            // sole reference to the contained value, so we can avoid doing\n-            // a checked `get_mut` here.\n-            let slot = Arc::get_mut_unchecked(&mut unique);\n-\n-            // Semantically move the contained type out from `unique`, fold\n-            // it, then move the folded value back into `unique`. Should\n-            // folding fail, `ManuallyDrop` ensures that the \"moved-out\"\n-            // value is not re-dropped.\n-            let owned = ManuallyDrop::take(slot);\n-            let folded = owned.try_fold_with(folder)?;\n-            *slot = ManuallyDrop::new(folded);\n-\n-            // Cast back to `Arc<T>`.\n-            Ok(Arc::from_raw(Arc::into_raw(unique).cast()))\n-        }\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Arc<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        (**self).visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|value| value.try_fold_with(folder))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        (**self).visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|t| t.try_fold_with(folder))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Vec<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &[T] {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|t| t.try_fold_with(folder))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<[T]> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_binder(self)\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_binder(self)\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -596,43 +404,43 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<'tcx> for ty::Binder<'tcx, T\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Const<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Const<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.mk_const_list(v.iter()))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ProjectionKind> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for Ty<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(*self)\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -678,11 +486,11 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n             | ty::Foreign(..) => return Ok(self),\n         };\n \n-        Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })\n+        Ok(if *self.kind() == kind { self } else { folder.interner().mk_ty(kind) })\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n@@ -726,19 +534,19 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_region(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_region(*self)\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         _folder: &mut F,\n@@ -747,121 +555,99 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_predicate(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n-\n-    #[inline]\n-    fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n-        self.outer_exclusive_binder() > binder\n-    }\n-\n-    #[inline]\n-    fn has_type_flags(&self, flags: ty::TypeFlags) -> bool {\n-        self.flags().intersects(flags)\n-    }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         let new = self.kind().try_fold_with(folder)?;\n-        Ok(folder.tcx().reuse_or_mk_predicate(self, new))\n+        Ok(folder.interner().reuse_or_mk_predicate(self, new))\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.kind().visit_with(visitor)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_id(|x| x.try_fold_with(folder))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> TypeVisitable<'tcx> for IndexVec<I, T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.iter().try_for_each(|t| t.visit_with(visitor))\n-    }\n-}\n-\n-impl<'tcx> TypeFoldable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_const(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_const(*self)\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n     ) -> Result<Self, F::Error> {\n         let ty = self.ty().try_fold_with(folder)?;\n         let kind = self.kind().try_fold_with(folder)?;\n         if ty != self.ty() || kind != self.kind() {\n-            Ok(folder.tcx().mk_const(kind, ty))\n+            Ok(folder.interner().mk_const(kind, ty))\n         } else {\n             Ok(self)\n         }\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.ty().visit_with(visitor)?;\n         self.kind().visit_with(visitor)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for InferConst<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for InferConst<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for InferConst<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::UnevaluatedConst<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for TyAndLayout<'tcx, Ty<'tcx>> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for TyAndLayout<'tcx, Ty<'tcx>> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(self.ty)\n     }"}, {"sha": "c613b3627f2f6c896d232206bf9aba911d60711f", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -7,8 +7,10 @@ use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use crate::ty::visit::ValidateBoundVars;\n use crate::ty::InferTy::*;\n use crate::ty::{\n-    self, AdtDef, DefIdTree, Discr, FallibleTypeFolder, Term, Ty, TyCtxt, TypeFlags, TypeFoldable,\n-    TypeSuperFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self,\n+    ir::{FallibleTypeFolder, TypeVisitor},\n+    AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeSuperFoldable,\n+    TypeSuperVisitable, TypeVisitable,\n };\n use crate::ty::{List, ParamEnv};\n use hir::def::DefKind;\n@@ -1147,10 +1149,10 @@ struct SkipBindersAt<'tcx> {\n     index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n     type Error = ();\n \n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1171,7 +1173,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_ty(ty::Bound(index.shifted_out(1), bv)))\n+                Ok(self.interner().mk_bound(index.shifted_out(1), bv))\n             }\n         } else {\n             ty.try_super_fold_with(self)\n@@ -1185,7 +1187,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_region(ty::ReLateBound(index.shifted_out(1), bv)))\n+                Ok(self.interner().mk_region(ty::ReLateBound(index.shifted_out(1), bv)))\n             }\n         } else {\n             r.try_super_fold_with(self)\n@@ -1199,7 +1201,7 @@ impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n             if index == self.index {\n                 Err(())\n             } else {\n-                Ok(self.tcx().mk_const(\n+                Ok(self.interner().mk_const(\n                     ty::ConstKind::Bound(index.shifted_out(1), bv),\n                     ct.ty().try_fold_with(self)?,\n                 ))\n@@ -1260,7 +1262,7 @@ impl<'tcx> AliasTy<'tcx> {\n     }\n \n     pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n-        tcx.mk_ty(ty::Alias(self.kind(tcx), self))\n+        tcx.mk_alias(self.kind(tcx), self)\n     }\n }\n \n@@ -1623,9 +1625,15 @@ impl<'tcx> Region<'tcx> {\n             ty::ReVar(..) => false,\n             ty::RePlaceholder(placeholder) => placeholder.name.is_named(),\n             ty::ReErased => false,\n+            ty::ReError(_) => false,\n         }\n     }\n \n+    #[inline]\n+    pub fn is_error(self) -> bool {\n+        matches!(*self, ty::ReError(_))\n+    }\n+\n     #[inline]\n     pub fn is_static(self) -> bool {\n         matches!(*self, ty::ReStatic)\n@@ -1686,6 +1694,7 @@ impl<'tcx> Region<'tcx> {\n             ty::ReErased => {\n                 flags = flags | TypeFlags::HAS_RE_ERASED;\n             }\n+            ty::ReError(_) => {}\n         }\n \n         debug!(\"type_flags({:?}) = {:?}\", self, flags);\n@@ -1870,7 +1879,7 @@ impl<'tcx> Ty<'tcx> {\n                         // The way we evaluate the `N` in `[T; N]` here only works since we use\n                         // `simd_size_and_type` post-monomorphization. It will probably start to ICE\n                         // if we use it in generic code. See the `simd-array-trait` ui test.\n-                        (f0_len.eval_usize(tcx, ParamEnv::empty()) as u64, *f0_elem_ty)\n+                        (f0_len.eval_target_usize(tcx, ParamEnv::empty()) as u64, *f0_elem_ty)\n                     }\n                     // Otherwise, the fields of this Adt are the SIMD components (and we assume they\n                     // all have the same type).\n@@ -2031,7 +2040,7 @@ impl<'tcx> Ty<'tcx> {\n     pub fn contains(self, other: Ty<'tcx>) -> bool {\n         struct ContainsTyVisitor<'tcx>(Ty<'tcx>);\n \n-        impl<'tcx> TypeVisitor<'tcx> for ContainsTyVisitor<'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTyVisitor<'tcx> {\n             type BreakTy = ();\n \n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -2049,7 +2058,7 @@ impl<'tcx> Ty<'tcx> {\n     pub fn contains_closure(self) -> bool {\n         struct ContainsClosureVisitor;\n \n-        impl<'tcx> TypeVisitor<'tcx> for ContainsClosureVisitor {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsClosureVisitor {\n             type BreakTy = ();\n \n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "a6ab7440c8e667e9eb97428c35538ec079240e9f", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,10 +1,10 @@\n // Type substitutions.\n \n use crate::ty::codec::{TyDecoder, TyEncoder};\n-use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use crate::ty::fold::{ir::TypeFolder, FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n+use crate::ty::{self, ir, Lift, List, ParamConst, Ty, TyCtxt};\n \n use rustc_data_structures::intern::Interned;\n use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n@@ -227,7 +227,7 @@ impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),\n@@ -237,7 +237,7 @@ impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for GenericArg<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n@@ -475,7 +475,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for SubstsRef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n@@ -486,15 +486,19 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n         match self.len() {\n             1 => {\n                 let param0 = self[0].try_fold_with(folder)?;\n-                if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }\n+                if param0 == self[0] {\n+                    Ok(self)\n+                } else {\n+                    Ok(folder.interner().intern_substs(&[param0]))\n+                }\n             }\n             2 => {\n                 let param0 = self[0].try_fold_with(folder)?;\n                 let param1 = self[1].try_fold_with(folder)?;\n                 if param0 == self[0] && param1 == self[1] {\n                     Ok(self)\n                 } else {\n-                    Ok(folder.tcx().intern_substs(&[param0, param1]))\n+                    Ok(folder.interner().intern_substs(&[param0, param1]))\n                 }\n             }\n             0 => Ok(self),\n@@ -503,7 +507,7 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<Ty<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is fairly hot, though not as hot as `SubstsRef`.\n         //\n@@ -527,15 +531,15 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n                 if param0 == self[0] && param1 == self[1] {\n                     Ok(self)\n                 } else {\n-                    Ok(folder.tcx().intern_type_list(&[param0, param1]))\n+                    Ok(folder.interner().intern_type_list(&[param0, param1]))\n                 }\n             }\n             _ => ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v)),\n         }\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &'tcx ty::List<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for &'tcx ty::List<T> {\n     #[inline]\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n@@ -553,8 +557,8 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &'tcx ty::List<T> {\n pub struct EarlyBinder<T>(pub T);\n \n /// For early binders, you should first call `subst` before using any visitors.\n-impl<'tcx, T> !TypeFoldable<'tcx> for ty::EarlyBinder<T> {}\n-impl<'tcx, T> !TypeVisitable<'tcx> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !ir::TypeFoldable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !ir::TypeVisitable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n \n impl<T> EarlyBinder<T> {\n     pub fn as_ref(&self) -> EarlyBinder<&T> {\n@@ -776,9 +780,9 @@ struct SubstFolder<'a, 'tcx> {\n     binders_passed: u32,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for SubstFolder<'a, 'tcx> {\n     #[inline]\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -987,7 +991,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n             return val;\n         }\n \n-        let result = ty::fold::shift_vars(TypeFolder::tcx(self), val, self.binders_passed);\n+        let result = ty::fold::shift_vars(TypeFolder::interner(self), val, self.binders_passed);\n         debug!(\"shift_vars: shifted result = {:?}\", result);\n \n         result"}, {"sha": "71353acaaa7c45f844bc1bf47dfa042f3c7510e4", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -31,6 +31,15 @@ pub struct TraitDef {\n     /// and thus `impl`s of it are allowed to overlap.\n     pub is_marker: bool,\n \n+    /// If `true`, then this trait has to `#[rustc_coinductive]` attribute or\n+    /// is an auto trait. This indicates that trait solver cycles involving an\n+    /// `X: ThisTrait` goal are accepted.\n+    ///\n+    /// In the future all traits should be coinductive, but we need a better\n+    /// formal understanding of what exactly that means and should probably\n+    /// also have already switched to the new trait solver.\n+    pub is_coinductive: bool,\n+\n     /// If `true`, then this trait has the `#[rustc_skip_array_during_method_dispatch]`\n     /// attribute, indicating that editions before 2021 should not consider this trait\n     /// during method dispatch if the receiver is an array.\n@@ -81,28 +90,6 @@ impl TraitImpls {\n }\n \n impl<'tcx> TraitDef {\n-    pub fn new(\n-        def_id: DefId,\n-        unsafety: hir::Unsafety,\n-        paren_sugar: bool,\n-        has_auto_impl: bool,\n-        is_marker: bool,\n-        skip_array_during_method_dispatch: bool,\n-        specialization_kind: TraitSpecializationKind,\n-        must_implement_one_of: Option<Box<[Ident]>>,\n-    ) -> TraitDef {\n-        TraitDef {\n-            def_id,\n-            unsafety,\n-            paren_sugar,\n-            has_auto_impl,\n-            is_marker,\n-            skip_array_during_method_dispatch,\n-            specialization_kind,\n-            must_implement_one_of,\n-        }\n-    }\n-\n     pub fn ancestors(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "e907ce46c86fb14d770a3b6b5ee6c67565fce070", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -4,8 +4,8 @@ use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir;\n use crate::ty::layout::IntegerExt;\n use crate::ty::{\n-    self, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n-    TypeVisitable,\n+    self, ir::TypeFolder, DefIdTree, FallibleTypeFolder, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable,\n };\n use crate::ty::{GenericArgKind, SubstsRef};\n use rustc_apfloat::Float as _;\n@@ -842,8 +842,8 @@ impl<'tcx> OpaqueTypeExpander<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for OpaqueTypeExpander<'tcx> {\n+    fn interner(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1343,7 +1343,7 @@ where\n             for t in iter {\n                 new_list.push(t.try_fold_with(folder)?)\n             }\n-            Ok(intern(folder.tcx(), &new_list))\n+            Ok(intern(folder.interner(), &new_list))\n         }\n         Some((_, Err(err))) => {\n             return Err(err);"}, {"sha": "8a93b59900e15e267a6507613907c96ca1774fa2", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 15, "deletions": 103, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,69 +1,19 @@\n-//! A visiting traversal mechanism for complex data structures that contain type\n-//! information.\n-//!\n-//! This is a read-only traversal of the data structure.\n-//!\n-//! This traversal has limited flexibility. Only a small number of \"types of\n-//! interest\" within the complex data structures can receive custom\n-//! visitation. These are the ones containing the most important type-related\n-//! information, such as `Ty`, `Predicate`, `Region`, and `Const`.\n-//!\n-//! There are three groups of traits involved in each traversal.\n-//! - `TypeVisitable`. This is implemented once for many types, including:\n-//!   - Types of interest, for which the methods delegate to the visitor.\n-//!   - All other types, including generic containers like `Vec` and `Option`.\n-//!     It defines a \"skeleton\" of how they should be visited.\n-//! - `TypeSuperVisitable`. This is implemented only for each type of interest,\n-//!   and defines the visiting \"skeleton\" for these types.\n-//! - `TypeVisitor`. This is implemented for each visitor. This defines how\n-//!   types of interest are visited.\n-//!\n-//! This means each visit is a mixture of (a) generic visiting operations, and (b)\n-//! custom visit operations that are specific to the visitor.\n-//! - The `TypeVisitable` impls handle most of the traversal, and call into\n-//!   `TypeVisitor` when they encounter a type of interest.\n-//! - A `TypeVisitor` may call into another `TypeVisitable` impl, because some of\n-//!   the types of interest are recursive and can contain other types of interest.\n-//! - A `TypeVisitor` may also call into a `TypeSuperVisitable` impl, because each\n-//!   visitor might provide custom handling only for some types of interest, or\n-//!   only for some variants of each type of interest, and then use default\n-//!   traversal for the remaining cases.\n-//!\n-//! For example, if you have `struct S(Ty, U)` where `S: TypeVisitable` and `U:\n-//! TypeVisitable`, and an instance `s = S(ty, u)`, it would be visited like so:\n-//! ```text\n-//! s.visit_with(visitor) calls\n-//! - ty.visit_with(visitor) calls\n-//!   - visitor.visit_ty(ty) may call\n-//!     - ty.super_visit_with(visitor)\n-//! - u.visit_with(visitor)\n-//! ```\n use crate::ty::{self, flags::FlagComputation, Binder, Ty, TyCtxt, TypeFlags};\n use rustc_errors::ErrorGuaranteed;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sso::SsoHashSet;\n-use std::fmt;\n use std::ops::ControlFlow;\n \n-/// This trait is implemented for every type that can be visited,\n-/// providing the skeleton of the traversal.\n-///\n-/// To implement this conveniently, use the derive macro located in\n-/// `rustc_macros`.\n-pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n-    /// The entry point for visiting. To visit a value `t` with a visitor `v`\n-    /// call: `t.visit_with(v)`.\n-    ///\n-    /// For most types, this just traverses the value, calling `visit_with` on\n-    /// each field/element.\n-    ///\n-    /// For types of interest (such as `Ty`), the implementation of this method\n-    /// that calls a visitor method specifically for that type (such as\n-    /// `V::visit_ty`). This is where control transfers from `TypeFoldable` to\n-    /// `TypeVisitor`.\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+pub trait TypeVisitable<'tcx> = ir::TypeVisitable<TyCtxt<'tcx>> + TypeVisitableExt<'tcx>;\n+pub trait TypeSuperVisitable<'tcx> = ir::TypeSuperVisitable<TyCtxt<'tcx>>;\n+pub trait TypeVisitor<'tcx> = ir::TypeVisitor<TyCtxt<'tcx>>;\n+\n+pub mod ir {\n+    pub use rustc_type_ir::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+}\n \n+pub trait TypeVisitableExt<'tcx>: ir::TypeVisitable<TyCtxt<'tcx>> {\n     /// Returns `true` if `self` has any late-bound regions that are either\n     /// bound by `binder` or bound by some binder outside of `binder`.\n     /// If `binder` is `ty::INNERMOST`, this indicates whether\n@@ -185,45 +135,7 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n     }\n }\n \n-pub trait TypeSuperVisitable<'tcx>: TypeVisitable<'tcx> {\n-    /// Provides a default visit for a type of interest. This should only be\n-    /// called within `TypeVisitor` methods, when a non-custom traversal is\n-    /// desired for the value of the type of interest passed to that method.\n-    /// For example, in `MyVisitor::visit_ty(ty)`, it is valid to call\n-    /// `ty.super_visit_with(self)`, but any other visiting should be done\n-    /// with `xyz.visit_with(self)`.\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n-}\n-\n-/// This trait is implemented for every visiting traversal. There is a visit\n-/// method defined for every type of interest. Each such method has a default\n-/// that recurses into the type's fields in a non-custom fashion.\n-pub trait TypeVisitor<'tcx>: Sized {\n-    type BreakTy = !;\n-\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        r.super_visit_with(self)\n-    }\n-\n-    fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        c.super_visit_with(self)\n-    }\n-\n-    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        p.super_visit_with(self)\n-    }\n-}\n+impl<'tcx, T: ir::TypeVisitable<TyCtxt<'tcx>>> TypeVisitableExt<'tcx> for T {}\n \n ///////////////////////////////////////////////////////////////////////////\n // Region folder\n@@ -278,7 +190,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             callback: F,\n         }\n \n-        impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n+        impl<'tcx, F> ir::TypeVisitor<TyCtxt<'tcx>> for RegionVisitor<F>\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n@@ -380,7 +292,7 @@ impl<'tcx> ValidateBoundVars<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for ValidateBoundVars<'tcx> {\n     type BreakTy = ();\n \n     fn visit_binder<T: TypeVisitable<'tcx>>(\n@@ -492,7 +404,7 @@ struct HasEscapingVarsVisitor {\n     outer_index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for HasEscapingVarsVisitor {\n     type BreakTy = FoundEscapingVars;\n \n     fn visit_binder<T: TypeVisitable<'tcx>>(\n@@ -569,7 +481,7 @@ impl std::fmt::Debug for HasTypeFlagsVisitor {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n \n     #[inline]\n@@ -639,7 +551,7 @@ impl LateBoundRegionsCollector {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for LateBoundRegionsCollector {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -701,7 +613,7 @@ impl MaxUniverse {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for MaxUniverse {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for MaxUniverse {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Placeholder(placeholder) = t.kind() {\n             self.max_universe = ty::UniverseIndex::from_u32("}, {"sha": "fb0e9181b52ac52afa3bcf0394f01da605b6e83d", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 })\n             }\n             ExprKind::Repeat { value, count } => {\n-                if Some(0) == count.try_eval_usize(this.tcx, this.param_env) {\n+                if Some(0) == count.try_eval_target_usize(this.tcx, this.param_env) {\n                     this.build_zero_repeat(block, value, scope, source_info)\n                 } else {\n                     let value_operand = unpack!("}, {"sha": "fbe08a7bd243df6d9f045212a9aaa74b8042eeb6", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let tcx = self.tcx;\n         let (min_length, exact_size) = if let Some(place_resolved) = place.try_to_place(self) {\n             match place_resolved.ty(&self.local_decls, tcx).ty.kind() {\n-                ty::Array(_, length) => (length.eval_usize(tcx, self.param_env), true),\n+                ty::Array(_, length) => (length.eval_target_usize(tcx, self.param_env), true),\n                 _ => ((prefix.len() + suffix.len()).try_into().unwrap(), false),\n             }\n         } else {"}, {"sha": "977c4b4ae6c0b26663be3275f4c3c686299b180c", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -922,8 +922,8 @@ impl<'tcx> SplitWildcard<'tcx> {\n         // `cx.is_uninhabited()`).\n         let all_ctors = match pcx.ty.kind() {\n             ty::Bool => smallvec![make_range(0, 1)],\n-            ty::Array(sub_ty, len) if len.try_eval_usize(cx.tcx, cx.param_env).is_some() => {\n-                let len = len.eval_usize(cx.tcx, cx.param_env) as usize;\n+            ty::Array(sub_ty, len) if len.try_eval_target_usize(cx.tcx, cx.param_env).is_some() => {\n+                let len = len.eval_target_usize(cx.tcx, cx.param_env) as usize;\n                 if len != 0 && cx.is_uninhabited(*sub_ty) {\n                     smallvec![]\n                 } else {\n@@ -1406,7 +1406,9 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n             }\n             PatKind::Array { prefix, slice, suffix } | PatKind::Slice { prefix, slice, suffix } => {\n                 let array_len = match pat.ty.kind() {\n-                    ty::Array(_, length) => Some(length.eval_usize(cx.tcx, cx.param_env) as usize),\n+                    ty::Array(_, length) => {\n+                        Some(length.eval_target_usize(cx.tcx, cx.param_env) as usize)\n+                    }\n                     ty::Slice(_) => None,\n                     _ => span_bug!(pat.span, \"bad ty {:?} for slice pattern\", pat.ty),\n                 };"}, {"sha": "47ca0a87fcc28f8f122dd9d4b5210e4db2959bd8", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -416,7 +416,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             ty::Slice(..) => PatKind::Slice { prefix, slice, suffix },\n             // Fixed-length array, `[T; len]`.\n             ty::Array(_, len) => {\n-                let len = len.eval_usize(self.tcx, self.param_env);\n+                let len = len.eval_target_usize(self.tcx, self.param_env);\n                 assert!(len >= prefix.len() as u64 + suffix.len() as u64);\n                 PatKind::Array { prefix, slice, suffix }\n             }"}, {"sha": "bd12087629c99d3e3ae507d95cc96ddaab6995f0", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -890,7 +890,7 @@ where\n             }\n             ty::Dynamic(..) => self.complete_drop(self.succ, self.unwind),\n             ty::Array(ety, size) => {\n-                let size = size.try_eval_usize(self.tcx(), self.elaborator.param_env());\n+                let size = size.try_eval_target_usize(self.tcx(), self.elaborator.param_env());\n                 self.open_drop_for_array(*ety, size)\n             }\n             ty::Slice(ety) => self.open_drop_for_array(*ety, None),"}, {"sha": "6f4e7fd4682c171f15512954fa9ff773fe63812a", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -121,7 +121,9 @@ where\n                 // for now. See discussion on [#61069].\n                 //\n                 // [#61069]: https://github.com/rust-lang/rust/pull/61069\n-                self.trans.gen(dropped_place.local);\n+                if !dropped_place.is_indirect() {\n+                    self.trans.gen(dropped_place.local);\n+                }\n             }\n \n             TerminatorKind::Abort"}, {"sha": "3e382f500afbe0bc27a2e63ef313afda907b3ca7", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,6 +1,7 @@\n #![feature(associated_type_defaults)]\n #![feature(box_patterns)]\n #![feature(exact_size_is_empty)]\n+#![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "6d30276aeabe0746cb97bda7aa93a5db683bc77a", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -490,7 +490,9 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             };\n             let base_ty = base_place.ty(self.builder.body, self.builder.tcx).ty;\n             let len: u64 = match base_ty.kind() {\n-                ty::Array(_, size) => size.eval_usize(self.builder.tcx, self.builder.param_env),\n+                ty::Array(_, size) => {\n+                    size.eval_target_usize(self.builder.tcx, self.builder.param_env)\n+                }\n                 _ => bug!(\"from_end: false slice pattern of non-array type\"),\n             };\n             for offset in from..to {"}, {"sha": "401db890a9810d1f811d63390c9f082f8beb57a9", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 214, "deletions": 61, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -24,7 +24,7 @@\n //! - The bottom state denotes uninitialized memory. Because we are only doing a sound approximation\n //! of the actual execution, we can also use this state for places where access would be UB.\n //!\n-//! - The assignment logic in `State::assign_place_idx` assumes that the places are non-overlapping,\n+//! - The assignment logic in `State::insert_place_idx` assumes that the places are non-overlapping,\n //! or identical. Note that this refers to place expressions, not memory locations.\n //!\n //! - Currently, places that have their reference taken cannot be tracked. Although this would be\n@@ -35,6 +35,7 @@\n use std::fmt::{Debug, Formatter};\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n@@ -64,10 +65,8 @@ pub trait ValueAnalysis<'tcx> {\n             StatementKind::Assign(box (place, rvalue)) => {\n                 self.handle_assign(*place, rvalue, state);\n             }\n-            StatementKind::SetDiscriminant { .. } => {\n-                // Could treat this as writing a constant to a pseudo-place.\n-                // But discriminants are currently not tracked, so we do nothing.\n-                // Related: https://github.com/rust-lang/unsafe-code-guidelines/issues/84\n+            StatementKind::SetDiscriminant { box ref place, .. } => {\n+                state.flood_discr(place.as_ref(), self.map());\n             }\n             StatementKind::Intrinsic(box intrinsic) => {\n                 self.handle_intrinsic(intrinsic, state);\n@@ -446,77 +445,93 @@ impl<V: Clone + HasTop + HasBottom> State<V> {\n     }\n \n     pub fn flood_with(&mut self, place: PlaceRef<'_>, map: &Map, value: V) {\n-        if let Some(root) = map.find(place) {\n-            self.flood_idx_with(root, map, value);\n-        }\n+        let StateData::Reachable(values) = &mut self.0 else { return };\n+        map.for_each_aliasing_place(place, None, &mut |place| {\n+            if let Some(vi) = map.places[place].value_index {\n+                values[vi] = value.clone();\n+            }\n+        });\n     }\n \n     pub fn flood(&mut self, place: PlaceRef<'_>, map: &Map) {\n         self.flood_with(place, map, V::top())\n     }\n \n-    pub fn flood_idx_with(&mut self, place: PlaceIndex, map: &Map, value: V) {\n+    pub fn flood_discr_with(&mut self, place: PlaceRef<'_>, map: &Map, value: V) {\n         let StateData::Reachable(values) = &mut self.0 else { return };\n-        map.preorder_invoke(place, &mut |place| {\n+        map.for_each_aliasing_place(place, Some(TrackElem::Discriminant), &mut |place| {\n             if let Some(vi) = map.places[place].value_index {\n                 values[vi] = value.clone();\n             }\n         });\n     }\n \n-    pub fn flood_idx(&mut self, place: PlaceIndex, map: &Map) {\n-        self.flood_idx_with(place, map, V::top())\n+    pub fn flood_discr(&mut self, place: PlaceRef<'_>, map: &Map) {\n+        self.flood_discr_with(place, map, V::top())\n+    }\n+\n+    /// Low-level method that assigns to a place.\n+    /// This does nothing if the place is not tracked.\n+    ///\n+    /// The target place must have been flooded before calling this method.\n+    pub fn insert_idx(&mut self, target: PlaceIndex, result: ValueOrPlace<V>, map: &Map) {\n+        match result {\n+            ValueOrPlace::Value(value) => self.insert_value_idx(target, value, map),\n+            ValueOrPlace::Place(source) => self.insert_place_idx(target, source, map),\n+        }\n+    }\n+\n+    /// Low-level method that assigns a value to a place.\n+    /// This does nothing if the place is not tracked.\n+    ///\n+    /// The target place must have been flooded before calling this method.\n+    pub fn insert_value_idx(&mut self, target: PlaceIndex, value: V, map: &Map) {\n+        let StateData::Reachable(values) = &mut self.0 else { return };\n+        if let Some(value_index) = map.places[target].value_index {\n+            values[value_index] = value;\n+        }\n     }\n \n     /// Copies `source` to `target`, including all tracked places beneath.\n     ///\n     /// If `target` contains a place that is not contained in `source`, it will be overwritten with\n     /// Top. Also, because this will copy all entries one after another, it may only be used for\n     /// places that are non-overlapping or identical.\n-    pub fn assign_place_idx(&mut self, target: PlaceIndex, source: PlaceIndex, map: &Map) {\n+    ///\n+    /// The target place must have been flooded before calling this method.\n+    fn insert_place_idx(&mut self, target: PlaceIndex, source: PlaceIndex, map: &Map) {\n         let StateData::Reachable(values) = &mut self.0 else { return };\n \n-        // If both places are tracked, we copy the value to the target. If the target is tracked,\n-        // but the source is not, we have to invalidate the value in target. If the target is not\n-        // tracked, then we don't have to do anything.\n+        // If both places are tracked, we copy the value to the target.\n+        // If the target is tracked, but the source is not, we do nothing, as invalidation has\n+        // already been performed.\n         if let Some(target_value) = map.places[target].value_index {\n             if let Some(source_value) = map.places[source].value_index {\n                 values[target_value] = values[source_value].clone();\n-            } else {\n-                values[target_value] = V::top();\n             }\n         }\n         for target_child in map.children(target) {\n             // Try to find corresponding child and recurse. Reasoning is similar as above.\n             let projection = map.places[target_child].proj_elem.unwrap();\n             if let Some(source_child) = map.projections.get(&(source, projection)) {\n-                self.assign_place_idx(target_child, *source_child, map);\n-            } else {\n-                self.flood_idx(target_child, map);\n+                self.insert_place_idx(target_child, *source_child, map);\n             }\n         }\n     }\n \n+    /// Helper method to interpret `target = result`.\n     pub fn assign(&mut self, target: PlaceRef<'_>, result: ValueOrPlace<V>, map: &Map) {\n+        self.flood(target, map);\n         if let Some(target) = map.find(target) {\n-            self.assign_idx(target, result, map);\n-        } else {\n-            // We don't track this place nor any projections, assignment can be ignored.\n+            self.insert_idx(target, result, map);\n         }\n     }\n \n-    pub fn assign_idx(&mut self, target: PlaceIndex, result: ValueOrPlace<V>, map: &Map) {\n-        match result {\n-            ValueOrPlace::Value(value) => {\n-                // First flood the target place in case we also track any projections (although\n-                // this scenario is currently not well-supported by the API).\n-                self.flood_idx(target, map);\n-                let StateData::Reachable(values) = &mut self.0 else { return };\n-                if let Some(value_index) = map.places[target].value_index {\n-                    values[value_index] = value;\n-                }\n-            }\n-            ValueOrPlace::Place(source) => self.assign_place_idx(target, source, map),\n+    /// Helper method for assignments to a discriminant.\n+    pub fn assign_discr(&mut self, target: PlaceRef<'_>, result: ValueOrPlace<V>, map: &Map) {\n+        self.flood_discr(target, map);\n+        if let Some(target) = map.find_discr(target) {\n+            self.insert_idx(target, result, map);\n         }\n     }\n \n@@ -525,6 +540,14 @@ impl<V: Clone + HasTop + HasBottom> State<V> {\n         map.find(place).map(|place| self.get_idx(place, map)).unwrap_or(V::top())\n     }\n \n+    /// Retrieve the value stored for a place, or \u22a4 if it is not tracked.\n+    pub fn get_discr(&self, place: PlaceRef<'_>, map: &Map) -> V {\n+        match map.find_discr(place) {\n+            Some(place) => self.get_idx(place, map),\n+            None => V::top(),\n+        }\n+    }\n+\n     /// Retrieve the value stored for a place index, or \u22a4 if it is not tracked.\n     pub fn get_idx(&self, place: PlaceIndex, map: &Map) -> V {\n         match &self.0 {\n@@ -581,15 +604,15 @@ impl Map {\n     /// This is currently the only way to create a [`Map`]. The way in which the tracked places are\n     /// chosen is an implementation detail and may not be relied upon (other than that their type\n     /// passes the filter).\n-    #[instrument(skip_all, level = \"debug\")]\n     pub fn from_filter<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n         filter: impl FnMut(Ty<'tcx>) -> bool,\n+        place_limit: Option<usize>,\n     ) -> Self {\n         let mut map = Self::new();\n         let exclude = excluded_locals(body);\n-        map.register_with_filter(tcx, body, filter, &exclude);\n+        map.register_with_filter(tcx, body, filter, exclude, place_limit);\n         debug!(\"registered {} places ({} nodes in total)\", map.value_count, map.places.len());\n         map\n     }\n@@ -600,48 +623,85 @@ impl Map {\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n         mut filter: impl FnMut(Ty<'tcx>) -> bool,\n-        exclude: &IndexVec<Local, bool>,\n+        exclude: BitSet<Local>,\n+        place_limit: Option<usize>,\n     ) {\n         // We use this vector as stack, pushing and popping projections.\n         let mut projection = Vec::new();\n         for (local, decl) in body.local_decls.iter_enumerated() {\n-            if !exclude[local] {\n-                self.register_with_filter_rec(tcx, local, &mut projection, decl.ty, &mut filter);\n+            if !exclude.contains(local) {\n+                self.register_with_filter_rec(\n+                    tcx,\n+                    local,\n+                    &mut projection,\n+                    decl.ty,\n+                    &mut filter,\n+                    place_limit,\n+                );\n             }\n         }\n     }\n \n     /// Potentially register the (local, projection) place and its fields, recursively.\n     ///\n-    /// Invariant: The projection must only contain fields.\n+    /// Invariant: The projection must only contain trackable elements.\n     fn register_with_filter_rec<'tcx>(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n         local: Local,\n         projection: &mut Vec<PlaceElem<'tcx>>,\n         ty: Ty<'tcx>,\n         filter: &mut impl FnMut(Ty<'tcx>) -> bool,\n+        place_limit: Option<usize>,\n     ) {\n-        // Note: The framework supports only scalars for now.\n-        if filter(ty) && ty.is_scalar() {\n-            // We know that the projection only contains trackable elements.\n-            let place = self.make_place(local, projection).unwrap();\n+        if let Some(place_limit) = place_limit && self.value_count >= place_limit {\n+            return\n+        }\n+\n+        // We know that the projection only contains trackable elements.\n+        let place = self.make_place(local, projection).unwrap();\n \n-            // Allocate a value slot if it doesn't have one.\n-            if self.places[place].value_index.is_none() {\n-                self.places[place].value_index = Some(self.value_count.into());\n-                self.value_count += 1;\n+        // Allocate a value slot if it doesn't have one, and the user requested one.\n+        if self.places[place].value_index.is_none() && filter(ty) {\n+            self.places[place].value_index = Some(self.value_count.into());\n+            self.value_count += 1;\n+        }\n+\n+        if ty.is_enum() {\n+            let discr_ty = ty.discriminant_ty(tcx);\n+            if filter(discr_ty) {\n+                let discr = *self\n+                    .projections\n+                    .entry((place, TrackElem::Discriminant))\n+                    .or_insert_with(|| {\n+                        // Prepend new child to the linked list.\n+                        let next = self.places.push(PlaceInfo::new(Some(TrackElem::Discriminant)));\n+                        self.places[next].next_sibling = self.places[place].first_child;\n+                        self.places[place].first_child = Some(next);\n+                        next\n+                    });\n+\n+                // Allocate a value slot if it doesn't have one.\n+                if self.places[discr].value_index.is_none() {\n+                    self.places[discr].value_index = Some(self.value_count.into());\n+                    self.value_count += 1;\n+                }\n             }\n         }\n \n         // Recurse with all fields of this place.\n         iter_fields(ty, tcx, |variant, field, ty| {\n-            if variant.is_some() {\n-                // Downcasts are currently not supported.\n+            if let Some(variant) = variant {\n+                projection.push(PlaceElem::Downcast(None, variant));\n+                let _ = self.make_place(local, projection);\n+                projection.push(PlaceElem::Field(field, ty));\n+                self.register_with_filter_rec(tcx, local, projection, ty, filter, place_limit);\n+                projection.pop();\n+                projection.pop();\n                 return;\n             }\n             projection.push(PlaceElem::Field(field, ty));\n-            self.register_with_filter_rec(tcx, local, projection, ty, filter);\n+            self.register_with_filter_rec(tcx, local, projection, ty, filter, place_limit);\n             projection.pop();\n         });\n     }\n@@ -684,23 +744,105 @@ impl Map {\n     }\n \n     /// Locates the given place, if it exists in the tree.\n-    pub fn find(&self, place: PlaceRef<'_>) -> Option<PlaceIndex> {\n+    pub fn find_extra(\n+        &self,\n+        place: PlaceRef<'_>,\n+        extra: impl IntoIterator<Item = TrackElem>,\n+    ) -> Option<PlaceIndex> {\n         let mut index = *self.locals.get(place.local)?.as_ref()?;\n \n         for &elem in place.projection {\n             index = self.apply(index, elem.try_into().ok()?)?;\n         }\n+        for elem in extra {\n+            index = self.apply(index, elem)?;\n+        }\n \n         Some(index)\n     }\n \n+    /// Locates the given place, if it exists in the tree.\n+    pub fn find(&self, place: PlaceRef<'_>) -> Option<PlaceIndex> {\n+        self.find_extra(place, [])\n+    }\n+\n+    /// Locates the given place and applies `Discriminant`, if it exists in the tree.\n+    pub fn find_discr(&self, place: PlaceRef<'_>) -> Option<PlaceIndex> {\n+        self.find_extra(place, [TrackElem::Discriminant])\n+    }\n+\n     /// Iterate over all direct children.\n     pub fn children(&self, parent: PlaceIndex) -> impl Iterator<Item = PlaceIndex> + '_ {\n         Children::new(self, parent)\n     }\n \n+    /// Invoke a function on the given place and all places that may alias it.\n+    ///\n+    /// In particular, when the given place has a variant downcast, we invoke the function on all\n+    /// the other variants.\n+    ///\n+    /// `tail_elem` allows to support discriminants that are not a place in MIR, but that we track\n+    /// as such.\n+    pub fn for_each_aliasing_place(\n+        &self,\n+        place: PlaceRef<'_>,\n+        tail_elem: Option<TrackElem>,\n+        f: &mut impl FnMut(PlaceIndex),\n+    ) {\n+        if place.is_indirect() {\n+            // We do not track indirect places.\n+            return;\n+        }\n+        let Some(&Some(mut index)) = self.locals.get(place.local) else {\n+            // The local is not tracked at all, so it does not alias anything.\n+            return;\n+        };\n+        let elems = place\n+            .projection\n+            .iter()\n+            .map(|&elem| elem.try_into())\n+            .chain(tail_elem.map(Ok).into_iter());\n+        for elem in elems {\n+            // A field aliases the parent place.\n+            f(index);\n+\n+            let Ok(elem) = elem else { return };\n+            let sub = self.apply(index, elem);\n+            if let TrackElem::Variant(..) | TrackElem::Discriminant = elem {\n+                // Enum variant fields and enum discriminants alias each another.\n+                self.for_each_variant_sibling(index, sub, f);\n+            }\n+            if let Some(sub) = sub {\n+                index = sub\n+            } else {\n+                return;\n+            }\n+        }\n+        self.preorder_invoke(index, f);\n+    }\n+\n+    /// Invoke the given function on all the descendants of the given place, except one branch.\n+    fn for_each_variant_sibling(\n+        &self,\n+        parent: PlaceIndex,\n+        preserved_child: Option<PlaceIndex>,\n+        f: &mut impl FnMut(PlaceIndex),\n+    ) {\n+        for sibling in self.children(parent) {\n+            let elem = self.places[sibling].proj_elem;\n+            // Only invalidate variants and discriminant. Fields (for generators) are not\n+            // invalidated by assignment to a variant.\n+            if let Some(TrackElem::Variant(..) | TrackElem::Discriminant) = elem\n+                // Only invalidate the other variants, the current one is fine.\n+                && Some(sibling) != preserved_child\n+            {\n+                self.preorder_invoke(sibling, f);\n+            }\n+        }\n+    }\n+\n     /// Invoke a function on the given place and all descendants.\n-    pub fn preorder_invoke(&self, root: PlaceIndex, f: &mut impl FnMut(PlaceIndex)) {\n+    fn preorder_invoke(&self, root: PlaceIndex, f: &mut impl FnMut(PlaceIndex)) {\n         f(root);\n         for child in self.children(root) {\n             self.preorder_invoke(child, f);\n@@ -759,6 +901,7 @@ impl<'a> Iterator for Children<'a> {\n }\n \n /// Used as the result of an operand or r-value.\n+#[derive(Debug)]\n pub enum ValueOrPlace<V> {\n     Value(V),\n     Place(PlaceIndex),\n@@ -776,6 +919,8 @@ impl<V: HasTop> ValueOrPlace<V> {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum TrackElem {\n     Field(Field),\n+    Variant(VariantIdx),\n+    Discriminant,\n }\n \n impl<V, T> TryFrom<ProjectionElem<V, T>> for TrackElem {\n@@ -784,6 +929,7 @@ impl<V, T> TryFrom<ProjectionElem<V, T>> for TrackElem {\n     fn try_from(value: ProjectionElem<V, T>) -> Result<Self, Self::Error> {\n         match value {\n             ProjectionElem::Field(field, _) => Ok(TrackElem::Field(field)),\n+            ProjectionElem::Downcast(_, idx) => Ok(TrackElem::Variant(idx)),\n             _ => Err(()),\n         }\n     }\n@@ -824,26 +970,27 @@ pub fn iter_fields<'tcx>(\n }\n \n /// Returns all locals with projections that have their reference or address taken.\n-pub fn excluded_locals(body: &Body<'_>) -> IndexVec<Local, bool> {\n+pub fn excluded_locals(body: &Body<'_>) -> BitSet<Local> {\n     struct Collector {\n-        result: IndexVec<Local, bool>,\n+        result: BitSet<Local>,\n     }\n \n     impl<'tcx> Visitor<'tcx> for Collector {\n         fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n-            if context.is_borrow()\n+            if (context.is_borrow()\n                 || context.is_address_of()\n                 || context.is_drop()\n-                || context == PlaceContext::MutatingUse(MutatingUseContext::AsmOutput)\n+                || context == PlaceContext::MutatingUse(MutatingUseContext::AsmOutput))\n+                && !place.is_indirect()\n             {\n                 // A pointer to a place could be used to access other places with the same local,\n                 // hence we have to exclude the local completely.\n-                self.result[place.local] = true;\n+                self.result.insert(place.local);\n             }\n         }\n     }\n \n-    let mut collector = Collector { result: IndexVec::from_elem(false, &body.local_decls) };\n+    let mut collector = Collector { result: BitSet::new_empty(body.local_decls.len()) };\n     collector.visit_body(body);\n     collector.result\n }\n@@ -899,6 +1046,12 @@ fn debug_with_context_rec<V: Debug + Eq>(\n     for child in map.children(place) {\n         let info_elem = map.places[child].proj_elem.unwrap();\n         let child_place_str = match info_elem {\n+            TrackElem::Discriminant => {\n+                format!(\"discriminant({})\", place_str)\n+            }\n+            TrackElem::Variant(idx) => {\n+                format!(\"({} as {:?})\", place_str, idx)\n+            }\n             TrackElem::Field(field) => {\n                 if place_str.starts_with('*') {\n                     format!(\"({}).{}\", place_str, field.index())"}, {"sha": "f5f1c1010e15586a8805f9cb7b8ed5c859d6be02", "filename": "compiler/rustc_mir_transform/src/check_packed_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_packed_ref.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -42,12 +42,12 @@ impl<'tcx> Visitor<'tcx> for PackedRefChecker<'_, 'tcx> {\n             if util::is_disaligned(self.tcx, self.body, self.param_env, *place) {\n                 let def_id = self.body.source.instance.def_id();\n                 if let Some(impl_def_id) = self.tcx.impl_of_method(def_id)\n-                    && self.tcx.is_builtin_derive(impl_def_id)\n+                    && self.tcx.is_builtin_derived(impl_def_id)\n                 {\n                     // If we ever reach here it means that the generated derive\n                     // code is somehow doing an unaligned reference, which it\n                     // shouldn't do.\n-                    unreachable!();\n+                    span_bug!(self.source_info.span, \"builtin derive created an unaligned reference\");\n                 } else {\n                     struct_span_err!(\n                         self.tcx.sess,"}, {"sha": "f3ca2337e59ca5a72455c309a359d88a1d5f4af2", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 95, "deletions": 32, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -13,6 +13,7 @@ use rustc_mir_dataflow::value_analysis::{Map, State, TrackElem, ValueAnalysis, V\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::Align;\n+use rustc_target::abi::VariantIdx;\n \n use crate::MirPass;\n \n@@ -30,14 +31,12 @@ impl<'tcx> MirPass<'tcx> for DataflowConstProp {\n \n     #[instrument(skip_all level = \"debug\")]\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        debug!(def_id = ?body.source.def_id());\n         if tcx.sess.mir_opt_level() < 4 && body.basic_blocks.len() > BLOCK_LIMIT {\n             debug!(\"aborted dataflow const prop due too many basic blocks\");\n             return;\n         }\n \n-        // Decide which places to track during the analysis.\n-        let map = Map::from_filter(tcx, body, Ty::is_scalar);\n-\n         // We want to have a somewhat linear runtime w.r.t. the number of statements/terminators.\n         // Let's call this number `n`. Dataflow analysis has `O(h*n)` transfer function\n         // applications, where `h` is the height of the lattice. Because the height of our lattice\n@@ -46,10 +45,10 @@ impl<'tcx> MirPass<'tcx> for DataflowConstProp {\n         // `O(num_nodes * tracked_places * n)` in terms of time complexity. Since the number of\n         // map nodes is strongly correlated to the number of tracked places, this becomes more or\n         // less `O(n)` if we place a constant limit on the number of tracked places.\n-        if tcx.sess.mir_opt_level() < 4 && map.tracked_places() > PLACE_LIMIT {\n-            debug!(\"aborted dataflow const prop due to too many tracked places\");\n-            return;\n-        }\n+        let place_limit = if tcx.sess.mir_opt_level() < 4 { Some(PLACE_LIMIT) } else { None };\n+\n+        // Decide which places to track during the analysis.\n+        let map = Map::from_filter(tcx, body, Ty::is_scalar, place_limit);\n \n         // Perform the actual dataflow analysis.\n         let analysis = ConstAnalysis::new(tcx, body, map);\n@@ -63,14 +62,31 @@ impl<'tcx> MirPass<'tcx> for DataflowConstProp {\n     }\n }\n \n-struct ConstAnalysis<'tcx> {\n+struct ConstAnalysis<'a, 'tcx> {\n     map: Map,\n     tcx: TyCtxt<'tcx>,\n+    local_decls: &'a LocalDecls<'tcx>,\n     ecx: InterpCx<'tcx, 'tcx, DummyMachine>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n-impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n+impl<'tcx> ConstAnalysis<'_, 'tcx> {\n+    fn eval_discriminant(\n+        &self,\n+        enum_ty: Ty<'tcx>,\n+        variant_index: VariantIdx,\n+    ) -> Option<ScalarTy<'tcx>> {\n+        if !enum_ty.is_enum() {\n+            return None;\n+        }\n+        let discr = enum_ty.discriminant_for_variant(self.tcx, variant_index)?;\n+        let discr_layout = self.tcx.layout_of(self.param_env.and(discr.ty)).ok()?;\n+        let discr_value = Scalar::try_from_uint(discr.val, discr_layout.size)?;\n+        Some(ScalarTy(discr_value, discr.ty))\n+    }\n+}\n+\n+impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'_, 'tcx> {\n     type Value = FlatSet<ScalarTy<'tcx>>;\n \n     const NAME: &'static str = \"ConstAnalysis\";\n@@ -79,6 +95,25 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n         &self.map\n     }\n \n+    fn handle_statement(&self, statement: &Statement<'tcx>, state: &mut State<Self::Value>) {\n+        match statement.kind {\n+            StatementKind::SetDiscriminant { box ref place, variant_index } => {\n+                state.flood_discr(place.as_ref(), &self.map);\n+                if self.map.find_discr(place.as_ref()).is_some() {\n+                    let enum_ty = place.ty(self.local_decls, self.tcx).ty;\n+                    if let Some(discr) = self.eval_discriminant(enum_ty, variant_index) {\n+                        state.assign_discr(\n+                            place.as_ref(),\n+                            ValueOrPlace::Value(FlatSet::Elem(discr)),\n+                            &self.map,\n+                        );\n+                    }\n+                }\n+            }\n+            _ => self.super_statement(statement, state),\n+        }\n+    }\n+\n     fn handle_assign(\n         &self,\n         target: Place<'tcx>,\n@@ -87,36 +122,47 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n     ) {\n         match rvalue {\n             Rvalue::Aggregate(kind, operands) => {\n-                let target = self.map().find(target.as_ref());\n-                if let Some(target) = target {\n-                    state.flood_idx_with(target, self.map(), FlatSet::Bottom);\n-                    let field_based = match **kind {\n-                        AggregateKind::Tuple | AggregateKind::Closure(..) => true,\n-                        AggregateKind::Adt(def_id, ..) => {\n-                            matches!(self.tcx.def_kind(def_id), DefKind::Struct)\n+                state.flood_with(target.as_ref(), self.map(), FlatSet::Bottom);\n+                if let Some(target_idx) = self.map().find(target.as_ref()) {\n+                    let (variant_target, variant_index) = match **kind {\n+                        AggregateKind::Tuple | AggregateKind::Closure(..) => {\n+                            (Some(target_idx), None)\n                         }\n-                        _ => false,\n+                        AggregateKind::Adt(def_id, variant_index, ..) => {\n+                            match self.tcx.def_kind(def_id) {\n+                                DefKind::Struct => (Some(target_idx), None),\n+                                DefKind::Enum => (Some(target_idx), Some(variant_index)),\n+                                _ => (None, None),\n+                            }\n+                        }\n+                        _ => (None, None),\n                     };\n-                    if field_based {\n+                    if let Some(target) = variant_target {\n                         for (field_index, operand) in operands.iter().enumerate() {\n                             if let Some(field) = self\n                                 .map()\n                                 .apply(target, TrackElem::Field(Field::from_usize(field_index)))\n                             {\n                                 let result = self.handle_operand(operand, state);\n-                                state.assign_idx(field, result, self.map());\n+                                state.insert_idx(field, result, self.map());\n                             }\n                         }\n                     }\n+                    if let Some(variant_index) = variant_index\n+                        && let Some(discr_idx) = self.map().apply(target_idx, TrackElem::Discriminant)\n+                    {\n+                        let enum_ty = target.ty(self.local_decls, self.tcx).ty;\n+                        if let Some(discr_val) = self.eval_discriminant(enum_ty, variant_index) {\n+                            state.insert_value_idx(discr_idx, FlatSet::Elem(discr_val), &self.map);\n+                        }\n+                    }\n                 }\n             }\n             Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n+                // Flood everything now, so we can use `insert_value_idx` directly later.\n+                state.flood(target.as_ref(), self.map());\n+\n                 let target = self.map().find(target.as_ref());\n-                if let Some(target) = target {\n-                    // We should not track any projections other than\n-                    // what is overwritten below, but just in case...\n-                    state.flood_idx(target, self.map());\n-                }\n \n                 let value_target = target\n                     .and_then(|target| self.map().apply(target, TrackElem::Field(0_u32.into())));\n@@ -127,7 +173,8 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                     let (val, overflow) = self.binary_op(state, *op, left, right);\n \n                     if let Some(value_target) = value_target {\n-                        state.assign_idx(value_target, ValueOrPlace::Value(val), self.map());\n+                        // We have flooded `target` earlier.\n+                        state.insert_value_idx(value_target, val, self.map());\n                     }\n                     if let Some(overflow_target) = overflow_target {\n                         let overflow = match overflow {\n@@ -142,11 +189,8 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                             }\n                             FlatSet::Bottom => FlatSet::Bottom,\n                         };\n-                        state.assign_idx(\n-                            overflow_target,\n-                            ValueOrPlace::Value(overflow),\n-                            self.map(),\n-                        );\n+                        // We have flooded `target` earlier.\n+                        state.insert_value_idx(overflow_target, overflow, self.map());\n                     }\n                 }\n             }\n@@ -195,6 +239,9 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                 FlatSet::Bottom => ValueOrPlace::Value(FlatSet::Bottom),\n                 FlatSet::Top => ValueOrPlace::Value(FlatSet::Top),\n             },\n+            Rvalue::Discriminant(place) => {\n+                ValueOrPlace::Value(state.get_discr(place.as_ref(), self.map()))\n+            }\n             _ => self.super_rvalue(rvalue, state),\n         }\n     }\n@@ -268,12 +315,13 @@ impl<'tcx> std::fmt::Debug for ScalarTy<'tcx> {\n     }\n }\n \n-impl<'tcx> ConstAnalysis<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, map: Map) -> Self {\n+impl<'a, 'tcx> ConstAnalysis<'a, 'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, map: Map) -> Self {\n         let param_env = tcx.param_env(body.source.def_id());\n         Self {\n             map,\n             tcx,\n+            local_decls: &body.local_decls,\n             ecx: InterpCx::new(tcx, DUMMY_SP, param_env, DummyMachine),\n             param_env: param_env,\n         }\n@@ -466,6 +514,21 @@ impl<'tcx, 'map, 'a> Visitor<'tcx> for OperandCollector<'tcx, 'map, 'a> {\n             _ => (),\n         }\n     }\n+\n+    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n+        match rvalue {\n+            Rvalue::Discriminant(place) => {\n+                match self.state.get_discr(place.as_ref(), self.visitor.map) {\n+                    FlatSet::Top => (),\n+                    FlatSet::Elem(value) => {\n+                        self.visitor.before_effect.insert((location, *place), value);\n+                    }\n+                    FlatSet::Bottom => (),\n+                }\n+            }\n+            _ => self.super_rvalue(rvalue, location),\n+        }\n+    }\n }\n \n struct DummyMachine;"}, {"sha": "35c6037fa2923f41a3c5b8272762e5ed77665c67", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1845,7 +1845,7 @@ fn check_must_not_suspend_ty<'tcx>(\n                 param_env,\n                 SuspendCheckData {\n                     descr_pre,\n-                    plural_len: len.try_eval_usize(tcx, param_env).unwrap_or(0) as usize + 1,\n+                    plural_len: len.try_eval_target_usize(tcx, param_env).unwrap_or(0) as usize + 1,\n                     ..data\n                 },\n             )"}, {"sha": "194c41c6ba1c0b2d7c0f30c3c3ab850dbd1b1e16", "filename": "compiler/rustc_mir_transform/src/large_enums.rs", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flarge_enums.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -0,0 +1,298 @@\n+use crate::rustc_middle::ty::util::IntTypeExt;\n+use crate::MirPass;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_middle::mir::interpret::AllocId;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::{self, AdtDef, Const, ParamEnv, Ty, TyCtxt};\n+use rustc_session::Session;\n+use rustc_target::abi::{HasDataLayout, Size, TagEncoding, Variants};\n+\n+/// A pass that seeks to optimize unnecessary moves of large enum types, if there is a large\n+/// enough discrepancy between them.\n+///\n+/// i.e. If there is are two variants:\n+/// ```\n+/// enum Example {\n+///   Small,\n+///   Large([u32; 1024]),\n+/// }\n+/// ```\n+/// Instead of emitting moves of the large variant,\n+/// Perform a memcpy instead.\n+/// Based off of [this HackMD](https://hackmd.io/@ft4bxUsFT5CEUBmRKYHr7w/rJM8BBPzD).\n+///\n+/// In summary, what this does is at runtime determine which enum variant is active,\n+/// and instead of copying all the bytes of the largest possible variant,\n+/// copy only the bytes for the currently active variant.\n+pub struct EnumSizeOpt {\n+    pub(crate) discrepancy: u64,\n+}\n+\n+impl<'tcx> MirPass<'tcx> for EnumSizeOpt {\n+    fn is_enabled(&self, sess: &Session) -> bool {\n+        sess.opts.unstable_opts.unsound_mir_opts || sess.mir_opt_level() >= 3\n+    }\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        // NOTE: This pass may produce different MIR based on the alignment of the target\n+        // platform, but it will still be valid.\n+        self.optim(tcx, body);\n+    }\n+}\n+\n+impl EnumSizeOpt {\n+    fn candidate<'tcx>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n+        ty: Ty<'tcx>,\n+        alloc_cache: &mut FxHashMap<Ty<'tcx>, AllocId>,\n+    ) -> Option<(AdtDef<'tcx>, usize, AllocId)> {\n+        let adt_def = match ty.kind() {\n+            ty::Adt(adt_def, _substs) if adt_def.is_enum() => adt_def,\n+            _ => return None,\n+        };\n+        let layout = tcx.layout_of(param_env.and(ty)).ok()?;\n+        let variants = match &layout.variants {\n+            Variants::Single { .. } => return None,\n+            Variants::Multiple { tag_encoding, .. }\n+                if matches!(tag_encoding, TagEncoding::Niche { .. }) =>\n+            {\n+                return None;\n+            }\n+            Variants::Multiple { variants, .. } if variants.len() <= 1 => return None,\n+            Variants::Multiple { variants, .. } => variants,\n+        };\n+        let min = variants.iter().map(|v| v.size).min().unwrap();\n+        let max = variants.iter().map(|v| v.size).max().unwrap();\n+        if max.bytes() - min.bytes() < self.discrepancy {\n+            return None;\n+        }\n+\n+        let num_discrs = adt_def.discriminants(tcx).count();\n+        if variants.iter_enumerated().any(|(var_idx, _)| {\n+            let discr_for_var = adt_def.discriminant_for_variant(tcx, var_idx).val;\n+            (discr_for_var > usize::MAX as u128) || (discr_for_var as usize >= num_discrs)\n+        }) {\n+            return None;\n+        }\n+        if let Some(alloc_id) = alloc_cache.get(&ty) {\n+            return Some((*adt_def, num_discrs, *alloc_id));\n+        }\n+\n+        let data_layout = tcx.data_layout();\n+        let ptr_sized_int = data_layout.ptr_sized_integer();\n+        let target_bytes = ptr_sized_int.size().bytes() as usize;\n+        let mut data = vec![0; target_bytes * num_discrs];\n+        macro_rules! encode_store {\n+            ($curr_idx: expr, $endian: expr, $bytes: expr) => {\n+                let bytes = match $endian {\n+                    rustc_target::abi::Endian::Little => $bytes.to_le_bytes(),\n+                    rustc_target::abi::Endian::Big => $bytes.to_be_bytes(),\n+                };\n+                for (i, b) in bytes.into_iter().enumerate() {\n+                    data[$curr_idx + i] = b;\n+                }\n+            };\n+        }\n+\n+        for (var_idx, layout) in variants.iter_enumerated() {\n+            let curr_idx =\n+                target_bytes * adt_def.discriminant_for_variant(tcx, var_idx).val as usize;\n+            let sz = layout.size;\n+            match ptr_sized_int {\n+                rustc_target::abi::Integer::I32 => {\n+                    encode_store!(curr_idx, data_layout.endian, sz.bytes() as u32);\n+                }\n+                rustc_target::abi::Integer::I64 => {\n+                    encode_store!(curr_idx, data_layout.endian, sz.bytes());\n+                }\n+                _ => unreachable!(),\n+            };\n+        }\n+        let alloc = interpret::Allocation::from_bytes(\n+            data,\n+            tcx.data_layout.ptr_sized_integer().align(&tcx.data_layout).abi,\n+            Mutability::Not,\n+        );\n+        let alloc = tcx.create_memory_alloc(tcx.intern_const_alloc(alloc));\n+        Some((*adt_def, num_discrs, *alloc_cache.entry(ty).or_insert(alloc)))\n+    }\n+    fn optim<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let mut alloc_cache = FxHashMap::default();\n+        let body_did = body.source.def_id();\n+        let param_env = tcx.param_env(body_did);\n+\n+        let blocks = body.basic_blocks.as_mut();\n+        let local_decls = &mut body.local_decls;\n+\n+        for bb in blocks {\n+            bb.expand_statements(|st| {\n+                if let StatementKind::Assign(box (\n+                    lhs,\n+                    Rvalue::Use(Operand::Copy(rhs) | Operand::Move(rhs)),\n+                )) = &st.kind\n+                {\n+                    let ty = lhs.ty(local_decls, tcx).ty;\n+\n+                    let source_info = st.source_info;\n+                    let span = source_info.span;\n+\n+                    let (adt_def, num_variants, alloc_id) =\n+                        self.candidate(tcx, param_env, ty, &mut alloc_cache)?;\n+                    let alloc = tcx.global_alloc(alloc_id).unwrap_memory();\n+\n+                    let tmp_ty = tcx.mk_ty(ty::Array(\n+                        tcx.types.usize,\n+                        Const::from_target_usize(tcx, num_variants as u64),\n+                    ));\n+\n+                    let size_array_local = local_decls.push(LocalDecl::new(tmp_ty, span));\n+                    let store_live = Statement {\n+                        source_info,\n+                        kind: StatementKind::StorageLive(size_array_local),\n+                    };\n+\n+                    let place = Place::from(size_array_local);\n+                    let constant_vals = Constant {\n+                        span,\n+                        user_ty: None,\n+                        literal: ConstantKind::Val(\n+                            interpret::ConstValue::ByRef { alloc, offset: Size::ZERO },\n+                            tmp_ty,\n+                        ),\n+                    };\n+                    let rval = Rvalue::Use(Operand::Constant(box (constant_vals)));\n+\n+                    let const_assign =\n+                        Statement { source_info, kind: StatementKind::Assign(box (place, rval)) };\n+\n+                    let discr_place = Place::from(\n+                        local_decls\n+                            .push(LocalDecl::new(adt_def.repr().discr_type().to_ty(tcx), span)),\n+                    );\n+\n+                    let store_discr = Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(box (discr_place, Rvalue::Discriminant(*rhs))),\n+                    };\n+\n+                    let discr_cast_place =\n+                        Place::from(local_decls.push(LocalDecl::new(tcx.types.usize, span)));\n+\n+                    let cast_discr = Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(box (\n+                            discr_cast_place,\n+                            Rvalue::Cast(\n+                                CastKind::IntToInt,\n+                                Operand::Copy(discr_place),\n+                                tcx.types.usize,\n+                            ),\n+                        )),\n+                    };\n+\n+                    let size_place =\n+                        Place::from(local_decls.push(LocalDecl::new(tcx.types.usize, span)));\n+\n+                    let store_size = Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(box (\n+                            size_place,\n+                            Rvalue::Use(Operand::Copy(Place {\n+                                local: size_array_local,\n+                                projection: tcx.intern_place_elems(&[PlaceElem::Index(\n+                                    discr_cast_place.local,\n+                                )]),\n+                            })),\n+                        )),\n+                    };\n+\n+                    let dst =\n+                        Place::from(local_decls.push(LocalDecl::new(tcx.mk_mut_ptr(ty), span)));\n+\n+                    let dst_ptr = Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(box (\n+                            dst,\n+                            Rvalue::AddressOf(Mutability::Mut, *lhs),\n+                        )),\n+                    };\n+\n+                    let dst_cast_ty = tcx.mk_mut_ptr(tcx.types.u8);\n+                    let dst_cast_place =\n+                        Place::from(local_decls.push(LocalDecl::new(dst_cast_ty, span)));\n+\n+                    let dst_cast = Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(box (\n+                            dst_cast_place,\n+                            Rvalue::Cast(CastKind::PtrToPtr, Operand::Copy(dst), dst_cast_ty),\n+                        )),\n+                    };\n+\n+                    let src =\n+                        Place::from(local_decls.push(LocalDecl::new(tcx.mk_imm_ptr(ty), span)));\n+\n+                    let src_ptr = Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(box (\n+                            src,\n+                            Rvalue::AddressOf(Mutability::Not, *rhs),\n+                        )),\n+                    };\n+\n+                    let src_cast_ty = tcx.mk_imm_ptr(tcx.types.u8);\n+                    let src_cast_place =\n+                        Place::from(local_decls.push(LocalDecl::new(src_cast_ty, span)));\n+\n+                    let src_cast = Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(box (\n+                            src_cast_place,\n+                            Rvalue::Cast(CastKind::PtrToPtr, Operand::Copy(src), src_cast_ty),\n+                        )),\n+                    };\n+\n+                    let deinit_old =\n+                        Statement { source_info, kind: StatementKind::Deinit(box dst) };\n+\n+                    let copy_bytes = Statement {\n+                        source_info,\n+                        kind: StatementKind::Intrinsic(\n+                            box NonDivergingIntrinsic::CopyNonOverlapping(CopyNonOverlapping {\n+                                src: Operand::Copy(src_cast_place),\n+                                dst: Operand::Copy(dst_cast_place),\n+                                count: Operand::Copy(size_place),\n+                            }),\n+                        ),\n+                    };\n+\n+                    let store_dead = Statement {\n+                        source_info,\n+                        kind: StatementKind::StorageDead(size_array_local),\n+                    };\n+                    let iter = [\n+                        store_live,\n+                        const_assign,\n+                        store_discr,\n+                        cast_discr,\n+                        store_size,\n+                        dst_ptr,\n+                        dst_cast,\n+                        src_ptr,\n+                        src_cast,\n+                        deinit_old,\n+                        copy_bytes,\n+                        store_dead,\n+                    ]\n+                    .into_iter();\n+\n+                    st.make_nop();\n+                    Some(iter)\n+                } else {\n+                    None\n+                }\n+            });\n+        }\n+    }\n+}"}, {"sha": "45cd4024c9f57513be06007a5297b1c5d0733c07", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,6 +1,7 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(box_syntax)]\n #![feature(let_chains)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n@@ -73,6 +74,7 @@ mod function_item_references;\n mod generator;\n mod inline;\n mod instcombine;\n+mod large_enums;\n mod lower_intrinsics;\n mod lower_slice_len;\n mod match_branches;\n@@ -583,6 +585,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &simplify::SimplifyLocals::new(\"final\"),\n             &multiple_return_terminators::MultipleReturnTerminators,\n             &deduplicate_blocks::DeduplicateBlocks,\n+            &large_enums::EnumSizeOpt { discrepancy: 128 },\n             // Some cleanup necessary at least for LLVM and potentially other codegen backends.\n             &add_call_guards::CriticalCallEdges,\n             // Dump the end result for testing and debugging purposes."}, {"sha": "8a37423b2a052b23d15c5f4fc8f3a2b08e309cc7", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,5 +1,5 @@\n use crate::MirPass;\n-use rustc_index::bit_set::BitSet;\n+use rustc_index::bit_set::{BitSet, GrowableBitSet};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::*;\n@@ -26,10 +26,12 @@ impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n             debug!(?replacements);\n             let all_dead_locals = replace_flattened_locals(tcx, body, replacements);\n             if !all_dead_locals.is_empty() {\n-                for local in excluded.indices() {\n-                    excluded[local] |= all_dead_locals.contains(local);\n-                }\n-                excluded.raw.resize(body.local_decls.len(), false);\n+                excluded.union(&all_dead_locals);\n+                excluded = {\n+                    let mut growable = GrowableBitSet::from(excluded);\n+                    growable.ensure(body.local_decls.len());\n+                    growable.into()\n+                };\n             } else {\n                 break;\n             }\n@@ -44,11 +46,11 @@ impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n /// - the locals is a union or an enum;\n /// - the local's address is taken, and thus the relative addresses of the fields are observable to\n ///   client code.\n-fn escaping_locals(excluded: &IndexVec<Local, bool>, body: &Body<'_>) -> BitSet<Local> {\n+fn escaping_locals(excluded: &BitSet<Local>, body: &Body<'_>) -> BitSet<Local> {\n     let mut set = BitSet::new_empty(body.local_decls.len());\n     set.insert_range(RETURN_PLACE..=Local::from_usize(body.arg_count));\n     for (local, decl) in body.local_decls().iter_enumerated() {\n-        if decl.ty.is_union() || decl.ty.is_enum() || excluded[local] {\n+        if decl.ty.is_union() || decl.ty.is_enum() || excluded.contains(local) {\n             set.insert(local);\n         }\n     }\n@@ -172,7 +174,7 @@ fn replace_flattened_locals<'tcx>(\n     body: &mut Body<'tcx>,\n     replacements: ReplacementMap<'tcx>,\n ) -> BitSet<Local> {\n-    let mut all_dead_locals = BitSet::new_empty(body.local_decls.len());\n+    let mut all_dead_locals = BitSet::new_empty(replacements.fragments.len());\n     for (local, replacements) in replacements.fragments.iter_enumerated() {\n         if replacements.is_some() {\n             all_dead_locals.insert(local);\n@@ -318,6 +320,8 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n             // ConstProp will pick up the pieces and replace them by actual constants.\n             StatementKind::Assign(box (place, Rvalue::Use(Operand::Constant(_)))) => {\n                 if let Some(final_locals) = self.replacements.place_fragments(place) {\n+                    // Put the deaggregated statements *after* the original one.\n+                    let location = location.successor_within_block();\n                     for (field, ty, new_local) in final_locals {\n                         let rplace = self.tcx.mk_place_field(place, field, ty);\n                         let rvalue = Rvalue::Use(Operand::Move(rplace));"}, {"sha": "83b8988cecaf88dc5cd8e2fb4d4b68ddae875e5d", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -189,9 +189,7 @@ use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n-use rustc_middle::ty::{\n-    self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitable, VtblEntry,\n-};\n+use rustc_middle::ty::{self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, VtblEntry};\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;"}, {"sha": "aba842817ef7a596c8d14a30b05b118ab330c014", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{\n     self,\n     query::Providers,\n     subst::SubstsRef,\n-    visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor},\n+    visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable},\n     Const, Ty, TyCtxt, UnusedGenericParams,\n };\n use rustc_span::symbol::sym;\n@@ -296,7 +296,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n+impl<'a, 'tcx> TypeVisitor<TyCtxt<'tcx>> for MarkUsedGenericParams<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.has_non_region_param() {"}, {"sha": "63bf864f2a812f8fc8de2159bbd3d677c8ff1223", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 312, "deletions": 0, "changes": 312, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1368,6 +1368,14 @@ pub(crate) struct SelfArgumentPointer {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_unexpected_token_after_dot)]\n+pub struct UnexpectedTokenAfterDot<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub actual: Cow<'a, str>,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_visibility_not_followed_by_item)]\n #[help]\n@@ -1658,6 +1666,310 @@ pub(crate) enum TopLevelOrPatternNotAllowed {\n     },\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_cannot_be_raw_ident)]\n+pub struct CannotBeRawIdent {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ident: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_cr_doc_comment)]\n+pub struct CrDocComment {\n+    #[primary_span]\n+    pub span: Span,\n+    pub block: bool,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_no_digits_literal, code = \"E0768\")]\n+pub struct NoDigitsLiteral {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_invalid_digit_literal)]\n+pub struct InvalidDigitLiteral {\n+    #[primary_span]\n+    pub span: Span,\n+    pub base: u32,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_empty_exponent_float)]\n+pub struct EmptyExponentFloat {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_float_literal_unsupported_base)]\n+pub struct FloatLiteralUnsupportedBase {\n+    #[primary_span]\n+    pub span: Span,\n+    pub base: &'static str,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_unknown_prefix)]\n+#[note]\n+pub struct UnknownPrefix<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub prefix: &'a str,\n+    #[subdiagnostic]\n+    pub sugg: Option<UnknownPrefixSugg>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum UnknownPrefixSugg {\n+    #[suggestion(suggestion_br, code = \"br\", applicability = \"maybe-incorrect\", style = \"verbose\")]\n+    UseBr(#[primary_span] Span),\n+    #[suggestion(\n+        suggestion_whitespace,\n+        code = \" \",\n+        applicability = \"maybe-incorrect\",\n+        style = \"verbose\"\n+    )]\n+    Whitespace(#[primary_span] Span),\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_too_many_hashes)]\n+pub struct TooManyHashes {\n+    #[primary_span]\n+    pub span: Span,\n+    pub num: u32,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_unknown_start_of_token)]\n+pub struct UnknownTokenStart {\n+    #[primary_span]\n+    pub span: Span,\n+    pub escaped: String,\n+    #[subdiagnostic]\n+    pub sugg: Option<TokenSubstitution>,\n+    #[subdiagnostic]\n+    pub null: Option<UnknownTokenNull>,\n+    #[subdiagnostic]\n+    pub repeat: Option<UnknownTokenRepeat>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum TokenSubstitution {\n+    #[suggestion(sugg_quotes, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n+    DirectedQuotes {\n+        #[primary_span]\n+        span: Span,\n+        suggestion: String,\n+        ascii_str: &'static str,\n+        ascii_name: &'static str,\n+    },\n+    #[suggestion(sugg_other, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n+    Other {\n+        #[primary_span]\n+        span: Span,\n+        suggestion: String,\n+        ch: String,\n+        u_name: &'static str,\n+        ascii_str: &'static str,\n+        ascii_name: &'static str,\n+    },\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[note(note_repeats)]\n+pub struct UnknownTokenRepeat {\n+    pub repeats: usize,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[help(help_null)]\n+pub struct UnknownTokenNull;\n+\n+#[derive(Diagnostic)]\n+pub enum UnescapeError {\n+    #[diag(parse_invalid_unicode_escape)]\n+    #[help]\n+    InvalidUnicodeEscape {\n+        #[primary_span]\n+        #[label]\n+        span: Span,\n+        surrogate: bool,\n+    },\n+    #[diag(parse_escape_only_char)]\n+    EscapeOnlyChar {\n+        #[primary_span]\n+        span: Span,\n+        #[suggestion(escape, applicability = \"machine-applicable\", code = \"{escaped_sugg}\")]\n+        char_span: Span,\n+        escaped_sugg: String,\n+        escaped_msg: String,\n+        byte: bool,\n+    },\n+    #[diag(parse_bare_cr)]\n+    BareCr {\n+        #[primary_span]\n+        #[suggestion(escape, applicability = \"machine-applicable\", code = \"\\\\r\")]\n+        span: Span,\n+        double_quotes: bool,\n+    },\n+    #[diag(parse_bare_cr_in_raw_string)]\n+    BareCrRawString(#[primary_span] Span),\n+    #[diag(parse_too_short_hex_escape)]\n+    TooShortHexEscape(#[primary_span] Span),\n+    #[diag(parse_invalid_char_in_escape)]\n+    InvalidCharInEscape {\n+        #[primary_span]\n+        #[label]\n+        span: Span,\n+        is_hex: bool,\n+        ch: String,\n+    },\n+    #[diag(parse_out_of_range_hex_escape)]\n+    OutOfRangeHexEscape(\n+        #[primary_span]\n+        #[label]\n+        Span,\n+    ),\n+    #[diag(parse_leading_underscore_unicode_escape)]\n+    LeadingUnderscoreUnicodeEscape {\n+        #[primary_span]\n+        #[label(parse_leading_underscore_unicode_escape_label)]\n+        span: Span,\n+        ch: String,\n+    },\n+    #[diag(parse_overlong_unicode_escape)]\n+    OverlongUnicodeEscape(\n+        #[primary_span]\n+        #[label]\n+        Span,\n+    ),\n+    #[diag(parse_unclosed_unicode_escape)]\n+    UnclosedUnicodeEscape(\n+        #[primary_span]\n+        #[label]\n+        Span,\n+        #[suggestion(terminate, code = \"}}\", applicability = \"maybe-incorrect\", style = \"verbose\")]\n+        Span,\n+    ),\n+    #[diag(parse_no_brace_unicode_escape)]\n+    NoBraceInUnicodeEscape {\n+        #[primary_span]\n+        span: Span,\n+        #[label]\n+        label: Option<Span>,\n+        #[subdiagnostic]\n+        sub: NoBraceUnicodeSub,\n+    },\n+    #[diag(parse_unicode_escape_in_byte)]\n+    #[help]\n+    UnicodeEscapeInByte(\n+        #[primary_span]\n+        #[label]\n+        Span,\n+    ),\n+    #[diag(parse_empty_unicode_escape)]\n+    EmptyUnicodeEscape(\n+        #[primary_span]\n+        #[label]\n+        Span,\n+    ),\n+    #[diag(parse_zero_chars)]\n+    ZeroChars(\n+        #[primary_span]\n+        #[label]\n+        Span,\n+    ),\n+    #[diag(parse_lone_slash)]\n+    LoneSlash(\n+        #[primary_span]\n+        #[label]\n+        Span,\n+    ),\n+    #[diag(parse_unskipped_whitespace)]\n+    UnskippedWhitespace {\n+        #[primary_span]\n+        span: Span,\n+        #[label]\n+        char_span: Span,\n+        ch: String,\n+    },\n+    #[diag(parse_multiple_skipped_lines)]\n+    MultipleSkippedLinesWarning(\n+        #[primary_span]\n+        #[label]\n+        Span,\n+    ),\n+    #[diag(parse_more_than_one_char)]\n+    MoreThanOneChar {\n+        #[primary_span]\n+        span: Span,\n+        #[subdiagnostic]\n+        note: Option<MoreThanOneCharNote>,\n+        #[subdiagnostic]\n+        suggestion: MoreThanOneCharSugg,\n+    },\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum MoreThanOneCharSugg {\n+    #[suggestion(consider_normalized, code = \"{normalized}\", applicability = \"machine-applicable\")]\n+    NormalizedForm {\n+        #[primary_span]\n+        span: Span,\n+        ch: String,\n+        normalized: String,\n+    },\n+    #[suggestion(remove_non, code = \"{ch}\", applicability = \"maybe-incorrect\")]\n+    RemoveNonPrinting {\n+        #[primary_span]\n+        span: Span,\n+        ch: String,\n+    },\n+    #[suggestion(use_double_quotes, code = \"{sugg}\", applicability = \"machine-applicable\")]\n+    Quotes {\n+        #[primary_span]\n+        span: Span,\n+        is_byte: bool,\n+        sugg: String,\n+    },\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum MoreThanOneCharNote {\n+    #[note(followed_by)]\n+    AllCombining {\n+        #[primary_span]\n+        span: Span,\n+        chr: String,\n+        len: usize,\n+        escaped_marks: String,\n+    },\n+    #[note(non_printing)]\n+    NonPrinting {\n+        #[primary_span]\n+        span: Span,\n+        escaped: String,\n+    },\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum NoBraceUnicodeSub {\n+    #[suggestion(use_braces, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n+    Suggestion {\n+        #[primary_span]\n+        span: Span,\n+        suggestion: String,\n+    },\n+    #[help(format_of_unicode)]\n+    Help,\n+}\n+\n #[derive(Subdiagnostic)]\n pub(crate) enum TopLevelOrPatternNotAllowedSugg {\n     #[suggestion("}, {"sha": "bd998ed91d977d8f68a89e54f091e9b95b72e535", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 47, "deletions": 112, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,11 +1,10 @@\n+use crate::errors;\n use crate::lexer::unicode_chars::UNICODE_ARRAY;\n use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::token::{self, CommentKind, Delimiter, Token, TokenKind};\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::util::unicode::contains_text_flow_control_chars;\n-use rustc_errors::{\n-    error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult, StashKey,\n-};\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder, PResult, StashKey};\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::Cursor;\n use rustc_lexer::{Base, DocStyle, RawStrError};\n@@ -151,7 +150,7 @@ impl<'a> StringReader<'a> {\n                     let span = self.mk_sp(start, self.pos);\n                     self.sess.symbol_gallery.insert(sym, span);\n                     if !sym.can_be_raw() {\n-                        self.err_span(span, &format!(\"`{}` cannot be a raw identifier\", sym));\n+                        self.sess.emit_err(errors::CannotBeRawIdent { span, ident: sym });\n                     }\n                     self.sess.raw_identifier_spans.borrow_mut().push(span);\n                     token::Ident(sym, true)\n@@ -262,27 +261,24 @@ impl<'a> StringReader<'a> {\n                         self.nbsp_is_whitespace = true;\n                     }\n                     let repeats = it.take_while(|c1| *c1 == c).count();\n-                    let mut err =\n-                        self.struct_err_span_char(start, self.pos + Pos::from_usize(repeats * c.len_utf8()), \"unknown start of token\", c);\n                     // FIXME: the lexer could be used to turn the ASCII version of unicode\n                     // homoglyphs, instead of keeping a table in `check_for_substitution`into the\n                     // token. Ideally, this should be inside `rustc_lexer`. However, we should\n                     // first remove compound tokens like `<<` from `rustc_lexer`, and then add\n                     // fancier error recovery to it, as there will be less overall work to do this\n                     // way.\n-                    let token = unicode_chars::check_for_substitution(self, start, c, &mut err, repeats+1);\n-                    if c == '\\x00' {\n-                        err.help(\"source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used\");\n-                    }\n-                    if repeats > 0 {\n-                        if repeats == 1 {\n-                            err.note(format!(\"character appears once more\"));\n-                        } else {\n-                            err.note(format!(\"character appears {repeats} more times\"));\n-                        }\n-                        swallow_next_invalid = repeats;\n-                    }\n-                    err.emit();\n+                    let (token, sugg) = unicode_chars::check_for_substitution(self, start, c, repeats+1);\n+                    self.sess.emit_err(errors::UnknownTokenStart {\n+                        span: self.mk_sp(start, self.pos + Pos::from_usize(repeats * c.len_utf8())),\n+                        escaped: escaped_char(c),\n+                        sugg,\n+                        null: if c == '\\x00' {Some(errors::UnknownTokenNull)} else {None},\n+                        repeat: if repeats > 0 {\n+                            swallow_next_invalid = repeats;\n+                            Some(errors::UnknownTokenRepeat { repeats })\n+                        } else {None}\n+                    });\n+\n                     if let Some(token) = token {\n                         token\n                     } else {\n@@ -297,26 +293,6 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n-    /// Report a fatal lexical error with a given span.\n-    fn fatal_span(&self, sp: Span, m: &str) -> ! {\n-        self.sess.span_diagnostic.span_fatal(sp, m)\n-    }\n-\n-    /// Report a lexical error with a given span.\n-    fn err_span(&self, sp: Span, m: &str) {\n-        self.sess.span_diagnostic.struct_span_err(sp, m).emit();\n-    }\n-\n-    /// Report a fatal error spanning [`from_pos`, `to_pos`).\n-    fn fatal_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) -> ! {\n-        self.fatal_span(self.mk_sp(from_pos, to_pos), m)\n-    }\n-\n-    /// Report a lexical error spanning [`from_pos`, `to_pos`).\n-    fn err_span_(&self, from_pos: BytePos, to_pos: BytePos, m: &str) {\n-        self.err_span(self.mk_sp(from_pos, to_pos), m)\n-    }\n-\n     fn struct_fatal_span_char(\n         &self,\n         from_pos: BytePos,\n@@ -329,18 +305,6 @@ impl<'a> StringReader<'a> {\n             .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!(\"{}: {}\", m, escaped_char(c)))\n     }\n \n-    fn struct_err_span_char(\n-        &self,\n-        from_pos: BytePos,\n-        to_pos: BytePos,\n-        m: &str,\n-        c: char,\n-    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        self.sess\n-            .span_diagnostic\n-            .struct_span_err(self.mk_sp(from_pos, to_pos), &format!(\"{}: {}\", m, escaped_char(c)))\n-    }\n-\n     /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly\n     /// complain about it.\n     fn lint_unicode_text_flow(&self, start: BytePos) {\n@@ -368,14 +332,12 @@ impl<'a> StringReader<'a> {\n     ) -> TokenKind {\n         if content.contains('\\r') {\n             for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\\r') {\n-                self.err_span_(\n+                let span = self.mk_sp(\n                     content_start + BytePos(idx as u32),\n                     content_start + BytePos(idx as u32 + 1),\n-                    match comment_kind {\n-                        CommentKind::Line => \"bare CR not allowed in doc-comment\",\n-                        CommentKind::Block => \"bare CR not allowed in block doc-comment\",\n-                    },\n                 );\n+                let block = matches!(comment_kind, CommentKind::Block);\n+                self.sess.emit_err(errors::CrDocComment { span, block });\n             }\n         }\n \n@@ -454,26 +416,20 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::LiteralKind::Int { base, empty_int } => {\n                 if empty_int {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_err_with_code(\n-                            self.mk_sp(start, end),\n-                            \"no valid digits found for number\",\n-                            error_code!(E0768),\n-                        )\n-                        .emit();\n+                    let span = self.mk_sp(start, end);\n+                    self.sess.emit_err(errors::NoDigitsLiteral { span });\n                     (token::Integer, sym::integer(0))\n                 } else {\n                     if matches!(base, Base::Binary | Base::Octal) {\n                         let base = base as u32;\n                         let s = self.str_from_to(start + BytePos(2), end);\n                         for (idx, c) in s.char_indices() {\n+                            let span = self.mk_sp(\n+                                start + BytePos::from_usize(2 + idx),\n+                                start + BytePos::from_usize(2 + idx + c.len_utf8()),\n+                            );\n                             if c != '_' && c.to_digit(base).is_none() {\n-                                self.err_span_(\n-                                    start + BytePos::from_usize(2 + idx),\n-                                    start + BytePos::from_usize(2 + idx + c.len_utf8()),\n-                                    &format!(\"invalid digit for a base {} literal\", base),\n-                                );\n+                                self.sess.emit_err(errors::InvalidDigitLiteral { span, base });\n                             }\n                         }\n                     }\n@@ -482,19 +438,18 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::LiteralKind::Float { base, empty_exponent } => {\n                 if empty_exponent {\n-                    self.err_span_(start, self.pos, \"expected at least one digit in exponent\");\n+                    let span = self.mk_sp(start, self.pos);\n+                    self.sess.emit_err(errors::EmptyExponentFloat { span });\n                 }\n-                match base {\n-                    Base::Hexadecimal => {\n-                        self.err_span_(start, end, \"hexadecimal float literal is not supported\")\n-                    }\n-                    Base::Octal => {\n-                        self.err_span_(start, end, \"octal float literal is not supported\")\n-                    }\n-                    Base::Binary => {\n-                        self.err_span_(start, end, \"binary float literal is not supported\")\n-                    }\n-                    _ => {}\n+                let base = match base {\n+                    Base::Hexadecimal => Some(\"hexadecimal\"),\n+                    Base::Octal => Some(\"octal\"),\n+                    Base::Binary => Some(\"binary\"),\n+                    _ => None,\n+                };\n+                if let Some(base) = base {\n+                    let span = self.mk_sp(start, end);\n+                    self.sess.emit_err(errors::FloatLiteralUnsupportedBase { span, base });\n                 }\n                 (token::Float, self.symbol_from_to(start, end))\n             }\n@@ -644,54 +599,34 @@ impl<'a> StringReader<'a> {\n     // identifier tokens.\n     fn report_unknown_prefix(&self, start: BytePos) {\n         let prefix_span = self.mk_sp(start, self.pos);\n-        let prefix_str = self.str_from_to(start, self.pos);\n-        let msg = format!(\"prefix `{}` is unknown\", prefix_str);\n+        let prefix = self.str_from_to(start, self.pos);\n \n         let expn_data = prefix_span.ctxt().outer_expn_data();\n \n         if expn_data.edition >= Edition::Edition2021 {\n             // In Rust 2021, this is a hard error.\n-            let mut err = self.sess.span_diagnostic.struct_span_err(prefix_span, &msg);\n-            err.span_label(prefix_span, \"unknown prefix\");\n-            if prefix_str == \"rb\" {\n-                err.span_suggestion_verbose(\n-                    prefix_span,\n-                    \"use `br` for a raw byte string\",\n-                    \"br\",\n-                    Applicability::MaybeIncorrect,\n-                );\n+            let sugg = if prefix == \"rb\" {\n+                Some(errors::UnknownPrefixSugg::UseBr(prefix_span))\n             } else if expn_data.is_root() {\n-                err.span_suggestion_verbose(\n-                    prefix_span.shrink_to_hi(),\n-                    \"consider inserting whitespace here\",\n-                    \" \",\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n-            err.note(\"prefixed identifiers and literals are reserved since Rust 2021\");\n-            err.emit();\n+                Some(errors::UnknownPrefixSugg::Whitespace(prefix_span.shrink_to_hi()))\n+            } else {\n+                None\n+            };\n+            self.sess.emit_err(errors::UnknownPrefix { span: prefix_span, prefix, sugg });\n         } else {\n             // Before Rust 2021, only emit a lint for migration.\n             self.sess.buffer_lint_with_diagnostic(\n                 &RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX,\n                 prefix_span,\n                 ast::CRATE_NODE_ID,\n-                &msg,\n+                &format!(\"prefix `{prefix}` is unknown\"),\n                 BuiltinLintDiagnostics::ReservedPrefix(prefix_span),\n             );\n         }\n     }\n \n-    fn report_too_many_hashes(&self, start: BytePos, found: u32) -> ! {\n-        self.fatal_span_(\n-            start,\n-            self.pos,\n-            &format!(\n-                \"too many `#` symbols: raw strings may be delimited \\\n-                by up to 255 `#` symbols, but found {}\",\n-                found\n-            ),\n-        )\n+    fn report_too_many_hashes(&self, start: BytePos, num: u32) -> ! {\n+        self.sess.emit_fatal(errors::TooManyHashes { span: self.mk_sp(start, self.pos), num });\n     }\n \n     fn cook_quoted("}, {"sha": "0d12ec6081d839adf0cfdecd8daf6ebbe5044c6c", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 74, "deletions": 174, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -3,10 +3,12 @@\n use std::iter::once;\n use std::ops::Range;\n \n-use rustc_errors::{pluralize, Applicability, Handler};\n+use rustc_errors::{Applicability, Handler};\n use rustc_lexer::unescape::{EscapeError, Mode};\n use rustc_span::{BytePos, Span};\n \n+use crate::errors::{MoreThanOneCharNote, MoreThanOneCharSugg, NoBraceUnicodeSub, UnescapeError};\n+\n pub(crate) fn emit_unescape_error(\n     handler: &Handler,\n     // interior part of the literal, without quotes\n@@ -31,53 +33,32 @@ pub(crate) fn emit_unescape_error(\n     };\n     match error {\n         EscapeError::LoneSurrogateUnicodeEscape => {\n-            handler\n-                .struct_span_err(span, \"invalid unicode character escape\")\n-                .span_label(span, \"invalid escape\")\n-                .help(\"unicode escape must not be a surrogate\")\n-                .emit();\n+            handler.emit_err(UnescapeError::InvalidUnicodeEscape { span, surrogate: true });\n         }\n         EscapeError::OutOfRangeUnicodeEscape => {\n-            handler\n-                .struct_span_err(span, \"invalid unicode character escape\")\n-                .span_label(span, \"invalid escape\")\n-                .help(\"unicode escape must be at most 10FFFF\")\n-                .emit();\n+            handler.emit_err(UnescapeError::InvalidUnicodeEscape { span, surrogate: false });\n         }\n         EscapeError::MoreThanOneChar => {\n             use unicode_normalization::{char::is_combining_mark, UnicodeNormalization};\n+            let mut sugg = None;\n+            let mut note = None;\n \n-            let mut has_help = false;\n-            let mut handler = handler.struct_span_err(\n-                span_with_quotes,\n-                \"character literal may only contain one codepoint\",\n-            );\n-\n-            if lit.chars().skip(1).all(|c| is_combining_mark(c)) {\n-                let escaped_marks =\n-                    lit.chars().skip(1).map(|c| c.escape_default().to_string()).collect::<Vec<_>>();\n-                handler.span_note(\n-                    span,\n-                    &format!(\n-                        \"this `{}` is followed by the combining mark{} `{}`\",\n-                        lit.chars().next().unwrap(),\n-                        pluralize!(escaped_marks.len()),\n-                        escaped_marks.join(\"\"),\n-                    ),\n-                );\n+            let lit_chars = lit.chars().collect::<Vec<_>>();\n+            let (first, rest) = lit_chars.split_first().unwrap();\n+            if rest.iter().copied().all(is_combining_mark) {\n                 let normalized = lit.nfc().to_string();\n                 if normalized.chars().count() == 1 {\n-                    has_help = true;\n-                    handler.span_suggestion(\n-                        span,\n-                        &format!(\n-                            \"consider using the normalized form `{}` of this character\",\n-                            normalized.chars().next().unwrap().escape_default()\n-                        ),\n-                        normalized,\n-                        Applicability::MachineApplicable,\n-                    );\n+                    let ch = normalized.chars().next().unwrap().escape_default().to_string();\n+                    sugg = Some(MoreThanOneCharSugg::NormalizedForm { span, ch, normalized });\n                 }\n+                let escaped_marks =\n+                    rest.iter().map(|c| c.escape_default().to_string()).collect::<Vec<_>>();\n+                note = Some(MoreThanOneCharNote::AllCombining {\n+                    span,\n+                    chr: format!(\"{first}\"),\n+                    len: escaped_marks.len(),\n+                    escaped_marks: escaped_marks.join(\"\"),\n+                });\n             } else {\n                 let printable: Vec<char> = lit\n                     .chars()\n@@ -87,32 +68,18 @@ pub(crate) fn emit_unescape_error(\n                     })\n                     .collect();\n \n-                if let [ch] = printable.as_slice() {\n-                    has_help = true;\n-\n-                    handler.span_note(\n+                if let &[ch] = printable.as_slice() {\n+                    sugg =\n+                        Some(MoreThanOneCharSugg::RemoveNonPrinting { span, ch: ch.to_string() });\n+                    note = Some(MoreThanOneCharNote::NonPrinting {\n                         span,\n-                        &format!(\n-                            \"there are non-printing characters, the full sequence is `{}`\",\n-                            lit.escape_default(),\n-                        ),\n-                    );\n-\n-                    handler.span_suggestion(\n-                        span,\n-                        \"consider removing the non-printing characters\",\n-                        ch,\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                        escaped: lit.escape_default().to_string(),\n+                    });\n                 }\n-            }\n-\n-            if !has_help {\n-                let (prefix, msg) = if mode.is_byte() {\n-                    (\"b\", \"if you meant to write a byte string literal, use double quotes\")\n-                } else {\n-                    (\"\", \"if you meant to write a `str` literal, use double quotes\")\n-                };\n+            };\n+            let sugg = sugg.unwrap_or_else(|| {\n+                let is_byte = mode.is_byte();\n+                let prefix = if is_byte { \"b\" } else { \"\" };\n                 let mut escaped = String::with_capacity(lit.len());\n                 let mut chrs = lit.chars().peekable();\n                 while let Some(first) = chrs.next() {\n@@ -129,54 +96,32 @@ pub(crate) fn emit_unescape_error(\n                         (c, _) => escaped.push(c),\n                     };\n                 }\n-                handler.span_suggestion(\n-                    span_with_quotes,\n-                    msg,\n-                    format!(\"{prefix}\\\"{escaped}\\\"\"),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-\n-            handler.emit();\n+                let sugg = format!(\"{prefix}\\\"{escaped}\\\"\");\n+                MoreThanOneCharSugg::Quotes { span: span_with_quotes, is_byte, sugg }\n+            });\n+            handler.emit_err(UnescapeError::MoreThanOneChar {\n+                span: span_with_quotes,\n+                note,\n+                suggestion: sugg,\n+            });\n         }\n         EscapeError::EscapeOnlyChar => {\n             let (c, char_span) = last_char();\n-\n-            let msg = if mode.is_byte() {\n-                \"byte constant must be escaped\"\n-            } else {\n-                \"character constant must be escaped\"\n-            };\n-            handler\n-                .struct_span_err(span, &format!(\"{}: `{}`\", msg, escaped_char(c)))\n-                .span_suggestion(\n-                    char_span,\n-                    \"escape the character\",\n-                    c.escape_default(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+            handler.emit_err(UnescapeError::EscapeOnlyChar {\n+                span,\n+                char_span,\n+                escaped_sugg: c.escape_default().to_string(),\n+                escaped_msg: escaped_char(c),\n+                byte: mode.is_byte(),\n+            });\n         }\n         EscapeError::BareCarriageReturn => {\n-            let msg = if mode.in_double_quotes() {\n-                \"bare CR not allowed in string, use `\\\\r` instead\"\n-            } else {\n-                \"character constant must be escaped: `\\\\r`\"\n-            };\n-            handler\n-                .struct_span_err(span, msg)\n-                .span_suggestion(\n-                    span,\n-                    \"escape the character\",\n-                    \"\\\\r\",\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+            let double_quotes = mode.in_double_quotes();\n+            handler.emit_err(UnescapeError::BareCr { span, double_quotes });\n         }\n         EscapeError::BareCarriageReturnInRawString => {\n             assert!(mode.in_double_quotes());\n-            let msg = \"bare CR not allowed in raw string\";\n-            handler.span_err(span, msg);\n+            handler.emit_err(UnescapeError::BareCrRawString(span));\n         }\n         EscapeError::InvalidEscape => {\n             let (c, span) = last_char();\n@@ -213,22 +158,13 @@ pub(crate) fn emit_unescape_error(\n             diag.emit();\n         }\n         EscapeError::TooShortHexEscape => {\n-            handler.span_err(span, \"numeric character escape is too short\");\n+            handler.emit_err(UnescapeError::TooShortHexEscape(span));\n         }\n         EscapeError::InvalidCharInHexEscape | EscapeError::InvalidCharInUnicodeEscape => {\n             let (c, span) = last_char();\n-\n-            let msg = if error == EscapeError::InvalidCharInHexEscape {\n-                \"invalid character in numeric character escape\"\n-            } else {\n-                \"invalid character in unicode escape\"\n-            };\n-            let c = escaped_char(c);\n-\n-            handler\n-                .struct_span_err(span, &format!(\"{}: `{}`\", msg, c))\n-                .span_label(span, msg)\n-                .emit();\n+            let is_hex = error == EscapeError::InvalidCharInHexEscape;\n+            let ch = escaped_char(c);\n+            handler.emit_err(UnescapeError::InvalidCharInEscape { span, is_hex, ch });\n         }\n         EscapeError::NonAsciiCharInByte => {\n             let (c, span) = last_char();\n@@ -278,41 +214,22 @@ pub(crate) fn emit_unescape_error(\n             err.emit();\n         }\n         EscapeError::OutOfRangeHexEscape => {\n-            handler\n-                .struct_span_err(span, \"out of range hex escape\")\n-                .span_label(span, \"must be a character in the range [\\\\x00-\\\\x7f]\")\n-                .emit();\n+            handler.emit_err(UnescapeError::OutOfRangeHexEscape(span));\n         }\n         EscapeError::LeadingUnderscoreUnicodeEscape => {\n             let (c, span) = last_char();\n-            let msg = \"invalid start of unicode escape\";\n-            handler\n-                .struct_span_err(span, &format!(\"{}: `{}`\", msg, c))\n-                .span_label(span, msg)\n-                .emit();\n+            handler.emit_err(UnescapeError::LeadingUnderscoreUnicodeEscape {\n+                span,\n+                ch: escaped_char(c),\n+            });\n         }\n         EscapeError::OverlongUnicodeEscape => {\n-            handler\n-                .struct_span_err(span, \"overlong unicode escape\")\n-                .span_label(span, \"must have at most 6 hex digits\")\n-                .emit();\n+            handler.emit_err(UnescapeError::OverlongUnicodeEscape(span));\n         }\n         EscapeError::UnclosedUnicodeEscape => {\n-            handler\n-                .struct_span_err(span, \"unterminated unicode escape\")\n-                .span_label(span, \"missing a closing `}`\")\n-                .span_suggestion_verbose(\n-                    span.shrink_to_hi(),\n-                    \"terminate the unicode escape\",\n-                    \"}\",\n-                    Applicability::MaybeIncorrect,\n-                )\n-                .emit();\n+            handler.emit_err(UnescapeError::UnclosedUnicodeEscape(span, span.shrink_to_hi()));\n         }\n         EscapeError::NoBraceInUnicodeEscape => {\n-            let msg = \"incorrect unicode escape sequence\";\n-            let mut diag = handler.struct_span_err(span, msg);\n-\n             let mut suggestion = \"\\\\u{\".to_owned();\n             let mut suggestion_len = 0;\n             let (c, char_span) = last_char();\n@@ -322,54 +239,37 @@ pub(crate) fn emit_unescape_error(\n                 suggestion_len += c.len_utf8();\n             }\n \n-            if suggestion_len > 0 {\n+            let (label, sub) = if suggestion_len > 0 {\n                 suggestion.push('}');\n                 let hi = char_span.lo() + BytePos(suggestion_len as u32);\n-                diag.span_suggestion(\n-                    span.with_hi(hi),\n-                    \"format of unicode escape sequences uses braces\",\n-                    suggestion,\n-                    Applicability::MaybeIncorrect,\n-                );\n+                (None, NoBraceUnicodeSub::Suggestion { span: span.with_hi(hi), suggestion })\n             } else {\n-                diag.span_label(span, msg);\n-                diag.help(\"format of unicode escape sequences is `\\\\u{...}`\");\n-            }\n-\n-            diag.emit();\n+                (Some(span), NoBraceUnicodeSub::Help)\n+            };\n+            handler.emit_err(UnescapeError::NoBraceInUnicodeEscape { span, label, sub });\n         }\n         EscapeError::UnicodeEscapeInByte => {\n-            let msg = \"unicode escape in byte string\";\n-            handler\n-                .struct_span_err(span, msg)\n-                .span_label(span, msg)\n-                .help(\"unicode escape sequences cannot be used as a byte or in a byte string\")\n-                .emit();\n+            handler.emit_err(UnescapeError::UnicodeEscapeInByte(span));\n         }\n         EscapeError::EmptyUnicodeEscape => {\n-            handler\n-                .struct_span_err(span, \"empty unicode escape\")\n-                .span_label(span, \"this escape must have at least 1 hex digit\")\n-                .emit();\n+            handler.emit_err(UnescapeError::EmptyUnicodeEscape(span));\n         }\n         EscapeError::ZeroChars => {\n-            let msg = \"empty character literal\";\n-            handler.struct_span_err(span, msg).span_label(span, msg).emit();\n+            handler.emit_err(UnescapeError::ZeroChars(span));\n         }\n         EscapeError::LoneSlash => {\n-            let msg = \"invalid trailing slash in literal\";\n-            handler.struct_span_err(span, msg).span_label(span, msg).emit();\n+            handler.emit_err(UnescapeError::LoneSlash(span));\n         }\n         EscapeError::UnskippedWhitespaceWarning => {\n             let (c, char_span) = last_char();\n-            let msg =\n-                format!(\"non-ASCII whitespace symbol '{}' is not skipped\", c.escape_unicode());\n-            handler.struct_span_warn(span, &msg).span_label(char_span, &msg).emit();\n+            handler.emit_warning(UnescapeError::UnskippedWhitespace {\n+                span,\n+                ch: escaped_char(c),\n+                char_span,\n+            });\n         }\n         EscapeError::MultipleSkippedLinesWarning => {\n-            let msg = \"multiple lines skipped by escaped newline\";\n-            let bottom_msg = \"skipping everything up to and including this point\";\n-            handler.struct_span_warn(span, msg).span_label(span, bottom_msg).emit();\n+            handler.emit_warning(UnescapeError::MultipleSkippedLinesWarning(span));\n         }\n     }\n }"}, {"sha": "d4f971d5bc84f86097a02ba526181e039fec7dc8", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -2,8 +2,10 @@\n //! <https://www.unicode.org/Public/security/10.0.0/confusables.txt>\n \n use super::StringReader;\n-use crate::token::{self, Delimiter};\n-use rustc_errors::{Applicability, Diagnostic};\n+use crate::{\n+    errors::TokenSubstitution,\n+    token::{self, Delimiter},\n+};\n use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n #[rustfmt::skip] // for line breaks\n@@ -338,48 +340,44 @@ pub(super) fn check_for_substitution<'a>(\n     reader: &StringReader<'a>,\n     pos: BytePos,\n     ch: char,\n-    err: &mut Diagnostic,\n     count: usize,\n-) -> Option<token::TokenKind> {\n-    let &(_, u_name, ascii_str) = UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch)?;\n+) -> (Option<token::TokenKind>, Option<TokenSubstitution>) {\n+    let Some(&(_, u_name, ascii_str)) = UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch) else {\n+        return (None, None);\n+    };\n \n     let span = Span::with_root_ctxt(pos, pos + Pos::from_usize(ch.len_utf8() * count));\n \n     let Some((_, ascii_name, token)) = ASCII_ARRAY.iter().find(|&&(s, _, _)| s == ascii_str) else {\n         let msg = format!(\"substitution character not found for '{}'\", ch);\n         reader.sess.span_diagnostic.span_bug_no_panic(span, &msg);\n-        return None;\n+        return (None, None);\n     };\n \n     // special help suggestion for \"directed\" double quotes\n-    if let Some(s) = peek_delimited(&reader.src[reader.src_index(pos)..], '\u201c', '\u201d') {\n-        let msg = format!(\n-            \"Unicode characters '\u201c' (Left Double Quotation Mark) and \\\n-             '\u201d' (Right Double Quotation Mark) look like '{}' ({}), but are not\",\n-            ascii_str, ascii_name\n-        );\n-        err.span_suggestion(\n-            Span::with_root_ctxt(\n-                pos,\n-                pos + Pos::from_usize('\u201c'.len_utf8() + s.len() + '\u201d'.len_utf8()),\n-            ),\n-            &msg,\n-            format!(\"\\\"{}\\\"\", s),\n-            Applicability::MaybeIncorrect,\n+    let sugg = if let Some(s) = peek_delimited(&reader.src[reader.src_index(pos)..], '\u201c', '\u201d') {\n+        let span = Span::with_root_ctxt(\n+            pos,\n+            pos + Pos::from_usize('\u201c'.len_utf8() + s.len() + '\u201d'.len_utf8()),\n         );\n+        Some(TokenSubstitution::DirectedQuotes {\n+            span,\n+            suggestion: format!(\"\\\"{s}\\\"\"),\n+            ascii_str,\n+            ascii_name,\n+        })\n     } else {\n-        let msg = format!(\n-            \"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n-            ch, u_name, ascii_str, ascii_name\n-        );\n-        err.span_suggestion(\n+        let suggestion = ascii_str.to_string().repeat(count);\n+        Some(TokenSubstitution::Other {\n             span,\n-            &msg,\n-            ascii_str.to_string().repeat(count),\n-            Applicability::MaybeIncorrect,\n-        );\n-    }\n-    token.clone()\n+            suggestion,\n+            ch: ch.to_string(),\n+            u_name,\n+            ascii_str,\n+            ascii_name,\n+        })\n+    };\n+    (token.clone(), sugg)\n }\n \n /// Extract string if found at current position with given delimiters"}, {"sha": "49eff41329c492f6160136f3fe2e20c68a04c8db", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -284,7 +284,7 @@ impl<'a> Parser<'a> {\n         self.sess.source_map().span_to_snippet(span)\n     }\n \n-    pub(super) fn expected_ident_found(&self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+    pub(super) fn expected_ident_found(&mut self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let valid_follow = &[\n             TokenKind::Eq,\n             TokenKind::Colon,\n@@ -324,7 +324,61 @@ impl<'a> Parser<'a> {\n             suggest_raw,\n             suggest_remove_comma,\n         };\n-        err.into_diagnostic(&self.sess.span_diagnostic)\n+        let mut err = err.into_diagnostic(&self.sess.span_diagnostic);\n+\n+        // if the token we have is a `<`\n+        // it *might* be a misplaced generic\n+        if self.token == token::Lt {\n+            // all keywords that could have generic applied\n+            let valid_prev_keywords =\n+                [kw::Fn, kw::Type, kw::Struct, kw::Enum, kw::Union, kw::Trait];\n+\n+            // If we've expected an identifier,\n+            // and the current token is a '<'\n+            // if the previous token is a valid keyword\n+            // that might use a generic, then suggest a correct\n+            // generic placement (later on)\n+            let maybe_keyword = self.prev_token.clone();\n+            if valid_prev_keywords.into_iter().any(|x| maybe_keyword.is_keyword(x)) {\n+                // if we have a valid keyword, attempt to parse generics\n+                // also obtain the keywords symbol\n+                match self.parse_generics() {\n+                    Ok(generic) => {\n+                        if let TokenKind::Ident(symbol, _) = maybe_keyword.kind {\n+                            let ident_name = symbol;\n+                            // at this point, we've found something like\n+                            // `fn <T>id`\n+                            // and current token should be Ident with the item name (i.e. the function name)\n+                            // if there is a `<` after the fn name, then don't show a suggestion, show help\n+\n+                            if !self.look_ahead(1, |t| *t == token::Lt) &&\n+                                let Ok(snippet) = self.sess.source_map().span_to_snippet(generic.span) {\n+                                    err.multipart_suggestion_verbose(\n+                                        format!(\"place the generic parameter name after the {ident_name} name\"),\n+                                        vec![\n+                                            (self.token.span.shrink_to_hi(), snippet),\n+                                            (generic.span, String::new())\n+                                        ],\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                } else {\n+                                    err.help(format!(\n+                                        \"place the generic parameter name after the {ident_name} name\"\n+                                    ));\n+                                }\n+                        }\n+                    }\n+                    Err(err) => {\n+                        // if there's an error parsing the generics,\n+                        // then don't do a misplaced generics suggestion\n+                        // and emit the expected ident error instead;\n+                        err.cancel();\n+                    }\n+                }\n+            }\n+        }\n+\n+        err\n     }\n \n     pub(super) fn expected_one_of_not_found("}, {"sha": "2fc8ce98af04d5f593d2aab779171e66a95a0620", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -5,6 +5,7 @@ use super::{\n     AttrWrapper, BlockMode, ClosureSpans, ForceCollect, Parser, PathStyle, Restrictions,\n     SemiColonMode, SeqSep, TokenExpectType, TokenType, TrailingToken,\n };\n+\n use crate::errors;\n use crate::maybe_recover_from_interpolated_ty_qpath;\n use core::mem;\n@@ -1017,7 +1018,7 @@ impl<'a> Parser<'a> {\n     fn error_unexpected_after_dot(&self) {\n         // FIXME Could factor this out into non_fatal_unexpected or something.\n         let actual = pprust::token_to_string(&self.token);\n-        self.struct_span_err(self.token.span, &format!(\"unexpected token: `{actual}`\")).emit();\n+        self.sess.emit_err(errors::UnexpectedTokenAfterDot { span: self.token.span, actual });\n     }\n \n     // We need an identifier or integer, but the next token is a float."}, {"sha": "fd46a1292a823d3fb367b6ba3b85f1a0e9f7cdb6", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 62, "deletions": 62, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -1,18 +1,8 @@\n-use crate::errors::{\n-    AmbiguousMissingKwForItemSub, AssociatedStaticItemNotAllowed, AsyncFnIn2015,\n-    BoundsNotAllowedOnTraitAliases, ConstGlobalCannotBeMutable, ConstLetMutuallyExclusive,\n-    DefaultNotFollowedByItem, DocCommentDoesNotDocumentAnything, EnumStructMutuallyExclusive,\n-    ExpectedTraitInTraitImplFoundType, ExternCrateNameWithDashes, ExternCrateNameWithDashesSugg,\n-    ExternItemCannotBeConst, HelpUseLatestEdition, MissingConstType, MissingForInTraitImpl,\n-    MissingKeywordForItemDefinition, MissingTraitInTraitImpl, SelfArgumentPointer,\n-    TraitAliasCannotBeAuto, TraitAliasCannotBeUnsafe, UnexpectedTokenAfterStructName,\n-    UseEmptyBlockNotSemi, VisibilityNotFollowedByItem,\n-};\n+use crate::errors;\n \n use super::diagnostics::{dummy_arg, ConsumeClosingDelim};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, FollowedByType, ForceCollect, Parser, PathStyle, TrailingToken};\n-use crate::errors::FnTypoWithImpl;\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n@@ -177,11 +167,11 @@ impl<'a> Parser<'a> {\n \n         // At this point, we have failed to parse an item.\n         if !matches!(vis.kind, VisibilityKind::Inherited) {\n-            self.sess.emit_err(VisibilityNotFollowedByItem { span: vis.span, vis });\n+            self.sess.emit_err(errors::VisibilityNotFollowedByItem { span: vis.span, vis });\n         }\n \n         if let Defaultness::Default(span) = def {\n-            self.sess.emit_err(DefaultNotFollowedByItem { span });\n+            self.sess.emit_err(errors::DefaultNotFollowedByItem { span });\n         }\n \n         if !attrs_allowed {\n@@ -403,7 +393,7 @@ impl<'a> Parser<'a> {\n \n         let err = if self.check(&token::OpenDelim(Delimiter::Brace)) {\n             // possible public struct definition where `struct` was forgotten\n-            Some(MissingKeywordForItemDefinition::Struct { span: sp, ident })\n+            Some(errors::MissingKeywordForItemDefinition::Struct { span: sp, ident })\n         } else if self.check(&token::OpenDelim(Delimiter::Parenthesis)) {\n             // possible public function or tuple struct definition where `fn`/`struct` was\n             // forgotten\n@@ -412,34 +402,36 @@ impl<'a> Parser<'a> {\n \n             self.consume_block(Delimiter::Parenthesis, ConsumeClosingDelim::Yes);\n \n-            let err = if self.check(&token::RArrow)\n-                || self.check(&token::OpenDelim(Delimiter::Brace))\n-            {\n-                self.eat_to_tokens(&[&token::OpenDelim(Delimiter::Brace)]);\n-                self.bump(); // `{`\n-                self.consume_block(Delimiter::Brace, ConsumeClosingDelim::Yes);\n-                if is_method {\n-                    MissingKeywordForItemDefinition::Method { span: sp, ident }\n-                } else {\n-                    MissingKeywordForItemDefinition::Function { span: sp, ident }\n-                }\n-            } else if self.check(&token::Semi) {\n-                MissingKeywordForItemDefinition::Struct { span: sp, ident }\n-            } else {\n-                MissingKeywordForItemDefinition::Ambiguous {\n-                    span: sp,\n-                    subdiag: if found_generics {\n-                        None\n-                    } else if let Ok(snippet) = self.span_to_snippet(ident_sp) {\n-                        Some(AmbiguousMissingKwForItemSub::SuggestMacro { span: full_sp, snippet })\n+            let err =\n+                if self.check(&token::RArrow) || self.check(&token::OpenDelim(Delimiter::Brace)) {\n+                    self.eat_to_tokens(&[&token::OpenDelim(Delimiter::Brace)]);\n+                    self.bump(); // `{`\n+                    self.consume_block(Delimiter::Brace, ConsumeClosingDelim::Yes);\n+                    if is_method {\n+                        errors::MissingKeywordForItemDefinition::Method { span: sp, ident }\n                     } else {\n-                        Some(AmbiguousMissingKwForItemSub::HelpMacro)\n-                    },\n-                }\n-            };\n+                        errors::MissingKeywordForItemDefinition::Function { span: sp, ident }\n+                    }\n+                } else if self.check(&token::Semi) {\n+                    errors::MissingKeywordForItemDefinition::Struct { span: sp, ident }\n+                } else {\n+                    errors::MissingKeywordForItemDefinition::Ambiguous {\n+                        span: sp,\n+                        subdiag: if found_generics {\n+                            None\n+                        } else if let Ok(snippet) = self.span_to_snippet(ident_sp) {\n+                            Some(errors::AmbiguousMissingKwForItemSub::SuggestMacro {\n+                                span: full_sp,\n+                                snippet,\n+                            })\n+                        } else {\n+                            Some(errors::AmbiguousMissingKwForItemSub::HelpMacro)\n+                        },\n+                    }\n+                };\n             Some(err)\n         } else if found_generics {\n-            Some(MissingKeywordForItemDefinition::Ambiguous { span: sp, subdiag: None })\n+            Some(errors::MissingKeywordForItemDefinition::Ambiguous { span: sp, subdiag: None })\n         } else {\n             None\n         };\n@@ -567,8 +559,10 @@ impl<'a> Parser<'a> {\n         let ty_first = if self.token.is_keyword(kw::For) && self.look_ahead(1, |t| t != &token::Lt)\n         {\n             let span = self.prev_token.span.between(self.token.span);\n-            self.sess\n-                .emit_err(MissingTraitInTraitImpl { span, for_span: span.to(self.token.span) });\n+            self.sess.emit_err(errors::MissingTraitInTraitImpl {\n+                span,\n+                for_span: span.to(self.token.span),\n+            });\n \n             P(Ty {\n                 kind: TyKind::Path(None, err_path(span)),\n@@ -602,16 +596,17 @@ impl<'a> Parser<'a> {\n             Some(ty_second) => {\n                 // impl Trait for Type\n                 if !has_for {\n-                    self.sess.emit_err(MissingForInTraitImpl { span: missing_for_span });\n+                    self.sess.emit_err(errors::MissingForInTraitImpl { span: missing_for_span });\n                 }\n \n                 let ty_first = ty_first.into_inner();\n                 let path = match ty_first.kind {\n                     // This notably includes paths passed through `ty` macro fragments (#46438).\n                     TyKind::Path(None, path) => path,\n                     _ => {\n-                        self.sess\n-                            .emit_err(ExpectedTraitInTraitImplFoundType { span: ty_first.span });\n+                        self.sess.emit_err(errors::ExpectedTraitInTraitImplFoundType {\n+                            span: ty_first.span,\n+                        });\n                         err_path(ty_first.span)\n                     }\n                 };\n@@ -655,7 +650,7 @@ impl<'a> Parser<'a> {\n \n         // Recover `impl Ty;` instead of `impl Ty {}`\n         if self.token == TokenKind::Semi {\n-            self.sess.emit_err(UseEmptyBlockNotSemi { span: self.token.span });\n+            self.sess.emit_err(errors::UseEmptyBlockNotSemi { span: self.token.span });\n             self.bump();\n             return Ok(vec![]);\n         }\n@@ -812,7 +807,7 @@ impl<'a> Parser<'a> {\n             // It's a trait alias.\n             if had_colon {\n                 let span = span_at_colon.to(span_before_eq);\n-                self.sess.emit_err(BoundsNotAllowedOnTraitAliases { span });\n+                self.sess.emit_err(errors::BoundsNotAllowedOnTraitAliases { span });\n             }\n \n             let bounds = self.parse_generic_bounds(None)?;\n@@ -821,10 +816,10 @@ impl<'a> Parser<'a> {\n \n             let whole_span = lo.to(self.prev_token.span);\n             if is_auto == IsAuto::Yes {\n-                self.sess.emit_err(TraitAliasCannotBeAuto { span: whole_span });\n+                self.sess.emit_err(errors::TraitAliasCannotBeAuto { span: whole_span });\n             }\n             if let Unsafe::Yes(_) = unsafety {\n-                self.sess.emit_err(TraitAliasCannotBeUnsafe { span: whole_span });\n+                self.sess.emit_err(errors::TraitAliasCannotBeUnsafe { span: whole_span });\n             }\n \n             self.sess.gated_spans.gate(sym::trait_alias, whole_span);\n@@ -870,7 +865,7 @@ impl<'a> Parser<'a> {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n                         ItemKind::Static(a, _, b) => {\n-                            self.sess.emit_err(AssociatedStaticItemNotAllowed { span });\n+                            self.sess.emit_err(errors::AssociatedStaticItemNotAllowed { span });\n                             AssocItemKind::Const(Defaultness::Final, a, b)\n                         }\n                         _ => return self.error_bad_item_kind(span, &kind, \"`trait`s or `impl`s\"),\n@@ -1069,9 +1064,9 @@ impl<'a> Parser<'a> {\n             write!(fixed_name, \"_{}\", part.name).unwrap();\n         }\n \n-        self.sess.emit_err(ExternCrateNameWithDashes {\n+        self.sess.emit_err(errors::ExternCrateNameWithDashes {\n             span: fixed_name_sp,\n-            sugg: ExternCrateNameWithDashesSugg { dashes },\n+            sugg: errors::ExternCrateNameWithDashesSugg { dashes },\n         });\n \n         Ok(Ident::from_str_and_span(&fixed_name, fixed_name_sp))\n@@ -1122,7 +1117,7 @@ impl<'a> Parser<'a> {\n                     Ok(kind) => kind,\n                     Err(kind) => match kind {\n                         ItemKind::Const(_, a, b) => {\n-                            self.sess.emit_err(ExternItemCannotBeConst {\n+                            self.sess.emit_err(errors::ExternItemCannotBeConst {\n                                 ident_span: ident.span,\n                                 const_span: span.with_hi(ident.span.lo()),\n                             });\n@@ -1173,10 +1168,10 @@ impl<'a> Parser<'a> {\n     fn recover_const_mut(&mut self, const_span: Span) {\n         if self.eat_keyword(kw::Mut) {\n             let span = self.prev_token.span;\n-            self.sess.emit_err(ConstGlobalCannotBeMutable { ident_span: span, const_span });\n+            self.sess.emit_err(errors::ConstGlobalCannotBeMutable { ident_span: span, const_span });\n         } else if self.eat_keyword(kw::Let) {\n             let span = self.prev_token.span;\n-            self.sess.emit_err(ConstLetMutuallyExclusive { span: const_span.to(span) });\n+            self.sess.emit_err(errors::ConstLetMutuallyExclusive { span: const_span.to(span) });\n         }\n     }\n \n@@ -1262,7 +1257,8 @@ impl<'a> Parser<'a> {\n \n         let span = self.prev_token.span.shrink_to_hi();\n         let err: DiagnosticBuilder<'_, ErrorGuaranteed> =\n-            MissingConstType { span, colon, kind }.into_diagnostic(&self.sess.span_diagnostic);\n+            errors::MissingConstType { span, colon, kind }\n+                .into_diagnostic(&self.sess.span_diagnostic);\n         err.stash(span, StashKey::ItemNoType);\n \n         // The user intended that the type be inferred,\n@@ -1274,7 +1270,7 @@ impl<'a> Parser<'a> {\n     fn parse_item_enum(&mut self) -> PResult<'a, ItemInfo> {\n         if self.token.is_keyword(kw::Struct) {\n             let span = self.prev_token.span.to(self.token.span);\n-            let err = EnumStructMutuallyExclusive { span };\n+            let err = errors::EnumStructMutuallyExclusive { span };\n             if self.look_ahead(1, |t| t.is_ident()) {\n                 self.bump();\n                 self.sess.emit_err(err);\n@@ -1289,7 +1285,7 @@ impl<'a> Parser<'a> {\n \n         // Possibly recover `enum Foo;` instead of `enum Foo {}`\n         let (variants, _) = if self.token == TokenKind::Semi {\n-            self.sess.emit_err(UseEmptyBlockNotSemi { span: self.token.span });\n+            self.sess.emit_err(errors::UseEmptyBlockNotSemi { span: self.token.span });\n             self.bump();\n             (vec![], false)\n         } else {\n@@ -1415,7 +1411,8 @@ impl<'a> Parser<'a> {\n             self.expect_semi()?;\n             body\n         } else {\n-            let err = UnexpectedTokenAfterStructName::new(self.token.span, self.token.clone());\n+            let err =\n+                errors::UnexpectedTokenAfterStructName::new(self.token.span, self.token.clone());\n             return Err(err.into_diagnostic(&self.sess.span_diagnostic));\n         };\n \n@@ -1593,7 +1590,7 @@ impl<'a> Parser<'a> {\n             token::CloseDelim(Delimiter::Brace) => {}\n             token::DocComment(..) => {\n                 let previous_span = self.prev_token.span;\n-                let mut err = DocCommentDoesNotDocumentAnything {\n+                let mut err = errors::DocCommentDoesNotDocumentAnything {\n                     span: self.token.span,\n                     missing_comma: None,\n                 };\n@@ -2103,7 +2100,7 @@ impl<'a> Parser<'a> {\n                 // If we see `for Ty ...` then user probably meant `impl` item.\n                 if self.token.is_keyword(kw::For) {\n                     old_err.cancel();\n-                    return Err(self.sess.create_err(FnTypoWithImpl { fn_span }));\n+                    return Err(self.sess.create_err(errors::FnTypoWithImpl { fn_span }));\n                 } else {\n                     return Err(old_err);\n                 }\n@@ -2248,7 +2245,10 @@ impl<'a> Parser<'a> {\n \n         if let Async::Yes { span, .. } = asyncness {\n             if span.is_rust_2015() {\n-                self.sess.emit_err(AsyncFnIn2015 { span, help: HelpUseLatestEdition::new() });\n+                self.sess.emit_err(errors::AsyncFnIn2015 {\n+                    span,\n+                    help: errors::HelpUseLatestEdition::new(),\n+                });\n             }\n         }\n \n@@ -2501,7 +2501,7 @@ impl<'a> Parser<'a> {\n         };\n         // Recover for the grammar `*self`, `*const self`, and `*mut self`.\n         let recover_self_ptr = |this: &mut Self| {\n-            self.sess.emit_err(SelfArgumentPointer { span: this.token.span });\n+            self.sess.emit_err(errors::SelfArgumentPointer { span: this.token.span });\n \n             Ok((SelfKind::Value(Mutability::Not), expect_self_ident(this), this.prev_token.span))\n         };"}, {"sha": "34a4fd02ea691cd1c612c2e6b01ec83e4f2145dd", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -847,9 +847,7 @@ impl<'a> Parser<'a> {\n                 0,\n                 ParseError {\n                     description: \"expected format parameter to occur after `:`\".to_owned(),\n-                    note: Some(\n-                        format!(\"`?` comes after `:`, try `{}:{}` instead\", word, \"?\").to_owned(),\n-                    ),\n+                    note: Some(format!(\"`?` comes after `:`, try `{}:{}` instead\", word, \"?\")),\n                     label: \"expected `?` to occur after `:`\".to_owned(),\n                     span: pos.to(pos),\n                     secondary_label: None,"}, {"sha": "225095948af883512ce5b49c2283121a992e8718", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -156,6 +156,7 @@ impl CheckAttrVisitor<'_> {\n                 | sym::rustc_dirty\n                 | sym::rustc_if_this_changed\n                 | sym::rustc_then_this_would_need => self.check_rustc_dirty_clean(&attr),\n+                sym::rustc_coinductive => self.check_rustc_coinductive(&attr, span, target),\n                 sym::cmse_nonsecure_entry => {\n                     self.check_cmse_nonsecure_entry(hir_id, attr, span, target)\n                 }\n@@ -1608,6 +1609,20 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks if the `#[rustc_coinductive]` attribute is applied to a trait.\n+    fn check_rustc_coinductive(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n+        match target {\n+            Target::Trait => true,\n+            _ => {\n+                self.tcx.sess.emit_err(errors::AttrShouldBeAppliedToTrait {\n+                    attr_span: attr.span,\n+                    defn_span: span,\n+                });\n+                false\n+            }\n+        }\n+    }\n+\n     /// Checks if `#[link_section]` is applied to a function or static.\n     fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {"}, {"sha": "c380b3d1e39f4bc649e2fb7459cd9171643c183c", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -259,7 +259,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     /// for discussion).\n     fn should_ignore_item(&mut self, def_id: DefId) -> bool {\n         if let Some(impl_of) = self.tcx.impl_of_method(def_id) {\n-            if !self.tcx.has_attr(impl_of, sym::automatically_derived) {\n+            if !self.tcx.is_automatically_derived(impl_of) {\n                 return false;\n             }\n "}, {"sha": "873c40e8cb6121e22191e448f9daa8b238fa4160", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -537,7 +537,7 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n         // then it would be \"stable\" at least for the impl.\n         // We gate usages of it using `feature(const_trait_impl)` anyways\n         // so there is no unstable leakage\n-        if self.tcx.is_builtin_derive(def_id.to_def_id()) {\n+        if self.tcx.is_automatically_derived(def_id.to_def_id()) {\n             return;\n         }\n "}, {"sha": "9cff62e85146ee20dba36f84c2630fc798a704bc", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n-use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n+use rustc_middle::ty::{ir::TypeVisitor, TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -174,7 +174,7 @@ where\n     }\n }\n \n-impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>\n+impl<'tcx, V> TypeVisitor<TyCtxt<'tcx>> for DefIdVisitorSkeleton<'_, 'tcx, V>\n where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {"}, {"sha": "49309db564ea8a361edbc80287d3d4a68a1ea345", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -124,7 +124,7 @@ impl QueryContext for QueryCtxt<'_> {\n             };\n \n             // Use the `ImplicitCtxt` while we execute the query.\n-            tls::enter_context(&new_icx, |_| {\n+            tls::enter_context(&new_icx, || {\n                 rustc_data_structures::stack::ensure_sufficient_stack(compute)\n             })\n         })"}, {"sha": "c9dd75e4d554b3ebb492161897d2df175b7e081c", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -5,7 +5,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sharded;\n #[cfg(parallel_compiler)]\n use rustc_data_structures::sharded::Sharded;\n-#[cfg(not(parallel_compiler))]\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::sync::WorkerLocal;\n use rustc_index::vec::{Idx, IndexVec};\n@@ -117,6 +116,52 @@ where\n     }\n }\n \n+pub struct SingleCacheSelector;\n+\n+impl<'tcx, V: 'tcx> CacheSelector<'tcx, V> for SingleCacheSelector {\n+    type Cache = SingleCache<V>\n+    where\n+        V: Copy;\n+    type ArenaCache = ArenaCache<'tcx, (), V>;\n+}\n+\n+pub struct SingleCache<V> {\n+    cache: Lock<Option<(V, DepNodeIndex)>>,\n+}\n+\n+impl<V> Default for SingleCache<V> {\n+    fn default() -> Self {\n+        SingleCache { cache: Lock::new(None) }\n+    }\n+}\n+\n+impl<V: Copy + Debug> QueryStorage for SingleCache<V> {\n+    type Value = V;\n+    type Stored = V;\n+}\n+\n+impl<V> QueryCache for SingleCache<V>\n+where\n+    V: Copy + Debug,\n+{\n+    type Key = ();\n+\n+    #[inline(always)]\n+    fn lookup(&self, _key: &()) -> Option<(V, DepNodeIndex)> {\n+        *self.cache.lock()\n+    }\n+\n+    #[inline]\n+    fn complete(&self, _key: (), value: V, index: DepNodeIndex) -> Self::Stored {\n+        *self.cache.lock() = Some((value.clone(), index));\n+        value\n+    }\n+\n+    fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex)) {\n+        self.cache.lock().as_ref().map(|value| f(&(), &value.0, value.1));\n+    }\n+}\n+\n pub struct ArenaCache<'tcx, K, V> {\n     arena: WorkerLocal<TypedArena<(V, DepNodeIndex)>>,\n     #[cfg(parallel_compiler)]"}, {"sha": "6c0ee2bc2f6f06e241976bfea59d647c0443dcbd", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -8,7 +8,8 @@ pub use self::job::{print_query_stack, QueryInfo, QueryJob, QueryJobId, QueryJob\n \n mod caches;\n pub use self::caches::{\n-    CacheSelector, DefaultCacheSelector, QueryCache, QueryStorage, VecCacheSelector,\n+    CacheSelector, DefaultCacheSelector, QueryCache, QueryStorage, SingleCacheSelector,\n+    VecCacheSelector,\n };\n \n mod config;"}, {"sha": "d4935b52b10442a45f00fc9452efbe57ccb0d112", "filename": "compiler/rustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2FCargo.toml?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -7,6 +7,7 @@ edition = \"2021\"\n \n [dependencies]\n bitflags = \"1.2.1\"\n+pulldown-cmark = { version = \"0.9.2\", default-features = false }\n rustc_arena = { path = \"../rustc_arena\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }"}, {"sha": "6d3518d53f7790b6c4e2043c8a6c50212e066575", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -65,7 +65,7 @@ impl<'a, Id: Into<DefId>> ToNameBinding<'a> for (Res, ty::Visibility<Id>, Span,\n     }\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;\n     /// otherwise, reports an error.\n     pub(crate) fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)\n@@ -95,7 +95,7 @@ impl<'a> Resolver<'a> {\n     /// Reachable macros with block module parents exist due to `#[macro_export] macro_rules!`,\n     /// but they cannot use def-site hygiene, so the assumption holds\n     /// (<https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508>).\n-    pub fn get_nearest_non_block_module(&mut self, mut def_id: DefId) -> Module<'a> {\n+    pub(crate) fn get_nearest_non_block_module(&mut self, mut def_id: DefId) -> Module<'a> {\n         loop {\n             match self.get_module(def_id) {\n                 Some(module) => return module,\n@@ -104,7 +104,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    pub fn expect_module(&mut self, def_id: DefId) -> Module<'a> {\n+    pub(crate) fn expect_module(&mut self, def_id: DefId) -> Module<'a> {\n         self.get_module(def_id).expect(\"argument `DefId` is not a module\")\n     }\n \n@@ -214,18 +214,18 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-struct BuildReducedGraphVisitor<'a, 'b> {\n-    r: &'b mut Resolver<'a>,\n+struct BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n+    r: &'b mut Resolver<'a, 'tcx>,\n     parent_scope: ParentScope<'a>,\n }\n \n-impl<'a> AsMut<Resolver<'a>> for BuildReducedGraphVisitor<'a, '_> {\n-    fn as_mut(&mut self) -> &mut Resolver<'a> {\n+impl<'a, 'tcx> AsMut<Resolver<'a, 'tcx>> for BuildReducedGraphVisitor<'a, '_, 'tcx> {\n+    fn as_mut(&mut self) -> &mut Resolver<'a, 'tcx> {\n         self.r\n     }\n }\n \n-impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n+impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     fn resolve_visibility(&mut self, vis: &ast::Visibility) -> ty::Visibility {\n         self.try_resolve_visibility(vis, true).unwrap_or_else(|err| {\n             self.r.report_vis_error(err);\n@@ -1251,6 +1251,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             };\n             let binding = (res, vis, span, expansion).to_name_binding(self.r.arenas);\n             self.r.set_binding_parent_module(binding, parent_scope.module);\n+            self.r.all_macro_rules.insert(ident.name, res);\n             if is_macro_export {\n                 let import = self.r.arenas.alloc_import(Import {\n                     kind: ImportKind::MacroExport,\n@@ -1314,7 +1315,7 @@ macro_rules! method {\n     };\n }\n \n-impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n+impl<'a, 'b, 'tcx> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     method!(visit_expr: ast::Expr, ast::ExprKind::MacCall, walk_expr);\n     method!(visit_pat: ast::Pat, ast::PatKind::MacCall, walk_pat);\n     method!(visit_ty: ast::Ty, ast::TyKind::MacCall, walk_ty);"}, {"sha": "294fd0a736f37765316cfa40ba85a68aabc211a4", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -49,16 +49,16 @@ impl<'a> UnusedImport<'a> {\n     }\n }\n \n-struct UnusedImportCheckVisitor<'a, 'b> {\n-    r: &'a mut Resolver<'b>,\n+struct UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n+    r: &'a mut Resolver<'b, 'tcx>,\n     /// All the (so far) unused imports, grouped path list\n     unused_imports: FxIndexMap<ast::NodeId, UnusedImport<'a>>,\n     base_use_tree: Option<&'a ast::UseTree>,\n     base_id: ast::NodeId,\n     item_span: Span,\n }\n \n-impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n+impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     // We have information about whether `use` (import) items are actually\n     // used now. If an import is not used at all, we signal a lint error.\n     fn check_import(&mut self, id: ast::NodeId) {\n@@ -94,7 +94,7 @@ impl<'a, 'b> UnusedImportCheckVisitor<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b> {\n+impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     fn visit_item(&mut self, item: &'a ast::Item) {\n         self.item_span = item.span_with_attributes();\n \n@@ -222,7 +222,7 @@ fn calc_unused_spans(\n     }\n }\n \n-impl Resolver<'_> {\n+impl Resolver<'_, '_> {\n     pub(crate) fn check_unused(&mut self, krate: &ast::Crate) {\n         for import in self.potentially_unused_imports.iter() {\n             match import.kind {"}, {"sha": "e7ff236f84616e49af975ade2e83eccd6d669d05", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -9,7 +9,7 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n pub(crate) fn collect_definitions(\n-    resolver: &mut Resolver<'_>,\n+    resolver: &mut Resolver<'_, '_>,\n     fragment: &AstFragment,\n     expansion: LocalExpnId,\n ) {\n@@ -18,14 +18,14 @@ pub(crate) fn collect_definitions(\n }\n \n /// Creates `DefId`s for nodes in the AST.\n-struct DefCollector<'a, 'b> {\n-    resolver: &'a mut Resolver<'b>,\n+struct DefCollector<'a, 'b, 'tcx> {\n+    resolver: &'a mut Resolver<'b, 'tcx>,\n     parent_def: LocalDefId,\n     impl_trait_context: ImplTraitContext,\n     expansion: LocalExpnId,\n }\n \n-impl<'a, 'b> DefCollector<'a, 'b> {\n+impl<'a, 'b, 'tcx> DefCollector<'a, 'b, 'tcx> {\n     fn create_def(&mut self, node_id: NodeId, data: DefPathData, span: Span) -> LocalDefId {\n         let parent_def = self.parent_def;\n         debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n@@ -81,7 +81,7 @@ impl<'a, 'b> DefCollector<'a, 'b> {\n     }\n }\n \n-impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n+impl<'a, 'b, 'tcx> visit::Visitor<'a> for DefCollector<'a, 'b, 'tcx> {\n     fn visit_item(&mut self, i: &'a Item) {\n         debug!(\"visit_item: {:?}\", i);\n "}, {"sha": "934d60589d4e21def520fb4718e2b7c74995b20b", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d", "patch": "@@ -114,7 +114,7 @@ fn reduce_impl_span_to_impl_keyword(sm: &SourceMap, impl_span: Span) -> Span {\n     sm.span_until_whitespace(impl_span)\n }\n \n-impl<'a> Resolver<'a> {\n+impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     pub(crate) fn report_errors(&mut self, krate: &Crate) {\n         self.report_with_use_injections(krate);\n \n@@ -1883,7 +1883,7 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-impl<'a, 'b> ImportResolver<'a, 'b> {\n+impl<'a, 'b, 'tcx> ImportResolver<'a, 'b, 'tcx> {\n     /// Adds suggestions for a path that cannot be resolved.\n     pub(crate) fn make_path_suggestion(\n         &mut self,"}, {"sha": "0079c3e526d62a65f17621d2c4487fff57a5a189", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "61a48b109b22a0f213f0ffabc061f7456498e495", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "da3e5095e531d3afb183f8a79d5896e5e23bc196", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "d3bcbbabf55e541a04cdc39cd132e628dd0fee24", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 196, "deletions": 25, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "a3195a64366893a75120d1a2ca7c629f0aa990d1", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "3db3b76fc26a296d2e63b60e31c20fbe89e29f38", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 50, "deletions": 114, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "1c220a81792da4e1e948d9c5937c963b5fe27fae", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "a967f4b940c80901b4effc2426814567384bdbb3", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "added", "additions": 369, "deletions": 0, "changes": 369, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "e8bc19f88e3e354424605eb25510161c1d62facb", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "c851145440b863a55e957ba804af5d79722c0fa4", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "81f7f6d72ae4a91cd26220583f6f05bdbfe62c82", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 95, "deletions": 6, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "e608b9fe0b3fee4dd8b7a2b329995fe9d6848a23", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "ed03b22c61fd6a2eb20675ee7de0f799322e53b5", "filename": "compiler/rustc_span/src/lev_distance/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "c600298c51a08d5773e852001c94bb1f6cf56d48", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "56835a2466a5222c0ff91b9267fb260e06a42023", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "710f38264036ce71ddc1ae8b18ec77ba3aa181ed", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "c58b6a24ab58fda936f64c507c349b2d368d7a0e", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "8d2e92cc76c6f2cb581cf6241475725b18a418e4", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "b84783c0a407b91bcf756752720bbbb5c57e7843", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "a24e0119f25e9de250eca6beabf26a99a613d40a", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu_ilp32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "437fd601580309e55d7663eb1c84f20e25f95b93", "filename": "compiler/rustc_target/src/spec/aarch64_kmc_solid_asp3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_kmc_solid_asp3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_kmc_solid_asp3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_kmc_solid_asp3.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "071b727b35c56b2a10e0a26d4a25c7e7e2e0398e", "filename": "compiler/rustc_target/src/spec/aarch64_linux_android.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_linux_android.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "e271bdc8a015bc6339c18704b7a7532095b95894", "filename": "compiler/rustc_target/src/spec/aarch64_nintendo_switch_freestanding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_nintendo_switch_freestanding.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "cf1d7ca1158d50eedd4441f1758a64e16954097b", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_gnullvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "56b76bc7ada9aa709326c6e99138dc83005f9d48", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "84fa9814bbeab7d9d4221207a28ab0fdb56fdac6", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_freebsd.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}, {"sha": "a5683fa7348a75752a0b72a83ff86955aa45a25a", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af0457b79ec698aa06e547b39b88d1e5b4e84d/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_fuchsia.rs?ref=52af0457b79ec698aa06e547b39b88d1e5b4e84d"}]}