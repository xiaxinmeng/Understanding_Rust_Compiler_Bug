{"sha": "63d434a36334c10851e72172484c32abf98533c2", "node_id": "C_kwDOAAsO6NoAKDYzZDQzNGEzNjMzNGMxMDg1MWU3MjE3MjQ4NGMzMmFiZjk4NTMzYzI", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T21:26:59Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T22:05:41Z"}, "message": "Remove a Clean impl for a tuple (2)", "tree": {"sha": "5cb560dab37a70baff3644e455385b33066ab043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb560dab37a70baff3644e455385b33066ab043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63d434a36334c10851e72172484c32abf98533c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63d434a36334c10851e72172484c32abf98533c2", "html_url": "https://github.com/rust-lang/rust/commit/63d434a36334c10851e72172484c32abf98533c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63d434a36334c10851e72172484c32abf98533c2/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fbdc79ae66185b6f32289acd43e48c98d270a05", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbdc79ae66185b6f32289acd43e48c98d270a05", "html_url": "https://github.com/rust-lang/rust/commit/2fbdc79ae66185b6f32289acd43e48c98d270a05"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "54e4cf02232a0ad1a6d216b534ce6e902f472322", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/63d434a36334c10851e72172484c32abf98533c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d434a36334c10851e72172484c32abf98533c2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=63d434a36334c10851e72172484c32abf98533c2", "patch": "@@ -138,36 +138,37 @@ impl Clean<Path> for ty::TraitRef<'tcx> {\n     }\n }\n \n-impl Clean<GenericBound> for (ty::PolyTraitRef<'_>, &[TypeBinding]) {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> GenericBound {\n-        let (poly_trait_ref, bindings) = *self;\n-        let poly_trait_ref = poly_trait_ref.lift_to_tcx(cx.tcx).unwrap();\n-\n-        // collect any late bound regions\n-        let late_bound_regions: Vec<_> = cx\n-            .tcx\n-            .collect_referenced_late_bound_regions(&poly_trait_ref)\n-            .into_iter()\n-            .filter_map(|br| match br {\n-                ty::BrNamed(_, name) => Some(GenericParamDef {\n-                    name,\n-                    kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n-                }),\n-                _ => None,\n-            })\n-            .collect();\n+fn clean_poly_trait_ref_with_bindings(\n+    cx: &mut DocContext<'_>,\n+    poly_trait_ref: ty::PolyTraitRef<'_>,\n+    bindings: &[TypeBinding],\n+) -> GenericBound {\n+    let poly_trait_ref = poly_trait_ref.lift_to_tcx(cx.tcx).unwrap();\n+\n+    // collect any late bound regions\n+    let late_bound_regions: Vec<_> = cx\n+        .tcx\n+        .collect_referenced_late_bound_regions(&poly_trait_ref)\n+        .into_iter()\n+        .filter_map(|br| match br {\n+            ty::BrNamed(_, name) => Some(GenericParamDef {\n+                name,\n+                kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n+            }),\n+            _ => None,\n+        })\n+        .collect();\n \n-        let trait_ = clean_trait_ref_with_bindings(cx, poly_trait_ref.skip_binder(), bindings);\n-        GenericBound::TraitBound(\n-            PolyTrait { trait_, generic_params: late_bound_regions },\n-            hir::TraitBoundModifier::None,\n-        )\n-    }\n+    let trait_ = clean_trait_ref_with_bindings(cx, poly_trait_ref.skip_binder(), bindings);\n+    GenericBound::TraitBound(\n+        PolyTrait { trait_, generic_params: late_bound_regions },\n+        hir::TraitBoundModifier::None,\n+    )\n }\n \n impl<'tcx> Clean<GenericBound> for ty::PolyTraitRef<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> GenericBound {\n-        (*self, &[][..]).clean(cx)\n+        clean_poly_trait_ref_with_bindings(cx, *self, &[])\n     }\n }\n \n@@ -1513,7 +1514,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                             }\n                         }\n \n-                        let bounds: Vec<_> = bounds\n+                        let bindings: Vec<_> = bounds\n                             .iter()\n                             .filter_map(|bound| {\n                                 if let ty::PredicateKind::Projection(proj) =\n@@ -1541,7 +1542,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                             })\n                             .collect();\n \n-                        Some((trait_ref, &bounds[..]).clean(cx))\n+                        Some(clean_poly_trait_ref_with_bindings(cx, trait_ref, &bindings))\n                     })\n                     .collect::<Vec<_>>();\n                 bounds.extend(regions);"}]}