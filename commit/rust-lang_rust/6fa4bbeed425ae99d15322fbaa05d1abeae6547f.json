{"sha": "6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYTRiYmVlZDQyNWFlOTlkMTUzMjJmYmFhMDVkMWFiZWFlNjU0N2Y=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-02T00:23:04Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-12T00:31:05Z"}, "message": "std: Move rand to librand.\n\nThis functionality is not super-core and so doesn't need to be included\nin std. It's possible that std may need rand (it does a little bit now,\nfor io::test) in which case the functionality required could be moved to\na secret hidden module and reexposed by librand.\n\nUnfortunately, using #[deprecated] here is hard: there's too much to\nmock to make it feasible, since we have to ensure that programs still\ntypecheck to reach the linting phase.", "tree": {"sha": "17f9edde3db9c624e476ac2f6c585792ddb1890b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17f9edde3db9c624e476ac2f6c585792ddb1890b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "html_url": "https://github.com/rust-lang/rust/commit/6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74bfa7108a62c053fdeae2bb093f8035e19e2ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/74bfa7108a62c053fdeae2bb093f8035e19e2ef2", "html_url": "https://github.com/rust-lang/rust/commit/74bfa7108a62c053fdeae2bb093f8035e19e2ef2"}], "stats": {"total": 359, "additions": 161, "deletions": 198}, "files": [{"sha": "e4b56696b39e686514958d3e396265c68a1b7704", "filename": "mk/crates.mk", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -50,14 +50,14 @@\n ################################################################################\n \n TARGET_CRATES := std extra green rustuv native flate arena glob term semver \\\n-                 uuid serialize sync getopts collections num test time\n+                 uuid serialize sync getopts collections num test time rand\n HOST_CRATES := syntax rustc rustdoc fourcc hexfloat\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_std := native:rustrt native:compiler-rt\n-DEPS_extra := std term sync serialize getopts collections time\n-DEPS_green := std native:context_switch\n+DEPS_extra := std term sync serialize getopts collections time rand\n+DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n DEPS_syntax := std term serialize collections\n@@ -71,15 +71,16 @@ DEPS_glob := std\n DEPS_serialize := std collections\n DEPS_term := std collections\n DEPS_semver := std\n-DEPS_uuid := std serialize\n+DEPS_uuid := std serialize rand\n DEPS_sync := std\n DEPS_getopts := std\n-DEPS_collections := std\n+DEPS_collections := std rand\n DEPS_fourcc := syntax std\n DEPS_hexfloat := syntax std\n-DEPS_num := std\n+DEPS_num := std rand\n DEPS_test := std extra collections getopts serialize term\n DEPS_time := std serialize\n+DEPS_rand := std\n \n TOOL_DEPS_compiletest := test green rustuv getopts\n TOOL_DEPS_rustdoc := rustdoc native"}, {"sha": "762f9565b7802e41a93ca3e693d96ea825fb03c2", "filename": "src/etc/ziggurat_tables.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Fetc%2Fziggurat_tables.py", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Fetc%2Fziggurat_tables.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fziggurat_tables.py?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -11,7 +11,7 @@\n # except according to those terms.\n \n # This creates the tables used for distributions implemented using the\n-# ziggurat algorithm in `std::rand::distributions;`. They are\n+# ziggurat algorithm in `rand::distributions;`. They are\n # (basically) the tables as used in the ZIGNOR variant (Doornik 2005).\n # They are changed rarely, so the generated file should be checked in\n # to git."}, {"sha": "369828d59696f1cfd2952cafe8ab0881d729fd10", "filename": "src/librand/distributions/exponential.rs", "status": "renamed", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -10,9 +10,9 @@\n \n //! The exponential distribution.\n \n-use num::Float;\n-use rand::{Rng, Rand};\n-use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n+use std::num::Float;\n+use {Rng, Rand};\n+use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n \n /// A wrapper around an `f64` to generate Exp(1) random numbers.\n ///\n@@ -58,8 +58,7 @@ impl Rand for Exp1 {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{Exp, IndependentSample};\n+/// use rand::distributions::{Exp, IndependentSample};\n ///\n /// let exp = Exp::new(2.0);\n /// let v = exp.ind_sample(&mut rand::task_rng());\n@@ -91,10 +90,9 @@ impl IndependentSample<f64> for Exp {\n \n #[cfg(test)]\n mod test {\n-    use rand::distributions::*;\n-    use prelude::*;\n-    use rand::*;\n-    use super::*;\n+    use distributions::{Sample, IndependentSample};\n+    use {Rng, task_rng};\n+    use super::Exp;\n \n     #[test]\n     fn test_exp() {\n@@ -121,11 +119,10 @@ mod test {\n mod bench {\n     extern crate test;\n     use self::test::BenchHarness;\n-    use mem::size_of;\n-    use prelude::*;\n-    use rand::{XorShiftRng, RAND_BENCH_N};\n-    use super::*;\n-    use rand::distributions::*;\n+    use std::mem::size_of;\n+    use {XorShiftRng, RAND_BENCH_N};\n+    use super::Exp;\n+    use distributions::Sample;\n \n     #[bench]\n     fn rand_exp(bh: &mut BenchHarness) {", "previous_filename": "src/libstd/rand/distributions/exponential.rs"}, {"sha": "029333cd78894cafe6e322e572e5b90def413f0e", "filename": "src/librand/distributions/gamma.rs", "status": "renamed", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -10,17 +10,17 @@\n \n //! The Gamma and derived distributions.\n \n-use num::Float;\n-use num;\n-use rand::{Rng, Open01};\n+use std::num::Float;\n+use std::num;\n+use {Rng, Open01};\n use super::normal::StandardNormal;\n use super::{IndependentSample, Sample, Exp};\n \n /// The Gamma distribution `Gamma(shape, scale)` distribution.\n ///\n /// The density function of this distribution is\n ///\n-/// ```ignore\n+/// ```notrust\n /// f(x) =  x^(k - 1) * exp(-x / \u03b8) / (\u0393(k) * \u03b8^k)\n /// ```\n ///\n@@ -35,8 +35,7 @@ use super::{IndependentSample, Sample, Exp};\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{IndependentSample, Gamma};\n+/// use rand::distributions::{IndependentSample, Gamma};\n ///\n /// let gamma = Gamma::new(2.0, 5.0);\n /// let v = gamma.ind_sample(&mut rand::task_rng());\n@@ -179,8 +178,7 @@ impl IndependentSample<f64> for GammaLargeShape {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{ChiSquared, IndependentSample};\n+/// use rand::distributions::{ChiSquared, IndependentSample};\n ///\n /// let chi = ChiSquared::new(11.0);\n /// let v = chi.ind_sample(&mut rand::task_rng());\n@@ -231,8 +229,7 @@ impl IndependentSample<f64> for ChiSquared {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{FisherF, IndependentSample};\n+/// use rand::distributions::{FisherF, IndependentSample};\n ///\n /// let f = FisherF::new(2.0, 32.0);\n /// let v = f.ind_sample(&mut rand::task_rng());\n@@ -275,8 +272,7 @@ impl IndependentSample<f64> for FisherF {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{StudentT, IndependentSample};\n+/// use rand::distributions::{StudentT, IndependentSample};\n ///\n /// let t = StudentT::new(11.0);\n /// let v = t.ind_sample(&mut rand::task_rng());\n@@ -310,10 +306,9 @@ impl IndependentSample<f64> for StudentT {\n \n #[cfg(test)]\n mod test {\n-    use rand::distributions::*;\n-    use prelude::*;\n-    use rand::*;\n-    use super::*;\n+    use distributions::{Sample, IndependentSample};\n+    use {Rng, task_rng};\n+    use super::{ChiSquared, StudentT, FisherF};\n \n     #[test]\n     fn test_chi_squared_one() {\n@@ -344,7 +339,7 @@ mod test {\n     }\n     #[test]\n     #[should_fail]\n-    fn test_log_normal_invalid_dof() {\n+    fn test_chi_squared_invalid_dof() {\n         ChiSquared::new(-1.0);\n     }\n \n@@ -373,11 +368,10 @@ mod test {\n mod bench {\n     extern crate test;\n     use self::test::BenchHarness;\n-    use mem::size_of;\n-    use prelude::*;\n-    use rand::distributions::IndependentSample;\n-    use rand::{StdRng, RAND_BENCH_N};\n-    use super::*;\n+    use std::mem::size_of;\n+    use distributions::IndependentSample;\n+    use {StdRng, RAND_BENCH_N};\n+    use super::Gamma;\n \n \n     #[bench]", "previous_filename": "src/libstd/rand/distributions/gamma.rs"}, {"sha": "22a09b152c7f5e01794d2350648a3b45a3551fe1", "filename": "src/librand/distributions/mod.rs", "status": "renamed", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -20,14 +20,9 @@ that do not need to record state.\n \n */\n \n-use container::Container;\n-use iter::{range, Iterator};\n-use option::{Some, None};\n-use num;\n-use num::CheckedAdd;\n-use rand::{Rng, Rand};\n-use clone::Clone;\n-use vec::MutableVector;\n+use std::num;\n+use std::num::CheckedAdd;\n+use {Rng, Rand};\n \n pub use self::range::Range;\n pub use self::gamma::{Gamma, ChiSquared, FisherF, StudentT};\n@@ -94,8 +89,7 @@ pub struct Weighted<T> {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{Weighted, WeightedChoice, IndependentSample};\n+/// use rand::distributions::{Weighted, WeightedChoice, IndependentSample};\n ///\n /// let wc = WeightedChoice::new(~[Weighted { weight: 2, item: 'a' },\n ///                                Weighted { weight: 4, item: 'b' },\n@@ -253,9 +247,8 @@ fn ziggurat<R:Rng>(\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use rand::*;\n-    use super::*;\n+    use {task_rng, Rng, Rand};\n+    use super::{RandSample, WeightedChoice, Weighted, Sample, IndependentSample};\n \n     #[deriving(Eq, Show)]\n     struct ConstRand(uint);", "previous_filename": "src/libstd/rand/distributions/mod.rs"}, {"sha": "4c9567efc6e8885db9c3df8e45693b5a78ef0045", "filename": "src/librand/distributions/normal.rs", "status": "renamed", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -10,9 +10,9 @@\n \n //! The normal and derived distributions.\n \n-use num::Float;\n-use rand::{Rng, Rand, Open01};\n-use rand::distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n+use std::num::Float;\n+use {Rng, Rand, Open01};\n+use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n \n /// A wrapper around an `f64` to generate N(0, 1) random numbers\n /// (a.k.a.  a standard normal, or Gaussian).\n@@ -74,8 +74,7 @@ impl Rand for StandardNormal {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{Normal, IndependentSample};\n+/// use rand::distributions::{Normal, IndependentSample};\n ///\n /// // mean 2, standard deviation 3\n /// let normal = Normal::new(2.0, 3.0);\n@@ -117,8 +116,7 @@ impl IndependentSample<f64> for Normal {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{LogNormal, IndependentSample};\n+/// use rand::distributions::{LogNormal, IndependentSample};\n ///\n /// // mean 2, standard deviation 3\n /// let log_normal = LogNormal::new(2.0, 3.0);\n@@ -148,10 +146,9 @@ impl IndependentSample<f64> for LogNormal {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use rand::*;\n-    use super::*;\n-    use rand::distributions::*;\n+    use distributions::{Sample, IndependentSample};\n+    use {Rng, task_rng};\n+    use super::{Normal, LogNormal};\n \n     #[test]\n     fn test_normal() {\n@@ -189,11 +186,10 @@ mod tests {\n mod bench {\n     extern crate test;\n     use self::test::BenchHarness;\n-    use mem::size_of;\n-    use prelude::*;\n-    use rand::{XorShiftRng, RAND_BENCH_N};\n-    use rand::distributions::*;\n-    use super::*;\n+    use std::mem::size_of;\n+    use {XorShiftRng, RAND_BENCH_N};\n+    use distributions::{Sample};\n+    use super::Normal;\n \n     #[bench]\n     fn rand_normal(bh: &mut BenchHarness) {", "previous_filename": "src/libstd/rand/distributions/normal.rs"}, {"sha": "8256a37f2ecdda86ba3ec88419b62a225389f395", "filename": "src/librand/distributions/range.rs", "status": "renamed", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -12,10 +12,9 @@\n \n // this is surprisingly complicated to be both generic & correct\n \n-use cmp::Ord;\n-use num::Bounded;\n-use rand::Rng;\n-use rand::distributions::{Sample, IndependentSample};\n+use std::num::Bounded;\n+use Rng;\n+use distributions::{Sample, IndependentSample};\n \n /// Sample values uniformly between two bounds.\n ///\n@@ -34,8 +33,7 @@ use rand::distributions::{Sample, IndependentSample};\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::distributions::{IndependentSample, Range};\n+/// use rand::distributions::{IndependentSample, Range};\n ///\n /// fn main() {\n ///     let between = Range::new(10u, 10000u);\n@@ -163,11 +161,10 @@ float_impl! { f64 }\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use super::*;\n-    use rand::*;\n-    use rand::distributions::*;\n-    use num::Bounded;\n+    use distributions::{Sample, IndependentSample};\n+    use {Rng, task_rng};\n+    use super::Range;\n+    use std::num::Bounded;\n \n     #[should_fail]\n     #[test]", "previous_filename": "src/libstd/rand/distributions/range.rs"}, {"sha": "049ef3dbb5936933b894b9dfe9891fa872affa97", "filename": "src/librand/distributions/ziggurat_tables.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "previous_filename": "src/libstd/rand/distributions/ziggurat_tables.rs"}, {"sha": "b3226d60095b986564c89e475d1f59a48e447a0b", "filename": "src/librand/isaac.rs", "status": "renamed", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -10,11 +10,10 @@\n \n //! The ISAAC random number generator.\n \n-use rand::{Rng, SeedableRng, OSRng};\n-use iter::{Iterator, range, range_step, Repeat};\n-use option::{None, Some};\n-use vec::{raw, MutableVector, ImmutableVector};\n-use mem;\n+use {Rng, SeedableRng, OSRng};\n+use std::iter::{range_step, Repeat};\n+use std::vec::raw;\n+use std::mem;\n \n static RAND_SIZE_LEN: u32 = 8;\n static RAND_SIZE: u32 = 1 << RAND_SIZE_LEN;\n@@ -430,10 +429,9 @@ impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng {\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n-    use rand::{Rng, SeedableRng, OSRng};\n-    use prelude::*;\n-    use vec;\n+    use super::{IsaacRng, Isaac64Rng};\n+    use {Rng, SeedableRng, OSRng};\n+    use std::vec;\n \n     #[test]\n     fn test_rng_32_rand_seeded() {", "previous_filename": "src/libstd/rand/isaac.rs"}, {"sha": "4c5dd0043b6372cfb4bf6b67879cabe2a1989b2f", "filename": "src/librand/lib.rs", "status": "renamed", "additions": 54, "deletions": 53, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -48,38 +48,41 @@ randomness.\n # Examples\n \n ```rust\n-use std::rand;\n-use std::rand::Rng;\n+use rand::Rng;\n \n let mut rng = rand::rng();\n if rng.gen() { // bool\n     println!(\"int: {}, uint: {}\", rng.gen::<int>(), rng.gen::<uint>())\n }\n- ```\n+```\n \n ```rust\n-use std::rand;\n-\n let tuple_ptr = rand::random::<~(f64, char)>();\n println!(\"{:?}\", tuple_ptr)\n- ```\n+```\n */\n \n-use cast;\n-use cmp::Ord;\n-use container::Container;\n-use iter::{Iterator, range};\n-use kinds::marker;\n-use local_data;\n-use prelude::*;\n-use str;\n-use vec;\n+#[crate_id = \"rand#0.10-pre\"];\n+#[license = \"MIT/ASL2\"];\n+#[crate_type = \"dylib\"];\n+#[crate_type = \"rlib\"];\n+#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+\n+#[feature(macro_rules, managed_boxes)];\n \n-pub use self::isaac::{IsaacRng, Isaac64Rng};\n-pub use self::os::OSRng;\n+use std::cast;\n+use std::kinds::marker;\n+use std::local_data;\n+use std::str;\n+use std::vec;\n \n-use self::distributions::{Range, IndependentSample};\n-use self::distributions::range::SampleRange;\n+pub use isaac::{IsaacRng, Isaac64Rng};\n+pub use os::OSRng;\n+\n+use distributions::{Range, IndependentSample};\n+use distributions::range::SampleRange;\n \n pub mod distributions;\n pub mod isaac;\n@@ -135,7 +138,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut v = [0u8, .. 13579];\n     /// task_rng().fill_bytes(v);\n@@ -170,7 +173,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let x: uint = rng.gen();\n@@ -187,7 +190,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let x: ~[uint] = rng.gen_vec(10);\n@@ -210,7 +213,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let n: uint = rng.gen_range(0u, 10);\n@@ -228,7 +231,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// println!(\"{:b}\", rng.gen_weighted_bool(3));\n@@ -243,7 +246,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// println!(\"{}\", task_rng().gen_ascii_str(10));\n     /// ```\n@@ -269,7 +272,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let choices = [1, 2, 4, 8, 16, 32];\n     /// let mut rng = task_rng();\n@@ -289,7 +292,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// println!(\"{:?}\", task_rng().shuffle(~[1,2,3]));\n     /// ```\n@@ -304,7 +307,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let mut y = [1,2,3];\n@@ -328,7 +331,7 @@ pub trait Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{task_rng, Rng};\n+    /// use rand::{task_rng, Rng};\n     ///\n     /// let mut rng = task_rng();\n     /// let sample = rng.sample(range(1, 100), 5);\n@@ -359,7 +362,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{Rng, SeedableRng, StdRng};\n+    /// use rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let mut rng: StdRng = SeedableRng::from_seed(&[1, 2, 3, 4]);\n     /// println!(\"{}\", rng.gen::<f64>());\n@@ -373,7 +376,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::rand::{Rng, SeedableRng, StdRng};\n+    /// use rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let mut rng: StdRng = SeedableRng::from_seed(&[1, 2, 3, 4]);\n     /// println!(\"{}\", rng.gen::<f64>());\n@@ -609,7 +612,7 @@ impl Rng for TaskRng {\n /// # Example\n ///\n /// ```rust\n-/// use std::rand::random;\n+/// use rand::random;\n ///\n /// if random() {\n ///     let x = random();\n@@ -631,8 +634,8 @@ pub fn random<T: Rand>() -> T {\n /// `[0,1)`.\n ///\n /// # Example\n-/// ```rust,ignore\n-/// use std::rand::{random, Open01};\n+/// ```rust\n+/// use rand::{random, Open01};\n ///\n /// let Open01(val) = random::<Open01<f32>>();\n /// println!(\"f32 from (0,1): {}\", val);\n@@ -647,8 +650,8 @@ pub struct Open01<F>(F);\n /// `[0,1)`.\n ///\n /// # Example\n-/// ```rust,ignore\n-/// use std::rand::{random, Closed01};\n+/// ```rust\n+/// use rand::{random, Closed01};\n ///\n /// let Closed01(val) = random::<Closed01<f32>>();\n /// println!(\"f32 from [0,1]: {}\", val);\n@@ -657,9 +660,8 @@ pub struct Closed01<F>(F);\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n-    use vec;\n-    use super::*;\n+    use std::vec;\n+    use super::{Rng, task_rng, random, OSRng, SeedableRng, StdRng};\n \n     struct ConstRng { i: u64 }\n     impl Rng for ConstRng {\n@@ -691,7 +693,7 @@ mod test {\n \n     #[test]\n     fn test_gen_range() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         for _ in range(0, 1000) {\n             let a = r.gen_range(-3i, 42);\n             assert!(a >= -3 && a < 42);\n@@ -711,35 +713,35 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_gen_range_fail_int() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         r.gen_range(5i, -2);\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_gen_range_fail_uint() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         r.gen_range(5u, 2u);\n     }\n \n     #[test]\n     fn test_gen_f64() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         let a = r.gen::<f64>();\n         let b = r.gen::<f64>();\n         debug!(\"{:?}\", (a, b));\n     }\n \n     #[test]\n     fn test_gen_weighted_bool() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         assert_eq!(r.gen_weighted_bool(0u), true);\n         assert_eq!(r.gen_weighted_bool(1u), true);\n     }\n \n     #[test]\n     fn test_gen_ascii_str() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         debug!(\"{}\", r.gen_ascii_str(10u));\n         debug!(\"{}\", r.gen_ascii_str(10u));\n         debug!(\"{}\", r.gen_ascii_str(10u));\n@@ -750,21 +752,21 @@ mod test {\n \n     #[test]\n     fn test_gen_vec() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         assert_eq!(r.gen_vec::<u8>(0u).len(), 0u);\n         assert_eq!(r.gen_vec::<u8>(10u).len(), 10u);\n         assert_eq!(r.gen_vec::<f64>(16u).len(), 16u);\n     }\n \n     #[test]\n     fn test_choose() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         assert_eq!(r.choose([1, 1, 1]), 1);\n     }\n \n     #[test]\n     fn test_choose_option() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         let v: &[int] = &[];\n         assert!(r.choose_option(v).is_none());\n \n@@ -775,7 +777,7 @@ mod test {\n \n     #[test]\n     fn test_shuffle() {\n-        let mut r = rng();\n+        let mut r = task_rng();\n         let empty: ~[int] = ~[];\n         assert_eq!(r.shuffle(~[]), empty);\n         assert_eq!(r.shuffle(~[1, 1, 1]), ~[1, 1, 1]);\n@@ -806,7 +808,7 @@ mod test {\n         let min_val = 1;\n         let max_val = 100;\n \n-        let mut r = rng();\n+        let mut r = task_rng();\n         let vals = range(min_val, max_val).to_owned_vec();\n         let small_sample = r.sample(vals.iter(), 5);\n         let large_sample = r.sample(vals.iter(), vals.len() + 5);\n@@ -847,9 +849,8 @@ static RAND_BENCH_N: u64 = 100;\n mod bench {\n     extern crate test;\n     use self::test::BenchHarness;\n-    use prelude::*;\n-    use rand::{XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n-    use mem::size_of;\n+    use {XorShiftRng, StdRng, IsaacRng, Isaac64Rng, Rng, RAND_BENCH_N};\n+    use std::mem::size_of;\n \n     #[bench]\n     fn rand_xorshift(bh: &mut BenchHarness) {", "previous_filename": "src/libstd/rand/mod.rs"}, {"sha": "826c1640b69a38f6ebb0b4edc2d0c46a5bec169d", "filename": "src/librand/os.rs", "status": "renamed", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fos.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -11,18 +11,17 @@\n //! Interfaces to the operating system provided random number\n //! generators.\n \n-use rand::Rng;\n-use ops::Drop;\n+use Rng;\n \n #[cfg(unix)]\n-use rand::reader::ReaderRng;\n+use reader::ReaderRng;\n #[cfg(unix)]\n-use io::File;\n+use std::io::File;\n \n #[cfg(windows)]\n-use cast;\n+use std::cast;\n #[cfg(windows)]\n-use libc::{c_long, DWORD, BYTE};\n+use std::libc::{c_long, DWORD, BYTE};\n #[cfg(windows)]\n type HCRYPTPROV = c_long;\n // the extern functions imported from the runtime on Windows are\n@@ -60,7 +59,6 @@ impl OSRng {\n     /// Create a new `OSRng`.\n     #[cfg(unix)]\n     pub fn new() -> OSRng {\n-        use path::Path;\n         let reader = File::open(&Path::new(\"/dev/urandom\"));\n         let reader = reader.ok().expect(\"Error opening /dev/urandom\");\n         let reader_rng = ReaderRng::new(reader);\n@@ -106,9 +104,6 @@ impl Rng for OSRng {\n         unsafe { cast::transmute(v) }\n     }\n     fn fill_bytes(&mut self, v: &mut [u8]) {\n-        use container::Container;\n-        use vec::MutableVector;\n-\n         extern {\n             fn rust_win32_rand_gen(hProv: HCRYPTPROV, dwLen: DWORD,\n                                    pbBuffer: *mut BYTE);\n@@ -136,10 +131,9 @@ impl Drop for OSRng {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n-    use super::*;\n-    use rand::Rng;\n-    use task;\n+    use super::OSRng;\n+    use Rng;\n+    use std::task;\n \n     #[test]\n     fn test_os_rng() {", "previous_filename": "src/libstd/rand/os.rs"}, {"sha": "fbd160554602f3afac4b807e4976737d303e22d7", "filename": "src/librand/rand_impls.rs", "status": "renamed", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -10,11 +10,11 @@\n \n //! The implementations of `Rand` for the built-in types.\n \n-use char;\n-use int;\n-use option::{Option, Some, None};\n-use rand::{Rand,Rng};\n-use uint;\n+use std::char;\n+use std::int;\n+use std::uint;\n+\n+use {Rand,Rng};\n \n impl Rand for int {\n     #[inline]\n@@ -97,7 +97,7 @@ impl Rand for u64 {\n macro_rules! float_impls {\n     ($mod_name:ident, $ty:ty, $mantissa_bits:expr, $method_name:ident, $ignored_bits:expr) => {\n         mod $mod_name {\n-            use rand::{Rand, Rng, Open01, Closed01};\n+            use {Rand, Rng, Open01, Closed01};\n \n             static SCALE: $ty = (1u64 << $mantissa_bits) as $ty;\n \n@@ -226,8 +226,7 @@ impl<T: Rand + 'static> Rand for @T {\n \n #[cfg(test)]\n mod tests {\n-    use prelude::*;\n-    use rand::{Rng, task_rng, Open01, Closed01};\n+    use {Rng, task_rng, Open01, Closed01};\n \n     struct ConstantRng(u64);\n     impl Rng for ConstantRng {", "previous_filename": "src/libstd/rand/rand_impls.rs"}, {"sha": "744930e028cb9caa8fa869981154a13e2e2e9c8d", "filename": "src/librand/reader.rs", "status": "renamed", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freader.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -10,11 +10,7 @@\n \n //! A wrapper around any Reader to treat it as an RNG.\n \n-use container::Container;\n-use result::{Ok, Err};\n-use io::Reader;\n-\n-use rand::Rng;\n+use Rng;\n \n /// An RNG that reads random bytes straight from a `Reader`. This will\n /// work best with an infinite reader, but this is not required.\n@@ -24,7 +20,7 @@ use rand::Rng;\n /// # Example\n ///\n /// ```rust\n-/// use std::rand::{reader, Rng};\n+/// use rand::{reader, Rng};\n /// use std::io::MemReader;\n ///\n /// let mut rng = reader::ReaderRng::new(MemReader::new(~[1,2,3,4,5,6,7,8]));\n@@ -75,11 +71,10 @@ impl<R: Reader> Rng for ReaderRng<R> {\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n-    use io::MemReader;\n-    use cast;\n-    use rand::*;\n-    use prelude::*;\n+    use super::ReaderRng;\n+    use std::io::MemReader;\n+    use std::cast;\n+    use Rng;\n \n     #[test]\n     fn test_reader_rng_u64() {", "previous_filename": "src/libstd/rand/reader.rs"}, {"sha": "a64124e637ec4fadbc307c85c3f33b844ec1470c", "filename": "src/librand/reseeding.rs", "status": "renamed", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -11,9 +11,8 @@\n //! A wrapper around another RNG that reseeds it after it\n //! generates a certain number of random bytes.\n \n-use container::Container;\n-use default::Default;\n-use rand::{Rng, SeedableRng};\n+use std::default::Default;\n+use {Rng, SeedableRng};\n \n /// How many bytes of entropy the underling RNG is allowed to generate\n /// before it is reseeded.\n@@ -101,9 +100,8 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R>>\n /// # Example\n ///\n /// ```rust\n-/// use std::rand;\n-/// use std::rand::{Rng, SeedableRng};\n-/// use std::rand::reseeding::{Reseeder, ReseedingRng};\n+/// use rand::{Rng, SeedableRng};\n+/// use rand::reseeding::{Reseeder, ReseedingRng};\n ///\n /// struct TickTockReseeder { tick: bool }\n /// impl Reseeder<rand::StdRng> for TickTockReseeder {\n@@ -142,10 +140,9 @@ impl Default for ReseedWithDefault {\n \n #[cfg(test)]\n mod test {\n-    use prelude::*;\n-    use super::*;\n-    use default::Default;\n-    use rand::{SeedableRng, Rng};\n+    use super::{ReseedingRng, ReseedWithDefault};\n+    use std::default::Default;\n+    use {SeedableRng, Rng};\n \n     struct Counter {\n         i: u32\n@@ -205,7 +202,7 @@ mod test {\n     static fill_bytes_v_len: uint = 13579;\n     #[test]\n     fn test_rng_fill_bytes() {\n-        use rand::task_rng;\n+        use task_rng;\n         let mut v = ~[0u8, .. fill_bytes_v_len];\n         task_rng().fill_bytes(v);\n ", "previous_filename": "src/libstd/rand/reseeding.rs"}, {"sha": "a873eccfb038a756737a9af9a695c09287953b96", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -73,7 +73,8 @@\n #[cfg(test)] extern crate native;\n #[cfg(test)] extern crate green;\n \n-// Make extra accessible for benchmarking\n+// Make extra and rand accessible for benchmarking/testcases\n+#[cfg(test)] extern crate rand;\n #[cfg(test)] extern crate extra = \"extra\";\n \n // Make std testable by not duplicating lang items. See #2912\n@@ -173,7 +174,6 @@ pub mod c_str;\n pub mod os;\n pub mod io;\n pub mod path;\n-pub mod rand;\n pub mod cast;\n pub mod fmt;\n pub mod cleanup;"}, {"sha": "2d16c87b78b1972de4f0d9dd0bb7d4a031f8e1dd", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -26,7 +26,7 @@ pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new(vec!(\"std\", \"rand\", \"Rand\")),\n+        path: Path::new(vec!(\"rand\", \"Rand\")),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         methods: vec!(\n@@ -35,7 +35,7 @@ pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n                     bounds: vec!((\"R\",\n-                               vec!( Path::new(vec!(\"std\", \"rand\", \"Rng\")) )))\n+                               vec!( Path::new(vec!(\"rand\", \"Rng\")) )))\n                 },\n                 explicit_self: None,\n                 args: vec!(\n@@ -58,7 +58,6 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n         _ => cx.bug(\"Incorrect number of arguments to `rand` in `deriving(Rand)`\")\n     };\n     let rand_ident = vec!(\n-        cx.ident_of(\"std\"),\n         cx.ident_of(\"rand\"),\n         cx.ident_of(\"Rand\"),\n         cx.ident_of(\"rand\")\n@@ -89,7 +88,7 @@ fn rand_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n                                         Vec::new());\n             let rand_name = cx.expr_path(rand_name);\n \n-            // ::std::rand::Rand::rand(rng)\n+            // ::rand::Rand::rand(rng)\n             let rv_call = cx.expr_call(trait_span,\n                                        rand_name,\n                                        vec!( *rng.get(0) ));"}, {"sha": "8ab8636aa3a28fca32546b72dc4514e1643061f3", "filename": "src/rt/rust_builtin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Frt%2Frust_builtin.c", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Frt%2Frust_builtin.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.c?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -410,7 +410,7 @@ rust_win32_rand_acquire(HCRYPTPROV* phProv) {\n     win32_require\n         (_T(\"CryptAcquireContext\"),\n          // changes to the parameters here should be reflected in the docs of\n-         // std::rand::os::OSRng\n+         // rand::os::OSRng\n          CryptAcquireContext(phProv, NULL, NULL, PROV_RSA_FULL,\n                              CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n "}, {"sha": "8b9d4de9f04c1d3194a439c1bbcd43e61150aef1", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa4bbeed425ae99d15322fbaa05d1abeae6547f/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=6fa4bbeed425ae99d15322fbaa05d1abeae6547f", "patch": "@@ -10,9 +10,11 @@\n \n // ensure that the TaskRng isn't/doesn't become accidentally sendable.\n \n+extern crate rand;\n+\n fn test_send<S: Send>() {}\n \n pub fn main() {\n-    test_send::<::std::rand::TaskRng>();\n-    //~^ ERROR: incompatible type `std::rand::TaskRng`, which does not fulfill `Send`\n+    test_send::<::rand::TaskRng>();\n+    //~^ ERROR: incompatible type `rand::TaskRng`, which does not fulfill `Send`\n }"}]}