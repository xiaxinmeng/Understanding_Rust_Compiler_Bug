{"sha": "347654324dde17135072d2d704a71209dd3c5ca3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NzY1NDMyNGRkZTE3MTM1MDcyZDJkNzA0YTcxMjA5ZGQzYzVjYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-29T01:22:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-29T01:22:11Z"}, "message": "Auto merge of #62855 - Aaron1011:feature/rustdoc-reexport-final, r=petrochenkov\n\nImprove Rustdoc's handling of procedural macros\n\nFixes #58700\nFixes #58696\nFixes #49553\nFixes #52210\n\nThis commit removes the special rustdoc handling for proc macros, as we can now\nretrieve their span and attributes just like any other item.\n\nA new command-line option is added to rustdoc: `--crate-type`. This takes the same options as rustc's `--crate-type` option. However, all values other than `proc-macro` are treated the same. This allows Rustdoc to enable 'proc macro mode' when handling a proc macro crate.\n\nIn compiletest, a new 'rustdoc-flags' option is added. This allows us to\npass in the '--proc-macro-crate' flag in the absence of Cargo.\n\nI've opened [an additional PR to Cargo](https://github.com/rust-lang/cargo/pull/7159) to support passing in this flag.\nThese two PRS can be merged in any order - the Cargo changes will not\ntake effect until the 'cargo' submodule is updated in this repository.", "tree": {"sha": "bfeb815ae52b06b3fadd832ff4e1fac0bb27b649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfeb815ae52b06b3fadd832ff4e1fac0bb27b649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/347654324dde17135072d2d704a71209dd3c5ca3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/347654324dde17135072d2d704a71209dd3c5ca3", "html_url": "https://github.com/rust-lang/rust/commit/347654324dde17135072d2d704a71209dd3c5ca3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/347654324dde17135072d2d704a71209dd3c5ca3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0414dfa0aa072b6e1153ae60f94de852c07bb803", "url": "https://api.github.com/repos/rust-lang/rust/commits/0414dfa0aa072b6e1153ae60f94de852c07bb803", "html_url": "https://github.com/rust-lang/rust/commit/0414dfa0aa072b6e1153ae60f94de852c07bb803"}, {"sha": "4c3e386bd7ee9020407cee4ba120eebfb6373549", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3e386bd7ee9020407cee4ba120eebfb6373549", "html_url": "https://github.com/rust-lang/rust/commit/4c3e386bd7ee9020407cee4ba120eebfb6373549"}], "stats": {"total": 137, "additions": 96, "deletions": 41}, "files": [{"sha": "9ecdff25d26492a95c770e2f2611b4bfe8d516a3", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -1719,13 +1719,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                              static, framework, or dylib (the default).\",\n             \"[KIND=]NAME\",\n         ),\n-        opt::multi_s(\n-            \"\",\n-            \"crate-type\",\n-            \"Comma separated list of types of crates\n-                                    for the compiler to emit\",\n-            \"[bin|lib|rlib|dylib|cdylib|staticlib|proc-macro]\",\n-        ),\n+        make_crate_type_option(),\n         opt::opt_s(\n             \"\",\n             \"crate-name\",\n@@ -2506,6 +2500,16 @@ pub fn build_session_options_and_crate_config(\n     )\n }\n \n+pub fn make_crate_type_option() -> RustcOptGroup {\n+    opt::multi_s(\n+        \"\",\n+        \"crate-type\",\n+        \"Comma separated list of types of crates\n+                                for the compiler to emit\",\n+        \"[bin|lib|rlib|dylib|cdylib|staticlib|proc-macro]\",\n+    )\n+}\n+\n pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateType>, String> {\n     let mut crate_types: Vec<CrateType> = Vec::new();\n     for unparsed_crate_type in &list_list {"}, {"sha": "24b44964e4fd22b08fa676c567883554322c0065", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -473,14 +473,25 @@ fn configure_and_expand_inner<'a>(\n         ast_validation::check_crate(sess, &krate)\n     });\n \n-    // If we're in rustdoc we're always compiling as an rlib, but that'll trip a\n-    // bunch of checks in the `modify` function below. For now just skip this\n-    // step entirely if we're rustdoc as it's not too useful anyway.\n-    if !sess.opts.actually_rustdoc {\n+\n+    let crate_types = sess.crate_types.borrow();\n+    let is_proc_macro_crate = crate_types.contains(&config::CrateType::ProcMacro);\n+\n+    // For backwards compatibility, we don't try to run proc macro injection\n+    // if rustdoc is run on a proc macro crate without '--crate-type proc-macro' being\n+    // specified. This should only affect users who manually invoke 'rustdoc', as\n+    // 'cargo doc' will automatically pass the proper '--crate-type' flags.\n+    // However, we do emit a warning, to let such users know that they should\n+    // start passing '--crate-type proc-macro'\n+    if has_proc_macro_decls && sess.opts.actually_rustdoc && !is_proc_macro_crate {\n+        let mut msg = sess.diagnostic().struct_warn(&\"Trying to document proc macro crate \\\n+            without passing '--crate-type proc-macro to rustdoc\");\n+\n+        msg.warn(\"The generated documentation may be incorrect\");\n+        msg.emit()\n+    } else {\n         krate = time(sess, \"maybe creating a macro crate\", || {\n-            let crate_types = sess.crate_types.borrow();\n             let num_crate_types = crate_types.len();\n-            let is_proc_macro_crate = crate_types.contains(&config::CrateType::ProcMacro);\n             let is_test_crate = sess.opts.test;\n             syntax_ext::proc_macro_harness::inject(\n                 &sess.parse_sess,"}, {"sha": "cb42ff1c8052fc89a4022de1f2e143f970207fed", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -20,6 +20,7 @@ use crate::clean::{\n     self,\n     GetDefId,\n     ToSource,\n+    TypeKind\n };\n \n use super::Clean;\n@@ -107,15 +108,16 @@ pub fn try_inline(\n             record_extern_fqn(cx, did, clean::TypeKind::Const);\n             clean::ConstantItem(build_const(cx, did))\n         }\n-        // FIXME: proc-macros don't propagate attributes or spans across crates, so they look empty\n-        Res::Def(DefKind::Macro(MacroKind::Bang), did) => {\n+        Res::Def(DefKind::Macro(kind), did) => {\n             let mac = build_macro(cx, did, name);\n-            if let clean::MacroItem(..) = mac {\n-                record_extern_fqn(cx, did, clean::TypeKind::Macro);\n-                mac\n-            } else {\n-                return None;\n-            }\n+\n+            let type_kind = match kind {\n+                MacroKind::Bang => TypeKind::Macro,\n+                MacroKind::Attr => TypeKind::Attr,\n+                MacroKind::Derive => TypeKind::Derive\n+            };\n+            record_extern_fqn(cx, did, type_kind);\n+            mac\n         }\n         _ => return None,\n     };"}, {"sha": "cefae2e105eda731cedfd7ece1a0c66a69d1a101", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -6,6 +6,7 @@ use errors;\n use getopts;\n use rustc::lint::Level;\n use rustc::session;\n+use rustc::session::config::{CrateType, parse_crate_types_from_list};\n use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n use rustc::session::config::{nightly_options, build_codegen_options, build_debugging_options,\n                              get_cmd_lint_options, ExternEntry};\n@@ -32,6 +33,8 @@ pub struct Options {\n     pub input: PathBuf,\n     /// The name of the crate being documented.\n     pub crate_name: Option<String>,\n+    /// Whether or not this is a proc-macro crate\n+    pub proc_macro_crate: bool,\n     /// How to format errors and warnings.\n     pub error_format: ErrorOutputType,\n     /// Library search paths to hand to the compiler.\n@@ -111,6 +114,7 @@ impl fmt::Debug for Options {\n         f.debug_struct(\"Options\")\n             .field(\"input\", &self.input)\n             .field(\"crate_name\", &self.crate_name)\n+            .field(\"proc_macro_crate\", &self.proc_macro_crate)\n             .field(\"error_format\", &self.error_format)\n             .field(\"libs\", &self.libs)\n             .field(\"externs\", &FmtExterns(&self.externs))\n@@ -431,7 +435,16 @@ impl Options {\n         };\n         let manual_passes = matches.opt_strs(\"passes\");\n \n+        let crate_types = match parse_crate_types_from_list(matches.opt_strs(\"crate-type\")) {\n+            Ok(types) => types,\n+            Err(e) =>{\n+                diag.struct_err(&format!(\"unknown crate type: {}\", e)).emit();\n+                return Err(1);\n+            }\n+        };\n+\n         let crate_name = matches.opt_str(\"crate-name\");\n+        let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n         let playground_url = matches.opt_str(\"playground-url\");\n         let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n         let display_warnings = matches.opt_present(\"display-warnings\");\n@@ -454,6 +467,7 @@ impl Options {\n         Ok(Options {\n             input,\n             crate_name,\n+            proc_macro_crate,\n             error_format,\n             libs,\n             externs,"}, {"sha": "24305cd517bb868199a96de50acd914e51e03c4e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -228,6 +228,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     let RustdocOptions {\n         input,\n         crate_name,\n+        proc_macro_crate,\n         error_format,\n         libs,\n         externs,\n@@ -293,11 +294,16 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     }).collect();\n \n     let host_triple = TargetTriple::from_triple(config::host_triple());\n+    let crate_types = if proc_macro_crate {\n+        vec![config::CrateType::ProcMacro]\n+    } else {\n+        vec![config::CrateType::Rlib]\n+    };\n     // plays with error output here!\n     let sessopts = config::Options {\n         maybe_sysroot,\n         search_paths: libs,\n-        crate_types: vec![config::CrateType::Rlib],\n+        crate_types,\n         lint_opts: if !display_warnings {\n             lint_opts\n         } else {"}, {"sha": "87dac0f226896f44116788249bc07d4a3b60c1ee", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -46,7 +46,7 @@ use std::panic;\n use std::process;\n \n use rustc::session::{early_warn, early_error};\n-use rustc::session::config::{ErrorOutputType, RustcOptGroup};\n+use rustc::session::config::{ErrorOutputType, RustcOptGroup, make_crate_type_option};\n \n #[macro_use]\n mod externalfiles;\n@@ -133,6 +133,7 @@ fn opts() -> Vec<RustcOptGroup> {\n         stable(\"crate-name\", |o| {\n             o.optopt(\"\", \"crate-name\", \"specify the name of this crate\", \"NAME\")\n         }),\n+        make_crate_type_option(),\n         stable(\"L\", |o| {\n             o.optmulti(\"L\", \"library-path\", \"directory to add to crate search path\",\n                        \"DIR\")"}, {"sha": "cb6ae1c2bd24b47ef206a3b1309851fa1e2d5f1b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -43,10 +43,16 @@ pub struct TestOptions {\n pub fn run(options: Options) -> i32 {\n     let input = config::Input::File(options.input.clone());\n \n+    let crate_types = if options.proc_macro_crate {\n+        vec![config::CrateType::ProcMacro]\n+    } else {\n+        vec![config::CrateType::Dylib]\n+    };\n+\n     let sessopts = config::Options {\n         maybe_sysroot: options.maybe_sysroot.clone(),\n         search_paths: options.libs.clone(),\n-        crate_types: vec![config::CrateType::Dylib],\n+        crate_types,\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),"}, {"sha": "fcbd7cabc69003f4d4dc7f0fc37e9f3e97e02e0c", "filename": "src/test/rustdoc-ui/failed-doctest-output.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -3,6 +3,7 @@\n // adapted to use that, and that normalize line can go away\n \n // compile-flags:--test\n+// rustc-env:RUST_BACKTRACE=0\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n // failure-status: 101\n "}, {"sha": "ef1b419f52895699554e36cb1b0cde478a1da9e1", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -1,13 +1,13 @@\n \n running 2 tests\n-test $DIR/failed-doctest-output.rs - OtherStruct (line 20) ... FAILED\n-test $DIR/failed-doctest-output.rs - SomeStruct (line 10) ... FAILED\n+test $DIR/failed-doctest-output.rs - OtherStruct (line 21) ... FAILED\n+test $DIR/failed-doctest-output.rs - SomeStruct (line 11) ... FAILED\n \n failures:\n \n----- $DIR/failed-doctest-output.rs - OtherStruct (line 20) stdout ----\n+---- $DIR/failed-doctest-output.rs - OtherStruct (line 21) stdout ----\n error[E0425]: cannot find value `no` in this scope\n- --> $DIR/failed-doctest-output.rs:21:1\n+ --> $DIR/failed-doctest-output.rs:22:1\n   |\n 3 | no\n   | ^^ not found in this scope\n@@ -16,7 +16,7 @@ error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`.\n Couldn't compile the test.\n----- $DIR/failed-doctest-output.rs - SomeStruct (line 10) stdout ----\n+---- $DIR/failed-doctest-output.rs - SomeStruct (line 11) stdout ----\n Test executable failed (exit code 101).\n \n stdout:\n@@ -32,8 +32,8 @@ note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n \n failures:\n-    $DIR/failed-doctest-output.rs - OtherStruct (line 20)\n-    $DIR/failed-doctest-output.rs - SomeStruct (line 10)\n+    $DIR/failed-doctest-output.rs - OtherStruct (line 21)\n+    $DIR/failed-doctest-output.rs - SomeStruct (line 11)\n \n test result: FAILED. 0 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out\n "}, {"sha": "37465ccf1c27e23b5a9b86679a51bc7e202efb74", "filename": "src/test/rustdoc/inline_cross/auxiliary/proc_macro.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fproc_macro.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -1,5 +1,6 @@\n // force-host\n // no-prefer-dynamic\n+// compile-flags: --crate-type proc-macro\n \n #![crate_type=\"proc-macro\"]\n #![crate_name=\"some_macros\"]\n@@ -25,3 +26,9 @@ pub fn some_proc_attr(_attr: TokenStream, item: TokenStream) -> TokenStream {\n pub fn some_derive(_item: TokenStream) -> TokenStream {\n     TokenStream::new()\n }\n+\n+/// Doc comment from the original crate\n+#[proc_macro]\n+pub fn reexported_macro(_input: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}"}, {"sha": "6880e303df90bea5f77baeb631b12a4c27b8f142", "filename": "src/test/rustdoc/inline_cross/proc_macro.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -1,16 +1,17 @@\n // aux-build:proc_macro.rs\n // build-aux-docs\n \n-// FIXME: if/when proc-macros start exporting their doc attributes across crates, we can turn on\n-// cross-crate inlining for them\n-\n extern crate some_macros;\n \n // @has proc_macro/index.html\n-// @has - '//a/@href' '../some_macros/macro.some_proc_macro.html'\n-// @has - '//a/@href' '../some_macros/attr.some_proc_attr.html'\n-// @has - '//a/@href' '../some_macros/derive.SomeDerive.html'\n-// @!has proc_macro/macro.some_proc_macro.html\n-// @!has proc_macro/attr.some_proc_attr.html\n-// @!has proc_macro/derive.SomeDerive.html\n+// @has - '//a/@href' 'macro.some_proc_macro.html'\n+// @has - '//a/@href' 'attr.some_proc_attr.html'\n+// @has - '//a/@href' 'derive.SomeDerive.html'\n+// @has proc_macro/macro.some_proc_macro.html\n+// @has proc_macro/attr.some_proc_attr.html\n+// @has proc_macro/derive.SomeDerive.html\n pub use some_macros::{some_proc_macro, some_proc_attr, SomeDerive};\n+\n+// @has proc_macro/macro.reexported_macro.html\n+// @has - 'Doc comment from the original crate'\n+pub use some_macros::reexported_macro;"}, {"sha": "82196e413e94b856a267a4e1a78541a2835e94e5", "filename": "src/test/rustdoc/proc-macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc%2Fproc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc%2Fproc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fproc-macro.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -1,5 +1,6 @@\n // force-host\n // no-prefer-dynamic\n+// compile-flags: --crate-type proc-macro --document-private-items\n \n #![crate_type=\"proc-macro\"]\n #![crate_name=\"some_macros\"]\n@@ -58,7 +59,7 @@ pub fn some_derive(_item: TokenStream) -> TokenStream {\n }\n \n // @has some_macros/foo/index.html\n-pub mod foo {\n+mod foo {\n     // @has - '//code' 'pub use some_proc_macro;'\n     // @has - '//a/@href' '../../some_macros/macro.some_proc_macro.html'\n     pub use some_proc_macro;"}, {"sha": "dd5edc984dafaa645bb2e87616a50c66a4428235", "filename": "src/test/rustdoc/rustc-macro-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/347654324dde17135072d2d704a71209dd3c5ca3/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs?ref=347654324dde17135072d2d704a71209dd3c5ca3", "patch": "@@ -1,5 +1,6 @@\n // force-host\n // no-prefer-dynamic\n+// compile-flags: --crate-type proc-macro\n \n #![crate_type = \"proc-macro\"]\n "}]}