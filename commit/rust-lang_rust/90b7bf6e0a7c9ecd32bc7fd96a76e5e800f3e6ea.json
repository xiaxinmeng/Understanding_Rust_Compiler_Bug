{"sha": "90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYjdiZjZlMGE3YzllY2QzMmJjN2ZkOTZhNzZlNWU4MDBmM2U2ZWE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-05-26T17:22:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-26T17:22:53Z"}, "message": "Rollup merge of #51049 - varkor:break-while-condition, r=nikomatsakis\n\nFix behaviour of divergence in while loop conditions\n\nThis fixes `'a: while break 'a {};` being treated as diverging, by tracking break expressions in the same way as in `loop` expressions.\n\nFixes #50856.\n\nr? @nikomatsakis", "tree": {"sha": "01627ef6c6279cb181485cbc488307d9ab8babcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01627ef6c6279cb181485cbc488307d9ab8babcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbCZftCRBK7hj4Ov3rIwAAdHIIAI3iTE2zSBxmCAhwuLzLvZ4e\nbR09xi1pk/aPyhP1sHxGptt9vVw1nGVfXki6IRBi0nUcExg4x1KohXFZLzdnF040\nWZ2H/7/+5EDoGAXrQsvZV494MgbeHANy1Ddpms21QB3hjXWb+4qxAkEqutL3S8hs\nT8cPz1QTDksSsXM3/oaTn/UkSC7joyiNEvIDkGftk3Lc4TPA537cn1A2x1KBhAku\nNFzoB/U5syXlydprwBXO4Po4ttBuAdEWWNbA/R61spE9V9F3KVC2W/UAGOtmZKgM\novEyFVXYnb5Pqvfhn3DoQjSqeGsWfDWm4zbm2q90YbOxCBhsESC+OlekAmELCWg=\n=XzZq\n-----END PGP SIGNATURE-----\n", "payload": "tree 01627ef6c6279cb181485cbc488307d9ab8babcc\nparent 1594c6c650dfbb9606ead602548b96997d507f64\nparent d5bf4de0e4c86d5cacd5ca738e1ba65afc5586ca\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1527355373 -0600\ncommitter GitHub <noreply@github.com> 1527355373 -0600\n\nRollup merge of #51049 - varkor:break-while-condition, r=nikomatsakis\n\nFix behaviour of divergence in while loop conditions\n\nThis fixes `'a: while break 'a {};` being treated as diverging, by tracking break expressions in the same way as in `loop` expressions.\n\nFixes #50856.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea", "html_url": "https://github.com/rust-lang/rust/commit/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1594c6c650dfbb9606ead602548b96997d507f64", "url": "https://api.github.com/repos/rust-lang/rust/commits/1594c6c650dfbb9606ead602548b96997d507f64", "html_url": "https://github.com/rust-lang/rust/commit/1594c6c650dfbb9606ead602548b96997d507f64"}, {"sha": "d5bf4de0e4c86d5cacd5ca738e1ba65afc5586ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5bf4de0e4c86d5cacd5ca738e1ba65afc5586ca", "html_url": "https://github.com/rust-lang/rust/commit/d5bf4de0e4c86d5cacd5ca738e1ba65afc5586ca"}], "stats": {"total": 96, "additions": 92, "deletions": 4}, "files": [{"sha": "2007ab556c27029f892707e774cb85556251d3c6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea", "patch": "@@ -3844,10 +3844,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               let ctxt = BreakableCtxt {\n                   // cannot use break with a value from a while loop\n                   coerce: None,\n-                  may_break: true,\n+                  may_break: false,  // Will get updated if/when we find a `break`.\n               };\n \n-              self.with_breakable_ctxt(expr.id, ctxt, || {\n+              let (ctxt, ()) = self.with_breakable_ctxt(expr.id, ctxt, || {\n                   self.check_expr_has_type_or_error(&cond, tcx.types.bool);\n                   let cond_diverging = self.diverges.get();\n                   self.check_block_no_value(&body);\n@@ -3856,6 +3856,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                   self.diverges.set(cond_diverging);\n               });\n \n+              if ctxt.may_break {\n+                  // No way to know whether it's diverging because\n+                  // of a `break` or an outer `break` or `return`.\n+                  self.diverges.set(Diverges::Maybe);\n+              }\n+\n               self.tcx.mk_nil()\n           }\n           hir::ExprLoop(ref body, _, source) => {\n@@ -3874,7 +3880,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n               let ctxt = BreakableCtxt {\n                   coerce,\n-                  may_break: false, // will get updated if/when we find a `break`\n+                  may_break: false, // Will get updated if/when we find a `break`.\n               };\n \n               let (ctxt, ()) = self.with_breakable_ctxt(expr.id, ctxt, || {\n@@ -3883,7 +3889,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n               if ctxt.may_break {\n                   // No way to know whether it's diverging because\n-                  // of a `break` or an outer `break` or `return.\n+                  // of a `break` or an outer `break` or `return`.\n                   self.diverges.set(Diverges::Maybe);\n               }\n "}, {"sha": "050b479d485f60f694241504531b5cfca01148d0", "filename": "src/test/ui/break-while-condition.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.rs?ref=90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+\n+fn main() {\n+    // The `if false` expressions are simply to\n+    // make sure we don't avoid checking everything\n+    // simply because a few expressions are unreachable.\n+\n+    if false {\n+        let _: ! = { //~ ERROR mismatched types\n+            'a: while break 'a {};\n+        };\n+    }\n+\n+    if false {\n+        let _: ! = {\n+            while false { //~ ERROR mismatched types\n+                break\n+            }\n+        };\n+    }\n+\n+    if false {\n+        let _: ! = {\n+            while false { //~ ERROR mismatched types\n+                return\n+            }\n+        };\n+    }\n+}"}, {"sha": "c8f06db960392b5d8a72837130d912dc1489dfab", "filename": "src/test/ui/break-while-condition.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=90b7bf6e0a7c9ecd32bc7fd96a76e5e800f3e6ea", "patch": "@@ -0,0 +1,43 @@\n+error[E0308]: mismatched types\n+  --> $DIR/break-while-condition.rs:19:20\n+   |\n+LL |           let _: ! = { //~ ERROR mismatched types\n+   |  ____________________^\n+LL | |             'a: while break 'a {};\n+LL | |         };\n+   | |_________^ expected !, found ()\n+   |\n+   = note: expected type `!`\n+              found type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/break-while-condition.rs:26:13\n+   |\n+LL |   fn main() {\n+   |             - expected `()` because of default return type\n+...\n+LL | /             while false { //~ ERROR mismatched types\n+LL | |                 break\n+LL | |             }\n+   | |_____________^ expected !, found ()\n+   |\n+   = note: expected type `!`\n+              found type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/break-while-condition.rs:34:13\n+   |\n+LL |   fn main() {\n+   |             - expected `()` because of default return type\n+...\n+LL | /             while false { //~ ERROR mismatched types\n+LL | |                 return\n+LL | |             }\n+   | |_____________^ expected !, found ()\n+   |\n+   = note: expected type `!`\n+              found type `()`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}