{"sha": "12813159a985d87a98578e05cc39200e4e8c2102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyODEzMTU5YTk4NWQ4N2E5ODU3OGUwNWNjMzkyMDBlNGU4YzIxMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T04:02:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T04:02:26Z"}, "message": "Auto merge of #79994 - JohnTitor:rollup-43wl2uj, r=JohnTitor\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #79360 (std::iter: document iteration over `&T` and `&mut T`)\n - #79398 (Link loop/for keyword)\n - #79834 (Remove deprecated linked_list_extras methods.)\n - #79845 (Fix rustup support in default_build_triple for python3)\n - #79940 (fix more clippy::complexity findings)\n - #79942 (Add post-init hook for static memory for miri.)\n - #79954 (Fix building compiler docs with stage 0)\n - #79963 (Fix typo in `DebruijnIndex` documentation)\n - #79970 (Misc rustbuild improvements when the LLVM backend isn't used)\n - #79973 (rustdoc light theme: Fix CSS for selected buttons)\n - #79984 (Remove an unused dependency that made `rustdoc` crash)\n - #79985 (Fixes submit event of the search input)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bc225852487c734031224fd9b9d98d9a251a9818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc225852487c734031224fd9b9d98d9a251a9818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12813159a985d87a98578e05cc39200e4e8c2102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12813159a985d87a98578e05cc39200e4e8c2102", "html_url": "https://github.com/rust-lang/rust/commit/12813159a985d87a98578e05cc39200e4e8c2102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12813159a985d87a98578e05cc39200e4e8c2102/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd11f45a685213228242b0465d7c077208e492f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd11f45a685213228242b0465d7c077208e492f5", "html_url": "https://github.com/rust-lang/rust/commit/dd11f45a685213228242b0465d7c077208e492f5"}, {"sha": "3213089c0292a5e3a1c0eae1ef845964eb91c51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3213089c0292a5e3a1c0eae1ef845964eb91c51c", "html_url": "https://github.com/rust-lang/rust/commit/3213089c0292a5e3a1c0eae1ef845964eb91c51c"}], "stats": {"total": 375, "additions": 187, "deletions": 188}, "files": [{"sha": "12f9e19cf18b4f2d06767a3988a9f865ab4fe413", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -725,9 +725,6 @@ checksum = \"9a21fa21941700a3cd8fcb4091f361a6a712fac632f85d9f487cc892045d55c6\"\n [[package]]\n name = \"coverage_test_macros\"\n version = \"0.0.0\"\n-dependencies = [\n- \"proc-macro2\",\n-]\n \n [[package]]\n name = \"cpuid-bool\""}, {"sha": "68c11868af8885e65c8dc16af5fd04f7d07b113d", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -597,10 +597,7 @@ impl<'a> TraitDef<'a> {\n \n             let mut ty_params = params\n                 .iter()\n-                .filter_map(|param| match param.kind {\n-                    ast::GenericParamKind::Type { .. } => Some(param),\n-                    _ => None,\n-                })\n+                .filter(|param| matches!(param.kind,  ast::GenericParamKind::Type{..}))\n                 .peekable();\n \n             if ty_params.peek().is_some() {"}, {"sha": "bf0d499e6c4919b433095c08e9e41dc716301c9f", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -854,8 +854,8 @@ fn generic_simd_intrinsic(\n         ));\n     }\n \n-    if name_str.starts_with(\"simd_shuffle\") {\n-        let n: u64 = name_str[\"simd_shuffle\".len()..].parse().unwrap_or_else(|_| {\n+    if let Some(stripped) = name_str.strip_prefix(\"simd_shuffle\") {\n+        let n: u64 = stripped.parse().unwrap_or_else(|_| {\n             span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\")\n         });\n "}, {"sha": "621363bed80e1ea2c989a6580da34ee1c82c66a6", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -201,10 +201,10 @@ fn main() {\n     cmd.args(&components);\n \n     for lib in output(&mut cmd).split_whitespace() {\n-        let name = if lib.starts_with(\"-l\") {\n-            &lib[2..]\n-        } else if lib.starts_with('-') {\n-            &lib[1..]\n+        let name = if let Some(stripped) = lib.strip_prefix(\"-l\") {\n+            stripped\n+        } else if let Some(stripped) = lib.strip_prefix('-') {\n+            stripped\n         } else if Path::new(lib).exists() {\n             // On MSVC llvm-config will print the full name to libraries, but\n             // we're only interested in the name part\n@@ -241,17 +241,17 @@ fn main() {\n     cmd.arg(llvm_link_arg).arg(\"--ldflags\");\n     for lib in output(&mut cmd).split_whitespace() {\n         if is_crossed {\n-            if lib.starts_with(\"-LIBPATH:\") {\n-                println!(\"cargo:rustc-link-search=native={}\", lib[9..].replace(&host, &target));\n-            } else if lib.starts_with(\"-L\") {\n-                println!(\"cargo:rustc-link-search=native={}\", lib[2..].replace(&host, &target));\n+            if let Some(stripped) = lib.strip_prefix(\"-LIBPATH:\") {\n+                println!(\"cargo:rustc-link-search=native={}\", stripped.replace(&host, &target));\n+            } else if let Some(stripped) = lib.strip_prefix(\"-L\") {\n+                println!(\"cargo:rustc-link-search=native={}\", stripped.replace(&host, &target));\n             }\n-        } else if lib.starts_with(\"-LIBPATH:\") {\n-            println!(\"cargo:rustc-link-search=native={}\", &lib[9..]);\n-        } else if lib.starts_with(\"-l\") {\n-            println!(\"cargo:rustc-link-lib={}\", &lib[2..]);\n-        } else if lib.starts_with(\"-L\") {\n-            println!(\"cargo:rustc-link-search=native={}\", &lib[2..]);\n+        } else if let Some(stripped) = lib.strip_prefix(\"-LIBPATH:\") {\n+            println!(\"cargo:rustc-link-search=native={}\", stripped);\n+        } else if let Some(stripped) = lib.strip_prefix(\"-l\") {\n+            println!(\"cargo:rustc-link-lib={}\", stripped);\n+        } else if let Some(stripped) = lib.strip_prefix(\"-L\") {\n+            println!(\"cargo:rustc-link-search=native={}\", stripped);\n         }\n     }\n \n@@ -262,10 +262,10 @@ fn main() {\n     let llvm_linker_flags = tracked_env_var_os(\"LLVM_LINKER_FLAGS\");\n     if let Some(s) = llvm_linker_flags {\n         for lib in s.into_string().unwrap().split_whitespace() {\n-            if lib.starts_with(\"-l\") {\n-                println!(\"cargo:rustc-link-lib={}\", &lib[2..]);\n-            } else if lib.starts_with(\"-L\") {\n-                println!(\"cargo:rustc-link-search=native={}\", &lib[2..]);\n+            if let Some(stripped) = lib.strip_prefix(\"-l\") {\n+                println!(\"cargo:rustc-link-lib={}\", stripped);\n+            } else if let Some(stripped) = lib.strip_prefix(\"-L\") {\n+                println!(\"cargo:rustc-link-search=native={}\", stripped);\n             }\n         }\n     }"}, {"sha": "f50cc6c16ea16b7a6bac788ba547dd1664e787e5", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -9,6 +9,7 @@ use std::hash::Hash;\n use rustc_middle::mir;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::def_id::DefId;\n+use rustc_target::abi::Size;\n \n use super::{\n     AllocId, Allocation, AllocationExtra, CheckInAllocMsg, Frame, ImmTy, InterpCx, InterpResult,\n@@ -299,6 +300,15 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         Ok(())\n     }\n \n+    /// Called after initializing static memory using the interpreter.\n+    fn after_static_mem_initialized(\n+        _ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        _ptr: Pointer<Self::PointerTag>,\n+        _size: Size,\n+    ) -> InterpResult<'tcx> {\n+        Ok(())\n+    }\n+\n     /// Executes a retagging operation\n     #[inline]\n     fn retag("}, {"sha": "09ce6bc0fb754b18c09183f8f651ff4084db1651", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -56,11 +56,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // If you touch this code, be sure to also make the corresponding changes to\n         // `get_vtable` in `rust_codegen_llvm/meth.rs`.\n         // /////////////////////////////////////////////////////////////////////////////////////////\n-        let vtable = self.memory.allocate(\n-            ptr_size * u64::try_from(methods.len()).unwrap().checked_add(3).unwrap(),\n-            ptr_align,\n-            MemoryKind::Vtable,\n-        );\n+        let vtable_size = ptr_size * u64::try_from(methods.len()).unwrap().checked_add(3).unwrap();\n+        let vtable = self.memory.allocate(vtable_size, ptr_align, MemoryKind::Vtable);\n \n         let drop = Instance::resolve_drop_in_place(tcx, ty);\n         let drop = self.memory.create_fn_alloc(FnVal::Instance(drop));\n@@ -93,6 +90,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         }\n \n+        M::after_static_mem_initialized(self, vtable, vtable_size)?;\n+\n         self.memory.mark_immutable(vtable.alloc_id)?;\n         assert!(self.vtables.insert((ty, poly_trait_ref), vtable).is_none());\n "}, {"sha": "b66e37436a663bfe0a8f161803a95968836f588d", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -285,7 +285,7 @@ impl DebugCounters {\n                 ),\n             };\n             counters\n-                .insert(id.into(), DebugCounter::new(counter_kind.clone(), some_block_label))\n+                .insert(id, DebugCounter::new(counter_kind.clone(), some_block_label))\n                 .expect_none(\n                     \"attempt to add the same counter_kind to DebugCounters more than once\",\n                 );\n@@ -340,7 +340,7 @@ impl DebugCounters {\n         if self.some_counters.is_some() && (counter_format.block || !counter_format.id) {\n             let counters = self.some_counters.as_ref().unwrap();\n             if let Some(DebugCounter { some_block_label: Some(block_label), .. }) =\n-                counters.get(&id.into())\n+                counters.get(&id)\n             {\n                 return if counter_format.id {\n                     format!(\"{}#{}\", block_label, id.index())"}, {"sha": "eda1ced001cadf8158ef67295530126be85ec264", "filename": "compiler/rustc_mir/src/transform/coverage/test_macros/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftest_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftest_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftest_macros%2FCargo.toml?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -7,6 +7,3 @@ edition = \"2018\"\n [lib]\n proc-macro = true\n doctest = false\n-\n-[dependencies]\n-proc-macro2 = \"1\""}, {"sha": "6fbcc140978a7039e7886a0d3730dd3fbaa74041", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -216,9 +216,10 @@ impl<'a, 'tcx> Helper<'a, 'tcx> {\n         let discr = self.find_switch_discriminant_info(bb, switch)?;\n \n         // go through each target, finding a discriminant read, and a switch\n-        let results = discr.targets_with_values.iter().map(|(value, target)| {\n-            self.find_discriminant_switch_pairing(&discr, target.clone(), value.clone())\n-        });\n+        let results = discr\n+            .targets_with_values\n+            .iter()\n+            .map(|(value, target)| self.find_discriminant_switch_pairing(&discr, *target, *value));\n \n         // if the optimization did not apply for one of the targets, then abort\n         if results.clone().any(|x| x.is_none()) || results.len() == 0 {"}, {"sha": "0edd44d4bf1eb9d3c7df00bc6981440b474e0968", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -616,8 +616,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 debug!(\"stmt_expr Break val block_context.push(SubExpr)\");\n                 self.block_context.push(BlockFrame::SubExpr);\n                 unpack!(block = self.into(destination, dest_scope, block, value));\n-                dest_scope\n-                    .map(|scope| self.unschedule_drop(scope, destination.as_local().unwrap()));\n+                if let Some(scope) = dest_scope {\n+                    self.unschedule_drop(scope, destination.as_local().unwrap())\n+                };\n                 self.block_context.pop();\n             } else {\n                 self.cfg.push_assign_unit(block, source_info, destination, self.hir.tcx())"}, {"sha": "75faab12e3e127bfca1823c6a6e1a20261861191", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -1109,10 +1109,7 @@ impl Session {\n     }\n \n     pub fn link_dead_code(&self) -> bool {\n-        match self.opts.cg.link_dead_code {\n-            Some(explicitly_set) => explicitly_set,\n-            None => false,\n-        }\n+        self.opts.cg.link_dead_code.unwrap_or(false)\n     }\n \n     pub fn mark_attr_known(&self, attr: &Attribute) {"}, {"sha": "5c185dc4a9f1aa24b4ca10f3c0b26e1d32e03f3d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -1448,31 +1448,30 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             });\n         };\n \n-        typeck_results\n+        if let Some(cause) = typeck_results\n             .generator_interior_types\n             .iter()\n             .find(|ty::GeneratorInteriorTypeCause { ty, .. }| ty_matches(ty))\n-            .map(|cause| {\n-                // Check to see if any awaited expressions have the target type.\n-                let from_awaited_ty = visitor\n-                    .awaits\n-                    .into_iter()\n-                    .map(|id| hir.expect_expr(id))\n-                    .find(|await_expr| {\n-                        let ty = typeck_results.expr_ty_adjusted(&await_expr);\n-                        debug!(\n-                            \"maybe_note_obligation_cause_for_async_await: await_expr={:?}\",\n-                            await_expr\n-                        );\n-                        ty_matches(ty)\n-                    })\n-                    .map(|expr| expr.span);\n-                let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n-                    cause;\n+        {\n+            // Check to see if any awaited expressions have the target type.\n+            let from_awaited_ty = visitor\n+                .awaits\n+                .into_iter()\n+                .map(|id| hir.expect_expr(id))\n+                .find(|await_expr| {\n+                    let ty = typeck_results.expr_ty_adjusted(&await_expr);\n+                    debug!(\n+                        \"maybe_note_obligation_cause_for_async_await: await_expr={:?}\",\n+                        await_expr\n+                    );\n+                    ty_matches(ty)\n+                })\n+                .map(|expr| expr.span);\n+            let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } = cause;\n \n-                interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n-                interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n-            });\n+            interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n+            interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n+        };\n \n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: interior_or_upvar={:?} \\"}, {"sha": "ed22d5849e2b1d4e30944cccb3f25b3cf9c80909", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -447,7 +447,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 nested.push(Obligation::new(\n                     obligation.cause.clone(),\n-                    obligation.param_env.clone(),\n+                    obligation.param_env,\n                     normalized_super_trait,\n                 ));\n             }\n@@ -485,7 +485,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n                 nested.push(Obligation::new(\n                     obligation.cause.clone(),\n-                    obligation.param_env.clone(),\n+                    obligation.param_env,\n                     normalized_bound,\n                 ));\n             }"}, {"sha": "37abb4496ac3f61875351ec2b3ebd28a9cf255b7", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -119,7 +119,7 @@ rustc_index::newtype_index! {\n     /// Bruijn index of 0, meaning \"the innermost binder\" (in this case, a\n     /// fn). The region `'a` that appears in the second argument type (`&'a\n     /// isize`) would then be assigned a De Bruijn index of 1, meaning \"the\n-    /// second-innermost binder\". (These indices are written on the arrays\n+    /// second-innermost binder\". (These indices are written on the arrows\n     /// in the diagram).\n     ///\n     /// What is interesting is that De Bruijn index attached to a particular"}, {"sha": "0f084c5c11f399ce2badd708da29eb2fa3f62f24", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -294,17 +294,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                     closure_captures.insert(*var_hir_id, upvar_id);\n \n-                    let new_capture_kind = if let Some(capture_kind) =\n-                        upvar_capture_map.get(&upvar_id)\n-                    {\n-                        // upvar_capture_map only stores the UpvarCapture (CaptureKind),\n-                        // so we create a fake capture info with no expression.\n-                        let fake_capture_info =\n-                            ty::CaptureInfo { expr_id: None, capture_kind: capture_kind.clone() };\n-                        determine_capture_info(fake_capture_info, capture_info).capture_kind\n-                    } else {\n-                        capture_info.capture_kind\n-                    };\n+                    let new_capture_kind =\n+                        if let Some(capture_kind) = upvar_capture_map.get(&upvar_id) {\n+                            // upvar_capture_map only stores the UpvarCapture (CaptureKind),\n+                            // so we create a fake capture info with no expression.\n+                            let fake_capture_info =\n+                                ty::CaptureInfo { expr_id: None, capture_kind: *capture_kind };\n+                            determine_capture_info(fake_capture_info, capture_info).capture_kind\n+                        } else {\n+                            capture_info.capture_kind\n+                        };\n                     upvar_capture_map.insert(upvar_id, new_capture_kind);\n                 }\n             }"}, {"sha": "c70554cc6272580d144d3e701ef2d7a771b53d33", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -2141,13 +2141,8 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n             // * It must be an associated type for this trait (*not* a\n             //   supertrait).\n             if let ty::Projection(projection) = ty.kind() {\n-                if projection.substs == trait_identity_substs\n+                projection.substs == trait_identity_substs\n                     && tcx.associated_item(projection.item_def_id).container.id() == def_id\n-                {\n-                    true\n-                } else {\n-                    false\n-                }\n             } else {\n                 false\n             }"}, {"sha": "4707f12940171105ec41b55547dc0737b5dc09b8", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -1099,68 +1099,6 @@ impl<T> ExactSizeIterator for IterMut<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IterMut<'_, T> {}\n \n-impl<T> IterMut<'_, T> {\n-    /// Inserts the given element just after the element most recently returned by `.next()`.\n-    /// The inserted element does not appear in the iteration.\n-    ///\n-    /// This method will be removed soon.\n-    #[inline]\n-    #[unstable(\n-        feature = \"linked_list_extras\",\n-        reason = \"this is probably better handled by a cursor type -- we'll see\",\n-        issue = \"27794\"\n-    )]\n-    #[rustc_deprecated(\n-        reason = \"Deprecated in favor of CursorMut methods. This method will be removed soon.\",\n-        since = \"1.47.0\"\n-    )]\n-    pub fn insert_next(&mut self, element: T) {\n-        match self.head {\n-            // `push_back` is okay with aliasing `element` references\n-            None => self.list.push_back(element),\n-            Some(head) => unsafe {\n-                let prev = match head.as_ref().prev {\n-                    // `push_front` is okay with aliasing nodes\n-                    None => return self.list.push_front(element),\n-                    Some(prev) => prev,\n-                };\n-\n-                let node = Some(\n-                    Box::leak(box Node { next: Some(head), prev: Some(prev), element }).into(),\n-                );\n-\n-                // Not creating references to entire nodes to not invalidate the\n-                // reference to `element` we handed to the user.\n-                (*prev.as_ptr()).next = node;\n-                (*head.as_ptr()).prev = node;\n-\n-                self.list.len += 1;\n-            },\n-        }\n-    }\n-\n-    /// Provides a reference to the next element, without changing the iterator.\n-    ///\n-    /// This method will be removed soon.\n-    #[inline]\n-    #[unstable(\n-        feature = \"linked_list_extras\",\n-        reason = \"this is probably better handled by a cursor type -- we'll see\",\n-        issue = \"27794\"\n-    )]\n-    #[rustc_deprecated(\n-        reason = \"Deprecated in favor of CursorMut methods. This method will be removed soon.\",\n-        since = \"1.47.0\"\n-    )]\n-    pub fn peek_next(&mut self) -> Option<&mut T> {\n-        if self.len == 0 {\n-            None\n-        } else {\n-            unsafe { self.head.as_mut().map(|node| &mut node.as_mut().element) }\n-        }\n-    }\n-}\n-\n /// A cursor over a `LinkedList`.\n ///\n /// A `Cursor` is like an iterator, except that it can freely seek back-and-forth."}, {"sha": "3e74637b49f1cafef7cfe569ca1e5a4fd9ce10c8", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -206,6 +206,51 @@\n //! 2. If you're creating a collection, implementing [`IntoIterator`] for it\n //!    will allow your collection to be used with the `for` loop.\n //!\n+//! # Iterating by reference\n+//!\n+//! Since [`into_iter()`] takes `self` by value, using a `for` loop to iterate\n+//! over a collection consumes that collection. Often, you may want to iterate\n+//! over a collection without consuming it. Many collections offer methods that\n+//! provide iterators over references, conventionally called `iter()` and\n+//! `iter_mut()` respectively:\n+//!\n+//! ```\n+//! let mut values = vec![41];\n+//! for x in values.iter_mut() {\n+//!     *x += 1;\n+//! }\n+//! for x in values.iter() {\n+//!     assert_eq!(*x, 42);\n+//! }\n+//! assert_eq!(values.len(), 1); // `values` is still owned by this function.\n+//! ```\n+//!\n+//! If a collection type `C` provides `iter()`, it usually also implements\n+//! `IntoIterator` for `&C`, with an implementation that just calls `iter()`.\n+//! Likewise, a collection `C` that provides `iter_mut()` generally implements\n+//! `IntoIterator` for `&mut C` by delegating to `iter_mut()`. This enables a\n+//! convenient shorthand:\n+//!\n+//! ```\n+//! let mut values = vec![41];\n+//! for x in &mut values { // same as `values.iter_mut()`\n+//!     *x += 1;\n+//! }\n+//! for x in &values { // same as `values.iter()`\n+//!     assert_eq!(*x, 42);\n+//! }\n+//! assert_eq!(values.len(), 1);\n+//! ```\n+//!\n+//! While many collections offer `iter()`, not all offer `iter_mut()`. For\n+//! example, mutating the keys of a [`HashSet<T>`] or [`HashMap<K, V>`] could\n+//! put the collection into an inconsistent state if the key hashes change, so\n+//! these collections only offer `iter()`.\n+//!\n+//! [`into_iter()`]: IntoIterator::into_iter\n+//! [`HashSet<T>`]: ../../std/collections/struct.HashSet.html\n+//! [`HashMap<K, V>`]: ../../std/collections/struct.HashMap.html\n+//!\n //! # Adapters\n //!\n //! Functions which take an [`Iterator`] and return another [`Iterator`] are"}, {"sha": "8174cf5c373997fd7cbfa1030a89b21bcb484b5a", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -565,8 +565,12 @@ mod fn_keyword {}\n ///\n /// For more information on for-loops, see the [Rust book] or the [Reference].\n ///\n+/// See also, [`loop`], [`while`].\n+///\n /// [`in`]: keyword.in.html\n /// [`impl`]: keyword.impl.html\n+/// [`loop`]: keyword.loop.html\n+/// [`while`]: keyword.while.html\n /// [higher-ranked trait bounds]: ../reference/trait-bounds.html#higher-ranked-trait-bounds\n /// [Rust book]:\n /// ../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n@@ -842,6 +846,8 @@ mod let_keyword {}\n ///\n /// For more information on `while` and loops in general, see the [reference].\n ///\n+/// See also, [`for`], [`loop`].\n+///\n /// [`for`]: keyword.for.html\n /// [`loop`]: keyword.loop.html\n /// [reference]: ../reference/expressions/loop-expr.html#predicate-loops\n@@ -890,6 +896,10 @@ mod while_keyword {}\n ///\n /// For more information on `loop` and loops in general, see the [Reference].\n ///\n+/// See also, [`for`], [`while`].\n+///\n+/// [`for`]: keyword.for.html\n+/// [`while`]: keyword.while.html\n /// [Reference]: ../reference/expressions/loop-expr.html\n mod loop_keyword {}\n "}, {"sha": "97f40815b87b421d9e9f4357782f3148da27fd04", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -192,8 +192,10 @@ def default_build_triple(verbose):\n     # If the user already has a host build triple with an existing `rustc`\n     # install, use their preference. This fixes most issues with Windows builds\n     # being detected as GNU instead of MSVC.\n+    default_encoding = sys.getdefaultencoding()\n     try:\n         version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"])\n+        version = version.decode(default_encoding)\n         host = next(x for x in version.split('\\n') if x.startswith(\"host: \"))\n         triple = host.split(\"host: \")[1]\n         if verbose:\n@@ -204,7 +206,6 @@ def default_build_triple(verbose):\n             print(\"rustup not detected: {}\".format(e))\n             print(\"falling back to auto-detect\")\n \n-    default_encoding = sys.getdefaultencoding()\n     required = sys.platform != 'win32'\n     ostype = require([\"uname\", \"-s\"], exit=required)\n     cputype = require(['uname', '-m'], exit=required)\n@@ -794,7 +795,7 @@ def build_bootstrap(self):\n         env.setdefault(\"RUSTFLAGS\", \"\")\n         env[\"RUSTFLAGS\"] += \" -Cdebuginfo=2\"\n \n-        build_section = \"target.{}\".format(self.build_triple())\n+        build_section = \"target.{}\".format(self.build)\n         target_features = []\n         if self.get_toml(\"crt-static\", build_section) == \"true\":\n             target_features += [\"+crt-static\"]\n@@ -825,7 +826,11 @@ def build_bootstrap(self):\n         run(args, env=env, verbose=self.verbose)\n \n     def build_triple(self):\n-        \"\"\"Build triple as in LLVM\"\"\"\n+        \"\"\"Build triple as in LLVM\n+\n+        Note that `default_build_triple` is moderately expensive,\n+        so use `self.build` where possible.\n+        \"\"\"\n         config = self.get_toml('build')\n         if config:\n             return config\n@@ -892,13 +897,17 @@ def update_submodules(self):\n         filtered_submodules = []\n         submodules_names = []\n         llvm_checked_out = os.path.exists(os.path.join(self.rust_root, \"src/llvm-project/.git\"))\n+        external_llvm_provided = self.get_toml('llvm-config') or self.downloading_llvm()\n+        llvm_needed = not self.get_toml('codegen-backends', 'rust') \\\n+            or \"llvm\" in self.get_toml('codegen-backends', 'rust')\n         for module in submodules:\n             if module.endswith(\"llvm-project\"):\n-                # Don't sync the llvm-project submodule either if an external LLVM\n-                # was provided, or if we are downloading LLVM. Also, if the\n-                # submodule has been initialized already, sync it anyways so that\n-                # it doesn't mess up contributor pull requests.\n-                if self.get_toml('llvm-config') or self.downloading_llvm():\n+                # Don't sync the llvm-project submodule if an external LLVM was\n+                # provided, if we are downloading LLVM or if the LLVM backend is\n+                # not being built. Also, if the submodule has been initialized\n+                # already, sync it anyways so that it doesn't mess up contributor\n+                # pull requests.\n+                if external_llvm_provided or not llvm_needed:\n                     if self.get_toml('lld') != 'true' and not llvm_checked_out:\n                         continue\n             check = self.check_submodule(module, slow_submodules)"}, {"sha": "9af79e20630dffc081c868b0b6731242d4ffbae0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -732,11 +732,14 @@ impl<'a> Builder<'a> {\n             .env(\"CFG_RELEASE_CHANNEL\", &self.config.channel)\n             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n             .env(\"RUSTC_BOOTSTRAP\", \"1\")\n-            .arg(\"-Znormalize_docs\")\n             .arg(\"-Winvalid_codeblock_attributes\");\n         if self.config.deny_warnings {\n             cmd.arg(\"-Dwarnings\");\n         }\n+        // cfg(not(bootstrap)), can be removed on the next beta bump\n+        if compiler.stage != 0 {\n+            cmd.arg(\"-Znormalize-docs\");\n+        }\n \n         // Remove make-related flags that can cause jobserver problems.\n         cmd.env_remove(\"MAKEFLAGS\");"}, {"sha": "360e51ed2bb2a8886420ade12ccabe61c58feeda", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -1186,7 +1186,7 @@ pub fn sanitize_sh(path: &Path) -> String {\n     return change_drive(unc_to_lfs(&path)).unwrap_or(path);\n \n     fn unc_to_lfs(s: &str) -> &str {\n-        if s.starts_with(\"//?/\") { &s[4..] } else { s }\n+        s.strip_prefix(\"//?/\").unwrap_or(s)\n     }\n \n     fn change_drive(s: &str) -> Option<String> {"}, {"sha": "8cacc2512eff130ad030423180ba7f7acc46a062", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -527,7 +527,10 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"--document-private-items\");\n         cargo.rustdocflag(\"--enable-index-page\");\n         cargo.rustdocflag(\"-Zunstable-options\");\n-        cargo.rustdocflag(\"-Znormalize-docs\");\n+        // cfg(not(bootstrap)), can be removed on the next beta bump\n+        if stage != 0 {\n+            cargo.rustdocflag(\"-Znormalize-docs\");\n+        }\n         compile::rustc_cargo(builder, &mut cargo, target);\n \n         // Only include compiler crates, no dependencies of those, such as `libc`."}, {"sha": "acb941d95407ed42856a2c395a308d3938132808", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -17,6 +17,7 @@ use std::process::Command;\n \n use build_helper::{output, t};\n \n+use crate::cache::INTERNER;\n use crate::config::Target;\n use crate::Build;\n \n@@ -79,18 +80,19 @@ pub fn check(build: &mut Build) {\n     }\n \n     // We need cmake, but only if we're actually building LLVM or sanitizers.\n-    let building_llvm = build\n-        .hosts\n-        .iter()\n-        .map(|host| {\n-            build\n-                .config\n-                .target_config\n-                .get(host)\n-                .map(|config| config.llvm_config.is_none())\n-                .unwrap_or(true)\n-        })\n-        .any(|build_llvm_ourselves| build_llvm_ourselves);\n+    let building_llvm = build.config.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\"))\n+        && build\n+            .hosts\n+            .iter()\n+            .map(|host| {\n+                build\n+                    .config\n+                    .target_config\n+                    .get(host)\n+                    .map(|config| config.llvm_config.is_none())\n+                    .unwrap_or(true)\n+            })\n+            .any(|build_llvm_ourselves| build_llvm_ourselves);\n     if building_llvm || build.config.any_sanitizers_enabled() {\n         cmd_finder.must_have(\"cmake\");\n     }\n@@ -147,10 +149,12 @@ pub fn check(build: &mut Build) {\n         }\n     }\n \n-    // Externally configured LLVM requires FileCheck to exist\n-    let filecheck = build.llvm_filecheck(build.build);\n-    if !filecheck.starts_with(&build.out) && !filecheck.exists() && build.config.codegen_tests {\n-        panic!(\"FileCheck executable {:?} does not exist\", filecheck);\n+    if build.config.rust_codegen_backends.contains(&INTERNER.intern_str(\"llvm\")) {\n+        // Externally configured LLVM requires FileCheck to exist\n+        let filecheck = build.llvm_filecheck(build.build);\n+        if !filecheck.starts_with(&build.out) && !filecheck.exists() && build.config.codegen_tests {\n+            panic!(\"FileCheck executable {:?} does not exist\", filecheck);\n+        }\n     }\n \n     for target in &build.targets {\n@@ -159,11 +163,7 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n-        build\n-            .config\n-            .target_config\n-            .entry(target.clone())\n-            .or_insert(Target::from_triple(&target.triple));\n+        build.config.target_config.entry(*target).or_insert(Target::from_triple(&target.triple));\n \n         if target.contains(\"-none-\") || target.contains(\"nvptx\") {\n             if build.no_std(*target) == Some(false) {\n@@ -176,7 +176,7 @@ pub fn check(build: &mut Build) {\n             // If this is a native target (host is also musl) and no musl-root is given,\n             // fall back to the system toolchain in /usr before giving up\n             if build.musl_root(*target).is_none() && build.config.build == *target {\n-                let target = build.config.target_config.entry(target.clone()).or_default();\n+                let target = build.config.target_config.entry(*target).or_default();\n                 target.musl_root = Some(\"/usr\".into());\n             }\n             match build.musl_libdir(*target) {"}, {"sha": "b5169b05997733d40df09a0314495e61c68bd22a", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -98,7 +98,7 @@ crate fn render<T: Print, S: Print>(\n                            placeholder=\\\"Click or press \u2018S\u2019 to search, \u2018?\u2019 for more options\u2026\\\" \\\n                            type=\\\"search\\\">\\\n                 </div>\\\n-                <button class=\\\"help-button\\\">?</button>\n+                <button type=\\\"button\\\" class=\\\"help-button\\\">?</button>\n                 <a id=\\\"settings-menu\\\" href=\\\"{root_path}settings.html\\\">\\\n                     <img src=\\\"{static_root_path}wheel{suffix}.svg\\\" \\\n                          width=\\\"18\\\" \\"}, {"sha": "22096203d4ce63855857d297bf173bb4299c6daa", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -139,9 +139,9 @@ fn map_line(s: &str) -> Line<'_> {\n     let trimmed = s.trim();\n     if trimmed.starts_with(\"##\") {\n         Line::Shown(Cow::Owned(s.replacen(\"##\", \"#\", 1)))\n-    } else if trimmed.starts_with(\"# \") {\n+    } else if let Some(stripped) = trimmed.strip_prefix(\"# \") {\n         // # text\n-        Line::Hidden(&trimmed[2..])\n+        Line::Hidden(&stripped)\n     } else if trimmed == \"#\" {\n         // We cannot handle '#text' because it could be #[attr].\n         Line::Hidden(\"\")"}, {"sha": "997e1f00f859e3e1e85e350866b2a096018a1b11", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -349,8 +349,8 @@ pre.ignore:hover, .information:hover + pre.ignore {\n }\n \n #titles > button:hover, #titles > button.selected {\n+\tbackground-color: #ffffff;\n \tborder-top-color: #0089ff;\n-\tbackground-color: #353535;\n }\n \n #titles > button > div.count {"}, {"sha": "7358eae6edc907cbc4aa143749f5d70410b3d77e", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12813159a985d87a98578e05cc39200e4e8c2102/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12813159a985d87a98578e05cc39200e4e8c2102/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=12813159a985d87a98578e05cc39200e4e8c2102", "patch": "@@ -1012,15 +1012,14 @@ impl LinkCollector<'_, '_> {\n         } else {\n             // This is a bug.\n             debug!(\"attempting to resolve item without parent module: {}\", path_str);\n-            let err_kind = ResolutionFailure::NoParentItem.into();\n             resolution_failure(\n                 self,\n                 &item,\n                 path_str,\n                 disambiguator,\n                 dox,\n                 link_range,\n-                smallvec![err_kind],\n+                smallvec![ResolutionFailure::NoParentItem],\n             );\n             return None;\n         };"}]}