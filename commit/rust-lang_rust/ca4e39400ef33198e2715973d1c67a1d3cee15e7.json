{"sha": "ca4e39400ef33198e2715973d1c67a1d3cee15e7", "node_id": "C_kwDOAAsO6NoAKGNhNGUzOTQwMGVmMzMxOThlMjcxNTk3M2QxYzY3YTFkM2NlZTE1ZTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T11:10:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-13T11:10:51Z"}, "message": "Auto merge of #99203 - GuillaumeGomez:rollup-b2re0dv, r=GuillaumeGomez\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #98789 (rustdoc-json-types: Clean up derives.)\n - #98848 (Build the Clippy book as part of x.py doc)\n - #99020 (check non_exhaustive attr and private fields for transparent types)\n - #99132 (Add some autolabels for A-bootstrap and T-infra)\n - #99148 (Clarify that [iu]size bounds were only defined for the target arch)\n - #99152 (Use CSS variables to handle theming (part 2))\n - #99168 (Add regression test for #74713)\n - #99176 (:arrow_up: rust-analyzer)\n - #99183 (Mention rust-analyzer maintainers when `proc_macro` bridge is changed)\n - #99185 (llvm-wrapper: adapt for LLVM API change)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ef1ab0f047db44028413e3bdeb9ed024a8e4e491", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef1ab0f047db44028413e3bdeb9ed024a8e4e491"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca4e39400ef33198e2715973d1c67a1d3cee15e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4e39400ef33198e2715973d1c67a1d3cee15e7", "html_url": "https://github.com/rust-lang/rust/commit/ca4e39400ef33198e2715973d1c67a1d3cee15e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca4e39400ef33198e2715973d1c67a1d3cee15e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a639f89d0414a34b7a72702849f3e9f95b46de5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a639f89d0414a34b7a72702849f3e9f95b46de5c", "html_url": "https://github.com/rust-lang/rust/commit/a639f89d0414a34b7a72702849f3e9f95b46de5c"}, {"sha": "f290811aaf4a434d7bf25dda1ff16fa6bd930c8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f290811aaf4a434d7bf25dda1ff16fa6bd930c8f", "html_url": "https://github.com/rust-lang/rust/commit/f290811aaf4a434d7bf25dda1ff16fa6bd930c8f"}], "stats": {"total": 822, "additions": 565, "deletions": 257}, "files": [{"sha": "6d2cb63c1d71a126a89bede260221b41db7d7153", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -3132,6 +3132,60 @@ declare_lint! {\n     \"detects unexpected names and values in `#[cfg]` conditions\",\n }\n \n+declare_lint! {\n+    /// The `repr_transparent_external_private_fields` lint\n+    /// detects types marked `#[repr(transparent)]` that (transitively)\n+    /// contain an external ZST type marked `#[non_exhaustive]` or containing\n+    /// private fields\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (needs external crate)\n+    /// #![deny(repr_transparent_external_private_fields)]\n+    /// use foo::NonExhaustiveZst;\n+    ///\n+    /// #[repr(transparent)]\n+    /// struct Bar(u32, ([u32; 0], NonExhaustiveZst));\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    /// error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+    ///  --> src/main.rs:5:28\n+    ///   |\n+    /// 5 | struct Bar(u32, ([u32; 0], NonExhaustiveZst));\n+    ///   |                            ^^^^^^^^^^^^^^^^\n+    ///   |\n+    /// note: the lint level is defined here\n+    ///  --> src/main.rs:1:9\n+    ///   |\n+    /// 1 | #![deny(repr_transparent_external_private_fields)]\n+    ///   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    ///   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    ///   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+    ///   = note: this struct contains `NonExhaustiveZst`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Previous, Rust accepted fields that contain external private zero-sized types,\n+    /// even though it should not be a breaking change to add a non-zero-sized field to\n+    /// that private type.\n+    ///\n+    /// This is a [future-incompatible] lint to transition this\n+    /// to a hard error in the future. See [issue #78586] for more details.\n+    ///\n+    /// [issue #78586]: https://github.com/rust-lang/rust/issues/78586\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    pub REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS,\n+    Warn,\n+    \"tranparent type contains an external ZST that is marked #[non_exhaustive] or contains private fields\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #78586 <https://github.com/rust-lang/rust/issues/78586>\",\n+    };\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -3237,6 +3291,7 @@ declare_lint_pass! {\n         DEPRECATED_WHERE_CLAUSE_LOCATION,\n         TEST_UNSTABLE_LINT,\n         FFI_UNWIND_CALLS,\n+        REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS,\n     ]\n }\n "}, {"sha": "7ac3157e7a1de4bc28261ae0c672bb2ced5d8983", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -411,8 +411,14 @@ LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString, size_t AsmStringLen,\n \n extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty, char *Constraints,\n                                         size_t ConstraintsLen) {\n+#if LLVM_VERSION_LT(15, 0)\n   return InlineAsm::Verify(unwrap<FunctionType>(Ty),\n                            StringRef(Constraints, ConstraintsLen));\n+#else\n+  // llvm::Error converts to true if it is an error.\n+  return !llvm::errorToBool(InlineAsm::verify(\n+      unwrap<FunctionType>(Ty), StringRef(Constraints, ConstraintsLen)));\n+#endif\n }\n \n extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm,"}, {"sha": "79edbeab9c72e95d607331a981ff4f7ad232adbb", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 66, "deletions": 5, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -17,6 +17,7 @@ use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_infer::traits::Obligation;\n+use rustc_lint::builtin::REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -1318,7 +1319,8 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n         }\n     }\n \n-    // For each field, figure out if it's known to be a ZST and align(1)\n+    // For each field, figure out if it's known to be a ZST and align(1), with \"known\"\n+    // respecting #[non_exhaustive] attributes.\n     let field_infos = adt.all_fields().map(|field| {\n         let ty = field.ty(tcx, InternalSubsts::identity_for_item(tcx, field.did));\n         let param_env = tcx.param_env(field.did);\n@@ -1327,16 +1329,56 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n         let span = tcx.hir().span_if_local(field.did).unwrap();\n         let zst = layout.map_or(false, |layout| layout.is_zst());\n         let align1 = layout.map_or(false, |layout| layout.align.abi.bytes() == 1);\n-        (span, zst, align1)\n+        if !zst {\n+            return (span, zst, align1, None);\n+        }\n+\n+        fn check_non_exhaustive<'tcx>(\n+            tcx: TyCtxt<'tcx>,\n+            t: Ty<'tcx>,\n+        ) -> ControlFlow<(&'static str, DefId, SubstsRef<'tcx>, bool)> {\n+            match t.kind() {\n+                ty::Tuple(list) => list.iter().try_for_each(|t| check_non_exhaustive(tcx, t)),\n+                ty::Array(ty, _) => check_non_exhaustive(tcx, *ty),\n+                ty::Adt(def, subst) => {\n+                    if !def.did().is_local() {\n+                        let non_exhaustive = def.is_variant_list_non_exhaustive()\n+                            || def\n+                                .variants()\n+                                .iter()\n+                                .any(ty::VariantDef::is_field_list_non_exhaustive);\n+                        let has_priv = def.all_fields().any(|f| !f.vis.is_public());\n+                        if non_exhaustive || has_priv {\n+                            return ControlFlow::Break((\n+                                def.descr(),\n+                                def.did(),\n+                                subst,\n+                                non_exhaustive,\n+                            ));\n+                        }\n+                    }\n+                    def.all_fields()\n+                        .map(|field| field.ty(tcx, subst))\n+                        .try_for_each(|t| check_non_exhaustive(tcx, t))\n+                }\n+                _ => ControlFlow::Continue(()),\n+            }\n+        }\n+\n+        (span, zst, align1, check_non_exhaustive(tcx, ty).break_value())\n     });\n \n-    let non_zst_fields =\n-        field_infos.clone().filter_map(|(span, zst, _align1)| if !zst { Some(span) } else { None });\n+    let non_zst_fields = field_infos\n+        .clone()\n+        .filter_map(|(span, zst, _align1, _non_exhaustive)| if !zst { Some(span) } else { None });\n     let non_zst_count = non_zst_fields.clone().count();\n     if non_zst_count >= 2 {\n         bad_non_zero_sized_fields(tcx, adt, non_zst_count, non_zst_fields, sp);\n     }\n-    for (span, zst, align1) in field_infos {\n+    let incompatible_zst_fields =\n+        field_infos.clone().filter(|(_, _, _, opt)| opt.is_some()).count();\n+    let incompat = incompatible_zst_fields + non_zst_count >= 2 && non_zst_count < 2;\n+    for (span, zst, align1, non_exhaustive) in field_infos {\n         if zst && !align1 {\n             struct_span_err!(\n                 tcx.sess,\n@@ -1348,6 +1390,25 @@ pub(super) fn check_transparent<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, adt: ty::AdtD\n             .span_label(span, \"has alignment larger than 1\")\n             .emit();\n         }\n+        if incompat && let Some((descr, def_id, substs, non_exhaustive)) = non_exhaustive {\n+            tcx.struct_span_lint_hir(\n+                REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS,\n+                tcx.hir().local_def_id_to_hir_id(adt.did().expect_local()),\n+                span,\n+                |lint| {\n+                    let note = if non_exhaustive {\n+                        \"is marked with `#[non_exhaustive]`\"\n+                    } else {\n+                        \"contains private fields\"\n+                    };\n+                    let field_ty = tcx.def_path_str_with_substs(def_id, substs);\n+                    lint.build(\"zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\")\n+                        .note(format!(\"this {descr} contains `{field_ty}`, which {note}, \\\n+                            and makes it not a breaking change to become non-zero-sized in the future.\"))\n+                        .emit();\n+                },\n+            )\n+        }\n     }\n }\n "}, {"sha": "147f04a3f125d7910ff23a4187ea05c72263d2a7", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -2,9 +2,10 @@ macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $BITS_MINUS_ONE:expr, $Min:expr, $Max:expr,\n      $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n      $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n-     $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n-        /// The smallest value that can be represented by this integer type,\n-        #[doc = concat!(\"&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>.\")]\n+     $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr,\n+     $bound_condition:expr) => {\n+        /// The smallest value that can be represented by this integer type\n+        #[doc = concat!(\"(&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>\", $bound_condition, \")\")]\n         ///\n         /// # Examples\n         ///\n@@ -16,8 +17,8 @@ macro_rules! int_impl {\n         #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n         pub const MIN: Self = !0 ^ ((!0 as $UnsignedT) >> 1) as Self;\n \n-        /// The largest value that can be represented by this integer type,\n-        #[doc = concat!(\"2<sup>\", $BITS_MINUS_ONE, \"</sup> &minus; 1.\")]\n+        /// The largest value that can be represented by this integer type\n+        #[doc = concat!(\"(2<sup>\", $BITS_MINUS_ONE, \"</sup> &minus; 1\", $bound_condition, \")\")]\n         ///\n         /// # Examples\n         ///"}, {"sha": "f481399fdcf9255404ca6a4eef9e2105f36e5427", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -196,25 +196,25 @@ macro_rules! widening_impl {\n \n impl i8 {\n     int_impl! { i8, i8, u8, 8, 7, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n-    \"[0x12]\", \"[0x12]\", \"\", \"\" }\n+    \"[0x12]\", \"[0x12]\", \"\", \"\", \"\" }\n }\n \n impl i16 {\n     int_impl! { i16, i16, u16, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n-    \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n+    \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\", \"\" }\n }\n \n impl i32 {\n     int_impl! { i32, i32, u32, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n+    \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\", \"\" }\n }\n \n impl i64 {\n     int_impl! { i64, i64, u64, 64, 63, -9223372036854775808, 9223372036854775807, 12,\n     \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\" }\n+    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\", \"\" }\n }\n \n impl i128 {\n@@ -225,22 +225,24 @@ impl i128 {\n     \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n       0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n-      0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\", \"\", \"\" }\n+      0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\", \"\", \"\", \"\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n impl isize {\n     int_impl! { isize, i16, usize, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n     \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 16-bit targets\" }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n impl isize {\n     int_impl! { isize, i32, usize, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n     \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 32-bit targets\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n@@ -249,15 +251,16 @@ impl isize {\n     12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n     \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 64-bit targets\" }\n }\n \n /// If 6th bit set ascii is upper case.\n const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n impl u8 {\n     uint_impl! { u8, u8, i8, NonZeroU8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n-    \"[0x12]\", \"\", \"\" }\n+    \"[0x12]\", \"\", \"\", \"\" }\n     widening_impl! { u8, u16, 8, unsigned }\n \n     /// Checks if the value is within the ASCII range.\n@@ -810,7 +813,7 @@ impl u8 {\n \n impl u16 {\n     uint_impl! { u16, u16, i16, NonZeroU16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n-    \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n+    \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\", \"\" }\n     widening_impl! { u16, u32, 16, unsigned }\n \n     /// Checks if the value is a Unicode surrogate code point, which are disallowed values for [`char`].\n@@ -841,7 +844,7 @@ impl u16 {\n \n impl u32 {\n     uint_impl! { u32, u32, i32, NonZeroU32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-    \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n+    \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\", \"\" }\n     widening_impl! { u32, u64, 32, unsigned }\n }\n \n@@ -850,7 +853,7 @@ impl u64 {\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    \"\", \"\"}\n+    \"\", \"\", \"\"}\n     widening_impl! { u64, u128, 64, unsigned }\n }\n \n@@ -862,21 +865,23 @@ impl u128 {\n       0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n       0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n-     \"\", \"\"}\n+     \"\", \"\", \"\"}\n }\n \n #[cfg(target_pointer_width = \"16\")]\n impl usize {\n     uint_impl! { usize, u16, isize, NonZeroUsize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n     \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 16-bit targets\" }\n     widening_impl! { usize, u32, 16, unsigned }\n }\n #[cfg(target_pointer_width = \"32\")]\n impl usize {\n     uint_impl! { usize, u32, isize, NonZeroUsize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n     \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 32-bit targets\" }\n     widening_impl! { usize, u64, 32, unsigned }\n }\n \n@@ -886,7 +891,8 @@ impl usize {\n     \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n     \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n     \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n+    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n+    \" on 64-bit targets\" }\n     widening_impl! { usize, u128, 64, unsigned }\n }\n "}, {"sha": "715e78350a499d07566e00480d9ed75a2c8bbaa3", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -3,7 +3,8 @@ macro_rules! uint_impl {\n         $BITS:expr, $MaxV:expr,\n         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n         $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n-        $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n+        $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr,\n+        $bound_condition:expr) => {\n         /// The smallest value that can be represented by this integer type.\n         ///\n         /// # Examples\n@@ -16,8 +17,8 @@ macro_rules! uint_impl {\n         #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n         pub const MIN: Self = 0;\n \n-        /// The largest value that can be represented by this integer type,\n-        #[doc = concat!(\"2<sup>\", $BITS, \"</sup> &minus; 1.\")]\n+        /// The largest value that can be represented by this integer type\n+        #[doc = concat!(\"(2<sup>\", $BITS, \"</sup> &minus; 1\", $bound_condition, \")\")]\n         ///\n         /// # Examples\n         ///"}, {"sha": "712454d5048d19171ad57172d003d423d56036e0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -697,6 +697,7 @@ impl<'a> Builder<'a> {\n                 doc::RustcBook,\n                 doc::CargoBook,\n                 doc::Clippy,\n+                doc::ClippyBook,\n                 doc::Miri,\n                 doc::EmbeddedBook,\n                 doc::EditionGuide,"}, {"sha": "2852442d0be6fbb7986a84f211a84a6494cde744", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -74,6 +74,7 @@ macro_rules! book {\n // and checking against it?).\n book!(\n     CargoBook, \"src/tools/cargo/src/doc\", \"cargo\", submodule = \"src/tools/cargo\";\n+    ClippyBook, \"src/tools/clippy/book\", \"clippy\";\n     EditionGuide, \"src/doc/edition-guide\", \"edition-guide\", submodule;\n     EmbeddedBook, \"src/doc/embedded-book\", \"embedded-book\", submodule;\n     Nomicon, \"src/doc/nomicon\", \"nomicon\", submodule;"}, {"sha": "b77790e33b70af785b9c3444fd87fc344d08c564", "filename": "src/doc/index.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -93,6 +93,10 @@ accomplishing various tasks.\n \n [The Rustdoc Book](rustdoc/index.html) describes our documentation tool, `rustdoc`.\n \n+## The Clippy Book\n+\n+[The Clippy Book](clippy/index.html) describes our static analyzer, Clippy.\n+\n ## Extended Error Listing\n \n Many of Rust's errors come with error codes, and you can request extended"}, {"sha": "e8f069cdbfe0c0cd66abda695499e0ea2c55c1f9", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -141,6 +141,10 @@ h1, h2, h3, h4 {\n h1.fqn {\n \tmargin: 0;\n \tpadding: 0;\n+\tborder-bottom-color: var(--headings-border-bottom-color);\n+}\n+h2, h3, h4 {\n+\tborder-bottom-color: var(--headings-border-bottom-color);\n }\n .main-heading {\n \tdisplay: flex;\n@@ -377,6 +381,10 @@ nav.sub {\n \tobject-fit: contain;\n }\n \n+.sidebar, .mobile-topbar, .sidebar-menu-toggle {\n+\tbackground-color: var(--sidebar-background-color);\n+}\n+\n .sidebar {\n \tfont-size: 0.875rem;\n \twidth: 250px;\n@@ -443,9 +451,11 @@ nav.sub {\n /* Improve the scrollbar display on firefox */\n * {\n \tscrollbar-width: initial;\n+\tscrollbar-color: var(--scrollbar-color);\n }\n .sidebar {\n \tscrollbar-width: thin;\n+\tscrollbar-color: var(--scrollbar-color);\n }\n \n /* Improve the scrollbar display on webkit-based browsers */\n@@ -457,6 +467,13 @@ nav.sub {\n }\n ::-webkit-scrollbar-track {\n \t-webkit-box-shadow: inset 0;\n+\tbackground-color: var(--scrollbar-track-background-color);\n+}\n+.sidebar::-webkit-scrollbar-track {\n+\tbackground-color: var(--scrollbar-track-background-color);\n+}\n+::-webkit-scrollbar-thumb, .sidebar::-webkit-scrollbar-thumb {\n+\tbackground-color: var(--scrollbar-thumb-background-color);\n }\n \n /* Everything else */\n@@ -637,6 +654,9 @@ h2.location a {\n \n .docblock h5 { font-size: 1rem; }\n .docblock h6 { font-size: 0.875rem; }\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n+\tborder-bottom-color: var(--headings-border-bottom-color);\n+}\n \n .docblock {\n \tmargin-left: 24px;\n@@ -672,6 +692,11 @@ h2.location a {\n \tdisplay: inline-block;\n }\n \n+.docblock code, .docblock-short code,\n+pre, .rustdoc.source .example-wrap {\n+\tbackground-color: var(--code-block-background-color);\n+}\n+\n #main-content {\n \tposition: relative;\n }\n@@ -1914,6 +1939,10 @@ in storage.js plus the media query with (min-width: 701px)\n \t\tborder: none;\n \t}\n \n+\t.sidebar-elems {\n+\t\tbackground-color: var(--sidebar-background-color);\n+\t}\n+\n \t.source nav:not(.sidebar).sub {\n \t\tmargin-left: 32px;\n \t}"}, {"sha": "73d18df76561bab90500451e4ddf827536f6001c", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 5, "deletions": 53, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -9,6 +9,11 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--settings-input-color: #ffb454;\n \t--sidebar-background-color: #14191f;\n \t--sidebar-background-color-hover: rgba(70, 70, 70, 0.33);\n+\t--code-block-background-color: #191f26;\n+\t--scrollbar-track-background-color: transparent;\n+\t--scrollbar-thumb-background-color: #5c6773;\n+\t--scrollbar-color: #5c6773 #24292f;\n+\t--headings-border-bottom-color: #5c6773;\n }\n \n .slider {\n@@ -24,15 +29,9 @@ input:focus + .slider {\n h1, h2, h3, h4 {\n \tcolor: white;\n }\n-h1.fqn {\n-\tborder-bottom-color: #5c6773;\n-}\n h1.fqn  a {\n \tcolor: #fff;\n }\n-h2, h3, h4 {\n-\tborder-bottom-color: #5c6773;\n-}\n h4 {\n \tborder: none;\n }\n@@ -56,16 +55,8 @@ span code {\n .docblock a > code {\n \tcolor: #39AFD7 !important;\n }\n-.docblock code, .docblock-short code {\n-\tbackground-color: #191f26;\n-}\n pre, .rustdoc.source .example-wrap {\n \tcolor: #e6e1cf;\n-\tbackground-color: #191f26;\n-}\n-\n-.sidebar, .mobile-topbar, .sidebar-menu-toggle {\n-\tbackground-color: #14191f;\n }\n \n .rust-logo {\n@@ -75,29 +66,6 @@ pre, .rustdoc.source .example-wrap {\n \t\tdrop-shadow(0 -1px 0 #fff);\n }\n \n-/* Improve the scrollbar display on firefox */\n-* {\n-\tscrollbar-color: #5c6773 #24292f;\n-}\n-\n-.sidebar {\n-\tscrollbar-color: #5c6773 #24292f;\n-}\n-\n-/* Improve the scrollbar display on webkit-based browsers */\n-::-webkit-scrollbar-track {\n-\tbackground-color: transparent;\n-}\n-::-webkit-scrollbar-thumb {\n-\tbackground-color: #5c6773;\n-}\n-.sidebar::-webkit-scrollbar-track {\n-\tbackground-color: transparent;\n-}\n-.sidebar::-webkit-scrollbar-thumb {\n-\tbackground-color: #5c6773;\n-}\n-\n .sidebar .current,\n .sidebar a:hover {\n \tbackground-color: transparent;\n@@ -116,10 +84,6 @@ pre, .rustdoc.source .example-wrap {\n \tborder-right: 1px solid #ffb44c;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n-\tborder-bottom-color: #5c6773;\n-}\n-\n .docblock table td, .docblock table th {\n \tborder-color: #5c6773;\n }\n@@ -496,21 +460,9 @@ a.result-keyword:focus {}\n .sidebar a.current.keyword {}\n \n @media (max-width: 700px) {\n-\t.sidebar-menu {\n-\t\tbackground-color: #14191f;\n-\t\tborder-bottom-color: #5c6773;\n-\t\tborder-right-color: #5c6773;\n-\t}\n-\n \t.sidebar-elems {\n-\t\tbackground-color: #14191f;\n \t\tborder-right-color: #5c6773;\n \t}\n-\n-\t#sidebar-filler {\n-\t\tbackground-color: #14191f;\n-\t\tborder-bottom-color: #5c6773;\n-\t}\n }\n \n kbd {"}, {"sha": "93dca51307f58ea9dc39d2be76c64005fe6f86e9", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 6, "deletions": 53, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -2,8 +2,13 @@\n \t--main-background-color: #353535;\n \t--main-color: #ddd;\n \t--settings-input-color: #2196f3;\n-\t--sidebar-background-color: #565656;\n+\t--sidebar-background-color: #505050;\n \t--sidebar-background-color-hover: #676767;\n+\t--code-block-background-color: #2A2A2A;\n+\t--scrollbar-track-background-color: #717171;\n+\t--scrollbar-thumb-background-color: rgba(32, 34, 37, .6);\n+\t--scrollbar-color: rgba(32,34,37,.6) #5a5a5a;\n+\t--headings-border-bottom-color: #d2d2d2;\n }\n \n .slider {\n@@ -16,57 +21,17 @@ input:focus + .slider {\n \tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n }\n \n-h1.fqn {\n-\tborder-bottom-color: #d2d2d2;\n-}\n-h2, h3, h4 {\n-\tborder-bottom-color: #d2d2d2;\n-}\n-\n .in-band {\n \tbackground-color: #353535;\n }\n \n-.docblock code, .docblock-short code {\n-\tbackground-color: #2A2A2A;\n-}\n-pre, .rustdoc.source .example-wrap {\n-\tbackground-color: #2A2A2A;\n-}\n-\n-.sidebar, .mobile-topbar, .sidebar-menu-toggle {\n-\tbackground-color: #505050;\n-}\n-\n .rust-logo {\n \tfilter: drop-shadow(1px 0 0px #fff)\n \t\tdrop-shadow(0 1px 0 #fff)\n \t\tdrop-shadow(-1px 0 0 #fff)\n \t\tdrop-shadow(0 -1px 0 #fff)\n }\n \n-/* Improve the scrollbar display on firefox */\n-* {\n-\tscrollbar-color: rgb(64, 65, 67) #717171;\n-}\n-.sidebar {\n-\tscrollbar-color: rgba(32,34,37,.6) #5a5a5a;\n-}\n-\n-/* Improve the scrollbar display on webkit-based browsers */\n-::-webkit-scrollbar-track {\n-\tbackground-color: #717171;\n-}\n-::-webkit-scrollbar-thumb {\n-\tbackground-color: rgba(32, 34, 37, .6);\n-}\n-.sidebar::-webkit-scrollbar-track {\n-\tbackground-color: #717171;\n-}\n-.sidebar::-webkit-scrollbar-thumb {\n-\tbackground-color: rgba(32, 34, 37, .6);\n-}\n-\n .sidebar .current,\n .sidebar a:hover {\n \tbackground: #444;\n@@ -356,21 +321,9 @@ pre.ignore:hover, .information:hover + pre.ignore {\n }\n \n @media (max-width: 700px) {\n-\t.sidebar-menu {\n-\t\tbackground-color: #505050;\n-\t\tborder-bottom-color: #e0e0e0;\n-\t\tborder-right-color: #e0e0e0;\n-\t}\n-\n \t.sidebar-elems {\n-\t\tbackground-color: #505050;\n \t\tborder-right-color: #000;\n \t}\n-\n-\t#sidebar-filler {\n-\t\tbackground-color: #505050;\n-\t\tborder-bottom-color: #e0e0e0;\n-\t}\n }\n \n kbd {"}, {"sha": "73731bc8f9ff368c244ea8aa4b1d125680705f55", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 5, "deletions": 57, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -4,6 +4,11 @@\n \t--settings-input-color: #2196f3;\n \t--sidebar-background-color: #F5F5F5;\n \t--sidebar-background-color-hover: #E0E0E0;\n+\t--code-block-background-color: #F5F5F5;\n+\t--scrollbar-track-background-color: #dcdcdc;\n+\t--scrollbar-thumb-background-color: rgba(36, 37, 39, 0.6);\n+\t--scrollbar-color: rgba(36, 37, 39, 0.6) #d9d9d9;\n+\t--headings-border-bottom-color: #ddd;\n }\n \n .slider {\n@@ -16,57 +21,16 @@ input:focus + .slider {\n \tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n }\n \n-h1.fqn {\n-\tborder-bottom-color: #DDDDDD;\n-}\n-h2, h3, h4 {\n-\tborder-bottom-color: #DDDDDD;\n-}\n-\n .in-band {\n \tbackground-color: white;\n }\n \n-.docblock code, .docblock-short code {\n-\tbackground-color: #F5F5F5;\n-}\n-pre, .rustdoc.source .example-wrap {\n-\tbackground-color: #F5F5F5;\n-}\n-\n-.sidebar, .mobile-topbar, .sidebar-menu-toggle {\n-\tbackground-color: #F5F5F5;\n-}\n-\n-/* Improve the scrollbar display on firefox */\n-* {\n-\tscrollbar-color: rgba(36, 37, 39, 0.6) #e6e6e6;\n-}\n-\n-.sidebar {\n-\tscrollbar-color: rgba(36, 37, 39, 0.6) #d9d9d9;\n-}\n-\n .rust-logo {\n \t/* This rule exists to force other themes to explicitly style the logo.\n \t * Rustdoc has a custom linter for this purpose.\n \t */\n }\n \n-/* Improve the scrollbar display on webkit-based browsers */\n-::-webkit-scrollbar-track {\n-\tbackground-color: #ecebeb;\n-}\n-::-webkit-scrollbar-thumb {\n-\tbackground-color: rgba(36, 37, 39, 0.6);\n-}\n-.sidebar::-webkit-scrollbar-track {\n-\tbackground-color: #dcdcdc;\n-}\n-.sidebar::-webkit-scrollbar-thumb {\n-\tbackground-color: rgba(36, 37, 39, 0.6);\n-}\n-\n .sidebar .current,\n .sidebar a:hover {\n \tbackground-color: #fff;\n@@ -77,10 +41,6 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #FDFFD3 !important;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n-\tborder-bottom-color: #ddd;\n-}\n-\n .docblock table td, .docblock table th {\n \tborder-color: #ddd;\n }\n@@ -339,21 +299,9 @@ pre.ignore:hover, .information:hover + pre.ignore {\n }\n \n @media (max-width: 700px) {\n-\t.sidebar-menu {\n-\t\tbackground-color: #F5F5F5;\n-\t\tborder-bottom-color: #e0e0e0;\n-\t\tborder-right-color: #e0e0e0;\n-\t}\n-\n \t.sidebar-elems {\n-\t\tbackground-color: #F5F5F5;\n \t\tborder-right-color: #000;\n \t}\n-\n-\t#sidebar-filler {\n-\t\tbackground-color: #F5F5F5;\n-\t\tborder-bottom-color: #e0e0e0;\n-\t}\n }\n \n kbd {"}, {"sha": "db2ad953f6aa084efd27fd4335785ab54b02c9d0", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -624,7 +624,7 @@ impl FromWithTcx<clean::VariantStruct> for Struct {\n         let clean::VariantStruct { struct_type, fields } = struct_;\n         Struct {\n             struct_type: from_ctor_kind(struct_type),\n-            generics: Default::default(),\n+            generics: Generics { params: vec![], where_predicates: vec![] },\n             fields_stripped,\n             fields: ids(fields, tcx),\n             impls: Vec::new(),"}, {"sha": "1168a89a8b2bf672b62a7eccac37a64174e813f8", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -14,7 +14,7 @@ pub const FORMAT_VERSION: u32 = 15;\n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n /// tools to find or link to them.\n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]\n pub struct Crate {\n     /// The id of the root [`Module`] item of the local crate.\n     pub root: Id,\n@@ -34,7 +34,7 @@ pub struct Crate {\n     pub format_version: u32,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct ExternalCrate {\n     pub name: String,\n     pub html_root_url: Option<String>,\n@@ -44,7 +44,7 @@ pub struct ExternalCrate {\n /// information. This struct should contain enough to generate a link/reference to the item in\n /// question, or can be used by a tool that takes the json output of multiple crates to find\n /// the actual item definition with all the relevant info.\n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct ItemSummary {\n     /// Can be used to look up the name and html_root_url of the crate this item came from in the\n     /// `external_crates` map.\n@@ -56,7 +56,7 @@ pub struct ItemSummary {\n     pub kind: ItemKind,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]\n pub struct Item {\n     /// The unique identifier of this item. Can be used to find this item in various mappings.\n     pub id: Id,\n@@ -83,7 +83,7 @@ pub struct Item {\n     pub inner: ItemEnum,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Span {\n     /// The path to the source file for this span relative to the path `rustdoc` was invoked with.\n     pub filename: PathBuf,\n@@ -93,13 +93,13 @@ pub struct Span {\n     pub end: (usize, usize),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Deprecation {\n     pub since: Option<String>,\n     pub note: Option<String>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum Visibility {\n     Public,\n@@ -115,7 +115,7 @@ pub enum Visibility {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericArgs {\n     /// <'a, 32, B: Copy, C = u32>\n@@ -124,7 +124,7 @@ pub enum GenericArgs {\n     Parenthesized { inputs: Vec<Type>, output: Option<Type> },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericArg {\n     Lifetime(String),\n@@ -133,7 +133,7 @@ pub enum GenericArg {\n     Infer,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Constant {\n     #[serde(rename = \"type\")]\n     pub type_: Type,\n@@ -142,14 +142,14 @@ pub struct Constant {\n     pub is_literal: bool,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct TypeBinding {\n     pub name: String,\n     pub args: GenericArgs,\n     pub binding: TypeBindingKind,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum TypeBindingKind {\n     Equality(Term),\n@@ -159,7 +159,7 @@ pub enum TypeBindingKind {\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Id(pub String);\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum ItemKind {\n     Module,\n@@ -189,7 +189,7 @@ pub enum ItemKind {\n     Keyword,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(tag = \"kind\", content = \"inner\", rename_all = \"snake_case\")]\n pub enum ItemEnum {\n     Module(Module),\n@@ -241,21 +241,21 @@ pub enum ItemEnum {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Module {\n     pub is_crate: bool,\n     pub items: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Union {\n     pub generics: Generics,\n     pub fields_stripped: bool,\n     pub fields: Vec<Id>,\n     pub impls: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Struct {\n     pub struct_type: StructType,\n     pub generics: Generics,\n@@ -264,15 +264,15 @@ pub struct Struct {\n     pub impls: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Enum {\n     pub generics: Generics,\n     pub variants_stripped: bool,\n     pub variants: Vec<Id>,\n     pub impls: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n #[serde(tag = \"variant_kind\", content = \"variant_inner\")]\n pub enum Variant {\n@@ -281,15 +281,15 @@ pub enum Variant {\n     Struct(Vec<Id>),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum StructType {\n     Plain,\n     Tuple,\n     Unit,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Header {\n     #[serde(rename = \"const\")]\n     pub const_: bool,\n@@ -300,7 +300,7 @@ pub struct Header {\n     pub abi: Abi,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub enum Abi {\n     // We only have a concrete listing here for stable ABI's because their are so many\n     // See rustc_ast_passes::feature_gate::PostExpansionVisitor::check_abi for the list\n@@ -316,34 +316,34 @@ pub enum Abi {\n     Other(String),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub header: Header,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Method {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub header: Header,\n     pub has_body: bool,\n }\n \n-#[derive(Clone, Debug, Default, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Generics {\n     pub params: Vec<GenericParamDef>,\n     pub where_predicates: Vec<WherePredicate>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct GenericParamDef {\n     pub name: String,\n     pub kind: GenericParamDefKind,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericParamDefKind {\n     Lifetime {\n@@ -384,7 +384,7 @@ pub enum GenericParamDefKind {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum WherePredicate {\n     BoundPredicate {\n@@ -410,7 +410,7 @@ pub enum WherePredicate {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum GenericBound {\n     TraitBound {\n@@ -429,22 +429,22 @@ pub enum GenericBound {\n     Outlives(String),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum TraitBoundModifier {\n     None,\n     Maybe,\n     MaybeConst,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum Term {\n     Type(Type),\n     Constant(Constant),\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n #[serde(tag = \"kind\", content = \"inner\")]\n pub enum Type {\n@@ -498,7 +498,7 @@ pub enum Type {\n     },\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct FunctionPointer {\n     pub decl: FnDecl,\n     /// Used for Higher-Rank Trait Bounds (HRTBs)\n@@ -512,14 +512,14 @@ pub struct FunctionPointer {\n     pub header: Header,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct FnDecl {\n     pub inputs: Vec<(String, Type)>,\n     pub output: Option<Type>,\n     pub c_variadic: bool,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Trait {\n     pub is_auto: bool,\n     pub is_unsafe: bool,\n@@ -529,13 +529,13 @@ pub struct Trait {\n     pub implementations: Vec<Id>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct TraitAlias {\n     pub generics: Generics,\n     pub params: Vec<GenericBound>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Impl {\n     pub is_unsafe: bool,\n     pub generics: Generics,\n@@ -550,7 +550,7 @@ pub struct Impl {\n     pub blanket_impl: Option<Type>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub struct Import {\n     /// The full path being imported.\n@@ -564,37 +564,37 @@ pub struct Import {\n     pub glob: bool,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct ProcMacro {\n     pub kind: MacroKind,\n     pub helpers: Vec<String>,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n #[serde(rename_all = \"snake_case\")]\n pub enum MacroKind {\n     /// A bang macro `foo!()`.\n     Bang,\n     /// An attribute macro `#[foo]`.\n     Attr,\n-    /// A derive macro `#[derive(Foo)]`\n+    /// A derive macro `#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]`\n     Derive,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Typedef {\n     #[serde(rename = \"type\")]\n     pub type_: Type,\n     pub generics: Generics,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct OpaqueTy {\n     pub bounds: Vec<GenericBound>,\n     pub generics: Generics,\n }\n \n-#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Static {\n     #[serde(rename = \"type\")]\n     pub type_: Type,"}, {"sha": "0bcb997d96cde5b79f04f5df117a2add95a9a23d", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-74713.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -0,0 +1,8 @@\n+fn bug<'a>()\n+where\n+    [(); { //~ ERROR mismatched types\n+        let _: &'a (); //~ ERROR a non-static lifetime is not allowed in a `const`\n+    }]:\n+{}\n+\n+fn main() {}"}, {"sha": "e7673df0a025cfef3e4df6f900b30905bb783df2", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-74713.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-74713.stderr?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -0,0 +1,22 @@\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/issue-74713.rs:4:17\n+   |\n+LL |         let _: &'a ();\n+   |                 ^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-74713.rs:3:10\n+   |\n+LL |       [(); {\n+   |  __________^\n+LL | |         let _: &'a ();\n+LL | |     }]:\n+   | |_____^ expected `usize`, found `()`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0658.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "4bf6b54fe0787bea76ab402796cbaefa388eed68", "filename": "src/test/ui/repr/auxiliary/repr-transparent-non-exhaustive.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Frepr%2Fauxiliary%2Frepr-transparent-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Frepr%2Fauxiliary%2Frepr-transparent-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fauxiliary%2Frepr-transparent-non-exhaustive.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type = \"lib\"]\n+\n+pub struct Private { _priv: () }\n+\n+#[non_exhaustive]\n+pub struct NonExhaustive {}\n+\n+#[non_exhaustive]\n+pub enum NonExhaustiveEnum {}\n+\n+pub enum NonExhaustiveVariant {\n+    #[non_exhaustive]\n+    A,\n+}\n+\n+pub struct ExternalIndirection<T> {\n+    pub x: T,\n+}"}, {"sha": "9ccd8610dad475e3db80972685845150dae927b5", "filename": "src/test/ui/repr/repr-transparent-non-exhaustive.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.rs?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -0,0 +1,96 @@\n+#![deny(repr_transparent_external_private_fields)]\n+\n+// aux-build: repr-transparent-non-exhaustive.rs\n+extern crate repr_transparent_non_exhaustive;\n+\n+use repr_transparent_non_exhaustive::{\n+    Private,\n+    NonExhaustive,\n+    NonExhaustiveEnum,\n+    NonExhaustiveVariant,\n+    ExternalIndirection,\n+};\n+\n+pub struct InternalPrivate {\n+    _priv: (),\n+}\n+\n+#[non_exhaustive]\n+pub struct InternalNonExhaustive;\n+\n+pub struct InternalIndirection<T> {\n+    x: T,\n+}\n+\n+pub type Sized = i32;\n+\n+#[repr(transparent)]\n+pub struct T1(Sized, InternalPrivate);\n+#[repr(transparent)]\n+pub struct T2(Sized, InternalNonExhaustive);\n+#[repr(transparent)]\n+pub struct T3(Sized, InternalIndirection<(InternalPrivate, InternalNonExhaustive)>);\n+#[repr(transparent)]\n+pub struct T4(Sized, ExternalIndirection<(InternalPrivate, InternalNonExhaustive)>);\n+\n+#[repr(transparent)]\n+pub struct T5(Sized, Private);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T6(Sized, NonExhaustive);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T7(Sized, NonExhaustiveEnum);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T8(Sized, NonExhaustiveVariant);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T9(Sized, InternalIndirection<Private>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T10(Sized, InternalIndirection<NonExhaustive>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T11(Sized, InternalIndirection<NonExhaustiveEnum>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T12(Sized, InternalIndirection<NonExhaustiveVariant>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T13(Sized, ExternalIndirection<Private>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T14(Sized, ExternalIndirection<NonExhaustive>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T15(Sized, ExternalIndirection<NonExhaustiveEnum>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+#[repr(transparent)]\n+pub struct T16(Sized, ExternalIndirection<NonExhaustiveVariant>);\n+//~^ ERROR zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+//~| WARN this was previously accepted by the compiler\n+\n+fn main() {}"}, {"sha": "3b1e334a0cbe2a6738e303e311653c5b38816e96", "filename": "src/test/ui/repr/repr-transparent-non-exhaustive.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent-non-exhaustive.stderr?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -0,0 +1,127 @@\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:37:22\n+   |\n+LL | pub struct T5(Sized, Private);\n+   |                      ^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/repr-transparent-non-exhaustive.rs:1:9\n+   |\n+LL | #![deny(repr_transparent_external_private_fields)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `Private`, which contains private fields, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:42:22\n+   |\n+LL | pub struct T6(Sized, NonExhaustive);\n+   |                      ^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `NonExhaustive`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:47:22\n+   |\n+LL | pub struct T7(Sized, NonExhaustiveEnum);\n+   |                      ^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveEnum`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:52:22\n+   |\n+LL | pub struct T8(Sized, NonExhaustiveVariant);\n+   |                      ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveVariant`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:57:22\n+   |\n+LL | pub struct T9(Sized, InternalIndirection<Private>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `Private`, which contains private fields, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:62:23\n+   |\n+LL | pub struct T10(Sized, InternalIndirection<NonExhaustive>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `NonExhaustive`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:67:23\n+   |\n+LL | pub struct T11(Sized, InternalIndirection<NonExhaustiveEnum>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveEnum`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:72:23\n+   |\n+LL | pub struct T12(Sized, InternalIndirection<NonExhaustiveVariant>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveVariant`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:77:23\n+   |\n+LL | pub struct T13(Sized, ExternalIndirection<Private>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `Private`, which contains private fields, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:82:23\n+   |\n+LL | pub struct T14(Sized, ExternalIndirection<NonExhaustive>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this struct contains `NonExhaustive`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:87:23\n+   |\n+LL | pub struct T15(Sized, ExternalIndirection<NonExhaustiveEnum>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveEnum`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: zero-sized fields in repr(transparent) cannot contain external non-exhaustive types\n+  --> $DIR/repr-transparent-non-exhaustive.rs:92:23\n+   |\n+LL | pub struct T16(Sized, ExternalIndirection<NonExhaustiveVariant>);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #78586 <https://github.com/rust-lang/rust/issues/78586>\n+   = note: this enum contains `NonExhaustiveVariant`, which is marked with `#[non_exhaustive]`, and makes it not a breaking change to become non-zero-sized in the future.\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "6248d588a890b9dc13038eaa051ca56cd46d18b6", "filename": "src/tools/clippy/book/src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2FREADME.md?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -1,7 +1,7 @@\n # Clippy\n \n [![Clippy Test](https://github.com/rust-lang/rust-clippy/workflows/Clippy%20Test/badge.svg?branch=auto&event=push)](https://github.com/rust-lang/rust-clippy/actions?query=workflow%3A%22Clippy+Test%22+event%3Apush+branch%3Aauto)\n-[![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](#license)\n+[![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](https://github.com/rust-lang/rust-clippy#license)\n \n A collection of lints to catch common mistakes and improve your\n [Rust](https://github.com/rust-lang/rust) code."}, {"sha": "d06297f2e079a23b077f08e5b7bbf5d58f0d0f67", "filename": "src/tools/clippy/book/src/development/adding_lints.md", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -13,7 +13,6 @@ because that's clearly a non-descriptive name.\n   - [Testing](#testing)\n     - [Cargo lints](#cargo-lints)\n   - [Rustfix tests](#rustfix-tests)\n-  - [Edition 2018 tests](#edition-2018-tests)\n   - [Testing manually](#testing-manually)\n   - [Lint declaration](#lint-declaration)\n   - [Lint registration](#lint-registration)\n@@ -402,9 +401,8 @@ need to ensure that the MSRV configured for the project is >= the MSRV of the\n required Rust feature. If multiple features are required, just use the one with\n a lower MSRV.\n \n-First, add an MSRV alias for the required feature in\n-[`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be accessed later\n-as `msrvs::STR_STRIP_PREFIX`, for example.\n+First, add an MSRV alias for the required feature in [`clippy_utils::msrvs`].\n+This can be accessed later as `msrvs::STR_STRIP_PREFIX`, for example.\n \n ```rust\n msrv_aliases! {\n@@ -468,6 +466,8 @@ define_Conf! {\n }\n ```\n \n+[`clippy_utils::msrvs`]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/msrvs/index.html\n+\n ## Author lint\n \n If you have trouble implementing your lint, there is also the internal `author`\n@@ -583,8 +583,7 @@ the workspace directory. Adding a configuration to a lint can be useful for\n thresholds or to constrain some behavior that can be seen as a false positive\n for some users. Adding a configuration is done in the following steps:\n \n-1. Adding a new configuration entry to\n-   [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs) like this:\n+1. Adding a new configuration entry to [`clippy_lints::utils::conf`] like this:\n \n    ```rust\n    /// Lint: LINT_NAME.\n@@ -635,9 +634,9 @@ for some users. Adding a configuration is done in the following steps:\n        ```\n 3. Passing the configuration value to the lint impl struct:\n \n-   First find the struct construction in the [clippy_lints lib\n-   file](/clippy_lints/src/lib.rs). The configuration value is now cloned or\n-   copied into a local value that is then passed to the impl struct like this:\n+   First find the struct construction in the [`clippy_lints` lib file]. The\n+   configuration value is now cloned or copied into a local value that is then\n+   passed to the impl struct like this:\n \n    ```rust\n    // Default generated registration:\n@@ -653,12 +652,16 @@ for some users. Adding a configuration is done in the following steps:\n \n 4. Adding tests:\n     1. The default configured value can be tested like any normal lint in\n-       [`tests/ui`](/tests/ui).\n-    2. The configuration itself will be tested separately in\n-       [`tests/ui-toml`](/tests/ui-toml). Simply add a new subfolder with a\n-       fitting name. This folder contains a `clippy.toml` file with the\n-       configuration value and a rust file that should be linted by Clippy. The\n-       test can otherwise be written as usual.\n+       [`tests/ui`].\n+    2. The configuration itself will be tested separately in [`tests/ui-toml`].\n+       Simply add a new subfolder with a fitting name. This folder contains a\n+       `clippy.toml` file with the configuration value and a rust file that\n+       should be linted by Clippy. The test can otherwise be written as usual.\n+\n+[`clippy_lints::utils::conf`]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/conf.rs\n+[`clippy_lints` lib file]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/lib.rs\n+[`tests/ui`]: https://github.com/rust-lang/rust-clippy/blob/master/tests/ui\n+[`tests/ui-toml`]: https://github.com/rust-lang/rust-clippy/blob/master/tests/ui-toml\n \n ## Cheat Sheet\n "}, {"sha": "605897ff49cdb4dc42d468e2976cef59e7f8d9d2", "filename": "src/tools/clippy/book/src/development/basics.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fbasics.md?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -98,7 +98,7 @@ cargo dev setup intellij\n ```\n \n More about intellij command usage and reasons\n-[here](../CONTRIBUTING.md#intellij-rust)\n+[here](https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md#intellij-rust)\n \n ## lintcheck\n "}, {"sha": "15e00c7d7ce4c3e56faea6be845039c50dc6f034", "filename": "src/tools/clippy/book/src/development/common_tools_writing_lints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -276,4 +276,4 @@ functions to deal with macros:\n [LateContext]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LateContext.html\n [TyCtxt]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html\n [pat_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckResults.html#method.pat_ty\n-[paths]: ../clippy_utils/src/paths.rs\n+[paths]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/paths/index.html"}, {"sha": "5d858e0da46898210058e2e678697b1f56081417", "filename": "src/tools/clippy/book/src/usage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Fusage.md?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -148,4 +148,4 @@ clippy-driver --edition 2018 -Cpanic=abort foo.rs\n > that are not optimized as expected, for example.\n \n [Installation]: installation.md\n-[CI]: continuous_integration\n+[CI]: continuous_integration/index.md"}, {"sha": "5342f47f4276641ddb5f0a5e08fb307742d6cdc4", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -1 +1 @@\n-Subproject commit 75b22326dad1914c22484ab6672de5cae94f7457\n+Subproject commit 5342f47f4276641ddb5f0a5e08fb307742d6cdc4"}, {"sha": "3842da566a91d052087e2dbd0536907544c7d880", "filename": "triagebot.toml", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca4e39400ef33198e2715973d1c67a1d3cee15e7/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca4e39400ef33198e2715973d1c67a1d3cee15e7/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=ca4e39400ef33198e2715973d1c67a1d3cee15e7", "patch": "@@ -165,6 +165,19 @@ exclude_labels = [\n     \"T-*\",\n ]\n \n+[autolabel.\"A-bootstrap\"]\n+trigger_files = [\n+    \"x.py\",\n+    \"src/bootstrap\",\n+    \"src/tools/rust-installer\",\n+]\n+\n+[autolabel.\"T-infra\"]\n+trigger_files = [\n+    \"src/ci\",\n+    \"src/tools/bump-stage0\",\n+]\n+\n [notify-zulip.\"I-prioritize\"]\n zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"#{number} {title}\"\n@@ -279,6 +292,9 @@ Examples of `T-libs-api` changes:\n * Changing observable runtime behavior of library APIs\n \"\"\"\n \n+[mentions.\"library/proc_macro/src/bridge\"]\n+cc = [\"@rust-lang/wg-rls-2\"]\n+\n [mentions.\"src/librustdoc/clean/types.rs\"]\n cc = [\"@camelid\"]\n "}]}