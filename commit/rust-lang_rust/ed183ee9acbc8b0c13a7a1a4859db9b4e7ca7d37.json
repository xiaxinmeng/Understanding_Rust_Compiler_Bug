{"sha": "ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37", "node_id": "C_kwDOAAsO6NoAKGVkMTgzZWU5YWNiYzhiMGMxM2E3YTFhNDg1OWRiOWI0ZTdjYTdkMzc", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-29T19:45:40Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-11-21T11:45:35Z"}, "message": "Fix [`unnecessary_lazy_eval`] when type has significant drop", "tree": {"sha": "384d171c8b4cf78408238a7a20dff8e46cf671e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/384d171c8b4cf78408238a7a20dff8e46cf671e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37", "html_url": "https://github.com/rust-lang/rust/commit/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0c195961653dd41aa70a49379b137f6c816d61f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0c195961653dd41aa70a49379b137f6c816d61f", "html_url": "https://github.com/rust-lang/rust/commit/e0c195961653dd41aa70a49379b137f6c816d61f"}], "stats": {"total": 156, "additions": 92, "deletions": 64}, "files": [{"sha": "107405609fd5656465b3cc9f8ed0fdb8aeb592fc", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37", "patch": "@@ -91,6 +91,16 @@ fn fn_eagerness(cx: &LateContext<'_>, fn_id: DefId, name: Symbol, have_one_arg:\n     }\n }\n \n+fn res_has_significant_drop(res: Res, cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n+    if let Res::Def(DefKind::Ctor(..) | DefKind::Variant, _) | Res::SelfCtor(_) = res {\n+        cx.typeck_results()\n+            .expr_ty(e)\n+            .has_significant_drop(cx.tcx, cx.param_env)\n+    } else {\n+        false\n+    }\n+}\n+\n #[expect(clippy::too_many_lines)]\n fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessSuggestion {\n     struct V<'cx, 'tcx> {\n@@ -113,13 +123,8 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                     },\n                     args,\n                 ) => match self.cx.qpath_res(path, hir_id) {\n-                    Res::Def(DefKind::Ctor(..) | DefKind::Variant, _) | Res::SelfCtor(_) => {\n-                        if self\n-                            .cx\n-                            .typeck_results()\n-                            .expr_ty(e)\n-                            .has_significant_drop(self.cx.tcx, self.cx.param_env)\n-                        {\n+                    res @ (Res::Def(DefKind::Ctor(..) | DefKind::Variant, _) | Res::SelfCtor(_)) => {\n+                        if res_has_significant_drop(res, self.cx, e) {\n                             self.eagerness = ForceNoChange;\n                             return;\n                         }\n@@ -147,6 +152,12 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                     self.eagerness |= NoChange;\n                     return;\n                 },\n+                ExprKind::Path(ref path) => {\n+                    if res_has_significant_drop(self.cx.qpath_res(path, e.hir_id), self.cx, e) {\n+                        self.eagerness = ForceNoChange;\n+                        return;\n+                    }\n+                },\n                 ExprKind::MethodCall(name, ..) => {\n                     self.eagerness |= self\n                         .cx\n@@ -206,7 +217,6 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::Match(..)\n                 | ExprKind::Closure { .. }\n                 | ExprKind::Field(..)\n-                | ExprKind::Path(_)\n                 | ExprKind::AddrOf(..)\n                 | ExprKind::Struct(..)\n                 | ExprKind::Repeat(..)"}, {"sha": "22e9bd8bdc510f69b48e09fa5b9c45685437eecb", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37", "patch": "@@ -33,6 +33,14 @@ impl Drop for Issue9427 {\n     }\n }\n \n+struct Issue9427FollowUp;\n+\n+impl Drop for Issue9427FollowUp {\n+    fn drop(&mut self) {\n+        panic!(\"side effect drop\");\n+    }\n+}\n+\n fn main() {\n     let astronomers_pi = 10;\n     let ext_arr: [usize; 1] = [2];\n@@ -87,6 +95,7 @@ fn main() {\n \n     // Should not lint - bool\n     let _ = (0 == 1).then(|| Issue9427(0)); // Issue9427 has a significant drop\n+    let _ = false.then(|| Issue9427FollowUp); // Issue9427FollowUp has a significant drop\n \n     // should not lint, bind_instead_of_map takes priority\n     let _ = Some(10).and_then(|idx| Some(ext_arr[idx]));\n@@ -133,13 +142,13 @@ fn main() {\n     let _: Result<usize, usize> = res.or(Ok(astronomers_pi));\n     let _: Result<usize, usize> = res.or(Ok(ext_str.some_field));\n     let _: Result<usize, usize> = res.\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        or(Ok(ext_str.some_field));\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    or(Ok(ext_str.some_field));\n \n     // neither bind_instead_of_map nor unnecessary_lazy_eval applies here\n     let _: Result<usize, usize> = res.and_then(|x| Err(x));"}, {"sha": "8726d84a23fcfd8d438134400a1e357d8c0503df", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37", "patch": "@@ -33,6 +33,14 @@ impl Drop for Issue9427 {\n     }\n }\n \n+struct Issue9427FollowUp;\n+\n+impl Drop for Issue9427FollowUp {\n+    fn drop(&mut self) {\n+        panic!(\"side effect drop\");\n+    }\n+}\n+\n fn main() {\n     let astronomers_pi = 10;\n     let ext_arr: [usize; 1] = [2];\n@@ -87,6 +95,7 @@ fn main() {\n \n     // Should not lint - bool\n     let _ = (0 == 1).then(|| Issue9427(0)); // Issue9427 has a significant drop\n+    let _ = false.then(|| Issue9427FollowUp); // Issue9427FollowUp has a significant drop\n \n     // should not lint, bind_instead_of_map takes priority\n     let _ = Some(10).and_then(|idx| Some(ext_arr[idx]));\n@@ -133,13 +142,13 @@ fn main() {\n     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n     let _: Result<usize, usize> = res.\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        // some lines\n-        or_else(|_| Ok(ext_str.some_field));\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    // some lines\n+    or_else(|_| Ok(ext_str.some_field));\n \n     // neither bind_instead_of_map nor unnecessary_lazy_eval applies here\n     let _: Result<usize, usize> = res.and_then(|x| Err(x));"}, {"sha": "0339755442c5a7dfd1bdb5d4ac13822f0bcd2f80", "filename": "tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37/tests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37/tests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.stderr?ref=ed183ee9acbc8b0c13a7a1a4859db9b4e7ca7d37", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:48:13\n+  --> $DIR/unnecessary_lazy_eval.rs:56:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n    |             ^^^^--------------------\n@@ -9,275 +9,275 @@ LL |     let _ = opt.unwrap_or_else(|| 2);\n    = note: `-D clippy::unnecessary-lazy-evaluations` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:49:13\n+  --> $DIR/unnecessary_lazy_eval.rs:57:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n    |             ^^^^---------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:50:13\n+  --> $DIR/unnecessary_lazy_eval.rs:58:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n    |             ^^^^-------------------------------------\n    |                 |\n    |                 help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:52:13\n+  --> $DIR/unnecessary_lazy_eval.rs:60:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n    |             ^^^^---------------------\n    |                 |\n    |                 help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:53:13\n+  --> $DIR/unnecessary_lazy_eval.rs:61:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:54:13\n+  --> $DIR/unnecessary_lazy_eval.rs:62:13\n    |\n LL |     let _ = opt.or_else(|| None);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:55:13\n+  --> $DIR/unnecessary_lazy_eval.rs:63:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n    |             ^^^^------------------------\n    |                 |\n    |                 help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:56:13\n+  --> $DIR/unnecessary_lazy_eval.rs:64:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n    |             ^^^^----------------\n    |                 |\n    |                 help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:57:13\n+  --> $DIR/unnecessary_lazy_eval.rs:65:13\n    |\n LL |     let _ = nested_tuple_opt.unwrap_or_else(|| Some((1, 2)));\n    |             ^^^^^^^^^^^^^^^^^-------------------------------\n    |                              |\n    |                              help: use `unwrap_or(..)` instead: `unwrap_or(Some((1, 2)))`\n \n error: unnecessary closure used with `bool::then`\n-  --> $DIR/unnecessary_lazy_eval.rs:58:13\n+  --> $DIR/unnecessary_lazy_eval.rs:66:13\n    |\n LL |     let _ = cond.then(|| astronomers_pi);\n    |             ^^^^^-----------------------\n    |                  |\n    |                  help: use `then_some(..)` instead: `then_some(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:61:13\n+  --> $DIR/unnecessary_lazy_eval.rs:69:13\n    |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n    |             ^^^^^^^^^--------------------\n    |                      |\n    |                      help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:62:13\n+  --> $DIR/unnecessary_lazy_eval.rs:70:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n    |             ^^^^^^^^^---------------------\n    |                      |\n    |                      help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:63:28\n+  --> $DIR/unnecessary_lazy_eval.rs:71:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:64:13\n+  --> $DIR/unnecessary_lazy_eval.rs:72:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n    |             ^^^^^------------------------\n    |                  |\n    |                  help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:65:35\n+  --> $DIR/unnecessary_lazy_eval.rs:73:35\n    |\n LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n    |                                   ^^^^^----------------\n    |                                        |\n    |                                        help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:66:28\n+  --> $DIR/unnecessary_lazy_eval.rs:74:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| None);\n    |                            ^^^^^----------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:69:13\n+  --> $DIR/unnecessary_lazy_eval.rs:77:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n    |             ^^^^^^^--------------------\n    |                    |\n    |                    help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:70:13\n+  --> $DIR/unnecessary_lazy_eval.rs:78:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n    |             ^^^^^^^---------------------\n    |                    |\n    |                    help: use `and(..)` instead: `and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:71:13\n+  --> $DIR/unnecessary_lazy_eval.rs:79:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:72:13\n+  --> $DIR/unnecessary_lazy_eval.rs:80:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n    |             ^^^^^^^------------------------\n    |                    |\n    |                    help: use `get_or_insert(..)` instead: `get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:73:13\n+  --> $DIR/unnecessary_lazy_eval.rs:81:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n    |             ^^^^^^^----------------\n    |                    |\n    |                    help: use `ok_or(..)` instead: `ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:96:28\n+  --> $DIR/unnecessary_lazy_eval.rs:105:28\n    |\n LL |     let _: Option<usize> = None.or_else(|| Some(3));\n    |                            ^^^^^-------------------\n    |                                 |\n    |                                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:97:13\n+  --> $DIR/unnecessary_lazy_eval.rs:106:13\n    |\n LL |     let _ = deep.0.or_else(|| Some(3));\n    |             ^^^^^^^-------------------\n    |                    |\n    |                    help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:98:13\n+  --> $DIR/unnecessary_lazy_eval.rs:107:13\n    |\n LL |     let _ = opt.or_else(|| Some(3));\n    |             ^^^^-------------------\n    |                 |\n    |                 help: use `or(..)` instead: `or(Some(3))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:104:13\n+  --> $DIR/unnecessary_lazy_eval.rs:113:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n    |             ^^^^^---------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:105:13\n+  --> $DIR/unnecessary_lazy_eval.rs:114:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n    |             ^^^^^----------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:106:13\n+  --> $DIR/unnecessary_lazy_eval.rs:115:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n    |             ^^^^^--------------------------------------\n    |                  |\n    |                  help: use `unwrap_or(..)` instead: `unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:128:35\n+  --> $DIR/unnecessary_lazy_eval.rs:137:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(2));\n    |                                   ^^^^--------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:129:35\n+  --> $DIR/unnecessary_lazy_eval.rs:138:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n    |                                   ^^^^---------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:130:35\n+  --> $DIR/unnecessary_lazy_eval.rs:139:35\n    |\n LL |     let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n    |                                   ^^^^-------------------------------------\n    |                                       |\n    |                                       help: use `and(..)` instead: `and(Err(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:132:35\n+  --> $DIR/unnecessary_lazy_eval.rs:141:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n    |                                   ^^^^------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(2))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:133:35\n+  --> $DIR/unnecessary_lazy_eval.rs:142:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n    |                                   ^^^^-------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(astronomers_pi))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:134:35\n+  --> $DIR/unnecessary_lazy_eval.rs:143:35\n    |\n LL |     let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n    |                                   ^^^^-----------------------------------\n    |                                       |\n    |                                       help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:135:35\n+  --> $DIR/unnecessary_lazy_eval.rs:144:35\n    |\n LL |       let _: Result<usize, usize> = res.\n    |  ___________________________________^\n-LL | |         // some lines\n-LL | |         // some lines\n-LL | |         // some lines\n+LL | |     // some lines\n+LL | |     // some lines\n+LL | |     // some lines\n ...  |\n-LL | |         // some lines\n-LL | |         or_else(|_| Ok(ext_str.some_field));\n-   | |_________----------------------------------^\n-   |           |\n-   |           help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n+LL | |     // some lines\n+LL | |     or_else(|_| Ok(ext_str.some_field));\n+   | |_____----------------------------------^\n+   |       |\n+   |       help: use `or(..)` instead: `or(Ok(ext_str.some_field))`\n \n error: aborting due to 34 previous errors\n "}]}