{"sha": "f30f6def0fb2c5d77a5a36e05e84ad60d9e87078", "node_id": "C_kwDOAAsO6NoAKGYzMGY2ZGVmMGZiMmM1ZDc3YTVhMzZlMDVlODRhZDYwZDllODcwNzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-12T08:26:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-12T08:26:23Z"}, "message": "Rollup merge of #93759 - dtolnay:usetree, r=nagisa\n\nPretty print ItemKind::Use in rustfmt style\n\nThis PR backports the formatting for `use` items from https://github.com/dtolnay/prettyplease into rustc_ast_pretty.\n\nBefore:\n\n```rust\nuse core::{cmp::{Eq, Ord, PartialEq, PartialOrd},\n    convert::{AsMut, AsRef, From, Into},\n    iter::{DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator,\n    IntoIterator, Iterator},\n    marker::{Copy as Copy, Send as Send, Sized as Sized, Sync as Sync, Unpin\n    as U}, ops::{*, Drop, Fn, FnMut, FnOnce}};\n```\n\nAfter:\n\n```rust\nuse core::{\n    cmp::{Eq, Ord, PartialEq, PartialOrd},\n    convert::{AsMut, AsRef, From, Into},\n    iter::{\n        DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator,\n        IntoIterator, Iterator,\n    },\n    marker::{\n        Copy as Copy, Send as Send, Sized as Sized, Sync as Sync, Unpin as U,\n    },\n    ops::{*, Drop, Fn, FnMut, FnOnce},\n};\n```", "tree": {"sha": "d1627005ddc1f5cd6a0930822af799d98cfd55e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1627005ddc1f5cd6a0930822af799d98cfd55e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiB28vCRBK7hj4Ov3rIwAA4OIIAAGvITw75i1B4g/gRMzUkMDg\nv7/ywgw7vG03ONuApZY1SBgU3dCq11nOvpPlsss2ZZf0n/MrKsMWtFPFwPNRvCdL\n+etoHfSSCWM29CPcX31bekvOClk+5x4dvVts1PA66Nd/XeL+JkLHf8IFNE9WwPFi\ni69Ezn5xjnPDbkxau17igZ8p3zdwMsv+4VDQtFe4moRSv2aLt/YmTgJWJQWRSAQZ\ngl+kNxovEB9wdennvndOMG9eejcVwK7TUou1z4MFQK0nWOlZvzaOP0Qf5dJaHGND\neq5tTbZuv9C1LV547cxcBuizVmUw7fzV4fwIbJyk671GhfIsTvwGrDjlVz2cBqU=\n=YXHK\n-----END PGP SIGNATURE-----\n", "payload": "tree d1627005ddc1f5cd6a0930822af799d98cfd55e1\nparent 36461e04471772b235f9512c4beab48befddd1a8\nparent b64a8222ab1868490bbcadc160a8c868b2ce5d13\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644654383 +0100\ncommitter GitHub <noreply@github.com> 1644654383 +0100\n\nRollup merge of #93759 - dtolnay:usetree, r=nagisa\n\nPretty print ItemKind::Use in rustfmt style\n\nThis PR backports the formatting for `use` items from https://github.com/dtolnay/prettyplease into rustc_ast_pretty.\n\nBefore:\n\n```rust\nuse core::{cmp::{Eq, Ord, PartialEq, PartialOrd},\n    convert::{AsMut, AsRef, From, Into},\n    iter::{DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator,\n    IntoIterator, Iterator},\n    marker::{Copy as Copy, Send as Send, Sized as Sized, Sync as Sync, Unpin\n    as U}, ops::{*, Drop, Fn, FnMut, FnOnce}};\n```\n\nAfter:\n\n```rust\nuse core::{\n    cmp::{Eq, Ord, PartialEq, PartialOrd},\n    convert::{AsMut, AsRef, From, Into},\n    iter::{\n        DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator,\n        IntoIterator, Iterator,\n    },\n    marker::{\n        Copy as Copy, Send as Send, Sized as Sized, Sync as Sync, Unpin as U,\n    },\n    ops::{*, Drop, Fn, FnMut, FnOnce},\n};\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078", "html_url": "https://github.com/rust-lang/rust/commit/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36461e04471772b235f9512c4beab48befddd1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/36461e04471772b235f9512c4beab48befddd1a8", "html_url": "https://github.com/rust-lang/rust/commit/36461e04471772b235f9512c4beab48befddd1a8"}, {"sha": "b64a8222ab1868490bbcadc160a8c868b2ce5d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/b64a8222ab1868490bbcadc160a8c868b2ce5d13", "html_url": "https://github.com/rust-lang/rust/commit/b64a8222ab1868490bbcadc160a8c868b2ce5d13"}], "stats": {"total": 77, "additions": 62, "deletions": 15}, "files": [{"sha": "93310dd45c575783e54e04eaa72c3d85105466f6", "filename": "compiler/rustc_ast_pretty/src/pp/convenience.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs?ref=f30f6def0fb2c5d77a5a36e05e84ad60d9e87078", "patch": "@@ -75,6 +75,10 @@ impl Printer {\n     }\n \n     pub fn trailing_comma(&mut self) {\n+        self.scan_break(BreakToken { pre_break: Some(','), ..BreakToken::default() });\n+    }\n+\n+    pub fn trailing_comma_or_space(&mut self) {\n         self.scan_break(BreakToken {\n             blank_space: 1,\n             pre_break: Some(','),"}, {"sha": "6435f1b6141e35a66c82211ab67a2b27883ad402", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=f30f6def0fb2c5d77a5a36e05e84ad60d9e87078", "patch": "@@ -142,7 +142,7 @@ impl<'a> State<'a> {\n             if !field.is_last || has_rest {\n                 self.word_space(\",\");\n             } else {\n-                self.trailing_comma();\n+                self.trailing_comma_or_space();\n             }\n         }\n         if has_rest {"}, {"sha": "d7e9ef0e50dd864e92700acdaa9d6a1809f0fa77", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=f30f6def0fb2c5d77a5a36e05e84ad60d9e87078", "patch": "@@ -1,5 +1,6 @@\n use crate::pp::Breaks::Inconsistent;\n-use crate::pprust::state::{AnnNode, PrintState, State};\n+use crate::pprust::state::delimited::IterDelimited;\n+use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n \n use rustc_ast as ast;\n use rustc_ast::GenericBound;\n@@ -138,11 +139,10 @@ impl<'a> State<'a> {\n                 self.end(); // end outer head-block\n             }\n             ast::ItemKind::Use(ref tree) => {\n-                self.head(visibility_qualified(&item.vis, \"use\"));\n+                self.print_visibility(&item.vis);\n+                self.word_nbsp(\"use\");\n                 self.print_use_tree(tree);\n                 self.word(\";\");\n-                self.end(); // end inner head-block\n-                self.end(); // end outer head-block\n             }\n             ast::ItemKind::Static(ref ty, mutbl, ref body) => {\n                 let def = ast::Defaultness::Final;\n@@ -615,8 +615,8 @@ impl<'a> State<'a> {\n             ast::UseTreeKind::Simple(rename, ..) => {\n                 self.print_path(&tree.prefix, false, 0);\n                 if let Some(rename) = rename {\n-                    self.space();\n-                    self.word_space(\"as\");\n+                    self.nbsp();\n+                    self.word_nbsp(\"as\");\n                     self.print_ident(rename);\n                 }\n             }\n@@ -628,16 +628,36 @@ impl<'a> State<'a> {\n                 self.word(\"*\");\n             }\n             ast::UseTreeKind::Nested(ref items) => {\n-                if tree.prefix.segments.is_empty() {\n-                    self.word(\"{\");\n-                } else {\n+                if !tree.prefix.segments.is_empty() {\n                     self.print_path(&tree.prefix, false, 0);\n-                    self.word(\"::{\");\n+                    self.word(\"::\");\n+                }\n+                if items.is_empty() {\n+                    self.word(\"{}\");\n+                } else if items.len() == 1 {\n+                    self.print_use_tree(&items[0].0);\n+                } else {\n+                    self.cbox(INDENT_UNIT);\n+                    self.word(\"{\");\n+                    self.zerobreak();\n+                    self.ibox(0);\n+                    for use_tree in items.iter().delimited() {\n+                        self.print_use_tree(&use_tree.0);\n+                        if !use_tree.is_last {\n+                            self.word(\",\");\n+                            if let ast::UseTreeKind::Nested(_) = use_tree.0.kind {\n+                                self.hardbreak();\n+                            } else {\n+                                self.space();\n+                            }\n+                        }\n+                    }\n+                    self.end();\n+                    self.trailing_comma();\n+                    self.offset(-INDENT_UNIT);\n+                    self.word(\"}\");\n+                    self.end();\n                 }\n-                self.commasep(Inconsistent, &items, |this, &(ref tree, _)| {\n-                    this.print_use_tree(tree)\n-                });\n-                self.word(\"}\");\n             }\n         }\n     }"}, {"sha": "5da9523524552148852a956ed472f9b8920cad69", "filename": "src/test/pretty/use-tree.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078/src%2Ftest%2Fpretty%2Fuse-tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30f6def0fb2c5d77a5a36e05e84ad60d9e87078/src%2Ftest%2Fpretty%2Fuse-tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fuse-tree.rs?ref=f30f6def0fb2c5d77a5a36e05e84ad60d9e87078", "patch": "@@ -0,0 +1,23 @@\n+// pp-exact\n+// edition:2021\n+\n+#![allow(unused_imports)]\n+\n+use ::std::fmt::{self, Debug, Display, Write as _};\n+\n+use core::option::Option::*;\n+\n+use core::{\n+    cmp::{Eq, Ord, PartialEq, PartialOrd},\n+    convert::{AsMut, AsRef, From, Into},\n+    iter::{\n+        DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator,\n+        IntoIterator, Iterator,\n+    },\n+    marker::{\n+        Copy as Copy, Send as Send, Sized as Sized, Sync as Sync, Unpin as U,\n+    },\n+    ops::{*, Drop, Fn, FnMut, FnOnce},\n+};\n+\n+fn main() {}"}]}