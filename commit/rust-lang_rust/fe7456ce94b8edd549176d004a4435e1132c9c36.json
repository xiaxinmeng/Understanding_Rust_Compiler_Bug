{"sha": "fe7456ce94b8edd549176d004a4435e1132c9c36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNzQ1NmNlOTRiOGVkZDU0OTE3NmQwMDRhNDQzNWUxMTMyYzljMzY=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-15T14:17:58Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-06-15T14:17:58Z"}, "message": "Use track caller for bug! macro", "tree": {"sha": "746cdbef2ecf8d4a5adffa3dc0c72f874f627fc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/746cdbef2ecf8d4a5adffa3dc0c72f874f627fc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe7456ce94b8edd549176d004a4435e1132c9c36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7456ce94b8edd549176d004a4435e1132c9c36", "html_url": "https://github.com/rust-lang/rust/commit/fe7456ce94b8edd549176d004a4435e1132c9c36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe7456ce94b8edd549176d004a4435e1132c9c36/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a6de25eaa4ec1a251862d81392bc9e22704c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a6de25eaa4ec1a251862d81392bc9e22704c21", "html_url": "https://github.com/rust-lang/rust/commit/64a6de25eaa4ec1a251862d81392bc9e22704c21"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "a5482b7bdcfeb1a40c69a4b4483727fc093cfa97", "filename": "src/librustc_middle/macros.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fe7456ce94b8edd549176d004a4435e1132c9c36/src%2Flibrustc_middle%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7456ce94b8edd549176d004a4435e1132c9c36/src%2Flibrustc_middle%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmacros.rs?ref=fe7456ce94b8edd549176d004a4435e1132c9c36", "patch": "@@ -1,16 +1,20 @@\n #[macro_export]\n macro_rules! bug {\n-    () => ( bug!(\"impossible case reached\") );\n-    ($($message:tt)*) => ({\n-        $crate::util::bug::bug_fmt(file!(), line!(), format_args!($($message)*))\n-    })\n+    () => ( $crate::bug!(\"impossible case reached\") );\n+    ($msg:expr) => ({ $crate::util::bug::bug_fmt(::std::format_args!($msg)) });\n+    ($msg:expr,) => ({ $crate::bug!($msg) });\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        $crate::util::bug::bug_fmt(::std::format_args!($fmt, $($arg)+))\n+    });\n }\n \n #[macro_export]\n macro_rules! span_bug {\n-    ($span:expr, $($message:tt)*) => ({\n-        $crate::util::bug::span_bug_fmt(file!(), line!(), $span, format_args!($($message)*))\n-    })\n+    ($span:expr, $msg:expr) => ({ $crate::util::bug::span_bug_fmt($span, ::std::format_args!($msg)) });\n+    ($span:expr, $msg:expr,) => ({ $crate::span_bug!($span, $msg) });\n+    ($span:expr, $fmt:expr, $($arg:tt)+) => ({\n+        $crate::util::bug::span_bug_fmt($span, ::std::format_args!($fmt, $($arg)+))\n+    });\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "9c3a97d8332f1992c4a2f58f1a83acff28dddadd", "filename": "src/librustc_middle/util/bug.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fe7456ce94b8edd549176d004a4435e1132c9c36/src%2Flibrustc_middle%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7456ce94b8edd549176d004a4435e1132c9c36/src%2Flibrustc_middle%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Futil%2Fbug.rs?ref=fe7456ce94b8edd549176d004a4435e1132c9c36", "patch": "@@ -3,34 +3,31 @@\n use crate::ty::{tls, TyCtxt};\n use rustc_span::{MultiSpan, Span};\n use std::fmt;\n+use std::panic::Location;\n \n #[cold]\n #[inline(never)]\n-pub fn bug_fmt(file: &'static str, line: u32, args: fmt::Arguments<'_>) -> ! {\n+#[track_caller]\n+pub fn bug_fmt(args: fmt::Arguments<'_>) -> ! {\n     // this wrapper mostly exists so I don't have to write a fully\n     // qualified path of None::<Span> inside the bug!() macro definition\n-    opt_span_bug_fmt(file, line, None::<Span>, args);\n+    opt_span_bug_fmt(None::<Span>, args, Location::caller());\n }\n \n #[cold]\n #[inline(never)]\n-pub fn span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n-    span: S,\n-    args: fmt::Arguments<'_>,\n-) -> ! {\n-    opt_span_bug_fmt(file, line, Some(span), args);\n+#[track_caller]\n+pub fn span_bug_fmt<S: Into<MultiSpan>>(span: S, args: fmt::Arguments<'_>) -> ! {\n+    opt_span_bug_fmt(Some(span), args, Location::caller());\n }\n \n fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n-    file: &'static str,\n-    line: u32,\n     span: Option<S>,\n     args: fmt::Arguments<'_>,\n+    location: &Location<'_>,\n ) -> ! {\n     tls::with_opt(move |tcx| {\n-        let msg = format!(\"{}:{}: {}\", file, line, args);\n+        let msg = format!(\"{}: {}\", location, args);\n         match (tcx, span) {\n             (Some(tcx), Some(span)) => tcx.sess.diagnostic().span_bug(span, &msg),\n             (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),"}]}