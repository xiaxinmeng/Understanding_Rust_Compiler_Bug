{"sha": "9ce4db545efba697f20ab5cecbefc0589c7146ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZTRkYjU0NWVmYmE2OTdmMjBhYjVjZWNiZWZjMDU4OWM3MTQ2Y2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-31T14:54:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-31T14:54:33Z"}, "message": "Parser: groundwork", "tree": {"sha": "ecda02126426b473bf2f70777a148e569c114c98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecda02126426b473bf2f70777a148e569c114c98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce4db545efba697f20ab5cecbefc0589c7146ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce4db545efba697f20ab5cecbefc0589c7146ca", "html_url": "https://github.com/rust-lang/rust/commit/9ce4db545efba697f20ab5cecbefc0589c7146ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce4db545efba697f20ab5cecbefc0589c7146ca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98a58bf806ffda1b4d3352ed0f3e494fa25c8c74", "url": "https://api.github.com/repos/rust-lang/rust/commits/98a58bf806ffda1b4d3352ed0f3e494fa25c8c74", "html_url": "https://github.com/rust-lang/rust/commit/98a58bf806ffda1b4d3352ed0f3e494fa25c8c74"}], "stats": {"total": 167, "additions": 150, "deletions": 17}, "files": [{"sha": "7c42597630757d2885cdcbba9f8957d65a6c061d", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=9ce4db545efba697f20ab5cecbefc0589c7146ca", "patch": "@@ -16,6 +16,17 @@ use self::strings::{is_string_literal_start, scan_char, scan_byte_char_or_string\n mod comments;\n use self::comments::{scan_shebang, scan_comment};\n \n+pub fn tokenize(text: &str) -> Vec<Token> {\n+    let mut text = text;\n+    let mut acc = Vec::new();\n+    while !text.is_empty() {\n+        let token = next_token(text);\n+        acc.push(token);\n+        let len: u32 = token.len.into();\n+        text = &text[len as usize..];\n+    }\n+    acc\n+}\n pub fn next_token(text: &str) -> Token {\n     assert!(!text.is_empty());\n     let mut ptr = Ptr::new(text);"}, {"sha": "82213e2b390114f962afb9572076bd74279218a8", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9ce4db545efba697f20ab5cecbefc0589c7146ca", "patch": "@@ -5,6 +5,6 @@ mod tree;\n mod lexer;\n \n pub mod syntax_kinds;\n-pub use text::TextUnit;\n+pub use text::{TextUnit, TextRange};\n pub use tree::{SyntaxKind, Token};\n-pub use lexer::next_token;\n+pub use lexer::{next_token, tokenize};"}, {"sha": "da902e2b7ea77515b763e6602115ba10d7c227b1", "filename": "src/parser/mod.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=9ce4db545efba697f20ab5cecbefc0589c7146ca", "patch": "@@ -0,0 +1,5 @@\n+use {Token, File};\n+\n+pub fn parse(tokens: &[Token]) -> File {\n+    unimplemented!()\n+}\n\\ No newline at end of file"}, {"sha": "ee0dc839837ba6eeee67ab0d0e523dec6a228c13", "filename": "src/text.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Ftext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Ftext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftext.rs?ref=9ce4db545efba697f20ab5cecbefc0589c7146ca", "patch": "@@ -56,4 +56,63 @@ impl ops::SubAssign<TextUnit> for TextUnit {\n     fn sub_assign(&mut self, rhs: TextUnit) {\n         self.0 -= rhs.0\n     }\n+}\n+\n+\n+#[derive(Clone, Copy, PartialEq, Eq)]\n+pub struct TextRange {\n+    start: TextUnit,\n+    end: TextUnit,\n+}\n+\n+impl fmt::Debug for TextRange {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        <Self as fmt::Display>::fmt(self, f)\n+    }\n+}\n+\n+impl fmt::Display for TextRange {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"[{}; {})\", self.start(), self.end())\n+    }\n+}\n+\n+\n+impl TextRange {\n+    pub fn empty() -> TextRange {\n+        TextRange::from_to(TextUnit::new(0), TextUnit::new(0))\n+    }\n+\n+    pub fn from_to(from: TextUnit, to: TextUnit) -> TextRange {\n+        assert!(from <= to, \"Invalid text range [{}; {})\", from, to);\n+        TextRange { start: from, end: to }\n+    }\n+\n+    pub fn from_len(from: TextUnit, len: TextUnit) -> TextRange {\n+        TextRange::from_to(from, from + len)\n+    }\n+\n+    pub fn start(&self) -> TextUnit {\n+        self.start\n+    }\n+\n+    pub fn end(&self) -> TextUnit {\n+        self.end\n+    }\n+\n+    pub fn len(&self) -> TextUnit {\n+        self.end - self.start\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.start() == self.end()\n+    }\n+}\n+\n+impl ops::Index<TextRange> for str {\n+    type Output = str;\n+\n+    fn index(&self, index: TextRange) -> &str {\n+        &self[index.start().0 as usize..index.end().0 as usize]\n+    }\n }\n\\ No newline at end of file"}, {"sha": "2ac25e795e4a91b5c024fa457c2b2a1e5f3e33b3", "filename": "src/tree.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce4db545efba697f20ab5cecbefc0589c7146ca/src%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree.rs?ref=9ce4db545efba697f20ab5cecbefc0589c7146ca", "patch": "@@ -1,4 +1,4 @@\n-use text::{TextUnit};\n+use text::{TextUnit, TextRange};\n use syntax_kinds::syntax_info;\n \n use std::fmt;\n@@ -28,4 +28,74 @@ pub(crate) struct SyntaxInfo {\n pub struct Token {\n     pub kind: SyntaxKind,\n     pub len: TextUnit,\n-}\n\\ No newline at end of file\n+}\n+\n+pub struct File {\n+\ttext: String,\n+\tnodes: Vec<NodeData>,\n+}\n+\n+impl File {\n+\tpub fn root<'f>(&'f self) -> Node<'f> {\n+\t\tassert!(!self.nodes.is_empty());\n+\t\tNode { file: self, idx: NodeIdx(0) }\n+\t}\n+}\n+\n+#[derive(Clone, Copy)]\n+pub struct Node<'f> {\n+\tfile: &'f File,\n+\tidx: NodeIdx,\n+}\n+\n+impl<'f> Node<'f> {\n+\tpub fn kind(&self) -> SyntaxKind {\n+\t\tself.data().kind\n+\t}\n+\n+\tpub fn text(&self) -> &'f str {\n+\t\tlet range = self.data().range;\n+\t\t&self.file.text.as_str()[range]\n+\t}\n+\n+\tpub fn parent(&self) -> Option<Node<'f>> {\n+\t\tself.as_node(self.data().parent)\n+\t}\n+\n+\tpub fn children(&self) -> Children<'f> {\n+\t\tChildren { next: self.as_node(self.data().first_child) }\n+\t}\n+\n+\tfn data(&self) -> &'f NodeData {\n+\t\t&self.file.nodes[self.idx.0 as usize]\n+\t}\n+\n+\tfn as_node(&self, idx: Option<NodeIdx>) -> Option<Node<'f>> {\n+\t\tidx.map(|idx| Node { file: self.file, idx })\n+\t}\n+}\n+\n+pub struct Children<'f> {\n+\tnext: Option<Node<'f>>,\n+}\n+\n+impl<'f> Iterator for Children<'f> {\n+\ttype Item = Node<'f>;\n+\n+\tfn next(&mut self) -> Option<Node<'f>> {\n+\t\tlet next = self.next;\n+\t\tself.next = next.and_then(|node| node.as_node(node.data().next_sibling));\n+\t\tnext\n+\t}\n+}\n+\n+#[derive(Clone, Copy)]\n+struct NodeIdx(u32);\n+\n+struct NodeData {\n+\tkind: SyntaxKind,\n+\trange: TextRange,\n+\tparent: Option<NodeIdx>,\n+\tfirst_child: Option<NodeIdx>,\n+\tnext_sibling: Option<NodeIdx>,\n+}"}, {"sha": "beca19c24cbb7fe572b74d3c1d09e626ae56614a", "filename": "tests/lexer.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ce4db545efba697f20ab5cecbefc0589c7146ca/tests%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce4db545efba697f20ab5cecbefc0589c7146ca/tests%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Flexer.rs?ref=9ce4db545efba697f20ab5cecbefc0589c7146ca", "patch": "@@ -7,7 +7,7 @@ use std::path::{PathBuf, Path};\n use std::fs::read_dir;\n use std::fmt::Write;\n \n-use libsyntax2::{Token, next_token};\n+use libsyntax2::{Token, tokenize};\n \n #[test]\n fn lexer_tests() {\n@@ -53,18 +53,6 @@ fn lexer_test_case(path: &Path) {\n     assert_diff!(expected, actual, \"\\n\", 0)\n }\n \n-fn tokenize(text: &str) -> Vec<Token> {\n-    let mut text = text;\n-    let mut acc = Vec::new();\n-    while !text.is_empty() {\n-        let token = next_token(text);\n-        acc.push(token);\n-        let len: u32 = token.len.into();\n-        text = &text[len as usize..];\n-    }\n-    acc\n-}\n-\n fn dump_tokens(tokens: &[Token], text: &str) -> String {\n     let mut acc = String::new();\n     let mut offset = 0;"}]}