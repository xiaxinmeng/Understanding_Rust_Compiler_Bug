{"sha": "a409a12f1b3c7aa6c09405bf8e28f73b9761fd18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MDlhMTJmMWIzYzdhYTZjMDk0MDViZjhlMjhmNzNiOTc2MWZkMTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-24T16:19:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-24T16:19:22Z"}, "message": "simplify", "tree": {"sha": "7ef3563173d8b868ebb65f20cee017342f342fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ef3563173d8b868ebb65f20cee017342f342fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a409a12f1b3c7aa6c09405bf8e28f73b9761fd18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a409a12f1b3c7aa6c09405bf8e28f73b9761fd18", "html_url": "https://github.com/rust-lang/rust/commit/a409a12f1b3c7aa6c09405bf8e28f73b9761fd18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a409a12f1b3c7aa6c09405bf8e28f73b9761fd18/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "018b621f613e87af26d8f7880ea1012cb374216c", "url": "https://api.github.com/repos/rust-lang/rust/commits/018b621f613e87af26d8f7880ea1012cb374216c", "html_url": "https://github.com/rust-lang/rust/commit/018b621f613e87af26d8f7880ea1012cb374216c"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "e6eeb29a1eae85f9104378c958679391a726178a", "filename": "xtask/src/codegen/gen_parser_tests.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a409a12f1b3c7aa6c09405bf8e28f73b9761fd18/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a409a12f1b3c7aa6c09405bf8e28f73b9761fd18/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_parser_tests.rs?ref=a409a12f1b3c7aa6c09405bf8e28f73b9761fd18", "patch": "@@ -56,16 +56,16 @@ struct Tests {\n     pub err: HashMap<String, Test>,\n }\n \n-fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n+fn collect_tests(s: &str) -> Vec<Test> {\n     let mut res = vec![];\n     let prefix = \"// \";\n-    let lines = s.lines().map(str::trim_start).enumerate();\n+    let lines = s.lines().map(str::trim_start);\n \n     let mut block = vec![];\n-    for (line_idx, line) in lines {\n+    for line in lines {\n         let is_comment = line.starts_with(prefix);\n         if is_comment {\n-            block.push((line_idx, &line[prefix.len()..]));\n+            block.push(&line[prefix.len()..]);\n         } else {\n             process_block(&mut res, &block);\n             block.clear();\n@@ -74,29 +74,28 @@ fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n     process_block(&mut res, &block);\n     return res;\n \n-    fn process_block(acc: &mut Vec<(usize, Test)>, block: &[(usize, &str)]) {\n+    fn process_block(acc: &mut Vec<Test>, block: &[&str]) {\n         if block.is_empty() {\n             return;\n         }\n         let mut ok = true;\n         let mut block = block.iter();\n-        let (start_line, name) = loop {\n+        let name = loop {\n             match block.next() {\n-                Some(&(idx, line)) if line.starts_with(\"test \") => {\n-                    break (idx, line[\"test \".len()..].to_string());\n+                Some(line) if line.starts_with(\"test \") => {\n+                    break line[\"test \".len()..].to_string();\n                 }\n-                Some(&(idx, line)) if line.starts_with(\"test_err \") => {\n+                Some(line) if line.starts_with(\"test_err \") => {\n                     ok = false;\n-                    break (idx, line[\"test_err \".len()..].to_string());\n+                    break line[\"test_err \".len()..].to_string();\n                 }\n                 Some(_) => (),\n                 None => return,\n             }\n         };\n-        let text: String =\n-            block.map(|(_, line)| *line).chain(std::iter::once(\"\")).collect::<Vec<_>>().join(\"\\n\");\n+        let text: String = block.copied().chain(std::iter::once(\"\")).collect::<Vec<_>>().join(\"\\n\");\n         assert!(!text.trim().is_empty() && text.ends_with('\\n'));\n-        acc.push((start_line, Test { name, text, ok }))\n+        acc.push(Test { name, text, ok })\n     }\n }\n \n@@ -118,7 +117,7 @@ fn tests_from_dir(dir: &Path) -> Result<Tests> {\n     fn process_file(res: &mut Tests, path: &Path) -> Result<()> {\n         let text = fs::read_to_string(path)?;\n \n-        for (_, test) in collect_tests(&text) {\n+        for test in collect_tests(&text) {\n             if test.ok {\n                 if let Some(old_test) = res.ok.insert(test.name.clone(), test) {\n                     Err(format!(\"Duplicate test: {}\", old_test.name))?"}]}