{"sha": "55258de97a6365dfd2b8b0b1bad77e9246e419b9", "node_id": "C_kwDOAAsO6NoAKDU1MjU4ZGU5N2E2MzY1ZGZkMmI4YjBiMWJhZDc3ZTkyNDZlNDE5Yjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-30T20:51:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-30T20:51:01Z"}, "message": "Rollup merge of #99950 - GuillaumeGomez:rm-clean-impls, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nThis time it even allowed to remove a function.\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? `@notriddle`", "tree": {"sha": "29dba7dfe376332570a1c84450f30772fcd01508", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29dba7dfe376332570a1c84450f30772fcd01508"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55258de97a6365dfd2b8b0b1bad77e9246e419b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5Zm1CRBK7hj4Ov3rIwAAW3wIAFPZsjSH7RXcx/wdfBDcvE68\n2ohkwS6M4EaQ2WABcT7gdx071sx6SQStdjc7MI4dnMUKTS/A1+FDgm4TO2TDTUXP\nGJ0I04U3+JETYWg+nmnALAE4oX2x93LTsyD7w3I9gOltACKnm+Dg7Gfg7MIv/Z0X\nP4jGJbMoSURk7z+JWINZRF13OzgWo8GRJmjMPpl0Av6sYpLP9lt/pP4AFB5RTf6K\n23e8e7feZVMAzbB9f8vdbmi4x9PqkOpiH3WmTWFTK6nu5bqob+NO/rcZatwjQlZe\n1CrdXX6hcdoCFz1jZ6OnhLaEGme9/cRwsi/kWlPsCUqXheEvFOtPugOEL1l0QB8=\n=vd5/\n-----END PGP SIGNATURE-----\n", "payload": "tree 29dba7dfe376332570a1c84450f30772fcd01508\nparent 656cd3a48fe6e43d00b9a912e35216fa15fb487b\nparent c407ef0de06dcd3450df28eb2c0ea6396b97dcb0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659214261 +0200\ncommitter GitHub <noreply@github.com> 1659214261 +0200\n\nRollup merge of #99950 - GuillaumeGomez:rm-clean-impls, r=Dylan-DPC\n\nRemove more Clean trait implementations\n\nThis time it even allowed to remove a function.\n\nFollow-up of https://github.com/rust-lang/rust/pull/99638.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55258de97a6365dfd2b8b0b1bad77e9246e419b9", "html_url": "https://github.com/rust-lang/rust/commit/55258de97a6365dfd2b8b0b1bad77e9246e419b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55258de97a6365dfd2b8b0b1bad77e9246e419b9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "656cd3a48fe6e43d00b9a912e35216fa15fb487b", "url": "https://api.github.com/repos/rust-lang/rust/commits/656cd3a48fe6e43d00b9a912e35216fa15fb487b", "html_url": "https://github.com/rust-lang/rust/commit/656cd3a48fe6e43d00b9a912e35216fa15fb487b"}, {"sha": "c407ef0de06dcd3450df28eb2c0ea6396b97dcb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c407ef0de06dcd3450df28eb2c0ea6396b97dcb0", "html_url": "https://github.com/rust-lang/rust/commit/c407ef0de06dcd3450df28eb2c0ea6396b97dcb0"}], "stats": {"total": 68, "additions": 30, "deletions": 38}, "files": [{"sha": "838283e32daf4db61c7721f2ac85f1feb05825ac", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55258de97a6365dfd2b8b0b1bad77e9246e419b9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55258de97a6365dfd2b8b0b1bad77e9246e419b9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=55258de97a6365dfd2b8b0b1bad77e9246e419b9", "patch": "@@ -17,8 +17,8 @@ use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n     self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty, clean_ty,\n-    clean_ty_generics, clean_visibility, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId,\n-    Type, Visibility,\n+    clean_ty_generics, clean_variant_def, clean_visibility, utils, Attributes, AttributesExt,\n+    Clean, ImplKind, ItemId, Type, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -236,7 +236,7 @@ fn build_enum(cx: &mut DocContext<'_>, did: DefId) -> clean::Enum {\n \n     clean::Enum {\n         generics: clean_ty_generics(cx, cx.tcx.generics_of(did), predicates),\n-        variants: cx.tcx.adt_def(did).variants().iter().map(|v| v.clean(cx)).collect(),\n+        variants: cx.tcx.adt_def(did).variants().iter().map(|v| clean_variant_def(v, cx)).collect(),\n     }\n }\n "}, {"sha": "4067cf8441b3d65349a7554f1d4afc36307c1dfb", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/55258de97a6365dfd2b8b0b1bad77e9246e419b9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55258de97a6365dfd2b8b0b1bad77e9246e419b9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=55258de97a6365dfd2b8b0b1bad77e9246e419b9", "patch": "@@ -1824,44 +1824,36 @@ pub(crate) fn clean_visibility(vis: ty::Visibility) -> Visibility {\n     }\n }\n \n+pub(crate) fn clean_variant_def<'tcx>(variant: &ty::VariantDef, cx: &mut DocContext<'tcx>) -> Item {\n+    let kind = match variant.ctor_kind {\n+        CtorKind::Const => Variant::CLike,\n+        CtorKind::Fn => Variant::Tuple(\n+            variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n+        ),\n+        CtorKind::Fictive => Variant::Struct(VariantStruct {\n+            struct_type: CtorKind::Fictive,\n+            fields: variant.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n+        }),\n+    };\n+    let what_rustc_thinks =\n+        Item::from_def_id_and_parts(variant.def_id, Some(variant.name), VariantItem(kind), cx);\n+    // don't show `pub` for variants, which always inherit visibility\n+    Item { visibility: Inherited, ..what_rustc_thinks }\n+}\n+\n fn clean_variant_data<'tcx>(\n     variant: &hir::VariantData<'tcx>,\n     cx: &mut DocContext<'tcx>,\n-) -> VariantStruct {\n-    VariantStruct {\n-        struct_type: CtorKind::from_hir(variant),\n-        fields: variant.fields().iter().map(|x| clean_field(x, cx)).collect(),\n-    }\n-}\n-\n-impl<'tcx> Clean<'tcx, Item> for ty::VariantDef {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        let kind = match self.ctor_kind {\n-            CtorKind::Const => Variant::CLike,\n-            CtorKind::Fn => Variant::Tuple(\n-                self.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n-            ),\n-            CtorKind::Fictive => Variant::Struct(VariantStruct {\n-                struct_type: CtorKind::Fictive,\n-                fields: self.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n-            }),\n-        };\n-        let what_rustc_thinks =\n-            Item::from_def_id_and_parts(self.def_id, Some(self.name), VariantItem(kind), cx);\n-        // don't show `pub` for variants, which always inherit visibility\n-        Item { visibility: Inherited, ..what_rustc_thinks }\n-    }\n-}\n-\n-impl<'tcx> Clean<'tcx, Variant> for hir::VariantData<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Variant {\n-        match self {\n-            hir::VariantData::Struct(..) => Variant::Struct(clean_variant_data(self, cx)),\n-            hir::VariantData::Tuple(..) => {\n-                Variant::Tuple(self.fields().iter().map(|x| clean_field(x, cx)).collect())\n-            }\n-            hir::VariantData::Unit(..) => Variant::CLike,\n+) -> Variant {\n+    match variant {\n+        hir::VariantData::Struct(..) => Variant::Struct(VariantStruct {\n+            struct_type: CtorKind::from_hir(variant),\n+            fields: variant.fields().iter().map(|x| clean_field(x, cx)).collect(),\n+        }),\n+        hir::VariantData::Tuple(..) => {\n+            Variant::Tuple(variant.fields().iter().map(|x| clean_field(x, cx)).collect())\n         }\n+        hir::VariantData::Unit(..) => Variant::CLike,\n     }\n }\n \n@@ -2009,7 +2001,7 @@ fn clean_maybe_renamed_item<'tcx>(\n \n impl<'tcx> Clean<'tcx, Item> for hir::Variant<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        let kind = VariantItem(self.data.clean(cx));\n+        let kind = VariantItem(clean_variant_data(&self.data, cx));\n         let what_rustc_thinks =\n             Item::from_hir_id_and_parts(self.id, Some(self.ident.name), kind, cx);\n         // don't show `pub` for variants, which are always public"}]}