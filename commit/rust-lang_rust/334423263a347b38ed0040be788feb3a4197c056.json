{"sha": "334423263a347b38ed0040be788feb3a4197c056", "node_id": "C_kwDOAAsO6NoAKDMzNDQyMzI2M2EzNDdiMzhlZDAwNDBiZTc4OGZlYjNhNDE5N2MwNTY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-16T10:06:59Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-21T22:32:38Z"}, "message": "Run `check_match` and `check_liveness` when MIR is built instead of having an explicit phase for them", "tree": {"sha": "ba566e07eef3ccd8ee4e9d53bd9dcf12c20b8cd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba566e07eef3ccd8ee4e9d53bd9dcf12c20b8cd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/334423263a347b38ed0040be788feb3a4197c056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/334423263a347b38ed0040be788feb3a4197c056", "html_url": "https://github.com/rust-lang/rust/commit/334423263a347b38ed0040be788feb3a4197c056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/334423263a347b38ed0040be788feb3a4197c056/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb58a68de2dbc7c122c4bb2438b0d88a2897470", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb58a68de2dbc7c122c4bb2438b0d88a2897470", "html_url": "https://github.com/rust-lang/rust/commit/5bb58a68de2dbc7c122c4bb2438b0d88a2897470"}], "stats": {"total": 649, "additions": 321, "deletions": 328}, "files": [{"sha": "4a45c9e4f3ed181640eb3919afe8739e2079ed1a", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -761,27 +761,6 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n     // passes are timed inside typeck\n     rustc_hir_analysis::check_crate(tcx)?;\n \n-    sess.time(\"misc_checking_2\", || {\n-        parallel!(\n-            {\n-                sess.time(\"match_checking\", || {\n-                    tcx.hir().par_body_owners(|def_id| tcx.ensure().check_match(def_id))\n-                });\n-            },\n-            {\n-                sess.time(\"liveness_checking\", || {\n-                    tcx.hir().par_body_owners(|def_id| {\n-                        // this must run before MIR dump, because\n-                        // \"not all control paths return a value\" is reported here.\n-                        //\n-                        // maybe move the check to a MIR pass?\n-                        tcx.ensure().check_liveness(def_id);\n-                    });\n-                });\n-            }\n-        );\n-    });\n-\n     sess.time(\"MIR_borrow_checking\", || {\n         tcx.hir().par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n     });"}, {"sha": "82274318dcf32f2828775013a8a32494a71e07e9", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -51,6 +51,13 @@ fn mir_build(tcx: TyCtxt<'_>, def: LocalDefId) -> Body<'_> {\n             // of `mir_build`, so now we can steal it\n             let thir = thir.steal();\n \n+            tcx.ensure().check_match(def);\n+            // this must run before MIR dump, because\n+            // \"not all control paths return a value\" is reported here.\n+            //\n+            // maybe move the check to a MIR pass?\n+            tcx.ensure().check_liveness(def);\n+\n             match thir.body_type {\n                 thir::BodyTy::Fn(fn_sig) => construct_fn(tcx, def, &thir, expr, fn_sig),\n                 thir::BodyTy::Const(ty) => construct_const(tcx, def, &thir, expr, ty),"}, {"sha": "b6d4ee313af874161ed5ae606c4d51c8e943f7b7", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -98,6 +98,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, RootVariableMinCaptureList, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::DUMMY_SP;\n use rustc_span::{BytePos, Span};\n \n use std::collections::VecDeque;\n@@ -586,8 +587,13 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn assigned_on_exit(&self, ln: LiveNode, var: Variable) -> bool {\n-        let successor = self.successors[ln].unwrap();\n-        self.assigned_on_entry(successor, var)\n+        match self.successors[ln] {\n+            Some(successor) => self.assigned_on_entry(successor, var),\n+            None => {\n+                self.ir.tcx.sess.delay_span_bug(DUMMY_SP, \"no successor\");\n+                true\n+            }\n+        }\n     }\n \n     fn write_vars<F>(&self, wr: &mut dyn Write, mut test: F) -> io::Result<()>"}, {"sha": "41657b53fc12c261b293e302da1365d23fc3e952", "filename": "tests/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -7,15 +7,15 @@ promoted[0] in FOO: &[&i32; 1] = {\n     let mut _3: *const i32;              // in scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n \n     bb0: {\n-        _3 = const {alloc2: *const i32}; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n+        _3 = const {alloc3: *const i32}; // scope 0 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n                                          // mir::Constant\n                                          // + span: $DIR/const_promotion_extern_static.rs:13:42: 13:43\n-                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n+                                         // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n         _2 = &(*_3);                     // scope 0 at $DIR/const_promotion_extern_static.rs:+0:41: +0:43\n         _1 = [move _2];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n         _0 = &_1;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n         return;                          // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n     }\n }\n \n-alloc2 (extern static: X)\n+alloc3 (extern static: X)"}, {"sha": "25ba0face6bd8c3db615c85eb41a673d9c193ea0", "filename": "tests/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -18,11 +18,11 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n -         StorageLive(_4);                 // scope 0 at $DIR/const_promotion_extern_static.rs:+0:32: +0:45\n -         StorageLive(_5);                 // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n--         _5 = const {alloc2: *const i32}; // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n+-         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const_promotion_extern_static.rs:+0:42: +0:43\n +         _6 = const _;                    // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n                                            // mir::Constant\n -                                          // + span: $DIR/const_promotion_extern_static.rs:13:42: 13:43\n--                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc2)) }\n+-                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const_promotion_extern_static.rs:+0:41: +0:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:46\n -         _2 = &_3;                        // scope 0 at $DIR/const_promotion_extern_static.rs:+0:31: +0:55\n@@ -50,5 +50,5 @@\n       }\n   }\n - \n-- alloc2 (extern static: X)\n+- alloc3 (extern static: X)\n   "}, {"sha": "047175626e366c0e771df1c68b5730f36450c604", "filename": "tests/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -1,19 +1,3 @@\n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:36:9\n-   |\n-LL |         ref foo @ [.., ref mut bar] => (),\n-   |         ^^^^^^^        ----------- value is mutably borrowed by `bar` here\n-   |         |\n-   |         value is borrowed by `foo` here\n-\n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:120:9\n-   |\n-LL |         ref foo @ Some(box ref mut s) => (),\n-   |         ^^^^^^^            --------- value is mutably borrowed by `s` here\n-   |         |\n-   |         value is borrowed by `foo` here\n-\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:18:5\n    |\n@@ -43,6 +27,14 @@ LL |     &x;\n LL |     drop(r);\n    |          - mutable borrow later used here\n \n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:36:9\n+   |\n+LL |         ref foo @ [.., ref mut bar] => (),\n+   |         ^^^^^^^        ----------- value is mutably borrowed by `bar` here\n+   |         |\n+   |         value is borrowed by `foo` here\n+\n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:50:5\n    |\n@@ -120,6 +112,14 @@ LL |     &mut x;\n LL |     drop(r);\n    |          - immutable borrow later used here\n \n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:120:9\n+   |\n+LL |         ref foo @ Some(box ref mut s) => (),\n+   |         ^^^^^^^            --------- value is mutably borrowed by `s` here\n+   |         |\n+   |         value is borrowed by `foo` here\n+\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:134:5\n    |"}, {"sha": "8a32f0d99e7573f968c8b2bbd68d28ac9d6a407a", "filename": "tests/ui/closures/2229_closure_analysis/match/pattern-matching-should-fail.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fmatch%2Fpattern-matching-should-fail.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -1,17 +1,3 @@\n-error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n-  --> $DIR/pattern-matching-should-fail.rs:67:23\n-   |\n-LL |     let c1 = || match x { };\n-   |                       ^\n-   |\n-   = note: the matched value is of type `u8`\n-help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n-   |\n-LL ~     let c1 = || match x {\n-LL +         _ => todo!(),\n-LL ~     };\n-   |\n-\n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:8:23\n    |\n@@ -69,6 +55,20 @@ LL |     let t: !;\n LL |             match t { };\n    |                   ^ `t` used here but it isn't initialized\n \n+error[E0004]: non-exhaustive patterns: type `u8` is non-empty\n+  --> $DIR/pattern-matching-should-fail.rs:67:23\n+   |\n+LL |     let c1 = || match x { };\n+   |                       ^\n+   |\n+   = note: the matched value is of type `u8`\n+help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown\n+   |\n+LL ~     let c1 = || match x {\n+LL +         _ => todo!(),\n+LL ~     };\n+   |\n+\n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/pattern-matching-should-fail.rs:67:23\n    |"}, {"sha": "9220828014fda27d2bdf734347059442b4f218eb", "filename": "tests/ui/lint/lint-uppercase-variables.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Flint%2Flint-uppercase-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Flint%2Flint-uppercase-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-uppercase-variables.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -12,12 +12,6 @@ error[E0170]: pattern binding `Foo` is named the same as one of the variants of\n LL |     let Foo = foo::Foo::Foo;\n    |         ^^^ help: to match on the variant, qualify the path: `foo::Foo::Foo`\n \n-error[E0170]: pattern binding `Foo` is named the same as one of the variants of the type `foo::Foo`\n-  --> $DIR/lint-uppercase-variables.rs:33:17\n-   |\n-LL |     fn in_param(Foo: foo::Foo) {}\n-   |                 ^^^ help: to match on the variant, qualify the path: `foo::Foo::Foo`\n-\n warning: unused variable: `Foo`\n   --> $DIR/lint-uppercase-variables.rs:22:9\n    |\n@@ -37,6 +31,12 @@ warning: unused variable: `Foo`\n LL |     let Foo = foo::Foo::Foo;\n    |         ^^^ help: if this is intentional, prefix it with an underscore: `_Foo`\n \n+error[E0170]: pattern binding `Foo` is named the same as one of the variants of the type `foo::Foo`\n+  --> $DIR/lint-uppercase-variables.rs:33:17\n+   |\n+LL |     fn in_param(Foo: foo::Foo) {}\n+   |                 ^^^ help: to match on the variant, qualify the path: `foo::Foo::Foo`\n+\n warning: unused variable: `Foo`\n   --> $DIR/lint-uppercase-variables.rs:33:17\n    |"}, {"sha": "4852c3313969e5f6cca670db343ed7b60e452588", "filename": "tests/ui/lint/rfc-2383-lint-reason/expect_nested_lint_levels.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fexpect_nested_lint_levels.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -1,15 +1,3 @@\n-error: unused variable: `this_is_my_function`\n-  --> $DIR/expect_nested_lint_levels.rs:48:9\n-   |\n-LL |     let this_is_my_function = 3;\n-   |         ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_is_my_function`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/expect_nested_lint_levels.rs:45:10\n-   |\n-LL | #[forbid(unused_variables)]\n-   |          ^^^^^^^^^^^^^^^^\n-\n warning: variable does not need to be mutable\n   --> $DIR/expect_nested_lint_levels.rs:36:13\n    |\n@@ -25,6 +13,18 @@ note: the lint level is defined here\n LL |         unused_mut,\n    |         ^^^^^^^^^^\n \n+error: unused variable: `this_is_my_function`\n+  --> $DIR/expect_nested_lint_levels.rs:48:9\n+   |\n+LL |     let this_is_my_function = 3;\n+   |         ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_is_my_function`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/expect_nested_lint_levels.rs:45:10\n+   |\n+LL | #[forbid(unused_variables)]\n+   |          ^^^^^^^^^^^^^^^^\n+\n warning: this lint expectation is unfulfilled\n   --> $DIR/expect_nested_lint_levels.rs:7:5\n    |"}, {"sha": "169f03aed9417c80f294941876fe096a05d5b643", "filename": "tests/ui/lint/rfc-2383-lint-reason/force_warn_expected_lints_fulfilled.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Fforce_warn_expected_lints_fulfilled.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -12,12 +12,6 @@ warning: unused variable: `fox_name`\n LL |     let fox_name = \"Sir Nibbles\";\n    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_fox_name`\n \n-warning: unused variable: `this_should_fulfill_the_expectation`\n-  --> $DIR/force_warn_expected_lints_fulfilled.rs:43:9\n-   |\n-LL |     let this_should_fulfill_the_expectation = \"The `#[allow]` has no power here\";\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_should_fulfill_the_expectation`\n-\n warning: variable does not need to be mutable\n   --> $DIR/force_warn_expected_lints_fulfilled.rs:32:9\n    |\n@@ -28,6 +22,12 @@ LL |     let mut what_does_the_fox_say = \"*ding* *deng* *dung*\";\n    |\n    = note: requested on the command line with `--force-warn unused-mut`\n \n+warning: unused variable: `this_should_fulfill_the_expectation`\n+  --> $DIR/force_warn_expected_lints_fulfilled.rs:43:9\n+   |\n+LL |     let this_should_fulfill_the_expectation = \"The `#[allow]` has no power here\";\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_this_should_fulfill_the_expectation`\n+\n warning: denote infinite loops with `loop { ... }`\n   --> $DIR/force_warn_expected_lints_fulfilled.rs:10:5\n    |"}, {"sha": "09729eeba7923fa24d7773f55d342365dfa0723c", "filename": "tests/ui/lint/unused/lint-unused-variables.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Flint%2Funused%2Flint-unused-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Flint%2Funused%2Flint-unused-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused%2Flint-unused-variables.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -10,18 +10,18 @@ note: the lint level is defined here\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:14:5\n-   |\n-LL |     b: i32,\n-   |     ^ help: if this is intentional, prefix it with an underscore: `_b`\n-\n error: unused variable: `a`\n   --> $DIR/lint-unused-variables.rs:22:9\n    |\n LL |         a: i32,\n    |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n+error: unused variable: `b`\n+  --> $DIR/lint-unused-variables.rs:14:5\n+   |\n+LL |     b: i32,\n+   |     ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:29:9\n    |"}, {"sha": "016debdd396080581c1535172b3f285a3ed1e5fe", "filename": "tests/ui/liveness/liveness-consts.stderr", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fliveness%2Fliveness-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fliveness%2Fliveness-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliveness%2Fliveness-consts.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -1,32 +1,16 @@\n-warning: variable `a` is assigned to, but never used\n-  --> $DIR/liveness-consts.rs:7:13\n+warning: unused variable: `e`\n+  --> $DIR/liveness-consts.rs:24:13\n    |\n-LL |     let mut a = 0;\n-   |             ^\n+LL |         let e = 1;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_e`\n    |\n-   = note: consider using `_a` instead\n note: the lint level is defined here\n   --> $DIR/liveness-consts.rs:2:9\n    |\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n-warning: value assigned to `b` is never read\n-  --> $DIR/liveness-consts.rs:17:5\n-   |\n-LL |     b += 1;\n-   |     ^\n-   |\n-   = help: maybe it is overwritten before being read?\n-   = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n-\n-warning: unused variable: `e`\n-  --> $DIR/liveness-consts.rs:24:13\n-   |\n-LL |         let e = 1;\n-   |             ^ help: if this is intentional, prefix it with an underscore: `_e`\n-\n warning: unused variable: `s`\n   --> $DIR/liveness-consts.rs:33:24\n    |\n@@ -39,6 +23,29 @@ warning: unused variable: `z`\n LL | pub fn f(x: [u8; { let s = 17; 100 }]) -> [u8;  { let z = 18; 100 }] {\n    |                                                       ^ help: if this is intentional, prefix it with an underscore: `_z`\n \n+warning: unused variable: `z`\n+  --> $DIR/liveness-consts.rs:60:13\n+   |\n+LL |         let z = 42;\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_z`\n+\n+warning: variable `a` is assigned to, but never used\n+  --> $DIR/liveness-consts.rs:7:13\n+   |\n+LL |     let mut a = 0;\n+   |             ^\n+   |\n+   = note: consider using `_a` instead\n+\n+warning: value assigned to `b` is never read\n+  --> $DIR/liveness-consts.rs:17:5\n+   |\n+LL |     b += 1;\n+   |     ^\n+   |\n+   = help: maybe it is overwritten before being read?\n+   = note: `#[warn(unused_assignments)]` implied by `#[warn(unused)]`\n+\n warning: value assigned to `t` is never read\n   --> $DIR/liveness-consts.rs:42:9\n    |\n@@ -53,11 +60,5 @@ warning: unused variable: `w`\n LL |         let w = 10;\n    |             ^ help: if this is intentional, prefix it with an underscore: `_w`\n \n-warning: unused variable: `z`\n-  --> $DIR/liveness-consts.rs:60:13\n-   |\n-LL |         let z = 42;\n-   |             ^ help: if this is intentional, prefix it with an underscore: `_z`\n-\n warning: 8 warnings emitted\n "}, {"sha": "3ce48b1a72fca8d71353cda3702542ebf3859f44", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -54,14 +54,6 @@ LL |         ref mut a @ box ref b => {\n    |         |\n    |         value is mutably borrowed by `a` here\n \n-error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:54:11\n-   |\n-LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n-   |           ^^^^^^^^^       ----- value is borrowed by `b` here\n-   |           |\n-   |           value is mutably borrowed by `a` here\n-\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-at-and-box.rs:31:9\n    |\n@@ -120,6 +112,14 @@ LL |         ref mut a @ box ref b => {\n LL |             drop(b);\n    |                  - immutable borrow later used here\n \n+error: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:54:11\n+   |\n+LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n+   |           ^^^^^^^^^       ----- value is borrowed by `b` here\n+   |           |\n+   |           value is mutably borrowed by `a` here\n+\n error[E0502]: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:54:11\n    |"}, {"sha": "1ed019f0a69270a0c711435a6e3f951dcfb8977a", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -286,78 +286,6 @@ help: borrow this binding in the pattern to avoid moving the value\n LL |         ref mut a @ Some([ref b, ref mut c]) => {}\n    |         +++\n \n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:11:11\n-   |\n-LL |     fn f1(a @ ref b: U) {}\n-   |           ^   ----- value borrowed here after move\n-   |           |\n-   |           value moved into `a` here\n-   |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f1(ref a @ ref b: U) {}\n-   |           +++\n-\n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n-   |\n-LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |           ^^^^^        -----          ----- value borrowed here after move\n-   |           |            |\n-   |           |            value borrowed here after move\n-   |           value moved into `a` here\n-   |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f2(ref mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |           +++\n-\n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:20\n-   |\n-LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                    ^   ----- value borrowed here after move\n-   |                    |\n-   |                    value moved into `b` here\n-   |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f2(mut a @ (ref b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                    +++\n-\n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:31\n-   |\n-LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n-   |                               ^^^^^   ----- value borrowed here after move\n-   |                               |\n-   |                               value moved into `d` here\n-   |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f2(mut a @ (b @ ref c, ref mut d @ ref e): (U, U)) {}\n-   |                               +++\n-\n-error: borrow of moved value\n-  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:19:11\n-   |\n-LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n-   |           ^    ---------  ----- value borrowed here after move\n-   |           |    |\n-   |           |    value borrowed here after move\n-   |           value moved into `a` here\n-   |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n-   |\n-help: borrow this binding in the pattern to avoid moving the value\n-   |\n-LL |     fn f3(ref a @ [ref mut b, ref c]: [U; 2]) {}\n-   |           +++\n-\n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n    |\n@@ -447,6 +375,63 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         |\n    |         value moved here\n \n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:11:11\n+   |\n+LL |     fn f1(a @ ref b: U) {}\n+   |           ^   ----- value borrowed here after move\n+   |           |\n+   |           value moved into `a` here\n+   |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f1(ref a @ ref b: U) {}\n+   |           +++\n+\n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |           ^^^^^        -----          ----- value borrowed here after move\n+   |           |            |\n+   |           |            value borrowed here after move\n+   |           value moved into `a` here\n+   |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(ref mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |           +++\n+\n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:20\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                    ^   ----- value borrowed here after move\n+   |                    |\n+   |                    value moved into `b` here\n+   |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(mut a @ (ref b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                    +++\n+\n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:31\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                               ^^^^^   ----- value borrowed here after move\n+   |                               |\n+   |                               value moved into `d` here\n+   |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, ref mut d @ ref e): (U, U)) {}\n+   |                               +++\n+\n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n    |\n@@ -457,6 +442,21 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n \n+error: borrow of moved value\n+  --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:19:11\n+   |\n+LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n+   |           ^    ---------  ----- value borrowed here after move\n+   |           |    |\n+   |           |    value borrowed here after move\n+   |           value moved into `a` here\n+   |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f3(ref a @ [ref mut b, ref c]: [U; 2]) {}\n+   |           +++\n+\n error: aborting due to 33 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "c8c4d9b8fdb13a5989529ae12ba5837cbd6f29a1", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -166,48 +166,6 @@ LL |         ref mut a @ Some([b, mut c]) => {}\n    |         |                 value is moved into `b` here\n    |         value is mutably borrowed by `a` here\n \n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n-   |\n-LL |     fn f1(ref a @ b: U) {}\n-   |           ^^^^^   - value is moved into `b` here\n-   |           |\n-   |           value is borrowed by `a` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n-   |\n-LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |           ^^^^^            -----          - value is moved into `e` here\n-   |           |                |\n-   |           |                value is moved into `c` here\n-   |           value is borrowed by `a` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n-   |\n-LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |                    ^^^^^   ----- value is moved into `c` here\n-   |                    |\n-   |                    value is borrowed by `b` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n-   |\n-LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n-   |                                   ^^^^^   - value is moved into `e` here\n-   |                                   |\n-   |                                   value is borrowed by `d` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n-   |\n-LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n-   |           ^^^^^^^^^    -  ----- value is moved into `c` here\n-   |           |            |\n-   |           |            value is moved into `b` here\n-   |           value is mutably borrowed by `a` here\n-\n error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n@@ -306,6 +264,14 @@ help: borrow this binding in the pattern to avoid moving the value\n LL |         ref a @ Some((ref b @ mut c, ref d @ ref e)) => {}\n    |                                              +++\n \n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n+   |\n+LL |     fn f1(ref a @ b: U) {}\n+   |           ^^^^^   - value is moved into `b` here\n+   |           |\n+   |           value is borrowed by `a` here\n+\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n@@ -315,6 +281,31 @@ LL |     fn f1(ref a @ b: U) {}\n    |           value borrowed here after move\n    |           move occurs because value has type `U`, which does not implement the `Copy` trait\n \n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |           ^^^^^            -----          - value is moved into `e` here\n+   |           |                |\n+   |           |                value is moved into `c` here\n+   |           value is borrowed by `a` here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |                    ^^^^^   ----- value is moved into `c` here\n+   |                    |\n+   |                    value is borrowed by `b` here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n+   |\n+LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n+   |                                   ^^^^^   - value is moved into `e` here\n+   |                                   |\n+   |                                   value is borrowed by `d` here\n+\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n    |\n@@ -335,6 +326,15 @@ LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n \n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n+   |\n+LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n+   |           ^^^^^^^^^    -  ----- value is moved into `c` here\n+   |           |            |\n+   |           |            value is moved into `b` here\n+   |           value is mutably borrowed by `a` here\n+\n error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |"}, {"sha": "c0a6558a1bf3b571065845dbca94f32272b2452b", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -221,47 +221,6 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         |            value is borrowed by `b` here\n    |         value is mutably borrowed by `a` here\n \n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:11\n-   |\n-LL |     fn f1(ref a @ ref mut b: U) {}\n-   |           ^^^^^   --------- value is mutably borrowed by `b` here\n-   |           |\n-   |           value is borrowed by `a` here\n-\n-error: cannot borrow value as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n-   |\n-LL |     fn f2(ref mut a @ ref b: U) {}\n-   |           ^^^^^^^^^   ----- value is borrowed by `b` here\n-   |           |\n-   |           value is mutably borrowed by `a` here\n-\n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n-   |\n-LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n-   |           ^^^^^           ----------- value is mutably borrowed by `mid` here\n-   |           |\n-   |           value is borrowed by `a` here\n-\n-error: cannot borrow value as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:22\n-   |\n-LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n-   |                      ^^^^^   ---------   - value is moved into `c` here\n-   |                      |       |\n-   |                      |       value is mutably borrowed by `b` here\n-   |                      value is borrowed by `a` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n-   |\n-LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n-   |                              ^^^^^^^^^   - value is moved into `c` here\n-   |                              |\n-   |                              value is mutably borrowed by `b` here\n-\n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:8:31\n    |\n@@ -398,6 +357,47 @@ LL |\n LL |     *b = U;\n    |     ------ mutable borrow later used here\n \n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:11\n+   |\n+LL |     fn f1(ref a @ ref mut b: U) {}\n+   |           ^^^^^   --------- value is mutably borrowed by `b` here\n+   |           |\n+   |           value is borrowed by `a` here\n+\n+error: cannot borrow value as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n+   |\n+LL |     fn f2(ref mut a @ ref b: U) {}\n+   |           ^^^^^^^^^   ----- value is borrowed by `b` here\n+   |           |\n+   |           value is mutably borrowed by `a` here\n+\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n+   |\n+LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n+   |           ^^^^^           ----------- value is mutably borrowed by `mid` here\n+   |           |\n+   |           value is borrowed by `a` here\n+\n+error: cannot borrow value as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:22\n+   |\n+LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n+   |                      ^^^^^   ---------   - value is moved into `c` here\n+   |                      |       |\n+   |                      |       value is mutably borrowed by `b` here\n+   |                      value is borrowed by `a` here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n+   |\n+LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n+   |                              ^^^^^^^^^   - value is moved into `c` here\n+   |                              |\n+   |                              value is mutably borrowed by `b` here\n+\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |"}, {"sha": "c634ea470c5d5942a45e1cbcf348a074ec752821", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -194,50 +194,6 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     |\n    |                                     value is mutably borrowed by `a` here\n \n-error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:8:11\n-   |\n-LL |     fn f1(ref mut a @ ref mut b: U) {}\n-   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n-   |           |\n-   |           value is mutably borrowed by `a` here\n-\n-error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n-   |\n-LL |     fn f2(ref mut a @ ref mut b: U) {}\n-   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n-   |           |\n-   |           value is mutably borrowed by `a` here\n-\n-error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n-   |\n-LL |         ref mut a @ [\n-   |         ^^^^^^^^^ value is mutably borrowed by `a` here\n-LL |\n-LL |             [ref b @ .., _],\n-   |              ----- value is borrowed by `b` here\n-LL |             [_, ref mut mid @ ..],\n-   |                 ----------- value is mutably borrowed by `mid` here\n-\n-error: cannot borrow value as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:22\n-   |\n-LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n-   |                      ^^^^^^^^^   ---------   - value is moved into `c` here\n-   |                      |           |\n-   |                      |           value is mutably borrowed by `b` here\n-   |                      value is mutably borrowed by `a` here\n-\n-error: cannot move out of value because it is borrowed\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n-   |\n-LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n-   |                                  ^^^^^^^^^   - value is moved into `c` here\n-   |                                  |\n-   |                                  value is mutably borrowed by `b` here\n-\n error[E0499]: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n@@ -304,6 +260,50 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n LL |             drop(a);\n    |                  - first borrow later used here\n \n+error: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:8:11\n+   |\n+LL |     fn f1(ref mut a @ ref mut b: U) {}\n+   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |           |\n+   |           value is mutably borrowed by `a` here\n+\n+error: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n+   |\n+LL |     fn f2(ref mut a @ ref mut b: U) {}\n+   |           ^^^^^^^^^   --------- value is mutably borrowed by `b` here\n+   |           |\n+   |           value is mutably borrowed by `a` here\n+\n+error: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n+   |\n+LL |         ref mut a @ [\n+   |         ^^^^^^^^^ value is mutably borrowed by `a` here\n+LL |\n+LL |             [ref b @ .., _],\n+   |              ----- value is borrowed by `b` here\n+LL |             [_, ref mut mid @ ..],\n+   |                 ----------- value is mutably borrowed by `mid` here\n+\n+error: cannot borrow value as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:22\n+   |\n+LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n+   |                      ^^^^^^^^^   ---------   - value is moved into `c` here\n+   |                      |           |\n+   |                      |           value is mutably borrowed by `b` here\n+   |                      value is mutably borrowed by `a` here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n+   |\n+LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n+   |                                  ^^^^^^^^^   - value is moved into `c` here\n+   |                                  |\n+   |                                  value is mutably borrowed by `b` here\n+\n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |"}, {"sha": "16e1af46059a4c198d7c5ba739359598bea834da", "filename": "tests/ui/rfc-2565-param-attrs/param-attrs-cfg.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/334423263a347b38ed0040be788feb3a4197c056/tests%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr?ref=334423263a347b38ed0040be788feb3a4197c056", "patch": "@@ -10,6 +10,12 @@ note: the lint level is defined here\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n+error: unused variable: `a`\n+  --> $DIR/param-attrs-cfg.rs:41:27\n+   |\n+LL |         #[cfg(something)] a: i32,\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:30:23\n    |\n@@ -22,12 +28,6 @@ error: unused variable: `c`\n LL |     #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                        ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n-error: unused variable: `a`\n-  --> $DIR/param-attrs-cfg.rs:41:27\n-   |\n-LL |         #[cfg(something)] a: i32,\n-   |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n-\n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:48:27\n    |"}]}