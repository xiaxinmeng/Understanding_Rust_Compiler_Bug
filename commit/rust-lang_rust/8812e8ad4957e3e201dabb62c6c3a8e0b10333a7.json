{"sha": "8812e8ad4957e3e201dabb62c6c3a8e0b10333a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MTJlOGFkNDk1N2UzZTIwMWRhYmI2MmM2YzNhOGUwYjEwMzMzYTc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-23T06:08:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-25T05:22:26Z"}, "message": "syntax: calculate positions of multibyte characters more correctly.\n\nThey are still are not completely correct, since it does not handle\ngraphemes at all, just codepoints, but at least it handles the common\ncase correctly.\n\nThe calculation was previously very wrong (rather than just a little bit\nwrong): it wasn't accounting for the fact that every character is 1\nbyte, and so multibyte characters were pretending to be zero width.\n\ncc #8706", "tree": {"sha": "0bb6c15a008c4de9e87f946cc75ceb34cbf80a55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bb6c15a008c4de9e87f946cc75ceb34cbf80a55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7", "html_url": "https://github.com/rust-lang/rust/commit/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff79a4471cbf5fa4e78fcf56be129a3d56690127", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff79a4471cbf5fa4e78fcf56be129a3d56690127", "html_url": "https://github.com/rust-lang/rust/commit/ff79a4471cbf5fa4e78fcf56be129a3d56690127"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "a67d1b933a857295ca064405297ae9b15b7d12c3", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=8812e8ad4957e3e201dabb62c6c3a8e0b10333a7", "patch": "@@ -460,11 +460,12 @@ impl CodeMap {\n         for mbc in multibyte_chars.get().iter() {\n             debug!(\"codemap: {:?}-byte char at {:?}\", mbc.bytes, mbc.pos);\n             if mbc.pos < bpos {\n-                total_extra_bytes += mbc.bytes;\n+                // every character is at least one byte, so we only\n+                // count the actual extra bytes.\n+                total_extra_bytes += mbc.bytes - 1;\n                 // We should never see a byte position in the middle of a\n                 // character\n-                assert!(bpos == mbc.pos ||\n-                        bpos.to_uint() >= mbc.pos.to_uint() + mbc.bytes);\n+                assert!(bpos.to_uint() >= mbc.pos.to_uint() + mbc.bytes);\n             } else {\n                 break;\n             }"}, {"sha": "2d6ecd3c55efcf3b5da0d256e2f0c05ee87ff81a", "filename": "src/test/run-make/unicode-input/Makefile", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2FMakefile?ref=8812e8ad4957e3e201dabb62c6c3a8e0b10333a7", "patch": "@@ -4,3 +4,8 @@ all:\n \t# check that we don't ICE on unicode input, issue #11178\n \t$(RUSTC) multiple_files.rs\n \t$(call RUN,multiple_files)  \"$(RUSTC)\" \"$(TMPDIR)\"\n+\n+\t# check that our multibyte-ident spans are (approximately) the\n+\t# correct length. issue #8706\n+\t$(RUSTC) span_length.rs\n+\t$(call RUN,span_length) \"$(RUSTC)\" \"$(TMPDIR)\""}, {"sha": "68bec1d215a27374b346db71ce20c9114ef63234", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=8812e8ad4957e3e201dabb62c6c3a8e0b10333a7", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use std::{char, os, run, str};\n use std::rand::{task_rng, Rng};\n use std::io::File;\n@@ -36,7 +46,8 @@ fn main() {\n \n     for _ in range(0, 100) {\n         {\n-            let mut w = File::create(&tmpdir.join(\"unicode_input_multiple_files_chars.rs\")).unwrap();\n+            let randoms = tmpdir.join(\"unicode_input_multiple_files_chars.rs\");\n+            let mut w = File::create(&randoms).unwrap();\n             for _ in range(0, 30) {\n                 let _ = w.write_char(random_char());\n             }"}, {"sha": "c437b70baf3fcf181751c9598d00512fef66ad0b", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8812e8ad4957e3e201dabb62c6c3a8e0b10333a7/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=8812e8ad4957e3e201dabb62c6c3a8e0b10333a7", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::{char, os, run, str};\n+use std::rand::{task_rng, Rng};\n+use std::io::File;\n+\n+// creates a file with `fn main() { <random ident> }` and checks the\n+// compiler emits a span of the appropriate length (for the\n+// \"unresolved name\" message); currently just using the number of code\n+// points, but should be the number of graphemes (FIXME #7043)\n+\n+fn random_char() -> char {\n+    let mut rng = task_rng();\n+    // a subset of the XID_start unicode table (ensuring that the\n+    // compiler doesn't fail with an \"unrecognised token\" error)\n+    let (lo, hi): (u32, u32) = match rng.gen_range(1, 4 + 1) {\n+        1 => (0x41, 0x5a),\n+        2 => (0xf8, 0x1ba),\n+        3 => (0x1401, 0x166c),\n+        _ => (0x10400, 0x1044f)\n+    };\n+\n+    char::from_u32(rng.gen_range(lo, hi + 1)).unwrap()\n+}\n+\n+fn main() {\n+    let args = os::args();\n+    let rustc = args[1].as_slice();\n+    let tmpdir = Path::new(args[2].as_slice());\n+\n+    let main_file = tmpdir.join(\"span_main.rs\");\n+    let main_file_str = main_file.as_str().unwrap();\n+\n+    for _ in range(0, 100) {\n+        let n = task_rng().gen_range(3u, 20);\n+\n+        {\n+            let _ = write!(&mut File::create(&main_file).unwrap(),\n+                           r\"\\#[feature(non_ascii_idents)]; fn main() \\{ {} \\}\",\n+                           // random string of length n\n+                           range(0, n).map(|_| random_char()).collect::<~str>());\n+        }\n+\n+        // rustc is passed to us with --out-dir and -L etc., so we\n+        // can't exec it directly\n+        let result = run::process_output(\"sh\", [~\"-c\", rustc + \" \" + main_file_str]).unwrap();\n+\n+        let err = str::from_utf8_lossy(result.error);\n+\n+        // the span should end the line (e.g no extra ~'s)\n+        let expected_span = \"^\" + \"~\".repeat(n - 1) + \"\\n\";\n+        assert!(err.as_slice().contains(expected_span));\n+    }\n+}"}]}