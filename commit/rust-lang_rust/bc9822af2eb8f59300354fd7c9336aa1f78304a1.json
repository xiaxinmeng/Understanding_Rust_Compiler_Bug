{"sha": "bc9822af2eb8f59300354fd7c9336aa1f78304a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOTgyMmFmMmViOGY1OTMwMDM1NGZkN2M5MzM2YWExZjc4MzA0YTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-24T22:34:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-24T22:34:08Z"}, "message": "Auto merge of #42784 - tlively:wasm-bot, r=alexcrichton\n\nMake wasm32 buildbot test LLVM backend\n\nThis adds the experimental targets option to configure so it can be used\nby the builders and changes the wasm32 Dockerfile accordingly. Instead\nof using LLVM from the emsdk, the builder's emscripten tools now uses\nthe Rust in-tree LLVM, since this is the one built with wasm support.", "tree": {"sha": "c7b993bd2edc922c0f0f40f06a8f5cc8b739b576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b993bd2edc922c0f0f40f06a8f5cc8b739b576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9822af2eb8f59300354fd7c9336aa1f78304a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9822af2eb8f59300354fd7c9336aa1f78304a1", "html_url": "https://github.com/rust-lang/rust/commit/bc9822af2eb8f59300354fd7c9336aa1f78304a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9822af2eb8f59300354fd7c9336aa1f78304a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9bb93576d4484edd1b3c40eb2aea0dfa0788851", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bb93576d4484edd1b3c40eb2aea0dfa0788851", "html_url": "https://github.com/rust-lang/rust/commit/c9bb93576d4484edd1b3c40eb2aea0dfa0788851"}, {"sha": "c130b83bae47777e8a9e1b4cb3d6249cf987c0d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c130b83bae47777e8a9e1b4cb3d6249cf987c0d6", "html_url": "https://github.com/rust-lang/rust/commit/c130b83bae47777e8a9e1b4cb3d6249cf987c0d6"}], "stats": {"total": 129, "additions": 117, "deletions": 12}, "files": [{"sha": "e08bcc028272e411565efb7c3d212641b2a169a6", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9822af2eb8f59300354fd7c9336aa1f78304a1/configure", "raw_url": "https://github.com/rust-lang/rust/raw/bc9822af2eb8f59300354fd7c9336aa1f78304a1/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=bc9822af2eb8f59300354fd7c9336aa1f78304a1", "patch": "@@ -490,6 +490,7 @@ valopt musl-root-armhf \"\" \"arm-unknown-linux-musleabihf install directory\"\n valopt musl-root-armv7 \"\" \"armv7-unknown-linux-musleabihf install directory\"\n valopt extra-filename \"\" \"Additional data that is hashed and passed to the -C extra-filename flag\"\n valopt qemu-armhf-rootfs \"\" \"rootfs in qemu testing, you probably don't want to use this\"\n+valopt experimental-targets \"\" \"experimental LLVM targets to build\"\n \n if [ -e ${CFG_SRC_DIR}.git ]\n then"}, {"sha": "3ada846e38236989b8dedd5a1558114ba35ae2d3", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=bc9822af2eb8f59300354fd7c9336aa1f78304a1", "patch": "@@ -497,6 +497,9 @@ impl Config {\n                 \"CFG_TARGET\" if value.len() > 0 => {\n                     self.target.extend(value.split(\" \").map(|s| s.to_string()));\n                 }\n+                \"CFG_EXPERIMENTAL_TARGETS\" if value.len() > 0 => {\n+                    self.llvm_experimental_targets = Some(value.to_string());\n+                }\n                 \"CFG_MUSL_ROOT\" if value.len() > 0 => {\n                     self.musl_root = Some(parse_configure_path(value));\n                 }"}, {"sha": "c75b5d455c522b7662ece88cdb419c172d56d1f9", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=bc9822af2eb8f59300354fd7c9336aa1f78304a1", "patch": "@@ -11,16 +11,22 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  xz-utils\n+  xz-utils \\\n+  jq \\\n+  bzip2\n \n # dumb-init\n COPY scripts/dumb-init.sh /scripts/\n RUN sh /scripts/dumb-init.sh\n \n # emscripten\n-COPY scripts/emscripten.sh /scripts/\n-RUN bash /scripts/emscripten.sh\n-COPY wasm32/node.sh /usr/local/bin/node\n+COPY scripts/emscripten-wasm.sh /scripts/\n+RUN bash /scripts/emscripten-wasm.sh\n+COPY disabled/wasm32/node.sh /usr/local/bin/node\n+\n+# cache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n \n # env\n ENV PATH=$PATH:/emsdk-portable\n@@ -30,15 +36,11 @@ ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.37.13/\n ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.37.13_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n-ENV TARGETS=wasm32-unknown-emscripten\n+ENV TARGETS=wasm32-unknown-emscripten,wasm32-experimental-emscripten\n \n-ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n+ENV RUST_CONFIGURE_ARGS --target=$TARGETS --experimental-targets=WebAssembly\n \n ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n \n-# cache\n-COPY scripts/sccache.sh /scripts/\n-RUN sh /scripts/sccache.sh\n-\n # init\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]"}, {"sha": "e693f975f69bc374073315ddd796c1b9799f31bc", "filename": "src/ci/docker/scripts/emscripten-wasm.sh", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh?ref=bc9822af2eb8f59300354fd7c9336aa1f78304a1", "patch": "@@ -0,0 +1,64 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  rm -f /tmp/build.log\n+  set -x\n+}\n+\n+# Download emsdk\n+cd /\n+curl -L https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz | \\\n+    tar -xz\n+\n+# Download last known good emscripten from WebAssembly waterfall\n+BUILD=$(curl -L https://storage.googleapis.com/wasm-llvm/builds/linux/lkgr.json | \\\n+    jq '.build | tonumber')\n+curl -L https://storage.googleapis.com/wasm-llvm/builds/linux/$BUILD/wasm-binaries.tbz2 | \\\n+    hide_output tar xvkj\n+\n+# node 8 is required to run wasm\n+cd /\n+curl -L https://nodejs.org/dist/v8.0.0/node-v8.0.0-linux-x64.tar.xz | \\\n+    tar -xJ\n+\n+cd /emsdk-portable\n+./emsdk update\n+hide_output ./emsdk install sdk-1.37.13-64bit\n+./emsdk activate sdk-1.37.13-64bit\n+\n+# Make emscripten use wasm-ready node and LLVM tools\n+echo \"NODE_JS='/node-v8.0.0-linux-x64/bin/node'\" >> /root/.emscripten\n+echo \"LLVM_ROOT='/wasm-install/bin'\" >> /root/.emscripten\n+\n+# Make emsdk usable by any user\n+cp /root/.emscripten /emsdk-portable\n+chmod a+rxw -R /emsdk-portable\n+\n+# Compile and cache libc\n+source ./emsdk_env.sh\n+echo \"main(){}\" > a.c\n+HOME=/emsdk-portable/ emcc a.c\n+HOME=/emsdk-portable/ emcc -s WASM=1 a.c\n+rm -f a.*"}, {"sha": "cf5eecbdb6c8c1e94a38789718d0894d2ff7eb01", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=bc9822af2eb8f59300354fd7c9336aa1f78304a1", "patch": "@@ -50,4 +50,4 @@ chmod a+rxw -R /emsdk-portable\n # node 8 is required to run wasm\n cd /\n curl -L https://nodejs.org/dist/v8.0.0/node-v8.0.0-linux-x64.tar.xz | \\\n-    tar -xJ\n+  tar -xJ"}, {"sha": "5df227e39acbdaf0c9eb70d9c2434994f64f311c", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=bc9822af2eb8f59300354fd7c9336aa1f78304a1", "patch": "@@ -282,6 +282,9 @@ pub struct TargetOptions {\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n \n+    /// Environment variables to be set before invoking the linker.\n+    pub link_env: Vec<(String, String)>,\n+\n     /// Extra arguments to pass to the external assembler (when used)\n     pub asm_args: Vec<String>,\n \n@@ -451,6 +454,7 @@ impl Default for TargetOptions {\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n             late_link_args: LinkArgs::new(),\n+            link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n             custom_unwind_resume: false,\n             lib_allocation_crate: \"alloc_system\".to_string(),\n@@ -620,6 +624,21 @@ impl Target {\n                     base.options.$key_name = args;\n                 }\n             } );\n+            ($key_name:ident, env) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                if let Some(a) = obj.find(&name[..]).and_then(|o| o.as_array()) {\n+                    for o in a {\n+                        if let Some(s) = o.as_string() {\n+                            let p = s.split('=').collect::<Vec<_>>();\n+                            if p.len() == 2 {\n+                                let k = p[0].to_string();\n+                                let v = p[1].to_string();\n+                                base.options.$key_name.push((k, v));\n+                            }\n+                        }\n+                    }\n+                }\n+            } );\n         }\n \n         key!(is_builtin, bool);\n@@ -631,6 +650,7 @@ impl Target {\n         key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n         key!(post_link_args, link_args);\n+        key!(link_env, env);\n         key!(asm_args, list);\n         key!(cpu);\n         key!(features);\n@@ -785,6 +805,17 @@ impl ToJson for Target {\n                     d.insert(name.to_string(), obj.to_json());\n                 }\n             } );\n+            (env - $attr:ident) => ( {\n+                let name = (stringify!($attr)).replace(\"_\", \"-\");\n+                if default.$attr != self.options.$attr {\n+                    let obj = self.options.$attr\n+                        .iter()\n+                        .map(|&(ref k, ref v)| k.clone() + \"=\" + &v)\n+                        .collect::<Vec<_>>();\n+                    d.insert(name.to_string(), obj.to_json());\n+                }\n+            } );\n+\n         }\n \n         target_val!(llvm_target);\n@@ -806,6 +837,7 @@ impl ToJson for Target {\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n         target_option_val!(link_args - post_link_args);\n+        target_option_val!(env - link_env);\n         target_option_val!(asm_args);\n         target_option_val!(cpu);\n         target_option_val!(features);"}, {"sha": "053fab54250194a9186a79ee3983cbb1238dd261", "filename": "src/librustc_back/target/wasm32_experimental_emscripten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwasm32_experimental_emscripten.rs?ref=bc9822af2eb8f59300354fd7c9336aa1f78304a1", "patch": "@@ -30,6 +30,7 @@ pub fn target() -> Result<Target, String> {\n         // possibly interpret the wasm, and a .wasm file\n         exe_suffix: \".js\".to_string(),\n         linker_is_gnu: true,\n+        link_env: vec![(\"EMCC_WASM_BACKEND\".to_string(), \"1\".to_string())],\n         allow_asm: false,\n         obj_is_bitcode: true,\n         is_like_emscripten: true,"}, {"sha": "a7f205a18a46c8bb2868acc4444d291aafa9df09", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=bc9822af2eb8f59300354fd7c9336aa1f78304a1", "patch": "@@ -789,6 +789,9 @@ fn link_natively(sess: &Session,\n     if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n+    for &(ref k, ref v) in &sess.target.target.options.link_env {\n+        cmd.env(k, v);\n+    }\n \n     if sess.opts.debugging_opts.print_link_args {\n         println!(\"{:?}\", &cmd);"}, {"sha": "0692e07253fbeefc6bde8c4196f92b7083b89f43", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9822af2eb8f59300354fd7c9336aa1f78304a1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=bc9822af2eb8f59300354fd7c9336aa1f78304a1", "patch": "@@ -1338,7 +1338,6 @@ actual:\\n\\\n                              input)\n     }\n \n-\n     fn compose_and_run(&self,\n                        ProcArgs{ args, prog }: ProcArgs,\n                        procenv: Vec<(String, String)> ,"}]}