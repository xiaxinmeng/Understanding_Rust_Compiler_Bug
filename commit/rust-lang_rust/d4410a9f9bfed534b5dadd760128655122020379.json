{"sha": "d4410a9f9bfed534b5dadd760128655122020379", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDEwYTlmOWJmZWQ1MzRiNWRhZGQ3NjAxMjg2NTUxMjIwMjAzNzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-07T06:02:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-07T06:40:32Z"}, "message": "rewrite to use old C++-based mechanism", "tree": {"sha": "1b436afa5f4838321b778111bfed1c7e7db7aa9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b436afa5f4838321b778111bfed1c7e7db7aa9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4410a9f9bfed534b5dadd760128655122020379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4410a9f9bfed534b5dadd760128655122020379", "html_url": "https://github.com/rust-lang/rust/commit/d4410a9f9bfed534b5dadd760128655122020379", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4410a9f9bfed534b5dadd760128655122020379/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ef79c9d2da211e5f418733cb34861bfe69e270", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ef79c9d2da211e5f418733cb34861bfe69e270", "html_url": "https://github.com/rust-lang/rust/commit/a1ef79c9d2da211e5f418733cb34861bfe69e270"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "7daf3468eece8c86246c482f4b9989867c56cd66", "filename": "src/libcore/task.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d4410a9f9bfed534b5dadd760128655122020379/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4410a9f9bfed534b5dadd760128655122020379/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=d4410a9f9bfed534b5dadd760128655122020379", "patch": "@@ -28,8 +28,6 @@ Example:\n */\n import cast = unsafe::reinterpret_cast;\n import comm;\n-import option::{some, none};\n-import option = option::t;\n import ptr;\n import c = ctypes;\n \n@@ -112,10 +110,23 @@ Returns:\n \n A handle to the new task\n */\n-fn spawn(-f: sendfn()) -> task unsafe {\n+fn spawn(-f: sendfn()) -> task {\n+    spawn_inner(f, none)\n+}\n+\n+fn spawn_inner(-f: sendfn(),\n+               notify: option<comm::chan<task_notification>>) -> task unsafe {\n     let closure: *rust_closure = unsafe::reinterpret_cast(ptr::addr_of(f));\n     #debug(\"spawn: closure={%x,%x}\", (*closure).fnptr, (*closure).envptr);\n     let id = rustrt::new_task();\n+\n+    // set up notifications if they are enabled.\n+    option::may(notify) {|c|\n+        let task_ptr <- rust_task_ptr(rustrt::get_task_pointer(id));\n+        (**task_ptr).notify_enabled = 1;\n+        (**task_ptr).notify_chan = c;\n+    }\n+\n     rustrt::start_task(id, closure);\n     unsafe::leak(f);\n     ret id;\n@@ -129,6 +140,11 @@ A task that sends notification upon termination\n type joinable_task = (task, comm::port<task_notification>);\n \n fn spawn_joinable(-f: sendfn()) -> joinable_task {\n+    let notify_port = comm::port();\n+    let notify_chan = comm::chan(notify_port);\n+    let task = spawn_inner(f, some(notify_chan));\n+    ret (task, notify_port);\n+    /*\n     resource notify_rsrc(data: (comm::chan<task_notification>,\n                                 task,\n                                 @mutable task_result)) {\n@@ -148,6 +164,7 @@ fn spawn_joinable(-f: sendfn()) -> joinable_task {\n     };\n     let task = spawn(g);\n     ret (task, notify_port);\n+    */\n }\n \n /*"}, {"sha": "ae247f1c54d6c026a31c0324ebde1581576a6389", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4410a9f9bfed534b5dadd760128655122020379/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4410a9f9bfed534b5dadd760128655122020379/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=d4410a9f9bfed534b5dadd760128655122020379", "patch": "@@ -12,7 +12,7 @@ fn f(&&n: uint) {\n     }\n }\n \n-fn g(&&_i: ()) { }\n+fn g() { }\n \n fn main(args: [str]) {\n     let n ="}, {"sha": "04924b60c7c4249ad6518c6ce713a3a11714d432", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d4410a9f9bfed534b5dadd760128655122020379/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4410a9f9bfed534b5dadd760128655122020379/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=d4410a9f9bfed534b5dadd760128655122020379", "patch": "@@ -71,13 +71,12 @@ mod map_reduce {\n        [joinable_task] {\n         let tasks = [];\n         for i: str in inputs {\n-            tasks += [task::spawn_joinable((ctrl, i), map_task)];\n+            tasks += [task::spawn_joinable {|| map_task(ctrl, i)}];\n         }\n         ret tasks;\n     }\n \n-    fn map_task(args: (chan<ctrl_proto>, str)) {\n-        let (ctrl, input) = args;\n+    fn map_task(ctrl: chan<ctrl_proto>, input: str) {\n         // log(error, \"map_task \" + input);\n         let intermediates = map::new_str_hash();\n \n@@ -106,8 +105,7 @@ mod map_reduce {\n         send(ctrl, mapper_done);\n     }\n \n-    fn reduce_task(args: (str, chan<chan<reduce_proto>>)) {\n-        let (key, out) = args;\n+    fn reduce_task(key: str, out: chan<chan<reduce_proto>>) {\n         let p = port();\n \n         send(out, chan(p));\n@@ -168,8 +166,9 @@ mod map_reduce {\n                   none. {\n                     // log(error, \"creating new reducer for \" + k);\n                     let p = port();\n+                    let ch = chan(p);\n                     tasks +=\n-                        [task::spawn_joinable((k, chan(p)), reduce_task)];\n+                        [task::spawn_joinable{||reduce_task(k, ch)}];\n                     c = recv(p);\n                     reducers.insert(k, c);\n                   }"}]}