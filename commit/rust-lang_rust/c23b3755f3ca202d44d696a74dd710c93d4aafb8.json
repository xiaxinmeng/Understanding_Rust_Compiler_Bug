{"sha": "c23b3755f3ca202d44d696a74dd710c93d4aafb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyM2IzNzU1ZjNjYTIwMmQ0NGQ2OTZhNzRkZDcxMGM5M2Q0YWFmYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-23T05:51:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-23T05:51:04Z"}, "message": "Auto merge of #4537 - mikerite:unneeded_wildcard_pattern, r=phansch\n\nAdd `unneeded-wildcard-pattern` lint\n\nchangelog: Add `unneeded-wildcard-pattern` lint", "tree": {"sha": "54735a0255153c7f8dfa4c8ad4e42072d45ad14b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54735a0255153c7f8dfa4c8ad4e42072d45ad14b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c23b3755f3ca202d44d696a74dd710c93d4aafb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c23b3755f3ca202d44d696a74dd710c93d4aafb8", "html_url": "https://github.com/rust-lang/rust/commit/c23b3755f3ca202d44d696a74dd710c93d4aafb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c23b3755f3ca202d44d696a74dd710c93d4aafb8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "157edad6205fdd6a4f5932fba2675c6190746358", "url": "https://api.github.com/repos/rust-lang/rust/commits/157edad6205fdd6a4f5932fba2675c6190746358", "html_url": "https://github.com/rust-lang/rust/commit/157edad6205fdd6a4f5932fba2675c6190746358"}, {"sha": "ca6d36ba224e1cbd207db792833bab9325a8a897", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6d36ba224e1cbd207db792833bab9325a8a897", "html_url": "https://github.com/rust-lang/rust/commit/ca6d36ba224e1cbd207db792833bab9325a8a897"}], "stats": {"total": 296, "additions": 290, "deletions": 6}, "files": [{"sha": "6d190286e0ada7577e7a8c3f94cde0ca7552f8c8", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -1190,6 +1190,7 @@ Released 2018-09-13\n [`unnecessary_operation`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation\n [`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n [`unneeded_field_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_field_pattern\n+[`unneeded_wildcard_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_wildcard_pattern\n [`unreadable_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal\n [`unsafe_removed_from_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_removed_from_name\n [`unsafe_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_vector_initialization"}, {"sha": "915396b901cd6a4e65810e9a57a64cc4e3cd0833", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 315 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 316 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "efd4e1e0334cc0fba99f506f3516318adfdd3dc8", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -101,7 +101,7 @@ struct DivergenceVisitor<'a, 'tcx> {\n impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n     fn maybe_walk_expr(&mut self, e: &'tcx Expr) {\n         match e.node {\n-            ExprKind::Closure(.., _) => {},\n+            ExprKind::Closure(..) => {},\n             ExprKind::Match(ref e, ref arms, _) => {\n                 self.visit_expr(e);\n                 for arm in arms {"}, {"sha": "2caa065b937991c47201ac37e5b121600ee287e8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -828,6 +828,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         misc_early::REDUNDANT_CLOSURE_CALL,\n         misc_early::REDUNDANT_PATTERN,\n         misc_early::UNNEEDED_FIELD_PATTERN,\n+        misc_early::UNNEEDED_WILDCARD_PATTERN,\n         misc_early::ZERO_PREFIXED_LITERAL,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,\n@@ -1047,6 +1048,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         methods::USELESS_ASREF,\n         misc::SHORT_CIRCUIT_STATEMENT,\n         misc_early::REDUNDANT_CLOSURE_CALL,\n+        misc_early::UNNEEDED_WILDCARD_PATTERN,\n         misc_early::ZERO_PREFIXED_LITERAL,\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,"}, {"sha": "acc83d28897affabce176eb00fedf69c10adbe4a", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -195,6 +195,44 @@ declare_clippy_lint! {\n     \"using `name @ _` in a pattern\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for tuple patterns with a wildcard\n+    /// pattern (`_`) is next to a rest pattern (`..`).\n+    ///\n+    /// _NOTE_: While `_, ..` means there is at least one element left, `..`\n+    /// means there are 0 or more elements left. This can make a difference\n+    /// when refactoring, but shouldn't result in errors in the refactored code,\n+    /// since the wildcard pattern isn't used anyway.\n+    /// **Why is this bad?** The wildcard pattern is unneeded as the rest pattern\n+    /// can match that element as well.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// # struct TupleStruct(u32, u32, u32);\n+    /// # let t = TupleStruct(1, 2, 3);\n+    ///\n+    /// match t {\n+    ///     TupleStruct(0, .., _) => (),\n+    ///     _ => (),\n+    /// }\n+    /// ```\n+    /// can be written as\n+    /// ```rust\n+    /// # struct TupleStruct(u32, u32, u32);\n+    /// # let t = TupleStruct(1, 2, 3);\n+    ///\n+    /// match t {\n+    ///     TupleStruct(0, ..) => (),\n+    ///     _ => (),\n+    /// }\n+    /// ```\n+    pub UNNEEDED_WILDCARD_PATTERN,\n+    complexity,\n+    \"tuple patterns with a wildcard pattern (`_`) is next to a rest pattern (`..`)\"\n+}\n+\n declare_lint_pass!(MiscEarlyLints => [\n     UNNEEDED_FIELD_PATTERN,\n     DUPLICATE_UNDERSCORE_ARGUMENT,\n@@ -204,7 +242,8 @@ declare_lint_pass!(MiscEarlyLints => [\n     UNSEPARATED_LITERAL_SUFFIX,\n     ZERO_PREFIXED_LITERAL,\n     BUILTIN_TYPE_SHADOW,\n-    REDUNDANT_PATTERN\n+    REDUNDANT_PATTERN,\n+    UNNEEDED_WILDCARD_PATTERN,\n ]);\n \n // Used to find `return` statements or equivalents e.g., `?`\n@@ -326,6 +365,8 @@ impl EarlyLintPass for MiscEarlyLints {\n                 );\n             }\n         }\n+\n+        check_unneeded_wildcard_pattern(cx, pat);\n     }\n \n     fn check_fn(&mut self, cx: &EarlyContext<'_>, _: FnKind<'_>, decl: &FnDecl, _: Span, _: NodeId) {\n@@ -520,3 +561,54 @@ impl MiscEarlyLints {\n         }\n     }\n }\n+\n+fn check_unneeded_wildcard_pattern(cx: &EarlyContext<'_>, pat: &Pat) {\n+    if let PatKind::TupleStruct(_, ref patterns) | PatKind::Tuple(ref patterns) = pat.node {\n+        fn span_lint(cx: &EarlyContext<'_>, span: Span, only_one: bool) {\n+            span_lint_and_sugg(\n+                cx,\n+                UNNEEDED_WILDCARD_PATTERN,\n+                span,\n+                if only_one {\n+                    \"this pattern is unneeded as the `..` pattern can match that element\"\n+                } else {\n+                    \"these patterns are unneeded as the `..` pattern can match those elements\"\n+                },\n+                if only_one { \"remove it\" } else { \"remove them\" },\n+                \"\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+\n+        #[allow(clippy::trivially_copy_pass_by_ref)]\n+        fn is_wild<P: std::ops::Deref<Target = Pat>>(pat: &&P) -> bool {\n+            if let PatKind::Wild = pat.node {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+\n+        if let Some(rest_index) = patterns.iter().position(|pat| pat.is_rest()) {\n+            if let Some((left_index, left_pat)) = patterns[..rest_index]\n+                .iter()\n+                .rev()\n+                .take_while(is_wild)\n+                .enumerate()\n+                .last()\n+            {\n+                span_lint(cx, left_pat.span.until(patterns[rest_index].span), left_index == 0);\n+            }\n+\n+            if let Some((right_index, right_pat)) =\n+                patterns[rest_index + 1..].iter().take_while(is_wild).enumerate().last()\n+            {\n+                span_lint(\n+                    cx,\n+                    patterns[rest_index].span.shrink_to_hi().to(right_pat.span),\n+                    right_index == 0,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "571e664d4d476fcadf671ce081ce6ff3414f95dd", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -47,7 +47,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         return false;\n     }\n     match expr.node {\n-        ExprKind::Lit(..) | ExprKind::Closure(.., _) => true,\n+        ExprKind::Lit(..) | ExprKind::Closure(..) => true,\n         ExprKind::Path(..) => !has_drop(cx, cx.tables.expr_ty(expr)),\n         ExprKind::Index(ref a, ref b) | ExprKind::Binary(_, ref a, ref b) => {\n             has_no_effect(cx, a) && has_no_effect(cx, b)"}, {"sha": "249df8e0e230abae23f4dd7ae7186835729a7084", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -93,7 +93,7 @@ impl<'a> Sugg<'a> {\n         match expr.node {\n             hir::ExprKind::AddrOf(..)\n             | hir::ExprKind::Box(..)\n-            | hir::ExprKind::Closure(.., _)\n+            | hir::ExprKind::Closure(..)\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Match(..) => Sugg::MaybeParen(snippet),\n             hir::ExprKind::Continue(..)"}, {"sha": "e6bcbfadf4fc202f0340c8015920710db0a40ba0", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 315] = [\n+pub const ALL_LINTS: [Lint; 316] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1988,6 +1988,13 @@ pub const ALL_LINTS: [Lint; 315] = [\n         deprecation: None,\n         module: \"misc_early\",\n     },\n+    Lint {\n+        name: \"unneeded_wildcard_pattern\",\n+        group: \"complexity\",\n+        desc: \"tuple patterns with a wildcard pattern (`_`) is next to a rest pattern (`..`)\",\n+        deprecation: None,\n+        module: \"misc_early\",\n+    },\n     Lint {\n         name: \"unreadable_literal\",\n         group: \"style\","}, {"sha": "12c3461c9557982d9b12a523ac3048021c0c5cec", "filename": "tests/ui/unneeded_wildcard_pattern.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/tests%2Fui%2Funneeded_wildcard_pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/tests%2Fui%2Funneeded_wildcard_pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_wildcard_pattern.fixed?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+#![feature(stmt_expr_attributes)]\n+#![deny(clippy::unneeded_wildcard_pattern)]\n+\n+fn main() {\n+    let t = (0, 1, 2, 3);\n+\n+    if let (0, ..) = t {};\n+    if let (0, ..) = t {};\n+    if let (.., 0) = t {};\n+    if let (.., 0) = t {};\n+    if let (0, ..) = t {};\n+    if let (0, ..) = t {};\n+    if let (_, 0, ..) = t {};\n+    if let (.., 0, _) = t {};\n+    if let (0, _, _, _) = t {};\n+    if let (0, ..) = t {};\n+    if let (.., 0) = t {};\n+\n+    #[rustfmt::skip]\n+    {\n+        if let (0, ..,) = t {};\n+    }\n+\n+    struct S(usize, usize, usize, usize);\n+\n+    let s = S(0, 1, 2, 3);\n+\n+    if let S(0, ..) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(.., 0) = s {};\n+    if let S(.., 0) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(_, 0, ..) = s {};\n+    if let S(.., 0, _) = s {};\n+    if let S(0, _, _, _) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(.., 0) = s {};\n+\n+    #[rustfmt::skip]\n+    {\n+        if let S(0, ..,) = s {};\n+    }\n+}"}, {"sha": "4ac01d5d23b0476eb99664d227dd679a79e046c1", "filename": "tests/ui/unneeded_wildcard_pattern.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/tests%2Fui%2Funneeded_wildcard_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/tests%2Fui%2Funneeded_wildcard_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_wildcard_pattern.rs?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+#![feature(stmt_expr_attributes)]\n+#![deny(clippy::unneeded_wildcard_pattern)]\n+\n+fn main() {\n+    let t = (0, 1, 2, 3);\n+\n+    if let (0, .., _) = t {};\n+    if let (0, _, ..) = t {};\n+    if let (_, .., 0) = t {};\n+    if let (.., _, 0) = t {};\n+    if let (0, _, _, ..) = t {};\n+    if let (0, .., _, _) = t {};\n+    if let (_, 0, ..) = t {};\n+    if let (.., 0, _) = t {};\n+    if let (0, _, _, _) = t {};\n+    if let (0, ..) = t {};\n+    if let (.., 0) = t {};\n+\n+    #[rustfmt::skip]\n+    {\n+        if let (0, .., _, _,) = t {};\n+    }\n+\n+    struct S(usize, usize, usize, usize);\n+\n+    let s = S(0, 1, 2, 3);\n+\n+    if let S(0, .., _) = s {};\n+    if let S(0, _, ..) = s {};\n+    if let S(_, .., 0) = s {};\n+    if let S(.., _, 0) = s {};\n+    if let S(0, _, _, ..) = s {};\n+    if let S(0, .., _, _) = s {};\n+    if let S(_, 0, ..) = s {};\n+    if let S(.., 0, _) = s {};\n+    if let S(0, _, _, _) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(.., 0) = s {};\n+\n+    #[rustfmt::skip]\n+    {\n+        if let S(0, .., _, _,) = s {};\n+    }\n+}"}, {"sha": "25251cf36c0f2336a8f11cd905ddf3cd19da1304", "filename": "tests/ui/unneeded_wildcard_pattern.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/c23b3755f3ca202d44d696a74dd710c93d4aafb8/tests%2Fui%2Funneeded_wildcard_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c23b3755f3ca202d44d696a74dd710c93d4aafb8/tests%2Fui%2Funneeded_wildcard_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_wildcard_pattern.stderr?ref=c23b3755f3ca202d44d696a74dd710c93d4aafb8", "patch": "@@ -0,0 +1,92 @@\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:8:18\n+   |\n+LL |     if let (0, .., _) = t {};\n+   |                  ^^^ help: remove it\n+   |\n+note: lint level defined here\n+  --> $DIR/unneeded_wildcard_pattern.rs:3:9\n+   |\n+LL | #![deny(clippy::unneeded_wildcard_pattern)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:9:16\n+   |\n+LL |     if let (0, _, ..) = t {};\n+   |                ^^^ help: remove it\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:10:13\n+   |\n+LL |     if let (_, .., 0) = t {};\n+   |             ^^^ help: remove it\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:11:15\n+   |\n+LL |     if let (.., _, 0) = t {};\n+   |               ^^^ help: remove it\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:12:16\n+   |\n+LL |     if let (0, _, _, ..) = t {};\n+   |                ^^^^^^ help: remove them\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:13:18\n+   |\n+LL |     if let (0, .., _, _) = t {};\n+   |                  ^^^^^^ help: remove them\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:22:22\n+   |\n+LL |         if let (0, .., _, _,) = t {};\n+   |                      ^^^^^^ help: remove them\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:29:19\n+   |\n+LL |     if let S(0, .., _) = s {};\n+   |                   ^^^ help: remove it\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:30:17\n+   |\n+LL |     if let S(0, _, ..) = s {};\n+   |                 ^^^ help: remove it\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:31:14\n+   |\n+LL |     if let S(_, .., 0) = s {};\n+   |              ^^^ help: remove it\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:32:16\n+   |\n+LL |     if let S(.., _, 0) = s {};\n+   |                ^^^ help: remove it\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:33:17\n+   |\n+LL |     if let S(0, _, _, ..) = s {};\n+   |                 ^^^^^^ help: remove them\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:34:19\n+   |\n+LL |     if let S(0, .., _, _) = s {};\n+   |                   ^^^^^^ help: remove them\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:43:23\n+   |\n+LL |         if let S(0, .., _, _,) = s {};\n+   |                       ^^^^^^ help: remove them\n+\n+error: aborting due to 14 previous errors\n+"}]}