{"sha": "ce448f364a0f9180430f55a45287b7cdd5a98ef0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNDQ4ZjM2NGEwZjkxODA0MzBmNTVhNDUyODdiN2NkZDVhOThlZjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-13T04:26:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-13T04:26:55Z"}, "message": "Rollup merge of #57496 - steveklabnik:gh32934, r=Centril\n\nre-do docs for core::cmp\n\nFixes #32934", "tree": {"sha": "f1f34cdedaba6c213f47c5debc77bc0aa25210c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f34cdedaba6c213f47c5debc77bc0aa25210c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce448f364a0f9180430f55a45287b7cdd5a98ef0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcOr4QCRBK7hj4Ov3rIwAAdHIIAErYSmsTdnW8iUEdtZ+1hJsh\n/RiQN4bjk5IDrYKOzNbFUrZF005vdq4td0OaqQR+QwaXGaiPLtcBo6ZEPyRa2Pmj\nIyGLsrGsXg2OCe3Qs+/nk6ZCb2nU7ynHChDqEdkflh6xg3idx11TLSGEYcVA2cKI\nVZNg3xDXE/5ciOPsOGHCAH5wDxLERtVhrHg86p2fOnXkQ1qQv6he6ufx9S8MDRk5\nr8RWtOCQPibP7Cp24FhBxJ1BbSPxkFd/BC/zLI/25OiPoy3MPhqETs5nMjY35tOP\nVcSs3kICaBm1AUqzRiIJ+A1TGUscB2BZhNuy/17q1ia9zULZL3TMCqW9ENE/oy0=\n=GqUf\n-----END PGP SIGNATURE-----\n", "payload": "tree f1f34cdedaba6c213f47c5debc77bc0aa25210c1\nparent 4d6fd9cfb70a27d5d656caa8f742971fbbafaea2\nparent 186d5d7fd4de3ffeb06503134477fd453a185936\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547353615 +0100\ncommitter GitHub <noreply@github.com> 1547353615 +0100\n\nRollup merge of #57496 - steveklabnik:gh32934, r=Centril\n\nre-do docs for core::cmp\n\nFixes #32934\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce448f364a0f9180430f55a45287b7cdd5a98ef0", "html_url": "https://github.com/rust-lang/rust/commit/ce448f364a0f9180430f55a45287b7cdd5a98ef0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce448f364a0f9180430f55a45287b7cdd5a98ef0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d6fd9cfb70a27d5d656caa8f742971fbbafaea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d6fd9cfb70a27d5d656caa8f742971fbbafaea2", "html_url": "https://github.com/rust-lang/rust/commit/4d6fd9cfb70a27d5d656caa8f742971fbbafaea2"}, {"sha": "186d5d7fd4de3ffeb06503134477fd453a185936", "url": "https://api.github.com/repos/rust-lang/rust/commits/186d5d7fd4de3ffeb06503134477fd453a185936", "html_url": "https://github.com/rust-lang/rust/commit/186d5d7fd4de3ffeb06503134477fd453a185936"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "86f28a957cd2cf8c2d583f1e3737e8de3c0d7c5f", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ce448f364a0f9180430f55a45287b7cdd5a98ef0/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce448f364a0f9180430f55a45287b7cdd5a98ef0/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=ce448f364a0f9180430f55a45287b7cdd5a98ef0", "patch": "@@ -1,27 +1,22 @@\n //! Functionality for ordering and comparison.\n //!\n-//! This module defines both [`PartialOrd`] and [`PartialEq`] traits which are used\n-//! by the compiler to implement comparison operators. Rust programs may\n-//! implement [`PartialOrd`] to overload the `<`, `<=`, `>`, and `>=` operators,\n-//! and may implement [`PartialEq`] to overload the `==` and `!=` operators.\n+//! This module contains various tools for ordering and comparing values. In\n+//! summary:\n //!\n-//! [`PartialOrd`]: trait.PartialOrd.html\n-//! [`PartialEq`]: trait.PartialEq.html\n+//! * [`Eq`] and [`PartialEq`] are traits that allow you to define total and\n+//!   partial equality between values, respectively. Implementing them overloads\n+//!   the `==` and `!=` operators.\n+//! * [`Ord`] and [`PartialOrd`] are traits that allow you to define total and\n+//!   partial orderings between values, respectively. Implementing them overloads\n+//!   the `<`, `<=`, `>`, and `>=` operators.\n+//! * [`Ordering`][cmp::Ordering] is an enum returned by the\n+//!   main functions of [`Ord`] and [`PartialOrd`], and describes an ordering.\n+//! * [`Reverse`][cmp::Reverse] is a struct that allows you to easily reverse\n+//!   an ordering.\n+//! * [`max`][cmp::max] and [`min`][cmp::min] are functions that build off of\n+//!   [`Ord`] and allow you to find the maximum or minimum of two values.\n //!\n-//! # Examples\n-//!\n-//! ```\n-//! let x: u32 = 0;\n-//! let y: u32 = 1;\n-//!\n-//! // these two lines are equivalent\n-//! assert_eq!(x < y, true);\n-//! assert_eq!(x.lt(&y), true);\n-//!\n-//! // these two lines are also equivalent\n-//! assert_eq!(x == y, false);\n-//! assert_eq!(x.eq(&y), false);\n-//! ```\n+//! For more details, see the respective documentation of each item in the list.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}