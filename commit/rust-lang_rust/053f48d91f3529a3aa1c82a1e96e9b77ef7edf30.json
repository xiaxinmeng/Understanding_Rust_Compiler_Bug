{"sha": "053f48d91f3529a3aa1c82a1e96e9b77ef7edf30", "node_id": "C_kwDOAAsO6NoAKDA1M2Y0OGQ5MWYzNTI5YTNhYTFjODJhMWU5NmU5Yjc3ZWY3ZWRmMzA", "commit": {"author": {"name": "Dominik Stolz", "email": "d.stolz@tum.de", "date": "2022-06-28T21:26:54Z"}, "committer": {"name": "Dominik Stolz", "email": "d.stolz@tum.de", "date": "2022-06-28T21:26:54Z"}, "message": "Address code review comments", "tree": {"sha": "082f70c19b2b8e6a8c3a09af4980d7855a1f37ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/082f70c19b2b8e6a8c3a09af4980d7855a1f37ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/053f48d91f3529a3aa1c82a1e96e9b77ef7edf30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/053f48d91f3529a3aa1c82a1e96e9b77ef7edf30", "html_url": "https://github.com/rust-lang/rust/commit/053f48d91f3529a3aa1c82a1e96e9b77ef7edf30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/053f48d91f3529a3aa1c82a1e96e9b77ef7edf30/comments", "author": {"login": "voidc", "id": 5302792, "node_id": "MDQ6VXNlcjUzMDI3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5302792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidc", "html_url": "https://github.com/voidc", "followers_url": "https://api.github.com/users/voidc/followers", "following_url": "https://api.github.com/users/voidc/following{/other_user}", "gists_url": "https://api.github.com/users/voidc/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidc/subscriptions", "organizations_url": "https://api.github.com/users/voidc/orgs", "repos_url": "https://api.github.com/users/voidc/repos", "events_url": "https://api.github.com/users/voidc/events{/privacy}", "received_events_url": "https://api.github.com/users/voidc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "voidc", "id": 5302792, "node_id": "MDQ6VXNlcjUzMDI3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5302792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/voidc", "html_url": "https://github.com/voidc", "followers_url": "https://api.github.com/users/voidc/followers", "following_url": "https://api.github.com/users/voidc/following{/other_user}", "gists_url": "https://api.github.com/users/voidc/gists{/gist_id}", "starred_url": "https://api.github.com/users/voidc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/voidc/subscriptions", "organizations_url": "https://api.github.com/users/voidc/orgs", "repos_url": "https://api.github.com/users/voidc/repos", "events_url": "https://api.github.com/users/voidc/events{/privacy}", "received_events_url": "https://api.github.com/users/voidc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "080525229b9830c727cf447236deb7bdae7d5814", "url": "https://api.github.com/repos/rust-lang/rust/commits/080525229b9830c727cf447236deb7bdae7d5814", "html_url": "https://github.com/rust-lang/rust/commit/080525229b9830c727cf447236deb7bdae7d5814"}], "stats": {"total": 121, "additions": 57, "deletions": 64}, "files": [{"sha": "5f7cafe2722fdba58271abb5bafb542222fb3b3a", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 56, "deletions": 63, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/053f48d91f3529a3aa1c82a1e96e9b77ef7edf30/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053f48d91f3529a3aa1c82a1e96e9b77ef7edf30/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=053f48d91f3529a3aa1c82a1e96e9b77ef7edf30", "patch": "@@ -1,84 +1,77 @@\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::abi::VariantIdx;\n \n-/// Tries to destructure constants of type Array or Adt into the constants\n+use std::iter;\n+\n+/// Tries to destructure array, ADT or tuple constants into the constants\n /// of its fields.\n pub(crate) fn destructure_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     const_: ty::Const<'tcx>,\n ) -> ty::DestructuredConst<'tcx> {\n-    if let ty::ConstKind::Value(valtree) = const_.kind() {\n-        let branches = match valtree {\n-            ty::ValTree::Branch(b) => b,\n-            _ => bug!(\"cannot destructure constant {:?}\", const_),\n-        };\n+    let ty::ConstKind::Value(valtree) = const_.kind() else {\n+        bug!(\"cannot destructure constant {:?}\", const_)\n+    };\n \n-        let (fields, variant) = match const_.ty().kind() {\n-            ty::Array(inner_ty, _) | ty::Slice(inner_ty) => {\n-                // construct the consts for the elements of the array/slice\n-                let field_consts = branches\n-                    .iter()\n-                    .map(|b| {\n-                        tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Value(*b), ty: *inner_ty })\n-                    })\n-                    .collect::<Vec<_>>();\n-                debug!(?field_consts);\n+    let branches = match valtree {\n+        ty::ValTree::Branch(b) => b,\n+        _ => bug!(\"cannot destructure constant {:?}\", const_),\n+    };\n \n-                (field_consts, None)\n-            }\n-            ty::Adt(def, _) if def.variants().is_empty() => bug!(\"unreachable\"),\n-            ty::Adt(def, substs) => {\n-                let variant_idx = if def.is_enum() {\n-                    VariantIdx::from_u32(branches[0].unwrap_leaf().try_to_u32().unwrap())\n-                } else {\n-                    VariantIdx::from_u32(0)\n-                };\n-                let fields = &def.variant(variant_idx).fields;\n-                let mut field_consts = Vec::with_capacity(fields.len());\n+    let (fields, variant) = match const_.ty().kind() {\n+        ty::Array(inner_ty, _) | ty::Slice(inner_ty) => {\n+            // construct the consts for the elements of the array/slice\n+            let field_consts = branches\n+                .iter()\n+                .map(|b| tcx.mk_const(ty::ConstS { kind: ty::ConstKind::Value(*b), ty: *inner_ty }))\n+                .collect::<Vec<_>>();\n+            debug!(?field_consts);\n \n-                // Note: First element inValTree corresponds to variant of enum\n-                let mut valtree_idx = if def.is_enum() { 1 } else { 0 };\n-                for field in fields {\n-                    let field_ty = field.ty(tcx, substs);\n-                    let field_valtree = branches[valtree_idx]; // first element of branches is variant\n-                    let field_const = tcx.mk_const(ty::ConstS {\n-                        kind: ty::ConstKind::Value(field_valtree),\n-                        ty: field_ty,\n-                    });\n-                    field_consts.push(field_const);\n-                    valtree_idx += 1;\n-                }\n-                debug!(?field_consts);\n+            (field_consts, None)\n+        }\n+        ty::Adt(def, _) if def.variants().is_empty() => bug!(\"unreachable\"),\n+        ty::Adt(def, substs) => {\n+            let (variant_idx, branches) = if def.is_enum() {\n+                let (head, rest) = branches.split_first().unwrap();\n+                (VariantIdx::from_u32(head.unwrap_leaf().try_to_u32().unwrap()), rest)\n+            } else {\n+                (VariantIdx::from_u32(0), branches)\n+            };\n+            let fields = &def.variant(variant_idx).fields;\n+            let mut field_consts = Vec::with_capacity(fields.len());\n \n-                (field_consts, Some(variant_idx))\n+            for (field, field_valtree) in iter::zip(fields, branches) {\n+                let field_ty = field.ty(tcx, substs);\n+                let field_const = tcx.mk_const(ty::ConstS {\n+                    kind: ty::ConstKind::Value(*field_valtree),\n+                    ty: field_ty,\n+                });\n+                field_consts.push(field_const);\n             }\n-            ty::Tuple(elem_tys) => {\n-                let fields = elem_tys\n-                    .iter()\n-                    .enumerate()\n-                    .map(|(i, elem_ty)| {\n-                        let elem_valtree = branches[i];\n-                        tcx.mk_const(ty::ConstS {\n-                            kind: ty::ConstKind::Value(elem_valtree),\n-                            ty: elem_ty,\n-                        })\n+            debug!(?field_consts);\n+\n+            (field_consts, Some(variant_idx))\n+        }\n+        ty::Tuple(elem_tys) => {\n+            let fields = iter::zip(*elem_tys, branches)\n+                .map(|(elem_ty, elem_valtree)| {\n+                    tcx.mk_const(ty::ConstS {\n+                        kind: ty::ConstKind::Value(*elem_valtree),\n+                        ty: elem_ty,\n                     })\n-                    .collect::<Vec<_>>();\n+                })\n+                .collect::<Vec<_>>();\n \n-                (fields, None)\n-            }\n-            _ => bug!(\"cannot destructure constant {:?}\", const_),\n-        };\n+            (fields, None)\n+        }\n+        _ => bug!(\"cannot destructure constant {:?}\", const_),\n+    };\n \n-        let fields = tcx.arena.alloc_from_iter(fields.into_iter());\n+    let fields = tcx.arena.alloc_from_iter(fields.into_iter());\n \n-        ty::DestructuredConst { variant, fields }\n-    } else {\n-        bug!(\"cannot destructure constant {:?}\", const_)\n-    }\n+    ty::DestructuredConst { variant, fields }\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers =\n-        ty::query::Providers { destructure_const, ..*providers };\n+    *providers = ty::query::Providers { destructure_const, ..*providers };\n }"}, {"sha": "3335f7d598480c1d916fd4df3110dbcd8d78b31e", "filename": "src/test/ui/const-generics/issue-66451.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/053f48d91f3529a3aa1c82a1e96e9b77ef7edf30/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053f48d91f3529a3aa1c82a1e96e9b77ef7edf30/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66451.rs?ref=053f48d91f3529a3aa1c82a1e96e9b77ef7edf30", "patch": "@@ -17,7 +17,7 @@ fn main() {\n         Foo {\n             value: 3,\n             nested: &Bar(4),\n-        }  \n+        }\n     }> = Test;\n     let y: Test<{\n         Foo {"}]}