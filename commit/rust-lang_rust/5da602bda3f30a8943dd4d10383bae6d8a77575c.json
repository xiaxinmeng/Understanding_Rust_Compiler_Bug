{"sha": "5da602bda3f30a8943dd4d10383bae6d8a77575c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTYwMmJkYTNmMzBhODk0M2RkNGQxMDM4M2JhZTZkOGE3NzU3NWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-30T09:54:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-30T09:54:00Z"}, "message": "Auto merge of #33959 - Manishearth:rollup, r=Manishearth\n\nRollup of 8 pull requests\n\n- Successful merges: #33793, #33893, #33912, #33913, #33914, #33917, #33937, #33938\n- Failed merges:", "tree": {"sha": "481935e3a7819c1fbfa7ab7d4fee3d2a5723233d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/481935e3a7819c1fbfa7ab7d4fee3d2a5723233d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da602bda3f30a8943dd4d10383bae6d8a77575c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da602bda3f30a8943dd4d10383bae6d8a77575c", "html_url": "https://github.com/rust-lang/rust/commit/5da602bda3f30a8943dd4d10383bae6d8a77575c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da602bda3f30a8943dd4d10383bae6d8a77575c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf9c60c9a6d27762594c1c5c067194f4c9109f67", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9c60c9a6d27762594c1c5c067194f4c9109f67", "html_url": "https://github.com/rust-lang/rust/commit/bf9c60c9a6d27762594c1c5c067194f4c9109f67"}, {"sha": "9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a", "html_url": "https://github.com/rust-lang/rust/commit/9d2ec40b746b5100ed9e44ecdb49e6c8d6f0357a"}], "stats": {"total": 365, "additions": 261, "deletions": 104}, "files": [{"sha": "729d9218a2960f85c8fd5a3c4d20832b9df9127e", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -72,7 +72,7 @@\n use boxed::Box;\n \n use core::sync::atomic;\n-use core::sync::atomic::Ordering::{Relaxed, Release, Acquire, SeqCst};\n+use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n use core::borrow;\n use core::fmt;\n use core::cmp::Ordering;\n@@ -85,7 +85,7 @@ use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n use core::marker::Unsize;\n use core::hash::{Hash, Hasher};\n-use core::{usize, isize};\n+use core::{isize, usize};\n use core::convert::From;\n use heap::deallocate;\n \n@@ -608,11 +608,13 @@ impl<T> Weak<T> {\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n     pub fn new() -> Weak<T> {\n         unsafe {\n-            Weak { ptr: Shared::new(Box::into_raw(box ArcInner {\n-                strong: atomic::AtomicUsize::new(0),\n-                weak: atomic::AtomicUsize::new(1),\n-                data: uninitialized(),\n-            }))}\n+            Weak {\n+                ptr: Shared::new(Box::into_raw(box ArcInner {\n+                    strong: atomic::AtomicUsize::new(0),\n+                    weak: atomic::AtomicUsize::new(1),\n+                    data: uninitialized(),\n+                })),\n+            }\n         }\n     }\n }\n@@ -655,7 +657,9 @@ impl<T: ?Sized> Weak<T> {\n \n             // See comments in `Arc::clone` for why we do this (for `mem::forget`).\n             if n > MAX_REFCOUNT {\n-                unsafe { abort(); }\n+                unsafe {\n+                    abort();\n+                }\n             }\n \n             // Relaxed is valid for the same reason it is on Arc's Clone impl\n@@ -946,7 +950,7 @@ mod tests {\n     use std::mem::drop;\n     use std::ops::Drop;\n     use std::option::Option;\n-    use std::option::Option::{Some, None};\n+    use std::option::Option::{None, Some};\n     use std::sync::atomic;\n     use std::sync::atomic::Ordering::{Acquire, SeqCst};\n     use std::thread;"}, {"sha": "51523ca8dc601126d8dafdb2a50d52cd103b962f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -64,7 +64,7 @@ use core::hash::{self, Hash};\n use core::marker::{self, Unsize};\n use core::mem;\n use core::ops::{CoerceUnsized, Deref, DerefMut};\n-use core::ops::{Placer, Boxed, Place, InPlace, BoxPlace};\n+use core::ops::{BoxPlace, Boxed, InPlace, Place, Placer};\n use core::ptr::{self, Unique};\n use core::raw::TraitObject;\n use core::convert::From;\n@@ -535,7 +535,8 @@ pub trait FnBox<A> {\n \n #[unstable(feature = \"fnbox\",\n            reason = \"will be deprecated if and when Box<FnOnce> becomes usable\", issue = \"28796\")]\n-impl<A, F> FnBox<A> for F where F: FnOnce<A>\n+impl<A, F> FnBox<A> for F\n+    where F: FnOnce<A>\n {\n     type Output = F::Output;\n "}, {"sha": "8d68ce3c1f6e2ebfa406c81a15cb50c478df4139", "filename": "src/liballoc/boxed_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Fboxed_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Fboxed_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed_test.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -12,7 +12,7 @@\n \n use core::any::Any;\n use core::ops::Deref;\n-use core::result::Result::{Ok, Err};\n+use core::result::Result::{Err, Ok};\n use core::clone::Clone;\n \n use std::boxed::Box;"}, {"sha": "bfed8a8e83a5a4dc25f6211c7bdb82cd4dd73691", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -17,7 +17,7 @@\n \n use core::{isize, usize};\n #[cfg(not(test))]\n-use core::intrinsics::{size_of, min_align_of};\n+use core::intrinsics::{min_align_of, size_of};\n \n #[allow(improper_ctypes)]\n extern \"C\" {"}, {"sha": "cf4fb459bc1044bf490f291a37bbfa0bdb6ef3b9", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -159,11 +159,11 @@ use core::borrow;\n use core::cell::Cell;\n use core::cmp::Ordering;\n use core::fmt;\n-use core::hash::{Hasher, Hash};\n-use core::intrinsics::{assume, abort};\n+use core::hash::{Hash, Hasher};\n+use core::intrinsics::{abort, assume};\n use core::marker;\n use core::marker::Unsize;\n-use core::mem::{self, align_of_val, size_of_val, forget, uninitialized};\n+use core::mem::{self, align_of_val, forget, size_of_val, uninitialized};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n@@ -935,7 +935,7 @@ mod tests {\n     use std::boxed::Box;\n     use std::cell::RefCell;\n     use std::option::Option;\n-    use std::option::Option::{Some, None};\n+    use std::option::Option::{None, Some};\n     use std::result::Result::{Err, Ok};\n     use std::mem::drop;\n     use std::clone::Clone;"}, {"sha": "f3770816cb6b3aa184f1b398df3a37ebaf7adc9a", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -1097,8 +1097,34 @@ impl str {\n     /// assert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n     /// ```\n     ///\n-    /// This can lead to possibly surprising behavior when whitespace is used\n-    /// as the separator. This code is correct:\n+    /// Contiguous separators are separated by the empty string.\n+    ///\n+    /// ```\n+    /// let x = \"(///)\".to_string();\n+    /// let d: Vec<_> = x.split('/').collect();;\n+    ///\n+    /// assert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n+    /// ```\n+    ///\n+    /// Separators at the start or end of a string are neighbored\n+    /// by empty strings.\n+    ///\n+    /// ```\n+    /// let d: Vec<_> = \"010\".split(\"0\").collect();\n+    /// assert_eq!(d, &[\"\", \"1\", \"\"]);\n+    /// ```\n+    ///\n+    /// When the empty string is used as a separator, it separates\n+    /// every character in the string, along with the beginning\n+    /// and end of the string.\n+    ///\n+    /// ```\n+    /// let f: Vec<_> = \"rust\".split(\"\").collect();\n+    /// assert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n+    /// ```\n+    ///\n+    /// Contiguous separators can lead to possibly surprising behavior\n+    /// when whitespace is used as the separator. This code is correct:\n     ///\n     /// ```\n     /// let x = \"    a  b c\".to_string();"}, {"sha": "5fba44a1c38f13e1f35de30498f5064a1b8fc9b5", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -10,7 +10,7 @@\n \n //! The ChaCha random number generator.\n \n-use {Rng, SeedableRng, Rand};\n+use {Rand, Rng, SeedableRng};\n \n const KEY_WORDS: usize = 8; // 8 words for the 256-bit key\n const STATE_WORDS: usize = 16;\n@@ -216,7 +216,8 @@ mod tests {\n         let s = ::test::rng().gen_iter::<u32>().take(8).collect::<Vec<u32>>();\n         let mut ra: ChaChaRng = SeedableRng::from_seed(&*s);\n         let mut rb: ChaChaRng = SeedableRng::from_seed(&*s);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n \n@@ -225,7 +226,8 @@ mod tests {\n         let seed: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n         let mut ra: ChaChaRng = SeedableRng::from_seed(seed);\n         let mut rb: ChaChaRng = SeedableRng::from_seed(seed);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n "}, {"sha": "5a8558efc024437b82300161ec3133c147795a8a", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -13,8 +13,8 @@\n #[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n-use {Rng, Rand};\n-use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n+use {Rand, Rng};\n+use distributions::{IndependentSample, Sample, ziggurat, ziggurat_tables};\n \n /// A wrapper around an `f64` to generate Exp(1) random numbers.\n ///\n@@ -88,7 +88,7 @@ impl IndependentSample<f64> for Exp {\n \n #[cfg(test)]\n mod tests {\n-    use distributions::{Sample, IndependentSample};\n+    use distributions::{IndependentSample, Sample};\n     use super::Exp;\n \n     #[test]"}, {"sha": "9ca13e85b533304f2f2c5c7bc5657da138556343", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -16,9 +16,9 @@ use self::ChiSquaredRepr::*;\n #[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n-use {Rng, Open01};\n+use {Open01, Rng};\n use super::normal::StandardNormal;\n-use super::{IndependentSample, Sample, Exp};\n+use super::{Exp, IndependentSample, Sample};\n \n /// The Gamma distribution `Gamma(shape, scale)` distribution.\n ///\n@@ -291,8 +291,8 @@ impl IndependentSample<f64> for StudentT {\n \n #[cfg(test)]\n mod tests {\n-    use distributions::{Sample, IndependentSample};\n-    use super::{ChiSquared, StudentT, FisherF};\n+    use distributions::{IndependentSample, Sample};\n+    use super::{ChiSquared, FisherF, StudentT};\n \n     #[test]\n     fn test_chi_squared_one() {"}, {"sha": "36c9f783ff5e03aef4707f3af5f4eb661e14b09f", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -22,11 +22,11 @@ use core::num::Float;\n \n use core::marker::PhantomData;\n \n-use {Rng, Rand};\n+use {Rand, Rng};\n \n pub use self::range::Range;\n-pub use self::gamma::{Gamma, ChiSquared, FisherF, StudentT};\n-pub use self::normal::{Normal, LogNormal};\n+pub use self::gamma::{ChiSquared, FisherF, Gamma, StudentT};\n+pub use self::normal::{LogNormal, Normal};\n pub use self::exponential::Exp;\n \n pub mod range;\n@@ -266,8 +266,8 @@ fn ziggurat<R: Rng, P, Z>(rng: &mut R,\n \n #[cfg(test)]\n mod tests {\n-    use {Rng, Rand};\n-    use super::{RandSample, WeightedChoice, Weighted, Sample, IndependentSample};\n+    use {Rand, Rng};\n+    use super::{IndependentSample, RandSample, Sample, Weighted, WeightedChoice};\n \n     #[derive(PartialEq, Debug)]\n     struct ConstRand(usize);"}, {"sha": "811d5b14c71129c40bd51f580e53c02d463fcfd0", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -13,8 +13,8 @@\n #[cfg(not(test))] // only necessary for no_std\n use FloatMath;\n \n-use {Rng, Rand, Open01};\n-use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n+use {Open01, Rand, Rng};\n+use distributions::{IndependentSample, Sample, ziggurat, ziggurat_tables};\n \n /// A wrapper around an `f64` to generate N(0, 1) random numbers\n /// (a.k.a.  a standard normal, or Gaussian).\n@@ -145,8 +145,8 @@ impl IndependentSample<f64> for LogNormal {\n \n #[cfg(test)]\n mod tests {\n-    use distributions::{Sample, IndependentSample};\n-    use super::{Normal, LogNormal};\n+    use distributions::{IndependentSample, Sample};\n+    use super::{LogNormal, Normal};\n \n     #[test]\n     fn test_normal() {"}, {"sha": "ba8554a979b899309a3ebae5f4a1a869a1ddcf64", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -14,7 +14,7 @@\n \n use core::marker::Sized;\n use Rng;\n-use distributions::{Sample, IndependentSample};\n+use distributions::{IndependentSample, Sample};\n \n /// Sample values uniformly between two bounds.\n ///\n@@ -148,7 +148,7 @@ float_impl! { f64 }\n \n #[cfg(test)]\n mod tests {\n-    use distributions::{Sample, IndependentSample};\n+    use distributions::{IndependentSample, Sample};\n     use super::Range;\n \n     #[should_panic]"}, {"sha": "e8cc7b5cc2dacc76448b4bda3a492c9fbe7e6b41", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -16,7 +16,7 @@ use core::slice;\n use core::iter::repeat;\n use core::num::Wrapping as w;\n \n-use {Rng, SeedableRng, Rand};\n+use {Rand, Rng, SeedableRng};\n \n type w32 = w<u32>;\n type w64 = w<u64>;\n@@ -591,22 +591,24 @@ mod tests {\n     use std::prelude::v1::*;\n \n     use {Rng, SeedableRng};\n-    use super::{IsaacRng, Isaac64Rng};\n+    use super::{Isaac64Rng, IsaacRng};\n \n     #[test]\n     fn test_rng_32_rand_seeded() {\n         let s = ::test::rng().gen_iter::<u32>().take(256).collect::<Vec<u32>>();\n         let mut ra: IsaacRng = SeedableRng::from_seed(&s[..]);\n         let mut rb: IsaacRng = SeedableRng::from_seed(&s[..]);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n     #[test]\n     fn test_rng_64_rand_seeded() {\n         let s = ::test::rng().gen_iter::<u64>().take(256).collect::<Vec<u64>>();\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(&s[..]);\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(&s[..]);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n \n@@ -615,15 +617,17 @@ mod tests {\n         let seed: &[_] = &[1, 23, 456, 7890, 12345];\n         let mut ra: IsaacRng = SeedableRng::from_seed(seed);\n         let mut rb: IsaacRng = SeedableRng::from_seed(seed);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n     #[test]\n     fn test_rng_64_seeded() {\n         let seed: &[_] = &[1, 23, 456, 7890, 12345];\n         let mut ra: Isaac64Rng = SeedableRng::from_seed(seed);\n         let mut rb: Isaac64Rng = SeedableRng::from_seed(seed);\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n "}, {"sha": "c31a0ed53207d0385a5c831cb795206a13e76e15", "filename": "src/librand/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -47,10 +47,10 @@ use core::f64;\n use core::intrinsics;\n use core::marker::PhantomData;\n \n-pub use isaac::{IsaacRng, Isaac64Rng};\n+pub use isaac::{Isaac64Rng, IsaacRng};\n pub use chacha::ChaChaRng;\n \n-use distributions::{Range, IndependentSample};\n+use distributions::{IndependentSample, Range};\n use distributions::range::SampleRange;\n \n #[cfg(test)]\n@@ -67,7 +67,7 @@ mod rand_impls;\n // depend on libstd.  This will go away when librand is integrated\n // into libstd.\n #[doc(hidden)]\n-trait FloatMath : Sized {\n+trait FloatMath: Sized {\n     fn exp(self) -> Self;\n     fn ln(self) -> Self;\n     fn sqrt(self) -> Self;\n@@ -102,14 +102,14 @@ impl FloatMath for f64 {\n \n /// A type that can be randomly generated using an `Rng`.\n #[doc(hidden)]\n-pub trait Rand : Sized {\n+pub trait Rand: Sized {\n     /// Generates a random instance of this type using the specified source of\n     /// randomness.\n     fn rand<R: Rng>(rng: &mut R) -> Self;\n }\n \n /// A random number generator.\n-pub trait Rng : Sized {\n+pub trait Rng: Sized {\n     /// Return the next random u32.\n     ///\n     /// This rarely needs to be called directly, prefer `r.gen()` to"}, {"sha": "c7d560eb1f8e253ebd0bcc1b7c8431954f93e447", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -83,8 +83,8 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default>\n         self.bytes_generated = 0;\n     }\n \n-    /// Create a new `ReseedingRng` from the given reseeder and\n-    /// seed. This uses a default value for `generation_threshold`.\n+/// Create a new `ReseedingRng` from the given reseeder and\n+/// seed. This uses a default value for `generation_threshold`.\n     fn from_seed((rsdr, seed): (Rsdr, S)) -> ReseedingRng<R, Rsdr> {\n         ReseedingRng {\n             rng: SeedableRng::from_seed(seed),\n@@ -122,8 +122,8 @@ impl Default for ReseedWithDefault {\n mod tests {\n     use std::prelude::v1::*;\n \n-    use super::{ReseedingRng, ReseedWithDefault};\n-    use {SeedableRng, Rng};\n+    use super::{ReseedWithDefault, ReseedingRng};\n+    use {Rng, SeedableRng};\n \n     struct Counter {\n         i: u32,\n@@ -166,7 +166,8 @@ mod tests {\n     fn test_rng_seeded() {\n         let mut ra: MyRng = SeedableRng::from_seed((ReseedWithDefault, 2));\n         let mut rb: MyRng = SeedableRng::from_seed((ReseedWithDefault, 2));\n-        assert!(ra.gen_ascii_chars().take(100)\n+        assert!(ra.gen_ascii_chars()\n+                  .take(100)\n                   .eq(rb.gen_ascii_chars().take(100)));\n     }\n "}, {"sha": "bd7c0f683d1c54cde7448ee8a3843b62edb2b2c1", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -20,6 +20,8 @@ remainder of a zero divisor) in a static or constant expression. Erroneous\n code example:\n \n ```compile_fail\n+#[deny(const_err)]\n+\n const X: i32 = 42 / 0;\n // error: attempted to divide by zero in a constant expression\n ```\n@@ -66,7 +68,7 @@ this restriction.\n \n This happens when a trait has a method like the following:\n \n-```compile_fail\n+```\n trait Trait {\n     fn foo(&self) -> Self;\n }\n@@ -364,6 +366,18 @@ type X = u32; // ok!\n \"##,\n \n E0133: r##\"\n+Unsafe code was used outside of an unsafe function or block.\n+\n+Erroneous code example:\n+\n+```compile_fail\n+unsafe fn f() { return; } // This is the unsafe code\n+\n+fn main() {\n+    f(); // error: call to unsafe function requires unsafe function or block\n+}\n+```\n+\n Using unsafe functionality is potentially dangerous and disallowed by safety\n checks. Examples:\n \n@@ -378,7 +392,7 @@ unsafe instructions with an `unsafe` block. For instance:\n unsafe fn f() { return; }\n \n fn main() {\n-    unsafe { f(); }\n+    unsafe { f(); } // ok!\n }\n ```\n \n@@ -392,15 +406,58 @@ function `main()`. If there are multiple such functions, please rename one.\n \"##,\n \n E0137: r##\"\n+More than one function was declared with the `#[main]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail\n+#![feature(main)]\n+\n+#[main]\n+fn foo() {}\n+\n+#[main]\n+fn f() {} // error: multiple functions with a #[main] attribute\n+```\n+\n This error indicates that the compiler found multiple functions with the\n `#[main]` attribute. This is an error because there must be a unique entry\n-point into a Rust program.\n+point into a Rust program. Example:\n+\n+```\n+#![feature(main)]\n+\n+#[main]\n+fn f() {} // ok!\n+```\n \"##,\n \n E0138: r##\"\n+More than one function was declared with the `#[start]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize {}\n+\n+#[start]\n+fn f(argc: isize, argv: *const *const u8) -> isize {}\n+// error: multiple 'start' functions\n+```\n+\n This error indicates that the compiler found multiple functions with the\n `#[start]` attribute. This is an error because there must be a unique entry\n-point into a Rust program.\n+point into a Rust program. Example:\n+\n+```\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n+```\n \"##,\n \n // FIXME link this to the relevant turpl chapters for instilling fear of the\n@@ -481,6 +538,17 @@ call to `mem::forget(v)` in case you want to avoid destructors being called.\n \"##,\n \n E0152: r##\"\n+A lang item was redefined.\n+\n+Erroneous code example:\n+\n+```compile_fail\n+#![feature(lang_items)]\n+\n+#[lang = \"panic_fmt\"]\n+struct Foo; // error: duplicate lang item found: `panic_fmt`\n+```\n+\n Lang items are already implemented in the standard library. Unless you are\n writing a free-standing application (e.g. a kernel), you do not need to provide\n them yourself."}, {"sha": "0624d72dd59939295a1aaaf3c4710ccf3abc6c16", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -153,7 +153,7 @@ structure that is currently uninitialized.\n \n For example, this can happen when a drop has taken place:\n \n-```compile_fail\n+```ignore\n struct Foo {\n     a: u32,\n }"}, {"sha": "8b1d7bed7c42d8fba4ee947cb640c090f31c12b5", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -76,6 +76,8 @@ Not-a-Number (NaN) values cannot be compared for equality and hence can never\n match the input to a match expression. So, the following will not compile:\n \n ```compile_fail\n+#![deny(illegal_floating_point_constant_pattern)]\n+\n const NAN: f32 = 0.0 / 0.0;\n \n let number = 0.1f32;\n@@ -160,7 +162,7 @@ let Some(y) = x;\n If you encounter this error you probably need to use a `match` or `if let` to\n deal with the possibility of failure. Example:\n \n-```compile_fail\n+```\n let x = Some(1);\n \n match x {"}, {"sha": "cba8bd73c014e3b85ab8611b4ea64ad1a399ea83", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -50,11 +50,36 @@ match 5u32 {\n \"##,\n \n E0161: r##\"\n+A value was moved. However, its size was not known at compile time, and only\n+values of a known size can be moved.\n+\n+Erroneous code example:\n+\n+```compile_fail\n+#![feature(box_syntax)]\n+\n+fn main() {\n+    let array: &[isize] = &[1, 2, 3];\n+    let _x: Box<[isize]> = box *array;\n+    // error: cannot move a value of type [isize]: the size of [isize] cannot\n+    //        be statically determined\n+}\n+```\n+\n In Rust, you can only move a value when its size is known at compile time.\n \n To work around this restriction, consider \"hiding\" the value behind a reference:\n either `&x` or `&mut x`. Since a reference has a fixed size, this lets you move\n-it around as usual.\n+it around as usual. Example:\n+\n+```\n+#![feature(box_syntax)]\n+\n+fn main() {\n+    let array: &[isize] = &[1, 2, 3];\n+    let _x: Box<&[isize]> = box array; // ok!\n+}\n+```\n \"##,\n \n E0265: r##\""}, {"sha": "d33bc52c5a7ce7147f7414f25349d5e92ad9d24d", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -17,6 +17,8 @@ A private trait was used on a public type parameter bound. Erroneous code\n examples:\n \n ```compile_fail\n+#![deny(private_in_public)]\n+\n trait Foo {\n     fn dummy(&self) { }\n }\n@@ -45,6 +47,8 @@ E0446: r##\"\n A private type was used in a public type signature. Erroneous code example:\n \n ```compile_fail\n+#![deny(private_in_public)]\n+\n mod Foo {\n     struct Bar(u32);\n \n@@ -73,7 +77,7 @@ mod Foo {\n E0447: r##\"\n The `pub` keyword was used inside a function. Erroneous code example:\n \n-```compile_fail\n+```ignore\n fn foo() {\n     pub struct Bar; // error: visibility has no effect inside functions\n }"}, {"sha": "b576f77dbd77d4f02e650aa34ab345bdf896a40d", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -21,7 +21,7 @@ variable declarations and expression statements.\n \n Here is an example that demonstrates the error:\n \n-```compile_fail\n+```ignore\n fn f() {\n     // Variable declaration before import\n     let x = 0;"}, {"sha": "d36878b03322a30fbe24c4c98c66bdaed168a242", "filename": "src/librustc_trans/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_trans%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_trans%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdiagnostics.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -15,7 +15,7 @@ register_long_diagnostics! {\n E0510: r##\"\n `return_address` was used in an invalid context. Erroneous code example:\n \n-```compile_fail\n+```ignore\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n@@ -54,7 +54,7 @@ E0511: r##\"\n Invalid monomorphization of an intrinsic function was used. Erroneous code\n example:\n \n-```compile_fail\n+```ignore\n #![feature(platform_intrinsics)]\n \n extern \"platform-intrinsic\" {"}, {"sha": "d06030637afd8cc3b23a318c057219f279d9a048", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -931,7 +931,7 @@ first instance of `Foo` could be made to initialize another instance!\n \n Here's an example of a struct that has this problem:\n \n-```compile_fail\n+```ignore\n struct Foo { x: Box<Foo> } // error\n ```\n \n@@ -952,7 +952,7 @@ are generic.\n \n This will cause an error:\n \n-```compile_fail\n+```ignore\n #![feature(repr_simd)]\n \n #[repr(simd)]\n@@ -1143,7 +1143,7 @@ for an explicit choice of the discriminant type. In either cases, the\n discriminant values must fall within a valid range for the expected type;\n otherwise this error is raised. For example:\n \n-```compile_fail\n+```ignore\n #[repr(u8)]\n enum Thing {\n     A = 1024,\n@@ -1154,7 +1154,7 @@ enum Thing {\n Here, 1024 lies outside the valid range for `u8`, so the discriminant for `A` is\n invalid. Here is another, more subtle example which depends on target word size:\n \n-```compile_fail\n+```ignore\n enum DependsOnPointerSize {\n     A = 1 << 32\n }\n@@ -1864,12 +1864,35 @@ fn main<T>() { // error: main function is not allowed to have type parameters\n \"##,\n \n E0132: r##\"\n+A function with the `start` attribute was declared with type parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail\n+#![feature(start)]\n+\n+#[start]\n+fn f<T>() {}\n+```\n+\n It is not possible to declare type parameters on a function that has the `start`\n-attribute. Such a function must have the following type signature:\n+attribute. Such a function must have the following type signature (for more\n+information: http://doc.rust-lang.org/stable/book/no-stdlib.html):\n \n ```ignore\n fn(isize, *const *const u8) -> isize;\n ```\n+\n+Example:\n+\n+```\n+#![feature(start)]\n+\n+#[start]\n+fn my_start(argc: isize, argv: *const *const u8) -> isize {\n+    0\n+}\n+```\n \"##,\n \n E0163: r##\"\n@@ -2076,7 +2099,7 @@ E0193: r##\"\n `where` clauses must use generic type parameters: it does not make sense to use\n them otherwise. An example causing this error:\n \n-```compile_fail\n+```ignore\n trait Foo {\n     fn bar(&self);\n }\n@@ -3140,7 +3163,7 @@ An attempt was made to access an associated constant through either a generic\n type parameter or `Self`. This is not supported yet. An example causing this\n error is shown below:\n \n-```compile_fail\n+```ignore\n #![feature(associated_consts)]\n \n trait Foo {\n@@ -3327,6 +3350,7 @@ The maximum value of an enum was reached, so it cannot be automatically\n set in the next enum value. Erroneous code example:\n \n ```compile_fail\n+#[deny(overflowing_literals)]\n enum Foo {\n     X = 0x7fffffffffffffff,\n     Y, // error: enum discriminant overflowed on value after"}, {"sha": "53201a9580ec0057d3222bddefafce66d1465076", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -271,8 +271,12 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     match res {\n         Ok(r) => {\n             match r {\n-                Err(count) if count > 0 && compile_fail == false => {\n-                    sess.fatal(\"aborting due to previous error(s)\")\n+                Err(count) => {\n+                    if count > 0 && compile_fail == false {\n+                        sess.fatal(\"aborting due to previous error(s)\")\n+                    } else if count == 0 && compile_fail == true {\n+                        panic!(\"test compiled while it wasn't supposed to\")\n+                    }\n                 }\n                 Ok(()) if compile_fail => panic!(\"test compiled while it wasn't supposed to\"),\n                 _ => {}"}, {"sha": "add45ccb362e96bc2348c9938415ddee5c00ac79", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -27,4 +27,3 @@ extern crate libc;\n mod libunwind;\n #[cfg(not(target_env = \"msvc\"))]\n pub use libunwind::*;\n-"}, {"sha": "aadfe202afe796ba6d05257e5df80196e0aff51d", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 20, "deletions": 27, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da602bda3f30a8943dd4d10383bae6d8a77575c/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=5da602bda3f30a8943dd4d10383bae6d8a77575c", "patch": "@@ -38,7 +38,7 @@ pub enum _Unwind_State {\n     _US_UNWIND_FRAME_RESUME = 2,\n     _US_ACTION_MASK = 3,\n     _US_FORCE_UNWIND = 8,\n-    _US_END_OF_STACK = 16\n+    _US_END_OF_STACK = 16,\n }\n \n #[repr(C)]\n@@ -59,9 +59,8 @@ pub type _Unwind_Exception_Class = u64;\n \n pub type _Unwind_Word = libc::uintptr_t;\n \n-pub type _Unwind_Trace_Fn =\n-        extern fn(ctx: *mut _Unwind_Context,\n-                  arg: *mut libc::c_void) -> _Unwind_Reason_Code;\n+pub type _Unwind_Trace_Fn = extern \"C\" fn(ctx: *mut _Unwind_Context, arg: *mut libc::c_void)\n+                                          -> _Unwind_Reason_Code;\n \n #[cfg(target_arch = \"x86\")]\n pub const unwinder_private_data_size: usize = 5;\n@@ -97,9 +96,8 @@ pub struct _Unwind_Exception {\n \n pub enum _Unwind_Context {}\n \n-pub type _Unwind_Exception_Cleanup_Fn =\n-        extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n-                      exception: *mut _Unwind_Exception);\n+pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n+                                                      exception: *mut _Unwind_Exception);\n \n #[cfg_attr(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n                target_os = \"freebsd\",\n@@ -127,20 +125,18 @@ pub type _Unwind_Exception_Cleanup_Fn =\n #[cfg_attr(all(target_os = \"windows\", target_env = \"gnu\"),\n            link(name = \"gcc_eh\"))]\n #[cfg(not(cargobuild))]\n-extern {}\n+extern \"C\" {}\n \n-extern {\n+extern \"C\" {\n     // iOS on armv7 uses SjLj exceptions and requires to link\n     // against corresponding routine (..._SjLj_...)\n     #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n     #[unwind]\n-    pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception)\n-                                  -> _Unwind_Reason_Code;\n+    pub fn _Unwind_RaiseException(exception: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n \n     #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n     #[unwind]\n-    fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception)\n-                                   -> _Unwind_Reason_Code;\n+    fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n \n     pub fn _Unwind_DeleteException(exception: *mut _Unwind_Exception);\n \n@@ -151,28 +147,26 @@ extern {\n     #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))]\n     pub fn _Unwind_Backtrace(trace: _Unwind_Trace_Fn,\n                              trace_argument: *mut libc::c_void)\n-                -> _Unwind_Reason_Code;\n+                             -> _Unwind_Reason_Code;\n \n     // available since GCC 4.2.0, should be fine for our purpose\n     #[cfg(all(not(all(target_os = \"android\", target_arch = \"arm\")),\n               not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n     pub fn _Unwind_GetIPInfo(ctx: *mut _Unwind_Context,\n                              ip_before_insn: *mut libc::c_int)\n-                -> libc::uintptr_t;\n+                             -> libc::uintptr_t;\n \n     #[cfg(all(not(target_os = \"android\"),\n               not(all(target_os = \"linux\", target_arch = \"arm\"))))]\n-    pub fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void)\n-        -> *mut libc::c_void;\n+    pub fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void) -> *mut libc::c_void;\n }\n \n // ... and now we just providing access to SjLj counterspart\n // through a standard name to hide those details from others\n // (see also comment above regarding _Unwind_RaiseException)\n #[cfg(all(target_os = \"ios\", target_arch = \"arm\"))]\n #[inline]\n-pub unsafe fn _Unwind_RaiseException(exc: *mut _Unwind_Exception)\n-                                     -> _Unwind_Reason_Code {\n+pub unsafe fn _Unwind_RaiseException(exc: *mut _Unwind_Exception) -> _Unwind_Reason_Code {\n     _Unwind_SjLj_RaiseException(exc)\n }\n \n@@ -207,18 +201,20 @@ pub unsafe fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t {\n     }\n \n     type _Unwind_Word = libc::c_uint;\n-    extern {\n+    extern \"C\" {\n         fn _Unwind_VRS_Get(ctx: *mut _Unwind_Context,\n                            klass: _Unwind_VRS_RegClass,\n                            word: _Unwind_Word,\n                            repr: _Unwind_VRS_DataRepresentation,\n                            data: *mut libc::c_void)\n-            -> _Unwind_VRS_Result;\n+                           -> _Unwind_VRS_Result;\n     }\n \n     let mut val: _Unwind_Word = 0;\n     let ptr = &mut val as *mut _Unwind_Word;\n-    let _ = _Unwind_VRS_Get(ctx, _Unwind_VRS_RegClass::_UVRSC_CORE, 15,\n+    let _ = _Unwind_VRS_Get(ctx,\n+                            _Unwind_VRS_RegClass::_UVRSC_CORE,\n+                            15,\n                             _Unwind_VRS_DataRepresentation::_UVRSD_UINT32,\n                             ptr as *mut libc::c_void);\n     (val & !1) as libc::uintptr_t\n@@ -230,8 +226,7 @@ pub unsafe fn _Unwind_GetIP(ctx: *mut _Unwind_Context) -> libc::uintptr_t {\n           all(target_os = \"linux\", target_arch = \"arm\")))]\n pub unsafe fn _Unwind_GetIPInfo(ctx: *mut _Unwind_Context,\n                                 ip_before_insn: *mut libc::c_int)\n-    -> libc::uintptr_t\n-{\n+                                -> libc::uintptr_t {\n     *ip_before_insn = 0;\n     _Unwind_GetIP(ctx)\n }\n@@ -240,8 +235,6 @@ pub unsafe fn _Unwind_GetIPInfo(ctx: *mut _Unwind_Context,\n // a no-op\n #[cfg(any(target_os = \"android\",\n           all(target_os = \"linux\", target_arch = \"arm\")))]\n-pub unsafe fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void)\n-    -> *mut libc::c_void\n-{\n+pub unsafe fn _Unwind_FindEnclosingFunction(pc: *mut libc::c_void) -> *mut libc::c_void {\n     pc\n }"}]}