{"sha": "3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOGY0Yjc5MDcyYzZkNmJhNDc2OWYyNDBlMGI0ODFkMTYxNWQzN2I=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-06T12:44:59Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-06T12:48:05Z"}, "message": "Fix PairParts related issues", "tree": {"sha": "d39f9a83d0e58391b8f7737abc73aa3595fb2306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d39f9a83d0e58391b8f7737abc73aa3595fb2306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "html_url": "https://github.com/rust-lang/rust/commit/3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e8f4b79072c6d6ba4769f240e0b481d1615d37b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd26db8c47af562d0e1bc78057c875c5e6f4e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd26db8c47af562d0e1bc78057c875c5e6f4e91", "html_url": "https://github.com/rust-lang/rust/commit/1cd26db8c47af562d0e1bc78057c875c5e6f4e91"}], "stats": {"total": 84, "additions": 45, "deletions": 39}, "files": [{"sha": "d8f42944ad0c2adc34deec6bd69b1174c141b518", "filename": "src/expr.rs", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f4b79072c6d6ba4769f240e0b481d1615d37b/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f4b79072c6d6ba4769f240e0b481d1615d37b/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "patch": "@@ -83,7 +83,7 @@ pub fn format_expr(\n             rewrite_pair(\n                 &**lhs,\n                 &**rhs,\n-                &PairParts(\"\", &format!(\" {} \", context.snippet(op.span)), \"\"),\n+                PairParts::new(\"\", &format!(\" {} \", context.snippet(op.span)), \"\"),\n                 context,\n                 shape,\n                 context.config.binop_separator(),\n@@ -184,15 +184,15 @@ pub fn format_expr(\n         ast::ExprKind::Cast(ref expr, ref ty) => rewrite_pair(\n             &**expr,\n             &**ty,\n-            &PairParts(\"\", \" as \", \"\"),\n+            PairParts::new(\"\", \" as \", \"\"),\n             context,\n             shape,\n             SeparatorPlace::Front,\n         ),\n         ast::ExprKind::Type(ref expr, ref ty) => rewrite_pair(\n             &**expr,\n             &**ty,\n-            &PairParts(\"\", \": \", \"\"),\n+            PairParts::new(\"\", \": \", \"\"),\n             context,\n             shape,\n             SeparatorPlace::Back,\n@@ -209,7 +209,7 @@ pub fn format_expr(\n             rewrite_pair(\n                 &**expr,\n                 &**repeats,\n-                &PairParts(lbr, \"; \", rbr),\n+                PairParts::new(lbr, \"; \", rbr),\n                 context,\n                 shape,\n                 SeparatorPlace::Back,\n@@ -245,7 +245,7 @@ pub fn format_expr(\n                     rewrite_pair(\n                         &*lhs,\n                         &*rhs,\n-                        &PairParts(\"\", &sp_delim, \"\"),\n+                        PairParts::new(\"\", &sp_delim, \"\"),\n                         context,\n                         shape,\n                         SeparatorPlace::Front,\n@@ -305,12 +305,17 @@ pub fn format_expr(\n         })\n }\n \n-pub struct PairParts<'a>(pub &'a str, pub &'a str, pub &'a str);\n+#[derive(new)]\n+pub struct PairParts<'a> {\n+    prefix: &'a str,\n+    infix: &'a str,\n+    suffix: &'a str,\n+}\n \n pub fn rewrite_pair<LHS, RHS>(\n     lhs: &LHS,\n     rhs: &RHS,\n-    pp: &PairParts,\n+    pp: PairParts,\n     context: &RewriteContext,\n     shape: Shape,\n     separator_place: SeparatorPlace,\n@@ -319,22 +324,21 @@ where\n     LHS: Rewrite,\n     RHS: Rewrite,\n {\n-    let &PairParts(prefix, infix, suffix) = pp;\n     let lhs_overhead = match separator_place {\n-        SeparatorPlace::Back => shape.used_width() + prefix.len() + infix.trim_right().len(),\n+        SeparatorPlace::Back => shape.used_width() + pp.prefix.len() + pp.infix.trim_right().len(),\n         SeparatorPlace::Front => shape.used_width(),\n     };\n     let lhs_shape = Shape {\n         width: context.budget(lhs_overhead),\n         ..shape\n     };\n     let lhs_result = lhs.rewrite(context, lhs_shape)\n-        .map(|lhs_str| format!(\"{}{}\", prefix, lhs_str))?;\n+        .map(|lhs_str| format!(\"{}{}\", pp.prefix, lhs_str))?;\n \n     // Try to the both lhs and rhs on the same line.\n     let rhs_orig_result = shape\n-        .offset_left(last_line_width(&lhs_result) + infix.len())\n-        .and_then(|s| s.sub_width(suffix.len()))\n+        .offset_left(last_line_width(&lhs_result) + pp.infix.len())\n+        .and_then(|s| s.sub_width(pp.suffix.len()))\n         .and_then(|rhs_shape| rhs.rewrite(context, rhs_shape));\n     if let Some(ref rhs_result) = rhs_orig_result {\n         // If the rhs looks like block expression, we allow it to stay on the same line\n@@ -345,10 +349,16 @@ where\n             .map(|first_line| first_line.ends_with('{'))\n             .unwrap_or(false);\n         if !rhs_result.contains('\\n') || allow_same_line {\n-            let one_line_width = last_line_width(&lhs_result) + infix.len()\n-                + first_line_width(rhs_result) + suffix.len();\n+            let one_line_width = last_line_width(&lhs_result) + pp.infix.len()\n+                + first_line_width(rhs_result) + pp.suffix.len();\n             if one_line_width <= shape.width {\n-                return Some(format!(\"{}{}{}{}\", lhs_result, infix, rhs_result, suffix));\n+                return Some(format!(\n+                    \"{}{}{}{}\",\n+                    lhs_result,\n+                    pp.infix,\n+                    rhs_result,\n+                    pp.suffix\n+                ));\n             }\n         }\n     }\n@@ -357,8 +367,8 @@ where\n     // Re-evaluate the rhs because we have more space now:\n     let mut rhs_shape = match context.config.control_style() {\n         Style::Legacy => shape\n-            .sub_width(suffix.len() + prefix.len())?\n-            .visual_indent(prefix.len()),\n+            .sub_width(pp.suffix.len() + pp.prefix.len())?\n+            .visual_indent(pp.prefix.len()),\n         Style::Rfc => {\n             // Try to calculate the initial constraint on the right hand side.\n             let rhs_overhead = shape.rhs_overhead(context.config);\n@@ -367,31 +377,25 @@ where\n         }\n     };\n     let infix = match separator_place {\n-        SeparatorPlace::Back => infix.trim_right(),\n-        SeparatorPlace::Front => infix.trim_left(),\n+        SeparatorPlace::Back => pp.infix.trim_right(),\n+        SeparatorPlace::Front => pp.infix.trim_left(),\n     };\n     if separator_place == SeparatorPlace::Front {\n         rhs_shape = rhs_shape.offset_left(infix.len())?;\n     }\n     let rhs_result = rhs.rewrite(context, rhs_shape)?;\n-    match separator_place {\n-        SeparatorPlace::Back => Some(format!(\n-            \"{}{}\\n{}{}{}\",\n-            lhs_result,\n-            infix,\n-            rhs_shape.indent.to_string(context.config),\n-            rhs_result,\n-            suffix\n-        )),\n-        SeparatorPlace::Front => Some(format!(\n-            \"{}\\n{}{}{}{}\",\n-            lhs_result,\n-            rhs_shape.indent.to_string(context.config),\n-            infix,\n-            rhs_result,\n-            suffix\n-        )),\n-    }\n+    let indent_str = rhs_shape.indent.to_string(context.config);\n+    let infix_with_sep = match separator_place {\n+        SeparatorPlace::Back => format!(\"{}\\n{}\", infix, indent_str),\n+        SeparatorPlace::Front => format!(\"\\n{}{}\", indent_str, infix),\n+    };\n+    Some(format!(\n+        \"{}{}{}{}\",\n+        lhs_result,\n+        infix_with_sep,\n+        rhs_result,\n+        pp.suffix\n+    ))\n }\n \n pub fn rewrite_array<'a, I>("}, {"sha": "ee9d551c88014fdb4ca8a310e5e869648bab77f9", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f4b79072c6d6ba4769f240e0b481d1615d37b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f4b79072c6d6ba4769f240e0b481d1615d37b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(rustc_private)]\n \n+#[macro_use]\n+extern crate derive_new;\n extern crate diff;\n #[macro_use]\n extern crate log;"}, {"sha": "a7e6c48b6d25c408614416d1f711681e3cb719ac", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f4b79072c6d6ba4769f240e0b481d1615d37b/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f4b79072c6d6ba4769f240e0b481d1615d37b/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "patch": "@@ -65,7 +65,7 @@ impl Rewrite for Pat {\n                 rewrite_pair(\n                     &**lhs,\n                     &**rhs,\n-                    &PairParts(\"\", infix, \"\"),\n+                    PairParts::new(\"\", infix, \"\"),\n                     context,\n                     shape,\n                     SeparatorPlace::Front,"}, {"sha": "59b4ac438b07474d06c53f66bdb498ff2fd67482", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e8f4b79072c6d6ba4769f240e0b481d1615d37b/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8f4b79072c6d6ba4769f240e0b481d1615d37b/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "patch": "@@ -709,7 +709,7 @@ impl Rewrite for ast::Ty {\n                 rewrite_pair(\n                     &**ty,\n                     &**repeats,\n-                    &PairParts(lbr, \"; \", rbr),\n+                    PairParts::new(lbr, \"; \", rbr),\n                     context,\n                     shape,\n                     SeparatorPlace::Back,"}]}