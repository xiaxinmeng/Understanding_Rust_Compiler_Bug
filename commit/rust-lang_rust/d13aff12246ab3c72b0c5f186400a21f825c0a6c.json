{"sha": "d13aff12246ab3c72b0c5f186400a21f825c0a6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxM2FmZjEyMjQ2YWIzYzcyYjBjNWYxODY0MDBhMjFmODI1YzBhNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-20T19:26:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-20T19:26:40Z"}, "message": "auto merge of #18750 : nikomatsakis/rust/issue-18333-skolemize-open-existential, r=nrc\n\nIn the general case, at least, it is not possible to make an object out of an unsized type. This is because the object type would have to store the fat pointer information for the `self` value *and* the vtable -- meaning it'd have to be a fat pointer with three words -- but for the compiler to know that the object requires three words, it would have to know the self-type of the object (is `self` a thin or fat pointer?), which of course it doesn't.\r\n\r\nFixes #18333.\r\n\r\nr? @nick29581", "tree": {"sha": "6c7396e4b752f97768c4404a583b9cb903e3ebc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c7396e4b752f97768c4404a583b9cb903e3ebc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d13aff12246ab3c72b0c5f186400a21f825c0a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d13aff12246ab3c72b0c5f186400a21f825c0a6c", "html_url": "https://github.com/rust-lang/rust/commit/d13aff12246ab3c72b0c5f186400a21f825c0a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d13aff12246ab3c72b0c5f186400a21f825c0a6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c8f2b0c1846756e617f1f1fc1372c506e24248", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c8f2b0c1846756e617f1f1fc1372c506e24248", "html_url": "https://github.com/rust-lang/rust/commit/96c8f2b0c1846756e617f1f1fc1372c506e24248"}, {"sha": "7a372e23cbab0be6abd3fbd321d0548640568920", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a372e23cbab0be6abd3fbd321d0548640568920", "html_url": "https://github.com/rust-lang/rust/commit/7a372e23cbab0be6abd3fbd321d0548640568920"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "0a47d647890381d27ca17d249f10e1f3649ca03d", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=d13aff12246ab3c72b0c5f186400a21f825c0a6c", "patch": "@@ -94,6 +94,9 @@ pub enum ObligationCauseCode<'tcx> {\n \n     // Types of fields (other than the last) in a struct must be sized.\n     FieldSized,\n+\n+    // Only Sized types can be made into objects\n+    ObjectSized,\n }\n \n pub type Obligations<'tcx> = subst::VecPerParamSpace<Obligation<'tcx>>;"}, {"sha": "a07269d875ce3d60591ab1b9d59b1db4afdf4290", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d13aff12246ab3c72b0c5f186400a21f825c0a6c", "patch": "@@ -1775,12 +1775,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ty::UnsizeVtable(ref ty_trait, self_ty) => {\n                 vtable::check_object_safety(self.tcx(), ty_trait, span);\n+\n                 // If the type is `Foo+'a`, ensures that the type\n                 // being cast to `Foo+'a` implements `Foo`:\n                 vtable::register_object_cast_obligations(self,\n-                                                          span,\n-                                                          ty_trait,\n-                                                          self_ty);\n+                                                         span,\n+                                                         ty_trait,\n+                                                         self_ty);\n \n                 // If the type is `Foo+'a`, ensures that the type\n                 // being cast to `Foo+'a` outlives `'a`:"}, {"sha": "1619a4224f9f02218fd92562dc2e02c723e0ac7a", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=d13aff12246ab3c72b0c5f186400a21f825c0a6c", "patch": "@@ -21,6 +21,7 @@ use middle::typeck::infer;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::Span;\n+use util::common::ErrorReported;\n use util::ppaux::{UserString, Repr, ty_to_string};\n \n pub fn check_object_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n@@ -238,6 +239,20 @@ pub fn register_object_cast_obligations<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                   referent_ty: Ty<'tcx>)\n                                                   -> Rc<ty::TraitRef<'tcx>>\n {\n+    // We can only make objects from sized types.\n+    let sized_obligation =\n+        traits::obligation_for_builtin_bound(\n+            fcx.tcx(),\n+            traits::ObligationCause::new(span, traits::ObjectSized),\n+            referent_ty,\n+            ty::BoundSized);\n+    match sized_obligation {\n+        Ok(sized_obligation) => {\n+            fcx.register_obligation(sized_obligation);\n+        }\n+        Err(ErrorReported) => { }\n+    }\n+\n     // This is just for better error reporting. Kinda goofy. The object type stuff\n     // needs some refactoring so there is a more convenient type to pass around.\n     let object_trait_ty =\n@@ -543,5 +558,9 @@ fn note_obligation_cause<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                        \"only the last field of a struct or enum variant \\\n                        may have a dynamically sized type\")\n         }\n+        traits::ObjectSized => {\n+            span_note!(tcx.sess, obligation.cause.span,\n+                       \"only sized types can be made into objects\");\n+        }\n     }\n }"}, {"sha": "e2fa02584f4fd70be3c9db8a37837be299b13ee6", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=d13aff12246ab3c72b0c5f186400a21f825c0a6c", "patch": "@@ -20,7 +20,8 @@ use syntax::ast;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-// An error has already been reported to the user, so no need to continue checking.\n+// Useful type to use with `Result<>` indicate that an error has already\n+// been reported to the user, so no need to continue checking.\n #[deriving(Clone,Show)]\n pub struct ErrorReported;\n "}, {"sha": "e40cc342c0b4914c4cdda370bf5bbaa3a0b77a4b", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=d13aff12246ab3c72b0c5f186400a21f825c0a6c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we cannot create objects from unsized types.\n+\n+trait Foo for Sized? {}\n+impl Foo for str {}\n+\n+fn test<Sized? T: Foo>(t: &T) {\n+    let u: &Foo = t;\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `T`\n+\n+    let v: &Foo = t as &Foo;\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `T`\n+}\n+\n+fn main() {\n+    let _: &[&Foo] = &[\"hi\"];\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `str`\n+\n+    let _: &Foo = \"hi\" as &Foo;\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `str`\n+}"}, {"sha": "01a15023fbaada5f68e74d61ceb027b95b5d2c00", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d13aff12246ab3c72b0c5f186400a21f825c0a6c/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=d13aff12246ab3c72b0c5f186400a21f825c0a6c", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let _x = \"test\" as &::std::any::Any;\n //~^ ERROR the trait `core::kinds::Sized` is not implemented for the type `str`\n-//~^^ NOTE the trait `core::kinds::Sized` must be implemented for the cast to the object type\n+//~^^ ERROR the trait `core::kinds::Sized` is not implemented for the type `str`\n }"}]}