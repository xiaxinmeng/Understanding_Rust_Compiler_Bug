{"sha": "803ddb83598838fb9de308d283b759ba463e5e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwM2RkYjgzNTk4ODM4ZmI5ZGUzMDhkMjgzYjc1OWJhNDYzZTVlODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-01T07:55:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-01T07:55:00Z"}, "message": "Auto merge of #83726 - the8472:large-trustedlen-fail-fast, r=kennytm\n\npanic early when `TrustedLen` indicates a `length > usize::MAX`\n\nChanges `TrustedLen` specializations to immediately panic when `size_hint().1 == None`.\n\nAs far as I can tell this is ~not a change~ a minimal change in observable behavior for anything except ZSTs because the fallback path would go through `extend_desugared()` which tries to `reserve(lower_bound)` which already is `usize::MAX` and that would also lead to a panic. Before it might have popped somewhere between zero and a few elements from the iterator before panicking while it now panics immediately.\n\nOverall this should reduce codegen by eliminating the fallback paths.\n\nWhile looking into the `with_capacity()` behavior I also noticed that its documentation didn't have a *Panics* section, so I added that.", "tree": {"sha": "ed7c809ab360f62fe6f9dcb5336813d50b2665ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed7c809ab360f62fe6f9dcb5336813d50b2665ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/803ddb83598838fb9de308d283b759ba463e5e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/803ddb83598838fb9de308d283b759ba463e5e80", "html_url": "https://github.com/rust-lang/rust/commit/803ddb83598838fb9de308d283b759ba463e5e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/803ddb83598838fb9de308d283b759ba463e5e80/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e1ec09952c5ab7798addd29532d44dc020283f", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e1ec09952c5ab7798addd29532d44dc020283f", "html_url": "https://github.com/rust-lang/rust/commit/49e1ec09952c5ab7798addd29532d44dc020283f"}, {"sha": "ad3a791e2a8c0300090fa73d4ce414a738346a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3a791e2a8c0300090fa73d4ce414a738346a41", "html_url": "https://github.com/rust-lang/rust/commit/ad3a791e2a8c0300090fa73d4ce414a738346a41"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "2ee5e6c791c6404dad7c78468e79044f3822236d", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=803ddb83598838fb9de308d283b759ba463e5e80", "patch": "@@ -1848,8 +1848,11 @@ impl<T, I: iter::TrustedLen<Item = T>> ToRcSlice<T> for I {\n                 Rc::from_iter_exact(self, low)\n             }\n         } else {\n-            // Fall back to normal implementation.\n-            self.collect::<Vec<T>>().into()\n+            // TrustedLen contract guarantees that `upper_bound == `None` implies an iterator\n+            // length exceeding `usize::MAX`.\n+            // The default implementation would collect into a vec which would panic.\n+            // Thus we panic here immediately without invoking `Vec` code.\n+            panic!(\"capacity overflow\");\n         }\n     }\n }"}, {"sha": "1b7e656cefd9afc82f069dd96357c9947dbcafb8", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=803ddb83598838fb9de308d283b759ba463e5e80", "patch": "@@ -2481,8 +2481,11 @@ impl<T, I: iter::TrustedLen<Item = T>> ToArcSlice<T> for I {\n                 Arc::from_iter_exact(self, low)\n             }\n         } else {\n-            // Fall back to normal implementation.\n-            self.collect::<Vec<T>>().into()\n+            // TrustedLen contract guarantees that `upper_bound == `None` implies an iterator\n+            // length exceeding `usize::MAX`.\n+            // The default implementation would collect into a vec which would panic.\n+            // Thus we panic here immediately without invoking `Vec` code.\n+            panic!(\"capacity overflow\");\n         }\n     }\n }"}, {"sha": "91c3b16deee77194c922086dd07dbaef2b5f0fcc", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=803ddb83598838fb9de308d283b759ba463e5e80", "patch": "@@ -410,6 +410,10 @@ impl<T> Vec<T> {\n     ///\n     /// [Capacity and reallocation]: #capacity-and-reallocation\n     ///\n+    /// # Panics\n+    ///\n+    /// Panics if the new capacity exceeds `isize::MAX` bytes.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -541,6 +545,10 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// [Capacity and reallocation]: #capacity-and-reallocation\n     ///\n+    /// # Panics\n+    ///\n+    /// Panics if the new capacity exceeds `isize::MAX` bytes.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "e132befcfa5e28cde53d3d5e4589beea325d47b8", "filename": "library/alloc/src/vec/spec_extend.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs?ref=803ddb83598838fb9de308d283b759ba463e5e80", "patch": "@@ -47,7 +47,12 @@ where\n                 });\n             }\n         } else {\n-            self.extend_desugared(iterator)\n+            // Per TrustedLen contract a `None` upper bound means that the iterator length\n+            // truly exceeds usize::MAX, which would eventually lead to a capacity overflow anyway.\n+            // Since the other branch already panics eagerly (via `reserve()`) we do the same here.\n+            // This avoids additional codegen for a fallback code path which would eventually\n+            // panic anyway.\n+            panic!(\"capacity overflow\");\n         }\n     }\n }"}, {"sha": "948cf044197c2320398c54a2c9d9809dd9e80f56", "filename": "library/alloc/src/vec/spec_from_iter_nested.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/803ddb83598838fb9de308d283b759ba463e5e80/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs?ref=803ddb83598838fb9de308d283b759ba463e5e80", "patch": "@@ -46,10 +46,13 @@ where\n     fn from_iter(iterator: I) -> Self {\n         let mut vector = match iterator.size_hint() {\n             (_, Some(upper)) => Vec::with_capacity(upper),\n-            _ => Vec::new(),\n+            // TrustedLen contract guarantees that `size_hint() == (_, None)` means that there\n+            // are more than `usize::MAX` elements.\n+            // Since the previous branch would eagerly panic if the capacity is too large\n+            // (via `with_capacity`) we do the same here.\n+            _ => panic!(\"capacity overflow\"),\n         };\n-        // must delegate to spec_extend() since extend() itself delegates\n-        // to spec_from for empty Vecs\n+        // reuse extend specialization for TrustedLen\n         vector.spec_extend(iterator);\n         vector\n     }"}]}