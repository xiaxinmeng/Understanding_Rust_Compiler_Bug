{"sha": "473d0c551006f838f69dfadcc1965492849cfc79", "node_id": "C_kwDOAAsO6NoAKDQ3M2QwYzU1MTAwNmY4MzhmNjlkZmFkY2MxOTY1NDkyODQ5Y2ZjNzk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-01T18:59:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-02T23:26:34Z"}, "message": "Introduce write_aggregate.", "tree": {"sha": "0b70c791fcbd4c37afd0b3b63b1ab2da7c3a42e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b70c791fcbd4c37afd0b3b63b1ab2da7c3a42e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/473d0c551006f838f69dfadcc1965492849cfc79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/473d0c551006f838f69dfadcc1965492849cfc79", "html_url": "https://github.com/rust-lang/rust/commit/473d0c551006f838f69dfadcc1965492849cfc79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/473d0c551006f838f69dfadcc1965492849cfc79/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83173c68f5f938481a61ba370b2ef11556163ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/83173c68f5f938481a61ba370b2ef11556163ece", "html_url": "https://github.com/rust-lang/rust/commit/83173c68f5f938481a61ba370b2ef11556163ece"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "8d4d0420cda4ab27a462515c94e4eee43b3c7317", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/473d0c551006f838f69dfadcc1965492849cfc79/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473d0c551006f838f69dfadcc1965492849cfc79/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=473d0c551006f838f69dfadcc1965492849cfc79", "patch": "@@ -846,6 +846,34 @@ where\n         Ok(())\n     }\n \n+    /// Writes the discriminant of the given variant.\n+    #[instrument(skip(self), level = \"debug\")]\n+    pub fn write_aggregate(\n+        &mut self,\n+        kind: &mir::AggregateKind<'tcx>,\n+        operands: &[mir::Operand<'tcx>],\n+        dest: &PlaceTy<'tcx, M::Provenance>,\n+    ) -> InterpResult<'tcx> {\n+        self.write_uninit(&dest)?;\n+        let (variant_index, variant_dest, active_field_index) = match *kind {\n+            mir::AggregateKind::Adt(_, variant_index, _, _, active_field_index) => {\n+                let variant_dest = self.place_downcast(&dest, variant_index)?;\n+                (variant_index, variant_dest, active_field_index)\n+            }\n+            _ => (VariantIdx::from_u32(0), dest.clone(), None),\n+        };\n+        if active_field_index.is_some() {\n+            assert_eq!(operands.len(), 1);\n+        }\n+        for (field_index, operand) in operands.iter().enumerate() {\n+            let field_index = active_field_index.unwrap_or(field_index);\n+            let field_dest = self.place_field(&variant_dest, field_index)?;\n+            let op = self.eval_operand(operand, Some(field_dest.layout))?;\n+            self.copy_op(&op, &field_dest, /*allow_transmute*/ false)?;\n+        }\n+        self.write_discriminant(variant_index, &dest)\n+    }\n+\n     pub fn raw_const_to_mplace(\n         &self,\n         raw: ConstAlloc<'tcx>,"}, {"sha": "7d9a98da08a9a037ed104e5b55c9b4c49c524ef7", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/473d0c551006f838f69dfadcc1965492849cfc79/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/473d0c551006f838f69dfadcc1965492849cfc79/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=473d0c551006f838f69dfadcc1965492849cfc79", "patch": "@@ -7,7 +7,6 @@ use either::Either;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_middle::ty::layout::LayoutOf;\n-use rustc_target::abi::VariantIdx;\n \n use super::{ImmTy, InterpCx, Machine};\n \n@@ -200,24 +199,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Aggregate(box ref kind, ref operands) => {\n-                self.write_uninit(&dest)?;\n-                let (variant_index, variant_dest, active_field_index) = match *kind {\n-                    mir::AggregateKind::Adt(_, variant_index, _, _, active_field_index) => {\n-                        let variant_dest = self.place_downcast(&dest, variant_index)?;\n-                        (variant_index, variant_dest, active_field_index)\n-                    }\n-                    _ => (VariantIdx::from_u32(0), dest.clone(), None),\n-                };\n-                if active_field_index.is_some() {\n-                    assert_eq!(operands.len(), 1);\n-                }\n-                for (field_index, operand) in operands.iter().enumerate() {\n-                    let field_index = active_field_index.unwrap_or(field_index);\n-                    let field_dest = self.place_field(&variant_dest, field_index)?;\n-                    let op = self.eval_operand(operand, Some(field_dest.layout))?;\n-                    self.copy_op(&op, &field_dest, /*allow_transmute*/ false)?;\n-                }\n-                self.write_discriminant(variant_index, &dest)?;\n+                self.write_aggregate(kind, operands, &dest)?;\n             }\n \n             Repeat(ref operand, _) => {"}]}