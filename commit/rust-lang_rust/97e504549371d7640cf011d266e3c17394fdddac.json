{"sha": "97e504549371d7640cf011d266e3c17394fdddac", "node_id": "C_kwDOAAsO6NoAKDk3ZTUwNDU0OTM3MWQ3NjQwY2YwMTFkMjY2ZTNjMTczOTRmZGRkYWM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-20T17:49:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-12-20T17:49:43Z"}, "message": "Fix taking address of truly unsized type field of unsized adt", "tree": {"sha": "701118d2ee37ea5fa7c5ad3655d4ef9d6ccf8e84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/701118d2ee37ea5fa7c5ad3655d4ef9d6ccf8e84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97e504549371d7640cf011d266e3c17394fdddac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97e504549371d7640cf011d266e3c17394fdddac", "html_url": "https://github.com/rust-lang/rust/commit/97e504549371d7640cf011d266e3c17394fdddac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97e504549371d7640cf011d266e3c17394fdddac/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f557a7effb68fe580ec6d09f3072380ff5e1044d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f557a7effb68fe580ec6d09f3072380ff5e1044d", "html_url": "https://github.com/rust-lang/rust/commit/f557a7effb68fe580ec6d09f3072380ff5e1044d"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "cf8fada5320f96ab654a8468125639ed98c1eb55", "filename": "example/issue-91827-extern-types.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/97e504549371d7640cf011d266e3c17394fdddac/example%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e504549371d7640cf011d266e3c17394fdddac/example%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fissue-91827-extern-types.rs?ref=97e504549371d7640cf011d266e3c17394fdddac", "patch": "@@ -0,0 +1,60 @@\n+// Copied from rustc ui test suite\n+\n+// run-pass\n+//\n+// Test that we can handle unsized types with an extern type tail part.\n+// Regression test for issue #91827.\n+\n+#![feature(const_ptr_offset_from)]\n+#![feature(const_slice_from_raw_parts)]\n+#![feature(extern_types)]\n+\n+use std::ptr::addr_of;\n+\n+extern \"C\" {\n+    type Opaque;\n+}\n+\n+unsafe impl Sync for Opaque {}\n+\n+#[repr(C)]\n+pub struct List<T> {\n+    len: usize,\n+    data: [T; 0],\n+    tail: Opaque,\n+}\n+\n+#[repr(C)]\n+pub struct ListImpl<T, const N: usize> {\n+    len: usize,\n+    data: [T; N],\n+}\n+\n+impl<T> List<T> {\n+    const fn as_slice(&self) -> &[T] {\n+        unsafe { std::slice::from_raw_parts(self.data.as_ptr(), self.len) }\n+    }\n+}\n+\n+impl<T, const N: usize> ListImpl<T, N> {\n+    const fn as_list(&self) -> &List<T> {\n+        unsafe { std::mem::transmute(self) }\n+    }\n+}\n+\n+pub static A: ListImpl<u128, 3> = ListImpl {\n+    len: 3,\n+    data: [5, 6, 7],\n+};\n+pub static A_REF: &'static List<u128> = A.as_list();\n+pub static A_TAIL_OFFSET: isize = tail_offset(A.as_list());\n+\n+const fn tail_offset<T>(list: &List<T>) -> isize {\n+    unsafe { (addr_of!(list.tail) as *const u8).offset_from(list as *const List<T> as *const u8) }\n+}\n+\n+fn main() {\n+    assert_eq!(A_REF.as_slice(), &[5, 6, 7]);\n+    // Check that interpreter and code generation agree about the position of the tail field.\n+    assert_eq!(A_TAIL_OFFSET, tail_offset(A_REF));\n+}"}, {"sha": "fd2b3761ff0364da4aeb6ceca1c607a0d6015c61", "filename": "scripts/tests.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97e504549371d7640cf011d266e3c17394fdddac/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/97e504549371d7640cf011d266e3c17394fdddac/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=97e504549371d7640cf011d266e3c17394fdddac", "patch": "@@ -35,6 +35,10 @@ function base_sysroot_tests() {\n     $MY_RUSTC example/arbitrary_self_types_pointers_and_wrappers.rs --crate-name arbitrary_self_types_pointers_and_wrappers --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/arbitrary_self_types_pointers_and_wrappers\n \n+    echo \"[AOT] issue_91827_extern_types\"\n+    $MY_RUSTC example/issue-91827-extern-types.rs --crate-name issue_91827_extern_types --crate-type bin --target \"$TARGET_TRIPLE\"\n+    $RUN_WRAPPER ./target/out/issue_91827_extern_types\n+\n     echo \"[AOT] alloc_system\"\n     $MY_RUSTC example/alloc_system.rs --crate-type lib --target \"$TARGET_TRIPLE\"\n "}, {"sha": "f29d13ccabddd25b4bd4a208ac2fa32df2fb937e", "filename": "src/value_and_place.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97e504549371d7640cf011d266e3c17394fdddac/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97e504549371d7640cf011d266e3c17394fdddac/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=97e504549371d7640cf011d266e3c17394fdddac", "patch": "@@ -672,7 +672,12 @@ impl<'tcx> CPlace<'tcx> {\n \n         let (field_ptr, field_layout) = codegen_field(fx, base, extra, layout, field);\n         if field_layout.is_unsized() {\n-            CPlace::for_ptr_with_extra(field_ptr, extra.unwrap(), field_layout)\n+            if let ty::Foreign(_) = field_layout.ty.kind() {\n+                assert!(extra.is_none());\n+                CPlace::for_ptr(field_ptr, field_layout)\n+            } else {\n+                CPlace::for_ptr_with_extra(field_ptr, extra.unwrap(), field_layout)\n+            }\n         } else {\n             CPlace::for_ptr(field_ptr, field_layout)\n         }"}]}