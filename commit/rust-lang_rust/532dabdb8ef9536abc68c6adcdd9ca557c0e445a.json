{"sha": "532dabdb8ef9536abc68c6adcdd9ca557c0e445a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMmRhYmRiOGVmOTUzNmFiYzY4YzZhZGNkZDljYTU1N2MwZTQ0NWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T09:58:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T10:12:45Z"}, "message": "Miri tests: skip parts of test_char_range", "tree": {"sha": "5c71e577972190e3e0b074a682b2622b8323ed73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c71e577972190e3e0b074a682b2622b8323ed73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/532dabdb8ef9536abc68c6adcdd9ca557c0e445a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/532dabdb8ef9536abc68c6adcdd9ca557c0e445a", "html_url": "https://github.com/rust-lang/rust/commit/532dabdb8ef9536abc68c6adcdd9ca557c0e445a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/532dabdb8ef9536abc68c6adcdd9ca557c0e445a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6fa392238a459c29a47e2cf824d79a49a8ba039", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fa392238a459c29a47e2cf824d79a49a8ba039", "html_url": "https://github.com/rust-lang/rust/commit/b6fa392238a459c29a47e2cf824d79a49a8ba039"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "3b854b56c320dcc7007a8c00edfb6993a12b2577", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/532dabdb8ef9536abc68c6adcdd9ca557c0e445a/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/532dabdb8ef9536abc68c6adcdd9ca557c0e445a/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=532dabdb8ef9536abc68c6adcdd9ca557c0e445a", "patch": "@@ -1959,8 +1959,11 @@ fn test_range() {\n #[test]\n fn test_char_range() {\n     use std::char;\n-    assert!(('\\0'..=char::MAX).eq((0..=char::MAX as u32).filter_map(char::from_u32)));\n-    assert!(('\\0'..=char::MAX).rev().eq((0..=char::MAX as u32).filter_map(char::from_u32).rev()));\n+    // Miri is too slow\n+    let from = if cfg!(miri) { char::from_u32(0xD800 - 10).unwrap() } else { '\\0' };\n+    let to = if cfg!(miri) { char::from_u32(0xDFFF + 10).unwrap() } else { char::MAX };\n+    assert!((from..=to).eq((from as u32..=to as u32).filter_map(char::from_u32)));\n+    assert!((from..=to).rev().eq((from as u32..=to as u32).filter_map(char::from_u32).rev()));\n \n     assert_eq!(('\\u{D7FF}'..='\\u{E000}').count(), 2);\n     assert_eq!(('\\u{D7FF}'..='\\u{E000}').size_hint(), (2, Some(2)));"}]}