{"sha": "b613c989594f1cbf0d4af1a7a153786cca7792c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MTNjOTg5NTk0ZjFjYmYwZDRhZjFhN2ExNTM3ODZjY2E3NzkyYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-25T10:50:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-25T10:50:13Z"}, "message": "Auto merge of #71549 - Dylan-DPC:rollup-j6jlp9l, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #71364 (Ignore -Zprofile when building compiler_builtins)\n - #71494 (Fix span of while (let) expressions after lowering)\n - #71517 ( Quick and dirty fix of the unused_braces lint)\n - #71523 (Take a single root node in range_search)\n - #71533 (Revert PR 70566 for const validation fix)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fa34cf7b64d8c4301517bf5302d8ee6b38cfed33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa34cf7b64d8c4301517bf5302d8ee6b38cfed33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b613c989594f1cbf0d4af1a7a153786cca7792c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b613c989594f1cbf0d4af1a7a153786cca7792c8", "html_url": "https://github.com/rust-lang/rust/commit/b613c989594f1cbf0d4af1a7a153786cca7792c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b613c989594f1cbf0d4af1a7a153786cca7792c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a58b1ed44f5e06976de2bdc4d7dc81c36a96934f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a58b1ed44f5e06976de2bdc4d7dc81c36a96934f", "html_url": "https://github.com/rust-lang/rust/commit/a58b1ed44f5e06976de2bdc4d7dc81c36a96934f"}, {"sha": "4b5b6cbe60a8dd1822cfa46c41cf1ad58c113e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5b6cbe60a8dd1822cfa46c41cf1ad58c113e18", "html_url": "https://github.com/rust-lang/rust/commit/4b5b6cbe60a8dd1822cfa46c41cf1ad58c113e18"}], "stats": {"total": 340, "additions": 176, "deletions": 164}, "files": [{"sha": "8d0cd191c2a9041683d1e4fc10b8a9da64672512", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -1034,9 +1034,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         R: RangeBounds<T>,\n     {\n         if let Some(root) = &self.root {\n-            let root1 = root.as_ref();\n-            let root2 = root.as_ref();\n-            let (f, b) = range_search(root1, root2, range);\n+            let (f, b) = range_search(root.as_ref(), range);\n \n             Range { front: Some(f), back: Some(b) }\n         } else {\n@@ -1082,9 +1080,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         R: RangeBounds<T>,\n     {\n         if let Some(root) = &mut self.root {\n-            let root1 = root.as_mut();\n-            let root2 = unsafe { ptr::read(&root1) };\n-            let (f, b) = range_search(root1, root2, range);\n+            let (f, b) = range_search(root.as_mut(), range);\n \n             RangeMut { front: Some(f), back: Some(b), _marker: PhantomData }\n         } else {\n@@ -2043,8 +2039,7 @@ where\n }\n \n fn range_search<BorrowType, K, V, Q: ?Sized, R: RangeBounds<Q>>(\n-    root1: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n-    root2: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n+    root: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n     range: R,\n ) -> (\n     Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge>,\n@@ -2064,8 +2059,10 @@ where\n         _ => {}\n     };\n \n-    let mut min_node = root1;\n-    let mut max_node = root2;\n+    // We duplicate the root NodeRef here -- we will never access it in a way\n+    // that overlaps references obtained from the root.\n+    let mut min_node = unsafe { ptr::read(&root) };\n+    let mut max_node = root;\n     let mut min_found = false;\n     let mut max_found = false;\n "}, {"sha": "cbe192d35e5934cb748fb3f5add321c4220fba48", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -397,12 +397,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let then_arm = self.arm(then_pat, self.arena.alloc(then_expr));\n \n         // `match <scrutinee> { ... }`\n-        let match_expr = self.expr_match(\n-            scrutinee.span,\n-            scrutinee,\n-            arena_vec![self; then_arm, else_arm],\n-            desugar,\n-        );\n+        let match_expr =\n+            self.expr_match(span, scrutinee, arena_vec![self; then_arm, else_arm], desugar);\n \n         // `[opt_ident]: loop { ... }`\n         hir::ExprKind::Loop(self.block_expr(self.arena.alloc(match_expr)), opt_label, source)"}, {"sha": "37034141bb77d7475b8b4dc3a60a2d88c61f5bbb", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -119,7 +119,12 @@ pub struct ModuleConfig {\n }\n \n impl ModuleConfig {\n-    fn new(kind: ModuleKind, sess: &Session, no_builtins: bool) -> ModuleConfig {\n+    fn new(\n+        kind: ModuleKind,\n+        sess: &Session,\n+        no_builtins: bool,\n+        is_compiler_builtins: bool,\n+    ) -> ModuleConfig {\n         // If it's a regular module, use `$regular`, otherwise use `$other`.\n         // `$regular` and `$other` are evaluated lazily.\n         macro_rules! if_regular {\n@@ -160,7 +165,10 @@ impl ModuleConfig {\n             passes: if_regular!(\n                 {\n                     let mut passes = sess.opts.cg.passes.clone();\n-                    if sess.opts.debugging_opts.profile {\n+                    // compiler_builtins overrides the codegen-units settings,\n+                    // which is incompatible with -Zprofile which requires that\n+                    // only a single codegen unit is used per crate.\n+                    if sess.opts.debugging_opts.profile && !is_compiler_builtins {\n                         passes.push(\"insert-gcov-profiling\".to_owned());\n                     }\n                     passes\n@@ -406,6 +414,8 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n     let no_builtins = attr::contains_name(&tcx.hir().krate().item.attrs, sym::no_builtins);\n+    let is_compiler_builtins =\n+        attr::contains_name(&tcx.hir().krate().item.attrs, sym::compiler_builtins);\n     let subsystem =\n         attr::first_attr_value_str_by_name(&tcx.hir().krate().item.attrs, sym::windows_subsystem);\n     let windows_subsystem = subsystem.map(|subsystem| {\n@@ -422,9 +432,12 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let linker_info = LinkerInfo::new(tcx);\n     let crate_info = CrateInfo::new(tcx);\n \n-    let regular_config = ModuleConfig::new(ModuleKind::Regular, sess, no_builtins);\n-    let metadata_config = ModuleConfig::new(ModuleKind::Metadata, sess, no_builtins);\n-    let allocator_config = ModuleConfig::new(ModuleKind::Allocator, sess, no_builtins);\n+    let regular_config =\n+        ModuleConfig::new(ModuleKind::Regular, sess, no_builtins, is_compiler_builtins);\n+    let metadata_config =\n+        ModuleConfig::new(ModuleKind::Metadata, sess, no_builtins, is_compiler_builtins);\n+    let allocator_config =\n+        ModuleConfig::new(ModuleKind::Allocator, sess, no_builtins, is_compiler_builtins);\n \n     let (shared_emitter, shared_emitter_main) = SharedEmitter::new();\n     let (codegen_worker_send, codegen_worker_receive) = channel();"}, {"sha": "ddd252cb290e4d9022cec11a4ae5a565152b1c93", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::lint::builtin::UNUSED_ATTRIBUTES;\n use rustc_span::symbol::Symbol;\n use rustc_span::symbol::{kw, sym};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use log::debug;\n \n@@ -415,6 +415,12 @@ trait UnusedDelimLint {\n         msg: &str,\n         keep_space: (bool, bool),\n     ) {\n+        // FIXME(flip1995): Quick and dirty fix for #70814. This should be fixed in rustdoc\n+        // properly.\n+        if span == DUMMY_SP {\n+            return;\n+        }\n+\n         cx.struct_span_lint(self.lint(), span, |lint| {\n             let span_msg = format!(\"unnecessary {} around {}\", Self::DELIM_STR, msg);\n             let mut err = lint.build(&span_msg);"}, {"sha": "a3465b021826cf271b65ec8386e2e927101d35d6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -596,6 +596,11 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n+        // FIXME we need to revisit this for #67176\n+        if rvalue.needs_subst() {\n+            return None;\n+        }\n+\n         // Perform any special handling for specific Rvalue types.\n         // Generally, checks here fall into one of two categories:\n         //   1. Additional checking to provide useful lints to the user\n@@ -636,11 +641,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             _ => {}\n         }\n \n-        // FIXME we need to revisit this for #67176\n-        if rvalue.needs_subst() {\n-            return None;\n-        }\n-\n         self.use_ecx(|this| {\n             trace!(\"calling eval_rvalue_into_place(rvalue = {:?}, place = {:?})\", rvalue, place);\n             this.ecx.eval_rvalue_into_place(rvalue, place)?;"}, {"sha": "5d9c1f6b230d9006c54a5e97c148761b14459682", "filename": "src/test/mir-opt/while-storage/rustc.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile-storage%2Frustc.while_loop.PreCodegen.after.mir?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -57,7 +57,7 @@ fn while_loop(_1: bool) -> () {\n \n     bb5: {\n         StorageDead(_4);                 // bb5[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n-        StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        StorageDead(_2);                 // bb5[1]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n         goto -> bb0;                     // bb5[2]: scope 0 at $DIR/while-storage.rs:10:5: 14:6\n     }\n \n@@ -74,7 +74,7 @@ fn while_loop(_1: bool) -> () {\n     }\n \n     bb7: {\n-        StorageDead(_2);                 // bb7[0]: scope 0 at $DIR/while-storage.rs:10:21: 10:22\n+        StorageDead(_2);                 // bb7[0]: scope 0 at $DIR/while-storage.rs:14:5: 14:6\n         return;                          // bb7[1]: scope 0 at $DIR/while-storage.rs:15:2: 15:2\n     }\n }"}, {"sha": "be0e31e4be2ff9d3c985393712f231291c13dd1b", "filename": "src/test/rustdoc-ui/unused-braces-lint.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Frustdoc-ui%2Funused-braces-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Frustdoc-ui%2Funused-braces-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funused-braces-lint.rs?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+// This tests the bug in #70814, where the unused_braces lint triggered on the following code\n+// without providing a span.\n+\n+#![deny(unused_braces)]\n+\n+fn main() {\n+    {\n+        {\n+            use std;\n+        }\n+    }\n+}"}, {"sha": "d4845290d8a908d3528444f8d0f275dc0a28f759", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -9,8 +9,14 @@ LL |     while true {\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-while.rs:3:9\n    |\n-LL |         true\n-   |         ^^^^ expected `()`, found `bool`\n+LL | /     while true {\n+LL | |         true\n+   | |         ^^^^ expected `()`, found `bool`\n+LL | |\n+LL | |     }\n+   | |     -- help: consider using a semicolon here\n+   | |_____|\n+   |       expected this to be `()`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "e514682af9c20276e31dee9a3f01cfbfcad9c479", "filename": "src/test/ui/consts/const-eval/ice-generic-assoc-const.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-generic-assoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-generic-assoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fice-generic-assoc-const.rs?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -1,4 +1,5 @@\n-// check-pass\n+// build-pass (tests post-monomorphisation failure)\n+#![crate_type = \"lib\"]\n \n pub trait Nullable {\n     const NULL: Self;\n@@ -13,6 +14,3 @@ impl<T> Nullable for *const T {\n         *self == Self::NULL\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "ce9b02b6d82a781d7bc217dfb712febc569a1781", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.noopt.stderr", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.noopt.stderr?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -1,152 +1,146 @@\n-warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:18:20\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n-LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left with overflow\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n    |\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:9:9\n    |\n-LL | #![warn(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n-   |\n-LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n-\n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: 24 warnings emitted\n+error: aborting due to 23 previous errors\n "}, {"sha": "ce9b02b6d82a781d7bc217dfb712febc569a1781", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt.stderr", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt.stderr?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -1,152 +1,146 @@\n-warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:18:20\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n-LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left with overflow\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n    |\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:9:9\n    |\n-LL | #![warn(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n-   |\n-LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n-\n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: 24 warnings emitted\n+error: aborting due to 23 previous errors\n "}, {"sha": "ce9b02b6d82a781d7bc217dfb712febc569a1781", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "status": "modified", "additions": 28, "deletions": 34, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.opt_with_overflow_checks.stderr?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -1,152 +1,146 @@\n-warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:18:20\n+error: this arithmetic operation will overflow\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n    |\n-LL |     const N: i32 = T::N << 42;\n-   |                    ^^^^^^^^^^ attempt to shift left with overflow\n+LL |     let _ = x << 42;\n+   |             ^^^^^^^ attempt to shift left with overflow\n    |\n note: the lint level is defined here\n   --> $DIR/lint-exceeding-bitshifts.rs:9:9\n    |\n-LL | #![warn(arithmetic_overflow, const_err)]\n+LL | #![deny(arithmetic_overflow, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n-warning: this arithmetic operation will overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:22:13\n-   |\n-LL |     let _ = x << 42;\n-   |             ^^^^^^^ attempt to shift left with overflow\n-\n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:44:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:46:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:48:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:50:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:52:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:54:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:56:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:58:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:62:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:64:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:69:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:71:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^ attempt to shift right with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:77:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: this arithmetic operation will overflow\n+error: this arithmetic operation will overflow\n   --> $DIR/lint-exceeding-bitshifts.rs:78:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^ attempt to shift left with overflow\n \n-warning: 24 warnings emitted\n+error: aborting due to 23 previous errors\n "}, {"sha": "7deee5320a87880e4adb01de4f649400db40f798", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b613c989594f1cbf0d4af1a7a153786cca7792c8/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=b613c989594f1cbf0d4af1a7a153786cca7792c8", "patch": "@@ -2,11 +2,11 @@\n //[noopt]compile-flags: -C opt-level=0\n //[opt]compile-flags: -O\n //[opt_with_overflow_checks]compile-flags: -C overflow-checks=on -O\n-// build-pass\n-// ignore-pass (test emits codegen-time warnings and verifies that they are not errors)\n+\n+// build-fail\n \n #![crate_type=\"lib\"]\n-#![warn(arithmetic_overflow, const_err)]\n+#![deny(arithmetic_overflow, const_err)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n@@ -15,65 +15,65 @@ pub trait Foo {\n }\n \n impl<T: Foo> Foo for Vec<T> {\n-    const N: i32 = T::N << 42; //~ WARN: arithmetic operation will overflow\n+    const N: i32 = T::N << 42; // FIXME this should warn\n }\n \n pub fn foo(x: i32) {\n-    let _ = x << 42; //~ WARN: arithmetic operation will overflow\n+    let _ = x << 42; //~ ERROR: arithmetic operation will overflow\n }\n \n pub fn main() {\n       let n = 1u8 << 7;\n-      let n = 1u8 << 8;   //~ WARN: arithmetic operation will overflow\n+      let n = 1u8 << 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1u16 << 15;\n-      let n = 1u16 << 16; //~ WARN: arithmetic operation will overflow\n+      let n = 1u16 << 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1u32 << 31;\n-      let n = 1u32 << 32; //~ WARN: arithmetic operation will overflow\n+      let n = 1u32 << 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1u64 << 63;\n-      let n = 1u64 << 64; //~ WARN: arithmetic operation will overflow\n+      let n = 1u64 << 64; //~ ERROR: arithmetic operation will overflow\n       let n = 1i8 << 7;\n-      let n = 1i8 << 8;   //~ WARN: arithmetic operation will overflow\n+      let n = 1i8 << 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1i16 << 15;\n-      let n = 1i16 << 16; //~ WARN: arithmetic operation will overflow\n+      let n = 1i16 << 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1i32 << 31;\n-      let n = 1i32 << 32; //~ WARN: arithmetic operation will overflow\n+      let n = 1i32 << 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1i64 << 63;\n-      let n = 1i64 << 64; //~ WARN: arithmetic operation will overflow\n+      let n = 1i64 << 64; //~ ERROR: arithmetic operation will overflow\n \n       let n = 1u8 >> 7;\n-      let n = 1u8 >> 8;   //~ WARN: arithmetic operation will overflow\n+      let n = 1u8 >> 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1u16 >> 15;\n-      let n = 1u16 >> 16; //~ WARN: arithmetic operation will overflow\n+      let n = 1u16 >> 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1u32 >> 31;\n-      let n = 1u32 >> 32; //~ WARN: arithmetic operation will overflow\n+      let n = 1u32 >> 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1u64 >> 63;\n-      let n = 1u64 >> 64; //~ WARN: arithmetic operation will overflow\n+      let n = 1u64 >> 64; //~ ERROR: arithmetic operation will overflow\n       let n = 1i8 >> 7;\n-      let n = 1i8 >> 8;   //~ WARN: arithmetic operation will overflow\n+      let n = 1i8 >> 8;   //~ ERROR: arithmetic operation will overflow\n       let n = 1i16 >> 15;\n-      let n = 1i16 >> 16; //~ WARN: arithmetic operation will overflow\n+      let n = 1i16 >> 16; //~ ERROR: arithmetic operation will overflow\n       let n = 1i32 >> 31;\n-      let n = 1i32 >> 32; //~ WARN: arithmetic operation will overflow\n+      let n = 1i32 >> 32; //~ ERROR: arithmetic operation will overflow\n       let n = 1i64 >> 63;\n-      let n = 1i64 >> 64; //~ WARN: arithmetic operation will overflow\n+      let n = 1i64 >> 64; //~ ERROR: arithmetic operation will overflow\n \n       let n = 1u8;\n       let n = n << 7;\n-      let n = n << 8; //~ WARN: arithmetic operation will overflow\n+      let n = n << 8; //~ ERROR: arithmetic operation will overflow\n \n-      let n = 1u8 << -8; //~ WARN: arithmetic operation will overflow\n+      let n = 1u8 << -8; //~ ERROR: arithmetic operation will overflow\n \n       let n = 1i8<<(1isize+-1);\n \n       let n = 1u8 << (4+3);\n-      let n = 1u8 << (4+4); //~ WARN: arithmetic operation will overflow\n+      let n = 1u8 << (4+4); //~ ERROR: arithmetic operation will overflow\n       let n = 1i64 >> [63][0];\n-      let n = 1i64 >> [64][0]; //~ WARN: arithmetic operation will overflow\n+      let n = 1i64 >> [64][0]; //~ ERROR: arithmetic operation will overflow\n \n       #[cfg(target_pointer_width = \"32\")]\n       const BITS: usize = 32;\n       #[cfg(target_pointer_width = \"64\")]\n       const BITS: usize = 64;\n-      let n = 1_isize << BITS; //~ WARN: arithmetic operation will overflow\n-      let n = 1_usize << BITS; //~ WARN: arithmetic operation will overflow\n+      let n = 1_isize << BITS; //~ ERROR: arithmetic operation will overflow\n+      let n = 1_usize << BITS; //~ ERROR: arithmetic operation will overflow\n }"}]}