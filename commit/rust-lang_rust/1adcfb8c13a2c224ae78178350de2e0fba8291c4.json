{"sha": "1adcfb8c13a2c224ae78178350de2e0fba8291c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhZGNmYjhjMTNhMmMyMjRhZTc4MTc4MzUwZGUyZTBmYmE4MjkxYzQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-09-18T22:42:57Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-09-19T15:04:27Z"}, "message": "Add librustc_trans error codes", "tree": {"sha": "a706e5fdacfc709e65d160477160d71e5ce6becf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a706e5fdacfc709e65d160477160d71e5ce6becf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1adcfb8c13a2c224ae78178350de2e0fba8291c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1adcfb8c13a2c224ae78178350de2e0fba8291c4", "html_url": "https://github.com/rust-lang/rust/commit/1adcfb8c13a2c224ae78178350de2e0fba8291c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1adcfb8c13a2c224ae78178350de2e0fba8291c4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7badafa593400b272ff05efd26a8fabb5c9d4cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7badafa593400b272ff05efd26a8fabb5c9d4cdd", "html_url": "https://github.com/rust-lang/rust/commit/7badafa593400b272ff05efd26a8fabb5c9d4cdd"}], "stats": {"total": 57, "additions": 45, "deletions": 12}, "files": [{"sha": "a5b313e2dd67ee90098f893ae341c0939c7c85be", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1adcfb8c13a2c224ae78178350de2e0fba8291c4/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adcfb8c13a2c224ae78178350de2e0fba8291c4/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=1adcfb8c13a2c224ae78178350de2e0fba8291c4", "patch": "@@ -289,7 +289,7 @@ let mut x = &mut i; // ok!\n let mut i = 0;\n let a = &i; // ok!\n let b = &i; // still ok!\n-let c = &i; // super still ok!\n+let c = &i; // still ok!\n ```\n \"##,\n "}, {"sha": "dd7c3834e564a1dea6887213c656020dd4454b7e", "filename": "src/librustc_trans/diagnostics.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1adcfb8c13a2c224ae78178350de2e0fba8291c4/src%2Flibrustc_trans%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adcfb8c13a2c224ae78178350de2e0fba8291c4/src%2Flibrustc_trans%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdiagnostics.rs?ref=1adcfb8c13a2c224ae78178350de2e0fba8291c4", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_long_diagnostics! {\n+\n+}\n+\n+register_diagnostics! {\n+    E0510, // invalid use of `return_address` intrinsic: function does not use out pointer\n+    E0511, // invalid monomorphization of `{}` intrinsic\n+    E0512, // transmute called on types with potentially different sizes...\n+}"}, {"sha": "049d8fbe390a44fe6827f7a9975e743265e21466", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1adcfb8c13a2c224ae78178350de2e0fba8291c4/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adcfb8c13a2c224ae78178350de2e0fba8291c4/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=1adcfb8c13a2c224ae78178350de2e0fba8291c4", "patch": "@@ -80,6 +80,8 @@ pub mod back {\n     pub mod msvc;\n }\n \n+pub mod diagnostics;\n+\n pub mod trans;\n pub mod save;\n "}, {"sha": "b43a4b3fc889d809c7364ab5b126aa08104f2299", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1adcfb8c13a2c224ae78178350de2e0fba8291c4/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1adcfb8c13a2c224ae78178350de2e0fba8291c4/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=1adcfb8c13a2c224ae78178350de2e0fba8291c4", "patch": "@@ -44,6 +44,9 @@ use syntax::ast;\n use syntax::ptr::P;\n use syntax::parse::token;\n \n+use rustc::session::Session;\n+use syntax::codemap::Span;\n+\n use std::cmp::Ordering;\n \n pub fn get_simple_intrinsic(ccx: &CrateContext, item: &hir::ForeignItem) -> Option<ValueRef> {\n@@ -99,6 +102,10 @@ pub fn get_simple_intrinsic(ccx: &CrateContext, item: &hir::ForeignItem) -> Opti\n     Some(ccx.get_intrinsic(&name))\n }\n \n+pub fn span_transmute_size_error(a: &Session, b: Span, msg: &str) {\n+    span_err!(a, b, E0512, \"{}\", msg);\n+}\n+\n /// Performs late verification that intrinsics are used correctly. At present,\n /// the only intrinsic that needs such verification is `transmute`.\n pub fn check_intrinsics(ccx: &CrateContext) {\n@@ -127,8 +134,7 @@ pub fn check_intrinsics(ccx: &CrateContext) {\n             last_failing_id = Some(transmute_restriction.id);\n \n             if transmute_restriction.original_from != transmute_restriction.substituted_from {\n-                ccx.sess().span_err(\n-                    transmute_restriction.span,\n+                span_transmute_size_error(ccx.sess(), transmute_restriction.span,\n                     &format!(\"transmute called on types with potentially different sizes: \\\n                               {} (could be {} bit{}) to {} (could be {} bit{})\",\n                              transmute_restriction.original_from,\n@@ -138,8 +144,7 @@ pub fn check_intrinsics(ccx: &CrateContext) {\n                              to_type_size as usize,\n                              if to_type_size == 1 {\"\"} else {\"s\"}));\n             } else {\n-                ccx.sess().span_err(\n-                    transmute_restriction.span,\n+                span_transmute_size_error(ccx.sess(), transmute_restriction.span,\n                     &format!(\"transmute called on types with different sizes: \\\n                               {} ({} bit{}) to {} ({} bit{})\",\n                              transmute_restriction.original_from,\n@@ -798,9 +803,9 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n         (_, \"return_address\") => {\n             if !fcx.caller_expects_out_pointer {\n-                tcx.sess.span_err(call_info.span,\n-                                  \"invalid use of `return_address` intrinsic: function \\\n-                                   does not use out pointer\");\n+                span_err!(tcx.sess, call_info.span, E0510,\n+                          \"invalid use of `return_address` intrinsic: function \\\n+                           does not use out pointer\");\n                 C_null(Type::i8p(ccx))\n             } else {\n                 PointerCast(bcx, llvm::get_param(fcx.llfn, 0), Type::i8p(ccx))\n@@ -1439,6 +1444,10 @@ fn get_rust_try_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n     return rust_try\n }\n \n+fn span_invalid_monomorphization_error(a: &Session, b: Span, c: &str) {\n+    span_err!(a, b, E0511, \"{}\", c);\n+}\n+\n fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n     (bcx: Block<'blk, 'tcx>,\n      name: &str,\n@@ -1457,10 +1466,11 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n             emit_error!($msg, )\n         };\n         ($msg: tt, $($fmt: tt)*) => {\n-            bcx.sess().span_err(call_info.span,\n-                                &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \",\n-                                                 $msg),\n-                                         name, $($fmt)*));\n+            span_invalid_monomorphization_error(\n+                bcx.sess(), call_info.span,\n+                &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \",\n+                                 $msg),\n+                         name, $($fmt)*));\n         }\n     }\n     macro_rules! require {"}]}