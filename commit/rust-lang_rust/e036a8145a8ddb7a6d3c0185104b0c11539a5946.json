{"sha": "e036a8145a8ddb7a6d3c0185104b0c11539a5946", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMzZhODE0NWE4ZGRiN2E2ZDNjMDE4NTEwNGIwYzExNTM5YTU5NDY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-01T20:26:19Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-10-01T20:26:57Z"}, "message": "Support `ExprType` (type ascription) comparison\n\n*ish", "tree": {"sha": "4b260dd7f5fddd23436e97edd464273ebeae8a6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b260dd7f5fddd23436e97edd464273ebeae8a6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e036a8145a8ddb7a6d3c0185104b0c11539a5946", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJX8BwTAAoJEF5CfHlMukXovLUQAKN9P6Z7L0r45fZP8RzjuvJA\nODAQTyojKptEsl8pBJiYkcdhzbIdLT67Vsc00ReykSETz3iWk9UwkmQEqbzD3k+E\nYbHWSTwpVoKXquCX1IW9BzISdHVq3hRQgsYQZJkY28F1EAk5zmtjygwMVWGaiez4\n0hvlxJslZNw0fNGs2MrhpTIdCRxm69lGLl9Mx83v4YFoFpjgTo6sNEh90ebrbjOy\nxZ6gtVQGN7wUA1M4ygTRIWELbVdvOdEZJ0Eihzi8qC6bnWr3B+ugZNAkqmwnZDYs\nMwhqFDVzXhhA391ERL13uXgFVzPtVoxLlak6QhcSYu42kK97/nO3Ifx8P7Plyt2d\nX8jrIVsEYGSh/PnoXtifAzvCmmqDflaFOn61xNgx9zMMcpvYfvKtImgqcdRtEd7T\nCDCrWYHjvUcJ+ITbKYA91+1sAgG2ehuuEv5WVNkrvIqSUaEJL3muM16vCqQpqXz9\ntXVZmmPMACfOuaMof5o2I39MU+eiHbyxP8w0Sg6SR8esVQN9wLsLpIGhn5bc3Bcu\nwZyiukvkjkaQtJltNogXVYWtE6rXvuBczyiv0r0nxXTdKJbTUwTWyKwDBEZpFFwd\nA5S1vC/knYiNppyZ3CqxgwjRXuuJTlfCR45O8/Rl1+XklZZDCmR/ksmG78guAZKQ\noAFkSzT8cHpoLtfUs9nJ\n=oQ9u\n-----END PGP SIGNATURE-----", "payload": "tree 4b260dd7f5fddd23436e97edd464273ebeae8a6d\nparent 3e009b9424d51997af0e7433404dc2f0381af76c\nauthor mcarton <cartonmartin+git@gmail.com> 1475353579 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1475353617 +0200\n\nSupport `ExprType` (type ascription) comparison\n\n*ish\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e036a8145a8ddb7a6d3c0185104b0c11539a5946", "html_url": "https://github.com/rust-lang/rust/commit/e036a8145a8ddb7a6d3c0185104b0c11539a5946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e036a8145a8ddb7a6d3c0185104b0c11539a5946/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e009b9424d51997af0e7433404dc2f0381af76c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e009b9424d51997af0e7433404dc2f0381af76c", "html_url": "https://github.com/rust-lang/rust/commit/3e009b9424d51997af0e7433404dc2f0381af76c"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "fd954d1969fe6b8c3db932c8989e0ce92b7cc050", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e036a8145a8ddb7a6d3c0185104b0c11539a5946/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e036a8145a8ddb7a6d3c0185104b0c11539a5946/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=e036a8145a8ddb7a6d3c0185104b0c11539a5946", "patch": "@@ -85,7 +85,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&ExprCall(ref l_fun, ref l_args), &ExprCall(ref r_fun, ref r_args)) => {\n                 !self.ignore_fn && self.eq_expr(l_fun, r_fun) && self.eq_exprs(l_args, r_args)\n             }\n-            (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) => self.eq_expr(lx, rx) && self.eq_ty(lt, rt),\n+            (&ExprCast(ref lx, ref lt), &ExprCast(ref rx, ref rt)) |\n+            (&ExprType(ref lx, ref lt), &ExprType(ref rx, ref rt)) => {\n+                self.eq_expr(lx, rx) && self.eq_ty(lt, rt)\n+            }\n             (&ExprField(ref l_f_exp, ref l_f_ident), &ExprField(ref r_f_exp, ref r_f_ident)) => {\n                 l_f_ident.node == r_f_ident.node && self.eq_expr(l_f_exp, r_f_exp)\n             }\n@@ -474,10 +477,11 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(le);\n                 li.node.hash(&mut self.s);\n             }\n-            ExprType(_, _) => {\n+            ExprType(ref e, ref _ty) => {\n                 let c: fn(_, _) -> _ = ExprType;\n                 c.hash(&mut self.s);\n-                // what\u2019s an ExprType anyway?\n+                self.hash_expr(e);\n+                // TODO: _ty\n             }\n             ExprUnary(lop, ref le) => {\n                 let c: fn(_, _) -> _ = ExprUnary;"}]}