{"sha": "f544721de41b6b5e7b93dbc85840431abe195614", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NDQ3MjFkZTQxYjZiNWU3YjkzZGJjODU4NDA0MzFhYmUxOTU2MTQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-08-07T23:39:54Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-08-07T23:56:35Z"}, "message": "Add generator, async tests with uninhabited saved local", "tree": {"sha": "78d1f987738a9e888e7030969de2b7ae086353af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d1f987738a9e888e7030969de2b7ae086353af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f544721de41b6b5e7b93dbc85840431abe195614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f544721de41b6b5e7b93dbc85840431abe195614", "html_url": "https://github.com/rust-lang/rust/commit/f544721de41b6b5e7b93dbc85840431abe195614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f544721de41b6b5e7b93dbc85840431abe195614/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bbf6733ea3d253740f2b78360c20f05781cfa11", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bbf6733ea3d253740f2b78360c20f05781cfa11", "html_url": "https://github.com/rust-lang/rust/commit/5bbf6733ea3d253740f2b78360c20f05781cfa11"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "25b9b9ac5ba4b0642f8f0a9c4a1e7ca68aa50cc8", "filename": "tests/run-pass/async-fn.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f544721de41b6b5e7b93dbc85840431abe195614/tests%2Frun-pass%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f544721de41b6b5e7b93dbc85840431abe195614/tests%2Frun-pass%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fasync-fn.rs?ref=f544721de41b6b5e7b93dbc85840431abe195614", "patch": "@@ -14,6 +14,32 @@ pub async fn foo(x: &u32, y: u32) -> u32 {\n     *x + y + *a\n }\n \n+async fn add(x: u32, y: u32) -> u32 {\n+    async { x + y }.await\n+}\n+\n+async fn build_aggregate(a: u32, b: u32, c: u32, d: u32) -> u32 {\n+    let x = (add(a, b).await, add(c, d).await);\n+    x.0 + x.1\n+}\n+\n+enum Never {}\n+fn never() -> Never {\n+    panic!()\n+}\n+\n+async fn includes_never(crash: bool, x: u32) -> u32 {\n+    let mut result = async { x * x }.await;\n+    if !crash {\n+        return result;\n+    }\n+    #[allow(unused)]\n+    let bad = never();\n+    result *= async { x + x }.await;\n+    drop(bad);\n+    result\n+}\n+\n fn raw_waker_clone(_this: *const ()) -> RawWaker {\n     panic!(\"unimplemented\");\n }\n@@ -38,4 +64,14 @@ fn main() {\n     let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n     let mut context = Context::from_waker(&waker);\n     assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(31));\n+\n+    let mut fut = build_aggregate(1, 2, 3, 4);\n+    let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n+    let mut context = Context::from_waker(&waker);\n+    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(10));\n+\n+    let mut fut = includes_never(false, 4);\n+    let waker = unsafe { Waker::from_raw(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n+    let mut context = Context::from_waker(&waker);\n+    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&mut context), Poll::Ready(16));\n }"}, {"sha": "5064d8daf0f3c793bf73bb45ddfe2845a5759c45", "filename": "tests/run-pass/generator.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f544721de41b6b5e7b93dbc85840431abe195614/tests%2Frun-pass%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f544721de41b6b5e7b93dbc85840431abe195614/tests%2Frun-pass%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fgenerator.rs?ref=f544721de41b6b5e7b93dbc85840431abe195614", "patch": "@@ -17,7 +17,11 @@ fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n             }\n         }\n     }\n+}\n \n+enum Never {}\n+fn never() -> Never {\n+    panic!()\n }\n \n fn main() {\n@@ -67,4 +71,13 @@ fn main() {\n         }),\n         10\n     );\n+    let b = true;\n+    finish(1, || {\n+        yield 1;\n+        if b { return; }\n+        #[allow(unused)]\n+        let x = never();\n+        yield 2;\n+        drop(x);\n+    });\n }"}]}