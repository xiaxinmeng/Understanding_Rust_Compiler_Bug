{"sha": "0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "node_id": "C_kwDOAAsO6NoAKDBkNGEzZjExZTIxNzBjM2MzNWIxZmFmNGJkMGJhODZjNzNhNTYyMjE", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-02-23T07:19:57Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-03-10T09:19:02Z"}, "message": "mir-opt: Replace clone on primitives with copy\n\nWe can't do it for everything, but it would be nice to at least stop making calls to clone methods in debug from things like derived-clones.", "tree": {"sha": "ca0d79c783bcf511c7eb805eac73569492fb1192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca0d79c783bcf511c7eb805eac73569492fb1192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "html_url": "https://github.com/rust-lang/rust/commit/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7b282b886472413a26ef22c848eda0499d12cd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b282b886472413a26ef22c848eda0499d12cd3", "html_url": "https://github.com/rust-lang/rust/commit/d7b282b886472413a26ef22c848eda0499d12cd3"}], "stats": {"total": 218, "additions": 214, "deletions": 4}, "files": [{"sha": "fc438edc7229e1ba2c7e819f7792874aed30baa3", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "patch": "@@ -1915,6 +1915,27 @@ impl<'tcx> Place<'tcx> {\n             (base, proj)\n         })\n     }\n+\n+    /// Generates a new place by appending `more_projections` to the existing ones\n+    /// and interning the result.\n+    pub fn project_deeper(self, more_projections: &[PlaceElem<'tcx>], tcx: TyCtxt<'tcx>) -> Self {\n+        if more_projections.is_empty() {\n+            return self;\n+        }\n+\n+        let mut v: Vec<PlaceElem<'tcx>>;\n+\n+        let new_projections = if self.projection.is_empty() {\n+            more_projections\n+        } else {\n+            v = Vec::with_capacity(self.projection.len() + more_projections.len());\n+            v.extend(self.projection);\n+            v.extend(more_projections);\n+            &v\n+        };\n+\n+        Place { local: self.local, projection: tcx.intern_place_elems(new_projections) }\n+    }\n }\n \n impl From<Local> for Place<'_> {\n@@ -2187,6 +2208,15 @@ impl<'tcx> Operand<'tcx> {\n             Operand::Copy(_) | Operand::Move(_) => None,\n         }\n     }\n+\n+    /// Gets the `ty::FnDef` from an operand if it's a constant function item.\n+    ///\n+    /// While this is unlikely in general, it's the normal case of what you'll\n+    /// find as the `func` in a [`TerminatorKind::Call`].\n+    pub fn const_fn_def(&self) -> Option<(DefId, SubstsRef<'tcx>)> {\n+        let const_ty = self.constant()?.literal.const_for_ty()?.ty();\n+        if let ty::FnDef(def_id, substs) = *const_ty.kind() { Some((def_id, substs)) } else { None }\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "30e55d7e2faeb0c05906b730f6dcb21e39861a14", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 83, "deletions": 2, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "patch": "@@ -4,9 +4,9 @@ use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n     BinOp, Body, Constant, LocalDecls, Operand, Place, ProjectionElem, Rvalue, SourceInfo,\n-    StatementKind, UnOp,\n+    Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TyKind};\n \n pub struct InstCombine;\n \n@@ -29,6 +29,11 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n                     _ => {}\n                 }\n             }\n+\n+            ctx.combine_primitive_clone(\n+                &mut block.terminator.as_mut().unwrap(),\n+                &mut block.statements,\n+            );\n         }\n     }\n }\n@@ -130,4 +135,80 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n             }\n         }\n     }\n+\n+    fn combine_primitive_clone(\n+        &self,\n+        terminator: &mut Terminator<'tcx>,\n+        statements: &mut Vec<Statement<'tcx>>,\n+    ) {\n+        let TerminatorKind::Call { func, args, destination, .. } = &mut terminator.kind\n+        else { return };\n+\n+        // It's definitely not a clone if there are multiple arguments\n+        if args.len() != 1 {\n+            return;\n+        }\n+\n+        let Some((destination_place, destination_block)) = *destination\n+        else { return };\n+\n+        // Only bother looking more if it's easy to know what we're calling\n+        let Some((fn_def_id, fn_substs)) = func.const_fn_def()\n+        else { return };\n+\n+        // Clone needs one subst, so we can cheaply rule out other stuff\n+        if fn_substs.len() != 1 {\n+            return;\n+        }\n+\n+        // These types are easily available from locals, so check that before\n+        // doing DefId lookups to figure out what we're actually calling.\n+        let arg_ty = args[0].ty(self.local_decls, self.tcx);\n+\n+        let ty::Ref(_region, inner_ty, Mutability::Not) = *arg_ty.kind()\n+        else { return };\n+\n+        if !is_trivially_pure_copy(self.tcx, inner_ty) {\n+            return;\n+        }\n+\n+        let trait_def_id = self.tcx.trait_of_item(fn_def_id);\n+        if trait_def_id.is_none() || trait_def_id != self.tcx.lang_items().clone_trait() {\n+            return;\n+        }\n+\n+        if !self.tcx.consider_optimizing(|| {\n+            format!(\n+                \"InstCombine - Call: {:?} SourceInfo: {:?}\",\n+                (fn_def_id, fn_substs),\n+                terminator.source_info\n+            )\n+        }) {\n+            return;\n+        }\n+\n+        let Some(arg_place) = args.pop().unwrap().place()\n+        else { return };\n+\n+        statements.push(Statement {\n+            source_info: terminator.source_info,\n+            kind: StatementKind::Assign(box (\n+                destination_place,\n+                Rvalue::Use(Operand::Copy(\n+                    arg_place.project_deeper(&[ProjectionElem::Deref], self.tcx),\n+                )),\n+            )),\n+        });\n+        terminator.kind = TerminatorKind::Goto { target: destination_block };\n+    }\n+}\n+\n+fn is_trivially_pure_copy<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n+    use TyKind::*;\n+    match *ty.kind() {\n+        Bool | Char | Int(..) | Uint(..) | Float(..) => true,\n+        Array(element_ty, _len) => is_trivially_pure_copy(tcx, element_ty),\n+        Tuple(field_tys) => field_tys.iter().all(|x| is_trivially_pure_copy(tcx, x)),\n+        _ => false,\n+    }\n }"}, {"sha": "d3ea1915a8b1967537facedd40c8ab69bc18bea6", "filename": "src/test/codegen/inline-hint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/src%2Ftest%2Fcodegen%2Finline-hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/src%2Ftest%2Fcodegen%2Finline-hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finline-hint.rs?ref=0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "patch": "@@ -6,7 +6,7 @@\n \n pub fn f() {\n     let a = A;\n-    let b = (0i32, 1i32, 2i32, 3i32);\n+    let b = (0i32, 1i32, 2i32, 3 as *const i32);\n     let c = || {};\n \n     a(String::new(), String::new());\n@@ -21,7 +21,7 @@ struct A(String, String);\n // CHECK-NOT:  inlinehint\n // CHECK-SAME: {{$}}\n \n-// CHECK:      ; <(i32, i32, i32, i32) as core::clone::Clone>::clone\n+// CHECK:      ; <(i32, i32, i32, *const i{{16|32|64}}) as core::clone::Clone>::clone\n // CHECK-NEXT: ; Function Attrs: inlinehint\n \n // CHECK:      ; inline_hint::f::{closure#0}"}, {"sha": "894d9281d5dca40d54b46220f51bec57e50d9402", "filename": "src/test/mir-opt/combine_clone_of_primitives.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.rs?ref=0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: -C opt-level=0 -Z inline_mir=no\n+\n+// EMIT_MIR combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff\n+\n+#[derive(Clone)]\n+struct MyThing<T> {\n+    v: T,\n+    i: u64,\n+    a: [f32; 3],\n+}\n+\n+fn main() {\n+    let x = MyThing::<i16> { v: 2, i: 3, a: [0.0; 3] };\n+    let y = x.clone();\n+\n+    assert_eq!(y.v, 2);\n+    assert_eq!(y.i, 3);\n+    assert_eq!(y.a, [0.0; 3]);\n+}"}, {"sha": "a19b92d9084624cffa918f061ef075c4708ee4de", "filename": "src/test/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=0d4a3f11e2170c3c35b1faf4bd0ba86c73a56221", "patch": "@@ -0,0 +1,80 @@\n+- // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:5:10: 5:15>::clone` before InstCombine\n++ // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:5:10: 5:15>::clone` after InstCombine\n+  \n+  fn <impl at $DIR/combine_clone_of_primitives.rs:5:10: 5:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n+      debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n+      let mut _0: MyThing<T>;              // return place in scope 0 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n+      let _2: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+      let _3: &u64;                        // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+      let _4: &[f32; 3];                   // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+      let mut _5: T;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+      let mut _6: &T;                      // in scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+      let _7: &T;                          // in scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+      let mut _8: u64;                     // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+      let mut _9: &u64;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+      let _10: &u64;                       // in scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+      let mut _11: [f32; 3];               // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+      let mut _12: &[f32; 3];              // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+      let _13: &[f32; 3];                  // in scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+      scope 1 {\n+          debug __self_0_0 => _2;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+          debug __self_0_1 => _3;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+          debug __self_0_2 => _4;          // in scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+      }\n+  \n+      bb0: {\n+          _2 = &((*_1).0: T);              // scope 0 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+          _3 = &((*_1).1: u64);            // scope 0 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+          _4 = &((*_1).2: [f32; 3]);       // scope 0 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+-         _7 = &(*_2);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+-         _6 = &(*_7);                     // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n++         _7 = _2;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n++         _6 = _7;                         // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+          _5 = <T as Clone>::clone(move _6) -> bb1; // scope 1 at $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_clone_of_primitives.rs:7:5: 7:9\n+                                           // + literal: Const { ty: for<'r> fn(&'r T) -> T {<T as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+-         _10 = &(*_3);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+-         _9 = &(*_10);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+-         _8 = <u64 as Clone>::clone(move _9) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+-                                          // + literal: Const { ty: for<'r> fn(&'r u64) -> u64 {<u64 as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n++         _10 = _3;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n++         _9 = _10;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n++         _8 = (*_9);                      // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n++         goto -> bb2;                     // scope 1 at $DIR/combine_clone_of_primitives.rs:8:5: 8:11\n+      }\n+  \n+      bb2: {\n+-         _13 = &(*_4);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+-         _12 = &(*_13);                   // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+-         _11 = <[f32; 3] as Clone>::clone(move _12) -> [return: bb3, unwind: bb4]; // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+-                                          // + literal: Const { ty: for<'r> fn(&'r [f32; 3]) -> [f32; 3] {<[f32; 3] as Clone>::clone}, val: Value(Scalar(<ZST>)) }\n++         _13 = _4;                        // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n++         _12 = _13;                       // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n++         _11 = (*_12);                    // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n++         goto -> bb3;                     // scope 1 at $DIR/combine_clone_of_primitives.rs:9:5: 9:16\n+      }\n+  \n+      bb3: {\n+          (_0.0: T) = move _5;             // scope 1 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n+          (_0.1: u64) = move _8;           // scope 1 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n+          (_0.2: [f32; 3]) = move _11;     // scope 1 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n+          return;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:5:15: 5:15\n+      }\n+  \n+      bb4 (cleanup): {\n+          drop(_5) -> bb5;                 // scope 1 at $DIR/combine_clone_of_primitives.rs:5:14: 5:15\n+      }\n+  \n+      bb5 (cleanup): {\n+          resume;                          // scope 0 at $DIR/combine_clone_of_primitives.rs:5:10: 5:15\n+      }\n+  }\n+  "}]}