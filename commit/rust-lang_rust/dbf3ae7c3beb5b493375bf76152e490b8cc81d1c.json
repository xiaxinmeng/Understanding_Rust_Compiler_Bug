{"sha": "dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZjNhZTdjM2JlYjViNDkzMzc1YmY3NjE1MmU0OTBiOGNjODFkMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-04T01:09:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-04T01:09:09Z"}, "message": "Auto merge of #74019 - Manishearth:rollup-2st3jsk, r=Manishearth\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #73140 (Fallback to xml.etree.ElementTree)\n - #73670 (Add `format_args_capture` feature)\n - #73693 (Use exhaustive match in const_prop.rs)\n - #73845 (Use &raw in A|Rc::as_ptr)\n - #73861 (Create E0768)\n - #73881 (Standardize bibliographic citations in rustc API docs)\n - #73925 (Improve comments from #72617, as suggested by RalfJung)\n - #73949 ([mir-opt] Fix mis-optimization and other issues with the SimplifyArmIdentity pass)\n - #73984 (Edit docs for rustc_data_structures::graph::scc)\n - #73985 (Fix \"getting started\" link)\n - #73997 (fix typo)\n - #73999 (Bump mingw-check CI image from Ubuntu 16.04 to 18.04.)\n\nFailed merges:\n\n - #74000 (add `lazy_normalization_consts` feature gate)\n\nr? @ghost", "tree": {"sha": "a111c237b1c83c00b98e8499fa186ab0fa1cf111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a111c237b1c83c00b98e8499fa186ab0fa1cf111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "html_url": "https://github.com/rust-lang/rust/commit/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a13ef2251531d5856ca62dd8822c9b8139f479a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a13ef2251531d5856ca62dd8822c9b8139f479a", "html_url": "https://github.com/rust-lang/rust/commit/9a13ef2251531d5856ca62dd8822c9b8139f479a"}, {"sha": "d69a8468fa56199037d96b39f9827a5fb3302c12", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69a8468fa56199037d96b39f9827a5fb3302c12", "html_url": "https://github.com/rust-lang/rust/commit/d69a8468fa56199037d96b39f9827a5fb3302c12"}], "stats": {"total": 1982, "additions": 1859, "deletions": 123}, "files": [{"sha": "aad495fa3fae6e4b04d95230bee6655795d99792", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -4,5 +4,5 @@ Thank you for your interest in contributing to Rust!\n \n To get started, read the [Getting Started] guide in the [rustc-dev-guide].\n \n-[Getting Started]: https://rustc-dev-guide.rust-lang.org/getting-started.md\n+[Getting Started]: https://rustc-dev-guide.rust-lang.org/getting-started.html\n [rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/"}, {"sha": "639789123d8321ebedda2356f910934393bc97e3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -26,7 +26,7 @@ The Rust build system uses a Python script called `x.py` to build the compiler,\n which manages the bootstrapping process. More information about it can be found \n by running `./x.py --help` or reading the [rustc dev guide][rustcguidebuild].\n \n-[gettingstarted]: https://rustc-dev-guide.rust-lang.org/getting-started.md\n+[gettingstarted]: https://rustc-dev-guide.rust-lang.org/getting-started.html\n [rustcguidebuild]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n \n ### Building on a Unix-like system"}, {"sha": "e0607d298f4f4539a1da01cc103ff2bdf1e60be5", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -1,4 +1,4 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:18.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n   g++ \\"}, {"sha": "64b1b3d81bd83ce7641905c906e9f92ce8d7b69a", "filename": "src/doc/unstable-book/src/library-features/format-args-capture.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fformat-args-capture.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fformat-args-capture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fformat-args-capture.md?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,47 @@\n+# `format_args_capture`\n+\n+The tracking issue for this feature is: [#67984]\n+\n+[#67984]: https://github.com/rust-lang/rust/issues/67984\n+\n+------------------------\n+\n+Enables `format_args!` (and macros which use `format_args!` in their implementation, such\n+as `format!`, `print!` and `panic!`) to capture variables from the surrounding scope.\n+This avoids the need to pass named parameters when the binding in question\n+already exists in scope.\n+\n+```rust\n+#![feature(format_args_capture)]\n+\n+let (person, species, name) = (\"Charlie Brown\", \"dog\", \"Snoopy\");\n+\n+// captures named argument `person`\n+print!(\"Hello {person}\");\n+\n+// captures named arguments `species` and `name`\n+format!(\"The {species}'s name is {name}.\");\n+```\n+\n+This also works for formatting parameters such as width and precision:\n+\n+```rust\n+#![feature(format_args_capture)]\n+\n+let precision = 2;\n+let s = format!(\"{:.precision$}\", 1.324223);\n+\n+assert_eq!(&s, \"1.32\");\n+```\n+\n+A non-exhaustive list of macros which benefit from this functionality include:\n+- `format!`\n+- `print!` and `println!`\n+- `eprint!` and `eprintln!`\n+- `write!` and `writeln!`\n+- `panic!`\n+- `unreachable!`\n+- `unimplemented!`\n+- `todo!`\n+- `assert!` and similar\n+- macros in many thirdparty crates, such as `log`"}, {"sha": "2e7958325cd61e975b1027a1e6e8765452181631", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -114,7 +114,10 @@\n     from html.parser import HTMLParser\n except ImportError:\n     from HTMLParser import HTMLParser\n-from xml.etree import cElementTree as ET\n+try:\n+    from xml.etree import cElementTree as ET\n+except ImportError:\n+    from xml.etree import ElementTree as ET\n \n try:\n     from html.entities import name2codepoint"}, {"sha": "79bfd57a00fa9888ca8d6efec923677dced71a54", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -100,6 +100,7 @@\n #![feature(fundamental)]\n #![feature(internal_uninit_const)]\n #![feature(lang_items)]\n+#![feature(layout_for_ptr)]\n #![feature(libc)]\n #![feature(negative_impls)]\n #![feature(new_uninit)]\n@@ -109,6 +110,7 @@\n #![feature(pattern)]\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n+#![feature(raw_ref_op)]\n #![feature(rustc_attrs)]\n #![feature(receiver_trait)]\n #![feature(min_specialization)]"}, {"sha": "fccdfa0dca92af8e574680a78fac64c43506dba2", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -245,7 +245,7 @@ use core::hash::{Hash, Hasher};\n use core::intrinsics::abort;\n use core::iter;\n use core::marker::{self, PhantomData, Unpin, Unsize};\n-use core::mem::{self, align_of, align_of_val, forget, size_of_val};\n+use core::mem::{self, align_of_val_raw, forget, size_of_val};\n use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n@@ -591,17 +591,11 @@ impl<T: ?Sized> Rc<T> {\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut RcBox<T> = NonNull::as_ptr(this.ptr);\n-        let fake_ptr = ptr as *mut T;\n \n-        // SAFETY: This cannot go through Deref::deref.\n-        // Instead, we manually offset the pointer rather than manifesting a reference.\n-        // This is so that the returned pointer retains the same provenance as our pointer.\n-        // This is required so that e.g. `get_mut` can write through the pointer\n-        // after the Rc is recovered through `from_raw`.\n-        unsafe {\n-            let offset = data_offset(&(*ptr).value);\n-            set_data_ptr(fake_ptr, (ptr as *mut u8).offset(offset))\n-        }\n+        // SAFETY: This cannot go through Deref::deref or Rc::inner because\n+        // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n+        // write through the pointer after the Rc is recovered through `from_raw`.\n+        unsafe { &raw const (*ptr).value }\n     }\n \n     /// Constructs an `Rc<T>` from a raw pointer.\n@@ -1647,6 +1641,7 @@ pub struct Weak<T: ?Sized> {\n     // `Weak::new` sets this to `usize::MAX` so that it doesn\u2019t need\n     // to allocate space on the heap.  That's not a value a real pointer\n     // will ever have because RcBox has alignment at least 2.\n+    // This is only possible when `T: Sized`; unsized `T` never dangle.\n     ptr: NonNull<RcBox<T>>,\n }\n \n@@ -1708,9 +1703,18 @@ impl<T> Weak<T> {\n     /// [`null`]: ../../std/ptr/fn.null.html\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n-        let offset = data_offset_sized::<T>();\n-        let ptr = self.ptr.cast::<u8>().as_ptr().wrapping_offset(offset);\n-        ptr as *const T\n+        let ptr: *mut RcBox<T> = NonNull::as_ptr(self.ptr);\n+\n+        // SAFETY: we must offset the pointer manually, and said pointer may be\n+        // a dangling weak (usize::MAX) if T is sized. data_offset is safe to call,\n+        // because we know that a pointer to unsized T was derived from a real\n+        // unsized T, as dangling weaks are only created for sized T. wrapping_offset\n+        // is used so that we can use the same code path for the non-dangling\n+        // unsized case and the potentially dangling sized case.\n+        unsafe {\n+            let offset = data_offset(ptr as *mut T);\n+            set_data_ptr(ptr as *mut T, (ptr as *mut u8).wrapping_offset(offset))\n+        }\n     }\n \n     /// Consumes the `Weak<T>` and turns it into a raw pointer.\n@@ -2113,19 +2117,22 @@ impl<T: ?Sized> AsRef<T> for Rc<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Rc<T> {}\n \n+/// Get the offset within an `ArcInner` for\n+/// a payload of type described by a pointer.\n+///\n+/// # Safety\n+///\n+/// This has the same safety requirements as `align_of_val_raw`. In effect:\n+///\n+/// - This function is safe for any argument if `T` is sized, and\n+/// - if `T` is unsized, the pointer must have appropriate pointer metadata\n+///   aquired from the real instance that you are getting this offset for.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     // Align the unsized value to the end of the `RcBox`.\n     // Because it is ?Sized, it will always be the last field in memory.\n     // Note: This is a detail of the current implementation of the compiler,\n     // and is not a guaranteed language detail. Do not rely on it outside of std.\n-    unsafe { data_offset_align(align_of_val(&*ptr)) }\n-}\n-\n-/// Computes the offset of the data field within `RcBox`.\n-///\n-/// Unlike [`data_offset`], this doesn't need the pointer, but it works only on `T: Sized`.\n-fn data_offset_sized<T>() -> isize {\n-    data_offset_align(align_of::<T>())\n+    unsafe { data_offset_align(align_of_val_raw(ptr)) }\n }\n \n #[inline]"}, {"sha": "ac3ce2255c89b6003f3a6f0fc21f1edb5d4e2e9a", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -16,7 +16,7 @@ use core::hash::{Hash, Hasher};\n use core::intrinsics::abort;\n use core::iter;\n use core::marker::{PhantomData, Unpin, Unsize};\n-use core::mem::{self, align_of, align_of_val, size_of_val};\n+use core::mem::{self, align_of_val, size_of_val};\n use core::ops::{CoerceUnsized, Deref, DispatchFromDyn, Receiver};\n use core::pin::Pin;\n use core::ptr::{self, NonNull};\n@@ -267,6 +267,7 @@ pub struct Weak<T: ?Sized> {\n     // `Weak::new` sets this to `usize::MAX` so that it doesn\u2019t need\n     // to allocate space on the heap.  That's not a value a real pointer\n     // will ever have because RcBox has alignment at least 2.\n+    // This is only possible when `T: Sized`; unsized `T` never dangle.\n     ptr: NonNull<ArcInner<T>>,\n }\n \n@@ -590,17 +591,11 @@ impl<T: ?Sized> Arc<T> {\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(this: &Self) -> *const T {\n         let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n-        let fake_ptr = ptr as *mut T;\n \n-        // SAFETY: This cannot go through Deref::deref.\n-        // Instead, we manually offset the pointer rather than manifesting a reference.\n-        // This is so that the returned pointer retains the same provenance as our pointer.\n-        // This is required so that e.g. `get_mut` can write through the pointer\n-        // after the Arc is recovered through `from_raw`.\n-        unsafe {\n-            let offset = data_offset(&(*ptr).data);\n-            set_data_ptr(fake_ptr, (ptr as *mut u8).offset(offset))\n-        }\n+        // SAFETY: This cannot go through Deref::deref or RcBoxPtr::inner because\n+        // this is required to retain raw/mut provenance such that e.g. `get_mut` can\n+        // write through the pointer after the Rc is recovered through `from_raw`.\n+        unsafe { &raw const (*ptr).data }\n     }\n \n     /// Constructs an `Arc<T>` from a raw pointer.\n@@ -1476,9 +1471,18 @@ impl<T> Weak<T> {\n     /// [`null`]: ../../std/ptr/fn.null.html\n     #[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]\n     pub fn as_ptr(&self) -> *const T {\n-        let offset = data_offset_sized::<T>();\n-        let ptr = self.ptr.cast::<u8>().as_ptr().wrapping_offset(offset);\n-        ptr as *const T\n+        let ptr: *mut ArcInner<T> = NonNull::as_ptr(self.ptr);\n+\n+        // SAFETY: we must offset the pointer manually, and said pointer may be\n+        // a dangling weak (usize::MAX) if T is sized. data_offset is safe to call,\n+        // because we know that a pointer to unsized T was derived from a real\n+        // unsized T, as dangling weaks are only created for sized T. wrapping_offset\n+        // is used so that we can use the same code path for the non-dangling\n+        // unsized case and the potentially dangling sized case.\n+        unsafe {\n+            let offset = data_offset(ptr as *mut T);\n+            set_data_ptr(ptr as *mut T, (ptr as *mut u8).wrapping_offset(offset))\n+        }\n     }\n \n     /// Consumes the `Weak<T>` and turns it into a raw pointer.\n@@ -2270,7 +2274,16 @@ impl<T: ?Sized> AsRef<T> for Arc<T> {\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<T: ?Sized> Unpin for Arc<T> {}\n \n-/// Computes the offset of the data field within `ArcInner`.\n+/// Get the offset within an `ArcInner` for\n+/// a payload of type described by a pointer.\n+///\n+/// # Safety\n+///\n+/// This has the same safety requirements as `align_of_val_raw`. In effect:\n+///\n+/// - This function is safe for any argument if `T` is sized, and\n+/// - if `T` is unsized, the pointer must have appropriate pointer metadata\n+///   aquired from the real instance that you are getting this offset for.\n unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     // Align the unsized value to the end of the `ArcInner`.\n     // Because it is `?Sized`, it will always be the last field in memory.\n@@ -2279,13 +2292,6 @@ unsafe fn data_offset<T: ?Sized>(ptr: *const T) -> isize {\n     unsafe { data_offset_align(align_of_val(&*ptr)) }\n }\n \n-/// Computes the offset of the data field within `ArcInner`.\n-///\n-/// Unlike [`data_offset`], this doesn't need the pointer, but it works only on `T: Sized`.\n-fn data_offset_sized<T>() -> isize {\n-    data_offset_align(align_of::<T>())\n-}\n-\n #[inline]\n fn data_offset_align(align: usize) -> isize {\n     let layout = Layout::new::<ArcInner<()>>();"}, {"sha": "fdcfae8530a3b8034189209a40f699d484a53088", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -694,7 +694,7 @@ mod impls {\n )]\n #[lang = \"discriminant_kind\"]\n pub trait DiscriminantKind {\n-    /// The type of the dicriminant, which must satisfy the trait\n+    /// The type of the discriminant, which must satisfy the trait\n     /// bounds required by `mem::Discriminant`.\n     type Discriminant: Clone + Copy + Debug + Eq + PartialEq + Hash + Send + Sync + Unpin;\n }"}, {"sha": "4bb806a923e6cd7c6f2707a35f91ff39ef935271", "filename": "src/librustc_ast_pretty/pp.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_ast_pretty%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_ast_pretty%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpp.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -1,10 +1,8 @@\n //! This pretty-printer is a direct reimplementation of Philip Karlton's\n-//! Mesa pretty-printer, as described in appendix A of\n-//!\n-//! ```text\n-//! STAN-CS-79-770: \"Pretty Printing\", by Derek C. Oppen.\n-//! Stanford Department of Computer Science, 1979.\n-//! ```\n+//! Mesa pretty-printer, as described in the appendix to\n+//! Derek C. Oppen, \"Pretty Printing\" (1979),\n+//! Stanford Computer Science Department STAN-CS-79-770,\n+//! <http://i.stanford.edu/pub/cstr/reports/cs/tr/79/770/CS-TR-79-770.pdf>.\n //!\n //! The algorithm's aim is to break a stream into as few lines as possible\n //! while respecting the indentation-consistency requirements of the enclosing"}, {"sha": "4cc83f8e31c20de2e61fa8cbe288dd1625fd712c", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -107,6 +107,9 @@ struct Context<'a, 'b> {\n     arg_spans: Vec<Span>,\n     /// All the formatting arguments that have formatting flags set, in order for diagnostics.\n     arg_with_formatting: Vec<parse::FormatSpec<'a>>,\n+\n+    /// Whether this format string came from a string literal, as opposed to a macro.\n+    is_literal: bool,\n }\n \n /// Parses the arguments from the given list of tokens, returning the diagnostic\n@@ -498,10 +501,55 @@ impl<'a, 'b> Context<'a, 'b> {\n                         self.verify_arg_type(Exact(idx), ty)\n                     }\n                     None => {\n-                        let msg = format!(\"there is no argument named `{}`\", name);\n-                        let sp = *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp);\n-                        let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n-                        err.emit();\n+                        let capture_feature_enabled = self\n+                            .ecx\n+                            .ecfg\n+                            .features\n+                            .map_or(false, |features| features.format_args_capture);\n+\n+                        // For the moment capturing variables from format strings expanded from macros is\n+                        // disabled (see RFC #2795)\n+                        let can_capture = capture_feature_enabled && self.is_literal;\n+\n+                        if can_capture {\n+                            // Treat this name as a variable to capture from the surrounding scope\n+                            let idx = self.args.len();\n+                            self.arg_types.push(Vec::new());\n+                            self.arg_unique_types.push(Vec::new());\n+                            self.args.push(\n+                                self.ecx.expr_ident(self.fmtsp, Ident::new(name, self.fmtsp)),\n+                            );\n+                            self.names.insert(name, idx);\n+                            self.verify_arg_type(Exact(idx), ty)\n+                        } else {\n+                            let msg = format!(\"there is no argument named `{}`\", name);\n+                            let sp = if self.is_literal {\n+                                *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp)\n+                            } else {\n+                                self.fmtsp\n+                            };\n+                            let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n+\n+                            if capture_feature_enabled && !self.is_literal {\n+                                err.note(&format!(\n+                                    \"did you intend to capture a variable `{}` from \\\n+                                     the surrounding scope?\",\n+                                    name\n+                                ));\n+                                err.note(\n+                                    \"to avoid ambiguity, `format_args!` cannot capture variables \\\n+                                     when the format string is expanded from a macro\",\n+                                );\n+                            } else if self.ecx.parse_sess().unstable_features.is_nightly_build() {\n+                                err.help(&format!(\n+                                    \"if you intended to capture `{}` from the surrounding scope, add \\\n+                                     `#![feature(format_args_capture)]` to the crate attributes\",\n+                                    name\n+                                ));\n+                            }\n+\n+                            err.emit();\n+                        }\n                     }\n                 }\n             }\n@@ -951,6 +999,7 @@ pub fn expand_preparsed_format_args(\n         invalid_refs: Vec::new(),\n         arg_spans,\n         arg_with_formatting: Vec::new(),\n+        is_literal: parser.is_literal,\n     };\n \n     // This needs to happen *after* the Parser has consumed all pieces to create all the spans"}, {"sha": "438a0d0c6ff970deb4e1a6a0086f7c7f884619f4", "filename": "src/librustc_data_structures/graph/dominators/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fdominators%2Fmod.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -1,8 +1,9 @@\n-//! Algorithm citation:\n-//! A Simple, Fast Dominance Algorithm.\n-//! Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy\n-//! Rice Computer Science TS-06-33870\n-//! <https://www.cs.rice.edu/~keith/EMBED/dom.pdf>\n+//! Finding the dominators in a control-flow graph.\n+//!\n+//! Algorithm based on Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy,\n+//! \"A Simple, Fast Dominance Algorithm\",\n+//! Rice Computer Science TS-06-33870,\n+//! <https://www.cs.rice.edu/~keith/EMBED/dom.pdf>.\n \n use super::iterate::reverse_post_order;\n use super::ControlFlowGraph;"}, {"sha": "2db8e466e1144fb76ff7d3cbd863cecdc1561cfa", "filename": "src/librustc_data_structures/graph/scc/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -1,7 +1,9 @@\n-//! Routine to compute the strongly connected components (SCCs) of a\n-//! graph, as well as the resulting DAG if each SCC is replaced with a\n-//! node in the graph. This uses Tarjan's algorithm that completes in\n-//! O(n) time.\n+//! Routine to compute the strongly connected components (SCCs) of a graph.\n+//!\n+//! Also computes as the resulting DAG if each SCC is replaced with a\n+//! node in the graph. This uses [Tarjan's algorithm](\n+//! https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm)\n+//! that completes in *O(n)* time.\n \n use crate::fx::FxHashSet;\n use crate::graph::vec_graph::VecGraph;"}, {"sha": "f687221d78e039a6f3f524faf1ea2cd54a240d6b", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -449,6 +449,7 @@ E0764: include_str!(\"./error_codes/E0764.md\"),\n E0765: include_str!(\"./error_codes/E0765.md\"),\n E0766: include_str!(\"./error_codes/E0766.md\"),\n E0767: include_str!(\"./error_codes/E0767.md\"),\n+E0768: include_str!(\"./error_codes/E0768.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "24169ef512efb64283409449ceae4e7ad222af54", "filename": "src/librustc_error_codes/error_codes/E0768.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0768.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0768.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0768.md?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,13 @@\n+A number in a non-decimal base has no digits.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0768\n+let s: i32 = 0b; // error!\n+```\n+\n+To fix this error, add the missing digits:\n+\n+```\n+let s: i32 = 0b1; // ok!\n+```"}, {"sha": "313744efb3fce0cbd74052c1f86e794c620efca9", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -567,6 +567,9 @@ declare_features! (\n     /// Be more precise when looking for live drops in a const context.\n     (active, const_precise_live_drops, \"1.46.0\", Some(73255), None),\n \n+    /// Allows capturing variables in scope using format_args!\n+    (active, format_args_capture, \"1.46.0\", Some(67984), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "31b8de500e0304c2a086c5057ba262c29390b73c", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -257,6 +257,18 @@ impl<'tcx> Body<'tcx> {\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n \n+    #[inline]\n+    pub fn basic_blocks_local_decls_mut_and_var_debug_info(\n+        &mut self,\n+    ) -> (\n+        &mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+        &mut LocalDecls<'tcx>,\n+        &mut Vec<VarDebugInfo<'tcx>>,\n+    ) {\n+        self.predecessor_cache.invalidate();\n+        (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)\n+    }\n+\n     /// Returns `true` if a cycle exists in the control-flow graph that is reachable from the\n     /// `START_BLOCK`.\n     pub fn is_cfg_cyclic(&self) -> bool {"}, {"sha": "e4c1ca4e851b0cfe1f519da46cfac6b1bd60751a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -638,8 +638,20 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n                 return None;\n             }\n+            Rvalue::ThreadLocalRef(def_id) => {\n+                trace!(\"skipping ThreadLocalRef({:?})\", def_id);\n \n-            _ => {}\n+                return None;\n+            }\n+\n+            // There's no other checking to do at this time.\n+            Rvalue::Aggregate(..)\n+            | Rvalue::Use(..)\n+            | Rvalue::Repeat(..)\n+            | Rvalue::Len(..)\n+            | Rvalue::Cast(..)\n+            | Rvalue::Discriminant(..)\n+            | Rvalue::NullaryOp(..) => {}\n         }\n \n         // FIXME we need to revisit this for #67176"}, {"sha": "97a01de867e1d4abcbe5895c9e7c21f0e6b66a2e", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 106, "deletions": 9, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -11,9 +11,10 @@\n \n use crate::transform::{simplify, MirPass, MirSource};\n use itertools::Itertools as _;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::{bit_set::BitSet, vec::IndexVec};\n+use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::{List, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n use std::iter::{Enumerate, Peekable};\n use std::slice::Iter;\n@@ -73,9 +74,20 @@ struct ArmIdentityInfo<'tcx> {\n \n     /// The statements that should be removed (turned into nops)\n     stmts_to_remove: Vec<usize>,\n+\n+    /// Indices of debug variables that need to be adjusted to point to\n+    // `{local_0}.{dbg_projection}`.\n+    dbg_info_to_adjust: Vec<usize>,\n+\n+    /// The projection used to rewrite debug info.\n+    dbg_projection: &'tcx List<PlaceElem<'tcx>>,\n }\n \n-fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmIdentityInfo<'tcx>> {\n+fn get_arm_identity_info<'a, 'tcx>(\n+    stmts: &'a [Statement<'tcx>],\n+    locals_count: usize,\n+    debug_info: &'a [VarDebugInfo<'tcx>],\n+) -> Option<ArmIdentityInfo<'tcx>> {\n     // This can't possibly match unless there are at least 3 statements in the block\n     // so fail fast on tiny blocks.\n     if stmts.len() < 3 {\n@@ -187,7 +199,7 @@ fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmId\n     try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n \n     let (get_variant_field_stmt, stmt) = stmt_iter.next()?;\n-    let (local_tmp_s0, local_1, vf_s0) = match_get_variant_field(stmt)?;\n+    let (local_tmp_s0, local_1, vf_s0, dbg_projection) = match_get_variant_field(stmt)?;\n \n     try_eat_storage_stmts(&mut stmt_iter, &mut storage_live_stmts, &mut storage_dead_stmts);\n \n@@ -228,6 +240,19 @@ fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmId\n     let stmt_to_overwrite =\n         nop_stmts.iter().find(|stmt_idx| live_idx < **stmt_idx && **stmt_idx < dead_idx);\n \n+    let mut tmp_assigned_vars = BitSet::new_empty(locals_count);\n+    for (l, r) in &tmp_assigns {\n+        tmp_assigned_vars.insert(*l);\n+        tmp_assigned_vars.insert(*r);\n+    }\n+\n+    let mut dbg_info_to_adjust = Vec::new();\n+    for (i, var_info) in debug_info.iter().enumerate() {\n+        if tmp_assigned_vars.contains(var_info.place.local) {\n+            dbg_info_to_adjust.push(i);\n+        }\n+    }\n+\n     Some(ArmIdentityInfo {\n         local_temp_0: local_tmp_s0,\n         local_1,\n@@ -243,12 +268,16 @@ fn get_arm_identity_info<'a, 'tcx>(stmts: &'a [Statement<'tcx>]) -> Option<ArmId\n         source_info: discr_stmt_source_info,\n         storage_stmts,\n         stmts_to_remove: nop_stmts,\n+        dbg_info_to_adjust,\n+        dbg_projection,\n     })\n }\n \n fn optimization_applies<'tcx>(\n     opt_info: &ArmIdentityInfo<'tcx>,\n     local_decls: &IndexVec<Local, LocalDecl<'tcx>>,\n+    local_uses: &IndexVec<Local, usize>,\n+    var_debug_info: &[VarDebugInfo<'tcx>],\n ) -> bool {\n     trace!(\"testing if optimization applies...\");\n \n@@ -273,6 +302,7 @@ fn optimization_applies<'tcx>(\n     // Verify the assigment chain consists of the form b = a; c = b; d = c; etc...\n     if opt_info.field_tmp_assignments.is_empty() {\n         trace!(\"NO: no assignments found\");\n+        return false;\n     }\n     let mut last_assigned_to = opt_info.field_tmp_assignments[0].1;\n     let source_local = last_assigned_to;\n@@ -285,6 +315,35 @@ fn optimization_applies<'tcx>(\n         last_assigned_to = *l;\n     }\n \n+    // Check that the first and last used locals are only used twice\n+    // since they are of the form:\n+    //\n+    // ```\n+    // _first = ((_x as Variant).n: ty);\n+    // _n = _first;\n+    // ...\n+    // ((_y as Variant).n: ty) = _n;\n+    // discriminant(_y) = z;\n+    // ```\n+    for (l, r) in &opt_info.field_tmp_assignments {\n+        if local_uses[*l] != 2 {\n+            warn!(\"NO: FAILED assignment chain local {:?} was used more than twice\", l);\n+            return false;\n+        } else if local_uses[*r] != 2 {\n+            warn!(\"NO: FAILED assignment chain local {:?} was used more than twice\", r);\n+            return false;\n+        }\n+    }\n+\n+    // Check that debug info only points to full Locals and not projections.\n+    for dbg_idx in &opt_info.dbg_info_to_adjust {\n+        let dbg_info = &var_debug_info[*dbg_idx];\n+        if !dbg_info.place.projection.is_empty() {\n+            trace!(\"NO: debug info for {:?} had a projection {:?}\", dbg_info.name, dbg_info.place);\n+            return false;\n+        }\n+    }\n+\n     if source_local != opt_info.local_temp_0 {\n         trace!(\n             \"NO: start of assignment chain does not match enum variant temp: {:?} != {:?}\",\n@@ -312,11 +371,15 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n         }\n \n         trace!(\"running SimplifyArmIdentity on {:?}\", source);\n-        let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n+        let local_uses = LocalUseCounter::get_local_uses(body);\n+        let (basic_blocks, local_decls, debug_info) =\n+            body.basic_blocks_local_decls_mut_and_var_debug_info();\n         for bb in basic_blocks {\n-            if let Some(opt_info) = get_arm_identity_info(&bb.statements) {\n+            if let Some(opt_info) =\n+                get_arm_identity_info(&bb.statements, local_decls.len(), debug_info)\n+            {\n                 trace!(\"got opt_info = {:#?}\", opt_info);\n-                if !optimization_applies(&opt_info, local_decls) {\n+                if !optimization_applies(&opt_info, local_decls, &local_uses, &debug_info) {\n                     debug!(\"optimization skipped for {:?}\", source);\n                     continue;\n                 }\n@@ -352,23 +415,57 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n \n                 bb.statements.retain(|stmt| stmt.kind != StatementKind::Nop);\n \n+                // Fix the debug info to point to the right local\n+                for dbg_index in opt_info.dbg_info_to_adjust {\n+                    let dbg_info = &mut debug_info[dbg_index];\n+                    assert!(dbg_info.place.projection.is_empty());\n+                    dbg_info.place.local = opt_info.local_0;\n+                    dbg_info.place.projection = opt_info.dbg_projection;\n+                }\n+\n                 trace!(\"block is now {:?}\", bb.statements);\n             }\n         }\n     }\n }\n \n+struct LocalUseCounter {\n+    local_uses: IndexVec<Local, usize>,\n+}\n+\n+impl LocalUseCounter {\n+    fn get_local_uses<'tcx>(body: &Body<'tcx>) -> IndexVec<Local, usize> {\n+        let mut counter = LocalUseCounter { local_uses: IndexVec::from_elem(0, &body.local_decls) };\n+        counter.visit_body(body);\n+        counter.local_uses\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for LocalUseCounter {\n+    fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n+        if context.is_storage_marker()\n+            || context == PlaceContext::NonUse(NonUseContext::VarDebugInfo)\n+        {\n+            return;\n+        }\n+\n+        self.local_uses[*local] += 1;\n+    }\n+}\n+\n /// Match on:\n /// ```rust\n /// _LOCAL_INTO = ((_LOCAL_FROM as Variant).FIELD: TY);\n /// ```\n-fn match_get_variant_field<'tcx>(stmt: &Statement<'tcx>) -> Option<(Local, Local, VarField<'tcx>)> {\n+fn match_get_variant_field<'tcx>(\n+    stmt: &Statement<'tcx>,\n+) -> Option<(Local, Local, VarField<'tcx>, &'tcx List<PlaceElem<'tcx>>)> {\n     match &stmt.kind {\n         StatementKind::Assign(box (place_into, rvalue_from)) => match rvalue_from {\n             Rvalue::Use(Operand::Copy(pf) | Operand::Move(pf)) => {\n                 let local_into = place_into.as_local()?;\n                 let (local_from, vf) = match_variant_field_place(*pf)?;\n-                Some((local_into, local_from, vf))\n+                Some((local_into, local_from, vf, pf.projection))\n             }\n             _ => None,\n         },"}, {"sha": "2b0e637c74e5ab2b640c73ff36392f0eb2008159", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -391,7 +391,14 @@ impl<'a> StringReader<'a> {\n             }\n             rustc_lexer::LiteralKind::Int { base, empty_int } => {\n                 return if empty_int {\n-                    self.err_span_(start, suffix_start, \"no valid digits found for number\");\n+                    self.sess\n+                        .span_diagnostic\n+                        .struct_span_err_with_code(\n+                            self.mk_sp(start, suffix_start),\n+                            \"no valid digits found for number\",\n+                            error_code!(E0768),\n+                        )\n+                        .emit();\n                     (token::Integer, sym::integer(0))\n                 } else {\n                     self.validate_int_literal(base, start, suffix_start);"}, {"sha": "7db62f3493ede969d97fc00309ab5080076c7641", "filename": "src/librustc_parse_format/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_parse_format%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_parse_format%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse_format%2Flib.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -190,7 +190,7 @@ pub struct Parser<'a> {\n     /// Whether the source string is comes from `println!` as opposed to `format!` or `print!`\n     append_newline: bool,\n     /// Whether this formatting string is a literal or it comes from a macro.\n-    is_literal: bool,\n+    pub is_literal: bool,\n     /// Start position of the current line.\n     cur_line_start: usize,\n     /// Start and end byte offset of every line of the format string. Excludes"}, {"sha": "fef1e34a23ba3e9381c21b9dc1ef77d6d8816f4c", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -1,9 +1,8 @@\n-//! Machinery for hygienic macros, inspired by the `MTWT[1]` paper.\n+//! Machinery for hygienic macros.\n //!\n-//! `[1]` Matthew Flatt, Ryan Culpepper, David Darais, and Robert Bruce Findler. 2012.\n-//! *Macros that work together: Compile-time bindings, partial expansion,\n-//! and definition contexts*. J. Funct. Program. 22, 2 (March 2012), 181-216.\n-//! DOI=10.1017/S0956796812000093 <https://doi.org/10.1017/S0956796812000093>\n+//! Inspired by Matthew Flatt et al., \u201cMacros That Work Together: Compile-Time Bindings, Partial\n+//! Expansion, and Definition Contexts,\u201d *Journal of Functional Programming* 22, no. 2\n+//! (March 1, 2012): 181\u2013216, <https://doi.org/10.1017/S0956796812000093>.\n \n // Hygiene data is stored in a global variable and accessed via TLS, which\n // means that accesses are somewhat expensive. (`HygieneData::with`"}, {"sha": "acc2a50abe88ea17b68d85ec1c533bc4f5c6a94f", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -342,6 +342,7 @@ symbols! {\n         forbid,\n         format_args,\n         format_args_nl,\n+        format_args_capture,\n         from,\n         From,\n         from_desugaring,"}, {"sha": "9542e7209b4cf168347e18b00cc3253c349fb020", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -229,10 +229,10 @@ pub mod panic_count {\n     thread_local! { static LOCAL_PANIC_COUNT: Cell<usize> = Cell::new(0) }\n \n     // Sum of panic counts from all threads. The purpose of this is to have\n-    // a fast path in `is_zero` (which is used by `panicking`). Access to\n-    // this variable can be always be done with relaxed ordering because\n-    // it is always guaranteed that, if `GLOBAL_PANIC_COUNT` is zero,\n-    // `LOCAL_PANIC_COUNT` will be zero.\n+    // a fast path in `is_zero` (which is used by `panicking`). In any particular\n+    // thread, if that thread currently views `GLOBAL_PANIC_COUNT` as being zero,\n+    // then `LOCAL_PANIC_COUNT` in that thread is zero. This invariant holds before\n+    // and after increase and decrease, but not necessarily during their execution.\n     static GLOBAL_PANIC_COUNT: AtomicUsize = AtomicUsize::new(0);\n \n     pub fn increase() -> usize {\n@@ -263,6 +263,12 @@ pub mod panic_count {\n             // Fast path: if `GLOBAL_PANIC_COUNT` is zero, all threads\n             // (including the current one) will have `LOCAL_PANIC_COUNT`\n             // equal to zero, so TLS access can be avoided.\n+            //\n+            // In terms of performance, a relaxed atomic load is similar to a normal\n+            // aligned memory read (e.g., a mov instruction in x86), but with some\n+            // compiler optimization restrictions. On the other hand, a TLS access\n+            // might require calling a non-inlinable function (such as `__tls_get_addr`\n+            // when using the GD TLS model).\n             true\n         } else {\n             is_zero_slow_path()"}, {"sha": "d93805e6cd176ebb7f13166476dd7dc8022d3402", "filename": "src/test/mir-opt/issue-73223.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    let split = match Some(1) {\n+        Some(v) => v,\n+        None => return,\n+    };\n+\n+    let _prev = Some(split);\n+    assert_eq!(split, 1);\n+}\n+\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR rustc.main.SimplifyArmIdentity.diff\n+// EMIT_MIR rustc.main.PreCodegen.diff"}, {"sha": "59c00e1b96f9669368f6f9e7df9c099834570ca8", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.PreCodegen.diff", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,252 @@\n+- // MIR for `main` before PreCodegen\n++ // MIR for `main` after PreCodegen\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n+      let mut _1: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let _2: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _4: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _9: bool;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _11: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _13: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _14: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _15: &[&str];                // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _16: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _17: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _18: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _19: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _20: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _21: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _22: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _23: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _26: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _28: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _29: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          scope 3 {\n+              debug _prev => _3;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _7: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _7;    // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  debug right_val => _8;   // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _24: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _25: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug arg0 => _24;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      debug arg1 => _25;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug x => _24;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _27;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _30: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _31: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                      scope 8 {\n+                          debug x => _25;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _29;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _32: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _33: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                  }\n+                  scope 10 {\n+                      debug pieces => _15; // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      debug args => _16;   // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      let mut _34: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _2;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+      }\n+      scope 7 {\n+      }\n+      scope 9 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_3);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _4 = _2;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_3 as Some).0: i32) = move _4; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_3) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _6 = &_2;                        // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _11 = (*_7);                     // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _10 = Eq(move _11, move _12);    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _9 = Not(move _10);              // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          switchInt(_9) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_3);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb2: {\n+          StorageLive(_14);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &[&str; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _21 = _7;                        // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _20 = &_21;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_23);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _23 = _8;                        // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _22 = &_23;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_19.0: &&i32) = move _20;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          (_19.1: &&i32) = move _22;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_22);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_20);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _24 = (_19.0: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _25 = (_19.1: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_30);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb3; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb3: {\n+          StorageLive(_31);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb4: {\n+          (_26.0: &core::fmt::Opaque) = move _31; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_26.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _30; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_31);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_30);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_28);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _29 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_32);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _32 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _29) -> bb5; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb5: {\n+          StorageLive(_33);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _33 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb6; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          (_28.0: &core::fmt::Opaque) = move _33; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_28.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _32; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_33);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_32);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _18 = [move _26, move _28];      // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_28);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_26);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _17 = &_18;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _16 = move _17 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_34);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          discriminant(_34) = 0;           // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.0: &[&str]) = move _15;     // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _34; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.2: &[std::fmt::ArgumentV1]) = move _16; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_34);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _13 = &_14;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _13); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }\n+      }\n+  }\n+  "}, {"sha": "e5b4a0328808f45fbc6247a1e28825c75367d404", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "added", "additions": 376, "deletions": 0, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,376 @@\n+- // MIR for `main` before SimplifyArmIdentity\n++ // MIR for `main` after SimplifyArmIdentity\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n+      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let mut _3: isize;                   // in scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+      let _4: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _5: !;                       // in scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+      let mut _7: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let _8: ();                          // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _9: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _10: &i32;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _12: i32;                        // in scope 0 at $DIR/issue-73223.rs:8:23: 8:24\n+      let mut _15: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _16: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _17: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _18: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _19: !;                      // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _20: &std::fmt::Arguments;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _21: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _22: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _23: &[&str];                // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _24: &[&str; 3];             // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _25: &[&str; 3];                 // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _26: [&str; 3];                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _27: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _28: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _29: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _30: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _31: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _32: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _33: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _34: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _35: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _36: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _37: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _38: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _39: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _40: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _41: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _44: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _45: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _46: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _47: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _48: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          scope 3 {\n+              debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _13: &i32;               // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let _14: &i32;               // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let mut _51: &i32;           // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _13;   // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  debug right_val => _14;  // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _42: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _43: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let mut _50: &[&str; 3]; // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug arg0 => _42;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      debug arg1 => _43;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug x => _45;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _46;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _52: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _53: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _54: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _55: &&i32; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                      scope 8 {\n+                          debug x => _48;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _49;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _56: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _57: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _58: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _59: &&i32; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                  }\n+                  scope 10 {\n+                      debug pieces => _23; // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      debug args => _33;   // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      let mut _60: &[&str]; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      let mut _61: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      let mut _62: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _4;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+      }\n+      scope 7 {\n+      }\n+      scope 9 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+                                           // ty::Const\n+                                           // + ty: isize\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:3:9: 3:16\n+                                           // + literal: Const { ty: isize, val: Value(Scalar(0x00000001)) }\n+          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:4:17: 4:23\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+      }\n+  \n+      bb2: {\n+          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:3:21: 3:22\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _10 = &_1;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _51 = const main::promoted[1];   // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+          _11 = _51;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _17 = (*_13);                    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _18 = (*_14);                    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _16 = Eq(move _17, move _18);    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_17);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _15 = Not(move _16);             // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_16);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          switchInt(_15) -> [false: bb4, otherwise: bb5]; // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb3: {\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb4: {\n+          _8 = const ();                   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_15);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_14);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb5: {\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_21);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_22);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_23);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _50 = const main::promoted[0];   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &[&str; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+          _25 = _50;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _24 = _25;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_24);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_33);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_34);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_35);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_36);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_37);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_38);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_39);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _39 = _13;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _38 = &_39;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_40);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_41);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _41 = _14;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _40 = &_41;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_37.0: &&i32) = move _38;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          (_37.1: &&i32) = move _40;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_40);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_38);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_42);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _42 = (_37.0: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_43);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _43 = (_37.1: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_44);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_45);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _45 = _42;                       // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_46);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _46 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_52);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_53);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _53 = _46;                       // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _52 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _53) -> bb6; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_53);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_54);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_55);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _55 = _45;                       // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _54 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _55) -> bb7; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_55);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_44.0: &core::fmt::Opaque) = move _54; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_44.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _52; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_54);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_52);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_46);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_45);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_47);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_48);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _48 = _43;                       // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_49);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _49 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_56);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_57);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _57 = _49;                       // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _56 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _57) -> bb8; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb8: {\n+          StorageDead(_57);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_58);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_59);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _59 = _48;                       // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _58 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _59) -> bb9; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_59);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_47.0: &core::fmt::Opaque) = move _58; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_47.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _56; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_58);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_56);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_49);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_48);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _36 = [move _44, move _47];      // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_47);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_44);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_43);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_42);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _35 = &_36;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _34 = _35;                       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _33 = move _34 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_34);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_60);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _60 = _23;                       // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_61);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          discriminant(_61) = 0;           // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_62);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _62 = _33;                       // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.0: &[&str]) = move _60;     // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _61; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.2: &[std::fmt::ArgumentV1]) = move _62; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_62);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_61);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_60);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_33);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_23);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _21 = &_22;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _20 = _21;                       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }\n+      }\n+  }\n+  "}, {"sha": "59c00e1b96f9669368f6f9e7df9c099834570ca8", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.PreCodegen.diff", "status": "added", "additions": 252, "deletions": 0, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,252 @@\n+- // MIR for `main` before PreCodegen\n++ // MIR for `main` after PreCodegen\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n+      let mut _1: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let _2: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _4: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _9: bool;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _11: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _13: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _14: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _15: &[&str];                // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _16: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _17: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _18: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _19: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _20: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _21: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _22: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _23: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _26: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _28: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _29: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          scope 3 {\n+              debug _prev => _3;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _7: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _7;    // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  debug right_val => _8;   // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _24: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _25: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug arg0 => _24;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      debug arg1 => _25;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug x => _24;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _27;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _30: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _31: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                      scope 8 {\n+                          debug x => _25;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _29;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _32: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _33: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                  }\n+                  scope 10 {\n+                      debug pieces => _15; // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      debug args => _16;   // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      let mut _34: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _2;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+      }\n+      scope 7 {\n+      }\n+      scope 9 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_1 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          discriminant(_1) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _2 = ((_1 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_3);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _4 = _2;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_3 as Some).0: i32) = move _4; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_3) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _6 = &_2;                        // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _11 = (*_7);                     // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _10 = Eq(move _11, move _12);    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _9 = Not(move _10);              // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          switchInt(_9) -> [false: bb1, otherwise: bb2]; // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+          StorageDead(_9);                 // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_3);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb2: {\n+          StorageLive(_14);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &[&str; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_21);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _21 = _7;                        // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _20 = &_21;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_22);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_23);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _23 = _8;                        // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _22 = &_23;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_19.0: &&i32) = move _20;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          (_19.1: &&i32) = move _22;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_22);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_20);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _24 = (_19.0: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _25 = (_19.1: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_30);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb3; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb3: {\n+          StorageLive(_31);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb4: {\n+          (_26.0: &core::fmt::Opaque) = move _31; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_26.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _30; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_31);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_30);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_28);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _29 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_32);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _32 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _29) -> bb5; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb5: {\n+          StorageLive(_33);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _33 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb6; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          (_28.0: &core::fmt::Opaque) = move _33; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_28.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _32; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_33);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_32);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _18 = [move _26, move _28];      // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_28);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_26);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _17 = &_18;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _16 = move _17 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_34);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          discriminant(_34) = 0;           // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.0: &[&str]) = move _15;     // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _34; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_14.2: &[std::fmt::ArgumentV1]) = move _16; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_34);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _13 = &_14;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _13); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }\n+      }\n+  }\n+  "}, {"sha": "0c2651dc3c68d21e4b5881bf7f6b29ba228cddce", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "added", "additions": 376, "deletions": 0, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,376 @@\n+- // MIR for `main` before SimplifyArmIdentity\n++ // MIR for `main` after SimplifyArmIdentity\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:1:11: 1:11\n+      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+      let mut _3: isize;                   // in scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+      let _4: i32;                         // in scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+      let mut _5: !;                       // in scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+      let mut _7: i32;                     // in scope 0 at $DIR/issue-73223.rs:7:22: 7:27\n+      let _8: ();                          // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _9: (&i32, &i32);            // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _10: &i32;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _11: &i32;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _12: i32;                        // in scope 0 at $DIR/issue-73223.rs:8:23: 8:24\n+      let mut _15: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _16: bool;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _17: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _18: i32;                    // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _19: !;                      // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _20: &std::fmt::Arguments;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _21: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _22: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _23: &[&str];                // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _24: &[&str; 3];             // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _25: &[&str; 3];                 // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _26: [&str; 3];                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _27: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _28: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _29: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _30: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _31: &str;                   // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _32: &str;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _33: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _34: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _35: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let _36: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _37: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _38: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _39: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _40: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let _41: &i32;                       // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _44: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _45: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _46: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _47: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+      let mut _48: &&i32;                  // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      let mut _49: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n+          let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          scope 3 {\n+              debug _prev => _6;           // in scope 3 at $DIR/issue-73223.rs:7:9: 7:14\n+              let _13: &i32;               // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let _14: &i32;               // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              let mut _51: &i32;           // in scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _13;   // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  debug right_val => _14;  // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _42: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let _43: &&i32;          // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  let mut _50: &[&str; 3]; // in scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug arg0 => _42;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      debug arg1 => _43;   // in scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                      scope 6 {\n+                          debug x => _45;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _46;  // in scope 6 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _52: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _53: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _54: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _55: &&i32; // in scope 6 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                      scope 8 {\n+                          debug x => _48;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          debug f => _49;  // in scope 8 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                          let mut _56: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _57: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _58: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                          let mut _59: &&i32; // in scope 8 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      }\n+                  }\n+                  scope 10 {\n+                      debug pieces => _23; // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      debug args => _33;   // in scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                      let mut _60: &[&str]; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      let mut _61: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                      let mut _62: &[std::fmt::ArgumentV1]; // in scope 10 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _4;                   // in scope 2 at $DIR/issue-73223.rs:3:14: 3:15\n+      }\n+      scope 7 {\n+      }\n+      scope 9 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:2:9: 2:14\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:2:28: 2:29\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+                                           // ty::Const\n+                                           // + ty: isize\n+                                           // + val: Value(Scalar(0x0000000000000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:3:9: 3:16\n+                                           // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000001)) }\n+          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:4:17: 4:23\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:4:17: 4:23\n+      }\n+  \n+      bb2: {\n+          StorageLive(_4);                 // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _4 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:3:14: 3:15\n+          _1 = _4;                         // scope 2 at $DIR/issue-73223.rs:3:20: 3:21\n+          StorageDead(_4);                 // scope 0 at $DIR/issue-73223.rs:3:21: 3:22\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:5:6: 5:7\n+          StorageLive(_6);                 // scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n+          StorageLive(_7);                 // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          _7 = _1;                         // scope 1 at $DIR/issue-73223.rs:7:22: 7:27\n+          ((_6 as Some).0: i32) = move _7; // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          discriminant(_6) = 1;            // scope 1 at $DIR/issue-73223.rs:7:17: 7:28\n+          StorageDead(_7);                 // scope 1 at $DIR/issue-73223.rs:7:27: 7:28\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _10 = &_1;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _51 = const main::promoted[1];   // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &i32\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+          _11 = _51;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_10);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _17 = (*_13);                    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _18 = (*_14);                    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _16 = Eq(move _17, move _18);    // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_17);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _15 = Not(move _16);             // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_16);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          switchInt(_15) -> [false: bb4, otherwise: bb5]; // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb3: {\n+          return;                          // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb4: {\n+          _8 = const ();                   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_15);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_14);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_13);                // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue-73223.rs:1:11: 9:2\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          StorageDead(_6);                 // scope 1 at $DIR/issue-73223.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:9:1: 9:2\n+          goto -> bb3;                     // scope 0 at $DIR/issue-73223.rs:9:2: 9:2\n+      }\n+  \n+      bb5: {\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_20);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_21);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_22);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_23);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_25);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _50 = const main::promoted[0];   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: &[&str; 3]\n+                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+          _25 = _50;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _24 = _25;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageDead(_24);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_33);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_34);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_35);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_36);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_37);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_38);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_39);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _39 = _13;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _38 = &_39;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_40);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_41);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _41 = _14;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _40 = &_41;                      // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          (_37.0: &&i32) = move _38;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          (_37.1: &&i32) = move _40;       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_40);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_38);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_42);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _42 = (_37.0: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_43);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _43 = (_37.1: &&i32);            // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_44);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_45);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _45 = _42;                       // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_46);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _46 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_52);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_53);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _53 = _46;                       // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _52 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _53) -> bb6; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_53);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_54);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_55);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _55 = _45;                       // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _54 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _55) -> bb7; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb7: {\n+          StorageDead(_55);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_44.0: &core::fmt::Opaque) = move _54; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_44.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _52; // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_54);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_52);                // scope 7 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_46);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_45);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_47);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_48);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _48 = _43;                       // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          StorageLive(_49);                // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+          _49 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n+          StorageLive(_56);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_57);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _57 = _49;                       // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _56 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _57) -> bb8; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb8: {\n+          StorageDead(_57);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_58);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_59);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _59 = _48;                       // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _58 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _59) -> bb9; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+                                           // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb9: {\n+          StorageDead(_59);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_47.0: &core::fmt::Opaque) = move _58; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_47.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _56; // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_58);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_56);                // scope 9 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_49);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_48);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _36 = [move _44, move _47];      // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_47);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_44);                // scope 5 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_43);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_42);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _35 = &_36;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _34 = _35;                       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _33 = move _34 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_34);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageLive(_60);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _60 = _23;                       // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_61);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          discriminant(_61) = 0;           // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageLive(_62);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          _62 = _33;                       // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.0: &[&str]) = move _60;     // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _61; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          (_22.2: &[std::fmt::ArgumentV1]) = move _62; // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_62);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_61);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_60);                // scope 10 at $SRC_DIR/libcore/fmt/mod.rs:LL:COL\n+          StorageDead(_33);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          StorageDead(_23);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _21 = &_22;                      // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          _20 = _21;                       // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _20); // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/libstd/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}, val: Value(Scalar(<ZST>)) }\n+      }\n+  }\n+  "}, {"sha": "551f6db08a599e9aaecf2c3d70878f4c8565de29", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/32bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -5,12 +5,12 @@\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n -     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {"}, {"sha": "388b382b86daff5bac7263af4bee223c40eff845", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/64bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -5,12 +5,12 @@\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:8: 1:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:1:31: 1:46\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n-      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+-     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n -     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n+          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {"}, {"sha": "e6d794a71508c32ca08925edaab113826b395224", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyArmIdentity.diff?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -15,22 +15,27 @@\n       let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n       let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n       scope 1 {\n-          debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+-         debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n++         debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n       }\n       scope 2 {\n-          debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+-         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n++         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n           scope 3 {\n               scope 7 {\n-                  debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+-                 debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n++                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n               }\n               scope 8 {\n-                  debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+-                 debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n++                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n               }\n           }\n       }\n       scope 4 {\n-          debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+-         debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n++         debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n           scope 5 {\n           }\n       }"}, {"sha": "24bde51c7d3bbb31fc6609333f74a65737192063", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyBranchSame.after.mir?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -14,22 +14,22 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     let _10: u32;                        // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n     let mut _11: u32;                    // in scope 0 at $DIR/simplify_try.rs:7:8: 7:9\n     scope 1 {\n-        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n     }\n     scope 2 {\n-        debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n         scope 3 {\n             scope 7 {\n-                debug t => _9;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n-                debug v => _8;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n                 let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:6:14: 6:15\n             }\n         }\n     }\n     scope 4 {\n-        debug val => _10;                // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n         scope 5 {\n         }\n     }"}, {"sha": "929f04d4654adbeff804a4364a9014d8c952ce98", "filename": "src/test/mir-opt/simplify_try/rustc.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try%2Frustc.try_identity.SimplifyLocals.after.mir?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -3,27 +3,22 @@\n fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simplify_try.rs:5:17: 5:18\n     let mut _0: std::result::Result<u32, i32>; // return place in scope 0 at $DIR/simplify_try.rs:5:41: 5:57\n-    let _2: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n-    let _3: i32;                         // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let mut _4: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let mut _5: i32;                     // in scope 0 at $DIR/simplify_try.rs:6:14: 6:15\n-    let _6: u32;                         // in scope 0 at $DIR/simplify_try.rs:6:13: 6:15\n     scope 1 {\n-        debug y => _2;                   // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n+        debug y => ((_0 as Ok).0: u32);  // in scope 1 at $DIR/simplify_try.rs:6:9: 6:10\n     }\n     scope 2 {\n-        debug err => _3;                 // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n+        debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:6:14: 6:15\n         scope 3 {\n             scope 7 {\n-                debug t => _5;           // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+                debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n             }\n             scope 8 {\n-                debug v => _4;           // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n+                debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/libcore/result.rs:LL:COL\n             }\n         }\n     }\n     scope 4 {\n-        debug val => _6;                 // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n+        debug val => ((_0 as Ok).0: u32); // in scope 4 at $DIR/simplify_try.rs:6:13: 6:15\n         scope 5 {\n         }\n     }\n@@ -32,9 +27,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/simplify_try.rs:6:9: 6:10\n         _0 = move _1;                    // scope 1 at $DIR/simplify_try.rs:7:5: 7:10\n-        StorageDead(_2);                 // scope 0 at $DIR/simplify_try.rs:8:1: 8:2\n         return;                          // scope 0 at $DIR/simplify_try.rs:8:2: 8:2\n     }\n }"}, {"sha": "21af91610915fb59e5cf24e0cfbfa217534e3ccd", "filename": "src/test/ui/fmt/feature-gate-format-args-capture.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    format!(\"{foo}\");                //~ ERROR: there is no argument named `foo`\n+\n+    // panic! doesn't hit format_args! unless there are two or more arguments.\n+    panic!(\"{foo} {bar}\", bar=1);    //~ ERROR: there is no argument named `foo`\n+}"}, {"sha": "f08f1651cb62260237cc5f88e50df0fcf106a072", "filename": "src/test/ui/fmt/feature-gate-format-args-capture.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,18 @@\n+error: there is no argument named `foo`\n+  --> $DIR/feature-gate-format-args-capture.rs:2:14\n+   |\n+LL |     format!(\"{foo}\");\n+   |              ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n+\n+error: there is no argument named `foo`\n+  --> $DIR/feature-gate-format-args-capture.rs:5:13\n+   |\n+LL |     panic!(\"{foo} {bar}\", bar=1);\n+   |             ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6ca7dcc216f3a9d7cd90cef900974b7bd88439e0", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,6 @@\n+#![feature(format_args_capture)]\n+\n+fn main() {\n+    format!(concat!(\"{foo}\"));         //~ ERROR: there is no argument named `foo`\n+    format!(concat!(\"{ba\", \"r} {}\"), 1);     //~ ERROR: there is no argument named `bar`\n+}"}, {"sha": "0c5915149cd6010830f74e3c453e85225ef0a32c", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,22 @@\n+error: there is no argument named `foo`\n+  --> $DIR/format-args-capture-macro-hygiene.rs:4:13\n+   |\n+LL |     format!(concat!(\"{foo}\"));\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `foo` from the surrounding scope?\n+   = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: there is no argument named `bar`\n+  --> $DIR/format-args-capture-macro-hygiene.rs:5:13\n+   |\n+LL |     format!(concat!(\"{ba\", \"r} {}\"), 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: did you intend to capture a variable `bar` from the surrounding scope?\n+   = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3c596ae3bb899e5ea796cdc98e9e5104a3329b4d", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,22 @@\n+#![feature(format_args_capture)]\n+\n+fn main() {\n+    format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+    //~^ ERROR: cannot find value `foo` in this scope\n+    //~^^ ERROR: cannot find value `bar` in this scope\n+\n+    format!(\"{foo}\");                //~ ERROR: cannot find value `foo` in this scope\n+\n+    format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+    //~^ ERROR cannot find value `valueb` in this scope\n+    //~^^ ERROR named argument never used\n+\n+    format!(r##\"\n+\n+        {foo}\n+\n+    \"##);\n+    //~^^^^^ ERROR: cannot find value `foo` in this scope\n+\n+    panic!(\"{foo} {bar}\", bar=1);    //~ ERROR: cannot find value `foo` in this scope\n+}"}, {"sha": "c3d740eef9d3cd1684e54e35d55104ba2c5aca94", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,52 @@\n+error: named argument never used\n+  --> $DIR/format-args-capture-missing-variables.rs:10:51\n+   |\n+LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+   |             -------------------                   ^ named argument never used\n+   |             |\n+   |             formatting specifier missing\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:4:13\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `bar` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:4:13\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:8:13\n+   |\n+LL |     format!(\"{foo}\");\n+   |             ^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `valueb` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:10:13\n+   |\n+LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+   |             ^^^^^^^^^^^^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:14:13\n+   |\n+LL |       format!(r##\"\n+   |  _____________^\n+LL | |\n+LL | |         {foo}\n+LL | |\n+LL | |     \"##);\n+   | |_______^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-missing-variables.rs:21:12\n+   |\n+LL |     panic!(\"{foo} {bar}\", bar=1);\n+   |            ^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "7490632110c852ac1a7ad0e01243db3f504b6caa", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -0,0 +1,64 @@\n+// run-pass\n+// ignore-wasm32\n+// ignore-wasm64\n+#![feature(format_args_capture)]\n+\n+fn main() {\n+    named_argument_takes_precedence_to_captured();\n+    panic_with_single_argument_does_not_get_formatted();\n+    panic_with_multiple_arguments_is_formatted();\n+    formatting_parameters_can_be_captured();\n+}\n+\n+fn named_argument_takes_precedence_to_captured() {\n+    let foo = \"captured\";\n+    let s = format!(\"{foo}\", foo=\"named\");\n+    assert_eq!(&s, \"named\");\n+\n+    let s = format!(\"{foo}-{foo}-{foo}\", foo=\"named\");\n+    assert_eq!(&s, \"named-named-named\");\n+\n+    let s = format!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n+    assert_eq!(&s, \"positional-named-captured\");\n+}\n+\n+fn panic_with_single_argument_does_not_get_formatted() {\n+    // panic! with a single argument does not perform string formatting.\n+    // RFC #2795 suggests that this may need to change so that captured arguments are formatted.\n+    // For stability reasons this will need to part of an edition change.\n+\n+    let msg = std::panic::catch_unwind(|| {\n+        panic!(\"{foo}\");\n+    }).unwrap_err();\n+\n+    assert_eq!(msg.downcast_ref::<&str>(), Some(&\"{foo}\"))\n+}\n+\n+fn panic_with_multiple_arguments_is_formatted() {\n+    let foo = \"captured\";\n+\n+    let msg = std::panic::catch_unwind(|| {\n+        panic!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n+    }).unwrap_err();\n+\n+    assert_eq!(msg.downcast_ref::<String>(), Some(&\"positional-named-captured\".to_string()))\n+}\n+\n+fn formatting_parameters_can_be_captured() {\n+    let width = 9;\n+    let precision = 3;\n+\n+    let x = 7.0;\n+\n+    let s = format!(\"{x:width$}\");\n+    assert_eq!(&s, \"        7\");\n+\n+    let s = format!(\"{x:<width$}\");\n+    assert_eq!(&s, \"7        \");\n+\n+    let s = format!(\"{x:-^width$}\");\n+    assert_eq!(&s, \"----7----\");\n+\n+    let s = format!(\"{x:-^width$.precision$}\");\n+    assert_eq!(&s, \"--7.000--\");\n+}"}, {"sha": "0ff478826f728cc8810c4b65404687c15e5a22e3", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -63,18 +63,24 @@ error: there is no argument named `foo`\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n    |                 ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: there is no argument named `bar`\n   --> $DIR/ifmt-bad-arg.rs:27:26\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n    |                          ^^^^^\n+   |\n+   = help: if you intended to capture `bar` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: there is no argument named `foo`\n   --> $DIR/ifmt-bad-arg.rs:31:14\n    |\n LL |     format!(\"{foo}\");\n    |              ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: multiple unused formatting arguments\n   --> $DIR/ifmt-bad-arg.rs:32:17\n@@ -155,6 +161,8 @@ error: there is no argument named `valueb`\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n    |                       ^^^^^^^^\n+   |\n+   = help: if you intended to capture `valueb` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: named argument never used\n   --> $DIR/ifmt-bad-arg.rs:45:51\n@@ -205,6 +213,8 @@ error: there is no argument named `foo`\n    |\n LL |         {foo}\n    |         ^^^^^\n+   |\n+   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n \n error: invalid format string: expected `'}'`, found `'t'`\n   --> $DIR/ifmt-bad-arg.rs:75:1"}, {"sha": "954cc0beeef3e73025b4c7a246760e49ddff5671", "filename": "src/test/ui/parser/issue-1802-1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-1.stderr?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -1,8 +1,9 @@\n-error: no valid digits found for number\n+error[E0768]: no valid digits found for number\n   --> $DIR/issue-1802-1.rs:5:16\n    |\n LL |     log(error, 0b);\n    |                ^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0768`."}, {"sha": "49043d07b35ebc964ce589ea4e3c4dc5f3d0b984", "filename": "src/test/ui/parser/issue-1802-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-1802-2.stderr?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -1,8 +1,9 @@\n-error: no valid digits found for number\n+error[E0768]: no valid digits found for number\n   --> $DIR/issue-1802-2.rs:5:16\n    |\n LL |     log(error, 0b);\n    |                ^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0768`."}, {"sha": "f05d61603023cbb1c9224dc1a7e42f37c1d1c87e", "filename": "src/test/ui/parser/lex-bad-numeric-literals.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbf3ae7c3beb5b493375bf76152e490b8cc81d1c/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-numeric-literals.stderr?ref=dbf3ae7c3beb5b493375bf76152e490b8cc81d1c", "patch": "@@ -46,7 +46,7 @@ error: hexadecimal float literal is not supported\n LL |     0x9.0e-9;\n    |     ^^^^^^^^\n \n-error: no valid digits found for number\n+error[E0768]: no valid digits found for number\n   --> $DIR/lex-bad-numeric-literals.rs:11:5\n    |\n LL |     0o;\n@@ -64,31 +64,31 @@ error: hexadecimal float literal is not supported\n LL |     0x539.0;\n    |     ^^^^^^^\n \n-error: no valid digits found for number\n+error[E0768]: no valid digits found for number\n   --> $DIR/lex-bad-numeric-literals.rs:18:5\n    |\n LL |     0x;\n    |     ^^\n \n-error: no valid digits found for number\n+error[E0768]: no valid digits found for number\n   --> $DIR/lex-bad-numeric-literals.rs:19:5\n    |\n LL |     0xu32;\n    |     ^^\n \n-error: no valid digits found for number\n+error[E0768]: no valid digits found for number\n   --> $DIR/lex-bad-numeric-literals.rs:20:5\n    |\n LL |     0ou32;\n    |     ^^\n \n-error: no valid digits found for number\n+error[E0768]: no valid digits found for number\n   --> $DIR/lex-bad-numeric-literals.rs:21:5\n    |\n LL |     0bu32;\n    |     ^^\n \n-error: no valid digits found for number\n+error[E0768]: no valid digits found for number\n   --> $DIR/lex-bad-numeric-literals.rs:22:5\n    |\n LL |     0b;\n@@ -138,3 +138,4 @@ LL |     0b101f64;\n \n error: aborting due to 23 previous errors\n \n+For more information about this error, try `rustc --explain E0768`."}]}