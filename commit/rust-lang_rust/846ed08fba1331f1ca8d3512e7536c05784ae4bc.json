{"sha": "846ed08fba1331f1ca8d3512e7536c05784ae4bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NmVkMDhmYmExMzMxZjFjYThkMzUxMmU3NTM2YzA1Nzg0YWU0YmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-23T19:30:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T19:30:28Z"}, "message": "Merge #5012\n\n5012: Slightly better name r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "3799a6c66e23cfd5885ec074216af2ae2e8ac690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3799a6c66e23cfd5885ec074216af2ae2e8ac690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/846ed08fba1331f1ca8d3512e7536c05784ae4bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8lhUCRBK7hj4Ov3rIwAAdHIIAErbfVuWiiqn1RgFsY+P8uvh\nfMnbyg3Mck3otVP0xyTRDwT/hSO572z8j8ocqdFq2LoAnpCn1LbpIrVgU3MgLfK0\nPefpdNQzctLD53AWmCWvG7v02nBdA/PPC7CPnBcuugfQJxFuoD0coRAmpO/gRTXU\nkYGj7bW0xzz7wCIkoukzXglTCT4zTQPf/q42E+5RPNuVF9H1TlpujO8Xdaie1D/o\nG82ZvfMy/pTxQn1YQGzZ2e3RIWf6ORMe1DEyvgkUiqPZV2vL+VgAxHFuEvZUncjU\nR2HEF/IdHurhPmT9DoTWw/wXXwxYxm30i4Ar/vx+vxG9iikRyGuSSEIrZZolBuw=\n=bTqN\n-----END PGP SIGNATURE-----\n", "payload": "tree 3799a6c66e23cfd5885ec074216af2ae2e8ac690\nparent 9caf810129589327cc614936a97a10cedc6f03a9\nparent ff687453a8a80da29ee7b0b4ad71871ff8b0523e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592940628 +0000\ncommitter GitHub <noreply@github.com> 1592940628 +0000\n\nMerge #5012\n\n5012: Slightly better name r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/846ed08fba1331f1ca8d3512e7536c05784ae4bc", "html_url": "https://github.com/rust-lang/rust/commit/846ed08fba1331f1ca8d3512e7536c05784ae4bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/846ed08fba1331f1ca8d3512e7536c05784ae4bc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9caf810129589327cc614936a97a10cedc6f03a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9caf810129589327cc614936a97a10cedc6f03a9", "html_url": "https://github.com/rust-lang/rust/commit/9caf810129589327cc614936a97a10cedc6f03a9"}, {"sha": "ff687453a8a80da29ee7b0b4ad71871ff8b0523e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff687453a8a80da29ee7b0b4ad71871ff8b0523e", "html_url": "https://github.com/rust-lang/rust/commit/ff687453a8a80da29ee7b0b4ad71871ff8b0523e"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "a98264fb33d655aae9fd74a49d9b9e440c182530", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/846ed08fba1331f1ca8d3512e7536c05784ae4bc/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846ed08fba1331f1ca8d3512e7536c05784ae4bc/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=846ed08fba1331f1ca8d3512e7536c05784ae4bc", "patch": "@@ -10,7 +10,7 @@ use std::{\n use hir::{Docs, Documentation, HasSource, HirDisplay};\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n-use stdx::{split1, SepBy};\n+use stdx::{split_delim, SepBy};\n \n use crate::display::{generic_parameters, where_predicates};\n \n@@ -210,7 +210,7 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n                 // macro-generated functions are missing whitespace\n                 fn fmt_param(param: ast::Param) -> String {\n                     let text = param.syntax().text().to_string();\n-                    match split1(&text, ':') {\n+                    match split_delim(&text, ':') {\n                         Some((left, right)) => format!(\"{}: {}\", left.trim(), right.trim()),\n                         _ => text,\n                     }"}, {"sha": "221b902b2e1a98eaaae7b56502e67643173a0fdf", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/846ed08fba1331f1ca8d3512e7536c05784ae4bc/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846ed08fba1331f1ca8d3512e7536c05784ae4bc/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=846ed08fba1331f1ca8d3512e7536c05784ae4bc", "patch": "@@ -26,7 +26,7 @@ use ra_project_model::TargetKind;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextSize};\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n-use stdx::{format_to, split1};\n+use stdx::{format_to, split_delim};\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -785,7 +785,7 @@ pub fn handle_resolve_code_action(\n     let frange = FileRange { file_id, range };\n \n     let assists = snap.analysis().resolved_assists(&snap.config.assist, frange)?;\n-    let (id_string, index) = split1(&params.id, ':').unwrap();\n+    let (id_string, index) = split_delim(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];\n     assert!(assist.assist.id.0 == id_string);"}, {"sha": "100db9d5dbdb78e90bdbc86e39828cf8e98c56b5", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/846ed08fba1331f1ca8d3512e7536c05784ae4bc/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846ed08fba1331f1ca8d3512e7536c05784ae4bc/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=846ed08fba1331f1ca8d3512e7536c05784ae4bc", "patch": "@@ -124,7 +124,7 @@ pub fn replace(buf: &mut String, from: char, to: &str) {\n     *buf = buf.replace(from, to)\n }\n \n-pub fn split1(haystack: &str, delim: char) -> Option<(&str, &str)> {\n+pub fn split_delim(haystack: &str, delim: char) -> Option<(&str, &str)> {\n     let idx = haystack.find(delim)?;\n     Some((&haystack[..idx], &haystack[idx + delim.len_utf8()..]))\n }"}, {"sha": "0cd51ab3efe1aa64a9028765b9899dd8e8fe501b", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/846ed08fba1331f1ca8d3512e7536c05784ae4bc/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846ed08fba1331f1ca8d3512e7536c05784ae4bc/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=846ed08fba1331f1ca8d3512e7536c05784ae4bc", "patch": "@@ -2,7 +2,7 @@\n //! rust-analyzer database from a single string.\n \n use rustc_hash::FxHashMap;\n-use stdx::split1;\n+use stdx::split_delim;\n \n #[derive(Debug, Eq, PartialEq)]\n pub struct Fixture {\n@@ -81,22 +81,22 @@ The offending line: {:?}\"#,\n         let mut cfg_key_values = Vec::new();\n         let mut env = FxHashMap::default();\n         for component in components[1..].iter() {\n-            let (key, value) = split1(component, ':').unwrap();\n+            let (key, value) = split_delim(component, ':').unwrap();\n             match key {\n                 \"crate\" => krate = Some(value.to_string()),\n                 \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n                 \"edition\" => edition = Some(value.to_string()),\n                 \"cfg\" => {\n                     for entry in value.split(',') {\n-                        match split1(entry, '=') {\n+                        match split_delim(entry, '=') {\n                             Some((k, v)) => cfg_key_values.push((k.to_string(), v.to_string())),\n                             None => cfg_atoms.push(entry.to_string()),\n                         }\n                     }\n                 }\n                 \"env\" => {\n                     for key in value.split(',') {\n-                        if let Some((k, v)) = split1(key, '=') {\n+                        if let Some((k, v)) = split_delim(key, '=') {\n                             env.insert(k.into(), v.into());\n                         }\n                     }"}]}