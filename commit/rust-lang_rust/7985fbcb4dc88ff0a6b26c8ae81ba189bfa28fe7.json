{"sha": "7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ODVmYmNiNGRjODhmZjBhNmIyNmM4YWU4MWJhMTg5YmZhMjhmZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-09T19:57:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-09T19:57:26Z"}, "message": "auto merge of #12120 : gifnksm/rust/buffered-chars, r=alexcrichton\n\nAdd `std::io::Chars` iterator and `Buffer#chars()` method", "tree": {"sha": "0653ebabf436ef0b5a606cb41361f2f3f265f12a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0653ebabf436ef0b5a606cb41361f2f3f265f12a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7", "html_url": "https://github.com/rust-lang/rust/commit/7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2780d9dd5410a5c093f27eacfb1684ddbfcb4632", "url": "https://api.github.com/repos/rust-lang/rust/commits/2780d9dd5410a5c093f27eacfb1684ddbfcb4632", "html_url": "https://github.com/rust-lang/rust/commit/2780d9dd5410a5c093f27eacfb1684ddbfcb4632"}, {"sha": "3a610e98a292f5bc75a720aa15c3600787a5ddb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a610e98a292f5bc75a720aa15c3600787a5ddb2", "html_url": "https://github.com/rust-lang/rust/commit/3a610e98a292f5bc75a720aa15c3600787a5ddb2"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "a48403f19a4804a73a6c79e9704b473554de969e", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7", "patch": "@@ -552,6 +552,16 @@ mod test {\n         assert_eq!(reader.read_char(), Ok('\u00df'));\n     }\n \n+    #[test]\n+    fn test_chars() {\n+        let buf = [195u8, 159u8, 'a' as u8];\n+        let mut reader = BufferedReader::with_capacity(1, BufReader::new(buf));\n+        let mut it = reader.chars();\n+        assert_eq!(it.next(), Some('\u00df'));\n+        assert_eq!(it.next(), Some('a'));\n+        assert_eq!(it.next(), None);\n+    }\n+\n     #[bench]\n     fn bench_buffered_reader(bh: &mut Harness) {\n         bh.iter(|| {"}, {"sha": "1c1df691a52406fb334943eb612b532af231fc52", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=7985fbcb4dc88ff0a6b26c8ae81ba189bfa28fe7", "patch": "@@ -1001,6 +1001,30 @@ impl<'r, T: Buffer> Iterator<~str> for Lines<'r, T> {\n     }\n }\n \n+/// An iterator that reads a utf8-encoded character on each iteration,\n+/// until `.read_char()` returns `None`.\n+///\n+/// # Notes about the Iteration Protocol\n+///\n+/// The `Chars` may yield `None` and thus terminate\n+/// an iteration, but continue to yield elements if iteration\n+/// is attempted again.\n+///\n+/// # Error\n+///\n+/// This iterator will swallow all I/O errors, transforming `Err` values to\n+/// `None`. If errors need to be handled, it is recommended to use the\n+/// `read_char` method directly.\n+pub struct Chars<'r, T> {\n+    priv buffer: &'r mut T\n+}\n+\n+impl<'r, T: Buffer> Iterator<char> for Chars<'r, T> {\n+    fn next(&mut self) -> Option<char> {\n+        self.buffer.read_char().ok()\n+    }\n+}\n+\n /// A Buffer is a type of reader which has some form of internal buffering to\n /// allow certain kinds of reading operations to be more optimized than others.\n /// This type extends the `Reader` trait with a few methods that are not\n@@ -1146,6 +1170,17 @@ pub trait Buffer: Reader {\n             None => Err(standard_error(InvalidInput))\n         }\n     }\n+\n+    /// Create an iterator that reads a utf8-encoded character on each iteration until EOF.\n+    ///\n+    /// # Error\n+    ///\n+    /// This iterator will transform all error values to `None`, discarding the\n+    /// cause of the error. If this is undesirable, it is recommended to call\n+    /// `read_char` directly.\n+    fn chars<'r>(&'r mut self) -> Chars<'r, Self> {\n+        Chars { buffer: self }\n+    }\n }\n \n pub enum SeekStyle {"}]}