{"sha": "8767b00d67a561af5a4e97d4ccbc8f53f931df2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NjdiMDBkNjdhNTYxYWY1YTRlOTdkNGNjYmM4ZjUzZjkzMWRmMmE=", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-08-26T18:46:00Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-08-26T18:46:00Z"}, "message": "Formatting", "tree": {"sha": "6516fb5eb2aad3f384dd96af329c3e9569fb9fea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6516fb5eb2aad3f384dd96af329c3e9569fb9fea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8767b00d67a561af5a4e97d4ccbc8f53f931df2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8767b00d67a561af5a4e97d4ccbc8f53f931df2a", "html_url": "https://github.com/rust-lang/rust/commit/8767b00d67a561af5a4e97d4ccbc8f53f931df2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8767b00d67a561af5a4e97d4ccbc8f53f931df2a/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce37f0a35559fb5396881f3d9a547f161b1e822d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce37f0a35559fb5396881f3d9a547f161b1e822d", "html_url": "https://github.com/rust-lang/rust/commit/ce37f0a35559fb5396881f3d9a547f161b1e822d"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "f5768198f34667ef7135e01b04c4d825c836c67a", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8767b00d67a561af5a4e97d4ccbc8f53f931df2a/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8767b00d67a561af5a4e97d4ccbc8f53f931df2a/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=8767b00d67a561af5a4e97d4ccbc8f53f931df2a", "patch": "@@ -274,7 +274,7 @@ fn sparse_intersect<T: Idx>(\n // Optimization of dense/sparse intersection. The resulting set is\n // guaranteed to be at most the size of the sparse set, and hence can be\n // represented as a sparse set. Therefore the sparse set is copied and filtered,\n-// then returned as the new set. \n+// then returned as the new set.\n fn dense_sparse_intersect<T: Idx>(\n     dense: &BitSet<T>,\n     sparse: &SparseBitSet<T>,\n@@ -312,7 +312,7 @@ impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {\n             HybridBitSet::Sparse(sparse) => {\n                 let (updated, changed) = dense_sparse_intersect(self, sparse);\n \n-                // We can't directly assign the BitSet to the SparseBitSet, and \n+                // We can't directly assign the BitSet to the SparseBitSet, and\n                 // doing `*self = updated.to_dense()` would cause a drop / reallocation. Instead,\n                 // the BitSet is cleared and `updated` is copied into `self`.\n                 self.clear();"}]}