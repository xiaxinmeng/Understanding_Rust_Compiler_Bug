{"sha": "32b1d1fc157f71ed2f10b60fe28abe087a743618", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYjFkMWZjMTU3ZjcxZWQyZjEwYjYwZmUyOGFiZTA4N2E3NDM2MTg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-10-06T05:35:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-06T05:35:04Z"}, "message": "Merge pull request #3270 from rust-lang-nursery/rustup\n\nRustup for https://github.com/rust-lang/rust/pull/54741", "tree": {"sha": "a03144d8facf8a7cec24ea418fc86016eb3945e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a03144d8facf8a7cec24ea418fc86016eb3945e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32b1d1fc157f71ed2f10b60fe28abe087a743618", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbuEmICRBK7hj4Ov3rIwAAdHIIAK4ZhncXHX1DNlL2N6Ni2MMu\nqUCl+mib7QWW4lGu+FUOKjEnYRWyqVtRqfHwTEO7ihA9Atp/RCzj0gUVE5rUa9s+\ncz8Pbb97ZuCQfYXEmowQrK+RbWtHC9A6mw0qsrWwbvhoLgkKpOPNxD3hamzi1biD\n9sgVVMRZTHTDXWazvhCe9SaIeCh9raQXN/RXHaKrKb8cCIGDYZedM/RDEPbcERvX\nqaPf5wGuUuHxcg8CP3JR1wZcE0D0aZBUjuwyg/v6NJ430pujwTsdE+A2b0TPl0TB\nV0NFy/saJkWP09+JG88+iIg5cH6Vs5E2J3b59cfQ5c2lHTXcFEMbPbc2D0BozzU=\n=SGOX\n-----END PGP SIGNATURE-----\n", "payload": "tree a03144d8facf8a7cec24ea418fc86016eb3945e0\nparent cbde8201c5f5d56c3bea9aa328a61f71a805138f\nparent 53d41e5c504b8dd535c25aaf2f0008fa525cbb9d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1538804104 -0700\ncommitter GitHub <noreply@github.com> 1538804104 -0700\n\nMerge pull request #3270 from rust-lang-nursery/rustup\n\nRustup for https://github.com/rust-lang/rust/pull/54741"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32b1d1fc157f71ed2f10b60fe28abe087a743618", "html_url": "https://github.com/rust-lang/rust/commit/32b1d1fc157f71ed2f10b60fe28abe087a743618", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32b1d1fc157f71ed2f10b60fe28abe087a743618/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbde8201c5f5d56c3bea9aa328a61f71a805138f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbde8201c5f5d56c3bea9aa328a61f71a805138f", "html_url": "https://github.com/rust-lang/rust/commit/cbde8201c5f5d56c3bea9aa328a61f71a805138f"}, {"sha": "53d41e5c504b8dd535c25aaf2f0008fa525cbb9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d41e5c504b8dd535c25aaf2f0008fa525cbb9d", "html_url": "https://github.com/rust-lang/rust/commit/53d41e5c504b8dd535c25aaf2f0008fa525cbb9d"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "dbd433bc909b58fdb49aec7238b0f65da8b14ed1", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32b1d1fc157f71ed2f10b60fe28abe087a743618/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32b1d1fc157f71ed2f10b60fe28abe087a743618/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=32b1d1fc157f71ed2f10b60fe28abe087a743618", "patch": "@@ -344,23 +344,20 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 self.record(&None);\n             },\n             TyKind::Path(ref path) => {\n-                if let QPath::Resolved(_, ref path) = *path {\n-                    if let Def::Existential(def_id) = path.def {\n-                        let node_id = self.cx.tcx.hir.as_local_node_id(def_id).unwrap();\n-                        if let ItemKind::Existential(ref exist_ty) = self.cx.tcx.hir.expect_item(node_id).node {\n-                            for bound in &exist_ty.bounds {\n-                                if let GenericBound::Outlives(_) = *bound {\n-                                    self.record(&None);\n-                                }\n-                            }\n-                        } else {\n-                            unreachable!()\n+\n+                self.collect_anonymous_lifetimes(path, ty);\n+            }\n+            TyKind::Def(item, _) => {\n+                if let ItemKind::Existential(ref exist_ty) = self.cx.tcx.hir.expect_item(item.id).node {\n+                    for bound in &exist_ty.bounds {\n+                        if let GenericBound::Outlives(_) = *bound {\n+                            self.record(&None);\n                         }\n-                        walk_ty(self, ty);\n-                        return;\n                     }\n+                } else {\n+                    unreachable!()\n                 }\n-                self.collect_anonymous_lifetimes(path, ty);\n+                walk_ty(self, ty);\n             }\n             TyKind::TraitObject(ref bounds, ref lt) => {\n                 if !lt.is_elided() {"}]}