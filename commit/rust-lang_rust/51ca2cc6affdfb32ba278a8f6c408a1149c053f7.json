{"sha": "51ca2cc6affdfb32ba278a8f6c408a1149c053f7", "node_id": "C_kwDOAAsO6NoAKDUxY2EyY2M2YWZmZGZiMzJiYTI3OGE4ZjZjNDA4YTExNDljMDUzZjc", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-04T05:05:31Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-04T05:05:31Z"}, "message": "Remove single-use `GenericParamDef::get_type` function\n\nRationale:\n\n* The name was confusing.\n\n* It was only used in one place.\n\n* That place didn't actually need all the functionality of `get_type`;\n  rather, removing `get_type` makes that code clearer.", "tree": {"sha": "9c066419e6e1ca51ad2b12d0c0e7c2c669757627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c066419e6e1ca51ad2b12d0c0e7c2c669757627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51ca2cc6affdfb32ba278a8f6c408a1149c053f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51ca2cc6affdfb32ba278a8f6c408a1149c053f7", "html_url": "https://github.com/rust-lang/rust/commit/51ca2cc6affdfb32ba278a8f6c408a1149c053f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51ca2cc6affdfb32ba278a8f6c408a1149c053f7/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a97f17535009acaa3891a8295b6534b1f022c472", "url": "https://api.github.com/repos/rust-lang/rust/commits/a97f17535009acaa3891a8295b6534b1f022c472", "html_url": "https://github.com/rust-lang/rust/commit/a97f17535009acaa3891a8295b6534b1f022c472"}], "stats": {"total": 41, "additions": 13, "deletions": 28}, "files": [{"sha": "1fe4aa9023ea310193eb6f2494b2d8f47b64122e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/51ca2cc6affdfb32ba278a8f6c408a1149c053f7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ca2cc6affdfb32ba278a8f6c408a1149c053f7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=51ca2cc6affdfb32ba278a8f6c408a1149c053f7", "patch": "@@ -1244,17 +1244,6 @@ impl GenericParamDefKind {\n     crate fn is_type(&self) -> bool {\n         matches!(self, GenericParamDefKind::Type { .. })\n     }\n-\n-    // FIXME(eddyb) this either returns the default of a type parameter, or the\n-    // type of a `const` parameter. It seems that the intention is to *visit*\n-    // any embedded types, but `get_type` seems to be the wrong name for that.\n-    crate fn get_type(&self) -> Option<Type> {\n-        match self {\n-            GenericParamDefKind::Type { default, .. } => default.as_deref().cloned(),\n-            GenericParamDefKind::Const { ty, .. } => Some((&**ty).clone()),\n-            GenericParamDefKind::Lifetime { .. } => None,\n-        }\n-    }\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -1279,10 +1268,6 @@ impl GenericParamDef {\n         self.kind.is_type()\n     }\n \n-    crate fn get_type(&self) -> Option<Type> {\n-        self.kind.get_type()\n-    }\n-\n     crate fn get_bounds(&self) -> Option<&[GenericBound]> {\n         match self.kind {\n             GenericParamDefKind::Type { ref bounds, .. } => Some(bounds),"}, {"sha": "2f7214e958ea7d2169b64afb03fad5928c0060d1", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/51ca2cc6affdfb32ba278a8f6c408a1149c053f7/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ca2cc6affdfb32ba278a8f6c408a1149c053f7/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=51ca2cc6affdfb32ba278a8f6c408a1149c053f7", "patch": "@@ -347,19 +347,19 @@ crate fn get_real_types<'tcx>(\n             let bounds = where_pred.get_bounds().unwrap_or_else(|| &[]);\n             for bound in bounds.iter() {\n                 if let GenericBound::TraitBound(poly_trait, _) = bound {\n-                    for x in poly_trait.generic_params.iter() {\n-                        if !x.is_type() {\n-                            continue;\n-                        }\n-                        if let Some(ty) = x.get_type() {\n-                            get_real_types(\n-                                generics,\n-                                &ty,\n-                                tcx,\n-                                recurse + 1,\n-                                &mut ty_generics,\n-                                cache,\n-                            );\n+                    for param_def in poly_trait.generic_params.iter() {\n+                        match &param_def.kind {\n+                            clean::GenericParamDefKind::Type { default: Some(ty), .. } => {\n+                                get_real_types(\n+                                    generics,\n+                                    ty,\n+                                    tcx,\n+                                    recurse + 1,\n+                                    &mut ty_generics,\n+                                    cache,\n+                                )\n+                            }\n+                            _ => {}\n                         }\n                     }\n                 }"}]}