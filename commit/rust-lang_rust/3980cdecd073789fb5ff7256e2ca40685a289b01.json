{"sha": "3980cdecd073789fb5ff7256e2ca40685a289b01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ODBjZGVjZDA3Mzc4OWZiNWZmNzI1NmUyY2E0MDY4NWEyODliMDE=", "commit": {"author": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2014-12-02T22:06:59Z"}, "committer": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2014-12-04T03:19:55Z"}, "message": "libstd: explicitly disallow io::fs::File to open a directory.\n\nOn *BSD systems, we can open(2) a directory and directly read(2) from\nit due to an old tradition.  We should avoid doing so by explicitly\ncalling fstat(2) to check the type of the opened file.\n\nOpening a directory as a module file can't always be avoided.\nEven when there's no \"path\" attribute trick involved, there can always\nbe a *directory* named \"my_module.rs\".\n\nFix #12460\n\nSigned-off-by: NODA, Kai <nodakai@gmail.com>", "tree": {"sha": "007c1af0e17e6c4bd21b18034d87d9e24a9c58af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/007c1af0e17e6c4bd21b18034d87d9e24a9c58af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3980cdecd073789fb5ff7256e2ca40685a289b01", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3980cdecd073789fb5ff7256e2ca40685a289b01", "html_url": "https://github.com/rust-lang/rust/commit/3980cdecd073789fb5ff7256e2ca40685a289b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3980cdecd073789fb5ff7256e2ca40685a289b01/comments", "author": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "805a06ca6a4f0999e13508e6271e3589f2c4c1b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/805a06ca6a4f0999e13508e6271e3589f2c4c1b2", "html_url": "https://github.com/rust-lang/rust/commit/805a06ca6a4f0999e13508e6271e3589f2c4c1b2"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "c66540e639e3c10bfb5877cbdb37b7bc70c8617c", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3980cdecd073789fb5ff7256e2ca40685a289b01/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3980cdecd073789fb5ff7256e2ca40685a289b01/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=3980cdecd073789fb5ff7256e2ca40685a289b01", "patch": "@@ -53,7 +53,8 @@\n use clone::Clone;\n use io::standard_error;\n use io::{FilePermission, Write, Open, FileAccess, FileMode, FileType};\n-use io::{IoResult, IoError, FileStat, SeekStyle, Seek, Writer, Reader};\n+use io::{IoResult, IoError, InvalidInput};\n+use io::{FileStat, SeekStyle, Seek, Writer, Reader};\n use io::{Read, Truncate, ReadWrite, Append};\n use io::UpdateIoError;\n use io;\n@@ -134,13 +135,26 @@ impl File {\n     pub fn open_mode(path: &Path,\n                      mode: FileMode,\n                      access: FileAccess) -> IoResult<File> {\n-        fs_imp::open(path, mode, access).map(|fd| {\n-            File {\n-                path: path.clone(),\n-                fd: fd,\n-                last_nread: -1\n+        fs_imp::open(path, mode, access).and_then(|fd| {\n+            // On *BSD systems, we can open a directory as a file and read from it:\n+            // fd=open(\"/tmp\", O_RDONLY); read(fd, buf, N);\n+            // due to an old tradition before the introduction of opendir(3).\n+            // We explicitly reject it because there are few use cases.\n+            if cfg!(not(any(windows, target_os = \"linux\", target_os = \"android\"))) &&\n+               try!(fd.fstat()).kind == FileType::Directory {\n+                Err(IoError {\n+                    kind: InvalidInput,\n+                    desc: \"is a directory\",\n+                    detail: None\n+                })\n+            } else {\n+                Ok(File {\n+                    path: path.clone(),\n+                    fd: fd,\n+                    last_nread: -1\n+                })\n             }\n-        }).update_err(\"couldn't open file\", |e| {\n+        }).update_err(\"couldn't open path as file\", |e| {\n             format!(\"{}; path={}; mode={}; access={}\", e, path.display(),\n                 mode_string(mode), access_string(access))\n         })\n@@ -886,7 +900,7 @@ mod test {\n         let filename = &tmpdir.join(\"file_that_does_not_exist.txt\");\n         let result = File::open_mode(filename, Open, Read);\n \n-        error!(result, \"couldn't open file\");\n+        error!(result, \"couldn't open path as file\");\n         if cfg!(unix) {\n             error!(result, \"no such file or directory\");\n         }"}, {"sha": "597366a1b35dfc8b8ad13d393f1132b56d727828", "filename": "src/test/compile-fail/issue-5806.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3980cdecd073789fb5ff7256e2ca40685a289b01/src%2Ftest%2Fcompile-fail%2Fissue-5806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3980cdecd073789fb5ff7256e2ca40685a289b01/src%2Ftest%2Fcompile-fail%2Fissue-5806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5806.rs?ref=3980cdecd073789fb5ff7256e2ca40685a289b01", "patch": "@@ -18,9 +18,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-freebsd FIXME #12460\n-\n #[path = \"../compile-fail\"]\n-mod foo; //~ ERROR: illegal operation on a directory\n+mod foo; //~ ERROR: a directory\n \n fn main() {}"}]}