{"sha": "b644f06326577e0926ddf9896fd702befc7bd43e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NDRmMDYzMjY1NzdlMDkyNmRkZjk4OTZmZDcwMmJlZmM3YmQ0M2U=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-04-27T14:42:06Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-06-02T14:23:10Z"}, "message": "Resolve EnumTagInfo FIXME", "tree": {"sha": "1cc90941ddb4c79c8da71d9cf1996f0a571a4ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cc90941ddb4c79c8da71d9cf1996f0a571a4ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b644f06326577e0926ddf9896fd702befc7bd43e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b644f06326577e0926ddf9896fd702befc7bd43e", "html_url": "https://github.com/rust-lang/rust/commit/b644f06326577e0926ddf9896fd702befc7bd43e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b644f06326577e0926ddf9896fd702befc7bd43e/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f353cbf1a145603e1f69c2aaaef171dd60ca4c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/f353cbf1a145603e1f69c2aaaef171dd60ca4c65", "html_url": "https://github.com/rust-lang/rust/commit/f353cbf1a145603e1f69c2aaaef171dd60ca4c65"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "0ab16473a54af5ab5f5ca8b4fb5ad7ef2f087e8f", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b644f06326577e0926ddf9896fd702befc7bd43e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b644f06326577e0926ddf9896fd702befc7bd43e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=b644f06326577e0926ddf9896fd702befc7bd43e", "patch": "@@ -1507,7 +1507,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     cx,\n                     self.layout,\n                     variant_info,\n-                    NoTag,\n+                    None,\n                     self_metadata,\n                     self.span,\n                 );\n@@ -1539,13 +1539,13 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 ..\n             } => {\n                 let tag_info = if fallback {\n-                    RegularTag {\n+                    Some(DirectTag {\n                         tag_field: Field::from(tag_field),\n                         tag_type_metadata: self.tag_type_metadata.unwrap(),\n-                    }\n+                    })\n                 } else {\n                     // This doesn't matter in this case.\n-                    NoTag\n+                    None\n                 };\n                 variants\n                     .iter_enumerated()\n@@ -1606,7 +1606,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         cx,\n                         variant,\n                         variant_info_for(dataful_variant),\n-                        OptimizedTag,\n+                        Some(NicheTag),\n                         self.containing_scope,\n                         self.span,\n                     );\n@@ -1681,7 +1681,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                                     cx,\n                                     variant,\n                                     variant_info,\n-                                    OptimizedTag,\n+                                    Some(NicheTag),\n                                     self_metadata,\n                                     self.span,\n                                 );\n@@ -1771,14 +1771,10 @@ impl VariantMemberDescriptionFactory<'ll, 'tcx> {\n     }\n }\n \n-// FIXME: terminology here should be aligned with `abi::TagEncoding`.\n-// `OptimizedTag` is `TagEncoding::Niche`, `RegularTag` is `TagEncoding::Direct`.\n-// `NoTag` should be removed; users should use `Option<EnumTagInfo>` instead.\n #[derive(Copy, Clone)]\n enum EnumTagInfo<'ll> {\n-    RegularTag { tag_field: Field, tag_type_metadata: &'ll DIType },\n-    OptimizedTag,\n-    NoTag,\n+    DirectTag { tag_field: Field, tag_type_metadata: &'ll DIType },\n+    NicheTag,\n }\n \n #[derive(Copy, Clone)]\n@@ -1859,7 +1855,7 @@ fn describe_enum_variant(\n     cx: &CodegenCx<'ll, 'tcx>,\n     layout: layout::TyAndLayout<'tcx>,\n     variant: VariantInfo<'_, 'tcx>,\n-    discriminant_info: EnumTagInfo<'ll>,\n+    discriminant_info: Option<EnumTagInfo<'ll>>,\n     containing_scope: &'ll DIScope,\n     span: Span,\n ) -> (&'ll DICompositeType, MemberDescriptionFactory<'ll, 'tcx>) {\n@@ -1882,7 +1878,7 @@ fn describe_enum_variant(\n     let (offsets, args) = if use_enum_fallback(cx) {\n         // If this is not a univariant enum, there is also the discriminant field.\n         let (discr_offset, discr_arg) = match discriminant_info {\n-            RegularTag { tag_field, .. } => {\n+            Some(DirectTag { tag_field, .. }) => {\n                 // We have the layout of an enum variant, we need the layout of the outer enum\n                 let enum_layout = cx.layout_of(layout.ty);\n                 let offset = enum_layout.fields.offset(tag_field.as_usize());\n@@ -1919,7 +1915,7 @@ fn describe_enum_variant(\n         offsets,\n         args,\n         tag_type_metadata: match discriminant_info {\n-            RegularTag { tag_type_metadata, .. } => Some(tag_type_metadata),\n+            Some(DirectTag { tag_type_metadata, .. }) => Some(tag_type_metadata),\n             _ => None,\n         },\n         span,"}]}