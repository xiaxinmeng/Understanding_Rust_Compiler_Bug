{"sha": "d5df1e0b0f99e7dad81c573cc2beb03d3023d433", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZGYxZTBiMGY5OWU3ZGFkODFjNTczY2MyYmViMDNkMzAyM2Q0MzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-09T08:11:21Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:38Z"}, "message": "Adjust lowering of Tuple/TupleStruct patterns.\n- Make sure we ban duplicate '..'.\n- Avoid ICEs on PatKind::Rest that doesn't generate HIR nodes.", "tree": {"sha": "80e3ebbf0d4091348e9c33f29cb01f49950ce6c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80e3ebbf0d4091348e9c33f29cb01f49950ce6c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5df1e0b0f99e7dad81c573cc2beb03d3023d433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5df1e0b0f99e7dad81c573cc2beb03d3023d433", "html_url": "https://github.com/rust-lang/rust/commit/d5df1e0b0f99e7dad81c573cc2beb03d3023d433", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5df1e0b0f99e7dad81c573cc2beb03d3023d433/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ba5f49f6fad86b813c2b086538586c93127bfff", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba5f49f6fad86b813c2b086538586c93127bfff", "html_url": "https://github.com/rust-lang/rust/commit/8ba5f49f6fad86b813c2b086538586c93127bfff"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "b552047f59e1dca0f070694e643b6ed86f93a540", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d5df1e0b0f99e7dad81c573cc2beb03d3023d433/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5df1e0b0f99e7dad81c573cc2beb03d3023d433/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d5df1e0b0f99e7dad81c573cc2beb03d3023d433", "patch": "@@ -58,6 +58,7 @@ use std::mem;\n use smallvec::SmallVec;\n use syntax::attr;\n use syntax::ast;\n+use syntax::ptr::P as AstP;\n use syntax::ast::*;\n use syntax::errors;\n use syntax::ext::hygiene::ExpnId;\n@@ -468,7 +469,7 @@ impl<'a> LoweringContext<'a> {\n             fn visit_pat(&mut self, p: &'tcx Pat) {\n                 match p.node {\n                     // Doesn't generate a HIR node\n-                    PatKind::Paren(..) => {},\n+                    PatKind::Paren(..) | PatKind::Rest => {},\n                     _ => {\n                         if let Some(owner) = self.hir_id_owner {\n                             self.lctx.lower_node_id_with_owner(p.id, owner);\n@@ -4198,19 +4199,16 @@ impl<'a> LoweringContext<'a> {\n                 }\n             }\n             PatKind::Lit(ref e) => hir::PatKind::Lit(P(self.lower_expr(e))),\n-            PatKind::TupleStruct(ref path, ref pats, ddpos) => {\n+            PatKind::TupleStruct(ref path, ref pats) => {\n                 let qpath = self.lower_qpath(\n                     p.id,\n                     &None,\n                     path,\n                     ParamMode::Optional,\n                     ImplTraitContext::disallowed(),\n                 );\n-                hir::PatKind::TupleStruct(\n-                    qpath,\n-                    pats.iter().map(|x| self.lower_pat(x)).collect(),\n-                    ddpos,\n-                )\n+                let (pats, ddpos) = self.lower_pat_tuple(&*pats, \"tuple struct\");\n+                hir::PatKind::TupleStruct(qpath, pats, ddpos)\n             }\n             PatKind::Path(ref qself, ref path) => {\n                 let qpath = self.lower_qpath(\n@@ -4247,8 +4245,9 @@ impl<'a> LoweringContext<'a> {\n                     .collect();\n                 hir::PatKind::Struct(qpath, fs, etc)\n             }\n-            PatKind::Tuple(ref elts, ddpos) => {\n-                hir::PatKind::Tuple(elts.iter().map(|x| self.lower_pat(x)).collect(), ddpos)\n+            PatKind::Tuple(ref pats) => {\n+                let (pats, ddpos) = self.lower_pat_tuple(&*pats, \"tuple\");\n+                hir::PatKind::Tuple(pats, ddpos)\n             }\n             PatKind::Box(ref inner) => hir::PatKind::Box(self.lower_pat(inner)),\n             PatKind::Ref(ref inner, mutbl) => {\n@@ -4279,6 +4278,46 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n+    fn lower_pat_tuple(\n+        &mut self,\n+        pats: &[AstP<Pat>],\n+        ctx: &str,\n+    ) -> (HirVec<P<hir::Pat>>, Option<usize>) {\n+        let mut elems = Vec::with_capacity(pats.len());\n+        let mut rest = None;\n+\n+        let mut iter = pats.iter().enumerate();\n+        while let Some((idx, pat)) = iter.next() {\n+            // Interpret the first `..` pattern as a subtuple pattern.\n+            if pat.is_rest() {\n+                rest = Some((idx, pat.span));\n+                break;\n+            }\n+            // It was not a subslice pattern so lower it normally.\n+            elems.push(self.lower_pat(pat));\n+        }\n+\n+        while let Some((_, pat)) = iter.next() {\n+            // There was a previous subtuple pattern; make sure we don't allow more.\n+            if pat.is_rest() {\n+                self.ban_extra_rest_pat(pat.span, rest.unwrap().1, ctx);\n+            } else {\n+                elems.push(self.lower_pat(pat));\n+            }\n+        }\n+\n+        (elems.into(), rest.map(|(ddpos, _)| ddpos))\n+    }\n+\n+    /// Emit a friendly error for extra `..` patterns in a tuple/tuple struct/slice pattern.\n+    fn ban_extra_rest_pat(&self, sp: Span, prev_sp: Span, ctx: &str) {\n+        self.diagnostic()\n+            .struct_span_err(sp, &format!(\"`..` can only be used once per {} pattern\", ctx))\n+            .span_label(sp, &format!(\"can only be used once per {} pattern\", ctx))\n+            .span_label(prev_sp, \"previously used here\")\n+            .emit();\n+    }\n+\n     /// Used to ban the `..` pattern in places it shouldn't be semantically.\n     fn ban_illegal_rest_pat(&self, sp: Span) -> hir::PatKind {\n         self.diagnostic()"}]}