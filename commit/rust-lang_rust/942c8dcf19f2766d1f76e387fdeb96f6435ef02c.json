{"sha": "942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MmM4ZGNmMTlmMjc2NmQxZjc2ZTM4N2ZkZWI5NmY2NDM1ZWYwMmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-29T18:10:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-30T05:00:40Z"}, "message": "rustc: Make the `export_map` of TyCtxt private\n\nThis map, like `trait_map`, is calculated in resolve, but we want to be sure to\ntrack it for incremental compliation. Hide it behind a query to get more\nrefactorings later.", "tree": {"sha": "2eb29dd9644b6a5f5dac1578370998a25c3b94fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eb29dd9644b6a5f5dac1578370998a25c3b94fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "html_url": "https://github.com/rust-lang/rust/commit/942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "url": "https://api.github.com/repos/rust-lang/rust/commits/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271", "html_url": "https://github.com/rust-lang/rust/commit/32d35e6e9fb9a5f1cbb51fdff6aed9398c4ec271"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "e78a8f1d32acf0caf777418b0085e9e97be02528", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "patch": "@@ -529,6 +529,7 @@ define_dep_nodes!( <'tcx>\n     [] ExternCrate(DefId),\n     [] LintLevels,\n     [] InScopeTraits(HirId),\n+    [] ModuleExports(HirId),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "ea8a92e4d4aed9b5cf84435334e7ae6386c62151", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "patch": "@@ -15,7 +15,7 @@ use errors::DiagnosticBuilder;\n use session::Session;\n use middle;\n use hir::{TraitCandidate, HirId};\n-use hir::def::{Def, ExportMap};\n+use hir::def::{Def, Export};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::DefPathHash;\n@@ -822,7 +822,7 @@ pub struct GlobalCtxt<'tcx> {\n     trait_map: FxHashMap<HirId, Rc<Vec<TraitCandidate>>>,\n \n     /// Export map produced by name resolution.\n-    pub export_map: ExportMap,\n+    export_map: FxHashMap<HirId, Rc<Vec<Export>>>,\n \n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n@@ -1081,7 +1081,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             trait_map: resolutions.trait_map.into_iter().map(|(k, v)| {\n                 (hir.node_to_hir_id(k), Rc::new(v))\n             }).collect(),\n-            export_map: resolutions.export_map,\n+            export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n+                (hir.node_to_hir_id(k), Rc::new(v))\n+            }).collect(),\n             hir,\n             def_path_hash_to_def_id,\n             maps: maps::Maps::new(providers),\n@@ -2006,6 +2008,13 @@ fn in_scope_traits<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: HirId)\n     tcx.gcx.trait_map.get(&id).cloned()\n }\n \n+fn module_exports<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: HirId)\n+    -> Option<Rc<Vec<Export>>>\n+{\n+    tcx.gcx.export_map.get(&id).cloned()\n+}\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     providers.in_scope_traits = in_scope_traits;\n+    providers.module_exports = module_exports;\n }"}, {"sha": "1d1b95e270f5f86abee02cc11d15d12bf4db5bdf", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "patch": "@@ -11,7 +11,7 @@\n use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n use errors::{Diagnostic, DiagnosticBuilder};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use hir::def::Def;\n+use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, HirId};\n use lint;\n use middle::const_val;\n@@ -555,6 +555,12 @@ impl<'tcx> QueryDescription for queries::in_scope_traits<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::module_exports<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: HirId) -> String {\n+        format!(\"fetching the exported items for a module\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1125,6 +1131,7 @@ define_maps! { <'tcx>\n     [] lint_levels: lint_levels(CrateNum) -> Rc<lint::LintLevelMap>,\n \n     [] in_scope_traits: InScopeTraits(HirId) -> Option<Rc<Vec<TraitCandidate>>>,\n+    [] module_exports: ModuleExports(HirId) -> Option<Rc<Vec<Export>>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "62aa86995d0aff6d43e422426acdfc0b6f74bc05", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "patch": "@@ -548,12 +548,13 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                                                                  &hir::Visibility)>)\n                            -> Entry<'tcx> {\n         let tcx = self.tcx;\n+        let hir_id = tcx.hir.node_to_hir_id(id);\n         let def_id = tcx.hir.local_def_id(id);\n         debug!(\"IsolatedEncoder::encode_info_for_mod({:?})\", def_id);\n \n         let data = ModData {\n-            reexports: match tcx.export_map.get(&id) {\n-                Some(exports) if *vis == hir::Public => {\n+            reexports: match tcx.module_exports(hir_id) {\n+                Some(ref exports) if *vis == hir::Public => {\n                     self.lazy_seq_from_slice(exports.as_slice())\n                 }\n                 _ => LazySeq::empty(),"}, {"sha": "e19240860afadba06fc3b550f2023a63f1f6981d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "patch": "@@ -325,8 +325,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n         // This code is here instead of in visit_item so that the\n         // crate module gets processed as well.\n         if self.prev_level.is_some() {\n-            if let Some(exports) = self.tcx.export_map.get(&id) {\n-                for export in exports {\n+            let hir_id = self.tcx.hir.node_to_hir_id(id);\n+            if let Some(exports) = self.tcx.module_exports(hir_id) {\n+                for export in exports.iter() {\n                     if let Some(node_id) = self.tcx.hir.as_local_node_id(export.def.def_id()) {\n                         self.update(node_id, Some(AccessLevel::Exported));\n                     }"}, {"sha": "a7f36c87846d2cc371299ea0535d6baca0f6c35d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "patch": "@@ -662,6 +662,9 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     fn assemble_extension_candidates_for_traits_in_scope(&mut self,\n                                                          expr_id: ast::NodeId)\n                                                          -> Result<(), MethodError<'tcx>> {\n+        if expr_id == ast::DUMMY_NODE_ID {\n+            return Ok(())\n+        }\n         let mut duplicates = FxHashSet();\n         let expr_hir_id = self.tcx.hir.node_to_hir_id(expr_id);\n         let opt_applicable_traits = self.tcx.in_scope_traits(expr_hir_id);"}, {"sha": "1f33cd7765164460d5e53692db597bb27e61d7e3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942c8dcf19f2766d1f76e387fdeb96f6435ef02c/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=942c8dcf19f2766d1f76e387fdeb96f6435ef02c", "patch": "@@ -199,8 +199,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             self.visit_item(item, None, &mut om);\n         }\n         self.inside_public_path = orig_inside_public_path;\n-        if let Some(exports) = self.cx.tcx.export_map.get(&id) {\n-            for export in exports {\n+        let hir_id = self.cx.tcx.hir.node_to_hir_id(id);\n+        if let Some(exports) = self.cx.tcx.module_exports(hir_id) {\n+            for export in exports.iter() {\n                 if let Def::Macro(def_id, ..) = export.def {\n                     if def_id.krate == LOCAL_CRATE || self.reexported_macros.contains(&def_id) {\n                         continue // These are `krate.exported_macros`, handled in `self.visit()`."}]}