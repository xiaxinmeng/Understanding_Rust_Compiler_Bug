{"sha": "346108202d8fb663343c1d48740b0763aef5ca66", "node_id": "C_kwDOAAsO6NoAKDM0NjEwODIwMmQ4ZmI2NjMzNDNjMWQ0ODc0MGIwNzYzYWVmNWNhNjY", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2022-01-23T18:34:26Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2022-03-02T15:45:25Z"}, "message": "rename ErrorReported -> ErrorGuaranteed", "tree": {"sha": "9318c2e2854b100af374985def0e1eb3dd0c21cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9318c2e2854b100af374985def0e1eb3dd0c21cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/346108202d8fb663343c1d48740b0763aef5ca66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/346108202d8fb663343c1d48740b0763aef5ca66", "html_url": "https://github.com/rust-lang/rust/commit/346108202d8fb663343c1d48740b0763aef5ca66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/346108202d8fb663343c1d48740b0763aef5ca66/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69bd5324ca06078231b2d55d444ca592e7898179", "url": "https://api.github.com/repos/rust-lang/rust/commits/69bd5324ca06078231b2d55d444ca592e7898179", "html_url": "https://github.com/rust-lang/rust/commit/69bd5324ca06078231b2d55d444ca592e7898179"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "66adc1a2ce96db56d7f00affe884d53db3ddf1af", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346108202d8fb663343c1d48740b0763aef5ca66/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346108202d8fb663343c1d48740b0763aef5ca66/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=346108202d8fb663343c1d48740b0763aef5ca66", "patch": "@@ -1,7 +1,7 @@\n //! Handling of `static`s, `const`s and promoted allocations\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n@@ -54,7 +54,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n                 {\n                     all_constants_ok = false;\n                     match err {\n-                        ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n+                        ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n                             fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n                         }\n                         ErrorHandled::TooGeneric => {"}, {"sha": "331e3e8f5dfc3c303eda9fc3ee76de4c821997c0", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346108202d8fb663343c1d48740b0763aef5ca66/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346108202d8fb663343c1d48740b0763aef5ca66/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=346108202d8fb663343c1d48740b0763aef5ca66", "patch": "@@ -29,7 +29,7 @@ use std::cell::Cell;\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_session::config::OutputFilenames;\n@@ -209,7 +209,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n         _outputs: &OutputFilenames,\n-    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorGuaranteed> {\n         Ok(*ongoing_codegen\n             .downcast::<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)>()\n             .unwrap())\n@@ -220,7 +220,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         sess: &Session,\n         codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n-    ) -> Result<(), ErrorReported> {\n+    ) -> Result<(), ErrorGuaranteed> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n         link_binary::<crate::archive::ArArchiveBuilder<'_>>(sess, &codegen_results, outputs)"}]}