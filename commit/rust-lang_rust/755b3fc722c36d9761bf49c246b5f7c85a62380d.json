{"sha": "755b3fc722c36d9761bf49c246b5f7c85a62380d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NWIzZmM3MjJjMzZkOTc2MWJmNDljMjQ2YjVmN2M4NWE2MjM4MGQ=", "commit": {"author": {"name": "Miguel Ojeda", "email": "ojeda@kernel.org", "date": "2021-02-18T15:15:24Z"}, "committer": {"name": "Miguel Ojeda", "email": "ojeda@kernel.org", "date": "2021-02-19T01:32:45Z"}, "message": "rustdoc: Support argument files\n\nFactors out the `rustc_driver` logic that handles argument files\nso that rustdoc supports them as well, e.g.:\n\n    rustdoc @argfile\n\nThis is needed to be able to generate docs for projects that\nalready use argument files when compiling them, e.g. projects\nthat pass a huge number of `--cfg` arguments.\n\nThe feature was stabilized for `rustc` in #66172.\n\nSigned-off-by: Miguel Ojeda <ojeda@kernel.org>", "tree": {"sha": "57765f30824aab704ff8d465c53d8fa2be91bc7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57765f30824aab704ff8d465c53d8fa2be91bc7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/755b3fc722c36d9761bf49c246b5f7c85a62380d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/755b3fc722c36d9761bf49c246b5f7c85a62380d", "html_url": "https://github.com/rust-lang/rust/commit/755b3fc722c36d9761bf49c246b5f7c85a62380d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/755b3fc722c36d9761bf49c246b5f7c85a62380d/comments", "author": {"login": "ojeda", "id": 1054456, "node_id": "MDQ6VXNlcjEwNTQ0NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1054456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojeda", "html_url": "https://github.com/ojeda", "followers_url": "https://api.github.com/users/ojeda/followers", "following_url": "https://api.github.com/users/ojeda/following{/other_user}", "gists_url": "https://api.github.com/users/ojeda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojeda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojeda/subscriptions", "organizations_url": "https://api.github.com/users/ojeda/orgs", "repos_url": "https://api.github.com/users/ojeda/repos", "events_url": "https://api.github.com/users/ojeda/events{/privacy}", "received_events_url": "https://api.github.com/users/ojeda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ojeda", "id": 1054456, "node_id": "MDQ6VXNlcjEwNTQ0NTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1054456?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ojeda", "html_url": "https://github.com/ojeda", "followers_url": "https://api.github.com/users/ojeda/followers", "following_url": "https://api.github.com/users/ojeda/following{/other_user}", "gists_url": "https://api.github.com/users/ojeda/gists{/gist_id}", "starred_url": "https://api.github.com/users/ojeda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ojeda/subscriptions", "organizations_url": "https://api.github.com/users/ojeda/orgs", "repos_url": "https://api.github.com/users/ojeda/repos", "events_url": "https://api.github.com/users/ojeda/events{/privacy}", "received_events_url": "https://api.github.com/users/ojeda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b64d97beebb09325b5587abed39f4f1621026f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b64d97beebb09325b5587abed39f4f1621026f", "html_url": "https://github.com/rust-lang/rust/commit/c0b64d97beebb09325b5587abed39f4f1621026f"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "01338359f1af1d063ddc3d16130fc221a31657f4", "filename": "compiler/rustc_driver/src/args.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/compiler%2Frustc_driver%2Fsrc%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/compiler%2Frustc_driver%2Fsrc%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fargs.rs?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n use std::fs;\n use std::io;\n \n-pub fn arg_expand(arg: String) -> Result<Vec<String>, Error> {\n+fn arg_expand(arg: String) -> Result<Vec<String>, Error> {\n     if let Some(path) = arg.strip_prefix('@') {\n         let file = match fs::read_to_string(path) {\n             Ok(file) => file,\n@@ -18,6 +18,20 @@ pub fn arg_expand(arg: String) -> Result<Vec<String>, Error> {\n     }\n }\n \n+pub fn arg_expand_all(at_args: &[String]) -> Vec<String> {\n+    let mut args = Vec::new();\n+    for arg in at_args {\n+        match arg_expand(arg.clone()) {\n+            Ok(arg) => args.extend(arg),\n+            Err(err) => rustc_session::early_error(\n+                rustc_session::config::ErrorOutputType::default(),\n+                &format!(\"Failed to load argument file: {}\", err),\n+            ),\n+        }\n+    }\n+    args\n+}\n+\n #[derive(Debug)]\n pub enum Error {\n     Utf8Error(Option<String>),"}, {"sha": "2aa20dc1e643689850fecf2a226ffc181c229161", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -55,7 +55,7 @@ use std::process::{self, Command, Stdio};\n use std::str;\n use std::time::Instant;\n \n-mod args;\n+pub mod args;\n pub mod pretty;\n \n /// Exit status code used for successful compilation and help output.\n@@ -188,16 +188,8 @@ fn run_compiler(\n         Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n     >,\n ) -> interface::Result<()> {\n-    let mut args = Vec::new();\n-    for arg in at_args {\n-        match args::arg_expand(arg.clone()) {\n-            Ok(arg) => args.extend(arg),\n-            Err(err) => early_error(\n-                ErrorOutputType::default(),\n-                &format!(\"Failed to load argument file: {}\", err),\n-            ),\n-        }\n-    }\n+    let args = args::arg_expand_all(at_args);\n+\n     let diagnostic_output = emitter.map_or(DiagnosticOutput::Default, DiagnosticOutput::Raw);\n     let matches = match handle_options(&args) {\n         Some(matches) => matches,"}, {"sha": "0302fbecb6ed09ca0ba63a2771cad70715c16a6d", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -422,3 +422,10 @@ $ rustdoc src/lib.rs --crate-version 1.3.37\n When `rustdoc` receives this flag, it will print an extra \"Version (version)\" into the sidebar of\n the crate root's docs. You can use this flag to differentiate between different versions of your\n library's documentation.\n+\n+## `@path`: load command-line flags from a path\n+\n+If you specify `@path` on the command-line, then it will open `path` and read\n+command line options from it. These options are one per line; a blank line indicates\n+an empty option. The file can use Unix or Windows style line endings, and must be\n+encoded as UTF-8."}, {"sha": "5394d23e1c53540dc8359644ff1d70152e359daf", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -432,13 +432,16 @@ fn usage(argv0: &str) {\n         (option.apply)(&mut options);\n     }\n     println!(\"{}\", options.usage(&format!(\"{} [options] <input>\", argv0)));\n+    println!(\"    @path               Read newline separated options from `path`\\n\");\n     println!(\"More information available at https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html\")\n }\n \n /// A result type used by several functions under `main()`.\n type MainResult = Result<(), ErrorReported>;\n \n-fn main_args(args: &[String]) -> MainResult {\n+fn main_args(at_args: &[String]) -> MainResult {\n+    let args = rustc_driver::args::arg_expand_all(at_args);\n+\n     let mut options = getopts::Options::new();\n     for option in opts() {\n         (option.apply)(&mut options);"}, {"sha": "c070b0c2400d84bf703e9c647d2b988c60fca366", "filename": "src/test/rustdoc-ui/commandline-argfile-badutf8.args", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-badutf8.args", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-badutf8.args", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-badutf8.args?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -0,0 +1,2 @@\n+--cfg\n+unbroken\ufffd\n\\ No newline at end of file"}, {"sha": "e2984e3ca97acb9ce9a5a665d2a1995ef8d42269", "filename": "src/test/rustdoc-ui/commandline-argfile-badutf8.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-badutf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-badutf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-badutf8.rs?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -0,0 +1,12 @@\n+// Check to see if we can get parameters from an @argsfile file\n+//\n+// compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile-badutf8.args\n+\n+#[cfg(not(cmdline_set))]\n+compile_error!(\"cmdline_set not set\");\n+\n+#[cfg(not(unbroken))]\n+compile_error!(\"unbroken not set\");\n+\n+fn main() {\n+}"}, {"sha": "9af6fc0a518dfd05e76c56920bbd17ff3359e18e", "filename": "src/test/rustdoc-ui/commandline-argfile-badutf8.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-badutf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-badutf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-badutf8.stderr?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -0,0 +1,2 @@\n+error: Failed to load argument file: Utf8 error in $DIR/commandline-argfile-badutf8.args\n+"}, {"sha": "020c3ff3c7e6346fe6770170d8a68314323f3caa", "filename": "src/test/rustdoc-ui/commandline-argfile-missing.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-missing.rs?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -0,0 +1,15 @@\n+// Check to see if we can get parameters from an @argsfile file\n+//\n+// ignore-tidy-linelength\n+// normalize-stderr-test: \"os error \\d+\" -> \"os error $$ERR\"\n+// normalize-stderr-test: \"commandline-argfile-missing.args:[^(]*\" -> \"commandline-argfile-missing.args: $$FILE_MISSING \"\n+// compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile-missing.args\n+\n+#[cfg(not(cmdline_set))]\n+compile_error!(\"cmdline_set not set\");\n+\n+#[cfg(not(unbroken))]\n+compile_error!(\"unbroken not set\");\n+\n+fn main() {\n+}"}, {"sha": "179ad83100419591c92ae7f948be2255c2fcd193", "filename": "src/test/rustdoc-ui/commandline-argfile-missing.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile-missing.stderr?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -0,0 +1,2 @@\n+error: Failed to load argument file: IO Error: $DIR/commandline-argfile-missing.args: $FILE_MISSING (os error $ERR)\n+"}, {"sha": "972938bf6c8dddf9a1a3a24d94e3fdc20f07fc29", "filename": "src/test/rustdoc-ui/commandline-argfile.args", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile.args", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile.args", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile.args?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -0,0 +1,2 @@\n+--cfg\n+unbroken\n\\ No newline at end of file"}, {"sha": "cc8c8722c1c3599cc76bdb13e6b90880f0241241", "filename": "src/test/rustdoc-ui/commandline-argfile.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755b3fc722c36d9761bf49c246b5f7c85a62380d/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcommandline-argfile.rs?ref=755b3fc722c36d9761bf49c246b5f7c85a62380d", "patch": "@@ -0,0 +1,13 @@\n+// Check to see if we can get parameters from an @argsfile file\n+//\n+// check-pass\n+// compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile.args\n+\n+#[cfg(not(cmdline_set))]\n+compile_error!(\"cmdline_set not set\");\n+\n+#[cfg(not(unbroken))]\n+compile_error!(\"unbroken not set\");\n+\n+fn main() {\n+}"}]}