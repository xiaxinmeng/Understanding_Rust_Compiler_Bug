{"sha": "567b11fc3a70cdba960bf6037b9d658fafdc5ada", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2N2IxMWZjM2E3MGNkYmE5NjBiZjYwMzdiOWQ2NThmYWZkYzVhZGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-19T22:39:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-21T15:13:36Z"}, "message": "only remove keys that mention skolemized regions", "tree": {"sha": "f056cf57009f563b8887a61692e3b9a016f663a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f056cf57009f563b8887a61692e3b9a016f663a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/567b11fc3a70cdba960bf6037b9d658fafdc5ada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/567b11fc3a70cdba960bf6037b9d658fafdc5ada", "html_url": "https://github.com/rust-lang/rust/commit/567b11fc3a70cdba960bf6037b9d658fafdc5ada", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/567b11fc3a70cdba960bf6037b9d658fafdc5ada/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "974817d4932fd447f724c4527360a258952ffd48", "url": "https://api.github.com/repos/rust-lang/rust/commits/974817d4932fd447f724c4527360a258952ffd48", "html_url": "https://github.com/rust-lang/rust/commit/974817d4932fd447f724c4527360a258952ffd48"}], "stats": {"total": 99, "additions": 57, "deletions": 42}, "files": [{"sha": "25b899b3c56cd1bae9d3a454e3d732e68434adce", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=567b11fc3a70cdba960bf6037b9d658fafdc5ada", "patch": "@@ -839,6 +839,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"pop_skolemized({:?})\", skol_map);\n         let skol_regions: FnvHashSet<_> = skol_map.values().cloned().collect();\n         self.region_vars.pop_skolemized(&skol_regions, &snapshot.region_vars_snapshot);\n-        self.projection_cache.borrow_mut().partial_rollback(&snapshot.projection_cache_snapshot);\n+        if !skol_map.is_empty() {\n+            self.projection_cache.borrow_mut().rollback_skolemized(\n+                &snapshot.projection_cache_snapshot);\n+        }\n     }\n }"}, {"sha": "f1f1658cc824de34660e66dd6e3b54c2d56347b0", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=567b11fc3a70cdba960bf6037b9d658fafdc5ada", "patch": "@@ -1398,8 +1398,8 @@ impl<'tcx> ProjectionCache<'tcx> {\n         self.map.rollback_to(snapshot.snapshot);\n     }\n \n-    pub fn partial_rollback(&mut self, snapshot: &ProjectionCacheSnapshot) {\n-        self.map.partial_rollback(&snapshot.snapshot);\n+    pub fn rollback_skolemized(&mut self, snapshot: &ProjectionCacheSnapshot) {\n+        self.map.partial_rollback(&snapshot.snapshot, &|k| k.has_re_skol());\n     }\n \n     pub fn commit(&mut self, snapshot: ProjectionCacheSnapshot) {"}, {"sha": "649d78f9d9e2d003a028e441d4fd9e3d3f0c5a58", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=567b11fc3a70cdba960bf6037b9d658fafdc5ada", "patch": "@@ -11,6 +11,7 @@\n use ty::subst::Substs;\n use ty::{self, Ty, TypeFlags, TypeFoldable};\n \n+#[derive(Debug)]\n pub struct FlagComputation {\n     pub flags: TypeFlags,\n \n@@ -182,24 +183,9 @@ impl FlagComputation {\n     }\n \n     fn add_region(&mut self, r: &ty::Region) {\n-        match *r {\n-            ty::ReVar(..) => {\n-                self.add_flags(TypeFlags::HAS_RE_INFER);\n-                self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX);\n-            }\n-            ty::ReSkolemized(..) => {\n-                self.add_flags(TypeFlags::HAS_RE_INFER);\n-                self.add_flags(TypeFlags::HAS_RE_SKOL);\n-                self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX);\n-            }\n-            ty::ReLateBound(debruijn, _) => { self.add_depth(debruijn.depth); }\n-            ty::ReEarlyBound(..) => { self.add_flags(TypeFlags::HAS_RE_EARLY_BOUND); }\n-            ty::ReStatic | ty::ReErased => {}\n-            _ => { self.add_flags(TypeFlags::HAS_FREE_REGIONS); }\n-        }\n-\n-        if !r.is_global() {\n-            self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n+        self.add_flags(r.type_flags());\n+        if let ty::ReLateBound(debruijn, _) = *r {\n+            self.add_depth(debruijn.depth);\n         }\n     }\n "}, {"sha": "ae0a4a0e6bd112765c9b9a0a7c42d4f0d649598b", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=567b11fc3a70cdba960bf6037b9d658fafdc5ada", "patch": "@@ -91,6 +91,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn needs_subst(&self) -> bool {\n         self.has_type_flags(TypeFlags::NEEDS_SUBST)\n     }\n+    fn has_re_skol(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_SKOL)\n+    }\n     fn has_closure_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_CLOSURE)\n     }\n@@ -632,26 +635,15 @@ struct HasTypeFlagsVisitor {\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     fn visit_ty(&mut self, t: Ty) -> bool {\n-        t.flags.get().intersects(self.flags)\n+        let flags = t.flags.get();\n+        debug!(\"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\", t, flags, self.flags);\n+        flags.intersects(self.flags)\n     }\n \n     fn visit_region(&mut self, r: &'tcx ty::Region) -> bool {\n-        if self.flags.intersects(ty::TypeFlags::HAS_LOCAL_NAMES) {\n-            // does this represent a region that cannot be named\n-            // in a global way? used in fulfillment caching.\n-            match *r {\n-                ty::ReStatic | ty::ReEmpty | ty::ReErased => {}\n-                _ => return true,\n-            }\n-        }\n-        if self.flags.intersects(ty::TypeFlags::HAS_RE_INFER |\n-                                 ty::TypeFlags::KEEP_IN_LOCAL_TCX) {\n-            match *r {\n-                ty::ReVar(_) | ty::ReSkolemized(..) => { return true }\n-                _ => {}\n-            }\n-        }\n-        false\n+        let flags = r.type_flags();\n+        debug!(\"HasTypeFlagsVisitor: r={:?} r.flags={:?} self.flags={:?}\", r, flags, self.flags);\n+        flags.intersects(self.flags)\n     }\n }\n "}, {"sha": "eca699a393dda6d7e87b4bdcc64afb05a545ac48", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=567b11fc3a70cdba960bf6037b9d658fafdc5ada", "patch": "@@ -477,6 +477,7 @@ bitflags! {\n                                   TypeFlags::HAS_SELF.bits |\n                                   TypeFlags::HAS_TY_INFER.bits |\n                                   TypeFlags::HAS_RE_INFER.bits |\n+                                  TypeFlags::HAS_RE_SKOL.bits |\n                                   TypeFlags::HAS_RE_EARLY_BOUND.bits |\n                                   TypeFlags::HAS_FREE_REGIONS.bits |\n                                   TypeFlags::HAS_TY_ERR.bits |"}, {"sha": "92dfb883ef301db00d4287a4ffb2e4910230835e", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=567b11fc3a70cdba960bf6037b9d658fafdc5ada", "patch": "@@ -406,7 +406,7 @@ impl<T> Binder<T> {\n \n impl fmt::Debug for TypeFlags {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.bits)\n+        write!(f, \"{:x}\", self.bits)\n     }\n }\n \n@@ -866,6 +866,35 @@ impl Region {\n             r => r\n         }\n     }\n+\n+    pub fn type_flags(&self) -> TypeFlags {\n+        let mut flags = TypeFlags::empty();\n+\n+        match *self {\n+            ty::ReVar(..) => {\n+                flags = flags | TypeFlags::HAS_RE_INFER;\n+                flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n+            }\n+            ty::ReSkolemized(..) => {\n+                flags = flags | TypeFlags::HAS_RE_INFER;\n+                flags = flags | TypeFlags::HAS_RE_SKOL;\n+                flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n+            }\n+            ty::ReLateBound(..) => { }\n+            ty::ReEarlyBound(..) => { flags = flags | TypeFlags::HAS_RE_EARLY_BOUND; }\n+            ty::ReStatic | ty::ReErased => { }\n+            _ => { flags = flags | TypeFlags::HAS_FREE_REGIONS; }\n+        }\n+\n+        match *self {\n+            ty::ReStatic | ty::ReEmpty | ty::ReErased => (),\n+            _ => flags = flags | TypeFlags::HAS_LOCAL_NAMES,\n+        }\n+\n+        debug!(\"type_flags({:?}) = {:?}\", self, flags);\n+\n+        flags\n+    }\n }\n \n // Type utilities"}, {"sha": "a4e6166032d81de5900c9f1111fbf419d8e4bbdb", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/567b11fc3a70cdba960bf6037b9d658fafdc5ada/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=567b11fc3a70cdba960bf6037b9d658fafdc5ada", "patch": "@@ -102,15 +102,19 @@ impl<K, V> SnapshotMap<K, V>\n         }\n     }\n \n-    pub fn partial_rollback(&mut self, snapshot: &Snapshot) {\n+    pub fn partial_rollback<F>(&mut self,\n+                               snapshot: &Snapshot,\n+                               should_revert_key: &F)\n+        where F: Fn(&K) -> bool\n+    {\n         self.assert_open_snapshot(snapshot);\n         for i in (snapshot.len + 1..self.undo_log.len()).rev() {\n             let reverse = match self.undo_log[i] {\n                 UndoLog::OpenSnapshot => false,\n                 UndoLog::CommittedSnapshot => false,\n                 UndoLog::Noop => false,\n-                UndoLog::Inserted(..) => true,\n-                UndoLog::Overwrite(..) => true,\n+                UndoLog::Inserted(ref k) => should_revert_key(k),\n+                UndoLog::Overwrite(ref k, _) => should_revert_key(k),\n             };\n \n             if reverse {"}]}