{"sha": "9849327384fca36d539b87bbd641da3e0ef8a729", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NDkzMjczODRmY2EzNmQ1MzliODdiYmQ2NDFkYTNlMGVmOGE3Mjk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T11:49:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:45Z"}, "message": "Use () for privacy.", "tree": {"sha": "1f69a929e3f01767905d7322f45e158446dbe1bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f69a929e3f01767905d7322f45e158446dbe1bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9849327384fca36d539b87bbd641da3e0ef8a729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9849327384fca36d539b87bbd641da3e0ef8a729", "html_url": "https://github.com/rust-lang/rust/commit/9849327384fca36d539b87bbd641da3e0ef8a729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9849327384fca36d539b87bbd641da3e0ef8a729/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c71ad4bb36173bd48679e28be6b1f68d5ca7819", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c71ad4bb36173bd48679e28be6b1f68d5ca7819", "html_url": "https://github.com/rust-lang/rust/commit/2c71ad4bb36173bd48679e28be6b1f68d5ca7819"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "aa418e9b0034ec49e82590f1070e98f48ebfab31", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -902,11 +902,11 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     sess.time(\"misc_checking_3\", || {\n         parallel!(\n             {\n-                tcx.ensure().privacy_access_levels(LOCAL_CRATE);\n+                tcx.ensure().privacy_access_levels(());\n \n                 parallel!(\n                     {\n-                        tcx.ensure().check_private_in_public(LOCAL_CRATE);\n+                        tcx.ensure().check_private_in_public(());\n                     },\n                     {\n                         sess.time(\"death_checking\", || rustc_passes::dead::check_crate(tcx));"}, {"sha": "2b7e1a8823508b3dedd09716cdcef2f1f70975f9", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -18,7 +18,7 @@ use crate::{passes::LateLintPassObject, LateContext, LateLintPass, LintStore};\n use rustc_ast as ast;\n use rustc_data_structures::sync::{join, par_iter, ParallelIterator};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit as hir_visit;\n use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::map::Map;\n@@ -375,7 +375,7 @@ fn late_lint_mod_pass<'tcx, T: LateLintPass<'tcx>>(\n     module_def_id: LocalDefId,\n     pass: T,\n ) {\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(());\n \n     let context = LateContext {\n         tcx,\n@@ -423,7 +423,7 @@ pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx>>(\n }\n \n fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T) {\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(());\n \n     let krate = tcx.hir().krate();\n "}, {"sha": "7329e28fd0b392e5177f0d40fb90bb02940a986c", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -842,11 +842,11 @@ rustc_queries! {\n     }\n \n     /// Performs part of the privacy check and computes \"access levels\".\n-    query privacy_access_levels(_: CrateNum) -> &'tcx AccessLevels {\n+    query privacy_access_levels(_: ()) -> &'tcx AccessLevels {\n         eval_always\n         desc { \"privacy access levels\" }\n     }\n-    query check_private_in_public(_: CrateNum) -> () {\n+    query check_private_in_public(_: ()) -> () {\n         eval_always\n         desc { \"checking for private elements in public interfaces\" }\n     }"}, {"sha": "e77da8959fdb799fa11ea68b03b23eaf41bb3328", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -5,7 +5,7 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{Node, PatKind, TyKind};\n@@ -708,7 +708,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n }\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(());\n     let krate = tcx.hir().krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx, live_symbols };"}, {"sha": "af1a81c4ddef05f7c47e98d3a7c94541a879567b", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -8,7 +8,6 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -387,7 +386,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n }\n \n fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(());\n \n     let any_library =\n         tcx.sess.crate_types().iter().any(|ty| {"}, {"sha": "9abc26d6de1c7758430448a2e33328099b445c16", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -880,7 +880,7 @@ impl Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n-    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(());\n \n     if tcx.stability().staged_api[&LOCAL_CRATE] {\n         let krate = tcx.hir().krate();"}, {"sha": "1342762bb07a783e2409318a65571e5ff542fb31", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n use rustc_middle::bug;\n@@ -2092,9 +2092,7 @@ fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     intravisit::walk_mod(&mut visitor, module, hir_id);\n }\n \n-fn privacy_access_levels(tcx: TyCtxt<'_>, krate: CrateNum) -> &AccessLevels {\n-    assert_eq!(krate, LOCAL_CRATE);\n-\n+fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {\n     // Build up a set of all exported items in the AST. This is a set of all\n     // items which are reachable from external crates based on visibility.\n     let mut visitor = EmbargoVisitor {\n@@ -2117,10 +2115,8 @@ fn privacy_access_levels(tcx: TyCtxt<'_>, krate: CrateNum) -> &AccessLevels {\n     tcx.arena.alloc(visitor.access_levels)\n }\n \n-fn check_private_in_public(tcx: TyCtxt<'_>, krate: CrateNum) {\n-    assert_eq!(krate, LOCAL_CRATE);\n-\n-    let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n+fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n+    let access_levels = tcx.privacy_access_levels(());\n \n     let krate = tcx.hir().krate();\n "}, {"sha": "861a0201edfadd1cf158e5916fc1c8cda86e8d35", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -1000,7 +1000,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n             // Privacy checking requires and is done after type checking; use a\n             // fallback in case the access levels couldn't have been correctly computed.\n             let access_levels = match tcx.sess.compile_status() {\n-                Ok(..) => tcx.privacy_access_levels(LOCAL_CRATE),\n+                Ok(..) => tcx.privacy_access_levels(()),\n                 Err(..) => tcx.arena.alloc(AccessLevels::default()),\n             };\n "}, {"sha": "0f8750b082569794777854d363b58287f28029a8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -348,7 +348,7 @@ crate fn run_global_ctxt(\n     });\n     rustc_passes::stability::check_unused_or_stable_features(tcx);\n \n-    let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n+    let access_levels = tcx.privacy_access_levels(());\n     // Convert from a HirId set to a DefId set since we don't always have easy access\n     // to the map from defid -> hirid\n     let access_levels = AccessLevels {"}, {"sha": "a4410d3f13b3320f4c3b0e4c6f1c2cbd888d10b1", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9849327384fca36d539b87bbd641da3e0ef8a729/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9849327384fca36d539b87bbd641da3e0ef8a729/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=9849327384fca36d539b87bbd641da3e0ef8a729", "patch": "@@ -1213,13 +1213,11 @@ impl LinkCollector<'_, '_> {\n                     item.def_id.expect_real().as_local().map(|src_id| (src_id, dst_id))\n                 })\n             {\n-                use rustc_hir::def_id::LOCAL_CRATE;\n-\n                 let hir_src = self.cx.tcx.hir().local_def_id_to_hir_id(src_id);\n                 let hir_dst = self.cx.tcx.hir().local_def_id_to_hir_id(dst_id);\n \n-                if self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_src)\n-                    && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n+                if self.cx.tcx.privacy_access_levels(()).is_exported(hir_src)\n+                    && !self.cx.tcx.privacy_access_levels(()).is_exported(hir_dst)\n                 {\n                     privacy_error(self.cx, &diag_info, &path_str);\n                 }"}]}