{"sha": "f2b9686134d7e75d4b57d0d0f6cf81d63d638627", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYjk2ODYxMzRkN2U3NWQ0YjU3ZDBkMGY2Y2Y4MWQ2M2Q2Mzg2Mjc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-23T22:15:07Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-02-23T22:15:07Z"}, "message": "Bad tags are unreachable", "tree": {"sha": "503e308bd00b62485fb65b6ab48a62c7a1850c3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/503e308bd00b62485fb65b6ab48a62c7a1850c3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2b9686134d7e75d4b57d0d0f6cf81d63d638627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b9686134d7e75d4b57d0d0f6cf81d63d638627", "html_url": "https://github.com/rust-lang/rust/commit/f2b9686134d7e75d4b57d0d0f6cf81d63d638627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2b9686134d7e75d4b57d0d0f6cf81d63d638627/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b2037c6fec88fc02b7f5087f14f25b9476dd42d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2037c6fec88fc02b7f5087f14f25b9476dd42d", "html_url": "https://github.com/rust-lang/rust/commit/8b2037c6fec88fc02b7f5087f14f25b9476dd42d"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "cf6a1e354d3cda0f5e7f4a70fe72d868cb8c3ee3", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f2b9686134d7e75d4b57d0d0f6cf81d63d638627/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b9686134d7e75d4b57d0d0f6cf81d63d638627/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=f2b9686134d7e75d4b57d0d0f6cf81d63d638627", "patch": "@@ -18,6 +18,7 @@ use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n+use core::intrinsics;\n use core::nonzero::NonZero;\n use std::fmt;\n use std::iter;\n@@ -84,14 +85,12 @@ impl<'tcx> Kind<'tcx> {\n     #[inline]\n     pub fn unpack(self) -> UnpackedKind<'tcx> {\n         let ptr = self.ptr.get();\n-        match ptr & TAG_MASK {\n-            REGION_TAG => unsafe {\n-                UnpackedKind::Lifetime(&*((ptr & !TAG_MASK) as *const _))\n-            },\n-            TYPE_TAG => unsafe {\n-                UnpackedKind::Type(&*((ptr & !TAG_MASK) as *const _))\n-            },\n-            _ => bug!(\"packed kind has invalid tag\")\n+        unsafe {\n+            match ptr & TAG_MASK {\n+                REGION_TAG => UnpackedKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),\n+                TYPE_TAG => UnpackedKind::Type(&*((ptr & !TAG_MASK) as *const _)),\n+                _ => intrinsics::unreachable()\n+            }\n         }\n     }\n }"}]}