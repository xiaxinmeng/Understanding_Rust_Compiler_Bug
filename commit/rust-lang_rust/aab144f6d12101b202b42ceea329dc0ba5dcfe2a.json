{"sha": "aab144f6d12101b202b42ceea329dc0ba5dcfe2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYjE0NGY2ZDEyMTAxYjIwMmI0MmNlZWEzMjlkYzBiYTVkY2ZlMmE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-02T12:05:04Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-19T08:12:35Z"}, "message": "update select docs", "tree": {"sha": "997b2e4796ad7d9e31915a77c090b9b96ba2799f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/997b2e4796ad7d9e31915a77c090b9b96ba2799f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aab144f6d12101b202b42ceea329dc0ba5dcfe2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aab144f6d12101b202b42ceea329dc0ba5dcfe2a", "html_url": "https://github.com/rust-lang/rust/commit/aab144f6d12101b202b42ceea329dc0ba5dcfe2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aab144f6d12101b202b42ceea329dc0ba5dcfe2a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5943351d0eb878c1cb5af42b9e85e101d8c58ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5943351d0eb878c1cb5af42b9e85e101d8c58ed7", "html_url": "https://github.com/rust-lang/rust/commit/5943351d0eb878c1cb5af42b9e85e101d8c58ed7"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "822fbfa8ca66948d9dd951dc46d6ec27eee5a24f", "filename": "src/librustc_middle/traits/select.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aab144f6d12101b202b42ceea329dc0ba5dcfe2a/src%2Flibrustc_middle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab144f6d12101b202b42ceea329dc0ba5dcfe2a/src%2Flibrustc_middle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fselect.rs?ref=aab144f6d12101b202b42ceea329dc0ba5dcfe2a", "patch": "@@ -34,7 +34,7 @@ impl<'tcx> SelectionCache<'tcx> {\n /// clauses, and so forth that might resolve an obligation. Sometimes\n /// we'll be able to say definitively that (e.g.) an impl does not\n /// apply to the obligation: perhaps it is defined for `usize` but the\n-/// obligation is for `int`. In that case, we drop the impl out of the\n+/// obligation is for `i32`. In that case, we drop the impl out of the\n /// list. But the other cases are considered *candidates*.\n ///\n /// For selection to succeed, there must be exactly one matching\n@@ -54,12 +54,14 @@ impl<'tcx> SelectionCache<'tcx> {\n /// will always be satisfied) picking the blanket impl will be wrong\n /// for at least *some* substitutions. To make this concrete, if we have\n ///\n-///    trait AsDebug { type Out : fmt::Debug; fn debug(self) -> Self::Out; }\n-///    impl<T: fmt::Debug> AsDebug for T {\n-///        type Out = T;\n-///        fn debug(self) -> fmt::Debug { self }\n-///    }\n-///    fn foo<T: AsDebug>(t: T) { println!(\"{:?}\", <T as AsDebug>::debug(t)); }\n+/// ```rust, ignore\n+/// trait AsDebug { type Out: fmt::Debug; fn debug(self) -> Self::Out; }\n+/// impl<T: fmt::Debug> AsDebug for T {\n+///     type Out = T;\n+///     fn debug(self) -> fmt::Debug { self }\n+/// }\n+/// fn foo<T: AsDebug>(t: T) { println!(\"{:?}\", <T as AsDebug>::debug(t)); }\n+/// ```\n ///\n /// we can't just use the impl to resolve the `<T as AsDebug>` obligation\n /// -- a type from another crate (that doesn't implement `fmt::Debug`) could\n@@ -79,14 +81,16 @@ impl<'tcx> SelectionCache<'tcx> {\n /// inference variables. The can lead to inference making \"leaps of logic\",\n /// for example in this situation:\n ///\n-///    pub trait Foo<T> { fn foo(&self) -> T; }\n-///    impl<T> Foo<()> for T { fn foo(&self) { } }\n-///    impl Foo<bool> for bool { fn foo(&self) -> bool { *self } }\n+/// ```rust, ignore\n+/// pub trait Foo<T> { fn foo(&self) -> T; }\n+/// impl<T> Foo<()> for T { fn foo(&self) { } }\n+/// impl Foo<bool> for bool { fn foo(&self) -> bool { *self } }\n ///\n-///    pub fn foo<T>(t: T) where T: Foo<bool> {\n-///       println!(\"{:?}\", <T as Foo<_>>::foo(&t));\n-///    }\n-///    fn main() { foo(false); }\n+/// pub fn foo<T>(t: T) where T: Foo<bool> {\n+///     println!(\"{:?}\", <T as Foo<_>>::foo(&t));\n+/// }\n+/// fn main() { foo(false); }\n+/// ```\n ///\n /// Here the obligation `<T as Foo<$0>>` can be matched by both the blanket\n /// impl and the where-clause. We select the where-clause and unify `$0=bool`,"}]}