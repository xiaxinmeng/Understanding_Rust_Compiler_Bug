{"sha": "fdbebccd71d38c4dffffe918b036bbfa39355c5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYmViY2NkNzFkMzhjNGRmZmZmZTkxOGIwMzZiYmZhMzkzNTVjNWY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-02T19:01:54Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-02T19:01:54Z"}, "message": "Merge #1076\n\n1076: Const body inference r=flodiebold a=Lapz\n\nThis is the second part of #887. I've added type inference on const bodies and introduced the DefWithBody containing Function, Const and Static. I want to add tests but im unsure on how I would go about testing that completions work.\r\n\n\nCo-authored-by: Lenard Pratt <l3np27@gmail.com>", "tree": {"sha": "541c13ce234023bbfc640a38e55e860c029fd52c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/541c13ce234023bbfc640a38e55e860c029fd52c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdbebccd71d38c4dffffe918b036bbfa39355c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdbebccd71d38c4dffffe918b036bbfa39355c5f", "html_url": "https://github.com/rust-lang/rust/commit/fdbebccd71d38c4dffffe918b036bbfa39355c5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdbebccd71d38c4dffffe918b036bbfa39355c5f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "01a54f094ba7c17a6788ec706f12b07d8d60af4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a54f094ba7c17a6788ec706f12b07d8d60af4b", "html_url": "https://github.com/rust-lang/rust/commit/01a54f094ba7c17a6788ec706f12b07d8d60af4b"}, {"sha": "b9d2c2c21fe8880fe1ca29b70b03db1d3faac554", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554", "html_url": "https://github.com/rust-lang/rust/commit/b9d2c2c21fe8880fe1ca29b70b03db1d3faac554"}], "stats": {"total": 280, "additions": 231, "deletions": 49}, "files": [{"sha": "9e6170440e572bc9044f2309958bc64ef488c922", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -429,6 +429,45 @@ impl Docs for EnumVariant {\n     }\n }\n \n+/// The defs which have a body.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum DefWithBody {\n+    Function(Function),\n+    Const(Const),\n+    Static(Static),\n+}\n+\n+impl_froms!(DefWithBody: Function, Const, Static);\n+\n+impl DefWithBody {\n+    pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer(*self)\n+    }\n+\n+    pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map(*self).1\n+    }\n+\n+    pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n+        db.body_hir(*self)\n+    }\n+\n+    /// Builds a resolver for code inside this item.\n+    pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n+        match *self {\n+            DefWithBody::Const(ref c) => c.resolver(db),\n+            DefWithBody::Function(ref f) => f.resolver(db),\n+            DefWithBody::Static(ref s) => s.resolver(db),\n+        }\n+    }\n+\n+    pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSourceMap {\n+        let scopes = db.expr_scopes(*self);\n+        let source_map = db.body_with_source_map(*self).1;\n+        ScopesWithSourceMap { scopes, source_map }\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Function {\n     pub(crate) id: FunctionId,\n@@ -479,20 +518,20 @@ impl Function {\n     }\n \n     pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n-        db.body_with_source_map(*self).1\n+        db.body_with_source_map((*self).into()).1\n     }\n \n     pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n-        db.body_hir(*self)\n+        db.body_hir((*self).into())\n     }\n \n     pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n         db.type_for_def((*self).into(), Namespace::Values)\n     }\n \n     pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSourceMap {\n-        let scopes = db.expr_scopes(*self);\n-        let source_map = db.body_with_source_map(*self).1;\n+        let scopes = db.expr_scopes((*self).into());\n+        let source_map = db.body_with_source_map((*self).into()).1;\n         ScopesWithSourceMap { scopes, source_map }\n     }\n \n@@ -501,7 +540,7 @@ impl Function {\n     }\n \n     pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n-        db.infer(*self)\n+        db.infer((*self).into())\n     }\n \n     pub fn generic_params(&self, db: &impl DefDatabase) -> Arc<GenericParams> {\n@@ -557,6 +596,14 @@ impl Const {\n         db.const_signature(*self)\n     }\n \n+    pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer((*self).into())\n+    }\n+\n+    pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map((*self).into()).1\n+    }\n+\n     /// The containing impl block, if this is a method.\n     pub fn impl_block(&self, db: &impl DefDatabase) -> Option<ImplBlock> {\n         let module_impls = db.impls_in_module(self.module(db));\n@@ -621,6 +668,14 @@ impl Static {\n         // take the outer scope...\n         self.module(db).resolver(db)\n     }\n+\n+    pub fn infer(&self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n+        db.infer((*self).into())\n+    }\n+\n+    pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_with_source_map((*self).into()).1\n+    }\n }\n \n impl Docs for Static {"}, {"sha": "be8a8c98bb8fc7368bbe36b23e231ad52e31bee1", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -8,6 +8,7 @@ use crate::{\n     Function, FnSignature, ExprScopes, TypeAlias,\n     Struct, Enum, StructField,\n     Const, ConstSignature, Static,\n+    DefWithBody,\n     nameres::{Namespace, ImportSourceMap, RawItems, CrateDefMap},\n     ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig},\n     adt::{StructData, EnumData},\n@@ -83,10 +84,10 @@ pub trait DefDatabase: SourceDatabase + AsRef<HirInterner> {\n #[salsa::query_group(HirDatabaseStorage)]\n pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(ExprScopes::expr_scopes_query)]\n-    fn expr_scopes(&self, func: Function) -> Arc<ExprScopes>;\n+    fn expr_scopes(&self, def: DefWithBody) -> Arc<ExprScopes>;\n \n     #[salsa::invoke(crate::ty::infer)]\n-    fn infer(&self, func: Function) -> Arc<InferenceResult>;\n+    fn infer(&self, def: DefWithBody) -> Arc<InferenceResult>;\n \n     #[salsa::invoke(crate::ty::type_for_def)]\n     fn type_for_def(&self, def: TypableDef, ns: Namespace) -> Ty;\n@@ -100,11 +101,11 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::expr::body_with_source_map_query)]\n     fn body_with_source_map(\n         &self,\n-        func: Function,\n+        def: DefWithBody,\n     ) -> (Arc<crate::expr::Body>, Arc<crate::expr::BodySourceMap>);\n \n     #[salsa::invoke(crate::expr::body_hir_query)]\n-    fn body_hir(&self, func: Function) -> Arc<crate::expr::Body>;\n+    fn body_hir(&self, def: DefWithBody) -> Arc<crate::expr::Body>;\n \n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;"}, {"sha": "b2a237ecea20f33d4f8a16fd9ce86a8e0a306851", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    Path, Name, HirDatabase, Function, Resolver,\n+    Path, Name, HirDatabase, Resolver,DefWithBody,\n     name::AsName,\n     type_ref::{Mutability, TypeRef},\n };\n@@ -27,9 +27,8 @@ impl_arena_id!(ExprId);\n /// The body of an item (function, const etc.).\n #[derive(Debug, Eq, PartialEq)]\n pub struct Body {\n-    // FIXME: this should be more general, consts & statics also have bodies\n-    /// The Function of the item this body belongs to\n-    owner: Function,\n+    /// The def of the item this body belongs to\n+    owner: DefWithBody,\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n     /// The patterns for the function's parameters. While the parameter types are\n@@ -66,7 +65,7 @@ impl Body {\n         self.body_expr\n     }\n \n-    pub fn owner(&self) -> Function {\n+    pub fn owner(&self) -> DefWithBody {\n         self.owner\n     }\n \n@@ -463,8 +462,8 @@ impl Pat {\n \n // Queries\n \n-struct ExprCollector {\n-    owner: Function,\n+pub(crate) struct ExprCollector {\n+    owner: DefWithBody,\n     exprs: Arena<ExprId, Expr>,\n     pats: Arena<PatId, Pat>,\n     source_map: BodySourceMap,\n@@ -473,7 +472,7 @@ struct ExprCollector {\n }\n \n impl ExprCollector {\n-    fn new(owner: Function) -> Self {\n+    fn new(owner: DefWithBody) -> Self {\n         ExprCollector {\n             owner,\n             exprs: Arena::default(),\n@@ -866,6 +865,16 @@ impl ExprCollector {\n         }\n     }\n \n+    fn collect_const_body(&mut self, node: &ast::ConstDef) {\n+        let body = self.collect_expr_opt(node.body());\n+        self.body_expr = Some(body);\n+    }\n+\n+    fn collect_static_body(&mut self, node: &ast::StaticDef) {\n+        let body = self.collect_expr_opt(node.body());\n+        self.body_expr = Some(body);\n+    }\n+\n     fn collect_fn_body(&mut self, node: &ast::FnDef) {\n         if let Some(param_list) = node.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n@@ -910,24 +919,20 @@ impl ExprCollector {\n \n pub(crate) fn body_with_source_map_query(\n     db: &impl HirDatabase,\n-    func: Function,\n+    def: DefWithBody,\n ) -> (Arc<Body>, Arc<BodySourceMap>) {\n-    let mut collector = ExprCollector::new(func);\n+    let mut collector = ExprCollector::new(def);\n \n-    // FIXME: consts, etc.\n-    collector.collect_fn_body(&func.source(db).1);\n+    match def {\n+        DefWithBody::Const(ref c) => collector.collect_const_body(&c.source(db).1),\n+        DefWithBody::Function(ref f) => collector.collect_fn_body(&f.source(db).1),\n+        DefWithBody::Static(ref s) => collector.collect_static_body(&s.source(db).1),\n+    }\n \n     let (body, source_map) = collector.finish();\n     (Arc::new(body), Arc::new(source_map))\n }\n \n-pub(crate) fn body_hir_query(db: &impl HirDatabase, func: Function) -> Arc<Body> {\n-    db.body_with_source_map(func).0\n-}\n-\n-#[cfg(test)]\n-fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> (Body, BodySourceMap) {\n-    let mut collector = ExprCollector::new(function);\n-    collector.collect_fn_body(node);\n-    collector.finish()\n+pub(crate) fn body_hir_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<Body> {\n+    db.body_with_source_map(def).0\n }"}, {"sha": "48283907b3500d9b98865df075387ebcfc2a3923", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n-    Name, AsName, Function,\n+    Name, AsName,DefWithBody,\n     expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySourceMap},\n     HirDatabase,\n };\n@@ -40,8 +40,8 @@ pub struct ScopeData {\n \n impl ExprScopes {\n     // FIXME: This should take something more general than Function\n-    pub(crate) fn expr_scopes_query(db: &impl HirDatabase, function: Function) -> Arc<ExprScopes> {\n-        let body = db.body_hir(function);\n+    pub(crate) fn expr_scopes_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<ExprScopes> {\n+        let body = db.body_hir(def);\n         let res = ExprScopes::new(body);\n         Arc::new(res)\n     }\n@@ -297,8 +297,9 @@ mod tests {\n     use ra_syntax::{SourceFile, algo::find_node_at_offset};\n     use test_utils::{extract_offset, assert_eq_text};\n     use ra_arena::ArenaId;\n+    use crate::Function;\n \n-    use crate::expr;\n+    use crate::expr::{ExprCollector};\n \n     use super::*;\n \n@@ -316,7 +317,7 @@ mod tests {\n         let marker: &ast::PathExpr = find_node_at_offset(file.syntax(), off).unwrap();\n         let fn_def: &ast::FnDef = find_node_at_offset(file.syntax(), off).unwrap();\n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let (body, source_map) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let (body, source_map) = collect_fn_body_syntax(irrelevant_function, fn_def);\n         let scopes = ExprScopes::new(Arc::new(body));\n         let scopes =\n             ScopesWithSourceMap { scopes: Arc::new(scopes), source_map: Arc::new(source_map) };\n@@ -405,6 +406,12 @@ mod tests {\n         );\n     }\n \n+    fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> (Body, BodySourceMap) {\n+        let mut collector = ExprCollector::new(DefWithBody::Function(function));\n+        collector.collect_fn_body(node);\n+        collector.finish()\n+    }\n+\n     fn do_check_local_name(code: &str, expected_offset: u32) {\n         let (off, code) = extract_offset(code);\n         let file = SourceFile::parse(&code);\n@@ -415,7 +422,7 @@ mod tests {\n         let name_ref: &ast::NameRef = find_node_at_offset(file.syntax(), off).unwrap();\n \n         let irrelevant_function = Function { id: crate::ids::FunctionId::from_raw(0.into()) };\n-        let (body, source_map) = expr::collect_fn_body_syntax(irrelevant_function, fn_def);\n+        let (body, source_map) = collect_fn_body_syntax(irrelevant_function, fn_def);\n         let scopes = ExprScopes::new(Arc::new(body));\n         let scopes =\n             ScopesWithSourceMap { scopes: Arc::new(scopes), source_map: Arc::new(source_map) };"}, {"sha": "c19450f39039be54b17a15ce3bb4839469e6eb63", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -67,6 +67,7 @@ pub use self::{\n \n pub use self::code_model_api::{\n     Crate, CrateDependency,\n+    DefWithBody,\n     Module, ModuleDef, ModuleSource,\n     Struct, Enum, EnumVariant,\n     Function, FnSignature,"}, {"sha": "182ed4c914227667168db587b52adc8f0b845be1", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{\n };\n \n use crate::{\n-    HirDatabase, Function, Struct, Enum,\n+    HirDatabase, Function, Struct, Enum,Const,Static,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n     ids::LocationCtx,\n     expr, AstId\n@@ -87,6 +87,27 @@ fn module_from_source(\n     )\n }\n \n+pub fn const_from_source(\n+    db: &impl HirDatabase,\n+    file_id: FileId,\n+    const_def: &ast::ConstDef,\n+) -> Option<Const> {\n+    let module = module_from_child_node(db, file_id, const_def.syntax())?;\n+    let res = const_from_module(db, module, const_def);\n+    Some(res)\n+}\n+\n+pub fn const_from_module(\n+    db: &impl HirDatabase,\n+    module: Module,\n+    const_def: &ast::ConstDef,\n+) -> Const {\n+    let (file_id, _) = module.definition_source(db);\n+    let file_id = file_id.into();\n+    let ctx = LocationCtx::new(db, module, file_id);\n+    Const { id: ctx.to_def(const_def) }\n+}\n+\n pub fn function_from_position(db: &impl HirDatabase, position: FilePosition) -> Option<Function> {\n     let file = db.parse(position.file_id);\n     let fn_def = find_node_at_offset::<ast::FnDef>(file.syntax(), position.offset)?;\n@@ -134,6 +155,27 @@ pub fn struct_from_module(\n     Struct { id: ctx.to_def(struct_def) }\n }\n \n+pub fn static_from_source(\n+    db: &impl HirDatabase,\n+    file_id: FileId,\n+    static_def: &ast::StaticDef,\n+) -> Option<Static> {\n+    let module = module_from_child_node(db, file_id, static_def.syntax())?;\n+    let res = static_from_module(db, module, static_def);\n+    Some(res)\n+}\n+\n+pub fn static_from_module(\n+    db: &impl HirDatabase,\n+    module: Module,\n+    static_def: &ast::StaticDef,\n+) -> Static {\n+    let (file_id, _) = module.definition_source(db);\n+    let file_id = file_id.into();\n+    let ctx = LocationCtx::new(db, module, file_id);\n+    Static { id: ctx.to_def(static_def) }\n+}\n+\n pub fn enum_from_module(db: &impl HirDatabase, module: Module, enum_def: &ast::EnumDef) -> Enum {\n     let (file_id, _) = module.definition_source(db);\n     let file_id = file_id.into();"}, {"sha": "887153484d7712e61a026e1f5ac6d07660a336f9", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -27,8 +27,9 @@ use test_utils::tested_by;\n \n use crate::{\n     Function, StructField, Path, Name,\n-    FnSignature, AdtDef,\n+    FnSignature, AdtDef,ConstSignature,\n     HirDatabase,\n+    DefWithBody,\n     ImplItem,\n     type_ref::{TypeRef, Mutability},\n     expr::{Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat, self},\n@@ -43,14 +44,17 @@ use crate::{\n use super::{Ty, TypableDef, Substs, primitive, op, FnSig, ApplicationTy, TypeCtor};\n \n /// The entry point of type inference.\n-pub fn infer(db: &impl HirDatabase, func: Function) -> Arc<InferenceResult> {\n+pub fn infer(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResult> {\n     db.check_canceled();\n-    let body = func.body(db);\n-    let resolver = func.resolver(db);\n+    let body = def.body(db);\n+    let resolver = def.resolver(db);\n     let mut ctx = InferenceContext::new(db, body, resolver);\n \n-    let signature = func.signature(db);\n-    ctx.collect_fn_signature(&signature);\n+    match def {\n+        DefWithBody::Const(ref c) => ctx.collect_const_signature(&c.signature(db)),\n+        DefWithBody::Function(ref f) => ctx.collect_fn_signature(&f.signature(db)),\n+        DefWithBody::Static(ref s) => ctx.collect_const_signature(&s.signature(db)),\n+    }\n \n     ctx.infer_body();\n \n@@ -1142,6 +1146,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ty\n     }\n \n+    fn collect_const_signature(&mut self, signature: &ConstSignature) {\n+        self.return_ty = self.make_ty(signature.type_ref());\n+    }\n+\n     fn collect_fn_signature(&mut self, signature: &FnSignature) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n         for (type_ref, pat) in signature.params().iter().zip(body.params()) {"}, {"sha": "0b7c841dfd2618093aff7830c2cb2ba42861aad8", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 57, "deletions": 4, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -11,6 +11,8 @@ use crate::{\n     source_binder,\n     mock::MockDatabase,\n     ty::display::HirDisplay,\n+    ty::InferenceResult,\n+    expr::BodySourceMap\n };\n \n // These tests compare the inference results for all expressions in a file\n@@ -1267,6 +1269,9 @@ fn test() {\n }\n \"#),\n         @r###\"\n+[52; 53) '1': u32\n+[103; 104) '2': u32\n+[211; 212) '5': u32\n [227; 305) '{     ...:ID; }': ()\n [237; 238) 'x': u32\n [241; 252) 'Struct::FOO': u32\n@@ -1855,6 +1860,9 @@ fn test() {\n }\n \"#),\n         @r###\"\n+[49; 50) '0': u32\n+[80; 83) '101': u32\n+[126; 128) '99': u32\n [95; 213) '{     ...NST; }': ()\n [138; 139) 'x': {unknown}\n [142; 153) 'LOCAL_CONST': {unknown}\n@@ -1881,6 +1889,10 @@ fn test() {\n }\n \"#),\n         @r###\"\n+[29; 32) '101': u32\n+[70; 73) '101': u32\n+[118; 120) '99': u32\n+[161; 163) '99': u32\n [85; 280) '{     ...MUT; }': ()\n [173; 174) 'x': {unknown}\n [177; 189) 'LOCAL_STATIC': {unknown}\n@@ -2212,6 +2224,24 @@ fn test<T: Iterable<Item=u32>>() {\n     );\n }\n \n+#[test]\n+fn infer_const_body() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+const A: u32 = 1 + 1;\n+static B: u64 = { let x = 1; x };\n+\"#),\n+        @r###\"\n+[16; 17) '1': u32\n+[16; 21) '1 + 1': u32\n+[20; 21) '1': u32\n+[39; 55) '{ let ...1; x }': u64\n+[45; 46) 'x': u64\n+[49; 50) '1': u64\n+[52; 53) 'x': u64\"###\n+    );\n+}\n+\n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let func = source_binder::function_from_position(db, pos).unwrap();\n     let body_source_map = func.body_source_map(db);\n@@ -2228,18 +2258,19 @@ fn infer(content: &str) -> String {\n     let source_file = db.parse(file_id);\n     let mut acc = String::new();\n     acc.push_str(\"\\n\");\n-    for fn_def in source_file.syntax().descendants().filter_map(ast::FnDef::cast) {\n-        let func = source_binder::function_from_source(&db, file_id, fn_def).unwrap();\n-        let inference_result = func.infer(&db);\n-        let body_source_map = func.body_source_map(&db);\n+\n+    let mut infer_def = |inference_result: Arc<InferenceResult>,\n+                         body_source_map: Arc<BodySourceMap>| {\n         let mut types = Vec::new();\n+\n         for (pat, ty) in inference_result.type_of_pat.iter() {\n             let syntax_ptr = match body_source_map.pat_syntax(pat) {\n                 Some(sp) => sp,\n                 None => continue,\n             };\n             types.push((syntax_ptr, ty));\n         }\n+\n         for (expr, ty) in inference_result.type_of_expr.iter() {\n             let syntax_ptr = match body_source_map.expr_syntax(expr) {\n                 Some(sp) => sp,\n@@ -2258,7 +2289,29 @@ fn infer(content: &str) -> String {\n             };\n             write!(acc, \"{} '{}': {}\\n\", range, ellipsize(text, 15), ty.display(&db)).unwrap();\n         }\n+    };\n+\n+    for const_def in source_file.syntax().descendants().filter_map(ast::ConstDef::cast) {\n+        let konst = source_binder::const_from_source(&db, file_id, const_def).unwrap();\n+        let inference_result = konst.infer(&db);\n+        let body_source_map = konst.body_source_map(&db);\n+        infer_def(inference_result, body_source_map)\n     }\n+\n+    for static_def in source_file.syntax().descendants().filter_map(ast::StaticDef::cast) {\n+        let static_ = source_binder::static_from_source(&db, file_id, static_def).unwrap();\n+        let inference_result = static_.infer(&db);\n+        let body_source_map = static_.body_source_map(&db);\n+        infer_def(inference_result, body_source_map)\n+    }\n+\n+    for fn_def in source_file.syntax().descendants().filter_map(ast::FnDef::cast) {\n+        let func = source_binder::function_from_source(&db, file_id, fn_def).unwrap();\n+        let inference_result = func.infer(&db);\n+        let body_source_map = func.body_source_map(&db);\n+        infer_def(inference_result, body_source_map)\n+    }\n+\n     acc.truncate(acc.trim_end().len());\n     acc\n }"}, {"sha": "0376c91c88c2ca73cab47605b46f314043447339", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -513,7 +513,11 @@ impl ast::TypeParamsOwner for ConstDef {}\n impl ast::AttrsOwner for ConstDef {}\n impl ast::DocCommentsOwner for ConstDef {}\n impl ast::TypeAscriptionOwner for ConstDef {}\n-impl ConstDef {}\n+impl ConstDef {\n+    pub fn body(&self) -> Option<&Expr> {\n+        super::child_opt(self)\n+    }\n+}\n \n // ContinueExpr\n #[derive(Debug, PartialEq, Eq, Hash)]\n@@ -3364,7 +3368,11 @@ impl ast::TypeParamsOwner for StaticDef {}\n impl ast::AttrsOwner for StaticDef {}\n impl ast::DocCommentsOwner for StaticDef {}\n impl ast::TypeAscriptionOwner for StaticDef {}\n-impl StaticDef {}\n+impl StaticDef {\n+    pub fn body(&self) -> Option<&Expr> {\n+        super::child_opt(self)\n+    }\n+}\n \n // Stmt\n #[derive(Debug, PartialEq, Eq, Hash)]"}, {"sha": "0a35e25d5aaf1ae7e8af973f6d89e8130936951d", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/fdbebccd71d38c4dffffe918b036bbfa39355c5f/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=fdbebccd71d38c4dffffe918b036bbfa39355c5f", "patch": "@@ -315,6 +315,7 @@ Grammar(\n                 \"DocCommentsOwner\",\n                 \"TypeAscriptionOwner\",\n             ],\n+            options: [ [\"body\",\"Expr\"]],\n         ),\n         \"StaticDef\": (\n             traits: [\n@@ -325,6 +326,7 @@ Grammar(\n                 \"DocCommentsOwner\",\n                 \"TypeAscriptionOwner\",\n             ],\n+            options: [ [\"body\",\"Expr\"]],\n         ),\n         \"TypeAliasDef\": (\n             traits: ["}]}