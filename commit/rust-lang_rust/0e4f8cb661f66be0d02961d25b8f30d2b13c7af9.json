{"sha": "0e4f8cb661f66be0d02961d25b8f30d2b13c7af9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNGY4Y2I2NjFmNjZiZTBkMDI5NjFkMjViOGYzMGQyYjEzYzdhZjk=", "commit": {"author": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-05-24T14:24:35Z"}, "committer": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-05-24T14:24:35Z"}, "message": "minor rewording after review\n\nUse \"the `WouldBlock` error\" instead of \"the error `WouldBlock`\", etc.", "tree": {"sha": "efe74e68276e1fdc86f9918ba10def0eee487d17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe74e68276e1fdc86f9918ba10def0eee487d17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9", "html_url": "https://github.com/rust-lang/rust/commit/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9/comments", "author": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5873660fc872f92e904bac385645750eb4f84c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5873660fc872f92e904bac385645750eb4f84c4", "html_url": "https://github.com/rust-lang/rust/commit/e5873660fc872f92e904bac385645750eb4f84c4"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "e7c5479ab9bb6fa59fd621adab13c5b0ddbc0de5", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=0e4f8cb661f66be0d02961d25b8f30d2b13c7af9", "patch": "@@ -294,11 +294,11 @@ impl<T: ?Sized> Mutex<T> {\n     /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n-    /// this call will return the error [`Poisoned`] if the mutex would\n+    /// this call will return the [`Poisoned`] error if the mutex would\n     /// otherwise be acquired.\n     ///\n     /// If the mutex could not be acquired because it is already locked, then\n-    /// this call will return [`WouldBlock`].\n+    /// this call will return the [`WouldBlock`] error.\n     ///\n     /// [`Poisoned`]: TryLockError::Poisoned\n     /// [`WouldBlock`]: TryLockError::WouldBlock"}, {"sha": "9d521ab14cbf3b264a052edb556977a129612c12", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=0e4f8cb661f66be0d02961d25b8f30d2b13c7af9", "patch": "@@ -199,12 +199,12 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the error [`Poisoned`] if the RwLock is poisoned.\n+    /// This function will return the [`Poisoned`] error if the RwLock is poisoned.\n     /// An RwLock is poisoned whenever a writer panics while holding an exclusive\n     /// lock. `Poisoned` will only be returned if the lock would have otherwise been\n     /// acquired.\n     ///\n-    /// This function will return the error [`WouldBlock`] if the RwLock could not\n+    /// This function will return the [`WouldBlock`] error if the RwLock could not\n     /// be acquired because it was already locked exclusively.\n     ///\n     /// [`Poisoned`]: TryLockError::Poisoned\n@@ -287,12 +287,12 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return the error [`Poisoned`] if the RwLock is\n+    /// This function will return the [`Poisoned`] error if the RwLock is\n     /// poisoned. An RwLock is poisoned whenever a writer panics while holding\n     /// an exclusive lock. `Poisoned` will only be returned if the lock would have\n     /// otherwise been acquired.\n     ///\n-    /// This function will return the error [`WouldBlock`] if the RwLock could not\n+    /// This function will return the [`WouldBlock`] error if the RwLock could not\n     /// be acquired because it was already locked exclusively.\n     ///\n     /// [`Poisoned`]: TryLockError::Poisoned"}]}