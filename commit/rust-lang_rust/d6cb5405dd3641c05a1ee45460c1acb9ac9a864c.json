{"sha": "d6cb5405dd3641c05a1ee45460c1acb9ac9a864c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Y2I1NDA1ZGQzNjQxYzA1YTFlZTQ1NDYwYzFhY2I5YWM5YTg2NGM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-05T20:20:38Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-19T08:55:12Z"}, "message": "add tests for enum discriminants", "tree": {"sha": "3d08cfb9bf17c7261d64400f4a3897b4b4b2d80c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d08cfb9bf17c7261d64400f4a3897b4b4b2d80c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c", "html_url": "https://github.com/rust-lang/rust/commit/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2940a9f426375ce36c7c14712494c0c1493285", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2940a9f426375ce36c7c14712494c0c1493285", "html_url": "https://github.com/rust-lang/rust/commit/ff2940a9f426375ce36c7c14712494c0c1493285"}], "stats": {"total": 169, "additions": 169, "deletions": 0}, "files": [{"sha": "6a566ab3a3d88af022334229748a8b18ca414ea3", "filename": "src/test/ui/enum-discriminant/actually_not_an_enum-discriminant.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Factually_not_an_enum-discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Factually_not_an_enum-discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Factually_not_an_enum-discriminant.rs?ref=d6cb5405dd3641c05a1ee45460c1acb9ac9a864c", "patch": "@@ -0,0 +1,49 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::discriminant_value;\n+\n+struct Zst;\n+\n+struct Struct {\n+    _a: u32,\n+}\n+\n+union Union {\n+    _a: u32,\n+}\n+\n+fn check(v: u8) {\n+    assert_eq!(v, 0);\n+}\n+\n+pub fn generic<T>()\n+where\n+    for<'a> T: Fn(&'a isize),\n+{\n+    let v: Vec<T> =  Vec::new();\n+    let _: u8 = discriminant_value(&v);\n+}\n+\n+fn main() {\n+    // check that we use `u8` as the discriminant value\n+    // for everything that is not an enum.\n+    check(discriminant_value(&true));\n+    check(discriminant_value(&'a'));\n+    check(discriminant_value(&7));\n+    check(discriminant_value(&7.0));\n+    check(discriminant_value(&Zst));\n+    check(discriminant_value(&Struct { _a: 7 }));\n+    check(discriminant_value(&Union { _a: 7 }));\n+    check(discriminant_value(&[7, 77]));\n+    check(discriminant_value(&(7 as *const ())));\n+    check(discriminant_value(&(7 as *mut ())));\n+    check(discriminant_value(&&7));\n+    check(discriminant_value(&&mut 7));\n+    check(discriminant_value(&check));\n+    let fn_ptr: fn(u8) = check;\n+    check(discriminant_value(&fn_ptr));\n+    let hrtb: for<'a> fn(&'a str) -> &'a str = |x| x;\n+    check(discriminant_value(&hrtb));\n+    check(discriminant_value(&(7, 77, 777)));\n+}"}, {"sha": "4cede8c2a2ded800a8dcd5702e69f253aeaf6748", "filename": "src/test/ui/enum-discriminant/discriminant_size.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_size.rs?ref=d6cb5405dd3641c05a1ee45460c1acb9ac9a864c", "patch": "@@ -0,0 +1,53 @@\n+// run-pass\n+#![feature(core_intrinsics, repr128)]\n+\n+use std::intrinsics::discriminant_value;\n+\n+enum E1 {\n+    A,\n+    B,\n+}\n+\n+#[repr(i8)]\n+enum E2 {\n+    A = 7,\n+    B = -2,\n+}\n+\n+#[repr(C)]\n+enum E3 {\n+    A = 42,\n+    B = 100,\n+}\n+\n+#[repr(i128)]\n+enum E4 {\n+    A = 0x1223_3445_5667_7889,\n+    B = -0x1223_3445_5667_7889,\n+}\n+\n+fn main() {\n+    let mut target: [isize; 3] = [0, 0, 0];\n+    target[1] = discriminant_value(&E1::A);\n+    assert_eq!(target, [0, 0, 0]);\n+    target[1] = discriminant_value(&E1::B);\n+    assert_eq!(target, [0, 1, 0]);\n+\n+    let mut target: [i8; 3] = [0, 0, 0];\n+    target[1] = discriminant_value(&E2::A);\n+    assert_eq!(target, [0, 7, 0]);\n+    target[1] = discriminant_value(&E2::B);\n+    assert_eq!(target, [0, -2, 0]);\n+\n+    let mut target: [isize; 3] = [0, 0, 0];\n+    target[1] = discriminant_value(&E3::A);\n+    assert_eq!(target, [0, 42, 0]);\n+    target[1] = discriminant_value(&E3::B);\n+    assert_eq!(target, [0, 100, 0]);\n+\n+    let mut target: [i128; 3] = [0, 0, 0];\n+    target[1] = discriminant_value(&E4::A);\n+    assert_eq!(target, [0, 0x1223_3445_5667_7889, 0]);\n+    target[1] = discriminant_value(&E4::B);\n+    assert_eq!(target, [0, -0x1223_3445_5667_7889, 0]);\n+}"}, {"sha": "4760ca5482a0791086a167834ca914c1b23305bf", "filename": "src/test/ui/enum-discriminant/forbidden-discriminant-kind-impl.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Fforbidden-discriminant-kind-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Fforbidden-discriminant-kind-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fforbidden-discriminant-kind-impl.rs?ref=d6cb5405dd3641c05a1ee45460c1acb9ac9a864c", "patch": "@@ -0,0 +1,14 @@\n+#![feature(discriminant_kind)]\n+\n+use std::marker::DiscriminantKind;\n+\n+enum Uninhabited {}\n+\n+struct NewType;\n+\n+impl DiscriminantKind for NewType {\n+    //~^ ERROR explicit impls for the `DiscriminantKind` trait are not permitted\n+    type Discriminant = Uninhabited;\n+}\n+\n+fn main() {}"}, {"sha": "54360c4f47b3e453bef19dd8480f1b11fed4e670", "filename": "src/test/ui/enum-discriminant/forbidden-discriminant-kind-impl.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Fforbidden-discriminant-kind-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Fforbidden-discriminant-kind-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fforbidden-discriminant-kind-impl.stderr?ref=d6cb5405dd3641c05a1ee45460c1acb9ac9a864c", "patch": "@@ -0,0 +1,9 @@\n+error[E0322]: explicit impls for the `DiscriminantKind` trait are not permitted\n+  --> $DIR/forbidden-discriminant-kind-impl.rs:9:1\n+   |\n+LL | impl DiscriminantKind for NewType {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of 'DiscriminantKind' not allowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0322`."}, {"sha": "420b6007c6d85e85707a4260e9509900dd730a81", "filename": "src/test/ui/enum-discriminant/repr128.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Frepr128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb5405dd3641c05a1ee45460c1acb9ac9a864c/src%2Ftest%2Fui%2Fenum-discriminant%2Frepr128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Frepr128.rs?ref=d6cb5405dd3641c05a1ee45460c1acb9ac9a864c", "patch": "@@ -0,0 +1,44 @@\n+// run-pass\n+#![feature(repr128, core_intrinsics, discriminant_kind)]\n+\n+use std::intrinsics::discriminant_value;\n+use std::marker::DiscriminantKind;\n+\n+#[repr(i128)]\n+enum Signed {\n+    Zero = 0,\n+    Staircase = 0x01_02_03_04_05_06_07_08_09_0a_0b_0c_0d_0e_0f,\n+    U64Limit = u64::max_value() as i128 + 1,\n+    SmallNegative = -1,\n+    BigNegative = i128::min_value(),\n+    Next,\n+}\n+\n+#[repr(u128)]\n+enum Unsigned {\n+    Zero = 0,\n+    Staircase = 0x01_02_03_04_05_06_07_08_09_0a_0b_0c_0d_0e_0f,\n+    U64Limit = u64::max_value() as u128 + 1,\n+    Next,\n+}\n+\n+fn discr<T, U>(v: T, value: U)\n+where\n+    <T as DiscriminantKind>::Discriminant: PartialEq<U>,\n+{\n+    assert!(discriminant_value(&v) == value);\n+}\n+\n+fn main() {\n+    discr(Signed::Zero, 0);\n+    discr(Signed::Staircase, 0x01_02_03_04_05_06_07_08_09_0a_0b_0c_0d_0e_0f);\n+    discr(Signed::U64Limit, u64::max_value() as i128 + 1);\n+    discr(Signed::SmallNegative, -1);\n+    discr(Signed::BigNegative, i128::min_value());\n+    discr(Signed::Next, i128::min_value() + 1);\n+\n+    discr(Unsigned::Zero, 0);\n+    discr(Unsigned::Staircase, 0x01_02_03_04_05_06_07_08_09_0a_0b_0c_0d_0e_0f);\n+    discr(Unsigned::U64Limit, u64::max_value() as u128 + 1);\n+    discr(Unsigned::Next, u64::max_value() as u128 + 2);\n+}"}]}