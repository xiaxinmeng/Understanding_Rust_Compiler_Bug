{"sha": "8134863c13c13d790a30bc9998693d3f3ea7f23d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMzQ4NjNjMTNjMTNkNzkwYTMwYmM5OTk4NjkzZDNmM2VhN2YyM2Q=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-05-25T03:02:42Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-05-29T16:18:49Z"}, "message": "Fix behavior with generic lifetime parameters", "tree": {"sha": "d4c6f5225c40caccc5aba71a926007af0dfdea8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4c6f5225c40caccc5aba71a926007af0dfdea8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8134863c13c13d790a30bc9998693d3f3ea7f23d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8134863c13c13d790a30bc9998693d3f3ea7f23d", "html_url": "https://github.com/rust-lang/rust/commit/8134863c13c13d790a30bc9998693d3f3ea7f23d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8134863c13c13d790a30bc9998693d3f3ea7f23d/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96b11a58887cbfb4b7b249d27228d49cc494fdfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b11a58887cbfb4b7b249d27228d49cc494fdfa", "html_url": "https://github.com/rust-lang/rust/commit/96b11a58887cbfb4b7b249d27228d49cc494fdfa"}], "stats": {"total": 102, "additions": 88, "deletions": 14}, "files": [{"sha": "8d14576767fcee0eb193a6e4152cb4a43817b33d", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8134863c13c13d790a30bc9998693d3f3ea7f23d/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134863c13c13d790a30bc9998693d3f3ea7f23d/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=8134863c13c13d790a30bc9998693d3f3ea7f23d", "patch": "@@ -1,7 +1,8 @@\n use rustc::lint::*;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, walk::TypeWalker};\n use rustc::hir::*;\n use std::borrow::Cow;\n+use std::mem;\n use syntax::ast;\n use utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n use utils::{opt_def_id, sugg};\n@@ -363,8 +364,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             }\n                                         )\n                                     } else {\n-                                        // In this case they differ only in lifetime\n-                                        if ty_from != ty_to {\n+                                        if !differ_only_in_lifetime_params(from_ty, to_ty) {\n                                             span_lint_and_then(\n                                                 cx,\n                                                 TRANSMUTE_PTR_TO_PTR,\n@@ -448,6 +448,48 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n     }\n }\n \n+/// Returns true if `type1` and `type2` are the same type except for their lifetime parameters\n+fn differ_only_in_lifetime_params(type1: Ty, type2: Ty) -> bool {\n+    use rustc::ty::TypeVariants::*;\n+    if TypeWalker::new(type1).count() != TypeWalker::new(type2).count() {\n+        return false;\n+    }\n+    TypeWalker::new(type1)\n+        .zip(TypeWalker::new(type2))\n+        .all(|(t1, t2)| {\n+            match (&t1.sty, &t2.sty) {\n+                // types with generic parameters which can contain lifetimes\n+                (TyAdt(_, sub1), TyAdt(_, sub2))\n+                | (TyFnDef(_, sub1), TyFnDef(_, sub2))\n+                | (TyAnon(_, sub1), TyAnon(_, sub2))\n+                => {\n+                    // Iterate over generic parameters, which are either Lifetimes or Types.\n+                    // Here we only need to check that they are the same type of thing, because\n+                    // if they are both Lifetimes then we don't care about their equality, and if\n+                    // they are both Types, we will check their equality later in the type walk.\n+                    sub1.iter().count() == sub2.iter().count()\n+                    && sub1.iter().zip(sub2.iter()).all(|(k1, k2)| {\n+                        mem::discriminant(&k1.unpack()) == mem::discriminant(&k2.unpack())\n+                    })\n+                }\n+                // types without subtypes: check that the types are equal\n+                (TyBool, TyBool)\n+                | (TyChar, TyChar)\n+                | (TyInt(_), TyInt(_))\n+                | (TyUint(_), TyUint(_))\n+                | (TyFloat(_), TyFloat(_))\n+                | (TyForeign(_), TyForeign(_))\n+                | (TyStr, TyStr)\n+                | (TyNever, TyNever)\n+                | (TyInfer(_), TyInfer(_))\n+                => t1.sty == t2.sty,\n+                // types with subtypes: return true for now if they are the same sort of type.\n+                // we will check their subtypes later\n+                (sty1, sty2) => mem::discriminant(sty1) == mem::discriminant(sty2)\n+            }\n+        })\n+}\n+\n /// Get the snippet of `Bar` in `\u2026::transmute<Foo, &Bar>`. If that snippet is\n /// not available , use\n /// the type's `ToString` implementation. In weird cases it could lead to types"}, {"sha": "54e1734e1415b46bc4aef6f4f002db83bff681f0", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8134863c13c13d790a30bc9998693d3f3ea7f23d/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8134863c13c13d790a30bc9998693d3f3ea7f23d/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=8134863c13c13d790a30bc9998693d3f3ea7f23d", "patch": "@@ -155,6 +155,14 @@ unsafe fn transmute_lifetime<'a, 'b, T>(t: &'a T, u: &'b T) -> &'b T {\n     std::mem::transmute::<&'a T, &'b T>(t)\n }\n \n+struct LifetimeParam<'a> {\n+    s: &'a str,\n+}\n+\n+struct GenericParam<T> {\n+    t: T,\n+}\n+\n #[warn(transmute_ptr_to_ptr)]\n fn transmute_ptr_to_ptr() {\n     let ptr = &1u32 as *const u32;\n@@ -165,15 +173,27 @@ fn transmute_ptr_to_ptr() {\n         let _: *mut f32 = std::mem::transmute(mut_ptr);\n         // ref-ref transmutes; bad\n         let _: &f32 = std::mem::transmute(&1u32);\n+        let _: &f64 = std::mem::transmute(&1f32);\n+        // ^ this test is here because both f32 and f64 are the same TypeVariant, but they are not\n+        // the same type\n         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+        let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n     }\n-    // These should be fine:\n-    // Recommendations for solving the above; if these break we need to update\n+\n+    // these are recommendations for solving the above; if these lint we need to update\n     // those suggestions\n     let _ = ptr as *const f32;\n     let _ = mut_ptr as *mut f32;\n     let _ = unsafe { &*(&1u32 as *const u32 as *const f32) };\n     let _ = unsafe { &mut *(&mut 1u32 as *mut u32 as *mut f32) };\n+\n+    // transmute internal lifetimes, should not lint\n+    let s = \"hello world\".to_owned();\n+    let lp = LifetimeParam { s: &s };\n+    let _: &LifetimeParam<'static> = unsafe { std::mem::transmute(&lp) };\n+    let _: &GenericParam<&LifetimeParam<'static>> = unsafe {\n+        std::mem::transmute(&GenericParam { t: &lp})\n+    };\n }\n \n fn main() { }"}, {"sha": "abed5065c0a14dd1e992594d0121e15c04b7a3ef", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8134863c13c13d790a30bc9998693d3f3ea7f23d/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8134863c13c13d790a30bc9998693d3f3ea7f23d/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=8134863c13c13d790a30bc9998693d3f3ea7f23d", "patch": "@@ -205,30 +205,42 @@ error: transmute from a `&mut [u8]` to a `&mut str`\n     |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`\n \n error: transmute from a pointer to a pointer\n-   --> $DIR/transmute.rs:164:29\n+   --> $DIR/transmute.rs:172:29\n     |\n-164 |         let _: *const f32 = std::mem::transmute(ptr);\n+172 |         let _: *const f32 = std::mem::transmute(ptr);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr as *const f32`\n     |\n     = note: `-D transmute-ptr-to-ptr` implied by `-D warnings`\n \n error: transmute from a pointer to a pointer\n-   --> $DIR/transmute.rs:165:27\n+   --> $DIR/transmute.rs:173:27\n     |\n-165 |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n+173 |         let _: *mut f32 = std::mem::transmute(mut_ptr);\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `mut_ptr as *mut f32`\n \n error: transmute from a reference to a reference\n-   --> $DIR/transmute.rs:167:23\n+   --> $DIR/transmute.rs:175:23\n     |\n-167 |         let _: &f32 = std::mem::transmute(&1u32);\n+175 |         let _: &f32 = std::mem::transmute(&1u32);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1u32 as *const u32 as *const f32)`\n \n error: transmute from a reference to a reference\n-   --> $DIR/transmute.rs:168:27\n+   --> $DIR/transmute.rs:176:23\n     |\n-168 |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n+176 |         let _: &f64 = std::mem::transmute(&1f32);\n+    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&1f32 as *const f32 as *const f64)`\n+\n+error: transmute from a reference to a reference\n+   --> $DIR/transmute.rs:179:27\n+    |\n+179 |         let _: &mut f32 = std::mem::transmute(&mut 1u32);\n     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(&mut 1u32 as *mut u32 as *mut f32)`\n \n-error: aborting due to 36 previous errors\n+error: transmute from a reference to a reference\n+   --> $DIR/transmute.rs:180:37\n+    |\n+180 |         let _: &GenericParam<f32> = std::mem::transmute(&GenericParam { t: 1u32 });\n+    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(&GenericParam { t: 1u32 } as *const GenericParam<u32> as *const GenericParam<f32>)`\n+\n+error: aborting due to 38 previous errors\n "}]}