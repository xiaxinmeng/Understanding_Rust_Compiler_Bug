{"sha": "134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNGQ2YTJmYWFiMTgwMWU5YjNkMjNiNmVlMTFiYTE2NDNlYWUwZmU=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T19:55:57Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T19:55:57Z"}, "message": "Add tests, improve test coverage", "tree": {"sha": "9f54db9b2e113824e74c33b80a65257bda31cc8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f54db9b2e113824e74c33b80a65257bda31cc8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "html_url": "https://github.com/rust-lang/rust/commit/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1", "html_url": "https://github.com/rust-lang/rust/commit/f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "e7ed8ad296211a9dbacf7cb917c84ac7bee382b4", "filename": "tests/compile-fail/libc_pthread_mutex_destroy_locked.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_mutex_destroy_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_mutex_destroy_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flibc_pthread_mutex_destroy_locked.rs?ref=134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "patch": "@@ -0,0 +1,16 @@\n+// ignore-windows: No libc on Windows\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    unsafe {\n+        let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n+        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n+        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n+        libc::pthread_mutex_destroy(&mut mutex as *mut _); //~ ERROR destroyed a locked mutex\n+    }\n+}"}, {"sha": "65de62484d5ed9a809c96fb25cb03e11d6f4b546", "filename": "tests/compile-fail/libc_pthread_mutex_normal_unlock_unlocked.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flibc_pthread_mutex_normal_unlock_unlocked.rs?ref=134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "patch": "@@ -0,0 +1,17 @@\n+// ignore-windows: No libc on Windows\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    unsafe {\n+        let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n+        let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n+        assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n+        assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+        libc::pthread_mutex_unlock(&mut mutex as *mut _); //~ ERROR was not locked\n+    }\n+}"}, {"sha": "8750a7388fca231d414160b053317ed559d9be16", "filename": "tests/compile-fail/libc_pthread_rwlock_destroy_read_locked.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_rwlock_destroy_read_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_rwlock_destroy_read_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flibc_pthread_rwlock_destroy_read_locked.rs?ref=134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "patch": "@@ -0,0 +1,13 @@\n+// ignore-windows: No libc on Windows\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n+    unsafe {\n+        assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n+        libc::pthread_rwlock_destroy(rw.get()); //~ ERROR destroyed a locked rwlock\n+    }\n+}"}, {"sha": "aecccfa5031035e873baac2c7a91a80b6e9dfe0c", "filename": "tests/compile-fail/libc_pthread_rwlock_destroy_write_locked.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_rwlock_destroy_write_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_rwlock_destroy_write_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flibc_pthread_rwlock_destroy_write_locked.rs?ref=134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "patch": "@@ -0,0 +1,13 @@\n+// ignore-windows: No libc on Windows\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n+    unsafe {\n+        assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n+        libc::pthread_rwlock_destroy(rw.get()); //~ ERROR destroyed a locked rwlock\n+    }\n+}"}, {"sha": "8b3de53828df66452950cf549a54bfb33b5762bc", "filename": "tests/compile-fail/libc_pthread_rwlock_unlock_unlocked.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_rwlock_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Fcompile-fail%2Flibc_pthread_rwlock_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flibc_pthread_rwlock_unlock_unlocked.rs?ref=134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "patch": "@@ -0,0 +1,12 @@\n+// ignore-windows: No libc on Windows\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+fn main() {\n+    let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n+    unsafe {\n+        libc::pthread_rwlock_unlock(rw.get()); //~ ERROR was not locked\n+    }\n+}"}, {"sha": "a449d9340a315c5c8ab07e7203c7361b1dc87128", "filename": "tests/run-pass/libc.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/134d6a2faab1801e9b3d23b6ee11ba1643eae0fe/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=134d6a2faab1801e9b3d23b6ee11ba1643eae0fe", "patch": "@@ -15,7 +15,7 @@ fn tmp() -> PathBuf {\n #[cfg(not(target_os = \"macos\"))]\n fn test_posix_fadvise() {\n     use std::convert::TryInto;\n-    use std::fs::{File, remove_file};\n+    use std::fs::{remove_file, File};\n     use std::io::Write;\n     use std::os::unix::io::AsRawFd;\n \n@@ -66,6 +66,7 @@ fn test_mutex_libc_init_recursive() {\n fn test_mutex_libc_init_normal() {\n     unsafe {\n         let mut mutexattr: libc::pthread_mutexattr_t = std::mem::zeroed();\n+        assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, 0x12345678), libc::EINVAL);\n         assert_eq!(libc::pthread_mutexattr_settype(&mut mutexattr as *mut _, libc::PTHREAD_MUTEX_NORMAL), 0);\n         let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n         assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, &mutexattr as *const _), 0);\n@@ -133,6 +134,11 @@ fn test_rwlock_libc_static_initializer() {\n         assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n         assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n \n+        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), 0);\n+        assert_eq!(libc::pthread_rwlock_tryrdlock(rw.get()), libc::EBUSY);\n+        assert_eq!(libc::pthread_rwlock_trywrlock(rw.get()), libc::EBUSY);\n+        assert_eq!(libc::pthread_rwlock_unlock(rw.get()), 0);\n+\n         assert_eq!(libc::pthread_rwlock_destroy(rw.get()), 0);\n     }\n }"}]}