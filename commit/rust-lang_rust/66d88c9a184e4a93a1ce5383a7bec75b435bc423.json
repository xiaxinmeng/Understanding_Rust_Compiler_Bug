{"sha": "66d88c9a184e4a93a1ce5383a7bec75b435bc423", "node_id": "C_kwDOAAsO6NoAKDY2ZDg4YzlhMTg0ZTRhOTNhMWNlNTM4M2E3YmVjNzViNDM1YmM0MjM", "commit": {"author": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2022-05-19T07:53:41Z"}, "committer": {"name": "Thayne McCombs", "email": "astrothayne@gmail.com", "date": "2022-05-19T07:53:41Z"}, "message": "Change clear_poison to take the lock instead of a guard", "tree": {"sha": "ee39ae070edb55cbb7a64bcdf914cf3d107a2a18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee39ae070edb55cbb7a64bcdf914cf3d107a2a18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66d88c9a184e4a93a1ce5383a7bec75b435bc423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66d88c9a184e4a93a1ce5383a7bec75b435bc423", "html_url": "https://github.com/rust-lang/rust/commit/66d88c9a184e4a93a1ce5383a7bec75b435bc423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66d88c9a184e4a93a1ce5383a7bec75b435bc423/comments", "author": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmccombs", "id": 2541726, "node_id": "MDQ6VXNlcjI1NDE3MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2541726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmccombs", "html_url": "https://github.com/tmccombs", "followers_url": "https://api.github.com/users/tmccombs/followers", "following_url": "https://api.github.com/users/tmccombs/following{/other_user}", "gists_url": "https://api.github.com/users/tmccombs/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmccombs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmccombs/subscriptions", "organizations_url": "https://api.github.com/users/tmccombs/orgs", "repos_url": "https://api.github.com/users/tmccombs/repos", "events_url": "https://api.github.com/users/tmccombs/events{/privacy}", "received_events_url": "https://api.github.com/users/tmccombs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7ac8e7aeffa796ac5f19b66c0c59b20312ac520", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ac8e7aeffa796ac5f19b66c0c59b20312ac520", "html_url": "https://github.com/rust-lang/rust/commit/f7ac8e7aeffa796ac5f19b66c0c59b20312ac520"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "9c305f517ef375ce364696ddcad82fcac879d98e", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/66d88c9a184e4a93a1ce5383a7bec75b435bc423/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66d88c9a184e4a93a1ce5383a7bec75b435bc423/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=66d88c9a184e4a93a1ce5383a7bec75b435bc423", "patch": "@@ -387,14 +387,19 @@ impl<T: ?Sized> Mutex<T> {\n     ///     panic!(); // the mutex gets poisoned\n     /// }).join();\n     ///\n-    /// let guard = mutex.lock().unwrap_err().into_inner();\n-    /// Mutex::clear_poison(&guard);\n+    /// assert_eq!(mutex.is_poisoned(), true);\n+    /// let x = mutex.lock().unwrap_or_else(|mut e| {\n+    ///     **e.get_mut() = 1;\n+    ///     mutex.clear_poison();\n+    ///     e.into_inner()\n+    /// });\n     /// assert_eq!(mutex.is_poisoned(), false);\n+    /// assert_eq!(*x, 1);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"mutex_unpoison\", issue = \"96469\")]\n-    pub fn clear_poison(guard: &MutexGuard<'_, T>) {\n-        guard.lock.poison.clear();\n+    pub fn clear_poison(&self) {\n+        self.poison.clear();\n     }\n \n     /// Consumes this mutex, returning the underlying data."}, {"sha": "c0cd02708a733c9a45694e0b2724fc6e85987603", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/66d88c9a184e4a93a1ce5383a7bec75b435bc423/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66d88c9a184e4a93a1ce5383a7bec75b435bc423/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=66d88c9a184e4a93a1ce5383a7bec75b435bc423", "patch": "@@ -390,14 +390,19 @@ impl<T: ?Sized> RwLock<T> {\n     ///     panic!(); // the mutex gets poisoned\n     /// }).join();\n     ///\n-    /// let guard = lock.write().unwrap_err().into_inner();\n-    /// RwLock::clear_poison(&guard);\n+    /// assert_eq!(lock.is_poisoned(), true);\n+    /// let guard = lock.write().unwrap_or_else(|mut e| {\n+    ///     **e.get_mut() = 1;\n+    ///     lock.clear_poison();\n+    ///     e.into_inner()\n+    /// });\n     /// assert_eq!(lock.is_poisoned(), false);\n+    /// assert_eq!(*guard, 1);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"mutex_unpoison\", issue = \"96469\")]\n-    pub fn clear_poison(guard: &RwLockWriteGuard<'_, T>) {\n-        guard.lock.poison.clear();\n+    pub fn clear_poison(&self) {\n+        self.poison.clear();\n     }\n \n     /// Consumes this `RwLock`, returning the underlying data."}]}