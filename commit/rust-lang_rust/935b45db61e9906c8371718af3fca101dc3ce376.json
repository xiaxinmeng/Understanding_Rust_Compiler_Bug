{"sha": "935b45db61e9906c8371718af3fca101dc3ce376", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNWI0NWRiNjFlOTkwNmM4MzcxNzE4YWYzZmNhMTAxZGMzY2UzNzY=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-04-08T13:50:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-08T13:50:16Z"}, "message": "Rollup merge of #5409 - dtolnay:letunit, r=flip1995\n\nDowngrade let_unit_value to pedantic\n\nGiven that the false positive in #1502 is marked E-hard and I don't have much hope of it getting fixed, I think it would be wise to disable this lint by default. I have had to suppress this lint in every substantial codebase (\\>100k line) I have worked in. Any time this lint is being triggered, it's always the false positive case.\n\nThe motivation for this lint is documented as:\n\n> A unit value cannot usefully be used anywhere. So binding one is kind of pointless.\n\nwith this example:\n\n> ```rust\n> let x = {\n>     1;\n> };\n> ```\n\nSure, but the author would find this out via an unused_variable warning or from `x` not being the type that they need further down. If there ends up being a type error on `x`, clippy's advice isn't going to help get the code compiling because it can only run if the code already compiles.\n\nchangelog: Remove let_unit_value from default set of enabled lints", "tree": {"sha": "61c1f691821dbc9518d25fd18d55f2a78d391810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c1f691821dbc9518d25fd18d55f2a78d391810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/935b45db61e9906c8371718af3fca101dc3ce376", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejdaYCRBK7hj4Ov3rIwAAdHIIAHRCSKGlk2Q2KqN1LA+yMcRS\nKRLchria/gvXtwNc8ETmb+44wEemqcSnX6n1FTON9+/rMkClCzF/H4xBAt453wud\nlA+4FQ/mKiI/TyUSN4Z9bXtTatGoQvXzWJWp2X/eTEklGs6RzqDAlWAYoe9SwtSR\nDsBg/QdoXNovm6zUzgx8upW4YEhL9hXcC8SYaXC8VNiJJuk7wswlEINZg54XBlvO\n320U8l+t+hCoNeblxgcDYAptg8Fm9ib/xm6YoltsLensdutWghfZf7LTIscaXWG+\nJY73n+uSc0fLo7kC6wdJzQu5GUrRwGf3V0i0C7UNvuuv+sYSPi2KbIjDVFR27uc=\n=moeU\n-----END PGP SIGNATURE-----\n", "payload": "tree 61c1f691821dbc9518d25fd18d55f2a78d391810\nparent 46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80\nparent adcaa1b86ddbf51659d5f7e4e7471427682649ba\nauthor Philipp Krones <hello@philkrones.com> 1586353816 +0200\ncommitter GitHub <noreply@github.com> 1586353816 +0200\n\nRollup merge of #5409 - dtolnay:letunit, r=flip1995\n\nDowngrade let_unit_value to pedantic\n\nGiven that the false positive in #1502 is marked E-hard and I don't have much hope of it getting fixed, I think it would be wise to disable this lint by default. I have had to suppress this lint in every substantial codebase (\\>100k line) I have worked in. Any time this lint is being triggered, it's always the false positive case.\n\nThe motivation for this lint is documented as:\n\n> A unit value cannot usefully be used anywhere. So binding one is kind of pointless.\n\nwith this example:\n\n> ```rust\n> let x = {\n>     1;\n> };\n> ```\n\nSure, but the author would find this out via an unused_variable warning or from `x` not being the type that they need further down. If there ends up being a type error on `x`, clippy's advice isn't going to help get the code compiling because it can only run if the code already compiles.\n\nchangelog: Remove let_unit_value from default set of enabled lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/935b45db61e9906c8371718af3fca101dc3ce376", "html_url": "https://github.com/rust-lang/rust/commit/935b45db61e9906c8371718af3fca101dc3ce376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/935b45db61e9906c8371718af3fca101dc3ce376/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80", "html_url": "https://github.com/rust-lang/rust/commit/46337cb6a8bfe37474f4b7ef7bd0a99b36ce0b80"}, {"sha": "adcaa1b86ddbf51659d5f7e4e7471427682649ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/adcaa1b86ddbf51659d5f7e4e7471427682649ba", "html_url": "https://github.com/rust-lang/rust/commit/adcaa1b86ddbf51659d5f7e4e7471427682649ba"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "c1b629305f9a544723422152c1d9a2d841d8a3ad", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/935b45db61e9906c8371718af3fca101dc3ce376/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935b45db61e9906c8371718af3fca101dc3ce376/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=935b45db61e9906c8371718af3fca101dc3ce376", "patch": "@@ -1131,6 +1131,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::CAST_PRECISION_LOSS),\n         LintId::of(&types::CAST_SIGN_LOSS),\n         LintId::of(&types::INVALID_UPCAST_COMPARISONS),\n+        LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&types::LINKEDLIST),\n         LintId::of(&types::OPTION_OPTION),\n         LintId::of(&unicode::NON_ASCII_LITERAL),\n@@ -1382,7 +1383,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(&types::IMPLICIT_HASHER),\n-        LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&types::TYPE_COMPLEXITY),\n         LintId::of(&types::UNIT_ARG),\n@@ -1495,7 +1495,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(&types::IMPLICIT_HASHER),\n-        LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),"}, {"sha": "e2b16079f8f5de0c8fa264fcefeb60f3c4b80119", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/935b45db61e9906c8371718af3fca101dc3ce376/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935b45db61e9906c8371718af3fca101dc3ce376/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=935b45db61e9906c8371718af3fca101dc3ce376", "patch": "@@ -593,7 +593,7 @@ declare_clippy_lint! {\n     /// };\n     /// ```\n     pub LET_UNIT_VALUE,\n-    style,\n+    pedantic,\n     \"creating a `let` binding to a value of unit type, which usually can't be used afterwards\"\n }\n "}, {"sha": "0ecccd33962b2f415f03c792449e4ba7fb77f7f8", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/935b45db61e9906c8371718af3fca101dc3ce376/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935b45db61e9906c8371718af3fca101dc3ce376/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=935b45db61e9906c8371718af3fca101dc3ce376", "patch": "@@ -999,7 +999,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"let_unit_value\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"creating a `let` binding to a value of unit type, which usually can\\'t be used afterwards\",\n         deprecation: None,\n         module: \"types\","}, {"sha": "484aa72d59a25a43c6276ebf4d48dd7ba12e7c01", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=935b45db61e9906c8371718af3fca101dc3ce376", "patch": "@@ -88,7 +88,6 @@ very_unsafe!();\n // we don't lint code from external macros\n undocd_unsafe!();\n \n-#[allow(clippy::let_unit_value)]\n fn main() {\n     unsafe {\n         you_dont_see_me();"}, {"sha": "538fa1ed9cb021341511fbe33f59fb34acc5df29", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=935b45db61e9906c8371718af3fca101dc3ce376", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n+#![allow(clippy::unit_arg, unused_must_use)]\n \n fn main() {\n     Ok::<i32, i32>(42).is_ok();"}, {"sha": "34d2cd62e54e92db0439cf44d2765c4900b2593d", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=935b45db61e9906c8371718af3fca101dc3ce376", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n+#![allow(clippy::unit_arg, unused_must_use)]\n \n fn main() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}"}, {"sha": "f42b884e0f0e546ce0bb95dd5793fbb85dda4e34", "filename": "tests/ui/uninit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.rs?ref=935b45db61e9906c8371718af3fca101dc3ce376", "patch": "@@ -2,7 +2,6 @@\n \n use std::mem::MaybeUninit;\n \n-#[allow(clippy::let_unit_value)]\n fn main() {\n     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n "}, {"sha": "a37233ecddaee0dd4181bb95e80ecc347d9210e2", "filename": "tests/ui/uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Funinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/935b45db61e9906c8371718af3fca101dc3ce376/tests%2Fui%2Funinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.stderr?ref=935b45db61e9906c8371718af3fca101dc3ce376", "patch": "@@ -1,13 +1,13 @@\n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:7:29\n+  --> $DIR/uninit.rs:6:29\n    |\n LL |     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::uninit_assumed_init)]` on by default\n \n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:10:31\n+  --> $DIR/uninit.rs:9:31\n    |\n LL |     let _: [u8; 0] = unsafe { MaybeUninit::uninit().assume_init() };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}