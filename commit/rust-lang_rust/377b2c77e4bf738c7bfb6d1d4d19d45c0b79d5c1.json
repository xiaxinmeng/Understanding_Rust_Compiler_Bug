{"sha": "377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3N2IyYzc3ZTRiZjczOGM3YmZiNmQxZDRkMTlkNDVjMGI3OWQ1YzE=", "commit": {"author": {"name": "Micah Chalmer", "email": "micah@micahchalmer.net", "date": "2013-09-06T02:38:37Z"}, "committer": {"name": "Micah Chalmer", "email": "micah@micahchalmer.net", "date": "2013-09-06T05:02:20Z"}, "message": "Add paragraph fill and auto-fill for multi-line comments", "tree": {"sha": "6525302a1276200a58b664687bc8b032b1539ecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6525302a1276200a58b664687bc8b032b1539ecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1", "html_url": "https://github.com/rust-lang/rust/commit/377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1/comments", "author": {"login": "MicahChalmer", "id": 698400, "node_id": "MDQ6VXNlcjY5ODQwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/698400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicahChalmer", "html_url": "https://github.com/MicahChalmer", "followers_url": "https://api.github.com/users/MicahChalmer/followers", "following_url": "https://api.github.com/users/MicahChalmer/following{/other_user}", "gists_url": "https://api.github.com/users/MicahChalmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicahChalmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicahChalmer/subscriptions", "organizations_url": "https://api.github.com/users/MicahChalmer/orgs", "repos_url": "https://api.github.com/users/MicahChalmer/repos", "events_url": "https://api.github.com/users/MicahChalmer/events{/privacy}", "received_events_url": "https://api.github.com/users/MicahChalmer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MicahChalmer", "id": 698400, "node_id": "MDQ6VXNlcjY5ODQwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/698400?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MicahChalmer", "html_url": "https://github.com/MicahChalmer", "followers_url": "https://api.github.com/users/MicahChalmer/followers", "following_url": "https://api.github.com/users/MicahChalmer/following{/other_user}", "gists_url": "https://api.github.com/users/MicahChalmer/gists{/gist_id}", "starred_url": "https://api.github.com/users/MicahChalmer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MicahChalmer/subscriptions", "organizations_url": "https://api.github.com/users/MicahChalmer/orgs", "repos_url": "https://api.github.com/users/MicahChalmer/repos", "events_url": "https://api.github.com/users/MicahChalmer/events{/privacy}", "received_events_url": "https://api.github.com/users/MicahChalmer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ac7c5cc5a8589061edca64f0dead59787265e9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac7c5cc5a8589061edca64f0dead59787265e9c", "html_url": "https://github.com/rust-lang/rust/commit/1ac7c5cc5a8589061edca64f0dead59787265e9c"}], "stats": {"total": 124, "additions": 123, "deletions": 1}, "files": [{"sha": "e809a3431eb7f6a8047f69afe252668e4189f4f3", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 123, "deletions": 1, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=377b2c77e4bf738c7bfb6d1d4d19d45c0b79d5c1", "patch": "@@ -209,6 +209,114 @@\n \n          collect `(,(rust-re-item-def item) 1 ,face))))\n \n+(defun rust-fill-prefix-for-comment-start (line-start)\n+  \"Determine what to use for `fill-prefix' based on what is at the beginning of a line.\"\n+  (let ((result \n+         ;; Replace /* with same number of spaces\n+         (replace-regexp-in-string\n+          \"\\\\(?:/\\\\*+\\\\)[!*]\" \n+          (lambda (s)\n+            ;; We want the * to line up with the first * of the comment start\n+            (concat (make-string (- (length s) 2) ?\\x20) \"*\"))\n+          line-start)))\n+       ;; Make sure we've got at least one space at the end\n+    (if (not (= (aref result (- (length result) 1)) ?\\x20))\n+        (setq result (concat result \" \")))\n+    result))\n+\n+(defun rust-in-comment-paragraph (body)\n+  ;; We might move the point to fill the next comment, but we don't want it\n+  ;; seeming to jump around on the user\n+  (save-excursion\n+    ;; If we're outside of a comment, with only whitespace and then a comment\n+    ;; in front, jump to the comment and prepare to fill it.\n+    (when (not (nth 4 (syntax-ppss)))\n+      (beginning-of-line)\n+      (when (looking-at (concat \"[[:space:]\\n]*\" comment-start-skip))\n+        (goto-char (match-end 0))))\n+\n+    ;; We need this when we're moving the point around and then checking syntax\n+    ;; while doing paragraph fills, because the cache it uses isn't always\n+    ;; invalidated during this.\n+    (syntax-ppss-flush-cache 1)\n+    ;; If we're at the beginning of a comment paragraph with nothing but\n+    ;; whitespace til the next line, jump to the next line so that we use the\n+    ;; existing prefix to figure out what the new prefix should be, rather than\n+    ;; inferring it from the comment start.\n+    (let ((next-bol (line-beginning-position 2)))\n+      (while (save-excursion\n+              (end-of-line)\n+              (syntax-ppss-flush-cache 1)\n+              (and (nth 4 (syntax-ppss))\n+                   (save-excursion \n+                     (beginning-of-line)\n+                     (looking-at paragraph-start))\n+                   (looking-at \"[[:space:]]*$\")\n+                   (nth 4 (syntax-ppss next-bol))))\n+        (goto-char next-bol)))\n+\n+    (syntax-ppss-flush-cache 1)\n+    ;; If we're on the last line of a multiline-style comment that started\n+    ;; above, back up one line so we don't mistake the * of the */ that ends\n+    ;; the comment for a prefix.\n+    (when (save-excursion\n+            (and (nth 4 (syntax-ppss (line-beginning-position 1)))\n+                 (looking-at \"[[:space:]]*\\\\*/\")))\n+      (goto-char (line-end-position 0)))\n+    (funcall body)))\n+\n+(defun rust-with-comment-fill-prefix (body)\n+  (let*\n+      ((line-string (buffer-substring-no-properties \n+                     (line-beginning-position) (line-end-position)))\n+       (line-comment-start\n+        (when (nth 4 (syntax-ppss)) \n+          (cond\n+           ;; If we're inside the comment and see a * prefix, use it\n+           ((string-match \"^\\\\([[:space:]]*\\\\*+[[:space:]]*\\\\)\"\n+                          line-string)\n+            (match-string 1 line-string))\n+           ;; If we're at the start of a comment, figure out what prefix\n+           ;; to use for the subsequent lines after it\n+           ((string-match (concat \"[[:space:]]*\" comment-start-skip) line-string)\n+            (rust-fill-prefix-for-comment-start \n+             (match-string 0 line-string))))))\n+       (fill-prefix \n+        (or line-comment-start\n+            fill-prefix)))\n+    (funcall body)))\n+\n+(defun rust-find-fill-prefix ()\n+  (rust-with-comment-fill-prefix (lambda () fill-prefix)))\n+\n+(defun rust-fill-paragraph (&rest args)\n+  \"Special wrapping for `fill-paragraph' to handle multi-line comments with a * prefix on each line.\"\n+  (rust-in-comment-paragraph\n+   (lambda () \n+     (rust-with-comment-fill-prefix\n+      (lambda ()\n+        (let\n+            ((fill-paragraph-function\n+              (if (not (eq fill-paragraph-function 'rust-fill-paragraph))\n+                  fill-paragraph-function)))\n+          (apply 'fill-paragraph args)\n+          t))))))\n+\n+(defun rust-do-auto-fill (&rest args)\n+  \"Special wrapping for `do-auto-fill' to handle multi-line comments with a * prefix on each line.\"\n+  (rust-with-comment-fill-prefix\n+   (lambda ()\n+     (apply 'do-auto-fill args)\n+     t)))\n+\n+(defun rust-fill-forward-paragraph (arg)\n+  ;; This is to work around some funny behavior when a paragraph separator is\n+  ;; at the very top of the file and there is a fill prefix.\n+  (let ((fill-prefix nil)) (forward-paragraph arg)))\n+\n+(defun rust-comment-indent-new-line (&optional arg)\n+  (rust-with-comment-fill-prefix\n+   (lambda () (comment-indent-new-line arg))))\n \n ;; For compatibility with Emacs < 24, derive conditionally\n (defalias 'rust-parent-mode\n@@ -234,7 +342,21 @@\n   ;; Misc\n   (set (make-local-variable 'comment-start) \"// \")\n   (set (make-local-variable 'comment-end)   \"\")\n-  (set (make-local-variable 'indent-tabs-mode) nil))\n+  (set (make-local-variable 'indent-tabs-mode) nil)\n+\n+  ;; Allow paragraph fills for comments\n+  (set (make-local-variable 'comment-start-skip) \n+       \"\\\\(?://[/!]*\\\\|/\\\\*[*!]?\\\\)[[:space:]]*\")\n+  (set (make-local-variable 'paragraph-start)\n+       (concat \"[[:space:]]*\\\\(?:\" comment-start-skip \"\\\\|\\\\*/?[[:space:]]*\\\\|\\\\)$\"))\n+  (set (make-local-variable 'paragraph-separate) paragraph-start)\n+  (set (make-local-variable 'normal-auto-fill-function) 'rust-do-auto-fill)\n+  (set (make-local-variable 'fill-paragraph-function) 'rust-fill-paragraph)\n+  (set (make-local-variable 'fill-forward-paragraph-function) 'rust-fill-forward-paragraph)\n+  (set (make-local-variable 'adaptive-fill-function) 'rust-find-fill-prefix)\n+  (set (make-local-variable 'comment-multi-line) t)\n+  (set (make-local-variable 'comment-line-break-function) 'rust-comment-indent-new-line)\n+  )\n \n \n ;;;###autoload"}]}