{"sha": "16329b0ad3610b47a97a051df88405b1587238bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MzI5YjBhZDM2MTBiNDdhOTdhMDUxZGY4ODQwNWIxNTg3MjM4YmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T23:12:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T23:12:23Z"}, "message": "Auto merge of #57063 - kennytm:rollup, r=kennytm\n\nRollup of 25 pull requests\n\nSuccessful merges:\n\n - #56802 (Add DoubleEndedIterator::nth_back)\n - #56909 (static eval: Do not ICE on layout size overflow)\n - #56914 (Ignore ui/target-feature-gate on sparc, sparc64, powerpc, powerpc64 and powerpc64le)\n - #56919 (Remove a wrong multiplier on relocation offset computation)\n - #56933 (Add --progress to git submodule commands in x.py)\n - #56936 (rename div_euc -> div_euclid, and mod_euc -> rem_euclid)\n - #56941 (deny intra-doc link resolution failures in libstd)\n - #56945 (Fix rustdoc-js tests)\n - #56967 (Replace current crate's searchIndex when regenerating)\n - #56970 (Mem uninit doc ptr drop)\n - #56973 (make basic CTFE tracing available on release builds)\n - #56979 (Adding unwinding support for x86_64_fortanix_unknown_sgx target.)\n - #56981 (miri: allocation is infallible)\n - #56984 (A few tweaks to dropck_outlives)\n - #56989 (Fix compiletest `trim` deprecation warnings)\n - #56992 (suggest similar lint names for unknown lints)\n - #57002 (Stabilize Vec(Deque)::resize_with)\n - #57011 (rustdoc: add new CLI flag to load static files from a different location)\n - #57027 (Optimize away a move)\n - #57034 (Inline tweaks)\n - #57039 (Update migrate warning wording.)\n - #57040 (Fix feature gate to point to 1.32.0 for `path_from_str`)\n - #57049 (Stabilize #[repr(packed(N))])\n - #57050 (Fixed typo in HashMap documentation)\n - #57052 (Fix stabilization version numbers (exhaustive_integer_patterns + macro_literal_matcher))", "tree": {"sha": "7c92ea6763b3ad9db4d9e87680fab9ca929553c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c92ea6763b3ad9db4d9e87680fab9ca929553c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16329b0ad3610b47a97a051df88405b1587238bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16329b0ad3610b47a97a051df88405b1587238bd", "html_url": "https://github.com/rust-lang/rust/commit/16329b0ad3610b47a97a051df88405b1587238bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16329b0ad3610b47a97a051df88405b1587238bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d3e909e4e68259e15ca2908ff9e854f0a68bbec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3e909e4e68259e15ca2908ff9e854f0a68bbec", "html_url": "https://github.com/rust-lang/rust/commit/2d3e909e4e68259e15ca2908ff9e854f0a68bbec"}, {"sha": "628c6d89e16cc00ecccb83129f30eaa9d89af9ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/628c6d89e16cc00ecccb83129f30eaa9d89af9ff", "html_url": "https://github.com/rust-lang/rust/commit/628c6d89e16cc00ecccb83129f30eaa9d89af9ff"}], "stats": {"total": 1319, "additions": 869, "deletions": 450}, "files": [{"sha": "09c87fdd1a84c7fd90e29eb9c34b5532126f961b", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -678,10 +678,10 @@ def update_submodule(self, module, checked_out, recorded_submodules):\n \n         print(\"Updating submodule\", module)\n \n-        run([\"git\", \"submodule\", \"-q\", \"sync\", module],\n+        run([\"git\", \"submodule\", \"-q\", \"sync\", \"--progress\", module],\n             cwd=self.rust_root, verbose=self.verbose)\n         run([\"git\", \"submodule\", \"update\",\n-            \"--init\", \"--recursive\", module],\n+            \"--init\", \"--recursive\", \"--progress\", module],\n             cwd=self.rust_root, verbose=self.verbose)\n         run([\"git\", \"reset\", \"-q\", \"--hard\"],\n             cwd=module_path, verbose=self.verbose)"}, {"sha": "905b06465340a7845e4b445adc67b0cb94fbc475", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -402,3 +402,18 @@ Using `index-page` option enables `enable-index-page` option as well.\n ### `--enable-index-page`: generate a default index page for docs\n \n This feature allows the generation of a default index-page which lists the generated crates.\n+\n+### `--static-root-path`: control how static files are loaded in HTML output\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --static-root-path '/cache/'\n+```\n+\n+This flag controls how rustdoc links to its static files on HTML pages. If you're hosting a lot of\n+crates' docs generated by the same version of rustdoc, you can use this flag to cache rustdoc's CSS,\n+JavaScript, and font files in a single location, rather than duplicating it once per \"doc root\"\n+(grouping of crate docs generated into the same output directory, like with `cargo doc`). Per-crate\n+files like the search index will still load from the documentation root, but anything that gets\n+renamed with `--resource-suffix` will load from the given path."}, {"sha": "2dd763d04b0abf6e03e00eb075200a24931f7875", "filename": "src/doc/unstable-book/src/language-features/repr-packed.md", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d3e909e4e68259e15ca2908ff9e854f0a68bbec/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-packed.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d3e909e4e68259e15ca2908ff9e854f0a68bbec/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-packed.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frepr-packed.md?ref=2d3e909e4e68259e15ca2908ff9e854f0a68bbec", "patch": "@@ -1,8 +0,0 @@\n-# `repr_packed`\n-\n-The tracking issue for this feature is [#33158]\n-\n-[#33158]: https://github.com/rust-lang/rust/issues/33158\n-\n-------------------------\n-"}, {"sha": "553c6d7291a9de64bd7694cd3812edc0609c585a", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1897,8 +1897,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_resize_with)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1917,7 +1915,7 @@ impl<T> VecDeque<T> {\n     /// buf.resize_with(5, || { state += 1; state });\n     /// assert_eq!(buf, [5, 10, 101, 102, 103]);\n     /// ```\n-    #[unstable(feature = \"vec_resize_with\", issue = \"41758\")]\n+    #[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]\n     pub fn resize_with(&mut self, new_len: usize, generator: impl FnMut()->T) {\n         let len = self.len();\n "}, {"sha": "afa7a6f919d26d9210687cfd759a1b5261617f0a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -72,6 +72,8 @@\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n #![needs_allocator]\n+\n+#![deny(intra_doc_link_resolution_failure)]\n #![deny(missing_debug_implementations)]\n \n #![cfg_attr(not(test), feature(fn_traits))]"}, {"sha": "65a610b9d1e92b42bafe31dac319746fceb5f4d2", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -843,6 +843,8 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// drop(foo);    // Doesn't print anything\n     /// drop(foo2);   // Prints \"dropped!\"\n     /// ```\n+    ///\n+    /// [`Weak`]: ../../std/rc/struct.Weak.html\n     fn drop(&mut self) {\n         unsafe {\n             self.dec_strong();\n@@ -1422,9 +1424,10 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n     /// Constructs a new `Weak<T>`, allocating memory for `T` without initializing\n-    /// it. Calling [`upgrade`][Weak::upgrade] on the return value always gives [`None`].\n+    /// it. Calling [`upgrade`] on the return value always gives [`None`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html\n+    /// [`upgrade`]: ../../std/rc/struct.Weak.html#method.upgrade\n     ///\n     /// # Examples\n     ///"}, {"sha": "948c36117a301414abf6c3496bf5d164150964c7", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -955,6 +955,8 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n     /// drop(foo);    // Doesn't print anything\n     /// drop(foo2);   // Prints \"dropped!\"\n     /// ```\n+    ///\n+    /// [`Weak`]: ../../std/sync/struct.Weak.html\n     #[inline]\n     fn drop(&mut self) {\n         // Because `fetch_sub` is already atomic, we do not need to synchronize\n@@ -1222,10 +1224,11 @@ impl<T: ?Sized> Clone for Weak<T> {\n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n     /// Constructs a new `Weak<T>`, without allocating memory.\n-    /// Calling [`upgrade`][Weak::upgrade] on the return value always\n+    /// Calling [`upgrade`] on the return value always\n     /// gives [`None`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`upgrade`]: ../../std/sync/struct.Weak.html#method.upgrade\n     ///\n     /// # Examples\n     ///"}, {"sha": "b78e71331a97f66457351516e6b579863137f4d7", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1241,8 +1241,6 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_resize_with)]\n-    ///\n     /// let mut vec = vec![1, 2, 3];\n     /// vec.resize_with(5, Default::default);\n     /// assert_eq!(vec, [1, 2, 3, 0, 0]);\n@@ -1255,7 +1253,7 @@ impl<T> Vec<T> {\n     ///\n     /// [`resize`]: #method.resize\n     /// [`Clone`]: ../../std/clone/trait.Clone.html\n-    #[unstable(feature = \"vec_resize_with\", issue = \"41758\")]\n+    #[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]\n     pub fn resize_with<F>(&mut self, new_len: usize, f: F)\n         where F: FnMut() -> T\n     {"}, {"sha": "e493a3804376ffab9588a482ee078e050cca74a7", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -429,6 +429,9 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n \n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<<I as Iterator>::Item> { self.iter.nth_back(n) }\n+\n     fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n@@ -461,6 +464,9 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> { self.iter.nth(n) }\n+\n     fn try_rfold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {"}, {"sha": "727a60e3596944d0294acb80952268f948c6d7fe", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -427,6 +427,62 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n \n+    /// Returns the `n`th element from the end of the iterator.\n+    ///\n+    /// This is essentially the reversed version of [`nth`]. Although like most indexing\n+    /// operations, the count starts from zero, so `nth_back(0)` returns the first value fro\n+    /// the end, `nth_back(1)` the second, and so on.\n+    ///\n+    /// Note that all elements between the end and the returned element will be\n+    /// consumed, including the returned element. This also means that calling\n+    /// `nth_back(0)` multiple times on the same iterator will return different\n+    /// elements.\n+    ///\n+    /// `nth_back()` will return [`None`] if `n` is greater than or equal to the length of the\n+    /// iterator.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`nth`]: ../../std/iter/trait.Iterator.html#method.nth\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_nth_back)]\n+    /// let a = [1, 2, 3];\n+    /// assert_eq!(a.iter().nth_back(2), Some(&1));\n+    /// ```\n+    ///\n+    /// Calling `nth_back()` multiple times doesn't rewind the iterator:\n+    ///\n+    /// ```\n+    /// #![feature(iter_nth_back)]\n+    /// let a = [1, 2, 3];\n+    ///\n+    /// let mut iter = a.iter();\n+    ///\n+    /// assert_eq!(iter.nth_back(1), Some(&2));\n+    /// assert_eq!(iter.nth_back(1), None);\n+    /// ```\n+    ///\n+    /// Returning `None` if there are less than `n + 1` elements:\n+    ///\n+    /// ```\n+    /// #![feature(iter_nth_back)]\n+    /// let a = [1, 2, 3];\n+    /// assert_eq!(a.iter().nth_back(10), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_nth_back\", issue = \"56995\")]\n+    fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n+        for x in self.rev() {\n+            if n == 0 { return Some(x) }\n+            n -= 1;\n+        }\n+        None\n+    }\n+\n     /// This is the reverse version of [`try_fold()`]: it takes elements\n     /// starting from the back of the iterator.\n     ///\n@@ -461,8 +517,11 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n-    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n-        Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n+    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> R,\n+        R: Try<Ok=B>\n     {\n         let mut accum = init;\n         while let Some(x) = self.next_back() {\n@@ -524,8 +583,10 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n-    fn rfold<B, F>(mut self, accum: B, mut f: F) -> B where\n-        Self: Sized, F: FnMut(B, Self::Item) -> B,\n+    fn rfold<B, F>(mut self, accum: B, mut f: F) -> B\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> B,\n     {\n         self.try_rfold(accum, move |acc, x| Ok::<B, !>(f(acc, x))).unwrap()\n     }\n@@ -574,7 +635,8 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfind\", since = \"1.27.0\")]\n-    fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n+    fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item>\n+    where\n         Self: Sized,\n         P: FnMut(&Self::Item) -> bool\n     {\n@@ -587,7 +649,12 @@ pub trait DoubleEndedIterator: Iterator {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n-    fn next_back(&mut self) -> Option<I::Item> { (**self).next_back() }\n+    fn next_back(&mut self) -> Option<I::Item> {\n+        (**self).next_back()\n+    }\n+    fn nth_back(&mut self, n: usize) -> Option<I::Item> {\n+        (**self).nth_back(n)\n+    }\n }\n \n /// An iterator that knows its exact length."}, {"sha": "2124458dc559720b90457b8c1d62cafe64c15b86", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -71,6 +71,7 @@\n \n #![no_core]\n #![deny(missing_docs)]\n+#![deny(intra_doc_link_resolution_failure)]\n #![deny(missing_debug_implementations)]\n \n #![feature(allow_internal_unstable)]"}, {"sha": "87dde9066019cae96b8aca6cc763fa4257e8d9ff", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -530,6 +530,12 @@ pub unsafe fn zeroed<T>() -> T {\n /// it goes out of scope (and therefore would be dropped). Note that this\n /// includes a `panic` occurring and unwinding the stack suddenly.\n ///\n+/// If you partially initialize an array, you may need to use\n+/// [`ptr::drop_in_place`][drop_in_place] to remove the elements you have fully\n+/// initialized followed by [`mem::forget`][mem_forget] to prevent drop running\n+/// on the array. If a partially allocated array is dropped this will lead to\n+/// undefined behaviour.\n+///\n /// # Examples\n ///\n /// Here's how to safely initialize an array of [`Vec`]s.\n@@ -583,11 +589,44 @@ pub unsafe fn zeroed<T>() -> T {\n /// println!(\"{:?}\", &data[0]);\n /// ```\n ///\n+/// This example shows how to handle partially initialized arrays, which could\n+/// be found in low-level datastructures.\n+///\n+/// ```\n+/// use std::mem;\n+/// use std::ptr;\n+///\n+/// // Count the number of elements we have assigned.\n+/// let mut data_len: usize = 0;\n+/// let mut data: [String; 1000];\n+///\n+/// unsafe {\n+///     data = mem::uninitialized();\n+///\n+///     for elem in &mut data[0..500] {\n+///         ptr::write(elem, String::from(\"hello\"));\n+///         data_len += 1;\n+///     }\n+///\n+///     // For each item in the array, drop if we allocated it.\n+///     for i in &mut data[0..data_len] {\n+///         ptr::drop_in_place(i);\n+///     }\n+/// }\n+/// // Forget the data. If this is allowed to drop, you may see a crash such as:\n+/// // 'mem_uninit_test(2457,0x7fffb55dd380) malloc: *** error for object\n+/// // 0x7ff3b8402920: pointer being freed was not allocated'\n+/// mem::forget(data);\n+/// ```\n+///\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n /// [`vec!`]: ../../std/macro.vec.html\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n /// [ub]: ../../reference/behavior-considered-undefined.html\n /// [write]: ../ptr/fn.write.html\n+/// [drop_in_place]: ../ptr/fn.drop_in_place.html\n+/// [mem_zeroed]: fn.zeroed.html\n+/// [mem_forget]: fn.forget.html\n /// [copy]: ../intrinsics/fn.copy.html\n /// [copy_no]: ../intrinsics/fn.copy_nonoverlapping.html\n /// [`Drop`]: ../ops/trait.Drop.html\n@@ -984,6 +1023,9 @@ impl<T> ManuallyDrop<T> {\n     ///\n     /// This function semantically moves out the contained value without preventing further usage.\n     /// It is up to the user of this method to ensure that this container is not used again.\n+    ///\n+    /// [`ManuallyDrop::drop`]: #method.drop\n+    /// [`ManuallyDrop::into_inner`]: #method.into_inner\n     #[must_use = \"if you don't need the value, you can use `ManuallyDrop::drop` instead\"]\n     #[unstable(feature = \"manually_drop_take\", issue = \"55422\")]\n     #[inline]"}, {"sha": "7ffb81901c619d87d88f13407978431782b5b096", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 98, "deletions": 76, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -673,7 +673,7 @@ $EndFeature, \"\n         }\n \n         doc_comment! {\n-            concat!(\"Checked Euclidean division. Computes `self.div_euc(rhs)`,\n+            concat!(\"Checked Euclidean division. Computes `self.div_euclid(rhs)`,\n returning `None` if `rhs == 0` or the division results in overflow.\n \n # Examples\n@@ -683,17 +683,17 @@ Basic usage:\n ```\n #![feature(euclidean_division)]\n assert_eq!((\", stringify!($SelfT),\n-\"::min_value() + 1).checked_div_euc(-1), Some(\", stringify!($Max), \"));\n-assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euc(-1), None);\n-assert_eq!((1\", stringify!($SelfT), \").checked_div_euc(0), None);\n+\"::min_value() + 1).checked_div_euclid(-1), Some(\", stringify!($Max), \"));\n+assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euclid(-1), None);\n+assert_eq!((1\", stringify!($SelfT), \").checked_div_euclid(0), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n-            pub fn checked_div_euc(self, rhs: Self) -> Option<Self> {\n+            pub fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n-                    Some(self.div_euc(rhs))\n+                    Some(self.div_euclid(rhs))\n                 }\n             }\n         }\n@@ -726,8 +726,8 @@ $EndFeature, \"\n         }\n \n         doc_comment! {\n-            concat!(\"Checked Euclidean modulo. Computes `self.mod_euc(rhs)`, returning `None` if\n-`rhs == 0` or the division results in overflow.\n+            concat!(\"Checked Euclidean remainder. Computes `self.rem_euclid(rhs)`, returning `None`\n+if `rhs == 0` or the division results in overflow.\n \n # Examples\n \n@@ -737,17 +737,17 @@ Basic usage:\n #![feature(euclidean_division)]\n use std::\", stringify!($SelfT), \";\n \n-assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(2), Some(1));\n-assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(0), None);\n-assert_eq!(\", stringify!($SelfT), \"::MIN.checked_mod_euc(-1), None);\n+assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n+assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n+assert_eq!(\", stringify!($SelfT), \"::MIN.checked_rem_euclid(-1), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n-            pub fn checked_mod_euc(self, rhs: Self) -> Option<Self> {\n+            pub fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 || (self == Self::min_value() && rhs == -1) {\n                     None\n                 } else {\n-                    Some(self.mod_euc(rhs))\n+                    Some(self.rem_euclid(rhs))\n                 }\n             }\n         }\n@@ -1089,7 +1089,7 @@ $EndFeature, \"\n         }\n \n         doc_comment! {\n-            concat!(\"Wrapping Euclidean division. Computes `self.div_euc(rhs)`,\n+            concat!(\"Wrapping Euclidean division. Computes `self.div_euclid(rhs)`,\n wrapping around at the boundary of the type.\n \n Wrapping will only occur in `MIN / -1` on a signed type (where `MIN` is the negative minimal value\n@@ -1106,13 +1106,13 @@ Basic usage:\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euc(10), 10);\n-assert_eq!((-128i8).wrapping_div_euc(-1), -128);\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n+assert_eq!((-128i8).wrapping_div_euclid(-1), -128);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n-            pub fn wrapping_div_euc(self, rhs: Self) -> Self {\n-                self.overflowing_div_euc(rhs).0\n+            pub fn wrapping_div_euclid(self, rhs: Self) -> Self {\n+                self.overflowing_div_euclid(rhs).0\n             }\n         }\n \n@@ -1145,8 +1145,8 @@ $EndFeature, \"\n         }\n \n         doc_comment! {\n-            concat!(\"Wrapping Euclidean modulo. Computes `self.mod_euc(rhs)`, wrapping around at the\n-boundary of the type.\n+            concat!(\"Wrapping Euclidean remainder. Computes `self.rem_euclid(rhs)`, wrapping around\n+at the boundary of the type.\n \n Wrapping will only occur in `MIN % -1` on a signed type (where `MIN` is the negative minimal value\n for the type). In this case, this method returns 0.\n@@ -1161,13 +1161,13 @@ Basic usage:\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(100\", stringify!($SelfT), \".wrapping_mod_euc(10), 0);\n-assert_eq!((-128i8).wrapping_mod_euc(-1), 0);\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n+assert_eq!((-128i8).wrapping_rem_euclid(-1), 0);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n-            pub fn wrapping_mod_euc(self, rhs: Self) -> Self {\n-                self.overflowing_mod_euc(rhs).0\n+            pub fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n+                self.overflowing_rem_euclid(rhs).0\n             }\n         }\n \n@@ -1442,7 +1442,7 @@ $EndFeature, \"\n         }\n \n         doc_comment! {\n-            concat!(\"Calculates the quotient of Euclidean division `self.div_euc(rhs)`.\n+            concat!(\"Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.\n \n Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\n occur. If an overflow would occur then `self` is returned.\n@@ -1459,17 +1459,17 @@ Basic usage:\n #![feature(euclidean_division)]\n use std::\", stringify!($SelfT), \";\n \n-assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euc(2), (2, false));\n-assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euc(-1), (\", stringify!($SelfT),\n+assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n+assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euclid(-1), (\", stringify!($SelfT),\n \"::MIN, true));\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n-            pub fn overflowing_div_euc(self, rhs: Self) -> (Self, bool) {\n+            pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (self, true)\n                 } else {\n-                    (self.div_euc(rhs), false)\n+                    (self.div_euclid(rhs), false)\n                 }\n             }\n         }\n@@ -1508,7 +1508,7 @@ $EndFeature, \"\n \n \n         doc_comment! {\n-            concat!(\"Calculates the remainder `self.mod_euc(rhs)` by Euclidean division.\n+            concat!(\"Overflowing Euclidean remainder. Calculates `self.rem_euclid(rhs)`.\n \n Returns a tuple of the remainder after dividing along with a boolean indicating whether an\n arithmetic overflow would occur. If an overflow would occur then 0 is returned.\n@@ -1525,16 +1525,16 @@ Basic usage:\n #![feature(euclidean_division)]\n use std::\", stringify!($SelfT), \";\n \n-assert_eq!(5\", stringify!($SelfT), \".overflowing_mod_euc(2), (1, false));\n-assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_mod_euc(-1), (0, true));\n+assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n+assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_rem_euclid(-1), (0, true));\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n-            pub fn overflowing_mod_euc(self, rhs: Self) -> (Self, bool) {\n+            pub fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n                 if self == Self::min_value() && rhs == -1 {\n                     (0, true)\n                 } else {\n-                    (self.mod_euc(rhs), false)\n+                    (self.rem_euclid(rhs), false)\n                 }\n             }\n         }\n@@ -1739,9 +1739,13 @@ $EndFeature, \"\n         doc_comment! {\n             concat!(\"Calculates the quotient of Euclidean division of `self` by `rhs`.\n \n-This computes the integer `n` such that `self = n * rhs + self.mod_euc(rhs)`.\n+This computes the integer `n` such that `self = n * rhs + self.rem_euclid(rhs)`,\n+with `0 <= self.rem_euclid(rhs) < rhs`.\n+\n In other words, the result is `self / rhs` rounded to the integer `n`\n such that `self >= n * rhs`.\n+If `self > 0`, this is equal to round towards zero (the default in Rust);\n+if `self < 0`, this is equal to round towards +/- infinity.\n \n # Panics\n \n@@ -1756,15 +1760,15 @@ Basic usage:\n let a: \", stringify!($SelfT), \" = 7; // or any other integer type\n let b = 4;\n \n-assert_eq!(a.div_euc(b), 1); // 7 >= 4 * 1\n-assert_eq!(a.div_euc(-b), -1); // 7 >= -4 * -1\n-assert_eq!((-a).div_euc(b), -2); // -7 >= 4 * -2\n-assert_eq!((-a).div_euc(-b), 2); // -7 >= -4 * 2\n+assert_eq!(a.div_euclid(b), 1); // 7 >= 4 * 1\n+assert_eq!(a.div_euclid(-b), -1); // 7 >= -4 * -1\n+assert_eq!((-a).div_euclid(b), -2); // -7 >= 4 * -2\n+assert_eq!((-a).div_euclid(-b), 2); // -7 >= -4 * 2\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn div_euc(self, rhs: Self) -> Self {\n+            pub fn div_euclid(self, rhs: Self) -> Self {\n                 let q = self / rhs;\n                 if self % rhs < 0 {\n                     return if rhs > 0 { q - 1 } else { q + 1 }\n@@ -1775,9 +1779,11 @@ assert_eq!((-a).div_euc(-b), 2); // -7 >= -4 * 2\n \n \n         doc_comment! {\n-            concat!(\"Calculates the remainder `self mod rhs` by Euclidean division.\n+            concat!(\"Calculates the least nonnegative remainder of `self (mod rhs)`.\n \n-In particular, the result `n` satisfies `0 <= n < rhs.abs()`.\n+This is done as if by the Euclidean division algorithm -- given\n+`r = self.rem_euclid(rhs)`, `self = rhs * self.div_euclid(rhs) + r`, and\n+`0 <= r < abs(rhs)`.\n \n # Panics\n \n@@ -1792,15 +1798,15 @@ Basic usage:\n let a: \", stringify!($SelfT), \" = 7; // or any other integer type\n let b = 4;\n \n-assert_eq!(a.mod_euc(b), 3);\n-assert_eq!((-a).mod_euc(b), 1);\n-assert_eq!(a.mod_euc(-b), 3);\n-assert_eq!((-a).mod_euc(-b), 1);\n+assert_eq!(a.rem_euclid(b), 3);\n+assert_eq!((-a).rem_euclid(b), 1);\n+assert_eq!(a.rem_euclid(-b), 3);\n+assert_eq!((-a).rem_euclid(-b), 1);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn mod_euc(self, rhs: Self) -> Self {\n+            pub fn rem_euclid(self, rhs: Self) -> Self {\n                 let r = self % rhs;\n                 if r < 0 {\n                     if rhs < 0 {\n@@ -2611,7 +2617,7 @@ assert_eq!(1\", stringify!($SelfT), \".checked_div(0), None);\", $EndFeature, \"\n         }\n \n         doc_comment! {\n-            concat!(\"Checked Euclidean division. Computes `self.div_euc(rhs)`, returning `None`\n+            concat!(\"Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`\n if `rhs == 0`.\n \n # Examples\n@@ -2620,16 +2626,16 @@ Basic usage:\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(128\", stringify!($SelfT), \".checked_div(2), Some(64));\n-assert_eq!(1\", stringify!($SelfT), \".checked_div_euc(0), None);\n+assert_eq!(128\", stringify!($SelfT), \".checked_div_euclid(2), Some(64));\n+assert_eq!(1\", stringify!($SelfT), \".checked_div_euclid(0), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n-            pub fn checked_div_euc(self, rhs: Self) -> Option<Self> {\n+            pub fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n                     None\n                 } else {\n-                    Some(self.div_euc(rhs))\n+                    Some(self.div_euclid(rhs))\n                 }\n             }\n         }\n@@ -2659,7 +2665,7 @@ assert_eq!(5\", stringify!($SelfT), \".checked_rem(0), None);\", $EndFeature, \"\n         }\n \n         doc_comment! {\n-            concat!(\"Checked Euclidean modulo. Computes `self.mod_euc(rhs)`, returning `None`\n+            concat!(\"Checked Euclidean modulo. Computes `self.rem_euclid(rhs)`, returning `None`\n if `rhs == 0`.\n \n # Examples\n@@ -2668,16 +2674,16 @@ Basic usage:\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(2), Some(1));\n-assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(0), None);\n+assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(2), Some(1));\n+assert_eq!(5\", stringify!($SelfT), \".checked_rem_euclid(0), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n-            pub fn checked_mod_euc(self, rhs: Self) -> Option<Self> {\n+            pub fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n                 if rhs == 0 {\n                     None\n                 } else {\n-                    Some(self.mod_euc(rhs))\n+                    Some(self.rem_euclid(rhs))\n                 }\n             }\n         }\n@@ -2965,23 +2971,26 @@ Basic usage:\n         }\n \n         doc_comment! {\n-            concat!(\"Wrapping Euclidean division. Computes `self.div_euc(rhs)`.\n+            concat!(\"Wrapping Euclidean division. Computes `self.div_euclid(rhs)`.\n Wrapped division on unsigned types is just normal division.\n There's no way wrapping could ever happen.\n This function exists, so that all operations\n are accounted for in the wrapping operations.\n+Since, for the positive integers, all common\n+definitions of division are equal, this\n+is exactly equal to `self.wrapping_div(rhs)`.\n \n # Examples\n \n Basic usage:\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euc(10), 10);\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euclid(10), 10);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n-            pub fn wrapping_div_euc(self, rhs: Self) -> Self {\n+            pub fn wrapping_div_euclid(self, rhs: Self) -> Self {\n                 self / rhs\n             }\n         }\n@@ -3009,24 +3018,27 @@ Basic usage:\n         }\n \n         doc_comment! {\n-            concat!(\"Wrapping Euclidean modulo. Computes `self.mod_euc(rhs)`.\n+            concat!(\"Wrapping Euclidean modulo. Computes `self.rem_euclid(rhs)`.\n Wrapped modulo calculation on unsigned types is\n just the regular remainder calculation.\n There's no way wrapping could ever happen.\n This function exists, so that all operations\n are accounted for in the wrapping operations.\n+Since, for the positive integers, all common\n+definitions of division are equal, this\n+is exactly equal to `self.wrapping_rem(rhs)`.\n \n # Examples\n \n Basic usage:\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(100\", stringify!($SelfT), \".wrapping_mod_euc(10), 0);\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n-            pub fn wrapping_mod_euc(self, rhs: Self) -> Self {\n+            pub fn wrapping_rem_euclid(self, rhs: Self) -> Self {\n                 self % rhs\n             }\n         }\n@@ -3270,12 +3282,15 @@ Basic usage\n         }\n \n         doc_comment! {\n-            concat!(\"Calculates the quotient of Euclidean division `self.div_euc(rhs)`.\n+            concat!(\"Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.\n \n Returns a tuple of the divisor along with a boolean indicating\n whether an arithmetic overflow would occur. Note that for unsigned\n integers overflow never occurs, so the second value is always\n `false`.\n+Since, for the positive integers, all common\n+definitions of division are equal, this\n+is exactly equal to `self.overflowing_div(rhs)`.\n \n # Panics\n \n@@ -3287,11 +3302,11 @@ Basic usage\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euc(2), (2, false));\n+assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euclid(2), (2, false));\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n-            pub fn overflowing_div_euc(self, rhs: Self) -> (Self, bool) {\n+            pub fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n                 (self / rhs, false)\n             }\n         }\n@@ -3323,12 +3338,15 @@ Basic usage\n         }\n \n         doc_comment! {\n-            concat!(\"Calculates the remainder `self.mod_euc(rhs)` by Euclidean division.\n+            concat!(\"Calculates the remainder `self.rem_euclid(rhs)` as if by Euclidean division.\n \n Returns a tuple of the modulo after dividing along with a boolean\n indicating whether an arithmetic overflow would occur. Note that for\n unsigned integers overflow never occurs, so the second value is\n always `false`.\n+Since, for the positive integers, all common\n+definitions of division are equal, this operation\n+is exactly equal to `self.overflowing_rem(rhs)`.\n \n # Panics\n \n@@ -3340,11 +3358,11 @@ Basic usage\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(5\", stringify!($SelfT), \".overflowing_mod_euc(2), (1, false));\n+assert_eq!(5\", stringify!($SelfT), \".overflowing_rem_euclid(2), (1, false));\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n-            pub fn overflowing_mod_euc(self, rhs: Self) -> (Self, bool) {\n+            pub fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n                 (self % rhs, false)\n             }\n         }\n@@ -3511,42 +3529,46 @@ Basic usage:\n             doc_comment! {\n             concat!(\"Performs Euclidean division.\n \n-For unsigned types, this is just the same as `self / rhs`.\n+Since, for the positive integers, all common\n+definitions of division are equal, this\n+is exactly equal to `self / rhs`.\n \n # Examples\n \n Basic usage:\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(7\", stringify!($SelfT), \".div_euc(4), 1); // or any other integer type\n+assert_eq!(7\", stringify!($SelfT), \".div_euclid(4), 1); // or any other integer type\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn div_euc(self, rhs: Self) -> Self {\n+            pub fn div_euclid(self, rhs: Self) -> Self {\n                 self / rhs\n             }\n         }\n \n \n         doc_comment! {\n-            concat!(\"Calculates the remainder `self mod rhs` by Euclidean division.\n+            concat!(\"Calculates the least remainder of `self (mod rhs)`.\n \n-For unsigned types, this is just the same as `self % rhs`.\n+Since, for the positive integers, all common\n+definitions of division are equal, this\n+is exactly equal to `self % rhs`.\n \n # Examples\n \n Basic usage:\n \n ```\n #![feature(euclidean_division)]\n-assert_eq!(7\", stringify!($SelfT), \".mod_euc(4), 3); // or any other integer type\n+assert_eq!(7\", stringify!($SelfT), \".rem_euclid(4), 3); // or any other integer type\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n-            pub fn mod_euc(self, rhs: Self) -> Self {\n+            pub fn rem_euclid(self, rhs: Self) -> Self {\n                 self % rhs\n             }\n         }"}, {"sha": "193061457b5cd8617dab130ca60576f6849a67c4", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -877,6 +877,7 @@ impl<T> [T] {\n     /// assert_eq!(iter.remainder(), &['l']);\n     /// ```\n     ///\n+    /// [`chunks`]: #method.chunks\n     /// [`rchunks`]: #method.rchunks\n     /// [`chunks_exact`]: #method.chunks_exact\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -921,6 +922,7 @@ impl<T> [T] {\n     /// assert_eq!(v, &[0, 2, 2, 1, 1]);\n     /// ```\n     ///\n+    /// [`chunks_mut`]: #method.chunks_mut\n     /// [`rchunks_mut`]: #method.rchunks_mut\n     /// [`chunks_exact_mut`]: #method.chunks_exact_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]"}, {"sha": "b5633333d01706c3e82f38aac78a6d00245140ac", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1016,6 +1016,33 @@ fn test_iterator_nth() {\n     assert_eq!(v.iter().nth(v.len()), None);\n }\n \n+#[test]\n+fn test_iterator_nth_back() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().nth_back(i).unwrap(), &v[v.len() - 1 - i]);\n+    }\n+    assert_eq!(v.iter().nth_back(v.len()), None);\n+}\n+\n+#[test]\n+fn test_iterator_rev_nth_back() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().rev().nth_back(i).unwrap(), &v[i]);\n+    }\n+    assert_eq!(v.iter().rev().nth_back(v.len()), None);\n+}\n+\n+#[test]\n+fn test_iterator_rev_nth() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().rev().nth(i).unwrap(), &v[v.len() - 1 - i]);\n+    }\n+    assert_eq!(v.iter().rev().nth(v.len()), None);\n+}\n+\n #[test]\n fn test_iterator_last() {\n     let v: &[_] = &[0, 1, 2, 3, 4];"}, {"sha": "2377a4733678d1eb33e2b6b4fca2d07b7b9bfd78", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -19,6 +19,7 @@\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n+#![feature(iter_nth_back)]\n #![feature(iter_unfold)]\n #![feature(pattern)]\n #![feature(range_is_empty)]"}, {"sha": "8b04f84007fa7365133840887a06a9ba13f8241a", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -31,8 +31,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_mod_euc() {\n-        assert!((-1 as $T).mod_euc(MIN) == MAX);\n+    fn test_rem_euclid() {\n+        assert!((-1 as $T).rem_euclid(MIN) == MAX);\n     }\n \n     #[test]"}, {"sha": "e1648db5e8ed2db699d4864a1ac793a7ece300fd", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -694,23 +694,23 @@ macro_rules! test_float {\n             assert!(($nan as $fty).max($nan).is_nan());\n         }\n         #[test]\n-        fn mod_euc() {\n+        fn rem_euclid() {\n             let a: $fty = 42.0;\n-            assert!($inf.mod_euc(a).is_nan());\n-            assert_eq!(a.mod_euc($inf), a);\n-            assert!(a.mod_euc($nan).is_nan());\n-            assert!($inf.mod_euc($inf).is_nan());\n-            assert!($inf.mod_euc($nan).is_nan());\n-            assert!($nan.mod_euc($inf).is_nan());\n+            assert!($inf.rem_euclid(a).is_nan());\n+            assert_eq!(a.rem_euclid($inf), a);\n+            assert!(a.rem_euclid($nan).is_nan());\n+            assert!($inf.rem_euclid($inf).is_nan());\n+            assert!($inf.rem_euclid($nan).is_nan());\n+            assert!($nan.rem_euclid($inf).is_nan());\n         }\n         #[test]\n-        fn div_euc() {\n+        fn div_euclid() {\n             let a: $fty = 42.0;\n-            assert_eq!(a.div_euc($inf), 0.0);\n-            assert!(a.div_euc($nan).is_nan());\n-            assert!($inf.div_euc($inf).is_nan());\n-            assert!($inf.div_euc($nan).is_nan());\n-            assert!($nan.div_euc($inf).is_nan());\n+            assert_eq!(a.div_euclid($inf), 0.0);\n+            assert!(a.div_euclid($nan).is_nan());\n+            assert!($inf.div_euclid($inf).is_nan());\n+            assert!($inf.div_euclid($nan).is_nan());\n+            assert!($nan.div_euclid($inf).is_nan());\n         }\n     } }\n }"}, {"sha": "cfe671c626bcf040b14c4b5dd328ddd535783232", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -62,7 +62,7 @@ cfg_if! {\n     if #[cfg(target_os = \"emscripten\")] {\n         #[path = \"emcc.rs\"]\n         mod imp;\n-    } else if #[cfg(any(target_arch = \"wasm32\", target_env = \"sgx\"))] {\n+    } else if #[cfg(target_arch = \"wasm32\")] {\n         #[path = \"dummy.rs\"]\n         mod imp;\n     } else if #[cfg(all(target_env = \"msvc\", target_arch = \"aarch64\"))] {"}, {"sha": "131dedb9888326bbc273c581dacd2fca86010c06", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -42,11 +42,12 @@ use util::nodemap::FxHashMap;\n use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n-use syntax_pos::{MultiSpan, Span, symbol::LocalInternedString};\n+use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n use errors::DiagnosticBuilder;\n use hir;\n use hir::def_id::LOCAL_CRATE;\n use hir::intravisit as hir_visit;\n+use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit as ast_visit;\n \n /// Information about the registered lints.\n@@ -139,8 +140,8 @@ struct LintGroup {\n \n pub enum CheckLintNameResult<'a> {\n     Ok(&'a [LintId]),\n-    /// Lint doesn't exist\n-    NoLint,\n+    /// Lint doesn't exist. Potentially contains a suggestion for a correct lint name.\n+    NoLint(Option<Symbol>),\n     /// The lint is either renamed or removed. This is the warning\n     /// message, and an optional new name (`None` if removed).\n     Warning(String, Option<String>),\n@@ -359,8 +360,14 @@ impl LintStore {\n             CheckLintNameResult::Warning(ref msg, _) => {\n                 Some(sess.struct_warn(msg))\n             },\n-            CheckLintNameResult::NoLint => {\n-                Some(struct_err!(sess, E0602, \"unknown lint: `{}`\", lint_name))\n+            CheckLintNameResult::NoLint(suggestion) => {\n+                let mut err = struct_err!(sess, E0602, \"unknown lint: `{}`\", lint_name);\n+\n+                if let Some(suggestion) = suggestion {\n+                    err.help(&format!(\"did you mean: `{}`\", suggestion));\n+                }\n+\n+                Some(err)\n             }\n             CheckLintNameResult::Tool(result) => match result {\n                 Err((Some(_), new_name)) => Some(sess.struct_warn(&format!(\n@@ -464,7 +471,16 @@ impl LintStore {\n         match self.by_name.get(&complete_name) {\n             None => match self.lint_groups.get(&*complete_name) {\n                 // Now we are sure, that this lint exists nowhere\n-                None => CheckLintNameResult::NoLint,\n+                None => {\n+                    let symbols = self.by_name.keys()\n+                        .map(|name| Symbol::intern(&name))\n+                        .collect::<Vec<_>>();\n+\n+                    let suggestion =\n+                        find_best_match_for_name(symbols.iter(), &lint_name.to_lowercase(), None);\n+\n+                    CheckLintNameResult::NoLint(suggestion)\n+                }\n                 Some(LintGroup { lint_ids, depr, .. }) => {\n                     // Reaching this would be weird, but let's cover this case anyway\n                     if let Some(LintAlias { name, silent }) = depr {\n@@ -484,7 +500,7 @@ impl LintStore {\n             Some(&Id(ref id)) => {\n                 CheckLintNameResult::Tool(Err((Some(slice::from_ref(id)), complete_name)))\n             }\n-            _ => CheckLintNameResult::NoLint,\n+            _ => CheckLintNameResult::NoLint(None),\n         }\n     }\n }"}, {"sha": "9ab8e89df72e6db01a75ffa117e777d938664fc0", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -385,7 +385,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         }\n                         err.emit();\n                     }\n-                    CheckLintNameResult::NoLint => {\n+                    CheckLintNameResult::NoLint(suggestion) => {\n                         let lint = builtin::UNKNOWN_LINTS;\n                         let (level, src) = self.sets.get_lint_level(lint,\n                                                                     self.cur,\n@@ -398,22 +398,17 @@ impl<'a> LintLevelsBuilder<'a> {\n                                                 src,\n                                                 Some(li.span.into()),\n                                                 &msg);\n-                        if name.as_str().chars().any(|c| c.is_uppercase()) {\n-                            let name_lower = name.as_str().to_lowercase().to_string();\n-                            if let CheckLintNameResult::NoLint =\n-                                    store.check_lint_name(&name_lower, tool_name) {\n-                                db.emit();\n-                            } else {\n-                                db.span_suggestion_with_applicability(\n-                                    li.span,\n-                                    \"lowercase the lint name\",\n-                                    name_lower,\n-                                    Applicability::MachineApplicable\n-                                ).emit();\n-                            }\n-                        } else {\n-                            db.emit();\n+\n+                        if let Some(suggestion) = suggestion {\n+                            db.span_suggestion_with_applicability(\n+                                li.span,\n+                                \"did you mean\",\n+                                suggestion.to_string(),\n+                                Applicability::MachineApplicable,\n+                            );\n                         }\n+\n+                        db.emit();\n                     }\n                 }\n             }"}, {"sha": "f506c47371c928abe46059645ed6f5c5316ed861", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -55,8 +55,8 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n         let c_ty = self.infcx.canonicalize_query(&self.param_env.and(ty), &mut orig_values);\n         let span = self.cause.span;\n         debug!(\"c_ty = {:?}\", c_ty);\n-        match &gcx.dropck_outlives(c_ty) {\n-            Ok(result) if result.is_proven() => {\n+        if let Ok(result) = &gcx.dropck_outlives(c_ty) {\n+            if result.is_proven() {\n                 if let Ok(InferOk { value, obligations }) =\n                     self.infcx.instantiate_query_response_and_region_obligations(\n                     self.cause,\n@@ -72,8 +72,6 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n                     };\n                 }\n             }\n-\n-            _ => { /* fallthrough to error-handling code below */ }\n         }\n \n         // Errors and ambiuity in dropck occur in two cases:\n@@ -82,10 +80,11 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n         // Either of these should have created an error before.\n         tcx.sess\n             .delay_span_bug(span, \"dtorck encountered internal error\");\n-        return InferOk {\n+\n+        InferOk {\n             value: vec![],\n             obligations: vec![],\n-        };\n+        }\n     }\n }\n \n@@ -102,7 +101,7 @@ impl<'tcx> DropckOutlivesResult<'tcx> {\n         span: Span,\n         ty: Ty<'tcx>,\n     ) {\n-        for overflow_ty in self.overflows.iter().take(1) {\n+        if let Some(overflow_ty) = self.overflows.iter().next() {\n             let mut err = struct_span_err!(\n                 tcx.sess,\n                 span,\n@@ -228,7 +227,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n \n         // (T1..Tn) and closures have same properties as T1..Tn --\n         // check if *any* of those are trivial.\n-        ty::Tuple(ref tys) => tys.iter().cloned().all(|t| trivial_dropck_outlives(tcx, t)),\n+        ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t)),\n         ty::Closure(def_id, ref substs) => substs\n             .upvar_tys(def_id, tcx)\n             .all(|t| trivial_dropck_outlives(tcx, t)),"}, {"sha": "9883752da0b69beec0010d4950752a8b014e689e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1926,13 +1926,15 @@ pub mod tls {\n     /// to `value` during the call to `f`. It is restored to its previous value after.\n     /// This is used to set the pointer to the new ImplicitCtxt.\n     #[cfg(parallel_queries)]\n+    #[inline]\n     fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n         rayon_core::tlv::with(value, f)\n     }\n \n     /// Gets Rayon's thread local variable which is preserved for Rayon jobs.\n     /// This is used to get the pointer to the current ImplicitCtxt.\n     #[cfg(parallel_queries)]\n+    #[inline]\n     fn get_tlv() -> usize {\n         rayon_core::tlv::get()\n     }\n@@ -1945,6 +1947,7 @@ pub mod tls {\n     /// It is restored to its previous value after.\n     /// This is used to set the pointer to the new ImplicitCtxt.\n     #[cfg(not(parallel_queries))]\n+    #[inline]\n     fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {\n         let old = get_tlv();\n         let _reset = OnDrop(move || TLV.with(|tlv| tlv.set(old)));\n@@ -2009,6 +2012,7 @@ pub mod tls {\n     }\n \n     /// Sets `context` as the new current ImplicitCtxt for the duration of the function `f`\n+    #[inline]\n     pub fn enter_context<'a, 'gcx: 'tcx, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'gcx, 'tcx>,\n                                                      f: F) -> R\n         where F: FnOnce(&ImplicitCtxt<'a, 'gcx, 'tcx>) -> R\n@@ -2080,6 +2084,7 @@ pub mod tls {\n     }\n \n     /// Allows access to the current ImplicitCtxt in a closure if one is available\n+    #[inline]\n     pub fn with_context_opt<F, R>(f: F) -> R\n         where F: for<'a, 'gcx, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'gcx, 'tcx>>) -> R\n     {\n@@ -2097,6 +2102,7 @@ pub mod tls {\n \n     /// Allows access to the current ImplicitCtxt.\n     /// Panics if there is no ImplicitCtxt available\n+    #[inline]\n     pub fn with_context<F, R>(f: F) -> R\n         where F: for<'a, 'gcx, 'tcx> FnOnce(&ImplicitCtxt<'a, 'gcx, 'tcx>) -> R\n     {\n@@ -2108,6 +2114,7 @@ pub mod tls {\n     /// with the same 'gcx lifetime as the TyCtxt passed in.\n     /// This will panic if you pass it a TyCtxt which has a different global interner from\n     /// the current ImplicitCtxt's tcx field.\n+    #[inline]\n     pub fn with_related_context<'a, 'gcx, 'tcx1, F, R>(tcx: TyCtxt<'a, 'gcx, 'tcx1>, f: F) -> R\n         where F: for<'b, 'tcx2> FnOnce(&ImplicitCtxt<'b, 'gcx, 'tcx2>) -> R\n     {\n@@ -2126,6 +2133,7 @@ pub mod tls {\n     /// is given an ImplicitCtxt with the same 'tcx and 'gcx lifetimes as the TyCtxt passed in.\n     /// This will panic if you pass it a TyCtxt which has a different global interner or\n     /// a different local interner from the current ImplicitCtxt's tcx field.\n+    #[inline]\n     pub fn with_fully_related_context<'a, 'gcx, 'tcx, F, R>(tcx: TyCtxt<'a, 'gcx, 'tcx>, f: F) -> R\n         where F: for<'b> FnOnce(&ImplicitCtxt<'b, 'gcx, 'tcx>) -> R\n     {\n@@ -2143,6 +2151,7 @@ pub mod tls {\n \n     /// Allows access to the TyCtxt in the current ImplicitCtxt.\n     /// Panics if there is no ImplicitCtxt available\n+    #[inline]\n     pub fn with<F, R>(f: F) -> R\n         where F: for<'a, 'gcx, 'tcx> FnOnce(TyCtxt<'a, 'gcx, 'tcx>) -> R\n     {\n@@ -2151,6 +2160,7 @@ pub mod tls {\n \n     /// Allows access to the TyCtxt in the current ImplicitCtxt.\n     /// The closure is passed None if there is no ImplicitCtxt available\n+    #[inline]\n     pub fn with_opt<F, R>(f: F) -> R\n         where F: for<'a, 'gcx, 'tcx> FnOnce(Option<TyCtxt<'a, 'gcx, 'tcx>>) -> R\n     {"}, {"sha": "0359890dd932780f1ca7f3d6e156bf4925ea585c", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -136,11 +136,14 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                 Entry::Vacant(entry) => {\n                     // No job entry for this query. Return a new one to be started later\n                     return tls::with_related_context(tcx, |icx| {\n+                        // Create the `parent` variable before `info`. This allows LLVM\n+                        // to elide the move of `info`\n+                        let parent = icx.query.clone();\n                         let info = QueryInfo {\n                             span,\n                             query: Q::query(key.clone()),\n                         };\n-                        let job = Lrc::new(QueryJob::new(info, icx.query.clone()));\n+                        let job = Lrc::new(QueryJob::new(info, parent));\n                         let owner = JobOwner {\n                             cache,\n                             job: job.clone(),\n@@ -171,6 +174,7 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n \n     /// Completes the query by updating the query cache with the `result`,\n     /// signals the waiter and forgets the JobOwner, so it won't poison the query\n+    #[inline(always)]\n     pub(super) fn complete(self, result: &Q::Value, dep_node_index: DepNodeIndex) {\n         // We can move out of `self` here because we `mem::forget` it below\n         let key = unsafe { ptr::read(&self.key) };\n@@ -227,6 +231,8 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n }\n \n impl<'a, 'tcx, Q: QueryDescription<'tcx>> Drop for JobOwner<'a, 'tcx, Q> {\n+    #[inline(never)]\n+    #[cold]\n     fn drop(&mut self) {\n         // Poison the query so jobs waiting on it panic\n         self.cache.borrow_mut().active.insert(self.key.clone(), QueryResult::Poisoned);"}, {"sha": "066e1739841d64615f6862ec683d46bed497ac76", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -28,7 +28,6 @@\n #![feature(optin_builtin_traits)]\n #![feature(nll)]\n #![feature(allow_internal_unstable)]\n-#![feature(vec_resize_with)]\n #![feature(hash_raw_entry)]\n #![feature(stmt_expr_attributes)]\n #![feature(core_intrinsics)]\n@@ -113,12 +112,14 @@ pub struct OnDrop<F: Fn()>(pub F);\n impl<F: Fn()> OnDrop<F> {\n       /// Forgets the function which prevents it from running.\n       /// Ensure that the function owns no memory, otherwise it will be leaked.\n+      #[inline]\n       pub fn disable(self) {\n             std::mem::forget(self);\n       }\n }\n \n impl<F: Fn()> Drop for OnDrop<F> {\n+      #[inline]\n       fn drop(&mut self) {\n             (self.0)();\n       }"}, {"sha": "f49e8d89c5ac15ef09e6ad1d73940e0c4f19dedf", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -373,10 +373,14 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                     for err in &mut mbcx.errors_buffer {\n                         if err.is_error() {\n                             err.level = Level::Warning;\n-                            err.warn(\"This error has been downgraded to a warning \\\n-                                      for backwards compatibility with previous releases.\\n\\\n-                                      It represents potential unsoundness in your code.\\n\\\n-                                      This warning will become a hard error in the future.\");\n+                            err.warn(\n+                                \"this error has been downgraded to a warning for backwards \\\n+                                 compatibility with previous releases\",\n+                            );\n+                            err.warn(\n+                                \"this represents potential undefined behavior in your code and \\\n+                                 this warning will become a hard error in the future\",\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "4c183d59a637cfde4870d6f5b0551f651f7cf156", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -187,7 +187,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     }\n     let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n     assert!(!layout.is_unsized());\n-    let ret = ecx.allocate(layout, MemoryKind::Stack)?;\n+    let ret = ecx.allocate(layout, MemoryKind::Stack);\n \n     let name = ty::tls::with(|tcx| tcx.item_path_str(cid.instance.def_id()));\n     let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n@@ -490,8 +490,8 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n         _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer,\n         _kind: MemoryKind<Self::MemoryKinds>,\n-    ) -> EvalResult<'tcx, Pointer> {\n-        Ok(ptr)\n+    ) -> Pointer {\n+        ptr\n     }\n \n     #[inline(always)]\n@@ -692,12 +692,16 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n         let err = error_to_const_error(&ecx, error);\n         // errors in statics are always emitted as fatal errors\n         if tcx.is_static(def_id).is_some() {\n-            let err = err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");\n-            // check that a static never produces `TooGeneric`\n+            let reported_err = err.report_as_error(ecx.tcx,\n+                                                   \"could not evaluate static initializer\");\n+            // Ensure that if the above error was either `TooGeneric` or `Reported`\n+            // an error must be reported.\n             if tcx.sess.err_count() == 0 {\n-                span_bug!(ecx.tcx.span, \"static eval failure didn't emit an error: {:#?}\", err);\n+                tcx.sess.delay_span_bug(err.span,\n+                                        &format!(\"static eval failure did not emit an error: {:#?}\",\n+                                                 reported_err));\n             }\n-            err\n+            reported_err\n         } else if def_id.is_local() {\n             // constant defined in this crate, we can figure out a lint level!\n             match tcx.describe_def(def_id) {"}, {"sha": "8ae0345e07a34a5da3fae486c8b1c56b35fefcf3", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -422,7 +422,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         return_to_block: StackPopCleanup,\n     ) -> EvalResult<'tcx> {\n         if self.stack.len() > 1 { // FIXME should be \"> 0\", printing topmost frame crashes rustc...\n-            debug!(\"PAUSING({}) {}\", self.cur_frame(), self.frame().instance);\n+            info!(\"PAUSING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n         ::log_settings::settings().indentation += 1;\n \n@@ -491,7 +491,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n \n         if self.stack.len() > 1 { // FIXME no check should be needed, but some instances ICE\n-            debug!(\"ENTERING({}) {}\", self.cur_frame(), self.frame().instance);\n+            info!(\"ENTERING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n \n         if self.stack.len() > self.tcx.sess.const_eval_stack_frame_limit {\n@@ -503,7 +503,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n \n     pub(super) fn pop_stack_frame(&mut self) -> EvalResult<'tcx> {\n         if self.stack.len() > 1 { // FIXME no check should be needed, but some instances ICE\n-            debug!(\"LEAVING({}) {}\", self.cur_frame(), self.frame().instance);\n+            info!(\"LEAVING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n         ::log_settings::settings().indentation -= 1;\n         let frame = self.stack.pop().expect(\n@@ -557,7 +557,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n \n         if self.stack.len() > 1 { // FIXME should be \"> 0\", printing topmost frame crashes rustc...\n-            debug!(\"CONTINUING({}) {}\", self.cur_frame(), self.frame().instance);\n+            info!(\"CONTINUING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n \n         Ok(())"}, {"sha": "144d79f236ce872de7585babf0fd1629aa6e8a28", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -185,7 +185,7 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer,\n         kind: MemoryKind<Self::MemoryKinds>,\n-    ) -> EvalResult<'tcx, Pointer<Self::PointerTag>>;\n+    ) -> Pointer<Self::PointerTag>;\n \n     /// Executed when evaluating the `*` operator: Following a reference.\n     /// This has the chance to adjust the tag.  It should not change anything else!"}, {"sha": "f1c7b2be6fb860ee636df9c90cf4ff65c180cc50", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -131,20 +131,20 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         &mut self,\n         alloc: Allocation<M::PointerTag, M::AllocExtra>,\n         kind: MemoryKind<M::MemoryKinds>,\n-    ) -> EvalResult<'tcx, AllocId> {\n+    ) -> AllocId {\n         let id = self.tcx.alloc_map.lock().reserve();\n         self.alloc_map.insert(id, (kind, alloc));\n-        Ok(id)\n+        id\n     }\n \n     pub fn allocate(\n         &mut self,\n         size: Size,\n         align: Align,\n         kind: MemoryKind<M::MemoryKinds>,\n-    ) -> EvalResult<'tcx, Pointer> {\n+    ) -> Pointer {\n         let extra = AllocationExtra::memory_allocated(size, &self.extra);\n-        Ok(Pointer::from(self.allocate_with(Allocation::undef(size, align, extra), kind)?))\n+        Pointer::from(self.allocate_with(Allocation::undef(size, align, extra), kind))\n     }\n \n     pub fn reallocate(\n@@ -162,7 +162,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n         // For simplicities' sake, we implement reallocate as \"alloc, copy, dealloc\".\n         // This happens so rarely, the perf advantage is outweighed by the maintenance cost.\n-        let new_ptr = self.allocate(new_size, new_align, kind)?;\n+        let new_ptr = self.allocate(new_size, new_align, kind);\n         self.copy(\n             ptr.into(),\n             old_align,\n@@ -708,8 +708,13 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n                     relocations\n                     .iter()\n                     .map(|&(offset, reloc)| {\n-                    (offset + dest.offset - src.offset + (i * size * relocations.len() as u64),\n-                     reloc)\n+                        // compute offset for current repetition\n+                        let dest_offset = dest.offset + (i * size);\n+                        (\n+                            // shift offsets from source allocation to destination allocation\n+                            offset + dest_offset - src.offset,\n+                            reloc,\n+                        )\n                     })\n                 );\n             }"}, {"sha": "7143d66ad9246ef190a233d6de9cd24815f620af", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -382,7 +382,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             _ => {\n                 trace!(\"Forcing allocation for local of type {:?}\", layout.ty);\n                 Operand::Indirect(\n-                    *self.allocate(layout, MemoryKind::Stack)?\n+                    *self.allocate(layout, MemoryKind::Stack)\n                 )\n             }\n         })"}, {"sha": "e316b54f8ca7da77424243e9f7e51e20cf04b3ae", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -911,7 +911,7 @@ where\n                         // that might e.g., be an inner field of a struct with `Scalar` layout,\n                         // that has different alignment than the outer field.\n                         let local_layout = self.layout_of_local(&self.stack[frame], local)?;\n-                        let ptr = self.allocate(local_layout, MemoryKind::Stack)?;\n+                        let ptr = self.allocate(local_layout, MemoryKind::Stack);\n                         // We don't have to validate as we can assume the local\n                         // was already valid for its type.\n                         self.write_immediate_to_mplace_no_validate(value, ptr)?;\n@@ -933,15 +933,15 @@ where\n         &mut self,\n         layout: TyLayout<'tcx>,\n         kind: MemoryKind<M::MemoryKinds>,\n-    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+    ) -> MPlaceTy<'tcx, M::PointerTag> {\n         if layout.is_unsized() {\n             assert!(self.tcx.features().unsized_locals, \"cannot alloc memory for unsized type\");\n             // FIXME: What should we do here? We should definitely also tag!\n-            Ok(MPlaceTy::dangling(layout, self))\n+            MPlaceTy::dangling(layout, self)\n         } else {\n-            let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;\n-            let ptr = M::tag_new_allocation(self, ptr, kind)?;\n-            Ok(MPlaceTy::from_aligned_ptr(ptr, layout))\n+            let ptr = self.memory.allocate(layout.size, layout.align.abi, kind);\n+            let ptr = M::tag_new_allocation(self, ptr, kind);\n+            MPlaceTy::from_aligned_ptr(ptr, layout)\n         }\n     }\n "}, {"sha": "308abdbbb90f0327e4eb70192c2d0932f4d63f28", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     }\n \n     fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> EvalResult<'tcx> {\n-        debug!(\"{:?}\", stmt);\n+        info!(\"{:?}\", stmt);\n \n         use rustc::mir::StatementKind::*;\n \n@@ -289,7 +289,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     }\n \n     fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> EvalResult<'tcx> {\n-        debug!(\"{:?}\", terminator.kind);\n+        info!(\"{:?}\", terminator.kind);\n         self.tcx.span = terminator.source_info.span;\n         self.memory.tcx.span = terminator.source_info.span;\n \n@@ -299,7 +299,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         if !self.stack.is_empty() {\n             // This should change *something*\n             debug_assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n-            debug!(\"// {:?}\", self.frame().block);\n+            info!(\"// {:?}\", self.frame().block);\n         }\n         Ok(())\n     }"}, {"sha": "22936a9b0a0cf795769068998c09ecb6d7968c68", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             ptr_size * (3 + methods.len() as u64),\n             ptr_align,\n             MemoryKind::Vtable,\n-        )?.with_default_tag();\n+        ).with_default_tag();\n         let tcx = &*self.tcx;\n \n         let drop = ::monomorphize::resolve_drop_in_place(*tcx, ty);"}, {"sha": "cfa899eb5a62a11410e9d34b831bcca263e7eaa2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -346,7 +346,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             Rvalue::Cast(kind, ref operand, _) => {\n                 let (op, span) = self.eval_operand(operand, source_info)?;\n                 self.use_ecx(source_info, |this| {\n-                    let dest = this.ecx.allocate(place_layout, MemoryKind::Stack)?;\n+                    let dest = this.ecx.allocate(place_layout, MemoryKind::Stack);\n                     this.ecx.cast(op, kind, dest.into())?;\n                     Ok((dest.into(), span))\n                 })"}, {"sha": "6a6aab2bea3664d9794162cb0f77825c2c7d6d0b", "filename": "src/librustc_target/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -10,28 +10,29 @@\n \n use std::iter;\n \n-use super::{LinkerFlavor, Target, TargetOptions, PanicStrategy};\n+use super::{LinkerFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     const PRE_LINK_ARGS: &[&str] = &[\n         \"-Wl,--as-needed\",\n         \"-Wl,-z,noexecstack\",\n         \"-m64\",\n-         \"-fuse-ld=gold\",\n-         \"-nostdlib\",\n-         \"-shared\",\n-         \"-Wl,-e,sgx_entry\",\n-         \"-Wl,-Bstatic\",\n-         \"-Wl,--gc-sections\",\n-         \"-Wl,-z,text\",\n-         \"-Wl,-z,norelro\",\n-         \"-Wl,--rosegment\",\n-         \"-Wl,--no-undefined\",\n-         \"-Wl,--error-unresolved-symbols\",\n-         \"-Wl,--no-undefined-version\",\n-         \"-Wl,-Bsymbolic\",\n-         \"-Wl,--export-dynamic\",\n+        \"-fuse-ld=gold\",\n+        \"-nostdlib\",\n+        \"-shared\",\n+        \"-Wl,-e,sgx_entry\",\n+        \"-Wl,-Bstatic\",\n+        \"-Wl,--gc-sections\",\n+        \"-Wl,-z,text\",\n+        \"-Wl,-z,norelro\",\n+        \"-Wl,--rosegment\",\n+        \"-Wl,--no-undefined\",\n+        \"-Wl,--error-unresolved-symbols\",\n+        \"-Wl,--no-undefined-version\",\n+        \"-Wl,-Bsymbolic\",\n+        \"-Wl,--export-dynamic\",\n     ];\n+\n     const EXPORT_SYMBOLS: &[&str] = &[\n         \"sgx_entry\",\n         \"HEAP_BASE\",\n@@ -41,19 +42,26 @@ pub fn target() -> Result<Target, String> {\n         \"ENCLAVE_SIZE\",\n         \"CFGDATA_BASE\",\n         \"DEBUG\",\n+        \"EH_FRM_HDR_BASE\",\n+        \"EH_FRM_HDR_SIZE\",\n+        \"TEXT_BASE\",\n+        \"TEXT_SIZE\",\n     ];\n     let opts = TargetOptions {\n         dynamic_linking: false,\n         executables: true,\n         linker_is_gnu: true,\n         max_atomic_width: Some(64),\n-        panic_strategy: PanicStrategy::Abort,\n+        panic_strategy: PanicStrategy::Unwind,\n         cpu: \"x86-64\".into(),\n         features: \"+rdrnd,+rdseed\".into(),\n         position_independent_executables: true,\n-        pre_link_args: iter::once(\n-                (LinkerFlavor::Gcc, PRE_LINK_ARGS.iter().cloned().map(String::from).collect())\n-        ).collect(),\n+        pre_link_args: iter::once((\n+            LinkerFlavor::Gcc,\n+            PRE_LINK_ARGS.iter().cloned().map(String::from).collect(),\n+        ))\n+        .collect(),\n+        post_link_objects: vec![\"libunwind.a\".into()],\n         override_export_symbols: Some(EXPORT_SYMBOLS.iter().cloned().map(String::from).collect()),\n         ..Default::default()\n     };"}, {"sha": "f9a46fe362e3c6c4a43b472e2664f1f083fd9e88", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -181,6 +181,9 @@ pub struct RenderOptions {\n     /// A file to use as the index page at the root of the output directory. Overrides\n     /// `enable_index_page` to be true if set.\n     pub index_page: Option<PathBuf>,\n+    /// An optional path to use as the location of static files. If not set, uses combinations of\n+    /// `../` to reach the documentation root.\n+    pub static_root_path: Option<String>,\n \n     // Options specific to reading standalone Markdown files\n \n@@ -433,6 +436,7 @@ impl Options {\n         let markdown_playground_url = matches.opt_str(\"markdown-playground-url\");\n         let crate_version = matches.opt_str(\"crate-version\");\n         let enable_index_page = matches.opt_present(\"enable-index-page\") || index_page.is_some();\n+        let static_root_path = matches.opt_str(\"static-root-path\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -471,6 +475,7 @@ impl Options {\n                 enable_minification,\n                 enable_index_page,\n                 index_page,\n+                static_root_path,\n                 markdown_no_toc,\n                 markdown_css,\n                 markdown_playground_url,"}, {"sha": "d8a57bc93fd6c1e1c3ce8d8c5966b05450313456", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -26,16 +26,20 @@ pub struct Page<'a> {\n     pub title: &'a str,\n     pub css_class: &'a str,\n     pub root_path: &'a str,\n+    pub static_root_path: Option<&'a str>,\n     pub description: &'a str,\n     pub keywords: &'a str,\n     pub resource_suffix: &'a str,\n+    pub extra_scripts: &'a [&'a str],\n+    pub static_extra_scripts: &'a [&'a str],\n }\n \n pub fn render<T: fmt::Display, S: fmt::Display>(\n     dst: &mut dyn io::Write, layout: &Layout, page: &Page, sidebar: &S, t: &T,\n-    css_file_extension: bool, themes: &[PathBuf], extra_scripts: &[&str])\n+    css_file_extension: bool, themes: &[PathBuf])\n     -> io::Result<()>\n {\n+    let static_root_path = page.static_root_path.unwrap_or(page.root_path);\n     write!(dst,\n \"<!DOCTYPE html>\\\n <html lang=\\\"en\\\">\\\n@@ -46,20 +50,20 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     <meta name=\\\"description\\\" content=\\\"{description}\\\">\\\n     <meta name=\\\"keywords\\\" content=\\\"{keywords}\\\">\\\n     <title>{title}</title>\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}normalize{suffix}.css\\\">\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}rustdoc{suffix}.css\\\" \\\n+    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}normalize{suffix}.css\\\">\\\n+    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}rustdoc{suffix}.css\\\" \\\n           id=\\\"mainThemeStyle\\\">\\\n     {themes}\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}dark{suffix}.css\\\">\\\n-    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}light{suffix}.css\\\" \\\n+    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}dark{suffix}.css\\\">\\\n+    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}light{suffix}.css\\\" \\\n           id=\\\"themeStyle\\\">\\\n-    <script src=\\\"{root_path}storage{suffix}.js\\\"></script>\\\n-    <noscript><link rel=\\\"stylesheet\\\" href=\\\"{root_path}noscript{suffix}.css\\\"></noscript>\\\n+    <script src=\\\"{static_root_path}storage{suffix}.js\\\"></script>\\\n+    <noscript><link rel=\\\"stylesheet\\\" href=\\\"{static_root_path}noscript{suffix}.css\\\"></noscript>\\\n     {css_extension}\\\n     {favicon}\\\n     {in_header}\\\n     <style type=\\\"text/css\\\">\\\n-    #crate-search{{background-image:url(\\\"{root_path}down-arrow{suffix}.svg\\\");}}\\\n+    #crate-search{{background-image:url(\\\"{static_root_path}down-arrow{suffix}.svg\\\");}}\\\n     </style>\\\n </head>\\\n <body class=\\\"rustdoc {css_class}\\\">\\\n@@ -77,11 +81,13 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n     </nav>\\\n     <div class=\\\"theme-picker\\\">\\\n         <button id=\\\"theme-picker\\\" aria-label=\\\"Pick another theme!\\\">\\\n-            <img src=\\\"{root_path}brush{suffix}.svg\\\" width=\\\"18\\\" alt=\\\"Pick another theme!\\\">\\\n+            <img src=\\\"{static_root_path}brush{suffix}.svg\\\" \\\n+                 width=\\\"18\\\" \\\n+                 alt=\\\"Pick another theme!\\\">\\\n         </button>\\\n         <div id=\\\"theme-choices\\\"></div>\\\n     </div>\\\n-    <script src=\\\"{root_path}theme{suffix}.js\\\"></script>\\\n+    <script src=\\\"{static_root_path}theme{suffix}.js\\\"></script>\\\n     <nav class=\\\"sub\\\">\\\n         <form class=\\\"search-form js-only\\\">\\\n             <div class=\\\"search-container\\\">\\\n@@ -96,7 +102,9 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n                            type=\\\"search\\\">\\\n                 </div>\\\n                 <a id=\\\"settings-menu\\\" href=\\\"{root_path}settings.html\\\">\\\n-                    <img src=\\\"{root_path}wheel{suffix}.svg\\\" width=\\\"18\\\" alt=\\\"Change settings\\\">\\\n+                    <img src=\\\"{static_root_path}wheel{suffix}.svg\\\" \\\n+                         width=\\\"18\\\" \\\n+                         alt=\\\"Change settings\\\">\\\n                 </a>\\\n             </div>\\\n         </form>\\\n@@ -157,19 +165,23 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n         window.currentCrate = \\\"{krate}\\\";\\\n     </script>\\\n     <script src=\\\"{root_path}aliases.js\\\"></script>\\\n-    <script src=\\\"{root_path}main{suffix}.js\\\"></script>\\\n+    <script src=\\\"{static_root_path}main{suffix}.js\\\"></script>\\\n+    {static_extra_scripts}\\\n     {extra_scripts}\\\n     <script defer src=\\\"{root_path}search-index.js\\\"></script>\\\n </body>\\\n </html>\",\n     css_extension = if css_file_extension {\n-        format!(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}theme{suffix}.css\\\">\",\n-                root_path = page.root_path,\n+        format!(\"<link rel=\\\"stylesheet\\\" \\\n+                       type=\\\"text/css\\\" \\\n+                       href=\\\"{static_root_path}theme{suffix}.css\\\">\",\n+                static_root_path = static_root_path,\n                 suffix=page.resource_suffix)\n     } else {\n         String::new()\n     },\n     content   = *t,\n+    static_root_path = static_root_path,\n     root_path = page.root_path,\n     css_class = page.css_class,\n     logo      = if layout.logo.is_empty() {\n@@ -197,12 +209,17 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n                    .filter_map(|t| t.file_stem())\n                    .filter_map(|t| t.to_str())\n                    .map(|t| format!(r#\"<link rel=\"stylesheet\" type=\"text/css\" href=\"{}{}{}.css\">\"#,\n-                                    page.root_path,\n+                                    static_root_path,\n                                     t,\n                                     page.resource_suffix))\n                    .collect::<String>(),\n     suffix=page.resource_suffix,\n-    extra_scripts=extra_scripts.iter().map(|e| {\n+    static_extra_scripts=page.static_extra_scripts.iter().map(|e| {\n+        format!(\"<script src=\\\"{static_root_path}{extra_script}.js\\\"></script>\",\n+                static_root_path=static_root_path,\n+                extra_script=e)\n+    }).collect::<String>(),\n+    extra_scripts=page.extra_scripts.iter().map(|e| {\n         format!(\"<script src=\\\"{root_path}{extra_script}.js\\\"></script>\",\n                 root_path=page.root_path,\n                 extra_script=e)"}, {"sha": "e47ec9ec2f051b9dc008e72e5aab0811030d4e28", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -140,6 +140,9 @@ struct SharedContext {\n     /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n     /// \"light-v2.css\").\n     pub resource_suffix: String,\n+    /// Optional path string to be used to load static files on output pages. If not set, uses\n+    /// combinations of `../` to reach the documentation root.\n+    pub static_root_path: Option<String>,\n }\n \n impl SharedContext {\n@@ -506,6 +509,7 @@ pub fn run(mut krate: clean::Crate,\n         extension_css,\n         extern_html_root_urls,\n         resource_suffix,\n+        static_root_path,\n         ..\n     } = options;\n \n@@ -533,6 +537,7 @@ pub fn run(mut krate: clean::Crate,\n         sort_modules_alphabetically,\n         themes,\n         resource_suffix,\n+        static_root_path,\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n@@ -964,7 +969,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n                                           .collect::<Vec<_>>()\n                                           .join(\",\")));\n         }\n-        all_aliases.push(format!(\"ALIASES['{}'] = {{{}}};\", krate.name, output));\n+        all_aliases.push(format!(\"ALIASES[\\\"{}\\\"] = {{{}}};\", krate.name, output));\n         all_aliases.sort();\n         try_err!(writeln!(&mut w, \"var ALIASES = {{}};\"), &dst);\n         for aliases in &all_aliases {\n@@ -1038,7 +1043,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n         let dst = cx.dst.join(\"source-files.js\");\n         let (mut all_sources, _krates) = try_err!(collect(&dst, &krate.name, \"sourcesIndex\"), &dst);\n-        all_sources.push(format!(\"sourcesIndex['{}'] = {};\",\n+        all_sources.push(format!(\"sourcesIndex[\\\"{}\\\"] = {};\",\n                                  &krate.name,\n                                  hierarchy.to_json_string()));\n         all_sources.sort();\n@@ -1080,9 +1085,12 @@ themePicker.onblur = handleThemeButtonsBlur;\n                 title: \"Index of crates\",\n                 css_class: \"mod\",\n                 root_path: \"./\",\n+                static_root_path: cx.shared.static_root_path.deref(),\n                 description: \"List of crates\",\n                 keywords: BASIC_KEYWORDS,\n                 resource_suffix: &cx.shared.resource_suffix,\n+                extra_scripts: &[],\n+                static_extra_scripts: &[],\n             };\n             krates.push(krate.name.clone());\n             krates.sort();\n@@ -1101,7 +1109,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n             try_err!(layout::render(&mut w, &cx.shared.layout,\n                                     &page, &(\"\"), &content,\n                                     cx.shared.css_file_extension.is_some(),\n-                                    &cx.shared.themes, &[]), &dst);\n+                                    &cx.shared.themes), &dst);\n             try_err!(w.flush(), &dst);\n         }\n     }\n@@ -1366,15 +1374,17 @@ impl<'a> SourceCollector<'a> {\n             title: &title,\n             css_class: \"source\",\n             root_path: &root_path,\n+            static_root_path: self.scx.static_root_path.deref(),\n             description: &desc,\n             keywords: BASIC_KEYWORDS,\n             resource_suffix: &self.scx.resource_suffix,\n+            extra_scripts: &[\"source-files\"],\n+            static_extra_scripts: &[&format!(\"source-script{}\", self.scx.resource_suffix)],\n         };\n         layout::render(&mut w, &self.scx.layout,\n                        &page, &(\"\"), &Source(contents),\n                        self.scx.css_file_extension.is_some(),\n-                       &self.scx.themes, &[\"source-files\",\n-                                           &format!(\"source-script{}\", page.resource_suffix)])?;\n+                       &self.scx.themes)?;\n         w.flush()?;\n         self.scx.local_sources.insert(p.clone(), href);\n         Ok(())\n@@ -1956,9 +1966,12 @@ impl Context {\n             title: \"List of all items in this crate\",\n             css_class: \"mod\",\n             root_path: \"../\",\n+            static_root_path: self.shared.static_root_path.deref(),\n             description: \"List of all items in this crate\",\n             keywords: BASIC_KEYWORDS,\n             resource_suffix: &self.shared.resource_suffix,\n+            extra_scripts: &[],\n+            static_extra_scripts: &[],\n         };\n         let sidebar = if let Some(ref version) = cache().crate_version {\n             format!(\"<p class='location'>Crate {}</p>\\\n@@ -1973,7 +1986,7 @@ impl Context {\n         try_err!(layout::render(&mut w, &self.shared.layout,\n                                 &page, &sidebar, &all,\n                                 self.shared.css_file_extension.is_some(),\n-                                &self.shared.themes, &[]),\n+                                &self.shared.themes),\n                  &final_file);\n \n         // Generating settings page.\n@@ -1993,7 +2006,7 @@ impl Context {\n         try_err!(layout::render(&mut w, &layout,\n                                 &page, &sidebar, &settings,\n                                 self.shared.css_file_extension.is_some(),\n-                                &themes, &[]),\n+                                &themes),\n                  &settings_file);\n \n         Ok(())\n@@ -2035,10 +2048,13 @@ impl Context {\n         let page = layout::Page {\n             css_class: tyname,\n             root_path: &self.root_path(),\n+            static_root_path: self.shared.static_root_path.deref(),\n             title: &title,\n             description: &desc,\n             keywords: &keywords,\n             resource_suffix: &self.shared.resource_suffix,\n+            extra_scripts: &[],\n+            static_extra_scripts: &[],\n         };\n \n         {\n@@ -2051,7 +2067,7 @@ impl Context {\n                            &Sidebar{ cx: self, item: it },\n                            &Item{ cx: self, item: it },\n                            self.shared.css_file_extension.is_some(),\n-                           &self.shared.themes, &[])?;\n+                           &self.shared.themes)?;\n         } else {\n             let mut url = self.root_path();\n             if let Some(&(ref names, ty)) = cache().paths.get(&it.def_id) {"}, {"sha": "4f59f67e94f98e2e2a965d589d4508c375d44742", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -25,6 +25,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(drain_filter)]\n+#![feature(inner_deref)]\n \n #![recursion_limit=\"256\"]\n \n@@ -338,6 +339,13 @@ fn opts() -> Vec<RustcOptGroup> {\n                        \"enable-index-page\",\n                        \"To enable generation of the index page\")\n         }),\n+        unstable(\"static-root-path\", |o| {\n+            o.optopt(\"\",\n+                     \"static-root-path\",\n+                     \"Path string to force loading static files from in output pages. \\\n+                      If not set, uses combinations of '../' to reach the documentation root.\",\n+                     \"PATH\")\n+        }),\n     ]\n }\n "}, {"sha": "3eb7bc14a927fe64a6fb8f5a4ef93ca9ca875fdb", "filename": "src/libserialize/opaque.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibserialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibserialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fopaque.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -172,6 +172,7 @@ pub struct Decoder<'a> {\n }\n \n impl<'a> Decoder<'a> {\n+    #[inline]\n     pub fn new(data: &'a [u8], position: usize) -> Decoder<'a> {\n         Decoder {\n             data,"}, {"sha": "9c994d29202eec751a87aeb954fe543dfb29fa26", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -354,7 +354,7 @@ const DISPLACEMENT_THRESHOLD: usize = 128;\n /// *stat += random_stat_buff();\n /// ```\n ///\n-/// The easiest way to use `HashMap` with a custom type as key is to derive [`Eq`] and [`Hash`].\n+/// The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].\n /// We must also derive [`PartialEq`].\n ///\n /// [`Eq`]: ../../std/cmp/trait.Eq.html"}, {"sha": "7195175db28a6181decfcfce1f2528934d41fc67", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -740,6 +740,7 @@ impl<K, V> RawTable<K, V> {\n         }\n     }\n \n+    #[inline]\n     fn new_internal(\n         capacity: usize,\n         fallibility: Fallibility,\n@@ -755,12 +756,14 @@ impl<K, V> RawTable<K, V> {\n \n     /// Tries to create a new raw table from a given capacity. If it cannot allocate,\n     /// it returns with AllocErr.\n+    #[inline]\n     pub fn try_new(capacity: usize) -> Result<RawTable<K, V>, CollectionAllocErr> {\n         Self::new_internal(capacity, Fallible)\n     }\n \n     /// Creates a new raw table from a given capacity. All buckets are\n     /// initially empty.\n+    #[inline]\n     pub fn new(capacity: usize) -> RawTable<K, V> {\n         match Self::new_internal(capacity, Infallible) {\n             Err(CollectionAllocErr::CapacityOverflow) => panic!(\"capacity overflow\"),"}, {"sha": "209343444a0b5f13d0a4e532cabd4c375fddcbb7", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -253,10 +253,10 @@ impl f32 {\n         unsafe { intrinsics::fmaf32(self, a, b) }\n     }\n \n-    /// Calculates Euclidean division, the matching method for `mod_euc`.\n+    /// Calculates Euclidean division, the matching method for `rem_euclid`.\n     ///\n     /// This computes the integer `n` such that\n-    /// `self = n * rhs + self.mod_euc(rhs)`.\n+    /// `self = n * rhs + self.rem_euclid(rhs)`.\n     /// In other words, the result is `self / rhs` rounded to the integer `n`\n     /// such that `self >= n * rhs`.\n     ///\n@@ -266,30 +266,30 @@ impl f32 {\n     /// #![feature(euclidean_division)]\n     /// let a: f32 = 7.0;\n     /// let b = 4.0;\n-    /// assert_eq!(a.div_euc(b), 1.0); // 7.0 > 4.0 * 1.0\n-    /// assert_eq!((-a).div_euc(b), -2.0); // -7.0 >= 4.0 * -2.0\n-    /// assert_eq!(a.div_euc(-b), -1.0); // 7.0 >= -4.0 * -1.0\n-    /// assert_eq!((-a).div_euc(-b), 2.0); // -7.0 >= -4.0 * 2.0\n+    /// assert_eq!(a.div_euclid(b), 1.0); // 7.0 > 4.0 * 1.0\n+    /// assert_eq!((-a).div_euclid(b), -2.0); // -7.0 >= 4.0 * -2.0\n+    /// assert_eq!(a.div_euclid(-b), -1.0); // 7.0 >= -4.0 * -1.0\n+    /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n     #[inline]\n     #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n-    pub fn div_euc(self, rhs: f32) -> f32 {\n+    pub fn div_euclid(self, rhs: f32) -> f32 {\n         let q = (self / rhs).trunc();\n         if self % rhs < 0.0 {\n             return if rhs > 0.0 { q - 1.0 } else { q + 1.0 }\n         }\n         q\n     }\n \n-    /// Calculates the Euclidean modulo (self mod rhs), which is never negative.\n+    /// Calculates the least nonnegative remainder of `self (mod rhs)`.\n     ///\n     /// In particular, the return value `r` satisfies `0.0 <= r < rhs.abs()` in\n     /// most cases. However, due to a floating point round-off error it can\n     /// result in `r == rhs.abs()`, violating the mathematical definition, if\n     /// `self` is much smaller than `rhs.abs()` in magnitude and `self < 0.0`.\n     /// This result is not an element of the function's codomain, but it is the\n     /// closest floating point number in the real numbers and thus fulfills the\n-    /// property `self == self.div_euc(rhs) * rhs + self.mod_euc(rhs)`\n+    /// property `self == self.div_euclid(rhs) * rhs + self.rem_euclid(rhs)`\n     /// approximatively.\n     ///\n     /// # Examples\n@@ -298,16 +298,16 @@ impl f32 {\n     /// #![feature(euclidean_division)]\n     /// let a: f32 = 7.0;\n     /// let b = 4.0;\n-    /// assert_eq!(a.mod_euc(b), 3.0);\n-    /// assert_eq!((-a).mod_euc(b), 1.0);\n-    /// assert_eq!(a.mod_euc(-b), 3.0);\n-    /// assert_eq!((-a).mod_euc(-b), 1.0);\n+    /// assert_eq!(a.rem_euclid(b), 3.0);\n+    /// assert_eq!((-a).rem_euclid(b), 1.0);\n+    /// assert_eq!(a.rem_euclid(-b), 3.0);\n+    /// assert_eq!((-a).rem_euclid(-b), 1.0);\n     /// // limitation due to round-off error\n-    /// assert!((-std::f32::EPSILON).mod_euc(3.0) != 0.0);\n+    /// assert!((-std::f32::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n-    pub fn mod_euc(self, rhs: f32) -> f32 {\n+    pub fn rem_euclid(self, rhs: f32) -> f32 {\n         let r = self % rhs;\n         if r < 0.0 {\n             r + rhs.abs()"}, {"sha": "b73a67ed9d8a017c63da870f99963fd1e9a7e0d4", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -229,10 +229,10 @@ impl f64 {\n         unsafe { intrinsics::fmaf64(self, a, b) }\n     }\n \n-    /// Calculates Euclidean division, the matching method for `mod_euc`.\n+    /// Calculates Euclidean division, the matching method for `rem_euclid`.\n     ///\n     /// This computes the integer `n` such that\n-    /// `self = n * rhs + self.mod_euc(rhs)`.\n+    /// `self = n * rhs + self.rem_euclid(rhs)`.\n     /// In other words, the result is `self / rhs` rounded to the integer `n`\n     /// such that `self >= n * rhs`.\n     ///\n@@ -242,30 +242,30 @@ impl f64 {\n     /// #![feature(euclidean_division)]\n     /// let a: f64 = 7.0;\n     /// let b = 4.0;\n-    /// assert_eq!(a.div_euc(b), 1.0); // 7.0 > 4.0 * 1.0\n-    /// assert_eq!((-a).div_euc(b), -2.0); // -7.0 >= 4.0 * -2.0\n-    /// assert_eq!(a.div_euc(-b), -1.0); // 7.0 >= -4.0 * -1.0\n-    /// assert_eq!((-a).div_euc(-b), 2.0); // -7.0 >= -4.0 * 2.0\n+    /// assert_eq!(a.div_euclid(b), 1.0); // 7.0 > 4.0 * 1.0\n+    /// assert_eq!((-a).div_euclid(b), -2.0); // -7.0 >= 4.0 * -2.0\n+    /// assert_eq!(a.div_euclid(-b), -1.0); // 7.0 >= -4.0 * -1.0\n+    /// assert_eq!((-a).div_euclid(-b), 2.0); // -7.0 >= -4.0 * 2.0\n     /// ```\n     #[inline]\n     #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n-    pub fn div_euc(self, rhs: f64) -> f64 {\n+    pub fn div_euclid(self, rhs: f64) -> f64 {\n         let q = (self / rhs).trunc();\n         if self % rhs < 0.0 {\n             return if rhs > 0.0 { q - 1.0 } else { q + 1.0 }\n         }\n         q\n     }\n \n-    /// Calculates the Euclidean modulo (self mod rhs), which is never negative.\n+    /// Calculates the least nonnegative remainder of `self (mod rhs)`.\n     ///\n     /// In particular, the return value `r` satisfies `0.0 <= r < rhs.abs()` in\n     /// most cases.  However, due to a floating point round-off error it can\n     /// result in `r == rhs.abs()`, violating the mathematical definition, if\n     /// `self` is much smaller than `rhs.abs()` in magnitude and `self < 0.0`.\n     /// This result is not an element of the function's codomain, but it is the\n     /// closest floating point number in the real numbers and thus fulfills the\n-    /// property `self == self.div_euc(rhs) * rhs + self.mod_euc(rhs)`\n+    /// property `self == self.div_euclid(rhs) * rhs + self.rem_euclid(rhs)`\n     /// approximatively.\n     ///\n     /// # Examples\n@@ -274,16 +274,16 @@ impl f64 {\n     /// #![feature(euclidean_division)]\n     /// let a: f64 = 7.0;\n     /// let b = 4.0;\n-    /// assert_eq!(a.mod_euc(b), 3.0);\n-    /// assert_eq!((-a).mod_euc(b), 1.0);\n-    /// assert_eq!(a.mod_euc(-b), 3.0);\n-    /// assert_eq!((-a).mod_euc(-b), 1.0);\n+    /// assert_eq!(a.rem_euclid(b), 3.0);\n+    /// assert_eq!((-a).rem_euclid(b), 1.0);\n+    /// assert_eq!(a.rem_euclid(-b), 3.0);\n+    /// assert_eq!((-a).rem_euclid(-b), 1.0);\n     /// // limitation due to round-off error\n-    /// assert!((-std::f64::EPSILON).mod_euc(3.0) != 0.0);\n+    /// assert!((-std::f64::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n     #[inline]\n     #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n-    pub fn mod_euc(self, rhs: f64) -> f64 {\n+    pub fn rem_euclid(self, rhs: f64) -> f64 {\n         let r = self % rhs;\n         if r < 0.0 {\n             r + rhs.abs()"}, {"sha": "7aaf89cd0ff71dc502b8f8010a5581a6a3ed65af", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -294,7 +294,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// `.into_inner()` immediately after a seek yields the underlying reader\n     /// at the same position.\n     ///\n-    /// To seek without discarding the internal buffer, use [`Seek::seek_relative`].\n+    /// To seek without discarding the internal buffer, use [`BufReader::seek_relative`].\n     ///\n     /// See [`std::io::Seek`] for more details.\n     ///\n@@ -303,6 +303,9 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// seeks will be performed instead of one. If the second seek returns\n     /// `Err`, the underlying reader will be left at the same position it would\n     /// have if you called `seek` with `SeekFrom::Current(0)`.\n+    ///\n+    /// [`BufReader::seek_relative`]: struct.BufReader.html#method.seek_relative\n+    /// [`std::io::Seek`]: trait.Seek.html\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         let result: u64;\n         if let SeekFrom::Current(n) = pos {"}, {"sha": "324852355b0d66847f125684e64ab5e13559de5e", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -225,6 +225,9 @@ impl From<ErrorKind> for Error {\n     /// let error = Error::from(not_found);\n     /// assert_eq!(\"entity not found\", format!(\"{}\", error));\n     /// ```\n+    ///\n+    /// [`ErrorKind`]: ../../std/io/enum.ErrorKind.html\n+    /// [`Error`]: ../../std/io/struct.Error.html\n     #[inline]\n     fn from(kind: ErrorKind) -> Error {\n         Error {"}, {"sha": "0d3de34fe64383c0bfcd288c307a302348558039", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -222,6 +222,7 @@\n #![no_std]\n \n #![deny(missing_docs)]\n+#![deny(intra_doc_link_resolution_failure)]\n #![deny(missing_debug_implementations)]\n \n // Tell the compiler to link to either panic_abort or panic_unwind"}, {"sha": "df05eb7d6042d79d7674a17e89b7d7d2a5f625a4", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1461,7 +1461,7 @@ impl From<String> for PathBuf {\n     }\n }\n \n-#[stable(feature = \"path_from_str\", since = \"1.26.0\")]\n+#[stable(feature = \"path_from_str\", since = \"1.32.0\")]\n impl FromStr for PathBuf {\n     type Err = ParseError;\n "}, {"sha": "49ede0674ce42cbe3e43a042194aa8448ddaa980", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -56,6 +56,14 @@ IMAGE_BASE:\n     globvar CFGDATA_BASE 8\n     /*  Non-zero if debugging is enabled, zero otherwise */\n     globvar DEBUG 1\n+    /*  The base address (relative to enclave start) of the enclave text section */\n+    globvar TEXT_BASE 8\n+    /*  The size in bytes of enclacve text section */\n+    globvar TEXT_SIZE 8\n+    /*  The base address (relative to enclave start) of the enclave EH_FRM_HDR section */\n+    globvar EH_FRM_HDR_BASE 8\n+    /*  The size in bytes of enclacve EH_FRM_HDR section */\n+    globvar EH_FRM_HDR_SIZE 8\n \n .Lreentry_panic_msg:\n     .asciz \"Re-entered panicked enclave!\""}, {"sha": "d1af98bd4f525ccf9e89cd4a6da5dfed35be0dd4", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 131, "deletions": 6, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -9,22 +9,33 @@\n // except according to those terms.\n \n use num::NonZeroUsize;\n+use slice;\n+use str;\n \n-use super::waitqueue::{WaitVariable, WaitQueue, SpinMutex, NotifiedTcs, try_lock_or_false};\n+use super::waitqueue::{\n+    try_lock_or_false, NotifiedTcs, SpinMutex, SpinMutexGuard, WaitQueue, WaitVariable,\n+};\n+use mem;\n \n pub struct RWLock {\n     readers: SpinMutex<WaitVariable<Option<NonZeroUsize>>>,\n     writer: SpinMutex<WaitVariable<bool>>,\n }\n \n+// Below is to check at compile time, that RWLock has size of 128 bytes.\n+#[allow(dead_code)]\n+unsafe fn rw_lock_size_assert(r: RWLock) {\n+    mem::transmute::<RWLock, [u8; 128]>(r);\n+}\n+\n //unsafe impl Send for RWLock {}\n //unsafe impl Sync for RWLock {} // FIXME\n \n impl RWLock {\n     pub const fn new() -> RWLock {\n         RWLock {\n             readers: SpinMutex::new(WaitVariable::new(None)),\n-            writer: SpinMutex::new(WaitVariable::new(false))\n+            writer: SpinMutex::new(WaitVariable::new(false)),\n         }\n     }\n \n@@ -89,9 +100,11 @@ impl RWLock {\n     }\n \n     #[inline]\n-    pub unsafe fn read_unlock(&self) {\n-        let mut rguard = self.readers.lock();\n-        let wguard = self.writer.lock();\n+    unsafe fn __read_unlock(\n+        &self,\n+        mut rguard: SpinMutexGuard<WaitVariable<Option<NonZeroUsize>>>,\n+        wguard: SpinMutexGuard<WaitVariable<bool>>,\n+    ) {\n         *rguard.lock_var_mut() = NonZeroUsize::new(rguard.lock_var().unwrap().get() - 1);\n         if rguard.lock_var().is_some() {\n             // There are other active readers\n@@ -107,9 +120,18 @@ impl RWLock {\n     }\n \n     #[inline]\n-    pub unsafe fn write_unlock(&self) {\n+    pub unsafe fn read_unlock(&self) {\n         let rguard = self.readers.lock();\n         let wguard = self.writer.lock();\n+        self.__read_unlock(rguard, wguard);\n+    }\n+\n+    #[inline]\n+    unsafe fn __write_unlock(\n+        &self,\n+        rguard: SpinMutexGuard<WaitVariable<Option<NonZeroUsize>>>,\n+        wguard: SpinMutexGuard<WaitVariable<bool>>,\n+    ) {\n         if let Err(mut wguard) = WaitQueue::notify_one(wguard) {\n             // No writers waiting, release the write lock\n             *wguard.lock_var_mut() = false;\n@@ -128,6 +150,109 @@ impl RWLock {\n         }\n     }\n \n+    #[inline]\n+    pub unsafe fn write_unlock(&self) {\n+        let rguard = self.readers.lock();\n+        let wguard = self.writer.lock();\n+        self.__write_unlock(rguard, wguard);\n+    }\n+\n+    #[inline]\n+    unsafe fn unlock(&self) {\n+        let rguard = self.readers.lock();\n+        let wguard = self.writer.lock();\n+        if *wguard.lock_var() == true {\n+            self.__write_unlock(rguard, wguard);\n+        } else {\n+            self.__read_unlock(rguard, wguard);\n+        }\n+    }\n+\n     #[inline]\n     pub unsafe fn destroy(&self) {}\n }\n+\n+const EINVAL: i32 = 22;\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_rwlock_rdlock(p: *mut RWLock) -> i32 {\n+    if p.is_null() {\n+        return EINVAL;\n+    }\n+    (*p).read();\n+    return 0;\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_rwlock_wrlock(p: *mut RWLock) -> i32 {\n+    if p.is_null() {\n+        return EINVAL;\n+    }\n+    (*p).write();\n+    return 0;\n+}\n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_rwlock_unlock(p: *mut RWLock) -> i32 {\n+    if p.is_null() {\n+        return EINVAL;\n+    }\n+    (*p).unlock();\n+    return 0;\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_print_err(m: *mut u8, s: i32) {\n+    if s < 0 {\n+        return;\n+    }\n+    let buf = slice::from_raw_parts(m as *const u8, s as _);\n+    if let Ok(s) = str::from_utf8(&buf[..buf.iter().position(|&b| b == 0).unwrap_or(buf.len())]) {\n+        eprint!(\"{}\", s);\n+    }\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn __rust_abort() {\n+    ::sys::abort_internal();\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+\n+    use super::*;\n+    use core::array::FixedSizeArray;\n+    use mem::MaybeUninit;\n+    use {mem, ptr};\n+\n+    // The below test verifies that the bytes of initialized RWLock are the ones\n+    // we use in libunwind.\n+    // If they change we need to update src/UnwindRustSgx.h in libunwind.\n+    #[test]\n+    fn test_c_rwlock_initializer() {\n+        const RWLOCK_INIT: &[u8] = &[\n+            0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+            0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n+        ];\n+\n+        let mut init = MaybeUninit::<RWLock>::zeroed();\n+        init.set(RWLock::new());\n+        assert_eq!(\n+            mem::transmute::<_, [u8; 128]>(init.into_inner()).as_slice(),\n+            RWLOCK_INIT\n+        );\n+    }\n+}"}, {"sha": "941a3a288da5cc7bdc457f1764be9ef14394275e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -397,9 +397,6 @@ declare_features! (\n     // Multiple patterns with `|` in `if let` and `while let`.\n     (active, if_while_or_patterns, \"1.26.0\", Some(48215), None),\n \n-    // Allows `#[repr(packed)]` attribute on structs.\n-    (active, repr_packed, \"1.26.0\", Some(33158), None),\n-\n     // Allows macro invocations in `extern {}` blocks.\n     (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n \n@@ -684,17 +681,19 @@ declare_features! (\n     // `extern crate foo as bar;` puts `bar` into extern prelude.\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n     // Allows use of the `:literal` macro fragment specifier (RFC 1576).\n-    (accepted, macro_literal_matcher, \"1.31.0\", Some(35625), None),\n-    // Integer match exhaustiveness checking (RFC 2591)\n-    (accepted, exhaustive_integer_patterns, \"1.32.0\", Some(50907), None),\n+    (accepted, macro_literal_matcher, \"1.32.0\", Some(35625), None),\n     // Use `?` as the Kleene \"at most one\" operator.\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n     // `Self` struct constructor (RFC 2302)\n     (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n     // `Self` in type definitions (RFC 2300)\n     (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n+    // Integer match exhaustiveness checking (RFC 2591)\n+    (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n     // `use path as _;` and `extern crate c as _;`\n     (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n+    // Allows `#[repr(packed(N))]` attribute on structs.\n+    (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n );\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must\n@@ -1588,13 +1587,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                             gate_feature_post!(&self, repr_simd, attr.span,\n                                                \"SIMD types are experimental and possibly buggy\");\n                         }\n-                        if let Some((name, _)) = item.name_value_literal() {\n-                            if name == \"packed\" {\n-                                gate_feature_post!(&self, repr_packed, attr.span,\n-                                                   \"the `#[repr(packed(n))]` attribute \\\n-                                                    is experimental\");\n-                            }\n-                        }\n                     }\n                 }\n             }"}, {"sha": "954eb9d6d03ba81b27c0ed6ed92ca2d0d85e11de", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -26,10 +26,7 @@ mod macros;\n cfg_if! {\n     if #[cfg(target_env = \"msvc\")] {\n         // no extra unwinder support needed\n-    } else if #[cfg(any(\n-        all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-        target_env = \"sgx\"\n-    ))] {\n+    } else if #[cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))] {\n         // no unwinder on the system!\n     } else {\n         extern crate libc;"}, {"sha": "fb6507fd22a4b3c9106d37b9ad04b5dace6f1729", "filename": "src/test/codegen/packed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fcodegen%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fcodegen%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpacked.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -13,7 +13,6 @@\n // min-llvm-version 7.0\n \n #![crate_type = \"lib\"]\n-#![feature(repr_packed)]\n \n #[repr(packed)]\n pub struct Packed1 {"}, {"sha": "0d5b211bca9b64b4204feb2b7ecffaa6a746ff64", "filename": "src/test/run-pass/issues/issue-48159.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fissues%2Fissue-48159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fissues%2Fissue-48159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-48159.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(repr_packed)]\n #![allow(non_camel_case_types)]\n \n use std::mem;"}, {"sha": "6884c360e4a58660e5e9f0f28e02b1daf4a525aa", "filename": "src/test/run-pass/packed/auxiliary/packed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fauxiliary%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fauxiliary%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fauxiliary%2Fpacked.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(repr_packed)]\n-\n #[repr(packed)]\n pub struct P1S5 {\n     a: u8,"}, {"sha": "87c26c597f58f8c6b5d3bda782c850c00276f6f4", "filename": "src/test/run-pass/packed/packed-struct-borrow-element.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-borrow-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-borrow-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-borrow-element.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -12,8 +12,6 @@\n #![allow(dead_code)]\n // ignore-emscripten weird assertion?\n \n-#![feature(repr_packed)]\n-\n #[repr(packed)]\n struct Foo1 {\n     bar: u8,"}, {"sha": "9608ff4ec0e929511819d428328ae8f0b096e143", "filename": "src/test/run-pass/packed/packed-struct-generic-size.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -10,11 +10,8 @@\n \n // run-pass\n #![allow(dead_code)]\n-#![allow(stable_features)]\n #![allow(unused_comparisons)]\n \n-#![feature(repr_packed)]\n-\n use std::mem;\n \n #[repr(packed)]"}, {"sha": "672952f6e9f3beff54e0d84b9875a32666a5d007", "filename": "src/test/run-pass/packed/packed-struct-generic-size.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-generic-size.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1,35 +1,35 @@\n warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:49:14\n+  --> $DIR/packed-struct-generic-size.rs:46:14\n    |\n LL |     check!(P1::<u8, u8>, 1, 3);\n    |              ^^ try removing `::`\n \n warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:50:14\n+  --> $DIR/packed-struct-generic-size.rs:47:14\n    |\n LL |     check!(P1::<u64, u16>, 1, 11);\n    |              ^^ try removing `::`\n \n warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:52:14\n+  --> $DIR/packed-struct-generic-size.rs:49:14\n    |\n LL |     check!(P2::<u8, u8>, 1, 3);\n    |              ^^ try removing `::`\n \n warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:53:14\n+  --> $DIR/packed-struct-generic-size.rs:50:14\n    |\n LL |     check!(P2::<u64, u16>, 2, 12);\n    |              ^^ try removing `::`\n \n warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:55:15\n+  --> $DIR/packed-struct-generic-size.rs:52:15\n    |\n LL |     check!(P4C::<u8, u8>, 1, 3);\n    |               ^^ try removing `::`\n \n warning: unnecessary path disambiguator\n-  --> $DIR/packed-struct-generic-size.rs:56:15\n+  --> $DIR/packed-struct-generic-size.rs:53:15\n    |\n LL |     check!(P4C::<u16, u64>, 4, 12);\n    |               ^^ try removing `::`"}, {"sha": "21ef55e5a42f52682e8cb6c8707fdee27b37e1c6", "filename": "src/test/run-pass/packed/packed-struct-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-match.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(repr_packed)]\n \n #[repr(packed)]\n struct Foo1 {"}, {"sha": "d6a236ffc6d68b4dc020381543bd753edc2722e2", "filename": "src/test/run-pass/packed/packed-struct-size.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-size.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -13,9 +13,6 @@\n #![allow(non_camel_case_types)]\n #![allow(non_upper_case_globals)]\n \n-#![feature(repr_packed)]\n-\n-\n use std::mem;\n \n #[repr(packed)]"}, {"sha": "6fd24479c195968876d8180055f1929914dab58c", "filename": "src/test/run-pass/packed/packed-struct-vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-struct-vec.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // run-pass\n-#![feature(repr_packed)]\n \n use std::fmt;\n use std::mem;"}, {"sha": "8b18bd33c74d9dc4faedf375549b5f00d828ada3", "filename": "src/test/run-pass/packed/packed-tuple-struct-size.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-tuple-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-tuple-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked%2Fpacked-tuple-struct-size.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -12,8 +12,6 @@\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n-#![feature(repr_packed)]\n-\n use std::mem;\n \n #[repr(packed)]"}, {"sha": "109d5b75590dfd3089cc12513725c8a3a290d44c", "filename": "src/test/run-pass/structs-enums/align-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fstructs-enums%2Falign-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Fstructs-enums%2Falign-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Falign-struct.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -11,7 +11,6 @@\n // run-pass\n #![allow(dead_code)]\n #![feature(box_syntax)]\n-#![feature(repr_packed)]\n \n use std::mem;\n "}, {"sha": "4c9e06a395c05dcae779d21197aee8897f8d1591", "filename": "src/test/run-pass/union/union-packed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Funion%2Funion-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frun-pass%2Funion%2Funion-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-packed.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -13,7 +13,6 @@\n #![allow(non_snake_case)]\n \n #![feature(untagged_unions)]\n-#![feature(repr_packed)]\n \n use std::mem::{size_of, size_of_val, align_of, align_of_val};\n "}, {"sha": "7df3fee3365834264c6ec89e1508326c855e450b", "filename": "src/test/rustdoc/static-root-path.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-Z unstable-options --static-root-path /cache/\n+\n+// @has static_root_path/struct.SomeStruct.html\n+// @matches - '\"/cache/main\\.js\"'\n+// @!matches - '\"\\.\\./main\\.js\"'\n+// @matches - '\"\\.\\./search-index\\.js\"'\n+// @!matches - '\"/cache/search-index\\.js\"'\n+pub struct SomeStruct;\n+\n+// @has src/static_root_path/static-root-path.rs.html\n+// @matches - '\"/cache/source-script\\.js\"'\n+// @!matches - '\"\\.\\./\\.\\./source-script\\.js\"'\n+// @matches - '\"\\.\\./\\.\\./source-files.js\"'\n+// @!matches - '\"/cache/source-files\\.js\"'"}, {"sha": "5ea0ce5ba41ed8225bf5f0cdaff42f8851f4a238", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.nll.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -10,9 +10,8 @@ LL |       Foo::Y(_, ref mut b) => b,\n LL |     *a += 1;\n    |     ------- borrow later used here\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error[E0503]: cannot use `y` because it was mutably borrowed\n   --> $DIR/borrowck-anon-fields-variant.rs:44:7"}, {"sha": "3c457bff7cf7e52d215761d2d43860ede5466870", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -350,9 +350,8 @@ LL |             let p: &'a u8 = &*block.current;\n LL |             drop(x);\n    |                  - mutable borrow later used here\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:260:33\n@@ -365,9 +364,8 @@ LL |             let p : *const u8 = &*(*block).current;\n LL |             drop(x);\n    |                  - mutable borrow later used here\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-describe-lvalue.rs:318:22"}, {"sha": "032b8ddcbca68ed4393c99f93c6bcc6bb21046f1", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.edition.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.edition.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -4,7 +4,6 @@ warning[E0507]: cannot move out of borrowed content\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n "}, {"sha": "032b8ddcbca68ed4393c99f93c6bcc6bb21046f1", "filename": "src/test/ui/borrowck/borrowck-migrate-to-nll.zflag.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-migrate-to-nll.zflag.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -4,7 +4,6 @@ warning[E0507]: cannot move out of borrowed content\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n "}, {"sha": "f16bd1003f934a11abde3dec9b6c4d031b3f1b86", "filename": "src/test/ui/conflicting-repr-hints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconflicting-repr-hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconflicting-repr-hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(dead_code)]\n-#![feature(repr_packed)]\n \n #[repr(C)]\n enum A { A }"}, {"sha": "01b72d93823cc555002764145ef060c129227881", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1,63 +1,63 @@\n warning[E0566]: conflicting representation hints\n-  --> $DIR/conflicting-repr-hints.rs:20:8\n+  --> $DIR/conflicting-repr-hints.rs:19:8\n    |\n LL | #[repr(C, u64)] //~ WARNING conflicting representation hints\n    |        ^  ^^^\n \n warning[E0566]: conflicting representation hints\n-  --> $DIR/conflicting-repr-hints.rs:23:8\n+  --> $DIR/conflicting-repr-hints.rs:22:8\n    |\n LL | #[repr(u32, u64)] //~ WARNING conflicting representation hints\n    |        ^^^  ^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:30:1\n+  --> $DIR/conflicting-repr-hints.rs:29:1\n    |\n LL | struct F(i32); //~ ERROR type has conflicting packed and align representation hints\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:34:1\n+  --> $DIR/conflicting-repr-hints.rs:33:1\n    |\n LL | struct G(i32); //~ ERROR type has conflicting packed and align representation hints\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:38:1\n+  --> $DIR/conflicting-repr-hints.rs:37:1\n    |\n LL | struct H(i32); //~ ERROR type has conflicting packed and align representation hints\n    | ^^^^^^^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n-  --> $DIR/conflicting-repr-hints.rs:41:1\n+  --> $DIR/conflicting-repr-hints.rs:40:1\n    |\n LL | struct I(i32); //~ ERROR type has conflicting packed representation hints\n    | ^^^^^^^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n-  --> $DIR/conflicting-repr-hints.rs:45:1\n+  --> $DIR/conflicting-repr-hints.rs:44:1\n    |\n LL | struct J(i32); //~ ERROR type has conflicting packed representation hints\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:51:1\n+  --> $DIR/conflicting-repr-hints.rs:50:1\n    |\n LL | / union X { //~ ERROR type has conflicting packed and align representation hints\n LL | |     i: i32\n LL | | }\n    | |_^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:57:1\n+  --> $DIR/conflicting-repr-hints.rs:56:1\n    |\n LL | / union Y { //~ ERROR type has conflicting packed and align representation hints\n LL | |     i: i32\n LL | | }\n    | |_^\n \n error[E0587]: type has conflicting packed and align representation hints\n-  --> $DIR/conflicting-repr-hints.rs:63:1\n+  --> $DIR/conflicting-repr-hints.rs:62:1\n    |\n LL | / union Z { //~ ERROR type has conflicting packed and align representation hints\n LL | |     i: i32"}, {"sha": "916fc3e0d880d141a9b5c1c10c97b5e5e99a7b49", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -199,9 +199,8 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                                               |temporary value created here\n    |                                                               returns a reference to data owned by the current function\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:147:41"}, {"sha": "96abc1042086923b9644a6f48412fbfc2bd0cd2c", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -19,9 +19,8 @@ LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  |creates a temporary which is freed while still in use\n    |                                                                  cast requires that borrow lasts for `'static`\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error: aborting due to 2 previous errors\n "}, {"sha": "68b9a20ecf90bc0be8d9e9d50fead1d94c6715df", "filename": "src/test/ui/consts/promoted_regression.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fpromoted_regression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fconsts%2Fpromoted_regression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_regression.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -0,0 +1,9 @@\n+// compile-pass\n+\n+fn main() {\n+    let _ = &[(\"\", \"\"); 3];\n+}\n+\n+const FOO: &[(&str, &str)] = &[(\"\", \"\"); 3];\n+const BAR: &[(&str, &str); 5] = &[(\"\", \"\"); 5];\n+const BAA: &[[&str; 12]; 11] = &[[\"\"; 12]; 11];"}, {"sha": "65e3be288fdf72447a0a038a32a819775c655158", "filename": "src/test/ui/feature-gates/feature-gate-repr_packed.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d3e909e4e68259e15ca2908ff9e854f0a68bbec/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3e909e4e68259e15ca2908ff9e854f0a68bbec/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.rs?ref=2d3e909e4e68259e15ca2908ff9e854f0a68bbec", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#[repr(packed(1))] //~ error: the `#[repr(packed(n))]` attribute is experimental\n-struct Foo(u64);\n-\n-#[repr(C)]\n-#[repr(packed(1))] //~ error: the `#[repr(packed(n))]` attribute is experimental\n-struct Bar(u64);\n-\n-fn main() {}"}, {"sha": "ed89a3f6b3169373f6290c0ecf2eda56ffee56f9", "filename": "src/test/ui/feature-gates/feature-gate-repr_packed.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d3e909e4e68259e15ca2908ff9e854f0a68bbec/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d3e909e4e68259e15ca2908ff9e854f0a68bbec/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-repr_packed.stderr?ref=2d3e909e4e68259e15ca2908ff9e854f0a68bbec", "patch": "@@ -1,19 +0,0 @@\n-error[E0658]: the `#[repr(packed(n))]` attribute is experimental (see issue #33158)\n-  --> $DIR/feature-gate-repr_packed.rs:11:1\n-   |\n-LL | #[repr(packed(1))] //~ error: the `#[repr(packed(n))]` attribute is experimental\n-   | ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(repr_packed)] to the crate attributes to enable\n-\n-error[E0658]: the `#[repr(packed(n))]` attribute is experimental (see issue #33158)\n-  --> $DIR/feature-gate-repr_packed.rs:15:1\n-   |\n-LL | #[repr(packed(1))] //~ error: the `#[repr(packed(n))]` attribute is experimental\n-   | ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(repr_packed)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "1601f6d44679a8c0eacc0f430a2ca9b396354af5", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -8,7 +8,6 @@ LL |         &mut x\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n "}, {"sha": "3c7e60520cc3b3bd197f01cfae4a8ee90528ed62", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -10,7 +10,6 @@ LL | |         }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n "}, {"sha": "8f8105508b3e73acb9266920ef567d059e73fa72", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.ast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.ast.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1,5 +1,5 @@\n error: compilation successful\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:89:1\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:92:1\n    |\n LL | / fn main() { //[ast]~ ERROR compilation successful\n LL | |      //[migrate]~^ ERROR compilation successful"}, {"sha": "7efc9ce744e38861b1b9b29fb45eb17b7952161b", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.migrate.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.migrate.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -9,12 +9,11 @@ LL |     &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor run\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:74:5\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    -- lifetime `'a` defined here\n@@ -24,12 +23,11 @@ LL |     &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n warning[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:83:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:85:5\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n    |                          -- lifetime `'a` defined here\n@@ -39,12 +37,11 @@ LL |     &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor\n LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error: compilation successful\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:89:1\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:92:1\n    |\n LL | / fn main() { //[ast]~ ERROR compilation successful\n LL | |      //[migrate]~^ ERROR compilation successful"}, {"sha": "45815fb589c26bf7abb592b90c21c253275f2114", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -10,7 +10,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:73:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:74:5\n    |\n LL | fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n    |                    -- lifetime `'a` defined here\n@@ -21,7 +21,7 @@ LL | }\n    | - here, drop of `s` needs exclusive access to `*s.0`, because the type `Scribble<'_>` implements the `Drop` trait\n \n error[E0713]: borrow may still be in use when destructor runs\n-  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:83:5\n+  --> $DIR/issue-45696-scribble-on-boxed-borrow.rs:85:5\n    |\n LL | fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n    |                          -- lifetime `'a` defined here"}, {"sha": "0d0d22f993fd3734091a95453a42662b7dd92ba4", "filename": "src/test/ui/issues/issue-45696-scribble-on-boxed-borrow.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45696-scribble-on-boxed-borrow.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -62,7 +62,8 @@ fn boxed_boxed_borrowed_scribble<'a>(s: Box<Box<&'a mut Scribble>>) -> &'a mut u\n fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n     &mut *s.0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n     //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~| WARNING This error has been downgraded to a warning for backwards compatibility\n+    //[migrate]~| WARNING this error has been downgraded to a warning for backwards compatibility\n+    //[migrate]~| WARNING this represents potential undefined behavior in your code\n }\n \n // This, by analogy to previous case, is *also* not okay.\n@@ -72,7 +73,8 @@ fn scribbled<'a>(s: Scribble<'a>) -> &'a mut u32 {\n fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n     &mut *(*s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n     //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~| WARNING This error has been downgraded to a warning for backwards compatibility\n+    //[migrate]~| WARNING this error has been downgraded to a warning for backwards compatibility\n+    //[migrate]~| WARNING this represents potential undefined behavior in your code\n }\n \n // This, by analogy to previous case, is *also* not okay.\n@@ -82,7 +84,8 @@ fn boxed_scribbled<'a>(s: Box<Scribble<'a>>) -> &'a mut u32 {\n fn boxed_boxed_scribbled<'a>(s: Box<Box<Scribble<'a>>>) -> &'a mut u32 {\n     &mut *(**s).0 //[nll]~ ERROR borrow may still be in use when destructor runs [E0713]\n     //[migrate]~^ WARNING borrow may still be in use when destructor runs [E0713]\n-    //[migrate]~| WARNING This error has been downgraded to a warning for backwards compatibility\n+    //[migrate]~| WARNING this error has been downgraded to a warning for backwards compatibility\n+    //[migrate]~| WARNING this represents potential undefined behavior in your code\n }\n \n #[rustc_error]"}, {"sha": "2300d84a3ff2bb5ee00f7c513a3d48bb7c1043c3", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -10,9 +10,8 @@ LL | |         }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error: compilation successful\n   --> $DIR/issue-49824.rs:18:1"}, {"sha": "97b66b2c7c9236c250b18ec88c0e0f9fac57867f", "filename": "src/test/ui/issues/issue-56762.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-56762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-56762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56762.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -0,0 +1,18 @@\n+// only-x86_64\n+const HUGE_SIZE: usize = !0usize / 8;\n+\n+\n+pub struct TooBigArray {\n+    arr: [u8; HUGE_SIZE],\n+}\n+\n+impl TooBigArray {\n+    pub const fn new() -> Self {\n+        TooBigArray { arr: [0x00; HUGE_SIZE], }\n+    }\n+}\n+\n+static MY_TOO_BIG_ARRAY_1: TooBigArray = TooBigArray::new();\n+static MY_TOO_BIG_ARRAY_2: [u8; HUGE_SIZE] = [0x00; HUGE_SIZE];\n+\n+fn main() { }"}, {"sha": "83d5dc62e61618ce10a19e370df78706992692f5", "filename": "src/test/ui/issues/issue-56762.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-56762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fissues%2Fissue-56762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56762.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -0,0 +1,4 @@\n+error: the type `[u8; 2305843009213693951]` is too big for the current architecture\n+\n+error: aborting due to previous error\n+"}, {"sha": "33fb46dce6e38b6d3e2c4227d682dfa2818f0f1c", "filename": "src/test/ui/lint/lint-unknown-lint-cmdline.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-D bogus\n+// compile-flags:-D bogus -D dead_cod\n \n-// error-pattern:unknown lint\n+// error-pattern:unknown lint: `bogus`\n // error-pattern:requested on the command line with `-D bogus`\n+// error-pattern:unknown lint: `dead_cod`\n+// error-pattern:requested on the command line with `-D dead_cod`\n+// error-pattern:did you mean: `dead_code`\n \n fn main() { }"}, {"sha": "58fdae3333ca172dcc2e4e2ec21e103b5122e3ad", "filename": "src/test/ui/lint/lint-unknown-lint-cmdline.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint-cmdline.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -2,6 +2,11 @@ error[E0602]: unknown lint: `bogus`\n    |\n    = note: requested on the command line with `-D bogus`\n \n-error: aborting due to previous error\n+error[E0602]: unknown lint: `dead_cod`\n+   |\n+   = help: did you mean: `dead_code`\n+   = note: requested on the command line with `-D dead_cod`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0602`."}, {"sha": "5d3fd0f19721f1b73661578b46b127af80b99d56", "filename": "src/test/ui/lint/lint-unknown-lint.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -8,6 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(not_a_real_lint)] //~ WARN unknown lint\n-#![deny(unused)]\n-fn main() { let unused = (); } //~ ERROR unused variable\n+#![deny(unknown_lints)]\n+\n+#![allow(not_a_real_lint)] //~ ERROR unknown lint\n+\n+#![deny(dead_cod)] //~ ERROR unknown lint\n+                   //~| HELP did you mean\n+                   //~| SUGGESTION dead_code\n+\n+fn main() {}"}, {"sha": "6fc2da39a7c60312c843864160f5903474556bac", "filename": "src/test/ui/lint/lint-unknown-lint.stderr", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unknown-lint.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1,23 +1,20 @@\n-warning: unknown lint: `not_a_real_lint`\n-  --> $DIR/lint-unknown-lint.rs:11:10\n+error: unknown lint: `not_a_real_lint`\n+  --> $DIR/lint-unknown-lint.rs:13:10\n    |\n-LL | #![allow(not_a_real_lint)] //~ WARN unknown lint\n+LL | #![allow(not_a_real_lint)] //~ ERROR unknown lint\n    |          ^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(unknown_lints)] on by default\n-\n-error: unused variable: `unused`\n-  --> $DIR/lint-unknown-lint.rs:13:17\n-   |\n-LL | fn main() { let unused = (); } //~ ERROR unused variable\n-   |                 ^^^^^^ help: consider using `_unused` instead\n-   |\n note: lint level defined here\n-  --> $DIR/lint-unknown-lint.rs:12:9\n+  --> $DIR/lint-unknown-lint.rs:11:9\n+   |\n+LL | #![deny(unknown_lints)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unknown lint: `dead_cod`\n+  --> $DIR/lint-unknown-lint.rs:15:9\n    |\n-LL | #![deny(unused)]\n-   |         ^^^^^^\n-   = note: #[deny(unused_variables)] implied by #[deny(unused)]\n+LL | #![deny(dead_cod)] //~ ERROR unknown lint\n+   |         ^^^^^^^^ help: did you mean: `dead_code`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "dedbc829913a5fd5e89b4d781eaeb1dc0804cb45", "filename": "src/test/ui/lint/not_found.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -10,11 +10,11 @@ warning: unknown lint: `DEAD_CODE`\n   --> $DIR/not_found.rs:18:8\n    |\n LL | #[warn(DEAD_CODE)]\n-   |        ^^^^^^^^^ help: lowercase the lint name: `dead_code`\n+   |        ^^^^^^^^^ help: did you mean: `dead_code`\n \n warning: unknown lint: `Warnings`\n   --> $DIR/not_found.rs:20:8\n    |\n LL | #[deny(Warnings)]\n-   |        ^^^^^^^^ help: lowercase the lint name: `warnings`\n+   |        ^^^^^^^^ help: did you mean: `warnings`\n "}, {"sha": "46c26d2fd2dc0b38518c7ec7c6c920ae9c7c87fa", "filename": "src/test/ui/nll/match-guards-always-borrow.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -4,9 +4,8 @@ warning[E0507]: cannot move out of borrowed content\n LL |             (|| { let bar = foo; bar.take() })();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error: compilation successful\n   --> $DIR/match-guards-always-borrow.rs:57:1"}, {"sha": "9ff794178fcfad5715d6c01e8f74eb0b317a2d8a", "filename": "src/test/ui/print_type_sizes/packed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fpacked.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -21,7 +21,6 @@\n \n #![allow(dead_code)]\n #![feature(start)]\n-#![feature(repr_packed)]\n \n #[derive(Default)]\n #[repr(packed)]"}, {"sha": "cb0938b861c057a783121ac33dee685352913f0c", "filename": "src/test/ui/target-feature-gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -14,6 +14,11 @@\n // ignore-emscripten\n // ignore-mips\n // ignore-mips64\n+// ignore-powerpc\n+// ignore-powerpc64\n+// ignore-powerpc64le\n+// ignore-sparc\n+// ignore-sparc64\n // gate-test-sse4a_target_feature\n // gate-test-powerpc_target_feature\n // gate-test-avx512_target_feature"}, {"sha": "d7154324d12fe0bd6abf4deab4a7530230b6488a", "filename": "src/test/ui/target-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable (see issue #44839)\n-  --> $DIR/target-feature-gate.rs:31:18\n+  --> $DIR/target-feature-gate.rs:36:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}, {"sha": "83502bac4469f31631425335d8d31d85c25ba8c5", "filename": "src/test/ui/thread-local-in-ctfe.nll.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -18,9 +18,8 @@ LL | static C: &u32 = &A;\n    |                  |\n    |                  thread-local variables cannot be borrowed beyond the end of the function\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n   --> $DIR/thread-local-in-ctfe.rs:22:16\n@@ -42,9 +41,8 @@ LL | const E: &u32 = &A;\n    |                 |\n    |                 thread-local variables cannot be borrowed beyond the end of the function\n    |\n-   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n-           It represents potential unsoundness in your code.\n-           This warning will become a hard error in the future.\n+   = warning: this error has been downgraded to a warning for backwards compatibility with previous releases\n+   = warning: this represents potential undefined behavior in your code and this warning will become a hard error in the future\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n   --> $DIR/thread-local-in-ctfe.rs:29:5"}, {"sha": "4e25e3a77110a1ad23d61dcb63beb2eed5171dc3", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -205,7 +205,7 @@ impl EarlyProps {\n         fn ignore_lldb(config: &Config, line: &str) -> bool {\n             if let Some(ref actual_version) = config.lldb_version {\n                 if line.starts_with(\"min-lldb-version\") {\n-                    let min_version = line.trim_right()\n+                    let min_version = line.trim_end()\n                         .rsplit(' ')\n                         .next()\n                         .expect(\"Malformed lldb version directive\");\n@@ -228,15 +228,15 @@ impl EarlyProps {\n             }\n             if let Some(ref actual_version) = config.llvm_version {\n                 if line.starts_with(\"min-llvm-version\") {\n-                    let min_version = line.trim_right()\n+                    let min_version = line.trim_end()\n                         .rsplit(' ')\n                         .next()\n                         .expect(\"Malformed llvm version directive\");\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n                     &actual_version[..] < min_version\n                 } else if line.starts_with(\"min-system-llvm-version\") {\n-                    let min_version = line.trim_right()\n+                    let min_version = line.trim_end()\n                         .rsplit(' ')\n                         .next()\n                         .expect(\"Malformed llvm version directive\");\n@@ -573,14 +573,14 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n                     None => false,\n                 };\n                 if matches {\n-                    it(ln[(close_brace + 1)..].trim_left());\n+                    it(ln[(close_brace + 1)..].trim_start());\n                 }\n             } else {\n                 panic!(\"malformed condition directive: expected `{}foo]`, found `{}`\",\n                         comment_with_brace, ln)\n             }\n         } else if ln.starts_with(comment) {\n-            it(ln[comment.len() ..].trim_left());\n+            it(ln[comment.len() ..].trim_start());\n         }\n     }\n     return;"}, {"sha": "0b3fc5a192451efc3d85fa1a36d86fcc9fde341d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -1082,7 +1082,7 @@ impl<'test> TestCx<'test> {\n             match line {\n                 Ok(line) => {\n                     let line = if line.starts_with(\"//\") {\n-                        line[2..].trim_left()\n+                        line[2..].trim_start()\n                     } else {\n                         line.as_str()\n                     };\n@@ -2146,8 +2146,8 @@ impl<'test> TestCx<'test> {\n             .lines()\n             .enumerate()\n             .filter_map(|(line_nb, line)| {\n-                if (line.trim_left().starts_with(\"pub mod \")\n-                    || line.trim_left().starts_with(\"mod \"))\n+                if (line.trim_start().starts_with(\"pub mod \")\n+                    || line.trim_start().starts_with(\"mod \"))\n                     && line.ends_with(';')\n                 {\n                     if let Some(ref mut other_files) = other_files {\n@@ -2156,7 +2156,7 @@ impl<'test> TestCx<'test> {\n                     None\n                 } else {\n                     let sline = line.split(\"///\").last().unwrap_or(\"\");\n-                    let line = sline.trim_left();\n+                    let line = sline.trim_start();\n                     if line.starts_with(\"```\") {\n                         if ignore {\n                             ignore = false;\n@@ -3287,7 +3287,7 @@ fn normalize_mir_line(line: &str) -> String {\n fn nocomment_mir_line(line: &str) -> &str {\n     if let Some(idx) = line.find(\"//\") {\n         let (l, _) = line.split_at(idx);\n-        l.trim_right()\n+        l.trim_end()\n     } else {\n         line\n     }"}, {"sha": "65ed86742e74b2f841b016de58043b6b33a4f588", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/16329b0ad3610b47a97a051df88405b1587238bd/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=16329b0ad3610b47a97a051df88405b1587238bd", "patch": "@@ -26,7 +26,10 @@ function getNextStep(content, pos, stop) {\n     return pos;\n }\n \n-// Stupid function extractor based on indent.\n+// Stupid function extractor based on indent. Doesn't support block\n+// comments. If someone puts a ' or an \" in a block comment this\n+// will blow up. Template strings are not tested and might also be\n+// broken.\n function extractFunction(content, functionName) {\n     var indent = 0;\n     var splitter = \"function \" + functionName + \"(\";\n@@ -51,7 +54,14 @@ function extractFunction(content, functionName) {\n             continue;\n         }\n         while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n+            // Eat single-line comments\n+            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n+                do {\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== '\\n');\n+\n+            // Eat quoted strings\n+            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n                 var stop = content[pos];\n                 var is_escaped = false;\n                 do {\n@@ -62,6 +72,8 @@ function extractFunction(content, functionName) {\n                     }\n                 } while (pos < content.length &&\n                          (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+\n+            // Otherwise, check for indent\n             } else if (content[pos] === '{') {\n                 indent += 1;\n             } else if (content[pos] === '}') {"}]}