{"sha": "00b260691fc85020c2b58d263665fe4808b72ac1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYjI2MDY5MWZjODUwMjBjMmI1OGQyNjM2NjVmZTQ4MDhiNzJhYzE=", "commit": {"author": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-08-20T21:39:47Z"}, "committer": {"name": "Kyle Simpson", "email": "kyleandrew.simpson@gmail.com", "date": "2018-08-20T21:39:47Z"}, "message": "Mark impl Trait Functions as reachable. (Fixes #50865)", "tree": {"sha": "237a5dc28ff469afd3d589bbef30a9b254431dcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/237a5dc28ff469afd3d589bbef30a9b254431dcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b260691fc85020c2b58d263665fe4808b72ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b260691fc85020c2b58d263665fe4808b72ac1", "html_url": "https://github.com/rust-lang/rust/commit/00b260691fc85020c2b58d263665fe4808b72ac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b260691fc85020c2b58d263665fe4808b72ac1/comments", "author": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FelixMcFelix", "id": 6815381, "node_id": "MDQ6VXNlcjY4MTUzODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6815381?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FelixMcFelix", "html_url": "https://github.com/FelixMcFelix", "followers_url": "https://api.github.com/users/FelixMcFelix/followers", "following_url": "https://api.github.com/users/FelixMcFelix/following{/other_user}", "gists_url": "https://api.github.com/users/FelixMcFelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/FelixMcFelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FelixMcFelix/subscriptions", "organizations_url": "https://api.github.com/users/FelixMcFelix/orgs", "repos_url": "https://api.github.com/users/FelixMcFelix/repos", "events_url": "https://api.github.com/users/FelixMcFelix/events{/privacy}", "received_events_url": "https://api.github.com/users/FelixMcFelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f285876b435e29e309659197790b82ad880650a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f285876b435e29e309659197790b82ad880650a0", "html_url": "https://github.com/rust-lang/rust/commit/f285876b435e29e309659197790b82ad880650a0"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "4b76080e500ab84af399e1e81875d01969c0b352", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00b260691fc85020c2b58d263665fe4808b72ac1/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/00b260691fc85020c2b58d263665fe4808b72ac1/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=00b260691fc85020c2b58d263665fe4808b72ac1", "patch": "@@ -2237,6 +2237,7 @@ dependencies = [\n name = \"rustc_privacy\"\n version = \"0.0.0\"\n dependencies = [\n+ \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_typeck 0.0.0\","}, {"sha": "c7e093380fac31676dd95eb4cf150807a1b37cd5", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b260691fc85020c2b58d263665fe4808b72ac1/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b260691fc85020c2b58d263665fe4808b72ac1/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=00b260691fc85020c2b58d263665fe4808b72ac1", "patch": "@@ -21,6 +21,8 @@ use syntax::ast::NodeId;\n // Accessibility levels, sorted in ascending order\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum AccessLevel {\n+    // Superset of Reachable used to mark impl Trait items.\n+    // ReachableFromImplTrait,\n     // Exported items + items participating in various kinds of public interfaces,\n     // but not directly nameable. For example, if function `fn f() -> T {...}` is\n     // public, then type `T` is reachable. Its values can be obtained by other crates"}, {"sha": "e05b4e79f2e81bf84bd2d9060ec2723d3799de26", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00b260691fc85020c2b58d263665fe4808b72ac1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b260691fc85020c2b58d263665fe4808b72ac1/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=00b260691fc85020c2b58d263665fe4808b72ac1", "patch": "@@ -446,6 +446,8 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     // Step 2: Mark all symbols that the symbols on the worklist touch.\n     reachable_context.propagate();\n \n+    debug!(\"Inline reachability shows: {:?}\", reachable_context.reachable_symbols);\n+\n     // Return the set of reachable symbols.\n     ReachableSet(Lrc::new(reachable_context.reachable_symbols))\n }"}, {"sha": "fea0e3a7435eb012c007895e72154955ef9eb88e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00b260691fc85020c2b58d263665fe4808b72ac1/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b260691fc85020c2b58d263665fe4808b72ac1/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=00b260691fc85020c2b58d263665fe4808b72ac1", "patch": "@@ -159,24 +159,30 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::ForeignMod(..) => {\n                 self.prev_level\n             }\n+            // Impl trait return types mark their parent function.\n+            // It (and its children) are revisited if the change applies.\n+            hir::ItemKind::Existential(ref ty_data) => {\n+                if let Some(impl_trait_fn) = ty_data.impl_trait_fn {\n+                    if let Some(node_id) = self.tcx.hir.as_local_node_id(impl_trait_fn) {\n+                        self.update(node_id, Some(AccessLevel::Reachable));\n+                    }\n+                }\n+                if item.vis.node.is_pub() { self.prev_level } else { None }\n+            }\n             // Other `pub` items inherit levels from parents\n             hir::ItemKind::Const(..) | hir::ItemKind::Enum(..) | hir::ItemKind::ExternCrate(..) |\n             hir::ItemKind::GlobalAsm(..) | hir::ItemKind::Fn(..) | hir::ItemKind::Mod(..) |\n             hir::ItemKind::Static(..) | hir::ItemKind::Struct(..) |\n             hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) |\n-            hir::ItemKind::Existential(..) |\n             hir::ItemKind::Ty(..) | hir::ItemKind::Union(..) | hir::ItemKind::Use(..) => {\n-                if let hir::ItemKind::Fn(ref _decl, ref _header, ref _generics, ref _body) = item.node {\n-                    debug!(\"Walked function\");\n-                }\n                 if item.vis.node.is_pub() { self.prev_level } else { None }\n             }\n         };\n \n         // Update level of the item itself\n         let item_level = self.update(item.id, inherited_item_level);\n \n-        debug!(\"believed to be: {:?}\", item_level);\n+        debug!(\"Its privacy is believed to be: {:?}\", item_level);\n \n         // Update levels of nested things\n         match item.node {"}]}