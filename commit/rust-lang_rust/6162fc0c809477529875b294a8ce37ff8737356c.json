{"sha": "6162fc0c809477529875b294a8ce37ff8737356c", "node_id": "C_kwDOAAsO6NoAKDYxNjJmYzBjODA5NDc3NTI5ODc1YjI5NGE4Y2UzN2ZmODczNzM1NmM", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-09-25T13:25:08Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-10-07T14:59:13Z"}, "message": "Add wrapper for -Z gcc-ld=lld to invoke rust-lld with the correct flavor\n\nThe wrapper is installed as `ld` and `ld64` in the `lib\\rustlib\\<host_target>\\bin\\gcc-ld`\ndirectory and its sole purpose is to invoke `rust-lld` in the parent directory with\nthe correct flavor.", "tree": {"sha": "0f6c8a48e5949f3bb1b9810967dc913d5244e975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f6c8a48e5949f3bb1b9810967dc913d5244e975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6162fc0c809477529875b294a8ce37ff8737356c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6162fc0c809477529875b294a8ce37ff8737356c", "html_url": "https://github.com/rust-lang/rust/commit/6162fc0c809477529875b294a8ce37ff8737356c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6162fc0c809477529875b294a8ce37ff8737356c/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc", "html_url": "https://github.com/rust-lang/rust/commit/ca8078d7b2e40c24a39e5fe2a910afef4c91ebfc"}], "stats": {"total": 202, "additions": 189, "deletions": 13}, "files": [{"sha": "870b7d3dbabbd2483f7d39b8a299608edf28e274", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6162fc0c809477529875b294a8ce37ff8737356c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6162fc0c809477529875b294a8ce37ff8737356c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6162fc0c809477529875b294a8ce37ff8737356c", "patch": "@@ -1965,6 +1965,10 @@ dependencies = [\n  \"walkdir\",\n ]\n \n+[[package]]\n+name = \"lld-wrapper\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"lock_api\"\n version = \"0.4.1\""}, {"sha": "42dd5d7ef432ee091c1f18ed1e78601c99d30806", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6162fc0c809477529875b294a8ce37ff8737356c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6162fc0c809477529875b294a8ce37ff8737356c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=6162fc0c809477529875b294a8ce37ff8737356c", "patch": "@@ -36,6 +36,7 @@ members = [\n   \"src/tools/jsondocck\",\n   \"src/tools/html-checker\",\n   \"src/tools/bump-stage0\",\n+  \"src/tools/lld-wrapper\",\n ]\n \n exclude = ["}, {"sha": "4b189672226ea5984ee75c6f2780b12baac1df43", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6162fc0c809477529875b294a8ce37ff8737356c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6162fc0c809477529875b294a8ce37ff8737356c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=6162fc0c809477529875b294a8ce37ff8737356c", "patch": "@@ -1136,14 +1136,14 @@ impl Step for Assemble {\n             // for `-Z gcc-ld=lld`\n             let gcc_ld_dir = libdir_bin.join(\"gcc-ld\");\n             t!(fs::create_dir(&gcc_ld_dir));\n-            builder.copy(\n-                &lld_install.join(\"bin\").join(&src_exe),\n-                &gcc_ld_dir.join(exe(\"ld\", target_compiler.host)),\n-            );\n-            builder.copy(\n-                &lld_install.join(\"bin\").join(&src_exe),\n-                &gcc_ld_dir.join(exe(\"ld64\", target_compiler.host)),\n-            );\n+            for flavor in [\"ld\", \"ld64\"] {\n+                let lld_wrapper_exe = builder.ensure(crate::tool::LldWrapper {\n+                    compiler: build_compiler,\n+                    target: target_compiler.host,\n+                    flavor_feature: flavor,\n+                });\n+                builder.copy(&lld_wrapper_exe, &gcc_ld_dir.join(exe(flavor, target_compiler.host)));\n+            }\n         }\n \n         // Similarly, copy `llvm-dwp` into libdir for Split DWARF. Only copy it when the LLVM"}, {"sha": "d4875cfe1b066e31d74f4d1ed48fc67ace3d26d8", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6162fc0c809477529875b294a8ce37ff8737356c/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6162fc0c809477529875b294a8ce37ff8737356c/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=6162fc0c809477529875b294a8ce37ff8737356c", "patch": "@@ -409,11 +409,14 @@ impl Step for Rustc {\n                 let rust_lld = exe(\"rust-lld\", compiler.host);\n                 builder.copy(&src_dir.join(&rust_lld), &dst_dir.join(&rust_lld));\n                 // for `-Z gcc-ld=lld`\n-                let gcc_lld_dir = dst_dir.join(\"gcc-ld\");\n-                t!(fs::create_dir(&gcc_lld_dir));\n-                builder.copy(&src_dir.join(&rust_lld), &gcc_lld_dir.join(exe(\"ld\", compiler.host)));\n-                builder\n-                    .copy(&src_dir.join(&rust_lld), &gcc_lld_dir.join(exe(\"ld64\", compiler.host)));\n+                let gcc_lld_src_dir = src_dir.join(\"gcc-ld\");\n+                let gcc_lld_dst_dir = dst_dir.join(\"gcc-ld\");\n+                t!(fs::create_dir(&gcc_lld_dst_dir));\n+                for flavor in [\"ld\", \"ld64\"] {\n+                    let exe_name = exe(flavor, compiler.host);\n+                    builder\n+                        .copy(&gcc_lld_src_dir.join(&exe_name), &gcc_lld_dst_dir.join(&exe_name));\n+                }\n             }\n \n             // Copy over llvm-dwp if it's there"}, {"sha": "af6f4bb0e5fcba19c98240a9bdbf80cb8dcad5ef", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6162fc0c809477529875b294a8ce37ff8737356c/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6162fc0c809477529875b294a8ce37ff8737356c/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=6162fc0c809477529875b294a8ce37ff8737356c", "patch": "@@ -664,6 +664,38 @@ impl Step for Cargo {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct LldWrapper {\n+    pub compiler: Compiler,\n+    pub target: TargetSelection,\n+    pub flavor_feature: &'static str,\n+}\n+\n+impl Step for LldWrapper {\n+    type Output = PathBuf;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.never()\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        let src_exe = builder\n+            .ensure(ToolBuild {\n+                compiler: self.compiler,\n+                target: self.target,\n+                tool: \"lld-wrapper\",\n+                mode: Mode::ToolStd,\n+                path: \"src/tools/lld-wrapper\",\n+                is_optional_tool: false,\n+                source_type: SourceType::InTree,\n+                extra_features: vec![self.flavor_feature.to_owned()],\n+            })\n+            .expect(\"expected to build -- essential tool\");\n+\n+        src_exe\n+    }\n+}\n+\n macro_rules! tool_extended {\n     (($sel:ident, $builder:ident),\n        $($name:ident,"}, {"sha": "66a586fd6c35ed049f72f4f8d6c96d6fd93d62bd", "filename": "src/tools/lld-wrapper/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6162fc0c809477529875b294a8ce37ff8737356c/src%2Ftools%2Flld-wrapper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6162fc0c809477529875b294a8ce37ff8737356c/src%2Ftools%2Flld-wrapper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2FCargo.toml?ref=6162fc0c809477529875b294a8ce37ff8737356c", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"lld-wrapper\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+license = \"MIT OR Apache-2.0\"\n+\n+[dependencies]\n+\n+[features]\n+ld = []\n+ld64 = []\n\\ No newline at end of file"}, {"sha": "1601bf1b34e9c44b76f26b9ad44b109019a23878", "filename": "src/tools/lld-wrapper/src/main.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/6162fc0c809477529875b294a8ce37ff8737356c/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6162fc0c809477529875b294a8ce37ff8737356c/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs?ref=6162fc0c809477529875b294a8ce37ff8737356c", "patch": "@@ -0,0 +1,125 @@\n+//! Script to invoke the bundled rust-lld with the correct flavor. The flavor is selected by\n+//! feature.\n+//!\n+//! lld supports multiple command line interfaces. If `-flavor <flavor>` are passed as the first\n+//! two arguments the `<flavor>` command line interface is used to process the remaining arguments.\n+//! If no `-flavor` argument is present the flavor is determined by the executable name.\n+//!\n+//! In Rust with `-Z gcc-ld=lld` we have gcc or clang invoke rust-lld. Since there is no way to\n+//! make gcc/clang pass `-flavor <flavor>` as the first two arguments in the linker invocation\n+//! and since Windows does not support symbolic links for files this wrapper is used in place of a\n+//! symblic link. It execs `../rust-lld -flavor ld` if the feature `ld` is enabled and\n+//! `../rust-lld -flavor ld64` if `ld64` is enabled. On Windows it spawns a `..\\rust-lld.exe`\n+//! child process.\n+\n+#[cfg(not(any(feature = \"ld\", feature = \"ld64\")))]\n+compile_error!(\"One of the features ld and ld64 must be enabled.\");\n+\n+#[cfg(all(feature = \"ld\", feature = \"ld64\"))]\n+compile_error!(\"Only one of the feature ld or ld64 can be enabled.\");\n+\n+#[cfg(feature = \"ld\")]\n+const FLAVOR: &str = \"ld\";\n+\n+#[cfg(feature = \"ld64\")]\n+const FLAVOR: &str = \"ld64\";\n+\n+use std::env;\n+use std::fmt::Display;\n+use std::path::{Path, PathBuf};\n+use std::process;\n+\n+trait ResultExt<T, E> {\n+    fn unwrap_or_exit_with(self, context: &str) -> T;\n+}\n+\n+impl<T, E> ResultExt<T, E> for Result<T, E>\n+where\n+    E: Display,\n+{\n+    fn unwrap_or_exit_with(self, context: &str) -> T {\n+        match self {\n+            Ok(t) => t,\n+            Err(e) => {\n+                eprintln!(\"lld-wrapper: {}: {}\", context, e);\n+                process::exit(1);\n+            }\n+        }\n+    }\n+}\n+\n+trait OptionExt<T> {\n+    fn unwrap_or_exit_with(self, context: &str) -> T;\n+}\n+\n+impl<T> OptionExt<T> for Option<T> {\n+    fn unwrap_or_exit_with(self, context: &str) -> T {\n+        match self {\n+            Some(t) => t,\n+            None => {\n+                eprintln!(\"lld-wrapper: {}\", context);\n+                process::exit(1);\n+            }\n+        }\n+    }\n+}\n+\n+/// Returns the path to rust-lld in the parent directory.\n+///\n+/// Exits if the parent directory cannot be determined.\n+fn get_rust_lld_path(current_exe_path: &Path) -> PathBuf {\n+    let mut rust_lld_exe_name = \"rust-lld\".to_owned();\n+    rust_lld_exe_name.push_str(env::consts::EXE_SUFFIX);\n+    let mut rust_lld_path = current_exe_path\n+        .parent()\n+        .unwrap_or_exit_with(\"directory containing current executable could not be determined\")\n+        .parent()\n+        .unwrap_or_exit_with(\"parent directory could not be determined\")\n+        .to_owned();\n+    rust_lld_path.push(rust_lld_exe_name);\n+    rust_lld_path\n+}\n+\n+/// Returns the command for invoking rust-lld with the correct flavor.\n+///\n+/// Exits on error.\n+fn get_rust_lld_command(current_exe_path: &Path) -> process::Command {\n+    let rust_lld_path = get_rust_lld_path(current_exe_path);\n+    let mut command = process::Command::new(rust_lld_path);\n+    command.arg(\"-flavor\");\n+    command.arg(FLAVOR);\n+    command.args(env::args_os().skip(1));\n+    command\n+}\n+\n+#[cfg(unix)]\n+fn exec_lld(mut command: process::Command) {\n+    use std::os::unix::prelude::CommandExt;\n+    Result::<(), _>::Err(command.exec()).unwrap_or_exit_with(\"could not exec rust-lld\");\n+    unreachable!(\"lld-wrapper: after exec without error\");\n+}\n+\n+#[cfg(not(unix))]\n+fn exec_lld(mut command: process::Command) {\n+    // Windows has no exec(), spawn a child process and wait for it\n+    let exit_status = command.status().unwrap_or_exit_with(\"error running rust-lld child process\");\n+    if !exit_status.success() {\n+        match exit_status.code() {\n+            Some(code) => {\n+                // return the original lld exit code\n+                process::exit(code)\n+            }\n+            None => {\n+                eprintln!(\"lld-wrapper: rust-lld child process exited with error: {}\", exit_status,);\n+                process::exit(1);\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let current_exe_path =\n+        env::current_exe().unwrap_or_exit_with(\"could not get the path of the current executable\");\n+\n+    exec_lld(get_rust_lld_command(current_exe_path.as_ref()));\n+}"}]}