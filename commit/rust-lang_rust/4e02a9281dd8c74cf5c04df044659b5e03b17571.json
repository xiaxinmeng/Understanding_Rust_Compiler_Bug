{"sha": "4e02a9281dd8c74cf5c04df044659b5e03b17571", "node_id": "C_kwDOAAsO6NoAKDRlMDJhOTI4MWRkOGM3NGNmNWMwNGRmMDQ0NjU5YjVlMDNiMTc1NzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-14T05:07:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-14T05:07:11Z"}, "message": "Auto merge of #98041 - jackh726:remove-regionckmode, r=oli-obk\n\nRemove RegionckMode in favor of calling new skip_region_resolution\n\nSimple cleanup. We can skip a bunch of stuff for places where NLL does the region checking, so skip earlier.\n\nr? rust-lang/types", "tree": {"sha": "bdcd5a540aae7f13c704872c9bcf79bf365a853b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdcd5a540aae7f13c704872c9bcf79bf365a853b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e02a9281dd8c74cf5c04df044659b5e03b17571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e02a9281dd8c74cf5c04df044659b5e03b17571", "html_url": "https://github.com/rust-lang/rust/commit/4e02a9281dd8c74cf5c04df044659b5e03b17571", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e02a9281dd8c74cf5c04df044659b5e03b17571/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ecbf87cf355a121a62f0629ea5f880c9bf41fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ecbf87cf355a121a62f0629ea5f880c9bf41fc", "html_url": "https://github.com/rust-lang/rust/commit/a2ecbf87cf355a121a62f0629ea5f880c9bf41fc"}, {"sha": "d716245aa60a5d556c9c2922726183c05a7d945a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d716245aa60a5d556c9c2922726183c05a7d945a", "html_url": "https://github.com/rust-lang/rust/commit/d716245aa60a5d556c9c2922726183c05a7d945a"}], "stats": {"total": 132, "additions": 52, "deletions": 80}, "files": [{"sha": "7975b946ee5ba0f48caf75f7a156edbaee8aff91", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=4e02a9281dd8c74cf5c04df044659b5e03b17571", "patch": "@@ -7,7 +7,6 @@ use crate::infer::region_constraints::VarInfos;\n use crate::infer::region_constraints::VerifyBound;\n use crate::infer::RegionRelations;\n use crate::infer::RegionVariableOrigin;\n-use crate::infer::RegionckMode;\n use crate::infer::SubregionOrigin;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{\n@@ -33,32 +32,23 @@ pub(crate) fn resolve<'tcx>(\n     region_rels: &RegionRelations<'_, 'tcx>,\n     var_infos: VarInfos,\n     data: RegionConstraintData<'tcx>,\n-    mode: RegionckMode,\n ) -> (LexicalRegionResolutions<'tcx>, Vec<RegionResolutionError<'tcx>>) {\n     let mut errors = vec![];\n     let mut resolver = LexicalResolver { region_rels, var_infos, data };\n-    match mode {\n-        RegionckMode::Solve => {\n-            let values = resolver.infer_variable_values(&mut errors);\n-            (values, errors)\n-        }\n-        RegionckMode::Erase => {\n-            // Skip region inference entirely.\n-            (resolver.erased_data(region_rels.tcx), Vec::new())\n-        }\n-    }\n+    let values = resolver.infer_variable_values(&mut errors);\n+    (values, errors)\n }\n \n /// Contains the result of lexical region resolution. Offers methods\n /// to lookup up the final value of a region variable.\n #[derive(Clone)]\n pub struct LexicalRegionResolutions<'tcx> {\n-    values: IndexVec<RegionVid, VarValue<'tcx>>,\n-    error_region: ty::Region<'tcx>,\n+    pub(crate) values: IndexVec<RegionVid, VarValue<'tcx>>,\n+    pub(crate) error_region: ty::Region<'tcx>,\n }\n \n #[derive(Copy, Clone, Debug)]\n-enum VarValue<'tcx> {\n+pub(crate) enum VarValue<'tcx> {\n     Value(Region<'tcx>),\n     ErrorValue,\n }\n@@ -162,19 +152,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         }\n     }\n \n-    /// An erased version of the lexical region resolutions. Used when we're\n-    /// erasing regions and suppressing errors: in item bodies with\n-    /// `-Zborrowck=mir`.\n-    fn erased_data(&self, tcx: TyCtxt<'tcx>) -> LexicalRegionResolutions<'tcx> {\n-        LexicalRegionResolutions {\n-            error_region: tcx.lifetimes.re_static,\n-            values: IndexVec::from_elem_n(\n-                VarValue::Value(tcx.lifetimes.re_erased),\n-                self.num_vars(),\n-            ),\n-        }\n-    }\n-\n     fn dump_constraints(&self, free_regions: &RegionRelations<'_, 'tcx>) {\n         debug!(\"----() Start constraint listing (context={:?}) ()----\", free_regions.context);\n         for (idx, (constraint, _)) in self.data.constraints.iter().enumerate() {"}, {"sha": "017c7abc3aabb94ac07785e101b11d1ad7ecda7e", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=4e02a9281dd8c74cf5c04df044659b5e03b17571", "patch": "@@ -84,20 +84,6 @@ pub(crate) type UnificationTable<'a, 'tcx, T> = ut::UnificationTable<\n     ut::InPlace<T, &'a mut ut::UnificationStorage<T>, &'a mut InferCtxtUndoLogs<'tcx>>,\n >;\n \n-/// How we should handle region solving.\n-///\n-/// This is used so that the region values inferred by HIR region solving are\n-/// not exposed, and so that we can avoid doing work in HIR typeck that MIR\n-/// typeck will also do.\n-#[derive(Copy, Clone, Debug, Default)]\n-pub enum RegionckMode {\n-    /// The default mode: report region errors, don't erase regions.\n-    #[default]\n-    Solve,\n-    /// Erase the results of region after solving.\n-    Erase,\n-}\n-\n /// This type contains all the things within `InferCtxt` that sit within a\n /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot\n /// operations are hot enough that we want only one call to `borrow_mut` per\n@@ -1248,6 +1234,33 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         self.tainted_by_errors_flag.set(true)\n     }\n \n+    pub fn skip_region_resolution(&self) {\n+        let (var_infos, _) = {\n+            let mut inner = self.inner.borrow_mut();\n+            let inner = &mut *inner;\n+            // Note: `inner.region_obligations` may not be empty, because we\n+            // didn't necessarily call `process_registered_region_obligations`.\n+            // This is okay, because that doesn't introduce new vars.\n+            inner\n+                .region_constraint_storage\n+                .take()\n+                .expect(\"regions already resolved\")\n+                .with_log(&mut inner.undo_log)\n+                .into_infos_and_data()\n+        };\n+\n+        let lexical_region_resolutions = LexicalRegionResolutions {\n+            error_region: self.tcx.lifetimes.re_static,\n+            values: rustc_index::vec::IndexVec::from_elem_n(\n+                crate::infer::lexical_region_resolve::VarValue::Value(self.tcx.lifetimes.re_erased),\n+                var_infos.len(),\n+            ),\n+        };\n+\n+        let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));\n+        assert!(old_value.is_none());\n+    }\n+\n     /// Process the region constraints and return any any errors that\n     /// result. After this, no more unification operations should be\n     /// done -- or the compiler will panic -- but it is legal to use\n@@ -1256,7 +1269,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         region_context: DefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-        mode: RegionckMode,\n     ) -> Vec<RegionResolutionError<'tcx>> {\n         let (var_infos, data) = {\n             let mut inner = self.inner.borrow_mut();\n@@ -1278,7 +1290,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());\n \n         let (lexical_region_resolutions, errors) =\n-            lexical_region_resolve::resolve(region_rels, var_infos, data, mode);\n+            lexical_region_resolve::resolve(region_rels, var_infos, data);\n \n         let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));\n         assert!(old_value.is_none());\n@@ -1294,9 +1306,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         region_context: DefId,\n         outlives_env: &OutlivesEnvironment<'tcx>,\n-        mode: RegionckMode,\n     ) {\n-        let errors = self.resolve_regions(region_context, outlives_env, mode);\n+        let errors = self.resolve_regions(region_context, outlives_env);\n \n         if !self.is_tainted_by_errors() {\n             // As a heuristic, just skip reporting region errors"}, {"sha": "b37db4b9e18294c116a3aadb70451ae3ca2c7f7a", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=4e02a9281dd8c74cf5c04df044659b5e03b17571", "patch": "@@ -5,7 +5,7 @@\n //! [trait-specialization]: https://rustc-dev-guide.rust-lang.org/traits/specialization.html\n \n use crate::infer::outlives::env::OutlivesEnvironment;\n-use crate::infer::{CombinedSnapshot, InferOk, RegionckMode};\n+use crate::infer::{CombinedSnapshot, InferOk};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::util::impl_subject_and_oblig;\n use crate::traits::SkipLeakCheck;\n@@ -413,7 +413,7 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n         param_env,\n     );\n \n-    let errors = infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n+    let errors = infcx.resolve_regions(region_context, &outlives_env);\n \n     if !errors.is_empty() {\n         return false;"}, {"sha": "34b0f431b8e2dc0329ce65cc2cd649a801a7d4d1", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=4e02a9281dd8c74cf5c04df044659b5e03b17571", "patch": "@@ -23,7 +23,7 @@ mod util;\n pub mod wf;\n \n use crate::infer::outlives::env::OutlivesEnvironment;\n-use crate::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n+use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::error_reporting::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use rustc_errors::ErrorGuaranteed;\n@@ -240,11 +240,7 @@ fn do_normalize_predicates<'tcx>(\n         // cares about declarations like `'a: 'b`.\n         let outlives_env = OutlivesEnvironment::new(elaborated_env);\n \n-        infcx.resolve_regions_and_report_errors(\n-            region_context,\n-            &outlives_env,\n-            RegionckMode::default(),\n-        );\n+        infcx.resolve_regions_and_report_errors(region_context, &outlives_env);\n \n         let predicates = match infcx.fully_resolve(predicates) {\n             Ok(predicates) => predicates,"}, {"sha": "161ec31793dd8ce333709a73e2d9e3c1c587000e", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=4e02a9281dd8c74cf5c04df044659b5e03b17571", "patch": "@@ -82,7 +82,7 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{self, InferCtxt, RegionObligation, RegionckMode};\n+use rustc_infer::infer::{self, InferCtxt, RegionObligation};\n use rustc_middle::hir::place::{PlaceBase, PlaceWithHirId};\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::{self, Ty};\n@@ -163,7 +163,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcx.visit_body(body);\n             rcx.visit_region_obligations(id);\n         }\n-        rcx.resolve_regions_and_report_errors(RegionckMode::Erase);\n+        // Checked by NLL\n+        rcx.fcx.skip_region_resolution();\n     }\n \n     /// Region checking during the WF phase for items. `wf_tys` are the\n@@ -175,7 +176,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);\n         rcx.outlives_environment.save_implied_bounds(item_id);\n         rcx.visit_region_obligations(item_id);\n-        rcx.resolve_regions_and_report_errors(RegionckMode::default());\n+        rcx.resolve_regions_and_report_errors();\n     }\n \n     /// Region check a function body. Not invoked on closures, but\n@@ -206,7 +207,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));\n         }\n \n-        rcx.resolve_regions_and_report_errors(RegionckMode::Erase);\n+        // Checked by NLL\n+        rcx.fcx.skip_region_resolution();\n     }\n }\n \n@@ -361,7 +363,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         self.select_all_obligations_or_error();\n     }\n \n-    fn resolve_regions_and_report_errors(&self, mode: RegionckMode) {\n+    fn resolve_regions_and_report_errors(&self) {\n         self.infcx.process_registered_region_obligations(\n             self.outlives_environment.region_bound_pairs_map(),\n             Some(self.tcx.lifetimes.re_root_empty),\n@@ -371,7 +373,6 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         self.fcx.resolve_regions_and_report_errors(\n             self.subject_def_id.to_def_id(),\n             &self.outlives_environment,\n-            mode,\n         );\n     }\n "}, {"sha": "0369f488c16f5436927a76d6c986bfadce8b3d94", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=4e02a9281dd8c74cf5c04df044659b5e03b17571", "patch": "@@ -15,8 +15,7 @@ use rustc_hir::ItemKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::outlives::obligations::TypeOutlives;\n use rustc_infer::infer::region_constraints::GenericKind;\n-use rustc_infer::infer::{self, RegionckMode};\n-use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n@@ -650,11 +649,7 @@ fn resolve_regions_with_wf_tys<'tcx>(\n \n         add_constraints(&infcx, region_bound_pairs);\n \n-        let errors = infcx.resolve_regions(\n-            id.expect_owner().to_def_id(),\n-            &outlives_environment,\n-            RegionckMode::default(),\n-        );\n+        let errors = infcx.resolve_regions(id.expect_owner().to_def_id(), &outlives_environment);\n \n         debug!(?errors, \"errors\");\n "}, {"sha": "c647c2a4c1baa65f2cf96655eefef7a26895143d", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=4e02a9281dd8c74cf5c04df044659b5e03b17571", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::ItemKind;\n use rustc_infer::infer;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{RegionckMode, TyCtxtInferExt};\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::adjustment::CoerceUnsizedInfo;\n use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeFoldable};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n@@ -349,11 +349,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n \n                     // Finally, resolve all regions.\n                     let outlives_env = OutlivesEnvironment::new(param_env);\n-                    infcx.resolve_regions_and_report_errors(\n-                        impl_did.to_def_id(),\n-                        &outlives_env,\n-                        RegionckMode::default(),\n-                    );\n+                    infcx.resolve_regions_and_report_errors(impl_did.to_def_id(), &outlives_env);\n                 }\n             }\n             _ => {\n@@ -610,11 +606,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n \n         // Finally, resolve all regions.\n         let outlives_env = OutlivesEnvironment::new(param_env);\n-        infcx.resolve_regions_and_report_errors(\n-            impl_did.to_def_id(),\n-            &outlives_env,\n-            RegionckMode::default(),\n-        );\n+        infcx.resolve_regions_and_report_errors(impl_did.to_def_id(), &outlives_env);\n \n         CoerceUnsizedInfo { custom_kind: kind }\n     })"}, {"sha": "0ecc28e6054d505e147b282d99a7381707493567", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e02a9281dd8c74cf5c04df044659b5e03b17571/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=4e02a9281dd8c74cf5c04df044659b5e03b17571", "patch": "@@ -71,7 +71,7 @@ use crate::errors::SubstsOnOverriddenImpl;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n+use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::specialization_graph::Node;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n@@ -164,7 +164,7 @@ fn get_impl_substs<'tcx>(\n \n     // Conservatively use an empty `ParamEnv`.\n     let outlives_env = OutlivesEnvironment::new(ty::ParamEnv::empty());\n-    infcx.resolve_regions_and_report_errors(impl1_def_id, &outlives_env, RegionckMode::default());\n+    infcx.resolve_regions_and_report_errors(impl1_def_id, &outlives_env);\n     let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n         tcx.sess.emit_err(SubstsOnOverriddenImpl { span });\n         return None;"}]}