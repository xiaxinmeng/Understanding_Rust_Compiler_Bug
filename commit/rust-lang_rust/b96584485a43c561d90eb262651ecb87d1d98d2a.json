{"sha": "b96584485a43c561d90eb262651ecb87d1d98d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NjU4NDQ4NWE0M2M1NjFkOTBlYjI2MjY1MWVjYjg3ZDFkOThkMmE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-04-04T14:51:31Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-04-04T14:51:41Z"}, "message": "resolve: Stable order for derive helper attributes", "tree": {"sha": "1952d4a71c2d9496c568b991f4d6b5e323022828", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1952d4a71c2d9496c568b991f4d6b5e323022828"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96584485a43c561d90eb262651ecb87d1d98d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96584485a43c561d90eb262651ecb87d1d98d2a", "html_url": "https://github.com/rust-lang/rust/commit/b96584485a43c561d90eb262651ecb87d1d98d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96584485a43c561d90eb262651ecb87d1d98d2a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbf1bec48228a5c6c16073319cd4c9a54ec28c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbf1bec48228a5c6c16073319cd4c9a54ec28c9f", "html_url": "https://github.com/rust-lang/rust/commit/fbf1bec48228a5c6c16073319cd4c9a54ec28c9f"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "d474e99021104e392249f4a09d79477ac0264f57", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b96584485a43c561d90eb262651ecb87d1d98d2a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96584485a43c561d90eb262651ecb87d1d98d2a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b96584485a43c561d90eb262651ecb87d1d98d2a", "patch": "@@ -853,7 +853,7 @@ enum BuiltinMacroState {\n \n struct DeriveData {\n     resolutions: DeriveResolutions,\n-    helper_attrs: Vec<Ident>,\n+    helper_attrs: Vec<(usize, Ident)>,\n     has_derive_copy: bool,\n }\n "}, {"sha": "10e27f33c29960776dc92d2f77233b8e5fb7e3d7", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b96584485a43c561d90eb262651ecb87d1d98d2a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96584485a43c561d90eb262651ecb87d1d98d2a/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=b96584485a43c561d90eb262651ecb87d1d98d2a", "patch": "@@ -376,7 +376,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             has_derive_copy: false,\n         });\n         let parent_scope = self.invocation_parent_scopes[&expn_id];\n-        for (path, opt_ext) in &mut entry.resolutions {\n+        for (i, (path, opt_ext)) in entry.resolutions.iter_mut().enumerate() {\n             if opt_ext.is_none() {\n                 *opt_ext = Some(\n                     match self.resolve_macro_path(\n@@ -391,7 +391,9 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                                 let last_seg = path.segments.last().unwrap();\n                                 let span = last_seg.ident.span.normalize_to_macros_2_0();\n                                 entry.helper_attrs.extend(\n-                                    ext.helper_attrs.iter().map(|name| Ident::new(*name, span)),\n+                                    ext.helper_attrs\n+                                        .iter()\n+                                        .map(|name| (i, Ident::new(*name, span))),\n                                 );\n                             }\n                             entry.has_derive_copy |= ext.builtin_name == Some(sym::Copy);\n@@ -407,9 +409,10 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                 );\n             }\n         }\n-        // If we get to here, then `derive_data` for the given `expn_id` will only be accessed by\n-        // `take_derive_resolutions` later, so we can steal `helper_attrs` instead of cloning them.\n-        self.helper_attrs.insert(expn_id, mem::take(&mut entry.helper_attrs));\n+        // Sort helpers in a stable way independent from the derive resolution order.\n+        entry.helper_attrs.sort_by_key(|(i, _)| *i);\n+        self.helper_attrs\n+            .insert(expn_id, entry.helper_attrs.iter().map(|(_, ident)| *ident).collect());\n         // Mark this derive as having `Copy` either if it has `Copy` itself or if its parent derive\n         // has `Copy`, to support cases like `#[derive(Clone, Copy)] #[derive(Debug)]`.\n         if entry.has_derive_copy || self.has_derive_copy(parent_scope.expansion) {"}]}