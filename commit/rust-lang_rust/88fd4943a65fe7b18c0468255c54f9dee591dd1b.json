{"sha": "88fd4943a65fe7b18c0468255c54f9dee591dd1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZmQ0OTQzYTY1ZmU3YjE4YzA0NjgyNTVjNTRmOWRlZTU5MWRkMWI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-07-29T21:58:06Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-07-30T02:41:35Z"}, "message": "Test `{align,size}_of_val` in a const context", "tree": {"sha": "c241182f9c7451fbb662dd62eb64171a6e1c8e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c241182f9c7451fbb662dd62eb64171a6e1c8e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88fd4943a65fe7b18c0468255c54f9dee591dd1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88fd4943a65fe7b18c0468255c54f9dee591dd1b", "html_url": "https://github.com/rust-lang/rust/commit/88fd4943a65fe7b18c0468255c54f9dee591dd1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88fd4943a65fe7b18c0468255c54f9dee591dd1b/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9caf0b52229ff935a17ff42f91e843b3d3d264e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9caf0b52229ff935a17ff42f91e843b3d3d264e8", "html_url": "https://github.com/rust-lang/rust/commit/9caf0b52229ff935a17ff42f91e843b3d3d264e8"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "96a8a8452edb08fb6ccb62dcfdee02d86c3011f2", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88fd4943a65fe7b18c0468255c54f9dee591dd1b/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fd4943a65fe7b18c0468255c54f9dee591dd1b/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.rs?ref=88fd4943a65fe7b18c0468255c54f9dee591dd1b", "patch": "@@ -0,0 +1,14 @@\n+#![feature(extern_types)]\n+#![feature(core_intrinsics)]\n+#![feature(const_size_of_val, const_align_of_val)]\n+\n+use std::intrinsics::{size_of_val, min_align_of_val};\n+\n+extern {\n+    type Opaque;\n+}\n+\n+const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n+const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) }; //~ ERROR\n+\n+fn main() {}"}, {"sha": "d3f1b04d25154141bd863807556139b42d33dfdf", "filename": "src/test/ui/consts/const-size_of_val-align_of_val-extern-type.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88fd4943a65fe7b18c0468255c54f9dee591dd1b/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88fd4943a65fe7b18c0468255c54f9dee591dd1b/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val-extern-type.stderr?ref=88fd4943a65fe7b18c0468255c54f9dee591dd1b", "patch": "@@ -0,0 +1,20 @@\n+error: any use of this value will cause an error\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:11:31\n+   |\n+LL | const _SIZE: usize = unsafe { size_of_val(&4 as *const i32 as *const Opaque) };\n+   | ------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                               |\n+   |                               `extern type` does not have known layout\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const-size_of_val-align_of_val-extern-type.rs:12:32\n+   |\n+LL | const _ALIGN: usize = unsafe { min_align_of_val(&4 as *const i32 as *const Opaque) };\n+   | -------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n+   |                                |\n+   |                                `extern type` does not have known layout\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e8e6f1d390099a3974db7fd85f12aed64aeaef58", "filename": "src/test/ui/consts/const-size_of_val-align_of_val.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/88fd4943a65fe7b18c0468255c54f9dee591dd1b/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fd4943a65fe7b18c0468255c54f9dee591dd1b/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of_val-align_of_val.rs?ref=88fd4943a65fe7b18c0468255c54f9dee591dd1b", "patch": "@@ -0,0 +1,45 @@\n+// run-pass\n+\n+#![feature(const_size_of_val, const_align_of_val)]\n+\n+use std::mem;\n+\n+struct Foo(u32);\n+\n+#[derive(Clone, Copy)]\n+struct Bar {\n+    _x: u8,\n+    _y: u16,\n+    _z: u8,\n+}\n+\n+union Ugh {\n+    _a: [u8; 3],\n+    _b: Bar,\n+}\n+\n+const FOO: Foo = Foo(4);\n+const BAR: Bar = Bar { _x: 4, _y: 1, _z: 2 };\n+const UGH: Ugh = Ugh { _a: [0; 3] };\n+\n+const SIZE_OF_FOO: usize = mem::size_of_val(&FOO);\n+const SIZE_OF_BAR: usize = mem::size_of_val(&BAR);\n+const SIZE_OF_UGH: usize = mem::size_of_val(&UGH);\n+\n+const ALIGN_OF_FOO: usize = mem::align_of_val(&FOO);\n+const ALIGN_OF_BAR: usize = mem::align_of_val(&BAR);\n+const ALIGN_OF_UGH: usize = mem::align_of_val(&UGH);\n+\n+const SIZE_OF_SLICE: usize = mem::size_of_val(\"foobar\".as_bytes());\n+\n+fn main() {\n+    assert_eq!(SIZE_OF_FOO, mem::size_of::<Foo>());\n+    assert_eq!(SIZE_OF_BAR, mem::size_of::<Bar>());\n+    assert_eq!(SIZE_OF_UGH, mem::size_of::<Ugh>());\n+\n+    assert_eq!(ALIGN_OF_FOO, mem::align_of::<Foo>());\n+    assert_eq!(ALIGN_OF_BAR, mem::align_of::<Bar>());\n+    assert_eq!(ALIGN_OF_UGH, mem::align_of::<Ugh>());\n+\n+    assert_eq!(SIZE_OF_SLICE, \"foobar\".len());\n+}"}]}