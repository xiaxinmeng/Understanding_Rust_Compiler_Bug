{"sha": "019dc2a357e5442608086307f6c0804bcdced0f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOWRjMmEzNTdlNTQ0MjYwODA4NjMwN2Y2YzA4MDRiY2RjZWQwZjM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-12T12:25:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-12T12:25:32Z"}, "message": "Rollup merge of #52295 - ljedrz:dyn_libsyntax_ext, r=petrochenkov\n\nDeny bare trait objects in src/libsyntax_ext\n\nEnforce `#![deny(bare_trait_objects)]` in `src/libsyntax_ext`.", "tree": {"sha": "a077a9c27032d545bb1522636348257d4460c429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a077a9c27032d545bb1522636348257d4460c429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/019dc2a357e5442608086307f6c0804bcdced0f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbR0i8CRBK7hj4Ov3rIwAAdHIIAJOaS5RfbOuMsDhTbJzhTla7\n/fvWjTJzqnWl/sjfQiuCdgqpgBeHXzemUAMYsEyTLhPKbgjSuMVKooTTm3d9gxT6\nYpbn7e9zdzCUvo0txGZppQmdpgsa6n8m69DYX/5WLJL+xfC+NQrroyZDShBsV5Ah\n02qXi0LJR46jRUDxpINUG4PvNdKxWVPQOTAZJQ0LDevPA++WhbSYc58kZGg+Ufb+\nuX3tUw+2VqlHS2vbyFVAl+yIcsMcKU8Rd7vnFBeivqU9hNdGkSjYUh6aV2JJfNwq\n4wwemZ2NuOVdQO0cBZuegpHQm/4sMcpue286RMvQLyxrJxzsooc00jgrnCrHuAY=\n=C3sl\n-----END PGP SIGNATURE-----\n", "payload": "tree a077a9c27032d545bb1522636348257d4460c429\nparent 9fc126c375f3c74f1e0b5c44a672997ebd564abe\nparent 08c113abef13bd5ed050f7f8480afcd04eda081f\nauthor kennytm <kennytm@gmail.com> 1531398332 +0800\ncommitter GitHub <noreply@github.com> 1531398332 +0800\n\nRollup merge of #52295 - ljedrz:dyn_libsyntax_ext, r=petrochenkov\n\nDeny bare trait objects in src/libsyntax_ext\n\nEnforce `#![deny(bare_trait_objects)]` in `src/libsyntax_ext`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/019dc2a357e5442608086307f6c0804bcdced0f3", "html_url": "https://github.com/rust-lang/rust/commit/019dc2a357e5442608086307f6c0804bcdced0f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/019dc2a357e5442608086307f6c0804bcdced0f3/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fc126c375f3c74f1e0b5c44a672997ebd564abe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc126c375f3c74f1e0b5c44a672997ebd564abe", "html_url": "https://github.com/rust-lang/rust/commit/9fc126c375f3c74f1e0b5c44a672997ebd564abe"}, {"sha": "08c113abef13bd5ed050f7f8480afcd04eda081f", "url": "https://api.github.com/repos/rust-lang/rust/commits/08c113abef13bd5ed050f7f8480afcd04eda081f", "html_url": "https://github.com/rust-lang/rust/commit/08c113abef13bd5ed050f7f8480afcd04eda081f"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "4ebb1fcb65393da183cdf489cd0166cb93aa5017", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -50,7 +50,7 @@ const OPTIONS: &'static [&'static str] = &[\"volatile\", \"alignstack\", \"intel\"];\n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n-                       -> Box<base::MacResult + 'cx> {\n+                       -> Box<dyn base::MacResult + 'cx> {\n     if !cx.ecfg.enable_asm() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"asm\","}, {"sha": "8d0a04831fcb48c4b5cb5f0da5a166604099ef00", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -22,7 +22,7 @@ pub fn expand_assert<'cx>(\n     cx: &'cx mut ExtCtxt,\n     sp: Span,\n     tts: &[TokenTree],\n-) -> Box<MacResult + 'cx> {\n+) -> Box<dyn MacResult + 'cx> {\n     let mut parser = cx.new_parser_from_tts(tts);\n     let cond_expr = panictry!(parser.parse_expr());\n     let custom_msg_args = if parser.eat(&token::Comma) {"}, {"sha": "2384b6a796e198cc1e0aab1c3c552f7d7f4789ea", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -23,7 +23,7 @@ use syntax_pos::Span;\n pub fn expand_cfg<'cx>(cx: &mut ExtCtxt,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n-                       -> Box<base::MacResult + 'static> {\n+                       -> Box<dyn base::MacResult + 'static> {\n     let sp = sp.apply_mark(cx.current_expansion.mark);\n     let mut p = cx.new_parser_from_tts(tts);\n     let cfg = panictry!(p.parse_meta_item());"}, {"sha": "ce7fb400bd547b51b6e08b8195f8654d86020967", "filename": "src/libsyntax_ext/compile_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -18,7 +18,7 @@ use syntax::tokenstream;\n pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree])\n-                              -> Box<base::MacResult + 'cx> {\n+                              -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"compile_error!\") {\n         None => return DummyResult::expr(sp),\n         Some(v) => v,"}, {"sha": "69b4a83764e4624f999864f50f4a23d12b073f6d", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -21,7 +21,7 @@ pub fn expand_syntax_ext(\n     cx: &mut base::ExtCtxt,\n     sp: syntax_pos::Span,\n     tts: &[tokenstream::TokenTree],\n-) -> Box<base::MacResult + 'static> {\n+) -> Box<dyn base::MacResult + 'static> {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {\n         Some(e) => e,\n         None => return base::DummyResult::expr(sp),"}, {"sha": "a3c5c3df66e4c424e4c2d3709d689d9d21f724f4", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -21,7 +21,7 @@ use syntax::tokenstream::TokenTree;\n pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[TokenTree])\n-                              -> Box<base::MacResult + 'cx> {\n+                              -> Box<dyn base::MacResult + 'cx> {\n     if !cx.ecfg.enable_concat_idents() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"concat_idents\","}, {"sha": "41e980b334616ade5931bb301b9880daaa96544c", "filename": "src/libsyntax_ext/deriving/bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -19,15 +19,15 @@ pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt,\n                                     span: Span,\n                                     _: &MetaItem,\n                                     _: &Annotatable,\n-                                    _: &mut FnMut(Annotatable)) {\n+                                    _: &mut dyn FnMut(Annotatable)) {\n     cx.span_err(span, \"this unsafe trait should be implemented explicitly\");\n }\n \n pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: &MetaItem,\n                             item: &Annotatable,\n-                            push: &mut FnMut(Annotatable)) {\n+                            push: &mut dyn FnMut(Annotatable)) {\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),"}, {"sha": "ec935b3e72f230955fc8884210c09e8d7c6d200d", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -25,7 +25,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              span: Span,\n                              mitem: &MetaItem,\n                              item: &Annotatable,\n-                             push: &mut FnMut(Annotatable)) {\n+                             push: &mut dyn FnMut(Annotatable)) {\n     // check if we can use a short form\n     //\n     // the short form is `fn clone(&self) -> Self { *self }`"}, {"sha": "f202bc4e524d2204ca854861d8a499e85a8766b0", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                           span: Span,\n                           mitem: &MetaItem,\n                           item: &Annotatable,\n-                          push: &mut FnMut(Annotatable)) {\n+                          push: &mut dyn FnMut(Annotatable)) {\n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let hidden = cx.meta_list_item_word(span, Symbol::intern(\"hidden\"));\n     let doc = cx.meta_list(span, Symbol::intern(\"doc\"), vec![hidden]);"}, {"sha": "117bedf453e6c33b17cdcc11b56d686915fd599b", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                            span: Span,\n                            mitem: &MetaItem,\n                            item: &Annotatable,\n-                           push: &mut FnMut(Annotatable)) {\n+                           push: &mut dyn FnMut(Annotatable)) {\n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {"}, {"sha": "24a3a7542fb669507be2dc3044d056c172269d68", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   mitem: &MetaItem,\n                                   item: &Annotatable,\n-                                  push: &mut FnMut(Annotatable)) {\n+                                  push: &mut dyn FnMut(Annotatable)) {\n     // structures are equal if all fields are equal, and non equal, if\n     // any fields are not equal or if the enum variants are different\n     fn cs_op(cx: &mut ExtCtxt,"}, {"sha": "3705a245584d02f1127599ab2de717e103bd38e0", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -25,7 +25,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n                                    span: Span,\n                                    mitem: &MetaItem,\n                                    item: &Annotatable,\n-                                   push: &mut FnMut(Annotatable)) {\n+                                   push: &mut dyn FnMut(Annotatable)) {\n     macro_rules! md {\n         ($name:expr, $op:expr, $equal:expr) => { {\n             let inline = cx.meta_word(span, Symbol::intern(\"inline\"));"}, {"sha": "c2a7dea331673f835394c07edf53b026f82e52ba", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n                              span: Span,\n                              mitem: &MetaItem,\n                              item: &Annotatable,\n-                             push: &mut FnMut(Annotatable)) {\n+                             push: &mut dyn FnMut(Annotatable)) {\n     // &mut ::std::fmt::Formatter\n     let fmtr = Ptr(Box::new(Literal(path_std!(cx, fmt::Formatter))),\n                    Borrowed(None, ast::Mutability::Mutable));"}, {"sha": "1e04d8fa22a673e522c6b9f80ee1067572c65bb3", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -27,15 +27,15 @@ pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt,\n                                        span: Span,\n                                        mitem: &MetaItem,\n                                        item: &Annotatable,\n-                                       push: &mut FnMut(Annotatable)) {\n+                                       push: &mut dyn FnMut(Annotatable)) {\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n }\n \n pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n-                                 push: &mut FnMut(Annotatable)) {\n+                                 push: &mut dyn FnMut(Annotatable)) {\n     warn_if_deprecated(cx, span, \"Decodable\");\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n@@ -44,7 +44,7 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n-                                 push: &mut FnMut(Annotatable),\n+                                 push: &mut dyn FnMut(Annotatable),\n                                  krate: &'static str) {\n     let typaram = &*deriving::hygienic_type_parameter(item, \"__D\");\n "}, {"sha": "958116f7809bbb3d078455fbc80be8f863763795", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -23,7 +23,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                                span: Span,\n                                mitem: &MetaItem,\n                                item: &Annotatable,\n-                               push: &mut FnMut(Annotatable)) {\n+                               push: &mut dyn FnMut(Annotatable)) {\n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let attrs = vec![cx.attribute(span, inline)];\n     let trait_def = TraitDef {"}, {"sha": "5438c8b52af05e283bd9038549ef159aa58cc7ce", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -108,15 +108,15 @@ pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt,\n                                        span: Span,\n                                        mitem: &MetaItem,\n                                        item: &Annotatable,\n-                                       push: &mut FnMut(Annotatable)) {\n+                                       push: &mut dyn FnMut(Annotatable)) {\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n }\n \n pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n-                                 push: &mut FnMut(Annotatable)) {\n+                                 push: &mut dyn FnMut(Annotatable)) {\n     warn_if_deprecated(cx, span, \"Encodable\");\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n@@ -125,7 +125,7 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n-                                 push: &mut FnMut(Annotatable),\n+                                 push: &mut dyn FnMut(Annotatable),\n                                  krate: &'static str) {\n     let typaram = &*deriving::hygienic_type_parameter(item, \"__S\");\n "}, {"sha": "aad69c109f9795f75bee0ffa5776f90947a34068", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -330,15 +330,15 @@ pub enum SubstructureFields<'a> {\n /// Combine the values of all the fields together. The last argument is\n /// all the fields of all the structures.\n pub type CombineSubstructureFunc<'a> =\n-    Box<FnMut(&mut ExtCtxt, Span, &Substructure) -> P<Expr> + 'a>;\n+    Box<dyn FnMut(&mut ExtCtxt, Span, &Substructure) -> P<Expr> + 'a>;\n \n /// Deal with non-matching enum variants.  The tuple is a list of\n /// identifiers (one for each `Self` argument, which could be any of the\n /// variants since they have been collapsed together) and the identifiers\n /// holding the variant index value for each of the `Self` arguments.  The\n /// last argument is all the non-`Self` args of the method being derived.\n pub type EnumNonMatchCollapsedFunc<'a> =\n-    Box<FnMut(&mut ExtCtxt, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n+    Box<dyn FnMut(&mut ExtCtxt, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n \n pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n                                 -> RefCell<CombineSubstructureFunc<'a>> {\n@@ -398,15 +398,15 @@ impl<'a> TraitDef<'a> {\n                   cx: &mut ExtCtxt,\n                   mitem: &ast::MetaItem,\n                   item: &'a Annotatable,\n-                  push: &mut FnMut(Annotatable)) {\n+                  push: &mut dyn FnMut(Annotatable)) {\n         self.expand_ext(cx, mitem, item, push, false);\n     }\n \n     pub fn expand_ext(self,\n                       cx: &mut ExtCtxt,\n                       mitem: &ast::MetaItem,\n                       item: &'a Annotatable,\n-                      push: &mut FnMut(Annotatable),\n+                      push: &mut dyn FnMut(Annotatable),\n                       from_scratch: bool) {\n         match *item {\n             Annotatable::Item(ref item) => {"}, {"sha": "7d22998487ba7598010c5996c677e03150b02a93", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -22,7 +22,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: &MetaItem,\n                             item: &Annotatable,\n-                            push: &mut FnMut(Annotatable)) {\n+                            push: &mut dyn FnMut(Annotatable)) {\n \n     let path = Path::new_(pathvec_std!(cx, hash::Hash), None, vec![], PathKind::Std);\n "}, {"sha": "2f5e42d2f7b17f6d70be355adea003a2c34f953d", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -72,7 +72,7 @@ macro_rules! derive_traits {\n             }\n         }\n \n-        pub fn register_builtin_derives(resolver: &mut Resolver) {\n+        pub fn register_builtin_derives(resolver: &mut dyn Resolver) {\n             $(\n                 resolver.add_builtin(\n                     ast::Ident::with_empty_ctxt(Symbol::intern($name)),"}, {"sha": "3c34bf496da594a460022f81773d3291755299fe", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -26,7 +26,7 @@ use std::env;\n pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree])\n-                              -> Box<base::MacResult + 'cx> {\n+                              -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"option_env!\") {\n         None => return DummyResult::expr(sp),\n         Some(v) => v,\n@@ -57,7 +57,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n-                       -> Box<base::MacResult + 'cx> {\n+                       -> Box<dyn base::MacResult + 'cx> {\n     let mut exprs = match get_exprs_from_tts(cx, sp, tts) {\n         Some(ref exprs) if exprs.is_empty() => {\n             cx.span_err(sp, \"env! takes 1 or 2 arguments\");"}, {"sha": "8587d11b2278650fe2547e3e6a3ebd0076421821", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -679,7 +679,7 @@ impl<'a, 'b> Context<'a, 'b> {\n pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,\n                                mut sp: Span,\n                                tts: &[tokenstream::TokenTree])\n-                               -> Box<base::MacResult + 'cx> {\n+                               -> Box<dyn base::MacResult + 'cx> {\n     sp = sp.apply_mark(ecx.current_expansion.mark);\n     match parse_args(ecx, sp, tts) {\n         Some((efmt, args, names)) => {"}, {"sha": "40ecd6e1519c3f91584731673a5205ba43aea758", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -34,7 +34,7 @@ pub const MACRO: &'static str = \"global_asm\";\n \n pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree]) -> Box<base::MacResult + 'cx> {\n+                              tts: &[tokenstream::TokenTree]) -> Box<dyn base::MacResult + 'cx> {\n     if !cx.ecfg.enable_global_asm() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        MACRO,"}, {"sha": "bdf7a8d704042bd92c4e39f1489fa38cde56bc19", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -10,6 +10,8 @@\n \n //! Syntax extensions in the Rust compiler.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n@@ -59,7 +61,7 @@ use syntax::ext::base::{MacroExpanderFn, NormalTT, NamedSyntaxExtension};\n use syntax::ext::hygiene;\n use syntax::symbol::Symbol;\n \n-pub fn register_builtins(resolver: &mut syntax::ext::base::Resolver,\n+pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                          user_exts: Vec<NamedSyntaxExtension>,\n                          enable_quotes: bool) {\n     deriving::register_builtin_derives(resolver);"}, {"sha": "7b76b1e8914684a292bc0947dad5a796eff6cbf0", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -17,7 +17,7 @@ use syntax_pos;\n pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n                               sp: syntax_pos::Span,\n                               tts: &[tokenstream::TokenTree])\n-                              -> Box<base::MacResult + 'cx> {\n+                              -> Box<dyn base::MacResult + 'cx> {\n     if !cx.ecfg.enable_log_syntax() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"log_syntax\","}, {"sha": "85aa84acc4221f71279c51be50294cad20257a33", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -55,7 +55,7 @@ struct CollectProcMacros<'a> {\n }\n \n pub fn modify(sess: &ParseSess,\n-              resolver: &mut ::syntax::ext::base::Resolver,\n+              resolver: &mut dyn (::syntax::ext::base::Resolver),\n               mut krate: ast::Crate,\n               is_proc_macro_crate: bool,\n               is_test_crate: bool,"}, {"sha": "256b525b8bea636f40dc98b745c147c8bc10db5d", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019dc2a357e5442608086307f6c0804bcdced0f3/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=019dc2a357e5442608086307f6c0804bcdced0f3", "patch": "@@ -18,7 +18,7 @@ use syntax::tokenstream::TokenTree;\n pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                            sp: Span,\n                            tt: &[TokenTree])\n-                           -> Box<base::MacResult + 'static> {\n+                           -> Box<dyn base::MacResult + 'static> {\n     if !cx.ecfg.enable_trace_macros() {\n         feature_gate::emit_feature_err(&cx.parse_sess,\n                                        \"trace_macros\","}]}