{"sha": "6dadfc06fe628d7a381a52b07714a7a849a6223d", "node_id": "C_kwDOAAsO6NoAKDZkYWRmYzA2ZmU2MjhkN2EzODFhNTJiMDc3MTRhN2E4NDlhNjIyM2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-05T01:35:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-05T01:35:03Z"}, "message": "Auto merge of #93717 - pietroalbini:pa-ci-profiler, r=Mark-Simulacrum\n\nAdd build metrics to rustbuild\n\nThis PR adds a new module of rustbuild, `ci_profiler`, whose job is to gather as much information as possible about the CI build as possible and store it in a JSON file uploaded to `ci-artifacts`. Right now for each step it collects:\n\n* Type name and debug representation of the `Step` object.\n* Duration of the step (excluding child steps).\n* Systemwide CPU stats for the duration of the step (both single core and all cores).\n* Which child steps were executed.\n\nThis is capable of replacing both the scripts to collect CPU stats and the `[TIMING]` lines in build logs (not yet removed, until we port our tooling to use the CI profiler). The format is also extensible to be able in the future to collect more information.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "5e61f2bf8866db2cc4da719ed09ff5d387985aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e61f2bf8866db2cc4da719ed09ff5d387985aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dadfc06fe628d7a381a52b07714a7a849a6223d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dadfc06fe628d7a381a52b07714a7a849a6223d", "html_url": "https://github.com/rust-lang/rust/commit/6dadfc06fe628d7a381a52b07714a7a849a6223d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dadfc06fe628d7a381a52b07714a7a849a6223d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43874a2ee749c2dd9f052172341f2f87fa36cd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/43874a2ee749c2dd9f052172341f2f87fa36cd79", "html_url": "https://github.com/rust-lang/rust/commit/43874a2ee749c2dd9f052172341f2f87fa36cd79"}, {"sha": "70cdd7efc3ab10834dfbfc9a00884388a72a6544", "url": "https://api.github.com/repos/rust-lang/rust/commits/70cdd7efc3ab10834dfbfc9a00884388a72a6544", "html_url": "https://github.com/rust-lang/rust/commit/70cdd7efc3ab10834dfbfc9a00884388a72a6544"}], "stats": {"total": 272, "additions": 268, "deletions": 4}, "files": [{"sha": "bea0c13000ca6c8dba636dcaa325352bf3b83003", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -223,6 +223,7 @@ dependencies = [\n  \"pretty_assertions 0.7.2\",\n  \"serde\",\n  \"serde_json\",\n+ \"sysinfo\",\n  \"tar\",\n  \"toml\",\n  \"winapi\",\n@@ -5126,6 +5127,21 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n+[[package]]\n+name = \"sysinfo\"\n+version = \"0.24.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a6a8e71535da31837213ac114531d31def75d7aebd133264e420a3451fa7f703\"\n+dependencies = [\n+ \"cfg-if 1.0.0\",\n+ \"core-foundation-sys\",\n+ \"libc\",\n+ \"ntapi\",\n+ \"once_cell\",\n+ \"rayon\",\n+ \"winapi\",\n+]\n+\n [[package]]\n name = \"tar\"\n version = \"0.4.37\""}, {"sha": "b3284050f0530fff17fc550bf2d4677e71668f6c", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -324,6 +324,12 @@ changelog-seen = 2\n # a Nix toolchain on non-NixOS distributions.\n #patch-binaries-for-nix = false\n \n+# Collect information and statistics about the current build and writes it to\n+# disk. Enabling this or not has no impact on the resulting build output. The\n+# schema of the file generated by the build metrics feature is unstable, and\n+# this is not intended to be used during local development.\n+#metrics = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "5027a45e0ada033db08b8d86a2f2a546ec958f19", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -49,6 +49,9 @@ opener = \"0.5\"\n once_cell = \"1.7.2\"\n xz2 = \"0.1\"\n \n+# Dependencies needed by the build-metrics feature\n+sysinfo = { version = \"0.24.1\", optional = true }\n+\n [target.'cfg(windows)'.dependencies.winapi]\n version = \"0.3\"\n features = [\n@@ -64,3 +67,6 @@ features = [\n \n [dev-dependencies]\n pretty_assertions = \"0.7\"\n+\n+[features]\n+build-metrics = [\"sysinfo\"]"}, {"sha": "d81874bfe7e9707d87cbb7e55647539a20653ce0", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -837,6 +837,9 @@ def build_bootstrap(self):\n             args.append(\"--locked\")\n         if self.use_vendored_sources:\n             args.append(\"--frozen\")\n+        if self.get_toml(\"metrics\", \"build\"):\n+            args.append(\"--features\")\n+            args.append(\"build-metrics\")\n         run(args, env=env, verbose=self.verbose)\n \n     def build_triple(self):"}, {"sha": "da13374cee7cdea9ce06ae8175e1803ee13ad71f", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -2010,6 +2010,9 @@ impl<'a> Builder<'a> {\n             stack.push(Box::new(step.clone()));\n         }\n \n+        #[cfg(feature = \"build-metrics\")]\n+        self.metrics.enter_step(&step);\n+\n         let (out, dur) = {\n             let start = Instant::now();\n             let zero = Duration::new(0, 0);\n@@ -2033,6 +2036,9 @@ impl<'a> Builder<'a> {\n             );\n         }\n \n+        #[cfg(feature = \"build-metrics\")]\n+        self.metrics.exit_step();\n+\n         {\n             let mut stack = self.stack.borrow_mut();\n             let cur_step = stack.pop().expect(\"step stack empty\");"}, {"sha": "6cb0bd518e278702d43fd3a40d85ebf7fb6b0771", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -550,6 +550,7 @@ define_config! {\n         dist_stage: Option<u32> = \"dist-stage\",\n         bench_stage: Option<u32> = \"bench-stage\",\n         patch_binaries_for_nix: Option<bool> = \"patch-binaries-for-nix\",\n+        metrics: Option<bool> = \"metrics\",\n     }\n }\n "}, {"sha": "fab6168bf38f61164877d49ef4a0bbd90c6bbd66", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -150,6 +150,9 @@ mod tool;\n mod toolstate;\n pub mod util;\n \n+#[cfg(feature = \"build-metrics\")]\n+mod metrics;\n+\n #[cfg(windows)]\n mod job;\n \n@@ -312,6 +315,9 @@ pub struct Build {\n     prerelease_version: Cell<Option<u32>>,\n     tool_artifacts:\n         RefCell<HashMap<TargetSelection, HashMap<String, (&'static str, PathBuf, Vec<String>)>>>,\n+\n+    #[cfg(feature = \"build-metrics\")]\n+    metrics: metrics::BuildMetrics,\n }\n \n #[derive(Debug)]\n@@ -501,6 +507,9 @@ impl Build {\n             delayed_failures: RefCell::new(Vec::new()),\n             prerelease_version: Cell::new(None),\n             tool_artifacts: Default::default(),\n+\n+            #[cfg(feature = \"build-metrics\")]\n+            metrics: metrics::BuildMetrics::init(),\n         };\n \n         build.verbose(\"finding compilers\");\n@@ -695,6 +704,9 @@ impl Build {\n             }\n             process::exit(1);\n         }\n+\n+        #[cfg(feature = \"build-metrics\")]\n+        self.metrics.persist(self);\n     }\n \n     /// Clear out `dir` if `input` is newer."}, {"sha": "451febddc88ceee13b32ae9b7aed99a487d4ad08", "filename": "src/bootstrap/metrics.rs", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fbootstrap%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetrics.rs?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -0,0 +1,208 @@\n+//! This module is responsible for collecting metrics profiling information for the current build\n+//! and dumping it to disk as JSON, to aid investigations on build and CI performance.\n+//!\n+//! As this module requires additional dependencies not present during local builds, it's cfg'd\n+//! away whenever the `build.metrics` config option is not set to `true`.\n+\n+use crate::builder::Step;\n+use crate::util::t;\n+use crate::Build;\n+use serde::{Deserialize, Serialize};\n+use std::cell::RefCell;\n+use std::fs::File;\n+use std::io::BufWriter;\n+use std::time::{Duration, Instant};\n+use sysinfo::{CpuExt, System, SystemExt};\n+\n+pub(crate) struct BuildMetrics {\n+    state: RefCell<MetricsState>,\n+}\n+\n+impl BuildMetrics {\n+    pub(crate) fn init() -> Self {\n+        let state = RefCell::new(MetricsState {\n+            finished_steps: Vec::new(),\n+            running_steps: Vec::new(),\n+\n+            system_info: System::new(),\n+            timer_start: None,\n+            invocation_timer_start: Instant::now(),\n+        });\n+\n+        BuildMetrics { state }\n+    }\n+\n+    pub(crate) fn enter_step<S: Step>(&self, step: &S) {\n+        let mut state = self.state.borrow_mut();\n+\n+        // Consider all the stats gathered so far as the parent's.\n+        if !state.running_steps.is_empty() {\n+            self.collect_stats(&mut *state);\n+        }\n+\n+        state.system_info.refresh_cpu();\n+        state.timer_start = Some(Instant::now());\n+\n+        state.running_steps.push(StepMetrics {\n+            type_: std::any::type_name::<S>().into(),\n+            debug_repr: format!(\"{step:?}\"),\n+\n+            cpu_usage_time_sec: 0.0,\n+            duration_excluding_children_sec: Duration::ZERO,\n+\n+            children: Vec::new(),\n+        });\n+    }\n+\n+    pub(crate) fn exit_step(&self) {\n+        let mut state = self.state.borrow_mut();\n+\n+        self.collect_stats(&mut *state);\n+\n+        let step = state.running_steps.pop().unwrap();\n+        if state.running_steps.is_empty() {\n+            state.finished_steps.push(step);\n+            state.timer_start = None;\n+        } else {\n+            state.running_steps.last_mut().unwrap().children.push(step);\n+\n+            // Start collecting again for the parent step.\n+            state.system_info.refresh_cpu();\n+            state.timer_start = Some(Instant::now());\n+        }\n+    }\n+\n+    fn collect_stats(&self, state: &mut MetricsState) {\n+        let step = state.running_steps.last_mut().unwrap();\n+\n+        let elapsed = state.timer_start.unwrap().elapsed();\n+        step.duration_excluding_children_sec += elapsed;\n+\n+        state.system_info.refresh_cpu();\n+        let cpu = state.system_info.cpus().iter().map(|p| p.cpu_usage()).sum::<f32>();\n+        step.cpu_usage_time_sec += cpu as f64 / 100.0 * elapsed.as_secs_f64();\n+    }\n+\n+    pub(crate) fn persist(&self, build: &Build) {\n+        let mut state = self.state.borrow_mut();\n+        assert!(state.running_steps.is_empty(), \"steps are still executing\");\n+\n+        let dest = build.out.join(\"metrics.json\");\n+\n+        let mut system = System::new();\n+        system.refresh_cpu();\n+        system.refresh_memory();\n+\n+        let system_stats = JsonInvocationSystemStats {\n+            cpu_threads_count: system.cpus().len(),\n+            cpu_model: system.cpus()[0].brand().into(),\n+\n+            memory_total_bytes: system.total_memory() * 1024,\n+        };\n+        let steps = std::mem::take(&mut state.finished_steps);\n+\n+        // Some of our CI builds consist of multiple independent CI invocations. Ensure all the\n+        // previous invocations are still present in the resulting file.\n+        let mut invocations = match std::fs::read(&dest) {\n+            Ok(contents) => t!(serde_json::from_slice::<JsonRoot>(&contents)).invocations,\n+            Err(err) => {\n+                if err.kind() != std::io::ErrorKind::NotFound {\n+                    panic!(\"failed to open existing metrics file at {}: {err}\", dest.display());\n+                }\n+                Vec::new()\n+            }\n+        };\n+        invocations.push(JsonInvocation {\n+            duration_including_children_sec: state.invocation_timer_start.elapsed().as_secs_f64(),\n+            children: steps.into_iter().map(|step| self.prepare_json_step(step)).collect(),\n+        });\n+\n+        let json = JsonRoot { system_stats, invocations };\n+\n+        t!(std::fs::create_dir_all(dest.parent().unwrap()));\n+        let mut file = BufWriter::new(t!(File::create(&dest)));\n+        t!(serde_json::to_writer(&mut file, &json));\n+    }\n+\n+    fn prepare_json_step(&self, step: StepMetrics) -> JsonNode {\n+        JsonNode::RustbuildStep {\n+            type_: step.type_,\n+            debug_repr: step.debug_repr,\n+\n+            duration_excluding_children_sec: step.duration_excluding_children_sec.as_secs_f64(),\n+            system_stats: JsonStepSystemStats {\n+                cpu_utilization_percent: step.cpu_usage_time_sec * 100.0\n+                    / step.duration_excluding_children_sec.as_secs_f64(),\n+            },\n+\n+            children: step\n+                .children\n+                .into_iter()\n+                .map(|child| self.prepare_json_step(child))\n+                .collect(),\n+        }\n+    }\n+}\n+\n+struct MetricsState {\n+    finished_steps: Vec<StepMetrics>,\n+    running_steps: Vec<StepMetrics>,\n+\n+    system_info: System,\n+    timer_start: Option<Instant>,\n+    invocation_timer_start: Instant,\n+}\n+\n+struct StepMetrics {\n+    type_: String,\n+    debug_repr: String,\n+\n+    cpu_usage_time_sec: f64,\n+    duration_excluding_children_sec: Duration,\n+\n+    children: Vec<StepMetrics>,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+struct JsonRoot {\n+    system_stats: JsonInvocationSystemStats,\n+    invocations: Vec<JsonInvocation>,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+struct JsonInvocation {\n+    duration_including_children_sec: f64,\n+    children: Vec<JsonNode>,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(tag = \"kind\", rename_all = \"snake_case\")]\n+enum JsonNode {\n+    RustbuildStep {\n+        #[serde(rename = \"type\")]\n+        type_: String,\n+        debug_repr: String,\n+\n+        duration_excluding_children_sec: f64,\n+        system_stats: JsonStepSystemStats,\n+\n+        children: Vec<JsonNode>,\n+    },\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+struct JsonInvocationSystemStats {\n+    cpu_threads_count: usize,\n+    cpu_model: String,\n+\n+    memory_total_bytes: u64,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+struct JsonStepSystemStats {\n+    cpu_utilization_percent: f64,\n+}"}, {"sha": "b0314047c070b07ac9fd1860fbf6164c5946fa34", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -45,6 +45,7 @@ fi\n \n if ! isCI || isCiBranch auto || isCiBranch beta || isCiBranch try; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings --enable-verbose-tests\"\n+    RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.metrics\"\n fi\n \n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-sccache\""}, {"sha": "ffa1859fc2253b94e530e5e83857142b95c10b71", "filename": "src/ci/scripts/upload-artifacts.sh", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fci%2Fscripts%2Fupload-artifacts.sh", "raw_url": "https://github.com/rust-lang/rust/raw/6dadfc06fe628d7a381a52b07714a7a849a6223d/src%2Fci%2Fscripts%2Fupload-artifacts.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fupload-artifacts.sh?ref=6dadfc06fe628d7a381a52b07714a7a849a6223d", "patch": "@@ -10,19 +10,24 @@ source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n upload_dir=\"$(mktemp -d)\"\n \n+build_dir=build\n+if isLinux; then\n+    build_dir=obj/build\n+fi\n+\n # Release tarballs produced by a dist builder.\n if [[ \"${DEPLOY-0}\" -eq \"1\" ]] || [[ \"${DEPLOY_ALT-0}\" -eq \"1\" ]]; then\n-    dist_dir=build/dist\n-    if isLinux; then\n-        dist_dir=obj/build/dist\n-    fi\n+    dist_dir=\"${build_dir}/dist\"\n     rm -rf \"${dist_dir}/doc\"\n     cp -r \"${dist_dir}\"/* \"${upload_dir}\"\n fi\n \n # CPU usage statistics.\n cp cpu-usage.csv \"${upload_dir}/cpu-${CI_JOB_NAME}.csv\"\n \n+# Build metrics generated by x.py.\n+cp \"${build_dir}/metrics.json\" \"${upload_dir}/metrics-${CI_JOB_NAME}.json\"\n+\n # Toolstate data.\n if [[ -n \"${DEPLOY_TOOLSTATES_JSON+x}\" ]]; then\n     cp /tmp/toolstate/toolstates.json \"${upload_dir}/${DEPLOY_TOOLSTATES_JSON}\""}]}