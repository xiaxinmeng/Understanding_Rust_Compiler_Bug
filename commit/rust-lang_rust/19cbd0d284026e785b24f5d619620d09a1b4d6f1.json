{"sha": "19cbd0d284026e785b24f5d619620d09a1b4d6f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Y2JkMGQyODQwMjZlNzg1YjI0ZjVkNjE5NjIwZDA5YTFiNGQ2ZjE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-05-21T18:21:02Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-06-05T19:01:39Z"}, "message": "remove interner from tt_reader", "tree": {"sha": "6f5b50e94aec9d2238aee2b38408f462d17137b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5b50e94aec9d2238aee2b38408f462d17137b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19cbd0d284026e785b24f5d619620d09a1b4d6f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19cbd0d284026e785b24f5d619620d09a1b4d6f1", "html_url": "https://github.com/rust-lang/rust/commit/19cbd0d284026e785b24f5d619620d09a1b4d6f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19cbd0d284026e785b24f5d619620d09a1b4d6f1/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be22fddba06879fb07ec5b71401e2198864b8eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/be22fddba06879fb07ec5b71401e2198864b8eae", "html_url": "https://github.com/rust-lang/rust/commit/be22fddba06879fb07ec5b71401e2198864b8eae"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "4b68d9d995cf436c9d8d93c7db3e55c194830794", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=19cbd0d284026e785b24f5d619620d09a1b4d6f1", "patch": "@@ -68,7 +68,6 @@ pub fn expand_proto(cx: @ExtCtxt, _sp: span, id: ast::ident,\n     let sess = cx.parse_sess();\n     let cfg = cx.cfg();\n     let tt_rdr = new_tt_reader(copy cx.parse_sess().span_diagnostic,\n-                               get_ident_interner(),\n                                None,\n                                copy tt);\n     let rdr = tt_rdr as @reader;"}, {"sha": "f13f4bb721206c54e500ddf31473077a197e3219", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=19cbd0d284026e785b24f5d619620d09a1b4d6f1", "patch": "@@ -29,7 +29,6 @@ pub fn expand_trace_macros(cx: @ExtCtxt,\n     let cfg = cx.cfg();\n     let tt_rdr = new_tt_reader(\n         copy cx.parse_sess().span_diagnostic,\n-        get_ident_interner(),\n         None,\n         vec::to_owned(tt)\n     );"}, {"sha": "9edc49a493af80e70e4ad086ed291e43fcd30ee5", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=19cbd0d284026e785b24f5d619620d09a1b4d6f1", "patch": "@@ -57,7 +57,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n \n     // Parse the macro_rules! invocation (`none` is for no interpolations):\n     let arg_reader = new_tt_reader(copy cx.parse_sess().span_diagnostic,\n-                                   get_ident_interner(), None, copy arg);\n+                                   None, copy arg);\n     let argument_map = parse_or_else(cx.parse_sess(),\n                                      cx.cfg(),\n                                      arg_reader as @reader,\n@@ -101,7 +101,6 @@ pub fn add_new_extension(cx: @ExtCtxt,\n                 // `none` is because we're not interpolating\n                 let arg_rdr = new_tt_reader(\n                     s_d,\n-                    itr,\n                     None,\n                     vec::to_owned(arg)\n                 ) as @reader;\n@@ -122,7 +121,7 @@ pub fn add_new_extension(cx: @ExtCtxt,\n                         _ => cx.span_bug(sp, \"bad thing in rhs\")\n                     };\n                     // rhs has holes ( `$id` and `$(...)` that need filled)\n-                    let trncbr = new_tt_reader(s_d, itr, Some(named_matches),\n+                    let trncbr = new_tt_reader(s_d, Some(named_matches),\n                                                rhs);\n                     let p = @Parser(cx.parse_sess(),\n                                     cx.cfg(),"}, {"sha": "7f382da2634c3547017370cbcf49741a66873e9e", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=19cbd0d284026e785b24f5d619620d09a1b4d6f1", "patch": "@@ -34,7 +34,6 @@ struct TtFrame {\n \n pub struct TtReader {\n     sp_diag: @span_handler,\n-    interner: @ident_interner,\n     // the unzipped tree:\n     stack: @mut TtFrame,\n     /* for MBE-style macro transcription */\n@@ -50,13 +49,11 @@ pub struct TtReader {\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n pub fn new_tt_reader(sp_diag: @span_handler,\n-                     itr: @ident_interner,\n                      interp: Option<HashMap<ident,@named_match>>,\n                      src: ~[ast::token_tree])\n                   -> @mut TtReader {\n     let r = @mut TtReader {\n         sp_diag: sp_diag,\n-        interner: itr,\n         stack: @mut TtFrame {\n             forest: @mut src,\n             idx: 0u,\n@@ -94,7 +91,6 @@ fn dup_tt_frame(f: @mut TtFrame) -> @mut TtFrame {\n pub fn dup_tt_reader(r: @mut TtReader) -> @mut TtReader {\n     @mut TtReader {\n         sp_diag: r.sp_diag,\n-        interner: get_ident_interner(),\n         stack: dup_tt_frame(r.stack),\n         repeat_idx: copy r.repeat_idx,\n         repeat_len: copy r.repeat_len,\n@@ -127,7 +123,7 @@ fn lookup_cur_matched(r: &mut TtReader, name: ident) -> @named_match {\n         Some(s) => lookup_cur_matched_by_matched(r, s),\n         None => {\n             r.sp_diag.span_fatal(r.cur_span, fmt!(\"unknown macro variable `%s`\",\n-                                                  *r.interner.get(name.name)));\n+                                                  *ident_to_str(&name)));\n         }\n     }\n }"}, {"sha": "995da6d614710dd9ca2439de433c4852f126b11c", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cbd0d284026e785b24f5d619620d09a1b4d6f1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=19cbd0d284026e785b24f5d619620d09a1b4d6f1", "patch": "@@ -319,7 +319,6 @@ pub fn tts_to_parser(sess: @mut ParseSess,\n                      cfg: ast::crate_cfg) -> Parser {\n     let trdr = lexer::new_tt_reader(\n         copy sess.span_diagnostic,\n-        get_ident_interner(),\n         None,\n         tts\n     );"}]}