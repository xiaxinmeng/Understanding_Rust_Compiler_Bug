{"sha": "246709f89e0e8050ed714dca2155adc4e8d3ab80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NjcwOWY4OWUwZTgwNTBlZDcxNGRjYTIxNTVhZGM0ZThkM2FiODA=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-03-04T08:21:07Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-03-04T08:37:01Z"}, "message": "run-rustfix", "tree": {"sha": "298cb57a8df726c40b95476fdba2f716504de6cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/298cb57a8df726c40b95476fdba2f716504de6cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/246709f89e0e8050ed714dca2155adc4e8d3ab80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/246709f89e0e8050ed714dca2155adc4e8d3ab80", "html_url": "https://github.com/rust-lang/rust/commit/246709f89e0e8050ed714dca2155adc4e8d3ab80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/246709f89e0e8050ed714dca2155adc4e8d3ab80/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45f61ead2cf693a42025778b2315259bd95495e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/45f61ead2cf693a42025778b2315259bd95495e4", "html_url": "https://github.com/rust-lang/rust/commit/45f61ead2cf693a42025778b2315259bd95495e4"}], "stats": {"total": 154, "additions": 136, "deletions": 18}, "files": [{"sha": "3b030f95dc92a02500f396132a8b1703a20fba22", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/246709f89e0e8050ed714dca2155adc4e8d3ab80/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246709f89e0e8050ed714dca2155adc4e8d3ab80/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=246709f89e0e8050ed714dca2155adc4e8d3ab80", "patch": "@@ -57,7 +57,8 @@ impl QuestionMark {\n             if Self::is_option(cx, subject);\n \n             then {\n-                let receiver_str = &Sugg::hir(cx, subject, \"..\");\n+                let mut applicability = Applicability::MachineApplicable;\n+                let receiver_str = snippet_with_applicability(cx, subject.span, \"..\", &mut applicability);\n                 let mut replacement: Option<String> = None;\n                 if let Some(else_) = else_ {\n                     if_chain! {\n@@ -86,7 +87,7 @@ impl QuestionMark {\n                                 expr.span,\n                                 \"replace it with\",\n                                 replacement_str,\n-                                Applicability::MaybeIncorrect, // snippet\n+                                applicability,\n                             );\n                         }\n                     )"}, {"sha": "2c3e4989d5340c61b9ba2af03eed73fa0aa2a5ab", "filename": "tests/ui/question_mark.fixed", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/246709f89e0e8050ed714dca2155adc4e8d3ab80/tests%2Fui%2Fquestion_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/246709f89e0e8050ed714dca2155adc4e8d3ab80/tests%2Fui%2Fquestion_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.fixed?ref=246709f89e0e8050ed714dca2155adc4e8d3ab80", "patch": "@@ -0,0 +1,113 @@\n+// run-rustfix\n+#![allow(unreachable_code)]\n+\n+fn some_func(a: Option<u32>) -> Option<u32> {\n+    a?;\n+\n+    a\n+}\n+\n+fn some_other_func(a: Option<u32>) -> Option<u32> {\n+    if a.is_none() {\n+        return None;\n+    } else {\n+        return Some(0);\n+    }\n+    unreachable!()\n+}\n+\n+pub enum SeemsOption<T> {\n+    Some(T),\n+    None,\n+}\n+\n+impl<T> SeemsOption<T> {\n+    pub fn is_none(&self) -> bool {\n+        match *self {\n+            SeemsOption::None => true,\n+            SeemsOption::Some(_) => false,\n+        }\n+    }\n+}\n+\n+fn returns_something_similar_to_option(a: SeemsOption<u32>) -> SeemsOption<u32> {\n+    if a.is_none() {\n+        return SeemsOption::None;\n+    }\n+\n+    a\n+}\n+\n+pub struct CopyStruct {\n+    pub opt: Option<u32>,\n+}\n+\n+impl CopyStruct {\n+    #[rustfmt::skip]\n+    pub fn func(&self) -> Option<u32> {\n+        (self.opt)?;\n+\n+        self.opt?;\n+\n+        let _ = Some(self.opt?);\n+\n+        let _ = self.opt?;\n+\n+        self.opt\n+    }\n+}\n+\n+#[derive(Clone)]\n+pub struct MoveStruct {\n+    pub opt: Option<Vec<u32>>,\n+}\n+\n+impl MoveStruct {\n+    pub fn ref_func(&self) -> Option<Vec<u32>> {\n+        self.opt.as_ref()?;\n+\n+        self.opt.clone()\n+    }\n+\n+    pub fn mov_func_reuse(self) -> Option<Vec<u32>> {\n+        self.opt.as_ref()?;\n+\n+        self.opt\n+    }\n+\n+    pub fn mov_func_no_use(self) -> Option<Vec<u32>> {\n+        self.opt.as_ref()?;\n+        Some(Vec::new())\n+    }\n+\n+    pub fn if_let_ref_func(self) -> Option<Vec<u32>> {\n+        let v: &Vec<_> = self.opt.as_ref()?;\n+\n+        Some(v.clone())\n+    }\n+\n+    pub fn if_let_mov_func(self) -> Option<Vec<u32>> {\n+        let v = self.opt?;\n+\n+        Some(v)\n+    }\n+}\n+\n+fn main() {\n+    some_func(Some(42));\n+    some_func(None);\n+    some_other_func(Some(42));\n+\n+    let copy_struct = CopyStruct { opt: Some(54) };\n+    copy_struct.func();\n+\n+    let move_struct = MoveStruct {\n+        opt: Some(vec![42, 1337]),\n+    };\n+    move_struct.ref_func();\n+    move_struct.clone().mov_func_reuse();\n+    move_struct.mov_func_no_use();\n+\n+    let so = SeemsOption::Some(45);\n+    returns_something_similar_to_option(so);\n+}"}, {"sha": "24df763443565ec0d39407f73cc919d9d080edde", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/246709f89e0e8050ed714dca2155adc4e8d3ab80/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246709f89e0e8050ed714dca2155adc4e8d3ab80/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=246709f89e0e8050ed714dca2155adc4e8d3ab80", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+#![allow(unreachable_code)]\n+\n fn some_func(a: Option<u32>) -> Option<u32> {\n     if a.is_none() {\n         return None;\n@@ -98,7 +101,7 @@ impl MoveStruct {\n     }\n \n     pub fn if_let_ref_func(self) -> Option<Vec<u32>> {\n-        let mut v: &Vec<_> = if let Some(ref v) = self.opt {\n+        let v: &Vec<_> = if let Some(ref v) = self.opt {\n             v\n         } else {\n             return None;\n@@ -108,7 +111,7 @@ impl MoveStruct {\n     }\n \n     pub fn if_let_mov_func(self) -> Option<Vec<u32>> {\n-        let mut v = if let Some(v) = self.opt {\n+        let v = if let Some(v) = self.opt {\n             v\n         } else {\n             return None;\n@@ -121,6 +124,7 @@ impl MoveStruct {\n fn main() {\n     some_func(Some(42));\n     some_func(None);\n+    some_other_func(Some(42));\n \n     let copy_struct = CopyStruct { opt: Some(54) };\n     copy_struct.func();"}, {"sha": "97741069b50a85252e08f0679e63b779d39c4c98", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/246709f89e0e8050ed714dca2155adc4e8d3ab80/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246709f89e0e8050ed714dca2155adc4e8d3ab80/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=246709f89e0e8050ed714dca2155adc4e8d3ab80", "patch": "@@ -1,5 +1,5 @@\n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:2:5\n+  --> $DIR/question_mark.rs:5:5\n    |\n LL | /     if a.is_none() {\n LL | |         return None;\n@@ -9,23 +9,23 @@ LL | |     }\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:47:9\n+  --> $DIR/question_mark.rs:50:9\n    |\n LL | /         if (self.opt).is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `(self.opt)?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:51:9\n+  --> $DIR/question_mark.rs:54:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None\n LL | |         }\n    | |_________^ help: replace it with: `self.opt?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:55:17\n+  --> $DIR/question_mark.rs:58:17\n    |\n LL |           let _ = if self.opt.is_none() {\n    |  _________________^\n@@ -36,7 +36,7 @@ LL | |         };\n    | |_________^ help: replace it with: `Some(self.opt?)`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:61:17\n+  --> $DIR/question_mark.rs:64:17\n    |\n LL |           let _ = if let Some(x) = self.opt {\n    |  _________________^\n@@ -47,45 +47,45 @@ LL | |         };\n    | |_________^ help: replace it with: `self.opt?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:78:9\n+  --> $DIR/question_mark.rs:81:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:86:9\n+  --> $DIR/question_mark.rs:89:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:94:9\n+  --> $DIR/question_mark.rs:97:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace it with: `self.opt.as_ref()?;`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:101:30\n+  --> $DIR/question_mark.rs:104:26\n    |\n-LL |           let mut v: &Vec<_> = if let Some(ref v) = self.opt {\n-   |  ______________________________^\n+LL |           let v: &Vec<_> = if let Some(ref v) = self.opt {\n+   |  __________________________^\n LL | |             v\n LL | |         } else {\n LL | |             return None;\n LL | |         };\n    | |_________^ help: replace it with: `self.opt.as_ref()?`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:111:21\n+  --> $DIR/question_mark.rs:114:17\n    |\n-LL |           let mut v = if let Some(v) = self.opt {\n-   |  _____________________^\n+LL |           let v = if let Some(v) = self.opt {\n+   |  _________________^\n LL | |             v\n LL | |         } else {\n LL | |             return None;"}]}