{"sha": "1b4eb145f92e7630b7e5733847d29985c3bd215f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNGViMTQ1ZjkyZTc2MzBiN2U1NzMzODQ3ZDI5OTg1YzNiZDIxNWY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-02T07:52:01Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-03T20:55:10Z"}, "message": "oldmap: implement core::container::Container", "tree": {"sha": "490ea8c4add512f4519e4b0d3fe549bdd8d6fd05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/490ea8c4add512f4519e4b0d3fe549bdd8d6fd05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b4eb145f92e7630b7e5733847d29985c3bd215f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4eb145f92e7630b7e5733847d29985c3bd215f", "html_url": "https://github.com/rust-lang/rust/commit/1b4eb145f92e7630b7e5733847d29985c3bd215f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b4eb145f92e7630b7e5733847d29985c3bd215f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a27b2c7d5e28e98c844d335217ca59d7ab324b", "html_url": "https://github.com/rust-lang/rust/commit/f4a27b2c7d5e28e98c844d335217ca59d7ab324b"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "2dd0192b72c40b348ab707124f1edc41105d5dc1", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=1b4eb145f92e7630b7e5733847d29985c3bd215f", "patch": "@@ -922,7 +922,7 @@ pub fn install_package(c: &Cargo, src: ~str, wd: &Path, pkg: Package) {\n }\n \n pub fn cargo_suggestion(c: &Cargo, fallback: fn()) {\n-    if c.sources.size() == 0u {\n+    if c.sources.is_empty() {\n         error(~\"no sources defined - you may wish to run \" +\n               ~\"`cargo init`\");\n         return;\n@@ -1620,7 +1620,7 @@ pub fn dump_cache(c: &Cargo) {\n }\n \n pub fn dump_sources(c: &Cargo) {\n-    if c.sources.size() < 1u {\n+    if c.sources.is_empty() {\n         return;\n     }\n "}, {"sha": "894d0a0c799136a4c3ff29336e0bb93898ca4254", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1b4eb145f92e7630b7e5733847d29985c3bd215f", "patch": "@@ -2796,7 +2796,7 @@ pub fn decl_gc_metadata(ccx: @crate_ctxt, llmod_id: ~str) {\n \n pub fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n     let elttype = T_struct(~[ccx.int_type, ccx.int_type]);\n-    let maptype = T_array(elttype, ccx.module_data.size() + 1u);\n+    let maptype = T_array(elttype, ccx.module_data.len() + 1);\n     let map = str::as_c_str(~\"_rust_mod_map\", |buf| {\n         unsafe {\n             llvm::LLVMAddGlobal(ccx.llmod, maptype, buf)"}, {"sha": "4a0448c0b244920ba32934ec200cf8868e0c4279", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1b4eb145f92e7630b7e5733847d29985c3bd215f", "patch": "@@ -2799,7 +2799,7 @@ pub fn br_hashmap<V:Copy>() -> HashMap<bound_region, V> {\n }\n \n pub fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {\n-    //io::println(fmt!(\"%?/%?\", id, cx.node_types.size()));\n+    //io::println(fmt!(\"%?/%?\", id, cx.node_types.len()));\n     match oldsmallintmap::find(*cx.node_types, id as uint) {\n        Some(t) => t,\n        None => cx.sess.bug(\n@@ -4359,7 +4359,7 @@ pub fn iter_bound_traits_and_supertraits(tcx: ctxt,\n         if f(trait_ty) {\n             // Add all the supertraits to the hash map,\n             // executing <f> on each of them\n-            while i < supertrait_map.size() && !fin {\n+            while i < supertrait_map.len() && !fin {\n                 let init_trait_id = seen_def_ids[i];\n                 i += 1;\n                  // Add supertraits to supertrait_map"}, {"sha": "0d20b87ccd9f795eb48223383c70d3dafa22aed3", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=1b4eb145f92e7630b7e5733847d29985c3bd215f", "patch": "@@ -1226,7 +1226,7 @@ impl RegionVarBindings {\n \n     fn construct_graph(&self) -> Graph {\n         let num_vars = self.num_vars();\n-        let num_edges = self.constraints.size();\n+        let num_edges = self.constraints.len();\n \n         let nodes = vec::from_fn(num_vars, |var_idx| {\n             GraphNode {"}, {"sha": "dd6e889008f3b3bb275064be92f4f39d8b391ef5", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=1b4eb145f92e7630b7e5733847d29985c3bd215f", "patch": "@@ -164,7 +164,7 @@ fn srv_should_build_ast_map() {\n     let source = ~\"fn a() { }\";\n     do from_str(source) |srv| {\n         do exec(srv) |ctxt| {\n-            assert ctxt.ast_map.size() != 0u\n+            assert !ctxt.ast_map.is_empty()\n         };\n     }\n }"}, {"sha": "cb68204a647d484aca353816fb7cb94c0a61759d", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=1b4eb145f92e7630b7e5733847d29985c3bd215f", "patch": "@@ -11,6 +11,7 @@\n //! A map type - **deprecated**, use `core::hashmap` instead\n #[forbid(deprecated_mode)];\n \n+use core::container::{Container, Mutable, Map};\n use core::cmp::Eq;\n use core::hash::Hash;\n use core::io::WriterUtil;\n@@ -161,9 +162,12 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V> {\n-        pure fn size() -> uint { self.count }\n+    impl<K: Eq IterBytes Hash, V> T<K, V>: Container {\n+        pure fn len(&self) -> uint { self.count }\n+        pure fn is_empty(&self) -> bool { self.count == 0 }\n+    }\n \n+    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V> {\n         pure fn contains_key_ref(k: &K) -> bool {\n             let hash = k.hash_keyed(0,0) as uint;\n             match self.search_tbl(k, hash) {\n@@ -404,7 +408,7 @@ pub fn set_add<K:Eq IterBytes Hash Const Copy>(set: Set<K>, key: K) -> bool {\n \n /// Convert a set into a vector.\n pub pure fn vec_from_set<T:Eq IterBytes Hash Copy>(s: Set<T>) -> ~[T] {\n-    do vec::build_sized(s.size()) |push| {\n+    do vec::build_sized(s.len()) |push| {\n         for s.each_key() |k| {\n             push(k);\n         }\n@@ -580,7 +584,7 @@ mod tests {\n             debug!(\"inserting %u -> %u\", i, i*i);\n             i += 1u;\n         }\n-        assert (hm.size() == num_to_insert);\n+        assert (hm.len() == num_to_insert);\n         debug!(\"-----\");\n         debug!(\"removing evens\");\n         i = 0u;\n@@ -589,7 +593,7 @@ mod tests {\n             assert v;\n             i += 2u;\n         }\n-        assert (hm.size() == num_to_insert / 2u);\n+        assert (hm.len() == num_to_insert / 2u);\n         debug!(\"-----\");\n         i = 1u;\n         while i < num_to_insert {\n@@ -611,7 +615,7 @@ mod tests {\n             debug!(\"inserting %u -> %u\", i, i*i);\n             i += 2u;\n         }\n-        assert (hm.size() == num_to_insert);\n+        assert (hm.len() == num_to_insert);\n         debug!(\"-----\");\n         i = 0u;\n         while i < num_to_insert {\n@@ -620,7 +624,7 @@ mod tests {\n             i += 1u;\n         }\n         debug!(\"-----\");\n-        assert (hm.size() == num_to_insert);\n+        assert (hm.len() == num_to_insert);\n         i = 0u;\n         while i < num_to_insert {\n             debug!(\"get(%u) = %u\", i, hm.get(i));\n@@ -653,10 +657,10 @@ mod tests {\n         let key = ~\"k\";\n         let map = HashMap::<~str, ~str>();\n         map.insert(key, ~\"val\");\n-        assert (map.size() == 1);\n+        assert (map.len() == 1);\n         assert (map.contains_key_ref(&key));\n         map.clear();\n-        assert (map.size() == 0);\n+        assert (map.len() == 0);\n         assert (!map.contains_key_ref(&key));\n     }\n \n@@ -667,7 +671,7 @@ mod tests {\n             (~\"b\", 2),\n             (~\"c\", 3)\n         ]);\n-        assert map.size() == 3u;\n+        assert map.len() == 3u;\n         assert map.get(~\"a\") == 1;\n         assert map.get(~\"b\") == 2;\n         assert map.get(~\"c\") == 3;"}, {"sha": "6c5a8a4377e3f8da7d08911958d2346959cce02e", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b4eb145f92e7630b7e5733847d29985c3bd215f/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=1b4eb145f92e7630b7e5733847d29985c3bd215f", "patch": "@@ -102,7 +102,7 @@ fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n     let keys = oldmap::HashMap::<node_id, ()>();\n     let r = rand::Rng();\n \n-    while keys.size() < n {\n+    while keys.len() < n {\n         let k = r.gen_uint_range(0u, graph.len());\n \n         if graph[k].len() > 0u && vec::any(graph[k], |i| {"}]}