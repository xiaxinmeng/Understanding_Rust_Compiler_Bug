{"sha": "afe27d461cd78372f5c40f64de6a32a2011d0d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZTI3ZDQ2MWNkNzgzNzJmNWM0MGY2NGRlNmEzMmEyMDExZDBkOWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T00:14:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:54:45Z"}, "message": "Convert crate_ctxt to istrs. Issue #855", "tree": {"sha": "423d2ea71a71f4743293c04382b68486d06c3dba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/423d2ea71a71f4743293c04382b68486d06c3dba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe27d461cd78372f5c40f64de6a32a2011d0d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe27d461cd78372f5c40f64de6a32a2011d0d9c", "html_url": "https://github.com/rust-lang/rust/commit/afe27d461cd78372f5c40f64de6a32a2011d0d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe27d461cd78372f5c40f64de6a32a2011d0d9c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32b45248067e9f54446db2d096f80d82be51209a", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b45248067e9f54446db2d096f80d82be51209a", "html_url": "https://github.com/rust-lang/rust/commit/32b45248067e9f54446db2d096f80d82be51209a"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b842b900e6ccfdeedfd6b8cdabb14b66360b7b28", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afe27d461cd78372f5c40f64de6a32a2011d0d9c/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe27d461cd78372f5c40f64de6a32a2011d0d9c/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=afe27d461cd78372f5c40f64de6a32a2011d0d9c", "patch": "@@ -213,14 +213,14 @@ fn encode_type(ecx: &@encode_ctxt, ebml_w: &ebml::writer, typ: ty::t) {\n \n fn encode_symbol(ecx: &@encode_ctxt, ebml_w: &ebml::writer, id: node_id) {\n     ebml::start_tag(ebml_w, tag_items_data_item_symbol);\n-    ebml_w.writer.write(str::bytes(ecx.ccx.item_symbols.get(id)));\n+    ebml_w.writer.write(istr::bytes(ecx.ccx.item_symbols.get(id)));\n     ebml::end_tag(ebml_w);\n }\n \n fn encode_discriminant(ecx: &@encode_ctxt, ebml_w: &ebml::writer,\n                        id: node_id) {\n     ebml::start_tag(ebml_w, tag_items_data_item_symbol);\n-    ebml_w.writer.write(str::bytes(ecx.ccx.discrim_symbols.get(id)));\n+    ebml_w.writer.write(istr::bytes(ecx.ccx.discrim_symbols.get(id)));\n     ebml::end_tag(ebml_w);\n }\n "}, {"sha": "8ae36ce6868b541301b7882a8eaed1f0f009f9a6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afe27d461cd78372f5c40f64de6a32a2011d0d9c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe27d461cd78372f5c40f64de6a32a2011d0d9c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=afe27d461cd78372f5c40f64de6a32a2011d0d9c", "patch": "@@ -5858,7 +5858,7 @@ fn register_fn_pair(cx: &@crate_ctxt, ps: str, llfnty: TypeRef,\n     let gvar =\n         create_fn_pair(cx, ps, llfnty, llfn, cx.sess.get_opts().library);\n     cx.item_ids.insert(id, llfn);\n-    cx.item_symbols.insert(id, ps);\n+    cx.item_symbols.insert(id, istr::from_estr(ps));\n     cx.fn_pairs.insert(id, gvar);\n }\n \n@@ -6101,7 +6101,7 @@ fn collect_item_1(ccx: @crate_ctxt, i: &@ast::item, pt: &[str],\n         let g = istr::as_buf(s, { |buf|\n             llvm::LLVMAddGlobal(ccx.llmod, type_of(ccx, i.span, typ), buf)\n         });\n-        ccx.item_symbols.insert(i.id, istr::to_estr(s));\n+        ccx.item_symbols.insert(i.id, s);\n         ccx.consts.insert(i.id, g);\n       }\n       _ { }\n@@ -6198,7 +6198,7 @@ fn trans_constant(ccx: @crate_ctxt, it: &@ast::item, pt: &[str],\n                 llvm::LLVMSetGlobalConstant(discrim_gvar, True);\n             }\n             ccx.discrims.insert(variant.node.id, discrim_gvar);\n-            ccx.discrim_symbols.insert(variant.node.id, istr::to_estr(s));\n+            ccx.discrim_symbols.insert(variant.node.id, s);\n             i += 1u;\n         }\n       }\n@@ -6428,7 +6428,7 @@ fn trans_crate(sess: &session::session, crate: &@ast::crate, tcx: &ty::ctxt,\n     let tydescs = map::mk_hashmap::<ty::t, @tydesc_info>(hasher, eqer);\n     let lltypes = map::mk_hashmap::<ty::t, TypeRef>(hasher, eqer);\n     let sha1s = map::mk_hashmap::<ty::t, istr>(hasher, eqer);\n-    let short_names = map::mk_hashmap::<ty::t, str>(hasher, eqer);\n+    let short_names = map::mk_hashmap::<ty::t, istr>(hasher, eqer);\n     let sha = std::sha1::mk_sha1();\n     let ccx =\n         @{sess: sess,\n@@ -6439,13 +6439,13 @@ fn trans_crate(sess: &session::session, crate: &@ast::crate, tcx: &ty::ctxt,\n           intrinsics: intrinsics,\n           item_ids: new_int_hash::<ValueRef>(),\n           ast_map: amap,\n-          item_symbols: new_int_hash::<str>(),\n+          item_symbols: new_int_hash::<istr>(),\n           mutable main_fn: none::<ValueRef>,\n           link_meta: link::build_link_meta(sess, *crate,\n                                            istr::from_estr(output), sha),\n           tag_sizes: tag_sizes,\n           discrims: new_int_hash::<ValueRef>(),\n-          discrim_symbols: new_int_hash::<str>(),\n+          discrim_symbols: new_int_hash::<istr>(),\n           fn_pairs: new_int_hash::<ValueRef>(),\n           consts: new_int_hash::<ValueRef>(),\n           obj_methods: new_int_hash::<()>(),"}, {"sha": "698db358cac001925da4accb0114726c8ee7df82", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afe27d461cd78372f5c40f64de6a32a2011d0d9c/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe27d461cd78372f5c40f64de6a32a2011d0d9c/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=afe27d461cd78372f5c40f64de6a32a2011d0d9c", "patch": "@@ -131,12 +131,12 @@ type crate_ctxt =\n      intrinsics: hashmap<istr, ValueRef>,\n      item_ids: hashmap<ast::node_id, ValueRef>,\n      ast_map: ast_map::map,\n-     item_symbols: hashmap<ast::node_id, str>,\n+     item_symbols: hashmap<ast::node_id, istr>,\n      mutable main_fn: option::t<ValueRef>,\n      link_meta: link::link_meta,\n      tag_sizes: hashmap<ty::t, uint>,\n      discrims: hashmap<ast::node_id, ValueRef>,\n-     discrim_symbols: hashmap<ast::node_id, str>,\n+     discrim_symbols: hashmap<ast::node_id, istr>,\n      fn_pairs: hashmap<ast::node_id, ValueRef>,\n      consts: hashmap<ast::node_id, ValueRef>,\n      obj_methods: hashmap<ast::node_id, ()>,\n@@ -147,7 +147,7 @@ type crate_ctxt =\n      names: namegen,\n      sha: std::sha1::sha1,\n      type_sha1s: hashmap<ty::t, istr>,\n-     type_short_names: hashmap<ty::t, str>,\n+     type_short_names: hashmap<ty::t, istr>,\n      tcx: ty::ctxt,\n      mut_map: alias::mut_map,\n      stats: stats,"}, {"sha": "2add4d17d8e31581b3c58c5679f1c59c83c72132", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afe27d461cd78372f5c40f64de6a32a2011d0d9c/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe27d461cd78372f5c40f64de6a32a2011d0d9c/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=afe27d461cd78372f5c40f64de6a32a2011d0d9c", "patch": "@@ -936,7 +936,7 @@ fn process_normal_mthd(cx: @local_ctxt, m: @ast::method, self_ty: ty::t,\n     // item_ids map, together with the ValueRef that points to where that\n     // method's definition will be in the executable.\n     cx.ccx.item_ids.insert(m.node.id, llfn);\n-    cx.ccx.item_symbols.insert(m.node.id, istr::to_estr(s));\n+    cx.ccx.item_symbols.insert(m.node.id, s);\n     trans_fn(mcx, m.span, m.node.meth, llfn, some(self_ty), ty_params,\n              m.node.id);\n "}]}