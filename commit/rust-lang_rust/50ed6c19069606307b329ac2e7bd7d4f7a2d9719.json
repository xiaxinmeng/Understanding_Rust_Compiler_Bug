{"sha": "50ed6c19069606307b329ac2e7bd7d4f7a2d9719", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZWQ2YzE5MDY5NjA2MzA3YjMyOWFjMmU3YmQ3ZDRmN2EyZDk3MTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-18T20:28:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-02T17:08:36Z"}, "message": "Do not automatically make `Self` `Sized` in traits.", "tree": {"sha": "02955846c160c6264af8eab1b644cd706c7a0f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02955846c160c6264af8eab1b644cd706c7a0f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ed6c19069606307b329ac2e7bd7d4f7a2d9719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ed6c19069606307b329ac2e7bd7d4f7a2d9719", "html_url": "https://github.com/rust-lang/rust/commit/50ed6c19069606307b329ac2e7bd7d4f7a2d9719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ed6c19069606307b329ac2e7bd7d4f7a2d9719/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1", "html_url": "https://github.com/rust-lang/rust/commit/5b425c1b2f1f79803b08eb1ca1713ca4bea47aa1"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "fe61b3de2cf6f0c5253620ed5521236c7466b87f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50ed6c19069606307b329ac2e7bd7d4f7a2d9719/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ed6c19069606307b329ac2e7bd7d4f7a2d9719/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=50ed6c19069606307b329ac2e7bd7d4f7a2d9719", "patch": "@@ -843,6 +843,7 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     let bounds = compute_bounds(ccx,\n                                 self_param_ty.to_ty(ccx.tcx),\n                                 bounds.as_slice(),\n+                                SizedByDefault::No,\n                                 it.span);\n \n     let associated_type_names: Vec<_> =\n@@ -1098,6 +1099,7 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 let bounds = compute_bounds(ccx,\n                                             assoc_ty,\n                                             assoc_type_def.bounds.as_slice(),\n+                                            SizedByDefault::Yes,\n                                             assoc_type_def.span);\n \n                 ty::predicates(ccx.tcx, assoc_ty, &bounds).into_iter()\n@@ -1306,6 +1308,7 @@ fn get_or_create_type_parameter_def<'tcx,AC>(this: &AC,\n     let bounds = compute_bounds(this,\n                                 param_ty.to_ty(this.tcx()),\n                                 param.bounds[],\n+                                SizedByDefault::Yes,\n                                 param.span);\n     let default = match param.default {\n         None => None,\n@@ -1342,29 +1345,35 @@ fn get_or_create_type_parameter_def<'tcx,AC>(this: &AC,\n     def\n }\n \n+enum SizedByDefault { Yes, No }\n+\n /// Translate the AST's notion of ty param bounds (which are an enum consisting of a newtyped Ty or\n /// a region) to ty's notion of ty param bounds, which can either be user-defined traits, or the\n /// built-in trait (formerly known as kind): Send.\n fn compute_bounds<'tcx,AC>(this: &AC,\n                            param_ty: ty::Ty<'tcx>,\n                            ast_bounds: &[ast::TyParamBound],\n+                           sized_by_default: SizedByDefault,\n                            span: Span)\n                            -> ty::ParamBounds<'tcx>\n-                           where AC: AstConv<'tcx> {\n+                           where AC: AstConv<'tcx>\n+{\n     let mut param_bounds = conv_param_bounds(this,\n                                              span,\n                                              param_ty,\n                                              ast_bounds);\n \n-    add_unsized_bound(this,\n-                      &mut param_bounds.builtin_bounds,\n-                      ast_bounds,\n-                      span);\n+    if let SizedByDefault::Yes = sized_by_default {\n+        add_unsized_bound(this,\n+                          &mut param_bounds.builtin_bounds,\n+                          ast_bounds,\n+                          span);\n \n-    check_bounds_compatible(this.tcx(),\n-                            param_ty,\n-                            &param_bounds,\n-                            span);\n+        check_bounds_compatible(this.tcx(),\n+                                param_ty,\n+                                &param_bounds,\n+                                span);\n+    }\n \n     param_bounds.trait_bounds.sort_by(|a,b| a.def_id().cmp(&b.def_id()));\n "}]}