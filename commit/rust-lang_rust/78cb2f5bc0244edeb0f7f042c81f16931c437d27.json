{"sha": "78cb2f5bc0244edeb0f7f042c81f16931c437d27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Y2IyZjViYzAyNDRlZGViMGY3ZjA0MmM4MWYxNjkzMWM0MzdkMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-18T14:26:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-18T14:26:42Z"}, "message": "auto merge of #14984 : thestinger/rust/libc, r=alexcrichton", "tree": {"sha": "02b3469125c2d093879dc89298b41349c6c91864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b3469125c2d093879dc89298b41349c6c91864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78cb2f5bc0244edeb0f7f042c81f16931c437d27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78cb2f5bc0244edeb0f7f042c81f16931c437d27", "html_url": "https://github.com/rust-lang/rust/commit/78cb2f5bc0244edeb0f7f042c81f16931c437d27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78cb2f5bc0244edeb0f7f042c81f16931c437d27/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34e3232705539e4506ceb4c19944f7d894413fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/34e3232705539e4506ceb4c19944f7d894413fca", "html_url": "https://github.com/rust-lang/rust/commit/34e3232705539e4506ceb4c19944f7d894413fca"}, {"sha": "bb0a42745f7a951c298b7bc2e07f7ba1fee14100", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0a42745f7a951c298b7bc2e07f7ba1fee14100", "html_url": "https://github.com/rust-lang/rust/commit/bb0a42745f7a951c298b7bc2e07f7ba1fee14100"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "526ce66b1ead88fb7545158f4e0f2070295d7e60", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78cb2f5bc0244edeb0f7f042c81f16931c437d27/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cb2f5bc0244edeb0f7f042c81f16931c437d27/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=78cb2f5bc0244edeb0f7f042c81f16931c437d27", "patch": "@@ -96,7 +96,7 @@ fn protect_last_page(stack: &MemoryMap) -> bool {\n         // This may seem backwards: the start of the segment is the last page?\n         // Yes! The stack grows from higher addresses (the end of the allocated\n         // block) to lower addresses (the start of the allocated block).\n-        let last_page = stack.data as *libc::c_void;\n+        let last_page = stack.data as *mut libc::c_void;\n         libc::mprotect(last_page, page_size() as libc::size_t,\n                        libc::PROT_NONE) != -1\n     }"}, {"sha": "2a464d82fd979bd20779eb64f050f8b8d38a29ed", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/78cb2f5bc0244edeb0f7f042c81f16931c437d27/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cb2f5bc0244edeb0f7f042c81f16931c437d27/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=78cb2f5bc0244edeb0f7f042c81f16931c437d27", "patch": "@@ -2057,7 +2057,7 @@ pub mod consts {\n             pub static MAP_FIXED : c_int = 0x0010;\n             pub static MAP_ANON : c_int = 0x0020;\n \n-            pub static MAP_FAILED : *c_void = -1 as *c_void;\n+            pub static MAP_FAILED : *mut c_void = -1 as *mut c_void;\n \n             pub static MCL_CURRENT : c_int = 0x0001;\n             pub static MCL_FUTURE : c_int = 0x0002;\n@@ -2268,7 +2268,7 @@ pub mod consts {\n             pub static MAP_FIXED : c_int = 0x0010;\n             pub static MAP_ANON : c_int = 0x0800;\n \n-            pub static MAP_FAILED : *c_void = -1 as *c_void;\n+            pub static MAP_FAILED : *mut c_void = -1 as *mut c_void;\n \n             pub static MCL_CURRENT : c_int = 0x0001;\n             pub static MCL_FUTURE : c_int = 0x0002;\n@@ -2804,7 +2804,7 @@ pub mod consts {\n             pub static MAP_FIXED : c_int = 0x0010;\n             pub static MAP_ANON : c_int = 0x1000;\n \n-            pub static MAP_FAILED : *c_void = -1 as *c_void;\n+            pub static MAP_FAILED : *mut c_void = -1 as *mut c_void;\n \n             pub static MCL_CURRENT : c_int = 0x0001;\n             pub static MCL_FUTURE : c_int = 0x0002;\n@@ -3192,7 +3192,7 @@ pub mod consts {\n             pub static MAP_FIXED : c_int = 0x0010;\n             pub static MAP_ANON : c_int = 0x1000;\n \n-            pub static MAP_FAILED : *c_void = -1 as *c_void;\n+            pub static MAP_FAILED : *mut c_void = -1 as *mut c_void;\n \n             pub static MCL_CURRENT : c_int = 0x0001;\n             pub static MCL_FUTURE : c_int = 0x0002;\n@@ -3951,19 +3951,19 @@ pub mod funcs {\n                 pub fn mlockall(flags: c_int) -> c_int;\n                 pub fn munlockall() -> c_int;\n \n-                pub fn mmap(addr: *c_void,\n+                pub fn mmap(addr: *mut c_void,\n                             len: size_t,\n                             prot: c_int,\n                             flags: c_int,\n                             fd: c_int,\n                             offset: off_t)\n                             -> *mut c_void;\n-                pub fn munmap(addr: *c_void, len: size_t) -> c_int;\n+                pub fn munmap(addr: *mut c_void, len: size_t) -> c_int;\n \n-                pub fn mprotect(addr: *c_void, len: size_t, prot: c_int)\n+                pub fn mprotect(addr: *mut c_void, len: size_t, prot: c_int)\n                                 -> c_int;\n \n-                pub fn msync(addr: *c_void, len: size_t, flags: c_int)\n+                pub fn msync(addr: *mut c_void, len: size_t, flags: c_int)\n                              -> c_int;\n                 pub fn shm_open(name: *c_char, oflag: c_int, mode: mode_t)\n                                 -> c_int;\n@@ -4208,9 +4208,9 @@ pub mod funcs {\n \n         extern {\n             pub fn getdtablesize() -> c_int;\n-            pub fn madvise(addr: *c_void, len: size_t, advice: c_int)\n+            pub fn madvise(addr: *mut c_void, len: size_t, advice: c_int)\n                            -> c_int;\n-            pub fn mincore(addr: *c_void, len: size_t, vec: *c_uchar)\n+            pub fn mincore(addr: *mut c_void, len: size_t, vec: *mut c_uchar)\n                            -> c_int;\n         }\n     }"}, {"sha": "4d58d4674bf9a5e2e93a3754c26eac9ab88f3467", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78cb2f5bc0244edeb0f7f042c81f16931c437d27/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cb2f5bc0244edeb0f7f042c81f16931c437d27/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=78cb2f5bc0244edeb0f7f042c81f16931c437d27", "patch": "@@ -1338,7 +1338,6 @@ impl MemoryMap {\n     /// `ErrZeroLength`.\n     pub fn new(min_len: uint, options: &[MapOption]) -> Result<MemoryMap, MapError> {\n         use libc::off_t;\n-        use cmp::Equiv;\n \n         if min_len == 0 {\n             return Err(ErrZeroLength)\n@@ -1371,10 +1370,10 @@ impl MemoryMap {\n         if fd == -1 && !custom_flags { flags |= libc::MAP_ANON; }\n \n         let r = unsafe {\n-            libc::mmap(addr as *c_void, len as libc::size_t, prot, flags, fd,\n-                       offset)\n+            libc::mmap(addr as *mut c_void, len as libc::size_t, prot, flags,\n+                       fd, offset)\n         };\n-        if r.equiv(&libc::MAP_FAILED) {\n+        if r == libc::MAP_FAILED {\n             Err(match errno() as c_int {\n                 libc::EACCES => ErrFdNotAvail,\n                 libc::EBADF => ErrInvalidFd,\n@@ -1410,8 +1409,8 @@ impl Drop for MemoryMap {\n         if self.len == 0 { /* workaround for dummy_stack */ return; }\n \n         unsafe {\n-            // FIXME: what to do if this fails?\n-            let _ = libc::munmap(self.data as *c_void, self.len as libc::size_t);\n+            // `munmap` only fails due to logic errors\n+            libc::munmap(self.data as *mut c_void, self.len as libc::size_t);\n         }\n     }\n }"}]}