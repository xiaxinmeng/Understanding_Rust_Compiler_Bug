{"sha": "9b79b1022c68b79dbcdf2e51d46843c6e801d1f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNzliMTAyMmM2OGI3OWRiY2RmMmU1MWQ0Njg0M2M2ZTgwMWQxZjc=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-03T23:17:31Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-03T23:43:47Z"}, "message": "Fix suggestions for `needless_bool`", "tree": {"sha": "4dea7876485a1c7cbe827ebd5349b4eaeadea295", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dea7876485a1c7cbe827ebd5349b4eaeadea295"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXeaM0AAoJEF5CfHlMukXoonkP/1KzExabxR6HGWPJnd+Vtyfa\njOMFpWtXJc/dwhUz0cyxnK4NUwSXa4m8G03/wvulkSIq1h+Bf/N+iLnoB8zdUAgk\n0aIHgSVr2n6EfCC9L19zKZFIpD9YSUG9p5+4K6yY1jOoHeBffmScGdI9U+/YAEiD\nOguaYoIlCMRNw4eNB5O65VN85R7LFlqjRKvePO7u1BowBqfH+cjUCUNGQfZBzZyQ\n+QO/VvrGR3HItJO/FKODBYzy53zhsTML97yzy29D5hO1zulUQOoq/3pJRmIWujGe\nSYL4qTFvL7wedpgecEslkewx1vSZZxshcMkIjrdcDE0hMYPlPPqvb7ihsL9cvo2Y\nRLG4YodADY2yXFzqQNOiLPeR4WIJygXvk3tObr4GlM5LYJDsqVv8McYoXYDjYqdy\n6B1OMpU+Z1RTOGMfISGDLvv/cRKxFROuyGHfSUxwhNbTRnswknCQ5lQj40+4oYHl\nCd9FTPcIx+aTOg/JI9CbEkFauHR1L4i3j7D2GAYENDqCMTlbEtv7scQ9MUEz2yQl\n0ZKEfFJwbOpELY2WYjOrOVjyQXD3M/xRACHfGz84nKS7piSy/AxK6oSTYW/Dmx14\nr5y6NqwaqKMZ/7iVSs3CcYjs36ev3dHfGWEYc33wD/xHDZ0yJx3/Kmdy9OJYRUZr\nx4iVYXPrX3kPSvUKsXn5\n=86Gw\n-----END PGP SIGNATURE-----", "payload": "tree 4dea7876485a1c7cbe827ebd5349b4eaeadea295\nparent 7778f314f2dfdc1b9749b6e4f21686dff27df6ac\nauthor mcarton <cartonmartin+git@gmail.com> 1467587851 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467589427 +0200\n\nFix suggestions for `needless_bool`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7", "html_url": "https://github.com/rust-lang/rust/commit/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7778f314f2dfdc1b9749b6e4f21686dff27df6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/7778f314f2dfdc1b9749b6e4f21686dff27df6ac", "html_url": "https://github.com/rust-lang/rust/commit/7778f314f2dfdc1b9749b6e4f21686dff27df6ac"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "fa2a350c36f029e567d7d0b3b9b29054350b3297", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=9b79b1022c68b79dbcdf2e51d46843c6e801d1f7", "patch": "@@ -6,7 +6,8 @@ use rustc::lint::*;\n use rustc::hir::*;\n use syntax::ast::LitKind;\n use syntax::codemap::Spanned;\n-use utils::{span_lint, span_lint_and_then, snippet, snippet_opt};\n+use utils::{span_lint, span_lint_and_then, snippet};\n+use utils::sugg::Sugg;\n \n /// **What it does:** This lint checks for expressions of the form `if c { true } else { false }` (or vice versa) and suggest using the condition directly.\n ///\n@@ -49,11 +50,20 @@ impl LateLintPass for NeedlessBool {\n     fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n         use self::Expression::*;\n         if let ExprIf(ref pred, ref then_block, Some(ref else_expr)) = e.node {\n-            let reduce = |hint: &str, not| {\n-                let hint = match snippet_opt(cx, pred.span) {\n-                    Some(pred_snip) => format!(\"`{}{}`\", not, pred_snip),\n-                    None => hint.into(),\n+            let reduce = |ret, not| {\n+                let snip = Sugg::hir(cx, pred, \"<predicate>\");\n+                let snip = if not {\n+                    !snip\n+                } else {\n+                    snip\n+                };\n+\n+                let hint = if ret {\n+                    format!(\"return {};\", snip)\n+                } else {\n+                    snip.to_string()\n                 };\n+\n                 span_lint_and_then(cx,\n                                    NEEDLESS_BOOL,\n                                    e.span,\n@@ -77,10 +87,10 @@ impl LateLintPass for NeedlessBool {\n                               e.span,\n                               \"this if-then-else expression will always return false\");\n                 }\n-                (RetBool(true), RetBool(false)) => reduce(\"its predicate\", \"return \"),\n-                (Bool(true), Bool(false)) => reduce(\"its predicate\", \"\"),\n-                (RetBool(false), RetBool(true)) => reduce(\"`!` and its predicate\", \"return !\"),\n-                (Bool(false), Bool(true)) => reduce(\"`!` and its predicate\", \"!\"),\n+                (RetBool(true), RetBool(false)) => reduce(true, false),\n+                (Bool(true), Bool(false)) => reduce(false, false),\n+                (RetBool(false), RetBool(true)) => reduce(true, true),\n+                (Bool(false), Bool(true)) => reduce(false, true),\n                 _ => (),\n             }\n         }\n@@ -122,23 +132,23 @@ impl LateLintPass for BoolComparison {\n                                        });\n                 }\n                 (Bool(false), Other) => {\n-                    let hint = format!(\"!{}\", snippet(cx, right_side.span, \"..\"));\n+                    let hint = Sugg::hir(cx, right_side, \"..\");\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n                                        \"equality checks against false can be replaced by a negation\",\n                                        |db| {\n-                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", (!hint).to_string());\n                                        });\n                 }\n                 (Other, Bool(false)) => {\n-                    let hint = format!(\"!{}\", snippet(cx, left_side.span, \"..\"));\n+                    let hint = Sugg::hir(cx, left_side, \"..\");\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n                                        \"equality checks against false can be replaced by a negation\",\n                                        |db| {\n-                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n+                                           db.span_suggestion(e.span, \"try simplifying it as shown:\", (!hint).to_string());\n                                        });\n                 }\n                 _ => (),"}, {"sha": "fb81d44308a0e8f08e9dc9f02f99f6813bbe0609", "filename": "tests/compile-fail/needless_bool.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7/tests%2Fcompile-fail%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b79b1022c68b79dbcdf2e51d46843c6e801d1f7/tests%2Fcompile-fail%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_bool.rs?ref=9b79b1022c68b79dbcdf2e51d46843c6e801d1f7", "patch": "@@ -5,21 +5,28 @@\n #[allow(if_same_then_else)]\n fn main() {\n     let x = true;\n+    let y = false;\n     if x { true } else { true }; //~ERROR this if-then-else expression will always return true\n     if x { false } else { false }; //~ERROR this if-then-else expression will always return false\n     if x { true } else { false };\n     //~^ ERROR this if-then-else expression returns a bool literal\n     //~| HELP you can reduce it to\n-    //~| SUGGESTION `x`\n+    //~| SUGGESTION x\n     if x { false } else { true };\n     //~^ ERROR this if-then-else expression returns a bool literal\n     //~| HELP you can reduce it to\n-    //~| SUGGESTION `!x`\n+    //~| SUGGESTION !x\n+    if x && y { false } else { true };\n+    //~^ ERROR this if-then-else expression returns a bool literal\n+    //~| HELP you can reduce it to\n+    //~| SUGGESTION !(x && y)\n     if x { x } else { false }; // would also be questionable, but we don't catch this yet\n     bool_ret(x);\n     bool_ret2(x);\n     bool_ret3(x);\n+    bool_ret5(x, x);\n     bool_ret4(x);\n+    bool_ret6(x, x);\n }\n \n #[allow(if_same_then_else, needless_return)]\n@@ -39,13 +46,29 @@ fn bool_ret3(x: bool) -> bool {\n     if x { return true } else { return false };\n     //~^ ERROR this if-then-else expression returns a bool literal\n     //~| HELP you can reduce it to\n-    //~| SUGGESTION `return x`\n+    //~| SUGGESTION return x\n+}\n+\n+#[allow(needless_return)]\n+fn bool_ret5(x: bool, y: bool) -> bool {\n+    if x && y { return true } else { return false };\n+    //~^ ERROR this if-then-else expression returns a bool literal\n+    //~| HELP you can reduce it to\n+    //~| SUGGESTION return x && y\n }\n \n #[allow(needless_return)]\n fn bool_ret4(x: bool) -> bool {\n     if x { return false } else { return true };\n     //~^ ERROR this if-then-else expression returns a bool literal\n     //~| HELP you can reduce it to\n-    //~| SUGGESTION `return !x`\n+    //~| SUGGESTION return !x\n+}\n+\n+#[allow(needless_return)]\n+fn bool_ret6(x: bool, y: bool) -> bool {\n+    if x && y { return false } else { return true };\n+    //~^ ERROR this if-then-else expression returns a bool literal\n+    //~| HELP you can reduce it to\n+    //~| SUGGESTION return !(x && y)\n }"}]}