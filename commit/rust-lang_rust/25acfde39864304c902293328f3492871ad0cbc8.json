{"sha": "25acfde39864304c902293328f3492871ad0cbc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YWNmZGUzOTg2NDMwNGM5MDIyOTMzMjhmMzQ5Mjg3MWFkMGNiYzg=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-01T20:05:03Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-01T20:05:03Z"}, "message": "collections: Implement Eq for DList, RingBuf, TreeMap, TreeSet", "tree": {"sha": "f386695623c404ed7f301f79ae03f14912ea8718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f386695623c404ed7f301f79ae03f14912ea8718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25acfde39864304c902293328f3492871ad0cbc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25acfde39864304c902293328f3492871ad0cbc8", "html_url": "https://github.com/rust-lang/rust/commit/25acfde39864304c902293328f3492871ad0cbc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25acfde39864304c902293328f3492871ad0cbc8/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2fa55903e378368ed9173560f03a0ef16e371c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2fa55903e378368ed9173560f03a0ef16e371c2", "html_url": "https://github.com/rust-lang/rust/commit/f2fa55903e378368ed9173560f03a0ef16e371c2"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "e3bae4dfa94c15a9196d46fe0b49143c84010bcb", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25acfde39864304c902293328f3492871ad0cbc8/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25acfde39864304c902293328f3492871ad0cbc8/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=25acfde39864304c902293328f3492871ad0cbc8", "patch": "@@ -683,6 +683,8 @@ impl<A: PartialEq> PartialEq for DList<A> {\n     }\n }\n \n+impl<A: Eq> Eq for DList<A> {}\n+\n impl<A: PartialOrd> PartialOrd for DList<A> {\n     fn partial_cmp(&self, other: &DList<A>) -> Option<Ordering> {\n         iter::order::partial_cmp(self.iter(), other.iter())"}, {"sha": "1ce5b41ffb7e9b99190a7d38dc2a6086eea6bf7c", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25acfde39864304c902293328f3492871ad0cbc8/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25acfde39864304c902293328f3492871ad0cbc8/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=25acfde39864304c902293328f3492871ad0cbc8", "patch": "@@ -452,6 +452,8 @@ impl<A: PartialEq> PartialEq for RingBuf<A> {\n     }\n }\n \n+impl<A: Eq> Eq for RingBuf<A> {}\n+\n impl<A: PartialOrd> PartialOrd for RingBuf<A> {\n     fn partial_cmp(&self, other: &RingBuf<A>) -> Option<Ordering> {\n         iter::order::partial_cmp(self.iter(), other.iter())"}, {"sha": "7a4fe0652cdab06c8f46f3608abf3b0d576401be", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25acfde39864304c902293328f3492871ad0cbc8/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25acfde39864304c902293328f3492871ad0cbc8/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=25acfde39864304c902293328f3492871ad0cbc8", "patch": "@@ -173,6 +173,8 @@ impl<K: PartialEq + Ord, V: PartialEq> PartialEq for TreeMap<K, V> {\n     }\n }\n \n+impl<K: Eq + Ord, V: Eq> Eq for TreeMap<K, V> {}\n+\n impl<K: Ord, V: PartialOrd> PartialOrd for TreeMap<K, V> {\n     #[inline]\n     fn partial_cmp(&self, other: &TreeMap<K, V>) -> Option<Ordering> {\n@@ -1010,6 +1012,8 @@ impl<T: PartialEq + Ord> PartialEq for TreeSet<T> {\n     fn eq(&self, other: &TreeSet<T>) -> bool { self.map == other.map }\n }\n \n+impl<T: Eq + Ord> Eq for TreeSet<T> {}\n+\n impl<T: Ord> PartialOrd for TreeSet<T> {\n     #[inline]\n     fn partial_cmp(&self, other: &TreeSet<T>) -> Option<Ordering> {"}]}