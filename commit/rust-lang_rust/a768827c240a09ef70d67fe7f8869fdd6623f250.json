{"sha": "a768827c240a09ef70d67fe7f8869fdd6623f250", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Njg4MjdjMjQwYTA5ZWY3MGQ2N2ZlN2Y4ODY5ZmRkNjYyM2YyNTA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-02T21:22:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-02T21:22:24Z"}, "message": "Rollup merge of #39373 - Mark-Simulacrum:remove-toprimitive, r=aturon\n\nRemove ToPrimitive trait.\n\nIt is no longer used.", "tree": {"sha": "872165f4fce6fa1c81e3c3001a4e42344bdabdf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/872165f4fce6fa1c81e3c3001a4e42344bdabdf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a768827c240a09ef70d67fe7f8869fdd6623f250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a768827c240a09ef70d67fe7f8869fdd6623f250", "html_url": "https://github.com/rust-lang/rust/commit/a768827c240a09ef70d67fe7f8869fdd6623f250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a768827c240a09ef70d67fe7f8869fdd6623f250/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcfa2f1ccec764a0c931cf2267f3c231fef8feb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcfa2f1ccec764a0c931cf2267f3c231fef8feb2", "html_url": "https://github.com/rust-lang/rust/commit/bcfa2f1ccec764a0c931cf2267f3c231fef8feb2"}, {"sha": "95227a4dc16b90994e6b39271a75363ff0f05bb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/95227a4dc16b90994e6b39271a75363ff0f05bb3", "html_url": "https://github.com/rust-lang/rust/commit/95227a4dc16b90994e6b39271a75363ff0f05bb3"}], "stats": {"total": 99, "additions": 0, "deletions": 99}, "files": [{"sha": "855f4a8197e35558a9e384a0a6072dcb1890bfae", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a768827c240a09ef70d67fe7f8869fdd6623f250/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a768827c240a09ef70d67fe7f8869fdd6623f250/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a768827c240a09ef70d67fe7f8869fdd6623f250", "patch": "@@ -109,7 +109,6 @@ pub mod util {\n     pub mod common;\n     pub mod ppaux;\n     pub mod nodemap;\n-    pub mod num;\n     pub mod fs;\n }\n "}, {"sha": "da04976a96a37234b4f1cfaf05af3b622ce865ab", "filename": "src/librustc/util/num.rs", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bcfa2f1ccec764a0c931cf2267f3c231fef8feb2/src%2Flibrustc%2Futil%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcfa2f1ccec764a0c931cf2267f3c231fef8feb2/src%2Flibrustc%2Futil%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fnum.rs?ref=bcfa2f1ccec764a0c931cf2267f3c231fef8feb2", "patch": "@@ -1,98 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub trait ToPrimitive {\n-    fn to_i8(&self) -> Option<i8>;\n-    fn to_i16(&self) -> Option<i16>;\n-    fn to_i32(&self) -> Option<i32>;\n-    fn to_i64(&self) -> Option<i64>;\n-    fn to_u8(&self) -> Option<u8>;\n-    fn to_u16(&self) -> Option<u16>;\n-    fn to_u32(&self) -> Option<u32>;\n-    fn to_u64(&self) -> Option<u64>;\n-}\n-\n-impl ToPrimitive for i64 {\n-    fn to_i8(&self) -> Option<i8> {\n-        if *self < i8::min_value() as i64 || *self > i8::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as i8)\n-        }\n-    }\n-    fn to_i16(&self) -> Option<i16> {\n-        if *self < i16::min_value() as i64 || *self > i16::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as i16)\n-        }\n-    }\n-    fn to_i32(&self) -> Option<i32> {\n-        if *self < i32::min_value() as i64 || *self > i32::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as i32)\n-        }\n-    }\n-    fn to_i64(&self) -> Option<i64> {\n-        Some(*self)\n-    }\n-    fn to_u8(&self) -> Option<u8> {\n-        if *self < 0 || *self > u8::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as u8)\n-        }\n-    }\n-    fn to_u16(&self) -> Option<u16> {\n-        if *self < 0 || *self > u16::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as u16)\n-        }\n-    }\n-    fn to_u32(&self) -> Option<u32> {\n-        if *self < 0 || *self > u32::max_value() as i64 {\n-            None\n-        } else {\n-            Some(*self as u32)\n-        }\n-    }\n-    fn to_u64(&self) -> Option<u64> {\n-        if *self < 0 {None} else {Some(*self as u64)}\n-    }\n-}\n-\n-impl ToPrimitive for u64 {\n-    fn to_i8(&self) -> Option<i8> {\n-        if *self > i8::max_value() as u64 {None} else {Some(*self as i8)}\n-    }\n-    fn to_i16(&self) -> Option<i16> {\n-        if *self > i16::max_value() as u64 {None} else {Some(*self as i16)}\n-    }\n-    fn to_i32(&self) -> Option<i32> {\n-        if *self > i32::max_value() as u64 {None} else {Some(*self as i32)}\n-    }\n-    fn to_i64(&self) -> Option<i64> {\n-        if *self > i64::max_value() as u64 {None} else {Some(*self as i64)}\n-    }\n-    fn to_u8(&self) -> Option<u8> {\n-        if *self > u8::max_value() as u64 {None} else {Some(*self as u8)}\n-    }\n-    fn to_u16(&self) -> Option<u16> {\n-        if *self > u16::max_value() as u64 {None} else {Some(*self as u16)}\n-    }\n-    fn to_u32(&self) -> Option<u32> {\n-        if *self > u32::max_value() as u64 {None} else {Some(*self as u32)}\n-    }\n-    fn to_u64(&self) -> Option<u64> {\n-        Some(*self)\n-    }\n-}"}]}