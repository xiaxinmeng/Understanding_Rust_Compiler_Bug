{"sha": "dce20bf62a37cd8b22858c6f23de62cd36404fa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZTIwYmY2MmEzN2NkOGIyMjg1OGM2ZjIzZGU2MmNkMzY0MDRmYTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-10-02T18:17:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-10-02T18:17:38Z"}, "message": "WIP fix tests", "tree": {"sha": "7fb243f1a0e33336c965c9f16bb14c2170858762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb243f1a0e33336c965c9f16bb14c2170858762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce20bf62a37cd8b22858c6f23de62cd36404fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce20bf62a37cd8b22858c6f23de62cd36404fa1", "html_url": "https://github.com/rust-lang/rust/commit/dce20bf62a37cd8b22858c6f23de62cd36404fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce20bf62a37cd8b22858c6f23de62cd36404fa1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81cd596bc57f5a02b8de14c70a2ed2fc31ca3dfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/81cd596bc57f5a02b8de14c70a2ed2fc31ca3dfd", "html_url": "https://github.com/rust-lang/rust/commit/81cd596bc57f5a02b8de14c70a2ed2fc31ca3dfd"}], "stats": {"total": 408, "additions": 221, "deletions": 187}, "files": [{"sha": "971d4476334815d708ffbce28380ff0d368a0669", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -20,7 +20,7 @@ fn return_targets_async_block_not_fn() -> u8 {\n }\n \n async fn return_targets_async_block_not_async_fn() -> u8 {\n-    //~^ ERROR type mismatch resolving\n+    //~^ ERROR mismatched types\n     let block = async {\n         return 0u8;\n     };"}, {"sha": "a9b0e7ae7795daf6fdc18fb5c39945defe7c505b", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -39,6 +39,22 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n               found type `()`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n+error[E0308]: mismatched types\n+  --> $DIR/async-block-control-flow-static-semantics.rs:22:58\n+   |\n+LL |   async fn return_targets_async_block_not_async_fn() -> u8 {\n+   |  __________________________________________________________^\n+LL | |\n+LL | |     let block = async {\n+LL | |         return 0u8;\n+...  |\n+LL | |\n+LL | | }\n+   | |_^ expected u8, found ()\n+   |\n+   = note: expected type `u8`\n+              found type `()`\n+\n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n@@ -49,16 +65,6 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n               found type `()`\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n-error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == u8`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:22:55\n-   |\n-LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n-   |                                                       ^^ expected (), found u8\n-   |\n-   = note: expected type `()`\n-              found type `u8`\n-   = note: the return type of a function must have a statically known size\n-\n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:48:44\n    |"}, {"sha": "0559e62764368951b80eb43a78fd9ed208f9e900", "filename": "src/test/ui/async-await/async-error-span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -9,7 +9,7 @@ fn get_future() -> impl Future<Output = ()> {\n }\n \n async fn foo() {\n-    let a; //~ ERROR type inside `async` object must be known in this context\n+    let a; //~ ERROR type inside `async` fn body must be known in this context\n     get_future().await;\n }\n "}, {"sha": "384029f3aa5fcea228d524dd8b5b0eb4e08249f0", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -1,10 +1,10 @@\n-error[E0698]: type inside `async` object must be known in this context\n+error[E0698]: type inside `async` fn body must be known in this context\n   --> $DIR/async-error-span.rs:12:9\n    |\n LL |     let a;\n    |         ^ cannot infer type\n    |\n-note: the type is part of the `async` object because of this `await`\n+note: the type is part of the `async` fn body because of this `await`\n   --> $DIR/async-error-span.rs:13:5\n    |\n LL |     get_future().await;"}, {"sha": "baecf49c798e2a3abe86111a1c789ba2ed058654", "filename": "src/test/ui/async-await/issues/issue-63388-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -9,9 +9,9 @@ trait Foo {}\n impl Xyz {\n     async fn do_sth<'a>(\n         &'a self, foo: &dyn Foo\n-    ) -> &dyn Foo //~ ERROR lifetime mismatch\n+    ) -> &dyn Foo\n     {\n-        foo\n+        foo  //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "2917fa9ccb7f2f28522f4ab9552178bcd5e00f78", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -1,12 +1,13 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-63388-1.rs:12:10\n+  --> $DIR/issue-63388-1.rs:14:9\n    |\n LL |         &'a self, foo: &dyn Foo\n    |         -------- this parameter and the return type are declared with different lifetimes...\n LL |     ) -> &dyn Foo\n-   |          ^^^^^^^^\n-   |          |\n-   |          ...but data from `foo` is returned here\n+   |          --------\n+LL |     {\n+LL |         foo\n+   |         ^^^ ...but data from `foo` is returned here\n \n error: aborting due to previous error\n "}, {"sha": "5099297fbeb19ec34c626cb5160cd18fa35a63d9", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -11,8 +11,9 @@ error: cannot infer an appropriate lifetime\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |         ^^^ ...but this borrow...\n-LL |     ) -> &dyn Foo\n-   |          -------- this return type evaluates to the `'static` lifetime...\n+...\n+LL |         foo\n+   |         --- this return type evaluates to the `'static` lifetime...\n    |\n note: ...can't outlive the lifetime '_ as defined on the method body at 11:14\n   --> $DIR/issue-63388-2.rs:11:14\n@@ -21,8 +22,8 @@ LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              ^\n help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 11:14\n    |\n-LL |     ) -> &dyn Foo + '_\n-   |          ^^^^^^^^^^^^^\n+LL |         foo + '_\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8d035d038ab7378216eee73f67c4fe5eea424abc", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -7,9 +7,9 @@ async fn bar<T>() -> () {}\n \n async fn foo() {\n     bar().await;\n-    //~^ ERROR type inside `async` object must be known in this context\n+    //~^ ERROR type inside `async` fn body must be known in this context\n     //~| NOTE cannot infer type for `T`\n-    //~| NOTE the type is part of the `async` object because of this `await`\n+    //~| NOTE the type is part of the `async` fn body because of this `await`\n     //~| NOTE in this expansion of desugaring of `await`\n }\n fn main() {}"}, {"sha": "652f15cffe257c0f432b0d860f9c6b371b2fed47", "filename": "src/test/ui/async-await/unresolved_type_param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -1,10 +1,10 @@\n-error[E0698]: type inside `async` object must be known in this context\n+error[E0698]: type inside `async` fn body must be known in this context\n   --> $DIR/unresolved_type_param.rs:9:5\n    |\n LL |     bar().await;\n    |     ^^^ cannot infer type for `T`\n    |\n-note: the type is part of the `async` object because of this `await`\n+note: the type is part of the `async` fn body because of this `await`\n   --> $DIR/unresolved_type_param.rs:9:5\n    |\n LL |     bar().await;"}, {"sha": "e3c261576e61e8909680a68abc1572ee7c0ba913", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -1,28 +1,25 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:45\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          ----               ^^^^\n-   |                          |                  |\n-   |                          |                  ...but data from `f` is returned here\n+   |                          ----               ----   ^ ...but data from `f` is returned here\n+   |                          |\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:55\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:82\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -----                        ^^^^^^^^^^^^^^^^^\n-   |                          |                            |\n-   |                          |                            ...but data from `f` is returned here\n+   |                          -----                        -----------------          ^ ...but data from `f` is returned here\n+   |                          |\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                                  -----                   ^^^\n-   |                                  |                       |\n-   |                                  |                       ...but data from `arg` is returned here\n+   |                                  -----                   ---   ^^^ ...but data from `arg` is returned here\n+   |                                  |\n    |                                  this parameter and the return type are declared with different lifetimes...\n \n error: aborting due to 3 previous errors"}, {"sha": "5aba7cfcf296e7c4add58e65122af7bd37d91073", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -11,29 +11,29 @@ impl<'a> Struct<'a> {\n     // Test using `&self` sugar:\n \n     async fn ref_self(&self, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     // Test using `&Self` explicitly:\n \n     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "6b668d9f1f655a4baeac456bbc1a5a964eb7c272", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -1,56 +1,62 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:13:42\n+  --> $DIR/lt-ref-self-async.rs:14:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -----              ^^^^\n-   |                       |                  |\n-   |                       |                  ...but data from `f` is returned here\n+   |                       -----              ----\n+   |                       |\n    |                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:19:48\n+  --> $DIR/lt-ref-self-async.rs:20:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -----              ^^^^\n-   |                             |                  |\n-   |                             |                  ...but data from `f` is returned here\n+   |                             -----              ----\n+   |                             |\n    |                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:23:57\n+  --> $DIR/lt-ref-self-async.rs:24:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ^^^^\n-   |                                     |                   |\n-   |                                     |                   ...but data from `f` is returned here\n+   |                                     -----               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:27:57\n+  --> $DIR/lt-ref-self-async.rs:28:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ^^^^\n-   |                                     |                   |\n-   |                                     |                   ...but data from `f` is returned here\n+   |                                     -----               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:31:66\n+  --> $DIR/lt-ref-self-async.rs:32:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----                ^^^^\n-   |                                             |                    |\n-   |                                             |                    ...but data from `f` is returned here\n+   |                                             -----                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:35:62\n+  --> $DIR/lt-ref-self-async.rs:36:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                         -----                ^^^^\n-   |                                         |                    |\n-   |                                         |                    ...but data from `f` is returned here\n+   |                                         -----                ----\n+   |                                         |\n    |                                         this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b8eb416d90432a2e702eafc34e2177983164bcd1", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -10,30 +10,30 @@ struct Struct { }\n impl Struct {\n     // Test using `&mut self` sugar:\n \n-    async fn ref_self(&mut self, f: &u32) -> &u32 { //~ ERROR lifetime mismatch\n-        f\n+    async fn ref_self(&mut self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n     }\n \n     // Test using `&mut Self` explicitly:\n \n     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "29fbec9fa7ae0765f9ba41b93ec5aaf414e82c15", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -1,56 +1,62 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:13:46\n+  --> $DIR/ref-mut-self-async.rs:14:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                       ---------              ^^^^\n-   |                       |                      |\n-   |                       |                      ...but data from `f` is returned here\n+   |                       ---------              ----\n+   |                       |\n    |                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:19:52\n+  --> $DIR/ref-mut-self-async.rs:20:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                             ---------              ^^^^\n-   |                             |                      |\n-   |                             |                      ...but data from `f` is returned here\n+   |                             ---------              ----\n+   |                             |\n    |                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:23:61\n+  --> $DIR/ref-mut-self-async.rs:24:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ---------               ^^^^\n-   |                                     |                       |\n-   |                                     |                       ...but data from `f` is returned here\n+   |                                     ---------               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:27:61\n+  --> $DIR/ref-mut-self-async.rs:28:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                     ---------               ^^^^\n-   |                                     |                       |\n-   |                                     |                       ...but data from `f` is returned here\n+   |                                     ---------               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:31:70\n+  --> $DIR/ref-mut-self-async.rs:32:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ---------                ^^^^\n-   |                                             |                        |\n-   |                                             |                        ...but data from `f` is returned here\n+   |                                             ---------                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:35:70\n+  --> $DIR/ref-mut-self-async.rs:36:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             ---------                ^^^^\n-   |                                             |                        |\n-   |                                             |                        ...but data from `f` is returned here\n+   |                                             ---------                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "1822a9a468b0ee32b54bf38590d3536834d724b1", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -11,23 +11,23 @@ impl Struct {\n     // Test using `&mut Struct` explicitly:\n \n     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "46591bfc9580fd8478dabcdb49e23ef6190d4ac6", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -1,47 +1,52 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:13:56\n+  --> $DIR/ref-mut-struct-async.rs:14:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                               -----------              ^^^^\n-   |                               |                        |\n-   |                               |                        ...but data from `f` is returned here\n+   |                               -----------              ----\n+   |                               |\n    |                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:17:65\n+  --> $DIR/ref-mut-struct-async.rs:18:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -----------               ^^^^\n-   |                                       |                         |\n-   |                                       |                         ...but data from `f` is returned here\n+   |                                       -----------               ----\n+   |                                       |\n    |                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:21:65\n+  --> $DIR/ref-mut-struct-async.rs:22:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -----------               ^^^^\n-   |                                       |                         |\n-   |                                       |                         ...but data from `f` is returned here\n+   |                                       -----------               ----\n+   |                                       |\n    |                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:25:74\n+  --> $DIR/ref-mut-struct-async.rs:26:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -----------                ^^^^\n-   |                                               |                          |\n-   |                                               |                          ...but data from `f` is returned here\n+   |                                               -----------                ----\n+   |                                               |\n    |                                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:29:74\n+  --> $DIR/ref-mut-struct-async.rs:30:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -----------                ^^^^\n-   |                                               |                          |\n-   |                                               |                          ...but data from `f` is returned here\n+   |                                               -----------                ----\n+   |                                               |\n    |                                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9425fbfca8f084e532d4073a1d01bbe52101f715", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -19,34 +19,34 @@ impl<T, P> Deref for Wrap<T, P> {\n impl Struct {\n     // Test using `&self` sugar:\n \n-    async fn ref_self(&self, f: &u32) -> &u32 { //~ ERROR lifetime mismatch\n-        f\n+    async fn ref_self(&self, f: &u32) -> &u32 {\n+        f //~ ERROR lifetime mismatch\n     }\n \n     // Test using `&Self` explicitly:\n \n     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "c255d18936376371ef061af09c33561f95e05e50", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 35, "deletions": 28, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -1,65 +1,72 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:22:42\n+  --> $DIR/ref-self-async.rs:23:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -----              ^^^^\n-   |                       |                  |\n-   |                       |                  ...but data from `f` is returned here\n+   |                       -----              ----\n+   |                       |\n    |                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:28:48\n+  --> $DIR/ref-self-async.rs:29:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -----              ^^^^\n-   |                             |                  |\n-   |                             |                  ...but data from `f` is returned here\n+   |                             -----              ----\n+   |                             |\n    |                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:32:57\n+  --> $DIR/ref-self-async.rs:33:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ^^^^\n-   |                                     |                   |\n-   |                                     |                   ...but data from `f` is returned here\n+   |                                     -----               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:36:57\n+  --> $DIR/ref-self-async.rs:37:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -----               ^^^^\n-   |                                     |                   |\n-   |                                     |                   ...but data from `f` is returned here\n+   |                                     -----               ----\n+   |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:40:66\n+  --> $DIR/ref-self-async.rs:41:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----                ^^^^\n-   |                                             |                    |\n-   |                                             |                    ...but data from `f` is returned here\n+   |                                             -----                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:44:66\n+  --> $DIR/ref-self-async.rs:45:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                             -----                ^^^^\n-   |                                             |                    |\n-   |                                             |                    ...but data from `f` is returned here\n+   |                                             -----                ----\n+   |                                             |\n    |                                             this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:48:69\n+  --> $DIR/ref-self-async.rs:49:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-   |                                            -----                    ^^^\n-   |                                            |                        |\n-   |                                            |                        ...but data from `f` is returned here\n+   |                                            -----                    ---\n+   |                                            |\n    |                                            this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 7 previous errors\n "}, {"sha": "64c84c4cd2eb9e209a83bdc99bbcb23162042692", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -11,23 +11,23 @@ impl Struct {\n     // Test using `&Struct` explicitly:\n \n     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n \n     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-        f //~^ ERROR lifetime mismatch\n+        f //~ ERROR lifetime mismatch\n     }\n }\n "}, {"sha": "c70facc931ec152b526f244193c1ed09f92e3ad9", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dce20bf62a37cd8b22858c6f23de62cd36404fa1/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=dce20bf62a37cd8b22858c6f23de62cd36404fa1", "patch": "@@ -1,47 +1,52 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:13:52\n+  --> $DIR/ref-struct-async.rs:14:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                               -------              ^^^^\n-   |                               |                    |\n-   |                               |                    ...but data from `f` is returned here\n+   |                               -------              ----\n+   |                               |\n    |                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:17:61\n+  --> $DIR/ref-struct-async.rs:18:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                       -------               ^^^^\n-   |                                       |                     |\n-   |                                       |                     ...but data from `f` is returned here\n+   |                                       -------               ----\n+   |                                       |\n    |                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:21:61\n+  --> $DIR/ref-struct-async.rs:22:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                       -------               ^^^^\n-   |                                       |                     |\n-   |                                       |                     ...but data from `f` is returned here\n+   |                                       -------               ----\n+   |                                       |\n    |                                       this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:25:70\n+  --> $DIR/ref-struct-async.rs:26:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                               -------                ^^^^\n-   |                                               |                      |\n-   |                                               |                      ...but data from `f` is returned here\n+   |                                               -------                ----\n+   |                                               |\n    |                                               this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:29:66\n+  --> $DIR/ref-struct-async.rs:30:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                           -------                ^^^^\n-   |                                           |                      |\n-   |                                           |                      ...but data from `f` is returned here\n+   |                                           -------                ----\n+   |                                           |\n    |                                           this parameter and the return type are declared with different lifetimes...\n+LL |         f\n+   |         ^ ...but data from `f` is returned here\n \n error: aborting due to 5 previous errors\n "}]}