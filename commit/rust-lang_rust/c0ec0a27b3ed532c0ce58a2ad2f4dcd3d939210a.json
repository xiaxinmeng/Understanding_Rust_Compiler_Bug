{"sha": "c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZWMwYTI3YjNlZDUzMmMwY2U1OGEyYWQyZjRkY2QzZDkzOTIxMGE=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-03-27T21:15:02Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-03T07:33:10Z"}, "message": "Replace max/min_value() with MAX/MIN assoc consts", "tree": {"sha": "e00113ab406180461be0f7089eb7088301527b92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e00113ab406180461be0f7089eb7088301527b92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "html_url": "https://github.com/rust-lang/rust/commit/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ce03648d293975e5b208b1b03b503270b80bde", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ce03648d293975e5b208b1b03b503270b80bde", "html_url": "https://github.com/rust-lang/rust/commit/e9ce03648d293975e5b208b1b03b503270b80bde"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "2ce5bc8ed2f9db71a570c49fb114f0781308ad86", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "patch": "@@ -432,7 +432,7 @@ impl<T> [T] {\n     ///\n     /// ```should_panic\n     /// // this will panic at runtime\n-    /// b\"0123456789abcdef\".repeat(usize::max_value());\n+    /// b\"0123456789abcdef\".repeat(usize::MAX);\n     /// ```\n     #[stable(feature = \"repeat_generic_slice\", since = \"1.40.0\")]\n     pub fn repeat(&self, n: usize) -> Vec<T>"}, {"sha": "70860c09a2c31d0b031b753253265b667e391311", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "patch": "@@ -499,7 +499,7 @@ impl str {\n     ///\n     /// ```should_panic\n     /// // this will panic at runtime\n-    /// \"0123456789abcdef\".repeat(usize::max_value());\n+    /// \"0123456789abcdef\".repeat(usize::MAX);\n     /// ```\n     #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {"}, {"sha": "95411b525d0db3934f1dd40d703be0c505455f83", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "patch": "@@ -852,7 +852,7 @@ pub trait LowerHex {\n ///     }\n /// }\n ///\n-/// let l = Length(i32::max_value());\n+/// let l = Length(i32::MAX);\n ///\n /// assert_eq!(format!(\"l as hex is: {:X}\", l), \"l as hex is: 7FFFFFFF\");\n ///"}, {"sha": "4a11fb393899f26acccfe05b13f9d23f33c0394e", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "patch": "@@ -1739,19 +1739,19 @@ extern \"rust-intrinsic\" {\n     pub fn mul_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs an exact division, resulting in undefined behavior where\n-    /// `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`\n+    /// `x % y != 0` or `y == 0` or `x == T::MIN && y == -1`\n     pub fn exact_div<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs an unchecked division, resulting in undefined behavior\n-    /// where y = 0 or x = `T::min_value()` and y = -1\n+    /// where y = 0 or x = `T::MIN` and y = -1\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_div` method. For example,\n     /// [`std::u32::checked_div`](../../std/primitive.u32.html#method.checked_div)\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_div<T: Copy>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n-    /// undefined behavior where y = 0 or x = `T::min_value()` and y = -1\n+    /// undefined behavior where y = 0 or x = `T::MIN` and y = -1\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_rem` method. For example,\n@@ -1777,17 +1777,17 @@ extern \"rust-intrinsic\" {\n     pub fn unchecked_shr<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked addition, resulting in\n-    /// undefined behavior when `x + y > T::max_value()` or `x + y < T::min_value()`.\n+    /// undefined behavior when `x + y > T::MAX` or `x + y < T::MIN`.\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_add<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked subtraction, resulting in\n-    /// undefined behavior when `x - y > T::max_value()` or `x - y < T::min_value()`.\n+    /// undefined behavior when `x - y > T::MAX` or `x - y < T::MIN`.\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_sub<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked multiplication, resulting in\n-    /// undefined behavior when `x * y > T::max_value()` or `x * y < T::min_value()`.\n+    /// undefined behavior when `x * y > T::MAX` or `x * y < T::MIN`.\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_mul<T: Copy>(x: T, y: T) -> T;\n "}, {"sha": "0c9318ab8e72dff802f8623fdc521800b32a2b3f", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "patch": "@@ -198,7 +198,7 @@ pub trait Iterator {\n     /// // and the maximum possible lower bound\n     /// let iter = 0..;\n     ///\n-    /// assert_eq!((usize::max_value(), None), iter.size_hint());\n+    /// assert_eq!((usize::MAX, None), iter.size_hint());\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "52e224d2a026f218b0f86d2c734b6c1f159468ce", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "patch": "@@ -659,8 +659,8 @@ impl<T: ?Sized> *const T {\n     /// `align`.\n     ///\n     /// If it is not possible to align the pointer, the implementation returns\n-    /// `usize::max_value()`. It is permissible for the implementation to *always*\n-    /// return `usize::max_value()`. Only your algorithm's performance can depend\n+    /// `usize::MAX`. It is permissible for the implementation to *always*\n+    /// return `usize::MAX`. Only your algorithm's performance can depend\n     /// on getting a usable offset here, not its correctness.\n     ///\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be"}, {"sha": "9f85d781d698a5b7b88414b29eda74a1e10736ee", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "patch": "@@ -847,8 +847,8 @@ impl<T: ?Sized> *mut T {\n     /// `align`.\n     ///\n     /// If it is not possible to align the pointer, the implementation returns\n-    /// `usize::max_value()`. It is permissible for the implementation to *always*\n-    /// return `usize::max_value()`. Only your algorithm's performance can depend\n+    /// `usize::MAX`. It is permissible for the implementation to *always*\n+    /// return `usize::MAX`. Only your algorithm's performance can depend\n     /// on getting a usable offset here, not its correctness.\n     ///\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be"}, {"sha": "4c25363a6575fb22b366295e23b8b1b984940b19", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=c0ec0a27b3ed532c0ce58a2ad2f4dcd3d939210a", "patch": "@@ -577,7 +577,7 @@ pub struct Scalar {\n     pub value: Primitive,\n \n     /// Inclusive wrap-around range of valid values, that is, if\n-    /// start > end, it represents `start..=max_value()`,\n+    /// start > end, it represents `start..=MAX`,\n     /// followed by `0..=end`.\n     ///\n     /// That is, for an i8 primitive, a range of `254..=2` means following"}]}