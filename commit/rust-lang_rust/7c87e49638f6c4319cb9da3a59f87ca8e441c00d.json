{"sha": "7c87e49638f6c4319cb9da3a59f87ca8e441c00d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjODdlNDk2MzhmNmM0MzE5Y2I5ZGEzYTU5Zjg3Y2E4ZTQ0MWMwMGQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2021-03-31T15:50:19Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2021-03-31T15:50:19Z"}, "message": "Search for a suitable primary location", "tree": {"sha": "5f5706e0a8f3bd295d706987a3009c0d785b9b43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f5706e0a8f3bd295d706987a3009c0d785b9b43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c87e49638f6c4319cb9da3a59f87ca8e441c00d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c87e49638f6c4319cb9da3a59f87ca8e441c00d", "html_url": "https://github.com/rust-lang/rust/commit/7c87e49638f6c4319cb9da3a59f87ca8e441c00d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c87e49638f6c4319cb9da3a59f87ca8e441c00d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7723dd090913de991ea258bfd5b3f6c428591235", "url": "https://api.github.com/repos/rust-lang/rust/commits/7723dd090913de991ea258bfd5b3f6c428591235", "html_url": "https://github.com/rust-lang/rust/commit/7723dd090913de991ea258bfd5b3f6c428591235"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "89fe834f44a5ee96db0e4d494efe03d8c9dc2fac", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7c87e49638f6c4319cb9da3a59f87ca8e441c00d/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c87e49638f6c4319cb9da3a59f87ca8e441c00d/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=7c87e49638f6c4319cb9da3a59f87ca8e441c00d", "patch": "@@ -48,6 +48,22 @@ fn location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location\n     lsp_types::Location { uri, range }\n }\n \n+/// Extracts a suitable \"primary\" location from a rustc diagnostic.\n+///\n+/// This takes locations pointing into the standard library, or generally outside the current\n+/// workspace into account and tries to avoid those, in case macros are involved.\n+fn primary_location(workspace_root: &Path, span: &DiagnosticSpan) -> lsp_types::Location {\n+    let span_stack = std::iter::successors(Some(span), |span| Some(&span.expansion.as_ref()?.span));\n+    for span in span_stack {\n+        let abs_path = workspace_root.join(&span.file_name);\n+        if abs_path.starts_with(workspace_root) {\n+            return location(workspace_root, span);\n+        }\n+    }\n+\n+    location(workspace_root, span)\n+}\n+\n /// Converts a secondary Rust span to a LSP related information\n ///\n /// If the span is unlabelled this will return `None`.\n@@ -217,7 +233,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     primary_spans\n         .iter()\n         .flat_map(|primary_span| {\n-            let primary_location = location(workspace_root, &primary_span);\n+            let primary_location = primary_location(workspace_root, &primary_span);\n \n             let mut message = message.clone();\n             if needs_primary_span_label {\n@@ -235,14 +251,16 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n             // where the error originated\n             // Also, we would generate an additional diagnostic, so that exact place of macro\n             // will be highlighted in the error origin place.\n-            let macro_calls = std::iter::successors(Some(*primary_span), |span| {\n+            let span_stack = std::iter::successors(Some(*primary_span), |span| {\n                 Some(&span.expansion.as_ref()?.span)\n-            })\n-            .skip(1);\n-            for macro_span in macro_calls {\n-                let in_macro_location = location(workspace_root, &macro_span);\n+            });\n+            for span in span_stack {\n+                let secondary_location = location(workspace_root, &span);\n+                if secondary_location == primary_location {\n+                    continue;\n+                }\n                 related_info_macro_calls.push(lsp_types::DiagnosticRelatedInformation {\n-                    location: in_macro_location.clone(),\n+                    location: secondary_location.clone(),\n                     message: \"Error originated from macro call here\".to_string(),\n                 });\n                 // For the additional in-macro diagnostic we add the inverse message pointing to the error location in code.\n@@ -253,7 +271,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                     }];\n \n                 let diagnostic = lsp_types::Diagnostic {\n-                    range: in_macro_location.range,\n+                    range: secondary_location.range,\n                     // downgrade to hint if we're pointing at the macro\n                     severity: Some(lsp_types::DiagnosticSeverity::Hint),\n                     code: code.clone().map(lsp_types::NumberOrString::String),\n@@ -265,7 +283,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                     data: None,\n                 };\n                 diagnostics.push(MappedRustDiagnostic {\n-                    url: in_macro_location.uri,\n+                    url: secondary_location.uri,\n                     diagnostic,\n                     fixes: Vec::new(),\n                 });"}]}