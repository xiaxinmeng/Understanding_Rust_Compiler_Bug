{"sha": "750018e16eb34f8b37477689fbd231bb720c8aaa", "node_id": "C_kwDOAAsO6NoAKDc1MDAxOGUxNmViMzRmOGIzNzQ3NzY4OWZiZDIzMWJiNzIwYzhhYWE", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-17T22:07:41Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-26T17:22:20Z"}, "message": "Improve diagnostics for inaccessible items", "tree": {"sha": "137531f83861633fc1f59b7e2b48c72971d56fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/137531f83861633fc1f59b7e2b48c72971d56fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750018e16eb34f8b37477689fbd231bb720c8aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750018e16eb34f8b37477689fbd231bb720c8aaa", "html_url": "https://github.com/rust-lang/rust/commit/750018e16eb34f8b37477689fbd231bb720c8aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750018e16eb34f8b37477689fbd231bb720c8aaa/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65eb381dec051e31d1fb17a5a7629bdee1eb9922", "url": "https://api.github.com/repos/rust-lang/rust/commits/65eb381dec051e31d1fb17a5a7629bdee1eb9922", "html_url": "https://github.com/rust-lang/rust/commit/65eb381dec051e31d1fb17a5a7629bdee1eb9922"}], "stats": {"total": 220, "additions": 164, "deletions": 56}, "files": [{"sha": "4b36196d4669cc91afeb3bf541523c6c3c931e0c", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 64, "deletions": 17, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -949,7 +949,15 @@ impl<'a> Resolver<'a> {\n \n         let import_suggestions =\n             self.lookup_import_candidates(ident, Namespace::MacroNS, parent_scope, is_expected);\n-        show_candidates(err, None, &import_suggestions, false, true);\n+        show_candidates(\n+            &self.definitions,\n+            self.session,\n+            err,\n+            None,\n+            &import_suggestions,\n+            false,\n+            true,\n+        );\n \n         if macro_kind == MacroKind::Derive && (ident.name == sym::Send || ident.name == sym::Sync) {\n             let msg = format!(\"unsafe traits like `{}` should be implemented explicitly\", ident);\n@@ -1689,6 +1697,8 @@ fn find_span_immediately_after_crate_name(\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n crate fn show_candidates(\n+    definitions: &rustc_hir::definitions::Definitions,\n+    session: &Session,\n     err: &mut DiagnosticBuilder<'_>,\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n@@ -1700,22 +1710,22 @@ crate fn show_candidates(\n         return;\n     }\n \n-    let mut accessible_path_strings: Vec<(String, &str)> = Vec::new();\n-    let mut inaccessible_path_strings: Vec<(String, &str)> = Vec::new();\n+    let mut accessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n+    let mut inaccessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n \n     candidates.iter().for_each(|c| {\n         (if c.accessible { &mut accessible_path_strings } else { &mut inaccessible_path_strings })\n-            .push((path_names_to_string(&c.path), c.descr))\n+            .push((path_names_to_string(&c.path), c.descr, c.did))\n     });\n \n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n     for path_strings in [&mut accessible_path_strings, &mut inaccessible_path_strings] {\n-        path_strings.sort();\n+        path_strings.sort_by(|a, b| a.0.cmp(&b.0));\n         let core_path_strings =\n-            path_strings.drain_filter(|p| p.starts_with(\"core::\")).collect::<Vec<String>>();\n+            path_strings.drain_filter(|p| p.0.starts_with(\"core::\")).collect::<Vec<_>>();\n         path_strings.extend(core_path_strings);\n-        path_strings.dedup();\n+        path_strings.dedup_by(|a, b| a.0 == b.0);\n     }\n \n     if !accessible_path_strings.is_empty() {\n@@ -1755,19 +1765,56 @@ crate fn show_candidates(\n     } else {\n         assert!(!inaccessible_path_strings.is_empty());\n \n-        let (determiner, kind, verb1, verb2) = if inaccessible_path_strings.len() == 1 {\n-            (\"this\", inaccessible_path_strings[0].1, \"exists\", \"is\")\n+        if inaccessible_path_strings.len() == 1 {\n+            let (name, descr, def_id) = &inaccessible_path_strings[0];\n+            let msg = format!(\"{} `{}` exists but is inaccessible\", descr, name);\n+\n+            if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n+                let span = definitions.def_span(local_def_id);\n+                let span = session.source_map().guess_head_span(span);\n+                let mut multi_span = MultiSpan::from_span(span);\n+                multi_span.push_span_label(span, \"not accessible\".to_string());\n+                err.span_note(multi_span, &msg);\n+            } else {\n+                err.note(&msg);\n+            }\n         } else {\n-            (\"these\", \"items\", \"exist\", \"are\")\n-        };\n+            let (_, descr_first, _) = &inaccessible_path_strings[0];\n+            let descr = if inaccessible_path_strings\n+                .iter()\n+                .skip(1)\n+                .all(|(_, descr, _)| descr == descr_first)\n+            {\n+                format!(\"{}\", descr_first)\n+            } else {\n+                \"item\".to_string()\n+            };\n \n-        let mut msg = format!(\"{} {} {} but {} inaccessible:\", determiner, kind, verb1, verb2);\n+            let mut msg = format!(\"these {}s exist but are inaccessible\", descr);\n+            let mut has_colon = false;\n \n-        for candidate in inaccessible_path_strings {\n-            msg.push('\\n');\n-            msg.push_str(&candidate.0);\n-        }\n+            let mut spans = Vec::new();\n+            for (name, _, def_id) in &inaccessible_path_strings {\n+                if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n+                    let span = definitions.def_span(local_def_id);\n+                    let span = session.source_map().guess_head_span(span);\n+                    spans.push((name, span));\n+                } else {\n+                    if !has_colon {\n+                        msg.push(':');\n+                        has_colon = true;\n+                    }\n+                    msg.push('\\n');\n+                    msg.push_str(name);\n+                }\n+            }\n+\n+            let mut multi_span = MultiSpan::from_spans(spans.iter().map(|(_, sp)| *sp).collect());\n+            for (name, span) in spans {\n+                multi_span.push_span_label(span, format!(\"`{}`: not accessible\", name));\n+            }\n \n-        err.note(&msg);\n+            err.span_note(multi_span, &msg);\n+        }\n     }\n }"}, {"sha": "5ca2392a60ab27fa0f9e20f0e88759357d8f3846", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -2966,7 +2966,15 @@ impl<'a> Resolver<'a> {\n                 (None, false)\n             };\n             if !candidates.is_empty() {\n-                diagnostics::show_candidates(&mut err, span, &candidates, instead, found_use);\n+                diagnostics::show_candidates(\n+                    &self.definitions,\n+                    self.session,\n+                    &mut err,\n+                    span,\n+                    &candidates,\n+                    instead,\n+                    found_use,\n+                );\n             } else if let Some((span, msg, sugg, appl)) = suggestion {\n                 err.span_suggestion(span, msg, sugg, appl);\n             }"}, {"sha": "3b66a5e3150502600768bc6a95f71873983ef991", "filename": "src/test/ui/imports/glob-resolve1.stderr", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fglob-resolve1.stderr?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -4,17 +4,23 @@ error[E0425]: cannot find function `fpriv` in this scope\n LL |     fpriv();\n    |     ^^^^^ not found in this scope\n    |\n-   = note: this function exists but is inaccessible:\n-           bar::fpriv\n+note: function `bar::fpriv` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:7:5\n+   |\n+LL |     fn fpriv() {}\n+   |     ^^^^^^^^^^ not accessible\n \n error[E0425]: cannot find function `epriv` in this scope\n   --> $DIR/glob-resolve1.rs:27:5\n    |\n LL |     epriv();\n    |     ^^^^^ not found in this scope\n    |\n-   = note: this function exists but is inaccessible:\n-           bar::epriv\n+note: function `bar::epriv` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:9:9\n+   |\n+LL |         fn epriv();\n+   |         ^^^^^^^^^^^ not accessible\n \n error[E0423]: expected value, found enum `B`\n   --> $DIR/glob-resolve1.rs:28:5\n@@ -40,8 +46,11 @@ error[E0425]: cannot find value `C` in this scope\n LL |     C;\n    |     ^ not found in this scope\n    |\n-   = note: this unit struct exists but is inaccessible:\n-           bar::C\n+note: unit struct `bar::C` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:18:5\n+   |\n+LL |     struct C;\n+   |     ^^^^^^^^^ not accessible\n \n error[E0425]: cannot find function `import` in this scope\n   --> $DIR/glob-resolve1.rs:30:5\n@@ -63,8 +72,11 @@ LL |     pub enum B {\n LL |     foo::<A>();\n    |           ^ help: an enum with a similar name exists: `B`\n    |\n-   = note: this enum exists but is inaccessible:\n-           bar::A\n+note: enum `bar::A` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:11:5\n+   |\n+LL |     enum A {\n+   |     ^^^^^^ not accessible\n \n error[E0412]: cannot find type `C` in this scope\n   --> $DIR/glob-resolve1.rs:33:11\n@@ -75,8 +87,11 @@ LL |     pub enum B {\n LL |     foo::<C>();\n    |           ^ help: an enum with a similar name exists: `B`\n    |\n-   = note: this struct exists but is inaccessible:\n-           bar::C\n+note: struct `bar::C` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:18:5\n+   |\n+LL |     struct C;\n+   |     ^^^^^^^^^ not accessible\n \n error[E0412]: cannot find type `D` in this scope\n   --> $DIR/glob-resolve1.rs:34:11\n@@ -87,8 +102,11 @@ LL |     pub enum B {\n LL |     foo::<D>();\n    |           ^ help: an enum with a similar name exists: `B`\n    |\n-   = note: this type alias exists but is inaccessible:\n-           bar::D\n+note: type alias `bar::D` exists but is inaccessible\n+  --> $DIR/glob-resolve1.rs:20:5\n+   |\n+LL |     type D = isize;\n+   |     ^^^^^^^^^^^^^^^ not accessible\n \n error: aborting due to 8 previous errors\n "}, {"sha": "4c94634ee60f7d459959efe76f13adcfbfe5042c", "filename": "src/test/ui/imports/issue-4366-2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fimports%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fimports%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-4366-2.stderr?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -4,8 +4,11 @@ error[E0412]: cannot find type `Bar` in this scope\n LL |         fn sub() -> Bar { 1 }\n    |                     ^^^ not found in this scope\n    |\n-   = note: this type alias exists but is inaccessible:\n-           a::b::Bar\n+note: type alias `a::b::Bar` exists but is inaccessible\n+  --> $DIR/issue-4366-2.rs:11:9\n+   |\n+LL |         type Bar = isize;\n+   |         ^^^^^^^^^^^^^^^^^ not accessible\n \n error[E0423]: expected function, found module `foo`\n   --> $DIR/issue-4366-2.rs:25:5"}, {"sha": "cad3ccc4a0ef836883eaa23f32a77506ab70f843", "filename": "src/test/ui/resolve/issue-42944.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-42944.stderr?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -16,8 +16,11 @@ error[E0425]: cannot find function, tuple struct or tuple variant `Bx` in this s\n LL |         Bx(());\n    |         ^^ not found in this scope\n    |\n-   = note: this tuple struct exists but is inaccessible:\n-           foo::Bx\n+note: tuple struct `foo::Bx` exists but is inaccessible\n+  --> $DIR/issue-42944.rs:2:5\n+   |\n+LL |     pub struct Bx(());\n+   |     ^^^^^^^^^^^^^^^^^^ not accessible\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6bf7caeddbfcd97b3e4d7691c1bb877c384335d4", "filename": "src/test/ui/resolve/issue-88472.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.rs?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -6,6 +6,8 @@\n \n mod a {\n     struct Foo;\n+    //~^ NOTE: struct `a::Foo` exists but is inaccessible\n+    //~| NOTE: not accessible\n }\n \n mod b {\n@@ -14,22 +16,23 @@ mod b {\n     type Bar = Foo;\n     //~^ ERROR: cannot find type `Foo` in this scope [E0412]\n     //~| NOTE: not found in this scope\n-    //~| NOTE: this struct exists but is inaccessible\n }\n \n mod c {\n     enum Eee {}\n+    //~^ NOTE: these enums exist but are inaccessible\n+    //~| NOTE: `c::Eee`: not accessible\n \n     mod d {\n         enum Eee {}\n+        //~^ NOTE: `c::d::Eee`: not accessible\n     }\n }\n \n mod e {\n     type Baz = Eee;\n     //~^ ERROR: cannot find type `Eee` in this scope [E0412]\n     //~| NOTE: not found in this scope\n-    //~| NOTE: these items exist but are inaccessible\n }\n \n fn main() {}"}, {"sha": "8431fc97766f7a15311d87abe047c0f4045e4bd6", "filename": "src/test/ui/resolve/issue-88472.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-88472.stderr?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -1,24 +1,32 @@\n error[E0412]: cannot find type `Foo` in this scope\n-  --> $DIR/issue-88472.rs:14:16\n+  --> $DIR/issue-88472.rs:16:16\n    |\n LL |     type Bar = Foo;\n    |                ^^^ not found in this scope\n    |\n-   = note: this struct exists but is inaccessible:\n-           a::Foo\n+note: struct `a::Foo` exists but is inaccessible\n+  --> $DIR/issue-88472.rs:8:5\n+   |\n+LL |     struct Foo;\n+   |     ^^^^^^^^^^^ not accessible\n \n error[E0412]: cannot find type `Eee` in this scope\n-  --> $DIR/issue-88472.rs:29:16\n+  --> $DIR/issue-88472.rs:33:16\n    |\n LL |     type Baz = Eee;\n    |                ^^^ not found in this scope\n    |\n-   = note: these items exist but are inaccessible:\n-           c::Eee\n-           c::d::Eee\n+note: these enums exist but are inaccessible\n+  --> $DIR/issue-88472.rs:22:5\n+   |\n+LL |     enum Eee {}\n+   |     ^^^^^^^^ `c::Eee`: not accessible\n+...\n+LL |         enum Eee {}\n+   |         ^^^^^^^^ `c::d::Eee`: not accessible\n \n warning: unused import: `crate::a::*`\n-  --> $DIR/issue-88472.rs:12:9\n+  --> $DIR/issue-88472.rs:14:9\n    |\n LL |     use crate::a::*;\n    |         ^^^^^^^^^^^"}, {"sha": "ff72b0b563ab176fc361e0b13a117f173fe00f8f", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -171,8 +171,11 @@ LL |     pub enum E {\n LL |     let _: Z = m::n::Z;\n    |            ^ help: an enum with a similar name exists: `E`\n    |\n-   = note: this enum exists but is inaccessible:\n-           m::Z\n+note: enum `m::Z` exists but is inaccessible\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n+   |\n+LL |         pub(in m) enum Z {\n+   |         ^^^^^^^^^^^^^^^^ not accessible\n \n error[E0423]: expected value, found enum `m::n::Z`\n   --> $DIR/privacy-enum-ctor.rs:57:16\n@@ -211,8 +214,11 @@ LL |     pub enum E {\n LL |     let _: Z = m::n::Z::Fn;\n    |            ^ help: an enum with a similar name exists: `E`\n    |\n-   = note: this enum exists but is inaccessible:\n-           m::Z\n+note: enum `m::Z` exists but is inaccessible\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n+   |\n+LL |         pub(in m) enum Z {\n+   |         ^^^^^^^^^^^^^^^^ not accessible\n \n error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:64:12\n@@ -223,8 +229,11 @@ LL |     pub enum E {\n LL |     let _: Z = m::n::Z::Struct;\n    |            ^ help: an enum with a similar name exists: `E`\n    |\n-   = note: this enum exists but is inaccessible:\n-           m::Z\n+note: enum `m::Z` exists but is inaccessible\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n+   |\n+LL |         pub(in m) enum Z {\n+   |         ^^^^^^^^^^^^^^^^ not accessible\n \n error[E0423]: expected value, found struct variant `m::n::Z::Struct`\n   --> $DIR/privacy-enum-ctor.rs:64:16\n@@ -246,8 +255,11 @@ LL |     pub enum E {\n LL |     let _: Z = m::n::Z::Unit {};\n    |            ^ help: an enum with a similar name exists: `E`\n    |\n-   = note: this enum exists but is inaccessible:\n-           m::Z\n+note: enum `m::Z` exists but is inaccessible\n+  --> $DIR/privacy-enum-ctor.rs:11:9\n+   |\n+LL |         pub(in m) enum Z {\n+   |         ^^^^^^^^^^^^^^^^ not accessible\n \n error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:57:22"}, {"sha": "ada053014ef5eb38e064fcf7c2c7c54ab94d6d09", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -33,8 +33,11 @@ error[E0423]: expected value, found struct `xcrate::S`\n LL |     xcrate::S;\n    |     ^^^^^^^^^ constructor is not visible here due to private fields\n    |\n-   = note: this tuple struct exists but is inaccessible:\n-           m::S\n+note: tuple struct `m::S` exists but is inaccessible\n+  --> $DIR/privacy-struct-ctor.rs:6:5\n+   |\n+LL |     pub struct S(u8);\n+   |     ^^^^^^^^^^^^^^^^^ not accessible\n \n error[E0603]: tuple struct constructor `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:18:12"}, {"sha": "aca08d81163fd7428a4b590705222f26b27fd500", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750018e16eb34f8b37477689fbd231bb720c8aaa/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=750018e16eb34f8b37477689fbd231bb720c8aaa", "patch": "@@ -66,8 +66,11 @@ error[E0531]: cannot find unit struct, unit variant or constant `Self` in this s\n LL |         mut Self => (),\n    |             ^^^^ not found in this scope\n    |\n-   = note: this unit struct exists but is inaccessible:\n-           foo::Self\n+note: unit struct `foo::Self` exists but is inaccessible\n+  --> $DIR/self_type_keyword.rs:2:3\n+   |\n+LL |   struct Self;\n+   |   ^^^^^^^^^^^^ not accessible\n \n error[E0392]: parameter `'Self` is never used\n   --> $DIR/self_type_keyword.rs:6:12"}]}