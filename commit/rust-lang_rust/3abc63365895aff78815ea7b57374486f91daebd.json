{"sha": "3abc63365895aff78815ea7b57374486f91daebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYmM2MzM2NTg5NWFmZjc4ODE1ZWE3YjU3Mzc0NDg2ZjkxZGFlYmQ=", "commit": {"author": {"name": "Carl-Anton Ingmarsson", "email": "mail@carlanton.se", "date": "2014-01-01T18:00:22Z"}, "committer": {"name": "Carl-Anton Ingmarsson", "email": "mail@carlanton.se", "date": "2014-01-01T21:27:42Z"}, "message": "Add byteswap intrinsics for converting from big/little to host endian\n\nThese are similar to the ntoh[s|l] functions in C and have the style of\nfrom_[be|le][16|32|64].", "tree": {"sha": "a800559354772544113405a507885e45e890caf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a800559354772544113405a507885e45e890caf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3abc63365895aff78815ea7b57374486f91daebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3abc63365895aff78815ea7b57374486f91daebd", "html_url": "https://github.com/rust-lang/rust/commit/3abc63365895aff78815ea7b57374486f91daebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3abc63365895aff78815ea7b57374486f91daebd/comments", "author": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c34ef5d7e4f44f8e65600a2c3866f5861c401ea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34ef5d7e4f44f8e65600a2c3866f5861c401ea1", "html_url": "https://github.com/rust-lang/rust/commit/c34ef5d7e4f44f8e65600a2c3866f5861c401ea1"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "e0089b599c5b68f77ed787a5dff3f5aa14b48193", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3abc63365895aff78815ea7b57374486f91daebd/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abc63365895aff78815ea7b57374486f91daebd/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=3abc63365895aff78815ea7b57374486f91daebd", "patch": "@@ -500,6 +500,19 @@ extern \"rust-intrinsic\" {\n #[cfg(target_endian = \"little\")] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n #[cfg(target_endian = \"big\")]    pub fn to_be64(x: i64) -> i64 { x }\n \n+#[cfg(target_endian = \"little\")] pub fn from_le16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"big\")]    pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"little\")] pub fn from_le32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"big\")]    pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"little\")] pub fn from_le64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"big\")]    pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+#[cfg(target_endian = \"little\")] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"big\")]    pub fn from_be16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"little\")] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"big\")]    pub fn from_be32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"little\")] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+#[cfg(target_endian = \"big\")]    pub fn from_be64(x: i64) -> i64 { x }\n \n /// `TypeId` represents a globally unique identifier for a type\n #[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and"}]}