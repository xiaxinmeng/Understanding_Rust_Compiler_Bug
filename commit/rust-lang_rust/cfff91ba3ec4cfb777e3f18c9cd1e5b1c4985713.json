{"sha": "cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZmY5MWJhM2VjNGNmYjc3N2UzZjE4YzljZDFlNWIxYzQ5ODU3MTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-03T01:35:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-05T21:23:34Z"}, "message": "write_bytes intrinsic: if the write count is 0, the pointer does not have to be valid", "tree": {"sha": "de4c40646b9e39a383b973a2bf9d10b2e8ea3362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de4c40646b9e39a383b973a2bf9d10b2e8ea3362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713", "html_url": "https://github.com/rust-lang/rust/commit/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "716653fd761de2fe1fd8f0f4db1b89d2b4e84ec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/716653fd761de2fe1fd8f0f4db1b89d2b4e84ec9", "html_url": "https://github.com/rust-lang/rust/commit/716653fd761de2fe1fd8f0f4db1b89d2b4e84ec9"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "15bab4aacbfa24ed9f6cf6743d4502d817168873", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713", "patch": "@@ -414,8 +414,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let size = self.type_size(ty)?.expect(\"write_bytes() type must be sized\");\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;\n                 let count = self.value_to_primval(arg_vals[2], usize)?.to_u64()?;\n-                self.memory.check_align(ptr, ty_align, size * count)?;\n-                self.memory.write_repeat(ptr, val_byte, size * count)?;\n+                if count > 0 {\n+                    self.memory.check_align(ptr, ty_align, size * count)?;\n+                    self.memory.write_repeat(ptr, val_byte, size * count)?;\n+                }\n             }\n \n             name => return Err(EvalError::Unimplemented(format!(\"unimplemented intrinsic: {}\", name))),"}, {"sha": "49570c7ba5b76ad6dd0896e650815a213c3eb57f", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713", "patch": "@@ -742,6 +742,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 if key_size.bits() < 128 && key >= (1u128 << key_size.bits() as u128) {\n                     return Err(EvalError::OutOfTls);\n                 }\n+                // TODO: Does this need checking for alignment?\n                 self.memory.write_uint(key_ptr, key, key_size.bytes())?;\n \n                 // Return success (0)"}, {"sha": "775dee252f6258ed409dbc046dde57b2a3055997", "filename": "tests/run-pass/hashmap.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713/tests%2Frun-pass%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713/tests%2Frun-pass%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhashmap.rs?ref=cfff91ba3ec4cfb777e3f18c9cd1e5b1c4985713", "patch": "@@ -0,0 +1,19 @@\n+use std::collections::{self, HashMap};\n+use std::hash::BuildHasherDefault;\n+\n+// This disables the test completely:\n+// ignore-stage1\n+// TODO: The tests actually passes against rustc and miri with MIR-libstd, but right now, we cannot express that in the test flags\n+\n+fn main() {\n+    let map : HashMap<String, i32, BuildHasherDefault<collections::hash_map::DefaultHasher>> = Default::default();\n+    assert_eq!(map.values().fold(0, |x, y| x+y), 0);\n+\n+    // TODO: This performs bit operations on the least significant bit of a pointer\n+//     for i in 0..33 {\n+//         map.insert(format!(\"key_{}\", i), i);\n+//         assert_eq!(map.values().fold(0, |x, y| x+y), i*(i+1)/2);\n+//     }\n+\n+    // TODO: Test Entry API\n+}"}]}