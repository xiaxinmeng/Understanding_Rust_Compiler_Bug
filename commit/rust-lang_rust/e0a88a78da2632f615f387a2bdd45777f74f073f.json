{"sha": "e0a88a78da2632f615f387a2bdd45777f74f073f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYTg4YTc4ZGEyNjMyZjYxNWYzODdhMmJkZDQ1Nzc3Zjc0ZjA3M2Y=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T03:43:43Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:43:24Z"}, "message": "liblog: use `#[deriving(Copy)]`", "tree": {"sha": "d547119f10f8d49e0a7490f9a03eeb2aeaa3e1d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d547119f10f8d49e0a7490f9a03eeb2aeaa3e1d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0a88a78da2632f615f387a2bdd45777f74f073f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a88a78da2632f615f387a2bdd45777f74f073f", "html_url": "https://github.com/rust-lang/rust/commit/e0a88a78da2632f615f387a2bdd45777f74f073f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0a88a78da2632f615f387a2bdd45777f74f073f/comments", "author": null, "committer": null, "parents": [{"sha": "c407785ac0b535dc98e9bf2d9c595111cfff31cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c407785ac0b535dc98e9bf2d9c595111cfff31cc", "html_url": "https://github.com/rust-lang/rust/commit/c407785ac0b535dc98e9bf2d9c595111cfff31cc"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "2bf9af9027182585e4736ad53834966121dc055d", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0a88a78da2632f615f387a2bdd45777f74f073f/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0a88a78da2632f615f387a2bdd45777f74f073f/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=e0a88a78da2632f615f387a2bdd45777f74f073f", "patch": "@@ -232,11 +232,9 @@ struct DefaultLogger {\n }\n \n /// Wraps the log level with fmt implementations.\n-#[deriving(PartialEq, PartialOrd)]\n+#[deriving(Copy, PartialEq, PartialOrd)]\n pub struct LogLevel(pub u32);\n \n-impl Copy for LogLevel {}\n-\n impl fmt::Show for LogLevel {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let LogLevel(level) = *self;\n@@ -341,14 +339,13 @@ pub struct LogRecord<'a> {\n }\n \n #[doc(hidden)]\n+#[deriving(Copy)]\n pub struct LogLocation {\n     pub module_path: &'static str,\n     pub file: &'static str,\n     pub line: uint,\n }\n \n-impl Copy for LogLocation {}\n-\n /// Tests whether a given module's name is enabled for a particular level of\n /// logging. This is the second layer of defense about determining whether a\n /// module's log statement should be emitted or not."}]}