{"sha": "2c87920f5274ad2df2071ba295e533d606780cf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjODc5MjBmNTI3NGFkMmRmMjA3MWJhMjk1ZTUzM2Q2MDY3ODBjZjY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-08T02:49:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-03-08T14:54:41Z"}, "message": "test: Removing dvec uses", "tree": {"sha": "1f12eb8abed67a0e7b15ff4507e7b97db2f303b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f12eb8abed67a0e7b15ff4507e7b97db2f303b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c87920f5274ad2df2071ba295e533d606780cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c87920f5274ad2df2071ba295e533d606780cf6", "html_url": "https://github.com/rust-lang/rust/commit/2c87920f5274ad2df2071ba295e533d606780cf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c87920f5274ad2df2071ba295e533d606780cf6/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f99a02ddb3ff30388ae1dd5db06e332c215fea2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f99a02ddb3ff30388ae1dd5db06e332c215fea2", "html_url": "https://github.com/rust-lang/rust/commit/7f99a02ddb3ff30388ae1dd5db06e332c215fea2"}], "stats": {"total": 151, "additions": 9, "deletions": 142}, "files": [{"sha": "6f0bfbb197facfeb46d54542c133f072f62bdd79", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=2c87920f5274ad2df2071ba295e533d606780cf6", "patch": "@@ -25,7 +25,6 @@ use middle::{ty, typeck, moves};\n use middle;\n use util::ppaux::ty_to_str;\n \n-use core::{io, option, vec};\n use std::ebml::reader;\n use std::ebml;\n use std::serialize;\n@@ -1210,6 +1209,7 @@ fn mk_ctxt() -> fake_ext_ctxt {\n \n #[cfg(test)]\n fn roundtrip(in_item: Option<@ast::item>) {\n+    use core::io;\n     use std::prettyprint;\n \n     let in_item = in_item.get();"}, {"sha": "ab9dc29441a96914315c83aabd04e5b926ce3c2b", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=2c87920f5274ad2df2071ba295e533d606780cf6", "patch": "@@ -10,11 +10,9 @@\n \n #[legacy_modes];\n \n-use core::dvec::DVec;\n-\n pub struct Entry<A,B> {key: A, value: B}\n \n-pub struct alist<A,B> { eq_fn: @fn(A,A) -> bool, data: DVec<Entry<A,B>> }\n+pub struct alist<A,B> { eq_fn: @fn(A,A) -> bool, data: @mut ~[Entry<A,B>] }\n \n pub fn alist_add<A:Copy,B:Copy>(lst: alist<A,B>, k: A, v: B) {\n     lst.data.push(Entry{key:k, value:v});\n@@ -31,12 +29,12 @@ pub fn alist_get<A:Copy,B:Copy>(lst: alist<A,B>, k: A) -> B {\n #[inline]\n pub fn new_int_alist<B:Copy>() -> alist<int, B> {\n     fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n-    return alist {eq_fn: eq_int, data: DVec()};\n+    return alist {eq_fn: eq_int, data: @mut ~[]};\n }\n \n #[inline]\n pub fn new_int_alist_2<B:Copy>() -> alist<int, B> {\n     #[inline]\n     fn eq_int(&&a: int, &&b: int) -> bool { a == b }\n-    return alist {eq_fn: eq_int, data: DVec()};\n+    return alist {eq_fn: eq_int, data: @mut ~[]};\n }"}, {"sha": "f7788c7d57aeb17e5958c866e21b780c07d8c28f", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=2c87920f5274ad2df2071ba295e533d606780cf6", "patch": "@@ -13,10 +13,9 @@\n \n extern mod std;\n \n-use core::dvec::*;\n use std::oldmap::HashMap;\n \n-pub type header_map = HashMap<~str, @DVec<@~str>>;\n+pub type header_map = HashMap<~str, @mut ~[@~str]>;\n \n // the unused ty param is necessary so this gets monomorphized\n pub fn request<T:Copy>(req: header_map) {"}, {"sha": "4117add8926a0cda2058a8babc0917fe4c91d148", "filename": "src/test/bench/core-vec-append.rs", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7f99a02ddb3ff30388ae1dd5db06e332c215fea2/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f99a02ddb3ff30388ae1dd5db06e332c215fea2/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=7f99a02ddb3ff30388ae1dd5db06e332c215fea2", "patch": "@@ -1,76 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// A raw test of vector appending performance.\n-\n-extern mod std;\n-use core::dvec::DVec;\n-use core::io::WriterUtil;\n-\n-fn collect_raw(num: uint) -> ~[uint] {\n-    let mut result = ~[];\n-    for uint::range(0u, num) |i| {\n-        result.push(i);\n-    }\n-    return result;\n-}\n-\n-fn collect_dvec(num: uint) -> ~[uint] {\n-    let result = DVec();\n-    for uint::range(0u, num) |i| {\n-        result.push(i);\n-    }\n-    return dvec::unwrap(result);\n-}\n-\n-fn main() {\n-    let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n-        ~[~\"\", ~\"50000000\"]\n-    } else if args.len() <= 1u {\n-        ~[~\"\", ~\"100000\"]\n-    } else {\n-        args\n-    };\n-    let max = uint::from_str(args[1]).get();\n-    let start = std::time::precise_time_s();\n-    let raw_v = collect_raw(max);\n-    let mid = std::time::precise_time_s();\n-    let dvec_v = collect_dvec(max);\n-    let end = std::time::precise_time_s();\n-\n-    // check each vector\n-    fail_unless!(raw_v.len() == max);\n-    for raw_v.eachi |i, v| { fail_unless!(i == *v); }\n-    fail_unless!(dvec_v.len() == max);\n-    for dvec_v.eachi |i, v| { fail_unless!(i == *v); }\n-\n-    let raw = mid - start;\n-    let dvec = end - mid;\n-\n-    let maxf = max as float;\n-    let rawf = raw as float;\n-    let dvecf = dvec as float;\n-    \n-    io::stdout().write_str(fmt!(\"Raw     : %? seconds\\n\", raw));\n-    io::stdout().write_str(fmt!(\"        : %f op/sec\\n\", maxf/rawf));\n-    io::stdout().write_str(fmt!(\"\\n\"));\n-    io::stdout().write_str(fmt!(\"Dvec    : %? seconds\\n\", dvec));\n-    io::stdout().write_str(fmt!(\"        : %f op/sec\\n\", maxf/dvecf));\n-    io::stdout().write_str(fmt!(\"\\n\"));\n-    \n-    if dvec < raw {\n-        io::stdout().write_str(fmt!(\"Dvec is %f%% faster than raw\\n\",\n-                                    (rawf - dvecf) / rawf * 100.0));\n-    } else {\n-        io::stdout().write_str(fmt!(\"Raw is %f%% faster than dvec\\n\",\n-                                    (dvecf - rawf) / dvecf * 100.0));\n-    }\n-}"}, {"sha": "5f26adfcdc770d5c2b12d15d6bfe2b01b0d4eae5", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=2c87920f5274ad2df2071ba295e533d606780cf6", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::dvec::DVec;\n-\n struct parser {\n-    tokens: DVec<int>,\n+    tokens: ~[int],\n }\n \n trait parse {\n@@ -20,7 +18,7 @@ trait parse {\n \n impl parse for parser {\n     fn parse() -> ~[int] {\n-        ::core::dvec::unwrap(self.tokens) //~ ERROR moving out of immutable field\n+        self.tokens //~ ERROR moving out of immutable field\n     }\n }\n "}, {"sha": "cbfae48302bfff4a69b23551cdfb67305771c8ed", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=2c87920f5274ad2df2071ba295e533d606780cf6", "patch": "@@ -11,7 +11,7 @@\n fn foo() -> int { 22 }\n \n pub fn main() {\n-    let x = dvec::DVec::<@fn() -> int>();\n+    let x: ~[@fn() -> int] = ~[];\n     x.push(foo);\n     fail_unless!((x[0])() == 22);\n }"}, {"sha": "e061464c7b2b68f7efe9cde0c1c2f696ad5f9422", "filename": "src/test/run-pass/dvec-index-op.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f99a02ddb3ff30388ae1dd5db06e332c215fea2/src%2Ftest%2Frun-pass%2Fdvec-index-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f99a02ddb3ff30388ae1dd5db06e332c215fea2/src%2Ftest%2Frun-pass%2Fdvec-index-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-index-op.rs?ref=7f99a02ddb3ff30388ae1dd5db06e332c215fea2", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn main() {\n-    let x = dvec::DVec();\n-    x.push(1);\n-    io::println(fmt!(\"%d\", x[0]));\n-}\n-"}, {"sha": "dff37af9a593663aed6691adaff7c816437c294e", "filename": "src/test/run-pass/dvec-test.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7f99a02ddb3ff30388ae1dd5db06e332c215fea2/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f99a02ddb3ff30388ae1dd5db06e332c215fea2/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-test.rs?ref=7f99a02ddb3ff30388ae1dd5db06e332c215fea2", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn main() {\n-    let d = dvec::DVec();\n-    d.push(3);\n-    d.push(4);\n-    fail_unless!(d.get() == ~[3, 4]);\n-    d.set(~[5]);\n-    d.push(6);\n-    d.push(7);\n-    d.push(8);\n-    d.push(9);\n-    d.push(10);\n-    d.push_all(~[11, 12, 13]);\n-    d.push_slice(~[11, 12, 13], 1u, 2u);\n-\n-    let exp = ~[5, 6, 7, 8, 9, 10, 11, 12, 13, 12];\n-    fail_unless!(d.get() == exp);\n-    fail_unless!(d.get() == exp);\n-    fail_unless!(d.len() == exp.len());\n-\n-    for d.eachi |i, e| {\n-        fail_unless!(*e == exp[i]);\n-    }\n-\n-    let v = dvec::unwrap(d);\n-    fail_unless!(v == exp);\n-}"}, {"sha": "66383253f7cb403081434fa6cd79fc512835fbf9", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c87920f5274ad2df2071ba295e533d606780cf6/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=2c87920f5274ad2df2071ba295e533d606780cf6", "patch": "@@ -21,6 +21,6 @@ use std::oldmap::HashMap;\n pub fn main() {\n   let v = ~[@~\"hi\"];\n   let m: req::header_map = HashMap();\n-  m.insert(~\"METHOD\", @dvec::from_vec(v));\n+  m.insert(~\"METHOD\", @mut ~[v]);\n   request::<int>(m);\n }"}]}