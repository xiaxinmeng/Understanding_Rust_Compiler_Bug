{"sha": "cdbccf50a7746a07c44a404c270f188f64c5abf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYmNjZjUwYTc3NDZhMDdjNDRhNDA0YzI3MGYxODhmNjRjNWFiZjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-21T00:52:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-21T00:52:52Z"}, "message": "Point at coercion source on type errors for fn returning `impl Trait`", "tree": {"sha": "a126c7fd7b5bb65c30df5cf574c9c0f6363e0ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a126c7fd7b5bb65c30df5cf574c9c0f6363e0ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdbccf50a7746a07c44a404c270f188f64c5abf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbccf50a7746a07c44a404c270f188f64c5abf2", "html_url": "https://github.com/rust-lang/rust/commit/cdbccf50a7746a07c44a404c270f188f64c5abf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdbccf50a7746a07c44a404c270f188f64c5abf2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f643fc5f7f9de0896680ec41fc64087311bead", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f643fc5f7f9de0896680ec41fc64087311bead", "html_url": "https://github.com/rust-lang/rust/commit/59f643fc5f7f9de0896680ec41fc64087311bead"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "c7adf2982272cfbf76ca6e0ba89b6f3f7559986c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cdbccf50a7746a07c44a404c270f188f64c5abf2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbccf50a7746a07c44a404c270f188f64c5abf2/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=cdbccf50a7746a07c44a404c270f188f64c5abf2", "patch": "@@ -1183,6 +1183,11 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                     (self.final_ty.unwrap_or(self.expected_ty), expression_ty)\n                 };\n \n+                let reason_label = if label_expression_as_expected {\n+                    \"found because of this statement\"\n+                } else {\n+                    \"expected because of this statement\"\n+                };\n                 let mut db;\n                 match cause.code {\n                     ObligationCauseCode::ReturnNoExpression => {\n@@ -1207,9 +1212,19 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                             cause.span,\n                             blk_id,\n                         );\n+                        if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n+                            if !sp.overlaps(cause.span) {\n+                                db.span_label(*sp, reason_label);\n+                            }\n+                        }\n                     }\n                     _ => {\n                         db = fcx.report_mismatched_types(cause, expected, found, err);\n+                        if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n+                            if !sp.overlaps(cause.span) {\n+                                db.span_label(*sp, reason_label);\n+                            }\n+                        }\n                     }\n                 }\n "}, {"sha": "50cf5ef1655fa6f226ce5588e858c49619c15f78", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdbccf50a7746a07c44a404c270f188f64c5abf2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbccf50a7746a07c44a404c270f188f64c5abf2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cdbccf50a7746a07c44a404c270f188f64c5abf2", "patch": "@@ -535,6 +535,7 @@ pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     err_count_on_creation: usize,\n \n     ret_coercion: Option<RefCell<DynamicCoerceMany<'gcx, 'tcx>>>,\n+    ret_coercion_span: RefCell<Option<Span>>,\n \n     yield_ty: Option<Ty<'tcx>>,\n \n@@ -1984,6 +1985,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             param_env,\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,\n+            ret_coercion_span: RefCell::new(None),\n             yield_ty: None,\n             ps: RefCell::new(UnsafetyState::function(hir::Unsafety::Normal,\n                                                      ast::CRATE_NODE_ID)),\n@@ -4099,9 +4101,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     struct_span_err!(self.tcx.sess, expr.span, E0572,\n                                      \"return statement outside of function body\").emit();\n                 } else if let Some(ref e) = *expr_opt {\n+                    *self.ret_coercion_span.borrow_mut() = Some(e.span);\n                     self.check_return_expr(e);\n                 } else {\n                     let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();\n+                    *self.ret_coercion_span.borrow_mut() = Some(expr.span);\n                     let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);\n                     if let Some((fn_decl, _)) = self.get_fn_decl(expr.id) {\n                         coercion.coerce_forced_unit("}, {"sha": "514dea7fb1704483e5a91b6e625fc27f27ef20a4", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cdbccf50a7746a07c44a404c270f188f64c5abf2/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbccf50a7746a07c44a404c270f188f64c5abf2/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=cdbccf50a7746a07c44a404c270f188f64c5abf2", "patch": "@@ -331,6 +331,13 @@ impl Span {\n         span.lo <= other.lo && other.hi <= span.hi\n     }\n \n+    /// Return `true` if `self` touches `other`.\n+    pub fn overlaps(self, other: Span) -> bool {\n+        let span = self.data();\n+        let other = other.data();\n+        span.lo < other.hi && other.lo < span.hi\n+    }\n+\n     /// Return true if the spans are equal with regards to the source text.\n     ///\n     /// Use this instead of `==` when either span could be generated code,"}, {"sha": "f1d2071bbdb9ea2ead06a23d90683a9ff48739bf", "filename": "src/test/ui/impl-trait/equality.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdbccf50a7746a07c44a404c270f188f64c5abf2/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cdbccf50a7746a07c44a404c270f188f64c5abf2/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequality.stderr?ref=cdbccf50a7746a07c44a404c270f188f64c5abf2", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/equality.rs:25:5\n    |\n+LL |         return 1_i32;\n+   |                ----- expected because of this statement\n+LL |     }\n LL |     0_u32\n    |     ^^^^^ expected i32, found u32\n    |"}]}