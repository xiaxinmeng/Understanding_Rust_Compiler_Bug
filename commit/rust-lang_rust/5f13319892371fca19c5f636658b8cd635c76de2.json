{"sha": "5f13319892371fca19c5f636658b8cd635c76de2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMTMzMTk4OTIzNzFmY2ExOWM1ZjYzNjY1OGI4Y2Q2MzVjNzZkZTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-23T17:05:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-23T17:05:14Z"}, "message": "Merge #8176\n\n8176: Cleanup r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "06aa804e86daadf0c0a9275dc72c6034932c653d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06aa804e86daadf0c0a9275dc72c6034932c653d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f13319892371fca19c5f636658b8cd635c76de2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWh/KCRBK7hj4Ov3rIwAAdHIIAF3+m0urY/FikXPz+otuiQ+O\naQi4P0EbccbKvcK6Vn1978PtWCxUj50oYx0GvRFaKPxpKRzd3IGYlYP4JcYEvgVT\njMLDMN/Ze4ajXlacwIL2p0lr1QK74rZPThZJnt5a9KHpCMiyOpNT/pSnLWMrfpMx\nfGl262CAzunz5qIS5Ek/q9k3GjHsBxmMaw/JNUClpSWEynwMAdN0Gtjba+yEXZyP\n721srf00TiAF5CGnBRHTJ+qcZhxjk6t9U+Aed2WK4lQ2/Ea+BqspaG7016XInfr3\nyyQ73tSDc1ocy3c366iHnubpW5rTjp8orEAbhqDYx9ByXLydKGKSQQ0a0oZ5jK0=\n=bbAj\n-----END PGP SIGNATURE-----\n", "payload": "tree 06aa804e86daadf0c0a9275dc72c6034932c653d\nparent 789f7aca2e768b55437c00d94b76d51f30bc7b17\nparent 8b4240e02607b3c788d68d5da72cf65364aee24c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616519114 +0000\ncommitter GitHub <noreply@github.com> 1616519114 +0000\n\nMerge #8176\n\n8176: Cleanup r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f13319892371fca19c5f636658b8cd635c76de2", "html_url": "https://github.com/rust-lang/rust/commit/5f13319892371fca19c5f636658b8cd635c76de2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f13319892371fca19c5f636658b8cd635c76de2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "789f7aca2e768b55437c00d94b76d51f30bc7b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/789f7aca2e768b55437c00d94b76d51f30bc7b17", "html_url": "https://github.com/rust-lang/rust/commit/789f7aca2e768b55437c00d94b76d51f30bc7b17"}, {"sha": "8b4240e02607b3c788d68d5da72cf65364aee24c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4240e02607b3c788d68d5da72cf65364aee24c", "html_url": "https://github.com/rust-lang/rust/commit/8b4240e02607b3c788d68d5da72cf65364aee24c"}], "stats": {"total": 112, "additions": 45, "deletions": 67}, "files": [{"sha": "383ca6c473fc18019695535a9f0e567b889b9af1", "filename": "crates/ide_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 45, "deletions": 67, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/5f13319892371fca19c5f636658b8cd635c76de2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f13319892371fca19c5f636658b8cd635c76de2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=5f13319892371fca19c5f636658b8cd635c76de2", "patch": "@@ -1,9 +1,6 @@\n-use itertools::Itertools;\n use rustc_hash::FxHashMap;\n \n-use hir::{Adt, ModuleDef, PathResolution, Semantics, Struct};\n-use ide_db::RootDatabase;\n-use syntax::{algo, ast, match_ast, AstNode, SyntaxKind, SyntaxKind::*, SyntaxNode};\n+use syntax::{algo, ast, match_ast, AstNode, SyntaxKind::*, SyntaxNode};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -23,26 +20,39 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n //\n pub(crate) fn reorder_fields(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    reorder::<ast::RecordExpr>(acc, ctx).or_else(|| reorder::<ast::RecordPat>(acc, ctx))\n-}\n+    let record = ctx\n+        .find_node_at_offset::<ast::RecordExpr>()\n+        .map(|it| it.syntax().clone())\n+        .or_else(|| ctx.find_node_at_offset::<ast::RecordPat>().map(|it| it.syntax().clone()))?;\n \n-fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let record = ctx.find_node_at_offset::<R>()?;\n-    let path = record.syntax().children().find_map(ast::Path::cast)?;\n+    let path = record.children().find_map(ast::Path::cast)?;\n \n     let ranks = compute_fields_ranks(&path, &ctx)?;\n \n-    let fields = get_fields(&record.syntax());\n-    let sorted_fields = sorted_by_rank(&fields, |node| {\n-        *ranks.get(&get_field_name(node)).unwrap_or(&usize::max_value())\n-    });\n+    let fields: Vec<SyntaxNode> = {\n+        let field_kind = match record.kind() {\n+            RECORD_EXPR => RECORD_EXPR_FIELD,\n+            RECORD_PAT => RECORD_PAT_FIELD,\n+            _ => {\n+                stdx::never!();\n+                return None;\n+            }\n+        };\n+        record.children().flat_map(|n| n.children()).filter(|n| n.kind() == field_kind).collect()\n+    };\n+\n+    let sorted_fields = {\n+        let mut fields = fields.clone();\n+        fields.sort_by_key(|node| *ranks.get(&get_field_name(node)).unwrap_or(&usize::max_value()));\n+        fields\n+    };\n \n     if sorted_fields == fields {\n         cov_mark::hit!(reorder_sorted_fields);\n         return None;\n     }\n \n-    let target = record.syntax().text_range();\n+    let target = record.text_range();\n     acc.add(\n         AssistId(\"reorder_fields\", AssistKind::RefactorRewrite),\n         \"Reorder record fields\",\n@@ -57,14 +67,6 @@ fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     )\n }\n \n-fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {\n-    match node.kind() {\n-        RECORD_EXPR => vec![RECORD_EXPR_FIELD],\n-        RECORD_PAT => vec![RECORD_PAT_FIELD, IDENT_PAT],\n-        _ => vec![],\n-    }\n-}\n-\n fn get_field_name(node: &SyntaxNode) -> String {\n     let res = match_ast! {\n         match node {\n@@ -76,34 +78,20 @@ fn get_field_name(node: &SyntaxNode) -> String {\n     res.unwrap_or_default()\n }\n \n-fn get_fields(record: &SyntaxNode) -> Vec<SyntaxNode> {\n-    let kinds = get_fields_kind(record);\n-    record.children().flat_map(|n| n.children()).filter(|n| kinds.contains(&n.kind())).collect()\n-}\n-\n-fn sorted_by_rank(\n-    fields: &[SyntaxNode],\n-    get_rank: impl Fn(&SyntaxNode) -> usize,\n-) -> Vec<SyntaxNode> {\n-    fields.iter().cloned().sorted_by_key(get_rank).collect()\n-}\n+fn compute_fields_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<FxHashMap<String, usize>> {\n+    let strukt = match ctx.sema.resolve_path(path) {\n+        Some(hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Struct(it)))) => it,\n+        _ => return None,\n+    };\n \n-fn struct_definition(path: &ast::Path, sema: &Semantics<RootDatabase>) -> Option<Struct> {\n-    match sema.resolve_path(path) {\n-        Some(PathResolution::Def(ModuleDef::Adt(Adt::Struct(s)))) => Some(s),\n-        _ => None,\n-    }\n-}\n+    let res = strukt\n+        .fields(ctx.db())\n+        .iter()\n+        .enumerate()\n+        .map(|(idx, field)| (field.name(ctx.db()).to_string(), idx))\n+        .collect();\n \n-fn compute_fields_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<FxHashMap<String, usize>> {\n-    Some(\n-        struct_definition(path, &ctx.sema)?\n-            .fields(ctx.db())\n-            .iter()\n-            .enumerate()\n-            .map(|(idx, field)| (field.name(ctx.db()).to_string(), idx))\n-            .collect(),\n-    )\n+    Some(res)\n }\n \n #[cfg(test)]\n@@ -118,11 +106,7 @@ mod tests {\n         check_assist_not_applicable(\n             reorder_fields,\n             r#\"\n-struct Foo {\n-    foo: i32,\n-    bar: i32,\n-}\n-\n+struct Foo { foo: i32, bar: i32 }\n const test: Foo = $0Foo { foo: 0, bar: 0 };\n \"#,\n         )\n@@ -133,8 +117,8 @@ const test: Foo = $0Foo { foo: 0, bar: 0 };\n         check_assist_not_applicable(\n             reorder_fields,\n             r#\"\n-struct Foo {};\n-const test: Foo = $0Foo {}\n+struct Foo {}\n+const test: Foo = $0Foo {};\n \"#,\n         )\n     }\n@@ -144,12 +128,12 @@ const test: Foo = $0Foo {}\n         check_assist(\n             reorder_fields,\n             r#\"\n-struct Foo {foo: i32, bar: i32};\n-const test: Foo = $0Foo {bar: 0, foo: 1}\n+struct Foo { foo: i32, bar: i32 }\n+const test: Foo = $0Foo { bar: 0, foo: 1 };\n \"#,\n             r#\"\n-struct Foo {foo: i32, bar: i32};\n-const test: Foo = Foo {foo: 1, bar: 0}\n+struct Foo { foo: i32, bar: i32 }\n+const test: Foo = Foo { foo: 1, bar: 0 };\n \"#,\n         )\n     }\n@@ -186,10 +170,7 @@ fn f(f: Foo) -> {\n         check_assist(\n             reorder_fields,\n             r#\"\n-struct Foo {\n-    foo: String,\n-    bar: String,\n-}\n+struct Foo { foo: String, bar: String }\n \n impl Foo {\n     fn new() -> Foo {\n@@ -203,10 +184,7 @@ impl Foo {\n }\n \"#,\n             r#\"\n-struct Foo {\n-    foo: String,\n-    bar: String,\n-}\n+struct Foo { foo: String, bar: String }\n \n impl Foo {\n     fn new() -> Foo {"}]}