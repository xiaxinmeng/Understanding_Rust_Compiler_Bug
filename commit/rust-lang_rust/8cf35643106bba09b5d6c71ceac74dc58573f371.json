{"sha": "8cf35643106bba09b5d6c71ceac74dc58573f371", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZjM1NjQzMTA2YmJhMDliNWQ2YzcxY2VhYzc0ZGM1ODU3M2YzNzE=", "commit": {"author": {"name": "Fabian Zaiser", "email": "fabian.zaiser@gmail.com", "date": "2020-11-11T13:15:15Z"}, "committer": {"name": "Fabian Zaiser", "email": "fabian.zaiser@gmail.com", "date": "2020-11-14T13:53:12Z"}, "message": "Add underscore expressions for destructuring assignments\n\nCo-authored-by: varkor <github@varkor.com>", "tree": {"sha": "3d4cbfbfb737a9092150e94b7fa92713910365f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4cbfbfb737a9092150e94b7fa92713910365f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf35643106bba09b5d6c71ceac74dc58573f371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf35643106bba09b5d6c71ceac74dc58573f371", "html_url": "https://github.com/rust-lang/rust/commit/8cf35643106bba09b5d6c71ceac74dc58573f371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf35643106bba09b5d6c71ceac74dc58573f371/comments", "author": {"login": "fanzier", "id": 5846332, "node_id": "MDQ6VXNlcjU4NDYzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5846332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanzier", "html_url": "https://github.com/fanzier", "followers_url": "https://api.github.com/users/fanzier/followers", "following_url": "https://api.github.com/users/fanzier/following{/other_user}", "gists_url": "https://api.github.com/users/fanzier/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanzier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanzier/subscriptions", "organizations_url": "https://api.github.com/users/fanzier/orgs", "repos_url": "https://api.github.com/users/fanzier/repos", "events_url": "https://api.github.com/users/fanzier/events{/privacy}", "received_events_url": "https://api.github.com/users/fanzier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fanzier", "id": 5846332, "node_id": "MDQ6VXNlcjU4NDYzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5846332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanzier", "html_url": "https://github.com/fanzier", "followers_url": "https://api.github.com/users/fanzier/followers", "following_url": "https://api.github.com/users/fanzier/following{/other_user}", "gists_url": "https://api.github.com/users/fanzier/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanzier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanzier/subscriptions", "organizations_url": "https://api.github.com/users/fanzier/orgs", "repos_url": "https://api.github.com/users/fanzier/repos", "events_url": "https://api.github.com/users/fanzier/events{/privacy}", "received_events_url": "https://api.github.com/users/fanzier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a38f8fb674e6a0a6fc358655c6ce6069235f621a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a38f8fb674e6a0a6fc358655c6ce6069235f621a", "html_url": "https://github.com/rust-lang/rust/commit/a38f8fb674e6a0a6fc358655c6ce6069235f621a"}], "stats": {"total": 288, "additions": 243, "deletions": 45}, "files": [{"sha": "328086af183d6076b171fcd270f4a5b5aae446b1", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -1192,6 +1192,7 @@ impl Expr {\n             ExprKind::Field(..) => ExprPrecedence::Field,\n             ExprKind::Index(..) => ExprPrecedence::Index,\n             ExprKind::Range(..) => ExprPrecedence::Range,\n+            ExprKind::Underscore => ExprPrecedence::Path,\n             ExprKind::Path(..) => ExprPrecedence::Path,\n             ExprKind::AddrOf(..) => ExprPrecedence::AddrOf,\n             ExprKind::Break(..) => ExprPrecedence::Break,\n@@ -1324,6 +1325,8 @@ pub enum ExprKind {\n     Index(P<Expr>, P<Expr>),\n     /// A range (e.g., `1..2`, `1..`, `..2`, `1..=2`, `..=2`; and `..` in destructuring assingment).\n     Range(Option<P<Expr>>, Option<P<Expr>>, RangeLimits),\n+    /// An underscore, used in destructuring assignment to ignore a value.\n+    Underscore,\n \n     /// Variable reference, possibly containing `::` and/or type\n     /// parameters (e.g., `foo::bar::<baz>`)."}, {"sha": "ddae0ab03e40497dddbf5147e14492559138a9d6", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -1232,6 +1232,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             visit_opt(e1, |e1| vis.visit_expr(e1));\n             visit_opt(e2, |e2| vis.visit_expr(e2));\n         }\n+        ExprKind::Underscore => {}\n         ExprKind::Path(qself, path) => {\n             vis.visit_qself(qself);\n             vis.visit_path(path);"}, {"sha": "560064182e18df54246dcf638f11db15ccaf24ea", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -806,6 +806,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             walk_list!(visitor, visit_expr, start);\n             walk_list!(visitor, visit_expr, end);\n         }\n+        ExprKind::Underscore => {}\n         ExprKind::Path(ref maybe_qself, ref path) => {\n             if let Some(ref qself) = *maybe_qself {\n                 visitor.visit_ty(&qself.ty);"}, {"sha": "ecbe97bd45a0bedd5554cea6051ea788d277b4fe", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -164,6 +164,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::Range(ref e1, ref e2, lims) => {\n                     self.lower_expr_range(e.span, e1.as_deref(), e2.as_deref(), lims)\n                 }\n+                ExprKind::Underscore => {\n+                    self.sess\n+                        .struct_span_err(\n+                            e.span,\n+                            \"in expressions, `_` can only be used on the left-hand side of an assignment\",\n+                        )\n+                        .span_label(e.span, \"`_` not allowed here\")\n+                        .emit();\n+                    hir::ExprKind::Err\n+                }\n                 ExprKind::Path(ref qself, ref path) => {\n                     let qpath = self.lower_qpath(\n                         e.id,\n@@ -863,7 +873,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // Return early in case of an ordinary assignment.\n         fn is_ordinary(lower_ctx: &mut LoweringContext<'_, '_>, lhs: &Expr) -> bool {\n             match &lhs.kind {\n-                ExprKind::Array(..) | ExprKind::Struct(..) | ExprKind::Tup(..) => false,\n+                ExprKind::Array(..)\n+                | ExprKind::Struct(..)\n+                | ExprKind::Tup(..)\n+                | ExprKind::Underscore => false,\n                 // Check for tuple struct constructor.\n                 ExprKind::Call(callee, ..) => lower_ctx.extract_tuple_struct_path(callee).is_none(),\n                 ExprKind::Paren(e) => {\n@@ -943,6 +956,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         assignments: &mut Vec<hir::Stmt<'hir>>,\n     ) -> &'hir hir::Pat<'hir> {\n         match &lhs.kind {\n+            // Underscore pattern.\n+            ExprKind::Underscore => {\n+                return self.pat_without_dbm(lhs.span, hir::PatKind::Wild);\n+            }\n             // Slice patterns.\n             ExprKind::Array(elements) => {\n                 let (pats, rest) ="}, {"sha": "181783441f3ff6e1678d4a8004cc9aac8d190b5e", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -630,7 +630,11 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");\n-    gate_all!(destructuring_assignment, \"destructuring assignments are unstable\");\n+    if sess.parse_sess.span_diagnostic.err_count() == 0 {\n+        // Errors for `destructuring_assignment` can get quite noisy, especially where `_` is\n+        // involved, so we only emit errors where there are no other parsing errors.\n+        gate_all!(destructuring_assignment, \"destructuring assignments are unstable\");\n+    }\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "887b60f98f75f12bf3cdf609b14dad46f970fc54", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -2068,6 +2068,7 @@ impl<'a> State<'a> {\n                     self.print_expr_maybe_paren(e, fake_prec);\n                 }\n             }\n+            ast::ExprKind::Underscore => self.s.word(\"_\"),\n             ast::ExprKind::Path(None, ref path) => self.print_path(path, true, 0),\n             ast::ExprKind::Path(Some(ref qself), ref path) => self.print_qpath(path, qself, true),\n             ast::ExprKind::Break(opt_label, ref opt_expr) => {"}, {"sha": "ffbf786491df2d6035020e4bbf0ee689c40eb503", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -1089,6 +1089,9 @@ impl<'a> Parser<'a> {\n             self.parse_yield_expr(attrs)\n         } else if self.eat_keyword(kw::Let) {\n             self.parse_let_expr(attrs)\n+        } else if self.eat_keyword(kw::Underscore) {\n+            self.sess.gated_spans.gate(sym::destructuring_assignment, self.prev_token.span);\n+            Ok(self.mk_expr(self.prev_token.span, ExprKind::Underscore, attrs))\n         } else if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n             // Don't complain about bare semicolons after unclosed braces\n             // recovery in order to keep the error count down. Fixing the"}, {"sha": "1902ab94d4c0d1ec136f397bbc4f3239ab9f1576", "filename": "src/test/ui/cross/cross-file-errors/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -3,5 +3,6 @@ mod underscore;\n \n fn main() {\n     underscore!();\n-    //~^ ERROR expected expression, found reserved identifier `_`\n+    //~^ ERROR `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR destructuring assignments are unstable\n }"}, {"sha": "b8658745060b014e5ed7ef03d7091a552d3f4689", "filename": "src/test/ui/cross/cross-file-errors/main.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -1,15 +1,31 @@\n-error: expected expression, found reserved identifier `_`\n+error[E0658]: destructuring assignments are unstable\n   --> $DIR/underscore.rs:8:9\n    |\n LL |         _\n-   |         ^ expected expression\n+   |         ^\n    | \n   ::: $DIR/main.rs:5:5\n    |\n LL |     underscore!();\n    |     -------------- in this macro invocation\n    |\n+   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n+   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/underscore.rs:8:9\n+   |\n+LL |         _\n+   |         ^ `_` not allowed here\n+   | \n+  ::: $DIR/main.rs:5:5\n+   |\n+LL |     underscore!();\n+   |     -------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "0d45ff7da7249d9a698325dc1bbb96a621f7a38c", "filename": "src/test/ui/destructuring-assignment/nested_destructure.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnested_destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnested_destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fnested_destructure.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -14,4 +14,7 @@ fn main() {\n     Struct { a: TupleStruct((a, b), c), b: [d] } =\n         Struct { a: TupleStruct((0, 1), 2), b: [3] };\n     assert_eq!((a, b, c, d), (0, 1, 2, 3));\n+\n+    // unnested underscore: just discard\n+    _ = 1;\n }"}, {"sha": "76cdc1260fcded74a4530ee957ea89e9a1b8c10a", "filename": "src/test/ui/destructuring-assignment/slice_destructure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fslice_destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fslice_destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fslice_destructure.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -9,6 +9,8 @@ fn main() {\n   let mut c;\n   [a, .., b, c] = [1, 2, 3, 4, 5];\n   assert_eq!((a, b, c), (1, 4, 5));\n+  [_, a, _] = [1, 2, 3];\n+  assert_eq!((a, b), (2, 4));\n   [..] = [1, 2, 3];\n   [c, ..] = [5, 6, 6];\n   assert_eq!(c, 5);"}, {"sha": "90d93892f7f2249f75155ca0e2ae1bfdfdd4fdec", "filename": "src/test/ui/destructuring-assignment/slice_destructure_fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fslice_destructure_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fslice_destructure_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fslice_destructure_fail.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -4,4 +4,5 @@ fn main() {\n   let (mut a, mut b);\n   [a, .., b, ..] = [0, 1]; //~ ERROR `..` can only be used once per slice pattern\n   [a, a, b] = [1, 2]; //~ ERROR pattern requires 3 elements but array has 2\n+  [_] = [1, 2]; //~ ERROR pattern requires 1 element but array has 2\n }"}, {"sha": "cc412c72df51def9888fbbaee18cfee2b519cb7b", "filename": "src/test/ui/destructuring-assignment/slice_destructure_fail.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fslice_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fslice_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fslice_destructure_fail.stderr?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -12,6 +12,12 @@ error[E0527]: pattern requires 3 elements but array has 2\n LL |   [a, a, b] = [1, 2];\n    |   ^^^^^^^^^ expected 2 elements\n \n-error: aborting due to 2 previous errors\n+error[E0527]: pattern requires 1 element but array has 2\n+  --> $DIR/slice_destructure_fail.rs:7:3\n+   |\n+LL |   [_] = [1, 2];\n+   |   ^^^ expected 2 elements\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0527`."}, {"sha": "2bcbd9d0d742e5292126e544e0009bcebfae66a8", "filename": "src/test/ui/destructuring-assignment/struct_destructure.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -12,8 +12,10 @@ fn main() {\n     assert_eq!((a, b), (0, 1));\n     Struct { a: b, b: a }  = Struct { a: 1, b: 2 };\n     assert_eq!((a,b), (2, 1));\n+    Struct { a: _, b } = Struct { a: 1, b: 2 };\n+    assert_eq!((a, b), (2, 2));\n     Struct { a, .. } = Struct { a: 1, b: 3 };\n-    assert_eq!((a, b), (1, 1));\n+    assert_eq!((a, b), (1, 2));\n     Struct { .. } = Struct { a: 1, b: 4 };\n-    assert_eq!((a, b), (1, 1));\n+    assert_eq!((a, b), (1, 2));\n }"}, {"sha": "4aa327b61f49709dd05f86fe8f400f90fe4b10a7", "filename": "src/test/ui/destructuring-assignment/struct_destructure_fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure_fail.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -9,6 +9,8 @@ fn main() {\n     let mut c;\n     let d = Struct { a: 0, b: 1 };\n     Struct { a, b, c } = Struct { a: 0, b: 1 }; //~ ERROR does not have a field named `c`\n+    Struct { a, _ } = Struct { a: 1, b: 2 }; //~ ERROR pattern does not mention field `b`\n+    //~| ERROR expected identifier, found reserved identifier `_`\n     Struct { a, ..d } = Struct { a: 1, b: 2 };\n     //~^ ERROR functional record updates are not allowed in destructuring assignments\n     Struct { a, .. }; //~ ERROR base expression required after `..`"}, {"sha": "81661a357e75079d46f32a717f1921139275ad48", "filename": "src/test/ui/destructuring-assignment/struct_destructure_fail.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fstruct_destructure_fail.stderr?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -1,11 +1,19 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/struct_destructure_fail.rs:12:17\n+   |\n+LL |     Struct { a, _ } = Struct { a: 1, b: 2 };\n+   |     ------      ^ expected identifier, found reserved identifier\n+   |     |\n+   |     while parsing this struct\n+\n error: functional record updates are not allowed in destructuring assignments\n-  --> $DIR/struct_destructure_fail.rs:12:19\n+  --> $DIR/struct_destructure_fail.rs:14:19\n    |\n LL |     Struct { a, ..d } = Struct { a: 1, b: 2 };\n    |                   ^ help: consider removing the trailing pattern\n \n error: base expression required after `..`\n-  --> $DIR/struct_destructure_fail.rs:14:19\n+  --> $DIR/struct_destructure_fail.rs:16:19\n    |\n LL |     Struct { a, .. };\n    |                   ^ add a base expression here\n@@ -16,6 +24,22 @@ error[E0026]: struct `Struct` does not have a field named `c`\n LL |     Struct { a, b, c } = Struct { a: 0, b: 1 };\n    |                    ^ struct `Struct` does not have this field\n \n-error: aborting due to 3 previous errors\n+error[E0027]: pattern does not mention field `b`\n+  --> $DIR/struct_destructure_fail.rs:12:5\n+   |\n+LL |     Struct { a, _ } = Struct { a: 1, b: 2 };\n+   |     ^^^^^^^^^^^^^^^ missing field `b`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     Struct { a, b, _ } = Struct { a: 1, b: 2 };\n+   |               ^^^\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     Struct { a, .., _ } = Struct { a: 1, b: 2 };\n+   |               ^^^^\n+\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0026`.\n+Some errors have detailed explanations: E0026, E0027.\n+For more information about an error, try `rustc --explain E0026`."}, {"sha": "2096182d421cf5232478ef2caff1abd0282d189b", "filename": "src/test/ui/destructuring-assignment/tuple_destructure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -16,6 +16,8 @@ fn main() {\n     assert_eq!((a, b), (2, 2));\n     (b, ..) = (5, 6, 7);\n     assert_eq!(b, 5);\n+    (a, _) = (8, 9);\n+    assert_eq!(a, 8);\n \n     // Test for a non-Copy type (String):\n     let (mut c, mut d);"}, {"sha": "5524e91dc401b6859a190c6f1f334059c2830290", "filename": "src/test/ui/destructuring-assignment/tuple_destructure_fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -7,4 +7,5 @@ fn main() {\n     (a, .., b, ..) = (0, 1); //~ ERROR `..` can only be used once per tuple pattern\n     (a, a, b) = (1, 2); //~ ERROR mismatched types\n     (C, ..) = (0,1); //~ ERROR invalid left-hand side of assignment\n+    (_,) = (1, 2); //~ ERROR mismatched types\n }"}, {"sha": "1146b88278d49f87f8825c5c4236788b93f2393f", "filename": "src/test/ui/destructuring-assignment/tuple_destructure_fail.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -25,7 +25,18 @@ LL |     (C, ..) = (0,1);\n    |      |\n    |      cannot assign to this expression\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/tuple_destructure_fail.rs:10:5\n+   |\n+LL |     (_,) = (1, 2);\n+   |     ^^^^   ------ this expression has type `({integer}, {integer})`\n+   |     |\n+   |     expected a tuple with 2 elements, found one with 1 element\n+   |\n+   = note: expected type `({integer}, {integer})`\n+             found tuple `(_,)`\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0070, E0308.\n For more information about an error, try `rustc --explain E0070`."}, {"sha": "7b5c5ad2bae26b5156609dd44eb5b4da33ea7a35", "filename": "src/test/ui/destructuring-assignment/tuple_struct_destructure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -23,8 +23,10 @@ fn main() {\n     assert_eq!((a, b), (0, 1));\n     TupleStruct(a, .., b) = TupleStruct(1, 2);\n     assert_eq!((a, b), (1, 2));\n+    TupleStruct(_, a) = TupleStruct(2, 2);\n+    assert_eq!((a, b), (2, 2));\n     TupleStruct(..) = TupleStruct(3, 4);\n-    assert_eq!((a, b), (1, 2));\n+    assert_eq!((a, b), (2, 2));\n     TupleStruct(5,6).assign(&mut a, &mut b);\n     assert_eq!((a, b), (5, 6));\n     Enum::SingleVariant(a, b) = Enum::SingleVariant(7, 8);"}, {"sha": "c39db06117767376a4c782df9786870f4c041c80", "filename": "src/test/ui/destructuring-assignment/tuple_struct_destructure_fail.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -29,8 +29,12 @@ fn main() {\n \n     TupleStruct(a, a, b) = TupleStruct(1, 2);\n     //~^ ERROR this pattern has 3 fields, but the corresponding tuple struct has 2 fields\n+    TupleStruct(_) = TupleStruct(1, 2);\n+    //~^ ERROR this pattern has 1 field, but the corresponding tuple struct has 2 fields\n     Enum::SingleVariant(a, a, b) = Enum::SingleVariant(1, 2);\n     //~^ ERROR this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n+    Enum::SingleVariant(_) = Enum::SingleVariant(1, 2);\n+    //~^ ERROR this pattern has 1 field, but the corresponding tuple variant has 2 fields\n \n     // Check if `test` is recognized as not a tuple struct but a function call:\n     test() = TupleStruct(0, 0);"}, {"sha": "0e7174e5b19d6d4224ef4723f9765e833b8736cc", "filename": "src/test/ui/destructuring-assignment/tuple_struct_destructure_fail.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -23,40 +23,58 @@ LL | struct TupleStruct<S, T>(S, T);\n LL |     TupleStruct(a, a, b) = TupleStruct(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3\n \n-error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 2 fields\n   --> $DIR/tuple_struct_destructure_fail.rs:32:5\n    |\n+LL | struct TupleStruct<S, T>(S, T);\n+   | ------------------------------- tuple struct defined here\n+...\n+LL |     TupleStruct(_) = TupleStruct(1, 2);\n+   |     ^^^^^^^^^^^^^^ expected 2 fields, found 1\n+\n+error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n+  --> $DIR/tuple_struct_destructure_fail.rs:34:5\n+   |\n LL |     SingleVariant(S, T)\n    |     ------------------- tuple variant defined here\n ...\n LL |     Enum::SingleVariant(a, a, b) = Enum::SingleVariant(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 3\n \n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+  --> $DIR/tuple_struct_destructure_fail.rs:36:5\n+   |\n+LL |     SingleVariant(S, T)\n+   |     ------------------- tuple variant defined here\n+...\n+LL |     Enum::SingleVariant(_) = Enum::SingleVariant(1, 2);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+\n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/tuple_struct_destructure_fail.rs:36:12\n+  --> $DIR/tuple_struct_destructure_fail.rs:40:12\n    |\n LL |     test() = TupleStruct(0, 0);\n    |     ------ ^\n    |     |\n    |     cannot assign to this expression\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/tuple_struct_destructure_fail.rs:38:14\n+  --> $DIR/tuple_struct_destructure_fail.rs:42:14\n    |\n LL |     (test)() = TupleStruct(0, 0);\n    |     -------- ^\n    |     |\n    |     cannot assign to this expression\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/tuple_struct_destructure_fail.rs:40:38\n+  --> $DIR/tuple_struct_destructure_fail.rs:44:38\n    |\n LL |     <Alias::<isize> as Test>::test() = TupleStruct(0, 0);\n    |     -------------------------------- ^\n    |     |\n    |     cannot assign to this expression\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0023, E0070.\n For more information about an error, try `rustc --explain E0023`."}, {"sha": "4ed4f56702c3208df595eef2c12b541743852698", "filename": "src/test/ui/destructuring-assignment/underscore-range-expr-gating.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Funderscore-range-expr-gating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Funderscore-range-expr-gating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Funderscore-range-expr-gating.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -4,5 +4,7 @@ struct S { x : u32 }\n \n #[cfg(FALSE)]\n fn foo() {\n+    _; //~ ERROR destructuring assignments are unstable\n+\n     S { x: 5, .. }; //~ ERROR destructuring assignments are unstable\n }"}, {"sha": "a5ed761a01c33f31df6fa9deae7e4f8654ebb1cc", "filename": "src/test/ui/destructuring-assignment/underscore-range-expr-gating.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Funderscore-range-expr-gating.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fdestructuring-assignment%2Funderscore-range-expr-gating.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Funderscore-range-expr-gating.stderr?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -1,12 +1,21 @@\n error[E0658]: destructuring assignments are unstable\n-  --> $DIR/underscore-range-expr-gating.rs:7:15\n+  --> $DIR/underscore-range-expr-gating.rs:7:5\n+   |\n+LL |     _;\n+   |     ^\n+   |\n+   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n+   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n+\n+error[E0658]: destructuring assignments are unstable\n+  --> $DIR/underscore-range-expr-gating.rs:9:15\n    |\n LL |     S { x: 5, .. };\n    |               ^^\n    |\n    = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n    = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "00638e04f5db9c38f4af93d80c474d2c9618664e", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-with-underscore-args.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -8,12 +8,18 @@ trait T {\n \n fn main() {\n     let _: usize = foo(_, _);\n-    //~^ ERROR expected expression\n-    //~| ERROR expected expression\n+    //~^ ERROR `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR destructuring assignments are unstable\n+    //~| ERROR destructuring assignments are unstable\n     let _: S = S(_, _);\n-    //~^ ERROR expected expression\n-    //~| ERROR expected expression\n+    //~^ ERROR `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR destructuring assignments are unstable\n+    //~| ERROR destructuring assignments are unstable\n     let _: usize = T::baz(_, _);\n-    //~^ ERROR expected expression\n-    //~| ERROR expected expression\n+    //~^ ERROR `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR destructuring assignments are unstable\n+    //~| ERROR destructuring assignments are unstable\n }"}, {"sha": "248fa6b9c9cb2e7fd0d16998ec5045dde7c70db7", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-with-underscore-args.stderr", "status": "modified", "additions": 72, "deletions": 17, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.stderr?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -1,38 +1,93 @@\n-error: expected expression, found reserved identifier `_`\n+error[E0658]: destructuring assignments are unstable\n   --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:10:24\n    |\n LL |     let _: usize = foo(_, _);\n-   |                        ^ expected expression\n+   |                        ^\n+   |\n+   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n+   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n+\n+error[E0658]: destructuring assignments are unstable\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:10:27\n+   |\n+LL |     let _: usize = foo(_, _);\n+   |                           ^\n+   |\n+   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n+   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n+\n+error[E0658]: destructuring assignments are unstable\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:15:18\n+   |\n+LL |     let _: S = S(_, _);\n+   |                  ^\n+   |\n+   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n+   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n+\n+error[E0658]: destructuring assignments are unstable\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:15:21\n+   |\n+LL |     let _: S = S(_, _);\n+   |                     ^\n+   |\n+   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n+   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n+\n+error[E0658]: destructuring assignments are unstable\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:20:27\n+   |\n+LL |     let _: usize = T::baz(_, _);\n+   |                           ^\n+   |\n+   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n+   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n+\n+error[E0658]: destructuring assignments are unstable\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:20:30\n+   |\n+LL |     let _: usize = T::baz(_, _);\n+   |                              ^\n+   |\n+   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n+   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:10:24\n+   |\n+LL |     let _: usize = foo(_, _);\n+   |                        ^ `_` not allowed here\n \n-error: expected expression, found reserved identifier `_`\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n   --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:10:27\n    |\n LL |     let _: usize = foo(_, _);\n-   |                           ^ expected expression\n+   |                           ^ `_` not allowed here\n \n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:13:18\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:15:18\n    |\n LL |     let _: S = S(_, _);\n-   |                  ^ expected expression\n+   |                  ^ `_` not allowed here\n \n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:13:21\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:15:21\n    |\n LL |     let _: S = S(_, _);\n-   |                     ^ expected expression\n+   |                     ^ `_` not allowed here\n \n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:16:27\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:20:27\n    |\n LL |     let _: usize = T::baz(_, _);\n-   |                           ^ expected expression\n+   |                           ^ `_` not allowed here\n \n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:16:30\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:20:30\n    |\n LL |     let _: usize = T::baz(_, _);\n-   |                              ^ expected expression\n+   |                              ^ `_` not allowed here\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 12 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1fcd41e4dbfed7a2e27dc3f12b93040c3f698e62", "filename": "src/tools/clippy/clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf35643106bba09b5d6c71ceac74dc58573f371/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=8cf35643106bba09b5d6c71ceac74dc58573f371", "patch": "@@ -170,6 +170,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::MacCall(..)\n             | ast::ExprKind::MethodCall(..)\n             | ast::ExprKind::Paren(..)\n+            | ast::ExprKind::Underscore\n             | ast::ExprKind::Path(..)\n             | ast::ExprKind::Repeat(..)\n             | ast::ExprKind::Ret(..)"}]}