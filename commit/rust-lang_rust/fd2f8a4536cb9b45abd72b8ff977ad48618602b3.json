{"sha": "fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMmY4YTQ1MzZjYjliNDVhYmQ3MmI4ZmY5NzdhZDQ4NjE4NjAyYjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-09T05:58:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-09T05:58:29Z"}, "message": "Auto merge of #39677 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 9 pull requests\n\n- Successful merges: #37928, #38699, #39589, #39598, #39599, #39641, #39649, #39653, #39671\n- Failed merges:", "tree": {"sha": "1a4ac51c16de92345ef062bc86eda21c87e5d57b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a4ac51c16de92345ef062bc86eda21c87e5d57b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "html_url": "https://github.com/rust-lang/rust/commit/fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29dece1c8bbebf7ae8034ef0826b119281730937", "url": "https://api.github.com/repos/rust-lang/rust/commits/29dece1c8bbebf7ae8034ef0826b119281730937", "html_url": "https://github.com/rust-lang/rust/commit/29dece1c8bbebf7ae8034ef0826b119281730937"}, {"sha": "1e3e904101087c11612f97bc604941e5ee85b86e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3e904101087c11612f97bc604941e5ee85b86e", "html_url": "https://github.com/rust-lang/rust/commit/1e3e904101087c11612f97bc604941e5ee85b86e"}], "stats": {"total": 974, "additions": 928, "deletions": 46}, "files": [{"sha": "c751ad9731a7db9ff5690d67105e017260a882ce", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/configure", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -649,6 +649,7 @@ opt codegen-tests 1 \"run the src/test/codegen tests\"\n opt option-checking 1 \"complain about unrecognized options in this configure script\"\n opt ninja 0 \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\"\n opt vendor 0 \"enable usage of vendored Rust crates\"\n+opt sanitizers 0 \"build the sanitizer runtimes (asan, lsan, msan, tsan)\"\n \n # Optimization and debugging options. These may be overridden by the release channel, etc.\n opt_nosave optimize 1 \"build optimized rust code\""}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/aarch64-unknown-freebsd.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29dece1c8bbebf7ae8034ef0826b119281730937/mk%2Fcfg%2Faarch64-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/29dece1c8bbebf7ae8034ef0826b119281730937/mk%2Fcfg%2Faarch64-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-unknown-freebsd.mk?ref=29dece1c8bbebf7ae8034ef0826b119281730937", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/i686-unknown-netbsd.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29dece1c8bbebf7ae8034ef0826b119281730937/mk%2Fcfg%2Fi686-unknown-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/29dece1c8bbebf7ae8034ef0826b119281730937/mk%2Fcfg%2Fi686-unknown-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-netbsd.mk?ref=29dece1c8bbebf7ae8034ef0826b119281730937", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "09aefd45e94c88964ce6bdcd1515c6f9dc5b2460", "filename": "src/Cargo.lock", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -277,6 +277,16 @@ name = \"rustc-serialize\"\n version = \"0.3.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rustc_asan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"build_helper 0.1.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_back\"\n version = \"0.0.0\"\n@@ -410,6 +420,16 @@ dependencies = [\n  \"rustc_bitflags 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_lsan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"build_helper 0.1.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n@@ -444,6 +464,16 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_msan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"build_helper 0.1.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_passes\"\n version = \"0.0.0\"\n@@ -525,6 +555,16 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_tsan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"build_helper 0.1.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_typeck\"\n version = \"0.0.0\"\n@@ -586,6 +626,10 @@ dependencies = [\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n  \"rand 0.0.0\",\n+ \"rustc_asan 0.0.0\",\n+ \"rustc_lsan 0.0.0\",\n+ \"rustc_msan 0.0.0\",\n+ \"rustc_tsan 0.0.0\",\n  \"std_unicode 0.0.0\",\n  \"unwind 0.0.0\",\n ]"}, {"sha": "cbfbcbe4f0c6eb85ef2c4431c41553bbbcd9764a", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -242,6 +242,10 @@ pub fn compiletest(build: &Build,\n     cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n     build.add_rust_test_threads(&mut cmd);\n \n+    if build.config.sanitizers {\n+        cmd.env(\"SANITIZER_SUPPORT\", \"1\");\n+    }\n+\n     cmd.arg(\"--adb-path\").arg(\"adb\");\n     cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);\n     if target.contains(\"android\") {"}, {"sha": "0b1a1f39d8d42e1765950e7c0d3fcdf9871ca366", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -51,6 +51,17 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n         features.push_str(\" force_alloc_system\");\n     }\n+\n+    if compiler.stage != 0 && build.config.sanitizers {\n+        // This variable is used by the sanitizer runtime crates, e.g.\n+        // rustc_lsan, to build the sanitizer runtime from C code\n+        // When this variable is missing, those crates won't compile the C code,\n+        // so we don't set this variable during stage0 where llvm-config is\n+        // missing\n+        // We also only build the runtimes when --enable-sanitizers (or its\n+        // config.toml equivalent) is used\n+        cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n+    }\n     cargo.arg(\"--features\").arg(features)\n          .arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"));"}, {"sha": "604c0397d5242972a118b26b4e0bd2ced74bf9d8", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -48,6 +48,7 @@ pub struct Config {\n     pub target_config: HashMap<String, Target>,\n     pub full_bootstrap: bool,\n     pub extended: bool,\n+    pub sanitizers: bool,\n \n     // llvm codegen options\n     pub llvm_assertions: bool,\n@@ -149,6 +150,7 @@ struct Build {\n     python: Option<String>,\n     full_bootstrap: Option<bool>,\n     extended: Option<bool>,\n+    sanitizers: Option<bool>,\n }\n \n /// TOML representation of various global install decisions.\n@@ -294,6 +296,7 @@ impl Config {\n         set(&mut config.vendor, build.vendor);\n         set(&mut config.full_bootstrap, build.full_bootstrap);\n         set(&mut config.extended, build.extended);\n+        set(&mut config.sanitizers, build.sanitizers);\n \n         if let Some(ref install) = toml.install {\n             config.prefix = install.prefix.clone().map(PathBuf::from);\n@@ -438,6 +441,7 @@ impl Config {\n                 (\"VENDOR\", self.vendor),\n                 (\"FULL_BOOTSTRAP\", self.full_bootstrap),\n                 (\"EXTENDED\", self.extended),\n+                (\"SANITIZERS\", self.sanitizers),\n             }\n \n             match key {"}, {"sha": "025fe990f91dab67e27e338e8bd9f08faa754ffb", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -124,6 +124,9 @@\n # disabled by default.\n #extended = false\n \n+# Build the sanitizer runtimes\n+#sanitizers = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "2da2892150b4fba53817b2bee9a7c436b03c4390", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -515,9 +515,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n \n     let branch = match &build.config.channel[..] {\n         \"stable\" |\n-        \"beta\" => {\n-            build.release.split(\".\").take(2).collect::<Vec<_>>().join(\".\")\n-        }\n+        \"beta\" => format!(\"rust-{}\", build.release_num),\n         _ => \"master\".to_string(),\n     };\n "}, {"sha": "ba6b34343f0b35d15554fd0f5b142c71daa9c627", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -599,7 +599,8 @@ impl Build {\n     /// Get the space-separated set of activated features for the standard\n     /// library.\n     fn std_features(&self) -> String {\n-        let mut features = \"panic-unwind\".to_string();\n+        let mut features = \"panic-unwind asan lsan msan tsan\".to_string();\n+\n         if self.config.debug_jemalloc {\n             features.push_str(\" debug-jemalloc\");\n         }"}, {"sha": "12e24ff1af6a2fc505c67887491c9a9fedd6a737", "filename": "src/ci/docker/dist-x86-linux/Dockerfile", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -21,17 +21,7 @@ RUN yum upgrade -y && yum install -y \\\n ENV PATH=/rustroot/bin:$PATH\n ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n WORKDIR /tmp\n-\n-# binutils < 2.22 has a bug where the 32-bit executables it generates\n-# immediately segfault in Rust, so we need to install our own binutils.\n-#\n-# See https://github.com/rust-lang/rust/issues/20440 for more info\n COPY shared.sh build-binutils.sh /tmp/\n-RUN ./build-binutils.sh\n-\n-# Need a newer version of gcc than centos has to compile LLVM nowadays\n-COPY build-gcc.sh /tmp/\n-RUN ./build-gcc.sh\n \n # We need a build of openssl which supports SNI to download artifacts from\n # static.rust-lang.org. This'll be used to link into libcurl below (and used\n@@ -49,6 +39,16 @@ RUN ./build-openssl.sh\n COPY build-curl.sh /tmp/\n RUN ./build-curl.sh\n \n+# binutils < 2.22 has a bug where the 32-bit executables it generates\n+# immediately segfault in Rust, so we need to install our own binutils.\n+#\n+# See https://github.com/rust-lang/rust/issues/20440 for more info\n+RUN ./build-binutils.sh\n+\n+# Need a newer version of gcc than centos has to compile LLVM nowadays\n+COPY build-gcc.sh /tmp/\n+RUN ./build-gcc.sh\n+\n # CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n COPY build-python.sh /tmp/\n RUN ./build-python.sh\n@@ -63,6 +63,11 @@ RUN ./build-git.sh\n COPY build-cmake.sh /tmp/\n RUN ./build-cmake.sh\n \n+# for sanitizers, we need kernel headers files newer than the ones CentOS ships\n+# with so we install newer ones here\n+COPY build-headers.sh /tmp/\n+RUN ./build-headers.sh\n+\n RUN curl -Lo /rustroot/dumb-init \\\n       https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 && \\\n       chmod +x /rustroot/dumb-init\n@@ -76,5 +81,5 @@ RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST |\n ENV HOSTS=i686-unknown-linux-gnu\n ENV HOSTS=$HOSTS,x86_64-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended --enable-sanitizers\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "4ce38fd9205e27b4aff8b169f4ead5c31f731993", "filename": "src/ci/docker/dist-x86-linux/build-headers.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-headers.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-headers.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-headers.sh?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://cdn.kernel.org/pub/linux/kernel/v3.x/linux-3.2.84.tar.xz | unxz | tar x\n+\n+cd linux-3.2.84\n+hide_output make mrproper\n+hide_output make INSTALL_HDR_PATH=dest headers_install\n+\n+find dest/include \\( -name .install -o -name ..install.cmd \\) -delete\n+yes | cp -fr dest/include/* /usr/include\n+\n+cd ..\n+rm -rf linux-3.2.84"}, {"sha": "e903b6ddc64cd0ef54c761321cbe154b68a49cae", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -22,5 +22,5 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n     rm dumb-init_*.deb\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n+ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --enable-sanitizers\n ENV SCRIPT python2.7 ../x.py test && python2.7 ../x.py dist"}, {"sha": "d30da544a8afc5d78391dee270bdf40e74a215d3", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -1 +1 @@\n-Subproject commit a8fc4c169fac43a5dc204d4fd56ddb1739f8c178\n+Subproject commit d30da544a8afc5d78391dee270bdf40e74a215d3"}, {"sha": "8aefabe61fdf68b17294ea63662240d7b17908e1", "filename": "src/doc/reference.md", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -1291,15 +1291,18 @@ guaranteed to refer to the same memory address.\n \n Constant values must not have destructors, and otherwise permit most forms of\n data. Constants may refer to the address of other constants, in which case the\n-address will have the `static` lifetime. The compiler is, however, still at\n-liberty to translate the constant many times, so the address referred to may not\n-be stable.\n+address will have elided lifetimes where applicable, otherwise \u2013 in most cases \u2013\n+defaulting to the `static` lifetime. (See below on [static lifetime elision].)\n+The compiler is, however, still at liberty to translate the constant many times,\n+so the address referred to may not be stable.\n+\n+[static lifetime elision]: #static-lifetime-elision\n \n Constants must be explicitly typed. The type may be `bool`, `char`, a number, or\n a type derived from those primitive types. The derived types are references with\n the `static` lifetime, fixed-size arrays, tuples, enum variants, and structs.\n \n-```\n+```rust\n const BIT1: u32 = 1 << 0;\n const BIT2: u32 = 1 << 1;\n \n@@ -1317,6 +1320,8 @@ const BITS_N_STRINGS: BitsNStrings<'static> = BitsNStrings {\n };\n ```\n \n+\n+\n ### Static items\n \n A *static item* is similar to a *constant*, except that it represents a precise\n@@ -1351,7 +1356,7 @@ running in the same process.\n Mutable statics are still very useful, however. They can be used with C\n libraries and can also be bound from C libraries (in an `extern` block).\n \n-```\n+```rust\n # fn atomic_add(_: &mut u32, _: u32) -> u32 { 2 }\n \n static mut LEVELS: u32 = 0;\n@@ -1375,6 +1380,53 @@ unsafe fn bump_levels_unsafe2() -> u32 {\n Mutable statics have the same restrictions as normal statics, except that the\n type of the value is not required to ascribe to `Sync`.\n \n+#### `'static` lifetime elision\n+\n+[Unstable] Both constant and static declarations of reference types have\n+*implicit* `'static` lifetimes unless an explicit lifetime is specified. As\n+such, the constant declarations involving `'static` above may be written\n+without the lifetimes. Returning to our previous example:\n+\n+```rust\n+# #![feature(static_in_const)]\n+const BIT1: u32 = 1 << 0;\n+const BIT2: u32 = 1 << 1;\n+\n+const BITS: [u32; 2] = [BIT1, BIT2];\n+const STRING: &str = \"bitstring\";\n+\n+struct BitsNStrings<'a> {\n+    mybits: [u32; 2],\n+    mystring: &'a str,\n+}\n+\n+const BITS_N_STRINGS: BitsNStrings = BitsNStrings {\n+    mybits: BITS,\n+    mystring: STRING,\n+};\n+```\n+\n+Note that if the `static` or `const` items include function or closure\n+references, which themselves include references, the compiler will first try the\n+standard elision rules ([see discussion in the nomicon][elision-nomicon]). If it\n+is unable to resolve the lifetimes by its usual rules, it will default to using\n+the `'static` lifetime. By way of example:\n+\n+[elision-nomicon]: https://doc.rust-lang.org/nomicon/lifetime-elision.html\n+\n+```rust,ignore\n+// Resolved as `fn<'a>(&'a str) -> &'a str`.\n+const RESOLVED_SINGLE: fn(&str) -> &str = ..\n+\n+// Resolved as `Fn<'a, 'b, 'c>(&'a Foo, &'b Bar, &'c Baz) -> usize`.\n+const RESOLVED_MULTIPLE: Fn(&Foo, &Bar, &Baz) -> usize = ..\n+\n+// There is insufficient information to bound the return reference lifetime\n+// relative to the argument lifetimes, so the signature is resolved as\n+// `Fn(&'static Foo, &'static Bar) -> &'static Baz`.\n+const RESOLVED_STATIC: Fn(&Foo, &Bar) -> &Baz = ..\n+```\n+\n ### Traits\n \n A _trait_ describes an abstract interface that types can\n@@ -2072,7 +2124,9 @@ macro scope.\n \n ### Miscellaneous attributes\n \n-- `deprecated` - mark the item as deprecated; the full attribute is `#[deprecated(since = \"crate version\", note = \"...\")`, where both arguments are optional.\n+- `deprecated` - mark the item as deprecated; the full attribute is \n+  `#[deprecated(since = \"crate version\", note = \"...\")`, where both arguments \n+  are optional.\n - `export_name` - on statics and functions, this determines the name of the\n   exported symbol.\n - `link_section` - on statics and functions, this specifies the section of the\n@@ -2489,9 +2543,6 @@ The currently implemented features of the reference compiler are:\n             into a Rust program. This capability, especially the signature for the\n             annotated function, is subject to change.\n \n-* `static_in_const` - Enables lifetime elision with a `'static` default for\n-                      `const` and `static` item declarations.\n-\n * `thread_local` - The usage of the `#[thread_local]` attribute is experimental\n                    and should be seen as unstable. This attribute is used to\n                    declare a `static` as being unique per-thread leveraging"}, {"sha": "2d80fc32c469dc111f37eb8487811ea9940c24ba", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -229,6 +229,7 @@ pub trait CrateStore<'tcx> {\n     fn is_allocator(&self, cnum: CrateNum) -> bool;\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n+    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool;\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy;\n     fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate>;\n     /// The name of the crate as it is referred to in source code of the current\n@@ -390,6 +391,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_panic_runtime\") }\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_compiler_builtins\") }\n+    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_sanitizer_runtime\") }\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         bug!(\"panic_strategy\")\n     }"}, {"sha": "24615f2fa699213346c07cb91034d79e4a60161b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -51,6 +51,14 @@ pub struct Config {\n     pub uint_type: UintTy,\n }\n \n+#[derive(Clone)]\n+pub enum Sanitizer {\n+    Address,\n+    Leak,\n+    Memory,\n+    Thread,\n+}\n+\n #[derive(Clone, Copy, PartialEq, Hash)]\n pub enum OptLevel {\n     No, // -O0\n@@ -626,11 +634,13 @@ macro_rules! options {\n             Some(\"a number\");\n         pub const parse_panic_strategy: Option<&'static str> =\n             Some(\"either `panic` or `abort`\");\n+        pub const parse_sanitizer: Option<&'static str> =\n+            Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer};\n         use rustc_back::PanicStrategy;\n \n         $(\n@@ -751,6 +761,17 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_sanitizer(slote: &mut Option<Sanitizer>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"address\") => *slote = Some(Sanitizer::Address),\n+                Some(\"leak\") => *slote = Some(Sanitizer::Leak),\n+                Some(\"memory\") => *slote = Some(Sanitizer::Memory),\n+                Some(\"thread\") => *slote = Some(Sanitizer::Thread),\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -949,6 +970,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"encode MIR of all functions into the crate metadata\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n           \"pass `-install_name @rpath/...` to the OSX linker\"),\n+    sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [UNTRACKED],\n+                                   \"Use a sanitizer\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "2d4872b1fc942513f03712b1b870a14ef80c1188", "filename": "src/librustc_asan/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_asan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_asan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2FCargo.toml?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_asan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_asan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+build_helper = { path = \"../build_helper\" }\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "015be14bd495a7213a62e3268b06e8bfca006156", "filename": "src/librustc_asan/build.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"asan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.asan-x86_64\");\n+\n+        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n+                .unwrap())\n+            .join(\"../compiler-rt\"));\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_asan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "949e949f673a2b39dd084162d20d8c4606bb3d56", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -126,6 +126,9 @@ pub enum Attribute {\n     UWTable         = 17,\n     ZExt            = 18,\n     InReg           = 19,\n+    SanitizeThread  = 20,\n+    SanitizeAddress = 21,\n+    SanitizeMemory  = 22,\n }\n \n /// LLVMIntPredicate"}, {"sha": "bc1f2ead76884927592a01b283303000bdebf4f2", "filename": "src/librustc_lsan/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_lsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_lsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2FCargo.toml?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_lsan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_lsan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+build_helper = { path = \"../build_helper\" }\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "5773777d1f81b4bf600061dde806da2d0b85b869", "filename": "src/librustc_lsan/build.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"lsan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.lsan-x86_64\");\n+\n+        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n+                .unwrap())\n+            .join(\"../compiler-rt\"));\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_lsan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "55dc5aa2876f6bab0002341acdaae62c6a48fdd4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -17,7 +17,8 @@ use schema::CrateRoot;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::DepKind;\n-use rustc::session::{config, Session};\n+use rustc::session::Session;\n+use rustc::session::config::{Sanitizer, self};\n use rustc_back::PanicStrategy;\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n@@ -786,6 +787,64 @@ impl<'a> CrateLoader<'a> {\n                                   &|data| data.needs_panic_runtime());\n     }\n \n+    fn inject_sanitizer_runtime(&mut self) {\n+        if let Some(ref sanitizer) = self.sess.opts.debugging_opts.sanitizer {\n+            // Sanitizers can only be used with x86_64 Linux executables linked\n+            // to `std`\n+            if self.sess.target.target.llvm_target != \"x86_64-unknown-linux-gnu\" {\n+                self.sess.err(&format!(\"Sanitizers only work with the \\\n+                                        `x86_64-unknown-linux-gnu` target.\"));\n+                return\n+            }\n+\n+            if !self.sess.crate_types.borrow().iter().all(|ct| {\n+                match *ct {\n+                    // Link the runtime\n+                    config::CrateTypeExecutable => true,\n+                    // This crate will be compiled with the required\n+                    // instrumentation pass\n+                    config::CrateTypeRlib => false,\n+                    _ => {\n+                        self.sess.err(&format!(\"Only executables and rlibs can be \\\n+                                                compiled with `-Z sanitizer`\"));\n+                        false\n+                    }\n+                }\n+            }) {\n+                return\n+            }\n+\n+            let mut uses_std = false;\n+            self.cstore.iter_crate_data(|_, data| {\n+                if data.name == \"std\" {\n+                    uses_std = true;\n+                }\n+            });\n+\n+            if uses_std {\n+                let name = match *sanitizer {\n+                    Sanitizer::Address => \"rustc_asan\",\n+                    Sanitizer::Leak => \"rustc_lsan\",\n+                    Sanitizer::Memory => \"rustc_msan\",\n+                    Sanitizer::Thread => \"rustc_tsan\",\n+                };\n+                info!(\"loading sanitizer: {}\", name);\n+\n+                let symbol = Symbol::intern(name);\n+                let dep_kind = DepKind::Implicit;\n+                let (_, data) =\n+                    self.resolve_crate(&None, symbol, symbol, None, DUMMY_SP,\n+                                       PathKind::Crate, dep_kind);\n+\n+                // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n+                if !data.is_sanitizer_runtime() {\n+                    self.sess.err(&format!(\"the crate `{}` is not a sanitizer runtime\",\n+                                           name));\n+                }\n+            }\n+        }\n+    }\n+\n     fn inject_allocator_crate(&mut self) {\n         // Make sure that we actually need an allocator, if none of our\n         // dependencies need one then we definitely don't!\n@@ -982,6 +1041,9 @@ impl<'a> CrateLoader<'a> {\n \n impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n     fn postprocess(&mut self, krate: &ast::Crate) {\n+        // inject the sanitizer runtime before the allocator runtime because all\n+        // sanitizers force the use of the `alloc_system` allocator\n+        self.inject_sanitizer_runtime();\n         self.inject_allocator_crate();\n         self.inject_panic_runtime(krate);\n "}, {"sha": "4709ca6101c7908f11e8ce5ef7e9cd5a96d090ec", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -297,6 +297,11 @@ impl CrateMetadata {\n         attr::contains_name(&attrs, \"compiler_builtins\")\n     }\n \n+    pub fn is_sanitizer_runtime(&self) -> bool {\n+        let attrs = self.get_item_attrs(CRATE_DEF_INDEX);\n+        attr::contains_name(&attrs, \"sanitizer_runtime\")\n+    }\n+\n     pub fn is_no_builtins(&self) -> bool {\n         let attrs = self.get_item_attrs(CRATE_DEF_INDEX);\n         attr::contains_name(&attrs, \"no_builtins\")"}, {"sha": "7b0177bfd23ed966a2b4fef4a5e6195770e7edb5", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -297,6 +297,10 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).is_compiler_builtins()\n     }\n \n+    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool {\n+        self.get_crate_data(cnum).is_sanitizer_runtime()\n+    }\n+\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         self.get_crate_data(cnum).panic_strategy()\n     }"}, {"sha": "45cc6b9839fb81a321e876b2c834744755ac5c56", "filename": "src/librustc_msan/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_msan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_msan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2FCargo.toml?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_msan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_msan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+build_helper = { path = \"../build_helper\" }\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "7a4c8f7073933f7d597991cf776cfa8e7662461f", "filename": "src/librustc_msan/build.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"msan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.msan-x86_64\");\n+\n+        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n+                .unwrap())\n+            .join(\"../compiler-rt\"));\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_msan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "1cbfa26b705ac8190d6ba15e49477116d767c337", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -1031,6 +1031,9 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         // symbols from the dylib.\n         let src = sess.cstore.used_crate_source(cnum);\n         match data[cnum.as_usize() - 1] {\n+            _ if sess.cstore.is_sanitizer_runtime(cnum) => {\n+                link_sanitizer_runtime(cmd, sess, tmpdir, cnum);\n+            }\n             // compiler-builtins are always placed last to ensure that they're\n             // linked correctly.\n             _ if sess.cstore.is_compiler_builtins(cnum) => {\n@@ -1048,6 +1051,8 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         }\n     }\n \n+    // compiler-builtins are always placed last to ensure that they're\n+    // linked correctly.\n     // We must always link the `compiler_builtins` crate statically. Even if it\n     // was already \"included\" in a dylib (e.g. `libstd` when `-C prefer-dynamic`\n     // is used)\n@@ -1064,6 +1069,34 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         }\n     }\n \n+    // We must link the sanitizer runtime using -Wl,--whole-archive but since\n+    // it's packed in a .rlib, it contains stuff that are not objects that will\n+    // make the linker error. So we must remove those bits from the .rlib before\n+    // linking it.\n+    fn link_sanitizer_runtime(cmd: &mut Linker,\n+                              sess: &Session,\n+                              tmpdir: &Path,\n+                              cnum: CrateNum) {\n+        let src = sess.cstore.used_crate_source(cnum);\n+        let cratepath = &src.rlib.unwrap().0;\n+        let dst = tmpdir.join(cratepath.file_name().unwrap());\n+        let cfg = archive_config(sess, &dst, Some(cratepath));\n+        let mut archive = ArchiveBuilder::new(cfg);\n+        archive.update_symbols();\n+\n+        for f in archive.src_files() {\n+            if f.ends_with(\"bytecode.deflate\") ||\n+                f == sess.cstore.metadata_filename() {\n+                    archive.remove_file(&f);\n+                    continue\n+                }\n+        }\n+\n+        archive.build();\n+\n+        cmd.link_whole_rlib(&dst);\n+    }\n+\n     // Adds the static \"rlib\" versions of all crates to the command line.\n     // There's a bit of magic which happens here specifically related to LTO and\n     // dynamic libraries. Specifically:"}, {"sha": "5c4a5a9a4423d3abdf4bd9a96b90cb1884d5417f", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -12,7 +12,7 @@ use back::lto;\n use back::link::{get_linker, remove};\n use back::symbol_export::ExportedSymbols;\n use rustc_incremental::{save_trans_partition, in_incr_comp_dir};\n-use session::config::{OutputFilenames, OutputTypes, Passes, SomePasses, AllPasses};\n+use session::config::{OutputFilenames, OutputTypes, Passes, SomePasses, AllPasses, Sanitizer};\n use session::Session;\n use session::config::{self, OutputType};\n use llvm;\n@@ -679,6 +679,22 @@ pub fn run_passes(sess: &Session,\n     let mut modules_config = ModuleConfig::new(tm, sess.opts.cg.passes.clone());\n     let mut metadata_config = ModuleConfig::new(tm, vec![]);\n \n+    if let Some(ref sanitizer) = sess.opts.debugging_opts.sanitizer {\n+        match *sanitizer {\n+            Sanitizer::Address => {\n+                modules_config.passes.push(\"asan\".to_owned());\n+                modules_config.passes.push(\"asan-module\".to_owned());\n+            }\n+            Sanitizer::Memory => {\n+                modules_config.passes.push(\"msan\".to_owned())\n+            }\n+            Sanitizer::Thread => {\n+                modules_config.passes.push(\"tsan\".to_owned())\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n     modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));\n "}, {"sha": "7ac482459ee39f5846a3dd4ec807bbde27cb8405", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -23,6 +23,7 @@\n use llvm::{self, ValueRef};\n use llvm::AttributePlace::Function;\n use rustc::ty;\n+use rustc::session::config::Sanitizer;\n use abi::{Abi, FnType};\n use attributes;\n use context::CrateContext;\n@@ -72,6 +73,21 @@ fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty:\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n     }\n \n+    if let Some(ref sanitizer) = ccx.tcx().sess.opts.debugging_opts.sanitizer {\n+        match *sanitizer {\n+            Sanitizer::Address => {\n+                llvm::Attribute::SanitizeAddress.apply_llfn(Function, llfn);\n+            },\n+            Sanitizer::Memory => {\n+                llvm::Attribute::SanitizeMemory.apply_llfn(Function, llfn);\n+            },\n+            Sanitizer::Thread => {\n+                llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n+            },\n+            _ => {}\n+        }\n+    }\n+\n     // If we're compiling the compiler-builtins crate, e.g. the equivalent of\n     // compiler-rt, then we want to implicitly compile everything with hidden\n     // visibility as we're going to link this object all over the place but"}, {"sha": "66d6236361ea233e5f13380e106d6cf181a71912", "filename": "src/librustc_tsan/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_tsan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_tsan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+build_helper = { path = \"../build_helper\" }\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "84326ae8a71060440e436838afbf2080ca889e8e", "filename": "src/librustc_tsan/build.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"tsan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.tsan-x86_64\");\n+\n+        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n+                .unwrap())\n+            .join(\"../compiler-rt\"));\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_tsan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "c591c09bf20e2701b221f806ad659249bf899d3b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -671,9 +671,11 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                 }\n                 _ => {\n                     if f.alternate() {\n-                        write!(f, \"&{}{}{:#}\", lt, m, **ty)\n+                        write!(f, \"&{}{}\", lt, m)?;\n+                        fmt_type(&ty, f, use_absolute)\n                     } else {\n-                        write!(f, \"&amp;{}{}{}\", lt, m, **ty)\n+                        write!(f, \"&amp;{}{}\", lt, m)?;\n+                        fmt_type(&ty, f, use_absolute)\n                     }\n                 }\n             }"}, {"sha": "6234d89024441b946e3d3aba0ba0503b6d9d2385", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -2132,23 +2132,37 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         <ul class='item-list' id='implementors-list'>\n     \")?;\n     if let Some(implementors) = cache.implementors.get(&it.def_id) {\n-        let mut implementor_count: FxHashMap<&str, usize> = FxHashMap();\n+        // The DefId is for the first Type found with that name. The bool is\n+        // if any Types with the same name but different DefId have been found.\n+        let mut implementor_dups: FxHashMap<&str, (DefId, bool)> = FxHashMap();\n         for implementor in implementors {\n-            if let clean::Type::ResolvedPath {ref path, ..} = implementor.impl_.for_ {\n-                *implementor_count.entry(path.last_name()).or_insert(0) += 1;\n+            match implementor.impl_.for_ {\n+                clean::ResolvedPath { ref path, did, is_generic: false, .. } |\n+                clean::BorrowedRef {\n+                    type_: box clean::ResolvedPath { ref path, did, is_generic: false, .. },\n+                    ..\n+                } => {\n+                    let &mut (prev_did, ref mut has_duplicates) =\n+                        implementor_dups.entry(path.last_name()).or_insert((did, false));\n+                    if prev_did != did {\n+                        *has_duplicates = true;\n+                    }\n+                }\n+                _ => {}\n             }\n         }\n \n         for implementor in implementors {\n             write!(w, \"<li><code>\")?;\n             // If there's already another implementor that has the same abbridged name, use the\n             // full path, for example in `std::iter::ExactSizeIterator`\n-            let use_absolute = if let clean::Type::ResolvedPath {\n-                ref path, ..\n-            } = implementor.impl_.for_ {\n-                implementor_count[path.last_name()] > 1\n-            } else {\n-                false\n+            let use_absolute = match implementor.impl_.for_ {\n+                clean::ResolvedPath { ref path, is_generic: false, .. } |\n+                clean::BorrowedRef {\n+                    type_: box clean::ResolvedPath { ref path, is_generic: false, .. },\n+                    ..\n+                } => implementor_dups[path.last_name()].1,\n+                _ => false,\n             };\n             fmt_impl_for_trait_page(&implementor.impl_, w, use_absolute)?;\n             writeln!(w, \"</code></li>\")?;"}, {"sha": "2ba7517d3d2023761a0cc24838d184fe2c95d2f4", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -23,13 +23,23 @@ compiler_builtins = { path = \"../libcompiler_builtins\" }\n std_unicode = { path = \"../libstd_unicode\" }\n unwind = { path = \"../libunwind\" }\n \n+[target.x86_64-unknown-linux-gnu.dependencies]\n+rustc_asan = { path = \"../librustc_asan\", optional = true }\n+rustc_lsan = { path = \"../librustc_lsan\", optional = true }\n+rustc_msan = { path = \"../librustc_msan\", optional = true }\n+rustc_tsan = { path = \"../librustc_tsan\", optional = true }\n+\n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n gcc = \"0.3.27\"\n \n [features]\n+asan = [\"rustc_asan\"]\n backtrace = []\n debug-jemalloc = [\"alloc_jemalloc/debug\"]\n jemalloc = [\"alloc_jemalloc\"]\n force_alloc_system = []\n+lsan = [\"rustc_lsan\"]\n+msan = [\"rustc_msan\"]\n panic-unwind = [\"panic_unwind\"]\n+tsan = [\"rustc_tsan\"]"}, {"sha": "1ef2cb4ed153c2e5d4e78eba2531e86031ecc29d", "filename": "src/libstd/env.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -400,15 +400,19 @@ pub struct JoinPathsError {\n     inner: os_imp::JoinPathsError\n }\n \n-/// Joins a collection of `Path`s appropriately for the `PATH`\n+/// Joins a collection of [`Path`]s appropriately for the `PATH`\n /// environment variable.\n ///\n-/// Returns an `OsString` on success.\n+/// Returns an [`OsString`] on success.\n ///\n-/// Returns an `Err` (containing an error message) if one of the input\n-/// `Path`s contains an invalid character for constructing the `PATH`\n+/// Returns an [`Err`][err] (containing an error message) if one of the input\n+/// [`Path`]s contains an invalid character for constructing the `PATH`\n /// variable (a double quote on Windows or a colon on Unix).\n ///\n+/// [`Path`]: ../../std/path/struct.Path.html\n+/// [`OsString`]: ../../std/ffi/struct.OsString.html\n+/// [err]: ../../std/result/enum.Result.html#variant.Err\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "cc0a67b3d2e94b64c46ac60f29deffc5a9deebb0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -328,6 +328,10 @@ declare_features! (\n \n     // `extern \"msp430-interrupt\" fn()`\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487)),\n+\n+    // Used to identify crates that contain sanitizer runtimes\n+    // rustc internal\n+    (active, sanitizer_runtime, \"1.17.0\", None),\n );\n \n declare_features! (\n@@ -647,6 +651,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                               contains compiler-rt intrinsics and will never be \\\n                                               stable\",\n                                           cfg_fn!(compiler_builtins))),\n+    (\"sanitizer_runtime\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"sanitizer_runtime\",\n+                                             \"the `#[sanitizer_runtime]` attribute is used to \\\n+                                              identify crates that contain the runtime of a \\\n+                                              sanitizer and will never be stable\",\n+                                             cfg_fn!(sanitizer_runtime))),\n \n     (\"allow_internal_unstable\", Normal, Gated(Stability::Unstable,\n                                               \"allow_internal_unstable\","}, {"sha": "db96079d3e916e1fb789fe88bdab6a39a90de3cb", "filename": "src/rustc/std_shim/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Frustc%2Fstd_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Frustc%2Fstd_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.toml?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -35,8 +35,12 @@ core = { path = \"../../libcore\" }\n \n # Reexport features from std\n [features]\n+asan = [\"std/asan\"]\n backtrace = [\"std/backtrace\"]\n debug-jemalloc = [\"std/debug-jemalloc\"]\n jemalloc = [\"std/jemalloc\"]\n force_alloc_system = [\"std/force_alloc_system\"]\n+lsan = [\"std/lsan\"]\n+msan = [\"std/msan\"]\n panic-unwind = [\"std/panic-unwind\"]\n+tsan = [\"std/tsan\"]"}, {"sha": "f3b52b71b99c12655dfcdbc9fa86294e7af5551e", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -148,6 +148,12 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::ZExt;\n   case InReg:\n     return Attribute::InReg;\n+  case SanitizeThread:\n+    return Attribute::SanitizeThread;\n+  case SanitizeAddress:\n+    return Attribute::SanitizeAddress;\n+  case SanitizeMemory:\n+    return Attribute::SanitizeMemory;\n   }\n   llvm_unreachable(\"bad AttributeKind\");\n }"}, {"sha": "0baf5528e9356574397864719da3747f44ed98a8", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -98,6 +98,9 @@ enum LLVMRustAttribute {\n   UWTable = 17,\n   ZExt = 18,\n   InReg = 19,\n+  SanitizeThread = 20,\n+  SanitizeAddress = 21,\n+  SanitizeMemory = 22,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "a18641d824691534bd1934a1cef8969ef724b0dc", "filename": "src/test/compile-fail/feature-gate-sanitizer-runtime.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Fcompile-fail%2Ffeature-gate-sanitizer-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Fcompile-fail%2Ffeature-gate-sanitizer-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-sanitizer-runtime.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![sanitizer_runtime] //~ ERROR the `#[sanitizer_runtime]` attribute is\n+\n+fn main() {}"}, {"sha": "78d96398b958710938f672921dc48ea45c8c3008", "filename": "src/test/compile-fail/issue-27433.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let foo = 42u32;\n+    const FOO : u32 = foo;\n+                   //~^ ERROR attempt to use a non-constant value in a constant\n+}"}, {"sha": "5931145f3a47d014033ff1a1744043d4edc0d729", "filename": "src/test/run-make/sanitizer-address/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+# NOTE the address sanitizer only supports x86_64 linux\n+ifdef SANITIZER_SUPPORT\n+all:\n+\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args overflow.rs | grep -q librustc_asan\n+\t$(TMPDIR)/overflow 2>&1 | grep -q stack-buffer-overflow\n+else\n+all:\n+\n+endif"}, {"sha": "e35c3873f7eb5a23554fb3a10e40e98face92db5", "filename": "src/test/run-make/sanitizer-address/overflow.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let xs = [0, 1, 2, 3];\n+    let y = unsafe { *xs.as_ptr().offset(4) };\n+}"}, {"sha": "835d5b0d9d8cd32ba85d449828a5de334f0f9cf1", "filename": "src/test/run-make/sanitizer-dylib/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+all:\n+\t$(RUSTC) -Z sanitizer=leak --crate-type dylib --target $(TARGET) hello.rs 2>&1 | grep -q 'Only executables and rlibs can be compiled with `-Z sanitizer`'\n+else\n+all:\n+endif"}, {"sha": "41782851a1a6d763c5487a0ae35edc01fb71d6fb", "filename": "src/test/run-make/sanitizer-dylib/hello.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2Fhello.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "6a1ce8bab2fb6c064668dd3792d970a50aa30616", "filename": "src/test/run-make/sanitizer-invalid-target/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,4 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | grep -q 'Sanitizers only work with the `x86_64-unknown-linux-gnu` target'"}, {"sha": "e9e46b7702a804ae77f152ba9bc7a4680c759f51", "filename": "src/test/run-make/sanitizer-invalid-target/hello.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2Fhello.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "f02d948fdc84f58460e9fe409e1cfd541e48bc7e", "filename": "src/test/run-make/sanitizer-leak/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+ifdef SANITIZER_SUPPORT\n+all:\n+\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | grep -q librustc_lsan\n+\t$(TMPDIR)/leak 2>&1 | grep -q 'detected memory leaks'\n+else\n+all:\n+\n+endif"}, {"sha": "279da6aaae707a0ac11073ab63fa8b8ef35c8089", "filename": "src/test/run-make/sanitizer-leak/leak.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-leak%2Fleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-leak%2Fleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2Fleak.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+fn main() {\n+    let xs = vec![1, 2, 3, 4];\n+    mem::forget(xs);\n+}"}, {"sha": "08682e5975e5163e80843f3b5a2c14f90e727092", "filename": "src/test/run-make/sanitizer-memory/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+ifdef SANITIZER_SUPPORT\n+all:\n+\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | grep -q librustc_msan\n+\t$(TMPDIR)/uninit 2>&1 | grep -q use-of-uninitialized-value\n+else\n+all:\n+\n+endif"}, {"sha": "8350c7de3acab91c42de3a650e3f7a9e6eb16aac", "filename": "src/test/run-make/sanitizer-memory/uninit.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-memory%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-memory%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-memory%2Funinit.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+fn main() {\n+    let xs: [u8; 4] = unsafe { mem::uninitialized() };\n+    let y = xs[0] + xs[1];\n+}"}, {"sha": "8bb89a241cb053007ca3c9ead0c144a8078c6442", "filename": "src/test/run-make/sanitizer-thread/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+ifdef SANITIZER_SUPPORT\n+all:\n+\t$(RUSTC) -g -Z sanitizer=thread -Z print-link-args racy.rs | grep -q librustc_tsan\n+\t$(TMPDIR)/racy 2>&1 | grep -q 'data race'\n+else\n+all:\n+\n+endif"}, {"sha": "dc929e004a47979d0f0f6cbd5549057bd91b6d20", "filename": "src/test/run-make/sanitizer-thread/racy.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-thread%2Fracy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frun-make%2Fsanitizer-thread%2Fracy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-thread%2Fracy.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::thread;\n+\n+static mut ANSWER: i32 = 0;\n+\n+fn main() {\n+    let t1 = thread::spawn(|| unsafe { ANSWER = 42 });\n+    unsafe {\n+        ANSWER = 24;\n+    }\n+    t1.join().ok();\n+}"}, {"sha": "afe1daf5983a29f3fbf2f21651d289de918ae99a", "filename": "src/test/rustdoc/impl-disambiguation.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+pub trait Foo {}\n+\n+pub struct Bar<T> { field: T }\n+\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl Foo for Bar<u8>\"\n+impl Foo for Bar<u8> {}\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl Foo for Bar<u16>\"\n+impl Foo for Bar<u16> {}\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl<'a> Foo for &'a Bar<u8>\"\n+impl<'a> Foo for &'a Bar<u8> {}\n+\n+pub mod mod1 {\n+    pub struct Baz {}\n+}\n+\n+pub mod mod2 {\n+    pub enum Baz {}\n+}\n+\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl Foo for foo::mod1::Baz\"\n+impl Foo for mod1::Baz {}\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl<'a> Foo for &'a foo::mod2::Baz\"\n+impl<'a> Foo for &'a mod2::Baz {}"}, {"sha": "0aefe703c9ca7de3e540801f1ded23012dab2987", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2f8a4536cb9b45abd72b8ff977ad48618602b3/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "patch": "@@ -326,6 +326,8 @@ impl Builder {\n     fn filename(&self, component: &str, target: &str) -> String {\n         if component == \"rust-src\" {\n             format!(\"rust-src-{}.tar.gz\", self.channel)\n+        } else if component == \"cargo\" {\n+            format!(\"cargo-nightly-{}.tar.gz\", target)\n         } else {\n             format!(\"{}-{}-{}.tar.gz\", component, self.channel, target)\n         }"}]}