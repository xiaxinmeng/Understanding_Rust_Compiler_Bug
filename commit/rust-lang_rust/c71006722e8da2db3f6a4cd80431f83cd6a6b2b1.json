{"sha": "c71006722e8da2db3f6a4cd80431f83cd6a6b2b1", "node_id": "C_kwDOAAsO6NoAKGM3MTAwNjcyMmU4ZGEyZGIzZjZhNGNkODA0MzFmODNjZDZhNmIyYjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-22T15:39:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-22T15:39:07Z"}, "message": "Auto merge of #1977 - saethlin:short-backtraces, r=RalfJung\n\nPrune backtraces similar to RUST_BACKTRACE=1 logic\n\nThis removes the majority of output from `cargo miri run` and `cargo miri test` in common usage.\n\n~~I've copied the logic almost directly from `std`:\nhttps://github.com/rust-lang/rust/blob/3b186511f62b0ce20e72ede0e8e13f8787155f02/library/std/src/sys_common/backtrace.rs#L76-L77~~\n\n~~It might be nice to have the \"some details were omitted\" note and a fallback to a setting where we print everything just in case this logic goes sideways, but~~\n~~1. I'm not sure where to put the note~~\n~~2. `MIRI_BACKTRACE`, `RUST_BACKTRACE`, and `RUSTC_CTFE_BACKTRACE` already do something else. Should we repurpose or add on to the semantics of `MIRI_BACKTRACE`?~~\n\n---\nBased on this tiny silly crate:\n```rust\nfn main() {\n    some_function();\n}\n\nfn some_function() {\n    unsafe {\n        let _x: &u8 = core::mem::transmute(1usize);\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {\n        unsafe {\n            let _x: &'static u8 = core::mem::transmute(1usize);\n        }\n    }\n}\n```\n\n`cargo miri run`:\nBefore:\n```\n    Finished dev [unoptimized + debuginfo] target(s) in 0.10s\n     Running `/home/ben/.cargo/bin/cargo-miri target/miri/x86_64-unknown-linux-gnu/debug/scratch`\nerror: Undefined Behavior: type validation failed: encountered a dangling reference (address 0x1 is unallocated)\n --> src/main.rs:7:23\n  |\n7 |         let _x: &u8 = core::mem::transmute(1usize);\n  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x1 is unallocated)\n  |\n  = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n  = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n\n  = note: inside `some_function` at src/main.rs:7:23\nnote: inside `main` at src/main.rs:2:5\n --> src/main.rs:2:5\n  |\n2 |     some_function();\n  |     ^^^^^^^^^^^^^^^\n  = note: inside `<fn() as std::ops::FnOnce<()>>::call_once - shim(fn())` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\n  = note: inside `std::sys_common::backtrace::__rust_begin_short_backtrace::<fn(), ()>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/sys_common/backtrace.rs:122:18\n  = note: inside closure at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/rt.rs:145:18\n  = note: inside `std::ops::function::impls::<impl std::ops::FnOnce<()> for &dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe>::call_once` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/ops/function.rs:259:13\n  = note: inside `std::panicking::r#try::do_call::<&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, i32>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:492:40\n  = note: inside `std::panicking::r#try::<i32, &dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:456:19\n  = note: inside `std::panic::catch_unwind::<&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, i32>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panic.rs:137:14\n  = note: inside closure at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/rt.rs:128:48\n  = note: inside `std::panicking::r#try::do_call::<[closure@std::rt::lang_start_internal::{closure#2}], isize>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:492:40\n  = note: inside `std::panicking::r#try::<isize, [closure@std::rt::lang_start_internal::{closure#2}]>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:456:19\n  = note: inside `std::panic::catch_unwind::<[closure@std::rt::lang_start_internal::{closure#2}], isize>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panic.rs:137:14\n  = note: inside `std::rt::lang_start_internal` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/rt.rs:128:20\n  = note: inside `std::rt::lang_start::<()>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/rt.rs:144:17\n\nerror: aborting due to previous error\n\n```\nAfter:\n```    Finished dev [unoptimized + debuginfo] target(s) in 0.10s\n     Running `/home/ben/.cargo/bin/cargo-miri target/miri/x86_64-unknown-linux-gnu/debug/scratch`\nerror: Undefined Behavior: type validation failed: encountered a dangling reference (address 0x1 is unallocated)\n --> src/main.rs:7:23\n  |\n7 |         let _x: &u8 = core::mem::transmute(1usize);\n  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x1 is unallocated)\n  |\n  = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n  = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n\n  = note: inside `some_function` at src/main.rs:7:23\nnote: inside `main` at src/main.rs:2:5\n --> src/main.rs:2:5\n  |\n2 |     some_function();\n  |     ^^^^^^^^^^^^^^^\n\nnote: Some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace.\n\nerror: aborting due to previous error\n```\n\n`cargo miri test`\nBefore:\n```\n    Finished test [unoptimized + debuginfo] target(s) in 0.00s\n     Running unittests (target/miri/x86_64-unknown-linux-gnu/debug/deps/scratch-9d7717efc37bb64c)\n\nrunning 1 test\ntest tests::it_works ... error: Undefined Behavior: type validation failed: encountered a dangling reference (address 0x1 is unallocated)\n  --> src/main.rs:16:35\n   |\n16 |             let _x: &'static u8 = core::mem::transmute(1usize);\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x1 is unallocated)\n   |\n   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n\n   = note: inside `tests::it_works` at src/main.rs:16:35\nnote: inside closure at src/main.rs:14:5\n  --> src/main.rs:14:5\n   |\n13 |       #[test]\n   |       ------- in this procedural macro expansion\n14 | /     fn it_works() {\n15 | |         unsafe {\n16 | |             let _x: &'static u8 = core::mem::transmute(1usize);\n17 | |         }\n18 | |     }\n   | |_____^\n   = note: inside `<[closure@src/main.rs:14:5: 18:6] as std::ops::FnOnce<()>>::call_once - shim` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\n   = note: inside `<fn() as std::ops::FnOnce<()>>::call_once - shim(fn())` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\n   = note: inside `tests::test::__rust_begin_short_backtrace::<fn()>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/lib.rs:575:5\n   = note: inside closure at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/lib.rs:566:30\n   = note: inside `<[closure@tests::test::run_test::{closure#1}] as std::ops::FnOnce<()>>::call_once - shim(vtable)` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\n   = note: inside `<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send> as std::ops::FnOnce<()>>::call_once` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/alloc/src/boxed.rs:1854:9\n   = note: inside `<std::panic::AssertUnwindSafe<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send>> as std::ops::FnOnce<()>>::call_once` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panic/unwind_safe.rs:271:9\n   = note: inside `std::panicking::r#try::do_call::<std::panic::AssertUnwindSafe<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send>>, ()>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:492:40\n   = note: inside `std::panicking::r#try::<(), std::panic::AssertUnwindSafe<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send>>>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:456:19\n   = note: inside `std::panic::catch_unwind::<std::panic::AssertUnwindSafe<std::boxed::Box<dyn std::ops::FnOnce() + std::marker::Send>>, ()>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panic.rs:137:14\n   = note: inside `tests::test::run_test_in_process` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/lib.rs:598:18\n   = note: inside closure at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/lib.rs:492:39\n   = note: inside `tests::test::run_test::run_test_inner` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/lib.rs:530:13\n   = note: inside `tests::test::run_test` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/lib.rs:562:28\n   = note: inside `tests::test::run_tests::<[closure@tests::test::run_tests_console::{closure#2}]>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/lib.rs:305:17\n   = note: inside `tests::test::run_tests_console` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/console.rs:290:5\n   = note: inside `tests::test::test_main` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/lib.rs:116:15\n   = note: inside `tests::test::test_main_static` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/test/src/lib.rs:135:5\n   = note: inside `main`\n   = note: inside `<fn() as std::ops::FnOnce<()>>::call_once - shim(fn())` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/ops/function.rs:227:5\n   = note: inside `std::sys_common::backtrace::__rust_begin_short_backtrace::<fn(), ()>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/sys_common/backtrace.rs:122:18\n   = note: inside closure at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/rt.rs:145:18\n   = note: inside `std::ops::function::impls::<impl std::ops::FnOnce<()> for &dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe>::call_once` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/ops/function.rs:259:13\n   = note: inside `std::panicking::r#try::do_call::<&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, i32>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:492:40\n   = note: inside `std::panicking::r#try::<i32, &dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:456:19\n   = note: inside `std::panic::catch_unwind::<&dyn std::ops::Fn() -> i32 + std::marker::Sync + std::panic::RefUnwindSafe, i32>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panic.rs:137:14\n   = note: inside closure at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/rt.rs:128:48\n   = note: inside `std::panicking::r#try::do_call::<[closure@std::rt::lang_start_internal::{closure#2}], isize>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:492:40\n   = note: inside `std::panicking::r#try::<isize, [closure@std::rt::lang_start_internal::{closure#2}]>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panicking.rs:456:19\n   = note: inside `std::panic::catch_unwind::<[closure@std::rt::lang_start_internal::{closure#2}], isize>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/panic.rs:137:14\n   = note: inside `std::rt::lang_start_internal` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/rt.rs:128:20\n   = note: inside `std::rt::lang_start::<()>` at /home/ben/.rustup/toolchains/miri/lib/rustlib/src/rust/library/std/src/rt.rs:144:17\n   = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous error\n\nerror: test failed, to rerun pass '--bin scratch'\n```\n\nAfter:\n```\n    Finished test [unoptimized + debuginfo] target(s) in 0.00s\n     Running unittests (target/miri/x86_64-unknown-linux-gnu/debug/deps/scratch-9d7717efc37bb64c)\n\nrunning 1 test\ntest tests::it_works ... error: Undefined Behavior: type validation failed: encountered a dangling reference (address 0x1 is unallocated)\n  --> src/main.rs:16:35\n   |\n16 |             let _x: &'static u8 = core::mem::transmute(1usize);\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x1 is unallocated)\n   |\n   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n\n   = note: inside `tests::it_works` at src/main.rs:16:35\nnote: inside closure at src/main.rs:14:5\n  --> src/main.rs:14:5\n   |\n13 |       #[test]\n   |       ------- in this procedural macro expansion\n14 | /     fn it_works() {\n15 | |         unsafe {\n16 | |             let _x: &'static u8 = core::mem::transmute(1usize);\n17 | |         }\n18 | |     }\n   | |_____^\n   = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nnote: Some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace.\n\nerror: aborting due to previous error\n\nerror: test failed, to rerun pass '--bin scratch'\n```", "tree": {"sha": "1f5c3101061dbc6d2d8062b494dbd75c88007685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f5c3101061dbc6d2d8062b494dbd75c88007685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1", "html_url": "https://github.com/rust-lang/rust/commit/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03b4a0c580f17497014b8e2e6dd380f43b637b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03b4a0c580f17497014b8e2e6dd380f43b637b9", "html_url": "https://github.com/rust-lang/rust/commit/d03b4a0c580f17497014b8e2e6dd380f43b637b9"}, {"sha": "19ecd130b5854ea29c50de9bd985f56e00c6718e", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ecd130b5854ea29c50de9bd985f56e00c6718e", "html_url": "https://github.com/rust-lang/rust/commit/19ecd130b5854ea29c50de9bd985f56e00c6718e"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "333ff6af889f635b52708f9cc472ca61a9a76b4e", "filename": "src/bin/miri.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=c71006722e8da2db3f6a4cd80431f83cd6a6b2b1", "patch": "@@ -29,6 +29,8 @@ use rustc_middle::{\n };\n use rustc_session::{config::ErrorOutputType, search_paths::PathKind, CtfeBacktrace};\n \n+use miri::BacktraceStyle;\n+\n struct MiriCompilerCalls {\n     miri_config: miri::MiriConfig,\n }\n@@ -462,6 +464,14 @@ fn main() {\n                     let measureme_out = arg.strip_prefix(\"-Zmiri-measureme=\").unwrap();\n                     miri_config.measureme_out = Some(measureme_out.to_string());\n                 }\n+                arg if arg.starts_with(\"-Zmiri-backtrace=\") => {\n+                    miri_config.backtrace_style = match arg.strip_prefix(\"-Zmiri-backtrace=\") {\n+                        Some(\"0\") => BacktraceStyle::Off,\n+                        Some(\"1\") => BacktraceStyle::Short,\n+                        Some(\"full\") => BacktraceStyle::Full,\n+                        _ => panic!(\"-Zmiri-backtrace may only be 0, 1, or full\"),\n+                    };\n+                }\n                 _ => {\n                     // Forward to rustc.\n                     rustc_args.push(arg);"}, {"sha": "718148060749fa80e7dcb042b75ba6af41209210", "filename": "src/diagnostics.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=c71006722e8da2db3f6a4cd80431f83cd6a6b2b1", "patch": "@@ -157,6 +157,46 @@ pub fn report_error<'tcx, 'mir>(\n         }\n     };\n \n+    let mut stacktrace = ecx.generate_stacktrace();\n+    let has_local_frame = stacktrace.iter().any(|frame| frame.instance.def_id().is_local());\n+    match ecx.machine.backtrace_style {\n+        BacktraceStyle::Off => {\n+            // Retain one frame so that we can print a span for the error itself\n+            stacktrace.truncate(1);\n+        }\n+        BacktraceStyle::Short => {\n+            // Only prune frames if there is at least one local frame. This check ensures that if\n+            // we get a backtrace that never makes it to the user code because it has detected a\n+            // bug in the Rust runtime, we don't prune away every frame.\n+            if has_local_frame {\n+                // This is part of the logic that `std` uses to select the relevant part of a\n+                // backtrace. But here, we only look for __rust_begin_short_backtrace, not\n+                // __rust_end_short_backtrace because the end symbol comes from a call to the default\n+                // panic handler.\n+                stacktrace = stacktrace\n+                    .into_iter()\n+                    .take_while(|frame| {\n+                        let def_id = frame.instance.def_id();\n+                        let path = ecx.tcx.tcx.def_path_str(def_id);\n+                        !path.contains(\"__rust_begin_short_backtrace\")\n+                    })\n+                    .collect::<Vec<_>>();\n+\n+                // After we prune frames from the bottom, there are a few left that are part of the\n+                // Rust runtime. So we remove frames until we get to a local symbol, which should be\n+                // main or a test.\n+                // This len check ensures that we don't somehow remove every frame, as doing so breaks\n+                // the primary error message.\n+                while stacktrace.len() > 1\n+                    && stacktrace.last().map_or(false, |e| !e.instance.def_id().is_local())\n+                {\n+                    stacktrace.pop();\n+                }\n+            }\n+        }\n+        BacktraceStyle::Full => {}\n+    }\n+\n     e.print_backtrace();\n     let msg = e.to_string();\n     report_msg(\n@@ -165,9 +205,17 @@ pub fn report_error<'tcx, 'mir>(\n         &if let Some(title) = title { format!(\"{}: {}\", title, msg) } else { msg.clone() },\n         msg,\n         helps,\n-        &ecx.generate_stacktrace(),\n+        &stacktrace,\n     );\n \n+    // Include a note like `std` does for short backtraces, but since we are opt-out not opt-in, we\n+    // do not include a note when backtraces are off.\n+    if ecx.machine.backtrace_style == BacktraceStyle::Short && has_local_frame {\n+        ecx.tcx.sess.diagnostic().note_without_error(\n+            \"some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\",\n+        );\n+    }\n+\n     // Debug-dump all locals.\n     for (i, frame) in ecx.active_thread_stack().iter().enumerate() {\n         trace!(\"-------------------\");"}, {"sha": "e2e85e3e757216162f53c36f4cb28434af7727ac", "filename": "src/eval.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=c71006722e8da2db3f6a4cd80431f83cd6a6b2b1", "patch": "@@ -57,6 +57,16 @@ pub enum IsolatedOp {\n     Allow,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq)]\n+pub enum BacktraceStyle {\n+    /// Prints a terser backtrace which ideally only contains relevant information.\n+    Short,\n+    /// Prints a backtrace with all possible information.\n+    Full,\n+    /// Prints only the frame that the error occurs in.\n+    Off,\n+}\n+\n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n pub struct MiriConfig {\n@@ -98,6 +108,7 @@ pub struct MiriConfig {\n     pub measureme_out: Option<String>,\n     /// Panic when unsupported functionality is encountered\n     pub panic_on_unsupported: bool,\n+    pub backtrace_style: BacktraceStyle,\n }\n \n impl Default for MiriConfig {\n@@ -121,6 +132,7 @@ impl Default for MiriConfig {\n             cmpxchg_weak_failure_rate: 0.8,\n             measureme_out: None,\n             panic_on_unsupported: false,\n+            backtrace_style: BacktraceStyle::Short,\n         }\n     }\n }"}, {"sha": "006eedde4b6f5f17ca33fc6f982c10252eba9ffb", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c71006722e8da2db3f6a4cd80431f83cd6a6b2b1", "patch": "@@ -60,7 +60,7 @@ pub use crate::diagnostics::{\n     NonHaltingDiagnostic, TerminationInfo,\n };\n pub use crate::eval::{\n-    create_ecx, eval_entry, AlignmentCheck, IsolatedOp, MiriConfig, RejectOpWith,\n+    create_ecx, eval_entry, AlignmentCheck, BacktraceStyle, IsolatedOp, MiriConfig, RejectOpWith,\n };\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n pub use crate::machine::{"}, {"sha": "a75ac844902fc507b96769e95a57db8b0f4d47ce", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71006722e8da2db3f6a4cd80431f83cd6a6b2b1/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=c71006722e8da2db3f6a4cd80431f83cd6a6b2b1", "patch": "@@ -343,6 +343,9 @@ pub struct Evaluator<'mir, 'tcx> {\n     /// functionality is encountered. If `false`, an error is propagated in the Miri application context\n     /// instead (default behavior)\n     pub(crate) panic_on_unsupported: bool,\n+\n+    /// Equivalent setting as RUST_BACKTRACE on encountering an error.\n+    pub(crate) backtrace_style: BacktraceStyle,\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n@@ -374,6 +377,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             string_cache: Default::default(),\n             exported_symbols_cache: FxHashMap::default(),\n             panic_on_unsupported: config.panic_on_unsupported,\n+            backtrace_style: config.backtrace_style,\n         }\n     }\n "}]}