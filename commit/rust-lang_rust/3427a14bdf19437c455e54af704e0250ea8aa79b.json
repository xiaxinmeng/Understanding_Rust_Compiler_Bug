{"sha": "3427a14bdf19437c455e54af704e0250ea8aa79b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MjdhMTRiZGYxOTQzN2M0NTVlNTRhZjcwNGUwMjUwZWE4YWE3OWI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-19T12:21:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-19T12:21:06Z"}, "message": "Remove support for -Zlower-128bit-ops\n\nIt is broken and unused", "tree": {"sha": "882bef9665b48dadccc9c745a993ae6b1d2b3cb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/882bef9665b48dadccc9c745a993ae6b1d2b3cb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3427a14bdf19437c455e54af704e0250ea8aa79b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3427a14bdf19437c455e54af704e0250ea8aa79b", "html_url": "https://github.com/rust-lang/rust/commit/3427a14bdf19437c455e54af704e0250ea8aa79b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3427a14bdf19437c455e54af704e0250ea8aa79b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9477a77c52af8d3dea361b3f4ac3e60653aa529", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9477a77c52af8d3dea361b3f4ac3e60653aa529", "html_url": "https://github.com/rust-lang/rust/commit/f9477a77c52af8d3dea361b3f4ac3e60653aa529"}], "stats": {"total": 328, "additions": 3, "deletions": 325}, "files": [{"sha": "cc09a0b20cfd5deae1e01e11e17244538e86417f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=3427a14bdf19437c455e54af704e0250ea8aa79b", "patch": "@@ -367,34 +367,6 @@ language_item_table! {\n \n     DebugTraitLangItem,          \"debug_trait\",        debug_trait,             Target::Trait;\n \n-    // A lang item for each of the 128-bit operators we can optionally lower.\n-    I128AddFnLangItem,           \"i128_add\",           i128_add_fn,             Target::Fn;\n-    U128AddFnLangItem,           \"u128_add\",           u128_add_fn,             Target::Fn;\n-    I128SubFnLangItem,           \"i128_sub\",           i128_sub_fn,             Target::Fn;\n-    U128SubFnLangItem,           \"u128_sub\",           u128_sub_fn,             Target::Fn;\n-    I128MulFnLangItem,           \"i128_mul\",           i128_mul_fn,             Target::Fn;\n-    U128MulFnLangItem,           \"u128_mul\",           u128_mul_fn,             Target::Fn;\n-    I128DivFnLangItem,           \"i128_div\",           i128_div_fn,             Target::Fn;\n-    U128DivFnLangItem,           \"u128_div\",           u128_div_fn,             Target::Fn;\n-    I128RemFnLangItem,           \"i128_rem\",           i128_rem_fn,             Target::Fn;\n-    U128RemFnLangItem,           \"u128_rem\",           u128_rem_fn,             Target::Fn;\n-    I128ShlFnLangItem,           \"i128_shl\",           i128_shl_fn,             Target::Fn;\n-    U128ShlFnLangItem,           \"u128_shl\",           u128_shl_fn,             Target::Fn;\n-    I128ShrFnLangItem,           \"i128_shr\",           i128_shr_fn,             Target::Fn;\n-    U128ShrFnLangItem,           \"u128_shr\",           u128_shr_fn,             Target::Fn;\n-    // And overflow versions for the operators that are checkable.\n-    // While MIR calls these Checked*, they return (T,bool), not Option<T>.\n-    I128AddoFnLangItem,          \"i128_addo\",          i128_addo_fn,            Target::Fn;\n-    U128AddoFnLangItem,          \"u128_addo\",          u128_addo_fn,            Target::Fn;\n-    I128SuboFnLangItem,          \"i128_subo\",          i128_subo_fn,            Target::Fn;\n-    U128SuboFnLangItem,          \"u128_subo\",          u128_subo_fn,            Target::Fn;\n-    I128MuloFnLangItem,          \"i128_mulo\",          i128_mulo_fn,            Target::Fn;\n-    U128MuloFnLangItem,          \"u128_mulo\",          u128_mulo_fn,            Target::Fn;\n-    I128ShloFnLangItem,          \"i128_shlo\",          i128_shlo_fn,            Target::Fn;\n-    U128ShloFnLangItem,          \"u128_shlo\",          u128_shlo_fn,            Target::Fn;\n-    I128ShroFnLangItem,          \"i128_shro\",          i128_shro_fn,            Target::Fn;\n-    U128ShroFnLangItem,          \"u128_shro\",          u128_shro_fn,            Target::Fn;\n-\n     // Align offset for stride != 1, must not panic.\n     AlignOffsetLangItem,         \"align_offset\",       align_offset_fn,         Target::Fn;\n "}, {"sha": "54d28b32accda582fce831cea2aceae9d5f22a4e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=3427a14bdf19437c455e54af704e0250ea8aa79b", "patch": "@@ -1406,10 +1406,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     saturating_float_casts: bool = (false, parse_bool, [TRACKED],\n         \"make float->int casts UB-free: numbers outside the integer type's range are clipped to \\\n          the max/min integer respectively, and NaN is mapped to 0\"),\n-    lower_128bit_ops: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"rewrite operators on i128 and u128 into lang item calls (typically provided \\\n-         by compiler-builtins) so codegen doesn't need to support them,\n-         overriding the default for the current target\"),\n     human_readable_cgu_names: bool = (false, parse_bool, [TRACKED],\n         \"generate human-readable, predictable names for codegen units\"),\n     dep_info_omit_d_target: bool = (false, parse_bool, [TRACKED],"}, {"sha": "9746f46dbaccc2b49d2efca614a26d77b2576898", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3427a14bdf19437c455e54af704e0250ea8aa79b", "patch": "@@ -21,7 +21,7 @@ use crate::middle::cstore::EncodedMetadata;\n use crate::middle::lang_items;\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n-use crate::mir::{self, Body, interpret, ProjectionKind};\n+use crate::mir::{Body, interpret, ProjectionKind};\n use crate::mir::interpret::{ConstValue, Allocation, Scalar};\n use crate::ty::subst::{Kind, InternalSubsts, SubstsRef, Subst};\n use crate::ty::ReprOptions;\n@@ -1297,40 +1297,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.get_lang_items(LOCAL_CRATE)\n     }\n \n-    /// Due to missing llvm support for lowering 128 bit math to software emulation\n-    /// (on some targets), the lowering can be done in MIR.\n-    ///\n-    /// This function only exists until said support is implemented.\n-    pub fn is_binop_lang_item(&self, def_id: DefId) -> Option<(mir::BinOp, bool)> {\n-        let items = self.lang_items();\n-        let def_id = Some(def_id);\n-        if items.i128_add_fn() == def_id { Some((mir::BinOp::Add, false)) }\n-        else if items.u128_add_fn() == def_id { Some((mir::BinOp::Add, false)) }\n-        else if items.i128_sub_fn() == def_id { Some((mir::BinOp::Sub, false)) }\n-        else if items.u128_sub_fn() == def_id { Some((mir::BinOp::Sub, false)) }\n-        else if items.i128_mul_fn() == def_id { Some((mir::BinOp::Mul, false)) }\n-        else if items.u128_mul_fn() == def_id { Some((mir::BinOp::Mul, false)) }\n-        else if items.i128_div_fn() == def_id { Some((mir::BinOp::Div, false)) }\n-        else if items.u128_div_fn() == def_id { Some((mir::BinOp::Div, false)) }\n-        else if items.i128_rem_fn() == def_id { Some((mir::BinOp::Rem, false)) }\n-        else if items.u128_rem_fn() == def_id { Some((mir::BinOp::Rem, false)) }\n-        else if items.i128_shl_fn() == def_id { Some((mir::BinOp::Shl, false)) }\n-        else if items.u128_shl_fn() == def_id { Some((mir::BinOp::Shl, false)) }\n-        else if items.i128_shr_fn() == def_id { Some((mir::BinOp::Shr, false)) }\n-        else if items.u128_shr_fn() == def_id { Some((mir::BinOp::Shr, false)) }\n-        else if items.i128_addo_fn() == def_id { Some((mir::BinOp::Add, true)) }\n-        else if items.u128_addo_fn() == def_id { Some((mir::BinOp::Add, true)) }\n-        else if items.i128_subo_fn() == def_id { Some((mir::BinOp::Sub, true)) }\n-        else if items.u128_subo_fn() == def_id { Some((mir::BinOp::Sub, true)) }\n-        else if items.i128_mulo_fn() == def_id { Some((mir::BinOp::Mul, true)) }\n-        else if items.u128_mulo_fn() == def_id { Some((mir::BinOp::Mul, true)) }\n-        else if items.i128_shlo_fn() == def_id { Some((mir::BinOp::Shl, true)) }\n-        else if items.u128_shlo_fn() == def_id { Some((mir::BinOp::Shl, true)) }\n-        else if items.i128_shro_fn() == def_id { Some((mir::BinOp::Shr, true)) }\n-        else if items.u128_shro_fn() == def_id { Some((mir::BinOp::Shr, true)) }\n-        else { None }\n-    }\n-\n     pub fn stability(self) -> &'tcx stability::Index<'tcx> {\n         self.stability_index(LOCAL_CRATE)\n     }"}, {"sha": "097bc3fabd159a291717bd7117315f668794b3a6", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=3427a14bdf19437c455e54af704e0250ea8aa79b", "patch": "@@ -230,21 +230,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &mut self,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, M::PointerTag>],\n-        dest: Option<PlaceTy<'tcx, M::PointerTag>>,\n+        _dest: Option<PlaceTy<'tcx, M::PointerTag>>,\n     ) -> InterpResult<'tcx, bool> {\n         let def_id = instance.def_id();\n-        // Some fn calls are actually BinOp intrinsics\n-        if let Some((op, oflo)) = self.tcx.is_binop_lang_item(def_id) {\n-            let dest = dest.expect(\"128 lowerings can't diverge\");\n-            let l = self.read_immediate(args[0])?;\n-            let r = self.read_immediate(args[1])?;\n-            if oflo {\n-                self.binop_with_overflow(op, l, r, dest)?;\n-            } else {\n-                self.binop_ignore_overflow(op, l, r, dest)?;\n-            }\n-            return Ok(true);\n-        } else if Some(def_id) == self.tcx.lang_items().panic_fn() {\n+        if Some(def_id) == self.tcx.lang_items().panic_fn() {\n             assert!(args.len() == 1);\n             // &(&'static str, &'static str, u32, u32)\n             let place = self.deref_operand(args[0])?;"}, {"sha": "61685f445c8dbb1392ddb644edaa98a8c639e38a", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=3427a14bdf19437c455e54af704e0250ea8aa79b", "patch": "@@ -232,13 +232,6 @@ impl Inliner<'tcx> {\n             return false;\n         }\n \n-        // Do not inline {u,i}128 lang items, codegen const eval depends\n-        // on detecting calls to these lang items and intercepting them\n-        if tcx.is_binop_lang_item(callsite.callee).is_some() {\n-            debug!(\"    not inlining 128bit integer lang item\");\n-            return false;\n-        }\n-\n         let codegen_fn_attrs = tcx.codegen_fn_attrs(callsite.callee);\n \n         let hinted = match codegen_fn_attrs.inline {"}, {"sha": "f09a77d486c7e3ceccf2634c3cc42693ea44f856", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9477a77c52af8d3dea361b3f4ac3e60653aa529/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=f9477a77c52af8d3dea361b3f4ac3e60653aa529", "patch": "@@ -1,230 +0,0 @@\n-//! Replaces 128-bit operators with lang item calls\n-\n-use rustc::hir::def_id::DefId;\n-use rustc::middle::lang_items::LangItem;\n-use rustc::mir::*;\n-use rustc::ty::{self, List, Ty, TyCtxt};\n-use rustc_data_structures::indexed_vec::{Idx};\n-use crate::transform::{MirPass, MirSource};\n-\n-pub struct Lower128Bit;\n-\n-impl MirPass for Lower128Bit {\n-    fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut Body<'tcx>) {\n-        let debugging_override = tcx.sess.opts.debugging_opts.lower_128bit_ops;\n-        let target_default = tcx.sess.host.options.i128_lowering;\n-        if !debugging_override.unwrap_or(target_default) {\n-            return\n-        }\n-\n-        self.lower_128bit_ops(tcx, body);\n-}\n-}\n-\n-impl Lower128Bit {\n-    fn lower_128bit_ops<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let mut new_blocks = Vec::new();\n-        let cur_len = body.basic_blocks().len();\n-\n-        let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n-        for block in basic_blocks.iter_mut() {\n-            for i in (0..block.statements.len()).rev() {\n-                let (lang_item, rhs_kind) =\n-                    if let Some((lang_item, rhs_kind)) =\n-                        lower_to(&block.statements[i], local_decls, tcx)\n-                    {\n-                        (lang_item, rhs_kind)\n-                    } else {\n-                        continue;\n-                    };\n-\n-                let rhs_override_ty = rhs_kind.ty(tcx);\n-                let cast_local =\n-                    match rhs_override_ty {\n-                        None => None,\n-                        Some(ty) => {\n-                            let local_decl = LocalDecl::new_internal(\n-                                ty, block.statements[i].source_info.span);\n-                            Some(local_decls.push(local_decl))\n-                        },\n-                    };\n-\n-                let storage_dead = cast_local.map(|local| {\n-                    Statement {\n-                        source_info: block.statements[i].source_info,\n-                        kind: StatementKind::StorageDead(local),\n-                    }\n-                });\n-                let after_call = BasicBlockData {\n-                    statements: storage_dead.into_iter()\n-                        .chain(block.statements.drain((i+1)..)).collect(),\n-                    is_cleanup: block.is_cleanup,\n-                    terminator: block.terminator.take(),\n-                };\n-\n-                let bin_statement = block.statements.pop().unwrap();\n-                let source_info = bin_statement.source_info;\n-                let (place, lhs, mut rhs) = match bin_statement.kind {\n-                    StatementKind::Assign(place, box rvalue) => {\n-                        match rvalue {\n-                            Rvalue::BinaryOp(_, lhs, rhs)\n-                            | Rvalue::CheckedBinaryOp(_, lhs, rhs) => (place, lhs, rhs),\n-                            _ => bug!(),\n-                        }\n-                    }\n-                    _ => bug!()\n-                };\n-\n-                if let Some(local) = cast_local {\n-                    block.statements.push(Statement {\n-                        source_info: source_info,\n-                        kind: StatementKind::StorageLive(local),\n-                    });\n-                    block.statements.push(Statement {\n-                        source_info: source_info,\n-                        kind: StatementKind::Assign(\n-                            Place::from(local),\n-                            box Rvalue::Cast(\n-                                CastKind::Misc,\n-                                rhs,\n-                                rhs_override_ty.unwrap())),\n-                    });\n-                    rhs = Operand::Move(Place::from(local));\n-                }\n-\n-                let call_did = check_lang_item_type(\n-                    lang_item, &place, &lhs, &rhs, local_decls, tcx);\n-\n-                let bb = BasicBlock::new(cur_len + new_blocks.len());\n-                new_blocks.push(after_call);\n-\n-                block.terminator =\n-                    Some(Terminator {\n-                        source_info,\n-                        kind: TerminatorKind::Call {\n-                            func: Operand::function_handle(tcx, call_did,\n-                                List::empty(), source_info.span),\n-                            args: vec![lhs, rhs],\n-                            destination: Some((place, bb)),\n-                            cleanup: None,\n-                            from_hir_call: false,\n-                        },\n-                    });\n-            }\n-        }\n-\n-        basic_blocks.extend(new_blocks);\n-    }\n-}\n-\n-fn check_lang_item_type<'tcx, D>(\n-    lang_item: LangItem,\n-    place: &Place<'tcx>,\n-    lhs: &Operand<'tcx>,\n-    rhs: &Operand<'tcx>,\n-    local_decls: &D,\n-    tcx: TyCtxt<'tcx>,\n-) -> DefId\n-where\n-    D: HasLocalDecls<'tcx>,\n-{\n-    let did = tcx.require_lang_item(lang_item);\n-    let poly_sig = tcx.fn_sig(did);\n-    let sig = poly_sig.no_bound_vars().unwrap();\n-    let lhs_ty = lhs.ty(local_decls, tcx);\n-    let rhs_ty = rhs.ty(local_decls, tcx);\n-    let place_ty = place.ty(local_decls, tcx).ty;\n-    let expected = [lhs_ty, rhs_ty, place_ty];\n-    assert_eq!(sig.inputs_and_output[..], expected,\n-        \"lang item `{}`\", tcx.def_path_str(did));\n-    did\n-}\n-\n-fn lower_to<'tcx, D>(\n-    statement: &Statement<'tcx>,\n-    local_decls: &D,\n-    tcx: TyCtxt<'tcx>,\n-) -> Option<(LangItem, RhsKind)>\n-where\n-    D: HasLocalDecls<'tcx>,\n-{\n-    match statement.kind {\n-        StatementKind::Assign(_, box Rvalue::BinaryOp(bin_op, ref lhs, _)) => {\n-            let ty = lhs.ty(local_decls, tcx);\n-            if let Some(is_signed) = sign_of_128bit(ty) {\n-                return item_for_op(bin_op, is_signed);\n-            }\n-        },\n-        StatementKind::Assign(_, box Rvalue::CheckedBinaryOp(bin_op, ref lhs, _)) => {\n-            let ty = lhs.ty(local_decls, tcx);\n-            if let Some(is_signed) = sign_of_128bit(ty) {\n-                return item_for_checked_op(bin_op, is_signed);\n-            }\n-        },\n-        _ => {},\n-    }\n-    None\n-}\n-\n-#[derive(Copy, Clone)]\n-enum RhsKind {\n-    Unchanged,\n-    ForceU128,\n-    ForceU32,\n-}\n-\n-impl RhsKind {\n-    fn ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<Ty<'tcx>> {\n-        match *self {\n-            RhsKind::Unchanged => None,\n-            RhsKind::ForceU128 => Some(tcx.types.u128),\n-            RhsKind::ForceU32 => Some(tcx.types.u32),\n-        }\n-    }\n-}\n-\n-fn sign_of_128bit(ty: Ty<'_>) -> Option<bool> {\n-    match ty.sty {\n-        ty::Int(syntax::ast::IntTy::I128) => Some(true),\n-        ty::Uint(syntax::ast::UintTy::U128) => Some(false),\n-        _ => None,\n-    }\n-}\n-\n-fn item_for_op(bin_op: BinOp, is_signed: bool) -> Option<(LangItem, RhsKind)> {\n-    let i = match (bin_op, is_signed) {\n-        (BinOp::Add, true) => (LangItem::I128AddFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Add, false) => (LangItem::U128AddFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Sub, true) => (LangItem::I128SubFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Sub, false) => (LangItem::U128SubFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Mul, true) => (LangItem::I128MulFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Mul, false) => (LangItem::U128MulFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Div, true) => (LangItem::I128DivFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Div, false) => (LangItem::U128DivFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Rem, true) => (LangItem::I128RemFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Rem, false) => (LangItem::U128RemFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Shl, true) => (LangItem::I128ShlFnLangItem, RhsKind::ForceU32),\n-        (BinOp::Shl, false) => (LangItem::U128ShlFnLangItem, RhsKind::ForceU32),\n-        (BinOp::Shr, true) => (LangItem::I128ShrFnLangItem, RhsKind::ForceU32),\n-        (BinOp::Shr, false) => (LangItem::U128ShrFnLangItem, RhsKind::ForceU32),\n-        _ => return None,\n-    };\n-    Some(i)\n-}\n-\n-fn item_for_checked_op(bin_op: BinOp, is_signed: bool) -> Option<(LangItem, RhsKind)> {\n-    let i = match (bin_op, is_signed) {\n-        (BinOp::Add, true) => (LangItem::I128AddoFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Add, false) => (LangItem::U128AddoFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Sub, true) => (LangItem::I128SuboFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Sub, false) => (LangItem::U128SuboFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Mul, true) => (LangItem::I128MuloFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Mul, false) => (LangItem::U128MuloFnLangItem, RhsKind::Unchanged),\n-        (BinOp::Shl, true) => (LangItem::I128ShloFnLangItem, RhsKind::ForceU128),\n-        (BinOp::Shl, false) => (LangItem::U128ShloFnLangItem, RhsKind::ForceU128),\n-        (BinOp::Shr, true) => (LangItem::I128ShroFnLangItem, RhsKind::ForceU128),\n-        (BinOp::Shr, false) => (LangItem::U128ShroFnLangItem, RhsKind::ForceU128),\n-        _ => bug!(\"That should be all the checked ones?\"),\n-    };\n-    Some(i)\n-}"}, {"sha": "c7e6eed1d9a2e8c6af68071d13a0f4c04de331e3", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=3427a14bdf19437c455e54af704e0250ea8aa79b", "patch": "@@ -34,7 +34,6 @@ pub mod copy_prop;\n pub mod const_prop;\n pub mod generator;\n pub mod inline;\n-pub mod lower_128bit;\n pub mod uniform_array_move_out;\n \n pub(crate) fn provide(providers: &mut Providers<'_>) {\n@@ -272,8 +271,6 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n         // From here on out, regions are gone.\n         &erase_regions::EraseRegions,\n \n-        &lower_128bit::Lower128Bit,\n-\n \n         // Optimizations begin.\n         &uniform_array_move_out::RestoreSubsliceArrayMoveOut,"}, {"sha": "e78fda61a43960e6f476ea6b80043b7a5a487154", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427a14bdf19437c455e54af704e0250ea8aa79b/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=3427a14bdf19437c455e54af704e0250ea8aa79b", "patch": "@@ -731,10 +731,6 @@ pub struct TargetOptions {\n     /// for this target unconditionally.\n     pub no_builtins: bool,\n \n-    /// Whether to lower 128-bit operations to compiler_builtins calls. Use if\n-    /// your backend only supports 64-bit and smaller math.\n-    pub i128_lowering: bool,\n-\n     /// The codegen backend to use for this target, typically \"llvm\"\n     pub codegen_backend: String,\n \n@@ -850,7 +846,6 @@ impl Default for TargetOptions {\n             requires_lto: false,\n             singlethread: false,\n             no_builtins: false,\n-            i128_lowering: false,\n             codegen_backend: \"llvm\".to_string(),\n             default_hidden_visibility: false,\n             embed_bitcode: false,"}]}