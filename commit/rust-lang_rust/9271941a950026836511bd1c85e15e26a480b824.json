{"sha": "9271941a950026836511bd1c85e15e26a480b824", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNzE5NDFhOTUwMDI2ODM2NTExYmQxYzg1ZTE1ZTI2YTQ4MGI4MjQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T13:21:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T13:21:18Z"}, "message": "Add MethodCall and FieldAccess variants to ImmediateLocation", "tree": {"sha": "972b83f69c876003df59596cb8d109dc1b28c5d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/972b83f69c876003df59596cb8d109dc1b28c5d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9271941a950026836511bd1c85e15e26a480b824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9271941a950026836511bd1c85e15e26a480b824", "html_url": "https://github.com/rust-lang/rust/commit/9271941a950026836511bd1c85e15e26a480b824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9271941a950026836511bd1c85e15e26a480b824/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbdfeeeff91b5e42d8687df09dda1d29f99b34f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdfeeeff91b5e42d8687df09dda1d29f99b34f8", "html_url": "https://github.com/rust-lang/rust/commit/dbdfeeeff91b5e42d8687df09dda1d29f99b34f8"}], "stats": {"total": 130, "additions": 81, "deletions": 49}, "files": [{"sha": "e0a7021fd3e483e98b07be4bb0e8336821f98da2", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=9271941a950026836511bd1c85e15e26a480b824", "patch": "@@ -8,7 +8,7 @@ use crate::{context::CompletionContext, Completions};\n \n /// Complete dot accesses, i.e. fields or methods.\n pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n-    let dot_receiver = match &ctx.dot_receiver {\n+    let dot_receiver = match ctx.dot_receiver() {\n         Some(expr) => expr,\n         _ => return complete_undotted_self(acc, ctx),\n     };\n@@ -30,7 +30,10 @@ pub(crate) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n }\n \n fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_trivial_path || !ctx.config.enable_self_on_the_fly {\n+    if !ctx.config.enable_self_on_the_fly {\n+        return;\n+    }\n+    if !ctx.is_trivial_path || ctx.is_path_disallowed() {\n         return;\n     }\n     ctx.scope.process_all_names(&mut |name, def| {"}, {"sha": "d72bf13d31a37c303131f3dcf0a7aa2c74be8445", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=9271941a950026836511bd1c85e15e26a480b824", "patch": "@@ -162,19 +162,19 @@ pub(crate) fn position_for_import<'a>(\n     Some(match import_candidate {\n         Some(ImportCandidate::Path(_)) => ctx.name_ref_syntax.as_ref()?.syntax(),\n         Some(ImportCandidate::TraitAssocItem(_)) => ctx.path_qual.as_ref()?.syntax(),\n-        Some(ImportCandidate::TraitMethod(_)) => ctx.dot_receiver.as_ref()?.syntax(),\n+        Some(ImportCandidate::TraitMethod(_)) => ctx.dot_receiver()?.syntax(),\n         None => ctx\n             .name_ref_syntax\n             .as_ref()\n             .map(|name_ref| name_ref.syntax())\n             .or_else(|| ctx.path_qual.as_ref().map(|path| path.syntax()))\n-            .or_else(|| ctx.dot_receiver.as_ref().map(|expr| expr.syntax()))?,\n+            .or_else(|| ctx.dot_receiver().map(|expr| expr.syntax()))?,\n     })\n }\n \n fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAssets> {\n     let current_module = ctx.scope.module()?;\n-    if let Some(dot_receiver) = &ctx.dot_receiver {\n+    if let Some(dot_receiver) = ctx.dot_receiver() {\n         ImportAssets::for_fuzzy_method_call(\n             current_module,\n             ctx.sema.type_of_expr(dot_receiver)?,"}, {"sha": "1a7a484a4cdd5935a3a41366e5885aef134a3825", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=9271941a950026836511bd1c85e15e26a480b824", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n     }\n \n     // Suggest .await syntax for types that implement Future trait\n-    if let Some(receiver) = &ctx.dot_receiver {\n+    if let Some(receiver) = ctx.dot_receiver() {\n         if let Some(ty) = ctx.sema.type_of_expr(receiver) {\n             if ty.impls_future(ctx.db) {\n                 let mut item = kw_completion(\"await\");"}, {"sha": "86bbb58e266399909bf697a7c0b69482c2e6241d", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=9271941a950026836511bd1c85e15e26a480b824", "patch": "@@ -14,6 +14,7 @@ use crate::{\n     completions::postfix::format_like::add_format_like_completions,\n     context::CompletionContext,\n     item::{Builder, CompletionKind},\n+    patterns::ImmediateLocation,\n     CompletionItem, CompletionItemKind, Completions,\n };\n \n@@ -22,13 +23,16 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n         return;\n     }\n \n-    let dot_receiver = match &ctx.dot_receiver {\n-        Some(it) => it,\n-        None => return,\n+    let (dot_receiver, receiver_is_ambiguous_float_literal) = match &ctx.completion_location {\n+        Some(ImmediateLocation::MethodCall { receiver: Some(it) }) => (it, false),\n+        Some(ImmediateLocation::FieldAccess {\n+            receiver: Some(it),\n+            receiver_is_ambiguous_float_literal,\n+        }) => (it, *receiver_is_ambiguous_float_literal),\n+        _ => return,\n     };\n \n-    let receiver_text =\n-        get_receiver_text(dot_receiver, ctx.dot_receiver_is_ambiguous_float_literal);\n+    let receiver_text = get_receiver_text(dot_receiver, receiver_is_ambiguous_float_literal);\n \n     let receiver_ty = match ctx.sema.type_of_expr(&dot_receiver) {\n         Some(it) => it,\n@@ -123,8 +127,7 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     // The rest of the postfix completions create an expression that moves an argument,\n     // so it's better to consider references now to avoid breaking the compilation\n     let dot_receiver = include_references(dot_receiver);\n-    let receiver_text =\n-        get_receiver_text(&dot_receiver, ctx.dot_receiver_is_ambiguous_float_literal);\n+    let receiver_text = get_receiver_text(&dot_receiver, receiver_is_ambiguous_float_literal);\n \n     match try_enum {\n         Some(try_enum) => match try_enum {"}, {"sha": "eeb4333f851e7dc25e2dd0116487638d179612fe", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=9271941a950026836511bd1c85e15e26a480b824", "patch": "@@ -80,9 +80,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_expr: bool,\n     /// Something is typed at the \"top\" level, in module or impl/trait.\n     pub(super) is_new_item: bool,\n-    /// The receiver if this is a field or method access, i.e. writing something.$0\n-    pub(super) dot_receiver: Option<ast::Expr>,\n-    pub(super) dot_receiver_is_ambiguous_float_literal: bool,\n     /// If this is a call (method or function) in particular, i.e. the () are already there.\n     pub(super) is_call: bool,\n     /// Like `is_call`, but for tuple patterns.\n@@ -159,8 +156,6 @@ impl<'a> CompletionContext<'a> {\n             can_be_stmt: false,\n             is_expr: false,\n             is_new_item: false,\n-            dot_receiver: None,\n-            dot_receiver_is_ambiguous_float_literal: false,\n             is_call: false,\n             is_pattern_call: false,\n             is_macro_call: false,\n@@ -255,6 +250,22 @@ impl<'a> CompletionContext<'a> {\n         )\n     }\n \n+    pub(crate) fn has_dot_receiver(&self) -> bool {\n+        matches!(\n+            &self.completion_location,\n+            Some(ImmediateLocation::FieldAccess { receiver, .. }) | Some(ImmediateLocation::MethodCall { receiver })\n+                if receiver.is_some()\n+        )\n+    }\n+\n+    pub(crate) fn dot_receiver(&self) -> Option<&ast::Expr> {\n+        match &self.completion_location {\n+            Some(ImmediateLocation::MethodCall { receiver })\n+            | Some(ImmediateLocation::FieldAccess { receiver, .. }) => receiver.as_ref(),\n+            _ => None,\n+        }\n+    }\n+\n     pub(crate) fn expects_use_tree(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::Use))\n     }\n@@ -267,6 +278,7 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.completion_location, Some(ImmediateLocation::ItemList))\n     }\n \n+    //         fn expects_value(&self) -> bool {\n     pub(crate) fn expects_expression(&self) -> bool {\n         self.is_expr\n     }\n@@ -623,33 +635,8 @@ impl<'a> CompletionContext<'a> {\n                 .unwrap_or(false);\n             self.is_expr = path.syntax().parent().and_then(ast::PathExpr::cast).is_some();\n         }\n-\n-        if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n-            // The receiver comes before the point of insertion of the fake\n-            // ident, so it should have the same range in the non-modified file\n-            self.dot_receiver = field_expr\n-                .expr()\n-                .map(|e| e.syntax().text_range())\n-                .and_then(|r| find_node_with_range(original_file, r));\n-            self.dot_receiver_is_ambiguous_float_literal =\n-                if let Some(ast::Expr::Literal(l)) = &self.dot_receiver {\n-                    match l.kind() {\n-                        ast::LiteralKind::FloatNumber { .. } => l.token().text().ends_with('.'),\n-                        _ => false,\n-                    }\n-                } else {\n-                    false\n-                };\n-        }\n-\n-        if let Some(method_call_expr) = ast::MethodCallExpr::cast(parent) {\n-            // As above\n-            self.dot_receiver = method_call_expr\n-                .receiver()\n-                .map(|e| e.syntax().text_range())\n-                .and_then(|r| find_node_with_range(original_file, r));\n-            self.is_call = true;\n-        }\n+        self.is_call |=\n+            matches!(self.completion_location, Some(ImmediateLocation::MethodCall { .. }));\n     }\n }\n "}, {"sha": "bf3a3f61ebbb8578ea5807270667d6eadb5c19cc", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=9271941a950026836511bd1c85e15e26a480b824", "patch": "@@ -7,7 +7,7 @@ use syntax::{\n     ast::{self, LoopBodyOwner},\n     match_ast, AstNode, Direction, SyntaxElement,\n     SyntaxKind::*,\n-    SyntaxNode, SyntaxToken, TextSize, T,\n+    SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n };\n \n #[cfg(test)]\n@@ -37,6 +37,15 @@ pub(crate) enum ImmediateLocation {\n     // Fake file ast node\n     ModDeclaration(ast::Module),\n     // Original file ast node\n+    MethodCall {\n+        receiver: Option<ast::Expr>,\n+    },\n+    // Original file ast node\n+    FieldAccess {\n+        receiver: Option<ast::Expr>,\n+        receiver_is_ambiguous_float_literal: bool,\n+    },\n+    // Original file ast node\n     /// The record expr of the field name we are completing\n     RecordExpr(ast::RecordExpr),\n     // Original file ast node\n@@ -164,12 +173,38 @@ pub(crate) fn determine_location(\n                 Some(TRAIT) => ImmediateLocation::Trait,\n                 _ => return None,\n             },\n-            ast::Module(it) => if it.item_list().is_none() {\n+            ast::Module(it) => {\n+                if it.item_list().is_none() {\n                     ImmediateLocation::ModDeclaration(it)\n                 } else {\n-                    return None\n+                    return None;\n+                }\n             },\n             ast::Attr(it) => ImmediateLocation::Attribute(it),\n+            ast::FieldExpr(it) => {\n+                let receiver = it\n+                    .expr()\n+                    .map(|e| e.syntax().text_range())\n+                    .and_then(|r| find_node_with_range(original_file, r));\n+                let receiver_is_ambiguous_float_literal = if let Some(ast::Expr::Literal(l)) = &receiver {\n+                    match l.kind() {\n+                        ast::LiteralKind::FloatNumber { .. } => l.token().text().ends_with('.'),\n+                        _ => false,\n+                    }\n+                } else {\n+                    false\n+                };\n+                ImmediateLocation::FieldAccess {\n+                    receiver,\n+                    receiver_is_ambiguous_float_literal,\n+                }\n+            },\n+            ast::MethodCallExpr(it) => ImmediateLocation::MethodCall {\n+                receiver: it\n+                    .receiver()\n+                    .map(|e| e.syntax().text_range())\n+                    .and_then(|r| find_node_with_range(original_file, r)),\n+            },\n             _ => return None,\n         }\n     };\n@@ -194,6 +229,10 @@ fn maximize_name_ref(name_ref: &ast::NameRef) -> SyntaxNode {\n     name_ref.syntax().clone()\n }\n \n+fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Option<N> {\n+    syntax.covering_element(range).ancestors().find_map(N::cast)\n+}\n+\n pub(crate) fn inside_impl_trait_block(element: SyntaxElement) -> bool {\n     // Here we search `impl` keyword up through the all ancestors, unlike in `has_impl_parent`,\n     // where we only check the first parent with different text range."}, {"sha": "1abeed96d7d3a45f25c6c294326a38dd2842deba", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9271941a950026836511bd1c85e15e26a480b824/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=9271941a950026836511bd1c85e15e26a480b824", "patch": "@@ -154,7 +154,7 @@ impl<'a> FunctionRender<'a> {\n         };\n \n         let mut params_pats = Vec::new();\n-        let params_ty = if self.ctx.completion.dot_receiver.is_some() || self.receiver.is_some() {\n+        let params_ty = if self.ctx.completion.has_dot_receiver() || self.receiver.is_some() {\n             self.func.method_params(self.ctx.db()).unwrap_or_default()\n         } else {\n             if let Some(s) = ast_params.self_param() {"}]}