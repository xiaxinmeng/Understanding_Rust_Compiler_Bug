{"sha": "f0c67951d076db8272f7a52f4d2596ae77b3311d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYzY3OTUxZDA3NmRiODI3MmY3YTUyZjRkMjU5NmFlNzdiMzMxMWQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-07-13T00:53:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-07-13T01:10:20Z"}, "message": "Make BitSlice's `Word` properly generic.\n\nCurrently `Word` is `usize`, and there are various places in the code\nthat assume this.\n\nThis patch mostly just changes `usize` occurrences to `Word`. Most of\nthe changes were found as compile errors when I changed `Word` to a type\nother than `usize`, but there was one non-obvious case in\nlibrustc_mir/dataflow/mod.rs that caused bounds check failures before I\nfixed it.", "tree": {"sha": "056927fe4e9c12ee15c4f2f564ef6a83f52e2f03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/056927fe4e9c12ee15c4f2f564ef6a83f52e2f03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0c67951d076db8272f7a52f4d2596ae77b3311d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c67951d076db8272f7a52f4d2596ae77b3311d", "html_url": "https://github.com/rust-lang/rust/commit/f0c67951d076db8272f7a52f4d2596ae77b3311d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0c67951d076db8272f7a52f4d2596ae77b3311d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05742ffb432adb0278bcb7262251cec9657d4067", "url": "https://api.github.com/repos/rust-lang/rust/commits/05742ffb432adb0278bcb7262251cec9657d4067", "html_url": "https://github.com/rust-lang/rust/commit/05742ffb432adb0278bcb7262251cec9657d4067"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "5b5dd907cb760a9475f22b14811baccf2f58fc2c", "filename": "src/librustc_data_structures/bitslice.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_data_structures%2Fbitslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_data_structures%2Fbitslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbitslice.rs?ref=f0c67951d076db8272f7a52f4d2596ae77b3311d", "patch": "@@ -79,7 +79,7 @@ fn bit_lookup(bit: usize) -> BitLookup {\n }\n \n \n-fn bit_str(bit: Word) -> String {\n+fn bit_str(bit: usize) -> String {\n     let byte = bit >> 3;\n     let lobits = 1 << (bit & 0b111);\n     format!(\"[{}:{}-{:02x}]\", bit, byte, lobits)\n@@ -116,8 +116,8 @@ pub fn bits_to_string(words: &[Word], bits: usize) -> String {\n }\n \n #[inline]\n-pub fn bitwise<Op:BitwiseOperator>(out_vec: &mut [usize],\n-                                   in_vec: &[usize],\n+pub fn bitwise<Op:BitwiseOperator>(out_vec: &mut [Word],\n+                                   in_vec: &[Word],\n                                    op: &Op) -> bool {\n     assert_eq!(out_vec.len(), in_vec.len());\n     let mut changed = false;\n@@ -132,21 +132,21 @@ pub fn bitwise<Op:BitwiseOperator>(out_vec: &mut [usize],\n \n pub trait BitwiseOperator {\n     /// Applies some bit-operation pointwise to each of the bits in the two inputs.\n-    fn join(&self, pred1: usize, pred2: usize) -> usize;\n+    fn join(&self, pred1: Word, pred2: Word) -> Word;\n }\n \n pub struct Intersect;\n impl BitwiseOperator for Intersect {\n     #[inline]\n-    fn join(&self, a: usize, b: usize) -> usize { a & b }\n+    fn join(&self, a: Word, b: Word) -> Word { a & b }\n }\n pub struct Union;\n impl BitwiseOperator for Union {\n     #[inline]\n-    fn join(&self, a: usize, b: usize) -> usize { a | b }\n+    fn join(&self, a: Word, b: Word) -> Word { a | b }\n }\n pub struct Subtract;\n impl BitwiseOperator for Subtract {\n     #[inline]\n-    fn join(&self, a: usize, b: usize) -> usize { a & !b }\n+    fn join(&self, a: Word, b: Word) -> Word { a & !b }\n }"}, {"sha": "c7513ac88163aa11bd9a2b88902552f61cb4747a", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=f0c67951d076db8272f7a52f4d2596ae77b3311d", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n \n impl<'a, 'tcx> BitwiseOperator for HaveBeenBorrowedLocals<'a, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // \"maybe\" means we union effects of both preds\n     }\n }"}, {"sha": "dbdf5b4e096da8186a5801727154d89797463bac", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=f0c67951d076db8272f7a52f4d2596ae77b3311d", "patch": "@@ -20,7 +20,7 @@ use rustc::ty::TyCtxt;\n use rustc::ty::{RegionKind, RegionVid};\n use rustc::ty::RegionKind::ReScope;\n \n-use rustc_data_structures::bitslice::BitwiseOperator;\n+use rustc_data_structures::bitslice::{BitwiseOperator, Word};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_set::IdxSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -370,7 +370,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for Borrows<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // union effects of preds when computing reservations\n     }\n }"}, {"sha": "ee3bba840c67bfbfe19d79074103aee29501524e", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=f0c67951d076db8272f7a52f4d2596ae77b3311d", "patch": "@@ -14,7 +14,7 @@\n \n use rustc::ty::TyCtxt;\n use rustc::mir::{self, Mir, Location};\n-use rustc_data_structures::bitslice::{BitwiseOperator};\n+use rustc_data_structures::bitslice::{BitwiseOperator, Word};\n use rustc_data_structures::indexed_set::{IdxSet};\n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -663,35 +663,35 @@ impl<'a, 'gcx, 'tcx> BitDenotation for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // \"maybe\" means we union effects of both preds\n     }\n }\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // \"maybe\" means we union effects of both preds\n     }\n }\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 & pred2 // \"definitely\" means we intersect effects of both preds\n     }\n }\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for MovingOutStatements<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // moves from both preds are in scope\n     }\n }\n \n impl<'a, 'gcx, 'tcx> BitwiseOperator for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // inits from both preds are in scope\n     }\n }"}, {"sha": "29548051a4d927e73b36c74af845fa84671a3a92", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=f0c67951d076db8272f7a52f4d2596ae77b3311d", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> BitDenotation for MaybeStorageLive<'a, 'tcx> {\n \n impl<'a, 'tcx> BitwiseOperator for MaybeStorageLive<'a, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: usize, pred2: usize) -> usize {\n+    fn join(&self, pred1: Word, pred2: Word) -> Word {\n         pred1 | pred2 // \"maybe\" means we union effects of both preds\n     }\n }"}, {"sha": "f58609aa9a5163403d6d426cd66d91732a5e1809", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c67951d076db8272f7a52f4d2596ae77b3311d/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=f0c67951d076db8272f7a52f4d2596ae77b3311d", "patch": "@@ -12,7 +12,7 @@ use syntax::ast::{self, MetaItem};\n \n use rustc_data_structures::indexed_set::{IdxSet, IdxSetBuf};\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_data_structures::bitslice::{bitwise, BitwiseOperator};\n+use rustc_data_structures::bitslice::{bitwise, BitwiseOperator, Word};\n use rustc_data_structures::work_queue::WorkQueue;\n \n use rustc::ty::{self, TyCtxt};\n@@ -467,7 +467,7 @@ pub struct AllSets<E: Idx> {\n     bits_per_block: usize,\n \n     /// Number of words associated with each block entry\n-    /// equal to bits_per_block / usize::BITS, rounded up.\n+    /// equal to bits_per_block / (mem::size_of::<Word> * 8), rounded up.\n     words_per_block: usize,\n \n     /// For each block, bits generated by executing the statements in\n@@ -734,9 +734,9 @@ impl<'a, 'tcx, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n                dead_unwinds: &'a IdxSet<mir::BasicBlock>,\n                denotation: D) -> Self where D: InitialFlow {\n         let bits_per_block = denotation.bits_per_block();\n-        let usize_bits = mem::size_of::<usize>() * 8;\n-        let words_per_block = (bits_per_block + usize_bits - 1) / usize_bits;\n-        let bits_per_block_rounded_up = words_per_block * usize_bits; // a multiple of word size\n+        let bits_per_word = mem::size_of::<Word>() * 8;\n+        let words_per_block = (bits_per_block + bits_per_word - 1) / bits_per_word;\n+        let bits_per_block_rounded_up = words_per_block * bits_per_word; // a multiple of word size\n         let num_blocks = mir.basic_blocks().len();\n         let num_overall = num_blocks * bits_per_block_rounded_up;\n "}]}