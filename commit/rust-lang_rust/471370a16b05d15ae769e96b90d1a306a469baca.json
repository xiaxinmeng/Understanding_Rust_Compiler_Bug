{"sha": "471370a16b05d15ae769e96b90d1a306a469baca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTM3MGExNmIwNWQxNWFlNzY5ZTk2YjkwZDFhMzA2YTQ2OWJhY2E=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-04T23:04:26Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-04T23:05:07Z"}, "message": "Fix last nits", "tree": {"sha": "4af32b3b2db269bc6dcbe0dfb8cde780e87d7a8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af32b3b2db269bc6dcbe0dfb8cde780e87d7a8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/471370a16b05d15ae769e96b90d1a306a469baca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/471370a16b05d15ae769e96b90d1a306a469baca", "html_url": "https://github.com/rust-lang/rust/commit/471370a16b05d15ae769e96b90d1a306a469baca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/471370a16b05d15ae769e96b90d1a306a469baca/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2919e3268674f832883631a0476a2379768d55e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2919e3268674f832883631a0476a2379768d55e8", "html_url": "https://github.com/rust-lang/rust/commit/2919e3268674f832883631a0476a2379768d55e8"}], "stats": {"total": 103, "additions": 54, "deletions": 49}, "files": [{"sha": "d23f96bd36f23b423eba91fdedafbb7fceda9dff", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/471370a16b05d15ae769e96b90d1a306a469baca/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471370a16b05d15ae769e96b90d1a306a469baca/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=471370a16b05d15ae769e96b90d1a306a469baca", "patch": "@@ -1581,7 +1581,8 @@ pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> {\n                     \"type_macros\",\n                     t.span,\n                     \"type macros are experimental (see issue: #27336)\");\n-                t\n+\n+                DummyResult::raw_ty(t.span)\n             }\n         }\n         _ => t"}, {"sha": "f854e540ee83de8449c5248786260b1e5ed71f4c", "filename": "src/test/compile-fail/type-macros-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/471370a16b05d15ae769e96b90d1a306a469baca/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471370a16b05d15ae769e96b90d1a306a469baca/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs?ref=471370a16b05d15ae769e96b90d1a306a469baca", "patch": "@@ -14,6 +14,7 @@ macro_rules! Id {\n \n struct Foo<T> {\n     x: Id!(T)\n+    //~^ ERROR: type macros are experimental (see issue: #27336)\n }\n \n fn main() {"}, {"sha": "803b0eae99e887f1ff72a0fdc86c8856354ab1e2", "filename": "src/test/run-pass/type-macros-hlist.rs", "status": "modified", "additions": 51, "deletions": 48, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/471370a16b05d15ae769e96b90d1a306a469baca/src%2Ftest%2Frun-pass%2Ftype-macros-hlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471370a16b05d15ae769e96b90d1a306a469baca/src%2Ftest%2Frun-pass%2Ftype-macros-hlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-macros-hlist.rs?ref=471370a16b05d15ae769e96b90d1a306a469baca", "patch": "@@ -13,74 +13,77 @@\n use std::ops::*;\n \n #[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n-struct Nil; // empty HList\n+struct Nil;\n+ // empty HList\n #[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n-struct Cons<H, T: HList>(H, T); // cons cell of HList\n+struct Cons<H, T: HList>(H, T);\n+ // cons cell of HList\n \n-// trait to classify valid HLists\n-trait HList {}\n-impl HList for Nil {}\n-impl<H, T: HList> HList for Cons<H, T> {}\n+ // trait to classify valid HLists\n+trait HList { }\n+impl HList for Nil { }\n+impl <H, T: HList> HList for Cons<H, T> { }\n \n // term-level macro for HLists\n-macro_rules! hlist {\n-        {} => { Nil };\n-        { $head:expr } => { Cons($head, Nil) };\n-        { $head:expr, $($tail:expr),* } => { Cons($head, hlist!($($tail),*)) };\n-}\n+macro_rules! hlist({  } => { Nil } ; { $ head : expr } => {\n+                   Cons ( $ head , Nil ) } ; {\n+                   $ head : expr , $ ( $ tail : expr ) , * } => {\n+                   Cons ( $ head , hlist ! ( $ ( $ tail ) , * ) ) } ;);\n \n // type-level macro for HLists\n-macro_rules! HList {\n-        {} => { Nil };\n-        { $head:ty } => { Cons<$head, Nil> };\n-        { $head:ty, $($tail:ty),* } => { Cons<$head, HList!($($tail),*)> };\n-}\n+macro_rules! HList({  } => { Nil } ; { $ head : ty } => {\n+                   Cons < $ head , Nil > } ; {\n+                   $ head : ty , $ ( $ tail : ty ) , * } => {\n+                   Cons < $ head , HList ! ( $ ( $ tail ) , * ) > } ;);\n \n // nil case for HList append\n-impl<Ys: HList> Add<Ys> for Nil {\n-    type Output = Ys;\n+impl <Ys: HList> Add<Ys> for Nil {\n+    type\n+    Output\n+    =\n+    Ys;\n \n-    fn add(self, rhs: Ys) -> Ys {\n-        rhs\n-    }\n+    fn add(self, rhs: Ys) -> Ys { rhs }\n }\n \n // cons case for HList append\n-impl<Rec: HList + Sized, X, Xs: HList, Ys: HList> Add<Ys> for Cons<X, Xs> where\n-    Xs: Add<Ys, Output = Rec>,\n-{\n-    type Output = Cons<X, Rec>;\n+impl <Rec: HList + Sized, X, Xs: HList, Ys: HList> Add<Ys> for Cons<X, Xs>\n+ where Xs: Add<Ys, Output = Rec> {\n+    type\n+    Output\n+    =\n+    Cons<X, Rec>;\n \n-    fn add(self, rhs: Ys) -> Cons<X, Rec> {\n-        Cons(self.0, self.1 + rhs)\n-    }\n+    fn add(self, rhs: Ys) -> Cons<X, Rec> { Cons(self.0, self.1 + rhs) }\n }\n \n // type macro Expr allows us to expand the + operator appropriately\n-macro_rules! Expr {\n-        { ( $($LHS:tt)+ ) } => { Expr!($($LHS)+) };\n-        { HList ! [ $($LHS:tt)* ] + $($RHS:tt)+ } => {\n-            <Expr!(HList![$($LHS)*]) as Add<Expr!($($RHS)+)>>::Output\n-        };\n-        { $LHS:tt + $($RHS:tt)+ } => { <Expr!($LHS) as Add<Expr!($($RHS)+)>>::Output };\n-        { $LHS:ty } => { $LHS };\n-}\n+macro_rules! Expr({ ( $ ( $ LHS : tt ) + ) } => { Expr ! ( $ ( $ LHS ) + ) } ;\n+                  { HList ! [ $ ( $ LHS : tt ) * ] + $ ( $ RHS : tt ) + } => {\n+                  < Expr ! ( HList ! [ $ ( $ LHS ) * ] ) as Add < Expr ! (\n+                  $ ( $ RHS ) + ) >> :: Output } ; {\n+                  $ LHS : tt + $ ( $ RHS : tt ) + } => {\n+                  < Expr ! ( $ LHS ) as Add < Expr ! ( $ ( $ RHS ) + ) >> ::\n+                  Output } ; { $ LHS : ty } => { $ LHS } ;);\n \n // test demonstrating term level `xs + ys` and type level `Expr!(Xs + Ys)`\n fn main() {\n-    fn aux<Xs: HList, Ys: HList>(xs: Xs, ys: Ys) -> Expr!(Xs + Ys)\n-        where Xs: Add<Ys> {\n-            xs + ys\n-        }\n+    fn aux<Xs: HList, Ys: HList>(xs: Xs, ys: Ys) -> Expr!(Xs + Ys) where\n+     Xs: Add<Ys> {\n+        xs + ys\n+    }\n \n-    let xs: HList![&str, bool, Vec<u64>] = hlist![\"foo\", false, vec![]];\n-    let ys: HList![u64, [u8; 3], ()] = hlist![0, [0, 1, 2], ()];\n+    let xs: HList!(& str , bool , Vec < u64 >) =\n+        hlist!(\"foo\" , false , vec ! [  ]);\n+    let ys: HList!(u64 , [ u8 ; 3 ] , (  )) =\n+        hlist!(0 , [ 0 , 1 , 2 ] , (  ));\n \n     // demonstrate recursive expansion of Expr!\n-    let zs: Expr!((HList![&str] + HList![bool] + HList![Vec<u64>]) +\n-                  (HList![u64] + HList![[u8; 3], ()]) +\n-                  HList![])\n-        = aux(xs, ys);\n-    assert_eq!(zs, hlist![\"foo\", false, vec![], 0, [0, 1, 2], ()])\n+    let zs:\n+            Expr!((\n+                  HList ! [ & str ] + HList ! [ bool ] + HList ! [ Vec < u64 >\n+                  ] ) + ( HList ! [ u64 ] + HList ! [ [ u8 ; 3 ] , (  ) ] ) +\n+                  HList ! [  ]) = aux(xs, ys);\n+    assert_eq!(zs , hlist ! [\n+               \"foo\" , false , vec ! [  ] , 0 , [ 0 , 1 , 2 ] , (  ) ])\n }\n-"}]}