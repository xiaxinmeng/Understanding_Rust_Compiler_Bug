{"sha": "c7c37debe4b7827234642df3c1ed378b7c3e1849", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YzM3ZGViZTRiNzgyNzIzNDY0MmRmM2MxZWQzNzhiN2MzZTE4NDk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-09T00:17:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-09T00:17:31Z"}, "message": "syntax: Use a ring buffer instead of a dvec and save a bunch of copies. Shaves a second or two off rustc.", "tree": {"sha": "fa86ebc8f43bb693f43156db16979d0213b47e22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa86ebc8f43bb693f43156db16979d0213b47e22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7c37debe4b7827234642df3c1ed378b7c3e1849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c37debe4b7827234642df3c1ed378b7c3e1849", "html_url": "https://github.com/rust-lang/rust/commit/c7c37debe4b7827234642df3c1ed378b7c3e1849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7c37debe4b7827234642df3c1ed378b7c3e1849/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcae39ba37b212d4f85e251082205cedc6b38ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcae39ba37b212d4f85e251082205cedc6b38ef", "html_url": "https://github.com/rust-lang/rust/commit/cdcae39ba37b212d4f85e251082205cedc6b38ef"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "a6c32f99a72430c94dc1b81e02e5945b6c2f8019", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c7c37debe4b7827234642df3c1ed378b7c3e1849/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c37debe4b7827234642df3c1ed378b7c3e1849/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c7c37debe4b7827234642df3c1ed378b7c3e1849", "patch": "@@ -70,7 +70,9 @@ class parser {\n     let mut token: token::token;\n     let mut span: span;\n     let mut last_span: span;\n-    let buffer: dvec<{tok: token::token, span: span}>;\n+    let mut buffer: [mut {tok: token::token, span: span}]/4;\n+    let mut buffer_start: int;\n+    let mut buffer_end: int;\n     let mut restriction: restriction;\n     let reader: reader;\n     let keywords: hashmap<str, ()>;\n@@ -86,7 +88,14 @@ class parser {\n         self.token = tok0.tok;\n         self.span = span0;\n         self.last_span = span0;\n-        self.buffer = dvec::dvec();\n+        self.buffer = [mut\n+            {tok: tok0.tok, span: span0},\n+            {tok: tok0.tok, span: span0},\n+            {tok: tok0.tok, span: span0},\n+            {tok: tok0.tok, span: span0}\n+        ]/4;\n+        self.buffer_start = 0;\n+        self.buffer_end = 0;\n         self.restriction = UNRESTRICTED;\n         self.reader = rdr;\n         self.keywords = token::keyword_table();\n@@ -98,12 +107,13 @@ class parser {\n \n     fn bump() {\n         self.last_span = self.span;\n-        if self.buffer.len() == 0u {\n+        if self.buffer_start == self.buffer_end {\n             let next = lexer::next_token(self.reader);\n             self.token = next.tok;\n             self.span = mk_sp(next.chpos, self.reader.chpos);\n         } else {\n-            let next = self.buffer.shift();\n+            let next = self.buffer[self.buffer_start];\n+            self.buffer_start = (self.buffer_start + 1) & 3;\n             self.token = next.tok;\n             self.span = next.span;\n         }\n@@ -112,13 +122,21 @@ class parser {\n         self.token = next;\n         self.span = mk_sp(lo, hi);\n     }\n+    fn buffer_length() -> int {\n+        if self.buffer_start <= self.buffer_end {\n+            ret self.buffer_end - self.buffer_start;\n+        }\n+        ret (4 - self.buffer_start) + self.buffer_end;\n+    }\n     fn look_ahead(distance: uint) -> token::token {\n-        while self.buffer.len() < distance {\n+        let dist = distance as int;\n+        while self.buffer_length() < dist {\n             let next = lexer::next_token(self.reader);\n             let sp = mk_sp(next.chpos, self.reader.chpos);\n-            self.buffer.push({tok: next.tok, span: sp});\n+            self.buffer[self.buffer_end] = {tok: next.tok, span: sp};\n+            self.buffer_end = (self.buffer_end + 1) & 3;\n         }\n-        ret self.buffer[distance - 1u].tok;\n+        ret copy self.buffer[(self.buffer_start + dist - 1) & 3].tok;\n     }\n     fn fatal(m: str) -> ! {\n         self.sess.span_diagnostic.span_fatal(copy self.span, m)"}]}