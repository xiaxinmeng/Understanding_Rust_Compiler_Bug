{"sha": "19c5c74951db8673aa3e3edba8393ce90346f96f", "node_id": "C_kwDOAAsO6NoAKDE5YzVjNzQ5NTFkYjg2NzNhYTNlM2VkYmE4MzkzY2U5MDM0NmY5NmY", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-11-06T17:59:06Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-11-06T21:06:21Z"}, "message": "refactor: dedupe & simplify ty alias formatting", "tree": {"sha": "ed489b345142b0e540b5add80bf3aea8c5eb1ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed489b345142b0e540b5add80bf3aea8c5eb1ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c5c74951db8673aa3e3edba8393ce90346f96f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c5c74951db8673aa3e3edba8393ce90346f96f", "html_url": "https://github.com/rust-lang/rust/commit/19c5c74951db8673aa3e3edba8393ce90346f96f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c5c74951db8673aa3e3edba8393ce90346f96f/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d50e7c7606efca32bd937a4c60772a616fdbc33", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d50e7c7606efca32bd937a4c60772a616fdbc33", "html_url": "https://github.com/rust-lang/rust/commit/4d50e7c7606efca32bd937a4c60772a616fdbc33"}], "stats": {"total": 245, "additions": 96, "deletions": 149}, "files": [{"sha": "13d8a416a1efcada1dd0767dd44cbb148621e041", "filename": "src/items.rs", "status": "modified", "additions": 73, "deletions": 91, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/19c5c74951db8673aa3e3edba8393ce90346f96f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c5c74951db8673aa3e3edba8393ce90346f96f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=19c5c74951db8673aa3e3edba8393ce90346f96f", "patch": "@@ -1185,18 +1185,6 @@ pub(crate) fn format_trait(\n     }\n }\n \n-struct OpaqueTypeBounds<'a> {\n-    generic_bounds: &'a ast::GenericBounds,\n-}\n-\n-impl<'a> Rewrite for OpaqueTypeBounds<'a> {\n-    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        self.generic_bounds\n-            .rewrite(context, shape)\n-            .map(|s| format!(\"impl {}\", s))\n-    }\n-}\n-\n pub(crate) struct TraitAliasBounds<'a> {\n     generic_bounds: &'a ast::GenericBounds,\n     generics: &'a ast::Generics,\n@@ -1518,17 +1506,79 @@ fn format_tuple_struct(\n     Some(result)\n }\n \n-pub(crate) fn rewrite_type<R: Rewrite>(\n-    context: &RewriteContext<'_>,\n+pub(crate) enum ItemVisitorKind<'a> {\n+    Item(&'a ast::Item),\n+    AssocTraitItem(&'a ast::AssocItem),\n+    AssocImplItem(&'a ast::AssocItem),\n+    ForeignItem(&'a ast::ForeignItem),\n+}\n+\n+struct TyAliasRewriteInfo<'c, 'g>(\n+    &'c RewriteContext<'c>,\n+    Indent,\n+    &'g ast::Generics,\n+    symbol::Ident,\n+    Span,\n+);\n+\n+pub(crate) fn rewrite_type_alias<'a, 'b>(\n+    ty_alias_kind: &ast::TyAliasKind,\n+    context: &RewriteContext<'a>,\n     indent: Indent,\n-    ident: symbol::Ident,\n-    vis: &ast::Visibility,\n-    generics: &ast::Generics,\n+    visitor_kind: &ItemVisitorKind<'b>,\n+    span: Span,\n+) -> Option<String> {\n+    use ItemVisitorKind::*;\n+\n+    let ast::TyAliasKind(defaultness, ref generics, ref generic_bounds, ref ty) = *ty_alias_kind;\n+    let ty_opt = ty.as_ref().map(|t| &**t);\n+    let (ident, vis) = match visitor_kind {\n+        Item(i) => (i.ident, &i.vis),\n+        AssocTraitItem(i) | AssocImplItem(i) => (i.ident, &i.vis),\n+        ForeignItem(i) => (i.ident, &i.vis),\n+    };\n+    let rw_info = &TyAliasRewriteInfo(context, indent, generics, ident, span);\n+\n+    // Type Aliases are formatted slightly differently depending on the context\n+    // in which they appear, whether they are opaque, and whether they are associated.\n+    // https://rustc-dev-guide.rust-lang.org/opaque-types-type-alias-impl-trait.html\n+    // https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/items.md#type-aliases\n+    match (visitor_kind, ty_opt) {\n+        (Item(_), None) => {\n+            let op_ty = OpaqueType { generic_bounds };\n+            rewrite_ty(rw_info, Some(generic_bounds), Some(&op_ty), vis)\n+        }\n+        (Item(_), Some(ty)) => rewrite_ty(rw_info, Some(generic_bounds), Some(&*ty), vis),\n+        (AssocImplItem(_), _) => {\n+            let result = if let Some(ast::Ty {\n+                kind: ast::TyKind::ImplTrait(_, ref generic_bounds),\n+                ..\n+            }) = ty_opt\n+            {\n+                let op_ty = OpaqueType { generic_bounds };\n+                rewrite_ty(rw_info, None, Some(&op_ty), &DEFAULT_VISIBILITY)\n+            } else {\n+                rewrite_ty(rw_info, None, ty.as_ref(), vis)\n+            }?;\n+            match defaultness {\n+                ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n+                _ => Some(result),\n+            }\n+        }\n+        (AssocTraitItem(_), _) | (ForeignItem(_), _) => {\n+            rewrite_ty(rw_info, Some(generic_bounds), ty.as_ref(), vis)\n+        }\n+    }\n+}\n+\n+fn rewrite_ty<R: Rewrite>(\n+    rw_info: &TyAliasRewriteInfo<'_, '_>,\n     generic_bounds_opt: Option<&ast::GenericBounds>,\n     rhs: Option<&R>,\n-    span: Span,\n+    vis: &ast::Visibility,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n+    let TyAliasRewriteInfo(context, indent, generics, ident, span) = *rw_info;\n     result.push_str(&format!(\"{}type \", format_visibility(context, vis)));\n     let ident_str = rewrite_ident(context, ident);\n \n@@ -1616,28 +1666,6 @@ pub(crate) fn rewrite_type<R: Rewrite>(\n     }\n }\n \n-pub(crate) fn rewrite_opaque_type(\n-    context: &RewriteContext<'_>,\n-    indent: Indent,\n-    ident: symbol::Ident,\n-    generic_bounds: &ast::GenericBounds,\n-    generics: &ast::Generics,\n-    vis: &ast::Visibility,\n-    span: Span,\n-) -> Option<String> {\n-    let opaque_type_bounds = OpaqueTypeBounds { generic_bounds };\n-    rewrite_type(\n-        context,\n-        indent,\n-        ident,\n-        vis,\n-        generics,\n-        Some(generic_bounds),\n-        Some(&opaque_type_bounds),\n-        span,\n-    )\n-}\n-\n fn type_annotation_spacing(config: &Config) -> (&str, &str) {\n     (\n         if config.space_before_colon() { \" \" } else { \"\" },\n@@ -1863,54 +1891,18 @@ fn rewrite_static(\n     }\n }\n struct OpaqueType<'a> {\n-    bounds: &'a ast::GenericBounds,\n+    generic_bounds: &'a ast::GenericBounds,\n }\n \n impl<'a> Rewrite for OpaqueType<'a> {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         let shape = shape.offset_left(5)?; // `impl `\n-        self.bounds\n+        self.generic_bounds\n             .rewrite(context, shape)\n             .map(|s| format!(\"impl {}\", s))\n     }\n }\n \n-pub(crate) fn rewrite_impl_type(\n-    ident: symbol::Ident,\n-    vis: &ast::Visibility,\n-    defaultness: ast::Defaultness,\n-    ty_opt: Option<&ptr::P<ast::Ty>>,\n-    generics: &ast::Generics,\n-    context: &RewriteContext<'_>,\n-    indent: Indent,\n-    span: Span,\n-) -> Option<String> {\n-    // Opaque type\n-    let result = if let Some(rustc_ast::ast::Ty {\n-        kind: ast::TyKind::ImplTrait(_, ref bounds),\n-        ..\n-    }) = ty_opt.map(|t| &**t)\n-    {\n-        rewrite_type(\n-            context,\n-            indent,\n-            ident,\n-            &DEFAULT_VISIBILITY,\n-            generics,\n-            None,\n-            Some(&OpaqueType { bounds }),\n-            span,\n-        )\n-    } else {\n-        rewrite_type(context, indent, ident, vis, generics, None, ty_opt, span)\n-    }?;\n-\n-    match defaultness {\n-        ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n-        _ => Some(result),\n-    }\n-}\n-\n impl Rewrite for ast::FnRetTy {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match *self {\n@@ -3176,19 +3168,9 @@ impl Rewrite for ast::ForeignItem {\n                 // 1 = ;\n                 rewrite_assign_rhs(context, prefix, &**ty, shape.sub_width(1)?).map(|s| s + \";\")\n             }\n-            ast::ForeignItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n-                    **ty_alias_kind;\n-                rewrite_type(\n-                    context,\n-                    shape.indent,\n-                    self.ident,\n-                    &self.vis,\n-                    generics,\n-                    Some(generic_bounds),\n-                    type_default.as_ref(),\n-                    self.span,\n-                )\n+            ast::ForeignItemKind::TyAlias(ref ty_alias) => {\n+                let (kind, span) = (&ItemVisitorKind::ForeignItem(&self), self.span);\n+                rewrite_type_alias(ty_alias, context, shape.indent, kind, span)\n             }\n             ast::ForeignItemKind::MacCall(ref mac) => {\n                 rewrite_macro(mac, None, context, shape, MacroPosition::Item)"}, {"sha": "f385245248da6310edcd8ad7ca7637d16eb70ee4", "filename": "src/visitor.rs", "status": "modified", "additions": 23, "deletions": 58, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/19c5c74951db8673aa3e3edba8393ce90346f96f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c5c74951db8673aa3e3edba8393ce90346f96f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=19c5c74951db8673aa3e3edba8393ce90346f96f", "patch": "@@ -12,8 +12,7 @@ use crate::config::{BraceStyle, Config};\n use crate::coverage::transform_missing_snippet;\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item, rewrite_extern_crate,\n-    rewrite_impl_type, rewrite_opaque_type, rewrite_type, FnBraceStyle, FnSig, StaticParts,\n-    StructParts,\n+    rewrite_type_alias, FnBraceStyle, FnSig, ItemVisitorKind, StaticParts, StructParts,\n };\n use crate::macros::{macro_style, rewrite_macro, rewrite_macro_def, MacroPosition};\n use crate::modules::Module;\n@@ -576,35 +575,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     }\n                 }\n                 ast::ItemKind::TyAlias(ref alias_kind) => {\n-                    let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref ty) =\n-                        **alias_kind;\n-                    match ty {\n-                        Some(ty) => {\n-                            let rewrite = rewrite_type(\n-                                &self.get_context(),\n-                                self.block_indent,\n-                                item.ident,\n-                                &item.vis,\n-                                generics,\n-                                Some(generic_bounds),\n-                                Some(&*ty),\n-                                item.span,\n-                            );\n-                            self.push_rewrite(item.span, rewrite);\n-                        }\n-                        None => {\n-                            let rewrite = rewrite_opaque_type(\n-                                &self.get_context(),\n-                                self.block_indent,\n-                                item.ident,\n-                                generic_bounds,\n-                                generics,\n-                                &item.vis,\n-                                item.span,\n-                            );\n-                            self.push_rewrite(item.span, rewrite);\n-                        }\n-                    }\n+                    use ItemVisitorKind::Item;\n+                    self.visit_ty_alias_kind(alias_kind, &Item(&item), item.span);\n                 }\n                 ast::ItemKind::GlobalAsm(..) => {\n                     let snippet = Some(self.snippet(item.span).to_owned());\n@@ -627,6 +599,22 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.skip_context = skip_context_saved;\n     }\n \n+    fn visit_ty_alias_kind(\n+        &mut self,\n+        ty_kind: &ast::TyAliasKind,\n+        visitor_kind: &ItemVisitorKind<'_>,\n+        span: Span,\n+    ) {\n+        let rewrite = rewrite_type_alias(\n+            ty_kind,\n+            &self.get_context(),\n+            self.block_indent,\n+            visitor_kind,\n+            span,\n+        );\n+        self.push_rewrite(span, rewrite);\n+    }\n+\n     pub(crate) fn visit_trait_item(&mut self, ti: &ast::AssocItem) {\n         skip_out_of_file_lines_range_visitor!(self, ti.span);\n \n@@ -659,19 +647,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 }\n             }\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAliasKind(_, ref generics, ref generic_bounds, ref type_default) =\n-                    **ty_alias_kind;\n-                let rewrite = rewrite_type(\n-                    &self.get_context(),\n-                    self.block_indent,\n-                    ti.ident,\n-                    &ti.vis,\n-                    generics,\n-                    Some(generic_bounds),\n-                    type_default.as_ref(),\n-                    ti.span,\n-                );\n-                self.push_rewrite(ti.span, rewrite);\n+                use ItemVisitorKind::AssocTraitItem;\n+                self.visit_ty_alias_kind(ty_alias_kind, &AssocTraitItem(&ti), ti.span);\n             }\n             ast::AssocItemKind::MacCall(ref mac) => {\n                 self.visit_mac(mac, Some(ti.ident), MacroPosition::Item);\n@@ -710,20 +687,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n             ast::AssocItemKind::Const(..) => self.visit_static(&StaticParts::from_impl_item(ii)),\n             ast::AssocItemKind::TyAlias(ref ty_alias_kind) => {\n-                let ast::TyAliasKind(defaultness, ref generics, _, ref ty) = **ty_alias_kind;\n-                self.push_rewrite(\n-                    ii.span,\n-                    rewrite_impl_type(\n-                        ii.ident,\n-                        &ii.vis,\n-                        defaultness,\n-                        ty.as_ref(),\n-                        generics,\n-                        &self.get_context(),\n-                        self.block_indent,\n-                        ii.span,\n-                    ),\n-                );\n+                use ItemVisitorKind::AssocImplItem;\n+                self.visit_ty_alias_kind(ty_alias_kind, &AssocImplItem(&ii), ii.span);\n             }\n             ast::AssocItemKind::MacCall(ref mac) => {\n                 self.visit_mac(mac, Some(ii.ident), MacroPosition::Item);"}]}