{"sha": "2be0db4c0baabfb400ec3f502c908ba5a30f2b25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTBkYjRjMGJhYWJmYjQwMGVjM2Y1MDJjOTA4YmE1YTMwZjJiMjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-27T10:02:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-27T10:02:07Z"}, "message": "Auto merge of #917 - RalfJung:isolation, r=oli-obk\n\nchange flag name: enable-communication -> disable-isolation\n\nr? @oli-obk  -- I think this is a better name for the flag but it is still somewhat clumsy. Suggestions?", "tree": {"sha": "271d40a4c4965d553749862324e9ebc24b5c9616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/271d40a4c4965d553749862324e9ebc24b5c9616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be0db4c0baabfb400ec3f502c908ba5a30f2b25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be0db4c0baabfb400ec3f502c908ba5a30f2b25", "html_url": "https://github.com/rust-lang/rust/commit/2be0db4c0baabfb400ec3f502c908ba5a30f2b25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be0db4c0baabfb400ec3f502c908ba5a30f2b25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae0a5e179ffa254308f55675179954df9ec3f88", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae0a5e179ffa254308f55675179954df9ec3f88", "html_url": "https://github.com/rust-lang/rust/commit/cae0a5e179ffa254308f55675179954df9ec3f88"}, {"sha": "55efee91406f17beab46273210318b7259632345", "url": "https://api.github.com/repos/rust-lang/rust/commits/55efee91406f17beab46273210318b7259632345", "html_url": "https://github.com/rust-lang/rust/commit/55efee91406f17beab46273210318b7259632345"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "d3e4adfa1785e238bc3997e90122f745e3d372be", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2be0db4c0baabfb400ec3f502c908ba5a30f2b25/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2be0db4c0baabfb400ec3f502c908ba5a30f2b25/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2be0db4c0baabfb400ec3f502c908ba5a30f2b25", "patch": "@@ -157,9 +157,9 @@ Several `-Z` flags are relevant for Miri:\n   is enforced by default.  This is mostly useful for debugging; it means Miri\n   will miss bugs in your program.  However, this can also help to make Miri run\n   faster.\n-* `-Zmiri-enable-communication` enables communication between the host\n-  environment and Miri, i.e., Miri uses the host's random number generator and \n-  all the host environment variables are available during runtime.\n+* `-Zmiri-disable-isolation` disables host host isolation.  As a consequence,\n+  the program has access to host resources such as environment variables and\n+  randomness (and, eventually, file systems and more).\n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n   overrides the default to be `0`; be advised that using any higher level can\n   make Miri miss bugs in your program because they got optimized away."}, {"sha": "55522a52e012891158249c42abf73a0dbf9326ed", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2be0db4c0baabfb400ec3f502c908ba5a30f2b25/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be0db4c0baabfb400ec3f502c908ba5a30f2b25/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=2be0db4c0baabfb400ec3f502c908ba5a30f2b25", "patch": "@@ -148,7 +148,7 @@ fn main() {\n                 \"-Zmiri-disable-validation\" => {\n                     validate = false;\n                 },\n-                \"-Zmiri-enable-communication\" => {\n+                \"-Zmiri-disable-isolation\" => {\n                     communicate = true;\n                 },\n                 \"--\" => {"}, {"sha": "537e0923d20b82ed917fa8d0da50715adaa1940a", "filename": "tests/run-pass/env-without-isolation.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2be0db4c0baabfb400ec3f502c908ba5a30f2b25/tests%2Frun-pass%2Fenv-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be0db4c0baabfb400ec3f502c908ba5a30f2b25/tests%2Frun-pass%2Fenv-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv-without-isolation.rs?ref=2be0db4c0baabfb400ec3f502c908ba5a30f2b25", "patch": "@@ -1,5 +1,5 @@\n // ignore-windows: TODO env var emulation stubbed out on Windows\n-// compile-flags: -Zmiri-enable-communication\n+// compile-flags: -Zmiri-disable-isolation\n \n fn main() {\n     assert_eq!(std::env::var(\"MIRI_ENV_VAR_TEST\"), Ok(\"0\".to_owned()));", "previous_filename": "tests/run-pass/communication.rs"}, {"sha": "ce9ff8b6c3f95f4d4a26744742caaf3edf126d52", "filename": "tests/run-pass/linux-getrandom-without-isolation.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2be0db4c0baabfb400ec3f502c908ba5a30f2b25/tests%2Frun-pass%2Flinux-getrandom-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be0db4c0baabfb400ec3f502c908ba5a30f2b25/tests%2Frun-pass%2Flinux-getrandom-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flinux-getrandom-without-isolation.rs?ref=2be0db4c0baabfb400ec3f502c908ba5a30f2b25", "patch": "@@ -0,0 +1,18 @@\n+// Unfortunately, compiletest_rs does not support 'only-linux',\n+// so we need to ignore Windows and macOS instead.\n+// ignore-macos: Uses Linux-only APIs\n+// ignore-windows: Uses Linux-only APIs\n+// compile-flags: -Zmiri-disable-isolation\n+#![feature(rustc_private)]\n+extern crate libc;\n+\n+fn main() {\n+    let mut buf = [0u8; 5];\n+    unsafe {\n+        assert_eq!(libc::syscall(libc::SYS_getrandom, 0 as *mut libc::c_void, 0 as libc::size_t, 0 as libc::c_uint), 0);\n+        assert_eq!(libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr() as *mut libc::c_void, 5 as libc::size_t, 0 as libc::c_uint), 5);\n+\n+        assert_eq!(libc::getrandom(0 as *mut libc::c_void, 0 as libc::size_t, 0 as libc::c_uint), 0);\n+        assert_eq!(libc::getrandom(buf.as_mut_ptr() as *mut libc::c_void, 5 as libc::size_t, 0 as libc::c_uint), 5);\n+    }\n+}"}]}