{"sha": "98f7a009faad2012bacd5119c582fdbd52712174", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZjdhMDA5ZmFhZDIwMTJiYWNkNTExOWM1ODJmZGJkNTI3MTIxNzQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-28T09:28:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-28T09:28:14Z"}, "message": "Rollup merge of #87330 - inquisitivecrystal:extend-reserve, r=JohnTitor\n\nUse hashbrown's `extend_reserve()` in `HashMap`\n\nWhen we added `extend_reserve()` to our implementation of `Extend` for `HashMap`, hashbrown didn't have a version we could use. Now that hashbrown has added it, we should use its version instead of implementing it ourself.", "tree": {"sha": "7af61a30a954a2447f71f07aeb95da9984c23e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af61a30a954a2447f71f07aeb95da9984c23e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98f7a009faad2012bacd5119c582fdbd52712174", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhASMvCRBK7hj4Ov3rIwAAaHgIAJePcyuTA+si5hm3HacrTh7l\nmlrBSBKySBUW1Ei+3zjGWg15oxeK1CZlGheb1J5rbbqdtMstUvzpqYvWPNwV+Xhu\noq2hMwl+HVkJXanQpOwlrCvyftEKG/fxk+nLSc6ZwPvz7onqSOxQZ65ViUkN1yXC\nii/YkiM2T3g7BYocHF6gDqzYygLxDpOwDySOPLQKsm5QIZWnPGI5IFZxLpccUILB\naZyzTe8LQw7TYTl1jqH3bMj1OUSau+Ytn9j8gre3shB9m6rf1hmjJQdpeADW0Rdt\nfd5U70qvDEG143Je1mzT7noi3O9gVZcpsA+E5CW3dRGCfQdluU1tfmj0IrTvii4=\n=TlDQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7af61a30a954a2447f71f07aeb95da9984c23e43\nparent 911e22b57d05e7514accb55d25ad2083aae54201\nparent e7fe2dfef253c462699783e7b2b297827f7440a7\nauthor Yuki Okushi <jtitor@2k36.org> 1627464494 +0900\ncommitter GitHub <noreply@github.com> 1627464494 +0900\n\nRollup merge of #87330 - inquisitivecrystal:extend-reserve, r=JohnTitor\n\nUse hashbrown's `extend_reserve()` in `HashMap`\n\nWhen we added `extend_reserve()` to our implementation of `Extend` for `HashMap`, hashbrown didn't have a version we could use. Now that hashbrown has added it, we should use its version instead of implementing it ourself.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98f7a009faad2012bacd5119c582fdbd52712174", "html_url": "https://github.com/rust-lang/rust/commit/98f7a009faad2012bacd5119c582fdbd52712174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98f7a009faad2012bacd5119c582fdbd52712174/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911e22b57d05e7514accb55d25ad2083aae54201", "url": "https://api.github.com/repos/rust-lang/rust/commits/911e22b57d05e7514accb55d25ad2083aae54201", "html_url": "https://github.com/rust-lang/rust/commit/911e22b57d05e7514accb55d25ad2083aae54201"}, {"sha": "e7fe2dfef253c462699783e7b2b297827f7440a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fe2dfef253c462699783e7b2b297827f7440a7", "html_url": "https://github.com/rust-lang/rust/commit/e7fe2dfef253c462699783e7b2b297827f7440a7"}], "stats": {"total": 10, "additions": 1, "deletions": 9}, "files": [{"sha": "933d686521e536c6b331b5ebe3385dbfe3473e96", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98f7a009faad2012bacd5119c582fdbd52712174/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f7a009faad2012bacd5119c582fdbd52712174/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=98f7a009faad2012bacd5119c582fdbd52712174", "patch": "@@ -2821,15 +2821,7 @@ where\n \n     #[inline]\n     fn extend_reserve(&mut self, additional: usize) {\n-        // self.base.extend_reserve(additional);\n-        // FIXME: hashbrown should implement this method.\n-        // But until then, use the same reservation logic:\n-\n-        // Reserve the entire hint lower bound if the map is empty.\n-        // Otherwise reserve half the hint (rounded up), so the map\n-        // will only resize twice in the worst case.\n-        let reserve = if self.is_empty() { additional } else { (additional + 1) / 2 };\n-        self.base.reserve(reserve);\n+        self.base.extend_reserve(additional);\n     }\n }\n "}]}