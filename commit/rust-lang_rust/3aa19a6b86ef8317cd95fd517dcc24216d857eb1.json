{"sha": "3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYTE5YTZiODZlZjgzMTdjZDk1ZmQ1MTdkY2MyNDIxNmQ4NTdlYjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T19:56:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:56Z"}, "message": "librustc: De-`@mut` the parse session", "tree": {"sha": "459ee753848f275e46afb61fb0fc155c4cee9344", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/459ee753848f275e46afb61fb0fc155c4cee9344"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "html_url": "https://github.com/rust-lang/rust/commit/3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f553701da64dd70d1fa6b757208f012dbad118d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f553701da64dd70d1fa6b757208f012dbad118d7", "html_url": "https://github.com/rust-lang/rust/commit/f553701da64dd70d1fa6b757208f012dbad118d7"}], "stats": {"total": 97, "additions": 48, "deletions": 49}, "files": [{"sha": "dd9c52da14f7b2b6adf0a6af791efa6137a8a809", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "patch": "@@ -204,7 +204,7 @@ pub struct Session_ {\n     targ_cfg: @config,\n     opts: @options,\n     cstore: @metadata::cstore::CStore,\n-    parse_sess: @mut ParseSess,\n+    parse_sess: @ParseSess,\n     codemap: @codemap::CodeMap,\n     // For a library crate, this is always none\n     entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,"}, {"sha": "d03c73a81a0e2d9bcf795b067d25ef1ac2c64700", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "patch": "@@ -1429,18 +1429,18 @@ fn decode_item_ast(par_doc: ebml::Doc) -> @ast::item {\n #[cfg(test)]\n trait fake_ext_ctxt {\n     fn cfg(&self) -> ast::CrateConfig;\n-    fn parse_sess(&self) -> @mut parse::ParseSess;\n+    fn parse_sess(&self) -> @parse::ParseSess;\n     fn call_site(&self) -> Span;\n     fn ident_of(&self, st: &str) -> ast::Ident;\n }\n \n #[cfg(test)]\n-type fake_session = @mut parse::ParseSess;\n+type fake_session = @parse::ParseSess;\n \n #[cfg(test)]\n impl fake_ext_ctxt for fake_session {\n     fn cfg(&self) -> ast::CrateConfig { ~[] }\n-    fn parse_sess(&self) -> @mut parse::ParseSess { *self }\n+    fn parse_sess(&self) -> @parse::ParseSess { *self }\n     fn call_site(&self) -> Span {\n         codemap::Span {\n             lo: codemap::BytePos(0),"}, {"sha": "b4888f1092f52f385587d3f828c03039dbd1b53e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "patch": "@@ -284,7 +284,7 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n // when a macro expansion occurs, the resulting nodes have the backtrace()\n // -> expn_info of their expansion context stored into their span.\n pub struct ExtCtxt {\n-    parse_sess: @mut parse::ParseSess,\n+    parse_sess: @parse::ParseSess,\n     cfg: ast::CrateConfig,\n     backtrace: Option<@ExpnInfo>,\n \n@@ -293,7 +293,7 @@ pub struct ExtCtxt {\n }\n \n impl ExtCtxt {\n-    pub fn new(parse_sess: @mut parse::ParseSess, cfg: ast::CrateConfig)\n+    pub fn new(parse_sess: @parse::ParseSess, cfg: ast::CrateConfig)\n                -> ExtCtxt {\n         ExtCtxt {\n             parse_sess: parse_sess,\n@@ -320,7 +320,7 @@ impl ExtCtxt {\n     }\n \n     pub fn codemap(&self) -> @CodeMap { self.parse_sess.cm }\n-    pub fn parse_sess(&self) -> @mut parse::ParseSess { self.parse_sess }\n+    pub fn parse_sess(&self) -> @parse::ParseSess { self.parse_sess }\n     pub fn cfg(&self) -> ast::CrateConfig { self.cfg.clone() }\n     pub fn call_site(&self) -> Span {\n         match self.backtrace {"}, {"sha": "b8e39f80d475f4eb3373ac58c7a07f580189aff7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "patch": "@@ -889,7 +889,7 @@ impl ast_fold for Injector {\n \n // add a bunch of macros as though they were placed at the head of the\n // program (ick). This should run before cfg stripping.\n-pub fn inject_std_macros(parse_sess: @mut parse::ParseSess,\n+pub fn inject_std_macros(parse_sess: @parse::ParseSess,\n                          cfg: ast::CrateConfig,\n                          c: Crate)\n                          -> Crate {\n@@ -939,7 +939,7 @@ impl<'a> ast_fold for MacroExpander<'a> {\n     }\n }\n \n-pub fn expand_crate(parse_sess: @mut parse::ParseSess,\n+pub fn expand_crate(parse_sess: @parse::ParseSess,\n                     cfg: ast::CrateConfig,\n                     c: Crate) -> Crate {\n     let mut cx = ExtCtxt::new(parse_sess, cfg.clone());"}, {"sha": "004fd3e325bfbf5061fa81a58c51d4e5d8f8a74f", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "patch": "@@ -188,9 +188,9 @@ pub enum named_match {\n \n pub type earley_item = ~MatcherPos;\n \n-pub fn nameize(p_s: @mut ParseSess, ms: &[matcher], res: &[@named_match])\n+pub fn nameize(p_s: @ParseSess, ms: &[matcher], res: &[@named_match])\n             -> HashMap<Ident,@named_match> {\n-    fn n_rec(p_s: @mut ParseSess, m: &matcher, res: &[@named_match],\n+    fn n_rec(p_s: @ParseSess, m: &matcher, res: &[@named_match],\n              ret_val: &mut HashMap<Ident, @named_match>) {\n         match *m {\n           codemap::Spanned {node: match_tok(_), .. } => (),\n@@ -222,7 +222,7 @@ pub enum parse_result {\n }\n \n pub fn parse_or_else(\n-    sess: @mut ParseSess,\n+    sess: @ParseSess,\n     cfg: ast::CrateConfig,\n     rdr: @mut reader,\n     ms: ~[matcher]\n@@ -243,12 +243,11 @@ pub fn token_name_eq(t1 : &Token, t2 : &Token) -> bool {\n     }\n }\n \n-pub fn parse(\n-    sess: @mut ParseSess,\n-    cfg: ast::CrateConfig,\n-    rdr: @mut reader,\n-    ms: &[matcher]\n-) -> parse_result {\n+pub fn parse(sess: @ParseSess,\n+             cfg: ast::CrateConfig,\n+             rdr: @mut reader,\n+             ms: &[matcher])\n+             -> parse_result {\n     let mut cur_eis = ~[];\n     cur_eis.push(initial_matcher_pos(ms.to_owned(), None, rdr.peek().sp.lo));\n "}, {"sha": "a20265e6d36f43c853474bed0bbdc243e8a970f6", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "patch": "@@ -47,9 +47,9 @@ pub struct ParseSess {\n     included_mod_stack: RefCell<~[Path]>,\n }\n \n-pub fn new_parse_sess(demitter: Option<@Emitter>) -> @mut ParseSess {\n+pub fn new_parse_sess(demitter: Option<@Emitter>) -> @ParseSess {\n     let cm = @CodeMap::new();\n-    @mut ParseSess {\n+    @ParseSess {\n         cm: cm,\n         span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n         included_mod_stack: RefCell::new(~[]),\n@@ -58,8 +58,8 @@ pub fn new_parse_sess(demitter: Option<@Emitter>) -> @mut ParseSess {\n \n pub fn new_parse_sess_special_handler(sh: @mut SpanHandler,\n                                       cm: @codemap::CodeMap)\n-                                   -> @mut ParseSess {\n-    @mut ParseSess {\n+                                   -> @ParseSess {\n+    @ParseSess {\n         cm: cm,\n         span_diagnostic: sh,\n         included_mod_stack: RefCell::new(~[]),\n@@ -74,7 +74,7 @@ pub fn new_parse_sess_special_handler(sh: @mut SpanHandler,\n pub fn parse_crate_from_file(\n     input: &Path,\n     cfg: ast::CrateConfig,\n-    sess: @mut ParseSess\n+    sess: @ParseSess\n ) -> ast::Crate {\n     new_parser_from_file(sess, /*bad*/ cfg.clone(), input).parse_crate_mod()\n     // why is there no p.abort_if_errors here?\n@@ -83,7 +83,7 @@ pub fn parse_crate_from_file(\n pub fn parse_crate_attrs_from_file(\n     input: &Path,\n     cfg: ast::CrateConfig,\n-    sess: @mut ParseSess\n+    sess: @ParseSess\n ) -> ~[ast::Attribute] {\n     let mut parser = new_parser_from_file(sess, cfg, input);\n     let (inner, _) = parser.parse_inner_attrs_and_next();\n@@ -94,7 +94,7 @@ pub fn parse_crate_from_source_str(\n     name: @str,\n     source: @str,\n     cfg: ast::CrateConfig,\n-    sess: @mut ParseSess\n+    sess: @ParseSess\n ) -> ast::Crate {\n     let mut p = new_parser_from_source_str(sess,\n                                            /*bad*/ cfg.clone(),\n@@ -107,7 +107,7 @@ pub fn parse_crate_attrs_from_source_str(\n     name: @str,\n     source: @str,\n     cfg: ast::CrateConfig,\n-    sess: @mut ParseSess\n+    sess: @ParseSess\n ) -> ~[ast::Attribute] {\n     let mut p = new_parser_from_source_str(sess,\n                                            /*bad*/ cfg.clone(),\n@@ -121,7 +121,7 @@ pub fn parse_expr_from_source_str(\n     name: @str,\n     source: @str,\n     cfg: ast::CrateConfig,\n-    sess: @mut ParseSess\n+    sess: @ParseSess\n ) -> @ast::Expr {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n     maybe_aborted(p.parse_expr(), p)\n@@ -132,7 +132,7 @@ pub fn parse_item_from_source_str(\n     source: @str,\n     cfg: ast::CrateConfig,\n     attrs: ~[ast::Attribute],\n-    sess: @mut ParseSess\n+    sess: @ParseSess\n ) -> Option<@ast::item> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n     maybe_aborted(p.parse_item(attrs),p)\n@@ -142,7 +142,7 @@ pub fn parse_meta_from_source_str(\n     name: @str,\n     source: @str,\n     cfg: ast::CrateConfig,\n-    sess: @mut ParseSess\n+    sess: @ParseSess\n ) -> @ast::MetaItem {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n     maybe_aborted(p.parse_meta_item(),p)\n@@ -153,7 +153,7 @@ pub fn parse_stmt_from_source_str(\n     source: @str,\n     cfg: ast::CrateConfig,\n     attrs: ~[ast::Attribute],\n-    sess: @mut ParseSess\n+    sess: @ParseSess\n ) -> @ast::Stmt {\n     let mut p = new_parser_from_source_str(\n         sess,\n@@ -168,7 +168,7 @@ pub fn parse_tts_from_source_str(\n     name: @str,\n     source: @str,\n     cfg: ast::CrateConfig,\n-    sess: @mut ParseSess\n+    sess: @ParseSess\n ) -> ~[ast::token_tree] {\n     let mut p = new_parser_from_source_str(\n         sess,\n@@ -192,7 +192,7 @@ pub fn parse_from_source_str<T>(\n                              ss: codemap::FileSubstr,\n                              source: @str,\n                              cfg: ast::CrateConfig,\n-                             sess: @mut ParseSess)\n+                             sess: @ParseSess)\n                              -> T {\n     let mut p = new_parser_from_source_substr(sess, cfg, name, ss, source);\n     let r = f(&mut p);\n@@ -203,7 +203,7 @@ pub fn parse_from_source_str<T>(\n }\n \n // Create a new parser from a source string\n-pub fn new_parser_from_source_str(sess: @mut ParseSess,\n+pub fn new_parser_from_source_str(sess: @ParseSess,\n                                   cfg: ast::CrateConfig,\n                                   name: @str,\n                                   source: @str)\n@@ -213,7 +213,7 @@ pub fn new_parser_from_source_str(sess: @mut ParseSess,\n \n // Create a new parser from a source string where the origin\n // is specified as a substring of another file.\n-pub fn new_parser_from_source_substr(sess: @mut ParseSess,\n+pub fn new_parser_from_source_substr(sess: @ParseSess,\n                                   cfg: ast::CrateConfig,\n                                   name: @str,\n                                   ss: codemap::FileSubstr,\n@@ -225,7 +225,7 @@ pub fn new_parser_from_source_substr(sess: @mut ParseSess,\n /// Create a new parser, handling errors as appropriate\n /// if the file doesn't exist\n pub fn new_parser_from_file(\n-    sess: @mut ParseSess,\n+    sess: @ParseSess,\n     cfg: ast::CrateConfig,\n     path: &Path\n ) -> Parser {\n@@ -236,7 +236,7 @@ pub fn new_parser_from_file(\n /// the file at the given path to the codemap, and return a parser.\n /// On an error, use the given span as the source of the problem.\n pub fn new_sub_parser_from_file(\n-    sess: @mut ParseSess,\n+    sess: @ParseSess,\n     cfg: ast::CrateConfig,\n     path: &Path,\n     sp: Span\n@@ -245,15 +245,15 @@ pub fn new_sub_parser_from_file(\n }\n \n /// Given a filemap and config, return a parser\n-pub fn filemap_to_parser(sess: @mut ParseSess,\n+pub fn filemap_to_parser(sess: @ParseSess,\n                          filemap: @FileMap,\n                          cfg: ast::CrateConfig) -> Parser {\n     tts_to_parser(sess,filemap_to_tts(sess,filemap),cfg)\n }\n \n // must preserve old name for now, because quote! from the *existing*\n // compiler expands into it\n-pub fn new_parser_from_tts(sess: @mut ParseSess,\n+pub fn new_parser_from_tts(sess: @ParseSess,\n                      cfg: ast::CrateConfig,\n                      tts: ~[ast::token_tree]) -> Parser {\n     tts_to_parser(sess,tts,cfg)\n@@ -264,7 +264,7 @@ pub fn new_parser_from_tts(sess: @mut ParseSess,\n \n /// Given a session and a path and an optional span (for error reporting),\n /// add the path to the session's codemap and return the new filemap.\n-pub fn file_to_filemap(sess: @mut ParseSess, path: &Path, spanopt: Option<Span>)\n+pub fn file_to_filemap(sess: @ParseSess, path: &Path, spanopt: Option<Span>)\n     -> @FileMap {\n     let err = |msg: &str| {\n         match spanopt {\n@@ -293,20 +293,20 @@ pub fn file_to_filemap(sess: @mut ParseSess, path: &Path, spanopt: Option<Span>)\n \n // given a session and a string, add the string to\n // the session's codemap and return the new filemap\n-pub fn string_to_filemap(sess: @mut ParseSess, source: @str, path: @str)\n+pub fn string_to_filemap(sess: @ParseSess, source: @str, path: @str)\n     -> @FileMap {\n     sess.cm.new_filemap(path, source)\n }\n \n // given a session and a string and a path and a FileSubStr, add\n // the string to the CodeMap and return the new FileMap\n-pub fn substring_to_filemap(sess: @mut ParseSess, source: @str, path: @str,\n+pub fn substring_to_filemap(sess: @ParseSess, source: @str, path: @str,\n                            filesubstr: FileSubstr) -> @FileMap {\n     sess.cm.new_filemap_w_substr(path,filesubstr,source)\n }\n \n // given a filemap, produce a sequence of token-trees\n-pub fn filemap_to_tts(sess: @mut ParseSess, filemap: @FileMap)\n+pub fn filemap_to_tts(sess: @ParseSess, filemap: @FileMap)\n     -> ~[ast::token_tree] {\n     // it appears to me that the cfg doesn't matter here... indeed,\n     // parsing tt's probably shouldn't require a parser at all.\n@@ -317,7 +317,7 @@ pub fn filemap_to_tts(sess: @mut ParseSess, filemap: @FileMap)\n }\n \n // given tts and cfg, produce a parser\n-pub fn tts_to_parser(sess: @mut ParseSess,\n+pub fn tts_to_parser(sess: @ParseSess,\n                      tts: ~[ast::token_tree],\n                      cfg: ast::CrateConfig) -> Parser {\n     let trdr = lexer::new_tt_reader(sess.span_diagnostic, None, tts);"}, {"sha": "0d7e31e18616129c80006a60c229e932ff28a464", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "patch": "@@ -286,8 +286,8 @@ struct ParsedItemsAndViewItems {\n \n /* ident is handled by common.rs */\n \n-pub fn Parser(sess: @mut ParseSess, cfg: ast::CrateConfig, rdr: @mut reader)\n-           -> Parser {\n+pub fn Parser(sess: @ParseSess, cfg: ast::CrateConfig, rdr: @mut reader)\n+              -> Parser {\n     let tok0 = rdr.next_token();\n     let interner = get_ident_interner();\n     let span = tok0.sp;\n@@ -324,7 +324,7 @@ pub fn Parser(sess: @mut ParseSess, cfg: ast::CrateConfig, rdr: @mut reader)\n }\n \n pub struct Parser {\n-    sess: @mut ParseSess,\n+    sess: @ParseSess,\n     cfg: CrateConfig,\n     // the current token:\n     token: token::Token,"}, {"sha": "dc546c7610f9f19e1548748ab02566d15971bf5e", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aa19a6b86ef8317cd95fd517dcc24216d857eb1/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=3aa19a6b86ef8317cd95fd517dcc24216d857eb1", "patch": "@@ -17,7 +17,7 @@ use parse::token;\n \n // map a string to tts, using a made-up filename: return both the token_trees\n // and the ParseSess\n-pub fn string_to_tts_and_sess (source_str : @str) -> (~[ast::token_tree],@mut ParseSess) {\n+pub fn string_to_tts_and_sess (source_str : @str) -> (~[ast::token_tree],@ParseSess) {\n     let ps = new_parse_sess(None);\n     (filemap_to_tts(ps,string_to_filemap(ps,source_str,@\"bogofile\")),ps)\n }\n@@ -28,7 +28,7 @@ pub fn string_to_tts(source_str : @str) -> ~[ast::token_tree] {\n     tts\n }\n \n-pub fn string_to_parser_and_sess(source_str: @str) -> (Parser,@mut ParseSess) {\n+pub fn string_to_parser_and_sess(source_str: @str) -> (Parser,@ParseSess) {\n     let ps = new_parse_sess(None);\n     (new_parser_from_source_str(ps,~[],@\"bogofile\",source_str),ps)\n }\n@@ -54,7 +54,7 @@ pub fn string_to_crate (source_str : @str) -> ast::Crate {\n }\n \n // parse a string, return a crate and the ParseSess\n-pub fn string_to_crate_and_sess (source_str : @str) -> (ast::Crate,@mut ParseSess) {\n+pub fn string_to_crate_and_sess (source_str : @str) -> (ast::Crate,@ParseSess) {\n     let (mut p,ps) = string_to_parser_and_sess(source_str);\n     (p.parse_crate_mod(),ps)\n }"}]}