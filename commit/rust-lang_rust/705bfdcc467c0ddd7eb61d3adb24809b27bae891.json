{"sha": "705bfdcc467c0ddd7eb61d3adb24809b27bae891", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNWJmZGNjNDY3YzBkZGQ3ZWI2MWQzYWRiMjQ4MDliMjdiYWU4OTE=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-22T09:46:17Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-25T18:00:39Z"}, "message": "Extend `useless_conversion` lint with TryInto", "tree": {"sha": "0679a416e9f6d10511adce02cdc9d0ef2cab3fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0679a416e9f6d10511adce02cdc9d0ef2cab3fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/705bfdcc467c0ddd7eb61d3adb24809b27bae891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/705bfdcc467c0ddd7eb61d3adb24809b27bae891", "html_url": "https://github.com/rust-lang/rust/commit/705bfdcc467c0ddd7eb61d3adb24809b27bae891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/705bfdcc467c0ddd7eb61d3adb24809b27bae891/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f8909fad986dda68a9dcd172eaa362b6fce105b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8909fad986dda68a9dcd172eaa362b6fce105b", "html_url": "https://github.com/rust-lang/rust/commit/4f8909fad986dda68a9dcd172eaa362b6fce105b"}], "stats": {"total": 96, "additions": 77, "deletions": 19}, "files": [{"sha": "1645c5777b26b04937d88a8fde3ea348007db465", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/705bfdcc467c0ddd7eb61d3adb24809b27bae891/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705bfdcc467c0ddd7eb61d3adb24809b27bae891/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=705bfdcc467c0ddd7eb61d3adb24809b27bae891", "patch": "@@ -10,8 +10,8 @@ use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for `Into`, `From`, `TryFrom`,`IntoIter` calls that useless converts\n-    /// to the same type as caller.\n+    /// **What it does:** Checks for `Into`, `TryInto`, `From`, `TryFrom`,`IntoIter` calls\n+    /// that useless converts to the same type as caller.\n     ///\n     /// **Why is this bad?** Redundant code.\n     ///\n@@ -29,7 +29,7 @@ declare_clippy_lint! {\n     /// ```\n     pub USELESS_CONVERSION,\n     complexity,\n-    \"calls to `Into`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\"\n+    \"calls to `Into`, `TryInto`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\"\n }\n \n #[derive(Default)]\n@@ -39,6 +39,7 @@ pub struct UselessConversion {\n \n impl_lint_pass!(UselessConversion => [USELESS_CONVERSION]);\n \n+#[allow(clippy::too_many_lines)]\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr<'_>) {\n         if e.span.from_expansion() {\n@@ -66,7 +67,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                     let b = cx.tables.expr_ty(&args[0]);\n                     if same_tys(cx, a, b) {\n                         let sugg = snippet_with_macro_callsite(cx, args[0].span, \"<expr>\").to_string();\n-\n                         span_lint_and_sugg(\n                             cx,\n                             USELESS_CONVERSION,\n@@ -94,6 +94,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                         );\n                     }\n                 }\n+                if match_trait_method(cx, e, &paths::TRY_INTO_TRAIT) && &*name.ident.as_str() == \"try_into\" {\n+                    if_chain! {\n+                        let a = cx.tables.expr_ty(e);\n+                        let b = cx.tables.expr_ty(&args[0]);\n+                        if is_type_diagnostic_item(cx, a, sym!(result_type));\n+                        if let ty::Adt(_, substs) = a.kind;\n+                        if let Some(a_type) = substs.types().next();\n+                        if same_tys(cx, a_type, b);\n+\n+                        then {\n+                            span_lint_and_help(\n+                                cx,\n+                                USELESS_CONVERSION,\n+                                e.span,\n+                                \"Useless conversion to the same type\",\n+                                None,\n+                                \"consider removing `.try_into()`\",\n+                            );\n+                        }\n+                    }\n+                }\n             },\n \n             ExprKind::Call(ref path, ref args) => {\n@@ -109,7 +130,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                             if match_def_path(cx, def_id, &paths::TRY_FROM);\n                             if is_type_diagnostic_item(cx, a, sym!(result_type));\n                             if let ty::Adt(_, substs) = a.kind;\n-                            if let Some(a_type) = substs.types().nth(0);\n+                            if let Some(a_type) = substs.types().next();\n                             if same_tys(cx, a_type, b);\n \n                             then {\n@@ -125,8 +146,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                             }\n                         }\n \n-                        if match_def_path(cx, def_id, &paths::FROM_FROM) {\n-                            if same_tys(cx, a, b) {\n+                        if_chain! {\n+                            if match_def_path(cx, def_id, &paths::FROM_FROM);\n+                            if same_tys(cx, a, b);\n+\n+                            then {\n                                 let sugg = snippet(cx, args[0].span.source_callsite(), \"<expr>\").into_owned();\n                                 let sugg_msg =\n                                     format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));"}, {"sha": "779da7e6bf23ce01c423991f8a0b490022a77876", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/705bfdcc467c0ddd7eb61d3adb24809b27bae891/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705bfdcc467c0ddd7eb61d3adb24809b27bae891/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=705bfdcc467c0ddd7eb61d3adb24809b27bae891", "patch": "@@ -131,6 +131,7 @@ pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];\n pub const TRY_FROM_ERROR: [&str; 4] = [\"std\", \"ops\", \"Try\", \"from_error\"];\n pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n+pub const TRY_INTO_TRAIT: [&str; 3] = [\"core\", \"convert\", \"TryInto\"];\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];"}, {"sha": "f63301c7db0a6c9019ad83bd89c283c370437744", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/705bfdcc467c0ddd7eb61d3adb24809b27bae891/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705bfdcc467c0ddd7eb61d3adb24809b27bae891/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=705bfdcc467c0ddd7eb61d3adb24809b27bae891", "patch": "@@ -2421,7 +2421,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"useless_conversion\",\n         group: \"complexity\",\n-        desc: \"calls to `Into`/`From`/`IntoIter` that performs useless conversions to the same type\",\n+        desc: \"calls to `Into`, `TryInto`, `From`, `TryFrom`, `IntoIter` that performs useless conversions to the same type\",\n         deprecation: None,\n         module: \"useless_conversion\",\n     },"}, {"sha": "ab4f960edb7ef9a9219932d81bb4dd6c72002f05", "filename": "tests/ui/useless_conversion_try.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/705bfdcc467c0ddd7eb61d3adb24809b27bae891/tests%2Fui%2Fuseless_conversion_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705bfdcc467c0ddd7eb61d3adb24809b27bae891/tests%2Fui%2Fuseless_conversion_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.rs?ref=705bfdcc467c0ddd7eb61d3adb24809b27bae891", "patch": "@@ -1,25 +1,34 @@\n #![deny(clippy::useless_conversion)]\n \n-use std::convert::TryFrom;\n+use std::convert::{TryFrom, TryInto};\n \n fn test_generic<T: Copy>(val: T) -> T {\n-    T::try_from(val).unwrap()\n+    let _ = T::try_from(val).unwrap();\n+    val.try_into().unwrap()\n }\n \n fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {\n+    // ok\n+    let _: i32 = val.try_into().unwrap();\n+    let _: U = val.try_into().unwrap();\n     let _ = U::try_from(val).unwrap();\n }\n \n fn main() {\n     test_generic(10i32);\n     test_generic2::<i32, i32>(10i32);\n \n+    let _: String = \"foo\".try_into().unwrap();\n     let _: String = TryFrom::try_from(\"foo\").unwrap();\n     let _ = String::try_from(\"foo\").unwrap();\n     #[allow(clippy::useless_conversion)]\n-    let _ = String::try_from(\"foo\").unwrap();\n-\n+    {\n+        let _ = String::try_from(\"foo\").unwrap();\n+        let _: String = \"foo\".try_into().unwrap();\n+    }\n+    let _: String = \"foo\".to_string().try_into().unwrap();\n     let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n     let _ = String::try_from(\"foo\".to_string()).unwrap();\n     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n+    let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n }"}, {"sha": "5afb5dc45d3646b5620688e78f6a3d7ee502121a", "filename": "tests/ui/useless_conversion_try.stderr", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/705bfdcc467c0ddd7eb61d3adb24809b27bae891/tests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/705bfdcc467c0ddd7eb61d3adb24809b27bae891/tests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.stderr?ref=705bfdcc467c0ddd7eb61d3adb24809b27bae891", "patch": "@@ -1,8 +1,8 @@\n error: Useless conversion to the same type\n-  --> $DIR/useless_conversion_try.rs:6:5\n+  --> $DIR/useless_conversion_try.rs:6:13\n    |\n-LL |     T::try_from(val).unwrap()\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     let _ = T::try_from(val).unwrap();\n+   |             ^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/useless_conversion_try.rs:1:9\n@@ -12,28 +12,52 @@ LL | #![deny(clippy::useless_conversion)]\n    = help: consider removing `T::try_from()`\n \n error: Useless conversion to the same type\n-  --> $DIR/useless_conversion_try.rs:22:21\n+  --> $DIR/useless_conversion_try.rs:7:5\n+   |\n+LL |     val.try_into().unwrap()\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: Useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:29:21\n+   |\n+LL |     let _: String = \"foo\".to_string().try_into().unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: Useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:30:21\n    |\n LL |     let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `TryFrom::try_from()`\n \n error: Useless conversion to the same type\n-  --> $DIR/useless_conversion_try.rs:23:13\n+  --> $DIR/useless_conversion_try.rs:31:13\n    |\n LL |     let _ = String::try_from(\"foo\".to_string()).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n error: Useless conversion to the same type\n-  --> $DIR/useless_conversion_try.rs:24:13\n+  --> $DIR/useless_conversion_try.rs:32:13\n    |\n LL |     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n-error: aborting due to 4 previous errors\n+error: Useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:33:21\n+   |\n+LL |     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: aborting due to 7 previous errors\n "}]}