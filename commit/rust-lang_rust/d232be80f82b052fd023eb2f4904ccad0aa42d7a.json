{"sha": "d232be80f82b052fd023eb2f4904ccad0aa42d7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMzJiZTgwZjgyYjA1MmZkMDIzZWIyZjQ5MDRjY2FkMGFhNDJkN2E=", "commit": {"author": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2020-05-03T11:56:46Z"}, "committer": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2020-05-03T11:56:46Z"}, "message": "Fix tidy checks", "tree": {"sha": "bec8804136d049a7c6eb202b689dfaf8f5e5c0f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec8804136d049a7c6eb202b689dfaf8f5e5c0f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d232be80f82b052fd023eb2f4904ccad0aa42d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d232be80f82b052fd023eb2f4904ccad0aa42d7a", "html_url": "https://github.com/rust-lang/rust/commit/d232be80f82b052fd023eb2f4904ccad0aa42d7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d232be80f82b052fd023eb2f4904ccad0aa42d7a/comments", "author": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc29f1d062feeb68207c961d254652d6bff9fd9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc29f1d062feeb68207c961d254652d6bff9fd9b", "html_url": "https://github.com/rust-lang/rust/commit/bc29f1d062feeb68207c961d254652d6bff9fd9b"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "c90769c66556d16da475b6bc90bdbd3d045514ef", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d232be80f82b052fd023eb2f4904ccad0aa42d7a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d232be80f82b052fd023eb2f4904ccad0aa42d7a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d232be80f82b052fd023eb2f4904ccad0aa42d7a", "patch": "@@ -570,33 +570,30 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     // original type obligation, not the last one that failed, which is arbitrary.\n                     // Because of this, we modify the error to refer to the original obligation and\n                     // return early in the caller.\n-                    \n \n                     let has_colon = self\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .span_to_snippet(span)\n-                            .map(|w| w.contains(\":\"))\n-                            .unwrap_or(false);\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_snippet(span)\n+                        .map(|w| w.contains(\":\"))\n+                        .unwrap_or(false);\n \n                     let has_double_colon = self\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .span_to_snippet(span)\n-                            .map(|w| w.contains(\"::\"))\n-                            .unwrap_or(false);\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_snippet(span)\n+                        .map(|w| w.contains(\"::\"))\n+                        .unwrap_or(false);\n \n                     let has_bracket = self\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .span_to_snippet(span)\n-                            .map(|w| w.contains(\"{\"))\n-                            .unwrap_or(false);\n-\n-                   \n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_snippet(span)\n+                        .map(|w| w.contains(\"{\"))\n+                        .unwrap_or(false);\n \n                     let msg = format!(\n                         \"the trait bound `{}: {}` is not satisfied\",\n@@ -620,7 +617,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             obligation.parent_trait_ref.skip_binder().print_only_trait_path(),\n                         ),\n                     );\n-                \n+\n                     // This if is to prevent a special edge-case\n                     if !has_colon || has_double_colon || has_bracket {\n                         // We don't want a borrowing suggestion on the fields in structs,"}]}