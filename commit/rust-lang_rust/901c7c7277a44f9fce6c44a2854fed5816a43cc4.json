{"sha": "901c7c7277a44f9fce6c44a2854fed5816a43cc4", "node_id": "C_kwDOAAsO6NoAKDkwMWM3YzcyNzdhNDRmOWZjZTZjNDRhMjg1NGZlZDU4MTZhNDNjYzQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-14T11:44:31Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-14T11:44:31Z"}, "message": "`match_ast!` takes a pattern to allow underscore usage", "tree": {"sha": "3b4575810af80feb1ef5aa2d2fffda917651d9df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b4575810af80feb1ef5aa2d2fffda917651d9df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/901c7c7277a44f9fce6c44a2854fed5816a43cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/901c7c7277a44f9fce6c44a2854fed5816a43cc4", "html_url": "https://github.com/rust-lang/rust/commit/901c7c7277a44f9fce6c44a2854fed5816a43cc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/901c7c7277a44f9fce6c44a2854fed5816a43cc4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9915103c9e2de4d12aa6cefe7d96ac5095b3719c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9915103c9e2de4d12aa6cefe7d96ac5095b3719c", "html_url": "https://github.com/rust-lang/rust/commit/9915103c9e2de4d12aa6cefe7d96ac5095b3719c"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "2c540dc80d25ed83e9015d0201a9f5a00355a66c", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=901c7c7277a44f9fce6c44a2854fed5816a43cc4", "patch": "@@ -102,10 +102,10 @@ fn shorten_paths(node: &SyntaxNode, path: &ast::Path) {\n             match child {\n                 // Don't modify `use` items, as this can break the `use` item when injecting a new\n                 // import into the use tree.\n-                ast::Use(_it) => continue,\n+                ast::Use(_) => continue,\n                 // Don't descend into submodules, they don't have the same `use` items in scope.\n                 // FIXME: This isn't true due to `super::*` imports?\n-                ast::Module(_it) => continue,\n+                ast::Module(_) => continue,\n                 ast::Path(p) => if maybe_replace_path(p.clone(), path.clone()).is_none() {\n                     shorten_paths(p.syntax(), path);\n                 },"}, {"sha": "c6af285e86c3f3ce3604ef8100d024e030db1269", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=901c7c7277a44f9fce6c44a2854fed5816a43cc4", "patch": "@@ -517,7 +517,7 @@ impl<'a> CompletionContext<'a> {\n \n                         (ty, name)\n                     },\n-                    ast::ArgList(_it) => {\n+                    ast::ArgList(_) => {\n                         cov_mark::hit!(expected_type_fn_param);\n                         ActiveParameter::at_token(\n                             &self.sema,\n@@ -608,9 +608,9 @@ impl<'a> CompletionContext<'a> {\n                             .map(|c| (Some(c.return_type()), None))\n                             .unwrap_or((None, None))\n                     },\n-                    ast::ParamList(__) => (None, None),\n-                    ast::Stmt(__) => (None, None),\n-                    ast::Item(__) => (None, None),\n+                    ast::ParamList(_) => (None, None),\n+                    ast::Stmt(_) => (None, None),\n+                    ast::Item(_) => (None, None),\n                     _ => {\n                         match node.parent() {\n                             Some(n) => {\n@@ -702,10 +702,10 @@ impl<'a> CompletionContext<'a> {\n \n         Some(match_ast! {\n             match parent {\n-                ast::LifetimeParam(_it) => LifetimeContext::LifetimeParam(sema.find_node_at_offset_with_macros(original_file, offset)),\n-                ast::BreakExpr(_it) => LifetimeContext::LabelRef,\n-                ast::ContinueExpr(_it) => LifetimeContext::LabelRef,\n-                ast::Label(_it) => LifetimeContext::LabelDef,\n+                ast::LifetimeParam(_) => LifetimeContext::LifetimeParam(sema.find_node_at_offset_with_macros(original_file, offset)),\n+                ast::BreakExpr(_) => LifetimeContext::LabelRef,\n+                ast::ContinueExpr(_) => LifetimeContext::LabelRef,\n+                ast::Label(_) => LifetimeContext::LabelDef,\n                 _ => LifetimeContext::Lifetime,\n             }\n         })\n@@ -753,7 +753,7 @@ impl<'a> CompletionContext<'a> {\n         path_ctx.kind  = path.syntax().ancestors().find_map(|it| {\n             match_ast! {\n                 match it {\n-                    ast::PathType(_it) => Some(PathKind::Type),\n+                    ast::PathType(_) => Some(PathKind::Type),\n                     ast::PathExpr(it) => {\n                         path_ctx.has_call_parens = it.syntax().parent().map_or(false, |it| ast::CallExpr::can_cast(it.kind()));\n                         Some(PathKind::Expr)\n@@ -772,9 +772,9 @@ impl<'a> CompletionContext<'a> {\n                         Some(PathKind::Pat)\n                     },\n                     ast::MacroCall(it) => it.excl_token().and(Some(PathKind::Mac)),\n-                    ast::Meta(_it) => Some(PathKind::Attr),\n+                    ast::Meta(_) => Some(PathKind::Attr),\n                     ast::Visibility(it) => Some(PathKind::Vis { has_in_token: it.in_token().is_some() }),\n-                    ast::UseTree(_it) => Some(PathKind::Use),\n+                    ast::UseTree(_) => Some(PathKind::Use),\n                     _ => None,\n                 }\n             }\n@@ -851,9 +851,9 @@ fn pattern_context_for(pat: ast::Pat) -> PatternContext {\n                         });\n                         return (PatternRefutability::Irrefutable, param.ty().is_some())\n                     },\n-                    ast::MatchArm(__) => PatternRefutability::Refutable,\n-                    ast::Condition(__) => PatternRefutability::Refutable,\n-                    ast::ForExpr(__) => PatternRefutability::Irrefutable,\n+                    ast::MatchArm(_) => PatternRefutability::Refutable,\n+                    ast::Condition(_) => PatternRefutability::Refutable,\n+                    ast::ForExpr(_) => PatternRefutability::Irrefutable,\n                     _ => PatternRefutability::Irrefutable,\n                 }\n             };"}, {"sha": "41e2423f46b396410ce318b142a1c851b138ded4", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=901c7c7277a44f9fce6c44a2854fed5816a43cc4", "patch": "@@ -100,7 +100,7 @@ pub(crate) fn determine_prev_sibling(name_like: &ast::NameLike) -> Option<Immedi\n         let res = match_ast! {\n             match prev_sibling {\n                 // vis followed by random ident will always error the parser\n-                ast::Visibility(_it) => ImmediatePrevSibling::Visibility,\n+                ast::Visibility(_) => ImmediatePrevSibling::Visibility,\n                 _ => return None,\n             }\n         };\n@@ -112,7 +112,7 @@ pub(crate) fn determine_prev_sibling(name_like: &ast::NameLike) -> Option<Immedi\n                 let node = it.expr().filter(|_| it.semicolon_token().is_none())?.syntax().clone();\n                 match_ast! {\n                     match node {\n-                        ast::IfExpr(_it) => ImmediatePrevSibling::IfExpr,\n+                        ast::IfExpr(_) => ImmediatePrevSibling::IfExpr,\n                         _ => return None,\n                     }\n                 }\n@@ -128,7 +128,7 @@ pub(crate) fn determine_prev_sibling(name_like: &ast::NameLike) -> Option<Immedi\n                 } else {\n                     return None\n             },\n-            ast::Attr(_it) => ImmediatePrevSibling::Attribute,\n+            ast::Attr(_) => ImmediatePrevSibling::Attribute,\n             _ => return None,\n         }\n     };\n@@ -200,31 +200,31 @@ pub(crate) fn determine_location(\n \n     let res = match_ast! {\n         match parent {\n-            ast::IdentPat(_it) => ImmediateLocation::IdentPat,\n-            ast::Rename(_it) => ImmediateLocation::Rename,\n-            ast::StmtList(_it) => ImmediateLocation::StmtList,\n-            ast::SourceFile(_it) => ImmediateLocation::ItemList,\n-            ast::ItemList(_it) => ImmediateLocation::ItemList,\n-            ast::RefExpr(_it) => ImmediateLocation::RefExpr,\n-            ast::Variant(_it) => ImmediateLocation::Variant,\n+            ast::IdentPat(_) => ImmediateLocation::IdentPat,\n+            ast::Rename(_) => ImmediateLocation::Rename,\n+            ast::StmtList(_) => ImmediateLocation::StmtList,\n+            ast::SourceFile(_) => ImmediateLocation::ItemList,\n+            ast::ItemList(_) => ImmediateLocation::ItemList,\n+            ast::RefExpr(_) => ImmediateLocation::RefExpr,\n+            ast::Variant(_) => ImmediateLocation::Variant,\n             ast::RecordField(it) => if it.ty().map_or(false, |it| it.syntax().text_range().contains(offset)) {\n                 return None;\n             } else {\n                 ImmediateLocation::RecordField\n             },\n-            ast::RecordExprFieldList(_it) => sema\n+            ast::RecordExprFieldList(_) => sema\n                 .find_node_at_offset_with_macros(original_file, offset)\n                 .map(ImmediateLocation::RecordExprUpdate)?,\n-            ast::TupleField(_it) => ImmediateLocation::TupleField,\n-            ast::TupleFieldList(_it) => ImmediateLocation::TupleField,\n-            ast::TypeBound(_it) => ImmediateLocation::TypeBound,\n-            ast::TypeBoundList(_it) => ImmediateLocation::TypeBound,\n+            ast::TupleField(_) => ImmediateLocation::TupleField,\n+            ast::TupleFieldList(_) => ImmediateLocation::TupleField,\n+            ast::TypeBound(_) => ImmediateLocation::TypeBound,\n+            ast::TypeBoundList(_) => ImmediateLocation::TypeBound,\n             ast::AssocItemList(it) => match it.syntax().parent().map(|it| it.kind()) {\n                 Some(IMPL) => ImmediateLocation::Impl,\n                 Some(TRAIT) => ImmediateLocation::Trait,\n                 _ => return None,\n             },\n-            ast::GenericArgList(_it) => sema\n+            ast::GenericArgList(_) => sema\n                 .find_node_at_offset_with_macros(original_file, offset)\n                 .map(ImmediateLocation::GenericArgList)?,\n             ast::Module(it) => {"}, {"sha": "0d0f7b78d811eee0f6f9a9bd25579984238da62b", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=901c7c7277a44f9fce6c44a2854fed5816a43cc4", "patch": "@@ -657,7 +657,7 @@ impl ReferenceCategory {\n \n         let mode = r.syntax().ancestors().find_map(|node| {\n         match_ast! {\n-            match (node) {\n+            match node {\n                 ast::BinExpr(expr) => {\n                     if matches!(expr.op_kind()?, ast::BinaryOp::Assignment { .. }) {\n                         // If the variable or field ends on the LHS's end then it's a Write (covers fields and locals)."}, {"sha": "ec281625a6f0d60994287d692e91d650a18c6695", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=901c7c7277a44f9fce6c44a2854fed5816a43cc4", "patch": "@@ -242,7 +242,7 @@ macro_rules! match_ast {\n     (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n \n     (match ($node:expr) {\n-        $( ast::$ast:ident($it:ident) => $res:expr, )*\n+        $( ast::$ast:ident($it:pat) => $res:expr, )*\n         _ => $catch_all:expr $(,)?\n     }) => {{\n         $( if let Some($it) = ast::$ast::cast($node.clone()) { $res } else )*"}, {"sha": "8dc47e0bd3f40d51c754b893b79ca5b3eacc562e", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/901c7c7277a44f9fce6c44a2854fed5816a43cc4/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=901c7c7277a44f9fce6c44a2854fed5816a43cc4", "patch": "@@ -275,7 +275,7 @@ fn validate_path_keywords(segment: ast::PathSegment, errors: &mut Vec<SyntaxErro\n                             return Some(tree_path);\n                         }\n                     },\n-                    ast::UseTreeList(_it) => continue,\n+                    ast::UseTreeList(_) => continue,\n                     ast::Path(parent) => path = parent,\n                     _ => return None,\n                 }"}]}