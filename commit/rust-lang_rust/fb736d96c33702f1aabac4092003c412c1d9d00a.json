{"sha": "fb736d96c33702f1aabac4092003c412c1d9d00a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNzM2ZDk2YzMzNzAyZjFhYWJhYzQwOTIwMDNjNDEyYzFkOWQwMGE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-02T18:15:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-02T18:15:09Z"}, "message": "Rollup merge of #85001 - CDirkx:bytestring, r=JohnTitor\n\nMerge `sys_common::bytestring` back into `os_str_bytes`\n\n`bytestring` contains code for correctly debug formatting a byte slice (`[u8]`). This functionality is and has historically only been used to provide the debug formatting of byte-based os-strings (on unix etc.).\n\nHaving this functionality in the separate `bytestring` module was useful in the past to reduce duplication, as [when it was added](https://github.com/rust-lang/rust/pull/46798) `os_str_bytes` was still split into `sys::{unix, redox, wasi, etc.}::os_str`. However, now that is no longer the case, there is not much reason for the `bytestring` functionality to be separate from `os_str_bytes`; I don't think it is very likely that another part of std will need to handle formatting byte strings that are not os-strings in the future (everything should be `utf8`). This is why this PR merges the functionality of `bytestring` directly into the debug implementation in `os_str_bytes`.", "tree": {"sha": "63141520596cbabde8ff5570538e8056322011eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63141520596cbabde8ff5570538e8056322011eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb736d96c33702f1aabac4092003c412c1d9d00a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg31etCRBK7hj4Ov3rIwAAX1YIAI2y3kx9Wj2L0OB+lfdV38s7\nTbdwoNVlqS6TL+/XTnb7q3b+qBoIyme41COlMkJs2mOb+5i104M6v//2vYuOKNSE\nIZub1hMXWM0uKTQoZ1BFo6Tnwuct8AZjkxm/uTqgslHg7cFHsK/6wCx3v+em3WCU\noBbVsJw2nT96mavKPyBXTK64OefpMgEMKZCPyWLKw1HwIVDn4c6/QJKOx9SMvlwi\n48rTc6vAjQox21up4GIPLHnTZSH4HOxPrfmfYiK3rvYj31+paX6HHWcZwjzDySuC\nv06U+wwQJU2EGeB278yEVsn9+sAH+rQzK32/p8su4FCkS2T5bEjsNlPU70WJou8=\n=6l8r\n-----END PGP SIGNATURE-----\n", "payload": "tree 63141520596cbabde8ff5570538e8056322011eb\nparent 45470a3bcd9f26017bcdbf4d5ae07be0d922ce93\nparent 059008f0334fc3086f541da3c1e5729cc7b53a7c\nauthor Yuki Okushi <jtitor@2k36.org> 1625249709 +0900\ncommitter GitHub <noreply@github.com> 1625249709 +0900\n\nRollup merge of #85001 - CDirkx:bytestring, r=JohnTitor\n\nMerge `sys_common::bytestring` back into `os_str_bytes`\n\n`bytestring` contains code for correctly debug formatting a byte slice (`[u8]`). This functionality is and has historically only been used to provide the debug formatting of byte-based os-strings (on unix etc.).\n\nHaving this functionality in the separate `bytestring` module was useful in the past to reduce duplication, as [when it was added](https://github.com/rust-lang/rust/pull/46798) `os_str_bytes` was still split into `sys::{unix, redox, wasi, etc.}::os_str`. However, now that is no longer the case, there is not much reason for the `bytestring` functionality to be separate from `os_str_bytes`; I don't think it is very likely that another part of std will need to handle formatting byte strings that are not os-strings in the future (everything should be `utf8`). This is why this PR merges the functionality of `bytestring` directly into the debug implementation in `os_str_bytes`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb736d96c33702f1aabac4092003c412c1d9d00a", "html_url": "https://github.com/rust-lang/rust/commit/fb736d96c33702f1aabac4092003c412c1d9d00a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb736d96c33702f1aabac4092003c412c1d9d00a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45470a3bcd9f26017bcdbf4d5ae07be0d922ce93", "url": "https://api.github.com/repos/rust-lang/rust/commits/45470a3bcd9f26017bcdbf4d5ae07be0d922ce93", "html_url": "https://github.com/rust-lang/rust/commit/45470a3bcd9f26017bcdbf4d5ae07be0d922ce93"}, {"sha": "059008f0334fc3086f541da3c1e5729cc7b53a7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/059008f0334fc3086f541da3c1e5729cc7b53a7c", "html_url": "https://github.com/rust-lang/rust/commit/059008f0334fc3086f541da3c1e5729cc7b53a7c"}], "stats": {"total": 78, "additions": 28, "deletions": 50}, "files": [{"sha": "97fba60c27109e3773cccf77c7ef9708be5cc084", "filename": "library/std/src/sys_common/bytestring.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45470a3bcd9f26017bcdbf4d5ae07be0d922ce93/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45470a3bcd9f26017bcdbf4d5ae07be0d922ce93/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring.rs?ref=45470a3bcd9f26017bcdbf4d5ae07be0d922ce93", "patch": "@@ -1,26 +0,0 @@\n-#![allow(dead_code)]\n-\n-#[cfg(test)]\n-mod tests;\n-\n-use crate::fmt::{Formatter, Result, Write};\n-use core::str::lossy::{Utf8Lossy, Utf8LossyChunk};\n-\n-pub fn debug_fmt_bytestring(slice: &[u8], f: &mut Formatter<'_>) -> Result {\n-    // Writes out a valid unicode string with the correct escape sequences\n-    fn write_str_escaped(f: &mut Formatter<'_>, s: &str) -> Result {\n-        for c in s.chars().flat_map(|c| c.escape_debug()) {\n-            f.write_char(c)?\n-        }\n-        Ok(())\n-    }\n-\n-    f.write_str(\"\\\"\")?;\n-    for Utf8LossyChunk { valid, broken } in Utf8Lossy::from_bytes(slice).chunks() {\n-        write_str_escaped(f, valid)?;\n-        for b in broken {\n-            write!(f, \"\\\\x{:02X}\", b)?;\n-        }\n-    }\n-    f.write_str(\"\\\"\")\n-}"}, {"sha": "1685f087d183e49f81d35ced27e8f480c9cada81", "filename": "library/std/src/sys_common/bytestring/tests.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/45470a3bcd9f26017bcdbf4d5ae07be0d922ce93/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45470a3bcd9f26017bcdbf4d5ae07be0d922ce93/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbytestring%2Ftests.rs?ref=45470a3bcd9f26017bcdbf4d5ae07be0d922ce93", "patch": "@@ -1,19 +0,0 @@\n-use super::*;\n-use crate::fmt::{Debug, Formatter, Result};\n-\n-#[test]\n-fn smoke() {\n-    struct Helper<'a>(&'a [u8]);\n-\n-    impl Debug for Helper<'_> {\n-        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n-            debug_fmt_bytestring(self.0, f)\n-        }\n-    }\n-\n-    let input = b\"\\xF0hello,\\tworld\";\n-    let expected = r#\"\"\\xF0hello,\\tworld\"\"#;\n-    let output = format!(\"{:?}\", Helper(input));\n-\n-    assert!(output == expected);\n-}"}, {"sha": "db83bad60d84ccc7da38e5af755dbb37ab076022", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb736d96c33702f1aabac4092003c412c1d9d00a/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb736d96c33702f1aabac4092003c412c1d9d00a/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=fb736d96c33702f1aabac4092003c412c1d9d00a", "patch": "@@ -21,7 +21,6 @@\n mod tests;\n \n pub mod backtrace;\n-pub mod bytestring;\n pub mod condvar;\n pub mod fs;\n pub mod io;"}, {"sha": "569600470db77a22126e835facb44f913d85c17b", "filename": "library/std/src/sys_common/os_str_bytes.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fb736d96c33702f1aabac4092003c412c1d9d00a/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb736d96c33702f1aabac4092003c412c1d9d00a/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs?ref=fb736d96c33702f1aabac4092003c412c1d9d00a", "patch": "@@ -2,16 +2,18 @@\n //! systems: just a `Vec<u8>`/`[u8]`.\n \n use crate::borrow::Cow;\n-\n use crate::fmt;\n+use crate::fmt::Write;\n use crate::mem;\n use crate::rc::Rc;\n use crate::str;\n use crate::sync::Arc;\n-use crate::sys_common::bytestring::debug_fmt_bytestring;\n use crate::sys_common::{AsInner, IntoInner};\n \n-use core::str::lossy::Utf8Lossy;\n+use core::str::lossy::{Utf8Lossy, Utf8LossyChunk};\n+\n+#[cfg(test)]\n+mod tests;\n \n #[derive(Hash)]\n #[repr(transparent)]\n@@ -26,7 +28,19 @@ pub struct Slice {\n \n impl fmt::Debug for Slice {\n     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        debug_fmt_bytestring(&self.inner, formatter)\n+        // Writes out a valid unicode string with the correct escape sequences\n+\n+        formatter.write_str(\"\\\"\")?;\n+        for Utf8LossyChunk { valid, broken } in Utf8Lossy::from_bytes(&self.inner).chunks() {\n+            for c in valid.chars().flat_map(|c| c.escape_debug()) {\n+                formatter.write_char(c)?\n+            }\n+\n+            for b in broken {\n+                write!(formatter, \"\\\\x{:02X}\", b)?;\n+            }\n+        }\n+        formatter.write_str(\"\\\"\")\n     }\n }\n "}, {"sha": "379673781557389d37828b7431b05a080a12a954", "filename": "library/std/src/sys_common/os_str_bytes/tests.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fb736d96c33702f1aabac4092003c412c1d9d00a/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb736d96c33702f1aabac4092003c412c1d9d00a/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes%2Ftests.rs?ref=fb736d96c33702f1aabac4092003c412c1d9d00a", "patch": "@@ -0,0 +1,10 @@\n+use super::*;\n+\n+#[test]\n+fn slice_debug_output() {\n+    let input = Slice::from_u8_slice(b\"\\xF0hello,\\tworld\");\n+    let expected = r#\"\"\\xF0hello,\\tworld\"\"#;\n+    let output = format!(\"{:?}\", input);\n+\n+    assert_eq!(output, expected);\n+}"}]}