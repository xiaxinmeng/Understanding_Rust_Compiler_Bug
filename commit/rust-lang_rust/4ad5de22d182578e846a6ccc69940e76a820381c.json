{"sha": "4ad5de22d182578e846a6ccc69940e76a820381c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDVkZTIyZDE4MjU3OGU4NDZhNmNjYzY5OTQwZTc2YTgyMDM4MWM=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-07T03:15:02Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-07-10T01:53:32Z"}, "message": "Tweak `spawn_thread_pool`.\n\nThis makes the two versions (parallel and non-parallel) more similar to\neach other.", "tree": {"sha": "ef20ee1f40f9166fad3146531a6a81c6079787c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef20ee1f40f9166fad3146531a6a81c6079787c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad5de22d182578e846a6ccc69940e76a820381c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad5de22d182578e846a6ccc69940e76a820381c", "html_url": "https://github.com/rust-lang/rust/commit/4ad5de22d182578e846a6ccc69940e76a820381c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad5de22d182578e846a6ccc69940e76a820381c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e8ec2db1d3d695958a8040fbb3491a4378ef7ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e8ec2db1d3d695958a8040fbb3491a4378ef7ae", "html_url": "https://github.com/rust-lang/rust/commit/1e8ec2db1d3d695958a8040fbb3491a4378ef7ae"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "dc82219b3328610bcb6259ef8c70fe0490527d3f", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4ad5de22d182578e846a6ccc69940e76a820381c/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad5de22d182578e846a6ccc69940e76a820381c/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=4ad5de22d182578e846a6ccc69940e76a820381c", "patch": "@@ -142,7 +142,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n \n     crate::callbacks::setup_callbacks();\n \n-    scoped_thread(cfg, || {\n+    let main_handler = move || {\n         rustc_ast::with_session_globals(edition, || {\n             ty::tls::GCX_PTR.set(&Lock::new(0), || {\n                 if let Some(stderr) = stderr {\n@@ -151,7 +151,9 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n                 f()\n             })\n         })\n-    })\n+    };\n+\n+    scoped_thread(cfg, main_handler)\n }\n \n #[cfg(parallel_compiler)]\n@@ -161,12 +163,9 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n-    use rayon::{ThreadBuilder, ThreadPool, ThreadPoolBuilder};\n-\n-    let gcx_ptr = &Lock::new(0);\n     crate::callbacks::setup_callbacks();\n \n-    let mut config = ThreadPoolBuilder::new()\n+    let mut config = rayon::ThreadPoolBuilder::new()\n         .thread_name(|_| \"rustc\".to_string())\n         .acquire_thread_handler(jobserver::acquire_thread)\n         .release_thread_handler(jobserver::release_thread)\n@@ -177,7 +176,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n         config = config.stack_size(size);\n     }\n \n-    let with_pool = move |pool: &ThreadPool| pool.install(move || f());\n+    let with_pool = move |pool: &rayon::ThreadPool| pool.install(move || f());\n \n     rustc_ast::with_session_globals(edition, || {\n         rustc_ast::SESSION_GLOBALS.with(|ast_session_globals| {\n@@ -190,10 +189,12 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n                 let main_handler = move |thread: ThreadBuilder| {\n                     rustc_ast::SESSION_GLOBALS.set(ast_session_globals, || {\n                         rustc_span::SESSION_GLOBALS.set(span_session_globals, || {\n-                            if let Some(stderr) = stderr {\n-                                io::set_panic(Some(box Sink(stderr.clone())));\n-                            }\n-                            ty::tls::GCX_PTR.set(gcx_ptr, || thread.run())\n+                            ty::tls::GCX_PTR.set(&Lock::new(0), || {\n+                                if let Some(stderr) = stderr {\n+                                    io::set_panic(Some(box Sink(stderr.clone())));\n+                                }\n+                                thread.run()\n+                            })\n                         })\n                     })\n                 };"}]}