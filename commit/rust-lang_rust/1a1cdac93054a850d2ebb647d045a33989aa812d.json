{"sha": "1a1cdac93054a850d2ebb647d045a33989aa812d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMWNkYWM5MzA1NGE4NTBkMmViYjY0N2QwNDVhMzM5ODlhYTgxMmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-02T15:59:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-02T15:59:23Z"}, "message": "Remove code that was moved from the backend to rustc_incremental", "tree": {"sha": "bc1018b9f4e53f0d7fba47c4840386ee65173225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc1018b9f4e53f0d7fba47c4840386ee65173225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a1cdac93054a850d2ebb647d045a33989aa812d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1cdac93054a850d2ebb647d045a33989aa812d", "html_url": "https://github.com/rust-lang/rust/commit/1a1cdac93054a850d2ebb647d045a33989aa812d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a1cdac93054a850d2ebb647d045a33989aa812d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c41a6953b77bfd3db2e68b6b2f0f7dfba3be6d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c41a6953b77bfd3db2e68b6b2f0f7dfba3be6d2", "html_url": "https://github.com/rust-lang/rust/commit/2c41a6953b77bfd3db2e68b6b2f0f7dfba3be6d2"}], "stats": {"total": 32, "additions": 9, "deletions": 23}, "files": [{"sha": "df89883f0bbb7418df249bbba4a8f04e3e191171", "filename": "src/driver/aot.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a1cdac93054a850d2ebb647d045a33989aa812d/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1cdac93054a850d2ebb647d045a33989aa812d/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=1a1cdac93054a850d2ebb647d045a33989aa812d", "patch": "@@ -281,9 +281,6 @@ pub(super) fn run_aot(\n         None\n     };\n \n-    rustc_incremental::assert_dep_graph(tcx);\n-    rustc_incremental::save_dep_graph(tcx);\n-\n     let metadata_module = if need_metadata_module {\n         let _timer = tcx.prof.generic_activity(\"codegen crate metadata\");\n         let (metadata_cgu_name, tmp_file) = tcx.sess.time(\"write compressed metadata\", || {\n@@ -322,10 +319,6 @@ pub(super) fn run_aot(\n         None\n     };\n \n-    if tcx.sess.opts.output_types.should_codegen() {\n-        rustc_incremental::assert_module_sources::assert_module_sources(tcx);\n-    }\n-\n     Box::new((\n         CodegenResults {\n             crate_name: tcx.crate_name(LOCAL_CRATE),"}, {"sha": "8946ac43bc65a386966c8069f090ef535e9784f8", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a1cdac93054a850d2ebb647d045a33989aa812d/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1cdac93054a850d2ebb647d045a33989aa812d/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=1a1cdac93054a850d2ebb647d045a33989aa812d", "patch": "@@ -824,7 +824,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n                     }\n                     ty => unreachable!(\"bswap {}\", ty),\n                 }\n-            };\n+            }\n             let res = CValue::by_val(swap(&mut fx.bcx, arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };"}, {"sha": "4b6431e42b53f990d45ede5a56690b48e6a4ad54", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1a1cdac93054a850d2ebb647d045a33989aa812d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1cdac93054a850d2ebb647d045a33989aa812d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1a1cdac93054a850d2ebb647d045a33989aa812d", "patch": "@@ -27,7 +27,6 @@ extern crate rustc_incremental;\n extern crate rustc_index;\n extern crate rustc_session;\n extern crate rustc_span;\n-extern crate rustc_symbol_mangling;\n extern crate rustc_target;\n \n // This prevents duplicating functions and statics that are already part of the host rustc process.\n@@ -257,8 +256,6 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         };\n         let res = driver::codegen_crate(tcx, metadata, need_metadata_module, config);\n \n-        rustc_symbol_mangling::test::report_symbol_names(tcx);\n-\n         res\n     }\n \n@@ -280,18 +277,14 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     ) -> Result<(), ErrorReported> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n-        let _timer = sess.prof.generic_activity(\"link_crate\");\n-\n-        sess.time(\"linking\", || {\n-            let target_cpu = crate::target_triple(sess).to_string();\n-            link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n-                sess,\n-                &codegen_results,\n-                outputs,\n-                &codegen_results.crate_name.as_str(),\n-                &target_cpu,\n-            );\n-        });\n+        let target_cpu = crate::target_triple(sess).to_string();\n+        link_binary::<crate::archive::ArArchiveBuilder<'_>>(\n+            sess,\n+            &codegen_results,\n+            outputs,\n+            &codegen_results.crate_name.as_str(),\n+            &target_cpu,\n+        );\n \n         Ok(())\n     }"}]}