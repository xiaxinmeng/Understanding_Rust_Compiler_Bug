{"sha": "4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZGMzZDgzM2FmMTIyOTQyMGZjZTM3YjI0NWQ1Y2NjZDFkN2NjM2Y=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-10-26T22:13:12Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-03T04:09:34Z"}, "message": "Extended elaboration for trait aliases to include arbitrary bounds.", "tree": {"sha": "3efa920f528793a265744570e61ccb50b477db3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3efa920f528793a265744570e61ccb50b477db3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "html_url": "https://github.com/rust-lang/rust/commit/4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8fcfcef3087e9770fa016c5776ce5bf25558ed7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8fcfcef3087e9770fa016c5776ce5bf25558ed7", "html_url": "https://github.com/rust-lang/rust/commit/a8fcfcef3087e9770fa016c5776ce5bf25558ed7"}], "stats": {"total": 116, "additions": 57, "deletions": 59}, "files": [{"sha": "4b41831afbb3323b667b62655aa796061531f607", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -1635,7 +1635,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ambiguous: false,\n         };\n \n-        self.assemble_candidates_for_alias(obligation, &mut candidates)?;\n+        self.assemble_candidates_for_trait_alias(obligation, &mut candidates)?;\n \n         // Other bounds. Consider both in-scope bounds from fn decl\n         // and applicable impls. There is a certain set of precedence rules here.\n@@ -2255,14 +2255,14 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn assemble_candidates_for_alias(\n+    fn assemble_candidates_for_trait_alias(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) -> Result<(), SelectionError<'tcx>> {\n         // OK to skip binder here because the tests we do below do not involve bound regions\n         let self_ty = *obligation.self_ty().skip_binder();\n-        debug!(\"assemble_candidates_for_alias(self_ty={:?})\", self_ty);\n+        debug!(\"assemble_candidates_for_trait_alias(self_ty={:?})\", self_ty);\n \n         let def_id = obligation.predicate.def_id();\n \n@@ -2907,7 +2907,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         self.vtable_auto_impl(obligation, trait_def_id, types)\n     }\n \n-    /// See `confirm_auto_impl_candidate`\n+    /// See `confirm_auto_impl_candidate`.\n     fn vtable_auto_impl(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n@@ -2964,7 +2964,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // this time not in a probe.\n         self.in_snapshot(|this, snapshot| {\n             let (substs, placeholder_map) = this.rematch_impl(impl_def_id, obligation, snapshot);\n-            debug!(\"confirm_impl_candidate substs={:?}\", substs);\n+            debug!(\"confirm_impl_candidate: substs={:?}\", substs);\n             let cause = obligation.derived_cause(ImplDerivedObligation);\n             this.vtable_impl(\n                 impl_def_id,"}, {"sha": "74f8d67ce04846a97c309a0573037530a4b98225", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -333,7 +333,7 @@ impl<I> FilterToTraits<I> {\n     }\n }\n \n-impl<'tcx,I:Iterator<Item=ty::Predicate<'tcx>>> Iterator for FilterToTraits<I> {\n+impl<'tcx,I:Iterator<Item = ty::Predicate<'tcx>>> Iterator for FilterToTraits<I> {\n     type Item = ty::PolyTraitRef<'tcx>;\n \n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {"}, {"sha": "3d9ec7245f9d6382badb60bd61dac16ff3e29e24", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -1051,24 +1051,24 @@ pub enum Predicate<'tcx> {\n     /// would be the type parameters.\n     Trait(PolyTraitPredicate<'tcx>),\n \n-    /// where 'a : 'b\n+    /// where `'a : 'b`\n     RegionOutlives(PolyRegionOutlivesPredicate<'tcx>),\n \n-    /// where T : 'a\n+    /// where `T : 'a`\n     TypeOutlives(PolyTypeOutlivesPredicate<'tcx>),\n \n-    /// where <T as TraitRef>::Name == X, approximately.\n-    /// See `ProjectionPredicate` struct for details.\n+    /// where `<T as TraitRef>::Name == X`, approximately.\n+    /// See the `ProjectionPredicate` struct for details.\n     Projection(PolyProjectionPredicate<'tcx>),\n \n-    /// no syntax: T WF\n+    /// no syntax: `T` well-formed\n     WellFormed(Ty<'tcx>),\n \n     /// trait must be object-safe\n     ObjectSafe(DefId),\n \n     /// No direct syntax. May be thought of as `where T : FnFoo<...>`\n-    /// for some substitutions `...` and T being a closure type.\n+    /// for some substitutions `...` and `T` being a closure type.\n     /// Satisfied (or refuted) once we know the closure's kind.\n     ClosureKind(DefId, ClosureSubsts<'tcx>, ClosureKind),\n "}, {"sha": "a6997260784d38e0083b6cf5ce81af24e0167729", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -527,7 +527,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.def_key(def_id).disambiguated_data.data == DefPathData::ClosureExpr\n     }\n \n-    /// True if `def_id` refers to a trait (e.g., `trait Foo { ... }`).\n+    /// True if `def_id` refers to a trait (i.e., `trait Foo { ... }`).\n     pub fn is_trait(self, def_id: DefId) -> bool {\n         if let DefPathData::Trait(_) = self.def_key(def_id).disambiguated_data.data {\n             true"}, {"sha": "61861da62f759134b1c6858ab4167d169b70453c", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -403,25 +403,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n-            ItemKind::TraitAlias(Generics { ref params, .. }, ..) => {\n-                for param in params {\n-                    match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {}\n-                        GenericParamKind::Type { ref default, .. } => {\n-                            if !param.bounds.is_empty() {\n-                                self.err_handler()\n-                                    .span_err(param.ident.span, \"type parameters on the left \\\n-                                        side of a trait alias cannot be bounded\");\n-                            }\n-                            if !default.is_none() {\n-                                self.err_handler()\n-                                    .span_err(param.ident.span, \"type parameters on the left \\\n-                                        side of a trait alias cannot have defaults\");\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (c.f. #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, \"path\");"}, {"sha": "9556be6ebfc1cd09b837ac844e834bd61bd506e6", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -544,7 +544,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     }\n \n     /// Given the type/region arguments provided to some path (along with\n-    /// an implicit Self, if this is a trait reference) returns the complete\n+    /// an implicit `Self`, if this is a trait reference) returns the complete\n     /// set of substitutions. This may involve applying defaulted type parameters.\n     ///\n     /// Note that the type listing given here is *exactly* what the user provided.\n@@ -721,7 +721,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     {\n         let trait_def_id = self.trait_def_id(trait_ref);\n \n-        debug!(\"ast_path_to_poly_trait_ref({:?}, def_id={:?})\", trait_ref, trait_def_id);\n+        debug!(\"instantiate_poly_trait_ref({:?}, def_id={:?})\", trait_ref, trait_def_id);\n \n         self.prohibit_generics(trait_ref.path.segments.split_last().unwrap().1);\n \n@@ -738,11 +738,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             let predicate: Result<_, ErrorReported> =\n                 self.ast_type_binding_to_poly_projection_predicate(\n                     trait_ref.ref_id, poly_trait_ref, binding, speculative, &mut dup_bindings);\n-            // ok to ignore Err() because ErrorReported (see above)\n+            // ok to ignore Err because ErrorReported (see above)\n             Some((predicate.ok()?, binding.span))\n         }));\n \n-        debug!(\"ast_path_to_poly_trait_ref({:?}, projections={:?}) -> {:?}\",\n+        debug!(\"instantiate_poly_trait_ref({:?}, projections={:?}) -> {:?}\",\n                trait_ref, poly_projections, poly_trait_ref);\n         poly_trait_ref\n     }\n@@ -1020,7 +1020,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             return tcx.types.err;\n         }\n \n-        // use a btreeset to keep output in a more consistent order\n+        // use a BTreeSet to keep output in a more consistent order\n         let mut associated_types = BTreeSet::default();\n \n         for tr in traits::supertraits(tcx, principal) {"}, {"sha": "21a1abd97a5a3bc7870b815c451bd11f25cf34c2", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -245,8 +245,8 @@ fn type_param_predicates<'a, 'tcx>(\n     use rustc::hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n-    // written inline like `<T:Foo>` or in a where clause like\n-    // `where T:Foo`.\n+    // written inline like `<T : Foo>` or in a where clause like\n+    // `where T : Foo`.\n \n     let param_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let param_owner = tcx.hir.ty_param_owner(param_id);\n@@ -317,12 +317,12 @@ fn type_param_predicates<'a, 'tcx>(\n     let icx = ItemCtxt::new(tcx, item_def_id);\n     result\n         .predicates\n-        .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty));\n+        .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty, true));\n     result\n }\n \n impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n-    /// Find bounds from hir::Generics. This requires scanning through the\n+    /// Find bounds from `hir::Generics`. This requires scanning through the\n     /// AST. We do this to avoid having to convert *all* the bounds, which\n     /// would create artificial cycles. Instead we can only convert the\n     /// bounds for a type parameter `X` if `X::Foo` is used.\n@@ -331,6 +331,7 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n         ast_generics: &hir::Generics,\n         param_id: ast::NodeId,\n         ty: Ty<'tcx>,\n+        only_self_bounds: bool,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n         let from_ty_params = ast_generics\n             .params\n@@ -350,9 +351,21 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n                 hir::WherePredicate::BoundPredicate(ref bp) => Some(bp),\n                 _ => None,\n             })\n-            .filter(|bp| is_param(self.tcx, &bp.bounded_ty, param_id))\n-            .flat_map(|bp| bp.bounds.iter())\n-            .flat_map(|b| predicates_from_bound(self, ty, b));\n+            .flat_map(|bp| {\n+                let bt = if is_param(self.tcx, &bp.bounded_ty, param_id) {\n+                    Some(ty)\n+                } else {\n+                    if only_self_bounds {\n+                        None\n+                    } else {\n+                        Some(self.to_ty(&bp.bounded_ty))\n+                    }\n+                };\n+                bp.bounds.iter().filter_map(move |b| {\n+                    if let Some(bt) = bt { Some((bt, b)) } else { None }\n+                })\n+            })\n+            .flat_map(|(bt, b)| predicates_from_bound(self, bt, b));\n \n         from_ty_params.chain(from_where_clauses).collect()\n     }\n@@ -690,22 +703,25 @@ fn super_predicates_of<'a, 'tcx>(\n \n     let icx = ItemCtxt::new(tcx, trait_def_id);\n \n-    // Convert the bounds that follow the colon, e.g. `Bar+Zed` in `trait Foo : Bar+Zed`.\n+    // Convert the bounds that follow the colon, e.g. `Bar + Zed` in `trait Foo : Bar + Zed`.\n     let self_param_ty = tcx.mk_self_type();\n     let superbounds1 = compute_bounds(&icx, self_param_ty, bounds, SizedByDefault::No, item.span);\n \n     let superbounds1 = superbounds1.predicates(tcx, self_param_ty);\n \n     // Convert any explicit superbounds in the where clause,\n     // e.g. `trait Foo where Self : Bar`:\n-    let superbounds2 = icx.type_parameter_bounds_in_generics(generics, item.id, self_param_ty);\n+    let is_trait_alias = ty::is_trait_alias(tcx, trait_def_id);\n+    let superbounds2 = icx.type_parameter_bounds_in_generics(\n+        generics, item.id, self_param_ty, !is_trait_alias);\n \n     // Combine the two lists to form the complete set of superbounds:\n     let superbounds: Vec<_> = superbounds1.into_iter().chain(superbounds2).collect();\n \n     // Now require that immediate supertraits are converted,\n     // which will, in turn, reach indirect supertraits.\n     for &(pred, span) in &superbounds {\n+        debug!(\"superbound: {:?}\", pred);\n         if let ty::Predicate::Trait(bound) = pred {\n             tcx.at(span).super_predicates_of(bound.def_id());\n         }\n@@ -2007,10 +2023,10 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(\n     }\n }\n \n-/// Converts a specific GenericBound from the AST into a set of\n+/// Converts a specific `GenericBound` from the AST into a set of\n /// predicates that apply to the self-type. A vector is returned\n-/// because this can be anywhere from 0 predicates (`T:?Sized` adds no\n-/// predicates) to 1 (`T:Foo`) to many (`T:Bar<X=i32>` adds `T:Bar`\n+/// because this can be anywhere from zero predicates (`T : ?Sized` adds no\n+/// predicates) to one (`T : Foo`) to many (`T : Bar<X=i32>` adds `T : Bar`\n /// and `<T as Bar>::X == i32`).\n fn predicates_from_bound<'tcx>(\n     astconv: &dyn AstConv<'tcx, 'tcx>,"}, {"sha": "d3416d6923cb0bc0b1940bbe8f8140647caab0dc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -1295,7 +1295,7 @@ impl<'a> Parser<'a> {\n             self.check_keyword(keywords::Extern) && self.is_extern_non_path()\n     }\n \n-    /// parse a TyKind::BareFn type:\n+    /// parse a `TyKind::BareFn` type:\n     fn parse_ty_bare_fn(&mut self, generic_params: Vec<GenericParam>) -> PResult<'a, TyKind> {\n         /*\n \n@@ -5779,7 +5779,7 @@ impl<'a> Parser<'a> {\n                              ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if let Some(mac) = self.parse_assoc_macro_invoc(\"impl\", Some(vis), at_end)? {\n-            // Method macro.\n+            // method macro\n             Ok((keywords::Invalid.ident(), vec![], ast::Generics::default(),\n                 ast::ImplItemKind::Macro(mac)))\n         } else {\n@@ -6792,11 +6792,11 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_item(lo.to(prev_span), invalid, ItemKind::ForeignMod(m), visibility, attrs))\n     }\n \n-    /// Parse type Foo = Bar;\n+    /// Parse `type Foo = Bar;`\n     /// or\n-    /// existential type Foo: Bar;\n+    /// `existential type Foo: Bar;`\n     /// or\n-    /// return None without modifying the parser state\n+    /// `return None` without modifying the parser state\n     fn eat_type(&mut self) -> Option<PResult<'a, (Ident, AliasKind, ast::Generics)>> {\n         // This parses the grammar:\n         //     Ident [\"<\"...\">\"] [\"where\" ...] (\"=\" | \":\") Ty \";\""}, {"sha": "25c850db6ce411468f0c781000c23410d7dac42e", "filename": "src/test/ui/traits/trait-alias-fail1.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail1.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -8,13 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-trait_alias\n+#![feature(trait_alias)]\n \n trait CloneDefault<T> = Default where T: Clone;\n trait BoundedAlias<T: Clone = ()> = Default;\n \n-trait A<T: Send> {}\n-trait B<T> = A<T>; // FIXME: parameter T should need a bound here, or semantics should be changed\n+trait Foo {}\n+trait A<T: Foo> {}\n+trait B<T> = A<T>; // T cannot be unbounded\n \n impl CloneDefault for () {}\n "}, {"sha": "447f4b1b9de98c5a1cea961dceafcdbd05ded060", "filename": "src/test/ui/traits/trait-alias-fail1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail1.stderr?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -35,7 +35,7 @@ LL | trait BoundedAlias<T: Clone = ()> = Default;\n error[E0658]: trait aliases are experimental (see issue #41517)\n   --> $DIR/trait-alias-fail1.rs:17:1\n    |\n-LL | trait B<T> = A<T>; // FIXME: this should not work... or should it?\n+LL | trait B<T> = A<T>; // FIXME: parameter T should need a bound here, or semantics should be changed\n    | ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(trait_alias)] to the crate attributes to enable"}, {"sha": "3adcd8436d8a1c2c9075aaf5b7bbfe67552660da", "filename": "src/test/ui/traits/trait-alias-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdc3d833af1229420fce37b245d5cccd1d7cc3f/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-fail2.rs?ref=4bdc3d833af1229420fce37b245d5cccd1d7cc3f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// gate-test-trait_alias\n+#![feature(trait_alias)]\n \n trait EqAlias = Eq;\n trait IteratorAlias = Iterator;"}]}