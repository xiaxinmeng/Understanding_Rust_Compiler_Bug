{"sha": "dfbc143e65dd4dc8499f7296ddc7889854a8cc7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYmMxNDNlNjVkZDRkYzg0OTlmNzI5NmRkYzc4ODk4NTRhOGNjN2Q=", "commit": {"author": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2020-05-03T09:00:25Z"}, "committer": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2020-05-03T09:00:25Z"}, "message": "Adding if to prevent borrowing suggestion in structs #71136", "tree": {"sha": "9e3843dce6aee313beed2aa98ca6743a7d882587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e3843dce6aee313beed2aa98ca6743a7d882587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfbc143e65dd4dc8499f7296ddc7889854a8cc7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbc143e65dd4dc8499f7296ddc7889854a8cc7d", "html_url": "https://github.com/rust-lang/rust/commit/dfbc143e65dd4dc8499f7296ddc7889854a8cc7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfbc143e65dd4dc8499f7296ddc7889854a8cc7d/comments", "author": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "html_url": "https://github.com/rust-lang/rust/commit/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "37f567401b74ab311bbf8976b2e288815e63265b", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc143e65dd4dc8499f7296ddc7889854a8cc7d/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc143e65dd4dc8499f7296ddc7889854a8cc7d/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=dfbc143e65dd4dc8499f7296ddc7889854a8cc7d", "patch": "@@ -562,13 +562,42 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 param_env,\n                 new_trait_ref.without_const().to_predicate(),\n             );\n+\n             if self.predicate_must_hold_modulo_regions(&new_obligation) {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                     // We have a very specific type of error, where just borrowing this argument\n                     // might solve the problem. In cases like this, the important part is the\n                     // original type obligation, not the last one that failed, which is arbitrary.\n                     // Because of this, we modify the error to refer to the original obligation and\n                     // return early in the caller.\n+                    \n+\n+                    let has_colon = self\n+                            .tcx\n+                            .sess\n+                            .source_map()\n+                            .span_to_snippet(span)\n+                            .map(|w| w.contains(\":\"))\n+                            .unwrap_or(false);\n+\n+                    let has_double_colon = self\n+                            .tcx\n+                            .sess\n+                            .source_map()\n+                            .span_to_snippet(span)\n+                            .map(|w| w.contains(\"::\"))\n+                            .unwrap_or(false);\n+\n+                    let has_bracket = self\n+                            .tcx\n+                            .sess\n+                            .source_map()\n+                            .span_to_snippet(span)\n+                            .map(|w| w.contains(\"{\"))\n+                            .unwrap_or(false);\n+\n+                   \n+\n                     let msg = format!(\n                         \"the trait bound `{}: {}` is not satisfied\",\n                         found,\n@@ -591,12 +620,23 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             obligation.parent_trait_ref.skip_binder().print_only_trait_path(),\n                         ),\n                     );\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider borrowing here\",\n-                        format!(\"&{}\", snippet),\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                \n+                    // This if is to prevent a special edge-case\n+                    if !has_colon || has_double_colon || has_bracket {\n+                        // We don't want a borrowing suggestion on the fields in structs,\n+                        // ```\n+                        // struct Foo {\n+                        //  the_foos: Vec<Foo>\n+                        // }\n+                        // ```\n+\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider borrowing here\",\n+                            format!(\"&{}\", snippet),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n                     return true;\n                 }\n             }"}]}