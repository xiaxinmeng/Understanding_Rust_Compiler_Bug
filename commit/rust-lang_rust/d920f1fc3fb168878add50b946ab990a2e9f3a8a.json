{"sha": "d920f1fc3fb168878add50b946ab990a2e9f3a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MjBmMWZjM2ZiMTY4ODc4YWRkNTBiOTQ2YWI5OTBhMmU5ZjNhOGE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-07T16:30:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-07T16:30:48Z"}, "message": "Rollup merge of #47631 - SimonSapin:nonnull, r=alexcrichton\n\nAdd some APIs to ptr::NonNull and fix `since` attributes\n\nThis is a follow-up to its stabilization in https://github.com/rust-lang/rust/pull/46952. Tracking issue: https://github.com/rust-lang/rust/issues/27730.\n\n* These trait impls are insta-stable: `Hash`, `PartialEq`, `Eq`, `PartialOrd` and `Ord`.\n* The new `cast<U>() -> NonNull<U>`  method is `#[unstable]`. It was proposed in https://github.com/rust-lang/rust/pull/46952#issuecomment-359220010.", "tree": {"sha": "73ef370d68acb083d41dc10d38e62d448730151a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73ef370d68acb083d41dc10d38e62d448730151a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d920f1fc3fb168878add50b946ab990a2e9f3a8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaeym4CRBK7hj4Ov3rIwAAdHIIABO3HQaJVUHy3gylQMcSrN2L\nqE5ZvjVZfXLeCBvaVJLjvKmkn2nLDzp1thowH+CILWMZEUJL1dgmaeG88iDfWJoU\n3irm40LJqbQYD7UDV2eEQOm0GnC3lzDnJ3JmehYZKsjoRG0gJV/CTBWf5Mc2xLKE\n+7RebrAE1F5W/Unn5nw7t5rKmc/IumMbLSPoWRniXcw1itjiaNBi/sDoRqliljLX\nI3XvZZf9fz2yrYf0OeoElrv4aF6TW2UkZxpuo5MX7iDob/+t9TSCinyc/WuE4WP6\nokRsX8AVstS4Ra7b24xMTgtTaYn4leNWzb3EXSvunwDWW3E8Tr5SpxxCmoZ0aJY=\n=4+GE\n-----END PGP SIGNATURE-----\n", "payload": "tree 73ef370d68acb083d41dc10d38e62d448730151a\nparent aee22556a97aac4b921efb806b26fbb60a6b8a92\nparent b8ffc8a3d8c181e958d2ddf4f108f0cd3a108013\nauthor Manish Goregaokar <manishsmail@gmail.com> 1518021048 -0800\ncommitter GitHub <noreply@github.com> 1518021048 -0800\n\nRollup merge of #47631 - SimonSapin:nonnull, r=alexcrichton\n\nAdd some APIs to ptr::NonNull and fix `since` attributes\n\nThis is a follow-up to its stabilization in https://github.com/rust-lang/rust/pull/46952. Tracking issue: https://github.com/rust-lang/rust/issues/27730.\n\n* These trait impls are insta-stable: `Hash`, `PartialEq`, `Eq`, `PartialOrd` and `Ord`.\n* The new `cast<U>() -> NonNull<U>`  method is `#[unstable]`. It was proposed in https://github.com/rust-lang/rust/pull/46952#issuecomment-359220010.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d920f1fc3fb168878add50b946ab990a2e9f3a8a", "html_url": "https://github.com/rust-lang/rust/commit/d920f1fc3fb168878add50b946ab990a2e9f3a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d920f1fc3fb168878add50b946ab990a2e9f3a8a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee22556a97aac4b921efb806b26fbb60a6b8a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee22556a97aac4b921efb806b26fbb60a6b8a92", "html_url": "https://github.com/rust-lang/rust/commit/aee22556a97aac4b921efb806b26fbb60a6b8a92"}, {"sha": "b8ffc8a3d8c181e958d2ddf4f108f0cd3a108013", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ffc8a3d8c181e958d2ddf4f108f0cd3a108013", "html_url": "https://github.com/rust-lang/rust/commit/b8ffc8a3d8c181e958d2ddf4f108f0cd3a108013"}], "stats": {"total": 89, "additions": 64, "deletions": 25}, "files": [{"sha": "3d84e910fe662d0de5873d267b8fbda362584038", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 63, "deletions": 24, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/d920f1fc3fb168878add50b946ab990a2e9f3a8a/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d920f1fc3fb168878add50b946ab990a2e9f3a8a/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d920f1fc3fb168878add50b946ab990a2e9f3a8a", "patch": "@@ -2461,7 +2461,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n }\n \n /// Previous name of `NonNull`.\n-#[rustc_deprecated(since = \"1.24\", reason = \"renamed to `NonNull`\")]\n+#[rustc_deprecated(since = \"1.25.0\", reason = \"renamed to `NonNull`\")]\n #[unstable(feature = \"shared\", issue = \"27730\")]\n pub type Shared<T> = NonNull<T>;\n \n@@ -2482,34 +2482,27 @@ pub type Shared<T> = NonNull<T>;\n /// Usually this won't be necessary; covariance is correct for most safe abstractions,\n /// such as Box, Rc, Arc, Vec, and LinkedList. This is the case because they\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n pub struct NonNull<T: ?Sized> {\n     pointer: NonZero<*const T>,\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n-impl<T: ?Sized> fmt::Debug for NonNull<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Pointer::fmt(&self.as_ptr(), f)\n-    }\n-}\n-\n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> !Send for NonNull<T> { }\n \n /// `NonNull` pointers are not `Sync` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> !Sync for NonNull<T> { }\n \n impl<T: Sized> NonNull<T> {\n     /// Creates a new `NonNull` that is dangling, but well-aligned.\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn dangling() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n@@ -2524,19 +2517,19 @@ impl<T: ?Sized> NonNull<T> {\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         NonNull { pointer: NonZero::new_unchecked(ptr) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         NonZero::new(ptr as *const T).map(|nz| NonNull { pointer: nz })\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub fn as_ptr(self) -> *mut T {\n         self.pointer.get() as *mut T\n     }\n@@ -2546,7 +2539,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub unsafe fn as_ref(&self) -> &T {\n         &*self.as_ptr()\n     }\n@@ -2556,47 +2549,93 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n-    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+    #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         &mut *self.as_ptr()\n     }\n+\n+    /// Cast to a pointer of another type\n+    #[unstable(feature = \"nonnull_cast\", issue = \"47653\")]\n+    pub fn cast<U>(self) -> NonNull<U> {\n+        unsafe {\n+            NonNull::new_unchecked(self.as_ptr() as *mut U)\n+        }\n+    }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Clone for NonNull<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Copy for NonNull<T> { }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> { }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> fmt::Debug for NonNull<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Pointer::fmt(&self.as_ptr(), f)\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> fmt::Pointer for NonNull<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> Eq for NonNull<T> {}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> PartialEq for NonNull<T> {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.as_ptr() == other.as_ptr()\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> Ord for NonNull<T> {\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        self.as_ptr().cmp(&other.as_ptr())\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> PartialOrd for NonNull<T> {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        self.as_ptr().partial_cmp(&other.as_ptr())\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+impl<T: ?Sized> hash::Hash for NonNull<T> {\n+    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        self.as_ptr().hash(state)\n+    }\n+}\n+\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     fn from(unique: Unique<T>) -> Self {\n         NonNull { pointer: unique.pointer }\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }\n     }\n }\n \n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }"}, {"sha": "112e110609310081a080748ca5e4ea23286de3f3", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d920f1fc3fb168878add50b946ab990a2e9f3a8a/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d920f1fc3fb168878add50b946ab990a2e9f3a8a/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=d920f1fc3fb168878add50b946ab990a2e9f3a8a", "patch": "@@ -198,7 +198,7 @@ impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: UnwindSafe + ?Sized> UnwindSafe for Unique<T> {}\n-#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n+#[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for NonNull<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: ?Sized> UnwindSafe for Mutex<T> {}"}]}