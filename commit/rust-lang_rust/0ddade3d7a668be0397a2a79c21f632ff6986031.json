{"sha": "0ddade3d7a668be0397a2a79c21f632ff6986031", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZGFkZTNkN2E2NjhiZTAzOTdhMmE3OWMyMWY2MzJmZjY5ODYwMzE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-15T10:17:37Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-15T12:10:07Z"}, "message": "Extend alias analysis to check assignments\n\nThis is a somewhat odd place to put these checks, but the data tracked\nby that pass, and the available functions, make it trivial to do such\na check there.", "tree": {"sha": "8b833d4919c6d483988fd052ce1cbd17b196059d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b833d4919c6d483988fd052ce1cbd17b196059d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ddade3d7a668be0397a2a79c21f632ff6986031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ddade3d7a668be0397a2a79c21f632ff6986031", "html_url": "https://github.com/rust-lang/rust/commit/0ddade3d7a668be0397a2a79c21f632ff6986031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ddade3d7a668be0397a2a79c21f632ff6986031/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb518abc9539ef114cfe9a08fa1964d28c98ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb518abc9539ef114cfe9a08fa1964d28c98ef3", "html_url": "https://github.com/rust-lang/rust/commit/5fb518abc9539ef114cfe9a08fa1964d28c98ef3"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "f7ea23317c330d6dffda9651c584d3f53d2cdba0", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ddade3d7a668be0397a2a79c21f632ff6986031/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ddade3d7a668be0397a2a79c21f632ff6986031/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=0ddade3d7a668be0397a2a79c21f632ff6986031", "patch": "@@ -10,6 +10,14 @@ import std::option::some;\n import std::option::none;\n import std::option::is_none;\n \n+// This is not an alias-analyser (though it would merit from becoming one, or\n+// at getting input from one, to be more precise). It is a pass that checks\n+// whether aliases are used in a safe way. Beyond that, though it doesn't have\n+// a lot to do with aliases, it also checks whether assignments are valid\n+// (using an lval, which is actually mutable), since it already has all the\n+// information needed to do that (and the typechecker, which would be a\n+// logical place for such a check, doesn't).\n+\n tag valid {\n     valid;\n     overwritten(span, ast::path);\n@@ -318,6 +326,7 @@ fn check_var(&ctx cx, &@ast::expr ex, &ast::path p, ast::ann ann, bool assign,\n     }\n }\n \n+// FIXME does not catch assigning to immutable object fields yet\n fn check_assign(&@ctx cx, &@ast::expr dest, &@ast::expr src,\n                 &scope sc, &vt[scope] v) {\n     visit_expr(cx, src, sc, v);\n@@ -339,6 +348,18 @@ fn check_assign(&@ctx cx, &@ast::expr dest, &@ast::expr src,\n             check_var(*cx, dest, p, ann, true, sc);\n         }\n         case (_) {\n+            auto root = expr_root(*cx, dest, false);\n+            if (vec::len(root.ds) == 0u) {\n+                cx.tcx.sess.span_err(dest.span, \"assignment to non-lvalue\");\n+            } else if (!root.ds.(0).mut) {\n+                auto name = alt (root.ds.(0).kind) {\n+                    case (unbox) { \"box\" }\n+                    case (field) { \"field\" }\n+                    case (index) { \"vec content\" }\n+                };\n+                cx.tcx.sess.span_err\n+                    (dest.span, \"assignment to immutable \" + name);\n+            }\n             visit_expr(cx, dest, sc, v);\n         }\n     }\n@@ -391,7 +412,7 @@ fn deps(&scope sc, vec[def_num] roots) -> vec[uint] {\n \n tag deref_t {\n     unbox;\n-    field(ident);\n+    field;\n     index;\n }\n type deref = rec(bool mut, deref_t kind, ty::t outer_t);\n@@ -446,7 +467,7 @@ fn expr_root(&ctx cx, @ast::expr ex, bool autoderef)\n                     case (ty::ty_obj(_)) {}\n                 }\n                 vec::push(ds, rec(mut=mut,\n-                                  kind=field(ident),\n+                                  kind=field,\n                                   outer_t=auto_unbox.t));\n                 maybe_push_auto_unbox(auto_unbox.d, ds);\n                 ex = base;"}, {"sha": "5b10892ba7a83fc39ac9bb21773df6f1df11e2cf", "filename": "src/test/compile-fail/assign-alias.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ddade3d7a668be0397a2a79c21f632ff6986031/src%2Ftest%2Fcompile-fail%2Fassign-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ddade3d7a668be0397a2a79c21f632ff6986031/src%2Ftest%2Fcompile-fail%2Fassign-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-alias.rs?ref=0ddade3d7a668be0397a2a79c21f632ff6986031", "patch": "@@ -1,5 +1,3 @@\n-// xfail-stage0\n-// xfail-stage1\n // error-pattern:assigning to immutable alias\n \n fn f(&int i) {"}, {"sha": "79bb37db0471f45cb3c1e69e6f945d8aed367367", "filename": "src/test/compile-fail/writing-through-read-alias.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ddade3d7a668be0397a2a79c21f632ff6986031/src%2Ftest%2Fcompile-fail%2Fwriting-through-read-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ddade3d7a668be0397a2a79c21f632ff6986031/src%2Ftest%2Fcompile-fail%2Fwriting-through-read-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-through-read-alias.rs?ref=0ddade3d7a668be0397a2a79c21f632ff6986031", "patch": "@@ -1,9 +1,7 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n // -*- rust -*-\n \n-// error-pattern: writing to immutable type\n+// error-pattern:assignment to immutable field\n \n type point = rec(int x, int y, int z);\n "}, {"sha": "7f574ce3320eebd76a271ae200d4d00d5f2f65c1", "filename": "src/test/compile-fail/writing-to-immutable-vec.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ddade3d7a668be0397a2a79c21f632ff6986031/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ddade3d7a668be0397a2a79c21f632ff6986031/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs?ref=0ddade3d7a668be0397a2a79c21f632ff6986031", "patch": "@@ -1,8 +1,6 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-// error-pattern: writing to immutable type\n+// error-pattern:assignment to immutable vec content\n fn main() {\n   let vec[int] v = [1, 2, 3];\n   v.(1) = 4;\n-}\n\\ No newline at end of file\n+}"}]}