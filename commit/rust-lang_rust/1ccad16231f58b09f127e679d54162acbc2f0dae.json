{"sha": "1ccad16231f58b09f127e679d54162acbc2f0dae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjY2FkMTYyMzFmNThiMDlmMTI3ZTY3OWQ1NDE2MmFjYmMyZjBkYWU=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2019-03-22T21:14:35Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2019-03-22T22:56:40Z"}, "message": "Update sys::time impls to have checked_sub_instant", "tree": {"sha": "3063eeccdb21cb5810661ebecd4f689bee1c1c86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3063eeccdb21cb5810661ebecd4f689bee1c1c86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ccad16231f58b09f127e679d54162acbc2f0dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ccad16231f58b09f127e679d54162acbc2f0dae", "html_url": "https://github.com/rust-lang/rust/commit/1ccad16231f58b09f127e679d54162acbc2f0dae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ccad16231f58b09f127e679d54162acbc2f0dae/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56b1fd0e7c09445574bae34332eeefa93713e44", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56b1fd0e7c09445574bae34332eeefa93713e44", "html_url": "https://github.com/rust-lang/rust/commit/d56b1fd0e7c09445574bae34332eeefa93713e44"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "49a234e1158044b4de1f4f76ea4e67ab30f86ca4", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=1ccad16231f58b09f127e679d54162acbc2f0dae", "patch": "@@ -33,11 +33,9 @@ impl Instant {\n         Instant { t: 0 }\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n-        let diff = self.t\n-            .checked_sub(other.t)\n-            .expect(\"second instant is later than self\");\n-        Duration::new(diff / NSEC_PER_SEC, (diff % NSEC_PER_SEC) as u32)\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+        let diff = self.t.checked_sub(other.t)?;\n+        Some(Duration::new(diff / NSEC_PER_SEC, (diff % NSEC_PER_SEC) as u32))\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "881ad5c0aeb14b849b1347e62b1005440567becb", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=1ccad16231f58b09f127e679d54162acbc2f0dae", "patch": "@@ -137,10 +137,8 @@ impl Instant {\n         false\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n-        self.t.sub_timespec(&other.t).unwrap_or_else(|_| {\n-            panic!(\"specified instant was later than self\")\n-        })\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+        self.t.sub_timespec(&other.t).ok()\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "4659f7ba71fe07a50ba895aa8bffc9236c258f56", "filename": "src/libstd/sys/sgx/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ftime.rs?ref=1ccad16231f58b09f127e679d54162acbc2f0dae", "patch": "@@ -14,8 +14,8 @@ impl Instant {\n         Instant(usercalls::insecure_time())\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n-        self.0 - other.0\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+        self.0.checked_sub(other.0)\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "6b5a89aee7d690e3229f79b165cd4e6c5f3344b6", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=1ccad16231f58b09f127e679d54162acbc2f0dae", "patch": "@@ -149,12 +149,11 @@ mod inner {\n             true\n         }\n \n-        pub fn sub_instant(&self, other: &Instant) -> Duration {\n+        pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+            let diff = self.t.checked_sub(other.t)?;\n             let info = info();\n-            let diff = self.t.checked_sub(other.t)\n-                           .expect(\"second instant is later than self\");\n             let nanos = mul_div_u64(diff, info.numer as u64, info.denom as u64);\n-            Duration::new(nanos / NSEC_PER_SEC, (nanos % NSEC_PER_SEC) as u32)\n+            Some(Duration::new(nanos / NSEC_PER_SEC, (nanos % NSEC_PER_SEC) as u32))\n         }\n \n         pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n@@ -285,10 +284,8 @@ mod inner {\n             false // last clause, used so `||` is always trailing above\n         }\n \n-        pub fn sub_instant(&self, other: &Instant) -> Duration {\n-            self.t.sub_timespec(&other.t).unwrap_or_else(|_| {\n-                panic!(\"specified instant was later than self\")\n-            })\n+        pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+            self.t.sub_timespec(&other.t).ok()\n         }\n \n         pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "3f71461eea4872f2a422b2dc86085b30eb135bb9", "filename": "src/libstd/sys/wasm/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs?ref=1ccad16231f58b09f127e679d54162acbc2f0dae", "patch": "@@ -22,8 +22,8 @@ impl Instant {\n         false\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n-        self.0 - other.0\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+        self.0.checked_sub(other.0)\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}, {"sha": "aa53f1194fdb43b8f8ff20a38aefe708252971d4", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccad16231f58b09f127e679d54162acbc2f0dae/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=1ccad16231f58b09f127e679d54162acbc2f0dae", "patch": "@@ -49,17 +49,17 @@ impl Instant {\n         Instant { t: Duration::from_secs(0) }\n     }\n \n-    pub fn sub_instant(&self, other: &Instant) -> Duration {\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n         // On windows there's a threshold below which we consider two timestamps\n         // equivalent due to measurement error. For more details + doc link,\n         // check the docs on epsilon.\n         let epsilon =\n             perf_counter::PerformanceCounterInstant::epsilon();\n         if other.t > self.t && other.t - self.t <= epsilon {\n-            return Duration::new(0, 0)\n+            Some(Duration::new(0, 0))\n+        } else {\n+            self.t.checked_sub(other.t)\n         }\n-        self.t.checked_sub(other.t)\n-              .expect(\"specified instant was later than self\")\n     }\n \n     pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {"}]}