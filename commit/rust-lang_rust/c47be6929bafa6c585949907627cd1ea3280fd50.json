{"sha": "c47be6929bafa6c585949907627cd1ea3280fd50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0N2JlNjkyOWJhZmE2YzU4NTk0OTkwNzYyN2NkMWVhMzI4MGZkNTA=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-31T21:31:14Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-01T00:18:28Z"}, "message": "remove `copy` as a keyword", "tree": {"sha": "54a61c84b3e73aa751d24dd512970bd32ba51a36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a61c84b3e73aa751d24dd512970bd32ba51a36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c47be6929bafa6c585949907627cd1ea3280fd50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c47be6929bafa6c585949907627cd1ea3280fd50", "html_url": "https://github.com/rust-lang/rust/commit/c47be6929bafa6c585949907627cd1ea3280fd50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c47be6929bafa6c585949907627cd1ea3280fd50/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bad51585424cee9c97491c1aed7cf27a3cdcb68", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bad51585424cee9c97491c1aed7cf27a3cdcb68", "html_url": "https://github.com/rust-lang/rust/commit/4bad51585424cee9c97491c1aed7cf27a3cdcb68"}], "stats": {"total": 138, "additions": 68, "deletions": 70}, "files": [{"sha": "8d979990b312734a18a5f6a2a8942497bba3f95f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 68, "deletions": 70, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/c47be6929bafa6c585949907627cd1ea3280fd50/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47be6929bafa6c585949907627cd1ea3280fd50/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=c47be6929bafa6c585949907627cd1ea3280fd50", "patch": "@@ -440,42 +440,41 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"as\",                 // 32\n         \"break\",              // 33\n         \"const\",              // 34\n-        \"copy\",               // 35\n-        \"do\",                 // 36\n-        \"else\",               // 37\n-        \"enum\",               // 38\n-        \"extern\",             // 39\n-        \"false\",              // 40\n-        \"fn\",                 // 41\n-        \"for\",                // 42\n-        \"if\",                 // 43\n-        \"impl\",               // 44\n-        \"let\",                // 45\n-        \"__log\",              // 46\n-        \"loop\",               // 47\n-        \"match\",              // 48\n-        \"mod\",                // 49\n-        \"mut\",                // 50\n-        \"once\",               // 51\n-        \"priv\",               // 52\n-        \"pub\",                // 53\n-        \"pure\",               // 54\n-        \"ref\",                // 55\n-        \"return\",             // 56\n+        \"do\",                 // 35\n+        \"else\",               // 36\n+        \"enum\",               // 37\n+        \"extern\",             // 38\n+        \"false\",              // 39\n+        \"fn\",                 // 40\n+        \"for\",                // 41\n+        \"if\",                 // 42\n+        \"impl\",               // 43\n+        \"let\",                // 44\n+        \"__log\",              // 45\n+        \"loop\",               // 46\n+        \"match\",              // 47\n+        \"mod\",                // 48\n+        \"mut\",                // 49\n+        \"once\",               // 50\n+        \"priv\",               // 51\n+        \"pub\",                // 52\n+        \"pure\",               // 53\n+        \"ref\",                // 54\n+        \"return\",             // 55\n         \"static\",             // 27 -- also a special ident\n         \"self\",               //  8 -- also a special ident\n-        \"struct\",             // 57\n-        \"super\",              // 58\n-        \"true\",               // 59\n-        \"trait\",              // 60\n-        \"type\",               // 61\n-        \"unsafe\",             // 62\n-        \"use\",                // 63\n-        \"while\",              // 64\n-\n-        \"be\",                 // 65\n-        \"in\",                 // 66\n-        \"foreach\",            // 67\n+        \"struct\",             // 56\n+        \"super\",              // 57\n+        \"true\",               // 58\n+        \"trait\",              // 59\n+        \"type\",               // 60\n+        \"unsafe\",             // 61\n+        \"use\",                // 62\n+        \"while\",              // 63\n+\n+        \"be\",                 // 64\n+        \"in\",                 // 65\n+        \"foreach\",            // 66\n     ];\n \n     @ident_interner {\n@@ -609,40 +608,40 @@ pub mod keywords {\n                 As => ident { name: 32, ctxt: 0 },\n                 Break => ident { name: 33, ctxt: 0 },\n                 Const => ident { name: 34, ctxt: 0 },\n-                Do => ident { name: 36, ctxt: 0 },\n-                Else => ident { name: 37, ctxt: 0 },\n-                Enum => ident { name: 38, ctxt: 0 },\n-                Extern => ident { name: 39, ctxt: 0 },\n-                False => ident { name: 40, ctxt: 0 },\n-                Fn => ident { name: 41, ctxt: 0 },\n-                For => ident { name: 42, ctxt: 0 },\n-                ForEach => ident { name: 67, ctxt: 0 },\n-                If => ident { name: 43, ctxt: 0 },\n-                Impl => ident { name: 44, ctxt: 0 },\n-                In => ident { name: 66, ctxt: 0 },\n-                Let => ident { name: 45, ctxt: 0 },\n-                __Log => ident { name: 46, ctxt: 0 },\n-                Loop => ident { name: 47, ctxt: 0 },\n-                Match => ident { name: 48, ctxt: 0 },\n-                Mod => ident { name: 49, ctxt: 0 },\n-                Mut => ident { name: 50, ctxt: 0 },\n-                Once => ident { name: 51, ctxt: 0 },\n-                Priv => ident { name: 52, ctxt: 0 },\n-                Pub => ident { name: 53, ctxt: 0 },\n-                Pure => ident { name: 54, ctxt: 0 },\n-                Ref => ident { name: 55, ctxt: 0 },\n-                Return => ident { name: 56, ctxt: 0 },\n+                Do => ident { name: 35, ctxt: 0 },\n+                Else => ident { name: 36, ctxt: 0 },\n+                Enum => ident { name: 37, ctxt: 0 },\n+                Extern => ident { name: 38, ctxt: 0 },\n+                False => ident { name: 39, ctxt: 0 },\n+                Fn => ident { name: 40, ctxt: 0 },\n+                For => ident { name: 41, ctxt: 0 },\n+                ForEach => ident { name: 66, ctxt: 0 },\n+                If => ident { name: 42, ctxt: 0 },\n+                Impl => ident { name: 43, ctxt: 0 },\n+                In => ident { name: 65, ctxt: 0 },\n+                Let => ident { name: 44, ctxt: 0 },\n+                __Log => ident { name: 45, ctxt: 0 },\n+                Loop => ident { name: 46, ctxt: 0 },\n+                Match => ident { name: 47, ctxt: 0 },\n+                Mod => ident { name: 48, ctxt: 0 },\n+                Mut => ident { name: 49, ctxt: 0 },\n+                Once => ident { name: 50, ctxt: 0 },\n+                Priv => ident { name: 51, ctxt: 0 },\n+                Pub => ident { name: 52, ctxt: 0 },\n+                Pure => ident { name: 53, ctxt: 0 },\n+                Ref => ident { name: 54, ctxt: 0 },\n+                Return => ident { name: 55, ctxt: 0 },\n                 Static => ident { name: 27, ctxt: 0 },\n                 Self => ident { name: 8, ctxt: 0 },\n-                Struct => ident { name: 57, ctxt: 0 },\n-                Super => ident { name: 58, ctxt: 0 },\n-                True => ident { name: 59, ctxt: 0 },\n-                Trait => ident { name: 60, ctxt: 0 },\n-                Type => ident { name: 61, ctxt: 0 },\n-                Unsafe => ident { name: 62, ctxt: 0 },\n-                Use => ident { name: 63, ctxt: 0 },\n-                While => ident { name: 64, ctxt: 0 },\n-                Be => ident { name: 65, ctxt: 0 },\n+                Struct => ident { name: 56, ctxt: 0 },\n+                Super => ident { name: 57, ctxt: 0 },\n+                True => ident { name: 58, ctxt: 0 },\n+                Trait => ident { name: 59, ctxt: 0 },\n+                Type => ident { name: 60, ctxt: 0 },\n+                Unsafe => ident { name: 61, ctxt: 0 },\n+                Use => ident { name: 62, ctxt: 0 },\n+                While => ident { name: 63, ctxt: 0 },\n+                Be => ident { name: 64, ctxt: 0 },\n             }\n         }\n     }\n@@ -658,7 +657,7 @@ pub fn is_keyword(kw: keywords::Keyword, tok: &Token) -> bool {\n pub fn is_any_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 27 | 32 .. 65 => true,\n+            8 | 27 | 32 .. 64 => true,\n             _ => false,\n         },\n         _ => false\n@@ -668,7 +667,7 @@ pub fn is_any_keyword(tok: &Token) -> bool {\n pub fn is_strict_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 27 | 32 .. 64 => true,\n+            8 | 27 | 32 .. 63 => true,\n             _ => false,\n         },\n         _ => false,\n@@ -678,14 +677,13 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n pub fn is_reserved_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            65 => true,\n+            64 => true,\n             _ => false,\n         },\n         _ => false,\n     }\n }\n \n-\n #[cfg(test)]\n mod test {\n     use super::*;"}]}