{"sha": "f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MTE1NzY1YzVhZDE2Nzg5ZTljY2RkNDlkY2ExYTU2ZDQ3ZjJiM2Y=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-01T13:09:30Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:37Z"}, "message": "Intrinsic checks are just needed for `qualify_min_const_fn`", "tree": {"sha": "56b64952cc94780ea1ffb1072c7b3698477a4d0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b64952cc94780ea1ffb1072c7b3698477a4d0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "html_url": "https://github.com/rust-lang/rust/commit/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b77969466c23a51fdd7da25aa3ccc98e52d58d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b77969466c23a51fdd7da25aa3ccc98e52d58d3b", "html_url": "https://github.com/rust-lang/rust/commit/b77969466c23a51fdd7da25aa3ccc98e52d58d3b"}], "stats": {"total": 83, "additions": 53, "deletions": 30}, "files": [{"sha": "bc06167399533cb2055ba69de2e51ebb05b13d3a", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "patch": "@@ -5,7 +5,6 @@ use ty::TyCtxt;\n use syntax_pos::symbol::Symbol;\n use hir::map::blocks::FnLikeNode;\n use syntax::attr;\n-use rustc_target::spec::abi;\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     /// Whether the `def_id` counts as const fn in your current crate, considering all active\n@@ -40,18 +39,6 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n     /// Returns true if this function must conform to `min_const_fn`\n     pub fn is_min_const_fn(self, def_id: DefId) -> bool {\n-        // some intrinsics are waved through if called inside the\n-        // standard library. Users never need to call them directly\n-        if let abi::Abi::RustIntrinsic = self.fn_sig(def_id).abi() {\n-            match &self.item_name(def_id).as_str()[..] {\n-                | \"size_of\"\n-                | \"min_align_of\"\n-                | \"needs_drop\"\n-                => return true,\n-                _ => {},\n-            }\n-        }\n-\n         // Bail out if the signature doesn't contain `const`\n         if !self.is_const_fn_raw(def_id) {\n             return false;\n@@ -60,7 +47,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         if self.features().staged_api {\n             // in order for a libstd function to be considered min_const_fn\n             // it needs to be stable and have no `rustc_const_unstable` attribute\n-            self.is_const_fn_raw(def_id) && match self.lookup_stability(def_id) {\n+            match self.lookup_stability(def_id) {\n                 // stable functions with unstable const fn aren't `min_const_fn`\n                 Some(&attr::Stability { const_stability: Some(_), .. }) => false,\n                 // unstable functions don't need to conform"}, {"sha": "90a204ce00d5384394c4fd668a81c3a4a871a3bb", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "patch": "@@ -115,7 +115,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                     // As specified in #55607, a `const unsafe fn` differs\n                     // from an `unsafe fn` in that its body is still considered\n                     // safe code by default.\n-                    assert!(!implicit_argument.is_none());\n+                    assert!(implicit_argument.is_none());\n                     Safety::Safe\n                 },\n                 hir::Unsafety::Unsafe => Safety::FnUnsafe,"}, {"sha": "75f8045cfae99cad514b4b294527ce4dbcd136fc", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "patch": "@@ -514,7 +514,7 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n \n     let param_env = tcx.param_env(def_id);\n     let mut checker = UnsafetyChecker::new(\n-        tcx.is_const_fn(def_id) && tcx.is_min_const_fn(def_id),\n+        tcx.is_min_const_fn(def_id),\n         mir, source_scope_local_data, tcx, param_env);\n     checker.visit_mir(mir);\n \n@@ -617,13 +617,19 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n         // Report an error.\n         match kind {\n             UnsafetyViolationKind::General if tcx.is_min_const_fn(def_id) => {\n-                tcx.sess.struct_span_err(\n+                let mut err = tcx.sess.struct_span_err(\n                     source_info.span,\n                     &format!(\"{} is unsafe and unsafe operations \\\n-                            are not allowed in const fn\", description))\n-                    .span_label(source_info.span, &description.as_str()[..])\n-                    .note(&details.as_str()[..])\n-                    .emit();\n+                            are not allowed in const fn\", description));\n+                err.span_label(source_info.span, &description.as_str()[..])\n+                    .note(&details.as_str()[..]);\n+                if tcx.fn_sig(def_id).unsafety() == hir::Unsafety::Unsafe {\n+                    err.note(\n+                        \"unsafe action within a `const unsafe fn` still require an `unsafe` \\\n+                        block in contrast to regular `unsafe fn`.\"\n+                    );\n+                }\n+                err.emit();\n             }\n             UnsafetyViolationKind::GeneralAndConstFn |\n             UnsafetyViolationKind::General => {"}, {"sha": "3c1b9dbd91fa80e60548fbe54ab1ddc9012659a5", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "patch": "@@ -2,6 +2,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::mir::*;\n use rustc::ty::{self, Predicate, TyCtxt};\n+use rustc_target::spec::abi;\n use std::borrow::Cow;\n use syntax_pos::Span;\n \n@@ -338,19 +339,40 @@ fn check_terminator(\n         } => {\n             let fn_ty = func.ty(mir, tcx);\n             if let ty::FnDef(def_id, _) = fn_ty.sty {\n-                if tcx.is_min_const_fn(def_id) {\n-                    check_operand(tcx, mir, func, span)?;\n \n-                    for arg in args {\n-                        check_operand(tcx, mir, arg, span)?;\n-                    }\n-                    Ok(())\n-                } else {\n-                    Err((\n+                // some intrinsics are waved through if called inside the\n+                // standard library. Users never need to call them directly\n+                match tcx.fn_sig(def_id).abi() {\n+                    abi::Abi::RustIntrinsic => match &tcx.item_name(def_id).as_str()[..] {\n+                        | \"size_of\"\n+                        | \"min_align_of\"\n+                        | \"needs_drop\"\n+                        => {},\n+                        _ => return Err((\n+                            span,\n+                            \"can only call a curated list of intrinsics in `min_const_fn`\".into(),\n+                        )),\n+                    },\n+                    abi::Abi::Rust if tcx.is_min_const_fn(def_id) => {},\n+                    abi::Abi::Rust => return Err((\n                         span,\n                         \"can only call other `min_const_fn` within a `min_const_fn`\".into(),\n-                    ))\n+                    )),\n+                    abi => return Err((\n+                        span,\n+                        format!(\n+                            \"cannot call functions with `{}` abi in `min_const_fn`\",\n+                            abi,\n+                        ).into(),\n+                    )),\n+                }\n+\n+                check_operand(tcx, mir, func, span)?;\n+\n+                for arg in args {\n+                    check_operand(tcx, mir, arg, span)?;\n                 }\n+                Ok(())\n             } else {\n                 Err((span, \"can only call other const fns within const fn\".into()))\n             }"}, {"sha": "922a7883b9f2d3b4e933c2a8ae9efdedbd910d7b", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe.stderr?ref=f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "patch": "@@ -45,6 +45,7 @@ LL | const unsafe fn deref_forbidden(x: *mut usize) -> usize { *x } //~ ERROR no\n    |                                                           ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n \n error: access to union field is unsafe and unsafe operations are not allowed in const fn\n   --> $DIR/min_const_fn_unsafe.rs:38:5\n@@ -53,6 +54,7 @@ LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n \n error: aborting due to 7 previous errors\n "}, {"sha": "20c75afbe638b81478c0cb9dfb3ab6b00e9fd363", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_feature_gate.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4115765c5ad16789e9ccdd49dca1a56d47f2b3f/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_feature_gate.stderr?ref=f4115765c5ad16789e9ccdd49dca1a56d47f2b3f", "patch": "@@ -37,6 +37,7 @@ LL |     foo4() //~ ERROR not allowed in const fn\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n+   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n \n error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n   --> $DIR/min_const_fn_unsafe_feature_gate.rs:42:5\n@@ -45,6 +46,7 @@ LL |     foo5::<String>() //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n+   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n \n error: call to unsafe function is unsafe and unsafe operations are not allowed in const fn\n   --> $DIR/min_const_fn_unsafe_feature_gate.rs:45:5\n@@ -53,6 +55,7 @@ LL |     foo6::<Vec<std::cell::Cell<u32>>>() //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n+   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n \n error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n   --> $DIR/min_const_fn_unsafe_feature_gate.rs:47:51\n@@ -61,6 +64,7 @@ LL | const unsafe fn foo30_3(x: *mut usize) -> usize { *x } //~ ERROR not allowe\n    |                                                   ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n \n error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n   --> $DIR/min_const_fn_unsafe_feature_gate.rs:50:60\n@@ -69,6 +73,7 @@ LL | const unsafe fn foo30_4(x: *mut usize) -> &'static usize { &*x } //~ ERROR\n    |                                                            ^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n \n error: dereference of raw pointer is unsafe and unsafe operations are not allowed in const fn\n   --> $DIR/min_const_fn_unsafe_feature_gate.rs:53:62\n@@ -85,6 +90,7 @@ LL |     Foo { x: () }.y //~ ERROR not allowed in const fn\n    |     ^^^^^^^^^^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n+   = note: unsafe action within a `const unsafe fn` still require an `unsafe` block in contrast to regular `unsafe fn`.\n \n error: aborting due to 11 previous errors\n "}]}