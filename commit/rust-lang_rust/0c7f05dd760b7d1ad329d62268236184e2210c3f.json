{"sha": "0c7f05dd760b7d1ad329d62268236184e2210c3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjN2YwNWRkNzYwYjdkMWFkMzI5ZDYyMjY4MjM2MTg0ZTIyMTBjM2Y=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-02T08:30:11Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-02T08:30:11Z"}, "message": "check item name for eq, fixes #268", "tree": {"sha": "1091d900d2b6345968a775395918b337ff7a0785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1091d900d2b6345968a775395918b337ff7a0785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c7f05dd760b7d1ad329d62268236184e2210c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c7f05dd760b7d1ad329d62268236184e2210c3f", "html_url": "https://github.com/rust-lang/rust/commit/0c7f05dd760b7d1ad329d62268236184e2210c3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c7f05dd760b7d1ad329d62268236184e2210c3f/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2086f97bbd4f960d0a5872eddf6228d003c242f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2086f97bbd4f960d0a5872eddf6228d003c242f1", "html_url": "https://github.com/rust-lang/rust/commit/2086f97bbd4f960d0a5872eddf6228d003c242f1"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "5f32a93d3dd25bbfe5a9fac12a4cf467b147be01", "filename": "src/misc.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c7f05dd760b7d1ad329d62268236184e2210c3f/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7f05dd760b7d1ad329d62268236184e2210c3f/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=0c7f05dd760b7d1ad329d62268236184e2210c3f", "patch": "@@ -4,6 +4,7 @@ use syntax::ast::*;\n use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::codemap::{Span, Spanned};\n use syntax::visit::FnKind;\n+use rustc::ast_map::Node::*;\n use rustc::middle::ty;\n \n use utils::{match_path, snippet, span_lint, walk_ptrs_ty};\n@@ -91,6 +92,17 @@ impl LintPass for FloatCmp {\n                         false, |c| c.0.as_float().map_or(false, |f| f == 0.0)) {\n                     return;\n                 }\n+                let parent_id = cx.tcx.map.get_parent(expr.id);\n+                match cx.tcx.map.find(parent_id) {\n+                    Some(NodeItem(&Item{ ref ident, .. })) |\n+                    Some(NodeTraitItem(&TraitItem{ id: _, ref ident, .. })) |\n+                    Some(NodeImplItem(&ImplItem{ id: _, ref ident, .. })) => {\n+                        let name = ident.name.as_str();\n+                        if &*name == \"eq\" || name.starts_with(\"eq_\") ||\n+                                name.ends_with(\"_eq\") { return; }\n+                    },\n+                    _ => (),\n+                }\n                 span_lint(cx, FLOAT_CMP, expr.span, &format!(\n                     \"{}-comparison of f32 or f64 detected. Consider changing this to \\\n                      `abs({} - {}) < epsilon` for some suitable value of epsilon\","}, {"sha": "da3dba5e4d4a6d2669710ebd84dcb16fc57f7bec", "filename": "tests/compile-fail/float_cmp.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0c7f05dd760b7d1ad329d62268236184e2210c3f/tests%2Fcompile-fail%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7f05dd760b7d1ad329d62268236184e2210c3f/tests%2Fcompile-fail%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffloat_cmp.rs?ref=0c7f05dd760b7d1ad329d62268236184e2210c3f", "patch": "@@ -1,6 +1,9 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#![deny(float_cmp)]\n+#![allow(unused)]\n+\n use std::ops::Add;\n \n const ZERO : f32 = 0.0;\n@@ -10,8 +13,26 @@ fn twice<T>(x : T) -> T where T : Add<T, Output = T>, T : Copy {\n     x + x\n }\n \n-#[deny(float_cmp)]\n-#[allow(unused)]\n+fn eq_fl(x: f32, y: f32) -> bool {\n+    if x.is_nan() { y.is_nan() } else { x == y } // no error, inside \"eq\" fn\n+}\n+\n+fn fl_eq(x: f32, y: f32) -> bool {\n+    if x.is_nan() { y.is_nan() } else { x == y } // no error, inside \"eq\" fn\n+}\n+\n+struct X { val: f32 }\n+\n+impl PartialEq for X {\n+    fn eq(&self, o: &X) -> bool {\n+        if self.val.is_nan() {\n+            o.val.is_nan()\n+        } else {\n+            self.val == o.val // no error, inside \"eq\" fn\n+        }\n+    }\n+}\n+\n fn main() {\n     ZERO == 0f32; //no error, comparison with zero is ok\n     ZERO == 0.0; //no error, comparison with zero is ok"}]}