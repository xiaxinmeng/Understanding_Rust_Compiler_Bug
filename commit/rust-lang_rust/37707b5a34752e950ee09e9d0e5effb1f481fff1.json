{"sha": "37707b5a34752e950ee09e9d0e5effb1f481fff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NzA3YjVhMzQ3NTJlOTUwZWUwOWU5ZDBlNWVmZmIxZjQ4MWZmZjE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-09T01:05:43Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-09T01:05:43Z"}, "message": "added semver lint", "tree": {"sha": "9a0ccb9432cb4fa537d14573313e371beb2ee97e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a0ccb9432cb4fa537d14573313e371beb2ee97e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37707b5a34752e950ee09e9d0e5effb1f481fff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37707b5a34752e950ee09e9d0e5effb1f481fff1", "html_url": "https://github.com/rust-lang/rust/commit/37707b5a34752e950ee09e9d0e5effb1f481fff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37707b5a34752e950ee09e9d0e5effb1f481fff1/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a21108a2963c63310d9c5b452e7faf3e622c47de", "url": "https://api.github.com/repos/rust-lang/rust/commits/a21108a2963c63310d9c5b452e7faf3e622c47de", "html_url": "https://github.com/rust-lang/rust/commit/a21108a2963c63310d9c5b452e7faf3e622c47de"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "792326d6c1d59d1ecc1ea39fbb606d442d009764", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37707b5a34752e950ee09e9d0e5effb1f481fff1/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37707b5a34752e950ee09e9d0e5effb1f481fff1/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=37707b5a34752e950ee09e9d0e5effb1f481fff1", "patch": "@@ -18,6 +18,7 @@ plugin = true\n \n [dependencies]\n unicode-normalization = \"0.1\"\n+semver = \"0.2.1\"\n \n [dev-dependencies]\n compiletest_rs = \"0.0.11\""}, {"sha": "13105087706697f35623a4448a0c9d67c319af12", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37707b5a34752e950ee09e9d0e5effb1f481fff1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/37707b5a34752e950ee09e9d0e5effb1f481fff1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=37707b5a34752e950ee09e9d0e5effb1f481fff1", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 91 lints included in this crate:\n+There are 92 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -24,6 +24,7 @@ name\n [cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                         | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n [collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                               | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                 | warn    | finds functions that should be split up into multiple functions\n+[deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                         | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument) | warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                       | warn    | empty `loop {}` detected\n [eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                                 | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)"}, {"sha": "853e2ab5910fcb7ade818977576cd1bcfbc197d8", "filename": "src/attrs.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/37707b5a34752e950ee09e9d0e5effb1f481fff1/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37707b5a34752e950ee09e9d0e5effb1f481fff1/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=37707b5a34752e950ee09e9d0e5effb1f481fff1", "patch": "@@ -3,9 +3,10 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use reexport::*;\n+use semver::Version;\n use syntax::codemap::Span;\n use syntax::attr::*;\n-use syntax::ast::{Attribute, MetaList, MetaWord};\n+use syntax::ast::{Attribute, Lit, Lit_, MetaList, MetaWord, MetaNameValue};\n use utils::{in_macro, match_path, span_lint, BEGIN_UNWIND};\n \n /// **What it does:** This lint `Warn`s on items annotated with `#[inline(always)]`, unless the annotated function is empty or simply panics.\n@@ -24,17 +25,45 @@ use utils::{in_macro, match_path, span_lint, BEGIN_UNWIND};\n declare_lint! { pub INLINE_ALWAYS, Warn,\n     \"`#[inline(always)]` is a bad idea in most cases\" }\n \n+/// **What it does:** This lint `Warn`s on `#[deprecated]` annotations with a `since` field that is not a valid semantic version..\n+///\n+/// **Why is this bad?** For checking the version of the deprecation, it must be valid semver. Failing that, the contained information is useless.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```\n+/// #[deprecated(since = \"forever\")]\n+/// fn something_else(..) { ... }\n+/// ```\n+declare_lint! { pub DEPRECATED_SEMVER, Warn,\n+    \"`Warn` on `#[deprecated(since = \\\"x\\\")]` where x is not semver\" }\n \n #[derive(Copy,Clone)]\n pub struct AttrPass;\n \n impl LintPass for AttrPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(INLINE_ALWAYS)\n+        lint_array!(INLINE_ALWAYS, DEPRECATED_SEMVER)\n     }\n }\n \n impl LateLintPass for AttrPass {\n+    fn check_attribute(&mut self, cx: &LateContext, attr: &Attribute) {\n+        if let MetaList(ref name, ref items) = attr.node.value.node {\n+            if items.is_empty() || name != &\"deprecated\" {\n+                return;\n+            }\n+            for ref item in items {\n+                if let MetaNameValue(ref name, ref lit) = item.node {\n+                    if name == &\"since\" {\n+                        check_semver(cx, item.span, lit);\n+                    }\n+                }\n+            } \n+        }\n+    }\n+    \n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         if is_relevant_item(item) {\n             check_attrs(cx, item.span, &item.name, &item.attrs)\n@@ -128,3 +157,15 @@ fn check_attrs(cx: &LateContext, span: Span, name: &Name, attrs: &[Attribute]) {\n         }\n     }\n }\n+\n+fn check_semver(cx: &LateContext, span: Span, lit: &Lit) {\n+    if let Lit_::LitStr(ref is, _) = lit.node {\n+        if Version::parse(&*is).is_ok() {\n+            return;\n+        }\n+    }\n+    span_lint(cx, \n+              DEPRECATED_SEMVER,\n+              span,\n+              \"the since field must contain a semver-compliant version\");\n+}"}, {"sha": "f8db15605ffa267e0b4c2a98b10c951e9109bc39", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37707b5a34752e950ee09e9d0e5effb1f481fff1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37707b5a34752e950ee09e9d0e5effb1f481fff1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=37707b5a34752e950ee09e9d0e5effb1f481fff1", "patch": "@@ -24,6 +24,9 @@ extern crate collections;\n // for unicode nfc normalization\n extern crate unicode_normalization;\n \n+// for semver check in attrs.rs\n+extern crate semver;\n+\n extern crate rustc_plugin;\n \n use rustc_plugin::Registry;\n@@ -156,6 +159,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_group(\"clippy\", vec![\n         approx_const::APPROX_CONSTANT,\n         array_indexing::OUT_OF_BOUNDS_INDEXING,\n+        attrs::DEPRECATED_SEMVER,\n         attrs::INLINE_ALWAYS,\n         bit_mask::BAD_BIT_MASK,\n         bit_mask::INEFFECTIVE_BIT_MASK,"}, {"sha": "c7a4af609827e7aecf74cd09accd7071230c0651", "filename": "tests/compile-fail/attrs.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37707b5a34752e950ee09e9d0e5effb1f481fff1/tests%2Fcompile-fail%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37707b5a34752e950ee09e9d0e5effb1f481fff1/tests%2Fcompile-fail%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fattrs.rs?ref=37707b5a34752e950ee09e9d0e5effb1f481fff1", "patch": "@@ -1,7 +1,7 @@\n-#![feature(plugin)]\n+#![feature(plugin, deprecated)]\n #![plugin(clippy)]\n \n-#![deny(inline_always)]\n+#![deny(inline_always, deprecated_semver)]\n \n #[inline(always)] //~ERROR you have declared `#[inline(always)]` on `test_attr_lint`.\n fn test_attr_lint() {\n@@ -24,6 +24,14 @@ fn empty_and_false_positive_stmt() {\n     unreachable!();\n }\n \n+#[deprecated(since = \"forever\")] //~ERROR the since field must contain a semver-compliant version\n+pub const SOME_CONST : u8 = 42;\n+\n+#[deprecated(since = \"1\")] //~ERROR the since field must contain a semver-compliant version\n+pub const ANOTHER_CONST : u8 = 23;\n+\n+#[deprecated(since = \"0.1.1\")]\n+pub const YET_ANOTHER_CONST : u8 = 0;\n \n fn main() {\n     test_attr_lint();"}]}