{"sha": "1af55d19c7a9189374d89472f97dc119659bb67e", "node_id": "C_kwDOAAsO6NoAKDFhZjU1ZDE5YzdhOTE4OTM3NGQ4OTQ3MmY5N2RjMTE5NjU5YmI2N2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-19T14:41:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-19T14:41:39Z"}, "message": "Auto merge of #89933 - est31:let_else, r=michaelwoerister\n\nAdopt let_else across the compiler\n\nThis performs a substitution of code following the pattern:\n\n```\nlet <id> = if let <pat> = ... { identity } else { ... : ! };\n```\n\nTo simplify it to:\n\n```\nlet <pat> = ... { identity } else { ... : ! };\n```\n\nBy adopting the `let_else` feature (cc #87335).\n\nThe PR also updates the syn crate because the currently used version of the crate doesn't support `let_else` syntax yet.\n\nNote: Generally I'm the person who *removes* usages of unstable features from the compiler, not adds more usages of them, but in this instance I think it hopefully helps the feature get stabilized sooner and in a better state. I have written a [comment](https://github.com/rust-lang/rust/issues/87335#issuecomment-944846205) on the tracking issue about my experience and what I feel could be improved before stabilization of `let_else`.", "tree": {"sha": "0b57780548a1db2ad0f8c171bd68fea92873aa2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b57780548a1db2ad0f8c171bd68fea92873aa2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1af55d19c7a9189374d89472f97dc119659bb67e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1af55d19c7a9189374d89472f97dc119659bb67e", "html_url": "https://github.com/rust-lang/rust/commit/1af55d19c7a9189374d89472f97dc119659bb67e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1af55d19c7a9189374d89472f97dc119659bb67e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2452de12046850b8d4c00ce361569b24ad3ad8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2452de12046850b8d4c00ce361569b24ad3ad8d", "html_url": "https://github.com/rust-lang/rust/commit/c2452de12046850b8d4c00ce361569b24ad3ad8d"}, {"sha": "ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac", "html_url": "https://github.com/rust-lang/rust/commit/ef018be5c49d7a0bb8ad8e3485111e8b2ab9c5ac"}], "stats": {"total": 226, "additions": 76, "deletions": 150}, "files": [{"sha": "7ea3a6fd9c3d728e31d9ce4fdd21a1db52954485", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -2728,9 +2728,9 @@ checksum = \"bc881b2c22681370c6a780e47af9840ef841837bc98118431d4e1868bd0c1086\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.24\"\n+version = \"1.0.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e0704ee1a7e00d7bb417d0770ea303c1bccbabf0ef1667dae92b5967f5f8a71\"\n+checksum = \"edc3358ebc67bc8b7fa0c007f945b0b18226f78437d61bec735a9eb96b61ee70\"\n dependencies = [\n  \"unicode-xid\",\n ]\n@@ -5093,9 +5093,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.65\"\n+version = \"1.0.80\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f3a1d708c221c5a612956ef9f75b37e454e88d1f7b899fbd3a18d4252012d663\"\n+checksum = \"d010a1623fbd906d51d650a9916aaefc05ffa0e4053ff7fe601167f3e715d194\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "e30d6c7fca73191a66468303cacbbf94d9396d70", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -315,9 +315,7 @@ impl<'a, 'tcx> GatherBorrows<'a, 'tcx> {\n         //    TEMP = &foo\n         //\n         // so extract `temp`.\n-        let temp = if let Some(temp) = assigned_place.as_local() {\n-            temp\n-        } else {\n+        let Some(temp) = assigned_place.as_local() else {\n             span_bug!(\n                 self.body.source_info(start_location).span,\n                 \"expected 2-phase borrow to assign to a local, not `{:?}`\","}, {"sha": "723b57ed970ad6bb16bac57787f39029e9ea4f4f", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -90,9 +90,7 @@ impl OutlivesSuggestionBuilder {\n         let mut unified_already = FxHashSet::default();\n \n         for (fr, outlived) in &self.constraints_to_add {\n-            let fr_name = if let Some(fr_name) = self.region_vid_to_name(mbcx, *fr) {\n-                fr_name\n-            } else {\n+            let Some(fr_name) = self.region_vid_to_name(mbcx, *fr) else {\n                 continue;\n             };\n "}, {"sha": "08df87e0488b8c0006d633be3dc45ba3771dddd0", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -7,6 +7,7 @@\n #![feature(format_args_capture)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]\n #![feature(trusted_step)]"}, {"sha": "be50911f4e143a8b5cb91fc4e0c8d344c9600982", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -174,9 +174,8 @@ pub fn each_linked_rlib(\n             _ => {}\n         }\n     }\n-    let fmts = match fmts {\n-        Some(f) => f,\n-        None => return Err(\"could not find formats for rlibs\".to_string()),\n+    let Some(fmts) = fmts else {\n+        return Err(\"could not find formats for rlibs\".to_string());\n     };\n     for &cnum in crates {\n         match fmts.get(cnum.as_usize() - 1) {"}, {"sha": "f78196d7ec58e25bc00797df2308c7709288cad8", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -3,6 +3,7 @@\n #![feature(box_patterns)]\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]\n+#![feature(let_else)]\n #![feature(once_cell)]\n #![feature(nll)]\n #![feature(associated_type_bounds)]"}, {"sha": "bea55bbc87965a37e12acf89ea8b3e66a0cf754f", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -343,9 +343,7 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n             .unwrap_or_else(|| bug!(\"indirect_dest has non-pointer type: {:?}\", indirect_dest))\n             .ty;\n \n-        let (llptr, llextra) = if let OperandValue::Ref(llptr, Some(llextra), _) = self {\n-            (llptr, llextra)\n-        } else {\n+        let OperandValue::Ref(llptr, Some(llextra), _) = self else {\n             bug!(\"store_unsized called with a sized value\")\n         };\n "}, {"sha": "f308e764e861d0422e76464c39014aea20b59d09", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -13,6 +13,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(exact_size_is_empty)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]"}, {"sha": "5418f6fc007ca12050d8baa7eb117e8842267c46", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -145,9 +145,7 @@ impl Qualif for NeedsNonConstDrop {\n             Ok([..]) => {}\n         }\n \n-        let drop_trait = if let Some(did) = cx.tcx.lang_items().drop_trait() {\n-            did\n-        } else {\n+        let Some(drop_trait) = cx.tcx.lang_items().drop_trait() else {\n             // there is no way to define a type that needs non-const drop\n             // without having the lang item present.\n             return false;"}, {"sha": "849ffa881df7d72c238cb34d15046ebf94402a54", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -449,11 +449,7 @@ pub trait Emitter {\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n     ) {\n-        let source_map = if let Some(ref sm) = source_map {\n-            sm\n-        } else {\n-            return;\n-        };\n+        let Some(source_map) = source_map else { return };\n         debug!(\"fix_multispans_in_extern_macros: before: span={:?} children={:?}\", span, children);\n         self.fix_multispan_in_extern_macros(source_map, span);\n         for child in children.iter_mut() {"}, {"sha": "b6cf332f511ec2fe39e4eda5fbbd5982d92539a6", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -8,6 +8,7 @@\n #![feature(if_let_guard)]\n #![feature(format_args_capture)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(nll)]\n \n #[macro_use]"}, {"sha": "89dbd64ed8168171e82b3577e8c440b865e4a17d", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -447,9 +447,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let mut undetermined_invocations = Vec::new();\n         let (mut progress, mut force) = (false, !self.monotonic);\n         loop {\n-            let (invoc, ext) = if let Some(invoc) = invocations.pop() {\n-                invoc\n-            } else {\n+            let Some((invoc, ext)) = invocations.pop() else {\n                 self.resolve_imports();\n                 if undetermined_invocations.is_empty() {\n                     break;"}, {"sha": "521ca2135c6f217ad573c1ffbf437ade2652c08b", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -4,6 +4,7 @@\n #![feature(format_args_capture)]\n #![feature(if_let_guard)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]"}, {"sha": "4663dd80fa8bbed095b1203feebf4e02bc94a7cf", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -116,10 +116,8 @@ pub(super) fn transcribe<'a>(\n \n     loop {\n         // Look at the last frame on the stack.\n-        let tree = if let Some(tree) = stack.last_mut().unwrap().next() {\n-            // If it still has a TokenTree we have not looked at yet, use that tree.\n-            tree\n-        } else {\n+        // If it still has a TokenTree we have not looked at yet, use that tree.\n+        let Some(tree) = stack.last_mut().unwrap().next() else {\n             // This else-case never produces a value for `tree` (it `continue`s or `return`s).\n \n             // Otherwise, if we have just reached the end of a sequence and we can keep repeating,\n@@ -190,9 +188,7 @@ pub(super) fn transcribe<'a>(\n                     LockstepIterSize::Constraint(len, _) => {\n                         // We do this to avoid an extra clone above. We know that this is a\n                         // sequence already.\n-                        let (sp, seq) = if let mbe::TokenTree::Sequence(sp, seq) = seq {\n-                            (sp, seq)\n-                        } else {\n+                        let mbe::TokenTree::Sequence(sp, seq) = seq else {\n                             unreachable!()\n                         };\n "}, {"sha": "dd3f8c937f81abd400017a7885e74a02990ada60", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -2,6 +2,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(in_band_lifetimes)]\n+#![feature(let_else)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "38cbf5314ef314361e3bf869a9a99a9ebf37c1c5", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -241,9 +241,7 @@ pub fn prepare_session_directory(\n         // have already tried before.\n         let source_directory = find_source_directory(&crate_dir, &source_directories_already_tried);\n \n-        let source_directory = if let Some(dir) = source_directory {\n-            dir\n-        } else {\n+        let Some(source_directory) = source_directory else {\n             // There's nowhere to copy from, we're done\n             debug!(\n                 \"no source directory found. Continuing with empty session \\\n@@ -397,15 +395,14 @@ fn copy_files(sess: &Session, target_dir: &Path, source_dir: &Path) -> Result<bo\n     // We acquire a shared lock on the lock file of the directory, so that\n     // nobody deletes it out from under us while we are reading from it.\n     let lock_file_path = lock_file_path(source_dir);\n-    let _lock = if let Ok(lock) = flock::Lock::new(\n+\n+    // not exclusive\n+    let Ok(_lock) = flock::Lock::new(\n         &lock_file_path,\n         false, // don't wait,\n         false, // don't create\n         false,\n-    ) {\n-        // not exclusive\n-        lock\n-    } else {\n+    ) else {\n         // Could not acquire the lock, don't try to copy from here\n         return Err(());\n     };"}, {"sha": "c6ccd9b60a9c44ba0a788cc067c95ca7aae116b4", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -263,9 +263,7 @@ pub fn suggest_new_region_bound(\n         match fn_return.kind {\n             TyKind::OpaqueDef(item_id, _) => {\n                 let item = tcx.hir().item(item_id);\n-                let opaque = if let ItemKind::OpaqueTy(opaque) = &item.kind {\n-                    opaque\n-                } else {\n+                let ItemKind::OpaqueTy(opaque) = &item.kind else {\n                     return;\n                 };\n "}, {"sha": "d0f1ff649d058a0558f80ef9258234fac1fd165a", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -17,6 +17,7 @@\n #![feature(box_patterns)]\n #![feature(extend_one)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(never_type)]\n #![feature(in_band_lifetimes)]\n #![feature(control_flow_enum)]"}, {"sha": "6cf0dd8b1addbee40c76b377e7c05bb52c39455e", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -2,6 +2,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n+#![feature(let_else)]\n #![feature(nll)]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]"}, {"sha": "ca9daa49aa2d2115d4e522d23ef38996af7f7a80", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -472,9 +472,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {\n         let len = BytePos::decode(decoder)?;\n         let hi = lo + len;\n \n-        let sess = if let Some(sess) = decoder.sess {\n-            sess\n-        } else {\n+        let Some(sess) = decoder.sess else {\n             bug!(\"Cannot decode Span without Session.\")\n         };\n "}, {"sha": "0894b80507581458cb006426ed59e7b33158347e", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -39,6 +39,7 @@\n #![feature(new_uninit)]\n #![feature(nll)]\n #![feature(once_cell)]\n+#![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(in_band_lifetimes)]"}, {"sha": "1b32c8a66989f7b8ded38db6a847e1170b292616", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -221,9 +221,7 @@ pub fn suggest_constraining_type_param(\n ) -> bool {\n     let param = generics.params.iter().find(|p| p.name.ident().as_str() == param_name);\n \n-    let param = if let Some(param) = param {\n-        param\n-    } else {\n+    let Some(param) = param else {\n         return false;\n     };\n "}, {"sha": "8ec5f4c79781f34902df49db679edbcfc574a8a6", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -755,17 +755,14 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     }\n \n                     // Extract the number of elements from the layout of the array field:\n-                    let len = if let Ok(TyAndLayout {\n+                    let Ok(TyAndLayout {\n                         layout: Layout { fields: FieldsShape::Array { count, .. }, .. },\n                         ..\n-                    }) = self.layout_of(f0_ty)\n-                    {\n-                        count\n-                    } else {\n+                    }) = self.layout_of(f0_ty) else {\n                         return Err(LayoutError::Unknown(ty));\n                     };\n \n-                    (*e_ty, *len, true)\n+                    (*e_ty, *count, true)\n                 } else {\n                     // First ADT field is not an array:\n                     (f0_ty, def.non_enum_variant().fields.len() as _, false)\n@@ -787,9 +784,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 // Compute the ABI of the element type:\n                 let e_ly = self.layout_of(e_ty)?;\n-                let e_abi = if let Abi::Scalar(scalar) = e_ly.abi {\n-                    scalar\n-                } else {\n+                let Abi::Scalar(e_abi) = e_ly.abi else {\n                     // This error isn't caught in typeck, e.g., if\n                     // the element type of the vector is generic.\n                     tcx.sess.fatal(&format!("}, {"sha": "c6a34ece24576e51aa85e42b2d179aa26943dcd1", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -221,15 +221,13 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n             let closure_hir_id = tcx.hir().local_def_id_to_hir_id(closure_def_id.expect_local());\n             let closure_span = tcx.hir().span(closure_hir_id);\n \n-            let (capture_index, capture) = if let Some(capture_details) =\n+            let Some((capture_index, capture)) =\n                 find_capture_matching_projections(\n                     typeck_results,\n                     var_hir_id,\n                     closure_def_id,\n                     &from_builder.projection,\n-                ) {\n-                capture_details\n-            } else {\n+                ) else {\n                 if !enable_precise_capture(tcx, closure_span) {\n                     bug!(\n                         \"No associated capture found for {:?}[{:#?}] even though \\"}, {"sha": "8dadbf5f02bd1bd2a6a5a339cb56730867d30f08", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -362,11 +362,7 @@ impl DropTree {\n         blocks: &IndexVec<DropIdx, Option<BasicBlock>>,\n     ) {\n         for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {\n-            let block = if let Some(block) = blocks[drop_idx] {\n-                block\n-            } else {\n-                continue;\n-            };\n+            let Some(block) = blocks[drop_idx] else { continue };\n             match drop_data.0.kind {\n                 DropKind::Value => {\n                     let terminator = TerminatorKind::Drop {"}, {"sha": "b0f1e08562c1609b4d91ef91d0b9333478f2d59c", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -6,6 +6,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![recursion_limit = \"256\"]"}, {"sha": "2f3de52965db1dbe6d3f70bae30a9b3c54115ca4", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -6,6 +6,7 @@\n #![feature(exact_size_is_empty)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "2d27d085b489398440fb2e4a3640624b469063ad", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -290,9 +290,7 @@ impl<'tcx> RustcPeekAt<'tcx> for MaybeMutBorrowedLocals<'_, 'tcx> {\n         call: PeekCall,\n     ) {\n         info!(?place, \"peek_at\");\n-        let local = if let Some(l) = place.as_local() {\n-            l\n-        } else {\n+        let Some(local) = place.as_local() else {\n             tcx.sess.span_err(call.span, \"rustc_peek: argument was not a local\");\n             return;\n         };\n@@ -312,9 +310,7 @@ impl<'tcx> RustcPeekAt<'tcx> for MaybeLiveLocals {\n         call: PeekCall,\n     ) {\n         info!(?place, \"peek_at\");\n-        let local = if let Some(l) = place.as_local() {\n-            l\n-        } else {\n+        let Some(local) = place.as_local() else {\n             tcx.sess.span_err(call.span, \"rustc_peek: argument was not a local\");\n             return;\n         };"}, {"sha": "84a1e3fb600fdb42d9d4283be8cab5642577e4e1", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -673,9 +673,7 @@ impl Inliner<'tcx> {\n             assert!(args.next().is_none());\n \n             let tuple = Place::from(tuple);\n-            let tuple_tys = if let ty::Tuple(s) = tuple.ty(caller_body, tcx).ty.kind() {\n-                s\n-            } else {\n+            let ty::Tuple(tuple_tys) = tuple.ty(caller_body, tcx).ty.kind() else {\n                 bug!(\"Closure arguments are not passed as a tuple\");\n             };\n "}, {"sha": "60135ef2d85717f4cf3765096b205f2fae9c0b68", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -4,6 +4,7 @@\n #![cfg_attr(bootstrap, feature(const_panic))]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n #![feature(option_get_or_insert_default)]"}, {"sha": "822a372d8ce90fa1a11d043fe96da70e1072f750", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -17,9 +17,7 @@ impl<'tcx> MirPass<'tcx> for LowerSliceLenCalls {\n \n pub fn lower_slice_len_calls<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let language_items = tcx.lang_items();\n-    let slice_len_fn_item_def_id = if let Some(slice_len_fn_item) = language_items.slice_len_fn() {\n-        slice_len_fn_item\n-    } else {\n+    let Some(slice_len_fn_item_def_id) = language_items.slice_len_fn() else {\n         // there is no language item to compare to :)\n         return;\n     };"}, {"sha": "a04a0b51531509bf5ad7d3e16a9437b90cccb4e8", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -208,7 +208,7 @@ fn normalize_array_len_call<'tcx>(\n                         operand,\n                         cast_ty,\n                     ) => {\n-                        let local = if let Some(local) = place.as_local() { local } else { return };\n+                        let Some(local) = place.as_local() else { return };\n                         match operand {\n                             Operand::Copy(place) | Operand::Move(place) => {\n                                 let operand_local =\n@@ -255,9 +255,7 @@ fn normalize_array_len_call<'tcx>(\n                         }\n                     }\n                     Rvalue::Len(place) => {\n-                        let local = if let Some(local) = place.local_or_deref_local() {\n-                            local\n-                        } else {\n+                        let Some(local) = place.local_or_deref_local() else {\n                             return;\n                         };\n                         if let Some(cast_statement_idx) = state.get(&local).copied() {"}, {"sha": "2aa506112909d6241cdc6840d94cad79c3509031", "filename": "compiler/rustc_mir_transform/src/uninhabited_enum_branching.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Funinhabited_enum_branching.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -83,12 +83,9 @@ impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n             let bb = BasicBlock::from_usize(bb);\n             trace!(\"processing block {:?}\", bb);\n \n-            let discriminant_ty =\n-                if let Some(ty) = get_switched_on_type(&body.basic_blocks()[bb], tcx, body) {\n-                    ty\n-                } else {\n-                    continue;\n-                };\n+            let Some(discriminant_ty) = get_switched_on_type(&body.basic_blocks()[bb], tcx, body) else {\n+                continue;\n+            };\n \n             let layout = tcx.layout_of(tcx.param_env(body.source.def_id()).and(discriminant_ty));\n "}, {"sha": "f4082153b684048d1310b9a1990ee6b721dd128b", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -2,6 +2,7 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]\n+#![feature(let_else)]\n #![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "b41906111b938598ba89cc32804dc462e5c75226", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -458,9 +458,7 @@ fn mono_item_visibility(\n     let is_generic = instance.substs.non_erasable_generics().next().is_some();\n \n     // Upstream `DefId` instances get different handling than local ones.\n-    let def_id = if let Some(def_id) = def_id.as_local() {\n-        def_id\n-    } else {\n+    let Some(def_id) = def_id.as_local() else {\n         return if export_generics && is_generic {\n             // If it is an upstream monomorphization and we export generics, we must make\n             // it available to downstream crates."}, {"sha": "1b992cdb0c94b2f0a3fbc7c491aa3bfc2fecff08", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -3,6 +3,7 @@\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(thread_local_const_init)]\n "}, {"sha": "bd67303099220e39ee508d2e855ad8cdc1ea7ab3", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -644,9 +644,7 @@ pub fn print_query_stack<CTX: QueryContext>(\n         if Some(i) == num_frames {\n             break;\n         }\n-        let query_info = if let Some(info) = query_map.as_ref().and_then(|map| map.get(&query)) {\n-            info\n-        } else {\n+        let Some(query_info) = query_map.as_ref().and_then(|map| map.get(&query)) else {\n             break;\n         };\n         let mut diag = Diagnostic::new("}, {"sha": "d3c75635783fa774e1fb42005bddf6b32e0b7cda", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -761,11 +761,9 @@ where\n         return false;\n     }\n \n-    let key = if let Some(key) =\n+    let Some(key) =\n         <Q::Key as DepNodeParams<CTX::DepContext>>::recover(*tcx.dep_context(), &dep_node)\n-    {\n-        key\n-    } else {\n+    else {\n         return false;\n     };\n "}, {"sha": "63000a9d13d412eb2920c7d894dbb1c2008b450a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -1471,9 +1471,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         module: ModuleOrUniformRoot<'b>,\n         ident: Ident,\n     ) -> Option<(Option<Suggestion>, Vec<String>)> {\n-        let mut crate_module = if let ModuleOrUniformRoot::Module(module) = module {\n-            module\n-        } else {\n+        let ModuleOrUniformRoot::Module(mut crate_module) = module else {\n             return None;\n         };\n "}, {"sha": "94563400a8b53580578424ca2251b4169e3c4391", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -1057,9 +1057,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n                             let (name, reg) = Region::early(&self.tcx.hir(), &mut index, &param);\n-                            let def_id = if let Region::EarlyBound(_, def_id, _) = reg {\n-                                def_id\n-                            } else {\n+                            let Region::EarlyBound(_, def_id, _) = reg else {\n                                 bug!();\n                             };\n                             // We cannot predict what lifetimes are unused in opaque type."}, {"sha": "98c1355d05b25a16317b0f5b815e0ecd7131a28d", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -15,6 +15,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(never_type)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]"}, {"sha": "1a049e6ec649da4bcd0c63408e40b7e5106f6d0a", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -17,6 +17,7 @@\n #![feature(hash_drain_filter)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(never_type)]\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]"}, {"sha": "970fb30487963bb7854e362fc1a825d14a2ff536", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -1038,13 +1038,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let hir = self.tcx.hir();\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n-        let (sig, body_id) = if let Some(hir::Node::Item(hir::Item {\n+        let Some(hir::Node::Item(hir::Item {\n             kind: hir::ItemKind::Fn(sig, _, body_id),\n             ..\n         })) = node\n-        {\n-            (sig, body_id)\n-        } else {\n+        else {\n             return false;\n         };\n         let body = hir.body(*body_id);"}, {"sha": "ad9fd0ca62cfac03e1da8c730af0805a366f28cc", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -647,9 +647,7 @@ fn receiver_is_dispatchable<'tcx>(\n     debug!(\"receiver_is_dispatchable: method = {:?}, receiver_ty = {:?}\", method, receiver_ty);\n \n     let traits = (tcx.lang_items().unsize_trait(), tcx.lang_items().dispatch_from_dyn_trait());\n-    let (unsize_did, dispatch_from_dyn_did) = if let (Some(u), Some(cu)) = traits {\n-        (u, cu)\n-    } else {\n+    let (Some(unsize_did), Some(dispatch_from_dyn_did)) = traits else {\n         debug!(\"receiver_is_dispatchable: Missing Unsize or DispatchFromDyn traits\");\n         return false;\n     };"}, {"sha": "85ca4db7d747d1fbd98bad87763259bf923189e2", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -164,9 +164,7 @@ impl<'tcx> OnUnimplementedDirective {\n     ) -> Result<Option<Self>, ErrorReported> {\n         let attrs = tcx.get_attrs(impl_def_id);\n \n-        let attr = if let Some(item) = tcx.sess.find_by_name(&attrs, sym::rustc_on_unimplemented) {\n-            item\n-        } else {\n+        let Some(attr) = tcx.sess.find_by_name(&attrs, sym::rustc_on_unimplemented) else {\n             return Ok(None);\n         };\n "}, {"sha": "74e132097cc5588b11e33080841332d525cce521", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -716,9 +716,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             cause.clone(),\n         );\n \n-        let data = if let ty::Dynamic(ref data, ..) = normalized_ty.kind() {\n-            data\n-        } else {\n+        let ty::Dynamic(data, ..) = normalized_ty.kind() else {\n             return None;\n         };\n "}, {"sha": "da751f2075399cef877e49ae73c661a34c2a03a6", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -1916,9 +1916,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\"qpath_to_ty: trait_def_id={:?}\", trait_def_id);\n \n-        let self_ty = if let Some(ty) = opt_self_ty {\n-            ty\n-        } else {\n+        let Some(self_ty) = opt_self_ty else {\n             let path_str = tcx.def_path_str(trait_def_id);\n \n             let def_id = self.item_def_id();"}, {"sha": "40f456de18332bf736ef0285fa1db0ee52e70695", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -521,9 +521,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         let traits =\n             (self.tcx.lang_items().unsize_trait(), self.tcx.lang_items().coerce_unsized_trait());\n-        let (unsize_did, coerce_unsized_did) = if let (Some(u), Some(cu)) = traits {\n-            (u, cu)\n-        } else {\n+        let (Some(unsize_did), Some(coerce_unsized_did)) = traits else {\n             debug!(\"missing Unsize or CoerceUnsized traits\");\n             return Err(TypeError::Mismatch);\n         };"}, {"sha": "2b3672211e4f582e951922e2ff2c555c4b36866f", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -743,9 +743,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return false;\n         }\n \n-        let src = if let Ok(src) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n-            src\n-        } else {\n+        let Ok(src) = self.tcx.sess.source_map().span_to_snippet(expr.span) else {\n             return false;\n         };\n "}, {"sha": "aea1bcd95df21a63504981b9e25075a54882d89f", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -502,9 +502,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // FIXME: Instead of exiting early when encountering bound vars in\n             // the function signature, consider keeping the binder here and\n             // propagating it downwards.\n-            let fn_sig = if let Some(fn_sig) = self.tcx.fn_sig(def_id).no_bound_vars() {\n-                fn_sig\n-            } else {\n+            let Some(fn_sig) = self.tcx.fn_sig(def_id).no_bound_vars() else {\n                 return false;\n             };\n "}, {"sha": "5aa11cce25fb6d5247d38f9757f3bea37c5d6487", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -718,10 +718,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ti: TopInfo<'tcx>,\n     ) -> Ty<'tcx> {\n         // Resolve the path and check the definition for errors.\n-        let (variant, pat_ty) = if let Some(variant_ty) = self.check_struct_path(qpath, pat.hir_id)\n-        {\n-            variant_ty\n-        } else {\n+        let Some((variant, pat_ty)) = self.check_struct_path(qpath, pat.hir_id) else {\n             let err = self.tcx.ty_error();\n             for field in fields {\n                 let ti = TopInfo { parent_pat: Some(pat), ..ti };"}, {"sha": "5d9e6ebd50c85582c32eee27843c66753503d55b", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -411,9 +411,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(\"convert_place_op_to_mutable: method={:?}\", method);\n         self.write_method_call(expr.hir_id, method);\n \n-        let region = if let ty::Ref(r, _, hir::Mutability::Mut) = method.sig.inputs()[0].kind() {\n-            r\n-        } else {\n+        let ty::Ref(region, _, hir::Mutability::Mut) = method.sig.inputs()[0].kind() else {\n             span_bug!(expr.span, \"input to mutable place op is not a mut ref?\");\n         };\n "}, {"sha": "caad28ff2b21fa90e0ca728b3f401e7e0a4aafdd", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -1000,11 +1000,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return None;\n         }\n \n-        let root_var_min_capture_list = if let Some(root_var_min_capture_list) =\n-            min_captures.and_then(|m| m.get(&var_hir_id))\n-        {\n-            root_var_min_capture_list\n-        } else {\n+        let Some(root_var_min_capture_list) = min_captures.and_then(|m| m.get(&var_hir_id)) else {\n             // The upvar is mentioned within the closure but no path starting from it is\n             // used.\n \n@@ -1077,9 +1073,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         closure_clause: hir::CaptureBy,\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n     ) -> (Vec<MigrationDiagnosticInfo>, String) {\n-        let upvars = if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n-            upvars\n-        } else {\n+        let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) else {\n             return (Vec::new(), format!(\"\"));\n         };\n \n@@ -1684,9 +1678,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n         diag_expr_id: hir::HirId,\n     ) {\n         let tcx = self.fcx.tcx;\n-        let upvar_id = if let PlaceBase::Upvar(upvar_id) = place_with_id.place.base {\n-            upvar_id\n-        } else {\n+        let PlaceBase::Upvar(upvar_id) = place_with_id.place.base else {\n             return;\n         };\n "}, {"sha": "017e7ad8ca74a83f6620b2f31a2df6b43c3471b3", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1af55d19c7a9189374d89472f97dc119659bb67e/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=1af55d19c7a9189374d89472f97dc119659bb67e", "patch": "@@ -63,6 +63,7 @@ This API is completely unstable and subject to change.\n #![feature(in_band_lifetimes)]\n #![feature(is_sorted)]\n #![feature(iter_zip)]\n+#![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(nll)]\n #![feature(try_blocks)]"}]}