{"sha": "2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzkzMGQ0M2NlZDUyMDRmNTNhNmUxZWViZDc0MWE4MWM0YzFlOWE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-07T14:20:56Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-17T13:30:44Z"}, "message": "Privatize DiagnosticBuilder constructors", "tree": {"sha": "da19271a9c9d09248d140005079c02c8fde5718f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da19271a9c9d09248d140005079c02c8fde5718f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "html_url": "https://github.com/rust-lang/rust/commit/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b586b436d6ea2dddc213c18bf17f2314441c32f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b586b436d6ea2dddc213c18bf17f2314441c32f", "html_url": "https://github.com/rust-lang/rust/commit/0b586b436d6ea2dddc213c18bf17f2314441c32f"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "e76a70350b33eb4b4c80c590e07a6d866f6dc202", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "patch": "@@ -1,4 +1,4 @@\n-use errors::{Diagnostic, DiagnosticBuilder};\n+use errors::Diagnostic;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -819,7 +819,7 @@ impl DepGraph {\n             let handle = tcx.sess.diagnostic();\n \n             for diagnostic in diagnostics {\n-                DiagnosticBuilder::new_diagnostic(handle, diagnostic).emit();\n+                handle.emit_diagnostic(&diagnostic);\n             }\n \n             // Mark the node as green now that diagnostics are emitted"}, {"sha": "a1828bb5ab7a7cacbf6fb1692deb2e2da7bd8d21", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "patch": "@@ -330,14 +330,13 @@ impl<'tcx> TyCtxt<'tcx> {\n                 let mut i = 0;\n \n                 while let Some(query) = current_query {\n-                    let mut db = DiagnosticBuilder::new(icx.tcx.sess.diagnostic(),\n-                        Level::FailureNote,\n+                    let mut diag = Diagnostic::new(Level::FailureNote,\n                         &format!(\"#{} [{}] {}\",\n                                  i,\n                                  query.info.query.name(),\n                                  query.info.query.describe(icx.tcx)));\n-                    db.set_span(icx.tcx.sess.source_map().def_span(query.info.span));\n-                    icx.tcx.sess.diagnostic().force_print_db(db);\n+                    diag.span = icx.tcx.sess.source_map().def_span(query.info.span).into();\n+                    icx.tcx.sess.diagnostic().force_print_diagnostic(diag);\n \n                     current_query = query.parent.clone();\n                     i += 1;"}, {"sha": "e85388bfea29c51aa60ecc282f756093fc7e6af7", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "patch": "@@ -346,7 +346,7 @@ impl<'a> DiagnosticBuilder<'a> {\n \n     /// Convenience function for internal use, clients should use one of the\n     /// struct_* methods on Handler.\n-    pub fn new(handler: &'a Handler, level: Level, message: &str) -> DiagnosticBuilder<'a> {\n+    crate fn new(handler: &'a Handler, level: Level, message: &str) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new_with_code(handler, level, None, message)\n     }\n \n@@ -363,7 +363,8 @@ impl<'a> DiagnosticBuilder<'a> {\n \n     /// Creates a new `DiagnosticBuilder` with an already constructed\n     /// diagnostic.\n-    pub fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic) -> DiagnosticBuilder<'a> {\n+    crate fn new_diagnostic(handler: &'a Handler, diagnostic: Diagnostic)\n+                         -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder(Box::new(DiagnosticBuilderInner {\n             handler,\n             diagnostic,"}, {"sha": "51309f37e174f6c41f00c1a7de115406eaa85c84", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "patch": "@@ -742,12 +742,11 @@ impl Handler {\n         self.taught_diagnostics.borrow_mut().insert(code.clone())\n     }\n \n-    pub fn force_print_db(&self, mut db: DiagnosticBuilder<'_>) {\n+    pub fn force_print_diagnostic(&self, db: Diagnostic) {\n         self.emitter.borrow_mut().emit_diagnostic(&db);\n-        db.cancel();\n     }\n \n-    fn emit_diagnostic(&self, diagnostic: &Diagnostic) {\n+    pub fn emit_diagnostic(&self, diagnostic: &Diagnostic) {\n         if diagnostic.cancelled() {\n             return;\n         }"}, {"sha": "32c6dd67a4b5af42a6c6b58828b0d6d7e7da26a6", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "patch": "@@ -402,7 +402,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         }\n \n         for diag in mbcx.errors_buffer.drain(..) {\n-            DiagnosticBuilder::new_diagnostic(mbcx.infcx.tcx.sess.diagnostic(), diag).emit();\n+            mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);\n         }\n     }\n "}, {"sha": "1cc71ea5649de23e056dc3a559a7643702e79149", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "patch": "@@ -3,7 +3,6 @@\n // substitutions.\n \n use crate::check::FnCtxt;\n-use errors::DiagnosticBuilder;\n use rustc::hir;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -407,7 +406,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         if !errors_buffer.is_empty() {\n             errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n             for diag in errors_buffer.drain(..) {\n-                DiagnosticBuilder::new_diagnostic(self.tcx().sess.diagnostic(), diag).emit();\n+                self.tcx().sess.diagnostic().emit_diagnostic(&diag);\n             }\n         }\n     }"}, {"sha": "dfec9ee28809a098d38d9a2459c077758e856052", "filename": "src/libsyntax/ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs?ref=2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "patch": "@@ -4,7 +4,7 @@ use crate::parse::{self, token, ParseSess};\n use crate::parse::lexer::comments;\n use crate::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n \n-use errors::{Diagnostic, DiagnosticBuilder};\n+use errors::Diagnostic;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n use syntax_pos::symbol::{kw, sym, Symbol};\n@@ -650,7 +650,7 @@ impl server::Diagnostic for Rustc<'_> {\n         diag.sub(level.to_internal(), msg, MultiSpan::from_spans(spans), None);\n     }\n     fn emit(&mut self, diag: Self::Diagnostic) {\n-        DiagnosticBuilder::new_diagnostic(&self.sess.span_diagnostic, diag).emit()\n+        self.sess.span_diagnostic.emit_diagnostic(&diag);\n     }\n }\n "}, {"sha": "b4ae1e87bca28fb65e63b525742a2c132bb198a8", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "patch": "@@ -60,12 +60,12 @@ macro_rules! panictry {\n macro_rules! panictry_buffer {\n     ($handler:expr, $e:expr) => ({\n         use std::result::Result::{Ok, Err};\n-        use errors::{FatalError, DiagnosticBuilder};\n+        use errors::FatalError;\n         match $e {\n             Ok(e) => e,\n             Err(errs) => {\n                 for e in errs {\n-                    DiagnosticBuilder::new_diagnostic($handler, e).emit();\n+                    $handler.emit_diagnostic(&e);\n                 }\n                 FatalError.raise()\n             }"}, {"sha": "c4f31bcd9b041fc40d676de9faea946c3a8c6a73", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a3930d43ced5204f53a6e1eebd741a81c4c1e9a/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=2a3930d43ced5204f53a6e1eebd741a81c4c1e9a", "patch": "@@ -306,7 +306,7 @@ fn file_to_source_file(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n     match try_file_to_source_file(sess, path, spanopt) {\n         Ok(source_file) => source_file,\n         Err(d) => {\n-            DiagnosticBuilder::new_diagnostic(&sess.span_diagnostic, d).emit();\n+            sess.span_diagnostic.emit_diagnostic(&d);\n             FatalError.raise();\n         }\n     }"}]}