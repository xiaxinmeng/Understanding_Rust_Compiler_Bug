{"sha": "25adc5e9f01885e71bf065afd5e5b8cdc823876c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YWRjNWU5ZjAxODg1ZTcxYmYwNjVhZmQ1ZTViOGNkYzgyMzg3NmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-19T08:19:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-19T08:19:31Z"}, "message": "minor: reduce duplication", "tree": {"sha": "b9d96a72209da53b85ee7594a6449b842c0b4a80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9d96a72209da53b85ee7594a6449b842c0b4a80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25adc5e9f01885e71bf065afd5e5b8cdc823876c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25adc5e9f01885e71bf065afd5e5b8cdc823876c", "html_url": "https://github.com/rust-lang/rust/commit/25adc5e9f01885e71bf065afd5e5b8cdc823876c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25adc5e9f01885e71bf065afd5e5b8cdc823876c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7729473dd24d27e55f931dac3b9dd0d11ff291e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7729473dd24d27e55f931dac3b9dd0d11ff291e4", "html_url": "https://github.com/rust-lang/rust/commit/7729473dd24d27e55f931dac3b9dd0d11ff291e4"}], "stats": {"total": 26, "additions": 5, "deletions": 21}, "files": [{"sha": "9f6f74c669712afa49adf867de6d12bc79e5ffca", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/25adc5e9f01885e71bf065afd5e5b8cdc823876c/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25adc5e9f01885e71bf065afd5e5b8cdc823876c/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=25adc5e9f01885e71bf065afd5e5b8cdc823876c", "patch": "@@ -26,15 +26,16 @@ pub(super) fn opt_generic_arg_list(p: &mut Parser, colon_colon_required: bool) {\n // test type_arg\n // type A = B<'static, i32, 1, { 2 }, Item=u64, true, false>;\n fn generic_arg(p: &mut Parser) {\n-    let m = p.start();\n     match p.current() {\n         LIFETIME_IDENT => {\n+            let m = p.start();\n             lifetime(p);\n             m.complete(p, LIFETIME_ARG);\n         }\n         // test associated_type_bounds\n         // fn print_all<T: Iterator<Item, Item::Item, Item::<true>, Item: Display, Item<'a> = Item>>(printables: T) {}\n         IDENT if [T![<], T![=], T![:]].contains(&p.nth(1)) => {\n+            let m = p.start();\n             let path_ty = p.start();\n             let path = p.start();\n             let path_seg = p.start();\n@@ -78,28 +79,12 @@ fn generic_arg(p: &mut Parser) {\n                 }\n             }\n         }\n-        T!['{'] => {\n-            expressions::block_expr(p);\n-            m.complete(p, CONST_ARG);\n-        }\n-        k if k.is_literal() => {\n-            expressions::literal(p);\n-            m.complete(p, CONST_ARG);\n-        }\n-        T![true] | T![false] => {\n-            expressions::literal(p);\n-            m.complete(p, CONST_ARG);\n-        }\n         // test const_generic_negated_literal\n         // fn f() { S::<-1> }\n-        T![-] => {\n-            let lm = p.start();\n-            p.bump(T![-]);\n-            expressions::literal(p);\n-            lm.complete(p, PREFIX_EXPR);\n-            m.complete(p, CONST_ARG);\n-        }\n+        T!['{'] | T![true] | T![false] | T![-] => const_arg(p),\n+        k if k.is_literal() => const_arg(p),\n         _ => {\n+            let m = p.start();\n             types::type_(p);\n             m.complete(p, TYPE_ARG);\n         }\n@@ -108,7 +93,6 @@ fn generic_arg(p: &mut Parser) {\n \n pub(super) fn const_arg(p: &mut Parser) {\n     let m = p.start();\n-    // FIXME: duplicates the code above\n     match p.current() {\n         T!['{'] => {\n             expressions::block_expr(p);"}]}