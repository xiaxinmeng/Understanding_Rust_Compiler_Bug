{"sha": "b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZWQxMzY4NmFkMWY4ODNmM2RlMWU3ZmE1YmE1YmY5ZjkyYWU1ZDI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-03-24T16:38:23Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-03-27T06:51:54Z"}, "message": "Address review", "tree": {"sha": "f6c6ecd178dfa5934bcfd38a978c836b3ffcbf55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6c6ecd178dfa5934bcfd38a978c836b3ffcbf55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2", "html_url": "https://github.com/rust-lang/rust/commit/b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7febdb7b15681a6a70da191128a9552f35ed5644", "url": "https://api.github.com/repos/rust-lang/rust/commits/7febdb7b15681a6a70da191128a9552f35ed5644", "html_url": "https://github.com/rust-lang/rust/commit/7febdb7b15681a6a70da191128a9552f35ed5644"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "a81301f4f3e6db4633aa4a703554a95256b249f0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2", "patch": "@@ -246,7 +246,8 @@ fn get_extern_rust_fn(ccx: &CrateContext, inputs: &[ty::t], output: ty::t,\n pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n                     inputs: &[ty::t], output: ty::t,\n                     name: &str) -> ValueRef {\n-    use middle::ty::{FreeRegion, BrAnon, ReFree, ReLateBound};\n+    use middle::ty::{BrAnon, ReLateBound};\n+\n     let llfty = type_of_rust_fn(ccx, has_env, inputs, output);\n     let llfn = decl_cdecl_fn(ccx.llmod, name, llfty, output);\n \n@@ -270,8 +271,7 @@ pub fn decl_rust_fn(ccx: &CrateContext, has_env: bool,\n             // When a reference in an argument has no named lifetime, it's\n             // impossible for that reference to escape this function(ie, be\n             // returned).\n-            ty::ty_rptr(ReFree(FreeRegion { scope_id: _, bound_region: BrAnon(_) }), _) |\n-                ty::ty_rptr(ReLateBound(_, BrAnon(_)), _) => {\n+            ty::ty_rptr(ReLateBound(_, BrAnon(_)), _) => {\n                 debug!(\"marking argument of {} as nocapture because of anonymous lifetime\", name);\n                 unsafe {\n                     llvm::LLVMAddAttribute(llarg, lib::llvm::NoCaptureAttribute as c_uint);"}, {"sha": "ca751c11bdabdc436215404afc88470ebc3472f8", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=b8ed13686ad1f883f3de1e7fa5ba5bf9f92ae5d2", "patch": "@@ -708,8 +708,9 @@ pub fn trans_call_inner<'a>(\n \n         debug!(\"trans_callee_inner: first_arg_offset={}\", first_arg_offset);\n \n-        for (idx, &t) in ty::ty_fn_args(callee_ty).iter().enumerate().map(|(i, v)| (i+first_arg_offset, v)) {\n-            use middle::ty::{FreeRegion, BrAnon, ReFree, ReLateBound};\n+        for (idx, &t) in ty::ty_fn_args(callee_ty).iter().enumerate()\n+                                                  .map(|(i, v)| (i+first_arg_offset, v)) {\n+            use middle::ty::{BrAnon, ReLateBound};\n             if !type_is_immediate(ccx, t) {\n                 // if it's not immediate, we have a program-invisible pointer,\n                 // which it can't possibly capture\n@@ -720,10 +721,9 @@ pub fn trans_call_inner<'a>(\n \n             let t_ = ty::get(t);\n             match t_.sty {\n-                ty::ty_rptr(ReFree(FreeRegion { scope_id: _, bound_region: BrAnon(_) }), _) |\n-                    ty::ty_rptr(ReLateBound(_, BrAnon(_)), _) => {\n-\n-                    debug!(\"trans_callee_inner: argument {} nocapture because of anonymous lifetime\", idx);\n+                ty::ty_rptr(ReLateBound(_, BrAnon(_)), _) => {\n+                    debug!(\"trans_callee_inner: argument {} nocapture because \\\n+                           of anonymous lifetime\", idx);\n                     attrs.push((idx, NoCaptureAttribute));\n                 },\n                 _ => { }"}]}