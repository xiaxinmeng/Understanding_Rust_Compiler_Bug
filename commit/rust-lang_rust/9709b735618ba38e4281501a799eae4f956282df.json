{"sha": "9709b735618ba38e4281501a799eae4f956282df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MDliNzM1NjE4YmEzOGU0MjgxNTAxYTc5OWVhZTRmOTU2MjgyZGY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-13T08:37:19Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-14T19:22:20Z"}, "message": "`pub(crate)` -> `crate`\n\nThe borrow checker code is already using `crate` extensively, so prefer\nbeing consistent with it.", "tree": {"sha": "0d53c5db732eeb346910b1a0bbfd6d5a83ea72b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d53c5db732eeb346910b1a0bbfd6d5a83ea72b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9709b735618ba38e4281501a799eae4f956282df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9709b735618ba38e4281501a799eae4f956282df", "html_url": "https://github.com/rust-lang/rust/commit/9709b735618ba38e4281501a799eae4f956282df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9709b735618ba38e4281501a799eae4f956282df/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abfd4d1e55ea3e9d823018422508a8d49e710517", "url": "https://api.github.com/repos/rust-lang/rust/commits/abfd4d1e55ea3e9d823018422508a8d49e710517", "html_url": "https://github.com/rust-lang/rust/commit/abfd4d1e55ea3e9d823018422508a8d49e710517"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "5851cd8178878bcff5688b95065301572aafca31", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9709b735618ba38e4281501a799eae4f956282df/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709b735618ba38e4281501a799eae4f956282df/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=9709b735618ba38e4281501a799eae4f956282df", "patch": "@@ -421,8 +421,8 @@ fn downgrade_if_error(diag: &mut Diagnostic) {\n     }\n }\n \n-pub struct MirBorrowckCtxt<'cx, 'tcx> {\n-    pub(crate) infcx: &'cx InferCtxt<'cx, 'tcx>,\n+crate struct MirBorrowckCtxt<'cx, 'tcx> {\n+    crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n     body: &'cx Body<'tcx>,\n     mir_def_id: DefId,\n     move_data: &'cx MoveData<'tcx>,"}, {"sha": "3359d1b3bbfe102ba7c5e4e7068e3ec96ea6efe1", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9709b735618ba38e4281501a799eae4f956282df/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9709b735618ba38e4281501a799eae4f956282df/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=9709b735618ba38e4281501a799eae4f956282df", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use syntax_pos::{MultiSpan, Span};\n \n impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n-    pub(crate) fn cannot_move_when_borrowed(\n+    crate fn cannot_move_when_borrowed(\n         &self,\n         span: Span,\n         desc: &str,\n@@ -17,7 +17,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         )\n     }\n \n-    pub(crate) fn cannot_use_when_mutably_borrowed(\n+    crate fn cannot_use_when_mutably_borrowed(\n         &self,\n         span: Span,\n         desc: &str,\n@@ -40,7 +40,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_act_on_uninitialized_variable(\n+    crate fn cannot_act_on_uninitialized_variable(\n         &self,\n         span: Span,\n         verb: &str,\n@@ -56,7 +56,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         )\n     }\n \n-    pub(crate) fn cannot_mutably_borrow_multiply(\n+    crate fn cannot_mutably_borrow_multiply(\n         &self,\n         new_loan_span: Span,\n         desc: &str,\n@@ -105,7 +105,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_uniquely_borrow_by_two_closures(\n+    crate fn cannot_uniquely_borrow_by_two_closures(\n         &self,\n         new_loan_span: Span,\n         desc: &str,\n@@ -134,7 +134,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_uniquely_borrow_by_one_closure(\n+    crate fn cannot_uniquely_borrow_by_one_closure(\n         &self,\n         new_loan_span: Span,\n         container_name: &str,\n@@ -165,7 +165,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_reborrow_already_uniquely_borrowed(\n+    crate fn cannot_reborrow_already_uniquely_borrowed(\n         &self,\n         new_loan_span: Span,\n         container_name: &str,\n@@ -201,7 +201,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_reborrow_already_borrowed(\n+    crate fn cannot_reborrow_already_borrowed(\n         &self,\n         span: Span,\n         desc_new: &str,\n@@ -254,7 +254,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_assign_to_borrowed(\n+    crate fn cannot_assign_to_borrowed(\n         &self,\n         span: Span,\n         borrow_span: Span,\n@@ -276,7 +276,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_reassign_immutable(\n+    crate fn cannot_reassign_immutable(\n         &self,\n         span: Span,\n         desc: &str,\n@@ -297,11 +297,11 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         )\n     }\n \n-    pub(crate) fn cannot_assign(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {\n+    crate fn cannot_assign(&self, span: Span, desc: &str) -> DiagnosticBuilder<'cx> {\n         struct_span_err!(self, span, E0594, \"cannot assign to {}\", desc)\n     }\n \n-    pub(crate) fn cannot_move_out_of(\n+    crate fn cannot_move_out_of(\n         &self,\n         move_from_span: Span,\n         move_from_desc: &str,\n@@ -318,7 +318,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n     /// Signal an error due to an attempt to move out of the interior\n     /// of an array or slice. `is_index` is None when error origin\n     /// didn't capture whether there was an indexing operation or not.\n-    pub(crate) fn cannot_move_out_of_interior_noncopy(\n+    crate fn cannot_move_out_of_interior_noncopy(\n         &self,\n         move_from_span: Span,\n         ty: Ty<'_>,\n@@ -341,7 +341,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_move_out_of_interior_of_drop(\n+    crate fn cannot_move_out_of_interior_of_drop(\n         &self,\n         move_from_span: Span,\n         container_ty: Ty<'_>,\n@@ -357,7 +357,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_act_on_moved_value(\n+    crate fn cannot_act_on_moved_value(\n         &self,\n         use_span: Span,\n         verb: &str,\n@@ -379,7 +379,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         )\n     }\n \n-    pub(crate) fn cannot_borrow_path_as_mutable_because(\n+    crate fn cannot_borrow_path_as_mutable_because(\n         &self,\n         span: Span,\n         path: &str,\n@@ -395,7 +395,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         )\n     }\n \n-    pub(crate) fn cannot_mutate_in_match_guard(\n+    crate fn cannot_mutate_in_match_guard(\n         &self,\n         mutate_span: Span,\n         match_span: Span,\n@@ -415,7 +415,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_borrow_across_generator_yield(\n+    crate fn cannot_borrow_across_generator_yield(\n         &self,\n         span: Span,\n         yield_span: Span,\n@@ -430,7 +430,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_borrow_across_destructor(\n+    crate fn cannot_borrow_across_destructor(\n         &self,\n         borrow_span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -442,7 +442,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         )\n     }\n \n-    pub(crate) fn path_does_not_live_long_enough(\n+    crate fn path_does_not_live_long_enough(\n         &self,\n         span: Span,\n         path: &str,\n@@ -456,7 +456,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         )\n     }\n \n-    pub(crate) fn cannot_return_reference_to_local(\n+    crate fn cannot_return_reference_to_local(\n         &self,\n         span: Span,\n         return_kind: &str,\n@@ -481,7 +481,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn cannot_capture_in_long_lived_closure(\n+    crate fn cannot_capture_in_long_lived_closure(\n         &self,\n         closure_span: Span,\n         borrowed_path: &str,\n@@ -504,7 +504,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(crate) fn thread_local_value_does_not_live_long_enough(\n+    crate fn thread_local_value_does_not_live_long_enough(\n         &self,\n         span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -516,7 +516,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n         )\n     }\n \n-    pub(crate) fn temporary_value_borrowed_for_too_long(\n+    crate fn temporary_value_borrowed_for_too_long(\n         &self,\n         span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -538,7 +538,7 @@ impl<'cx, 'tcx> crate::borrow_check::MirBorrowckCtxt<'cx, 'tcx> {\n     }\n }\n \n-pub(crate) fn borrowed_data_escapes_closure<'tcx>(\n+crate fn borrowed_data_escapes_closure<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     escape_span: Span,\n     escapes_from: &str,"}]}