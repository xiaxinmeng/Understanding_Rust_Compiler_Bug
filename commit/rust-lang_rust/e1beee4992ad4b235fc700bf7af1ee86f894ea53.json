{"sha": "e1beee4992ad4b235fc700bf7af1ee86f894ea53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYmVlZTQ5OTJhZDRiMjM1ZmM3MDBiZjdhZjFlZTg2Zjg5NGVhNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-07T14:21:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-07T14:21:18Z"}, "message": "Auto merge of #74059 - RalfJung:miri-uninit-validation, r=oli-obk\n\nMiri value validation: fix handling of uninit memory\n\nFixes https://github.com/rust-lang/miri/issues/1456\nFixes https://github.com/rust-lang/miri/issues/1467\n\nr? @oli-obk", "tree": {"sha": "6a3525734c5591549e75aa68d9cfb90499a0e826", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a3525734c5591549e75aa68d9cfb90499a0e826"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1beee4992ad4b235fc700bf7af1ee86f894ea53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1beee4992ad4b235fc700bf7af1ee86f894ea53", "html_url": "https://github.com/rust-lang/rust/commit/e1beee4992ad4b235fc700bf7af1ee86f894ea53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1beee4992ad4b235fc700bf7af1ee86f894ea53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51eeabf505804fb3f2621626f5c39973640c514c", "url": "https://api.github.com/repos/rust-lang/rust/commits/51eeabf505804fb3f2621626f5c39973640c514c", "html_url": "https://github.com/rust-lang/rust/commit/51eeabf505804fb3f2621626f5c39973640c514c"}, {"sha": "319c7f77dedf671b01194adb257dbe662c73df32", "url": "https://api.github.com/repos/rust-lang/rust/commits/319c7f77dedf671b01194adb257dbe662c73df32", "html_url": "https://github.com/rust-lang/rust/commit/319c7f77dedf671b01194adb257dbe662c73df32"}], "stats": {"total": 97, "additions": 69, "deletions": 28}, "files": [{"sha": "ab836595a7acc57e39f6ebc5bc8aba4386212bad", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=e1beee4992ad4b235fc700bf7af1ee86f894ea53", "patch": "@@ -276,19 +276,21 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         }\n     }\n \n-    fn visit_elem(\n+    fn with_elem<R>(\n         &mut self,\n-        new_op: OpTy<'tcx, M::PointerTag>,\n         elem: PathElem,\n-    ) -> InterpResult<'tcx> {\n+        f: impl FnOnce(&mut Self) -> InterpResult<'tcx, R>,\n+    ) -> InterpResult<'tcx, R> {\n         // Remember the old state\n         let path_len = self.path.len();\n-        // Perform operation\n+        // Record new element\n         self.path.push(elem);\n-        self.visit_value(new_op)?;\n+        // Perform operation\n+        let r = f(self)?;\n         // Undo changes\n         self.path.truncate(path_len);\n-        Ok(())\n+        // Done\n+        Ok(r)\n     }\n \n     fn check_wide_ptr_meta(\n@@ -366,7 +368,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let place = try_validation!(\n             self.ecx.ref_to_mplace(value),\n             self.path,\n-            err_ub!(InvalidUninitBytes { .. }) => { \"uninitialized {}\", kind },\n+            err_ub!(InvalidUninitBytes(None)) => { \"uninitialized {}\", kind },\n         );\n         if place.layout.is_unsized() {\n             self.check_wide_ptr_meta(place.meta, place.layout)?;\n@@ -477,7 +479,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 try_validation!(\n                     value.to_bool(),\n                     self.path,\n-                    err_ub!(InvalidBool(..)) => { \"{}\", value } expected { \"a boolean\" },\n+                    err_ub!(InvalidBool(..)) | err_ub!(InvalidUninitBytes(None)) =>\n+                        { \"{}\", value } expected { \"a boolean\" },\n                 );\n                 Ok(true)\n             }\n@@ -486,7 +489,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 try_validation!(\n                     value.to_char(),\n                     self.path,\n-                    err_ub!(InvalidChar(..)) => { \"{}\", value } expected { \"a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\" },\n+                    err_ub!(InvalidChar(..)) | err_ub!(InvalidUninitBytes(None)) =>\n+                        { \"{}\", value } expected { \"a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\" },\n                 );\n                 Ok(true)\n             }\n@@ -515,7 +519,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 let place = try_validation!(\n                     self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n                     self.path,\n-                    err_ub!(InvalidUninitBytes { .. } ) => { \"uninitialized raw pointer\" },\n+                    err_ub!(InvalidUninitBytes(None)) => { \"uninitialized raw pointer\" },\n                 );\n                 if place.layout.is_unsized() {\n                     self.check_wide_ptr_meta(place.meta, place.layout)?;\n@@ -537,6 +541,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     self.path,\n                     err_ub!(DanglingIntPointer(..)) |\n                     err_ub!(InvalidFunctionPointer(..)) |\n+                    err_ub!(InvalidUninitBytes(None)) |\n                     err_unsup!(ReadBytesAsPointer) =>\n                         { \"{}\", value } expected { \"a function pointer\" },\n                 );\n@@ -593,7 +598,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let value = try_validation!(\n             value.not_undef(),\n             self.path,\n-            err_ub!(InvalidUninitBytes { .. }) => { \"{}\", value }\n+            err_ub!(InvalidUninitBytes(None)) => { \"{}\", value }\n                 expected { \"something {}\", wrapping_range_format(valid_range, max_hi) },\n         );\n         let bits = match value.to_bits_or_ptr(op.layout.size, self.ecx) {\n@@ -646,6 +651,25 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         &self.ecx\n     }\n \n+    fn read_discriminant(\n+        &mut self,\n+        op: OpTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx, VariantIdx> {\n+        self.with_elem(PathElem::EnumTag, move |this| {\n+            Ok(try_validation!(\n+                this.ecx.read_discriminant(op),\n+                this.path,\n+                err_ub!(InvalidTag(val)) =>\n+                    { \"{}\", val } expected { \"a valid enum tag\" },\n+                err_ub!(InvalidUninitBytes(None)) =>\n+                    { \"uninitialized bytes\" } expected { \"a valid enum tag\" },\n+                err_unsup!(ReadPointerAsBytes) =>\n+                    { \"a pointer\" } expected { \"a valid enum tag\" },\n+            )\n+            .1)\n+        })\n+    }\n+\n     #[inline]\n     fn visit_field(\n         &mut self,\n@@ -654,7 +678,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         new_op: OpTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n         let elem = self.aggregate_field_path_elem(old_op.layout, field);\n-        self.visit_elem(new_op, elem)\n+        self.with_elem(elem, move |this| this.visit_value(new_op))\n     }\n \n     #[inline]\n@@ -670,7 +694,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             ty::Generator(..) => PathElem::GeneratorState(variant_id),\n             _ => bug!(\"Unexpected type with variant: {:?}\", old_op.layout.ty),\n         };\n-        self.visit_elem(new_op, name)\n+        self.with_elem(name, move |this| this.visit_value(new_op))\n     }\n \n     #[inline(always)]\n@@ -693,15 +717,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         // Sanity check: `builtin_deref` does not know any pointers that are not primitive.\n         assert!(op.layout.ty.builtin_deref(true).is_none());\n \n-        // Recursively walk the type. Translate some possible errors to something nicer.\n-        try_validation!(\n-            self.walk_value(op),\n-            self.path,\n-            err_ub!(InvalidTag(val)) =>\n-                { \"{}\", val } expected { \"a valid enum tag\" },\n-            err_unsup!(ReadPointerAsBytes) =>\n-                { \"a pointer\" } expected { \"plain (non-pointer) bytes\" },\n-        );\n+        // Recursively walk the value at its type.\n+        self.walk_value(op)?;\n \n         // *After* all of this, check the ABI.  We need to check the ABI to handle\n         // types like `NonNull` where the `Scalar` info is more restrictive than what\n@@ -816,6 +833,10 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n \n                                 throw_validation_failure!(self.path, { \"uninitialized bytes\" })\n                             }\n+                            err_unsup!(ReadPointerAsBytes) => {\n+                                throw_validation_failure!(self.path, { \"a pointer\" } expected { \"plain (non-pointer) bytes\" })\n+                            }\n+\n                             // Propagate upwards (that will also check for unexpected errors).\n                             _ => return Err(err),\n                         }"}, {"sha": "6c53df40a7c9a6c732ea2753e7e1cab0d856778d", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=e1beee4992ad4b235fc700bf7af1ee86f894ea53", "patch": "@@ -125,6 +125,15 @@ macro_rules! make_value_visitor {\n             fn ecx(&$($mutability)? self)\n                 -> &$($mutability)? InterpCx<'mir, 'tcx, M>;\n \n+            /// `read_discriminant` can be hooked for better error messages.\n+            #[inline(always)]\n+            fn read_discriminant(\n+                &mut self,\n+                op: OpTy<'tcx, M::PointerTag>,\n+            ) -> InterpResult<'tcx, VariantIdx> {\n+                Ok(self.ecx().read_discriminant(op)?.1)\n+            }\n+\n             // Recursive actions, ready to be overloaded.\n             /// Visits the given value, dispatching as appropriate to more specialized visitors.\n             #[inline(always)]\n@@ -245,7 +254,7 @@ macro_rules! make_value_visitor {\n                     // with *its* fields.\n                     Variants::Multiple { .. } => {\n                         let op = v.to_op(self.ecx())?;\n-                        let idx = self.ecx().read_discriminant(op)?.1;\n+                        let idx = self.read_discriminant(op)?;\n                         let inner = v.project_downcast(self.ecx(), idx)?;\n                         trace!(\"walk_value: variant layout: {:#?}\", inner.layout());\n                         // recurse with the inner type"}, {"sha": "513b71f0c6fdcf973572ad517ada9b1890c9a9b8", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=e1beee4992ad4b235fc700bf7af1ee86f894ea53", "patch": "@@ -5,7 +5,7 @@ LL | / static FOO: (&Foo, &Bar) = unsafe {(\n LL | |     Union { u8: &BAR }.foo,\n LL | |     Union { u8: &BAR }.bar,\n LL | | )};\n-   | |___^ type validation failed: encountered 0x05 at .1.<deref>, but expected a valid enum tag\n+   | |___^ type validation failed: encountered 0x05 at .1.<deref>.<enum-tag>, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "217bfb628a018673d4590618f07a08f31e39c910", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=e1beee4992ad4b235fc700bf7af1ee86f894ea53", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:24:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000001, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000001 at .<enum-tag>, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -26,7 +26,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:42:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000000, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000000 at .<enum-tag>, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "512359f5b1c38c82992c1009aba4ce054c836234", "filename": "src/test/ui/consts/const-eval/union-ub.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs?ref=e1beee4992ad4b235fc700bf7af1ee86f894ea53", "patch": "@@ -2,6 +2,7 @@\n \n #[repr(C)]\n union DummyUnion {\n+    unit: (),\n     u8: u8,\n     bool: bool,\n }\n@@ -30,6 +31,8 @@ union Bar {\n // the value is not valid for bools\n const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n //~^ ERROR it is undefined behavior to use this value\n+const UNINIT_BOOL: bool = unsafe { DummyUnion { unit: () }.bool};\n+//~^ ERROR it is undefined behavior to use this value\n \n // The value is not valid for any union variant, but that's fine\n // unions are just a convenient way to transmute bits around"}, {"sha": "e8869d0d76c1cf8c0d042db378f526f5b1b4c6a5", "filename": "src/test/ui/consts/const-eval/union-ub.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr?ref=e1beee4992ad4b235fc700bf7af1ee86f894ea53", "patch": "@@ -1,11 +1,19 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub.rs:31:1\n+  --> $DIR/union-ub.rs:32:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x2a, but expected a boolean\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to previous error\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/union-ub.rs:34:1\n+   |\n+LL | const UNINIT_BOOL: bool = unsafe { DummyUnion { unit: () }.bool};\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a boolean\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}