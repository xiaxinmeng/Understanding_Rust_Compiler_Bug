{"sha": "7f454d8d06279663a330cfc4c9248056c402acd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNDU0ZDhkMDYyNzk2NjNhMzMwY2ZjNGM5MjQ4MDU2YzQwMmFjZDE=", "commit": {"author": {"name": "Heinz N. Gies", "email": "heinz@licenser.net", "date": "2019-10-16T17:43:26Z"}, "committer": {"name": "Heinz N. Gies", "email": "heinz@licenser.net", "date": "2019-10-18T05:40:48Z"}, "message": "Split out tests", "tree": {"sha": "a5a35a8721abc043808d97a2415d9e7409aa6c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5a35a8721abc043808d97a2415d9e7409aa6c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f454d8d06279663a330cfc4c9248056c402acd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f454d8d06279663a330cfc4c9248056c402acd1", "html_url": "https://github.com/rust-lang/rust/commit/7f454d8d06279663a330cfc4c9248056c402acd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f454d8d06279663a330cfc4c9248056c402acd1/comments", "author": {"login": "Licenser", "id": 119093, "node_id": "MDQ6VXNlcjExOTA5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/119093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Licenser", "html_url": "https://github.com/Licenser", "followers_url": "https://api.github.com/users/Licenser/followers", "following_url": "https://api.github.com/users/Licenser/following{/other_user}", "gists_url": "https://api.github.com/users/Licenser/gists{/gist_id}", "starred_url": "https://api.github.com/users/Licenser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Licenser/subscriptions", "organizations_url": "https://api.github.com/users/Licenser/orgs", "repos_url": "https://api.github.com/users/Licenser/repos", "events_url": "https://api.github.com/users/Licenser/events{/privacy}", "received_events_url": "https://api.github.com/users/Licenser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Licenser", "id": 119093, "node_id": "MDQ6VXNlcjExOTA5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/119093?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Licenser", "html_url": "https://github.com/Licenser", "followers_url": "https://api.github.com/users/Licenser/followers", "following_url": "https://api.github.com/users/Licenser/following{/other_user}", "gists_url": "https://api.github.com/users/Licenser/gists{/gist_id}", "starred_url": "https://api.github.com/users/Licenser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Licenser/subscriptions", "organizations_url": "https://api.github.com/users/Licenser/orgs", "repos_url": "https://api.github.com/users/Licenser/repos", "events_url": "https://api.github.com/users/Licenser/events{/privacy}", "received_events_url": "https://api.github.com/users/Licenser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "html_url": "https://github.com/rust-lang/rust/commit/a7ad78f3eb2886a942c077461f6e205ca72f9cb2"}], "stats": {"total": 416, "additions": 245, "deletions": 171}, "files": [{"sha": "ef21695cbab1c8de217365a52500cca767c4a27b", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -1129,6 +1129,7 @@ Released 2018-09-13\n [`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\n [`op_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#op_ref\n [`option_and_then_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_and_then_some\n+[`option_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_expect_used\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n [`option_map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or\n@@ -1168,6 +1169,7 @@ Released 2018-09-13\n [`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n+[`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used"}, {"sha": "41b8b4199ec5d3203997092d991919072572244a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 329 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 331 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "bff1952cce77956bd6b3f04759ad6d073c08662f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -625,7 +625,9 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         mem_forget::MEM_FORGET,\n         methods::CLONE_ON_REF_PTR,\n         methods::GET_UNWRAP,\n+        methods::OPTION_EXPECT_USED,\n         methods::OPTION_UNWRAP_USED,\n+        methods::RESULT_EXPECT_USED,\n         methods::RESULT_UNWRAP_USED,\n         methods::WRONG_PUB_SELF_CONVENTION,\n         misc::FLOAT_CMP_CONST,"}, {"sha": "74538164f8e9250171e84387f713725bc667eb35", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -111,9 +111,10 @@ declare_clippy_lint! {\n     ///\n     /// Better:\n     ///\n-    /// ```rust\n+    /// ```ignore\n     /// let opt = Some(1);\n     /// opt?;\n+    /// # Some::<()>(())\n     /// ```\n     pub OPTION_EXPECT_USED,\n     restriction,\n@@ -139,9 +140,10 @@ declare_clippy_lint! {\n     ///\n     /// Better:\n     ///\n-    /// ```rust\n+    /// ```\n     /// let res: Result<usize, ()> = Ok(1);\n     /// res?;\n+    /// # Ok::<(), ()>(())\n     /// ```\n     pub RESULT_EXPECT_USED,\n     restriction,"}, {"sha": "87ef5f9034c8f4fc41e8d8c6e0cde645005a933c", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n     /// ```\n     pub PANIC,\n     restriction,\n-    \"missing parameters in `panic!` calls\"\n+    \"usage of the `panic!` macro\"\n }\n \n declare_clippy_lint! {"}, {"sha": "f44ef226847f3b15e3d23f13b19793b1bb61292a", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 329] = [\n+pub const ALL_LINTS: [Lint; 331] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1393,6 +1393,13 @@ pub const ALL_LINTS: [Lint; 329] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"option_expect_used\",\n+        group: \"restriction\",\n+        desc: \"using `Option.expect()`, which might be better handled\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"option_map_or_none\",\n         group: \"style\",\n@@ -1459,7 +1466,7 @@ pub const ALL_LINTS: [Lint; 329] = [\n     Lint {\n         name: \"panic\",\n         group: \"restriction\",\n-        desc: \"missing parameters in `panic!` calls\",\n+        desc: \"usage of the `panic!` macro\",\n         deprecation: None,\n         module: \"panic_unimplemented\",\n     },\n@@ -1659,6 +1666,13 @@ pub const ALL_LINTS: [Lint; 329] = [\n         deprecation: None,\n         module: \"replace_consts\",\n     },\n+    Lint {\n+        name: \"result_expect_used\",\n+        group: \"restriction\",\n+        desc: \"using `Result.expect()`, which might be better handled\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"result_map_unit_fn\",\n         group: \"complexity\","}, {"sha": "0bd4252c49aa5e9e77f675f37df8f82aa0ae1251", "filename": "tests/ui/expect.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fexpect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fexpect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.rs?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -0,0 +1,16 @@\n+#![warn(clippy::option_expect_used, clippy::result_expect_used)]\n+\n+fn expect_option() {\n+    let opt = Some(0);\n+    let _ = opt.expect(\"\");\n+}\n+\n+fn expect_result() {\n+    let res: Result<u8, ()> = Ok(0);\n+    let _ = res.expect(\"\");\n+}\n+\n+fn main() {\n+    expect_option();\n+    expect_result();\n+}"}, {"sha": "4f954f611a69f2034bb051b9ad7448119155b8d8", "filename": "tests/ui/expect.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -0,0 +1,18 @@\n+error: used expect() on an Option value. If this value is an None it will panic\n+  --> $DIR/expect.rs:5:13\n+   |\n+LL |     let _ = opt.expect(\"\");\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::option-expect-used` implied by `-D warnings`\n+\n+error: used expect() on a Result value. If this value is an Err it will panic\n+  --> $DIR/expect.rs:10:13\n+   |\n+LL |     let _ = res.expect(\"\");\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::result-expect-used` implied by `-D warnings`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "847a0f0f3395c04ee1a4c10c291c938615ae9f37", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -1,13 +1,7 @@\n // aux-build:option_helpers.rs\n // compile-flags: --edition 2018\n \n-#![warn(\n-    clippy::all,\n-    clippy::pedantic,\n-    clippy::option_unwrap_used,\n-    clippy::option_expect_used,\n-    clippy::result_expect_used\n-)]\n+#![warn(clippy::all, clippy::pedantic)]\n #![allow(\n     clippy::blacklisted_name,\n     clippy::default_trait_access,\n@@ -307,8 +301,8 @@ fn search_is_some() {\n     let _ = foo.rposition().is_some();\n }\n \n-#[allow(clippy::similar_names)]\n fn main() {\n-    let opt = Some(0);\n-    let _ = opt.unwrap();\n+    option_methods();\n+    filter_next();\n+    search_is_some();\n }"}, {"sha": "af7bd4a6a9d9b5bc7060748ea00385e005e4ec54", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -206,13 +206,5 @@ LL | |                                }\n LL | |                    ).is_some();\n    | |______________________________^\n \n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:307:13\n-   |\n-LL |     let _ = opt.unwrap();\n-   |             ^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n-\n-error: aborting due to 24 previous errors\n+error: aborting due to 23 previous errors\n "}, {"sha": "6e004aa9a924ffff0d7160eec504a5140051c4b0", "filename": "tests/ui/panic.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.rs?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -1,12 +1,61 @@\n-#![warn(clippy::panic)]\n+#![warn(clippy::panic_params)]\n #![allow(clippy::assertions_on_constants)]\n+fn missing() {\n+    if true {\n+        panic!(\"{}\");\n+    } else if false {\n+        panic!(\"{:?}\");\n+    } else {\n+        assert!(true, \"here be missing values: {}\");\n+    }\n \n-fn panic() {\n-    let a = 2;\n-    panic!();\n-    let b = a + 2;\n+    panic!(\"{{{this}}}\");\n+}\n+\n+fn ok_single() {\n+    panic!(\"foo bar\");\n+}\n+\n+fn ok_inner() {\n+    // Test for #768\n+    assert!(\"foo bar\".contains(&format!(\"foo {}\", \"bar\")));\n+}\n+\n+fn ok_multiple() {\n+    panic!(\"{}\", \"This is {ok}\");\n+}\n+\n+fn ok_bracket() {\n+    match 42 {\n+        1337 => panic!(\"{so is this\"),\n+        666 => panic!(\"so is this}\"),\n+        _ => panic!(\"}so is that{\"),\n+    }\n+}\n+\n+const ONE: u32 = 1;\n+\n+fn ok_nomsg() {\n+    assert!({ 1 == ONE });\n+    assert!(if 1 == ONE { ONE == 1 } else { false });\n+}\n+\n+fn ok_escaped() {\n+    panic!(\"{{ why should this not be ok? }}\");\n+    panic!(\" or {{ that ?\");\n+    panic!(\" or }} this ?\");\n+    panic!(\" {or {{ that ?\");\n+    panic!(\" }or }} this ?\");\n+    panic!(\"{{ test }\");\n+    panic!(\"{case }}\");\n }\n \n fn main() {\n-    panic();\n+    missing();\n+    ok_single();\n+    ok_multiple();\n+    ok_bracket();\n+    ok_inner();\n+    ok_nomsg();\n+    ok_escaped();\n }"}, {"sha": "1f8ff8ccf55750577675303eb2bcec693119bdda", "filename": "tests/ui/panic.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.stderr?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -1,10 +1,28 @@\n-error: `panic` should not be present in production code\n-  --> $DIR/panic.rs:6:5\n+error: you probably are missing some parameter in your format string\n+  --> $DIR/panic.rs:5:16\n    |\n-LL |     panic!();\n-   |     ^^^^^^^^^\n+LL |         panic!(\"{}\");\n+   |                ^^^^\n    |\n-   = note: `-D clippy::panic` implied by `-D warnings`\n+   = note: `-D clippy::panic-params` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: you probably are missing some parameter in your format string\n+  --> $DIR/panic.rs:7:16\n+   |\n+LL |         panic!(\"{:?}\");\n+   |                ^^^^^^\n+\n+error: you probably are missing some parameter in your format string\n+  --> $DIR/panic.rs:9:23\n+   |\n+LL |         assert!(true, \"here be missing values: {}\");\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you probably are missing some parameter in your format string\n+  --> $DIR/panic.rs:12:12\n+   |\n+LL |     panic!(\"{{{this}}}\");\n+   |            ^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "f3dae3bbde651aa367ce528080f734badee932f4", "filename": "tests/ui/panic_unimplemented.rs", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/tests%2Fui%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/tests%2Fui%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_unimplemented.rs?ref=a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "patch": "@@ -1,82 +0,0 @@\n-#![warn(clippy::panic_params, clippy::unimplemented, clippy::unreachable, clippy::todo)]\n-#![allow(clippy::assertions_on_constants)]\n-fn missing() {\n-    if true {\n-        panic!(\"{}\");\n-    } else if false {\n-        panic!(\"{:?}\");\n-    } else {\n-        assert!(true, \"here be missing values: {}\");\n-    }\n-\n-    panic!(\"{{{this}}}\");\n-}\n-\n-fn ok_single() {\n-    panic!(\"foo bar\");\n-}\n-\n-fn ok_inner() {\n-    // Test for #768\n-    assert!(\"foo bar\".contains(&format!(\"foo {}\", \"bar\")));\n-}\n-\n-fn ok_multiple() {\n-    panic!(\"{}\", \"This is {ok}\");\n-}\n-\n-fn ok_bracket() {\n-    match 42 {\n-        1337 => panic!(\"{so is this\"),\n-        666 => panic!(\"so is this}\"),\n-        _ => panic!(\"}so is that{\"),\n-    }\n-}\n-\n-const ONE: u32 = 1;\n-\n-fn ok_nomsg() {\n-    assert!({ 1 == ONE });\n-    assert!(if 1 == ONE { ONE == 1 } else { false });\n-}\n-\n-fn ok_escaped() {\n-    panic!(\"{{ why should this not be ok? }}\");\n-    panic!(\" or {{ that ?\");\n-    panic!(\" or }} this ?\");\n-    panic!(\" {or {{ that ?\");\n-    panic!(\" }or }} this ?\");\n-    panic!(\"{{ test }\");\n-    panic!(\"{case }}\");\n-}\n-\n-fn unimplemented() {\n-    let a = 2;\n-    unimplemented!();\n-    let b = a + 2;\n-}\n-\n-fn unreachable() {\n-    let a = 2;\n-    unreachable!();\n-    let b = a + 2;\n-}\n-\n-fn todo() {\n-    let a = 2;\n-    todo!();\n-    let b = a + 2;\n-}\n-\n-fn main() {\n-    missing();\n-    ok_single();\n-    ok_multiple();\n-    ok_bracket();\n-    ok_inner();\n-    ok_nomsg();\n-    ok_escaped();\n-    unimplemented();\n-    unreachable();\n-    todo();\n-}"}, {"sha": "6d847e8df3eb1226e025c893bd5be0bdc7d83aeb", "filename": "tests/ui/panic_unimplemented.stderr", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/tests%2Fui%2Fpanic_unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7ad78f3eb2886a942c077461f6e205ca72f9cb2/tests%2Fui%2Fpanic_unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_unimplemented.stderr?ref=a7ad78f3eb2886a942c077461f6e205ca72f9cb2", "patch": "@@ -1,52 +0,0 @@\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic_unimplemented.rs:5:16\n-   |\n-LL |         panic!(\"{}\");\n-   |                ^^^^\n-   |\n-   = note: `-D clippy::panic-params` implied by `-D warnings`\n-\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic_unimplemented.rs:7:16\n-   |\n-LL |         panic!(\"{:?}\");\n-   |                ^^^^^^\n-\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic_unimplemented.rs:9:23\n-   |\n-LL |         assert!(true, \"here be missing values: {}\");\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: you probably are missing some parameter in your format string\n-  --> $DIR/panic_unimplemented.rs:12:12\n-   |\n-LL |     panic!(\"{{{this}}}\");\n-   |            ^^^^^^^^^^^^\n-\n-error: `unimplemented` should not be present in production code\n-  --> $DIR/panic_unimplemented.rs:55:5\n-   |\n-LL |     unimplemented!();\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unimplemented` implied by `-D warnings`\n-\n-error: `unreachable` should not be present in production code\n-  --> $DIR/panic_unimplemented.rs:61:5\n-   |\n-LL |     unreachable!();\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unreachable` implied by `-D warnings`\n-\n-error: `todo` should not be present in production code\n-  --> $DIR/panic_unimplemented.rs:67:5\n-   |\n-LL |     todo!();\n-   |     ^^^^^^^^\n-   |\n-   = note: `-D clippy::todo` implied by `-D warnings`\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "dabb695368dba2b485cdc7de2b26defb1cdee55e", "filename": "tests/ui/panicking_macros.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fpanicking_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fpanicking_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.rs?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -0,0 +1,33 @@\n+#![warn(clippy::unimplemented, clippy::unreachable, clippy::todo, clippy::panic)]\n+#![allow(clippy::assertions_on_constants)]\n+\n+fn panic() {\n+    let a = 2;\n+    panic!();\n+    let b = a + 2;\n+}\n+\n+fn todo() {\n+    let a = 2;\n+    todo!();\n+    let b = a + 2;\n+}\n+\n+fn unimplemented() {\n+    let a = 2;\n+    unimplemented!();\n+    let b = a + 2;\n+}\n+\n+fn unreachable() {\n+    let a = 2;\n+    unreachable!();\n+    let b = a + 2;\n+}\n+\n+fn main() {\n+    panic();\n+    todo();\n+    unimplemented();\n+    unreachable();\n+}"}, {"sha": "72319bc7e45846014e6ad49e6669a7cf194e4e8a", "filename": "tests/ui/panicking_macros.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -0,0 +1,34 @@\n+error: `panic` should not be present in production code\n+  --> $DIR/panicking_macros.rs:6:5\n+   |\n+LL |     panic!();\n+   |     ^^^^^^^^^\n+   |\n+   = note: `-D clippy::panic` implied by `-D warnings`\n+\n+error: `todo` should not be present in production code\n+  --> $DIR/panicking_macros.rs:12:5\n+   |\n+LL |     todo!();\n+   |     ^^^^^^^^\n+   |\n+   = note: `-D clippy::todo` implied by `-D warnings`\n+\n+error: `unimplemented` should not be present in production code\n+  --> $DIR/panicking_macros.rs:18:5\n+   |\n+LL |     unimplemented!();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unimplemented` implied by `-D warnings`\n+\n+error: `unreachable` should not be present in production code\n+  --> $DIR/panicking_macros.rs:24:5\n+   |\n+LL |     unreachable!();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unreachable` implied by `-D warnings`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "fcd1fcd14d48f67590a89b0c33848af7d96f5dd9", "filename": "tests/ui/unwrap.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.rs?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -0,0 +1,16 @@\n+#![warn(clippy::option_unwrap_used, clippy::result_unwrap_used)]\n+\n+fn unwrap_option() {\n+    let opt = Some(0);\n+    let _ = opt.unwrap();\n+}\n+\n+fn unwrap_result() {\n+    let res: Result<u8, ()> = Ok(0);\n+    let _ = res.unwrap();\n+}\n+\n+fn main() {\n+    unwrap_option();\n+    unwrap_result();\n+}"}, {"sha": "cde3ceffd9d362e1541f3938a1ee4be2e019d45a", "filename": "tests/ui/unwrap.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f454d8d06279663a330cfc4c9248056c402acd1/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=7f454d8d06279663a330cfc4c9248056c402acd1", "patch": "@@ -0,0 +1,18 @@\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+  --> $DIR/unwrap.rs:5:13\n+   |\n+LL |     let _ = opt.unwrap();\n+   |             ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n+\n+error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n+  --> $DIR/unwrap.rs:10:13\n+   |\n+LL |     let _ = res.unwrap();\n+   |             ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::result-unwrap-used` implied by `-D warnings`\n+\n+error: aborting due to 2 previous errors\n+"}]}