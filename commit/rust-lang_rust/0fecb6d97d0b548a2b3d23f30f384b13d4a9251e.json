{"sha": "0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZWNiNmQ5N2QwYjU0OGEyYjNkMjNmMzBmMzg0YjEzZDRhOTI1MWU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-15T16:55:55Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-16T06:11:44Z"}, "message": "Rollup merge of #58433 - RalfJung:miri-mark-tests, r=TimNN\n\nUpdate which libcore/liballoc tests Miri ignores, and document why", "tree": {"sha": "41971db282130d6700592e3e9e719cc3f934ad8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41971db282130d6700592e3e9e719cc3f934ad8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlxnqaAACgkQ/vbIBR0O\nATydJA/+Lkcs5d709fhf0020OyR2Xp/WDsSGnvWcJYhuMpHIFey2pzhWD0MwTs66\n4sZxkgDp9M6UvE5Wyj2Bne7Fk002YUbOurzM88UwGYLswlT7PoDWoOFQdekkhMZ1\n2bgA9hf96/pnoGNZrpTMKNHBnUWElRf1xJmk3YAvR/kEZ/OIOSsWvjvaXaxfbNDg\n109yEBl7ZdndRvA+xXhCS4jf5AdHW4ohwjXHQlys+yCK6RgpHLpl6xNWczY4mwwv\nbUewzNzrX0yFZTzXlo+6PgePcCu0/pPSd58uWcJNUl/zO3UBxKr/rc+wTDXMemz/\njgNwfrC21XXhUI7PUdM515bOWOPEhXYZTI5++XjPy2s3o5dCvzm6D19oPBupIz1l\nkrr1ujhifqMwi26EaWaPJodZFAMZvO4dxtYrYa9a/QZKkWQG7EwplZW4CPboO12r\ndyPiald9IqC/DUkqYw5hdSIJLas/3+/a2lhXLA+Z0vl1BMgi2GjNY1UHRCviJYX2\naY15QNvtZQnLn6j+XSqaDZTXDd+Yas4vuFgtdvLQ8I2GVZwAJcT1enqrw3HVXQYh\n/9rkYasJjKuENrabebWpbW/Q8as8qYsBKEevgnr2u4P+GOpD8goE9LhHcIbh7qqL\nmZ4RXrG67WsP+gn3eLUrWbiK6pHNd29dBulZYiu1YNbVmacPaqw=\n=FdCP\n-----END PGP SIGNATURE-----", "payload": "tree 41971db282130d6700592e3e9e719cc3f934ad8d\nparent 13b055d5db67ab6c88d6379b7677069482db6077\nparent c154bf7db4d5737b55c6f85c69df136c374db3a5\nauthor kennytm <kennytm@gmail.com> 1550249755 +0800\ncommitter kennytm <kennytm@gmail.com> 1550297504 +0800\n\nRollup merge of #58433 - RalfJung:miri-mark-tests, r=TimNN\n\nUpdate which libcore/liballoc tests Miri ignores, and document why\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "html_url": "https://github.com/rust-lang/rust/commit/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13b055d5db67ab6c88d6379b7677069482db6077", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b055d5db67ab6c88d6379b7677069482db6077", "html_url": "https://github.com/rust-lang/rust/commit/13b055d5db67ab6c88d6379b7677069482db6077"}, {"sha": "c154bf7db4d5737b55c6f85c69df136c374db3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c154bf7db4d5737b55c6f85c69df136c374db3a5", "html_url": "https://github.com/rust-lang/rust/commit/c154bf7db4d5737b55c6f85c69df136c374db3a5"}], "stats": {"total": 229, "additions": 150, "deletions": 79}, "files": [{"sha": "2759b1b1cac2769696f43075f2ab6e756318cab1", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use std::any::Any;\n use std::sync::{Arc, Weak};\n use std::cell::RefCell;"}, {"sha": "1d4a3edc1ac42c2d4e05f71df6bc43766ecd666f", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -282,7 +282,7 @@ fn assert_covariance() {\n //\n // Destructors must be called exactly once per element.\n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn panic_safe() {\n     static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n "}, {"sha": "f14750089c9560fdf2d6446f30ac355e67d12ef5", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -9,7 +9,10 @@ use super::DeterministicRng;\n #[test]\n fn test_basic_large() {\n     let mut map = BTreeMap::new();\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n+    #[cfg(miri)]\n+    let size = 200;\n     assert_eq!(map.len(), 0);\n \n     for i in 0..size {\n@@ -69,7 +72,10 @@ fn test_basic_small() {\n \n #[test]\n fn test_iter() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n+    #[cfg(miri)]\n+    let size = 200;\n \n     // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n@@ -91,7 +97,10 @@ fn test_iter() {\n \n #[test]\n fn test_iter_rev() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n+    #[cfg(miri)]\n+    let size = 200;\n \n     // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n@@ -127,7 +136,10 @@ fn test_values_mut() {\n \n #[test]\n fn test_iter_mixed() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 10000;\n+    #[cfg(miri)]\n+    let size = 200;\n \n     // Forwards\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n@@ -214,42 +226,50 @@ fn test_range_equal_empty_cases() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_equal_excluded() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Excluded(2), Excluded(2)));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_1() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Included(3), Included(2)));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_2() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Included(3), Excluded(2)));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_3() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Excluded(3), Included(2)));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_range_backwards_4() {\n     let map: BTreeMap<_, _> = (0..5).map(|i| (i, i)).collect();\n     map.range((Excluded(3), Excluded(2)));\n }\n \n #[test]\n fn test_range_1000() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 1000;\n+    #[cfg(miri)]\n+    let size = 200;\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     fn test(map: &BTreeMap<u32, u32>, size: u32, min: Bound<&u32>, max: Bound<&u32>) {\n@@ -286,7 +306,10 @@ fn test_range_borrowed_key() {\n \n #[test]\n fn test_range() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 200;\n+    #[cfg(miri)]\n+    let size = 30;\n     let map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     for i in 0..size {\n@@ -305,7 +328,10 @@ fn test_range() {\n \n #[test]\n fn test_range_mut() {\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 200;\n+    #[cfg(miri)]\n+    let size = 30;\n     let mut map: BTreeMap<_, _> = (0..size).map(|i| (i, i)).collect();\n \n     for i in 0..size {\n@@ -479,7 +505,10 @@ fn test_bad_zst() {\n #[test]\n fn test_clone() {\n     let mut map = BTreeMap::new();\n+    #[cfg(not(miri))] // Miri is too slow\n     let size = 100;\n+    #[cfg(miri)]\n+    let size = 30;\n     assert_eq!(map.len(), 0);\n \n     for i in 0..size {\n@@ -631,6 +660,7 @@ create_append_test!(test_append_145, 145);\n create_append_test!(test_append_170, 170);\n create_append_test!(test_append_181, 181);\n create_append_test!(test_append_239, 239);\n+#[cfg(not(miri))] // Miri is too slow\n create_append_test!(test_append_1700, 1700);\n \n fn rand_data(len: usize) -> Vec<(u32, u32)> {"}, {"sha": "4c704d0f8c28fa7106bc3364133e9c44c57471b5", "filename": "src/liballoc/tests/btree/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmod.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n mod map;\n mod set;\n "}, {"sha": "c225ebfa96b91d36f127a71656e61970d19d3088", "filename": "src/liballoc/tests/heap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fheap.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use std::alloc::{Global, Alloc, Layout, System};\n \n /// Issue #45955."}, {"sha": "18f82e804100823bec0e4e9c92dc55e7e444efd4", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use std::any::Any;\n use std::rc::{Rc, Weak};\n use std::cell::RefCell;"}, {"sha": "feba46b0fad78466af3496fb3ab98bfa9807d68f", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use std::cell::Cell;\n use std::cmp::Ordering::{self, Equal, Greater, Less};\n use std::mem;\n@@ -260,6 +258,7 @@ fn test_swap_remove() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_swap_remove_fail() {\n     let mut v = vec![1];\n     let _ = v.swap_remove(0);\n@@ -391,6 +390,7 @@ fn test_reverse() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri does not support entropy\n fn test_sort() {\n     let mut rng = thread_rng();\n \n@@ -467,6 +467,7 @@ fn test_sort() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri does not support entropy\n fn test_sort_stability() {\n     for len in (2..25).chain(500..510) {\n         for _ in 0..10 {\n@@ -631,6 +632,7 @@ fn test_insert() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_insert_oob() {\n     let mut a = vec![1, 2, 3];\n     a.insert(4, 5);\n@@ -655,6 +657,7 @@ fn test_remove() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_remove_fail() {\n     let mut a = vec![1];\n     let _ = a.remove(0);\n@@ -936,6 +939,7 @@ fn test_windowsator() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_windowsator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.windows(0);\n@@ -960,6 +964,7 @@ fn test_chunksator() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_chunksator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.chunks(0);\n@@ -984,6 +989,7 @@ fn test_chunks_exactator() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_chunks_exactator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.chunks_exact(0);\n@@ -1008,6 +1014,7 @@ fn test_rchunksator() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_rchunksator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.rchunks(0);\n@@ -1032,6 +1039,7 @@ fn test_rchunks_exactator() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_rchunks_exactator_0() {\n     let v = &[1, 2, 3, 4];\n     let _it = v.rchunks_exact(0);\n@@ -1084,6 +1092,7 @@ fn test_vec_default() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_overflow_does_not_cause_segfault() {\n     let mut v = vec![];\n     v.reserve_exact(!0);\n@@ -1093,6 +1102,7 @@ fn test_overflow_does_not_cause_segfault() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_overflow_does_not_cause_segfault_managed() {\n     let mut v = vec![Rc::new(1)];\n     v.reserve_exact(!0);\n@@ -1268,6 +1278,7 @@ fn test_mut_chunks_rev() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mut_chunks_0() {\n     let mut v = [1, 2, 3, 4];\n     let _it = v.chunks_mut(0);\n@@ -1300,6 +1311,7 @@ fn test_mut_chunks_exact_rev() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mut_chunks_exact_0() {\n     let mut v = [1, 2, 3, 4];\n     let _it = v.chunks_exact_mut(0);\n@@ -1332,6 +1344,7 @@ fn test_mut_rchunks_rev() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mut_rchunks_0() {\n     let mut v = [1, 2, 3, 4];\n     let _it = v.rchunks_mut(0);\n@@ -1364,6 +1377,7 @@ fn test_mut_rchunks_exact_rev() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mut_rchunks_exact_0() {\n     let mut v = [1, 2, 3, 4];\n     let _it = v.rchunks_exact_mut(0);\n@@ -1397,6 +1411,7 @@ fn test_box_slice_clone() {\n #[test]\n #[allow(unused_must_use)] // here, we care about the side effects of `.clone()`\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_box_slice_clone_panics() {\n     use std::sync::Arc;\n     use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -1461,6 +1476,7 @@ fn test_copy_from_slice() {\n \n #[test]\n #[should_panic(expected = \"destination and source slices have different lengths\")]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_from_slice_dst_longer() {\n     let src = [0, 1, 2, 3];\n     let mut dst = [0; 5];\n@@ -1469,6 +1485,7 @@ fn test_copy_from_slice_dst_longer() {\n \n #[test]\n #[should_panic(expected = \"destination and source slices have different lengths\")]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_from_slice_dst_shorter() {\n     let src = [0, 1, 2, 3];\n     let mut dst = [0; 3];\n@@ -1588,6 +1605,7 @@ thread_local!(static SILENCE_PANIC: Cell<bool> = Cell::new(false));\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)] // no threads\n+#[cfg(not(miri))] // Miri does not support panics\n fn panic_safe() {\n     let prev = panic::take_hook();\n     panic::set_hook(Box::new(move |info| {"}, {"sha": "b33a56421888831bf0607d4832f77f92f84d5891", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -31,7 +31,6 @@ fn test_rfind() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_collect() {\n     let empty = \"\";\n     let s: String = empty.chars().collect();\n@@ -119,7 +118,6 @@ fn test_concat_for_different_types() {\n #[test]\n fn test_concat_for_different_lengths() {\n     let empty: &[&str] = &[];\n-    #[cfg(not(miri))]\n     test_concat!(\"\", empty);\n     test_concat!(\"a\", [\"a\"]);\n     test_concat!(\"ab\", [\"a\", \"b\"]);\n@@ -148,7 +146,6 @@ fn test_join_for_different_types() {\n #[test]\n fn test_join_for_different_lengths() {\n     let empty: &[&str] = &[];\n-    #[cfg(not(miri))]\n     test_join!(\"\", empty, \"-\");\n     test_join!(\"a\", [\"a\"], \"-\");\n     test_join!(\"a-b\", [\"a\", \"b\"], \"-\");\n@@ -162,15 +159,14 @@ fn test_join_for_different_lengths_with_long_separator() {\n     assert_eq!(\"\uff5e\uff5e\uff5e\uff5e\uff5e\".len(), 15);\n \n     let empty: &[&str] = &[];\n-    #[cfg(not(miri))]\n     test_join!(\"\", empty, \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n     test_join!(\"a\", [\"a\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n     test_join!(\"a\uff5e\uff5e\uff5e\uff5e\uff5eb\", [\"a\", \"b\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n     test_join!(\"\uff5e\uff5e\uff5e\uff5e\uff5ea\uff5e\uff5e\uff5e\uff5e\uff5ebc\", [\"\", \"a\", \"bc\"], \"\uff5e\uff5e\uff5e\uff5e\uff5e\");\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri is too slow\n fn test_unsafe_slice() {\n     assert_eq!(\"ab\", unsafe {\"abc\".get_unchecked(0..2)});\n     assert_eq!(\"bc\", unsafe {\"abc\".get_unchecked(1..3)});\n@@ -243,7 +239,6 @@ fn test_replacen() {\n #[test]\n fn test_replace() {\n     let a = \"a\";\n-    #[cfg(not(miri))]\n     assert_eq!(\"\".replace(a, \"b\"), \"\");\n     assert_eq!(\"a\".replace(a, \"b\"), \"b\");\n     assert_eq!(\"ab\".replace(a, \"b\"), \"bb\");\n@@ -303,7 +298,6 @@ fn test_replace_pattern() {\n // The current implementation of SliceIndex fails to handle methods\n // orthogonally from range types; therefore, it is worth testing\n // all of the indexing operations on each input.\n-#[cfg(not(miri))]\n mod slice_index {\n     // Test a slicing operation **that should succeed,**\n     // testing it on all of the indexing methods.\n@@ -357,6 +351,7 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"out of bounds\")]\n+    #[cfg(not(miri))] // Miri does not support panics\n     fn assert_range_eq_can_fail_by_panic() {\n         assert_range_eq!(\"abc\", 0..5, \"abc\");\n     }\n@@ -366,6 +361,7 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"==\")]\n+    #[cfg(not(miri))] // Miri does not support panics\n     fn assert_range_eq_can_fail_by_inequality() {\n         assert_range_eq!(\"abc\", 0..2, \"abc\");\n     }\n@@ -413,6 +409,7 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n+                #[cfg(not(miri))] // Miri does not support panics\n                 fn index_fail() {\n                     let v: String = $data.into();\n                     let v: &str = &v;\n@@ -421,6 +418,7 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n+                #[cfg(not(miri))] // Miri does not support panics\n                 fn index_mut_fail() {\n                     let mut v: String = $data.into();\n                     let v: &mut str = &mut v;\n@@ -490,6 +488,7 @@ mod slice_index {\n \n     #[test]\n     #[cfg(not(target_arch = \"asmjs\"))] // hits an OOM\n+    #[cfg(not(miri))] // Miri is too slow\n     fn simple_big() {\n         fn a_million_letter_x() -> String {\n             let mut i = 0;\n@@ -515,6 +514,7 @@ mod slice_index {\n \n     #[test]\n     #[should_panic]\n+    #[cfg(not(miri))] // Miri does not support panics\n     fn test_slice_fail() {\n         &\"\u4e2d\u534eVi\u1ec7t Nam\"[0..2];\n     }\n@@ -666,12 +666,14 @@ mod slice_index {\n     // check the panic includes the prefix of the sliced string\n     #[test]\n     #[should_panic(expected=\"byte index 1024 is out of bounds of `Lorem ipsum dolor sit amet\")]\n+    #[cfg(not(miri))] // Miri does not support panics\n     fn test_slice_fail_truncated_1() {\n         &LOREM_PARAGRAPH[..1024];\n     }\n     // check the truncation in the panic message\n     #[test]\n     #[should_panic(expected=\"luctus, im`[...]\")]\n+    #[cfg(not(miri))] // Miri does not support panics\n     fn test_slice_fail_truncated_2() {\n         &LOREM_PARAGRAPH[..1024];\n     }\n@@ -686,7 +688,7 @@ fn test_str_slice_rangetoinclusive_ok() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_str_slice_rangetoinclusive_notok() {\n     let s = \"abc\u03b1\u03b2\u03b3\";\n     &s[..=3];\n@@ -702,7 +704,7 @@ fn test_str_slicemut_rangetoinclusive_ok() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_str_slicemut_rangetoinclusive_notok() {\n     let mut s = \"abc\u03b1\u03b2\u03b3\".to_owned();\n     let s: &mut str = &mut s;\n@@ -892,7 +894,7 @@ fn test_as_bytes() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_as_bytes_fail() {\n     // Don't double free. (I'm not sure if this exercises the\n     // original problem code path anymore.)\n@@ -982,7 +984,7 @@ fn test_split_at_mut() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_split_at_boundscheck() {\n     let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n     s.split_at(1);\n@@ -1078,7 +1080,7 @@ fn test_rev_iterator() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri is too slow\n fn test_chars_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(std::char::from_u32) {\n@@ -1090,7 +1092,7 @@ fn test_chars_decoding() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri is too slow\n fn test_chars_rev_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(std::char::from_u32) {\n@@ -1320,7 +1322,6 @@ fn test_splitator() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_str_default() {\n     use std::default::Default;\n \n@@ -1380,7 +1381,7 @@ fn test_bool_from_str() {\n     assert_eq!(\"not even a boolean\".parse::<bool>().ok(), None);\n }\n \n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri is too slow\n fn check_contains_all_substrings(s: &str) {\n     assert!(s.contains(\"\"));\n     for i in 0..s.len() {\n@@ -1391,7 +1392,7 @@ fn check_contains_all_substrings(s: &str) {\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri is too slow\n fn strslice_issue_16589() {\n     assert!(\"bananas\".contains(\"nana\"));\n \n@@ -1401,15 +1402,14 @@ fn strslice_issue_16589() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn strslice_issue_16878() {\n     assert!(!\"1234567ah012345678901ah\".contains(\"hah\"));\n     assert!(!\"00abc01234567890123456789abc\".contains(\"bcabc\"));\n }\n \n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri is too slow\n fn test_strslice_contains() {\n     let x = \"There are moments, Jeeves, when one asks oneself, 'Do trousers matter?'\";\n     check_contains_all_substrings(x);\n@@ -1547,7 +1547,6 @@ fn trim_ws() {\n \n #[test]\n fn to_lowercase() {\n-    #[cfg(not(miri))]\n     assert_eq!(\"\".to_lowercase(), \"\");\n     assert_eq!(\"A\u00c9\u01c5a\u00e9 \".to_lowercase(), \"a\u00e9\u01c6a\u00e9 \");\n \n@@ -1581,7 +1580,6 @@ fn to_lowercase() {\n \n #[test]\n fn to_uppercase() {\n-    #[cfg(not(miri))]\n     assert_eq!(\"\".to_uppercase(), \"\");\n     assert_eq!(\"a\u00e9\u01c5\u00df\ufb01\u1f80\".to_uppercase(), \"A\u00c9\u01c4SSFI\u1f08\u0399\");\n }\n@@ -1613,7 +1611,6 @@ fn test_cow_from() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_repeat() {\n     assert_eq!(\"\".repeat(3), \"\");\n     assert_eq!(\"abc\".repeat(0), \"\");"}, {"sha": "7e93d84fe3b97b1578dad9e6ebd9eb2324ab83c4", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use std::borrow::Cow;\n use std::collections::CollectionAllocErr::*;\n use std::mem::size_of;\n@@ -233,6 +231,7 @@ fn test_split_off_empty() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_split_off_past_end() {\n     let orig = \"Hello, world!\";\n     let mut split = String::from(orig);\n@@ -241,6 +240,7 @@ fn test_split_off_past_end() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_split_off_mid_char() {\n     let mut orig = String::from(\"\u5c71\");\n     orig.split_off(1);\n@@ -289,6 +289,7 @@ fn test_str_truncate_invalid_len() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_str_truncate_split_codepoint() {\n     let mut s = String::from(\"\\u{FC}\"); // \u00fc\n     s.truncate(1);\n@@ -323,6 +324,7 @@ fn remove() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn remove_bad() {\n     \"\u0e28\".to_string().remove(1);\n }\n@@ -358,11 +360,13 @@ fn insert() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn insert_bad1() {\n     \"\".to_string().insert(1, 't');\n }\n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn insert_bad2() {\n     \"\u1ec7\".to_string().insert(1, 't');\n }\n@@ -443,6 +447,7 @@ fn test_replace_range() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_replace_range_char_boundary() {\n     let mut s = \"Hello, \u4e16\u754c!\".to_owned();\n     s.replace_range(..8, \"\");\n@@ -459,13 +464,15 @@ fn test_replace_range_inclusive_range() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_replace_range_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n     s.replace_range(5..6, \"789\");\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_replace_range_inclusive_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n     s.replace_range(5..=5, \"789\");\n@@ -525,6 +532,7 @@ fn test_reserve_exact() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri does not support signalling OOM\n fn test_try_reserve() {\n \n     // These are the interesting cases:\n@@ -602,6 +610,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri does not support signalling OOM\n fn test_try_reserve_exact() {\n \n     // This is exactly the same as test_try_reserve with the method changed."}, {"sha": "6e4ca1d90e642dd31bf20bfd5e3efc00c56e0256", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -368,6 +368,7 @@ fn test_vec_truncate_drop() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_vec_truncate_fail() {\n     struct BadElem(i32);\n     impl Drop for BadElem {\n@@ -391,48 +392,55 @@ fn test_index() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_index_out_of_bounds() {\n     let vec = vec![1, 2, 3];\n     let _ = vec[3];\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_1() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[!0..];\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_2() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[..6];\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_3() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[!0..4];\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_4() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[1..6];\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_slice_out_of_bounds_5() {\n     let x = vec![1, 2, 3, 4, 5];\n     &x[3..2];\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_swap_remove_empty() {\n     let mut vec = Vec::<i32>::new();\n     vec.swap_remove(0);\n@@ -503,6 +511,7 @@ fn test_drain_items_zero_sized() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_drain_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     v.drain(5..6);\n@@ -576,6 +585,7 @@ fn test_drain_max_vec_size() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_drain_inclusive_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     v.drain(5..=5);\n@@ -605,6 +615,7 @@ fn test_splice_inclusive_range() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_splice_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];\n@@ -613,6 +624,7 @@ fn test_splice_out_of_bounds() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_splice_inclusive_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let a = [10, 11, 12];"}, {"sha": "e0cb0e7a9e70c532ccd3f915b5afffa2d1d45514", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -108,7 +108,7 @@ fn test_index() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_index_out_of_bounds() {\n     let mut deq = VecDeque::new();\n     for i in 1..4 {\n@@ -907,24 +907,20 @@ fn test_append() {\n     // normal append\n     a.append(&mut b);\n     assert_eq!(a.iter().cloned().collect::<Vec<_>>(), [1, 2, 3, 4, 5, 6]);\n-    #[cfg(not(miri))]\n     assert_eq!(b.iter().cloned().collect::<Vec<_>>(), []);\n \n     // append nothing to something\n     a.append(&mut b);\n     assert_eq!(a.iter().cloned().collect::<Vec<_>>(), [1, 2, 3, 4, 5, 6]);\n-    #[cfg(not(miri))]\n     assert_eq!(b.iter().cloned().collect::<Vec<_>>(), []);\n \n     // append something to nothing\n     b.append(&mut a);\n     assert_eq!(b.iter().cloned().collect::<Vec<_>>(), [1, 2, 3, 4, 5, 6]);\n-    #[cfg(not(miri))]\n     assert_eq!(a.iter().cloned().collect::<Vec<_>>(), []);\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_append_permutations() {\n     fn construct_vec_deque(\n         push_back: usize,\n@@ -948,7 +944,10 @@ fn test_append_permutations() {\n         out\n     }\n \n+    #[cfg(not(miri))] // Miri is too slow\n     const MAX: usize = 5;\n+    #[cfg(miri)]\n+    const MAX: usize = 3;\n \n     // Many different permutations of both the `VecDeque` getting appended to\n     // and the one getting appended are generated to check `append`.\n@@ -1125,7 +1124,7 @@ fn test_reserve_exact_2() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support signalling OOM\n fn test_try_reserve() {\n \n     // These are the interesting cases:\n@@ -1227,7 +1226,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support signalling OOM\n fn test_try_reserve_exact() {\n \n     // This is exactly the same as test_try_reserve with the method changed."}, {"sha": "b16416022c04e700197081fcdaa016d4fb565655", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use core::cell::*;\n use core::default::Default;\n use std::mem::drop;\n@@ -111,6 +109,7 @@ fn double_borrow_single_release_no_borrow_mut() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn discard_doesnt_unborrow() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();\n@@ -351,6 +350,7 @@ fn refcell_ref_coercion() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn refcell_swap_borrows() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();\n@@ -360,6 +360,7 @@ fn refcell_swap_borrows() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn refcell_replace_borrows() {\n     let x = RefCell::new(0);\n     let _b = x.borrow();"}, {"sha": "df1deeaeb97b789c84387f2f69a9d26e06183d31", "filename": "src/libcore/tests/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,10 +1,9 @@\n-#![cfg(not(miri))]\n-\n mod builders;\n mod float;\n mod num;\n \n #[test]\n+#[cfg(not(miri))] // Miri cannot print pointers\n fn test_format_flags() {\n     // No residual flags left by pointer formatting\n     let p = \"\".as_ptr();\n@@ -14,6 +13,7 @@ fn test_format_flags() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri cannot print pointers\n fn test_pointer_formats_data_pointer() {\n     let b: &[u8] = b\"\";\n     let s: &str = \"\";"}, {"sha": "1000088e6b0633c5489e9eeee91c4e2af1c1a289", "filename": "src/libcore/tests/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fmod.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n mod sip;\n \n use std::hash::{Hash, Hasher};\n@@ -75,9 +73,11 @@ fn test_writer_hasher() {\n     let cs: &mut [u8] = &mut [1, 2, 3];\n     let ptr = cs.as_ptr();\n     let slice_ptr = cs as *const [u8];\n+    #[cfg(not(miri))] // Miri cannot hash pointers\n     assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n \n     let slice_ptr = cs as *mut [u8];\n+    #[cfg(not(miri))] // Miri cannot hash pointers\n     assert_eq!(hash(&slice_ptr), hash(&ptr) + cs.len() as u64);\n }\n "}, {"sha": "9b76a4af98824a46052bd62c1cf9f552b4e98b90", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -190,7 +190,6 @@ fn test_iterator_step_by() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_iterator_step_by_nth() {\n     let mut it = (0..16).step_by(5);\n     assert_eq!(it.nth(0), Some(0));\n@@ -209,7 +208,6 @@ fn test_iterator_step_by_nth() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_iterator_step_by_nth_overflow() {\n     #[cfg(target_pointer_width = \"8\")]\n     type Bigger = u16;\n@@ -255,14 +253,13 @@ fn test_iterator_step_by_nth_overflow() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_iterator_step_by_zero() {\n     let mut it = (0..).step_by(0);\n     it.next();\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_iterator_step_by_size_hint() {\n     struct StubSizeHint(usize, Option<usize>);\n     impl Iterator for StubSizeHint {\n@@ -1417,7 +1414,7 @@ fn test_rposition() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_rposition_panic() {\n     let v: [(Box<_>, Box<_>); 4] =\n         [(box 0, box 0), (box 0, box 0),\n@@ -1657,7 +1654,6 @@ fn test_range_inclusive_nth() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_range_step() {\n     #![allow(deprecated)]\n \n@@ -1681,15 +1677,13 @@ fn test_range_step() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_step_by_skip() {\n     assert_eq!((0..640).step_by(128).skip(1).collect::<Vec<_>>(), [128, 256, 384, 512]);\n     assert_eq!((0..=50).step_by(10).nth(3), Some(30));\n     assert_eq!((200..=255u8).step_by(10).nth(3), Some(230));\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_range_inclusive_step() {\n     assert_eq!((0..=50).step_by(10).collect::<Vec<_>>(), [0, 10, 20, 30, 40, 50]);\n     assert_eq!((0..=5).step_by(1).collect::<Vec<_>>(), [0, 1, 2, 3, 4, 5]);"}, {"sha": "956c22c998219ead7c9b65b0eb793c6f2d1b5137", "filename": "src/libcore/tests/num/bignum.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fbignum.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -3,6 +3,7 @@ use core::num::bignum::tests::Big8x3 as Big;\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_from_u64_overflow() {\n     Big::from_u64(0x1000000);\n }\n@@ -19,12 +20,14 @@ fn test_add() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_add_overflow_1() {\n     Big::from_small(1).add(&Big::from_u64(0xffffff));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_add_overflow_2() {\n     Big::from_u64(0xffffff).add(&Big::from_small(1));\n }\n@@ -42,6 +45,7 @@ fn test_add_small() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_add_small_overflow() {\n     Big::from_u64(0xffffff).add_small(1);\n }\n@@ -57,12 +61,14 @@ fn test_sub() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_sub_underflow_1() {\n     Big::from_u64(0x10665).sub(&Big::from_u64(0x10666));\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_sub_underflow_2() {\n     Big::from_small(0).sub(&Big::from_u64(0x123456));\n }\n@@ -76,6 +82,7 @@ fn test_mul_small() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_small_overflow() {\n     Big::from_u64(0x800000).mul_small(2);\n }\n@@ -94,12 +101,14 @@ fn test_mul_pow2() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow2_overflow_1() {\n     Big::from_u64(0x1).mul_pow2(24);\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow2_overflow_2() {\n     Big::from_u64(0x123).mul_pow2(16);\n }\n@@ -118,12 +127,14 @@ fn test_mul_pow5() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow5_overflow_1() {\n     Big::from_small(1).mul_pow5(12);\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_pow5_overflow_2() {\n     Big::from_small(230).mul_pow5(8);\n }\n@@ -141,12 +152,14 @@ fn test_mul_digits() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_digits_overflow_1() {\n     Big::from_u64(0x800000).mul_digits(&[2]);\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_mul_digits_overflow_2() {\n     Big::from_u64(0x1000).mul_digits(&[0, 0x10]);\n }\n@@ -206,6 +219,7 @@ fn test_get_bit() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_get_bit_out_of_range() {\n     Big::from_small(42).get_bit(24);\n }"}, {"sha": "faeaabbf95adacb75d7edd518f11ffdba021a087", "filename": "src/libcore/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -52,6 +52,7 @@ fn large() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri is too slow\n fn subnormals() {\n     test_literal!(5e-324);\n     test_literal!(91e-324);\n@@ -63,6 +64,7 @@ fn subnormals() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri is too slow\n fn infinity() {\n     test_literal!(1e400);\n     test_literal!(1e309);"}, {"sha": "d362c7994d8066e0dd707a027c866ac1bed1f9ee", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,3 +1,5 @@\n+#![cfg(not(miri))] // Miri does not implement ldexp, which most tests here need\n+\n use std::prelude::v1::*;\n use std::{str, i16, f32, f64, fmt};\n "}, {"sha": "a17c094679ea854623356691df94479bdb17670e", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use core::convert::{TryFrom, TryInto};\n use core::cmp::PartialEq;\n use core::fmt::Debug;"}, {"sha": "87ce2720c5918209a4a6f85b375f63d9fc6e5967", "filename": "src/libcore/tests/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Foption.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -69,7 +69,7 @@ fn test_option_dance() {\n }\n \n #[test] #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_option_too_much_dance() {\n     struct A;\n     let mut y = Some(A);\n@@ -130,15 +130,15 @@ fn test_unwrap() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_unwrap_panic1() {\n     let x: Option<isize> = None;\n     x.unwrap();\n }\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_unwrap_panic2() {\n     let x: Option<String> = None;\n     x.unwrap();"}, {"sha": "2c53e4832a8cc20086f33b023f3264e40d99c172", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use core::ptr::*;\n use core::cell::RefCell;\n \n@@ -42,6 +40,7 @@ fn test() {\n }\n \n #[test]\n+#[cfg(not(miri))] // This test performs invalid OOB pointer arithmetic\n fn test_is_null() {\n     let p: *const isize = null();\n     assert!(p.is_null());\n@@ -147,6 +146,7 @@ fn test_as_ref() {\n }\n \n #[test]\n+#[cfg(not(miri))] // This test is UB according to Stacked Borrows\n fn test_as_mut() {\n     unsafe {\n         let p: *mut isize = null_mut();\n@@ -208,6 +208,7 @@ fn test_ptr_addition() {\n }\n \n #[test]\n+#[cfg(not(miri))] // This test performs invalid OOB pointer arithmetic\n fn test_ptr_subtraction() {\n     unsafe {\n         let xs = vec![0,1,2,3,4,5,6,7,8,9];\n@@ -251,6 +252,7 @@ fn test_unsized_nonnull() {\n \n #[test]\n #[allow(warnings)]\n+#[cfg(not(miri))] // Miri cannot hash pointers\n // Have a symbol for the test below. It doesn\u2019t need to be an actual variadic function, match the\n // ABI, or even point to an actual executable code, because the function itself is never invoked.\n #[no_mangle]\n@@ -290,6 +292,7 @@ fn write_unaligned_drop() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n fn align_offset_zst() {\n     // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n     // all, because no amount of elements will align the pointer.\n@@ -304,6 +307,7 @@ fn align_offset_zst() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n fn align_offset_stride1() {\n     // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n     // number of bytes.\n@@ -320,6 +324,7 @@ fn align_offset_stride1() {\n }\n \n #[test]\n+#[cfg(not(miri))] // Miri is too slow\n fn align_offset_weird_strides() {\n     #[repr(packed)]\n     struct A3(u16, u8);"}, {"sha": "bbc85685176671ad20051ddc28fa2a50014b4718", "filename": "src/libcore/tests/result.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fresult.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -117,7 +117,7 @@ fn test_unwrap_or_else() {\n \n #[test]\n #[should_panic]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n pub fn test_unwrap_or_else_panic() {\n     fn handler(msg: &'static str) -> isize {\n         if msg == \"I got this.\" {\n@@ -139,7 +139,7 @@ pub fn test_expect_ok() {\n }\n #[test]\n #[should_panic(expected=\"Got expected error: \\\"All good\\\"\")]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n pub fn test_expect_err() {\n     let err: Result<isize, &'static str> = Err(\"All good\");\n     err.expect(\"Got expected error\");\n@@ -153,7 +153,7 @@ pub fn test_expect_err_err() {\n }\n #[test]\n #[should_panic(expected=\"Got expected ok: \\\"All good\\\"\")]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n pub fn test_expect_err_ok() {\n     let err: Result<&'static str, isize> = Ok(\"All good\");\n     err.expect_err(\"Got expected ok\");"}, {"sha": "31d16e0e320571c28897f4b30feb266e3bc86ba0", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -782,7 +782,7 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"out of range\")]\n-    #[cfg(not(miri))]\n+    #[cfg(not(miri))] // Miri does not support panics\n     fn assert_range_eq_can_fail_by_panic() {\n         assert_range_eq!([0, 1, 2], 0..5, [0, 1, 2]);\n     }\n@@ -792,7 +792,7 @@ mod slice_index {\n     //  to be used in `should_panic`)\n     #[test]\n     #[should_panic(expected = \"==\")]\n-    #[cfg(not(miri))]\n+    #[cfg(not(miri))] // Miri does not support panics\n     fn assert_range_eq_can_fail_by_inequality() {\n         assert_range_eq!([0, 1, 2], 0..2, [0, 1, 2]);\n     }\n@@ -842,7 +842,7 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n-                #[cfg(not(miri))]\n+                #[cfg(not(miri))] // Miri does not support panics\n                 fn index_fail() {\n                     let v = $data;\n                     let v: &[_] = &v;\n@@ -851,7 +851,7 @@ mod slice_index {\n \n                 #[test]\n                 #[should_panic(expected = $expect_msg)]\n-                #[cfg(not(miri))]\n+                #[cfg(not(miri))] // Miri does not support panics\n                 fn index_mut_fail() {\n                     let mut v = $data;\n                     let v: &mut [_] = &mut v;\n@@ -1015,7 +1015,7 @@ fn test_rotate_right() {\n \n #[test]\n #[cfg(not(target_arch = \"wasm32\"))]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support entropy\n fn sort_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use core::slice::heapsort;\n@@ -1171,7 +1171,7 @@ pub mod memchr {\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1187,7 +1187,6 @@ fn test_align_to_simple() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_align_to_zst() {\n     let bytes = [1, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<()>() };\n@@ -1196,7 +1195,7 @@ fn test_align_to_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n fn test_align_to_non_trivial() {\n     #[repr(align(8))] struct U64(u64, u64);\n     #[repr(align(8))] struct U64U64U32(u64, u64, u32);\n@@ -1208,7 +1207,6 @@ fn test_align_to_non_trivial() {\n }\n \n #[test]\n-#[cfg(not(miri))]\n fn test_align_to_empty_mid() {\n     use core::mem;\n \n@@ -1306,7 +1304,7 @@ fn test_copy_within() {\n \n #[test]\n #[should_panic(expected = \"src is out of bounds\")]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_within_panics_src_too_long() {\n     let mut bytes = *b\"Hello, World!\";\n     // The length is only 13, so 14 is out of bounds.\n@@ -1315,15 +1313,15 @@ fn test_copy_within_panics_src_too_long() {\n \n #[test]\n #[should_panic(expected = \"dest is out of bounds\")]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_within_panics_dest_too_long() {\n     let mut bytes = *b\"Hello, World!\";\n     // The length is only 13, so a slice of length 4 starting at index 10 is out of bounds.\n     bytes.copy_within(0..4, 10);\n }\n #[test]\n #[should_panic(expected = \"src end is before src start\")]\n-#[cfg(not(miri))]\n+#[cfg(not(miri))] // Miri does not support panics\n fn test_copy_within_panics_src_inverted() {\n     let mut bytes = *b\"Hello, World!\";\n     // 2 is greater than 1, so this range is invalid."}, {"sha": "09aae4583482f83e41bd6574e453fedaf0500c60", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fecb6d97d0b548a2b3d23f30f384b13d4a9251e/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=0fecb6d97d0b548a2b3d23f30f384b13d4a9251e", "patch": "@@ -1,5 +1,3 @@\n-#![cfg(not(miri))]\n-\n use core::time::Duration;\n \n #[test]\n@@ -109,12 +107,14 @@ fn checked_sub() {\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn sub_bad1() {\n     let _ = Duration::new(0, 0) - Duration::new(0, 1);\n }\n \n #[test]\n #[should_panic]\n+#[cfg(not(miri))] // Miri does not support panics\n fn sub_bad2() {\n     let _ = Duration::new(0, 0) - Duration::new(1, 0);\n }"}]}