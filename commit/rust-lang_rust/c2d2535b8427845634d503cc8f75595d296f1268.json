{"sha": "c2d2535b8427845634d503cc8f75595d296f1268", "node_id": "C_kwDOAAsO6NoAKGMyZDI1MzViODQyNzg0NTYzNGQ1MDNjYzhmNzU1OTVkMjk2ZjEyNjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-23T02:29:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-23T02:29:16Z"}, "message": "Rollup merge of #101664 - mejrs:similarity, r=fee1-dead\n\nNote if mismatched types have a similar name\n\nIf users get a type error between similarly named types, it will point out that these are actually different types, and where they were defined.", "tree": {"sha": "1b48523916436b22e318f5b383a60aff390425cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b48523916436b22e318f5b383a60aff390425cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d2535b8427845634d503cc8f75595d296f1268", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjLRn8CRBK7hj4Ov3rIwAADvYIAAmofqsyqWJ9dEICcY7uEbL7\nf9XuZWohZYNefaG/99Z68DR36HHeNGZdC8Hn8TWsep1qUWczi8P29a2Hl9ruegFy\nwx6nshzC5Xt75pNNeHBPX2A7VR5wLwmijZ2Y3Al5QgUv3E/uYWI+J4qSURTRHo+k\nbW5Txqs/5ozotDR365HOARMHhyoKNt4Z7AbZpQygAbN3mxFjJHszHta3HxasSG9v\n+dvUe41N5G5PzZRlJzA6vd/xlWWAwquIQqg88AsMoFqGvFhxwaAsP+ORClM3jqOh\nGRlT3CqiM7af011q9CRgIGXsgDAnmWcahVneQFeU3QofLYnX1yrmCIn2nv+0WSA=\n=EU6D\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b48523916436b22e318f5b383a60aff390425cd\nparent 5d7937de8cfeba357136bcd8b960f3d3984fe19a\nparent c65866000e07270817465f3cbb8b1d01ecdb9a20\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1663900156 +0200\ncommitter GitHub <noreply@github.com> 1663900156 +0200\n\nRollup merge of #101664 - mejrs:similarity, r=fee1-dead\n\nNote if mismatched types have a similar name\n\nIf users get a type error between similarly named types, it will point out that these are actually different types, and where they were defined.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d2535b8427845634d503cc8f75595d296f1268", "html_url": "https://github.com/rust-lang/rust/commit/c2d2535b8427845634d503cc8f75595d296f1268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d2535b8427845634d503cc8f75595d296f1268/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d7937de8cfeba357136bcd8b960f3d3984fe19a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7937de8cfeba357136bcd8b960f3d3984fe19a", "html_url": "https://github.com/rust-lang/rust/commit/5d7937de8cfeba357136bcd8b960f3d3984fe19a"}, {"sha": "c65866000e07270817465f3cbb8b1d01ecdb9a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/c65866000e07270817465f3cbb8b1d01ecdb9a20", "html_url": "https://github.com/rust-lang/rust/commit/c65866000e07270817465f3cbb8b1d01ecdb9a20"}], "stats": {"total": 279, "additions": 274, "deletions": 5}, "files": [{"sha": "82099d9e3f345c759f0acb26b846e5b18b418742", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 111, "deletions": 4, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -51,6 +51,7 @@ use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePa\n \n use crate::infer;\n use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n+use crate::infer::ExpectedFound;\n use crate::traits::error_reporting::report_object_safety_error;\n use crate::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n@@ -1653,8 +1654,114 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 ),\n                 Mismatch::Fixed(s) => (s.into(), s.into(), None),\n             };\n-            match (&terr, expected == found) {\n-                (TypeError::Sorts(values), extra) => {\n+\n+            enum Similar<'tcx> {\n+                Adts { expected: ty::AdtDef<'tcx>, found: ty::AdtDef<'tcx> },\n+                PrimitiveFound { expected: ty::AdtDef<'tcx>, found: Ty<'tcx> },\n+                PrimitiveExpected { expected: Ty<'tcx>, found: ty::AdtDef<'tcx> },\n+            }\n+\n+            let similarity = |ExpectedFound { expected, found }: ExpectedFound<Ty<'tcx>>| {\n+                if let ty::Adt(expected, _) = expected.kind() && let Some(primitive) = found.primitive_symbol() {\n+                    let path = self.tcx.def_path(expected.did()).data;\n+                    let name = path.last().unwrap().data.get_opt_name();\n+                    if name == Some(primitive) {\n+                        return Some(Similar::PrimitiveFound { expected: *expected, found });\n+                    }\n+                } else if let Some(primitive) = expected.primitive_symbol() && let ty::Adt(found, _) = found.kind() {\n+                    let path = self.tcx.def_path(found.did()).data;\n+                    let name = path.last().unwrap().data.get_opt_name();\n+                    if name == Some(primitive) {\n+                        return Some(Similar::PrimitiveExpected { expected, found: *found });\n+                    }\n+                } else if let ty::Adt(expected, _) = expected.kind() && let ty::Adt(found, _) = found.kind() {\n+                    if !expected.did().is_local() && expected.did().krate == found.did().krate {\n+                        // Most likely types from different versions of the same crate\n+                        // are in play, in which case this message isn't so helpful.\n+                        // A \"perhaps two different versions...\" error is already emitted for that.\n+                        return None;\n+                    }\n+                    let f_path = self.tcx.def_path(found.did()).data;\n+                    let e_path = self.tcx.def_path(expected.did()).data;\n+\n+                    if let (Some(e_last), Some(f_last)) = (e_path.last(), f_path.last()) && e_last ==  f_last {\n+                        return Some(Similar::Adts{expected: *expected, found: *found});\n+                    }\n+                }\n+                None\n+            };\n+\n+            match terr {\n+                // If two types mismatch but have similar names, mention that specifically.\n+                TypeError::Sorts(values) if let Some(s) = similarity(values) => {\n+                    let diagnose_primitive =\n+                        |prim: Ty<'tcx>,\n+                         shadow: Ty<'tcx>,\n+                         defid: DefId,\n+                         diagnostic: &mut Diagnostic| {\n+                            let name = shadow.sort_string(self.tcx);\n+                            diagnostic.note(format!(\n+                            \"{prim} and {name} have similar names, but are actually distinct types\"\n+                        ));\n+                            diagnostic\n+                                .note(format!(\"{prim} is a primitive defined by the language\"));\n+                            let def_span = self.tcx.def_span(defid);\n+                            let msg = if defid.is_local() {\n+                                format!(\"{name} is defined in the current crate\")\n+                            } else {\n+                                let crate_name = self.tcx.crate_name(defid.krate);\n+                                format!(\"{name} is defined in crate `{crate_name}\")\n+                            };\n+                            diagnostic.span_note(def_span, msg);\n+                        };\n+\n+                    let diagnose_adts =\n+                        |expected_adt : ty::AdtDef<'tcx>,\n+                         found_adt: ty::AdtDef<'tcx>,\n+                         diagnostic: &mut Diagnostic| {\n+                            let found_name = values.found.sort_string(self.tcx);\n+                            let expected_name = values.expected.sort_string(self.tcx);\n+\n+                            let found_defid = found_adt.did();\n+                            let expected_defid = expected_adt.did();\n+\n+                            diagnostic.note(format!(\"{found_name} and {expected_name} have similar names, but are actually distinct types\"));\n+                            for (defid, name) in\n+                                [(found_defid, found_name), (expected_defid, expected_name)]\n+                            {\n+                                let def_span = self.tcx.def_span(defid);\n+\n+                                let msg = if found_defid.is_local() && expected_defid.is_local() {\n+                                    let module = self\n+                                        .tcx\n+                                        .parent_module_from_def_id(defid.expect_local())\n+                                        .to_def_id();\n+                                    let module_name = self.tcx.def_path(module).to_string_no_crate_verbose();\n+                                    format!(\"{name} is defined in module `crate{module_name}` of the current crate\")\n+                                } else if defid.is_local() {\n+                                    format!(\"{name} is defined in the current crate\")\n+                                } else {\n+                                    let crate_name = self.tcx.crate_name(defid.krate);\n+                                    format!(\"{name} is defined in crate `{crate_name}`\")\n+                                };\n+                                diagnostic.span_note(def_span, msg);\n+                            }\n+                        };\n+\n+                    match s {\n+                        Similar::Adts{expected, found} => {\n+                            diagnose_adts(expected, found, diag)\n+                        }\n+                        Similar::PrimitiveFound{expected, found: prim} => {\n+                            diagnose_primitive(prim, values.expected, expected.did(), diag)\n+                        }\n+                        Similar::PrimitiveExpected{expected: prim, found} => {\n+                            diagnose_primitive(prim, values.found, found.did(), diag)\n+                        }\n+                    }\n+                }\n+                TypeError::Sorts(values) => {\n+                    let extra = expected == found;\n                     let sort_string = |ty: Ty<'tcx>| match (extra, ty.kind()) {\n                         (true, ty::Opaque(def_id, _)) => {\n                             let sm = self.tcx.sess.source_map();\n@@ -1707,10 +1814,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         );\n                     }\n                 }\n-                (TypeError::ObjectUnsafeCoercion(_), _) => {\n+                TypeError::ObjectUnsafeCoercion(_) => {\n                     diag.note_unsuccessful_coercion(found, expected);\n                 }\n-                (_, _) => {\n+                _ => {\n                     debug!(\n                         \"note_type_err: exp_found={:?}, expected={:?} found={:?}\",\n                         exp_found, expected, found"}, {"sha": "909a597e22135add6f36fc08c2f4467bc50f48b9", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -20,6 +20,7 @@\n #![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_chains)]\n #![cfg_attr(bootstrap, feature(let_else))]\n+#![feature(if_let_guard)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(try_blocks)]"}, {"sha": "e773b3032aab83d4bce4fd3d54017f81b75f43ae", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n@@ -2207,6 +2207,35 @@ impl<'tcx> Ty<'tcx> {\n             }\n         }\n     }\n+\n+    // If `self` is a primitive, return its [`Symbol`].\n+    pub fn primitive_symbol(self) -> Option<Symbol> {\n+        match self.kind() {\n+            ty::Bool => Some(sym::bool),\n+            ty::Char => Some(sym::char),\n+            ty::Float(f) => match f {\n+                ty::FloatTy::F32 => Some(sym::f32),\n+                ty::FloatTy::F64 => Some(sym::f64),\n+            },\n+            ty::Int(f) => match f {\n+                ty::IntTy::Isize => Some(sym::isize),\n+                ty::IntTy::I8 => Some(sym::i8),\n+                ty::IntTy::I16 => Some(sym::i16),\n+                ty::IntTy::I32 => Some(sym::i32),\n+                ty::IntTy::I64 => Some(sym::i64),\n+                ty::IntTy::I128 => Some(sym::i128),\n+            },\n+            ty::Uint(f) => match f {\n+                ty::UintTy::Usize => Some(sym::usize),\n+                ty::UintTy::U8 => Some(sym::u8),\n+                ty::UintTy::U16 => Some(sym::u16),\n+                ty::UintTy::U32 => Some(sym::u32),\n+                ty::UintTy::U64 => Some(sym::u64),\n+                ty::UintTy::U128 => Some(sym::u128),\n+            },\n+            _ => None,\n+        }\n+    }\n }\n \n /// Extra information about why we ended up with a particular variance."}, {"sha": "a8f23f81dea025b7d690a857836eac842052d585", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name2.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name2.stderr?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -5,6 +5,18 @@ LL | fn bar(x: x::Foo) -> y::Foo {\n    |                      ------ expected `y::Foo` because of return type\n LL |     return x;\n    |            ^ expected enum `y::Foo`, found enum `x::Foo`\n+   |\n+   = note: enum `x::Foo` and enum `y::Foo` have similar names, but are actually distinct types\n+note: enum `x::Foo` is defined in module `crate::x` of the current crate\n+  --> $DIR/fully-qualified-type-name2.rs:4:5\n+   |\n+LL |     pub enum Foo { }\n+   |     ^^^^^^^^^^^^\n+note: enum `y::Foo` is defined in module `crate::y` of the current crate\n+  --> $DIR/fully-qualified-type-name2.rs:8:5\n+   |\n+LL |     pub enum Foo { }\n+   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "61550b887552065dd161ab16c888587d1235994f", "filename": "src/test/ui/mismatched_types/show_module.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.rs?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -0,0 +1,18 @@\n+pub mod blah {\n+    pub mod baz {\n+        pub struct Foo;\n+    }\n+}\n+\n+pub mod meh {\n+    pub struct Foo;\n+}\n+\n+pub type Foo = blah::baz::Foo;\n+\n+fn foo() -> Foo {\n+    meh::Foo\n+    //~^ ERROR mismatched types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "5e48e0955aae94e17626e04255a9771a9ec340d1", "filename": "src/test/ui/mismatched_types/show_module.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.stderr?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/show_module.rs:14:5\n+   |\n+LL | fn foo() -> Foo {\n+   |             --- expected `baz::Foo` because of return type\n+LL |     meh::Foo\n+   |     ^^^^^^^^ expected struct `baz::Foo`, found struct `meh::Foo`\n+   |\n+   = note: struct `meh::Foo` and struct `baz::Foo` have similar names, but are actually distinct types\n+note: struct `meh::Foo` is defined in module `crate::meh` of the current crate\n+  --> $DIR/show_module.rs:8:5\n+   |\n+LL |     pub struct Foo;\n+   |     ^^^^^^^^^^^^^^\n+note: struct `baz::Foo` is defined in module `crate::blah::baz` of the current crate\n+  --> $DIR/show_module.rs:3:9\n+   |\n+LL |         pub struct Foo;\n+   |         ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "4b9157f39bf4894d78a0f5f3bbd48d4bbd1129ce", "filename": "src/test/ui/mismatched_types/similar_paths.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.rs?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -0,0 +1,11 @@\n+enum Option<T> {\n+    Some(T),\n+    None,\n+}\n+\n+pub fn foo() -> Option<u8> {\n+    Some(42_u8)\n+    //~^ ERROR mismatched types [E0308]\n+}\n+\n+fn main() {}"}, {"sha": "e65ae58d4ce96ab55d5db11fc6c64c0d9b5de25c", "filename": "src/test/ui/mismatched_types/similar_paths.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/similar_paths.rs:7:5\n+   |\n+LL | pub fn foo() -> Option<u8> {\n+   |                 ---------- expected `Option<u8>` because of return type\n+LL |     Some(42_u8)\n+   |     ^^^^^^^^^^^ expected enum `Option`, found enum `std::option::Option`\n+   |\n+   = note: enum `std::option::Option` and enum `Option` have similar names, but are actually distinct types\n+note: enum `std::option::Option` is defined in crate `core`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL | pub enum Option<T> {\n+   | ^^^^^^^^^^^^^^^^^^\n+note: enum `Option` is defined in the current crate\n+  --> $DIR/similar_paths.rs:1:1\n+   |\n+LL | enum Option<T> {\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8f5b7cce46908abcdb36141f672126a73e01862d", "filename": "src/test/ui/mismatched_types/similar_paths_primitive.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.rs?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -0,0 +1,10 @@\n+#![allow(non_camel_case_types)]\n+\n+struct bool;\n+\n+fn foo(_: bool) {}\n+\n+fn main() {\n+    foo(true);\n+    //~^ ERROR mismatched types [E0308]\n+}"}, {"sha": "8a2f73945e84184d0d00e9e1e478279b15631966", "filename": "src/test/ui/mismatched_types/similar_paths_primitive.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths_primitive.stderr?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/similar_paths_primitive.rs:8:9\n+   |\n+LL |     foo(true);\n+   |     --- ^^^^ expected struct `bool`, found `bool`\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: bool and struct `bool` have similar names, but are actually distinct types\n+   = note: bool is a primitive defined by the language\n+note: struct `bool` is defined in the current crate\n+  --> $DIR/similar_paths_primitive.rs:3:1\n+   |\n+LL | struct bool;\n+   | ^^^^^^^^^^^\n+note: function defined here\n+  --> $DIR/similar_paths_primitive.rs:5:4\n+   |\n+LL | fn foo(_: bool) {}\n+   |    ^^^ -------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "fcafd315ebf5450e5f0ea68e6281a6d52969bf46", "filename": "src/test/ui/type/type-mismatch-same-crate-name.stderr", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2d2535b8427845634d503cc8f75595d296f1268/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr?ref=c2d2535b8427845634d503cc8f75595d296f1268", "patch": "@@ -6,6 +6,17 @@ LL |         a::try_foo(foo2);\n    |         |\n    |         arguments to this function are incorrect\n    |\n+   = note: struct `main::a::Foo` and struct `main::a::Foo` have similar names, but are actually distinct types\n+note: struct `main::a::Foo` is defined in crate `crate_a2`\n+  --> $DIR/auxiliary/crate_a2.rs:1:1\n+   |\n+LL | pub struct Foo;\n+   | ^^^^^^^^^^^^^^\n+note: struct `main::a::Foo` is defined in crate `crate_a1`\n+  --> $DIR/auxiliary/crate_a1.rs:1:1\n+   |\n+LL | pub struct Foo;\n+   | ^^^^^^^^^^^^^^\n    = note: perhaps two different versions of crate `crate_a1` are being used?\n note: function defined here\n   --> $DIR/auxiliary/crate_a1.rs:10:8"}]}