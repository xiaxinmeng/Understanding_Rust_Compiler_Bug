{"sha": "721f688eff3dd5db77c92e8a887f1ff7255ba0ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMWY2ODhlZmYzZGQ1ZGI3N2M5MmU4YTg4N2YxZmY3MjU1YmEwYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-27T15:21:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-27T15:21:22Z"}, "message": "Auto merge of #3577 - daxpedda:master, r=flip1995\n\nFix false positives for `implicit_return` and `empty_loop` on macro expansion.\n\nThis PR only fixes `implicit_return` and `empty_loop`.\nBut I suspect this bug may affect a lot of other lints.", "tree": {"sha": "b20abd113535816591409665924a16674ef31239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20abd113535816591409665924a16674ef31239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/721f688eff3dd5db77c92e8a887f1ff7255ba0ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/721f688eff3dd5db77c92e8a887f1ff7255ba0ab", "html_url": "https://github.com/rust-lang/rust/commit/721f688eff3dd5db77c92e8a887f1ff7255ba0ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/721f688eff3dd5db77c92e8a887f1ff7255ba0ab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44ffda7e76e8c801684da81daecd6e783207fb69", "url": "https://api.github.com/repos/rust-lang/rust/commits/44ffda7e76e8c801684da81daecd6e783207fb69", "html_url": "https://github.com/rust-lang/rust/commit/44ffda7e76e8c801684da81daecd6e783207fb69"}, {"sha": "2d96ef1315ebf933be79533c6c39ec2e3d7d1b85", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d96ef1315ebf933be79533c6c39ec2e3d7d1b85", "html_url": "https://github.com/rust-lang/rust/commit/2d96ef1315ebf933be79533c6c39ec2e3d7d1b85"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "dc1869ae04efab29dea04a1623909b2e8a0e192a", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/721f688eff3dd5db77c92e8a887f1ff7255ba0ab/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721f688eff3dd5db77c92e8a887f1ff7255ba0ab/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=721f688eff3dd5db77c92e8a887f1ff7255ba0ab", "patch": "@@ -12,7 +12,7 @@ use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n use crate::rustc_errors::Applicability;\n use crate::syntax::{ast::NodeId, source_map::Span};\n-use crate::utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::{in_macro, snippet_opt, span_lint_and_then};\n \n /// **What it does:** Checks for missing return statements at the end of a block.\n ///\n@@ -116,14 +116,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         _: FnKind<'tcx>,\n         _: &'tcx FnDecl,\n         body: &'tcx Body,\n-        _: Span,\n+        span: Span,\n         _: NodeId,\n     ) {\n         let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         // checking return type through MIR, HIR is not able to determine inferred closure return types\n-        if !mir.return_ty().is_unit() {\n+        // make sure it's not a macro\n+        if !mir.return_ty().is_unit() && !in_macro(span) {\n             Self::expr_match(cx, &body.value);\n         }\n     }"}, {"sha": "8664061fb7a942c1d2a4ca2f6387fa9bfd0ffd0f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/721f688eff3dd5db77c92e8a887f1ff7255ba0ab/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721f688eff3dd5db77c92e8a887f1ff7255ba0ab/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=721f688eff3dd5db77c92e8a887f1ff7255ba0ab", "patch": "@@ -478,6 +478,11 @@ impl LintPass for Pass {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        // we don't want to check expanded macros\n+        if in_macro(expr.span) {\n+            return;\n+        }\n+\n         if let Some((pat, arg, body)) = higher::for_loop(expr) {\n             check_for_loop(cx, pat, arg, body, expr);\n         }"}]}