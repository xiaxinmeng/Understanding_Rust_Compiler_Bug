{"sha": "97303703eec8e80003b4ffe729ad4df3ded1445c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MzAzNzAzZWVjOGU4MDAwM2I0ZmZlNzI5YWQ0ZGYzZGVkMTQ0NWM=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2013-04-02T07:40:57Z"}, "committer": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2013-04-16T22:34:25Z"}, "message": "Allow casting to mutable trait objects.", "tree": {"sha": "b17ab368fc8c2f76ed901d61a5dc045c14ce4367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b17ab368fc8c2f76ed901d61a5dc045c14ce4367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97303703eec8e80003b4ffe729ad4df3ded1445c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97303703eec8e80003b4ffe729ad4df3ded1445c", "html_url": "https://github.com/rust-lang/rust/commit/97303703eec8e80003b4ffe729ad4df3ded1445c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97303703eec8e80003b4ffe729ad4df3ded1445c/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e087bf310e7e7911bf05efa36a2cdb57855a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e087bf310e7e7911bf05efa36a2cdb57855a4e", "html_url": "https://github.com/rust-lang/rust/commit/07e087bf310e7e7911bf05efa36a2cdb57855a4e"}], "stats": {"total": 227, "additions": 162, "deletions": 65}, "files": [{"sha": "41ebf14a9a8bc2eb58bb85684f7d629796504fc5", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -313,8 +313,9 @@ fn parse_ty(st: @mut PState, conv: conv_did) -> ty::t {\n         let def = parse_def(st, NominalType, conv);\n         let substs = parse_substs(st, conv);\n         let store = parse_trait_store(st);\n+        let mt = parse_mutability(st);\n         assert!(next(st) == ']');\n-        return ty::mk_trait(st.tcx, def, substs, store);\n+        return ty::mk_trait(st.tcx, def, substs, store, mt);\n       }\n       'p' => {\n         let did = parse_def(st, TypeParameter, conv);\n@@ -396,13 +397,16 @@ fn parse_ty(st: @mut PState, conv: conv_did) -> ty::t {\n     }\n }\n \n-fn parse_mt(st: @mut PState, conv: conv_did) -> ty::mt {\n-    let mut m;\n+fn parse_mutability(st: @mut PState) -> ast::mutability {\n     match peek(st) {\n-      'm' => { next(st); m = ast::m_mutbl; }\n-      '?' => { next(st); m = ast::m_const; }\n-      _ => { m = ast::m_imm; }\n+      'm' => { next(st); ast::m_mutbl }\n+      '?' => { next(st); ast::m_const }\n+      _ => { ast::m_imm }\n     }\n+}\n+\n+fn parse_mt(st: @mut PState, conv: conv_did) -> ty::mt {\n+    let m = parse_mutability(st);\n     ty::mt { ty: parse_ty(st, conv), mutbl: m }\n }\n "}, {"sha": "a9a07d1b41d9dc6c9b81e66b32c9472af3203601", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -22,6 +22,7 @@ use core::io;\n use core::uint;\n use core::vec;\n use syntax::abi::AbiSet;\n+use syntax::ast;\n use syntax::ast::*;\n use syntax::diagnostic::span_handler;\n use syntax::print::pprust::*;\n@@ -113,12 +114,17 @@ pub fn enc_ty(w: @io::Writer, cx: @ctxt, t: ty::t) {\n       }\n     }\n }\n-fn enc_mt(w: @io::Writer, cx: @ctxt, mt: ty::mt) {\n-    match mt.mutbl {\n+\n+fn enc_mutability(w: @io::Writer, mt: ast::mutability) {\n+    match mt {\n       m_imm => (),\n       m_mutbl => w.write_char('m'),\n       m_const => w.write_char('?')\n     }\n+}\n+\n+fn enc_mt(w: @io::Writer, cx: @ctxt, mt: ty::mt) {\n+    enc_mutability(w, mt.mutbl);\n     enc_ty(w, cx, mt.ty);\n }\n \n@@ -269,12 +275,13 @@ fn enc_sty(w: @io::Writer, cx: @ctxt, +st: ty::sty) {\n         enc_substs(w, cx, (*substs));\n         w.write_char(']');\n       }\n-      ty::ty_trait(def, ref substs, store) => {\n+      ty::ty_trait(def, ref substs, store, mt) => {\n         w.write_str(&\"x[\");\n         w.write_str((cx.ds)(def));\n         w.write_char('|');\n         enc_substs(w, cx, (*substs));\n         enc_trait_store(w, cx, store);\n+        enc_mutability(w, mt);\n         w.write_char(']');\n       }\n       ty::ty_tup(ts) => {"}, {"sha": "59ae4812f277875b52d285ab8d837bf5761f0457", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -589,7 +589,7 @@ pub fn check_cast_for_escaping_regions(\n pub fn check_kind_bounds_of_cast(cx: Context, source: @expr, target: @expr) {\n     let target_ty = ty::expr_ty(cx.tcx, target);\n     match ty::get(target_ty).sty {\n-        ty::ty_trait(_, _, ty::UniqTraitStore) => {\n+        ty::ty_trait(_, _, ty::UniqTraitStore, _) => {\n             let source_ty = ty::expr_ty(cx.tcx, source);\n             if !ty::type_is_owned(cx.tcx, source_ty) {\n                 cx.tcx.sess.span_err("}, {"sha": "c10086aa56c928c0d3ca894e46dcda851ab1f881", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -671,7 +671,7 @@ fn create_ty(cx: @CrateContext, t: ty::t, span: span)\n         ty::ty_closure(ref _closurety) => {\n             cx.sess.span_bug(span, ~\"debuginfo for closure NYI\")\n         },\n-        ty::ty_trait(_did, ref _substs, ref _vstore) => {\n+        ty::ty_trait(_did, ref _substs, ref _vstore, _) => {\n             cx.sess.span_bug(span, ~\"debuginfo for trait NYI\")\n         },\n         ty::ty_struct(did, ref substs) => {"}, {"sha": "e75e49f18f380dbef3b264b8357476fc95d06fb7", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -667,7 +667,7 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         }\n         ast::expr_cast(val, _) => {\n             match ty::get(node_id_type(bcx, expr.id)).sty {\n-                ty::ty_trait(_, _, store) => {\n+                ty::ty_trait(_, _, store, _) => {\n                     return meth::trans_trait_cast(bcx, val, expr.id, dest,\n                                                   store);\n                 }"}, {"sha": "51d4622d6a163382d7764ce7650aaae3f33475dc", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -551,11 +551,11 @@ pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       ty::ty_closure(_) => {\n         closure::make_closure_glue(bcx, v0, t, drop_ty)\n       }\n-      ty::ty_trait(_, _, ty::BoxTraitStore) => {\n+      ty::ty_trait(_, _, ty::BoxTraitStore, _) => {\n         let llbox = Load(bcx, GEPi(bcx, v0, [0u, 1u]));\n         decr_refcnt_maybe_free(bcx, llbox, ty::mk_opaque_box(ccx.tcx))\n       }\n-      ty::ty_trait(_, _, ty::UniqTraitStore) => {\n+      ty::ty_trait(_, _, ty::UniqTraitStore, _) => {\n         let lluniquevalue = GEPi(bcx, v0, [0, 1]);\n         let lltydesc = Load(bcx, GEPi(bcx, v0, [0, 2]));\n         call_tydesc_glue_full(bcx, lluniquevalue, lltydesc,\n@@ -617,12 +617,12 @@ pub fn make_take_glue(bcx: block, v: ValueRef, t: ty::t) {\n       ty::ty_closure(_) => {\n         closure::make_closure_glue(bcx, v, t, take_ty)\n       }\n-      ty::ty_trait(_, _, ty::BoxTraitStore) => {\n+      ty::ty_trait(_, _, ty::BoxTraitStore, _) => {\n         let llbox = Load(bcx, GEPi(bcx, v, [0u, 1u]));\n         incr_refcnt_of_boxed(bcx, llbox);\n         bcx\n       }\n-      ty::ty_trait(_, _, ty::UniqTraitStore) => {\n+      ty::ty_trait(_, _, ty::UniqTraitStore, _) => {\n         let llval = GEPi(bcx, v, [0, 1]);\n         let lltydesc = Load(bcx, GEPi(bcx, v, [0, 2]));\n         call_tydesc_glue_full(bcx, llval, lltydesc,"}, {"sha": "7aab6367d405aebbd1afac030773f9e84b8cbbd5", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -303,7 +303,7 @@ pub fn normalize_for_monomorphization(tcx: ty::ctxt,\n         ty::ty_closure(ref fty) => {\n             Some(normalized_closure_ty(tcx, fty.sigil))\n         }\n-        ty::ty_trait(_, _, ref store) => {\n+        ty::ty_trait(_, _, ref store, _) => {\n             let sigil = match *store {\n                 ty::UniqTraitStore => ast::OwnedSigil,\n                 ty::BoxTraitStore => ast::ManagedSigil,"}, {"sha": "e62e19f636a4e8acfb44558badca0dc12853611d", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -323,7 +323,7 @@ pub impl Reflector {\n           }\n \n           // Miscallaneous extra types\n-          ty::ty_trait(_, _, _) => self.leaf(~\"trait\"),\n+          ty::ty_trait(_, _, _, _) => self.leaf(~\"trait\"),\n           ty::ty_infer(_) => self.leaf(~\"infer\"),\n           ty::ty_err => self.leaf(~\"err\"),\n           ty::ty_param(ref p) => {"}, {"sha": "b9e4bad42dd43472147f8a481f260d2c47cbb850", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -133,7 +133,7 @@ pub fn sizing_type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n \n         ty::ty_bare_fn(*) => T_ptr(T_i8()),\n         ty::ty_closure(*) => T_struct(~[T_ptr(T_i8()), T_ptr(T_i8())], false),\n-        ty::ty_trait(_, _, store) => T_opaque_trait(cx, store),\n+        ty::ty_trait(_, _, store, _) => T_opaque_trait(cx, store),\n \n         ty::ty_estr(ty::vstore_fixed(size)) => T_array(T_i8(), size),\n         ty::ty_evec(mt, ty::vstore_fixed(size)) => {\n@@ -249,7 +249,7 @@ pub fn type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n \n       ty::ty_bare_fn(_) => T_ptr(type_of_fn_from_ty(cx, t)),\n       ty::ty_closure(_) => T_fn_pair(cx, type_of_fn_from_ty(cx, t)),\n-      ty::ty_trait(_, _, store) => T_opaque_trait(cx, store),\n+      ty::ty_trait(_, _, store, _) => T_opaque_trait(cx, store),\n       ty::ty_type => T_ptr(cx.tydesc_type),\n       ty::ty_tup(*) => {\n           let repr = adt::represent_type(cx, t);"}, {"sha": "25e3ed0f400a85655711ea9efcf5d8dd45c8c686", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -216,7 +216,7 @@ pub fn type_needs_inner(cx: Context,\n                 ty::ty_bare_fn(*) |\n                 ty::ty_ptr(_) |\n                 ty::ty_rptr(_, _) |\n-                ty::ty_trait(_, _, _) => false,\n+                ty::ty_trait(_, _, _, _) => false,\n \n               ty::ty_enum(did, ref substs) => {\n                 if list::find(enums_seen, |id| *id == did).is_none() {"}, {"sha": "4212b03c41653366a3c27f84f9eaef4260bb0e19", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -532,7 +532,7 @@ pub enum sty {\n     ty_rptr(Region, mt),\n     ty_bare_fn(BareFnTy),\n     ty_closure(ClosureTy),\n-    ty_trait(def_id, substs, TraitStore),\n+    ty_trait(def_id, substs, TraitStore, ast::mutability),\n     ty_struct(def_id, substs),\n     ty_tup(~[t]),\n \n@@ -946,7 +946,7 @@ fn mk_t_with_id(cx: ctxt, +st: sty, o_def_id: Option<ast::def_id>) -> t {\n       &ty_infer(_) => flags |= needs_infer as uint,\n       &ty_self(_) => flags |= has_self as uint,\n       &ty_enum(_, ref substs) | &ty_struct(_, ref substs) |\n-      &ty_trait(_, ref substs, _) => {\n+      &ty_trait(_, ref substs, _, _) => {\n         flags |= sflags(substs);\n       }\n       &ty_box(ref m) | &ty_uniq(ref m) | &ty_evec(ref m, _) |\n@@ -1115,10 +1115,11 @@ pub fn mk_ctor_fn(cx: ctxt, input_tys: &[ty::t], output: ty::t) -> t {\n pub fn mk_trait(cx: ctxt,\n                 did: ast::def_id,\n                 +substs: substs,\n-                store: TraitStore)\n+                store: TraitStore,\n+                mutability: ast::mutability)\n              -> t {\n     // take a copy of substs so that we own the vectors inside\n-    mk_t(cx, ty_trait(did, substs, store))\n+    mk_t(cx, ty_trait(did, substs, store, mutability))\n }\n \n pub fn mk_struct(cx: ctxt, struct_id: ast::def_id, +substs: substs) -> t {\n@@ -1214,7 +1215,7 @@ pub fn maybe_walk_ty(ty: t, f: &fn(t) -> bool) {\n         maybe_walk_ty(tm.ty, f);\n       }\n       ty_enum(_, ref substs) | ty_struct(_, ref substs) |\n-      ty_trait(_, ref substs, _) => {\n+      ty_trait(_, ref substs, _, _) => {\n         for (*substs).tps.each |subty| { maybe_walk_ty(*subty, f); }\n       }\n       ty_tup(ref ts) => { for ts.each |tt| { maybe_walk_ty(*tt, f); } }\n@@ -1277,8 +1278,8 @@ fn fold_sty(sty: &sty, fldop: &fn(t) -> t) -> sty {\n         ty_enum(tid, ref substs) => {\n             ty_enum(tid, fold_substs(substs, fldop))\n         }\n-        ty_trait(did, ref substs, st) => {\n-            ty_trait(did, fold_substs(substs, fldop), st)\n+        ty_trait(did, ref substs, st, mutbl) => {\n+            ty_trait(did, fold_substs(substs, fldop), st, mutbl)\n         }\n         ty_tup(ref ts) => {\n             let new_ts = ts.map(|tt| fldop(*tt));\n@@ -1367,8 +1368,8 @@ pub fn fold_regions_and_ty(\n       ty_struct(def_id, ref substs) => {\n         ty::mk_struct(cx, def_id, fold_substs(substs, fldr, fldt))\n       }\n-      ty_trait(def_id, ref substs, st) => {\n-        ty::mk_trait(cx, def_id, fold_substs(substs, fldr, fldt), st)\n+      ty_trait(def_id, ref substs, st, mutbl) => {\n+        ty::mk_trait(cx, def_id, fold_substs(substs, fldr, fldt), st, mutbl)\n       }\n       ty_bare_fn(ref f) => {\n           ty::mk_bare_fn(cx, BareFnTy {sig: fold_sig(&f.sig, fldfnt),\n@@ -1911,16 +1912,19 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 TC_MANAGED + nonowned(tc_mt(cx, mt, cache))\n             }\n \n-            ty_trait(_, _, UniqTraitStore) => {\n+            ty_trait(_, _, UniqTraitStore, _) => {\n                 TC_OWNED_CLOSURE\n             }\n \n-            ty_trait(_, _, BoxTraitStore) => {\n-                TC_MANAGED\n+            ty_trait(_, _, BoxTraitStore, mutbl) => {\n+                match mutbl {\n+                    ast::m_mutbl => TC_MANAGED + TC_MUTABLE,\n+                    _ => TC_MANAGED\n+                }\n             }\n \n-            ty_trait(_, _, RegionTraitStore(r)) => {\n-                borrowed_contents(r, m_imm)\n+            ty_trait(_, _, RegionTraitStore(r), mutbl) => {\n+                borrowed_contents(r, mutbl)\n             }\n \n             ty_rptr(r, mt) => {\n@@ -2241,7 +2245,7 @@ pub fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n             false           // unsafe ptrs can always be NULL\n           }\n \n-          ty_trait(_, _, _) => {\n+          ty_trait(_, _, _, _) => {\n             false\n           }\n \n@@ -2385,7 +2389,7 @@ pub fn type_is_pod(cx: ctxt, ty: t) -> bool {\n       ty_box(_) | ty_uniq(_) | ty_closure(_) |\n       ty_estr(vstore_uniq) | ty_estr(vstore_box) |\n       ty_evec(_, vstore_uniq) | ty_evec(_, vstore_box) |\n-      ty_trait(_, _, _) | ty_rptr(_,_) | ty_opaque_box => result = false,\n+      ty_trait(_, _, _, _) | ty_rptr(_,_) | ty_opaque_box => result = false,\n       // Structural types\n       ty_enum(did, ref substs) => {\n         let variants = enum_variants(cx, did);\n@@ -2673,8 +2677,8 @@ impl to_bytes::IterBytes for sty {\n           ty_uniq(ref mt) =>\n           to_bytes::iter_bytes_2(&19u8, mt, lsb0, f),\n \n-          ty_trait(ref did, ref substs, ref v) =>\n-          to_bytes::iter_bytes_4(&20u8, did, substs, v, lsb0, f),\n+          ty_trait(ref did, ref substs, ref v, ref mutbl) =>\n+          to_bytes::iter_bytes_5(&20u8, did, substs, v, mutbl, lsb0, f),\n \n           ty_opaque_closure_ptr(ref ck) =>\n           to_bytes::iter_bytes_2(&21u8, ck, lsb0, f),\n@@ -3366,7 +3370,7 @@ pub fn ty_sort_str(cx: ctxt, t: t) -> ~str {\n       ty_rptr(_, _) => ~\"&-ptr\",\n       ty_bare_fn(_) => ~\"extern fn\",\n       ty_closure(_) => ~\"fn\",\n-      ty_trait(id, _, _) => fmt!(\"trait %s\", item_path_str(cx, id)),\n+      ty_trait(id, _, _, _) => fmt!(\"trait %s\", item_path_str(cx, id)),\n       ty_struct(id, _) => fmt!(\"struct %s\", item_path_str(cx, id)),\n       ty_tup(_) => ~\"tuple\",\n       ty_infer(TyVar(_)) => ~\"inferred type\",\n@@ -3679,7 +3683,7 @@ pub fn impl_trait_refs(cx: ctxt, id: ast::def_id) -> ~[@TraitRef] {\n \n pub fn ty_to_def_id(ty: t) -> Option<ast::def_id> {\n     match get(ty).sty {\n-      ty_trait(id, _, _) | ty_struct(id, _) | ty_enum(id, _) => Some(id),\n+      ty_trait(id, _, _, _) | ty_struct(id, _) | ty_enum(id, _) => Some(id),\n       _ => None\n     }\n }\n@@ -4413,7 +4417,7 @@ pub fn visitor_object_ty(tcx: ctxt) -> (@TraitRef, t) {\n     assert!(tcx.intrinsic_traits.contains_key(&ty_visitor_name));\n     let trait_ref = *tcx.intrinsic_traits.get(&ty_visitor_name);\n     (trait_ref,\n-     mk_trait(tcx, trait_ref.def_id, copy trait_ref.substs, BoxTraitStore))\n+     mk_trait(tcx, trait_ref.def_id, copy trait_ref.substs, BoxTraitStore, ast::m_imm))\n }\n \n // Local Variables:"}, {"sha": "9f6ab8704cbd6167b52c9fdff4d08e2917bf4cb3", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -277,9 +277,9 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n                 }\n                 return ty::mk_evec(tcx, mt, vst);\n             }\n-            ast::ty_path(path, id) if a_seq_ty.mutbl == ast::m_imm => {\n+            ast::ty_path(path, id) => {\n                 match tcx.def_map.find(&id) {\n-                    Some(&ast::def_prim_ty(ast::ty_str)) => {\n+                    Some(&ast::def_prim_ty(ast::ty_str)) if a_seq_ty.mutbl == ast::m_imm => {\n                         check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n                         return ty::mk_estr(tcx, vst);\n                     }\n@@ -305,7 +305,8 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n                         return ty::mk_trait(tcx,\n                                             result.def_id,\n                                             copy result.substs,\n-                                            trait_store);\n+                                            trait_store,\n+                                            a_seq_ty.mutbl);\n                     }\n                     _ => {}\n                 }"}, {"sha": "131cef1c7f2f0ae720efe12dfddc66a9d1f41bcd", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -291,7 +291,7 @@ pub impl<'self> LookupContext<'self> {\n                 ty_param(p) => {\n                     self.push_inherent_candidates_from_param(self_ty, p);\n                 }\n-                ty_trait(did, ref substs, store) => {\n+                ty_trait(did, ref substs, store, _) => {\n                     self.push_inherent_candidates_from_trait(\n                         self_ty, did, substs, store);\n                     self.push_inherent_impl_candidates_for_type(did);"}, {"sha": "dff794c548bd5c4d49a68e6e53b50a315d313bac", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -288,7 +288,7 @@ fn visit_expr(expr: @ast::expr, &&rcx: @mut Rcx, v: rvt) {\n             // explaining how it goes about doing that.\n             let target_ty = rcx.resolve_node_type(expr.id);\n             match ty::get(target_ty).sty {\n-                ty::ty_trait(_, _, ty::RegionTraitStore(trait_region)) => {\n+                ty::ty_trait(_, _, ty::RegionTraitStore(trait_region), _) => {\n                     let source_ty = rcx.fcx.expr_ty(source);\n                     constrain_regions_in_type(rcx, trait_region,\n                                               expr.span, source_ty);"}, {"sha": "cc7519c1db4ed13c08b616313e7fa51c326d80b9", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -141,10 +141,11 @@ fn fixup_substs(vcx: &VtableContext, location_info: &LocationInfo,\n     // use a dummy type just to package up the substs that need fixing up\n     let t = ty::mk_trait(tcx,\n                          id, substs,\n-                         ty::RegionTraitStore(ty::re_static));\n+                         ty::RegionTraitStore(ty::re_static),\n+                         ast::m_imm);\n     do fixup_ty(vcx, location_info, t, is_early).map |t_f| {\n         match ty::get(*t_f).sty {\n-          ty::ty_trait(_, ref substs_f, _) => (/*bad*/copy *substs_f),\n+          ty::ty_trait(_, ref substs_f, _, _) => (/*bad*/copy *substs_f),\n           _ => fail!(~\"t_f should be a trait\")\n         }\n     }\n@@ -544,14 +545,27 @@ pub fn early_resolve_expr(ex: @ast::expr,\n           debug!(\"vtable resolution on expr %s\", ex.repr(fcx.tcx()));\n           let target_ty = fcx.expr_ty(ex);\n           match ty::get(target_ty).sty {\n-              ty::ty_trait(target_def_id, ref target_substs, store) => {\n+              ty::ty_trait(target_def_id, ref target_substs, store, target_mutbl) => {\n+                  fn mutability_allowed(a_mutbl: ast::mutability,\n+                                        b_mutbl: ast::mutability) -> bool {\n+                      a_mutbl == b_mutbl ||\n+                      (a_mutbl == ast::m_mutbl && b_mutbl == ast::m_imm)\n+                  }\n                   // Look up vtables for the type we're casting to,\n                   // passing in the source and target type.  The source\n                   // must be a pointer type suitable to the object sigil,\n                   // e.g.: `@x as @Trait`, `&x as &Trait` or `~x as ~Trait`\n                   let ty = structurally_resolved_type(fcx, ex.span,\n                                                       fcx.expr_ty(src));\n                   match (&ty::get(ty).sty, store) {\n+                      (&ty::ty_box(mt), ty::BoxTraitStore) |\n+                      (&ty::ty_uniq(mt), ty::UniqTraitStore) |\n+                      (&ty::ty_rptr(_, mt), ty::RegionTraitStore(*))\n+                        if !mutability_allowed(mt.mutbl, target_mutbl) => {\n+                          fcx.tcx().sess.span_err(ex.span,\n+                                                  fmt!(\"types differ in mutability\"));\n+                      }\n+\n                       (&ty::ty_box(mt), ty::BoxTraitStore) |\n                       (&ty::ty_uniq(mt), ty::UniqTraitStore) |\n                       (&ty::ty_rptr(_, mt), ty::RegionTraitStore(*)) => {"}, {"sha": "2afe674db9c55d0e5b6b25ee687c0345c1e897c0", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -114,7 +114,7 @@ pub fn type_is_defined_in_local_crate(original_type: t) -> bool {\n     do ty::walk_ty(original_type) |t| {\n         match get(t).sty {\n             ty_enum(def_id, _) |\n-            ty_trait(def_id, _, _) |\n+            ty_trait(def_id, _, _, _) |\n             ty_struct(def_id, _) => {\n                 if def_id.crate == ast::local_crate {\n                     found_nominal = true;\n@@ -140,7 +140,7 @@ pub fn get_base_type_def_id(inference_context: @mut InferCtxt,\n             match get(base_type).sty {\n                 ty_enum(def_id, _) |\n                 ty_struct(def_id, _) |\n-                ty_trait(def_id, _, _) => {\n+                ty_trait(def_id, _, _, _) => {\n                     return Some(def_id);\n                 }\n                 _ => {"}, {"sha": "0bdf2842ccac36e34d4b9e5a1a1e7b3edf721cbf", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -525,13 +525,13 @@ pub fn super_tys<C:Combine>(\n           }\n       }\n \n-      (ty::ty_trait(a_id, ref a_substs, a_store),\n-       ty::ty_trait(b_id, ref b_substs, b_store))\n-      if a_id == b_id => {\n+      (ty::ty_trait(a_id, ref a_substs, a_store, a_mutbl),\n+       ty::ty_trait(b_id, ref b_substs, b_store, b_mutbl))\n+      if a_id == b_id && a_mutbl == b_mutbl => {\n           let trait_def = ty::lookup_trait_def(tcx, a_id);\n           do self.substs(&trait_def.generics, a_substs, b_substs).chain |substs| {\n               do self.trait_stores(ty::terr_trait, a_store, b_store).chain |s| {\n-                  Ok(ty::mk_trait(tcx, a_id, /*bad*/copy substs, s))\n+                  Ok(ty::mk_trait(tcx, a_id, /*bad*/copy substs, s, a_mutbl))\n               }\n           }\n       }"}, {"sha": "3cefe7646def291f5659ac0c7d7783c550846099", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -737,10 +737,11 @@ pub impl InferCtxt {\n         let dummy0 = ty::mk_trait(self.tcx,\n                                   trait_ref.def_id,\n                                   copy trait_ref.substs,\n-                                  ty::UniqTraitStore);\n+                                  ty::UniqTraitStore,\n+                                  ast::m_imm);\n         let dummy1 = self.resolve_type_vars_if_possible(dummy0);\n         match ty::get(dummy1).sty {\n-            ty::ty_trait(ref def_id, ref substs, _) => {\n+            ty::ty_trait(ref def_id, ref substs, _, _) => {\n                 ty::TraitRef {def_id: *def_id,\n                               substs: copy *substs}\n             }"}, {"sha": "c0c6fe2d9d3237c1f8994828f946d6aa3d84b081", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -224,16 +224,20 @@ pub fn region_to_str_space(cx: ctxt, prefix: &str, region: Region) -> ~str {\n     }\n }\n \n+fn mutability_to_str(m: ast::mutability) -> ~str {\n+    match m {\n+        ast::m_mutbl => ~\"mut \",\n+        ast::m_imm => ~\"\",\n+        ast::m_const => ~\"const \"\n+    }\n+}\n+\n pub fn mt_to_str(cx: ctxt, m: &mt) -> ~str {\n     mt_to_str_wrapped(cx, \"\", m, \"\")\n }\n \n pub fn mt_to_str_wrapped(cx: ctxt, before: &str, m: &mt, after: &str) -> ~str {\n-    let mstr = match m.mutbl {\n-      ast::m_mutbl => \"mut \",\n-      ast::m_imm => \"\",\n-      ast::m_const => \"const \"\n-    };\n+    let mstr = mutability_to_str(m.mutbl);\n     return fmt!(\"%s%s%s%s\", mstr, before, ty_to_str(cx, m.ty), after);\n }\n \n@@ -456,11 +460,11 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n         parameterized(cx, base, substs.self_r, substs.tps)\n       }\n-      ty_trait(did, ref substs, s) => {\n+      ty_trait(did, ref substs, s, mutbl) => {\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n         let ty = parameterized(cx, base, substs.self_r, substs.tps);\n-        fmt!(\"%s%s\", trait_store_to_str(cx, s), ty)\n+        fmt!(\"%s%s%s\", trait_store_to_str(cx, s), mutability_to_str(mutbl), ty)\n       }\n       ty_evec(ref mt, vs) => {\n         vstore_ty_to_str(cx, mt, vs)"}, {"sha": "1047a99577143d90c33967826793f224f021f2ca", "filename": "src/test/compile-fail/cast-immutable-mutable-trait.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Ftest%2Fcompile-fail%2Fcast-immutable-mutable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Ftest%2Fcompile-fail%2Fcast-immutable-mutable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-immutable-mutable-trait.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait T {\n+    fn foo(@mut self);\n+}\n+\n+struct S {\n+    unused: int\n+}\n+\n+impl T for S {\n+    fn foo(@mut self) {\n+    }\n+}\n+\n+fn main() {\n+    let s = @S { unused: 0 };\n+    let _s2 = s as @mut T; //~ error: types differ in mutability\n+    let _s3 = &s as &mut T; //~ error: types differ in mutability\n+}\n\\ No newline at end of file"}, {"sha": "633188b9a623bbdc200c5ff1257636dbddffc48e", "filename": "src/test/run-pass/cast-mutable-trait.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97303703eec8e80003b4ffe729ad4df3ded1445c/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs?ref=97303703eec8e80003b4ffe729ad4df3ded1445c", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait T {\n+    fn foo(@mut self);\n+}\n+\n+struct S {\n+    unused: int\n+}\n+\n+impl T for S {\n+    fn foo(@mut self) {\n+    }\n+}\n+\n+fn bar(t: @mut T) {\n+    t.foo();\n+}\n+\n+fn main() {\n+    let s = @mut S { unused: 0 };\n+    let s2 = s as @mut T;\n+    s2.foo();\n+    bar(s2);\n+    bar(s as @mut T);\n+}\n\\ No newline at end of file"}]}