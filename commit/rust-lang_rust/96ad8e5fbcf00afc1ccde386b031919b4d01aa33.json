{"sha": "96ad8e5fbcf00afc1ccde386b031919b4d01aa33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YWQ4ZTVmYmNmMDBhZmMxY2NkZTM4NmIwMzE5MTliNGQwMWFhMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-28T03:41:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-28T03:41:29Z"}, "message": "Auto merge of #65013 - petertodd:2019-maybeuninit-debug, r=sfackler\n\nImplement Debug for MaybeUninit\n\nPrecedent: `UnsafeCell` implements `Debug` even though it can't actually display the value. I noticed this omission while writing the following:\n\n```\n#[derive(Debug)]\n pub struct SliceInitializer<'a, T> {\n    marker: PhantomData<&'a mut T>,\n    uninit: &'a mut [MaybeUninit<T>],\n    written: usize,\n}\n```\n\n...which currently unergonomically fails to compile.\n\n`UnsafeCell` does require `T: Debug`. Because of things like the above I think it'd be better to leave that requirement off. In fact, I'd also suggest removing that requirement for `UnsafeCell` too, which again I noticed in some low-level real world code.", "tree": {"sha": "05a0a1c735455686eb7a2b43cde8ce6cfafbe72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05a0a1c735455686eb7a2b43cde8ce6cfafbe72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ad8e5fbcf00afc1ccde386b031919b4d01aa33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ad8e5fbcf00afc1ccde386b031919b4d01aa33", "html_url": "https://github.com/rust-lang/rust/commit/96ad8e5fbcf00afc1ccde386b031919b4d01aa33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ad8e5fbcf00afc1ccde386b031919b4d01aa33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f93dedbe8218b4936002b72dbed6f296979c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f93dedbe8218b4936002b72dbed6f296979c26", "html_url": "https://github.com/rust-lang/rust/commit/42f93dedbe8218b4936002b72dbed6f296979c26"}, {"sha": "8fad66b43151c5c1bbb7933e54051ae8c11fe595", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fad66b43151c5c1bbb7933e54051ae8c11fe595", "html_url": "https://github.com/rust-lang/rust/commit/8fad66b43151c5c1bbb7933e54051ae8c11fe595"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "6661df2ae0d8414c4a17e27102fc3b4d7acf345f", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96ad8e5fbcf00afc1ccde386b031919b4d01aa33/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ad8e5fbcf00afc1ccde386b031919b4d01aa33/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=96ad8e5fbcf00afc1ccde386b031919b4d01aa33", "patch": "@@ -1,3 +1,5 @@\n+use crate::any::type_name;\n+use crate::fmt;\n use crate::intrinsics;\n use crate::mem::ManuallyDrop;\n \n@@ -232,6 +234,13 @@ impl<T: Copy> Clone for MaybeUninit<T> {\n     }\n }\n \n+#[stable(feature = \"maybe_uninit_debug\", since = \"1.41.0\")]\n+impl<T> fmt::Debug for MaybeUninit<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.pad(type_name::<Self>())\n+    }\n+}\n+\n impl<T> MaybeUninit<T> {\n     /// Creates a new `MaybeUninit<T>` initialized with the given value.\n     /// It is safe to call [`assume_init`] on the return value of this function."}]}