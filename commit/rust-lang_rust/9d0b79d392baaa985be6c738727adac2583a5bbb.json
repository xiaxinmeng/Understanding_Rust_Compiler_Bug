{"sha": "9d0b79d392baaa985be6c738727adac2583a5bbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMGI3OWQzOTJiYWFhOTg1YmU2YzczODcyN2FkYWMyNTgzYTViYmI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-09-30T07:16:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-30T07:16:33Z"}, "message": "Merge pull request #3223 from mikerite/unnecessary_filter_map\n\nImplement unnecesary_filter_map lint", "tree": {"sha": "b4c66c8a621962a17782342e1ff8cfbe3879fcb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4c66c8a621962a17782342e1ff8cfbe3879fcb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d0b79d392baaa985be6c738727adac2583a5bbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbsHhRCRBK7hj4Ov3rIwAAdHIIABghhXPYj40zImuXHvicdXiI\nRpCZCS9EiC3Q7lAbCQ6k+WLf/+chPU6XtJVcJcQNwJ6EdiFWmc/nHNbmR/AcfJnG\nZmw5Zj0KiyT6uvOnFU0MGO/m0fgwpreJYE+rrBJPfgaS1XyW1mTDPrLfbNBsiyi5\nAVbpmAfLZqSitXiJUyYirWIXcb0CNr7vmaiLhqF+gvlauSjK4ECTD5jbTspceNN3\n+VddCM0CP4cdY+aeT0PP2B6/RheeCsH8OluY4WF4m8KVhDbVIh1KAvEesLRe7m9b\nJQppvJoFIrRidr5i3MU7labb1m0i3mRPj3rPx8NP4C51MewP8DHbXtcQciFf2/E=\n=TJ6M\n-----END PGP SIGNATURE-----\n", "payload": "tree b4c66c8a621962a17782342e1ff8cfbe3879fcb4\nparent 37ba42b7bc0d3dc93eb8fa4d17edcd8303415afe\nparent 50133fbd3ae4b40f48287b7eb017ad8b27403133\nauthor Philipp Hansch <dev@phansch.net> 1538291793 +0100\ncommitter GitHub <noreply@github.com> 1538291793 +0100\n\nMerge pull request #3223 from mikerite/unnecessary_filter_map\n\nImplement unnecesary_filter_map lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0b79d392baaa985be6c738727adac2583a5bbb", "html_url": "https://github.com/rust-lang/rust/commit/9d0b79d392baaa985be6c738727adac2583a5bbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d0b79d392baaa985be6c738727adac2583a5bbb/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ba42b7bc0d3dc93eb8fa4d17edcd8303415afe", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ba42b7bc0d3dc93eb8fa4d17edcd8303415afe", "html_url": "https://github.com/rust-lang/rust/commit/37ba42b7bc0d3dc93eb8fa4d17edcd8303415afe"}, {"sha": "50133fbd3ae4b40f48287b7eb017ad8b27403133", "url": "https://api.github.com/repos/rust-lang/rust/commits/50133fbd3ae4b40f48287b7eb017ad8b27403133", "html_url": "https://github.com/rust-lang/rust/commit/50133fbd3ae4b40f48287b7eb017ad8b27403133"}], "stats": {"total": 258, "additions": 241, "deletions": 17}, "files": [{"sha": "c9bea1e8ef5ebe9e90d7838a5957c9782f577865", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -864,6 +864,7 @@ All notable changes to this project will be documented in this file.\n [`unit_arg`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unit_cmp\n [`unnecessary_cast`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_cast\n+[`unnecessary_filter_map`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_filter_map\n [`unnecessary_fold`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_fold\n [`unnecessary_mut_passed`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_mut_passed\n [`unnecessary_operation`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_operation"}, {"sha": "b8684b38631af0f3567e216253076dd3115cf837", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 278 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 279 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "9af4850b15c2cb72b111bf41500153cd94a22b92", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -614,6 +614,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         methods::SINGLE_CHAR_PATTERN,\n         methods::STRING_EXTEND_CHARS,\n         methods::TEMPORARY_CSTRING_AS_PTR,\n+        methods::UNNECESSARY_FILTER_MAP,\n         methods::UNNECESSARY_FOLD,\n         methods::USELESS_ASREF,\n         methods::WRONG_SELF_CONVENTION,\n@@ -829,6 +830,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         methods::CLONE_ON_COPY,\n         methods::FILTER_NEXT,\n         methods::SEARCH_IS_SOME,\n+        methods::UNNECESSARY_FILTER_MAP,\n         methods::USELESS_ASREF,\n         misc::SHORT_CIRCUIT_STATEMENT,\n         misc_early::REDUNDANT_CLOSURE_CALL,"}, {"sha": "62e308bb585817d079144a2f701b010705989881", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -103,9 +103,9 @@ fn check_fn_inner<'a, 'tcx>(\n     }\n \n     let mut bounds_lts = Vec::new();\n-    let types = generics.params.iter().filter_map(|param| match param.kind {\n-        GenericParamKind::Type { .. } => Some(param),\n-        GenericParamKind::Lifetime { .. } => None,\n+    let types = generics.params.iter().filter(|param| match param.kind {\n+        GenericParamKind::Type { .. } => true,\n+        GenericParamKind::Lifetime { .. } => false,\n     });\n     for typ in types {\n         for bound in &typ.bounds {"}, {"sha": "2524152a1202f6617edc4bcfec46f297c15d0b92", "filename": "clippy_lints/src/methods/mod.rs", "status": "renamed", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -20,6 +20,8 @@ use std::borrow::Cow;\n use std::fmt;\n use std::iter;\n \n+mod unnecessary_filter_map;\n+\n #[derive(Clone)]\n pub struct Pass;\n \n@@ -692,6 +694,27 @@ declare_clippy_lint! {\n     \"using `fold` when a more succinct alternative exists\"\n }\n \n+\n+/// **What it does:** Checks for `filter_map` calls which could be replaced by `filter` or `map`.\n+///\n+/// **Why is this bad?** Complexity\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// let _ = (0..3).filter_map(|x| if x > 2 { Some(x) } else { None });\n+/// ```\n+/// This could be written as:\n+/// ```rust\n+/// let _ = (0..3).filter(|&x| x > 2);\n+/// ```\n+declare_clippy_lint! {\n+    pub UNNECESSARY_FILTER_MAP,\n+    complexity,\n+    \"using `filter_map` when a more succinct alternative exists\"\n+}\n+\n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(\n@@ -725,7 +748,8 @@ impl LintPass for Pass {\n             STRING_EXTEND_CHARS,\n             ITER_CLONED_COLLECT,\n             USELESS_ASREF,\n-            UNNECESSARY_FOLD\n+            UNNECESSARY_FOLD,\n+            UNNECESSARY_FILTER_MAP\n         )\n     }\n }\n@@ -791,6 +815,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     lint_asref(cx, expr, \"as_mut\", arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"fold\"]) {\n                     lint_unnecessary_fold(cx, expr, arglists[0]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"filter_map\"]) {\n+                    unnecessary_filter_map::lint(cx, expr, arglists[0]);\n                 }\n \n                 lint_or_fun_call(cx, expr, *method_span, &method_call.ident.as_str(), args);", "previous_filename": "clippy_lints/src/methods.rs"}, {"sha": "0a3486df8bdb2d3f24ffe861bab2b3a4263ca001", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -0,0 +1,148 @@\n+use crate::rustc::hir;\n+use crate::rustc::hir::def::Def;\n+use crate::rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use crate::rustc::lint::LateContext;\n+use crate::syntax::ast;\n+use crate::utils::paths;\n+use crate::utils::usage::mutated_variables;\n+use crate::utils::{match_qpath, match_trait_method, span_lint};\n+\n+use if_chain::if_chain;\n+\n+use super::UNNECESSARY_FILTER_MAP;\n+\n+pub(super) fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr]) {\n+    if !match_trait_method(cx, expr, &paths::ITERATOR) {\n+        return;\n+    }\n+\n+    if let hir::ExprKind::Closure(_, _, body_id, ..) = args[1].node {\n+        let body = cx.tcx.hir.body(body_id);\n+        let arg_id = body.arguments[0].pat.id;\n+        let mutates_arg = match mutated_variables(&body.value, cx) {\n+            Some(used_mutably) => used_mutably.contains(&arg_id),\n+            None => true,\n+        };\n+\n+        let (mut found_mapping, mut found_filtering) = check_expression(&cx, arg_id, &body.value);\n+\n+        let mut return_visitor = ReturnVisitor::new(&cx, arg_id);\n+        return_visitor.visit_expr(&body.value);\n+        found_mapping |= return_visitor.found_mapping;\n+        found_filtering |= return_visitor.found_filtering;\n+\n+        if !found_filtering {\n+            span_lint(\n+                cx,\n+                UNNECESSARY_FILTER_MAP,\n+                expr.span,\n+                \"this `.filter_map` can be written more simply using `.map`\",\n+            );\n+            return;\n+        }\n+\n+        if !found_mapping && !mutates_arg {\n+            span_lint(\n+                cx,\n+                UNNECESSARY_FILTER_MAP,\n+                expr.span,\n+                \"this `.filter_map` can be written more simply using `.filter`\",\n+            );\n+            return;\n+        }\n+    }\n+}\n+\n+// returns (found_mapping, found_filtering)\n+fn check_expression<'a, 'tcx: 'a>(\n+    cx: &'a LateContext<'a, 'tcx>,\n+    arg_id: ast::NodeId,\n+    expr: &'tcx hir::Expr,\n+) -> (bool, bool) {\n+    match &expr.node {\n+        hir::ExprKind::Call(ref func, ref args) => {\n+            if_chain! {\n+                if let hir::ExprKind::Path(ref path) = func.node;\n+                then {\n+                    if match_qpath(path, &paths::OPTION_SOME) {\n+                        if_chain! {\n+                            if let hir::ExprKind::Path(path) = &args[0].node;\n+                            if let Def::Local(ref local) = cx.tables.qpath_def(path, args[0].hir_id);\n+                            then {\n+                                if arg_id == *local {\n+                                    return (false, false)\n+                                }\n+                            }\n+                        }\n+                        return (true, false);\n+                    } else {\n+                        // We don't know. It might do anything.\n+                        return (true, true);\n+                    }\n+                }\n+            }\n+            (true, true)\n+        },\n+        hir::ExprKind::Block(ref block, _) => {\n+            if let Some(expr) = &block.expr {\n+                check_expression(cx, arg_id, &expr)\n+            } else {\n+                (false, false)\n+            }\n+        },\n+        // There must be an else_arm or there will be a type error\n+        hir::ExprKind::If(_, ref if_arm, Some(ref else_arm)) => {\n+            let if_check = check_expression(cx, arg_id, if_arm);\n+            let else_check = check_expression(cx, arg_id, else_arm);\n+            (if_check.0 | else_check.0, if_check.1 | else_check.1)\n+        },\n+        hir::ExprKind::Match(_, ref arms, _) => {\n+            let mut found_mapping = false;\n+            let mut found_filtering = false;\n+            for arm in arms {\n+                let (m, f) = check_expression(cx, arg_id, &arm.body);\n+                found_mapping |= m;\n+                found_filtering |= f;\n+            }\n+            (found_mapping, found_filtering)\n+        },\n+        hir::ExprKind::Path(path) if match_qpath(path, &paths::OPTION_NONE) => (false, true),\n+        _ => (true, true),\n+    }\n+}\n+\n+struct ReturnVisitor<'a, 'tcx: 'a> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    arg_id: ast::NodeId,\n+    // Found a non-None return that isn't Some(input)\n+    found_mapping: bool,\n+    // Found a return that isn't Some\n+    found_filtering: bool,\n+}\n+\n+impl<'a, 'tcx: 'a> ReturnVisitor<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'a, 'tcx>, arg_id: ast::NodeId) -> ReturnVisitor<'a, 'tcx> {\n+        ReturnVisitor {\n+            cx,\n+            arg_id,\n+            found_mapping: false,\n+            found_filtering: false,\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for ReturnVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n+        if let hir::ExprKind::Ret(Some(expr)) = &expr.node {\n+            let (found_mapping, found_filtering) = check_expression(self.cx, self.arg_id, expr);\n+            self.found_mapping |= found_mapping;\n+            self.found_filtering |= found_filtering;\n+        } else {\n+            walk_expr(self, expr);\n+        }\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}"}, {"sha": "0011065db673f1dc411a542b885074570aaeed2b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -682,13 +682,10 @@ impl LimitStack {\n }\n \n pub fn get_attr<'a>(attrs: &'a [ast::Attribute], name: &'static str) -> impl Iterator<Item = &'a ast::Attribute> {\n-    attrs.iter().filter_map(move |attr| {\n-        if attr.path.segments.len() == 2 && attr.path.segments[0].ident.to_string() == \"clippy\" && attr.path.segments[1].ident.to_string() == name {\n-            Some(attr)\n-        } else {\n-            None\n-        }\n-    })\n+    attrs.iter().filter(move |attr|\n+        attr.path.segments.len() == 2 &&\n+        attr.path.segments[0].ident.to_string() == \"clippy\" &&\n+        attr.path.segments[1].ident.to_string() == name)\n }\n \n fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'static str, mut f: F) {"}, {"sha": "dd6cdc5d39d3f63469299a406ce0be869dbebfd1", "filename": "tests/ui/unnecessary_filter_map.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/tests%2Fui%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/tests%2Fui%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_filter_map.rs?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    let _ = (0..4).filter_map(|x| if x > 1 { Some(x) } else { None });\n+    let _ = (0..4).filter_map(|x| { if x > 1 { return Some(x); }; None });\n+    let _ = (0..4).filter_map(|x| match x {\n+        0 | 1 => None,\n+        _ => Some(x),\n+    });\n+\n+    let _ = (0..4).filter_map(|x| Some(x + 1));\n+\n+    let _ = (0..4).filter_map(i32::checked_abs);\n+}"}, {"sha": "045802047d27f8661241f22ac27d7ba394caf23c", "filename": "tests/ui/unnecessary_filter_map.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/tests%2Fui%2Funnecessary_filter_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/tests%2Fui%2Funnecessary_filter_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_filter_map.stderr?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -0,0 +1,32 @@\n+error: this `.filter_map` can be written more simply using `.filter`\n+ --> $DIR/unnecessary_filter_map.rs:2:13\n+  |\n+2 |     let _ = (0..4).filter_map(|x| if x > 1 { Some(x) } else { None });\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D clippy::unnecessary-filter-map` implied by `-D warnings`\n+\n+error: this `.filter_map` can be written more simply using `.filter`\n+ --> $DIR/unnecessary_filter_map.rs:3:13\n+  |\n+3 |     let _ = (0..4).filter_map(|x| { if x > 1 { return Some(x); }; None });\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this `.filter_map` can be written more simply using `.filter`\n+ --> $DIR/unnecessary_filter_map.rs:4:13\n+  |\n+4 |       let _ = (0..4).filter_map(|x| match x {\n+  |  _____________^\n+5 | |         0 | 1 => None,\n+6 | |         _ => Some(x),\n+7 | |     });\n+  | |______^\n+\n+error: this `.filter_map` can be written more simply using `.map`\n+ --> $DIR/unnecessary_filter_map.rs:9:13\n+  |\n+9 |     let _ = (0..4).filter_map(|x| Some(x + 1));\n+  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "b34dad73f70eeee4a3aa2b1d801992b8b69bc9c3", "filename": "util/update_lints.py", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d0b79d392baaa985be6c738727adac2583a5bbb/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/9d0b79d392baaa985be6c738727adac2583a5bbb/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=9d0b79d392baaa985be6c738727adac2583a5bbb", "patch": "@@ -46,7 +46,12 @@ def collect(deprecated_lints, clippy_lints, fn):\n         # remove \\-newline escapes from description string\n         desc = nl_escape_re.sub('', match.group('desc'))\n         cat = match.group('cat')\n-        clippy_lints[cat].append((os.path.splitext(os.path.basename(fn))[0],\n+        if cat in ('internal', 'internal_warn'):\n+            continue\n+        module_name = os.path.splitext(os.path.basename(fn))[0]\n+        if module_name == 'mod':\n+            module_name = os.path.basename(os.path.dirname(fn))\n+        clippy_lints[cat].append((module_name,\n                                   match.group('name').lower(),\n                                   \"allow\",\n                                   desc.replace('\\\\\"', '\"')))\n@@ -138,10 +143,11 @@ def main(print_only=False, check=False):\n         return\n \n     # collect all lints from source files\n-    for fn in os.listdir('clippy_lints/src'):\n-        if fn.endswith('.rs'):\n-            collect(deprecated_lints, clippy_lints,\n-                    os.path.join('clippy_lints', 'src', fn))\n+    for root, dirs, files in os.walk('clippy_lints/src'):\n+        for fn in files:\n+            if fn.endswith('.rs'):\n+                collect(deprecated_lints, clippy_lints,\n+                        os.path.join(root, fn))\n \n     # determine version\n     with open('Cargo.toml') as fp:"}]}