{"sha": "24a8d3bce38607b385f19571d5120b892b18ae9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YThkM2JjZTM4NjA3YjM4NWYxOTU3MWQ1MTIwYjg5MmIxOGFlOWE=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-16T17:34:17Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-16T17:34:17Z"}, "message": "Add some more tracing instrumentation", "tree": {"sha": "d9058cc99776e50caf081385447a0191eab481f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9058cc99776e50caf081385447a0191eab481f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a8d3bce38607b385f19571d5120b892b18ae9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a8d3bce38607b385f19571d5120b892b18ae9a", "html_url": "https://github.com/rust-lang/rust/commit/24a8d3bce38607b385f19571d5120b892b18ae9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a8d3bce38607b385f19571d5120b892b18ae9a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee86f96ba176f598d64dc9f3bb7e074d5b8b86b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee86f96ba176f598d64dc9f3bb7e074d5b8b86b6", "html_url": "https://github.com/rust-lang/rust/commit/ee86f96ba176f598d64dc9f3bb7e074d5b8b86b6"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "d5e334b5c65958887303dfadad538aa59bd82a5e", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24a8d3bce38607b385f19571d5120b892b18ae9a/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a8d3bce38607b385f19571d5120b892b18ae9a/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=24a8d3bce38607b385f19571d5120b892b18ae9a", "patch": "@@ -568,6 +568,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// - `substs`, the substs  used to instantiate this opaque type\n     /// - `instantiated_ty`, the inferred type C1 -- fully resolved, lifted version of\n     ///   `opaque_defn.concrete_ty`\n+    #[instrument(skip(self))]\n     fn infer_opaque_definition_from_instantiation(\n         &self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n@@ -576,18 +577,14 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n-        debug!(\n-            \"infer_opaque_definition_from_instantiation(def_id={:?}, instantiated_ty={:?})\",\n-            def_id, instantiated_ty\n-        );\n-\n         // Use substs to build up a reverse map from regions to their\n         // identity mappings. This is necessary because of `impl\n         // Trait` lifetimes are computed by replacing existing\n         // lifetimes with 'static and remapping only those used in the\n         // `impl Trait` return type, resulting in the parameters\n         // shifting.\n         let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n+        debug!(?id_substs);\n         let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> =\n             substs.iter().enumerate().map(|(index, subst)| (subst, id_substs[index])).collect();\n \n@@ -602,7 +599,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             instantiated_ty,\n             span,\n         ));\n-        debug!(\"infer_opaque_definition_from_instantiation: definition_ty={:?}\", definition_ty);\n+        debug!(?definition_ty);\n \n         definition_ty\n     }\n@@ -857,14 +854,15 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                 self.tcx.mk_generator(def_id, substs, movability)\n             }\n \n-            ty::Param(..) => {\n+            ty::Param(param) => {\n                 // Look it up in the substitution list.\n                 match self.map.get(&ty.into()).map(|k| k.unpack()) {\n                     // Found it in the substitution list; replace with the parameter from the\n                     // opaque type.\n                     Some(GenericArgKind::Type(t1)) => t1,\n                     Some(u) => panic!(\"type mapped to unexpected kind: {:?}\", u),\n                     None => {\n+                        debug!(?param, ?self.map);\n                         self.tcx\n                             .sess\n                             .struct_span_err(\n@@ -931,8 +929,8 @@ struct Instantiator<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n+    #[instrument(skip(self))]\n     fn instantiate_opaque_types_in_map<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {\n-        debug!(\"instantiate_opaque_types_in_map(value={:?})\", value);\n         let tcx = self.infcx.tcx;\n         value.fold_with(&mut BottomUpFolder {\n             tcx,"}]}