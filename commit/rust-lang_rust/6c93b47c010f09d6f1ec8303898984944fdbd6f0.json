{"sha": "6c93b47c010f09d6f1ec8303898984944fdbd6f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjOTNiNDdjMDEwZjA5ZDZmMWVjODMwMzg5ODk4NDk0NGZkYmQ2ZjA=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-06-26T12:04:37Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-06-26T12:11:58Z"}, "message": "Fix clippy::cast_losless", "tree": {"sha": "9a3914bbc710c98e12a2c89f8980f5d3a5dcb8b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a3914bbc710c98e12a2c89f8980f5d3a5dcb8b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c93b47c010f09d6f1ec8303898984944fdbd6f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c93b47c010f09d6f1ec8303898984944fdbd6f0", "html_url": "https://github.com/rust-lang/rust/commit/6c93b47c010f09d6f1ec8303898984944fdbd6f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c93b47c010f09d6f1ec8303898984944fdbd6f0/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12806b70506508c4ec187f0223e1e86f89167448", "url": "https://api.github.com/repos/rust-lang/rust/commits/12806b70506508c4ec187f0223e1e86f89167448", "html_url": "https://github.com/rust-lang/rust/commit/12806b70506508c4ec187f0223e1e86f89167448"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "7975c62b90fb6fa8c3cd005725a2c2c0938e3f60", "filename": "src/librustc_data_structures/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibrustc_data_structures%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibrustc_data_structures%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffingerprint.rs?ref=6c93b47c010f09d6f1ec8303898984944fdbd6f0", "patch": "@@ -39,8 +39,8 @@ impl Fingerprint {\n     // you want.\n     #[inline]\n     pub fn combine_commutative(self, other: Fingerprint) -> Fingerprint {\n-        let a = (self.1 as u128) << 64 | self.0 as u128;\n-        let b = (other.1 as u128) << 64 | other.0 as u128;\n+        let a = u128::from(self.1) << 64 | u128::from(self.0);\n+        let b = u128::from(other.1) << 64 | u128::from(other.0);\n \n         let c = a.wrapping_add(b);\n "}, {"sha": "7838a900890249420bb3231a77ca1e1f14e4334d", "filename": "src/librustc_data_structures/sip128.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibrustc_data_structures%2Fsip128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibrustc_data_structures%2Fsip128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsip128.rs?ref=6c93b47c010f09d6f1ec8303898984944fdbd6f0", "patch": "@@ -70,15 +70,15 @@ unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n     let mut i = 0; // current byte index (from LSB) in the output u64\n     let mut out = 0;\n     if i + 3 < len {\n-        out = load_int_le!(buf, start + i, u32) as u64;\n+        out = u64::from(load_int_le!(buf, start + i, u32));\n         i += 4;\n     }\n     if i + 1 < len {\n-        out |= (load_int_le!(buf, start + i, u16) as u64) << (i * 8);\n+        out |= u64::from(load_int_le!(buf, start + i, u16)) << (i * 8);\n         i += 2\n     }\n     if i < len {\n-        out |= (*buf.get_unchecked(start + i) as u64) << (i * 8);\n+        out |= u64::from(*buf.get_unchecked(start + i)) << (i * 8);\n         i += 1;\n     }\n     debug_assert_eq!(i, len);"}, {"sha": "47dfc1d1688d07ab24a1fba2d4e19d002174eae2", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=6c93b47c010f09d6f1ec8303898984944fdbd6f0", "patch": "@@ -44,7 +44,7 @@ impl<W: StableHasherResult> StableHasher<W> {\n impl StableHasherResult for u128 {\n     fn finish(hasher: StableHasher<Self>) -> Self {\n         let (_0, _1) = hasher.finalize();\n-        (_0 as u128) | ((_1 as u128) << 64)\n+        u128::from(_0) | (u128::from(_1) << 64)\n     }\n }\n "}, {"sha": "a7e7c09f9ae4411e9546f493278db7bebdfc3d61", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=6c93b47c010f09d6f1ec8303898984944fdbd6f0", "patch": "@@ -513,7 +513,7 @@ impl<'a> crate::Encoder for Encoder<'a> {\n         emit_enquoted_if_mapkey!(self, fmt_number_or_null(v))\n     }\n     fn emit_f32(&mut self, v: f32) -> EncodeResult {\n-        self.emit_f64(v as f64)\n+        self.emit_f64(f64::from(v))\n     }\n \n     fn emit_char(&mut self, v: char) -> EncodeResult {\n@@ -763,7 +763,7 @@ impl<'a> crate::Encoder for PrettyEncoder<'a> {\n         emit_enquoted_if_mapkey!(self, fmt_number_or_null(v))\n     }\n     fn emit_f32(&mut self, v: f32) -> EncodeResult {\n-        self.emit_f64(v as f64)\n+        self.emit_f64(f64::from(v))\n     }\n \n     fn emit_char(&mut self, v: char) -> EncodeResult {\n@@ -1698,12 +1698,12 @@ impl<T: Iterator<Item=char>> Parser<T> {\n                             if n2 < 0xDC00 || n2 > 0xDFFF {\n                                 return self.error(LoneLeadingSurrogateInHexEscape)\n                             }\n-                            let c = (((n1 - 0xD800) as u32) << 10 |\n-                                     (n2 - 0xDC00) as u32) + 0x1_0000;\n+                            let c = (u32::from(n1 - 0xD800) << 10 |\n+                                     u32::from(n2 - 0xDC00)) + 0x1_0000;\n                             res.push(char::from_u32(c).unwrap());\n                         }\n \n-                        n => match char::from_u32(n as u32) {\n+                        n => match char::from_u32(u32::from(n)) {\n                             Some(c) => res.push(c),\n                             None => return self.error(InvalidUnicodeCodePoint),\n                         },\n@@ -2405,7 +2405,7 @@ impl ToJson for Json {\n }\n \n impl ToJson for f32 {\n-    fn to_json(&self) -> Json { (*self as f64).to_json() }\n+    fn to_json(&self) -> Json { f64::from(*self).to_json() }\n }\n \n impl ToJson for f64 {"}, {"sha": "f9d80842d7558ec5f15aea7fc4c9ca17c955dbf1", "filename": "src/libserialize/leb128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibserialize%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c93b47c010f09d6f1ec8303898984944fdbd6f0/src%2Flibserialize%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fleb128.rs?ref=6c93b47c010f09d6f1ec8303898984944fdbd6f0", "patch": "@@ -123,7 +123,7 @@ pub fn read_signed_leb128(data: &[u8], start_position: usize) -> (i128, usize) {\n     loop {\n         byte = data[position];\n         position += 1;\n-        result |= ((byte & 0x7F) as i128) << shift;\n+        result |= i128::from(byte & 0x7F) << shift;\n         shift += 7;\n \n         if (byte & 0x80) == 0 {"}]}