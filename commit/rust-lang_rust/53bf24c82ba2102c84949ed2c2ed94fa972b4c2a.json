{"sha": "53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "node_id": "C_kwDOAAsO6NoAKDUzYmYyNGM4MmJhMjEwMmM4NDk0OWVkMmMyZWQ5NGZhOTcyYjRjMmE", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-05-03T18:29:37Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-05-25T22:32:31Z"}, "message": "Move download-rustc from bootstrap.py to rustbuild\n\n- Remove download-rustc handling from bootstrap.py\n- Allow a custom `pattern` in `builder.unpack()`\n- Only download rustc once another part of bootstrap depends on it.\n\n  This is somewhat necessary since the download functions rely on having a full\n  `Builder`, which isn't available until after config parsing finishes.", "tree": {"sha": "f3053b7a8f1d7100f6ec458170e6a379ec52d3d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3053b7a8f1d7100f6ec458170e6a379ec52d3d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "html_url": "https://github.com/rust-lang/rust/commit/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61dd278ade42a2d6d88f1c7b2bf2ee3ffab3b132", "url": "https://api.github.com/repos/rust-lang/rust/commits/61dd278ade42a2d6d88f1c7b2bf2ee3ffab3b132", "html_url": "https://github.com/rust-lang/rust/commit/61dd278ade42a2d6d88f1c7b2bf2ee3ffab3b132"}], "stats": {"total": 286, "additions": 200, "deletions": 86}, "files": [{"sha": "eee90ed2c1c1134bddf09c9154102e8f78b40eb0", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 38, "deletions": 65, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "patch": "@@ -446,7 +446,7 @@ def __init__(self):\n         self.nix_deps_dir = None\n         self.rustc_commit = None\n \n-    def download_toolchain(self, stage0=True, rustc_channel=None):\n+    def download_toolchain(self, rustc_channel=None):\n         \"\"\"Fetch the build system for Rust, written in Rust\n \n         This method will build a cache directory, then it will fetch the\n@@ -458,43 +458,34 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n         \"\"\"\n         if rustc_channel is None:\n             rustc_channel = self.stage0_compiler.version\n-        bin_root = self.bin_root(stage0)\n+        bin_root = self.bin_root()\n \n         key = self.stage0_compiler.date\n-        if not stage0:\n-            key += str(self.rustc_commit)\n-        if self.rustc(stage0).startswith(bin_root) and \\\n-                (not os.path.exists(self.rustc(stage0)) or\n-                 self.program_out_of_date(self.rustc_stamp(stage0), key)):\n+        if self.rustc().startswith(bin_root) and \\\n+                (not os.path.exists(self.rustc()) or\n+                 self.program_out_of_date(self.rustc_stamp(), key)):\n             if os.path.exists(bin_root):\n                 shutil.rmtree(bin_root)\n             tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n             filename = \"rust-std-{}-{}{}\".format(\n                 rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n-            self._download_component_helper(filename, pattern, tarball_suffix, stage0)\n+            self._download_component_helper(filename, pattern, tarball_suffix)\n             filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n-            self._download_component_helper(filename, \"rustc\", tarball_suffix, stage0)\n-            # download-rustc doesn't need its own cargo, it can just use beta's.\n-            if stage0:\n-                filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n-                                                tarball_suffix)\n-                self._download_component_helper(filename, \"cargo\", tarball_suffix)\n-                self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n-            else:\n-                filename = \"rustc-dev-{}-{}{}\".format(rustc_channel, self.build, tarball_suffix)\n-                self._download_component_helper(\n-                    filename, \"rustc-dev\", tarball_suffix, stage0\n-                )\n+            self._download_component_helper(filename, \"rustc\", tarball_suffix)\n+            filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n+                                            tarball_suffix)\n+            self._download_component_helper(filename, \"cargo\", tarball_suffix)\n+            self.fix_bin_or_dylib(\"{}/bin/cargo\".format(bin_root))\n \n             self.fix_bin_or_dylib(\"{}/bin/rustc\".format(bin_root))\n             self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(bin_root))\n             lib_dir = \"{}/lib\".format(bin_root)\n             for lib in os.listdir(lib_dir):\n                 if lib.endswith(\".so\"):\n                     self.fix_bin_or_dylib(os.path.join(lib_dir, lib))\n-            with output(self.rustc_stamp(stage0)) as rust_stamp:\n+            with output(self.rustc_stamp()) as rust_stamp:\n                 rust_stamp.write(key)\n \n         if self.rustfmt() and self.rustfmt().startswith(bin_root) and (\n@@ -518,24 +509,17 @@ def download_toolchain(self, stage0=True, rustc_channel=None):\n                     rustfmt_stamp.write(self.stage0_rustfmt.channel())\n \n     def _download_component_helper(\n-        self, filename, pattern, tarball_suffix, stage0=True, key=None\n+        self, filename, pattern, tarball_suffix, key=None\n     ):\n         if key is None:\n-            if stage0:\n-                key = self.stage0_compiler.date\n-            else:\n-                key = self.rustc_commit\n+            key = self.stage0_compiler.date\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, key)\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        if stage0:\n-            base = self._download_url\n-            url = \"dist/{}\".format(key)\n-        else:\n-            base = \"https://ci-artifacts.rust-lang.org\"\n-            url = \"rustc-builds/{}\".format(self.rustc_commit)\n+        base = self._download_url\n+        url = \"dist/{}\".format(key)\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n             get(\n@@ -544,9 +528,9 @@ def _download_component_helper(\n                 tarball,\n                 self.checksums_sha256,\n                 verbose=self.verbose,\n-                do_verify=stage0,\n+                do_verify=True,\n             )\n-        unpack(tarball, tarball_suffix, self.bin_root(stage0), match=pattern, verbose=self.verbose)\n+        unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n     def fix_bin_or_dylib(self, fname):\n         \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n@@ -689,17 +673,15 @@ def maybe_download_ci_toolchain(self):\n         # FIXME: support downloading artifacts from the beta channel\n         self.download_toolchain(False, \"nightly\")\n \n-    def rustc_stamp(self, stage0):\n+    def rustc_stamp(self):\n         \"\"\"Return the path for .rustc-stamp at the given stage\n \n         >>> rb = RustBuild()\n         >>> rb.build_dir = \"build\"\n-        >>> rb.rustc_stamp(True) == os.path.join(\"build\", \"stage0\", \".rustc-stamp\")\n-        True\n-        >>> rb.rustc_stamp(False) == os.path.join(\"build\", \"ci-rustc\", \".rustc-stamp\")\n+        >>> rb.rustc_stamp() == os.path.join(\"build\", \"stage0\", \".rustc-stamp\")\n         True\n         \"\"\"\n-        return os.path.join(self.bin_root(stage0), '.rustc-stamp')\n+        return os.path.join(self.bin_root(), '.rustc-stamp')\n \n     def rustfmt_stamp(self):\n         \"\"\"Return the path for .rustfmt-stamp\n@@ -709,7 +691,7 @@ def rustfmt_stamp(self):\n         >>> rb.rustfmt_stamp() == os.path.join(\"build\", \"stage0\", \".rustfmt-stamp\")\n         True\n         \"\"\"\n-        return os.path.join(self.bin_root(True), '.rustfmt-stamp')\n+        return os.path.join(self.bin_root(), '.rustfmt-stamp')\n \n     def program_out_of_date(self, stamp_path, key):\n         \"\"\"Check if the given program stamp is out of date\"\"\"\n@@ -718,26 +700,21 @@ def program_out_of_date(self, stamp_path, key):\n         with open(stamp_path, 'r') as stamp:\n             return key != stamp.read()\n \n-    def bin_root(self, stage0):\n+    def bin_root(self):\n         \"\"\"Return the binary root directory for the given stage\n \n         >>> rb = RustBuild()\n         >>> rb.build_dir = \"build\"\n-        >>> rb.bin_root(True) == os.path.join(\"build\", \"stage0\")\n-        True\n-        >>> rb.bin_root(False) == os.path.join(\"build\", \"ci-rustc\")\n+        >>> rb.bin_root() == os.path.join(\"build\", \"stage0\")\n         True\n \n         When the 'build' property is given should be a nested directory:\n \n         >>> rb.build = \"devel\"\n-        >>> rb.bin_root(True) == os.path.join(\"build\", \"devel\", \"stage0\")\n+        >>> rb.bin_root() == os.path.join(\"build\", \"devel\", \"stage0\")\n         True\n         \"\"\"\n-        if stage0:\n-            subdir = \"stage0\"\n-        else:\n-            subdir = \"ci-rustc\"\n+        subdir = \"stage0\"\n         return os.path.join(self.build_dir, self.build, subdir)\n \n     def get_toml(self, key, section=None):\n@@ -785,37 +762,33 @@ def cargo(self):\n         \"\"\"Return config path for cargo\"\"\"\n         return self.program_config('cargo')\n \n-    def rustc(self, stage0):\n+    def rustc(self):\n         \"\"\"Return config path for rustc\"\"\"\n-        return self.program_config('rustc', stage0)\n+        return self.program_config('rustc')\n \n     def rustfmt(self):\n         \"\"\"Return config path for rustfmt\"\"\"\n         if self.stage0_rustfmt is None:\n             return None\n         return self.program_config('rustfmt')\n \n-    def program_config(self, program, stage0=True):\n+    def program_config(self, program):\n         \"\"\"Return config path for the given program at the given stage\n \n         >>> rb = RustBuild()\n         >>> rb.config_toml = 'rustc = \"rustc\"\\\\n'\n         >>> rb.program_config('rustc')\n         'rustc'\n         >>> rb.config_toml = ''\n-        >>> cargo_path = rb.program_config('cargo', True)\n-        >>> cargo_path.rstrip(\".exe\") == os.path.join(rb.bin_root(True),\n-        ... \"bin\", \"cargo\")\n-        True\n-        >>> cargo_path = rb.program_config('cargo', False)\n-        >>> cargo_path.rstrip(\".exe\") == os.path.join(rb.bin_root(False),\n+        >>> cargo_path = rb.program_config('cargo')\n+        >>> cargo_path.rstrip(\".exe\") == os.path.join(rb.bin_root(),\n         ... \"bin\", \"cargo\")\n         True\n         \"\"\"\n         config = self.get_toml(program)\n         if config:\n             return os.path.expanduser(config)\n-        return os.path.join(self.bin_root(stage0), \"bin\", \"{}{}\".format(\n+        return os.path.join(self.bin_root(), \"bin\", \"{}{}\".format(\n             program, self.exe_suffix()))\n \n     @staticmethod\n@@ -871,14 +844,14 @@ def build_bootstrap(self):\n         if \"CARGO_BUILD_TARGET\" in env:\n             del env[\"CARGO_BUILD_TARGET\"]\n         env[\"CARGO_TARGET_DIR\"] = build_dir\n-        env[\"RUSTC\"] = self.rustc(True)\n-        env[\"LD_LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n+        env[\"RUSTC\"] = self.rustc()\n+        env[\"LD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n             (os.pathsep + env[\"LD_LIBRARY_PATH\"]) \\\n             if \"LD_LIBRARY_PATH\" in env else \"\"\n-        env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n+        env[\"DYLD_LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n             (os.pathsep + env[\"DYLD_LIBRARY_PATH\"]) \\\n             if \"DYLD_LIBRARY_PATH\" in env else \"\"\n-        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(True), \"lib\") + \\\n+        env[\"LIBRARY_PATH\"] = os.path.join(self.bin_root(), \"lib\") + \\\n             (os.pathsep + env[\"LIBRARY_PATH\"]) \\\n             if \"LIBRARY_PATH\" in env else \"\"\n \n@@ -900,7 +873,7 @@ def build_bootstrap(self):\n         if self.get_toml(\"deny-warnings\", \"rust\") != \"false\":\n             env[\"RUSTFLAGS\"] += \" -Dwarnings\"\n \n-        env[\"PATH\"] = os.path.join(self.bin_root(True), \"bin\") + \\\n+        env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n             os.pathsep + env[\"PATH\"]\n         if not os.path.isfile(self.cargo()):\n             raise Exception(\"no cargo executable found at `{}`\".format(\n@@ -1172,7 +1145,7 @@ def bootstrap(help_triggered):\n     # Fetch/build the bootstrap\n     build.download_toolchain()\n     # Download the master compiler if `download-rustc` is set\n-    build.maybe_download_ci_toolchain()\n+    # build.maybe_download_ci_toolchain()\n     sys.stdout.flush()\n     build.ensure_vendored()\n     build.build_bootstrap()"}, {"sha": "94918cb318f9b71080f9ee182c7cca0573127823", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "patch": "@@ -915,15 +915,12 @@ impl<'a> Builder<'a> {\n         }\n     }\n \n-    pub(crate) fn unpack(&self, tarball: &Path, dst: &Path) {\n+    pub(crate) fn unpack(&self, tarball: &Path, dst: &Path, pattern: &str) {\n         println!(\"extracting {} to {}\", tarball.display(), dst.display());\n         if !dst.exists() {\n             t!(fs::create_dir_all(dst));\n         }\n \n-        // FIXME: will need to be a parameter once `download-rustc` is moved to rustbuild\n-        const MATCH: &str = \"rust-dev\";\n-\n         // `tarball` ends with `.tar.xz`; strip that suffix\n         // example: `rust-dev-nightly-x86_64-unknown-linux-gnu`\n         let uncompressed_filename =\n@@ -943,10 +940,10 @@ impl<'a> Builder<'a> {\n                 continue;\n             }\n             let mut short_path = t!(original_path.strip_prefix(directory_prefix));\n-            if !short_path.starts_with(MATCH) {\n+            if !short_path.starts_with(pattern) {\n                 continue;\n             }\n-            short_path = t!(short_path.strip_prefix(MATCH));\n+            short_path = t!(short_path.strip_prefix(pattern));\n             let dst_path = dst.join(short_path);\n             self.verbose(&format!(\"extracting {} to {}\", original_path.display(), dst.display()));\n             if !t!(member.unpack_in(dst)) {\n@@ -1022,7 +1019,7 @@ impl<'a> Builder<'a> {\n                     .join(\"lib\");\n                 // Avoid deleting the rustlib/ directory we just copied\n                 // (in `impl Step for Sysroot`).\n-                if !builder.config.download_rustc {\n+                if !builder.download_rustc() {\n                     let _ = fs::remove_dir_all(&sysroot);\n                     t!(fs::create_dir_all(&sysroot));\n                 }\n@@ -1179,6 +1176,10 @@ impl<'a> Builder<'a> {\n         Config::llvm_link_shared(self)\n     }\n \n+    pub(crate) fn download_rustc(&self) -> bool {\n+        Config::download_rustc(self)\n+    }\n+\n     /// Prepares an invocation of `cargo` to be run.\n     ///\n     /// This will create a `Command` that represents a pending execution of"}, {"sha": "f1960e39a41c7296b370ee78e5693f107adc25c2", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "patch": "@@ -42,8 +42,10 @@ impl Step for Std {\n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         // When downloading stage1, the standard library has already been copied to the sysroot, so\n         // there's no need to rebuild it.\n-        let download_rustc = run.builder.config.download_rustc;\n-        run.all_krates(\"test\").path(\"library\").default_condition(!download_rustc)\n+        let builder = run.builder;\n+        run.all_krates(\"test\")\n+            .path(\"library\")\n+            .lazy_default_condition(Box::new(|| !builder.download_rustc()))\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -66,7 +68,7 @@ impl Step for Std {\n         // Don't recompile them.\n         // NOTE: the ABI of the beta compiler is different from the ABI of the downloaded compiler,\n         // so its artifacts can't be reused.\n-        if builder.config.download_rustc && compiler.stage != 0 {\n+        if builder.download_rustc() && compiler.stage != 0 {\n             return;\n         }\n \n@@ -551,7 +553,7 @@ impl Step for Rustc {\n \n         // NOTE: the ABI of the beta compiler is different from the ABI of the downloaded compiler,\n         // so its artifacts can't be reused.\n-        if builder.config.download_rustc && compiler.stage != 0 {\n+        if builder.download_rustc() && compiler.stage != 0 {\n             // Copy the existing artifacts instead of rebuilding them.\n             // NOTE: this path is only taken for tools linking to rustc-dev.\n             builder.ensure(Sysroot { compiler });\n@@ -995,7 +997,7 @@ impl Step for Sysroot {\n         t!(fs::create_dir_all(&sysroot));\n \n         // If we're downloading a compiler from CI, we can use the same compiler for all stages other than 0.\n-        if builder.config.download_rustc && compiler.stage != 0 {\n+        if builder.download_rustc() && compiler.stage != 0 {\n             assert_eq!(\n                 builder.config.build, compiler.host,\n                 \"Cross-compiling is not yet supported with `download-rustc`\",\n@@ -1090,7 +1092,7 @@ impl Step for Assemble {\n         let build_compiler = builder.compiler(target_compiler.stage - 1, builder.config.build);\n \n         // If we're downloading a compiler from CI, we can use the same compiler for all stages other than 0.\n-        if builder.config.download_rustc {\n+        if builder.download_rustc() {\n             builder.ensure(Sysroot { compiler: target_compiler });\n             return target_compiler;\n         }"}, {"sha": "f51a6481e43fc36f4eaf331043ad7c9b6e340296", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 142, "deletions": 4, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "patch": "@@ -7,17 +7,20 @@ use std::cell::Cell;\n use std::cmp;\n use std::collections::{HashMap, HashSet};\n use std::env;\n+use std::ffi::OsStr;\n use std::fmt;\n use std::fs;\n use std::path::{Path, PathBuf};\n+use std::process::{exit, Command};\n use std::str::FromStr;\n \n use crate::builder::{Builder, TaskPath};\n use crate::cache::{Interned, INTERNER};\n use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n-use crate::util::{exe, t};\n+use crate::util::{exe, output, program_out_of_date, t};\n+use once_cell::sync::OnceCell;\n use serde::{Deserialize, Deserializer};\n \n macro_rules! check_ci_llvm {\n@@ -81,7 +84,11 @@ pub struct Config {\n     pub cmd: Subcommand,\n     pub incremental: bool,\n     pub dry_run: bool,\n-    pub download_rustc: bool,\n+    /// `None` if we shouldn't download CI compiler artifacts, or the commit to download if we should.\n+    #[cfg(not(test))]\n+    download_rustc_commit: Option<String>,\n+    #[cfg(test)]\n+    pub download_rustc_commit: Option<String>,\n \n     pub deny_warnings: bool,\n     pub backtrace_on_ice: bool,\n@@ -1080,7 +1087,8 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n-            config.download_rustc = env::var(\"BOOTSTRAP_DOWNLOAD_RUSTC\").as_deref() == Ok(\"1\");\n+            config.download_rustc_commit =\n+                download_ci_rustc_commit(rust.download_rustc, config.verbose > 0);\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;\n@@ -1192,7 +1200,7 @@ impl Config {\n         let default = config.channel == \"dev\";\n         config.ignore_git = ignore_git.unwrap_or(default);\n \n-        let download_rustc = config.download_rustc;\n+        let download_rustc = config.download_rustc_commit.is_some();\n         // See https://github.com/rust-lang/compiler-team/issues/326\n         config.stage = match config.cmd {\n             Subcommand::Check { .. } => flags.stage.or(build.check_stage).unwrap_or(0),\n@@ -1309,6 +1317,23 @@ impl Config {\n         llvm_link_shared\n     }\n \n+    /// Return whether we will use a downloaded, pre-compiled version of rustc, or just build from source.\n+    pub(crate) fn download_rustc(builder: &Builder<'_>) -> bool {\n+        static DOWNLOAD_RUSTC: OnceCell<bool> = OnceCell::new();\n+        if builder.config.dry_run && DOWNLOAD_RUSTC.get().is_none() {\n+            // avoid trying to actually download the commit\n+            return false;\n+        }\n+\n+        *DOWNLOAD_RUSTC.get_or_init(|| match &builder.config.download_rustc_commit {\n+            None => false,\n+            Some(commit) => {\n+                download_ci_rustc(builder, commit);\n+                true\n+            }\n+        })\n+    }\n+\n     pub fn verbose(&self) -> bool {\n         self.verbose > 0\n     }\n@@ -1358,3 +1383,116 @@ fn threads_from_config(v: u32) -> u32 {\n         n => n,\n     }\n }\n+\n+/// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n+fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool) -> Option<String> {\n+    // If `download-rustc` is not set, default to rebuilding.\n+    let if_unchanged = match download_rustc {\n+        None | Some(StringOrBool::Bool(false)) => return None,\n+        Some(StringOrBool::Bool(true)) => false,\n+        Some(StringOrBool::String(s)) if s == \"if-unchanged\" => true,\n+        Some(StringOrBool::String(other)) => {\n+            panic!(\"unrecognized option for download-rustc: {}\", other)\n+        }\n+    };\n+\n+    // Handle running from a directory other than the top level\n+    let top_level = output(Command::new(\"git\").args(&[\"rev-parse\", \"--show-toplevel\"]));\n+    let top_level = top_level.trim_end();\n+    let compiler = format!(\"{top_level}/compiler/\");\n+    let library = format!(\"{top_level}/library/\");\n+\n+    // Look for a version to compare to based on the current commit.\n+    // Only commits merged by bors will have CI artifacts.\n+    let merge_base = output(Command::new(\"git\").args(&[\n+        \"rev-list\",\n+        \"--author=bors@rust-lang.org\",\n+        \"-n1\",\n+        \"--first-parent\",\n+        \"HEAD\",\n+    ]));\n+    let commit = merge_base.trim_end();\n+    if commit.is_empty() {\n+        println!(\"error: could not find commit hash for downloading rustc\");\n+        println!(\"help: maybe your repository history is too shallow?\");\n+        println!(\"help: consider disabling `download-rustc`\");\n+        println!(\"help: or fetch enough history to include one upstream commit\");\n+        exit(1);\n+    }\n+\n+    // Warn if there were changes to the compiler or standard library since the ancestor commit.\n+    let has_changes = !t!(Command::new(\"git\")\n+        .args(&[\"diff-index\", \"--quiet\", &commit, \"--\", &compiler, &library])\n+        .status())\n+    .success();\n+    if has_changes {\n+        if if_unchanged {\n+            if verbose {\n+                println!(\n+                    \"warning: saw changes to compiler/ or library/ since {commit}; \\\n+                          ignoring `download-rustc`\"\n+                );\n+            }\n+            return None;\n+        }\n+        println!(\n+            \"warning: `download-rustc` is enabled, but there are changes to \\\n+                  compiler/ or library/\"\n+        );\n+    }\n+\n+    Some(commit.to_string())\n+}\n+\n+fn download_ci_rustc(builder: &Builder<'_>, commit: &str) {\n+    builder.verbose(&format!(\"using downloaded stage2 artifacts from CI (commit {commit})\"));\n+    // FIXME: support downloading artifacts from the beta channel\n+    const CHANNEL: &str = \"nightly\";\n+    let host = builder.config.build.triple;\n+    let bin_root = builder.out.join(host).join(\"ci-rustc\");\n+    let rustc_stamp = bin_root.join(\".rustc-stamp\");\n+\n+    if !bin_root.join(\"bin\").join(\"rustc\").exists() || program_out_of_date(&rustc_stamp, commit) {\n+        if bin_root.exists() {\n+            t!(fs::remove_dir_all(&bin_root));\n+        }\n+        let filename = format!(\"rust-std-{CHANNEL}-{host}.tar.xz\");\n+        let pattern = format!(\"rust-std-{host}\");\n+        download_component(builder, filename, &pattern, commit);\n+        let filename = format!(\"rustc-{CHANNEL}-{host}.tar.xz\");\n+        download_component(builder, filename, \"rustc\", commit);\n+        // download-rustc doesn't need its own cargo, it can just use beta's.\n+        let filename = format!(\"rustc-dev-{CHANNEL}-{host}.tar.xz\");\n+        download_component(builder, filename, \"rustc-dev\", commit);\n+\n+        builder.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustc\"));\n+        builder.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustdoc\"));\n+        let lib_dir = bin_root.join(\"lib\");\n+        for lib in t!(fs::read_dir(lib_dir)) {\n+            let lib = t!(lib);\n+            if lib.path().extension() == Some(OsStr::new(\"so\")) {\n+                builder.fix_bin_or_dylib(&lib.path());\n+            }\n+        }\n+        t!(fs::write(rustc_stamp, commit));\n+    }\n+}\n+\n+/// Download a single component of a CI-built toolchain (not necessarily a published nightly).\n+// NOTE: intentionally takes an owned string to avoid downloading multiple times by accident\n+fn download_component(builder: &Builder<'_>, filename: String, prefix: &str, commit: &str) {\n+    let cache_dst = builder.out.join(\"cache\");\n+    let rustc_cache = cache_dst.join(commit);\n+    if !rustc_cache.exists() {\n+        t!(fs::create_dir_all(&rustc_cache));\n+    }\n+\n+    let base = \"https://ci-artifacts.rust-lang.org\";\n+    let url = format!(\"rustc-builds/{commit}\");\n+    let tarball = rustc_cache.join(&filename);\n+    if !tarball.exists() {\n+        builder.download_component(base, &format!(\"{url}/{filename}\"), &tarball);\n+    }\n+    let bin_root = builder.out.join(builder.config.build.triple).join(\"ci-rustc\");\n+    builder.unpack(&tarball, &bin_root, prefix)\n+}"}, {"sha": "d7211b2c2af2f9ba46f2651dfaaf6491ae32fa5e", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "patch": "@@ -182,7 +182,7 @@ fn download_ci_llvm(builder: &Builder<'_>, llvm_sha: &str) {\n         builder.download_component(base, &format!(\"{}/{}\", url, filename), &tarball);\n     }\n     let llvm_root = builder.config.ci_llvm_root();\n-    builder.unpack(&tarball, &llvm_root);\n+    builder.unpack(&tarball, &llvm_root, \"rust-dev\");\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]"}, {"sha": "99e9e8794e30bc0e74d6c65b09aaf4b631e984a1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "patch": "@@ -2058,7 +2058,7 @@ impl Step for CrateRustdoc {\n         let test_kind = self.test_kind;\n         let target = self.host;\n \n-        let compiler = if builder.config.download_rustc {\n+        let compiler = if builder.download_rustc() {\n             builder.compiler(builder.top_stage, target)\n         } else {\n             // Use the previous stage compiler to reuse the artifacts that are\n@@ -2127,7 +2127,7 @@ impl Step for CrateRustdoc {\n         // with.\n         //\n         // Note that this set the host libdir for `download_rustc`, which uses a normal rust distribution.\n-        let libdir = if builder.config.download_rustc {\n+        let libdir = if builder.download_rustc() {\n             builder.rustc_libdir(compiler)\n         } else {\n             builder.sysroot_libdir(compiler, target).to_path_buf()"}, {"sha": "e1b78904646490899e03e43526c24406fb8a6cac", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53bf24c82ba2102c84949ed2c2ed94fa972b4c2a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=53bf24c82ba2102c84949ed2c2ed94fa972b4c2a", "patch": "@@ -516,7 +516,7 @@ impl Step for Rustdoc {\n         builder.ensure(compile::Rustc { compiler: build_compiler, target: target_compiler.host });\n         // NOTE: this implies that `download-rustc` is pretty useless when compiling with the stage0\n         // compiler, since you do just as much work.\n-        if !builder.config.dry_run && builder.config.download_rustc && build_compiler.stage == 0 {\n+        if !builder.config.dry_run && builder.download_rustc() && build_compiler.stage == 0 {\n             println!(\n                 \"warning: `download-rustc` does nothing when building stage1 tools; consider using `--stage 2` instead\"\n             );"}]}