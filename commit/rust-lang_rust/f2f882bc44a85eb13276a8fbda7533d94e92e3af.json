{"sha": "f2f882bc44a85eb13276a8fbda7533d94e92e3af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZjg4MmJjNDRhODVlYjEzMjc2YThmYmRhNzUzM2Q5NGU5MmUzYWY=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-04-20T16:36:12Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-04-21T21:04:44Z"}, "message": "Add `pub(crate)` to functions generated in other module", "tree": {"sha": "14649a8ab0e85f8b8dbb62ef27a32706e1240df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14649a8ab0e85f8b8dbb62ef27a32706e1240df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2f882bc44a85eb13276a8fbda7533d94e92e3af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f882bc44a85eb13276a8fbda7533d94e92e3af", "html_url": "https://github.com/rust-lang/rust/commit/f2f882bc44a85eb13276a8fbda7533d94e92e3af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2f882bc44a85eb13276a8fbda7533d94e92e3af/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74780a15f65916d08942eb53c43b8e8c0b62cb48", "url": "https://api.github.com/repos/rust-lang/rust/commits/74780a15f65916d08942eb53c43b8e8c0b62cb48", "html_url": "https://github.com/rust-lang/rust/commit/74780a15f65916d08942eb53c43b8e8c0b62cb48"}], "stats": {"total": 73, "additions": 27, "deletions": 46}, "files": [{"sha": "f185cffdb7c359ee136b4ed6296fb6fcf4833a7b", "filename": "crates/ra_assists/src/handlers/add_function.rs", "status": "modified", "additions": 23, "deletions": 46, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f2f882bc44a85eb13276a8fbda7533d94e92e3af/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f882bc44a85eb13276a8fbda7533d94e92e3af/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_function.rs?ref=f2f882bc44a85eb13276a8fbda7533d94e92e3af", "patch": "@@ -81,6 +81,7 @@ struct FunctionBuilder {\n     type_params: Option<ast::TypeParamList>,\n     params: ast::ParamList,\n     file: AssistFile,\n+    needs_pub: bool,\n }\n \n impl FunctionBuilder {\n@@ -90,24 +91,29 @@ impl FunctionBuilder {\n         ctx: &AssistCtx,\n         call: &ast::CallExpr,\n         path: &ast::Path,\n-        generate_in: Option<hir::InFile<hir::ModuleSource>>,\n+        target_module: Option<hir::InFile<hir::ModuleSource>>,\n     ) -> Option<Self> {\n+        let needs_pub = target_module.is_some();\n         let mut file = AssistFile::default();\n-        let target = if let Some(generate_in_module) = generate_in {\n-            let (in_file, target) = next_space_for_fn_in_module(ctx.sema.db, generate_in_module)?;\n+        let target = if let Some(target_module) = target_module {\n+            let (in_file, target) = next_space_for_fn_in_module(ctx.sema.db, target_module)?;\n             file = in_file;\n             target\n         } else {\n             next_space_for_fn_after_call_site(&call)?\n         };\n         let fn_name = fn_name(&path)?;\n         let (type_params, params) = fn_args(ctx, &call)?;\n-        Some(Self { target, fn_name, type_params, params, file })\n+        Some(Self { target, fn_name, type_params, params, file, needs_pub })\n     }\n+\n     fn render(self) -> Option<FunctionTemplate> {\n         let placeholder_expr = ast::make::expr_todo();\n         let fn_body = ast::make::block_expr(vec![], Some(placeholder_expr));\n-        let fn_def = ast::make::fn_def(self.fn_name, self.type_params, self.params, fn_body);\n+        let mut fn_def = ast::make::fn_def(self.fn_name, self.type_params, self.params, fn_body);\n+        if self.needs_pub {\n+            fn_def = ast::make::add_pub_crate_modifier(fn_def);\n+        }\n \n         let (fn_def, insert_offset) = match self.target {\n             GeneratedFunctionTarget::BehindItem(it) => {\n@@ -116,15 +122,14 @@ impl FunctionBuilder {\n                 (indented, it.text_range().end())\n             }\n             GeneratedFunctionTarget::InEmptyItemList(it) => {\n-                let with_leading_newline = ast::make::add_leading_newlines(1, fn_def);\n-                let indent = IndentLevel::from_node(it.syntax()).indented();\n-                let mut indented = indent.increase_indent(with_leading_newline);\n-                if !item_list_has_whitespace(&it) {\n-                    // In this case we want to make sure there's a newline between the closing\n-                    // function brace and the closing module brace (so it doesn't end in `}}`).\n-                    indented = ast::make::add_trailing_newlines(1, indented);\n-                }\n-                (indented, it.syntax().text_range().start() + TextUnit::from_usize(1))\n+                let indent_once = IndentLevel(1);\n+                let indent = IndentLevel::from_node(it.syntax());\n+\n+                let fn_def = ast::make::add_leading_newlines(1, fn_def);\n+                let fn_def = indent_once.increase_indent(fn_def);\n+                let fn_def = ast::make::add_trailing_newlines(1, fn_def);\n+                let fn_def = indent.increase_indent(fn_def);\n+                (fn_def, it.syntax().text_range().start() + TextUnit::from_usize(1))\n             }\n         };\n \n@@ -140,11 +145,6 @@ impl FunctionBuilder {\n     }\n }\n \n-/// Returns true if the given ItemList contains whitespace.\n-fn item_list_has_whitespace(it: &ast::ItemList) -> bool {\n-    it.syntax().descendants_with_tokens().find(|it| it.kind() == SyntaxKind::WHITESPACE).is_some()\n-}\n-\n enum GeneratedFunctionTarget {\n     BehindItem(SyntaxNode),\n     InEmptyItemList(ast::ItemList),\n@@ -803,29 +803,7 @@ fn foo() {\n \",\n             r\"\n mod bar {\n-    fn my_fn() {\n-        <|>todo!()\n-    }\n-}\n-\n-fn foo() {\n-    bar::my_fn()\n-}\n-\",\n-        );\n-        check_assist(\n-            add_function,\n-            r\"\n-mod bar {\n-}\n-\n-fn foo() {\n-    bar::my_fn<|>()\n-}\n-\",\n-            r\"\n-mod bar {\n-    fn my_fn() {\n+    pub(crate) fn my_fn() {\n         <|>todo!()\n     }\n }\n@@ -854,7 +832,7 @@ fn foo() {\n mod bar {\n     fn something_else() {}\n \n-    fn my_fn() {\n+    pub(crate) fn my_fn() {\n         <|>todo!()\n     }\n }\n@@ -872,8 +850,7 @@ fn foo() {\n             add_function,\n             r\"\n mod bar {\n-    mod baz {\n-    }\n+    mod baz {}\n }\n \n fn foo() {\n@@ -883,7 +860,7 @@ fn foo() {\n             r\"\n mod bar {\n     mod baz {\n-        fn my_fn() {\n+        pub(crate) fn my_fn() {\n             <|>todo!()\n         }\n     }"}, {"sha": "ee0f5cc406a47380b559b262f9f22bb18298cbf4", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2f882bc44a85eb13276a8fbda7533d94e92e3af/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f882bc44a85eb13276a8fbda7533d94e92e3af/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=f2f882bc44a85eb13276a8fbda7533d94e92e3af", "patch": "@@ -303,6 +303,10 @@ pub fn add_trailing_newlines(amount_of_newlines: usize, t: impl AstNode) -> ast:\n     ast_from_text(&format!(\"{}{}\", t.syntax(), newlines))\n }\n \n+pub fn add_pub_crate_modifier(fn_def: ast::FnDef) -> ast::FnDef {\n+    ast_from_text(&format!(\"pub(crate) {}\", fn_def))\n+}\n+\n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n     let node = parse.tree().syntax().descendants().find_map(N::cast).unwrap();"}]}