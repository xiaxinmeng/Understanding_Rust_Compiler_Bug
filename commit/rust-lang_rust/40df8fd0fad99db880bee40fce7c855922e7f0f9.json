{"sha": "40df8fd0fad99db880bee40fce7c855922e7f0f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZGY4ZmQwZmFkOTlkYjg4MGJlZTQwZmNlN2M4NTU5MjJlN2YwZjk=", "commit": {"author": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2020-07-20T18:39:17Z"}, "committer": {"name": "aticu", "email": "15schnic@gmail.com", "date": "2020-07-20T18:39:17Z"}, "message": "Apply #66379 to `*mut T` `as_ref`", "tree": {"sha": "2e3465255950a39c10797c95f842d53a933a23fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e3465255950a39c10797c95f842d53a933a23fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40df8fd0fad99db880bee40fce7c855922e7f0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40df8fd0fad99db880bee40fce7c855922e7f0f9", "html_url": "https://github.com/rust-lang/rust/commit/40df8fd0fad99db880bee40fce7c855922e7f0f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40df8fd0fad99db880bee40fce7c855922e7f0f9/comments", "author": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aticu", "id": 16419880, "node_id": "MDQ6VXNlcjE2NDE5ODgw", "avatar_url": "https://avatars.githubusercontent.com/u/16419880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aticu", "html_url": "https://github.com/aticu", "followers_url": "https://api.github.com/users/aticu/followers", "following_url": "https://api.github.com/users/aticu/following{/other_user}", "gists_url": "https://api.github.com/users/aticu/gists{/gist_id}", "starred_url": "https://api.github.com/users/aticu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aticu/subscriptions", "organizations_url": "https://api.github.com/users/aticu/orgs", "repos_url": "https://api.github.com/users/aticu/repos", "events_url": "https://api.github.com/users/aticu/events{/privacy}", "received_events_url": "https://api.github.com/users/aticu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9a3086363f214f2b56bef30f0ac572e1a9127f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9a3086363f214f2b56bef30f0ac572e1a9127f1", "html_url": "https://github.com/rust-lang/rust/commit/f9a3086363f214f2b56bef30f0ac572e1a9127f1"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "915dc3e45f6445274af2ba29a3ab5e18a43436ca", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/40df8fd0fad99db880bee40fce7c855922e7f0f9/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40df8fd0fad99db880bee40fce7c855922e7f0f9/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=40df8fd0fad99db880bee40fce7c855922e7f0f9", "patch": "@@ -47,17 +47,22 @@ impl<T: ?Sized> *mut T {\n     /// operation because the returned value could be pointing to invalid\n     /// memory.\n     ///\n-    /// When calling this method, you have to ensure that if the pointer is\n-    /// non-NULL, then it is properly aligned, dereferenceable (for the whole\n-    /// size of `T`) and points to an initialized instance of `T`. This applies\n-    /// even if the result of this method is unused!\n+    /// When calling this method, you have to ensure that *either* the pointer is NULL *or*\n+    /// all of the following is true:\n+    /// - it is properly aligned\n+    /// - it must point to an initialized instance of T; in particular, the pointer must be\n+    ///   \"dereferencable\" in the sense defined [here].\n+    ///\n+    /// This applies even if the result of this method is unused!\n     /// (The part about being initialized is not yet fully decided, but until\n     /// it is, the only safe approach is to ensure that they are indeed initialized.)\n     ///\n     /// Additionally, the lifetime `'a` returned is arbitrarily chosen and does\n-    /// not necessarily reflect the actual lifetime of the data. It is up to the\n-    /// caller to ensure that for the duration of this lifetime, the memory this\n-    /// pointer points to does not get written to outside of `UnsafeCell<U>`.\n+    /// not necessarily reflect the actual lifetime of the data. *You* must enforce\n+    /// Rust's aliasing rules. In particular, for the duration of this lifetime,\n+    /// the memory the pointer points to must not get mutated (except inside `UnsafeCell`).\n+    ///\n+    /// [here]: crate::ptr#safety\n     ///\n     /// # Examples\n     ///"}]}