{"sha": "a3e33cfb6e6eddf0e47bc98fd46075fab30978e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZTMzY2ZiNmU2ZWRkZjBlNDdiYzk4ZmQ0NjA3NWZhYjMwOTc4ZTE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-23T17:56:49Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-23T18:05:41Z"}, "message": "inline the primitive numeric operations", "tree": {"sha": "e2112426217b420dca6336590a368ff662fe6816", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2112426217b420dca6336590a368ff662fe6816"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1", "html_url": "https://github.com/rust-lang/rust/commit/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cadcc47ee0413bdb1b52a594fbed3a3cae75705", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cadcc47ee0413bdb1b52a594fbed3a3cae75705", "html_url": "https://github.com/rust-lang/rust/commit/8cadcc47ee0413bdb1b52a594fbed3a3cae75705"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "62004710196ec944af7a92889628f872e35ac93f", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=a3e33cfb6e6eddf0e47bc98fd46075fab30978e1", "patch": "@@ -301,40 +301,53 @@ impl num::One for f32 {\n \n #[cfg(notest)]\n impl Add<f32,f32> for f32 {\n+    #[inline(always)]\n     fn add(&self, other: &f32) -> f32 { *self + *other }\n }\n+\n #[cfg(notest)]\n impl Sub<f32,f32> for f32 {\n+    #[inline(always)]\n     fn sub(&self, other: &f32) -> f32 { *self - *other }\n }\n+\n #[cfg(notest)]\n impl Mul<f32,f32> for f32 {\n+    #[inline(always)]\n     fn mul(&self, other: &f32) -> f32 { *self * *other }\n }\n+\n #[cfg(stage0,notest)]\n impl Div<f32,f32> for f32 {\n+    #[inline(always)]\n     fn div(&self, other: &f32) -> f32 { *self / *other }\n }\n+\n #[cfg(stage1,notest)]\n #[cfg(stage2,notest)]\n #[cfg(stage3,notest)]\n impl Quot<f32,f32> for f32 {\n     #[inline(always)]\n     fn quot(&self, other: &f32) -> f32 { *self / *other }\n }\n+\n #[cfg(stage0,notest)]\n impl Modulo<f32,f32> for f32 {\n+    #[inline(always)]\n     fn modulo(&self, other: &f32) -> f32 { *self % *other }\n }\n+\n #[cfg(stage1,notest)]\n #[cfg(stage2,notest)]\n #[cfg(stage3,notest)]\n impl Rem<f32,f32> for f32 {\n     #[inline(always)]\n     fn rem(&self, other: &f32) -> f32 { *self % *other }\n }\n+\n #[cfg(notest)]\n impl Neg<f32> for f32 {\n+    #[inline(always)]\n     fn neg(&self) -> f32 { -*self }\n }\n "}, {"sha": "c5c1e52a14cd727fb4b471a7c65d235781a68183", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=a3e33cfb6e6eddf0e47bc98fd46075fab30978e1", "patch": "@@ -455,18 +455,25 @@ impl num::Round for float {\n \n #[cfg(notest)]\n impl Add<float,float> for float {\n+    #[inline(always)]\n     fn add(&self, other: &float) -> float { *self + *other }\n }\n+\n #[cfg(notest)]\n impl Sub<float,float> for float {\n+    #[inline(always)]\n     fn sub(&self, other: &float) -> float { *self - *other }\n }\n+\n #[cfg(notest)]\n impl Mul<float,float> for float {\n+    #[inline(always)]\n     fn mul(&self, other: &float) -> float { *self * *other }\n }\n+\n #[cfg(stage0,notest)]\n impl Div<float,float> for float {\n+    #[inline(always)]\n     fn div(&self, other: &float) -> float { *self / *other }\n }\n #[cfg(stage1,notest)]\n@@ -478,6 +485,7 @@ impl Quot<float,float> for float {\n }\n #[cfg(stage0,notest)]\n impl Modulo<float,float> for float {\n+    #[inline(always)]\n     fn modulo(&self, other: &float) -> float { *self % *other }\n }\n #[cfg(stage1,notest)]\n@@ -489,6 +497,7 @@ impl Rem<float,float> for float {\n }\n #[cfg(notest)]\n impl Neg<float> for float {\n+    #[inline(always)]\n     fn neg(&self) -> float { -*self }\n }\n "}, {"sha": "684083f53e9923fad450141715eec87d708caab6", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=a3e33cfb6e6eddf0e47bc98fd46075fab30978e1", "patch": "@@ -175,40 +175,53 @@ impl num::One for T {\n \n #[cfg(notest)]\n impl Add<T,T> for T {\n+    #[inline(always)]\n     fn add(&self, other: &T) -> T { *self + *other }\n }\n+\n #[cfg(notest)]\n impl Sub<T,T> for T {\n+    #[inline(always)]\n     fn sub(&self, other: &T) -> T { *self - *other }\n }\n+\n #[cfg(notest)]\n impl Mul<T,T> for T {\n+    #[inline(always)]\n     fn mul(&self, other: &T) -> T { *self * *other }\n }\n+\n #[cfg(stage0,notest)]\n impl Div<T,T> for T {\n+    #[inline(always)]\n     fn div(&self, other: &T) -> T { *self / *other }\n }\n+\n #[cfg(stage1,notest)]\n #[cfg(stage2,notest)]\n #[cfg(stage3,notest)]\n impl Quot<T,T> for T {\n     #[inline(always)]\n     fn quot(&self, other: &T) -> T { *self / *other }\n }\n+\n #[cfg(stage0,notest)]\n impl Modulo<T,T> for T {\n+    #[inline(always)]\n     fn modulo(&self, other: &T) -> T { *self % *other }\n }\n+\n #[cfg(stage1,notest)]\n #[cfg(stage2,notest)]\n #[cfg(stage3,notest)]\n impl Rem<T,T> for T {\n     #[inline(always)]\n     fn rem(&self, other: &T) -> T { *self % *other }\n }\n+\n #[cfg(notest)]\n impl Neg<T> for T {\n+    #[inline(always)]\n     fn neg(&self) -> T { -*self }\n }\n \n@@ -217,26 +230,31 @@ impl BitOr<T,T> for T {\n     #[inline(always)]\n     fn bitor(&self, other: &T) -> T { *self | *other }\n }\n+\n #[cfg(notest)]\n impl BitAnd<T,T> for T {\n     #[inline(always)]\n     fn bitand(&self, other: &T) -> T { *self & *other }\n }\n+\n #[cfg(notest)]\n impl BitXor<T,T> for T {\n     #[inline(always)]\n     fn bitxor(&self, other: &T) -> T { *self ^ *other }\n }\n+\n #[cfg(notest)]\n impl Shl<T,T> for T {\n     #[inline(always)]\n     fn shl(&self, other: &T) -> T { *self << *other }\n }\n+\n #[cfg(notest)]\n impl Shr<T,T> for T {\n     #[inline(always)]\n     fn shr(&self, other: &T) -> T { *self >> *other }\n }\n+\n #[cfg(notest)]\n impl Not<T> for T {\n     #[inline(always)]"}, {"sha": "4bb93907a3a5070f9b9ee72c7ba4a2e28c7a9c8f", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3e33cfb6e6eddf0e47bc98fd46075fab30978e1/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=a3e33cfb6e6eddf0e47bc98fd46075fab30978e1", "patch": "@@ -140,40 +140,53 @@ impl num::One for T {\n \n #[cfg(notest)]\n impl Add<T,T> for T {\n+    #[inline(always)]\n     fn add(&self, other: &T) -> T { *self + *other }\n }\n+\n #[cfg(notest)]\n impl Sub<T,T> for T {\n+    #[inline(always)]\n     fn sub(&self, other: &T) -> T { *self - *other }\n }\n+\n #[cfg(notest)]\n impl Mul<T,T> for T {\n+    #[inline(always)]\n     fn mul(&self, other: &T) -> T { *self * *other }\n }\n+\n #[cfg(stage0,notest)]\n impl Div<T,T> for T {\n+    #[inline(always)]\n     fn div(&self, other: &T) -> T { *self / *other }\n }\n+\n #[cfg(stage1,notest)]\n #[cfg(stage2,notest)]\n #[cfg(stage3,notest)]\n impl Quot<T,T> for T {\n     #[inline(always)]\n     fn quot(&self, other: &T) -> T { *self / *other }\n }\n+\n #[cfg(stage0,notest)]\n impl Modulo<T,T> for T {\n+    #[inline(always)]\n     fn modulo(&self, other: &T) -> T { *self % *other }\n }\n+\n #[cfg(stage1,notest)]\n #[cfg(stage2,notest)]\n #[cfg(stage3,notest)]\n impl Rem<T,T> for T {\n     #[inline(always)]\n     fn rem(&self, other: &T) -> T { *self % *other }\n }\n+\n #[cfg(notest)]\n impl Neg<T> for T {\n+    #[inline(always)]\n     fn neg(&self) -> T { -*self }\n }\n \n@@ -182,26 +195,31 @@ impl BitOr<T,T> for T {\n     #[inline(always)]\n     fn bitor(&self, other: &T) -> T { *self | *other }\n }\n+\n #[cfg(notest)]\n impl BitAnd<T,T> for T {\n     #[inline(always)]\n     fn bitand(&self, other: &T) -> T { *self & *other }\n }\n+\n #[cfg(notest)]\n impl BitXor<T,T> for T {\n     #[inline(always)]\n     fn bitxor(&self, other: &T) -> T { *self ^ *other }\n }\n+\n #[cfg(notest)]\n impl Shl<T,T> for T {\n     #[inline(always)]\n     fn shl(&self, other: &T) -> T { *self << *other }\n }\n+\n #[cfg(notest)]\n impl Shr<T,T> for T {\n     #[inline(always)]\n     fn shr(&self, other: &T) -> T { *self >> *other }\n }\n+\n #[cfg(notest)]\n impl Not<T> for T {\n     #[inline(always)]"}]}