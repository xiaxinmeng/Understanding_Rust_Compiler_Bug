{"sha": "924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNGQ0ZDdjYThiY2U5NDhiOGNiYjMwZWY2ZGExNzM1NGU0OGJhZDM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-16T16:45:30Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-16T16:45:30Z"}, "message": "Merge #1411\n\n1411: add analysis-bench to benchmark incremental analysis r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "022742121ea273b6e90f6fbfa342660f46e9f68e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022742121ea273b6e90f6fbfa342660f46e9f68e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "html_url": "https://github.com/rust-lang/rust/commit/924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b81caed43f1886024ededad41a1baa8a03f1d2f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b81caed43f1886024ededad41a1baa8a03f1d2f4", "html_url": "https://github.com/rust-lang/rust/commit/b81caed43f1886024ededad41a1baa8a03f1d2f4"}, {"sha": "6314e62cfb06ea7bbe5f530f2824010be0ffa4c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6314e62cfb06ea7bbe5f530f2824010be0ffa4c7", "html_url": "https://github.com/rust-lang/rust/commit/6314e62cfb06ea7bbe5f530f2824010be0ffa4c7"}], "stats": {"total": 326, "additions": 245, "deletions": 81}, "files": [{"sha": "43d3fb7e3afbac9cf6a3ea7c40e1ae1e157e5d82", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "patch": "@@ -8,7 +8,7 @@ use ra_db::{\n     CrateGraph, FileId, SourceRootId,\n };\n use ra_ide_api::{AnalysisHost, AnalysisChange};\n-use ra_project_model::ProjectWorkspace;\n+use ra_project_model::{ProjectWorkspace, ProjectRoot};\n use ra_vfs::{Vfs, VfsChange};\n use vfs_filter::IncludeRustFiles;\n \n@@ -21,31 +21,39 @@ fn vfs_root_to_id(r: ra_vfs::VfsRoot) -> SourceRootId {\n     SourceRootId(r.0)\n }\n \n-pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, Vec<SourceRootId>)> {\n+pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId, ProjectRoot>)> {\n     let root = std::env::current_dir()?.join(root);\n     let ws = ProjectWorkspace::discover(root.as_ref())?;\n-    let mut roots = Vec::new();\n-    roots.push(IncludeRustFiles::member(root.clone()));\n-    roots.extend(IncludeRustFiles::from_roots(ws.to_roots()));\n-    let (mut vfs, roots) = Vfs::new(roots);\n+    let project_roots = ws.to_roots();\n+    let (mut vfs, roots) = Vfs::new(IncludeRustFiles::from_roots(project_roots.clone()).collect());\n     let crate_graph = ws.to_crate_graph(&mut |path: &Path| {\n         let vfs_file = vfs.load(path);\n         log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n         vfs_file.map(vfs_file_to_id)\n     });\n     log::debug!(\"crate graph: {:?}\", crate_graph);\n \n-    let local_roots = roots\n-        .into_iter()\n-        .filter(|r| vfs.root2path(*r).starts_with(&root))\n-        .map(vfs_root_to_id)\n-        .collect();\n-\n-    let host = load(root.as_path(), crate_graph, &mut vfs);\n-    Ok((host, local_roots))\n+    let source_roots = roots\n+        .iter()\n+        .map(|&vfs_root| {\n+            let source_root_id = vfs_root_to_id(vfs_root);\n+            let project_root = project_roots\n+                .iter()\n+                .find(|it| it.path() == &vfs.root2path(vfs_root))\n+                .unwrap()\n+                .clone();\n+            (source_root_id, project_root)\n+        })\n+        .collect::<FxHashMap<_, _>>();\n+    let host = load(&source_roots, crate_graph, &mut vfs);\n+    Ok((host, source_roots))\n }\n \n-pub fn load(project_root: &Path, crate_graph: CrateGraph, vfs: &mut Vfs) -> AnalysisHost {\n+pub fn load(\n+    source_roots: &FxHashMap<SourceRootId, ProjectRoot>,\n+    crate_graph: CrateGraph,\n+    vfs: &mut Vfs,\n+) -> AnalysisHost {\n     let lru_cap = std::env::var(\"RA_LRU_CAP\").ok().and_then(|it| it.parse::<usize>().ok());\n     let mut host = AnalysisHost::new(lru_cap);\n     let mut analysis_change = AnalysisChange::new();\n@@ -60,8 +68,8 @@ pub fn load(project_root: &Path, crate_graph: CrateGraph, vfs: &mut Vfs) -> Anal\n         for change in vfs.commit_changes() {\n             match change {\n                 VfsChange::AddRoot { root, files } => {\n-                    let is_local = vfs.root2path(root).starts_with(&project_root);\n                     let source_root_id = vfs_root_to_id(root);\n+                    let is_local = source_roots[&source_root_id].is_member();\n                     log::debug!(\n                         \"loaded source root {:?} with path {:?}\",\n                         source_root_id,\n@@ -106,7 +114,7 @@ mod tests {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n         let (host, roots) = load_cargo(path).unwrap();\n         let mut n_crates = 0;\n-        for root in roots {\n+        for (root, _) in roots {\n             for _krate in Crate::source_root_crates(host.raw_database(), root) {\n                 n_crates += 1;\n             }"}, {"sha": "8552ac999ca555d7dbb7310832beb17882a46e92", "filename": "crates/ra_batch/src/vfs_filter.rs", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs?ref=924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "patch": "@@ -1,54 +1,54 @@\n-use std::path::PathBuf;\r\n-use ra_project_model::ProjectRoot;\r\n-use ra_vfs::{RootEntry, Filter, RelativePath};\r\n-\r\n-/// `IncludeRustFiles` is used to convert\r\n-/// from `ProjectRoot` to `RootEntry` for VFS\r\n-pub struct IncludeRustFiles {\r\n-    root: ProjectRoot,\r\n-}\r\n-\r\n-impl IncludeRustFiles {\r\n-    pub fn from_roots<R>(roots: R) -> impl Iterator<Item = RootEntry>\r\n-    where\r\n-        R: IntoIterator<Item = ProjectRoot>,\r\n-    {\r\n-        roots.into_iter().map(IncludeRustFiles::from_root)\r\n-    }\r\n-\r\n-    pub fn from_root(root: ProjectRoot) -> RootEntry {\r\n-        IncludeRustFiles::from(root).into()\r\n-    }\r\n-\r\n-    #[allow(unused)]\r\n-    pub fn external(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::from_root(ProjectRoot::new(path, false))\r\n-    }\r\n-\r\n-    pub fn member(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::from_root(ProjectRoot::new(path, true))\r\n-    }\r\n-}\r\n-\r\n-impl Filter for IncludeRustFiles {\r\n-    fn include_dir(&self, dir_path: &RelativePath) -> bool {\r\n-        self.root.include_dir(dir_path)\r\n-    }\r\n-\r\n-    fn include_file(&self, file_path: &RelativePath) -> bool {\r\n-        self.root.include_file(file_path)\r\n-    }\r\n-}\r\n-\r\n-impl std::convert::From<ProjectRoot> for IncludeRustFiles {\r\n-    fn from(v: ProjectRoot) -> IncludeRustFiles {\r\n-        IncludeRustFiles { root: v }\r\n-    }\r\n-}\r\n-\r\n-impl std::convert::From<IncludeRustFiles> for RootEntry {\r\n-    fn from(v: IncludeRustFiles) -> RootEntry {\r\n-        let path = v.root.path().clone();\r\n-        RootEntry::new(path, Box::new(v))\r\n-    }\r\n-}\r\n+use std::path::PathBuf;\n+use ra_project_model::ProjectRoot;\n+use ra_vfs::{RootEntry, Filter, RelativePath};\n+\n+/// `IncludeRustFiles` is used to convert\n+/// from `ProjectRoot` to `RootEntry` for VFS\n+pub struct IncludeRustFiles {\n+    root: ProjectRoot,\n+}\n+\n+impl IncludeRustFiles {\n+    pub fn from_roots<R>(roots: R) -> impl Iterator<Item = RootEntry>\n+    where\n+        R: IntoIterator<Item = ProjectRoot>,\n+    {\n+        roots.into_iter().map(IncludeRustFiles::from_root)\n+    }\n+\n+    pub fn from_root(root: ProjectRoot) -> RootEntry {\n+        IncludeRustFiles::from(root).into()\n+    }\n+\n+    #[allow(unused)]\n+    pub fn external(path: PathBuf) -> RootEntry {\n+        IncludeRustFiles::from_root(ProjectRoot::new(path, false))\n+    }\n+\n+    pub fn member(path: PathBuf) -> RootEntry {\n+        IncludeRustFiles::from_root(ProjectRoot::new(path, true))\n+    }\n+}\n+\n+impl Filter for IncludeRustFiles {\n+    fn include_dir(&self, dir_path: &RelativePath) -> bool {\n+        self.root.include_dir(dir_path)\n+    }\n+\n+    fn include_file(&self, file_path: &RelativePath) -> bool {\n+        self.root.include_file(file_path)\n+    }\n+}\n+\n+impl From<ProjectRoot> for IncludeRustFiles {\n+    fn from(v: ProjectRoot) -> IncludeRustFiles {\n+        IncludeRustFiles { root: v }\n+    }\n+}\n+\n+impl From<IncludeRustFiles> for RootEntry {\n+    fn from(v: IncludeRustFiles) -> RootEntry {\n+        let path = v.root.path().clone();\n+        RootEntry::new(path, Box::new(v))\n+    }\n+}"}, {"sha": "33d47283877210d09715221d74bc564a9f20f836", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "patch": "@@ -0,0 +1,92 @@\n+use std::{\n+    path::{PathBuf, Path},\n+    time::Instant,\n+};\n+\n+use ra_db::{SourceDatabase, salsa::Database};\n+use ra_ide_api::{AnalysisHost, Analysis, LineCol, FilePosition};\n+\n+use crate::Result;\n+\n+pub(crate) enum Op {\n+    Highlight { path: PathBuf },\n+    Complete { path: PathBuf, line: u32, column: u32 },\n+}\n+\n+pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n+    let start = Instant::now();\n+    eprint!(\"loading: \");\n+    let (host, roots) = ra_batch::load_cargo(path)?;\n+    let db = host.raw_database();\n+    eprintln!(\"{:?}\\n\", start.elapsed());\n+\n+    let file_id = {\n+        let path = match &op {\n+            Op::Highlight { path } => path,\n+            Op::Complete { path, .. } => path,\n+        };\n+        let path = std::env::current_dir()?.join(path).canonicalize()?;\n+        roots\n+            .iter()\n+            .find_map(|(source_root_id, project_root)| {\n+                if project_root.is_member() {\n+                    for (rel_path, file_id) in &db.source_root(*source_root_id).files {\n+                        let abs_path = rel_path.to_path(project_root.path());\n+                        if abs_path == path {\n+                            return Some(*file_id);\n+                        }\n+                    }\n+                }\n+                None\n+            })\n+            .ok_or_else(|| format!(\"Can't find {:?}\", path))?\n+    };\n+\n+    match op {\n+        Op::Highlight { .. } => {\n+            let res = do_work(&host, |analysis| {\n+                analysis.diagnostics(file_id).unwrap();\n+                analysis.highlight_as_html(file_id, false).unwrap()\n+            });\n+            if verbose {\n+                println!(\"\\n{}\", res);\n+            }\n+        }\n+        Op::Complete { line, column, .. } => {\n+            let offset = host\n+                .analysis()\n+                .file_line_index(file_id)\n+                .offset(LineCol { line, col_utf16: column });\n+            let file_postion = FilePosition { file_id, offset };\n+\n+            let res = do_work(&host, |analysis| analysis.completions(file_postion));\n+            if verbose {\n+                println!(\"\\n{:#?}\", res);\n+            }\n+        }\n+    }\n+    Ok(())\n+}\n+\n+fn do_work<F: Fn(&Analysis) -> T, T>(host: &AnalysisHost, work: F) -> T {\n+    {\n+        let start = Instant::now();\n+        eprint!(\"from scratch:   \");\n+        work(&host.analysis());\n+        eprintln!(\"{:?}\", start.elapsed());\n+    }\n+    {\n+        let start = Instant::now();\n+        eprint!(\"no change:      \");\n+        work(&host.analysis());\n+        eprintln!(\"{:?}\", start.elapsed());\n+    }\n+    {\n+        let start = Instant::now();\n+        eprint!(\"trivial change: \");\n+        host.raw_database().salsa_runtime().next_revision();\n+        let res = work(&host.analysis());\n+        eprintln!(\"{:?}\", start.elapsed());\n+        res\n+    }\n+}"}, {"sha": "ed98fc7f655b222e4f1ac6c7aa8228d27dc55706", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "patch": "@@ -1,25 +1,28 @@\n-use std::{collections::HashSet, time::Instant, fmt::Write};\n+use std::{collections::HashSet, time::Instant, fmt::Write, path::Path};\n \n use ra_db::SourceDatabase;\n use ra_hir::{Crate, ModuleDef, Ty, ImplItem, HasSource};\n use ra_syntax::AstNode;\n \n use crate::Result;\n \n-pub fn run(verbose: bool, path: &str, only: Option<&str>) -> Result<()> {\n+pub fn run(verbose: bool, path: &Path, only: Option<&str>) -> Result<()> {\n     let db_load_time = Instant::now();\n-    let (host, roots) = ra_batch::load_cargo(path.as_ref())?;\n+    let (host, roots) = ra_batch::load_cargo(path)?;\n     let db = host.raw_database();\n     println!(\"Database loaded, {} roots, {:?}\", roots.len(), db_load_time.elapsed());\n     let analysis_time = Instant::now();\n     let mut num_crates = 0;\n     let mut visited_modules = HashSet::new();\n     let mut visit_queue = Vec::new();\n-    for root in roots {\n-        for krate in Crate::source_root_crates(db, root) {\n-            num_crates += 1;\n-            let module = krate.root_module(db).expect(\"crate in source root without root module\");\n-            visit_queue.push(module);\n+    for (source_root_id, project_root) in roots {\n+        if project_root.is_member() {\n+            for krate in Crate::source_root_crates(db, source_root_id) {\n+                num_crates += 1;\n+                let module =\n+                    krate.root_module(db).expect(\"crate in source root without root module\");\n+                visit_queue.push(module);\n+            }\n         }\n     }\n     println!(\"Crates in this dir: {}\", num_crates);"}, {"sha": "5adf8b09676e7299f59a776f3e50b2ca82f3f0b0", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "patch": "@@ -1,4 +1,5 @@\n mod analysis_stats;\n+mod analysis_bench;\n \n use std::{io::Read, error::Error};\n \n@@ -26,6 +27,27 @@ fn main() -> Result<()> {\n                 .arg(Arg::with_name(\"only\").short(\"o\").takes_value(true))\n                 .arg(Arg::with_name(\"path\")),\n         )\n+        .subcommand(\n+            SubCommand::with_name(\"analysis-bench\")\n+                .arg(Arg::with_name(\"verbose\").short(\"v\").long(\"verbose\"))\n+                .arg(\n+                    Arg::with_name(\"highlight\")\n+                        .long(\"highlight\")\n+                        .takes_value(true)\n+                        .conflicts_with(\"complete\")\n+                        .value_name(\"PATH\")\n+                        .help(\"highlight this file\"),\n+                )\n+                .arg(\n+                    Arg::with_name(\"complete\")\n+                        .long(\"complete\")\n+                        .takes_value(true)\n+                        .conflicts_with(\"highlight\")\n+                        .value_name(\"PATH:LINE:COLUMN\")\n+                        .help(\"compute completions at this location\"),\n+                )\n+                .arg(Arg::with_name(\"path\").value_name(\"PATH\").help(\"project to analyze\")),\n+        )\n         .get_matches();\n     match matches.subcommand() {\n         (\"parse\", Some(matches)) => {\n@@ -51,7 +73,25 @@ fn main() -> Result<()> {\n             let verbose = matches.is_present(\"verbose\");\n             let path = matches.value_of(\"path\").unwrap_or(\"\");\n             let only = matches.value_of(\"only\");\n-            analysis_stats::run(verbose, path, only)?;\n+            analysis_stats::run(verbose, path.as_ref(), only)?;\n+        }\n+        (\"analysis-bench\", Some(matches)) => {\n+            let verbose = matches.is_present(\"verbose\");\n+            let path = matches.value_of(\"path\").unwrap_or(\"\");\n+            let op = if let Some(path) = matches.value_of(\"highlight\") {\n+                analysis_bench::Op::Highlight { path: path.into() }\n+            } else if let Some(path_line_col) = matches.value_of(\"complete\") {\n+                let (path_line, column) = rsplit_at_char(path_line_col, ':')?;\n+                let (path, line) = rsplit_at_char(path_line, ':')?;\n+                analysis_bench::Op::Complete {\n+                    path: path.into(),\n+                    line: line.parse()?,\n+                    column: column.parse()?,\n+                }\n+            } else {\n+                panic!(\"either --highlight or --complete must be set\")\n+            };\n+            analysis_bench::run(verbose, path.as_ref(), op)?;\n         }\n         _ => unreachable!(),\n     }\n@@ -68,3 +108,8 @@ fn read_stdin() -> Result<String> {\n     std::io::stdin().read_to_string(&mut buff)?;\n     Ok(buff)\n }\n+\n+fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n+    let idx = s.rfind(\":\").ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n+    Ok((&s[..idx], &s[idx + 1..]))\n+}"}, {"sha": "e61d5627e0012e23bdd85d5fe6d26d9c6a781aa9", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "patch": "@@ -276,7 +276,7 @@ impl AnalysisHost {\n     pub fn collect_garbage(&mut self) {\n         self.db.collect_garbage();\n     }\n-    pub fn raw_database(&self) -> &impl hir::db::HirDatabase {\n+    pub fn raw_database(&self) -> &(impl hir::db::HirDatabase + salsa::Database) {\n         &self.db\n     }\n }"}, {"sha": "a53cf9ee0062dbbd48e8bc6295e9f6a727ab1ba0", "filename": "crates/ra_ide_api/src/line_index.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs?ref=924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "patch": "@@ -10,7 +10,9 @@ pub struct LineIndex {\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct LineCol {\n+    /// Zero-based\n     pub line: u32,\n+    /// Zero-based\n     pub col_utf16: u32,\n }\n "}, {"sha": "42156bea6fe83d3c4dd1adde38a87228bd206b7a", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "patch": "@@ -37,6 +37,7 @@ pub enum ProjectWorkspace {\n /// `ProjectRoot` describes a workspace root folder.\n /// Which may be an external dependency, or a member of\n /// the current workspace.\n+#[derive(Clone)]\n pub struct ProjectRoot {\n     /// Path to the root folder\n     path: PathBuf,"}, {"sha": "3dc37e86ebaac7aabadab760f2f83f5672c11ea9", "filename": "docs/dev/README.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/924d4d7ca8bce948b8cbb30ef6da17354e48bad3/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=924d4d7ca8bce948b8cbb30ef6da17354e48bad3", "patch": "@@ -147,3 +147,16 @@ RA_PROFILE=*@3>10        // dump everything, up to depth 3, if it takes more tha\n ```\n \n In particular, I have `export RA_PROFILE='*>10' in my shell profile.\n+\n+To measure time for from-scratch analysis, use something like this:\n+\n+```\n+$ cargo run --release -p ra_cli -- analysis-stats ../chalk/\n+```\n+\n+For measuring time of incremental analysis, use either of these:\n+\n+```\n+$ cargo run --release -p ra_cli -- analysis-bench ../chalk/ --highlight ../chalk/chalk-engine/src/logic.rs\n+$ cargo run --release -p ra_cli -- analysis-bench ../chalk/ --complete ../chalk/chalk-engine/src/logic.rs:94:0\n+```"}]}