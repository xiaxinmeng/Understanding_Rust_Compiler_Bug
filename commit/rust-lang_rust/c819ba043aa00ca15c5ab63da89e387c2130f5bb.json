{"sha": "c819ba043aa00ca15c5ab63da89e387c2130f5bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTliYTA0M2FhMDBjYTE1YzVhYjYzZGE4OWUzODdjMjEzMGY1YmI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-27T11:05:41Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-06T13:25:18Z"}, "message": "Add comments and misc changes", "tree": {"sha": "624bdda3d7660fd33a188304d3748fa809985971", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/624bdda3d7660fd33a188304d3748fa809985971"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c819ba043aa00ca15c5ab63da89e387c2130f5bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c819ba043aa00ca15c5ab63da89e387c2130f5bb", "html_url": "https://github.com/rust-lang/rust/commit/c819ba043aa00ca15c5ab63da89e387c2130f5bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c819ba043aa00ca15c5ab63da89e387c2130f5bb/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302aae58648aed753ecb9752ff01534b42a97f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/302aae58648aed753ecb9752ff01534b42a97f69", "html_url": "https://github.com/rust-lang/rust/commit/302aae58648aed753ecb9752ff01534b42a97f69"}], "stats": {"total": 119, "additions": 92, "deletions": 27}, "files": [{"sha": "8b8f84201630efcbff4f9df12d9df082acfa9677", "filename": "src/librustc/ty/maps/job.rs", "status": "modified", "additions": 92, "deletions": 27, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/c819ba043aa00ca15c5ab63da89e387c2130f5bb/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c819ba043aa00ca15c5ab63da89e387c2130f5bb/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fjob.rs?ref=c819ba043aa00ca15c5ab63da89e387c2130f5bb", "patch": "@@ -194,19 +194,25 @@ impl<'tcx> QueryLatch<'tcx> {\n         }\n     }\n \n+    /// Awaits the caller on this latch by blocking the current thread.\n     fn await(&self, waiter: &mut QueryWaiter<'tcx>) {\n         let mut info = self.info.lock();\n         if !info.complete {\n+            // We push the waiter on to the `waiters` list. It can be accessed inside\n+            // the `wait` call below, by 1) the `set` method or 2) by deadlock detection.\n+            // Both of these will remove it from the `waiters` list before resuming\n+            // this thread.\n             info.waiters.push(waiter);\n-            let condvar = &waiter.condvar;\n+\n             // If this detects a deadlock and the deadlock handler want to resume this thread\n             // we have to be in the `wait` call. This is ensured by the deadlock handler\n             // getting the self.info lock.\n             rayon_core::mark_blocked();\n-            condvar.wait(&mut info);\n+            waiter.condvar.wait(&mut info);\n         }\n     }\n \n+    /// Sets the latch and resumes all waiters on it\n     fn set(&self) {\n         let mut info = self.info.lock();\n         debug_assert!(!info.complete);\n@@ -219,46 +225,56 @@ impl<'tcx> QueryLatch<'tcx> {\n         }\n     }\n \n-    fn resume_waiter(\n+    /// Remove a single waiter from the list of waiters.\n+    /// This is used to break query cycles.\n+    fn extract_waiter(\n         &self,\n         waiter: usize,\n-        error: CycleError<'tcx>\n     ) -> *mut QueryWaiter<'tcx> {\n         let mut info = self.info.lock();\n         debug_assert!(!info.complete);\n         // Remove the waiter from the list of waiters\n-        let waiter = info.waiters.remove(waiter);\n-\n-        // Set the cycle error it will be picked it up when resumed\n-        unsafe {\n-            (*waiter).cycle = Some(error);\n-        }\n-\n-        waiter\n+        info.waiters.remove(waiter)\n     }\n }\n \n+/// A pointer to an active query job. This is used to give query jobs an identity.\n #[cfg(parallel_queries)]\n type Ref<'tcx> = *const QueryJob<'tcx>;\n \n+/// A resumable waiter of a query. The usize is the index into waiters in the query's latch\n #[cfg(parallel_queries)]\n type Waiter<'tcx> = (Ref<'tcx>, usize);\n \n+/// Visits all the non-resumable and resumable waiters of a query.\n+/// Only waiters in a query are visited.\n+/// `visit` is called for every waiter and is passed a query waiting on `query_ref`\n+/// and a span indicating the reason the query waited on `query_ref`.\n+/// If `visit` returns Some, this function returns.\n+/// For visits of non-resumable waiters it returns the return value of `visit`.\n+/// For visits of resumable waiters it returns Some(Some(Waiter)) which has the\n+/// required information to resume the waiter.\n+/// If all `visit` calls returns None, this function also returns None.\n #[cfg(parallel_queries)]\n fn visit_waiters<'tcx, F>(query_ref: Ref<'tcx>, mut visit: F) -> Option<Option<Waiter<'tcx>>>\n where\n     F: FnMut(Span, Ref<'tcx>) -> Option<Option<Waiter<'tcx>>>\n {\n     let query = unsafe { &*query_ref };\n+\n+    // Visit the parent query which is a non-resumable waiter since it's on the same stack\n     if let Some(ref parent) = query.parent {\n         if let Some(cycle) = visit(query.info.span, &**parent as Ref) {\n             return Some(cycle);\n         }\n     }\n+\n+    // Visit the explict waiters which use condvars and are resumable\n     for (i, &waiter) in query.latch.info.lock().waiters.iter().enumerate() {\n         unsafe {\n             if let Some(ref waiter_query) = *(*waiter).query {\n                 if visit((*waiter).span, &**waiter_query as Ref).is_some() {\n+                    // Return a value which indicates that this waiter can be resumed\n                     return Some(Some((query_ref, i)));\n                 }\n             }\n@@ -267,13 +283,19 @@ where\n     None\n }\n \n+/// Look for query cycles by doing a depth first search starting at `query`.\n+/// `span` is the reason for the `query` to execute. This is initially DUMMY_SP.\n+/// If a cycle is detected, this initial value is replaced with the span causing\n+/// the cycle.\n #[cfg(parallel_queries)]\n fn cycle_check<'tcx>(query: Ref<'tcx>,\n                      span: Span,\n                      stack: &mut Vec<(Span, Ref<'tcx>)>,\n                      visited: &mut HashSet<Ref<'tcx>>) -> Option<Option<Waiter<'tcx>>> {\n     if visited.contains(&query) {\n         return if let Some(p) = stack.iter().position(|q| q.1 == query) {\n+            // We detected a query cycle, fix up the initial span and return Some\n+\n             // Remove previous stack entries\n             stack.splice(0..p, iter::empty());\n             // Replace the span for the first query with the cycle cause\n@@ -284,26 +306,34 @@ fn cycle_check<'tcx>(query: Ref<'tcx>,\n         }\n     }\n \n+    // Mark this query is visited and add it to the stack\n     visited.insert(query);\n     stack.push((span, query));\n \n+    // Visit all the waiters\n     let r = visit_waiters(query, |span, successor| {\n         cycle_check(successor, span, stack, visited)\n     });\n \n+    // Remove the entry in our stack if we didn't find a cycle\n     if r.is_none() {\n         stack.pop();\n     }\n \n     r\n }\n \n+/// Finds out if there's a path to the compiler root (aka. code which isn't in a query)\n+/// from `query` without going through any of the queries in `visited`.\n+/// This is achieved with a depth first search.\n #[cfg(parallel_queries)]\n fn connected_to_root<'tcx>(query: Ref<'tcx>, visited: &mut HashSet<Ref<'tcx>>) -> bool {\n+    // We already visited this or we're deliberately ignoring it\n     if visited.contains(&query) {\n         return false;\n     }\n \n+    // This query is connected to the root (it has no query parent), return true\n     if unsafe { (*query).parent.is_none() } {\n         return true;\n     }\n@@ -321,43 +351,43 @@ fn connected_to_root<'tcx>(query: Ref<'tcx>, visited: &mut HashSet<Ref<'tcx>>) -\n     }).is_some()\n }\n \n-#[cfg(parallel_queries)]\n-fn query_entry<'tcx>(r: Ref<'tcx>) -> QueryInfo<'tcx> {\n-    unsafe { (*r).info.clone() }\n-}\n-\n+/// Looks for query cycles starting from the last query in `jobs`.\n+/// If a cycle is found, all queries in the cycle is removed from `jobs` and\n+/// the function return true.\n+/// If a cycle was not found, the starting query is removed from `jobs` and\n+/// the function returns false.\n #[cfg(parallel_queries)]\n fn remove_cycle<'tcx>(\n     jobs: &mut Vec<Ref<'tcx>>,\n     wakelist: &mut Vec<*mut QueryWaiter<'tcx>>,\n     tcx: TyCtxt<'_, 'tcx, '_>\n-) {\n+) -> bool {\n     let mut visited = HashSet::new();\n     let mut stack = Vec::new();\n+    // Look for a cycle starting with the last query in `jobs`\n     if let Some(waiter) = cycle_check(jobs.pop().unwrap(),\n                                       DUMMY_SP,\n                                       &mut stack,\n                                       &mut visited) {\n         // Reverse the stack so earlier entries require later entries\n         stack.reverse();\n \n+        // Extract the spans and queries into separate arrays\n         let mut spans: Vec<_> = stack.iter().map(|e| e.0).collect();\n         let queries = stack.iter().map(|e| e.1);\n \n-        // Shift the spans so that a query is matched the span for its waitee\n+        // Shift the spans so that queries are matched with the span for their waitee\n         let last = spans.pop().unwrap();\n         spans.insert(0, last);\n \n+        // Zip them back together\n         let mut stack: Vec<_> = spans.into_iter().zip(queries).collect();\n \n         // Remove the queries in our cycle from the list of jobs to look at\n         for r in &stack {\n             jobs.remove_item(&r.1);\n         }\n \n-        let (waitee_query, waiter_idx) = waiter.unwrap();\n-        let waitee_query = unsafe { &*waitee_query };\n-\n         // Find the queries in the cycle which are\n         // connected to queries outside the cycle\n         let entry_points: Vec<Ref<'_>> = stack.iter().filter_map(|query| {\n@@ -392,6 +422,7 @@ fn remove_cycle<'tcx>(\n             stack.insert(0, last);\n         }\n \n+        // Create the cycle error\n         let mut error = CycleError {\n             usage: None,\n             cycle: stack.iter().map(|&(s, q)| QueryInfo {\n@@ -400,10 +431,30 @@ fn remove_cycle<'tcx>(\n             } ).collect(),\n         };\n \n-        wakelist.push(waitee_query.latch.resume_waiter(waiter_idx, error));\n+        // We unwrap `waiter` here since there must always be one\n+        // edge which is resumeable / waited using a query latch\n+        let (waitee_query, waiter_idx) = waiter.unwrap();\n+        let waitee_query = unsafe { &*waitee_query };\n+\n+        // Extract the waiter we want to resume\n+        let waiter = waitee_query.latch.extract_waiter(waiter_idx);\n+\n+        // Set the cycle error it will be picked it up when resumed\n+        unsafe {\n+            (*waiter).cycle = Some(error);\n+        }\n+\n+        // Put the waiter on the list of things to resume\n+        wakelist.push(waiter);\n+\n+        true\n+    } else {\n+        false\n     }\n }\n \n+/// Creates a new thread and forwards information in thread locals to it.\n+/// The new thread runs the deadlock handler.\n #[cfg(parallel_queries)]\n pub fn handle_deadlock() {\n     use syntax;\n@@ -440,6 +491,11 @@ pub fn handle_deadlock() {\n     });\n }\n \n+/// Detects query cycles by using depth first search over all active query jobs.\n+/// If a query cycle is found it will break the cycle by finding an edge which\n+/// uses a query latch and then resuming that waiter.\n+/// There may be multiple cycles involved in a deadlock, so this searches\n+/// all active queries for cycles before finally resuming all the waiters at once.\n #[cfg(parallel_queries)]\n fn deadlock(tcx: TyCtxt<'_, '_, '_>, registry: &rayon_core::Registry) {\n     let on_panic = OnDrop(|| {\n@@ -450,13 +506,22 @@ fn deadlock(tcx: TyCtxt<'_, '_, '_>, registry: &rayon_core::Registry) {\n     let mut wakelist = Vec::new();\n     let mut jobs: Vec<_> = tcx.maps.collect_active_jobs().iter().map(|j| &**j as Ref).collect();\n \n+    let mut found_cycle = false;\n+\n     while jobs.len() > 0 {\n-        remove_cycle(&mut jobs, &mut wakelist, tcx);\n+        if remove_cycle(&mut jobs, &mut wakelist, tcx) {\n+            found_cycle = true;\n+        }\n     }\n \n-    // FIXME: Panic if no cycle is detected\n-\n-    // FIXME: Write down the conditions when a deadlock happens without a cycle\n+    // Check that a cycle was found. It is possible for a deadlock to occur without\n+    // a query cycle if a query which can be waited on uses Rayon to do multithreading\n+    // internally. Such a query (X) may be executing on 2 threads (A and B) and A may\n+    // wait using Rayon on B. Rayon may then switch to executing another query (Y)\n+    // which in turn will wait on X causing a deadlock. We have a false dependency from\n+    // X to Y due to Rayon waiting and a true dependency from Y to X. The algorithm here\n+    // only considers the true dependency and won't detect a cycle.\n+    assert!(found_cycle);\n \n     // FIXME: Ensure this won't cause a deadlock before we return\n     for waiter in wakelist.into_iter() {"}]}