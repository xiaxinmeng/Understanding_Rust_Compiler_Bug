{"sha": "932ea641758e2fe20500151e80a4968cc0799078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMmVhNjQxNzU4ZTJmZTIwNTAwMTUxZTgwYTQ5NjhjYzA3OTkwNzg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-12T15:18:32Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T09:23:22Z"}, "message": "compiletest: Remove `skip-codegen`", "tree": {"sha": "81fc8052a1707477bf45d7ec7cd901a44686e8b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81fc8052a1707477bf45d7ec7cd901a44686e8b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/932ea641758e2fe20500151e80a4968cc0799078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/932ea641758e2fe20500151e80a4968cc0799078", "html_url": "https://github.com/rust-lang/rust/commit/932ea641758e2fe20500151e80a4968cc0799078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/932ea641758e2fe20500151e80a4968cc0799078/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740", "html_url": "https://github.com/rust-lang/rust/commit/8e8fba1b3bb96bb64f104d85618cab4fe7dc0740"}], "stats": {"total": 716, "additions": 315, "deletions": 401}, "files": [{"sha": "b1c9b2bc37f64d1ab7cd6bd4c756647f07ae891d", "filename": "src/test/incremental/no_mangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fincremental%2Fno_mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fincremental%2Fno_mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fno_mangle.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,6 @@\n // revisions:cfail1 cfail2\n+// check-pass\n // compile-flags: --crate-type cdylib\n-// skip-codegen\n \n #![deny(unused_attributes)]\n "}, {"sha": "14ff4c2e981b380fad93130bae9fb3adb53c109a", "filename": "src/test/ui/asm/asm-misplaced-option.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n // ignore-android\n // ignore-arm\n // ignore-aarch64\n@@ -11,14 +12,11 @@\n // ignore-mips\n // ignore-mips64\n \n-// compile-pass\n-// skip-codegen\n #![feature(asm)]\n-#![allow(dead_code, non_upper_case_globals)]\n \n #[cfg(any(target_arch = \"x86\",\n           target_arch = \"x86_64\"))]\n-pub fn main() {\n+fn main() {\n     // assignment not dead\n     let mut x: isize = 0;\n     unsafe {"}, {"sha": "3d4b28c3dc44468c8ac455b46553aacef5c57b54", "filename": "src/test/ui/asm/asm-misplaced-option.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-misplaced-option.stderr?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,11 +1,11 @@\n warning: unrecognized option\n-  --> $DIR/asm-misplaced-option.rs:26:64\n+  --> $DIR/asm-misplaced-option.rs:24:64\n    |\n LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n    |                                                                ^^^^\n \n warning: expected a clobber, found an option\n-  --> $DIR/asm-misplaced-option.rs:33:80\n+  --> $DIR/asm-misplaced-option.rs:31:80\n    |\n LL |         asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n    |                                                                                ^^^^^^^^^^"}, {"sha": "8ddd347ff360764bfb042d686351bfd29de7e002", "filename": "src/test/ui/associated-types/cache/chrono-scan.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fchrono-scan.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,10 +1,10 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n+// check-pass\n+\n pub type ParseResult<T> = Result<T, ()>;\n \n-pub enum Item<'a> {     Literal(&'a str),\n- }\n+pub enum Item<'a> {\n+    Literal(&'a str)\n+}\n \n pub fn colon_or_space(s: &str) -> ParseResult<&str> {\n     unimplemented!()\n@@ -20,10 +20,9 @@ pub fn parse<'a, I>(mut s: &str, items: I) -> ParseResult<()>\n     macro_rules! try_consume {\n         ($e:expr) => ({ let (s_, v) = try!($e); s = s_; v })\n     }\n-    let offset = try_consume!(timezone_offset_zulu(s.trim_left(), colon_or_space));\n-    let offset = try_consume!(timezone_offset_zulu(s.trim_left(), colon_or_space));\n+    let offset = try_consume!(timezone_offset_zulu(s.trim_start(), colon_or_space));\n+    let offset = try_consume!(timezone_offset_zulu(s.trim_start(), colon_or_space));\n     Ok(())\n }\n \n-\n-fn main() { }\n+fn main() {}"}, {"sha": "b3e1ec8ad703c475b6e41b2332d2c5171d84bb1d", "filename": "src/test/ui/associated-types/cache/elision.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Felision.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,10 +1,9 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n // Check that you are allowed to implement using elision but write\n // trait without elision (a bug in this cropped up during\n // bootstrapping, so this is a regression test).\n \n+// check-pass\n+\n pub struct SplitWhitespace<'a> {\n     x: &'a u8\n }"}, {"sha": "c38105870e4c0accb014723b66a1b9fbb4c501fa", "filename": "src/test/ui/bad/bad-lint-cap3.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,10 +1,9 @@\n+// check-pass\n // compile-flags: --cap-lints warn\n \n #![warn(unused)]\n #![deny(warnings)]\n-// compile-pass\n-// skip-codegen\n-use std::option; //~ WARN\n \n+use std::option; //~ WARN\n \n fn main() {}"}, {"sha": "b898d792f65ca1dcb778ef9c69dd9091be147a39", "filename": "src/test/ui/bad/bad-lint-cap3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -5,7 +5,7 @@ LL | use std::option;\n    |     ^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/bad-lint-cap3.rs:4:9\n+  --> $DIR/bad-lint-cap3.rs:5:9\n    |\n LL | #![deny(warnings)]\n    |         ^^^^^^^^"}, {"sha": "b34c31dcddb3d3650eff9427dd5e2647981a3d63", "filename": "src/test/ui/coherence/coherence-projection-ok-orphan.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok-orphan.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,11 +1,10 @@\n-// compile-pass\n-// skip-codegen\n+// Here we do not get a coherence conflict because `Baz: Iterator`\n+// does not hold and (due to the orphan rules), we can rely on that.\n+\n+// check-pass\n // revisions: old re\n \n #![cfg_attr(re, feature(re_rebalance_coherence))]\n-#![allow(dead_code)]\n-// Here we do not get a coherence conflict because `Baz: Iterator`\n-// does not hold and (due to the orphan rules), we can rely on that.\n \n pub trait Foo<P> {}\n \n@@ -18,5 +17,4 @@ impl Foo<i32> for Baz { }\n \n impl<A:Iterator> Foo<A::Item> for A { }\n \n-\n fn main() {}"}, {"sha": "f4f5ca64de73899b83bd113523dd667a12002e12", "filename": "src/test/ui/coherence/coherence-projection-ok.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-ok.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,8 +1,8 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n // revisions: old re\n \n #![cfg_attr(re, feature(re_rebalance_coherence))]\n+\n pub trait Foo<P> {}\n \n pub trait Bar {\n@@ -17,5 +17,4 @@ impl Bar for i32 {\n     type Output = u32;\n }\n \n-\n fn main() {}"}, {"sha": "0d677800f7949282aebe13f72f38395e73c06f3f", "filename": "src/test/ui/coherence/coherence_copy_like_err_fundamental_struct_ref.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_copy_like_err_fundamental_struct_ref.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,13 +1,11 @@\n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n+// check-pass\n // aux-build:coherence_copy_like_lib.rs\n-// compile-pass\n-// skip-codegen\n // revisions: old re\n \n #![cfg_attr(re, feature(re_rebalance_coherence))]\n-#![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n \n@@ -23,5 +21,4 @@ impl<T: lib::MyCopy> MyTrait for T { }\n // Huzzah.\n impl<'a> MyTrait for lib::MyFundamentalStruct<&'a MyType> { }\n \n-\n fn main() { }"}, {"sha": "3eab6e03ae3e22123608e67540fd37c9b2d28503", "filename": "src/test/ui/coherence/coherence_local.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,13 +1,11 @@\n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n+// check-pass\n // aux-build:coherence_copy_like_lib.rs\n-// compile-pass\n-// skip-codegen\n // revisions: old re\n \n #![cfg_attr(re, feature(re_rebalance_coherence))]\n-#![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n \n@@ -22,5 +20,4 @@ impl lib::MyCopy for Box<MyType> { }\n impl lib::MyCopy for lib::MyFundamentalStruct<MyType> { }\n impl lib::MyCopy for lib::MyFundamentalStruct<Box<MyType>> { }\n \n-\n-fn main() { }\n+fn main() {}"}, {"sha": "dff684c1699af8d87a4bf901634413bc942d2903", "filename": "src/test/ui/coherence/coherence_local_ref.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_local_ref.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,13 +1,11 @@\n // Test that we are able to introduce a negative constraint that\n // `MyType: !MyTrait` along with other \"fundamental\" wrappers.\n \n+// check-pass\n // aux-build:coherence_copy_like_lib.rs\n-// compile-pass\n-// skip-codegen\n // revisions: old re\n \n #![cfg_attr(re, feature(re_rebalance_coherence))]\n-#![allow(dead_code)]\n \n extern crate coherence_copy_like_lib as lib;\n \n@@ -16,5 +14,4 @@ struct MyType { x: i32 }\n // naturally, legal\n impl lib::MyCopy for MyType { }\n \n-\n fn main() { }"}, {"sha": "efb718b786fa602cd137d5fd971bff220aeaf0ae", "filename": "src/test/ui/conditional-compilation/cfg_attr_path.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_attr_path.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,13 +1,12 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(dead_code)]\n+// check-pass\n+\n #![deny(unused_attributes)] // c.f #35584\n+\n mod auxiliary {\n     #[cfg_attr(any(), path = \"nonexistent_file.rs\")] pub mod namespaced_enums;\n     #[cfg_attr(all(), path = \"namespaced_enums.rs\")] pub mod nonexistent_file;\n }\n \n-\n fn main() {\n     let _ = auxiliary::namespaced_enums::Foo::A;\n     let _ = auxiliary::nonexistent_file::Foo::A;"}, {"sha": "b831dee580c1a566dc6ccd7db5880d8eab97b610", "filename": "src/test/ui/consts/const-fn-stability-calls-3.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-stability-calls-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-stability-calls-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-stability-calls-3.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,15 +1,12 @@\n // Test use of const fn from another crate without a feature gate.\n \n-// compile-pass\n-// skip-codegen\n-#![allow(unused_variables)]\n+// check-pass\n // aux-build:const_fn_lib.rs\n \n extern crate const_fn_lib;\n \n use const_fn_lib::foo;\n \n-\n fn main() {\n     let x = foo(); // use outside a constant is ok\n }"}, {"sha": "3187b4cae55eef3d806c4e5a6fe958acadbf4dbe", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -30,8 +30,9 @@\n // inputs are handled by each, and (2.) to ease searching for related\n // occurrences in the source text.\n \n+// check-pass\n+\n #![warn(unused_attributes, unknown_lints)]\n-#![allow(stable_features)]\n \n // UNGATED WHITE-LISTED BUILT-IN ATTRIBUTES\n \n@@ -75,7 +76,7 @@\n // see issue-43106-gating-of-stable.rs\n // see issue-43106-gating-of-unstable.rs\n // see issue-43106-gating-of-deprecated.rs\n-#![windows_subsystem = \"1000\"]\n+#![windows_subsystem = \"windows\"]\n \n // UNGATED CRATE-LEVEL BUILT-IN ATTRIBUTES\n \n@@ -539,7 +540,7 @@ mod export_name {\n     #[export_name = \"2200\"] impl S { }\n }\n \n-// Note that this test has a `skip-codegen`, so it\n+// Note that this is a `check-pass` test, so it\n // will never invoke the linker. These are here nonetheless to point\n // out that we allow them at non-crate-level (though I do not know\n // whether they have the same effect here as at crate-level).\n@@ -611,17 +612,17 @@ mod must_use {\n     #[must_use] impl S { }\n }\n \n-#[windows_subsystem = \"1000\"]\n+#[windows_subsystem = \"windows\"]\n mod windows_subsystem {\n-    mod inner { #![windows_subsystem=\"1000\"] }\n+    mod inner { #![windows_subsystem=\"windows\"] }\n \n-    #[windows_subsystem = \"1000\"] fn f() { }\n+    #[windows_subsystem = \"windows\"] fn f() { }\n \n-    #[windows_subsystem = \"1000\"] struct S;\n+    #[windows_subsystem = \"windows\"] struct S;\n \n-    #[windows_subsystem = \"1000\"] type T = S;\n+    #[windows_subsystem = \"windows\"] type T = S;\n \n-    #[windows_subsystem = \"1000\"] impl S { }\n+    #[windows_subsystem = \"windows\"] impl S { }\n }\n \n // BROKEN USES OF CRATE-LEVEL BUILT-IN ATTRIBUTES"}, {"sha": "e03b7124ac882fabb45d2f2f63d6efe3faa1bd95", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 204, "deletions": 200, "changes": 404, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,1182 +1,1186 @@\n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:38:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:39:9\n    |\n LL | #![warn(x5400)]\n    |         ^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:33:28\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:35:28\n    |\n LL | #![warn(unused_attributes, unknown_lints)]\n    |                            ^^^^^^^^^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:39:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:10\n    |\n LL | #![allow(x5300)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:11\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:41:11\n    |\n LL | #![forbid(x5200)]\n    |           ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:41:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:42:9\n    |\n LL | #![deny(x5100)]\n    |         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:99:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:100:8\n    |\n LL | #[warn(x5400)]\n    |        ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:102:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:103:25\n    |\n LL |     mod inner { #![warn(x5400)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:105:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:106:12\n    |\n LL |     #[warn(x5400)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:108:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:109:12\n    |\n LL |     #[warn(x5400)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:111:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:112:12\n    |\n LL |     #[warn(x5400)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:114:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:115:12\n    |\n LL |     #[warn(x5400)] impl S { }\n    |            ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:118:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:119:9\n    |\n LL | #[allow(x5300)]\n    |         ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:121:26\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:122:26\n    |\n LL |     mod inner { #![allow(x5300)] }\n    |                          ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:124:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:125:13\n    |\n LL |     #[allow(x5300)] fn f() { }\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:127:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:128:13\n    |\n LL |     #[allow(x5300)] struct S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:130:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:131:13\n    |\n LL |     #[allow(x5300)] type T = S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:133:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:134:13\n    |\n LL |     #[allow(x5300)] impl S { }\n    |             ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:137:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:138:10\n    |\n LL | #[forbid(x5200)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:140:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:141:27\n    |\n LL |     mod inner { #![forbid(x5200)] }\n    |                           ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:143:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:144:14\n    |\n LL |     #[forbid(x5200)] fn f() { }\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:146:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:147:14\n    |\n LL |     #[forbid(x5200)] struct S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:149:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:150:14\n    |\n LL |     #[forbid(x5200)] type T = S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:152:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:153:14\n    |\n LL |     #[forbid(x5200)] impl S { }\n    |              ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:156:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:157:8\n    |\n LL | #[deny(x5100)]\n    |        ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:159:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:160:25\n    |\n LL |     mod inner { #![deny(x5100)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:162:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:163:12\n    |\n LL |     #[deny(x5100)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:165:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:166:12\n    |\n LL |     #[deny(x5100)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:168:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:169:12\n    |\n LL |     #[deny(x5100)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:171:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:172:12\n    |\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:456:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:459:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n    = help: consider an outer attribute, #[macro_use] mod ...\n \n+warning: the feature `rust1` has been stable since 1.0.0 and no longer requires an attribute to enable\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:89:12\n+   |\n+LL | #![feature(rust1)]\n+   |            ^^^^^\n+   |\n+   = note: #[warn(stable_features)] on by default\n+\n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:179:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:180:5\n    |\n LL |     #[macro_use] fn f() { }\n    |     ^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:33:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:35:9\n    |\n LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:182:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:183:5\n    |\n LL |     #[macro_use] struct S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:185:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:186:5\n    |\n LL |     #[macro_use] type T = S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:188:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:189:5\n    |\n LL |     #[macro_use] impl S { }\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:195:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:196:17\n    |\n LL |     mod inner { #![macro_export] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:198:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:199:5\n    |\n LL |     #[macro_export] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:201:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:202:5\n    |\n LL |     #[macro_export] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:204:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:205:5\n    |\n LL |     #[macro_export] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:207:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:208:5\n    |\n LL |     #[macro_export] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:192:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:193:1\n    |\n LL | #[macro_export]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:214:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:215:17\n    |\n LL |     mod inner { #![plugin_registrar] }\n    |                 ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:219:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:220:5\n    |\n LL |     #[plugin_registrar] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:222:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:223:5\n    |\n LL |     #[plugin_registrar] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:225:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:226:5\n    |\n LL |     #[plugin_registrar] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:211:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:212:1\n    |\n LL | #[plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:232:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:233:17\n    |\n LL |     mod inner { #![main] }\n    |                 ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:237:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:238:5\n    |\n LL |     #[main] struct S;\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:240:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:241:5\n    |\n LL |     #[main] type T = S;\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:243:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:244:5\n    |\n LL |     #[main] impl S { }\n    |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:229:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:230:1\n    |\n LL | #[main]\n    | ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:250:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:251:17\n    |\n LL |     mod inner { #![start] }\n    |                 ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:255:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:256:5\n    |\n LL |     #[start] struct S;\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:258:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:259:5\n    |\n LL |     #[start] type T = S;\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:261:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:262:5\n    |\n LL |     #[start] impl S { }\n    |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:247:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:248:1\n    |\n LL | #[start]\n    | ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:314:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:315:5\n    |\n LL |     #[path = \"3800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:317:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:318:5\n    |\n LL |     #[path = \"3800\"]  struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:320:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:321:5\n    |\n LL |     #[path = \"3800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:323:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:324:5\n    |\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:330:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:331:17\n    |\n LL |     mod inner { #![automatically_derived] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:333:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:334:5\n    |\n LL |     #[automatically_derived] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:336:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:337:5\n    |\n LL |     #[automatically_derived] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:339:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:340:5\n    |\n LL |     #[automatically_derived] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:342:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:343:5\n    |\n LL |     #[automatically_derived] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:327:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:328:1\n    |\n LL | #[automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:362:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:363:17\n    |\n LL |     mod inner { #![no_link] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:365:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:366:5\n    |\n LL |     #[no_link] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:368:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:369:5\n    |\n LL |     #[no_link] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:371:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:372:5\n    |\n LL |     #[no_link]type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:374:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:375:5\n    |\n LL |     #[no_link] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:359:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:360:1\n    |\n LL | #[no_link]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:381:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:382:17\n    |\n LL |     mod inner { #![should_panic] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:384:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:385:5\n    |\n LL |     #[should_panic] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:387:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:388:5\n    |\n LL |     #[should_panic] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:390:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:391:5\n    |\n LL |     #[should_panic] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:393:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:394:5\n    |\n LL |     #[should_panic] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:378:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:379:1\n    |\n LL | #[should_panic]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:400:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:401:17\n    |\n LL |     mod inner { #![ignore] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:403:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:404:5\n    |\n LL |     #[ignore] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:406:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:407:5\n    |\n LL |     #[ignore] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:409:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:410:5\n    |\n LL |     #[ignore] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:412:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:413:5\n    |\n LL |     #[ignore] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:397:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:398:1\n    |\n LL | #[ignore]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:419:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:420:17\n    |\n LL |     mod inner { #![no_implicit_prelude] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:422:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:423:5\n    |\n LL |     #[no_implicit_prelude] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:425:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:426:5\n    |\n LL |     #[no_implicit_prelude] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:428:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:429:5\n    |\n LL |     #[no_implicit_prelude] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:431:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:432:5\n    |\n LL |     #[no_implicit_prelude] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:416:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:1\n    |\n LL | #[no_implicit_prelude]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:439:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:441:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:444:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:445:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:447:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:448:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:450:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:451:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:435:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:461:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:462:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:464:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:465:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:467:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:468:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:471:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:479:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:479:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:490:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:491:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:490:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:491:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:494:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:494:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:475:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:475:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:633:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:634:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:633:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:634:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:637:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:638:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:637:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:638:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:641:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:642:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:641:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:642:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:645:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:646:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:645:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:646:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:649:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:650:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:649:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:650:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:629:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:630:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:629:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:630:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:658:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:659:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:658:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:659:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:662:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:662:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:666:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:666:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:670:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:670:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:654:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:655:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:654:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:655:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:680:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:680:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:709:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:710:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:709:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:710:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:713:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:714:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:713:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:714:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:718:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:718:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:722:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:722:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:705:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:706:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:705:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:706:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:747:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:748:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:747:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:748:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:756:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:756:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:760:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:760:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:764:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:764:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:743:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:743:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:772:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:773:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:772:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:773:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:776:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:780:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:784:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:768:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:769:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:768:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:769:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:43:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:44:1\n    |\n LL | #![macro_export]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:44:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:45:1\n    |\n LL | #![plugin_registrar]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:47:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:48:1\n    |\n LL | #![main]\n    | ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:48:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:49:1\n    |\n LL | #![start]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:51:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:52:1\n    |\n LL | #![repr()]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:54:1\n    |\n LL | #![path = \"3800\"]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:54:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:55:1\n    |\n LL | #![automatically_derived]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:57:1\n    |\n LL | #![no_link]\n    | ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:58:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n    |\n LL | #![should_panic]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:60:1\n    |\n LL | #![ignore]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:66:1\n    |\n LL | #![proc_macro_derive()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: invalid windows subsystem `1000`, only `windows` and `console` are allowed\n-\n-error: aborting due to previous error\n-"}, {"sha": "5e1d08dd919d0ba95907677279e8fe0da53a4343", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-deprecated.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -5,8 +5,7 @@\n //\n // (For non-crate-level cases, see issue-43106-gating-of-builtin-attrs.rs)\n \n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n #![deprecated]\n "}, {"sha": "f354cc885d00d3c2091dbb3b0579d73a2e42ce65", "filename": "src/test/ui/glob-cycles.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fglob-cycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fglob-cycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-cycles.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,5 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n+\n mod foo {\n     pub use bar::*;\n     pub use main as f;\n@@ -15,5 +15,4 @@ mod baz {\n     pub use super::*;\n }\n \n-\n pub fn main() {}"}, {"sha": "93cf7591a0db2817eba45d424ed6f7c23629f5d9", "filename": "src/test/ui/hygiene/assoc_ty_bindings.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_ty_bindings.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,8 +1,8 @@\n+// check-pass\n // ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro, associated_type_defaults)]\n-// compile-pass\n-// skip-codegen\n+\n trait Base {\n     type AssocTy;\n     fn f();\n@@ -35,5 +35,4 @@ macro mac() {\n \n mac!();\n \n-\n fn main() {}"}, {"sha": "06d0bdf456cdb33e1be0b037f5d77ad1cd5e08d1", "filename": "src/test/ui/if/if-loop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fif%2Fif-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fif%2Fif-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-loop.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,10 +1,8 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n+// check-pass\n+\n // This used to ICE because the \"if\" being unreachable was not handled correctly\n fn err() {\n     if loop {} {}\n }\n \n-\n fn main() {}"}, {"sha": "b9d146d3735f21497c44bb978912e17cf181e4a8", "filename": "src/test/ui/imports/import-crate-var.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,10 +1,8 @@\n+// check-pass\n // aux-build:import_crate_var.rs\n \n-// compile-pass\n-// skip-codegen\n #[macro_use] extern crate import_crate_var;\n \n-\n fn main() {\n     m!();\n     //~^ WARN `$crate` may not be imported"}, {"sha": "2f8c845156a823ff1803a8e9fe43c99f60f03bcc", "filename": "src/test/ui/imports/import-crate-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,5 @@\n warning: `$crate` may not be imported\n-  --> $DIR/import-crate-var.rs:9:5\n+  --> $DIR/import-crate-var.rs:7:5\n    |\n LL |     m!();\n    |     ^^^^^"}, {"sha": "dc10a205f2418a06f303f1c46974baa4cc540cac", "filename": "src/test/ui/issues/issue-11740.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-11740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-11740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11740.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,5 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n+// check-pass\n+\n struct Attr {\n     name: String,\n     value: String,\n@@ -21,7 +20,6 @@ impl Element {\n     }\n }\n \n-\n fn main() {\n     let element = Element { attrs: Vec::new() };\n     let _ = unsafe { element.get_attr(\"foo\") };"}, {"sha": "8d3074bcee9cc6251086ee223314e8fde8c48da4", "filename": "src/test/ui/issues/issue-16994.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-16994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-16994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16994.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,10 +1,9 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n+\n fn cb<'a,T>(_x: Box<dyn Fn((&'a i32, &'a (Vec<&'static i32>, bool))) -> T>) -> T {\n     panic!()\n }\n \n-\n fn main() {\n     cb(Box::new(|(k, &(ref v, b))| (*k, v.clone(), b)));\n }"}, {"sha": "176e6ba410670df9641eb9028bde1f3dac42ecba", "filename": "src/test/ui/issues/issue-19601.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-19601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-19601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19601.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,9 +1,6 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n+// check-pass\n+\n trait A<T> {}\n struct B<T> where B<T>: A<B<T>> { t: T }\n \n-\n-fn main() {\n-}\n+fn main() {}"}, {"sha": "a83e291f999ab88862dc6e59aa8a6c2977d2dbd2", "filename": "src/test/ui/issues/issue-22603.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-22603.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-22603.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22603.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![feature(unboxed_closures, fn_traits)]\n+\n struct Foo;\n \n impl<A> FnOnce<(A,)> for Foo {"}, {"sha": "cef407537668688b93192350aef81fb2d5489d72", "filename": "src/test/ui/issues/issue-22789.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-22789.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-22789.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22789.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,7 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n+\n #![feature(unboxed_closures, fn_traits)]\n+\n fn main() {\n     let k = |x: i32| { x + 1 };\n     Fn::call(&k, (0,));"}, {"sha": "3c9aa26697907d72ce7874ef64e29f5513caaad5", "filename": "src/test/ui/issues/issue-22933-1.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-22933-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-22933-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22933-1.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,5 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n+// check-pass\n+\n struct CNFParser {\n     token: char,\n }\n@@ -14,12 +13,11 @@ impl CNFParser {\n         self.consume_while(&(CNFParser::is_whitespace))\n     }\n \n-    fn consume_while(&mut self, p: &Fn(char) -> bool) {\n+    fn consume_while(&mut self, p: &dyn Fn(char) -> bool) {\n         while p(self.token) {\n             return\n         }\n     }\n }\n \n-\n fn main() {}"}, {"sha": "819a20ddbda92a286308b3fbe3a5fe1b6506af4a", "filename": "src/test/ui/issues/issue-24883.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-24883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-24883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24883.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,5 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n+\n mod a {\n     pub mod b { pub struct Foo; }\n \n@@ -11,7 +11,6 @@ mod a {\n     pub use self::c::*;\n }\n \n-\n fn main() {\n     let _ = a::c::Bar(a::b::Foo);\n     let _ = a::Bar(a::b::Foo);"}, {"sha": "b8ebbdc5abc3ed7838bb6117ae2d1c41688bb8c2", "filename": "src/test/ui/issues/issue-26614.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-26614.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-26614.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26614.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,5 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n+// check-pass\n+\n trait Mirror {\n     type It;\n }\n@@ -9,8 +8,6 @@ impl<T> Mirror for T {\n     type It = Self;\n }\n \n-\n-\n fn main() {\n     let c: <u32 as Mirror>::It = 5;\n     const CCCC: <u32 as Mirror>::It = 5;"}, {"sha": "707e71b11249dd670dca0d41a5da0ac4bb913816", "filename": "src/test/ui/issues/issue-26930.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-26930.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-26930.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26930.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,10 +1,8 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(unused)]\n+// check-pass\n+\n extern crate core;\n use core as core_export;\n use self::x::*;\n mod x {}\n \n-\n fn main() {}"}, {"sha": "6f4c5f45d0d9cd5ab31955761b59dfab8c49416b", "filename": "src/test/ui/issues/issue-29857.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-29857.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-29857.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29857.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,4 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n use std::marker::PhantomData;\n \n@@ -17,5 +16,4 @@ pub trait Bar {\n \n impl<T: 'static, W: Bar<Output = T>> Foo<*mut T> for W {}\n \n-\n fn main() {}"}, {"sha": "63e42b484427e51885e42a64407c6d14fe95cb89", "filename": "src/test/ui/issues/issue-31924-non-snake-ffi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-31924-non-snake-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-31924-non-snake-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31924-non-snake-ffi.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,8 +1,8 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n+\n #![deny(non_snake_case)]\n-#[no_mangle]\n-pub extern \"C\" fn SparklingGenerationForeignFunctionInterface() {}\n \n+#[no_mangle]\n+pub extern \"C\" fn SparklingGenerationForeignFunctionInterface() {} // OK\n \n fn main() {}"}, {"sha": "36adb5289aca5d228addf594cdb3e0292a87e8bb", "filename": "src/test/ui/issues/issue-32119.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-32119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-32119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32119.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,5 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(dead_code)]\n+// check-pass\n+\n pub type T = ();\n mod foo { pub use super::T; }\n mod bar { pub use super::T; }\n@@ -15,5 +14,4 @@ mod baz {\n     pub use self::bar::*;\n }\n \n-\n fn main() {}"}, {"sha": "4ed06bff803415667d04f8ee325a373c188feb64", "filename": "src/test/ui/issues/issue-32222.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-32222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-32222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32222.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,4 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n+// check-pass\n \n mod foo {\n     pub fn bar() {}\n@@ -21,5 +19,4 @@ mod b {\n     pub use a::bar;\n }\n \n-\n fn main() {}"}, {"sha": "b12b929f8fcf82af464d429b64294c3d3c9a759c", "filename": "src/test/ui/issues/issue-32797.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-32797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-32797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32797.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,4 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n pub use bar::*;\n mod bar {\n@@ -11,5 +10,4 @@ mod baz {\n     pub use main as f;\n }\n \n-\n pub fn main() {}"}, {"sha": "54ec44a1cf4e519ce592a3d2abd23b68b922528f", "filename": "src/test/ui/issues/issue-32922.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-32922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-32922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32922.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,4 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n+// check-pass\n \n macro_rules! foo { () => {\n     let x = 1;\n@@ -22,7 +20,6 @@ macro_rules! baz {\n     }\n }\n \n-\n fn main() {\n     foo! {};\n     bar! {};"}, {"sha": "5f9f1e4a74211d803fe41107194ce0822f5f18cc", "filename": "src/test/ui/issues/issue-33241.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-33241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-33241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33241.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,13 +1,11 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n use std::fmt;\n \n // CoerceUnsized is not implemented for tuples. You can still create\n // an unsized tuple by transmuting a trait object.\n fn any<T>() -> T { unreachable!() }\n \n-\n fn main() {\n     let t: &(u8, dyn fmt::Debug) = any();\n     println!(\"{:?}\", &t.1);"}, {"sha": "d761c0c823bcd2e4616e25737004c416d46de1d8", "filename": "src/test/ui/issues/issue-34028.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-34028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-34028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34028.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,4 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n macro_rules! m {\n     () => { #[cfg(any())] fn f() {} }\n@@ -8,5 +7,4 @@ macro_rules! m {\n trait T {}\n impl T for () { m!(); }\n \n-\n fn main() {}"}, {"sha": "157c58c459d6663ce8a5a1c344da9a6bd104eeff", "filename": "src/test/ui/issues/issue-34171.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-34171.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-34171.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34171.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,12 +1,10 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n macro_rules! null { ($i:tt) => {} }\n macro_rules! apply_null {\n     ($i:item) => { null! { $i } }\n }\n \n-\n fn main() {\n     apply_null!(#[cfg(all())] fn f() {});\n }"}, {"sha": "6132f744b50a9253ebc6370cfac197587f9a1ae5", "filename": "src/test/ui/issues/issue-34418.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-34418.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-34418.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34418.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,4 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(unused)]\n+// check-pass\n \n macro_rules! make_item {\n     () => { fn f() {} }\n@@ -18,5 +16,4 @@ fn g() {\n     make_stmt! {}\n }\n \n-\n fn main() {}"}, {"sha": "8ffed827e90872397daf5f74980010d195f067fe", "filename": "src/test/ui/issues/issue-34839.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-34839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-34839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34839.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,4 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(dead_code)]\n+// check-pass\n \n trait RegularExpression: Sized {\n     type Text;\n@@ -18,5 +16,4 @@ enum FindCapturesInner<'r, 't> {\n     Dynamic(FindCaptures<'t, ExecNoSyncStr<'r>>),\n }\n \n-\n fn main() {}"}, {"sha": "fafef79ea5b866adf39ed4846dc792db57c14729", "filename": "src/test/ui/issues/issue-35570.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35570.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,4 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n use std::mem;\n \n@@ -25,7 +24,6 @@ fn foo<'a>(x: &'a ()) -> <() as Lifetime<'a>>::Out {\n fn takes_lifetime(_f: for<'a> fn(&'a ()) -> <() as Lifetime<'a>>::Out) {\n }\n \n-\n fn main() {\n     takes_lifetime(foo);\n }"}, {"sha": "c7c70c7afe7430f11dbcc076c11e7a7880a3b465", "filename": "src/test/ui/issues/issue-36116.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-36116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-36116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36116.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,8 +1,7 @@\n // Unnecessary path disambiguator is ok\n \n-// compile-pass\n-// skip-codegen\n-#![allow(unused)]\n+// check-pass\n+\n macro_rules! m {\n     ($p: path) => {\n         let _ = $p(0);\n@@ -23,5 +22,4 @@ fn f() {\n     m!(S::<u8>);\n }\n \n-\n fn main() {}"}, {"sha": "3a3e6f47067d961a81dc43a6abe71f3cc41f0c94", "filename": "src/test/ui/issues/issue-36379.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-36379.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-36379.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36379.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,7 +1,5 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n fn _test() -> impl Default { }\n \n-\n-fn main() { }\n+fn main() {}"}, {"sha": "ca3d66b1c8eb7d9cb96551589f5a97b26da50e31", "filename": "src/test/ui/issues/issue-36839.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-36839.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-36839.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36839.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,4 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n pub trait Foo {\n     type Bar;\n@@ -17,7 +16,6 @@ impl<T> Broken for T {\n     }\n }\n \n-\n fn main() {\n     let _m: &dyn Broken<Assoc=()> = &();\n }"}, {"sha": "9cae6cf5e7665ced8faeb73dab67ad3676e0b3c0", "filename": "src/test/ui/issues/issue-37051.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37051.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,7 +1,7 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n+\n #![feature(associated_type_defaults)]\n-#![allow(warnings)]\n+\n trait State: Sized {\n     type NextState: State = StateMachineEnded;\n     fn execute(self) -> Option<Self::NextState>;\n@@ -15,6 +15,4 @@ impl State for StateMachineEnded {\n     }\n }\n \n-\n-fn main() {\n-}\n+fn main() {}"}, {"sha": "6bf3a276ce138580440b8c1d6212fc4f31100f4a", "filename": "src/test/ui/issues/issue-37366.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37366.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,6 @@\n+// check-pass\n // ignore-emscripten\n-// compile-pass\n-// skip-codegen\n+\n #![feature(asm)]\n \n macro_rules! interrupt_handler {\n@@ -12,6 +12,4 @@ macro_rules! interrupt_handler {\n }\n interrupt_handler!{}\n \n-\n-fn main() {\n-}\n+fn main() {}"}, {"sha": "2081c9f7e26ec0940d52bafc6a9a2b0e5e782951", "filename": "src/test/ui/issues/issue-37510.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-37510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-37510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37510.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,9 +1,7 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n fn foo(_: &mut i32) -> bool { true }\n \n-\n fn main() {\n     let opt = Some(92);\n     let mut x = 62;"}, {"sha": "0da8b7900a8a54b508e3b108480e31d882c967be", "filename": "src/test/ui/issues/issue-38160.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-38160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-38160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38160.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,7 +1,5 @@\n-// compile-pass\n-// skip-codegen\n-#![feature(associated_consts)]\n-#![allow(warnings)]\n+// check-pass\n+\n trait MyTrait {\n     const MY_CONST: &'static str;\n }\n@@ -18,5 +16,4 @@ macro_rules! my_macro {\n \n my_macro!();\n \n-\n fn main() {}"}, {"sha": "82d4a4e325ac05af008c881707369fd9d3052ae0", "filename": "src/test/ui/issues/issue-38381.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-38381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-38381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38381.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,9 +1,7 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n \n use std::ops::Deref;\n \n-\n fn main() {\n     let _x: fn(&i32) -> <&i32 as Deref>::Target = unimplemented!();\n }"}, {"sha": "a39a8519aa9869c3bbb5bf30d5db349fbdcf3aeb", "filename": "src/test/ui/issues/issue-40350.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-40350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fissues%2Fissue-40350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40350.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,6 +1,4 @@\n-// compile-pass\n-// skip-codegen\n-#![allow(warnings)]\n+// check-pass\n \n enum E {\n     A = {\n@@ -9,5 +7,4 @@ enum E {\n     }\n }\n \n-\n fn main() {}"}, {"sha": "a558e8a1813fd7d2d5e0e846b3c7ebbca0960c1f", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-outlive-lbr2-because-implied-bound.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-outlive-lbr2-because-implied-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-outlive-lbr2-because-implied-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-outlive-lbr2-because-implied-bound.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,12 +1,11 @@\n // Basic test for free regions in the NLL code. This test does not\n // report an error because of the (implied) bound that `'b: 'a`.\n \n+// check-pass\n // compile-flags:-Zborrowck=mir -Zverbose\n-// compile-pass\n-// skip-codegen\n \n fn foo<'a, 'b>(x: &'a &'b u32) -> &'a u32 {\n     &**x\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "d1e7c3b4d518a34768a92515eaae391a73e0bb49", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,5 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n+\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n #![feature(never_type)]"}, {"sha": "8973d21bff6faaadb974e93565883dae57931fff", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -1,5 +1,5 @@\n-// compile-pass\n-// skip-codegen\n+// check-pass\n+\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n #![feature(never_type)]"}, {"sha": "e4765c641aa8ef8835ebf019814222cce9e32e31", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932ea641758e2fe20500151e80a4968cc0799078/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=932ea641758e2fe20500151e80a4968cc0799078", "patch": "@@ -539,13 +539,10 @@ impl TestProps {\n             let pass_mode = if config.parse_name_directive(ln, \"check-pass\") {\n                 check_no_run(\"check-pass\");\n                 Some(PassMode::Check)\n-            } else if config.parse_name_directive(ln, \"skip-codegen\") {\n-                check_no_run(\"skip-codegen\");\n-                Some(PassMode::Check)\n             } else if config.parse_name_directive(ln, \"build-pass\") {\n                 check_no_run(\"build-pass\");\n                 Some(PassMode::Build)\n-            } else if config.parse_name_directive(ln, \"compile-pass\") {\n+            } else if config.parse_name_directive(ln, \"compile-pass\") /* compatibility */ {\n                 check_no_run(\"compile-pass\");\n                 Some(PassMode::Build)\n             } else if config.parse_name_directive(ln, \"run-pass\") {\n@@ -558,7 +555,6 @@ impl TestProps {\n             };\n             match (self.pass_mode, pass_mode) {\n                 (None, Some(_)) => self.pass_mode = pass_mode,\n-                (Some(_), Some(pm)) if pm == PassMode::Check => self.pass_mode = pass_mode,\n                 (Some(_), Some(_)) => panic!(\"multiple `*-pass` headers in a single test\"),\n                 (_, None) => {}\n             }"}]}