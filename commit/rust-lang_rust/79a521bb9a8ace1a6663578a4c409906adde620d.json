{"sha": "79a521bb9a8ace1a6663578a4c409906adde620d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YTUyMWJiOWE4YWNlMWE2NjYzNTc4YTRjNDA5OTA2YWRkZTYyMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-15T15:36:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-15T15:36:54Z"}, "message": "Auto merge of #47413 - GuillaumeGomez:unstable-error-code, r=estebank\n\nAdd error code for unstable feature errors\n\nFixes #47397.", "tree": {"sha": "73990bc3ee1c7d1a5511a37c8b2a52b9d934cd5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73990bc3ee1c7d1a5511a37c8b2a52b9d934cd5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79a521bb9a8ace1a6663578a4c409906adde620d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79a521bb9a8ace1a6663578a4c409906adde620d", "html_url": "https://github.com/rust-lang/rust/commit/79a521bb9a8ace1a6663578a4c409906adde620d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79a521bb9a8ace1a6663578a4c409906adde620d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57850e53602bfc1f66a12d20299c938925c1986a", "url": "https://api.github.com/repos/rust-lang/rust/commits/57850e53602bfc1f66a12d20299c938925c1986a", "html_url": "https://github.com/rust-lang/rust/commit/57850e53602bfc1f66a12d20299c938925c1986a"}, {"sha": "c8a110ed6329022850fd9d473ec987ba1459a64f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a110ed6329022850fd9d473ec987ba1459a64f", "html_url": "https://github.com/rust-lang/rust/commit/c8a110ed6329022850fd9d473ec987ba1459a64f"}], "stats": {"total": 642, "additions": 345, "deletions": 297}, "files": [{"sha": "d841281e48580f6bc994b8dfdf32103036e9fa7c", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -317,6 +317,31 @@ fn main() {\n ```\n \"##,\n \n+E0658: r##\"\n+An unstable feature was used.\n+\n+Erroneous code example:\n+\n+```compile_fail,E658\n+let x = ::std::u128::MAX; // error: use of unstable library feature 'i128'\n+```\n+\n+If you're using a stable or a beta version of rustc, you won't be able to use\n+any unstable features. In order to do so, please switch to a nightly version of\n+rustc (by using rustup).\n+\n+If you're using a nightly version of rustc, just add the corresponding feature\n+to be able to use it:\n+\n+```\n+#![feature(i128)]\n+\n+fn main() {\n+    let x = ::std::u128::MAX; // ok!\n+}\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {"}, {"sha": "61f3e7046f149b95c2a397a501b99930bc73f914", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -105,6 +105,14 @@ macro_rules! struct_span_err {\n     })\n }\n \n+#[macro_export]\n+macro_rules! stringify_error_code {\n+    ($code:ident) => ({\n+        __diagnostic_used!($code);\n+        $crate::errors::DiagnosticId::Error(stringify!($code).to_owned())\n+    })\n+}\n+\n #[macro_export]\n macro_rules! type_error_struct {\n     ($session:expr, $span:expr, $typ:expr, $code:ident, $($message:tt)*) => ({"}, {"sha": "196fadcc997f5b954384d17e1584a7b33589e01d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1179,7 +1179,9 @@ fn leveled_feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue\n     };\n \n     let mut err = match level {\n-        GateStrength::Hard => diag.struct_span_err(span, &explanation),\n+        GateStrength::Hard => {\n+            diag.struct_span_err_with_code(span, &explanation, stringify_error_code!(E0658))\n+        }\n         GateStrength::Soft => diag.struct_span_warn(span, &explanation),\n     };\n "}, {"sha": "d30068eb1fe2ed7ff6d83a272e38527d4309a53e", "filename": "src/test/compile-fail/E0658.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fcompile-fail%2FE0658.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fcompile-fail%2FE0658.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0658.rs?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _ = ::std::u128::MAX; //~ ERROR E0658\n+}"}, {"sha": "e1621d34d46ac4224223bd5fc2b198cf74b5b993", "filename": "src/test/ui/feature-gate-abi-msp430-interrupt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-abi-msp430-interrupt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-abi-msp430-interrupt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi-msp430-interrupt.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n   --> $DIR/feature-gate-abi-msp430-interrupt.rs:14:1\n    |\n 14 | extern \"msp430-interrupt\" fn foo() {}"}, {"sha": "ce31474caed9b3a3e578778bc12f669f37a272f9", "filename": "src/test/ui/feature-gate-abi.stderr", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,444 +1,444 @@\n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-abi.rs:19:1\n    |\n 19 | extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n   --> $DIR/feature-gate-abi.rs:20:1\n    |\n 20 | extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n-error: vectorcall is experimental and subject to change\n+error[E0658]: vectorcall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:21:1\n    |\n 21 | extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-abi.rs:22:1\n    |\n 22 | extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n   --> $DIR/feature-gate-abi.rs:23:1\n    |\n 23 | extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:24:1\n    |\n 24 | extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n   --> $DIR/feature-gate-abi.rs:25:1\n    |\n 25 | extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n-error: thiscall is experimental and subject to change\n+error[E0658]: thiscall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:26:1\n    |\n 26 | extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-abi.rs:30:5\n    |\n 30 |     extern \"rust-intrinsic\" fn m1(); //~ ERROR intrinsics are subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n   --> $DIR/feature-gate-abi.rs:31:5\n    |\n 31 |     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n-error: vectorcall is experimental and subject to change\n+error[E0658]: vectorcall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:32:5\n    |\n 32 |     extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-abi.rs:33:5\n    |\n 33 |     extern \"rust-call\" fn m4(); //~ ERROR rust-call ABI is subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n   --> $DIR/feature-gate-abi.rs:34:5\n    |\n 34 |     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:35:5\n    |\n 35 |     extern \"ptx-kernel\" fn m6(); //~ ERROR PTX ABIs are experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n   --> $DIR/feature-gate-abi.rs:36:5\n    |\n 36 |     extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n-error: thiscall is experimental and subject to change\n+error[E0658]: thiscall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:37:5\n    |\n 37 |     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-abi.rs:39:5\n    |\n 39 |     extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n   --> $DIR/feature-gate-abi.rs:40:5\n    |\n 40 |     extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n-error: vectorcall is experimental and subject to change\n+error[E0658]: vectorcall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:41:5\n    |\n 41 |     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-abi.rs:42:5\n    |\n 42 |     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n   --> $DIR/feature-gate-abi.rs:43:5\n    |\n 43 |     extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:44:5\n    |\n 44 |     extern \"ptx-kernel\" fn dm6() {} //~ ERROR PTX ABIs are experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n   --> $DIR/feature-gate-abi.rs:45:5\n    |\n 45 |     extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n-error: thiscall is experimental and subject to change\n+error[E0658]: thiscall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:46:5\n    |\n 46 |     extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-abi.rs:53:5\n    |\n 53 |     extern \"rust-intrinsic\" fn m1() {} //~ ERROR intrinsics are subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n   --> $DIR/feature-gate-abi.rs:54:5\n    |\n 54 |     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n-error: vectorcall is experimental and subject to change\n+error[E0658]: vectorcall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:55:5\n    |\n 55 |     extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-abi.rs:56:5\n    |\n 56 |     extern \"rust-call\" fn m4() {} //~ ERROR rust-call ABI is subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n   --> $DIR/feature-gate-abi.rs:57:5\n    |\n 57 |     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:58:5\n    |\n 58 |     extern \"ptx-kernel\" fn m6() {} //~ ERROR PTX ABIs are experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n   --> $DIR/feature-gate-abi.rs:59:5\n    |\n 59 |     extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n-error: thiscall is experimental and subject to change\n+error[E0658]: thiscall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:60:5\n    |\n 60 |     extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-abi.rs:65:5\n    |\n 65 |     extern \"rust-intrinsic\" fn im1() {} //~ ERROR intrinsics are subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n   --> $DIR/feature-gate-abi.rs:66:5\n    |\n 66 |     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n-error: vectorcall is experimental and subject to change\n+error[E0658]: vectorcall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:67:5\n    |\n 67 |     extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-abi.rs:68:5\n    |\n 68 |     extern \"rust-call\" fn im4() {} //~ ERROR rust-call ABI is subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n   --> $DIR/feature-gate-abi.rs:69:5\n    |\n 69 |     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:70:5\n    |\n 70 |     extern \"ptx-kernel\" fn im6() {} //~ ERROR PTX ABIs are experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n   --> $DIR/feature-gate-abi.rs:71:5\n    |\n 71 |     extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n-error: thiscall is experimental and subject to change\n+error[E0658]: thiscall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:72:5\n    |\n 72 |     extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-abi.rs:76:11\n    |\n 76 | type A1 = extern \"rust-intrinsic\" fn(); //~ ERROR intrinsics are subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n   --> $DIR/feature-gate-abi.rs:77:11\n    |\n 77 | type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are experimental\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n-error: vectorcall is experimental and subject to change\n+error[E0658]: vectorcall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:78:11\n    |\n 78 | type A3 = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental and subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-abi.rs:79:11\n    |\n 79 | type A4 = extern \"rust-call\" fn(); //~ ERROR rust-call ABI is subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n   --> $DIR/feature-gate-abi.rs:80:11\n    |\n 80 | type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is experimental\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:81:11\n    |\n 81 | type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n   --> $DIR/feature-gate-abi.rs:82:11\n    |\n 82 | type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n-error: thiscall is experimental and subject to change\n+error[E0658]: thiscall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:83:11\n    |\n 83 | type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n    |           ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_thiscall)] to the crate attributes to enable\n \n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-abi.rs:86:1\n    |\n 86 | extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: platform intrinsics are experimental and possibly buggy (see issue #27731)\n+error[E0658]: platform intrinsics are experimental and possibly buggy (see issue #27731)\n   --> $DIR/feature-gate-abi.rs:87:1\n    |\n 87 | extern \"platform-intrinsic\" {} //~ ERROR platform intrinsics are experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(platform_intrinsics)] to the crate attributes to enable\n \n-error: vectorcall is experimental and subject to change\n+error[E0658]: vectorcall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:88:1\n    |\n 88 | extern \"vectorcall\" {} //~ ERROR vectorcall is experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_vectorcall)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-abi.rs:89:1\n    |\n 89 | extern \"rust-call\" {} //~ ERROR rust-call ABI is subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n+error[E0658]: msp430-interrupt ABI is experimental and subject to change (see issue #38487)\n   --> $DIR/feature-gate-abi.rs:90:1\n    |\n 90 | extern \"msp430-interrupt\" {} //~ ERROR msp430-interrupt ABI is experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_msp430_interrupt)] to the crate attributes to enable\n \n-error: PTX ABIs are experimental and subject to change\n+error[E0658]: PTX ABIs are experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:91:1\n    |\n 91 | extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_ptx)] to the crate attributes to enable\n \n-error: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n+error[E0658]: x86-interrupt ABI is experimental and subject to change (see issue #40180)\n   --> $DIR/feature-gate-abi.rs:92:1\n    |\n 92 | extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(abi_x86_interrupt)] to the crate attributes to enable\n \n-error: thiscall is experimental and subject to change\n+error[E0658]: thiscall is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:93:1\n    |\n 93 | extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change"}, {"sha": "b3f7cd218d3e9280294667a1af2695068fcaa63e", "filename": "src/test/ui/feature-gate-abi_unadjusted.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: unadjusted ABI is an implementation detail and perma-unstable\n+error[E0658]: unadjusted ABI is an implementation detail and perma-unstable\n   --> $DIR/feature-gate-abi_unadjusted.rs:11:1\n    |\n 11 | / extern \"unadjusted\" fn foo() {"}, {"sha": "63ede50e1ea3a8eb74834b832b89050acb2ccdf5", "filename": "src/test/ui/feature-gate-advanced-slice-features.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,12 +1,12 @@\n-error: multiple-element slice matches anywhere but at the end of a slice (e.g. `[0, ..xs, 0]`) are experimental (see issue #23121)\n+error[E0658]: multiple-element slice matches anywhere but at the end of a slice (e.g. `[0, ..xs, 0]`) are experimental (see issue #23121)\n   --> $DIR/feature-gate-advanced-slice-features.rs:18:9\n    |\n 18 |         [ xs.., 4, 5 ] => {}    //~ ERROR multiple-element slice matches\n    |         ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(advanced_slice_patterns)] to the crate attributes to enable\n \n-error: multiple-element slice matches anywhere but at the end of a slice (e.g. `[0, ..xs, 0]`) are experimental (see issue #23121)\n+error[E0658]: multiple-element slice matches anywhere but at the end of a slice (e.g. `[0, ..xs, 0]`) are experimental (see issue #23121)\n   --> $DIR/feature-gate-advanced-slice-features.rs:19:9\n    |\n 19 |         [ 1, xs.., 5 ] => {}    //~ ERROR multiple-element slice matches"}, {"sha": "76d96f929bec19c329b7273a7edccc28dd3c24b7", "filename": "src/test/ui/feature-gate-allocator_internals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allocator_internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allocator_internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allocator_internals.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[default_lib_allocator]` attribute is an experimental feature\n+error[E0658]: the `#[default_lib_allocator]` attribute is an experimental feature\n   --> $DIR/feature-gate-allocator_internals.rs:11:1\n    |\n 11 | #![default_lib_allocator] //~ ERROR: attribute is an experimental feature"}, {"sha": "31de8d7628556a4d7bfd49848eb0659b1b9a518f", "filename": "src/test/ui/feature-gate-allow-internal-unsafe-nested-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: allow_internal_unsafe side-steps the unsafe_code lint\n+error[E0658]: allow_internal_unsafe side-steps the unsafe_code lint\n   --> $DIR/feature-gate-allow-internal-unsafe-nested-macro.rs:18:9\n    |\n 18 |         #[allow_internal_unsafe] //~ ERROR allow_internal_unsafe side-steps"}, {"sha": "3e2573eda21cb52bee6f88300ef320e0eaad7e0a", "filename": "src/test/ui/feature-gate-allow-internal-unstable-nested-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: allow_internal_unstable side-steps feature gating and stability checks\n+error[E0658]: allow_internal_unstable side-steps feature gating and stability checks\n   --> $DIR/feature-gate-allow-internal-unstable-nested-macro.rs:18:9\n    |\n 18 |         #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps"}, {"sha": "e19f3288e81639e9d608a3ba525e3a2da05b1388", "filename": "src/test/ui/feature-gate-allow-internal-unstable-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable-struct.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: allow_internal_unstable side-steps feature gating and stability checks\n+error[E0658]: allow_internal_unstable side-steps feature gating and stability checks\n   --> $DIR/feature-gate-allow-internal-unstable-struct.rs:14:1\n    |\n 14 | #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps"}, {"sha": "f110afb35a0342b19073a2dde7f2f88c450c49f0", "filename": "src/test/ui/feature-gate-allow-internal-unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow-internal-unstable.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: allow_internal_unstable side-steps feature gating and stability checks\n+error[E0658]: allow_internal_unstable side-steps feature gating and stability checks\n   --> $DIR/feature-gate-allow-internal-unstable.rs:13:1\n    |\n 13 | #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps"}, {"sha": "e04f44886dd2ea373a9848701355d261ab6000ca", "filename": "src/test/ui/feature-gate-allow_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-allow_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-allow_fail.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: allow_fail attribute is currently unstable (see issue #42219)\n+error[E0658]: allow_fail attribute is currently unstable (see issue #42219)\n   --> $DIR/feature-gate-allow_fail.rs:13:1\n    |\n 13 | #[allow_fail] //~ ERROR allow_fail attribute is currently unstable"}, {"sha": "ca47d40dc8f86047fed038829e80a4a13dccab32", "filename": "src/test/ui/feature-gate-arbitrary-self-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-arbitrary-self-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-arbitrary-self-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-arbitrary-self-types.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: arbitrary `self` types are unstable (see issue #44874)\n+error[E0658]: arbitrary `self` types are unstable (see issue #44874)\n   --> $DIR/feature-gate-arbitrary-self-types.rs:14:18\n    |\n 14 |     fn foo(self: Rc<Box<Self>>); //~ ERROR arbitrary `self` types are unstable\n@@ -7,7 +7,7 @@ error: arbitrary `self` types are unstable (see issue #44874)\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error: arbitrary `self` types are unstable (see issue #44874)\n+error[E0658]: arbitrary `self` types are unstable (see issue #44874)\n   --> $DIR/feature-gate-arbitrary-self-types.rs:20:18\n    |\n 20 |     fn foo(self: Rc<Box<Self>>) {} //~ ERROR arbitrary `self` types are unstable\n@@ -16,7 +16,7 @@ error: arbitrary `self` types are unstable (see issue #44874)\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error: arbitrary `self` types are unstable (see issue #44874)\n+error[E0658]: arbitrary `self` types are unstable (see issue #44874)\n   --> $DIR/feature-gate-arbitrary-self-types.rs:24:18\n    |\n 24 |     fn bar(self: Box<Rc<Self>>) {} //~ ERROR arbitrary `self` types are unstable"}, {"sha": "33e8806678d6698e81141118c44ff4edcb63d1ef", "filename": "src/test/ui/feature-gate-arbitrary_self_types-raw-pointer.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: raw pointer `self` is unstable (see issue #44874)\n+error[E0658]: raw pointer `self` is unstable (see issue #44874)\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:19:18\n    |\n 19 |     fn bar(self: *const Self);\n@@ -7,7 +7,7 @@ error: raw pointer `self` is unstable (see issue #44874)\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error: raw pointer `self` is unstable (see issue #44874)\n+error[E0658]: raw pointer `self` is unstable (see issue #44874)\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:14:18\n    |\n 14 |     fn foo(self: *const Self) {}\n@@ -16,7 +16,7 @@ error: raw pointer `self` is unstable (see issue #44874)\n    = help: add #![feature(arbitrary_self_types)] to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n-error: raw pointer `self` is unstable (see issue #44874)\n+error[E0658]: raw pointer `self` is unstable (see issue #44874)\n   --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:24:18\n    |\n 24 |     fn bar(self: *const Self) {}"}, {"sha": "481e6dc7055cc8627255811e7142591fefc65f5a", "filename": "src/test/ui/feature-gate-asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n+error[E0658]: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n   --> $DIR/feature-gate-asm.rs:13:9\n    |\n 13 |         asm!(\"\"); //~ ERROR inline assembly is not stable enough"}, {"sha": "aba0f72d35c1df8dd671fed0fbeed6e686141a81", "filename": "src/test/ui/feature-gate-asm2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-asm2.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n+error[E0658]: inline assembly is not stable enough for use and is subject to change (see issue #29722)\n   --> $DIR/feature-gate-asm2.rs:15:24\n    |\n 15 |         println!(\"{}\", asm!(\"\")); //~ ERROR inline assembly is not stable"}, {"sha": "1d44797cddc9b39f68ca460b1573f19cc3d68beb", "filename": "src/test/ui/feature-gate-assoc-type-defaults.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-assoc-type-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-assoc-type-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-assoc-type-defaults.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: associated type defaults are unstable (see issue #29661)\n+error[E0658]: associated type defaults are unstable (see issue #29661)\n   --> $DIR/feature-gate-assoc-type-defaults.rs:14:5\n    |\n 14 |     type Bar = u8; //~ ERROR associated type defaults are unstable"}, {"sha": "f9cccde37615856b1ac5d311f85bfc6319214abc", "filename": "src/test/ui/feature-gate-box-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-box-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-box-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box-expr.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: box expression syntax is experimental; you can call `Box::new` instead. (see issue #27779)\n+error[E0658]: box expression syntax is experimental; you can call `Box::new` instead. (see issue #27779)\n   --> $DIR/feature-gate-box-expr.rs:22:13\n    |\n 22 |     let x = box 'c'; //~ ERROR box expression syntax is experimental"}, {"sha": "ca009331b69c668d8892a608ec2a516c44883092", "filename": "src/test/ui/feature-gate-box_patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_patterns.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: box pattern syntax is experimental (see issue #29641)\n+error[E0658]: box pattern syntax is experimental (see issue #29641)\n   --> $DIR/feature-gate-box_patterns.rs:12:9\n    |\n 12 |     let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental"}, {"sha": "eefaa724650dad4e0aad5209e596602f825e04bb", "filename": "src/test/ui/feature-gate-box_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-box_syntax.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: box expression syntax is experimental; you can call `Box::new` instead. (see issue #27779)\n+error[E0658]: box expression syntax is experimental; you can call `Box::new` instead. (see issue #27779)\n   --> $DIR/feature-gate-box_syntax.rs:14:13\n    |\n 14 |     let x = box 3;"}, {"sha": "4b3bfbbe27ac87bcc7a8427061121a5c08b57c10", "filename": "src/test/ui/feature-gate-catch_expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `catch` expression is experimental (see issue #31436)\n+error[E0658]: `catch` expression is experimental (see issue #31436)\n   --> $DIR/feature-gate-catch_expr.rs:12:24\n    |\n 12 |       let catch_result = do catch { //~ ERROR `catch` expression is experimental"}, {"sha": "f808e78acce1ac9222e4fa38c7a232efecef5897", "filename": "src/test/ui/feature-gate-cfg-target-feature.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-feature.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,28 +1,28 @@\n-error: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n+error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n   --> $DIR/feature-gate-cfg-target-feature.rs:12:12\n    |\n 12 | #[cfg_attr(target_feature = \"x\", x)] //~ ERROR `cfg(target_feature)` is experimental\n    |            ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n \n-error: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n+error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n   --> $DIR/feature-gate-cfg-target-feature.rs:11:7\n    |\n 11 | #[cfg(target_feature = \"x\")] //~ ERROR `cfg(target_feature)` is experimental\n    |       ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n \n-error: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n+error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n   --> $DIR/feature-gate-cfg-target-feature.rs:15:19\n    |\n 15 | #[cfg(not(any(all(target_feature = \"x\"))))] //~ ERROR `cfg(target_feature)` is experimental\n    |                   ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_feature)] to the crate attributes to enable\n \n-error: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n+error[E0658]: `cfg(target_feature)` is experimental and subject to change (see issue #29717)\n   --> $DIR/feature-gate-cfg-target-feature.rs:19:10\n    |\n 19 |     cfg!(target_feature = \"x\");"}, {"sha": "ace23b38d2dc562f6266229181fa10f680e0641e", "filename": "src/test/ui/feature-gate-cfg-target-has-atomic.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-has-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-has-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-has-atomic.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,116 +1,116 @@\n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:23:7\n    |\n 23 | #[cfg(target_has_atomic = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:29:7\n    |\n 29 | #[cfg(target_has_atomic = \"8\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:34:7\n    |\n 34 | #[cfg(target_has_atomic = \"16\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:39:7\n    |\n 39 | #[cfg(target_has_atomic = \"16\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:44:7\n    |\n 44 | #[cfg(target_has_atomic = \"32\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:49:7\n    |\n 49 | #[cfg(target_has_atomic = \"32\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:54:7\n    |\n 54 | #[cfg(target_has_atomic = \"64\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:59:7\n    |\n 59 | #[cfg(target_has_atomic = \"64\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:64:7\n    |\n 64 | #[cfg(target_has_atomic = \"ptr\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:69:7\n    |\n 69 | #[cfg(target_has_atomic = \"ptr\")]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:76:10\n    |\n 76 |     cfg!(target_has_atomic = \"8\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:78:10\n    |\n 78 |     cfg!(target_has_atomic = \"16\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:80:10\n    |\n 80 |     cfg!(target_has_atomic = \"32\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:82:10\n    |\n 82 |     cfg!(target_has_atomic = \"64\");\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_has_atomic)] to the crate attributes to enable\n \n-error: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n+error[E0658]: `cfg(target_has_atomic)` is experimental and subject to change (see issue #32976)\n   --> $DIR/feature-gate-cfg-target-has-atomic.rs:84:10\n    |\n 84 |     cfg!(target_has_atomic = \"ptr\");"}, {"sha": "a0a03bdcd4696a50d5e8c461128f6fe524b1c045", "filename": "src/test/ui/feature-gate-cfg-target-thread-local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-thread-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-thread-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-thread-local.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `cfg(target_thread_local)` is experimental and subject to change (see issue #29594)\n+error[E0658]: `cfg(target_thread_local)` is experimental and subject to change (see issue #29594)\n   --> $DIR/feature-gate-cfg-target-thread-local.rs:19:16\n    |\n 19 |     #[cfg_attr(target_thread_local, thread_local)]"}, {"sha": "3e4a74636f923368f6b8dd8c268d2ef15b5d8a99", "filename": "src/test/ui/feature-gate-cfg-target-vendor.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-vendor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-vendor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-cfg-target-vendor.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,28 +1,28 @@\n-error: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n+error[E0658]: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n   --> $DIR/feature-gate-cfg-target-vendor.rs:12:12\n    |\n 12 | #[cfg_attr(target_vendor = \"x\", x)] //~ ERROR `cfg(target_vendor)` is experimental\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_vendor)] to the crate attributes to enable\n \n-error: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n+error[E0658]: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n   --> $DIR/feature-gate-cfg-target-vendor.rs:11:7\n    |\n 11 | #[cfg(target_vendor = \"x\")] //~ ERROR `cfg(target_vendor)` is experimental\n    |       ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_vendor)] to the crate attributes to enable\n \n-error: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n+error[E0658]: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n   --> $DIR/feature-gate-cfg-target-vendor.rs:15:19\n    |\n 15 | #[cfg(not(any(all(target_vendor = \"x\"))))] //~ ERROR `cfg(target_vendor)` is experimental\n    |                   ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(cfg_target_vendor)] to the crate attributes to enable\n \n-error: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n+error[E0658]: `cfg(target_vendor)` is experimental and subject to change (see issue #29718)\n   --> $DIR/feature-gate-cfg-target-vendor.rs:19:10\n    |\n 19 |     cfg!(target_vendor = \"x\");"}, {"sha": "edb3c5d62aeed2fd9f3c1bed9f72eccaf11c4344", "filename": "src/test/ui/feature-gate-compiler-builtins.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-compiler-builtins.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-compiler-builtins.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-compiler-builtins.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate which contains compiler-rt intrinsics and will never be stable\n+error[E0658]: the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate which contains compiler-rt intrinsics and will never be stable\n   --> $DIR/feature-gate-compiler-builtins.rs:11:1\n    |\n 11 | #![compiler_builtins] //~ ERROR the `#[compiler_builtins]` attribute is"}, {"sha": "d0a07e3d3c9ed2bf89aac2cb45d34e9f4eb9c416", "filename": "src/test/ui/feature-gate-concat_idents.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,12 +1,12 @@\n-error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n   --> $DIR/feature-gate-concat_idents.rs:15:13\n    |\n 15 |     let a = concat_idents!(X, Y_1); //~ ERROR `concat_idents` is not stable\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n-error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n   --> $DIR/feature-gate-concat_idents.rs:16:13\n    |\n 16 |     let b = concat_idents!(X, Y_2); //~ ERROR `concat_idents` is not stable"}, {"sha": "0ef6921c64d8bb2c6b2afcf7f8ba8be69c429036", "filename": "src/test/ui/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents2.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n   --> $DIR/feature-gate-concat_idents2.rs:14:5\n    |\n 14 |     concat_idents!(a, b); //~ ERROR `concat_idents` is not stable enough"}, {"sha": "a9a1e493a45f74a491f02836817f379610407de8", "filename": "src/test/ui/feature-gate-concat_idents3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-concat_idents3.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,12 +1,12 @@\n-error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n   --> $DIR/feature-gate-concat_idents3.rs:17:20\n    |\n 17 |     assert_eq!(10, concat_idents!(X, Y_1)); //~ ERROR `concat_idents` is not stable\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n-error: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n+error[E0658]: `concat_idents` is not stable enough for use and is subject to change (see issue #29599)\n   --> $DIR/feature-gate-concat_idents3.rs:18:20\n    |\n 18 |     assert_eq!(20, concat_idents!(X, Y_2)); //~ ERROR `concat_idents` is not stable"}, {"sha": "f3d39477387a49f38eaa46dfa76b4132b5966f5c", "filename": "src/test/ui/feature-gate-conservative_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-conservative_impl_trait.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `impl Trait` in return position is experimental (see issue #34511)\n+error[E0658]: `impl Trait` in return position is experimental (see issue #34511)\n   --> $DIR/feature-gate-conservative_impl_trait.rs:11:13\n    |\n 11 | fn foo() -> impl Fn() { || {} }"}, {"sha": "ecd1ff5a6c4551a9f4e8327344fc8d69cead8594", "filename": "src/test/ui/feature-gate-const_fn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_fn.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -16,39 +16,39 @@ error[E0379]: trait fns cannot be declared const\n 27 |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable\n    |     ^^^^^ trait fns cannot be const\n \n-error: const fn is unstable (see issue #24111)\n+error[E0658]: const fn is unstable (see issue #24111)\n   --> $DIR/feature-gate-const_fn.rs:13:1\n    |\n 13 | const fn foo() -> usize { 0 } //~ ERROR const fn is unstable\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: const fn is unstable (see issue #24111)\n+error[E0658]: const fn is unstable (see issue #24111)\n   --> $DIR/feature-gate-const_fn.rs:16:5\n    |\n 16 |     const fn foo() -> u32; //~ ERROR const fn is unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: const fn is unstable (see issue #24111)\n+error[E0658]: const fn is unstable (see issue #24111)\n   --> $DIR/feature-gate-const_fn.rs:18:5\n    |\n 18 |     const fn bar() -> u32 { 0 } //~ ERROR const fn is unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: const fn is unstable (see issue #24111)\n+error[E0658]: const fn is unstable (see issue #24111)\n   --> $DIR/feature-gate-const_fn.rs:23:5\n    |\n 23 |     const fn baz() -> u32 { 0 } //~ ERROR const fn is unstable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_fn)] to the crate attributes to enable\n \n-error: const fn is unstable (see issue #24111)\n+error[E0658]: const fn is unstable (see issue #24111)\n   --> $DIR/feature-gate-const_fn.rs:27:5\n    |\n 27 |     const fn foo() -> u32 { 0 } //~ ERROR const fn is unstable"}, {"sha": "322a38a996f77bdc4db11b0f55fc704f32b778f2", "filename": "src/test/ui/feature-gate-crate_in_paths.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-crate_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-crate_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-crate_in_paths.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `crate` in paths is experimental (see issue #45477)\n+error[E0658]: `crate` in paths is experimental (see issue #45477)\n   --> $DIR/feature-gate-crate_in_paths.rs:14:15\n    |\n 14 |     let _ = ::crate::S; //~ ERROR `crate` in paths is experimental"}, {"sha": "fadc76bc0c0369103216765451ef12c9e1459d45", "filename": "src/test/ui/feature-gate-crate_visibility_modifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-crate_visibility_modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-crate_visibility_modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-crate_visibility_modifier.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `crate` visibility modifier is experimental (see issue #45388)\n+error[E0658]: `crate` visibility modifier is experimental (see issue #45388)\n   --> $DIR/feature-gate-crate_visibility_modifier.rs:11:1\n    |\n 11 | crate struct Bender { //~ ERROR `crate` visibility modifier is experimental"}, {"sha": "f4d726c8c41c91c4650ad2a66914de8c3e94db02", "filename": "src/test/ui/feature-gate-custom_attribute.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,100 +1,100 @@\n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:17:1\n    |\n 17 | #[fake_attr] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:18:1\n    |\n 18 | #[fake_attr(100)] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:19:1\n    |\n 19 | #[fake_attr(1, 2, 3)] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:20:1\n    |\n 20 | #[fake_attr(\"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:21:1\n    |\n 21 | #[fake_attr(name = \"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:22:1\n    |\n 22 | #[fake_attr(1, \"hi\", key = 12, true, false)] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:23:1\n    |\n 23 | #[fake_attr(key = \"hello\", val = 10)] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:24:1\n    |\n 24 | #[fake_attr(key(\"hello\"), val(10))] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:25:1\n    |\n 25 | #[fake_attr(enabled = true, disabled = false)] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:26:1\n    |\n 26 | #[fake_attr(true)] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:27:1\n    |\n 27 | #[fake_attr(pi = 3.14159)] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:28:1\n    |\n 28 | #[fake_attr(b\"hi\")] //~ ERROR attribute `fake_attr` is currently unknown\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `fake_doc` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `fake_doc` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute.rs:29:1\n    |\n 29 | #[fake_doc(r\"doc\")] //~ ERROR attribute `fake_doc` is currently unknown"}, {"sha": "08878e172042b678cf3c7e6a9c7289ffc94f7209", "filename": "src/test/ui/feature-gate-custom_attribute2.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_attribute2.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,132 +1,132 @@\n-error: The attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:23:13\n    |\n 23 | struct StLt<#[lt_struct] 'a>(&'a u32);\n    |             ^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_struct` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:25:13\n    |\n 25 | struct StTy<#[ty_struct] I>(I);\n    |             ^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:28:11\n    |\n 28 | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n    |           ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_enum` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:30:11\n    |\n 30 | enum EnTy<#[ty_enum] J> { A(J), B }\n    |           ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:33:12\n    |\n 33 | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n    |            ^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_trait` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:35:12\n    |\n 35 | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n    |            ^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:38:11\n    |\n 38 | type TyLt<#[lt_type] 'd> = &'d u32;\n    |           ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_type` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:40:11\n    |\n 40 | type TyTy<#[ty_type] L> = (L, );\n    |           ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:43:6\n    |\n 43 | impl<#[lt_inherent] 'e> StLt<'e> { }\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_inherent` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:45:6\n    |\n 45 | impl<#[ty_inherent] M> StTy<M> { }\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:48:6\n    |\n 48 | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_impl_for` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:52:6\n    |\n 52 | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n    |      ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:57:9\n    |\n 57 | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n    |         ^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_fn` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:59:9\n    |\n 59 | fn f_ty<#[ty_fn] O>(_: O) { }\n    |         ^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:63:13\n    |\n 63 |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n    |             ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `ty_meth` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:65:13\n    |\n 65 |     fn m_ty<#[ty_meth] P>(_: P) { }\n    |             ^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `lt_hof` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/feature-gate-custom_attribute2.rs:70:19\n    |\n 70 |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32"}, {"sha": "86066285a55b3fe6fc0f322a6b165fa510a899ae", "filename": "src/test/ui/feature-gate-custom_derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-custom_derive.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n+error[E0658]: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n   --> $DIR/feature-gate-custom_derive.rs:11:1\n    |\n 11 | #[derive_Clone]"}, {"sha": "c7144f09bd613391acf508da4841902c783362d2", "filename": "src/test/ui/feature-gate-decl_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-decl_macro.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `macro` is experimental (see issue #39412)\n+error[E0658]: `macro` is experimental (see issue #39412)\n   --> $DIR/feature-gate-decl_macro.rs:13:1\n    |\n 13 | macro m() {} //~ ERROR `macro` is experimental (see issue #39412)"}, {"sha": "e009e0bc3c4715f4d1a31c32b3a0d797154469ee", "filename": "src/test/ui/feature-gate-doc_cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_cfg.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: #[doc(cfg(...))] is experimental (see issue #43781)\n+error[E0658]: #[doc(cfg(...))] is experimental (see issue #43781)\n   --> $DIR/feature-gate-doc_cfg.rs:11:1\n    |\n 11 | #[doc(cfg(unix))] //~ ERROR: #[doc(cfg(...))] is experimental"}, {"sha": "ee2d384e998419365a896b7f91111518c0c97e53", "filename": "src/test/ui/feature-gate-doc_masked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-doc_masked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-doc_masked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_masked.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: #[doc(masked)] is experimental (see issue #44027)\n+error[E0658]: #[doc(masked)] is experimental (see issue #44027)\n   --> $DIR/feature-gate-doc_masked.rs:11:1\n    |\n 11 | #[doc(masked)] //~ ERROR: #[doc(masked)] is experimental"}, {"sha": "36d854892be28d6c223a11601397845cfc113ecb", "filename": "src/test/ui/feature-gate-doc_spotlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-doc_spotlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-doc_spotlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-doc_spotlight.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: #[doc(spotlight)] is experimental (see issue #45040)\n+error[E0658]: #[doc(spotlight)] is experimental (see issue #45040)\n   --> $DIR/feature-gate-doc_spotlight.rs:11:1\n    |\n 11 | #[doc(spotlight)] //~ ERROR: #[doc(spotlight)] is experimental"}, {"sha": "2d26c6ae8ebe733035cb2accc1486a48c45bf64a", "filename": "src/test/ui/feature-gate-dotdoteq_in_patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dotdoteq_in_patterns.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `..=` syntax in patterns is experimental (see issue #28237)\n+error[E0658]: `..=` syntax in patterns is experimental (see issue #28237)\n   --> $DIR/feature-gate-dotdoteq_in_patterns.rs:13:9\n    |\n 13 |         0 ..= 3 => {} //~ ERROR `..=` syntax in patterns is experimental"}, {"sha": "cdeca7026b0c6b393f355f384d45ca59bf57dcec", "filename": "src/test/ui/feature-gate-dropck-ugeh.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dropck-ugeh.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future (see issue #28498)\n+error[E0658]: unsafe_destructor_blind_to_params has been replaced by may_dangle and will be removed in the future (see issue #28498)\n   --> $DIR/feature-gate-dropck-ugeh.rs:29:5\n    |\n 29 |     #[unsafe_destructor_blind_to_params] // This is the UGEH attribute"}, {"sha": "d6ba4b8ad669884947b63fd28aa13d415e015b06", "filename": "src/test/ui/feature-gate-dyn-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `dyn Trait` syntax is unstable (see issue #44662)\n+error[E0658]: `dyn Trait` syntax is unstable (see issue #44662)\n   --> $DIR/feature-gate-dyn-trait.rs:12:14\n    |\n 12 | type A = Box<dyn Trait>; //~ ERROR `dyn Trait` syntax is unstable"}, {"sha": "3185281ce4bb442a065a26673f06f9be26163d8c", "filename": "src/test/ui/feature-gate-exclusive-range-pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-exclusive-range-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-exclusive-range-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-exclusive-range-pattern.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: exclusive range pattern syntax is experimental (see issue #37854)\n+error[E0658]: exclusive range pattern syntax is experimental (see issue #37854)\n   --> $DIR/feature-gate-exclusive-range-pattern.rs:13:9\n    |\n 13 |         0 .. 3 => {} //~ ERROR exclusive range pattern syntax is experimental"}, {"sha": "022e53b6be0960ce6625035c8a619e5ece86b604", "filename": "src/test/ui/feature-gate-extern_in_paths.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_in_paths.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` in paths is experimental (see issue #44660)\n+error[E0658]: `extern` in paths is experimental (see issue #44660)\n   --> $DIR/feature-gate-extern_in_paths.rs:14:13\n    |\n 14 |     let _ = extern::std::vec::Vec::new(); //~ ERROR `extern` in paths is experimental"}, {"sha": "71caa37963f4f00c59afa72b6cfeba7126bc8b2f", "filename": "src/test/ui/feature-gate-extern_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-extern_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-extern_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_types.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: extern types are experimental (see issue #43467)\n+error[E0658]: extern types are experimental (see issue #43467)\n   --> $DIR/feature-gate-extern_types.rs:12:5\n    |\n 12 |     type T; //~ ERROR extern types are experimental"}, {"sha": "db6c99bceede69f9727cb2e06dd931443146ab6e", "filename": "src/test/ui/feature-gate-external_doc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-external_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-external_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-external_doc.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: #[doc(include = \"...\")] is experimental (see issue #44732)\n+error[E0658]: #[doc(include = \"...\")] is experimental (see issue #44732)\n   --> $DIR/feature-gate-external_doc.rs:11:1\n    |\n 11 | #[doc(include=\"asdf.md\")] //~ ERROR: #[doc(include = \"...\")] is experimental"}, {"sha": "28d8a80e602ab83bf067d39ffad3766df1e7c476", "filename": "src/test/ui/feature-gate-fundamental.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-fundamental.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-fundamental.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-fundamental.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[fundamental]` attribute is an experimental feature (see issue #29635)\n+error[E0658]: the `#[fundamental]` attribute is an experimental feature (see issue #29635)\n   --> $DIR/feature-gate-fundamental.rs:11:1\n    |\n 11 | #[fundamental] //~ ERROR the `#[fundamental]` attribute is an experimental feature"}, {"sha": "f559227f717e4241695a28d4702bdb697b1a8b43", "filename": "src/test/ui/feature-gate-generators.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-generators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-generators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generators.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: yield syntax is experimental\n+error[E0658]: yield syntax is experimental\n   --> $DIR/feature-gate-generators.rs:12:5\n    |\n 12 |     yield true; //~ ERROR yield syntax is experimental"}, {"sha": "c047914fb3b84ba94563a9def0c8bc481e62a9b8", "filename": "src/test/ui/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generic_associated_types.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,28 +1,28 @@\n-error: generic associated types are unstable (see issue #44265)\n+error[E0658]: generic associated types are unstable (see issue #44265)\n   --> $DIR/feature-gate-generic_associated_types.rs:14:5\n    |\n 14 |     type Pointer<T>: Deref<Target = T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n-error: generic associated types are unstable (see issue #44265)\n+error[E0658]: generic associated types are unstable (see issue #44265)\n   --> $DIR/feature-gate-generic_associated_types.rs:16:5\n    |\n 16 |     type Pointer2<T>: Deref<Target = T> where T: Clone, U: Clone;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n-error: generic associated types are unstable (see issue #44265)\n+error[E0658]: generic associated types are unstable (see issue #44265)\n   --> $DIR/feature-gate-generic_associated_types.rs:22:5\n    |\n 22 |     type Pointer<usize> = Box<usize>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_associated_types)] to the crate attributes to enable\n \n-error: generic associated types are unstable (see issue #44265)\n+error[E0658]: generic associated types are unstable (see issue #44265)\n   --> $DIR/feature-gate-generic_associated_types.rs:24:5\n    |\n 24 |     type Pointer2<u32> = Box<u32>;"}, {"sha": "a18d104cc2b3316c657da4ea25c3af8b29fb3896", "filename": "src/test/ui/feature-gate-generic_param_attrs.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-generic_param_attrs.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,132 +1,132 @@\n-error: attributes on lifetime bindings are experimental (see issue #34761)\n+error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:22:13\n    |\n 22 | struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n    |             ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on type parameter bindings are experimental (see issue #34761)\n+error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:24:13\n    |\n 24 | struct StTy<#[rustc_ty_struct] I>(I);\n    |             ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on lifetime bindings are experimental (see issue #34761)\n+error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:27:11\n    |\n 27 | enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n    |           ^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on type parameter bindings are experimental (see issue #34761)\n+error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:29:11\n    |\n 29 | enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n    |           ^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on lifetime bindings are experimental (see issue #34761)\n+error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:32:12\n    |\n 32 | trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n    |            ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on type parameter bindings are experimental (see issue #34761)\n+error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:34:12\n    |\n 34 | trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n    |            ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on lifetime bindings are experimental (see issue #34761)\n+error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:37:11\n    |\n 37 | type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n    |           ^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on type parameter bindings are experimental (see issue #34761)\n+error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:39:11\n    |\n 39 | type TyTy<#[rustc_ty_type] L> = (L, );\n    |           ^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on lifetime bindings are experimental (see issue #34761)\n+error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:42:6\n    |\n 42 | impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n    |      ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on type parameter bindings are experimental (see issue #34761)\n+error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:44:6\n    |\n 44 | impl<#[rustc_ty_inherent] M> StTy<M> { }\n    |      ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on lifetime bindings are experimental (see issue #34761)\n+error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:47:6\n    |\n 47 | impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n    |      ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on type parameter bindings are experimental (see issue #34761)\n+error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:51:6\n    |\n 51 | impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n    |      ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on lifetime bindings are experimental (see issue #34761)\n+error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:56:9\n    |\n 56 | fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n    |         ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on type parameter bindings are experimental (see issue #34761)\n+error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:58:9\n    |\n 58 | fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n    |         ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on lifetime bindings are experimental (see issue #34761)\n+error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:62:13\n    |\n 62 |     fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n    |             ^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on type parameter bindings are experimental (see issue #34761)\n+error[E0658]: attributes on type parameter bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:64:13\n    |\n 64 |     fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n    |             ^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(generic_param_attrs)] to the crate attributes to enable\n \n-error: attributes on lifetime bindings are experimental (see issue #34761)\n+error[E0658]: attributes on lifetime bindings are experimental (see issue #34761)\n   --> $DIR/feature-gate-generic_param_attrs.rs:69:19\n    |\n 69 |     where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32"}, {"sha": "8d82f6ee9e395d2471ff33fbda30d5c6e4905af8", "filename": "src/test/ui/feature-gate-global_allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-global_allocator.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[global_allocator]` attribute is an experimental feature\n+error[E0658]: the `#[global_allocator]` attribute is an experimental feature\n   --> $DIR/feature-gate-global_allocator.rs:11:1\n    |\n 11 | #[global_allocator] //~ ERROR: attribute is an experimental feature"}, {"sha": "ca946579f5dbed2d386eae67b22cb445c217ad62", "filename": "src/test/ui/feature-gate-global_asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-global_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-global_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-global_asm.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `global_asm!` is not stable enough for use and is subject to change (see issue #35119)\n+error[E0658]: `global_asm!` is not stable enough for use and is subject to change (see issue #35119)\n   --> $DIR/feature-gate-global_asm.rs:11:1\n    |\n 11 | global_asm!(\"\"); //~ ERROR `global_asm!` is not stable"}, {"sha": "06fdeadbbf693287a31a28ed7bc653c9b162e078", "filename": "src/test/ui/feature-gate-i128_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,12 +1,12 @@\n-error: 128-bit integers are not stable (see issue #35118)\n+error[E0658]: 128-bit integers are not stable (see issue #35118)\n   --> $DIR/feature-gate-i128_type.rs:12:5\n    |\n 12 |     0i128; //~ ERROR 128-bit integers are not stable\n    |     ^^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error: 128-bit integers are not stable (see issue #35118)\n+error[E0658]: 128-bit integers are not stable (see issue #35118)\n   --> $DIR/feature-gate-i128_type.rs:16:5\n    |\n 16 |     0u128; //~ ERROR 128-bit integers are not stable"}, {"sha": "ee81a26921498695e55adaf34d69f92ae5523afe", "filename": "src/test/ui/feature-gate-i128_type2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,28 +1,28 @@\n-error: 128-bit type is unstable (see issue #35118)\n+error[E0658]: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:13:15\n    |\n 13 | fn test1() -> i128 { //~ ERROR 128-bit type is unstable\n    |               ^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error: 128-bit type is unstable (see issue #35118)\n+error[E0658]: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:17:17\n    |\n 17 | fn test1_2() -> u128 { //~ ERROR 128-bit type is unstable\n    |                 ^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error: 128-bit type is unstable (see issue #35118)\n+error[E0658]: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:22:12\n    |\n 22 |     let x: i128 = 0; //~ ERROR 128-bit type is unstable\n    |            ^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error: 128-bit type is unstable (see issue #35118)\n+error[E0658]: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:26:12\n    |\n 26 |     let x: u128 = 0; //~ ERROR 128-bit type is unstable\n@@ -32,7 +32,7 @@ error: 128-bit type is unstable (see issue #35118)\n \n error[E0601]: main function not found\n \n-error: repr with 128-bit type is unstable (see issue #35118)\n+error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:30:1\n    |\n 30 | / enum A { //~ ERROR 128-bit type is unstable"}, {"sha": "918c749504aea6faf2540aff33bcb6bbb4e8b63d", "filename": "src/test/ui/feature-gate-intrinsics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-intrinsics.rs:11:1\n    |\n 11 | / extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n@@ -8,7 +8,7 @@ error: intrinsics are subject to change\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-intrinsics.rs:15:1\n    |\n 15 | / extern \"rust-intrinsic\" fn baz() {  //~ ERROR intrinsics are subject to change"}, {"sha": "28e3dab8fa72aea804780e0571ac997b8badb3fb", "filename": "src/test/ui/feature-gate-lang-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-lang-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-lang-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-lang-items.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: language items are subject to change\n+error[E0658]: language items are subject to change\n   --> $DIR/feature-gate-lang-items.rs:11:1\n    |\n 11 | #[lang=\"foo\"]   //~ ERROR language items are subject to change"}, {"sha": "78070d52f1f15fa9ee9865c6d2f9fee2cedfc59d", "filename": "src/test/ui/feature-gate-link_args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-link_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-link_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_args.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,20 +1,20 @@\n-error: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n   --> $DIR/feature-gate-link_args.rs:22:1\n    |\n 22 | #[link_args = \"-l expected_use_case\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(link_args)] to the crate attributes to enable\n \n-error: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n   --> $DIR/feature-gate-link_args.rs:26:1\n    |\n 26 | #[link_args = \"-l unexected_use_on_non_extern_item\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(link_args)] to the crate attributes to enable\n \n-error: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n+error[E0658]: the `link_args` attribute is experimental and not portable across platforms, it is recommended to use `#[link(name = \"foo\")] instead (see issue #29596)\n   --> $DIR/feature-gate-link_args.rs:19:1\n    |\n 19 | #![link_args = \"-l unexpected_use_as_inner_attr_on_mod\"]"}, {"sha": "8aada72fb0c8bb0d10c40bfbb3ccfbe485809add", "filename": "src/test/ui/feature-gate-link_cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_cfg.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: is feature gated (see issue #37406)\n+error[E0658]: is feature gated (see issue #37406)\n   --> $DIR/feature-gate-link_cfg.rs:11:1\n    |\n 11 | #[link(name = \"foo\", cfg(foo))]"}, {"sha": "136658f23fdd886d816903afa2632adda14bbace", "filename": "src/test/ui/feature-gate-link_llvm_intrinsics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-link_llvm_intrinsics.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: linking to LLVM intrinsics is experimental (see issue #29602)\n+error[E0658]: linking to LLVM intrinsics is experimental (see issue #29602)\n   --> $DIR/feature-gate-link_llvm_intrinsics.rs:13:5\n    |\n 13 |     fn sqrt(x: f32) -> f32;"}, {"sha": "54764b1920c4d3cd9ccf73df292bcb1bc3f6e73c", "filename": "src/test/ui/feature-gate-linkage.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-linkage.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `linkage` attribute is experimental and not portable across platforms (see issue #29603)\n+error[E0658]: the `linkage` attribute is experimental and not portable across platforms (see issue #29603)\n   --> $DIR/feature-gate-linkage.rs:12:5\n    |\n 12 |     #[linkage = \"extern_weak\"] static foo: isize;"}, {"sha": "e58693d35c210eebf568e0012527891f9a2399eb", "filename": "src/test/ui/feature-gate-linker-flavor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-linker-flavor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-linker-flavor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-linker-flavor.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[used]` attribute is an experimental feature (see issue #40289)\n+error[E0658]: the `#[used]` attribute is an experimental feature (see issue #40289)\n   --> $DIR/feature-gate-linker-flavor.rs:16:1\n    |\n 16 | #[used]"}, {"sha": "363b1753f4ad9b0e6f45d49dae00f27e37e02874", "filename": "src/test/ui/feature-gate-log_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n   --> $DIR/feature-gate-log_syntax.rs:12:5\n    |\n 12 |     log_syntax!() //~ ERROR `log_syntax!` is not stable enough"}, {"sha": "f47a5076e7953dc07936710b5c3db74451dc724a", "filename": "src/test/ui/feature-gate-log_syntax2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-log_syntax2.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `log_syntax!` is not stable enough for use and is subject to change (see issue #29598)\n   --> $DIR/feature-gate-log_syntax2.rs:14:20\n    |\n 14 |     println!(\"{}\", log_syntax!()); //~ ERROR `log_syntax!` is not stable"}, {"sha": "553a7d3d1315868ae87f90f9c28d36377e7417a8", "filename": "src/test/ui/feature-gate-macro-lifetime-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macro-lifetime-matcher.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: :lifetime fragment specifier is experimental and subject to change (see issue #46895)\n+error[E0658]: :lifetime fragment specifier is experimental and subject to change (see issue #46895)\n   --> $DIR/feature-gate-macro-lifetime-matcher.rs:14:19\n    |\n 14 | macro_rules! m { ($lt:lifetime) => {} }"}, {"sha": "ee1844c09225903b9d55ca56d4a573aae2a10084", "filename": "src/test/ui/feature-gate-macro-vis-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-macro-vis-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-macro-vis-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-macro-vis-matcher.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: :vis fragment specifier is experimental and subject to change (see issue #41022)\n+error[E0658]: :vis fragment specifier is experimental and subject to change (see issue #41022)\n   --> $DIR/feature-gate-macro-vis-matcher.rs:14:19\n    |\n 14 | macro_rules! m { ($v:vis) => {} }"}, {"sha": "56e9c8b37e31e6fff463004da6e95ad140ceefb6", "filename": "src/test/ui/feature-gate-main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-main.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: declaration of a nonstandard #[main] function may change over time, for now a top-level `fn main()` is required (see issue #29634)\n+error[E0658]: declaration of a nonstandard #[main] function may change over time, for now a top-level `fn main()` is required (see issue #29634)\n   --> $DIR/feature-gate-main.rs:12:1\n    |\n 12 | fn foo() {} //~ ERROR: declaration of a nonstandard #[main] function may change over time"}, {"sha": "1d45dedb4971c28ee8113085badbc3948b8454c0", "filename": "src/test/ui/feature-gate-match_beginning_vert.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_beginning_vert.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,20 +1,20 @@\n-error: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n+error[E0658]: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n   --> $DIR/feature-gate-match_beginning_vert.rs:24:9\n    |\n 24 |         | A => println!(\"A\"),\n    |         ^\n    |\n    = help: add #![feature(match_beginning_vert)] to the crate attributes to enable\n \n-error: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n+error[E0658]: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n   --> $DIR/feature-gate-match_beginning_vert.rs:26:9\n    |\n 26 |         | B | C => println!(\"BC!\"),\n    |         ^\n    |\n    = help: add #![feature(match_beginning_vert)] to the crate attributes to enable\n \n-error: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n+error[E0658]: Use of a '|' at the beginning of a match arm is experimental (see issue #44101)\n   --> $DIR/feature-gate-match_beginning_vert.rs:28:9\n    |\n 28 |         | _ => {},"}, {"sha": "1bedfb7f8bee7df0600cbe4d27dbabb242f89a26", "filename": "src/test/ui/feature-gate-match_default_bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-match_default_bindings.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: non-reference pattern used to match a reference (see issue #42640)\n+error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n   --> $DIR/feature-gate-match_default_bindings.rs:13:9\n    |\n 13 |         Some(n) => {},"}, {"sha": "a3a3f7bd1742dd922a2fa95b73d955324e3d66a0", "filename": "src/test/ui/feature-gate-may-dangle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-may-dangle.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: may_dangle has unstable semantics and may be removed in the future (see issue #34761)\n+error[E0658]: may_dangle has unstable semantics and may be removed in the future (see issue #34761)\n   --> $DIR/feature-gate-may-dangle.rs:18:6\n    |\n 18 | impl<#[may_dangle] A> Drop for Pt<A> {"}, {"sha": "5f72234e5df5be1167522eef437242a925d5de03", "filename": "src/test/ui/feature-gate-naked_functions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-naked_functions.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,12 +1,12 @@\n-error: the `#[naked]` attribute is an experimental feature (see issue #32408)\n+error[E0658]: the `#[naked]` attribute is an experimental feature (see issue #32408)\n   --> $DIR/feature-gate-naked_functions.rs:11:1\n    |\n 11 | #[naked]\n    | ^^^^^^^^\n    |\n    = help: add #![feature(naked_functions)] to the crate attributes to enable\n \n-error: the `#[naked]` attribute is an experimental feature (see issue #32408)\n+error[E0658]: the `#[naked]` attribute is an experimental feature (see issue #32408)\n   --> $DIR/feature-gate-naked_functions.rs:15:1\n    |\n 15 | #[naked]"}, {"sha": "11b8c31e6df5a02983db849fe9834fcd87b9a5c2", "filename": "src/test/ui/feature-gate-needs-allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-needs-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-needs-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-needs-allocator.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[needs_allocator]` attribute is an experimental feature\n+error[E0658]: the `#[needs_allocator]` attribute is an experimental feature\n   --> $DIR/feature-gate-needs-allocator.rs:11:1\n    |\n 11 | #![needs_allocator] //~ ERROR the `#[needs_allocator]` attribute is"}, {"sha": "2fd04f51e7e527950c4250ea3de1e717b4570a16", "filename": "src/test/ui/feature-gate-never_type.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-never_type.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,36 +1,36 @@\n-error: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental (see issue #35121)\n   --> $DIR/feature-gate-never_type.rs:17:17\n    |\n 17 | type Ma = (u32, !, i32); //~ ERROR type is experimental\n    |                 ^\n    |\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n-error: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental (see issue #35121)\n   --> $DIR/feature-gate-never_type.rs:18:20\n    |\n 18 | type Meeshka = Vec<!>; //~ ERROR type is experimental\n    |                    ^\n    |\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n-error: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental (see issue #35121)\n   --> $DIR/feature-gate-never_type.rs:19:16\n    |\n 19 | type Mow = &fn(!) -> !; //~ ERROR type is experimental\n    |                ^\n    |\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n-error: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental (see issue #35121)\n   --> $DIR/feature-gate-never_type.rs:20:19\n    |\n 20 | type Skwoz = &mut !; //~ ERROR type is experimental\n    |                   ^\n    |\n    = help: add #![feature(never_type)] to the crate attributes to enable\n \n-error: The `!` type is experimental (see issue #35121)\n+error[E0658]: The `!` type is experimental (see issue #35121)\n   --> $DIR/feature-gate-never_type.rs:23:16\n    |\n 23 |     type Wub = !; //~ ERROR type is experimental"}, {"sha": "c7af8cf6aab7e629f736fad4ad6e4786c4eb7281", "filename": "src/test/ui/feature-gate-no-debug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-no-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-no-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no-debug.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand (see issue #29721)\n+error[E0658]: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand (see issue #29721)\n   --> $DIR/feature-gate-no-debug.rs:13:1\n    |\n 13 | #[no_debug] //~ ERROR the `#[no_debug]` attribute was"}, {"sha": "7fc898520022e1ebf150a008670d3eaca07b6388", "filename": "src/test/ui/feature-gate-no_core.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-no_core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-no_core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-no_core.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: no_core is experimental (see issue #29639)\n+error[E0658]: no_core is experimental (see issue #29639)\n   --> $DIR/feature-gate-no_core.rs:11:1\n    |\n 11 | #![no_core] //~ ERROR no_core is experimental"}, {"sha": "deb707752b0664ae49213fbfbcc4c89e2565c937", "filename": "src/test/ui/feature-gate-non_ascii_idents.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,28 +1,28 @@\n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:11:1\n    |\n 11 | extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:13:5\n    |\n 13 | use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents\n    |     ^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:15:1\n    |\n 15 | mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n    | ^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:19:1\n    |\n 19 | / fn b\u00e4r( //~ ERROR non-ascii idents\n@@ -36,71 +36,71 @@ error: non-ascii idents are not fully supported. (see issue #28979)\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:20:5\n    |\n 20 |     b\u00e4z: isize //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:22:9\n    |\n 22 |     let _\u00f6: isize; //~ ERROR non-ascii idents\n    |         ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:25:10\n    |\n 25 |         (_\u00e4, _) => {} //~ ERROR non-ascii idents\n    |          ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:29:1\n    |\n 29 | struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n    | ^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:30:5\n    |\n 30 |     f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n    |     ^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:33:1\n    |\n 33 | enum B\u00e4r { //~ ERROR non-ascii idents\n    | ^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:34:5\n    |\n 34 |     B\u00e4z { //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:35:9\n    |\n 35 |         q\u00fcx: isize //~ ERROR non-ascii idents\n    |         ^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:40:5\n    |\n 40 |     fn q\u00fcx();  //~ ERROR non-ascii idents"}, {"sha": "320f40e31b8145472ea3b8b4d8427f4280d29378", "filename": "src/test/ui/feature-gate-non_exhaustive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_exhaustive.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: non exhaustive is an experimental feature (see issue #44109)\n+error[E0658]: non exhaustive is an experimental feature (see issue #44109)\n   --> $DIR/feature-gate-non_exhaustive.rs:13:1\n    |\n 13 | #[non_exhaustive] //~ERROR non exhaustive is an experimental feature (see issue #44109)"}, {"sha": "4ceb697d0df31923a27dcb03656f5b222e128188", "filename": "src/test/ui/feature-gate-omit-gdb-pretty-printer-section.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-omit-gdb-pretty-printer-section.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-omit-gdb-pretty-printer-section.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-omit-gdb-pretty-printer-section.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[omit_gdb_pretty_printer_section]` attribute is just used for the Rust test suite\n+error[E0658]: the `#[omit_gdb_pretty_printer_section]` attribute is just used for the Rust test suite\n   --> $DIR/feature-gate-omit-gdb-pretty-printer-section.rs:11:1\n    |\n 11 | #[omit_gdb_pretty_printer_section] //~ ERROR the `#[omit_gdb_pretty_printer_section]` attribute is"}, {"sha": "b1658c3be1647829a278744d7b11a017fe4825a5", "filename": "src/test/ui/feature-gate-on-unimplemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-on-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-on-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-on-unimplemented.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[rustc_on_unimplemented]` attribute is an experimental feature (see issue #29628)\n+error[E0658]: the `#[rustc_on_unimplemented]` attribute is an experimental feature (see issue #29628)\n   --> $DIR/feature-gate-on-unimplemented.rs:14:1\n    |\n 14 | #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}`\"]"}, {"sha": "beb734a8ef871044c81202ffed7906b40fc49b10", "filename": "src/test/ui/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-optin-builtin-traits.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,12 +1,12 @@\n-error: auto traits are experimental and possibly buggy (see issue #13231)\n+error[E0658]: auto traits are experimental and possibly buggy (see issue #13231)\n   --> $DIR/feature-gate-optin-builtin-traits.rs:20:1\n    |\n 20 | auto trait AutoDummyTrait {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(optin_builtin_traits)] to the crate attributes to enable\n \n-error: negative trait bounds are not yet fully implemented; use marker types for now (see issue #13231)\n+error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now (see issue #13231)\n   --> $DIR/feature-gate-optin-builtin-traits.rs:23:1\n    |\n 23 | impl !DummyTrait for DummyStruct {}"}, {"sha": "c588cabe23993d6652b038f07c9bfcc4e623512f", "filename": "src/test/ui/feature-gate-placement-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-placement-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-placement-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-placement-expr.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: placement-in expression syntax is experimental and subject to change. (see issue #27779)\n+error[E0658]: placement-in expression syntax is experimental and subject to change. (see issue #27779)\n   --> $DIR/feature-gate-placement-expr.rs:24:13\n    |\n 24 |     let x = HEAP <- 'c'; //~ ERROR placement-in expression syntax is experimental"}, {"sha": "b54b2d8999452d793eff0102f13220ab2fc96914", "filename": "src/test/ui/feature-gate-plugin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-plugin.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n   --> $DIR/feature-gate-plugin.rs:13:1\n    |\n 13 | #![plugin(foo)]"}, {"sha": "fb5bd9d1afe8b2685e5bb36ab2afbd229f95aeac", "filename": "src/test/ui/feature-gate-plugin_registrar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-plugin_registrar.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: compiler plugins are experimental and possibly buggy (see issue #29597)\n+error[E0658]: compiler plugins are experimental and possibly buggy (see issue #29597)\n   --> $DIR/feature-gate-plugin_registrar.rs:16:1\n    |\n 16 | pub fn registrar() {}"}, {"sha": "5487ae21f3b89894fc9b270cdb57f0c1e648c947", "filename": "src/test/ui/feature-gate-prelude_import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-prelude_import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-prelude_import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-prelude_import.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `#[prelude_import]` is for use by rustc only\n+error[E0658]: `#[prelude_import]` is for use by rustc only\n   --> $DIR/feature-gate-prelude_import.rs:11:1\n    |\n 11 | #[prelude_import] //~ ERROR `#[prelude_import]` is for use by rustc only"}, {"sha": "f2893cbb97d6ad258e9fda467af4d7e2f2d25d21", "filename": "src/test/ui/feature-gate-profiler-runtime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-profiler-runtime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-profiler-runtime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-profiler-runtime.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[profiler_runtime]` attribute is used to identify the `profiler_builtins` crate which contains the profiler runtime and will never be stable\n+error[E0658]: the `#[profiler_runtime]` attribute is used to identify the `profiler_builtins` crate which contains the profiler runtime and will never be stable\n   --> $DIR/feature-gate-profiler-runtime.rs:11:1\n    |\n 11 | #![profiler_runtime] //~ ERROR the `#[profiler_runtime]` attribute is"}, {"sha": "e430a04a3e84d12c729668e97a5366ed3be1e65e", "filename": "src/test/ui/feature-gate-repr-simd.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-repr-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-repr-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr-simd.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: SIMD types are experimental and possibly buggy (see issue #27731)\n+error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n   --> $DIR/feature-gate-repr-simd.rs:11:1\n    |\n 11 | #[repr(simd)] //~ error: SIMD types are experimental"}, {"sha": "982ebb01016626986f8ef2d3ea58a1b6c66f840c", "filename": "src/test/ui/feature-gate-repr128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: repr with 128-bit type is unstable (see issue #35118)\n+error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-repr128.rs:12:1\n    |\n 12 | / enum A { //~ ERROR repr with 128-bit type is unstable"}, {"sha": "dd88067d58f9a940cdb5582c053210f7fbafac48", "filename": "src/test/ui/feature-gate-repr_align.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-repr_align.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-repr_align.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr_align.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the struct `#[repr(align(u16))]` attribute is experimental (see issue #33626)\n+error[E0658]: the struct `#[repr(align(u16))]` attribute is experimental (see issue #33626)\n   --> $DIR/feature-gate-repr_align.rs:12:1\n    |\n 12 | #[repr(align(64))] //~ error: the struct `#[repr(align(u16))]` attribute is experimental"}, {"sha": "f47588c3a7d6303db72d815497be036932194669", "filename": "src/test/ui/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc-attrs.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,20 +1,20 @@\n-error: the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+error[E0658]: the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n   --> $DIR/feature-gate-rustc-attrs.rs:15:1\n    |\n 15 | #[rustc_variance] //~ ERROR the `#[rustc_variance]` attribute is just used for rustc unit tests and will never be stable\n    | ^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n+error[E0658]: the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable (see issue #29642)\n   --> $DIR/feature-gate-rustc-attrs.rs:16:1\n    |\n 16 | #[rustc_error] //~ ERROR the `#[rustc_error]` attribute is just used for rustc unit tests and will never be stable\n    | ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n+error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n   --> $DIR/feature-gate-rustc-attrs.rs:17:1\n    |\n 17 | #[rustc_foo]"}, {"sha": "922898b7d36f0d17341b872b74d1406be263dd38", "filename": "src/test/ui/feature-gate-rustc_const_unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-rustc_const_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-rustc_const_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-rustc_const_unstable.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[rustc_const_unstable]` attribute is an internal feature\n+error[E0658]: the `#[rustc_const_unstable]` attribute is an internal feature\n   --> $DIR/feature-gate-rustc_const_unstable.rs:18:1\n    |\n 18 | #[rustc_const_unstable(feature=\"fzzzzzt\")] //~ERROR internal feature"}, {"sha": "6d77161864ff8fafe77449a8750733543cf6a7d7", "filename": "src/test/ui/feature-gate-sanitizer-runtime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-sanitizer-runtime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-sanitizer-runtime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-sanitizer-runtime.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[sanitizer_runtime]` attribute is used to identify crates that contain the runtime of a sanitizer and will never be stable\n+error[E0658]: the `#[sanitizer_runtime]` attribute is used to identify crates that contain the runtime of a sanitizer and will never be stable\n   --> $DIR/feature-gate-sanitizer-runtime.rs:11:1\n    |\n 11 | #![sanitizer_runtime] //~ ERROR the `#[sanitizer_runtime]` attribute is"}, {"sha": "447706ab858c4424caf5b0644508c0c7897c392d", "filename": "src/test/ui/feature-gate-simd.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-simd.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-simd.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-simd.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: SIMD types are experimental and possibly buggy (see issue #27731)\n+error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n   --> $DIR/feature-gate-simd.rs:14:1\n    |\n 14 | #[repr(simd)] //~ ERROR SIMD types are experimental"}, {"sha": "7a2e67c89821c6093f7c47dbad648ff10454f1bf", "filename": "src/test/ui/feature-gate-slice-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: slice pattern syntax is experimental (see issue #23121)\n+error[E0658]: slice pattern syntax is experimental (see issue #23121)\n   --> $DIR/feature-gate-slice-patterns.rs:16:9\n    |\n 16 |         [1, 2, xs..] => {} //~ ERROR slice pattern syntax is experimental"}, {"sha": "61cbe42d0fb442baedea290bea713d8c1a7c7463", "filename": "src/test/ui/feature-gate-start.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-start.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-start.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-start.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: a #[start] function is an experimental feature whose signature may change over time (see issue #29633)\n+error[E0658]: a #[start] function is an experimental feature whose signature may change over time (see issue #29633)\n   --> $DIR/feature-gate-start.rs:12:1\n    |\n 12 | fn foo() {} //~ ERROR: a #[start] function is an experimental feature"}, {"sha": "9ec4f6480b1f4f664045e8f4e4620edadc9d2f0e", "filename": "src/test/ui/feature-gate-static-nobundle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-static-nobundle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-static-nobundle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-static-nobundle.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: kind=\"static-nobundle\" is feature gated (see issue #37403)\n+error[E0658]: kind=\"static-nobundle\" is feature gated (see issue #37403)\n   --> $DIR/feature-gate-static-nobundle.rs:11:1\n    |\n 11 | #[link(name=\"foo\", kind=\"static-nobundle\")]"}, {"sha": "4d2e2f671c51c8b1fa3ac1f421fca2110ac8f4ce", "filename": "src/test/ui/feature-gate-stmt_expr_attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: attributes on non-item statements and expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on non-item statements and expressions are experimental. (see issue #15701)\n   --> $DIR/feature-gate-stmt_expr_attributes.rs:11:16\n    |\n 11 | const X: i32 = #[allow(dead_code)] 8;"}, {"sha": "b6ad1b65691ce14bbde54c4fdb0665af32b0cc82", "filename": "src/test/ui/feature-gate-target_feature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-target_feature.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[target_feature]` attribute is an experimental feature\n+error[E0658]: the `#[target_feature]` attribute is an experimental feature\n   --> $DIR/feature-gate-target_feature.rs:11:1\n    |\n 11 | #[target_feature = \"+sse2\"]"}, {"sha": "0f932abe4ee31b725533964d8ddf17eec73ad04c", "filename": "src/test/ui/feature-gate-thread_local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-thread_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-thread_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-thread_local.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `#[thread_local]` is an experimental feature, and does not currently handle destructors. There is no corresponding `#[task_local]` mapping to the task model (see issue #29594)\n+error[E0658]: `#[thread_local]` is an experimental feature, and does not currently handle destructors. There is no corresponding `#[task_local]` mapping to the task model (see issue #29594)\n   --> $DIR/feature-gate-thread_local.rs:18:1\n    |\n 18 | #[thread_local] //~ ERROR `#[thread_local]` is an experimental feature"}, {"sha": "eae3baa7e4d238d80cb3287a962925f03afa00bb", "filename": "src/test/ui/feature-gate-trace_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trace_macros.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n+error[E0658]: `trace_macros` is not stable enough for use and is subject to change (see issue #29598)\n   --> $DIR/feature-gate-trace_macros.rs:12:5\n    |\n 12 |     trace_macros!(true); //~ ERROR: `trace_macros` is not stable"}, {"sha": "fa6ef84a7f557a8cddb2233eb08494992bbdbd8e", "filename": "src/test/ui/feature-gate-type_ascription.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-type_ascription.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: type ascription is experimental (see issue #23416)\n+error[E0658]: type ascription is experimental (see issue #23416)\n   --> $DIR/feature-gate-type_ascription.rs:14:13\n    |\n 14 |     let a = 10: u8; //~ ERROR type ascription is experimental"}, {"sha": "ae14054b6e394ae4be9341104016202d35bae46e", "filename": "src/test/ui/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,28 +1,28 @@\n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:20:5\n    |\n 20 |     extern \"rust-call\" fn call(self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:25:5\n    |\n 25 |     extern \"rust-call\" fn call_once(self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:5\n    |\n 30 |     extern \"rust-call\" fn call_mut(&self, args: ()) -> () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unboxed_closures)] to the crate attributes to enable\n \n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:35:5\n    |\n 35 |     extern \"rust-call\" fn call_once(&self, args: ()) -> () {}"}, {"sha": "a27b00aaac0face7690125ca73b6b684ca1ae31b", "filename": "src/test/ui/feature-gate-unboxed-closures-method-calls.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-method-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-method-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-method-calls.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,20 +1,20 @@\n-error: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-method-calls.rs:14:7\n    |\n 14 |     f.call(()); //~ ERROR use of unstable library feature 'fn_traits'\n    |       ^^^^\n    |\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n-error: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-method-calls.rs:15:7\n    |\n 15 |     f.call_mut(()); //~ ERROR use of unstable library feature 'fn_traits'\n    |       ^^^^^^^^\n    |\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n-error: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-method-calls.rs:16:7\n    |\n 16 |     f.call_once(()); //~ ERROR use of unstable library feature 'fn_traits'"}, {"sha": "3d0dd15b07f6cd359913f979aae3a65323b8f9c6", "filename": "src/test/ui/feature-gate-unboxed-closures-ufcs-calls.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures-ufcs-calls.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,20 +1,20 @@\n-error: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:14:5\n    |\n 14 |     Fn::call(&f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n    |     ^^^^^^^^\n    |\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n-error: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:15:5\n    |\n 15 |     FnMut::call_mut(&mut f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(fn_traits)] to the crate attributes to enable\n \n-error: use of unstable library feature 'fn_traits' (see issue #29625)\n+error[E0658]: use of unstable library feature 'fn_traits' (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures-ufcs-calls.rs:16:5\n    |\n 16 |     FnOnce::call_once(f, ()); //~ ERROR use of unstable library feature 'fn_traits'"}, {"sha": "ca8a59249463d2838de88642af888722c3b19fed", "filename": "src/test/ui/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures.rs:16:5\n    |\n 16 | /     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {"}, {"sha": "07c5e1ad640fa677731f707e91538dbede3b6473", "filename": "src/test/ui/feature-gate-underscore-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-underscore-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-underscore-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore-lifetimes.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: underscore lifetimes are unstable (see issue #44524)\n+error[E0658]: underscore lifetimes are unstable (see issue #44524)\n   --> $DIR/feature-gate-underscore-lifetimes.rs:13:23\n    |\n 13 | fn foo(x: &u8) -> Foo<'_> { //~ ERROR underscore lifetimes are unstable"}, {"sha": "978ce5982bad1da29baee57a44249972a835d0aa", "filename": "src/test/ui/feature-gate-universal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-universal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-universal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-universal.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: `impl Trait` in argument position is experimental (see issue #34511)\n+error[E0658]: `impl Trait` in argument position is experimental (see issue #34511)\n   --> $DIR/feature-gate-universal.rs:13:11\n    |\n 13 | fn foo(x: impl std::fmt::Debug) { print!(\"{:?}\", x); }"}, {"sha": "4714df9e96cd261016bbe9376b3b397df422a3ca", "filename": "src/test/ui/feature-gate-unsized_tuple_coercion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unsized_tuple_coercion.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: Unsized tuple coercion is not stable enough for use and is subject to change (see issue #42877)\n+error[E0658]: Unsized tuple coercion is not stable enough for use and is subject to change (see issue #42877)\n   --> $DIR/feature-gate-unsized_tuple_coercion.rs:12:24\n    |\n 12 |     let _ : &(Send,) = &((),);"}, {"sha": "14b66cb5c815ab225a0913cfad74598b27c64585", "filename": "src/test/ui/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: unions with non-`Copy` fields are unstable (see issue #32836)\n+error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n   --> $DIR/feature-gate-untagged_unions.rs:19:1\n    |\n 19 | / union U3 { //~ ERROR unions with non-`Copy` fields are unstable\n@@ -8,7 +8,7 @@ error: unions with non-`Copy` fields are unstable (see issue #32836)\n    |\n    = help: add #![feature(untagged_unions)] to the crate attributes to enable\n \n-error: unions with non-`Copy` fields are unstable (see issue #32836)\n+error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n   --> $DIR/feature-gate-untagged_unions.rs:23:1\n    |\n 23 | / union U4<T> { //~ ERROR unions with non-`Copy` fields are unstable\n@@ -18,7 +18,7 @@ error: unions with non-`Copy` fields are unstable (see issue #32836)\n    |\n    = help: add #![feature(untagged_unions)] to the crate attributes to enable\n \n-error: unions with `Drop` implementations are unstable (see issue #32836)\n+error[E0658]: unions with `Drop` implementations are unstable (see issue #32836)\n   --> $DIR/feature-gate-untagged_unions.rs:27:1\n    |\n 27 | / union U5 { //~ ERROR unions with `Drop` implementations are unstable"}, {"sha": "d9b555e2634e8cc1bc83a98a5ec0cf53e0cb4231", "filename": "src/test/ui/feature-gate-unwind-attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unwind-attributes.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: #[unwind] is experimental\n+error[E0658]: #[unwind] is experimental\n   --> $DIR/feature-gate-unwind-attributes.rs:21:5\n    |\n 21 |     #[unwind] //~ ERROR #[unwind] is experimental"}, {"sha": "6ae691c384be8a4a945f6d3535a337554968594a", "filename": "src/test/ui/feature-gate-use_nested_groups.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,20 +1,20 @@\n-error: nested groups in `use` are experimental (see issue #44494)\n+error[E0658]: nested groups in `use` are experimental (see issue #44494)\n   --> $DIR/feature-gate-use_nested_groups.rs:27:12\n    |\n 27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n    |            ^^^^^^^^^^^^\n    |\n    = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n \n-error: glob imports in `use` groups are experimental (see issue #44494)\n+error[E0658]: glob imports in `use` groups are experimental (see issue #44494)\n   --> $DIR/feature-gate-use_nested_groups.rs:27:16\n    |\n 27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n    |                ^\n    |\n    = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n \n-error: paths in `use` groups are experimental (see issue #44494)\n+error[E0658]: paths in `use` groups are experimental (see issue #44494)\n   --> $DIR/feature-gate-use_nested_groups.rs:27:19\n    |\n 27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental"}, {"sha": "6d5ab1fd2c5828e32bd679f6d041a038e221489f", "filename": "src/test/ui/feature-gate-used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-used.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: the `#[used]` attribute is an experimental feature (see issue #40289)\n+error[E0658]: the `#[used]` attribute is an experimental feature (see issue #40289)\n   --> $DIR/feature-gate-used.rs:11:1\n    |\n 11 | #[used]"}, {"sha": "10190ef93f0d9b08225bf6b31e20882a42bc2ea2", "filename": "src/test/ui/feature-gate-wasm_import_memory.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-wasm_import_memory.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: wasm_import_memory attribute is currently unstable\n+error[E0658]: wasm_import_memory attribute is currently unstable\n   --> $DIR/feature-gate-wasm_import_memory.rs:11:1\n    |\n 11 | #![wasm_import_memory] //~ ERROR: currently unstable"}, {"sha": "f60d2e93e3692c02a9d5d4ab88a6576aafbea49a", "filename": "src/test/ui/non_modrs_mods/non_modrs_mods.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: mod statements in non-mod.rs files are unstable (see issue #44660)\n+error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n   --> $DIR/modrs_mod/inner_foors_mod.rs:11:9\n    |\n 11 | pub mod innest;\n@@ -7,7 +7,7 @@ error: mod statements in non-mod.rs files are unstable (see issue #44660)\n    = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n    = help: on stable builds, rename this file to inner_foors_mod/mod.rs\n \n-error: mod statements in non-mod.rs files are unstable (see issue #44660)\n+error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n   --> $DIR/foors_mod.rs:13:9\n    |\n 13 | pub mod inner_modrs_mod;\n@@ -16,7 +16,7 @@ error: mod statements in non-mod.rs files are unstable (see issue #44660)\n    = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n    = help: on stable builds, rename this file to foors_mod/mod.rs\n \n-error: mod statements in non-mod.rs files are unstable (see issue #44660)\n+error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n   --> $DIR/foors_mod.rs:14:9\n    |\n 14 | pub mod inner_foors_mod;\n@@ -25,7 +25,7 @@ error: mod statements in non-mod.rs files are unstable (see issue #44660)\n    = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n    = help: on stable builds, rename this file to foors_mod/mod.rs\n \n-error: mod statements in non-mod.rs files are unstable (see issue #44660)\n+error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n   --> $DIR/foors_mod/inner_foors_mod.rs:11:9\n    |\n 11 | pub mod innest;"}, {"sha": "29c41c49cc4150e82dfab1efa5a05380c2d73b79", "filename": "src/test/ui/pat-slice-old-style.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fpat-slice-old-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fpat-slice-old-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpat-slice-old-style.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: non-reference pattern used to match a reference (see issue #42640)\n+error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n   --> $DIR/pat-slice-old-style.rs:19:9\n    |\n 19 |         [a, b..] => {},"}, {"sha": "8aa17adbcb3abca1672fe572c65c61117c91b0ef", "filename": "src/test/ui/rfc-2005-default-binding-mode/suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fsuggestion.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: non-reference pattern used to match a reference (see issue #42640)\n+error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n   --> $DIR/suggestion.rs:12:12\n    |\n 12 |     if let Some(y) = &Some(22) { //~ ERROR non-reference pattern"}, {"sha": "74a2c1d742b159db250116a8756b849e4f314a8c", "filename": "src/test/ui/span/gated-features-attr-spans.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,12 +1,12 @@\n-error: the struct `#[repr(align(u16))]` attribute is experimental (see issue #33626)\n+error[E0658]: the struct `#[repr(align(u16))]` attribute is experimental (see issue #33626)\n   --> $DIR/gated-features-attr-spans.rs:13:1\n    |\n 13 | #[repr(align(16))] //~ ERROR is experimental\n    | ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(repr_align)] to the crate attributes to enable\n \n-error: SIMD types are experimental and possibly buggy (see issue #27731)\n+error[E0658]: SIMD types are experimental and possibly buggy (see issue #27731)\n   --> $DIR/gated-features-attr-spans.rs:20:1\n    |\n 20 | #[repr(simd)] //~ ERROR are experimental"}, {"sha": "7f392104393ade0621546ebb30cb9b7379cc2b6d", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,12 +1,12 @@\n-error: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/issue-36530.rs:11:1\n    |\n 11 | #[foo] //~ ERROR is currently unknown to the compiler\n    | ^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/issue-36530.rs:13:5\n    |\n 13 |     #![foo] //~ ERROR is currently unknown to the compiler"}, {"sha": "96e0fe13dc96e9b83da1ed9ff3b0b85241f943b6", "filename": "src/test/ui/specialization-feature-gate-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-default.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: specialization is unstable (see issue #31844)\n+error[E0658]: specialization is unstable (see issue #31844)\n   --> $DIR/specialization-feature-gate-default.rs:20:5\n    |\n 20 |     default fn foo(&self) {} //~ ERROR specialization is unstable"}, {"sha": "5413dcddcd7f3dcc9eb30ce397b0f0834447997c", "filename": "src/test/ui/suggestions/dont-suggest-dereference-on-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79a521bb9a8ace1a6663578a4c409906adde620d/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-dereference-on-arg.stderr?ref=79a521bb9a8ace1a6663578a4c409906adde620d", "patch": "@@ -1,4 +1,4 @@\n-error: non-reference pattern used to match a reference (see issue #42640)\n+error[E0658]: non-reference pattern used to match a reference (see issue #42640)\n   --> $DIR/dont-suggest-dereference-on-arg.rs:16:18\n    |\n 16 |         .filter(|&(ref a, _)| foo(a))"}]}