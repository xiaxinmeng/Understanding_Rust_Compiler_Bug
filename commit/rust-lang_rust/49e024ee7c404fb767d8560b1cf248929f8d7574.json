{"sha": "49e024ee7c404fb767d8560b1cf248929f8d7574", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZTAyNGVlN2M0MDRmYjc2N2Q4NTYwYjFjZjI0ODkyOWY4ZDc1NzQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-28T13:09:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-05-01T12:53:55Z"}, "message": "Monomorphise the interface.", "tree": {"sha": "3591b4747dfe2a246c08ecbf699d31d0f3bc11bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3591b4747dfe2a246c08ecbf699d31d0f3bc11bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49e024ee7c404fb767d8560b1cf248929f8d7574", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49e024ee7c404fb767d8560b1cf248929f8d7574", "html_url": "https://github.com/rust-lang/rust/commit/49e024ee7c404fb767d8560b1cf248929f8d7574", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49e024ee7c404fb767d8560b1cf248929f8d7574/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e15383cce12a3bf33ec0475fd78cf786f57c3140", "url": "https://api.github.com/repos/rust-lang/rust/commits/e15383cce12a3bf33ec0475fd78cf786f57c3140", "html_url": "https://github.com/rust-lang/rust/commit/e15383cce12a3bf33ec0475fd78cf786f57c3140"}], "stats": {"total": 101, "additions": 72, "deletions": 29}, "files": [{"sha": "c22ea24bb16bd52fe963efb28745d2c08a72cecb", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 72, "deletions": 29, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/49e024ee7c404fb767d8560b1cf248929f8d7574/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e024ee7c404fb767d8560b1cf248929f8d7574/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=49e024ee7c404fb767d8560b1cf248929f8d7574", "patch": "@@ -613,23 +613,28 @@ where\n }\n \n #[inline(never)]\n-pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key) -> Q::Stored\n+fn get_query_impl<CTX, C>(\n+    tcx: CTX,\n+    state: &QueryState<CTX, C>,\n+    span: Span,\n+    key: C::Key,\n+    query: &QueryVtable<CTX, C::Key, C::Value>,\n+) -> C::Stored\n where\n-    Q: QueryDescription<CTX>,\n-    Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n     CTX: QueryContext,\n+    C: QueryCache,\n+    C::Key: Eq + Clone + crate::dep_graph::DepNodeParams<CTX>,\n+    C::Stored: Clone,\n {\n-    debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n-\n     try_get_cached(\n         tcx,\n-        Q::query_state(tcx),\n+        state,\n         key,\n         |value, index| {\n             tcx.dep_graph().read_index(index);\n             value.clone()\n         },\n-        |key, lookup| try_execute_query(tcx, Q::query_state(tcx), span, key, lookup, &Q::VTABLE),\n+        |key, lookup| try_execute_query(tcx, state, span, key, lookup, query),\n     )\n }\n \n@@ -640,21 +645,25 @@ where\n /// side-effects -- e.g., in order to report errors for erroneous programs.\n ///\n /// Note: The optimization is only available during incr. comp.\n-pub fn ensure_query<Q, CTX>(tcx: CTX, key: Q::Key)\n-where\n-    Q: QueryDescription<CTX>,\n-    Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n+fn ensure_query_impl<CTX, C>(\n+    tcx: CTX,\n+    state: &QueryState<CTX, C>,\n+    key: C::Key,\n+    query: &QueryVtable<CTX, C::Key, C::Value>,\n+) where\n+    C: QueryCache,\n+    C::Key: Eq + Clone + crate::dep_graph::DepNodeParams<CTX>,\n     CTX: QueryContext,\n {\n-    if Q::EVAL_ALWAYS {\n-        let _ = get_query::<Q, _>(tcx, DUMMY_SP, key);\n+    if query.eval_always {\n+        let _ = get_query_impl(tcx, state, DUMMY_SP, key, query);\n         return;\n     }\n \n     // Ensuring an anonymous query makes no sense\n-    assert!(!Q::ANON);\n+    assert!(!query.anon);\n \n-    let dep_node = Q::to_dep_node(tcx, &key);\n+    let dep_node = query.to_dep_node(tcx, &key);\n \n     match tcx.dep_graph().try_mark_green_and_read(tcx, &dep_node) {\n         None => {\n@@ -664,39 +673,73 @@ where\n             // DepNodeIndex. We must invoke the query itself. The performance cost\n             // this introduces should be negligible as we'll immediately hit the\n             // in-memory cache, or another query down the line will.\n-            let _ = get_query::<Q, _>(tcx, DUMMY_SP, key);\n+            let _ = get_query_impl(tcx, state, DUMMY_SP, key, query);\n         }\n         Some((_, dep_node_index)) => {\n             tcx.profiler().query_cache_hit(dep_node_index.into());\n         }\n     }\n }\n \n-pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, span: Span, dep_node: DepNode<CTX::DepKind>)\n-where\n-    Q: QueryDescription<CTX>,\n+fn force_query_impl<C, CTX>(\n+    tcx: CTX,\n+    state: &QueryState<CTX, C>,\n+    key: C::Key,\n+    span: Span,\n+    dep_node: DepNode<CTX::DepKind>,\n+    query: &QueryVtable<CTX, C::Key, C::Value>,\n+) where\n+    C: QueryCache,\n+    C::Key: Eq + Clone + crate::dep_graph::DepNodeParams<CTX>,\n     CTX: QueryContext,\n {\n     // We may be concurrently trying both execute and force a query.\n     // Ensure that only one of them runs the query.\n \n     try_get_cached(\n         tcx,\n-        Q::query_state(tcx),\n+        state,\n         key,\n         |_, _| {\n             // Cache hit, do nothing\n         },\n         |key, lookup| {\n-            let job =\n-                match JobOwner::try_start(tcx, Q::query_state(tcx), span, &key, lookup, &Q::VTABLE)\n-                {\n-                    TryGetJob::NotYetStarted(job) => job,\n-                    TryGetJob::Cycle(_) => return,\n-                    #[cfg(parallel_compiler)]\n-                    TryGetJob::JobCompleted(_) => return,\n-                };\n-            force_query_with_job(tcx, key, job, dep_node, &Q::VTABLE);\n+            let job = match JobOwner::try_start(tcx, state, span, &key, lookup, query) {\n+                TryGetJob::NotYetStarted(job) => job,\n+                TryGetJob::Cycle(_) => return,\n+                #[cfg(parallel_compiler)]\n+                TryGetJob::JobCompleted(_) => return,\n+            };\n+            force_query_with_job(tcx, key, job, dep_node, query);\n         },\n     );\n }\n+\n+pub fn get_query<Q, CTX>(tcx: CTX, span: Span, key: Q::Key) -> Q::Stored\n+where\n+    Q: QueryDescription<CTX>,\n+    Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n+    CTX: QueryContext,\n+{\n+    debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n+\n+    get_query_impl(tcx, Q::query_state(tcx), span, key, &Q::VTABLE)\n+}\n+\n+pub fn ensure_query<Q, CTX>(tcx: CTX, key: Q::Key)\n+where\n+    Q: QueryDescription<CTX>,\n+    Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n+    CTX: QueryContext,\n+{\n+    ensure_query_impl(tcx, Q::query_state(tcx), key, &Q::VTABLE)\n+}\n+\n+pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, span: Span, dep_node: DepNode<CTX::DepKind>)\n+where\n+    Q: QueryDescription<CTX>,\n+    Q::Key: crate::dep_graph::DepNodeParams<CTX>,\n+    CTX: QueryContext,\n+{\n+    force_query_impl(tcx, Q::query_state(tcx), key, span, dep_node, &Q::VTABLE)\n+}"}]}