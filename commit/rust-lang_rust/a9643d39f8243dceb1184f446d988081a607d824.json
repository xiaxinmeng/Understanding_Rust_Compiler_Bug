{"sha": "a9643d39f8243dceb1184f446d988081a607d824", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjQzZDM5ZjgyNDNkY2ViMTE4NGY0NDZkOTg4MDgxYTYwN2Q4MjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-12T17:09:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-12T17:09:55Z"}, "message": "auto merge of #5320 : apasel422/rust/metaderive, r=graydon\n\nThis is the first in a series of patches I'm working on to clean up the code related to `deriving`. This patch allows\r\n\r\n```\r\n#[deriving_eq]\r\n#[deriving_iter_bytes]\r\n#[deriving_clone]\r\nstruct Foo { bar: uint }\r\n```\r\nto be replaced with:\r\n```\r\n#[deriving(Eq, IterBytes, Clone)]\r\nstruct Foo { bar: uint }\r\n```\r\nIt leaves the old attributes alone for the time being.\r\n\r\nEventually I'd like to incorporate the new closest-match-suggestion infrastructure for mistyped trait names, and also pass the sub-attributes to the deriving code, so that the following will be possible:\r\n```\r\n#[deriving(TotalOrd(qux, bar))]\r\nstruct Foo { bar: uint, baz: char, qux: int }\r\n```\r\nThis says to derive an `impl` in which the objects' `qux` fields are compared first, followed by `bar`, while `baz` is ignored in the comparison. If no fields are specified explicitly, all fields will be compared in the order they're defined in the `struct`. This might also be useful for `Eq`. Coming soon.", "tree": {"sha": "f18385c4e082fe3769e4c9e79b1b713937962b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f18385c4e082fe3769e4c9e79b1b713937962b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9643d39f8243dceb1184f446d988081a607d824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9643d39f8243dceb1184f446d988081a607d824", "html_url": "https://github.com/rust-lang/rust/commit/a9643d39f8243dceb1184f446d988081a607d824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9643d39f8243dceb1184f446d988081a607d824/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15d78fc398527c5035c092c1c67db600543902d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d78fc398527c5035c092c1c67db600543902d5", "html_url": "https://github.com/rust-lang/rust/commit/15d78fc398527c5035c092c1c67db600543902d5"}, {"sha": "24efea720860e1dc8d4d1035f1ea8d56a3498614", "url": "https://api.github.com/repos/rust-lang/rust/commits/24efea720860e1dc8d4d1035f1ea8d56a3498614", "html_url": "https://github.com/rust-lang/rust/commit/24efea720860e1dc8d4d1035f1ea8d56a3498614"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "c8363e3daa8477a9d46779d6192c601b17fde20a", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9643d39f8243dceb1184f446d988081a607d824/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9643d39f8243dceb1184f446d988081a607d824/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a9643d39f8243dceb1184f446d988081a607d824", "patch": "@@ -148,6 +148,9 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(@~\"log_syntax\",\n                             builtin_normal_tt(\n                                 ext::log_syntax::expand_syntax_ext));\n+    syntax_expanders.insert(@~\"deriving\",\n+                            @SE(ItemDecorator(\n+                                ext::deriving::expand_meta_deriving)));\n     syntax_expanders.insert(@~\"deriving_eq\",\n                             @SE(ItemDecorator(\n                                 ext::deriving::expand_deriving_eq)));"}, {"sha": "093327ec32e0980a422002c85745f10f09315a29", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a9643d39f8243dceb1184f446d988081a607d824/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9643d39f8243dceb1184f446d988081a607d824/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=a9643d39f8243dceb1184f446d988081a607d824", "patch": "@@ -56,6 +56,48 @@ type ExpandDerivingEnumDefFn = &self/fn(ext_ctxt,\n                                         ident,\n                                         y: &Generics) -> @item;\n \n+pub fn expand_meta_deriving(cx: ext_ctxt,\n+                            _span: span,\n+                            mitem: @meta_item,\n+                            in_items: ~[@item])\n+                         -> ~[@item] {\n+    use ast::{meta_list, meta_name_value, meta_word};\n+\n+    match mitem.node {\n+        meta_name_value(_, l) => {\n+            cx.span_err(l.span, ~\"unexpected value in `deriving`\");\n+            in_items\n+        }\n+        meta_word(_) | meta_list(_, []) => {\n+            cx.span_warn(mitem.span, ~\"empty trait list in `deriving`\");\n+            in_items\n+        }\n+        meta_list(_, titems) => {\n+            do titems.foldr(in_items) |&titem, in_items| {\n+                match titem.node {\n+                    meta_name_value(tname, _) |\n+                    meta_list(tname, _) |\n+                    meta_word(tname) => {\n+                        match *tname {\n+                            ~\"Clone\" => expand_deriving_clone(cx,\n+                                titem.span, titem, in_items),\n+                            ~\"Eq\" => expand_deriving_eq(cx, titem.span,\n+                                titem, in_items),\n+                            ~\"IterBytes\" => expand_deriving_iter_bytes(cx,\n+                                titem.span, titem, in_items),\n+                            tname => {\n+                                cx.span_err(titem.span, fmt!(\"unknown \\\n+                                    `deriving` trait: `%s`\", tname));\n+                                in_items\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n pub fn expand_deriving_eq(cx: ext_ctxt,\n                           span: span,\n                           _mitem: @meta_item,"}, {"sha": "0b9f61dac9eb8fc486337c32b2c240de308888bf", "filename": "src/test/compile-fail/deriving-meta-unknown-trait.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9643d39f8243dceb1184f446d988081a607d824/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9643d39f8243dceb1184f446d988081a607d824/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs?ref=a9643d39f8243dceb1184f446d988081a607d824", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Eqr)] //~ ERROR unknown `deriving` trait: `Eqr`\n+struct Foo;\n+\n+pub fn main() {}"}, {"sha": "8e7afffaf0dbb1e700668d4618f1545766fbe5de", "filename": "src/test/run-pass/deriving-meta-empty-trait-list.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a9643d39f8243dceb1184f446d988081a607d824/src%2Ftest%2Frun-pass%2Fderiving-meta-empty-trait-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9643d39f8243dceb1184f446d988081a607d824/src%2Ftest%2Frun-pass%2Fderiving-meta-empty-trait-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta-empty-trait-list.rs?ref=a9643d39f8243dceb1184f446d988081a607d824", "patch": "@@ -0,0 +1,19 @@\n+// xfail-pretty\n+\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving]   //~ WARNING empty trait list in `deriving`\n+struct Foo;\n+\n+#[deriving()] //~ WARNING empty trait list in `deriving`\n+struct Bar;\n+\n+pub fn main() {}"}, {"sha": "d94b6fcb415840328d66b283ddea1fa69c162247", "filename": "src/test/run-pass/deriving-meta-multiple.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a9643d39f8243dceb1184f446d988081a607d824/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9643d39f8243dceb1184f446d988081a607d824/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs?ref=a9643d39f8243dceb1184f446d988081a607d824", "patch": "@@ -0,0 +1,29 @@\n+// xfail-fast\n+\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Eq)]\n+#[deriving(Clone)]\n+#[deriving(IterBytes)]\n+struct Foo {\n+    bar: uint,\n+    baz: int\n+}\n+\n+pub fn main() {\n+    use core::hash::{Hash, HashUtil}; // necessary for IterBytes check\n+\n+    let a = Foo {bar: 4, baz: -3};\n+\n+    a == a;    // check for Eq impl w/o testing its correctness\n+    a.clone(); // check for Clone impl w/o testing its correctness\n+    a.hash();  // check for IterBytes impl w/o testing its correctness\n+}"}, {"sha": "efb202028f3b976b3b287b6a1aa379e844b72c62", "filename": "src/test/run-pass/deriving-meta.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a9643d39f8243dceb1184f446d988081a607d824/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9643d39f8243dceb1184f446d988081a607d824/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta.rs?ref=a9643d39f8243dceb1184f446d988081a607d824", "patch": "@@ -0,0 +1,27 @@\n+// xfail-fast\n+\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Eq, Clone, IterBytes)]\n+struct Foo {\n+    bar: uint,\n+    baz: int\n+}\n+\n+pub fn main() {\n+    use core::hash::{Hash, HashUtil}; // necessary for IterBytes check\n+\n+    let a = Foo {bar: 4, baz: -3};\n+\n+    a == a;    // check for Eq impl w/o testing its correctness\n+    a.clone(); // check for Clone impl w/o testing its correctness\n+    a.hash();  // check for IterBytes impl w/o testing its correctness\n+}"}]}