{"sha": "5f0f86b6cae9a3ce8007eff5a655ae63899047dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMGY4NmI2Y2FlOWEzY2U4MDA3ZWZmNWE2NTVhZTYzODk5MDQ3ZGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T11:43:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "extract parse_path_start_expr", "tree": {"sha": "f4c4029707347aeceb5de03e53f49808f3f7841c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4c4029707347aeceb5de03e53f49808f3f7841c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f0f86b6cae9a3ce8007eff5a655ae63899047dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0f86b6cae9a3ce8007eff5a655ae63899047dc", "html_url": "https://github.com/rust-lang/rust/commit/5f0f86b6cae9a3ce8007eff5a655ae63899047dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f0f86b6cae9a3ce8007eff5a655ae63899047dc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb985ba60f87124c763e4db7d5f912771f9ad772", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb985ba60f87124c763e4db7d5f912771f9ad772", "html_url": "https://github.com/rust-lang/rust/commit/cb985ba60f87124c763e4db7d5f912771f9ad772"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "aaba59c520c94191f353b60573f6cafb0b527429", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5f0f86b6cae9a3ce8007eff5a655ae63899047dc/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f0f86b6cae9a3ce8007eff5a655ae63899047dc/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=5f0f86b6cae9a3ce8007eff5a655ae63899047dc", "patch": "@@ -854,36 +854,11 @@ impl<'a> Parser<'a> {\n             _ => {\n                 if self.eat_lt() {\n                     let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n-                    hi = path.span;\n+                    let hi = path.span;\n                     return Ok(self.mk_expr(lo.to(hi), ExprKind::Path(Some(qself), path), attrs));\n                 }\n                 if self.token.is_path_start() {\n-                    let path = self.parse_path(PathStyle::Expr)?;\n-\n-                    // `!`, as an operator, is prefix, so we know this isn't that.\n-                    if self.eat(&token::Not) {\n-                        // MACRO INVOCATION expression\n-                        let args = self.parse_mac_args()?;\n-                        hi = self.prev_span;\n-                        ex = ExprKind::Mac(Mac {\n-                            path,\n-                            args,\n-                            prior_type_ascription: self.last_type_ascription,\n-                        });\n-                    } else if self.check(&token::OpenDelim(token::Brace)) {\n-                        if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n-                            return expr;\n-                        } else {\n-                            hi = path.span;\n-                            ex = ExprKind::Path(None, path);\n-                        }\n-                    } else {\n-                        hi = path.span;\n-                        ex = ExprKind::Path(None, path);\n-                    }\n-\n-                    let expr = self.mk_expr(lo.to(hi), ex, attrs);\n-                    return self.maybe_recover_from_bad_qpath(expr, true);\n+                    return self.parse_path_start_expr();\n                 }\n                 if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n                     return self.parse_closure_expr(attrs);\n@@ -1094,6 +1069,34 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    fn parse_path_start_expr(&mut self) -> PResult<'a, P<Expr>> {\n+        let attrs = ThinVec::new();\n+        let lo = self.token.span;\n+        let path = self.parse_path(PathStyle::Expr)?;\n+\n+        // `!`, as an operator, is prefix, so we know this isn't that.\n+        let (hi, kind) = if self.eat(&token::Not) {\n+            // MACRO INVOCATION expression\n+            let mac = Mac {\n+                path,\n+                args: self.parse_mac_args()?,\n+                prior_type_ascription: self.last_type_ascription,\n+            };\n+            (self.prev_span, ExprKind::Mac(mac))\n+        } else if self.check(&token::OpenDelim(token::Brace)) {\n+            if let Some(expr) = self.maybe_parse_struct_expr(lo, &path, &attrs) {\n+                return expr;\n+            } else {\n+                (path.span, ExprKind::Path(None, path))\n+            }\n+        } else {\n+            (path.span, ExprKind::Path(None, path))\n+        };\n+\n+        let expr = self.mk_expr(lo.to(hi), kind, attrs);\n+        self.maybe_recover_from_bad_qpath(expr, true)\n+    }\n+\n     /// Returns a string literal if the next token is a string literal.\n     /// In case of error returns `Some(lit)` if the next token is a literal with a wrong kind,\n     /// and returns `None` if the next token is not literal at all."}]}