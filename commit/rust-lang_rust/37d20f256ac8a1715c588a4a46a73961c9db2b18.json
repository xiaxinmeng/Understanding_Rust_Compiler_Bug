{"sha": "37d20f256ac8a1715c588a4a46a73961c9db2b18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZDIwZjI1NmFjOGExNzE1YzU4OGE0YTQ2YTczOTYxYzlkYjJiMTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:29Z"}, "message": "rollup merge of #20986: alkor/doc-fixes\n\nCorrections in TRPL macros guide", "tree": {"sha": "cf6794096b6086b3cd5b4cbfb1fb394c91054f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6794096b6086b3cd5b4cbfb1fb394c91054f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37d20f256ac8a1715c588a4a46a73961c9db2b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37d20f256ac8a1715c588a4a46a73961c9db2b18", "html_url": "https://github.com/rust-lang/rust/commit/37d20f256ac8a1715c588a4a46a73961c9db2b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37d20f256ac8a1715c588a4a46a73961c9db2b18/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73149be5786215431818582c4590a47646d482ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/73149be5786215431818582c4590a47646d482ea", "html_url": "https://github.com/rust-lang/rust/commit/73149be5786215431818582c4590a47646d482ea"}, {"sha": "a3d87fa448de23d9d2faaf6f68803e5925653244", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d87fa448de23d9d2faaf6f68803e5925653244", "html_url": "https://github.com/rust-lang/rust/commit/a3d87fa448de23d9d2faaf6f68803e5925653244"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "0bc49365921c056b2e4eb58b731d8b4fbf5f1b6c", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/37d20f256ac8a1715c588a4a46a73961c9db2b18/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/37d20f256ac8a1715c588a4a46a73961c9db2b18/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=37d20f256ac8a1715c588a4a46a73961c9db2b18", "patch": "@@ -42,7 +42,7 @@ the pattern in the above code:\n # let input_1 = T::SpecialA(0);\n # let input_2 = T::SpecialA(0);\n macro_rules! early_return {\n-    ($inp:expr, $sp:path) => ( // invoke it like `(input_5 SpecialE)`\n+    ($inp:expr, $sp:path) => ( // invoke it like `(input_5, SpecialE)`\n         match $inp {\n             $sp(x) => { return x; }\n             _ => {}\n@@ -59,7 +59,7 @@ early_return!(input_2, T::SpecialB);\n ~~~~\n \n Macros are defined in pattern-matching style: in the above example, the text\n-`($inp:expr $sp:ident)` that appears on the left-hand side of the `=>` is the\n+`($inp:expr, $sp:path)` that appears on the left-hand side of the `=>` is the\n *macro invocation syntax*, a pattern denoting how to write a call to the\n macro. The text on the right-hand side of the `=>`, beginning with `match\n $inp`, is the *macro transcription syntax*: what the macro expands to.\n@@ -74,6 +74,8 @@ conforms to the following rules:\n 2. `$` has special meaning (described below).\n 3. The `()`s, `[]`s, and `{}`s it contains must balance. For example, `([)` is\n forbidden.\n+4. Some arguments can be followed only by a limited set of separators, to\n+avoid ambiguity (described below).\n \n Otherwise, the invocation syntax is free-form.\n \n@@ -86,7 +88,8 @@ To take a fragment of Rust code as an argument, write `$` followed by a name\n   `foo`.)\n * `expr` (an expression. Examples: `2 + 2`; `if true then { 1 } else { 2 }`;\n   `f(42)`.)\n-* `ty` (a type. Examples: `int`, `Vec<(char, String)>`, `&T`.)\n+* `ty` (a type. Examples: `i32`, `Vec<(char, String)>`, `&T`.)\n+* `path` (a path to struct or enum variant. Example: `T::SpecialA`)\n * `pat` (a pattern, usually appearing in a `match` or on the left-hand side of\n   a declaration. Examples: `Some(t)`; `(17, 'a')`; `_`.)\n * `block` (a sequence of actions. Example: `{ log(error, \"hi\"); return 12; }`)\n@@ -97,6 +100,12 @@ rules of tokenization apply,\n So `($x:ident -> (($e:expr)))`, though excessively fancy, would designate a macro\n that could be invoked like: `my_macro!(i->(( 2+2 )))`.\n \n+To avoid ambiguity, macro invocation syntax must conform to the following rules:\n+* `expr` must be followed by `=>`, `,` or `;`.\n+* `ty` and `path` must be followed by `=>`, `,`, `:`, `=`, `>` or `as`.\n+* `pat` must be followed by `=>`, `,` or `=`.\n+* `ident` and `block` can be followed by any token.\n+\n ## Invocation location\n \n A macro invocation may take the place of (and therefore expand to) an"}]}