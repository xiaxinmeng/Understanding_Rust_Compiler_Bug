{"sha": "0fbeacc1d34162c92b15c9e1b798cc75038012d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYmVhY2MxZDM0MTYyYzkyYjE1YzllMWI3OThjYzc1MDM4MDEyZDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-11T11:41:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-11T11:41:51Z"}, "message": "Merge #9565\n\n9565: internal: document NameClass and NameRefClass r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "bd5cae23724b9d52cf3668a72a0bdde1263f00a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5cae23724b9d52cf3668a72a0bdde1263f00a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fbeacc1d34162c92b15c9e1b798cc75038012d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg6tj/CRBK7hj4Ov3rIwAAFvoIAGitisj4moxrvXGnpNupzpFK\nn2Yqv6BxJk7As6f+Z4vZVXy4Xoa9PMayf3OednapHiAUIh9zFeKipEFcD9em9tqc\ngFOfc27OAFKxj0xxMrRDeQlfZTDGqVZPWbwNN6Et4PB6g7SlXGAt+cmygi1SKjuZ\nQPpBZruPLGKU8DIivieSdFmvcYD7GYvUTQhAOEvl2k2kexNc4sKgtUEZQNsNXXi6\negEqDxTSzaMmuG+kFcJA0MuGgAsz2Tr0AO61oRoT5p5PKogCAkwwgQV1kNKlFviE\nhpfwnNe1eUSN6HadEDfsXopyCZ/d9cZgf/xSfnNdVZLWS7Lpmx8d9mWiYI++zFA=\n=PtlW\n-----END PGP SIGNATURE-----\n", "payload": "tree bd5cae23724b9d52cf3668a72a0bdde1263f00a9\nparent 06cee26a2c599349e4530f236e42492dd08b1b1c\nparent dedf0ff7c549a72063fc4823e915aeab2d264f5e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626003711 +0000\ncommitter GitHub <noreply@github.com> 1626003711 +0000\n\nMerge #9565\n\n9565: internal: document NameClass and NameRefClass r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbeacc1d34162c92b15c9e1b798cc75038012d6", "html_url": "https://github.com/rust-lang/rust/commit/0fbeacc1d34162c92b15c9e1b798cc75038012d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fbeacc1d34162c92b15c9e1b798cc75038012d6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06cee26a2c599349e4530f236e42492dd08b1b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/06cee26a2c599349e4530f236e42492dd08b1b1c", "html_url": "https://github.com/rust-lang/rust/commit/06cee26a2c599349e4530f236e42492dd08b1b1c"}, {"sha": "dedf0ff7c549a72063fc4823e915aeab2d264f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dedf0ff7c549a72063fc4823e915aeab2d264f5e", "html_url": "https://github.com/rust-lang/rust/commit/dedf0ff7c549a72063fc4823e915aeab2d264f5e"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "4c7313f2f6debb5bbdeed9d86652aab6d92211ec", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0fbeacc1d34162c92b15c9e1b798cc75038012d6/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbeacc1d34162c92b15c9e1b798cc75038012d6/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=0fbeacc1d34162c92b15c9e1b798cc75038012d6", "patch": "@@ -97,13 +97,25 @@ impl Definition {\n     }\n }\n \n+/// On a first blush, a single `ast::Name` defines a single definition at some\n+/// scope. That is, that, by just looking at the syntactical category, we can\n+/// unambiguously define the semantic category.\n+///\n+/// Sadly, that's not 100% true, there are special cases. To make sure that call\n+/// the code handles all the special cases correctly via exhaustive matching, we\n+/// add a [`NameClass`] enum which lists all of them!\n+///\n+/// A model special case is `None` constant in pattern.\n #[derive(Debug)]\n pub enum NameClass {\n     ExternCrate(Crate),\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`.\n+    /// Syntactically, it is a name, but semantically it is a reference.\n     ConstReference(Definition),\n-    /// `field` in `if let Foo { field } = foo`.\n+    /// `field` in `if let Foo { field } = foo`. Here, `ast::Name` both Here the\n+    /// name both introduces a definition into a local scope, and refers to an\n+    /// existing definition.\n     PatFieldShorthand {\n         local_def: Local,\n         field_ref: Definition,\n@@ -283,6 +295,12 @@ impl NameClass {\n     }\n }\n \n+/// This is similar to [`NameClass`], but works for [`ast::NameRef`] rather than\n+/// for [`ast::Name`]. Similarly, what looks like a reference in syntax is a\n+/// reference most of the time, but there are a couple of annoying exceptions.\n+///\n+/// A model special case is field shorthand syntax, which uses a single\n+/// reference to point to two different defs.\n #[derive(Debug)]\n pub enum NameRefClass {\n     ExternCrate(Crate),"}]}