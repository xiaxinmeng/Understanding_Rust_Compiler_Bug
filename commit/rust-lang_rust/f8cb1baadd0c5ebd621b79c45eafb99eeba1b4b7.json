{"sha": "f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Y2IxYmFhZGQwYzVlYmQ2MjFiNzljNDVlYWZiOTllZWJhMWI0Yjc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-12-08T04:04:40Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-12-09T20:29:03Z"}, "message": "Add normalise_comments option.\n\nSo block comments are not converted to line comments", "tree": {"sha": "7a865aa40b6aab42e9718bad668f4f12106bd8fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a865aa40b6aab42e9718bad668f4f12106bd8fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "html_url": "https://github.com/rust-lang/rust/commit/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94bd34a06d878a41bb8be409f173a8824dda63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94bd34a06d878a41bb8be409f173a8824dda63f", "html_url": "https://github.com/rust-lang/rust/commit/e94bd34a06d878a41bb8be409f173a8824dda63f"}], "stats": {"total": 124, "additions": 114, "deletions": 10}, "files": [{"sha": "c111259979cbeb17ff2d72844c2432c960c9550a", "filename": "src/comment.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "patch": "@@ -27,9 +27,23 @@ pub fn rewrite_comment(orig: &str,\n     // Edge case: block comments. Let's not trim their lines (for now).\n     let (opener, closer, line_start) = if block_style {\n         (\"/* \", \" */\", \" * \")\n-    } else if orig.starts_with(\"///\") {\n+    } else if !config.normalise_comments {\n+        if orig.starts_with(\"/**\") {\n+            (\"/** \", \" **/\", \" ** \")\n+        } else if orig.starts_with(\"/*!\") {\n+            (\"/*! \", \" */\", \" * \")\n+        } else if orig.starts_with(\"/*\") {\n+            (\"/* \", \" */\", \" * \")\n+        } else if orig.starts_with(\"///\") {\n+            (\"/// \", \"\", \"/// \")\n+        } else if orig.starts_with(\"//!\") {\n+            (\"//! \", \"\", \"//! \")\n+        } else {\n+            (\"// \", \"\", \"// \")\n+        }\n+    } else if orig.starts_with(\"///\") || orig.starts_with(\"/**\") {\n         (\"/// \", \"\", \"/// \")\n-    } else if orig.starts_with(\"//!\") {\n+    } else if orig.starts_with(\"//!\") || orig.starts_with(\"/*!\") {\n         (\"//! \", \"\", \"//! \")\n     } else {\n         (\"// \", \"\", \"// \")\n@@ -72,10 +86,12 @@ pub fn rewrite_comment(orig: &str,\n                  });\n \n     let mut result = opener.to_owned();\n-    let mut first = true;\n-\n     for line in lines {\n-        if !first {\n+        if result == opener {\n+            if line.len() == 0 {\n+                continue;\n+            }\n+        } else {\n             result.push('\\n');\n             result.push_str(&indent_str);\n             result.push_str(line_start);\n@@ -91,22 +107,27 @@ pub fn rewrite_comment(orig: &str,\n             }\n             result.push_str(line);\n         }\n-\n-        first = false;\n     }\n \n     result.push_str(closer);\n+    if result == opener {\n+        // Trailing space.\n+        result.pop();\n+    }\n \n     Some(result)\n }\n \n fn left_trim_comment_line(line: &str) -> &str {\n-    if line.starts_with(\"//! \") || line.starts_with(\"/// \") {\n+    if line.starts_with(\"//! \") || line.starts_with(\"/// \") || line.starts_with(\"/*! \") ||\n+       line.starts_with(\"/** \") {\n         &line[4..]\n     } else if line.starts_with(\"/* \") || line.starts_with(\"// \") || line.starts_with(\"//!\") ||\n-       line.starts_with(\"///\") {\n+       line.starts_with(\"///\") || line.starts_with(\"** \") || line.starts_with(\"/*!\") ||\n+       line.starts_with(\"/**\") {\n         &line[3..]\n-    } else if line.starts_with(\"/*\") || line.starts_with(\"* \") || line.starts_with(\"//\") {\n+    } else if line.starts_with(\"/*\") || line.starts_with(\"* \") || line.starts_with(\"//\") ||\n+       line.starts_with(\"**\") {\n         &line[2..]\n     } else if line.starts_with(\"*\") {\n         &line[1..]"}, {"sha": "4c919191dbdce5c7bb39145f7c23d3066b54b019", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "patch": "@@ -307,6 +307,7 @@ create_config! {\n     take_source_hints: bool, true, \"Retain some formatting characteristics from the source code\";\n     hard_tabs: bool, false, \"Use tab characters for indentation, spaces for alignment\";\n     wrap_comments: bool, false, \"Break comments to fit on the line\";\n+    normalise_comments: bool, true, \"Convert /* */ comments to // comments where possible\";\n     wrap_match_arms: bool, true, \"Wrap multiline match arms in blocks\";\n     match_block_trailing_comma: bool, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";"}, {"sha": "f0efde9de642c61929f6bd1af75b6646ba027d68", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "patch": "@@ -530,6 +530,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n         for (i, a) in self.iter().enumerate() {\n             let a_str = context.snippet(a.span);\n \n+            // Write comments and blank lines between attributes.\n             if i > 0 {\n                 let comment = context.snippet(codemap::mk_sp(self[i - 1].span.hi, a.span.lo));\n                 // This particular horror show is to preserve line breaks in between doc\n@@ -553,6 +554,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 result.push_str(&indent);\n             }\n \n+            // Write the attribute itself.\n             result.push_str(&a_str);\n \n             if i < self.len() - 1 {"}, {"sha": "714b77b081ce92bceb9a4bae623e0bf7846b3f48", "filename": "tests/source/comment.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/tests%2Fsource%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/tests%2Fsource%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcomment.rs?ref=f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "patch": "@@ -2,6 +2,9 @@\n \n //! Doc comment\n fn test() {\n+            /*!\n+             * Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam */\n+\n // comment\n         // comment2\n \n@@ -39,3 +42,6 @@ fn chains() {\n                 let x = 10;\n                 /* comment */ x })\n }\n+\n+/*\n+ * random comment */"}, {"sha": "7fef084fc7bfe8c05ebb260d2f4df107af9dca8f", "filename": "tests/source/comment4.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/tests%2Fsource%2Fcomment4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/tests%2Fsource%2Fcomment4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcomment4.rs?ref=f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "patch": "@@ -0,0 +1,35 @@\n+// rustfmt-normalise_comments: false\n+\n+//! Doc comment\n+fn test() {\n+// comment\n+        // comment2\n+\n+    code(); /* leave this comment alone!\n+             * ok? */\n+\n+        /* Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a\n+         * diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam\n+         * viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n+         * Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam\n+         * tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut\n+         * libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit\n+         * amet, consectetur adipiscing elit. Aenean ut gravida lorem. Ut turpis\n+         * felis, pulvinar a semper sed, adipiscing id dolor. */\n+\n+    // Very looooooooooooooooooooooooooooooooooooooooooooooooooooooooong comment that should be split\n+\n+                    // println!(\"{:?}\", rewrite_comment(subslice,\n+                    //                                       false,\n+                    //                                       comment_width,\n+                    //                                       self.block_indent,\n+                    //                                       self.config)\n+                    //                           .unwrap());\n+\n+    funk(); //dontchangeme\n+            // or me\n+}\n+\n+  /// test123\n+fn doc_comment() {\n+}"}, {"sha": "28740749c5d1483a89e8c7592de6dec1a172c5e3", "filename": "tests/target/comment.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/tests%2Ftarget%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/tests%2Ftarget%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment.rs?ref=f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "patch": "@@ -2,6 +2,9 @@\n \n //! Doc comment\n fn test() {\n+    //! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam\n+    //! lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam\n+\n     // comment\n     // comment2\n \n@@ -41,3 +44,5 @@ fn chains() {\n         x\n     })\n }\n+\n+// random comment"}, {"sha": "85edc7f06d4f5d19fe5f3f2a6fd2278926126b80", "filename": "tests/target/comment4.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/tests%2Ftarget%2Fcomment4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7/tests%2Ftarget%2Fcomment4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment4.rs?ref=f8cb1baadd0c5ebd621b79c45eafb99eeba1b4b7", "patch": "@@ -0,0 +1,34 @@\n+// rustfmt-normalise_comments: false\n+\n+//! Doc comment\n+fn test() {\n+    // comment\n+    // comment2\n+\n+    code(); /* leave this comment alone!\n+             * ok? */\n+\n+    /* Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a\n+     * diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam\n+     * viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n+     * Praesent et diam eget libero egestas mattis sit amet vitae augue. Nam\n+     * tincidunt congue enim, ut porta lorem lacinia consectetur. Donec ut\n+     * libero sed arcu vehicula ultricies a non tortor. Lorem ipsum dolor sit\n+     * amet, consectetur adipiscing elit. Aenean ut gravida lorem. Ut turpis\n+     * felis, pulvinar a semper sed, adipiscing id dolor. */\n+\n+    // Very looooooooooooooooooooooooooooooooooooooooooooooooooooooooong comment that should be split\n+\n+    // println!(\"{:?}\", rewrite_comment(subslice,\n+    //                                       false,\n+    //                                       comment_width,\n+    //                                       self.block_indent,\n+    //                                       self.config)\n+    //                           .unwrap());\n+\n+    funk(); //dontchangeme\n+            // or me\n+}\n+\n+/// test123\n+fn doc_comment() {}"}]}