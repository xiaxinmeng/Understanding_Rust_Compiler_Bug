{"sha": "ada388b2b8c970978d1dc6139ed00f8661234f8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYTM4OGIyYjhjOTcwOTc4ZDFkYzYxMzllZDAwZjg2NjEyMzRmOGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-07T01:55:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:50:50Z"}, "message": "extract is_mistaken_not_ident_negation", "tree": {"sha": "1e1904f5e451455e44c80c5fc41bf056a1883790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e1904f5e451455e44c80c5fc41bf056a1883790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ada388b2b8c970978d1dc6139ed00f8661234f8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ada388b2b8c970978d1dc6139ed00f8661234f8c", "html_url": "https://github.com/rust-lang/rust/commit/ada388b2b8c970978d1dc6139ed00f8661234f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ada388b2b8c970978d1dc6139ed00f8661234f8c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6", "html_url": "https://github.com/rust-lang/rust/commit/80eeefb05f40faa32c9ddfbed7bc79ae2f3925f6"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "982b74adfb0f31db53f7db331ff27b37bb2011dc", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ada388b2b8c970978d1dc6139ed00f8661234f8c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ada388b2b8c970978d1dc6139ed00f8661234f8c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=ada388b2b8c970978d1dc6139ed00f8661234f8c", "patch": "@@ -482,36 +482,37 @@ impl<'a> Parser<'a> {\n                 (lo.to(span), self.mk_unary(UnOp::Deref, e))\n             }\n             token::BinOp(token::And) | token::AndAnd => self.parse_borrow_expr(lo)?,\n-            token::Ident(..) if self.token.is_keyword(kw::Box) => {\n-                self.bump();\n-                let e = self.parse_prefix_expr(None);\n-                let (span, e) = self.interpolated_or_expr_span(e)?;\n-                let span = lo.to(span);\n-                self.sess.gated_spans.gate(sym::box_syntax, span);\n-                (span, ExprKind::Box(e))\n-            }\n-            token::Ident(..) if self.token.is_ident_named(sym::not) => {\n-                // `not` is just an ordinary identifier in Rust-the-language,\n-                // but as `rustc`-the-compiler, we can issue clever diagnostics\n-                // for confused users who really want to say `!`\n-                let token_cannot_continue_expr = |t: &Token| match t.kind {\n-                    // These tokens can start an expression after `!`, but\n-                    // can't continue an expression after an ident\n-                    token::Ident(name, is_raw) => token::ident_can_begin_expr(name, t.span, is_raw),\n-                    token::Literal(..) | token::Pound => true,\n-                    _ => t.is_whole_expr(),\n-                };\n-                if !self.look_ahead(1, token_cannot_continue_expr) {\n-                    return self.parse_dot_or_call_expr(Some(attrs));\n-                }\n-\n+            token::Ident(..) if self.token.is_keyword(kw::Box) => self.parse_box_expr(lo)?,\n+            token::Ident(..) if self.is_mistaken_not_ident_negation() => {\n                 self.recover_not_expr(lo)?\n             }\n             _ => return self.parse_dot_or_call_expr(Some(attrs)),\n         };\n         return Ok(self.mk_expr(lo.to(hi), ex, attrs));\n     }\n \n+    /// Parse `box expr`.\n+    fn parse_box_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n+        self.bump();\n+        let e = self.parse_prefix_expr(None);\n+        let (span, e) = self.interpolated_or_expr_span(e)?;\n+        let span = lo.to(span);\n+        self.sess.gated_spans.gate(sym::box_syntax, span);\n+        Ok((span, ExprKind::Box(e)))\n+    }\n+\n+    fn is_mistaken_not_ident_negation(&self) -> bool {\n+        let token_cannot_continue_expr = |t: &Token| match t.kind {\n+            // These tokens can start an expression after `!`, but\n+            // can't continue an expression after an ident\n+            token::Ident(name, is_raw) => token::ident_can_begin_expr(name, t.span, is_raw),\n+            token::Literal(..) | token::Pound => true,\n+            _ => t.is_whole_expr(),\n+        };\n+        self.token.is_ident_named(sym::not) && self.look_ahead(1, token_cannot_continue_expr)\n+    }\n+\n+    /// Recover on `not expr` in favor of `!expr`.\n     fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         self.bump();\n         // Emit the error ..."}]}