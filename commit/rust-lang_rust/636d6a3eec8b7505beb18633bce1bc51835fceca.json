{"sha": "636d6a3eec8b7505beb18633bce1bc51835fceca", "node_id": "C_kwDOAAsO6NoAKDYzNmQ2YTNlZWM4Yjc1MDViZWIxODYzM2JjZTFiYzUxODM1ZmNlY2E", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2021-12-18T15:48:51Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-28T20:49:32Z"}, "message": "Only special case struct fields for intra-doc links, not enum variants\n\nVariants are already handled by `resolve_str_path_error`, rustdoc doesn't need to consider them separately.", "tree": {"sha": "85acde5377cc2695a20378b679137dc384999a00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85acde5377cc2695a20378b679137dc384999a00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/636d6a3eec8b7505beb18633bce1bc51835fceca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/636d6a3eec8b7505beb18633bce1bc51835fceca", "html_url": "https://github.com/rust-lang/rust/commit/636d6a3eec8b7505beb18633bce1bc51835fceca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/636d6a3eec8b7505beb18633bce1bc51835fceca/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442248d6bcc00693922941eb5a9f241e0e9da2c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/442248d6bcc00693922941eb5a9f241e0e9da2c0", "html_url": "https://github.com/rust-lang/rust/commit/442248d6bcc00693922941eb5a9f241e0e9da2c0"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "27d8b8f2e3bd435bcc3a35bc0dc918817e397a63", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/636d6a3eec8b7505beb18633bce1bc51835fceca/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636d6a3eec8b7505beb18633bce1bc51835fceca/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=636d6a3eec8b7505beb18633bce1bc51835fceca", "patch": "@@ -684,27 +684,24 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 if ns != Namespace::ValueNS {\n                     return None;\n                 }\n-                debug!(\"looking for variants or fields named {} for {:?}\", item_name, did);\n+                debug!(\"looking for fields named {} for {:?}\", item_name, did);\n                 // FIXME: this doesn't really belong in `associated_item` (maybe `variant_field` is better?)\n-                // NOTE: it's different from variant_field because it resolves fields and variants,\n+                // NOTE: it's different from variant_field because it only resolves struct fields,\n                 // not variant fields (2 path segments, not 3).\n                 let def = match tcx.type_of(did).kind() {\n-                    ty::Adt(def, _) => def,\n+                    ty::Adt(def, _) if !def.is_enum() => def,\n                     _ => return None,\n                 };\n-                let field = if def.is_enum() {\n-                    def.all_fields().find(|item| item.ident.name == item_name)\n-                } else {\n-                    def.non_enum_variant().fields.iter().find(|item| item.ident.name == item_name)\n-                }?;\n-                let kind = if def.is_enum() { DefKind::Variant } else { DefKind::Field };\n-                let fragment = if def.is_enum() {\n-                    // FIXME: how can the field be a variant?\n-                    UrlFragment::Variant(field.ident.name)\n-                } else {\n-                    UrlFragment::StructField(field.ident.name)\n-                };\n-                Some((root_res, fragment, Some((kind, field.did))))\n+                let field = def\n+                    .non_enum_variant()\n+                    .fields\n+                    .iter()\n+                    .find(|item| item.ident.name == item_name)?;\n+                Some((\n+                    root_res,\n+                    UrlFragment::StructField(field.ident.name),\n+                    Some((DefKind::Field, field.did)),\n+                ))\n             }\n             Res::Def(DefKind::Trait, did) => tcx\n                 .associated_items(did)"}]}