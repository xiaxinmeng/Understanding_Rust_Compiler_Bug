{"sha": "b6a860e0ed7a76b1834c9618842d299e4501d2ff", "node_id": "C_kwDOAAsO6NoAKGI2YTg2MGUwZWQ3YTc2YjE4MzRjOTYxODg0MmQyOTllNDUwMWQyZmY", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-17T21:59:27Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-20T11:02:48Z"}, "message": "Add `missing_trait_methods` lint", "tree": {"sha": "892632696f7909d2d973a0cf2cb63f7f026edb51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/892632696f7909d2d973a0cf2cb63f7f026edb51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6a860e0ed7a76b1834c9618842d299e4501d2ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6a860e0ed7a76b1834c9618842d299e4501d2ff", "html_url": "https://github.com/rust-lang/rust/commit/b6a860e0ed7a76b1834c9618842d299e4501d2ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6a860e0ed7a76b1834c9618842d299e4501d2ff/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d917590af6d4db6dcb8c4adda8f870a6950ff247", "url": "https://api.github.com/repos/rust-lang/rust/commits/d917590af6d4db6dcb8c4adda8f870a6950ff247", "html_url": "https://github.com/rust-lang/rust/commit/d917590af6d4db6dcb8c4adda8f870a6950ff247"}], "stats": {"total": 221, "additions": 221, "deletions": 0}, "files": [{"sha": "a9476e8373e04745600094e91aec4583a69ff25d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6a860e0ed7a76b1834c9618842d299e4501d2ff/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b6a860e0ed7a76b1834c9618842d299e4501d2ff/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b6a860e0ed7a76b1834c9618842d299e4501d2ff", "patch": "@@ -4049,6 +4049,7 @@ Released 2018-09-13\n [`missing_panics_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc\n [`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n [`missing_spin_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_spin_loop\n+[`missing_trait_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n [`mixed_read_write_in_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_read_write_in_expression"}, {"sha": "03bfc7de56e4450a738d05f94d180ba3c0c6dca3", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6a860e0ed7a76b1834c9618842d299e4501d2ff/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a860e0ed7a76b1834c9618842d299e4501d2ff/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=b6a860e0ed7a76b1834c9618842d299e4501d2ff", "patch": "@@ -407,6 +407,7 @@ store.register_lints(&[\n     missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n     missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES,\n     missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n+    missing_trait_methods::MISSING_TRAIT_METHODS,\n     mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION,\n     mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION,\n     module_style::MOD_MODULE_FILES,"}, {"sha": "f62d57af5b47f1aed2849a352043102bb818b5cc", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6a860e0ed7a76b1834c9618842d299e4501d2ff/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a860e0ed7a76b1834c9618842d299e4501d2ff/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=b6a860e0ed7a76b1834c9618842d299e4501d2ff", "patch": "@@ -47,6 +47,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n     LintId::of(missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES),\n     LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n+    LintId::of(missing_trait_methods::MISSING_TRAIT_METHODS),\n     LintId::of(mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION),\n     LintId::of(module_style::MOD_MODULE_FILES),\n     LintId::of(module_style::SELF_NAMED_MODULE_FILES),"}, {"sha": "9418e0e1135a6f8d36f0ecf84267210115e13f56", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6a860e0ed7a76b1834c9618842d299e4501d2ff/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a860e0ed7a76b1834c9618842d299e4501d2ff/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b6a860e0ed7a76b1834c9618842d299e4501d2ff", "patch": "@@ -289,6 +289,7 @@ mod missing_const_for_fn;\n mod missing_doc;\n mod missing_enforced_import_rename;\n mod missing_inline;\n+mod missing_trait_methods;\n mod mixed_read_write_in_expression;\n mod module_style;\n mod multi_assignments;\n@@ -916,6 +917,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(box_default::BoxDefault));\n     store.register_late_pass(|_| Box::new(implicit_saturating_add::ImplicitSaturatingAdd));\n     store.register_early_pass(|| Box::new(partial_pub_fields::PartialPubFields));\n+    store.register_late_pass(|_| Box::new(missing_trait_methods::MissingTraitMethods));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "68af8a672f6aed19b7e7f22f235a6255129a2abc", "filename": "clippy_lints/src/missing_trait_methods.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b6a860e0ed7a76b1834c9618842d299e4501d2ff/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a860e0ed7a76b1834c9618842d299e4501d2ff/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs?ref=b6a860e0ed7a76b1834c9618842d299e4501d2ff", "patch": "@@ -0,0 +1,98 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_lint_allowed;\n+use clippy_utils::macros::span_is_local;\n+use rustc_hir::def_id::DefIdMap;\n+use rustc_hir::{Impl, Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::AssocItem;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks if a provided method is used implicitly by a trait\n+    /// implementation. A usage example would be a wrapper where every method\n+    /// should perform some operation before delegating to the inner type's\n+    /// implemenation.\n+    ///\n+    /// This lint should typically be enabled on a specific trait `impl` item\n+    /// rather than globally.\n+    ///\n+    /// ### Why is this bad?\n+    /// Indicates that a method is missing.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// trait Trait {\n+    ///     fn required();\n+    ///\n+    ///     fn provided() {}\n+    /// }\n+    ///\n+    /// # struct Type;\n+    /// #[warn(clippy::missing_trait_methods)]\n+    /// impl Trait for Type {\n+    ///     fn required() { /* ... */ }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// trait Trait {\n+    ///     fn required();\n+    ///\n+    ///     fn provided() {}\n+    /// }\n+    ///\n+    /// # struct Type;\n+    /// #[warn(clippy::missing_trait_methods)]\n+    /// impl Trait for Type {\n+    ///     fn required() { /* ... */ }\n+    ///\n+    ///     fn provided() { /* ... */ }\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.66.0\"]\n+    pub MISSING_TRAIT_METHODS,\n+    restriction,\n+    \"trait implementation uses default provided method\"\n+}\n+declare_lint_pass!(MissingTraitMethods => [MISSING_TRAIT_METHODS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MissingTraitMethods {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if !is_lint_allowed(cx, MISSING_TRAIT_METHODS, item.hir_id())\n+            && span_is_local(item.span)\n+            && let ItemKind::Impl(Impl {\n+                items,\n+                of_trait: Some(trait_ref),\n+                ..\n+            }) = item.kind\n+            && let Some(trait_id) = trait_ref.trait_def_id()\n+        {\n+            let mut provided: DefIdMap<&AssocItem> = cx\n+                .tcx\n+                .provided_trait_methods(trait_id)\n+                .map(|assoc| (assoc.def_id, assoc))\n+                .collect();\n+\n+            for impl_item in *items {\n+                if let Some(def_id) = impl_item.trait_item_def_id {\n+                    provided.remove(&def_id);\n+                }\n+            }\n+\n+            for assoc in provided.values() {\n+                let source_map = cx.tcx.sess.source_map();\n+                let definition_span = source_map.guess_head_span(cx.tcx.def_span(assoc.def_id));\n+\n+                span_lint_and_help(\n+                    cx,\n+                    MISSING_TRAIT_METHODS,\n+                    source_map.guess_head_span(item.span),\n+                    &format!(\"missing trait method provided by default: `{}`\", assoc.name),\n+                    Some(definition_span),\n+                    \"implement the method\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "8aaa61d2967d18bbe1504c028f519064d34e2698", "filename": "src/docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b6a860e0ed7a76b1834c9618842d299e4501d2ff/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a860e0ed7a76b1834c9618842d299e4501d2ff/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=b6a860e0ed7a76b1834c9618842d299e4501d2ff", "patch": "@@ -317,6 +317,7 @@ docs! {\n     \"missing_panics_doc\",\n     \"missing_safety_doc\",\n     \"missing_spin_loop\",\n+    \"missing_trait_methods\",\n     \"mistyped_literal_suffixes\",\n     \"mixed_case_hex_literals\",\n     \"mixed_read_write_in_expression\","}, {"sha": "788ad764f8c3960c3334b8107b66c07829d14c96", "filename": "src/docs/missing_trait_methods.txt", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b6a860e0ed7a76b1834c9618842d299e4501d2ff/src%2Fdocs%2Fmissing_trait_methods.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b6a860e0ed7a76b1834c9618842d299e4501d2ff/src%2Fdocs%2Fmissing_trait_methods.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fmissing_trait_methods.txt?ref=b6a860e0ed7a76b1834c9618842d299e4501d2ff", "patch": "@@ -0,0 +1,40 @@\n+### What it does\n+Checks if a provided method is used implicitly by a trait\n+implementation. A usage example would be a wrapper where every method\n+should perform some operation before delegating to the inner type's\n+implemenation.\n+\n+This lint should typically be enabled on a specific trait `impl` item\n+rather than globally.\n+\n+### Why is this bad?\n+Indicates that a method is missing.\n+\n+### Example\n+```\n+trait Trait {\n+    fn required();\n+\n+    fn provided() {}\n+}\n+\n+#[warn(clippy::missing_trait_methods)]\n+impl Trait for Type {\n+    fn required() { /* ... */ }\n+}\n+```\n+Use instead:\n+```\n+trait Trait {\n+    fn required();\n+\n+    fn provided() {}\n+}\n+\n+#[warn(clippy::missing_trait_methods)]\n+impl Trait for Type {\n+    fn required() { /* ... */ }\n+\n+    fn provided() { /* ... */ }\n+}\n+```\n\\ No newline at end of file"}, {"sha": "8df885919a3e6005fdc380e3298b03d47372c391", "filename": "tests/ui/missing_trait_methods.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b6a860e0ed7a76b1834c9618842d299e4501d2ff/tests%2Fui%2Fmissing_trait_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6a860e0ed7a76b1834c9618842d299e4501d2ff/tests%2Fui%2Fmissing_trait_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_trait_methods.rs?ref=b6a860e0ed7a76b1834c9618842d299e4501d2ff", "patch": "@@ -0,0 +1,50 @@\n+#![allow(unused, clippy::needless_lifetimes)]\n+#![warn(clippy::missing_trait_methods)]\n+\n+trait A {\n+    fn provided() {}\n+}\n+\n+trait B {\n+    fn required();\n+\n+    fn a(_: usize) -> usize {\n+        1\n+    }\n+\n+    fn b<'a, T: AsRef<[u8]>>(a: &'a T) -> &'a [u8] {\n+        a.as_ref()\n+    }\n+}\n+\n+struct Partial;\n+\n+impl A for Partial {}\n+\n+impl B for Partial {\n+    fn required() {}\n+\n+    fn a(_: usize) -> usize {\n+        2\n+    }\n+}\n+\n+struct Complete;\n+\n+impl A for Complete {\n+    fn provided() {}\n+}\n+\n+impl B for Complete {\n+    fn required() {}\n+\n+    fn a(_: usize) -> usize {\n+        2\n+    }\n+\n+    fn b<T: AsRef<[u8]>>(a: &T) -> &[u8] {\n+        a.as_ref()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0c5205e19657256cadafc92710f52d3d69072866", "filename": "tests/ui/missing_trait_methods.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b6a860e0ed7a76b1834c9618842d299e4501d2ff/tests%2Fui%2Fmissing_trait_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b6a860e0ed7a76b1834c9618842d299e4501d2ff/tests%2Fui%2Fmissing_trait_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_trait_methods.stderr?ref=b6a860e0ed7a76b1834c9618842d299e4501d2ff", "patch": "@@ -0,0 +1,27 @@\n+error: missing trait method provided by default: `provided`\n+  --> $DIR/missing_trait_methods.rs:22:1\n+   |\n+LL | impl A for Partial {}\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+help: implement the method\n+  --> $DIR/missing_trait_methods.rs:5:5\n+   |\n+LL |     fn provided() {}\n+   |     ^^^^^^^^^^^^^\n+   = note: `-D clippy::missing-trait-methods` implied by `-D warnings`\n+\n+error: missing trait method provided by default: `b`\n+  --> $DIR/missing_trait_methods.rs:24:1\n+   |\n+LL | impl B for Partial {\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+help: implement the method\n+  --> $DIR/missing_trait_methods.rs:15:5\n+   |\n+LL |     fn b<'a, T: AsRef<[u8]>>(a: &'a T) -> &'a [u8] {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}