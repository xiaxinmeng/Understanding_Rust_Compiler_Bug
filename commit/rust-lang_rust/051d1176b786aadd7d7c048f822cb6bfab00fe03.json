{"sha": "051d1176b786aadd7d7c048f822cb6bfab00fe03", "node_id": "C_kwDOAAsO6NoAKDA1MWQxMTc2Yjc4NmFhZGQ3ZDdjMDQ4ZjgyMmNiNmJmYWIwMGZlMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T02:29:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-21T02:29:55Z"}, "message": "Auto merge of #95104 - compiler-errors:remove-ascription, r=davidtwco\n\nsuggest removing type ascription in bad parsing position\n\nNot sure how to test this with the non-nightly suggestion. Didn't add a new UI test because it already manifests in an existing UI test.\n\nFixes #95014", "tree": {"sha": "8110d46108a24f55795dc54f0abf271877d52713", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8110d46108a24f55795dc54f0abf271877d52713"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051d1176b786aadd7d7c048f822cb6bfab00fe03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051d1176b786aadd7d7c048f822cb6bfab00fe03", "html_url": "https://github.com/rust-lang/rust/commit/051d1176b786aadd7d7c048f822cb6bfab00fe03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051d1176b786aadd7d7c048f822cb6bfab00fe03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eded76b6f16ca0e5b10259f60092aeceeb60b67e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eded76b6f16ca0e5b10259f60092aeceeb60b67e", "html_url": "https://github.com/rust-lang/rust/commit/eded76b6f16ca0e5b10259f60092aeceeb60b67e"}, {"sha": "3516a16eebc93c2ebcf049ce9bb83748f365a57d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3516a16eebc93c2ebcf049ce9bb83748f365a57d", "html_url": "https://github.com/rust-lang/rust/commit/3516a16eebc93c2ebcf049ce9bb83748f365a57d"}], "stats": {"total": 121, "additions": 115, "deletions": 6}, "files": [{"sha": "148e0a24ec304f5b38793a7f2a07224d21dd3979", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/051d1176b786aadd7d7c048f822cb6bfab00fe03/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051d1176b786aadd7d7c048f822cb6bfab00fe03/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=051d1176b786aadd7d7c048f822cb6bfab00fe03", "patch": "@@ -800,11 +800,17 @@ impl<'a> Parser<'a> {\n         &mut self,\n         cast_expr: P<Expr>,\n     ) -> PResult<'a, P<Expr>> {\n+        let span = cast_expr.span;\n+        let maybe_ascription_span = if let ExprKind::Type(ascripted_expr, _) = &cast_expr.kind {\n+            Some(ascripted_expr.span.shrink_to_hi().with_hi(span.hi()))\n+        } else {\n+            None\n+        };\n+\n         // Save the memory location of expr before parsing any following postfix operators.\n         // This will be compared with the memory location of the output expression.\n         // If they different we can assume we parsed another expression because the existing expression is not reallocated.\n         let addr_before = &*cast_expr as *const _ as usize;\n-        let span = cast_expr.span;\n         let with_postfix = self.parse_dot_or_call_expr_with_(cast_expr, span)?;\n         let changed = addr_before != &*with_postfix as *const _ as usize;\n \n@@ -825,11 +831,8 @@ impl<'a> Parser<'a> {\n                 }\n             );\n             let mut err = self.struct_span_err(span, &msg);\n-            // If type ascription is \"likely an error\", the user will already be getting a useful\n-            // help message, and doesn't need a second.\n-            if self.last_type_ascription.map_or(false, |last_ascription| last_ascription.1) {\n-                self.maybe_annotate_with_ascription(&mut err, false);\n-            } else {\n+\n+            let suggest_parens = |err: &mut DiagnosticBuilder<'_, _>| {\n                 let suggestions = vec![\n                     (span.shrink_to_lo(), \"(\".to_string()),\n                     (span.shrink_to_hi(), \")\".to_string()),\n@@ -839,6 +842,32 @@ impl<'a> Parser<'a> {\n                     suggestions,\n                     Applicability::MachineApplicable,\n                 );\n+            };\n+\n+            // If type ascription is \"likely an error\", the user will already be getting a useful\n+            // help message, and doesn't need a second.\n+            if self.last_type_ascription.map_or(false, |last_ascription| last_ascription.1) {\n+                self.maybe_annotate_with_ascription(&mut err, false);\n+            } else if let Some(ascription_span) = maybe_ascription_span {\n+                let is_nightly = self.sess.unstable_features.is_nightly_build();\n+                if is_nightly {\n+                    suggest_parens(&mut err);\n+                }\n+                err.span_suggestion(\n+                    ascription_span,\n+                    &format!(\n+                        \"{}remove the type ascription\",\n+                        if is_nightly { \"alternatively, \" } else { \"\" }\n+                    ),\n+                    String::new(),\n+                    if is_nightly {\n+                        Applicability::MaybeIncorrect\n+                    } else {\n+                        Applicability::MachineApplicable\n+                    },\n+                );\n+            } else {\n+                suggest_parens(&mut err);\n             }\n             err.emit();\n         };"}, {"sha": "6823a426823251465674175d2840368d0b2da4c3", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.stderr", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/051d1176b786aadd7d7c048f822cb6bfab00fe03/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/051d1176b786aadd7d7c048f822cb6bfab00fe03/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr?ref=051d1176b786aadd7d7c048f822cb6bfab00fe03", "patch": "@@ -19,6 +19,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     (vec![1, 2, 3]: Vec<i32>)[0];\n    |     +                       +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     vec![1, 2, 3]: Vec<i32>[0];\n+LL +     vec![1, 2, 3][0];\n+   | \n \n error: casts cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:17:5\n@@ -41,6 +46,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     ((&[0i32]): &[i32; 1])[0];\n    |     +                    +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     (&[0i32]): &[i32; 1][0];\n+LL +     (&[0i32])[0];\n+   | \n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:39:13\n@@ -52,6 +62,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     let _ = (0i32: i32: i32).count_ones();\n    |             +              +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     let _ = 0i32: i32: i32.count_ones();\n+LL +     let _ = 0i32: i32.count_ones();\n+   | \n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:41:13\n@@ -63,6 +78,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     let _ = (0 as i32: i32).count_ones();\n    |             +             +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     let _ = 0 as i32: i32.count_ones();\n+LL +     let _ = 0 as i32.count_ones();\n+   | \n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:43:13\n@@ -107,6 +127,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     let _ = (0i32: i32).count_ones(): u32;\n    |             +         +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     let _ = 0i32: i32.count_ones(): u32;\n+LL +     let _ = 0i32.count_ones(): u32;\n+   | \n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:51:13\n@@ -129,6 +154,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     let _ = (0i32: i32).count_ones() as u32;\n    |             +         +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     let _ = 0i32: i32.count_ones() as u32;\n+LL +     let _ = 0i32.count_ones() as u32;\n+   | \n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:55:13\n@@ -151,6 +181,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     let _ = (0i32: i32: i32).count_ones() as u32 as i32;\n    |             +              +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     let _ = 0i32: i32: i32.count_ones() as u32 as i32;\n+LL +     let _ = 0i32: i32.count_ones() as u32 as i32;\n+   | \n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:62:13\n@@ -198,6 +233,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     (0: i32).max(0);\n    |     +      +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     0: i32.max(0);\n+LL +     0.max(0);\n+   | \n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:92:8\n@@ -220,6 +260,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     if (5u64: u64).max(0) == 0 {\n    |        +         +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     if 5u64: u64.max(0) == 0 {\n+LL +     if 5u64.max(0) == 0 {\n+   | \n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:102:9\n@@ -242,6 +287,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |         (5u64: u64).max(0) == 0\n    |         +         +\n+help: alternatively, remove the type ascription\n+   |\n+LL -         5u64: u64.max(0) == 0\n+LL +         5u64.max(0) == 0\n+   | \n \n error: casts cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:111:24\n@@ -264,6 +314,11 @@ help: try surrounding the expression in parentheses\n    |\n LL | static bar2: &[i32] = &((&[1i32,2,3]: &[i32; 3])[0..1]);\n    |                         +                      +\n+help: alternatively, remove the type ascription\n+   |\n+LL - static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n+LL + static bar2: &[i32] = &(&[1i32,2,3][0..1]);\n+   | \n \n error: casts cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:119:5\n@@ -286,6 +341,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     (Err(0u64): Result<u64,u64>)?;\n    |     +                          +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     Err(0u64): Result<u64,u64>?;\n+LL +     Err(0u64)?;\n+   | \n \n error: casts cannot be followed by a function call\n   --> $DIR/issue-35813-postfix-after-cast.rs:145:5\n@@ -308,6 +368,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     (drop_ptr: fn(u8))(0);\n    |     +                +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     drop_ptr: fn(u8)(0);\n+LL +     drop_ptr(0);\n+   | \n \n error: casts cannot be followed by `.await`\n   --> $DIR/issue-35813-postfix-after-cast.rs:152:5\n@@ -330,6 +395,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     (Box::pin(noop()): Pin<Box<_>>).await;\n    |     +                             +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     Box::pin(noop()): Pin<Box<_>>.await;\n+LL +     Box::pin(noop()).await;\n+   | \n \n error: casts cannot be followed by a field access\n   --> $DIR/issue-35813-postfix-after-cast.rs:167:5\n@@ -352,6 +422,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |     (Foo::default(): Foo).bar;\n    |     +                   +\n+help: alternatively, remove the type ascription\n+   |\n+LL -     Foo::default(): Foo.bar;\n+LL +     Foo::default().bar;\n+   | \n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:84:9\n@@ -374,6 +449,11 @@ help: try surrounding the expression in parentheses\n    |\n LL |         (if true { 33 } else { 44 }: i32).max(0)\n    |         +                               +\n+help: alternatively, remove the type ascription\n+   |\n+LL -         if true { 33 } else { 44 }: i32.max(0)\n+LL +         if true { 33 } else { 44 }.max(0)\n+   | \n \n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-35813-postfix-after-cast.rs:131:13"}]}