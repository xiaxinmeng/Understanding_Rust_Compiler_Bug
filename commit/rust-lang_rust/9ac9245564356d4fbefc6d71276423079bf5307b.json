{"sha": "9ac9245564356d4fbefc6d71276423079bf5307b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYzkyNDU1NjQzNTZkNGZiZWZjNmQ3MTI3NjQyMzA3OWJmNTMwN2I=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-03T00:19:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-03T09:09:30Z"}, "message": "rustdoc: Have no_run imply no_trans\n\nThis allows writing code examples which pass all analysis of the compiler, but\ndon't actually link. A good example is examples that use extern {} blocks.\n\nCloses #12903", "tree": {"sha": "83759b60abbed0c39451334b745c33c722b10fd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83759b60abbed0c39451334b745c33c722b10fd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ac9245564356d4fbefc6d71276423079bf5307b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac9245564356d4fbefc6d71276423079bf5307b", "html_url": "https://github.com/rust-lang/rust/commit/9ac9245564356d4fbefc6d71276423079bf5307b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ac9245564356d4fbefc6d71276423079bf5307b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52955dd661bdbb37778ff32da5746e1012119ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/52955dd661bdbb37778ff32da5746e1012119ba3", "html_url": "https://github.com/rust-lang/rust/commit/52955dd661bdbb37778ff32da5746e1012119ba3"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "d4267fd57a4459732ee0ba7f2d176b2598f7cb6c", "filename": "src/doc/guide-ffi.md", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9ac9245564356d4fbefc6d71276423079bf5307b/src%2Fdoc%2Fguide-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ac9245564356d4fbefc6d71276423079bf5307b/src%2Fdoc%2Fguide-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-ffi.md?ref=9ac9245564356d4fbefc6d71276423079bf5307b", "patch": "@@ -11,16 +11,14 @@ snappy includes a C interface (documented in\n The following is a minimal example of calling a foreign function which will\n compile if snappy is installed:\n \n-~~~~\n+~~~~no_run\n extern crate libc;\n use libc::size_t;\n \n #[link(name = \"snappy\")]\n-# #[cfg(ignore_this)]\n extern {\n     fn snappy_max_compressed_length(source_length: size_t) -> size_t;\n }\n-# unsafe fn snappy_max_compressed_length(a: size_t) -> size_t { a }\n \n fn main() {\n     let x = unsafe { snappy_max_compressed_length(100) };\n@@ -46,7 +44,7 @@ keeping the binding correct at runtime.\n \n The `extern` block can be extended to cover the entire snappy API:\n \n-~~~~ {.ignore}\n+~~~~no_run\n extern crate libc;\n use libc::{c_int, size_t};\n \n@@ -67,6 +65,7 @@ extern {\n     fn snappy_validate_compressed_buffer(compressed: *u8,\n                                          compressed_length: size_t) -> c_int;\n }\n+# fn main() {}\n ~~~~\n \n # Creating a safe interface\n@@ -209,19 +208,16 @@ A basic example is:\n \n Rust code:\n \n-~~~~\n+~~~~no_run\n extern fn callback(a:i32) {\n     println!(\"I'm called from C with value {0}\", a);\n }\n \n #[link(name = \"extlib\")]\n-# #[cfg(ignore)]\n extern {\n    fn register_callback(cb: extern fn(i32)) -> i32;\n    fn trigger_callback();\n }\n-# unsafe fn register_callback(cb: extern fn(i32)) -> i32 { 0 }\n-# unsafe fn trigger_callback() { }\n \n fn main() {\n     unsafe {\n@@ -265,7 +261,7 @@ referenced Rust object.\n \n Rust code:\n \n-~~~~\n+~~~~no_run\n \n struct RustObject {\n     a: i32,\n@@ -281,15 +277,11 @@ extern fn callback(target: *mut RustObject, a:i32) {\n }\n \n #[link(name = \"extlib\")]\n-# #[cfg(ignore)]\n extern {\n    fn register_callback(target: *mut RustObject,\n                         cb: extern fn(*mut RustObject, i32)) -> i32;\n    fn trigger_callback();\n }\n-# unsafe fn register_callback(a: *mut RustObject,\n-#                             b: extern fn(*mut RustObject, i32)) -> i32 { 0 }\n-# unsafe fn trigger_callback() {}\n \n fn main() {\n     // Create the object that will be referenced in the callback\n@@ -398,9 +390,12 @@ the `link_args` attribute. This attribute is applied to `extern` blocks and\n specifies raw flags which need to get passed to the linker when producing an\n artifact. An example usage would be:\n \n-~~~ {.ignore}\n+~~~ no_run\n+#![feature(link_args)]\n+\n #[link_args = \"-foo -bar -baz\"]\n extern {}\n+# fn main() {}\n ~~~\n \n Note that this feature is currently hidden behind the `feature(link_args)` gate\n@@ -434,15 +429,13 @@ Foreign APIs often export a global variable which could do something like track\n global state. In order to access these variables, you declare them in `extern`\n blocks with the `static` keyword:\n \n-~~~\n+~~~no_run\n extern crate libc;\n \n #[link(name = \"readline\")]\n-# #[cfg(ignore)]\n extern {\n     static rl_readline_version: libc::c_int;\n }\n-# static rl_readline_version: libc::c_int = 0;\n \n fn main() {\n     println!(\"You have readline version {} installed.\",\n@@ -454,16 +447,14 @@ Alternatively, you may need to alter global state provided by a foreign\n interface. To do this, statics can be declared with `mut` so rust can mutate\n them.\n \n-~~~\n+~~~no_run\n extern crate libc;\n use std::ptr;\n \n #[link(name = \"readline\")]\n-# #[cfg(ignore)]\n extern {\n     static mut rl_prompt: *libc::c_char;\n }\n-# static mut rl_prompt: *libc::c_char = 0 as *libc::c_char;\n \n fn main() {\n     \"[my-awesome-shell] $\".with_c_str(|buf| {\n@@ -488,7 +479,6 @@ extern crate libc;\n extern \"stdcall\" {\n     fn SetEnvironmentVariableA(n: *u8, v: *u8) -> libc::c_int;\n }\n-\n # fn main() { }\n ~~~~\n "}, {"sha": "5976856172b7315a44c9d8af514285d45dd30ffc", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ac9245564356d4fbefc6d71276423079bf5307b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac9245564356d4fbefc6d71276423079bf5307b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=9ac9245564356d4fbefc6d71276423079bf5307b", "patch": "@@ -103,6 +103,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n         addl_lib_search_paths: RefCell::new(libs),\n         crate_types: vec!(session::CrateTypeExecutable),\n         output_types: vec!(link::OutputTypeExe),\n+        no_trans: no_run,\n         cg: session::CodegenOptions {\n             prefer_dynamic: true,\n             .. session::basic_codegen_options()"}]}