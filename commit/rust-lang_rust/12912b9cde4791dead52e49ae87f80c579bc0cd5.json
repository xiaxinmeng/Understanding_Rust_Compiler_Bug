{"sha": "12912b9cde4791dead52e49ae87f80c579bc0cd5", "node_id": "C_kwDOAAsO6NoAKDEyOTEyYjljZGU0NzkxZGVhZDUyZTQ5YWU4N2Y4MGM1NzliYzBjZDU", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-15T21:28:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2022-06-15T21:28:05Z"}, "message": "fix universes in the NLL type tests\n\nIn the NLL code, we were not accommodating universes in the\n`type_test` logic. This led to issue 98095.", "tree": {"sha": "459be02e20d5f3c3c4aa20d3a72e94ef5ff96f6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/459be02e20d5f3c3c4aa20d3a72e94ef5ff96f6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12912b9cde4791dead52e49ae87f80c579bc0cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12912b9cde4791dead52e49ae87f80c579bc0cd5", "html_url": "https://github.com/rust-lang/rust/commit/12912b9cde4791dead52e49ae87f80c579bc0cd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12912b9cde4791dead52e49ae87f80c579bc0cd5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b3d2cee0e371fdecf9726ab949a24ead3dcb97", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b3d2cee0e371fdecf9726ab949a24ead3dcb97", "html_url": "https://github.com/rust-lang/rust/commit/b7b3d2cee0e371fdecf9726ab949a24ead3dcb97"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "4830eb3f464a7a5d4683bbcca3127b7843195743", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/12912b9cde4791dead52e49ae87f80c579bc0cd5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12912b9cde4791dead52e49ae87f80c579bc0cd5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=12912b9cde4791dead52e49ae87f80c579bc0cd5", "patch": "@@ -1342,6 +1342,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let sub_region_scc = self.constraint_sccs.scc(sub_region);\n         let sup_region_scc = self.constraint_sccs.scc(sup_region);\n \n+        // If we are checking that `'sup: 'sub`, and `'sub` contains\n+        // some placeholder that `'sup` cannot name, then this is only\n+        // true if `'sup` outlives static.\n+        if !self.universe_compatible(sub_region_scc, sup_region_scc) {\n+            debug!(\n+                \"eval_outlives: sub universe `{sub_region_scc:?}` is not nameable \\\n+                by super `{sup_region_scc:?}`, promoting to static\",\n+            );\n+\n+            return self.eval_outlives(sup_region, self.universal_regions.fr_static);\n+        }\n+\n         // Both the `sub_region` and `sup_region` consist of the union\n         // of some number of universal regions (along with the union\n         // of various points in the CFG; ignore those points for\n@@ -1356,6 +1368,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             });\n \n         if !universal_outlives {\n+            debug!(\n+                \"eval_outlives: returning false because sub region contains a universal region not present in super\"\n+            );\n             return false;\n         }\n \n@@ -1364,10 +1379,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         if self.universal_regions.is_universal_region(sup_region) {\n             // Micro-opt: universal regions contain all points.\n+            debug!(\n+                \"eval_outlives: returning true because super is universal and hence contains all points\"\n+            );\n             return true;\n         }\n \n-        self.scc_values.contains_points(sup_region_scc, sub_region_scc)\n+        let result = self.scc_values.contains_points(sup_region_scc, sub_region_scc);\n+        debug!(\n+            \"eval_outlives: returning {} because of comparison between points in sup/sub\",\n+            result\n+        );\n+        result\n     }\n \n     /// Once regions have been propagated, this method is used to see"}, {"sha": "f9801c07d7bcbafdde84785914c20734ad8e0683", "filename": "src/test/ui/nll/type-test-universe.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12912b9cde4791dead52e49ae87f80c579bc0cd5/src%2Ftest%2Fui%2Fnll%2Ftype-test-universe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12912b9cde4791dead52e49ae87f80c579bc0cd5/src%2Ftest%2Fui%2Fnll%2Ftype-test-universe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-test-universe.rs?ref=12912b9cde4791dead52e49ae87f80c579bc0cd5", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for #98095: make sure that\n+// we detect that S needs to outlive 'static.\n+\n+fn outlives_forall<T>()\n+where\n+    for<'u> T: 'u,\n+{\n+}\n+\n+fn test1<S>() {\n+    outlives_forall::<S>();\n+    //~^ ERROR `S` does not live long enough\n+}\n+\n+struct Value<'a>(&'a ());\n+fn test2<'a>() {\n+    outlives_forall::<Value<'a>>();\n+    //~^ ERROR lifetime may not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "242486c360a8090ea7f215d4448e6039250c8136", "filename": "src/test/ui/nll/type-test-universe.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/12912b9cde4791dead52e49ae87f80c579bc0cd5/src%2Ftest%2Fui%2Fnll%2Ftype-test-universe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12912b9cde4791dead52e49ae87f80c579bc0cd5/src%2Ftest%2Fui%2Fnll%2Ftype-test-universe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-test-universe.stderr?ref=12912b9cde4791dead52e49ae87f80c579bc0cd5", "patch": "@@ -0,0 +1,16 @@\n+error: `S` does not live long enough\n+  --> $DIR/type-test-universe.rs:11:5\n+   |\n+LL |     outlives_forall::<S>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-test-universe.rs:17:5\n+   |\n+LL | fn test2<'a>() {\n+   |          -- lifetime `'a` defined here\n+LL |     outlives_forall::<Value<'a>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+"}]}