{"sha": "7c90189e1331cea3eac0ab0e8959f664cffba1ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOTAxODllMTMzMWNlYTNlYWMwYWIwZTg5NTlmNjY0Y2ZmYmExYWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-02-24T19:21:33Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-19T23:27:40Z"}, "message": "Stabilize slice patterns without `..`\n\nMerge `feature(advanced_slice_patterns)` into `feature(slice_patterns)`", "tree": {"sha": "839b20a700f22400b0be58ba059f84262de7c9c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/839b20a700f22400b0be58ba059f84262de7c9c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c90189e1331cea3eac0ab0e8959f664cffba1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c90189e1331cea3eac0ab0e8959f664cffba1ae", "html_url": "https://github.com/rust-lang/rust/commit/7c90189e1331cea3eac0ab0e8959f664cffba1ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c90189e1331cea3eac0ab0e8959f664cffba1ae/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a04b88d1941644df01fa5e31dd43e0f57c13d938", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04b88d1941644df01fa5e31dd43e0f57c13d938", "html_url": "https://github.com/rust-lang/rust/commit/a04b88d1941644df01fa5e31dd43e0f57c13d938"}], "stats": {"total": 350, "additions": 124, "deletions": 226}, "files": [{"sha": "e8256469b145078be9889c75600c86e64081012c", "filename": "src/doc/unstable-book/src/language-features/advanced-slice-patterns.md", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a04b88d1941644df01fa5e31dd43e0f57c13d938/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/a04b88d1941644df01fa5e31dd43e0f57c13d938/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fadvanced-slice-patterns.md?ref=a04b88d1941644df01fa5e31dd43e0f57c13d938", "patch": "@@ -1,35 +0,0 @@\n-# `advanced_slice_patterns`\n-\n-The tracking issue for this feature is: [#23121]\n-\n-[#23121]: https://github.com/rust-lang/rust/issues/23121\n-\n-See also [`slice_patterns`](language-features/slice-patterns.html).\n-\n-------------------------\n-\n-\n-The `advanced_slice_patterns` gate lets you use `..` to indicate any number of\n-elements inside a pattern matching a slice. This wildcard can only be used once\n-for a given array. If there's an identifier before the `..`, the result of the\n-slice will be bound to that name. For example:\n-\n-```rust\n-#![feature(advanced_slice_patterns, slice_patterns)]\n-\n-fn is_symmetric(list: &[u32]) -> bool {\n-    match list {\n-        &[] | &[_] => true,\n-        &[x, ref inside.., y] if x == y => is_symmetric(inside),\n-        _ => false\n-    }\n-}\n-\n-fn main() {\n-    let sym = &[0, 1, 4, 2, 4, 1, 0];\n-    assert!(is_symmetric(sym));\n-\n-    let not_sym = &[0, 1, 7, 2, 4, 1, 0];\n-    assert!(!is_symmetric(not_sym));\n-}\n-```"}, {"sha": "133174268ef93f16fbfc191b9bd405751e81af04", "filename": "src/doc/unstable-book/src/language-features/slice-patterns.md", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fslice-patterns.md?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -4,25 +4,29 @@ The tracking issue for this feature is: [#23121]\n \n [#23121]: https://github.com/rust-lang/rust/issues/23121\n \n-See also\n-[`advanced_slice_patterns`](language-features/advanced-slice-patterns.html).\n-\n ------------------------\n \n-\n-If you want to match against a slice or array, you can use `&` with the\n-`slice_patterns` feature:\n+The `slice_patterns` feature gate lets you use `..` to indicate any number of\n+elements inside a pattern matching a slice. This wildcard can only be used once\n+for a given array. If there's an pattern before the `..`, the subslice will be\n+matched against that pattern. For example:\n \n ```rust\n #![feature(slice_patterns)]\n \n+fn is_symmetric(list: &[u32]) -> bool {\n+    match list {\n+        &[] | &[_] => true,\n+        &[x, ref inside.., y] if x == y => is_symmetric(inside),\n+        &[..] => false,\n+    }\n+}\n+\n fn main() {\n-    let v = vec![\"match_this\", \"1\"];\n+    let sym = &[0, 1, 4, 2, 4, 1, 0];\n+    assert!(is_symmetric(sym));\n \n-    match &v[..] {\n-        &[\"match_this\", second] => println!(\"The second element is {}\", second),\n-        _ => {},\n-    }\n+    let not_sym = &[0, 1, 7, 2, 4, 1, 0];\n+    assert!(!is_symmetric(not_sym));\n }\n ```\n-"}, {"sha": "45bb388557445cfda184565b19d4961238e97e88", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -110,7 +110,6 @@\n #![feature(ptr_internals)]\n #![feature(rustc_attrs)]\n #![feature(slice_get_slice)]\n-#![feature(slice_patterns)]\n #![feature(slice_rsplit)]\n #![feature(specialization)]\n #![feature(staged_api)]"}, {"sha": "c947b003ccbffaa697586bfb32b5bc528687c142", "filename": "src/libcore/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -11,7 +11,6 @@\n #![deny(warnings)]\n \n #![feature(flt2dec)]\n-#![feature(slice_patterns)]\n #![feature(test)]\n \n extern crate core;"}, {"sha": "e9a8113ef10707082fabe7f330729dbbec97e465", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -37,6 +37,7 @@\n #![feature(raw)]\n #![feature(refcell_replace_swap)]\n #![feature(slice_patterns)]\n+#![feature(slice_rotate)]\n #![feature(sort_internals)]\n #![feature(specialization)]\n #![feature(step_trait)]"}, {"sha": "278e0f9a26e433d032a5d2c3a4c0ee8142f3c4a9", "filename": "src/librustc/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fbenches%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(warnings)]\n \n-#![feature(slice_patterns)]\n #![feature(test)]\n \n extern crate test;"}, {"sha": "565658804b00134546f78dc4fa7341970b4cba86", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -47,7 +47,7 @@\n #![forbid(unsafe_code)]\n \n #![feature(i128_type)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(stage0, feature(slice_patterns))]\n #![feature(try_from)]\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this."}, {"sha": "2b0775e86952bbad78af7a1e0e5bf3ad1800ed5c", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -20,7 +20,6 @@\n #![deny(warnings)]\n \n #![feature(rustc_diagnostic_macros)]\n-#![feature(slice_patterns)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(macro_lifetime_matcher)]"}, {"sha": "ce896bfb701baf5385b7aaafda9532b4869c15b1", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -31,7 +31,6 @@\n #![feature(macro_vis_matcher)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(slice_patterns)]\n #![cfg_attr(stage0, feature(never_type))]\n \n #[macro_use]"}, {"sha": "337f85a381399232aa8a9ab6734598862d7520c9", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -30,7 +30,7 @@\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(stage0, feature(slice_patterns))]\n #![feature(conservative_impl_trait)]\n #![feature(optin_builtin_traits)]\n #![feature(inclusive_range_fields)]"}, {"sha": "0af5f46793450afd5b5436a3497c4048c60042cb", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -24,7 +24,6 @@\n #![feature(i128_type)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(slice_patterns)]\n #![feature(conservative_impl_trait)]\n \n extern crate ar;"}, {"sha": "f5337118e30d1924fba07238d74614d0095a17a6", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -3559,8 +3559,6 @@ elements in the array being matched.\n Example of erroneous code:\n \n ```compile_fail,E0527\n-#![feature(slice_patterns)]\n-\n let r = &[1, 2, 3, 4];\n match r {\n     &[a, b] => { // error: pattern requires 2 elements but array\n@@ -3625,8 +3623,6 @@ An array or slice pattern was matched against some other type.\n Example of erroneous code:\n \n ```compile_fail,E0529\n-#![feature(slice_patterns)]\n-\n let r: f32 = 1.0;\n match r {\n     [a, b] => { // error: expected an array or slice, found `f32`\n@@ -3639,8 +3635,6 @@ Ensure that the pattern and the expression being matched on are of consistent\n types:\n \n ```\n-#![feature(slice_patterns)]\n-\n let r = [1.0, 2.0];\n match r {\n     [a, b] => { // ok!"}, {"sha": "9f98932f24b52d90100b6a75ed6ec22dcc1ef111", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -72,7 +72,7 @@ This API is completely unstable and subject to change.\n \n #![allow(non_camel_case_types)]\n \n-#![feature(advanced_slice_patterns)]\n+#![cfg_attr(stage0, feature(advanced_slice_patterns))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]"}, {"sha": "bec25a98227a22d2ec551b571575125d980c996c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -20,7 +20,7 @@\n #![feature(box_syntax)]\n #![feature(fs_read_write)]\n #![feature(set_stdio)]\n-#![feature(slice_patterns)]\n+#![cfg_attr(stage0, feature(slice_patterns))]\n #![feature(test)]\n #![feature(unicode)]\n #![feature(vec_remove_item)]"}, {"sha": "915396d29fe26c6ebaa96953b12c1aacd199ac55", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -145,7 +145,6 @@ declare_features! (\n     // rustc internal\n     (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n     (active, rustc_const_unstable, \"1.0.0\", None, None),\n-    (active, advanced_slice_patterns, \"1.0.0\", Some(23121), None),\n     (active, box_syntax, \"1.0.0\", Some(27779), None),\n     (active, placement_in_syntax, \"1.0.0\", Some(27779), None),\n     (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n@@ -474,6 +473,8 @@ declare_features! (\n     (removed, allocator, \"1.0.0\", None, None),\n     // Allows the `#[simd]` attribute -- removed in favor of `#[repr(simd)]`\n     (removed, simd, \"1.0.0\", Some(27731), None),\n+    // Merged into `slice_patterns`\n+    (removed, advanced_slice_patterns, \"1.0.0\", Some(23121), None),\n );\n \n declare_features! (\n@@ -1655,17 +1656,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match pattern.node {\n-            PatKind::Slice(_, Some(_), ref last) if !last.is_empty() => {\n-                gate_feature_post!(&self, advanced_slice_patterns,\n-                                  pattern.span,\n-                                  \"multiple-element slice matches anywhere \\\n-                                   but at the end of a slice (e.g. \\\n-                                   `[0, ..xs, 0]`) are experimental\")\n-            }\n-            PatKind::Slice(..) => {\n+            PatKind::Slice(_, Some(ref subslice), _) => {\n                 gate_feature_post!(&self, slice_patterns,\n-                                  pattern.span,\n-                                  \"slice pattern syntax is experimental\");\n+                                   subslice.span,\n+                                   \"syntax for subslices in slice patterns is not yet stabilized\");\n             }\n             PatKind::Box(..) => {\n                 gate_feature_post!(&self, box_patterns,"}, {"sha": "6d8975197d55cba73ee654ddbedea6ee9d91423e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -3618,7 +3618,7 @@ impl<'a> Parser<'a> {\n                         slice = Some(P(Pat {\n                             id: ast::DUMMY_NODE_ID,\n                             node: PatKind::Wild,\n-                            span: self.span,\n+                            span: self.prev_span,\n                         }));\n                         before_slice = false;\n                     }"}, {"sha": "fa475949b36b0e65612e92e4290e4f0686f948fc", "filename": "src/test/compile-fail/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -13,7 +13,6 @@\n //[mir]compile-flags: -Z borrowck=mir\n \n #![feature(slice_patterns)]\n-#![feature(advanced_slice_patterns)]\n \n pub struct Foo {\n   x: u32"}, {"sha": "30047f84041f14354f71ca1649ed24d71d72f278", "filename": "src/test/compile-fail/borrowck/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -13,8 +13,6 @@\n \n // Test that immutable pattern bindings cannot be reassigned.\n \n-#![feature(slice_patterns)]\n-\n enum E {\n     Foo(isize)\n }"}, {"sha": "0db31cef0ed777b3a3358b91251f58ec421f957e", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-from-array.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-from-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-from-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-from-array.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -11,7 +11,8 @@\n // revisions: ast mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(box_syntax, slice_patterns, advanced_slice_patterns)]\n+#![feature(box_syntax)]\n+#![feature(slice_patterns)]\n \n fn move_out_from_begin_and_end() {\n     let a = [box 1, box 2];"}, {"sha": "0fd6923326ab3eb7a56b503e667811f1bfbd0c80", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-element-loan.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-element-loan.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n fn a<'a>() -> &'a [isize] {"}, {"sha": "1b9af393ccce473bfce789a75af2b8c6058aa70c", "filename": "src/test/compile-fail/issue-12369.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(slice_patterns)]\n-#![allow(unused_variables)]\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "fe7fbb176cc5e61adf95be6680d92539f3ccd8c4", "filename": "src/test/compile-fail/issue-13482-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -10,8 +10,6 @@\n \n // compile-flags:-Z verbose\n \n-#![feature(slice_patterns)]\n-\n fn main() {\n     let x = [1,2];\n     let y = match x {"}, {"sha": "32a63b79a32dd093cb845c688d72d8378cc7f7c2", "filename": "src/test/compile-fail/issue-13482.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n-\n fn main() {\n   let x = [1,2];\n   let y = match x {"}, {"sha": "1cdd803971b4bfd06c9259d7d86e48de8c8b743f", "filename": "src/test/compile-fail/issue-15381.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-15381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-15381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15381.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n-\n fn main() {\n     let values: Vec<u8> = vec![1,2,3,4,5,6,7,8];\n "}, {"sha": "bdd502d442036bf751a32fe291c2fe704628fa76", "filename": "src/test/compile-fail/issue-41255.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -10,7 +10,6 @@\n \n // Matching against float literals should result in a linter error\n \n-#![feature(slice_patterns)]\n #![feature(exclusive_range_pattern)]\n #![allow(unused)]\n #![forbid(illegal_floating_point_literal_pattern)]"}, {"sha": "fffa27ab842ad43864ea07a15653467d510ec6c4", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -10,7 +10,6 @@\n \n // Matching against NaN should result in a warning\n \n-#![feature(slice_patterns)]\n #![allow(unused)]\n #![deny(illegal_floating_point_literal_pattern)]\n "}, {"sha": "abb770df107f12edc1c8c62d3c6eb82654496ccc", "filename": "src/test/compile-fail/match-byte-array-patterns-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns-2.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(advanced_slice_patterns, slice_patterns)]\n-\n fn main() {\n     let buf = &[0, 1, 2, 3];\n "}, {"sha": "9db4319b786821b2d205fb52dbb58ada2193be9a", "filename": "src/test/compile-fail/match-byte-array-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-byte-array-patterns.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(advanced_slice_patterns, slice_patterns)]\n+#![feature(slice_patterns)]\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "cb8f8fad532fa2569d246d0a0c4e37af33ad555b", "filename": "src/test/compile-fail/match-ref-ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ref-ice.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n #![deny(unreachable_patterns)]\n \n // The arity of `ref x` is always 1. If the pattern is compared to some non-structural type whose"}, {"sha": "a8ec95da3d872c2a85c5068829c46f8da84b68a4", "filename": "src/test/compile-fail/match-slice-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-slice-patterns.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(advanced_slice_patterns, slice_patterns)]\n+#![feature(slice_patterns)]\n \n fn check(list: &[Option<()>]) {\n     match list {"}, {"sha": "05971d70167bd39bbf94ecbafd97efb35635f9cb", "filename": "src/test/compile-fail/match-vec-fixed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n #![deny(unreachable_patterns)]\n \n fn a() {"}, {"sha": "52c5375f4e7d1179a19363c3ec54356d4af70619", "filename": "src/test/compile-fail/match-vec-mismatch-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n-\n fn main() {\n     match () {\n         [()] => { }"}, {"sha": "d6e3fdbe088445272b6049665c356161953c2014", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(slice_patterns)]\n #![deny(unreachable_patterns)]\n-#![allow(unused_variables)]\n \n fn main() {\n     let x: Vec<(isize, isize)> = Vec::new();"}, {"sha": "5efbef549ddcade388c35100db81bf9515bf978f", "filename": "src/test/compile-fail/move-out-of-slice-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmove-out-of-slice-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fmove-out-of-slice-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-slice-1.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns, box_patterns)]\n+#![feature(box_patterns)]\n \n struct A;\n "}, {"sha": "3401dd1becdd8b141dd5e8940e1af672ac7e68f2", "filename": "src/test/compile-fail/regions-pattern-typing-issue-19552.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n-\n fn assert_static<T: 'static>(_t: T) {}\n \n fn main() {"}, {"sha": "1d3f8ff12d865650156ba18f24d64215e2e3e988", "filename": "src/test/compile-fail/uninhabited-matches-feature-gated.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Funinhabited-matches-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Funinhabited-matches-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-matches-feature-gated.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n-\n enum Void {}\n \n fn main() {"}, {"sha": "e130df5c845b58fc309e50e3f2b0208e59427f53", "filename": "src/test/compile-fail/uninhabited-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinhabited-patterns.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n #![feature(box_patterns)]\n-#![feature(slice_patterns)]\n #![feature(box_syntax)]\n #![feature(exhaustive_patterns)]\n+#![feature(slice_patterns)]\n #![deny(unreachable_patterns)]\n \n mod foo {"}, {"sha": "fa5f62f89f63cd88451a94e2493dd671425352d8", "filename": "src/test/mir-opt/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax, slice_patterns, advanced_slice_patterns)]\n+#![feature(box_syntax)]\n+#![feature(slice_patterns)]\n \n fn move_out_from_end() {\n     let a = [box 1, box 2];"}, {"sha": "17cf39372c0e4986fe128b4de0bbaa1013ceff61", "filename": "src/test/run-pass-fulldeps/auxiliary/roman_numerals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Froman_numerals.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -12,7 +12,6 @@\n \n #![crate_type=\"dylib\"]\n #![feature(plugin_registrar, rustc_private)]\n-#![feature(slice_patterns)]\n \n extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "43271162c18125b0f4d7b3e27e393639c941bb99", "filename": "src/test/run-pass/destructure-array-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdestructure-array-1.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -11,9 +11,6 @@\n // Ensure that we can do a destructuring bind of a fixed-size array,\n // even when the element type has a destructor.\n \n-\n-#![feature(slice_patterns)]\n-\n struct D { x: u8 }\n \n impl Drop for D { fn drop(&mut self) { } }"}, {"sha": "1f543f7be0e8fb24dd95aa659021ed7d1a4b42ce", "filename": "src/test/run-pass/dynamic-drop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -13,7 +13,8 @@\n \n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![feature(generators, generator_trait, untagged_unions, slice_patterns, advanced_slice_patterns)]\n+#![feature(generators, generator_trait, untagged_unions)]\n+#![feature(slice_patterns)]\n \n use std::cell::{Cell, RefCell};\n use std::ops::Generator;"}, {"sha": "c14f3dc72916d6e26b0e03510691cf05b55cefae", "filename": "src/test/run-pass/ignore-all-the-things.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fignore-all-the-things.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n struct Foo(isize, isize, isize, isize);\n@@ -20,11 +19,11 @@ pub fn main() {\n     let Foo(..) = Foo(5, 5, 5, 5);\n     let Foo(..) = Foo(5, 5, 5, 5);\n     let Bar{..} = Bar{a: 5, b: 5, c: 5, d: 5};\n-    //let (..) = (5, 5, 5, 5);\n-    //let Foo(a, b, ..) = Foo(5, 5, 5, 5);\n-    //let Foo(.., d) = Foo(5, 5, 5, 5);\n-    //let (a, b, ..) = (5, 5, 5, 5);\n-    //let (.., c, d) = (5, 5, 5, 5);\n+    let (..) = (5, 5, 5, 5);\n+    let Foo(a, b, ..) = Foo(5, 5, 5, 5);\n+    let Foo(.., d) = Foo(5, 5, 5, 5);\n+    let (a, b, ..) = (5, 5, 5, 5);\n+    let (.., c, d) = (5, 5, 5, 5);\n     let Bar{b: b, ..} = Bar{a: 5, b: 5, c: 5, d: 5};\n     match [5, 5, 5, 5] {\n         [..] => { }"}, {"sha": "d28ea94ec1a0dfc7f038926c419e423350cac6fe", "filename": "src/test/run-pass/issue-13027.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13027.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -12,8 +12,6 @@\n // Tests that match expression handles overlapped literal and range\n // properly in the presence of guard function.\n \n-#![feature(slice_patterns)]\n-\n fn val() -> usize { 1 }\n \n static CONST: usize = 1;"}, {"sha": "59267f79e26437d7f07cfde026daac7b4bbb5237", "filename": "src/test/run-pass/issue-15080.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15080.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![feature(slice_patterns)]\n \n fn main() {"}, {"sha": "2878f2795c5904e1f32f93bc4859ca8da9e6ac33", "filename": "src/test/run-pass/issue-15104.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-15104.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-15104.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15104.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![feature(slice_patterns)]\n \n fn main() {"}, {"sha": "bf272308fa9dfb50f332ee37262243723784f3ba", "filename": "src/test/run-pass/issue-16648.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-16648.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-16648.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16648.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(slice_patterns)]\n-\n fn main() {\n     let x: (isize, &[isize]) = (2, &[1, 2]);\n     assert_eq!(match x {"}, {"sha": "d3fe0903a1d6440c3711c45ea462169e74a82887", "filename": "src/test/run-pass/issue-17877.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17877.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #![feature(slice_patterns)]\n \n fn main() {"}, {"sha": "e97c8d9f4176cd6b2e85ff19713a234f02fe3c3c", "filename": "src/test/run-pass/issue-37598.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-37598.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-37598.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-37598.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(advanced_slice_patterns, slice_patterns)]\n+#![feature(slice_patterns)]\n \n fn check(list: &[u8]) {\n     match list {"}, {"sha": "dd6ccec973fc0926273db5822bd8946bb26417c3", "filename": "src/test/run-pass/issue-38002.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-38002.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-38002.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38002.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -10,8 +10,6 @@\n \n // Check that constant ADTs are translated OK, part k of N.\n \n-#![feature(slice_patterns)]\n-\n enum Bar {\n     C\n }"}, {"sha": "28aa6c731ec814ba2c023b51079a1f997dba86b3", "filename": "src/test/run-pass/issue-46855.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-46855.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-46855.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-46855.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -10,8 +10,6 @@\n \n // compile-flags: -Zmir-opt-level=1\n \n-#![feature(slice_patterns)]\n-\n use std::mem;\n \n #[derive(Copy, Clone)]"}, {"sha": "8d21594aa12ca560b80bd0abb263171b5088dd51", "filename": "src/test/run-pass/issue-7784.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fissue-7784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7784.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n use std::ops::Add;"}, {"sha": "7d03d9c2abe20fac2237989a2755e45066c78efc", "filename": "src/test/run-pass/match-vec-alternatives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {"}, {"sha": "6178f613b4b86a5ab555740489d9e664cf011262", "filename": "src/test/run-pass/rfc-2005-default-binding-mode/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2005-default-binding-mode%2Fslice.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n #![feature(match_default_bindings)]\n+#![feature(slice_patterns)]\n \n fn slice_pat() {\n     let sl: &[u8] = b\"foo\";"}, {"sha": "02bae5aa455158f6d83aa4a621b05ddc03371f2e", "filename": "src/test/run-pass/trailing-comma.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrailing-comma.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(advanced_slice_patterns,)]\n #![feature(slice_patterns)]\n \n fn f<T,>(_: T,) {}"}, {"sha": "7268536a51fad6ef90c9c847073c49c2a340427d", "filename": "src/test/run-pass/vec-matching-autoslice.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(slice_patterns)]\n-\n pub fn main() {\n     let x = [1, 2, 3];\n     match x {"}, {"sha": "060d152488a97713a1cceec8717dbb80a8b24f81", "filename": "src/test/run-pass/vec-matching-fixed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fixed.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n fn a() {"}, {"sha": "1a30f875580c201480aec5173002d74d381f0726", "filename": "src/test/run-pass/vec-matching-fold.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-fold.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n use std::fmt::Debug;"}, {"sha": "ace418f2160682485798e7fe1ab826f0f6166926", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n fn a() {"}, {"sha": "4f31405ead500355900bca2e41d5ca699139dd63", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n #![feature(slice_patterns)]\n \n struct Foo {"}, {"sha": "111968e9c9313a62be77f7a685ebc6639d89ea20", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(advanced_slice_patterns)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(slice_patterns)]"}, {"sha": "6673549e23903e7416f34a81c780bb72919252f8", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `vec[..]` because it is borrowed\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:21:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:20:13\n    |\n LL |         [box ref _a, _, _] => {\n    |              ------ borrow of `vec[..]` occurs here\n@@ -8,7 +8,7 @@ LL |             vec[0] = box 4; //~ ERROR cannot assign\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0506]: cannot assign to `vec[..]` because it is borrowed\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:33:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:32:13\n    |\n LL |         &mut [ref _b..] => {\n    |               ------ borrow of `vec[..]` occurs here\n@@ -17,7 +17,7 @@ LL |             vec[0] = box 4; //~ ERROR cannot assign\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:43:14\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:42:14\n    |\n LL |           &mut [_a, //~ ERROR cannot move out\n    |                ^-- hint: to prevent move, use `ref _a` or `ref mut _a`\n@@ -30,7 +30,7 @@ LL | |         ] => {\n    | |_________^ cannot move out of here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:56:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:55:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n@@ -39,7 +39,7 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             help: consider using a reference instead: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:64:14\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:63:14\n    |\n LL |           &mut [ //~ ERROR cannot move out\n    |  ______________^\n@@ -50,7 +50,7 @@ LL | |          _b] => {}\n    |            hint: to prevent move, use `ref _b` or `ref mut _b`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:69:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:68:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^\n@@ -59,7 +59,7 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             help: consider using a reference instead: `&vec[0]`\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:77:14\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:76:14\n    |\n LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n    |              ^--^^--^^--^\n@@ -70,7 +70,7 @@ LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n    |              cannot move out of here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:81:13\n+  --> $DIR/borrowck-vec-pattern-nesting.rs:80:13\n    |\n LL |     let a = vec[0]; //~ ERROR cannot move out\n    |             ^^^^^^"}, {"sha": "a90ccec9cf5e922eb3dc5ea4d29b86e093eaf562", "filename": "src/test/ui/error-codes/E0527.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ferror-codes%2FE0527.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ferror-codes%2FE0527.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0527.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n-\n fn main() {\n     let r = &[1, 2, 3, 4];\n     match r {"}, {"sha": "1e764c185877b1886dd339cfaea2b7b8396799c7", "filename": "src/test/ui/error-codes/E0527.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ferror-codes%2FE0527.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ferror-codes%2FE0527.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0527.stderr?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -1,5 +1,5 @@\n error[E0527]: pattern requires 2 elements but array has 4\n-  --> $DIR/E0527.rs:16:10\n+  --> $DIR/E0527.rs:14:10\n    |\n LL |         &[a, b] => {\n    |          ^^^^^^ expected 4 elements"}, {"sha": "2459054da89afc3e5210d3414e8312152b323cda", "filename": "src/test/ui/error-codes/E0529.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ferror-codes%2FE0529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ferror-codes%2FE0529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0529.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n-\n fn main() {\n     let r: f32 = 1.0;\n     match r {"}, {"sha": "b2e7ae23fb0ebbf3fdd2876d45d1be991bf8bf8d", "filename": "src/test/ui/error-codes/E0529.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ferror-codes%2FE0529.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ferror-codes%2FE0529.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0529.stderr?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -1,5 +1,5 @@\n error[E0529]: expected an array or slice, found `f32`\n-  --> $DIR/E0529.rs:16:9\n+  --> $DIR/E0529.rs:14:9\n    |\n LL |         [a, b] => {\n    |         ^^^^^^ pattern cannot match with input type `f32`"}, {"sha": "dc9b4e634ab723952797879d048cdca3ff91656c", "filename": "src/test/ui/feature-gate-advanced-slice-features.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a04b88d1941644df01fa5e31dd43e0f57c13d938/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04b88d1941644df01fa5e31dd43e0f57c13d938/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.rs?ref=a04b88d1941644df01fa5e31dd43e0f57c13d938", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// gate-test-advanced_slice_patterns\n-\n-#![feature(slice_patterns)]\n-\n-fn main() {\n-    let x = [ 1, 2, 3, 4, 5 ];\n-    match x {\n-        [ xs.., 4, 5 ] => {}    //~ ERROR multiple-element slice matches\n-        [ 1, xs.., 5 ] => {}    //~ ERROR multiple-element slice matches\n-        [ 1, 2, xs.. ] => {}    // OK without feature gate\n-    }\n-}"}, {"sha": "9d9e7554976181864d6cc08c112593460fd26349", "filename": "src/test/ui/feature-gate-advanced-slice-features.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a04b88d1941644df01fa5e31dd43e0f57c13d938/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a04b88d1941644df01fa5e31dd43e0f57c13d938/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-advanced-slice-features.stderr?ref=a04b88d1941644df01fa5e31dd43e0f57c13d938", "patch": "@@ -1,19 +0,0 @@\n-error[E0658]: multiple-element slice matches anywhere but at the end of a slice (e.g. `[0, ..xs, 0]`) are experimental (see issue #23121)\n-  --> $DIR/feature-gate-advanced-slice-features.rs:18:9\n-   |\n-LL |         [ xs.., 4, 5 ] => {}    //~ ERROR multiple-element slice matches\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(advanced_slice_patterns)] to the crate attributes to enable\n-\n-error[E0658]: multiple-element slice matches anywhere but at the end of a slice (e.g. `[0, ..xs, 0]`) are experimental (see issue #23121)\n-  --> $DIR/feature-gate-advanced-slice-features.rs:19:9\n-   |\n-LL |         [ 1, xs.., 5 ] => {}    //~ ERROR multiple-element slice matches\n-   |         ^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(advanced_slice_patterns)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "fd058f6517211ce7e86a94bbee64fd4bc299c2be", "filename": "src/test/ui/feature-gate-slice-patterns.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,11 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that slice pattern syntax is gated by `slice_patterns` feature gate\n+// Test that slice pattern syntax with `..` is gated by `slice_patterns` feature gate\n \n fn main() {\n     let x = [1, 2, 3, 4, 5];\n     match x {\n-        [1, 2, xs..] => {} //~ ERROR slice pattern syntax is experimental\n+        [1, 2, ..] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+        [1, .., 5] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+        [.., 4, 5] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+    }\n+\n+    let x = [ 1, 2, 3, 4, 5 ];\n+    match x {\n+        [ xs.., 4, 5 ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+        [ 1, xs.., 5 ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+        [ 1, 2, xs.. ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n     }\n }"}, {"sha": "d560dcd54eefbdb392c6bfa68ad06169ad5b745a", "filename": "src/test/ui/feature-gate-slice-patterns.stderr", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-slice-patterns.stderr?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -1,11 +1,51 @@\n-error[E0658]: slice pattern syntax is experimental (see issue #23121)\n-  --> $DIR/feature-gate-slice-patterns.rs:16:9\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+  --> $DIR/feature-gate-slice-patterns.rs:16:16\n    |\n-LL |         [1, 2, xs..] => {} //~ ERROR slice pattern syntax is experimental\n-   |         ^^^^^^^^^^^^\n+LL |         [1, 2, ..] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+   |                ^^\n    |\n    = help: add #![feature(slice_patterns)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+  --> $DIR/feature-gate-slice-patterns.rs:17:13\n+   |\n+LL |         [1, .., 5] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+   |             ^^\n+   |\n+   = help: add #![feature(slice_patterns)] to the crate attributes to enable\n+\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+  --> $DIR/feature-gate-slice-patterns.rs:18:10\n+   |\n+LL |         [.., 4, 5] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+   |          ^^\n+   |\n+   = help: add #![feature(slice_patterns)] to the crate attributes to enable\n+\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+  --> $DIR/feature-gate-slice-patterns.rs:23:11\n+   |\n+LL |         [ xs.., 4, 5 ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+   |           ^^\n+   |\n+   = help: add #![feature(slice_patterns)] to the crate attributes to enable\n+\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+  --> $DIR/feature-gate-slice-patterns.rs:24:14\n+   |\n+LL |         [ 1, xs.., 5 ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+   |              ^^\n+   |\n+   = help: add #![feature(slice_patterns)] to the crate attributes to enable\n+\n+error[E0658]: syntax for subslices in slice patterns is not yet stabilized (see issue #23121)\n+  --> $DIR/feature-gate-slice-patterns.rs:25:17\n+   |\n+LL |         [ 1, 2, xs.. ] => {} //~ ERROR syntax for subslices in slice patterns is not yet stabilized\n+   |                 ^^\n+   |\n+   = help: add #![feature(slice_patterns)] to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "8e613d4edba14570408c06476d59b9957cfa30cd", "filename": "src/test/ui/mismatched_types/issue-38371.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(slice_patterns)]\n-\n \n struct Foo {\n }"}, {"sha": "dd5da769075150436972126a69556474d0bc01ea", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-38371.rs:16:8\n+  --> $DIR/issue-38371.rs:14:8\n    |\n LL | fn foo(&foo: Foo) { //~ ERROR mismatched types\n    |        ^^^^ expected struct `Foo`, found reference\n@@ -9,7 +9,7 @@ LL | fn foo(&foo: Foo) { //~ ERROR mismatched types\n    = help: did you mean `foo: &Foo`?\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-38371.rs:30:9\n+  --> $DIR/issue-38371.rs:28:9\n    |\n LL | fn agh(&&bar: &u32) { //~ ERROR mismatched types\n    |         ^^^^ expected u32, found reference\n@@ -19,7 +19,7 @@ LL | fn agh(&&bar: &u32) { //~ ERROR mismatched types\n    = help: did you mean `bar: &u32`?\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-38371.rs:33:8\n+  --> $DIR/issue-38371.rs:31:8\n    |\n LL | fn bgh(&&bar: u32) { //~ ERROR mismatched types\n    |        ^^^^^ expected u32, found reference\n@@ -28,7 +28,7 @@ LL | fn bgh(&&bar: u32) { //~ ERROR mismatched types\n               found type `&_`\n \n error[E0529]: expected an array or slice, found `u32`\n-  --> $DIR/issue-38371.rs:36:9\n+  --> $DIR/issue-38371.rs:34:9\n    |\n LL | fn ugh(&[bar]: &u32) { //~ ERROR expected an array or slice\n    |         ^^^^^ pattern cannot match with input type `u32`"}, {"sha": "dd14a10a2bcecd1f5acc80d309c9ca77b8e87664", "filename": "src/test/ui/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive-pattern-witness.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n \n struct Foo {"}, {"sha": "e364e822ea8786a5d7d7ebcc7e1413711f621189", "filename": "src/test/ui/non-exhaustive-pattern-witness.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fnon-exhaustive-pattern-witness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fnon-exhaustive-pattern-witness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive-pattern-witness.stderr?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -1,41 +1,41 @@\n error[E0004]: non-exhaustive patterns: `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:20:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:19:11\n    |\n LL |     match (Foo { first: true, second: None }) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { first: false, second: Some([_, _, _, _]) }` not covered\n \n error[E0004]: non-exhaustive patterns: `Red` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:36:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:35:11\n    |\n LL |     match Color::Red {\n    |           ^^^^^^^^^^ pattern `Red` not covered\n \n error[E0004]: non-exhaustive patterns: `East`, `South` and `West` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:48:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:47:11\n    |\n LL |     match Direction::North {\n    |           ^^^^^^^^^^^^^^^^ patterns `East`, `South` and `West` not covered\n \n error[E0004]: non-exhaustive patterns: `Second`, `Third`, `Fourth` and 8 more not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:59:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:58:11\n    |\n LL |     match ExcessiveEnum::First {\n    |           ^^^^^^^^^^^^^^^^^^^^ patterns `Second`, `Third`, `Fourth` and 8 more not covered\n \n error[E0004]: non-exhaustive patterns: `CustomRGBA { a: true, .. }` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:67:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:66:11\n    |\n LL |     match Color::Red {\n    |           ^^^^^^^^^^ pattern `CustomRGBA { a: true, .. }` not covered\n \n error[E0004]: non-exhaustive patterns: `[Second(true), Second(false)]` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:83:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:82:11\n    |\n LL |     match *x {\n    |           ^^ pattern `[Second(true), Second(false)]` not covered\n \n error[E0004]: non-exhaustive patterns: `((), false)` not covered\n-  --> $DIR/non-exhaustive-pattern-witness.rs:96:11\n+  --> $DIR/non-exhaustive-pattern-witness.rs:95:11\n    |\n LL |     match ((), false) {\n    |           ^^^^^^^^^^^ pattern `((), false)` not covered"}, {"sha": "65578e76d6d696e0725438196a5f9cc7af616a8a", "filename": "src/test/ui/pat-slice-old-style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fpat-slice-old-style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Fpat-slice-old-style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpat-slice-old-style.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n-\n // NB: this test was introduced in #23121 and will have to change when default match binding modes\n // stabilizes.\n \n+#![feature(slice_patterns)]\n+\n fn slice_pat(x: &[u8]) {\n     // OLD!\n     match x {"}, {"sha": "20ef0624bf91b4102c29e4a61c207cdb9d120e37", "filename": "src/test/ui/rfc-2005-default-binding-mode/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c90189e1331cea3eac0ab0e8959f664cffba1ae/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fslice.rs?ref=7c90189e1331cea3eac0ab0e8959f664cffba1ae", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(slice_patterns)]\n #![feature(match_default_bindings)]\n+#![feature(slice_patterns)]\n \n pub fn main() {\n     let sl: &[u8] = b\"foo\";"}]}