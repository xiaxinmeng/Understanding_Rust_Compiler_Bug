{"sha": "9993a43e5c1b42ed42ae46749b1cdd8874db602f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OTNhNDNlNWMxYjQyZWQ0MmFlNDY3NDliMWNkZDg4NzRkYjYwMmY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-04-27T17:37:13Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-04-27T17:37:13Z"}, "message": "collections: Add trait RangeArgument\n\nRangeArgument is introduced as unstable under the\nfeature(collections_range)", "tree": {"sha": "b144bbe2c2bed093c6399eff9b000500a0a630c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b144bbe2c2bed093c6399eff9b000500a0a630c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9993a43e5c1b42ed42ae46749b1cdd8874db602f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9993a43e5c1b42ed42ae46749b1cdd8874db602f", "html_url": "https://github.com/rust-lang/rust/commit/9993a43e5c1b42ed42ae46749b1cdd8874db602f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9993a43e5c1b42ed42ae46749b1cdd8874db602f/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f191f924214aa1dcd342ada1d99775ccbb01ddd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f191f924214aa1dcd342ada1d99775ccbb01ddd7", "html_url": "https://github.com/rust-lang/rust/commit/f191f924214aa1dcd342ada1d99775ccbb01ddd7"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "992424858e10d839d70d8a674933ccc25fdb9ff8", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9993a43e5c1b42ed42ae46749b1cdd8874db602f/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9993a43e5c1b42ed42ae46749b1cdd8874db602f/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=9993a43e5c1b42ed42ae46749b1cdd8874db602f", "patch": "@@ -82,6 +82,7 @@ pub mod borrow;\n pub mod enum_set;\n pub mod fmt;\n pub mod linked_list;\n+pub mod range;\n pub mod slice;\n pub mod str;\n pub mod string;"}, {"sha": "6ab143998d299f5222057e8372b58a083ad916be", "filename": "src/libcollections/range.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9993a43e5c1b42ed42ae46749b1cdd8874db602f/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9993a43e5c1b42ed42ae46749b1cdd8874db602f/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=9993a43e5c1b42ed42ae46749b1cdd8874db602f", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![unstable(feature = \"collections_range\", reason = \"was just added\")]\n+\n+//! Range syntax.\n+\n+use core::option::Option::{self, None, Some};\n+use core::ops::{RangeFull, Range, RangeTo, RangeFrom};\n+\n+/// **RangeArgument** is implemented by Rust's built-in range types, produced\n+/// by range syntax like `..`, `a..`, `..b` or `c..d`.\n+pub trait RangeArgument<T> {\n+    /// Start index (inclusive)\n+    ///\n+    /// Return start value if present, else `None`.\n+    fn start(&self) -> Option<&T> { None }\n+\n+    /// End index (exclusive)\n+    ///\n+    /// Return end value if present, else `None`.\n+    fn end(&self) -> Option<&T> { None }\n+}\n+\n+\n+impl<T> RangeArgument<T> for RangeFull {}\n+\n+impl<T> RangeArgument<T> for RangeFrom<T> {\n+    fn start(&self) -> Option<&T> { Some(&self.start) }\n+}\n+\n+impl<T> RangeArgument<T> for RangeTo<T> {\n+    fn end(&self) -> Option<&T> { Some(&self.end) }\n+}\n+\n+impl<T> RangeArgument<T> for Range<T> {\n+    fn start(&self) -> Option<&T> { Some(&self.start) }\n+    fn end(&self) -> Option<&T> { Some(&self.end) }\n+}"}]}