{"sha": "a6734cd89030b352f7cfcd765e451af5f1961985", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NzM0Y2Q4OTAzMGIzNTJmN2NmY2Q3NjVlNDUxYWY1ZjE5NjE5ODU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-19T14:54:31Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-20T12:28:18Z"}, "message": "Fix unions", "tree": {"sha": "4359935d5a753c8a7a299b7ae798d19f03c31248", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4359935d5a753c8a7a299b7ae798d19f03c31248"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6734cd89030b352f7cfcd765e451af5f1961985", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAllJFOIACgkQpp+NIls6\n19nj4BAArIjTMXpbcaCUqVMiRuKlE4T+s7e5ULYPhCA/X3i/ucdrfUSpianZQyMI\n+IRtUo/E18g1RpRYk2JyWE66DQ7HelIDl46k9iJNFyBMePwCSHyTMBEkzjsFWjTo\n7agxemQ7F+9lyagDFz6Td59v0n+GWZswL0SGHspIBfaM6vfFhf+4wt+x8X9wXbQI\nr2BINYdEDlQS9/9yuF9yNK2dZuKetpMzCuPaGPS634FQL0T3pSTc4cOVCRdCWin/\n4un0PmweOZRfbnIrGvyCTzaUYuZqTDYbebGzQmn/O00j7itK1KEWsgRgBdmmmOYt\na3W8wAaf31vdARoCQ/0SQAPyNg/iEio3LdB+r97EgsvALVaiJvXUJAOSc7xKOs+d\n9+6dPuubqBFkDM/DJoYU+uw5jRmRIoZ3ZiC8AIJWPSiseyfDvd24FNiyAhLyElce\nTcu3wJS7+ycAq5UGY1g17Ubajx/dA2sAmoOhmH70Zx/96ec62aM7TSUrBQzDxI76\n0bY3F3IyerizsFR0xTRfW+h0l7ZOxeyof689B/orYxQlNWkeNQcOyLGOChksPCPQ\nQ5rnI2KLxN4P2Xuw4V7R9r1OkwXd7ftebxUz2aWYqr1aew78qO/ZM0mwS4fIdDg1\nMbERr+1FmQpOuPm69F0IfqzJBxmRKAhp8XM2TvUBTh9va9fvuQU=\n=X56w\n-----END PGP SIGNATURE-----", "payload": "tree 4359935d5a753c8a7a299b7ae798d19f03c31248\nparent 75fddee700c67ccef35e9496451fbe15e29084d8\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1497884071 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1497961698 +0200\n\nFix unions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6734cd89030b352f7cfcd765e451af5f1961985", "html_url": "https://github.com/rust-lang/rust/commit/a6734cd89030b352f7cfcd765e451af5f1961985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6734cd89030b352f7cfcd765e451af5f1961985/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75fddee700c67ccef35e9496451fbe15e29084d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/75fddee700c67ccef35e9496451fbe15e29084d8", "html_url": "https://github.com/rust-lang/rust/commit/75fddee700c67ccef35e9496451fbe15e29084d8"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "f344a4e3b2d1a070e3e0e6978d8d75e082d35ba1", "filename": "src/lvalue.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a6734cd89030b352f7cfcd765e451af5f1961985/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6734cd89030b352f7cfcd765e451af5f1961985/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=a6734cd89030b352f7cfcd765e451af5f1961985", "patch": "@@ -182,7 +182,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         field_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, Lvalue<'tcx>> {\n         let base_layout = self.type_layout(base_ty)?;\n-\n         use rustc::ty::layout::Layout::*;\n         let (offset, packed) = match *base_layout {\n             Univariant { ref variant, .. } => {\n@@ -255,8 +254,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n                 },\n                 Value::ByVal(_) => {\n-                    assert_eq!(field_index, 0, \"ByVal can only have 1 non zst field with offset 0\");\n-                    return Ok(base);\n+                    if self.get_field_count(base_ty)? == 1 {\n+                        assert_eq!(field_index, 0, \"ByVal can only have 1 non zst field with offset 0\");\n+                        return Ok(base);\n+                    }\n+                    // this branch is taken when a union creates a large ByVal which is then\n+                    // accessed as a struct with multiple small fields\n+                    (PrimVal::Ptr(self.force_allocation(base)?.to_ptr()?), LvalueExtra::None)\n                 },\n                 Value::ByValPair(_, _) => {\n                     let field_count = self.get_field_count(base_ty)?;"}, {"sha": "df2ff6e51a593a64c98323bc6ea74c7719abfce5", "filename": "tests/run-pass/union-overwrite.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a6734cd89030b352f7cfcd765e451af5f1961985/tests%2Frun-pass%2Funion-overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6734cd89030b352f7cfcd765e451af5f1961985/tests%2Frun-pass%2Funion-overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funion-overwrite.rs?ref=a6734cd89030b352f7cfcd765e451af5f1961985", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+#![allow(unions_with_drop_fields)]\n+\n+#[repr(C)]\n+struct Pair<T, U>(T, U);\n+#[repr(C)]\n+struct Triple<T>(T, T, T);\n+\n+#[repr(C)]\n+union U<A, B> {\n+    a: Pair<A, A>,\n+    b: B,\n+}\n+\n+#[repr(C)]\n+union W<A, B> {\n+    a: A,\n+    b: B,\n+}\n+\n+#[cfg(target_endian = \"little\")]\n+unsafe fn check() {\n+    let mut u = U::<u8, u16> { b: 0xDE_DE };\n+    u.a.0 = 0xBE;\n+    assert_eq!(u.b, 0xDE_BE);\n+\n+    let mut u = U::<u16, u32> { b: 0xDEAD_DEAD };\n+    u.a.0 = 0xBEEF;\n+    assert_eq!(u.b, 0xDEAD_BEEF);\n+\n+    let mut u = U::<u32, u64> { b: 0xDEADBEEF_DEADBEEF };\n+    u.a.0 = 0xBAADF00D;\n+    assert_eq!(u.b, 0xDEADBEEF_BAADF00D);\n+\n+    let mut w = W::<Pair<Triple<u8>, u8>, u32> { b: 0xDEAD_DEAD };\n+    w.a.0 = Triple(0, 0, 0);\n+    assert_eq!(w.b, 0xDE00_0000);\n+\n+    let mut w = W::<Pair<u8, Triple<u8>>, u32> { b: 0xDEAD_DEAD };\n+    w.a.1 = Triple(0, 0, 0);\n+    assert_eq!(w.b, 0x0000_00AD);\n+}\n+\n+#[cfg(target_endian = \"big\")]\n+unsafe fn check() {\n+    let mut u = U::<u8, u16> { b: 0xDE_DE };\n+    u.a.0 = 0xBE;\n+    assert_eq!(u.b, 0xBE_DE);\n+\n+    let mut u = U::<u16, u32> { b: 0xDEAD_DEAD };\n+    u.a.0 = 0xBEEF;\n+    assert_eq!(u.b, 0xBEEF_DEAD);\n+\n+    let mut u = U::<u32, u64> { b: 0xDEADBEEF_DEADBEEF };\n+    u.a.0 = 0xBAADF00D;\n+    assert_eq!(u.b, 0xBAADF00D_DEADBEEF);\n+\n+    let mut w = W::<Pair<Triple<u8>, u8>, u32> { b: 0xDEAD_DEAD };\n+    w.a.0 = Triple(0, 0, 0);\n+    assert_eq!(w.b, 0x0000_00AD);\n+\n+    let mut w = W::<Pair<u8, Triple<u8>>, u32> { b: 0xDEAD_DEAD };\n+    w.a.1 = Triple(0, 0, 0);\n+    assert_eq!(w.b, 0xDE00_0000);\n+}\n+\n+fn main() {\n+    unsafe {\n+        check();\n+    }\n+}"}]}