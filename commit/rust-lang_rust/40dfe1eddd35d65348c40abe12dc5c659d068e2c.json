{"sha": "40dfe1eddd35d65348c40abe12dc5c659d068e2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZGZlMWVkZGQzNWQ2NTM0OGM0MGFiZTEyZGM1YzY1OWQwNjhlMmM=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-15T23:06:30Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-15T23:53:03Z"}, "message": "Ignore doctest for capture analysis examples", "tree": {"sha": "52fbff7b1a6975eb1a92ddb281c9f168c1a51f66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52fbff7b1a6975eb1a92ddb281c9f168c1a51f66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40dfe1eddd35d65348c40abe12dc5c659d068e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40dfe1eddd35d65348c40abe12dc5c659d068e2c", "html_url": "https://github.com/rust-lang/rust/commit/40dfe1eddd35d65348c40abe12dc5c659d068e2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40dfe1eddd35d65348c40abe12dc5c659d068e2c/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8c5e5d8b4961a26f88b320f719249a9db8225e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8c5e5d8b4961a26f88b320f719249a9db8225e", "html_url": "https://github.com/rust-lang/rust/commit/bb8c5e5d8b4961a26f88b320f719249a9db8225e"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "8f31c9b0fc653343ea7343045afba7a7c9ff0e16", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40dfe1eddd35d65348c40abe12dc5c659d068e2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dfe1eddd35d65348c40abe12dc5c659d068e2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=40dfe1eddd35d65348c40abe12dc5c659d068e2c", "patch": "@@ -797,12 +797,12 @@ pub struct CaptureInfo<'tcx> {\n     /// None. In such case we fallback on uvpars_mentioned for span.\n     ///\n     /// Eg:\n-    /// ```rust\n-    /// let x = ...;\n+    /// ```rust,no_run\n+    /// let x = 5;\n     ///\n     /// let c = || {\n     ///     let _ = x\n-    /// }\n+    /// };\n     /// ```\n     ///\n     /// In this example, if `capture_disjoint_fields` is **not** set, then x will be captured,"}, {"sha": "019fa78fb1e0edb8f1c0df7fa95c541ae25b7d15", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/40dfe1eddd35d65348c40abe12dc5c659d068e2c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dfe1eddd35d65348c40abe12dc5c659d068e2c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=40dfe1eddd35d65348c40abe12dc5c659d068e2c", "patch": "@@ -333,7 +333,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// the required captured paths.\n     ///\n     /// Eg:\n-    /// ```rust\n+    /// ```rust,no_run\n     /// struct Point { x: i32, y: i32 }\n     ///\n     /// let s: String;  // hir_id_s\n@@ -575,7 +575,9 @@ struct InferBorrowKind<'a, 'tcx> {\n     /// Consider closure where s.str1 is captured via an ImmutableBorrow and\n     /// s.str2 via a MutableBorrow\n     ///\n-    /// ```rust\n+    /// ```rust,no_run\n+    /// struct SomeStruct { str1: String, str2: String }\n+    ///\n     /// // Assume that the HirId for the variable definition is `V1`\n     /// let mut s = SomeStruct { str1: format!(\"s1\"), str2: format!(\"s2\") }\n     ///\n@@ -584,7 +586,7 @@ struct InferBorrowKind<'a, 'tcx> {\n     ///     println!(\"Updating SomeStruct with str1=\", s.str1);\n     ///     // Assume that the HirId for the expression `*s.str2` is `E2`\n     ///     s.str2 = new_s2;\n-    /// }\n+    /// };\n     /// ```\n     ///\n     /// For closure `fix_s`, (at a high level) the map contains\n@@ -931,7 +933,8 @@ fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> Symbol {\n /// `determine_capture_info(existing_info, current_info)`. This works out because the\n /// expressions that occur earlier in the closure body than the current expression are processed before.\n /// Consider the following example\n-/// ```rust\n+/// ```rust,no_run\n+/// struct Point { x: i32, y: i32 }\n /// let mut p: Point { x: 10, y: 10 };\n ///\n /// let c = || {\n@@ -942,7 +945,7 @@ fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> Symbol {\n ///     // ...\n ///     p.x += 10; // E2\n /// // ^ E2 ^\n-/// }\n+/// };\n /// ```\n /// `CaptureKind` associated with both `E1` and `E2` will be ByRef(MutBorrow),\n /// and both have an expression associated, however for diagnostics we prefer reporting"}, {"sha": "1b51d5e0182fde51426de0751acd373488cacdd8", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40dfe1eddd35d65348c40abe12dc5c659d068e2c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dfe1eddd35d65348c40abe12dc5c659d068e2c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=40dfe1eddd35d65348c40abe12dc5c659d068e2c", "patch": "@@ -611,7 +611,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     /// In the following example the closures `c` only captures `p.x`` even though `incr`\n     /// is a capture of the nested closure\n     ///\n-    /// ```rust\n+    /// ```rust,ignore(cannot-test-this-because-pseduo-code)\n     /// let p = ..;\n     /// let c = || {\n     ///    let incr = 10;"}]}