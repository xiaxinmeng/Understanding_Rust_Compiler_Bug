{"sha": "69f27c856b3e18e54b9a48412a918c91fe8b08e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZjI3Yzg1NmIzZTE4ZTU0YjlhNDg0MTJhOTE4YzkxZmU4YjA4ZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-25T21:52:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-25T21:52:52Z"}, "message": "Auto merge of #28665 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #28319, #28588, #28637, #28652, #28654, #28655\n- Failed merges: #28621", "tree": {"sha": "543f2d96e0abcde4cfc7fa985ef021b9c6ab9af7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/543f2d96e0abcde4cfc7fa985ef021b9c6ab9af7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69f27c856b3e18e54b9a48412a918c91fe8b08e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69f27c856b3e18e54b9a48412a918c91fe8b08e7", "html_url": "https://github.com/rust-lang/rust/commit/69f27c856b3e18e54b9a48412a918c91fe8b08e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69f27c856b3e18e54b9a48412a918c91fe8b08e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7a73881e916d08c3edd97369c127e451b4717c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a73881e916d08c3edd97369c127e451b4717c8", "html_url": "https://github.com/rust-lang/rust/commit/e7a73881e916d08c3edd97369c127e451b4717c8"}, {"sha": "f4dc6c785c243b7de47d2e40caafe401f7b28aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4dc6c785c243b7de47d2e40caafe401f7b28aad", "html_url": "https://github.com/rust-lang/rust/commit/f4dc6c785c243b7de47d2e40caafe401f7b28aad"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "983af4a0efe7fb9613a9def0feafc4b1b9f95a58", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=69f27c856b3e18e54b9a48412a918c91fe8b08e7", "patch": "@@ -411,8 +411,9 @@ fn factory() -> &(Fn(i32) -> i32) {\n ```\n \n Right. Because we have a reference, we need to give it a lifetime. But\n-our `factory()` function takes no arguments, so elision doesn\u2019t kick in\n-here. What lifetime can we choose? `'static`:\n+our `factory()` function takes no arguments, so\n+[elision](lifetimes.html#lifetime-elision) doesn\u2019t kick in here. Then what\n+choices do we have? Try `'static`:\n \n ```rust,ignore\n fn factory() -> &'static (Fn(i32) -> i32) {\n@@ -432,7 +433,7 @@ But we get another error:\n ```text\n error: mismatched types:\n  expected `&'static core::ops::Fn(i32) -> i32`,\n-    found `[closure <anon>:7:9: 7:20]`\n+    found `[closure@<anon>:7:9: 7:20]`\n (expected &-ptr,\n     found closure) [E0308]\n          |x| x + num\n@@ -441,21 +442,17 @@ error: mismatched types:\n ```\n \n This error is letting us know that we don\u2019t have a `&'static Fn(i32) -> i32`,\n-we have a `[closure <anon>:7:9: 7:20]`. Wait, what?\n+we have a `[closure@<anon>:7:9: 7:20]`. Wait, what?\n \n Because each closure generates its own environment `struct` and implementation\n of `Fn` and friends, these types are anonymous. They exist just solely for\n-this closure. So Rust shows them as `closure <anon>`, rather than some\n+this closure. So Rust shows them as `closure@<anon>`, rather than some\n autogenerated name.\n \n-But why doesn\u2019t our closure implement `&'static Fn`? Well, as we discussed before,\n-closures borrow their environment. And in this case, our environment is based\n-on a stack-allocated `5`, the `num` variable binding. So the borrow has a lifetime\n-of the stack frame. So if we returned this closure, the function call would be\n-over, the stack frame would go away, and our closure is capturing an environment\n-of garbage memory!\n-\n-So what to do? This _almost_ works:\n+The error also points out that the return type is expected to be a reference,\n+but what we are trying to return is not. Further, we cannot directly assign a\n+`'static` lifetime to an object. So we'll take a different approach and return\n+a \"trait object\" by `Box`ing up the `Fn`. This _almost_ works:\n \n ```rust,ignore\n fn factory() -> Box<Fn(i32) -> i32> {\n@@ -471,7 +468,7 @@ assert_eq!(6, answer);\n # }\n ```\n \n-We use a trait object, by `Box`ing up the `Fn`. There\u2019s just one last problem:\n+There\u2019s just one last problem:\n \n ```text\n error: closure may outlive the current function, but it borrows `num`,\n@@ -480,8 +477,12 @@ Box::new(|x| x + num)\n          ^~~~~~~~~~~\n ```\n \n-We still have a reference to the parent stack frame. With one last fix, we can\n-make this work:\n+Well, as we discussed before, closures borrow their environment. And in this\n+case, our environment is based on a stack-allocated `5`, the `num` variable\n+binding. So the borrow has a lifetime of the stack frame. So if we returned\n+this closure, the function call would be over, the stack frame would go away,\n+and our closure is capturing an environment of garbage memory! With one last\n+fix, we can make this work:\n \n ```rust\n fn factory() -> Box<Fn(i32) -> i32> {"}, {"sha": "fb2fc83e0626124ee4ccda190a12812c6f2817ad", "filename": "src/doc/trpl/lifetimes.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Fdoc%2Ftrpl%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Fdoc%2Ftrpl%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Flifetimes.md?ref=69f27c856b3e18e54b9a48412a918c91fe8b08e7", "patch": "@@ -349,9 +349,9 @@ fn frob<'a, 'b>(s: &'a str, t: &'b str) -> &str; // Expanded: Output lifetime is\n fn get_mut(&mut self) -> &mut T; // elided\n fn get_mut<'a>(&'a mut self) -> &'a mut T; // expanded\n \n-fn args<T:ToCStr>(&mut self, args: &[T]) -> &mut Command // elided\n-fn args<'a, 'b, T:ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command // expanded\n+fn args<T:ToCStr>(&mut self, args: &[T]) -> &mut Command; // elided\n+fn args<'a, 'b, T:ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command; // expanded\n \n fn new(buf: &mut [u8]) -> BufWriter; // elided\n-fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a> // expanded\n+fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>; // expanded\n ```"}, {"sha": "193b8d6d620de46dcd17c85e5bc0d80e81fb5acf", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=69f27c856b3e18e54b9a48412a918c91fe8b08e7", "patch": "@@ -434,6 +434,11 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// While this does call the argument's implementation of `Drop`, it will not\n /// release any borrows, as borrows are based on lexical scope.\n ///\n+/// This effectively does nothing for\n+/// [types which implement `Copy`](../../book/ownership.html#copy-types),\n+/// e.g. integers. Such values are copied and _then_ moved into the function,\n+/// so the value persists after this function call.\n+///\n /// # Examples\n ///\n /// Basic usage:\n@@ -486,6 +491,21 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// let borrow = x.borrow();\n /// println!(\"{}\", *borrow);\n /// ```\n+///\n+/// Integers and other types implementing `Copy` are unaffected by `drop()`\n+///\n+/// ```\n+/// #[derive(Copy, Clone)]\n+/// struct Foo(u8);\n+///\n+/// let x = 1;\n+/// let y = Foo(2);\n+/// drop(x); // a copy of `x` is moved and dropped\n+/// drop(y); // a copy of `y` is moved and dropped\n+///\n+/// println!(\"x: {}, y: {}\", x, y.0); // still available\n+/// ```\n+///\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn drop<T>(_x: T) { }"}, {"sha": "a4ccc975d56bc871f41ebc77a35a852644177034", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=69f27c856b3e18e54b9a48412a918c91fe8b08e7", "patch": "@@ -1410,15 +1410,15 @@ impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n // Free functions\n //\n \n-/// Converts a pointer to A into a slice of length 1 (without copying).\n+/// Converts a reference to A into a slice of length 1 (without copying).\n #[unstable(feature = \"ref_slice\", issue = \"27774\")]\n pub fn ref_slice<A>(s: &A) -> &[A] {\n     unsafe {\n         from_raw_parts(s, 1)\n     }\n }\n \n-/// Converts a pointer to A into a slice of length 1 (without copying).\n+/// Converts a reference to A into a slice of length 1 (without copying).\n #[unstable(feature = \"ref_slice\", issue = \"27774\")]\n pub fn mut_ref_slice<A>(s: &mut A) -> &mut [A] {\n     unsafe {"}, {"sha": "456e89d472126da2f952a4fefb3456e667ee1f90", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=69f27c856b3e18e54b9a48412a918c91fe8b08e7", "patch": "@@ -115,8 +115,8 @@ impl Utf8Error {\n     /// Returns the index in the given string up to which valid UTF-8 was\n     /// verified.\n     ///\n-    /// Starting at the index provided, but not necessarily at it precisely, an\n-    /// invalid UTF-8 encoding sequence was found.\n+    /// It is the maximum index such that `from_utf8(input[..index])`\n+    /// would return `Some(_)`.\n     #[unstable(feature = \"utf8_error\", reason = \"method just added\",\n                issue = \"27734\")]\n     pub fn valid_up_to(&self) -> usize { self.valid_up_to }"}, {"sha": "a88ddb997f61d9aec982b5f35dd5791e7768e64e", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69f27c856b3e18e54b9a48412a918c91fe8b08e7/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=69f27c856b3e18e54b9a48412a918c91fe8b08e7", "patch": "@@ -98,7 +98,7 @@ macro_rules! print {\n     ($($arg:tt)*) => ($crate::io::_print(format_args!($($arg)*)));\n }\n \n-/// Macro for printing to the standard output.\n+/// Macro for printing to the standard output, with a newline.\n ///\n /// Use the `format!` syntax to write data to the standard output.\n /// See `std::fmt` for more information."}]}