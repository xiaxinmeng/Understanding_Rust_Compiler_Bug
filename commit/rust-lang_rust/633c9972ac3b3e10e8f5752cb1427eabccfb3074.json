{"sha": "633c9972ac3b3e10e8f5752cb1427eabccfb3074", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzM2M5OTcyYWMzYjNlMTBlOGY1NzUyY2IxNDI3ZWFiY2NmYjMwNzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-09T07:25:18Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:38Z"}, "message": "Adjust 'ast::PatKind::{TupleStruct,Tuple,Slice}'.", "tree": {"sha": "9e37e4482cc4347d9302066205f01a6585d87ffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e37e4482cc4347d9302066205f01a6585d87ffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/633c9972ac3b3e10e8f5752cb1427eabccfb3074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/633c9972ac3b3e10e8f5752cb1427eabccfb3074", "html_url": "https://github.com/rust-lang/rust/commit/633c9972ac3b3e10e8f5752cb1427eabccfb3074", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/633c9972ac3b3e10e8f5752cb1427eabccfb3074/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff77ef2d704658a90493dc8210f52f88697ee326", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff77ef2d704658a90493dc8210f52f88697ee326", "html_url": "https://github.com/rust-lang/rust/commit/ff77ef2d704658a90493dc8210f52f88697ee326"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "a49b6f7e2a6311e86dc375db5a824ef64356c073", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/633c9972ac3b3e10e8f5752cb1427eabccfb3074/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633c9972ac3b3e10e8f5752cb1427eabccfb3074/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=633c9972ac3b3e10e8f5752cb1427eabccfb3074", "patch": "@@ -559,18 +559,13 @@ impl Pat {\n             return false;\n         }\n \n-        match self.node {\n-            PatKind::Ident(_, _, Some(ref p)) => p.walk(it),\n-            PatKind::Struct(_, ref fields, _) => fields.iter().all(|field| field.node.pat.walk(it)),\n-            PatKind::TupleStruct(_, ref s, _) | PatKind::Tuple(ref s, _) => {\n+        match &self.node {\n+            PatKind::Ident(_, _, Some(p)) => p.walk(it),\n+            PatKind::Struct(_, fields, _) => fields.iter().all(|field| field.node.pat.walk(it)),\n+            PatKind::TupleStruct(_, s) | PatKind::Tuple(s) | PatKind::Slice(s) => {\n                 s.iter().all(|p| p.walk(it))\n             }\n-            PatKind::Box(ref s) | PatKind::Ref(ref s, _) | PatKind::Paren(ref s) => s.walk(it),\n-            PatKind::Slice(ref before, ref slice, ref after) => {\n-                before.iter().all(|p| p.walk(it))\n-                    && slice.iter().all(|p| p.walk(it))\n-                    && after.iter().all(|p| p.walk(it))\n-            }\n+            PatKind::Box(s) | PatKind::Ref(s, _) | PatKind::Paren(s) => s.walk(it),\n             PatKind::Wild\n             | PatKind::Rest\n             | PatKind::Lit(_)\n@@ -639,9 +634,7 @@ pub enum PatKind {\n     Struct(Path, Vec<Spanned<FieldPat>>, /* recovered */ bool),\n \n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n-    /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n-    /// `0 <= position <= subpats.len()`.\n-    TupleStruct(Path, Vec<P<Pat>>, Option<usize>),\n+    TupleStruct(Path, Vec<P<Pat>>),\n \n     /// A possibly qualified path pattern.\n     /// Unqualified path patterns `A::B::C` can legally refer to variants, structs, constants\n@@ -650,9 +643,7 @@ pub enum PatKind {\n     Path(Option<QSelf>, Path),\n \n     /// A tuple pattern (`(a, b)`).\n-    /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n-    /// `0 <= position <= subpats.len()`.\n-    Tuple(Vec<P<Pat>>, Option<usize>),\n+    Tuple(Vec<P<Pat>>),\n \n     /// A `box` pattern.\n     Box(P<Pat>),\n@@ -666,9 +657,8 @@ pub enum PatKind {\n     /// A range pattern (e.g., `1...2`, `1..=2` or `1..2`).\n     Range(P<Expr>, P<Expr>, Spanned<RangeEnd>),\n \n-    /// `[a, b, ..i, y, z]` is represented as:\n-    ///     `PatKind::Slice(box [a, b], Some(i), box [y, z])`\n-    Slice(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n+    /// A slice pattern `[a, b, c]`.\n+    Slice(Vec<P<Pat>>),\n \n     /// A rest pattern `..`.\n     ///"}, {"sha": "528b27d6153df2f2e8c655e046f8e937b55f73f6", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/633c9972ac3b3e10e8f5752cb1427eabccfb3074/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633c9972ac3b3e10e8f5752cb1427eabccfb3074/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=633c9972ac3b3e10e8f5752cb1427eabccfb3074", "patch": "@@ -840,14 +840,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n     fn pat_tuple_struct(&self, span: Span, path: ast::Path,\n                         subpats: Vec<P<ast::Pat>>) -> P<ast::Pat> {\n-        self.pat(span, PatKind::TupleStruct(path, subpats, None))\n+        self.pat(span, PatKind::TupleStruct(path, subpats))\n     }\n     fn pat_struct(&self, span: Span, path: ast::Path,\n                   field_pats: Vec<Spanned<ast::FieldPat>>) -> P<ast::Pat> {\n         self.pat(span, PatKind::Struct(path, field_pats, false))\n     }\n     fn pat_tuple(&self, span: Span, pats: Vec<P<ast::Pat>>) -> P<ast::Pat> {\n-        self.pat(span, PatKind::Tuple(pats, None))\n+        self.pat(span, PatKind::Tuple(pats))\n     }\n \n     fn pat_some(&self, span: Span, pat: P<ast::Pat>) -> P<ast::Pat> {"}, {"sha": "86525406718b6993ea4acb47dcfbade5dcfeb6bc", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/633c9972ac3b3e10e8f5752cb1427eabccfb3074/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633c9972ac3b3e10e8f5752cb1427eabccfb3074/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=633c9972ac3b3e10e8f5752cb1427eabccfb3074", "patch": "@@ -1026,9 +1026,9 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n             visit_opt(sub, |sub| vis.visit_pat(sub));\n         }\n         PatKind::Lit(e) => vis.visit_expr(e),\n-        PatKind::TupleStruct(path, pats, _ddpos) => {\n+        PatKind::TupleStruct(path, elems) => {\n             vis.visit_path(path);\n-            visit_vec(pats, |pat| vis.visit_pat(pat));\n+            visit_vec(elems, |elem| vis.visit_pat(elem));\n         }\n         PatKind::Path(qself, path) => {\n             vis.visit_qself(qself);\n@@ -1043,19 +1043,15 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n                 vis.visit_span(span);\n             };\n         }\n-        PatKind::Tuple(elts, _ddpos) => visit_vec(elts, |elt| vis.visit_pat(elt)),\n+        PatKind::Tuple(elems) => visit_vec(elems, |elem| vis.visit_pat(elem)),\n         PatKind::Box(inner) => vis.visit_pat(inner),\n         PatKind::Ref(inner, _mutbl) => vis.visit_pat(inner),\n         PatKind::Range(e1, e2, Spanned { span: _, node: _ }) => {\n             vis.visit_expr(e1);\n             vis.visit_expr(e2);\n             vis.visit_span(span);\n         }\n-        PatKind::Slice(before, slice, after) => {\n-            visit_vec(before, |pat| vis.visit_pat(pat));\n-            visit_opt(slice, |slice| vis.visit_pat(slice));\n-            visit_vec(after, |pat| vis.visit_pat(pat));\n-        }\n+        PatKind::Slice(elems) => visit_vec(elems, |elem| vis.visit_pat(elem)),\n         PatKind::Paren(inner) => vis.visit_pat(inner),\n         PatKind::Mac(mac) => vis.visit_mac(mac),\n     }"}, {"sha": "ff6440fb9dceb659a2077617e6d25b8e45ec586c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/633c9972ac3b3e10e8f5752cb1427eabccfb3074/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633c9972ac3b3e10e8f5752cb1427eabccfb3074/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=633c9972ac3b3e10e8f5752cb1427eabccfb3074", "patch": "@@ -428,9 +428,9 @@ pub fn walk_assoc_ty_constraint<'a, V: Visitor<'a>>(visitor: &mut V,\n \n pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n     match pattern.node {\n-        PatKind::TupleStruct(ref path, ref children, _) => {\n+        PatKind::TupleStruct(ref path, ref elems) => {\n             visitor.visit_path(path, pattern.id);\n-            walk_list!(visitor, visit_pat, children);\n+            walk_list!(visitor, visit_pat, elems);\n         }\n         PatKind::Path(ref opt_qself, ref path) => {\n             if let Some(ref qself) = *opt_qself {\n@@ -446,8 +446,8 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n                 visitor.visit_pat(&field.node.pat)\n             }\n         }\n-        PatKind::Tuple(ref tuple_elements, _) => {\n-            walk_list!(visitor, visit_pat, tuple_elements);\n+        PatKind::Tuple(ref elems) => {\n+            walk_list!(visitor, visit_pat, elems);\n         }\n         PatKind::Box(ref subpattern) |\n         PatKind::Ref(ref subpattern, _) |\n@@ -464,10 +464,8 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n             visitor.visit_expr(upper_bound);\n         }\n         PatKind::Wild | PatKind::Rest => {},\n-        PatKind::Slice(ref prepatterns, ref slice_pattern, ref postpatterns) => {\n-            walk_list!(visitor, visit_pat, prepatterns);\n-            walk_list!(visitor, visit_pat, slice_pattern);\n-            walk_list!(visitor, visit_pat, postpatterns);\n+        PatKind::Slice(ref elems) => {\n+            walk_list!(visitor, visit_pat, elems);\n         }\n         PatKind::Mac(ref mac) => visitor.visit_mac(mac),\n     }"}]}