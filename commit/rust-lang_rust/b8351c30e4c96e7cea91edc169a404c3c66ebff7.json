{"sha": "b8351c30e4c96e7cea91edc169a404c3c66ebff7", "node_id": "C_kwDOAAsO6NoAKGI4MzUxYzMwZTRjOTZlN2NlYTkxZWRjMTY5YTQwNGMzYzY2ZWJmZjc", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-27T00:32:54Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-30T20:52:58Z"}, "message": "Avoid unnecessary matches by changing `Clean` impl", "tree": {"sha": "6a7a63fd55f134a4c41474b0f35925959f9ee31a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a7a63fd55f134a4c41474b0f35925959f9ee31a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8351c30e4c96e7cea91edc169a404c3c66ebff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8351c30e4c96e7cea91edc169a404c3c66ebff7", "html_url": "https://github.com/rust-lang/rust/commit/b8351c30e4c96e7cea91edc169a404c3c66ebff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8351c30e4c96e7cea91edc169a404c3c66ebff7/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d3b7201e239c9966d43c0eaf1a4b636b0e06a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d3b7201e239c9966d43c0eaf1a4b636b0e06a8", "html_url": "https://github.com/rust-lang/rust/commit/91d3b7201e239c9966d43c0eaf1a4b636b0e06a8"}], "stats": {"total": 23, "additions": 7, "deletions": 16}, "files": [{"sha": "cbc010698c7d4fac1f2d7b7297fde2f155fc0dcd", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8351c30e4c96e7cea91edc169a404c3c66ebff7/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8351c30e4c96e7cea91edc169a404c3c66ebff7/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=b8351c30e4c96e7cea91edc169a404c3c66ebff7", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 span: Span::dummy(),\n                 unsafety: hir::Unsafety::Normal,\n                 generics: new_generics,\n-                trait_: Some(trait_ref.clean(self.cx).get_trait_path().unwrap()),\n+                trait_: Some(trait_ref.clean(self.cx)),\n                 for_: ty.clean(self.cx),\n                 items: Vec::new(),\n                 negative_polarity,"}, {"sha": "340d9f311b15095435fcb958122b179f3efc1430", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8351c30e4c96e7cea91edc169a404c3c66ebff7/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8351c30e4c96e7cea91edc169a404c3c66ebff7/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=b8351c30e4c96e7cea91edc169a404c3c66ebff7", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .clean(self.cx),\n                         // FIXME(eddyb) compute both `trait_` and `for_` from\n                         // the post-inference `trait_ref`, as it's more accurate.\n-                        trait_: Some(trait_ref.clean(self.cx).get_trait_path().unwrap()),\n+                        trait_: Some(trait_ref.clean(self.cx)),\n                         for_: ty.clean(self.cx),\n                         items: self\n                             .cx"}, {"sha": "d1ee257fb32846bc513af74ed30ad8d520b55dc6", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8351c30e4c96e7cea91edc169a404c3c66ebff7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8351c30e4c96e7cea91edc169a404c3c66ebff7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b8351c30e4c96e7cea91edc169a404c3c66ebff7", "patch": "@@ -446,10 +446,7 @@ crate fn build_impl(\n         ),\n     };\n     let polarity = tcx.impl_polarity(did);\n-    let trait_ = associated_trait.clean(cx).map(|bound| match bound {\n-        clean::GenericBound::TraitBound(polyt, _) => polyt.trait_,\n-        clean::GenericBound::Outlives(..) => unreachable!(),\n-    });\n+    let trait_ = associated_trait.clean(cx);\n     if trait_.def_id() == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }"}, {"sha": "3c10fadeff36863df940a468b218f24aeb4e0822", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b8351c30e4c96e7cea91edc169a404c3c66ebff7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8351c30e4c96e7cea91edc169a404c3c66ebff7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b8351c30e4c96e7cea91edc169a404c3c66ebff7", "patch": "@@ -172,12 +172,9 @@ impl Clean<Path> for (ty::TraitRef<'_>, &[TypeBinding]) {\n     }\n }\n \n-impl<'tcx> Clean<GenericBound> for ty::TraitRef<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> GenericBound {\n-        GenericBound::TraitBound(\n-            PolyTrait { trait_: (*self, &[][..]).clean(cx), generic_params: vec![] },\n-            hir::TraitBoundModifier::None,\n-        )\n+impl Clean<Path> for ty::TraitRef<'tcx> {\n+    fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n+        (*self, &[][..]).clean(cx)\n     }\n }\n \n@@ -384,10 +381,7 @@ impl<'tcx> Clean<WherePredicate> for ty::ProjectionPredicate<'tcx> {\n impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n         let lifted = self.lift_to_tcx(cx.tcx).unwrap();\n-        let trait_ = match lifted.trait_ref(cx.tcx).clean(cx) {\n-            GenericBound::TraitBound(t, _) => t.trait_,\n-            GenericBound::Outlives(_) => panic!(\"cleaning a trait got a lifetime\"),\n-        };\n+        let trait_ = lifted.trait_ref(cx.tcx).clean(cx);\n         let self_type = self.self_ty().clean(cx);\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,"}]}