{"sha": "c013dc01f1babb8f8e0dddcfdc69a84e8249161a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMTNkYzAxZjFiYWJiOGY4ZTBkZGRjZmRjNjlhODRlODI0OTE2MWE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-09T09:05:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T09:05:18Z"}, "message": "Rollup merge of #81127 - hanmertens:binary_heap_sift_down_perf, r=dtolnay\n\nImprove sift_down performance in BinaryHeap\n\nReplacing `child < end - 1` with `child <= end.saturating_sub(2)` in `BinaryHeap::sift_down_range` (surprisingly) results in a significant speedup of `BinaryHeap::into_sorted_vec`. The same substitution can be done for `BinaryHeap::sift_down_to_bottom`, which causes a slight but probably statistically insignificant speedup for `BinaryHeap::pop`. It's interesting that benchmarks aside from `bench_into_sorted_vec` are barely affected, even those that do use `sift_down_*` methods internally.\n\n| Benchmark                | Before (ns/iter) | After (ns/iter) | Speedup |\n|--------------------------|------------------|-----------------|---------|\n| bench_find_smallest_1000<sup>1</sup> | 392,617          | 385,200         |    1.02 |\n| bench_from_vec<sup>1</sup>           | 506,016          | 504,444         |    1.00 |\n| bench_into_sorted_vec<sup>1</sup>    | 476,869          | 384,458         |    1.24 |\n| bench_peek_mut_deref_mut<sup>3</sup> | 518,753          | 519,792         |    1.00 |\n| bench_pop<sup>2</sup>                | 446,718          | 444,409         |    1.01 |\n| bench_push<sup>3</sup>               | 772,481          | 770,208         |    1.00 |\n\n<sup>1</sup>: internally calls `sift_down_range`\n<sup>2</sup>: internally calls `sift_down_to_bottom`\n<sup>3</sup>: should not be affected", "tree": {"sha": "a74dc5634cb8fb4d3f5c7048374cab88fa9659c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74dc5634cb8fb4d3f5c7048374cab88fa9659c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c013dc01f1babb8f8e0dddcfdc69a84e8249161a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRzpPCRBK7hj4Ov3rIwAAdHIIAGiZTnDNPDq5j3M/oksLU6eK\nGOnuZiMsvGHEi7hPCgF3RUK59r+wusfmAizfL+vLeE6SuF6Gmo0qxaIfykzAKDEM\nVFU2D0+fyWmNgiXI/EfTTdPBifzd3abhgopn8tPfVkm76ku2giYvVT0FnnPmljBA\nZmacLaI9/0vvC9roQgPK5NS/NAcH+2j4c0D3aVRMeb0/pTsPHbgRYqzvB5Y0FdMn\nxBchNk1Df5Mq+GwfASFcfU/xDg/QAzXOm2NZOXC6xPr+qHCmOuYv1JfHXjIhidhe\nlaUhOYSRSxPgKsXpWnubWFnHg/u/y1rDKHia4v5H8P+qZbT9LAfocwrqehFMgSo=\n=IAf+\n-----END PGP SIGNATURE-----\n", "payload": "tree a74dc5634cb8fb4d3f5c7048374cab88fa9659c7\nparent 4b9f5cc4c10a161047475cb9bbe02c4fda57fb07\nparent 095bf01649a202b088c817bcdd3612d2604187e0\nauthor Mara Bos <m-ou.se@m-ou.se> 1615280718 +0000\ncommitter GitHub <noreply@github.com> 1615280718 +0000\n\nRollup merge of #81127 - hanmertens:binary_heap_sift_down_perf, r=dtolnay\n\nImprove sift_down performance in BinaryHeap\n\nReplacing `child < end - 1` with `child <= end.saturating_sub(2)` in `BinaryHeap::sift_down_range` (surprisingly) results in a significant speedup of `BinaryHeap::into_sorted_vec`. The same substitution can be done for `BinaryHeap::sift_down_to_bottom`, which causes a slight but probably statistically insignificant speedup for `BinaryHeap::pop`. It's interesting that benchmarks aside from `bench_into_sorted_vec` are barely affected, even those that do use `sift_down_*` methods internally.\n\n| Benchmark                | Before (ns/iter) | After (ns/iter) | Speedup |\n|--------------------------|------------------|-----------------|---------|\n| bench_find_smallest_1000<sup>1</sup> | 392,617          | 385,200         |    1.02 |\n| bench_from_vec<sup>1</sup>           | 506,016          | 504,444         |    1.00 |\n| bench_into_sorted_vec<sup>1</sup>    | 476,869          | 384,458         |    1.24 |\n| bench_peek_mut_deref_mut<sup>3</sup> | 518,753          | 519,792         |    1.00 |\n| bench_pop<sup>2</sup>                | 446,718          | 444,409         |    1.01 |\n| bench_push<sup>3</sup>               | 772,481          | 770,208         |    1.00 |\n\n<sup>1</sup>: internally calls `sift_down_range`\n<sup>2</sup>: internally calls `sift_down_to_bottom`\n<sup>3</sup>: should not be affected\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c013dc01f1babb8f8e0dddcfdc69a84e8249161a", "html_url": "https://github.com/rust-lang/rust/commit/c013dc01f1babb8f8e0dddcfdc69a84e8249161a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c013dc01f1babb8f8e0dddcfdc69a84e8249161a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07", "html_url": "https://github.com/rust-lang/rust/commit/4b9f5cc4c10a161047475cb9bbe02c4fda57fb07"}, {"sha": "095bf01649a202b088c817bcdd3612d2604187e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/095bf01649a202b088c817bcdd3612d2604187e0", "html_url": "https://github.com/rust-lang/rust/commit/095bf01649a202b088c817bcdd3612d2604187e0"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "b5e66d37ab494bfc8f95ac2fbf761ec21e87507e", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c013dc01f1babb8f8e0dddcfdc69a84e8249161a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c013dc01f1babb8f8e0dddcfdc69a84e8249161a/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=c013dc01f1babb8f8e0dddcfdc69a84e8249161a", "patch": "@@ -566,7 +566,7 @@ impl<T: Ord> BinaryHeap<T> {\n         let mut child = 2 * hole.pos() + 1;\n \n         // Loop invariant: child == 2 * hole.pos() + 1.\n-        while child < end - 1 {\n+        while child <= end.saturating_sub(2) {\n             // compare with the greater of the two children\n             // SAFETY: child < end - 1 < self.len() and\n             //  child + 1 < end <= self.len(), so they're valid indexes.\n@@ -625,7 +625,7 @@ impl<T: Ord> BinaryHeap<T> {\n         let mut child = 2 * hole.pos() + 1;\n \n         // Loop invariant: child == 2 * hole.pos() + 1.\n-        while child < end - 1 {\n+        while child <= end.saturating_sub(2) {\n             // SAFETY: child < end - 1 < self.len() and\n             //  child + 1 < end <= self.len(), so they're valid indexes.\n             //  child == 2 * hole.pos() + 1 != hole.pos() and"}]}