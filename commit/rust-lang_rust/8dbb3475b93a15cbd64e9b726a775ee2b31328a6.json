{"sha": "8dbb3475b93a15cbd64e9b726a775ee2b31328a6", "node_id": "C_kwDOAAsO6NoAKDhkYmIzNDc1YjkzYTE1Y2JkNjRlOWI3MjZhNzc1ZWUyYjMxMzI4YTY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-06T23:24:37Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-07T00:27:00Z"}, "message": "Split loop in `place_inlined_mono_item`.\n\nThis loop is doing two different things. For inlined items, it's adding\nthem to the CGU. For all items, it's recording them in\n`mono_item_placements`.\n\nThis commit splits it into two separate loops. This avoids putting root\nmono items into `reachable`, and removes the low-value check that\n`roots` doesn't contain inlined mono items.", "tree": {"sha": "b3a4efc960cb8fc9748e8e684f3bd3d074c91eac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a4efc960cb8fc9748e8e684f3bd3d074c91eac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dbb3475b93a15cbd64e9b726a775ee2b31328a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbb3475b93a15cbd64e9b726a775ee2b31328a6", "html_url": "https://github.com/rust-lang/rust/commit/8dbb3475b93a15cbd64e9b726a775ee2b31328a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dbb3475b93a15cbd64e9b726a775ee2b31328a6/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe3b6465654d8d73f9ddd45faf02971614f5780b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3b6465654d8d73f9ddd45faf02971614f5780b", "html_url": "https://github.com/rust-lang/rust/commit/fe3b6465654d8d73f9ddd45faf02971614f5780b"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "737c0b035e7abda4d584b671803c7ccc5752247c", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8dbb3475b93a15cbd64e9b726a775ee2b31328a6/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbb3475b93a15cbd64e9b726a775ee2b31328a6/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=8dbb3475b93a15cbd64e9b726a775ee2b31328a6", "patch": "@@ -416,37 +416,35 @@ enum MonoItemPlacement {\n fn place_inlined_mono_items<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,\n     codegen_units: &mut [CodegenUnit<'tcx>],\n-    roots: FxHashSet<MonoItem<'tcx>>,\n+    _roots: FxHashSet<MonoItem<'tcx>>,\n ) -> FxHashMap<MonoItem<'tcx>, MonoItemPlacement> {\n-    let mut mono_item_placements = FxHashMap::default();\n-\n-    let single_codegen_unit = codegen_units.len() == 1;\n-\n     for cgu in codegen_units.iter_mut() {\n-        // Collect all items that need to be available in this codegen unit.\n-        let mut reachable = FxHashSet::default();\n+        // Collect all inlined items that need to be available in this codegen unit.\n+        let mut reachable_inlined_items = FxHashSet::default();\n         for root in cgu.items().keys() {\n-            // Insert the root item itself, plus all inlined items that are\n-            // reachable from it without going via another root item.\n-            reachable.insert(*root);\n-            get_reachable_inlined_items(cx.tcx, *root, cx.usage_map, &mut reachable);\n+            // Get all inlined items that are reachable from it without going\n+            // via another root item.\n+            get_reachable_inlined_items(cx.tcx, *root, cx.usage_map, &mut reachable_inlined_items);\n         }\n \n         // Add all monomorphizations that are not already there.\n-        for mono_item in reachable {\n-            if !cgu.items().contains_key(&mono_item) {\n-                if roots.contains(&mono_item) {\n-                    bug!(\"GloballyShared mono-item inlined into other CGU: {:?}\", mono_item);\n-                }\n+        for inlined_item in reachable_inlined_items {\n+            assert!(!cgu.items().contains_key(&inlined_item));\n \n-                // This is a CGU-private copy.\n-                cgu.items_mut().insert(mono_item, (Linkage::Internal, Visibility::Default));\n-            }\n+            // This is a CGU-private copy.\n+            cgu.items_mut().insert(inlined_item, (Linkage::Internal, Visibility::Default));\n+        }\n+    }\n+\n+    let mut mono_item_placements = FxHashMap::default();\n+    let single_codegen_unit = codegen_units.len() == 1;\n \n+    for cgu in codegen_units.iter_mut() {\n+        for item in cgu.items().keys() {\n             if !single_codegen_unit {\n                 // If there is more than one codegen unit, we need to keep track\n                 // in which codegen units each monomorphization is placed.\n-                match mono_item_placements.entry(mono_item) {\n+                match mono_item_placements.entry(*item) {\n                     Entry::Occupied(e) => {\n                         let placement = e.into_mut();\n                         debug_assert!(match *placement {"}]}