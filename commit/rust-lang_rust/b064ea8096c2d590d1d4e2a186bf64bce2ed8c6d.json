{"sha": "b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjRlYTgwOTZjMmQ1OTBkMWQ0ZTJhMTg2YmY2NGJjZTJlZDhjNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T20:05:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-12T20:05:38Z"}, "message": "Auto merge of #5307 - JohnTitor:rename-method, r=flip1995\n\nRustup to rust-lang/rust#69674\n\nchangelog: none", "tree": {"sha": "f232048dfbe7a02191ad089d0bb69dbd20c9aa5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f232048dfbe7a02191ad089d0bb69dbd20c9aa5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "html_url": "https://github.com/rust-lang/rust/commit/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdce47ba7d901b91c23c5d096aef4a7fdc18dc8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdce47ba7d901b91c23c5d096aef4a7fdc18dc8e", "html_url": "https://github.com/rust-lang/rust/commit/fdce47ba7d901b91c23c5d096aef4a7fdc18dc8e"}, {"sha": "3e3776666ea4dbf92e4450f5753a0a45827b349e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3776666ea4dbf92e4450f5753a0a45827b349e", "html_url": "https://github.com/rust-lang/rust/commit/3e3776666ea4dbf92e4450f5753a0a45827b349e"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "833739f1bd3c45a1e8d8ec511c8c38eb49644cc9", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -379,8 +379,8 @@ fn is_relevant_impl(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) -> bool {\n \n fn is_relevant_trait(cx: &LateContext<'_, '_>, item: &TraitItem<'_>) -> bool {\n     match item.kind {\n-        TraitItemKind::Method(_, TraitMethod::Required(_)) => true,\n-        TraitItemKind::Method(_, TraitMethod::Provided(eid)) => {\n+        TraitItemKind::Fn(_, TraitMethod::Required(_)) => true,\n+        TraitItemKind::Fn(_, TraitMethod::Provided(eid)) => {\n             is_relevant_expr(cx, cx.tcx.body_tables(eid), &cx.tcx.hir().body(eid).value)\n         },\n         _ => false,"}, {"sha": "006d732703ec4bdfceff749fb0bebcc49bece4b7", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -179,7 +179,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem<'_>) {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n-        if let hir::TraitItemKind::Method(ref sig, ..) = item.kind {\n+        if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n                 lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None);\n             }"}, {"sha": "c43b2075b6469c4321e19b0d145fd9a28d0809d2", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -273,7 +273,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(ref sig, ref eid) = item.kind {\n+        if let hir::TraitItemKind::Fn(ref sig, ref eid) = item.kind {\n             // don't lint extern functions decls, it's not their fault\n             if sig.header.abi == Abi::Rust {\n                 self.check_arg_number(cx, &sig.decl, item.span.with_hi(sig.decl.output.span().hi()));"}, {"sha": "32032c4da885b430d9e5b5b449f45afe7bf2f438", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -32,7 +32,7 @@ declare_lint_pass!(InlineFnWithoutBody => [INLINE_FN_WITHOUT_BODY]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InlineFnWithoutBody {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n-        if let TraitItemKind::Method(_, TraitMethod::Required(_)) = item.kind {\n+        if let TraitItemKind::Fn(_, TraitMethod::Required(_)) = item.kind {\n             check_attrs(cx, item.ident.name, &item.attrs);\n         }\n     }"}, {"sha": "3b687bd54a1cfddd7553ef2f86e154e70added35", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Lifetimes {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n-        if let TraitItemKind::Method(ref sig, ref body) = item.kind {\n+        if let TraitItemKind::Fn(ref sig, ref body) = item.kind {\n             let body = match *body {\n                 TraitMethod::Required(_) => None,\n                 TraitMethod::Provided(id) => Some(id),"}, {"sha": "19d9a31aaf41bb1efab78ac746d27bf0c52d0a3e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -1738,7 +1738,7 @@ fn lint_expect_fun_call(\n                 if let hir::ExprKind::Path(ref p) = fun.kind {\n                     match cx.tables.qpath_res(p, fun.hir_id) {\n                         hir::def::Res::Def(hir::def::DefKind::Fn, def_id)\n-                        | hir::def::Res::Def(hir::def::DefKind::Method, def_id) => matches!(\n+                        | hir::def::Res::Def(hir::def::DefKind::AssocFn, def_id) => matches!(\n                             cx.tcx.fn_sig(def_id).output().skip_binder().kind,\n                             ty::Ref(ty::ReStatic, ..)\n                         ),"}, {"sha": "57bec0a65b37e8b0c55ef11d6252acabbe448671", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n         let desc = match trait_item.kind {\n             hir::TraitItemKind::Const(..) => \"an associated constant\",\n-            hir::TraitItemKind::Method(..) => \"a trait method\",\n+            hir::TraitItemKind::Fn(..) => \"a trait method\",\n             hir::TraitItemKind::Type(..) => \"an associated type\",\n         };\n "}, {"sha": "fad4d6d0fe2ef9528d868fd2894e3c40981a776e", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n                     let tit_ = cx.tcx.hir().trait_item(tit.id);\n                     match tit_.kind {\n                         hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => {},\n-                        hir::TraitItemKind::Method(..) => {\n+                        hir::TraitItemKind::Fn(..) => {\n                             if tit.defaultness.has_value() {\n                                 // trait method with default body needs inline in case\n                                 // an impl is not provided"}, {"sha": "61f514a740a5664083e51507855c27c286acd073", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableKeyType {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem<'tcx>) {\n-        if let hir::TraitItemKind::Method(ref sig, ..) = item.kind {\n+        if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             check_sig(cx, item.hir_id, &sig.decl);\n         }\n     }"}, {"sha": "a6d62406aa7648cd44afcc959387f1944d6925ba", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n-        if let TraitItemKind::Method(ref sig, ref trait_method) = item.kind {\n+        if let TraitItemKind::Fn(ref sig, ref trait_method) = item.kind {\n             let body_id = if let TraitMethod::Provided(b) = *trait_method {\n                 Some(b)\n             } else {"}, {"sha": "7e9a94f14fef6827ab6a856d9a4adbc69a3d8ea9", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n             return;\n         }\n \n-        if let hir::TraitItemKind::Method(method_sig, _) = &item.kind {\n+        if let hir::TraitItemKind::Fn(method_sig, _) = &item.kind {\n             self.check_poly_fn(cx, item.hir_id, &*method_sig.decl, None);\n         }\n     }"}, {"sha": "fbd3f37c5643e9bc23693dba8284d300a48aa43f", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=b064ea8096c2d590d1d4e2a186bf64bce2ed8c6d", "patch": "@@ -204,7 +204,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Types {\n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &TraitItem<'_>) {\n         match item.kind {\n             TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => self.check_ty(cx, ty, false),\n-            TraitItemKind::Method(ref sig, _) => self.check_fn_decl(cx, &sig.decl),\n+            TraitItemKind::Fn(ref sig, _) => self.check_fn_decl(cx, &sig.decl),\n             _ => (),\n         }\n     }\n@@ -1457,7 +1457,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeComplexity {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx TraitItem<'_>) {\n         match item.kind {\n             TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => self.check_type(cx, ty),\n-            TraitItemKind::Method(FnSig { ref decl, .. }, TraitMethod::Required(_)) => self.check_fndecl(cx, decl),\n+            TraitItemKind::Fn(FnSig { ref decl, .. }, TraitMethod::Required(_)) => self.check_fndecl(cx, decl),\n             // methods with default impl are covered by check_fn\n             _ => (),\n         }"}]}