{"sha": "ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMGQ1OTI0YzI1YjUwMGIyYjEzNWU1YTVmNDE3NTRhYjRhNzJlMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T05:21:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T05:21:25Z"}, "message": "Auto merge of #82688 - GuillaumeGomez:rollup-b754t11, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #80734 (check that first arg to `panic!()` in const is `&str`)\n - #81932 (Always compile rustdoc with debug logging enabled when `download-rustc` is set)\n - #82018 (Remove the dummy cache in `DocContext`; delete RenderInfo)\n - #82598 (Check stability and feature attributes in rustdoc)\n - #82655 (Highlight identifier span instead of whole pattern span in `unused` lint)\n - #82662 (Warn about unknown doc attributes)\n - #82676 (Change twice used large const table to static)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7ff49eb9ee43279a44b290f0678ca87502557209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ff49eb9ee43279a44b290f0678ca87502557209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "html_url": "https://github.com/rust-lang/rust/commit/ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f20caa6258d4c74ce6b316fd347e3efe81cf557", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f20caa6258d4c74ce6b316fd347e3efe81cf557", "html_url": "https://github.com/rust-lang/rust/commit/4f20caa6258d4c74ce6b316fd347e3efe81cf557"}, {"sha": "9a0ac7cb5feed93eb0b05468c07c2bb8cdea234b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a0ac7cb5feed93eb0b05468c07c2bb8cdea234b", "html_url": "https://github.com/rust-lang/rust/commit/9a0ac7cb5feed93eb0b05468c07c2bb8cdea234b"}], "stats": {"total": 705, "additions": 503, "deletions": 202}, "files": [{"sha": "2e46d43a790980472ddb49069339aca750e45d44", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -4554,6 +4554,9 @@ dependencies = [\n  \"serde_json\",\n  \"smallvec 1.6.1\",\n  \"tempfile\",\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+ \"tracing-tree\",\n ]\n \n [[package]]"}, {"sha": "a18c1f74524044fb127e2b4fa52790aea4cc3fdb", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -377,6 +377,18 @@ impl NonConstOp for Panic {\n     }\n }\n \n+/// A call to a `panic()` lang item where the first argument is _not_ a `&str`.\n+#[derive(Debug)]\n+pub struct PanicNonStr;\n+impl NonConstOp for PanicNonStr {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        ccx.tcx.sess.struct_span_err(\n+            span,\n+            \"argument to `panic!()` in a const context must have type `&str`\",\n+        )\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct RawPtrComparison;\n impl NonConstOp for RawPtrComparison {"}, {"sha": "2845f27d22babc8a752d7828da4396392cd2a1e8", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -819,7 +819,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n         self.super_terminator(terminator, location);\n \n         match &terminator.kind {\n-            TerminatorKind::Call { func, .. } => {\n+            TerminatorKind::Call { func, args, .. } => {\n                 let ConstCx { tcx, body, param_env, .. } = *self.ccx;\n                 let caller = self.def_id().to_def_id();\n \n@@ -881,9 +881,17 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 }\n \n                 // At this point, we are calling a function, `callee`, whose `DefId` is known...\n-\n                 if is_lang_panic_fn(tcx, callee) {\n                     self.check_op(ops::Panic);\n+\n+                    // const-eval of the `begin_panic` fn assumes the argument is `&str`\n+                    if Some(callee) == tcx.lang_items().begin_panic_fn() {\n+                        match args[0].ty(&self.ccx.body.local_decls, tcx).kind() {\n+                            ty::Ref(_, ty, _) if ty.is_str() => (),\n+                            _ => self.check_op(ops::PanicNonStr),\n+                        }\n+                    }\n+\n                     return;\n                 }\n "}, {"sha": "afd1642bbd57c49c070c2777278f0c73e8e6f4c9", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -544,6 +544,41 @@ impl CheckAttrVisitor<'tcx> {\n                         {\n                             return false;\n                         }\n+                    } else if let Some(i_meta) = meta.meta_item() {\n+                        if ![\n+                            sym::cfg,\n+                            sym::hidden,\n+                            sym::html_favicon_url,\n+                            sym::html_logo_url,\n+                            sym::html_no_source,\n+                            sym::html_playground_url,\n+                            sym::html_root_url,\n+                            sym::include,\n+                            sym::inline,\n+                            sym::issue_tracker_base_url,\n+                            sym::masked,\n+                            sym::no_default_passes, // deprecated\n+                            sym::no_inline,\n+                            sym::passes, // deprecated\n+                            sym::primitive,\n+                            sym::spotlight,\n+                            sym::test,\n+                        ]\n+                        .iter()\n+                        .any(|m| i_meta.has_name(*m))\n+                        {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    meta.span(),\n+                                    &format!(\n+                                        \"unknown `doc` attribute `{}`\",\n+                                        i_meta.name_or_empty(),\n+                                    ),\n+                                )\n+                                .emit();\n+                            return false;\n+                        }\n                     }\n                 }\n             }"}, {"sha": "a96f3323744304c572eeed9dc4d13060d47f47d4", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 66, "deletions": 43, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -1494,12 +1494,13 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         // bindings, and we also consider the first pattern to be the \"authoritative\" set of ids.\n         // However, we should take the ids and spans of variables with the same name from the later\n         // patterns so the suggestions to prefix with underscores will apply to those too.\n-        let mut vars: FxIndexMap<Symbol, (LiveNode, Variable, Vec<(HirId, Span)>)> = <_>::default();\n+        let mut vars: FxIndexMap<Symbol, (LiveNode, Variable, Vec<(HirId, Span, Span)>)> =\n+            <_>::default();\n \n         pat.each_binding(|_, hir_id, pat_sp, ident| {\n             let ln = entry_ln.unwrap_or_else(|| self.live_node(hir_id, pat_sp));\n             let var = self.variable(hir_id, ident.span);\n-            let id_and_sp = (hir_id, pat_sp);\n+            let id_and_sp = (hir_id, pat_sp, ident.span);\n             vars.entry(self.ir.variable_name(var))\n                 .and_modify(|(.., hir_ids_and_spans)| hir_ids_and_spans.push(id_and_sp))\n                 .or_insert_with(|| (ln, var, vec![id_and_sp]));\n@@ -1508,15 +1509,21 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         for (_, (ln, var, hir_ids_and_spans)) in vars {\n             if self.used_on_entry(ln, var) {\n                 let id = hir_ids_and_spans[0].0;\n-                let spans = hir_ids_and_spans.into_iter().map(|(_, sp)| sp).collect();\n+                let spans =\n+                    hir_ids_and_spans.into_iter().map(|(_, _, ident_span)| ident_span).collect();\n                 on_used_on_entry(spans, id, ln, var);\n             } else {\n                 self.report_unused(hir_ids_and_spans, ln, var);\n             }\n         }\n     }\n \n-    fn report_unused(&self, hir_ids_and_spans: Vec<(HirId, Span)>, ln: LiveNode, var: Variable) {\n+    fn report_unused(\n+        &self,\n+        hir_ids_and_spans: Vec<(HirId, Span, Span)>,\n+        ln: LiveNode,\n+        var: Variable,\n+    ) {\n         let first_hir_id = hir_ids_and_spans[0].0;\n \n         if let Some(name) = self.should_warn(var).filter(|name| name != \"self\") {\n@@ -1530,62 +1537,78 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                 self.ir.tcx.struct_span_lint_hir(\n                     lint::builtin::UNUSED_VARIABLES,\n                     first_hir_id,\n-                    hir_ids_and_spans.into_iter().map(|(_, sp)| sp).collect::<Vec<_>>(),\n+                    hir_ids_and_spans\n+                        .into_iter()\n+                        .map(|(_, _, ident_span)| ident_span)\n+                        .collect::<Vec<_>>(),\n                     |lint| {\n                         lint.build(&format!(\"variable `{}` is assigned to, but never used\", name))\n                             .note(&format!(\"consider using `_{}` instead\", name))\n                             .emit();\n                     },\n                 )\n             } else {\n-                self.ir.tcx.struct_span_lint_hir(\n-                    lint::builtin::UNUSED_VARIABLES,\n-                    first_hir_id,\n-                    hir_ids_and_spans.iter().map(|(_, sp)| *sp).collect::<Vec<_>>(),\n-                    |lint| {\n-                        let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n-\n-                        let (shorthands, non_shorthands): (Vec<_>, Vec<_>) =\n-                            hir_ids_and_spans.into_iter().partition(|(hir_id, span)| {\n-                                let var = self.variable(*hir_id, *span);\n-                                self.ir.variable_is_shorthand(var)\n-                            });\n-\n-                        let mut shorthands = shorthands\n-                            .into_iter()\n-                            .map(|(_, span)| (span, format!(\"{}: _\", name)))\n-                            .collect::<Vec<_>>();\n-\n-                        // If we have both shorthand and non-shorthand, prefer the \"try ignoring\n-                        // the field\" message, and suggest `_` for the non-shorthands. If we only\n-                        // have non-shorthand, then prefix with an underscore instead.\n-                        if !shorthands.is_empty() {\n-                            shorthands.extend(\n-                                non_shorthands\n-                                    .into_iter()\n-                                    .map(|(_, span)| (span, \"_\".to_string()))\n-                                    .collect::<Vec<_>>(),\n-                            );\n+                let (shorthands, non_shorthands): (Vec<_>, Vec<_>) =\n+                    hir_ids_and_spans.iter().copied().partition(|(hir_id, _, ident_span)| {\n+                        let var = self.variable(*hir_id, *ident_span);\n+                        self.ir.variable_is_shorthand(var)\n+                    });\n \n+                // If we have both shorthand and non-shorthand, prefer the \"try ignoring\n+                // the field\" message, and suggest `_` for the non-shorthands. If we only\n+                // have non-shorthand, then prefix with an underscore instead.\n+                if !shorthands.is_empty() {\n+                    let shorthands = shorthands\n+                        .into_iter()\n+                        .map(|(_, pat_span, _)| (pat_span, format!(\"{}: _\", name)))\n+                        .chain(\n+                            non_shorthands\n+                                .into_iter()\n+                                .map(|(_, pat_span, _)| (pat_span, \"_\".to_string())),\n+                        )\n+                        .collect::<Vec<_>>();\n+\n+                    self.ir.tcx.struct_span_lint_hir(\n+                        lint::builtin::UNUSED_VARIABLES,\n+                        first_hir_id,\n+                        hir_ids_and_spans\n+                            .iter()\n+                            .map(|(_, pat_span, _)| *pat_span)\n+                            .collect::<Vec<_>>(),\n+                        |lint| {\n+                            let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n                             err.multipart_suggestion(\n                                 \"try ignoring the field\",\n                                 shorthands,\n                                 Applicability::MachineApplicable,\n                             );\n-                        } else {\n+                            err.emit()\n+                        },\n+                    );\n+                } else {\n+                    let non_shorthands = non_shorthands\n+                        .into_iter()\n+                        .map(|(_, _, ident_span)| (ident_span, format!(\"_{}\", name)))\n+                        .collect::<Vec<_>>();\n+\n+                    self.ir.tcx.struct_span_lint_hir(\n+                        lint::builtin::UNUSED_VARIABLES,\n+                        first_hir_id,\n+                        hir_ids_and_spans\n+                            .iter()\n+                            .map(|(_, _, ident_span)| *ident_span)\n+                            .collect::<Vec<_>>(),\n+                        |lint| {\n+                            let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n                             err.multipart_suggestion(\n                                 \"if this is intentional, prefix it with an underscore\",\n-                                non_shorthands\n-                                    .into_iter()\n-                                    .map(|(_, span)| (span, format!(\"_{}\", name)))\n-                                    .collect::<Vec<_>>(),\n+                                non_shorthands,\n                                 Applicability::MachineApplicable,\n                             );\n-                        }\n-\n-                        err.emit()\n-                    },\n-                );\n+                            err.emit()\n+                        },\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "97b497e81e0700d4d6fa1cdec19d99386bb841f2", "filename": "library/core/src/num/dec2flt/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Ftable.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -5,7 +5,7 @@ pub const MIN_E: i16 = -305;\n pub const MAX_E: i16 = 305;\n \n #[rustfmt::skip]\n-pub const POWERS: ([u64; 611], [i16; 611]) = (\n+pub static POWERS: ([u64; 611], [i16; 611]) = (\n     [\n         0xe0b62e2929aba83c,\n         0x8c71dcd9ba0b4926,"}, {"sha": "31e39b5ad0421f31f6c06c5e5cf9ee072cbf5b02", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -23,6 +23,7 @@ pub use crate::sys::windows_ext as windows;\n pub mod linux;\n \n #[cfg(doc)]\n+#[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n pub use crate::sys::wasi_ext as wasi;\n \n // If we're not documenting libstd then we just expose the main modules as we otherwise would."}, {"sha": "1e79a5c3f9bd5486159723547bfbeee1f2b0a5c8", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -111,7 +111,7 @@ cfg_if::cfg_if! {\n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"wasi\")] {\n         // On WASI we'll document what's already available\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n         pub use self::ext as wasi_ext;\n     } else if #[cfg(any(target_os = \"hermit\",\n                         target_arch = \"wasm32\",\n@@ -125,6 +125,7 @@ cfg_if::cfg_if! {\n     } else {\n         // On other platforms like Windows document the bare bones of WASI\n         #[path = \"wasi/ext/mod.rs\"]\n+        #[stable(feature = \"wasi_ext_doc\", since = \"1.35.0\")]\n         pub mod wasi_ext;\n     }\n }"}, {"sha": "ad2292e857186ce45f8df5e779318e3528d1b400", "filename": "src/etc/dec2flt_table.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Fetc%2Fdec2flt_table.py", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Fetc%2Fdec2flt_table.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdec2flt_table.py?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -113,7 +113,7 @@ def print_proper_powers():\n     print()\n     print(\"#[rustfmt::skip]\")\n     typ = \"([u64; {0}], [i16; {0}])\".format(len(powers))\n-    print(\"pub const POWERS: \", typ, \" = (\", sep='')\n+    print(\"pub static POWERS: \", typ, \" = (\", sep='')\n     print(\"    [\")\n     for z in powers:\n         print(\"        0x{:x},\".format(z.sig))"}, {"sha": "44c2c3b17860b29d944b45deb1c1d4528e77b905", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -19,6 +19,13 @@ tempfile = \"3\"\n itertools = \"0.9\"\n regex = \"1\"\n rustdoc-json-types = { path = \"../rustdoc-json-types\" }\n+tracing = \"0.1\"\n+tracing-tree = \"0.1.6\"\n+\n+[dependencies.tracing-subscriber]\n+version = \"0.2.13\"\n+default-features = false\n+features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"]\n \n [dev-dependencies]\n expect-test = \"1.0\""}, {"sha": "4e4e1e5cbce2f3111e3e1c3c9061ecfb2d353be5", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -21,7 +21,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n         debug!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n         for &trait_def_id in self.cx.tcx.all_traits(LOCAL_CRATE).iter() {\n-            if !self.cx.renderinfo.access_levels.is_public(trait_def_id)\n+            if !self.cx.cache.access_levels.is_public(trait_def_id)\n                 || self.cx.generated_synthetics.get(&(ty, trait_def_id)).is_some()\n             {\n                 continue;"}, {"sha": "47a74238a7a3de4971cf996d4b539efd4801f0b3", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -17,6 +17,7 @@ use rustc_span::Span;\n \n use crate::clean::{self, Attributes, GetDefId, ToSource, TypeKind};\n use crate::core::DocContext;\n+use crate::formats::item_type::ItemType;\n \n use super::Clean;\n \n@@ -122,7 +123,7 @@ crate fn try_inline(\n     let target_attrs = load_attrs(cx, did);\n     let attrs = box merge_attrs(cx, Some(parent_module), target_attrs, attrs_clone);\n \n-    cx.renderinfo.inlined.insert(did);\n+    cx.inlined.insert(did);\n     let what_rustc_thinks = clean::Item::from_def_id_and_parts(did, Some(name), kind, cx);\n     ret.push(clean::Item { attrs, ..what_rustc_thinks });\n     Some(ret)\n@@ -181,9 +182,9 @@ crate fn record_extern_fqn(cx: &mut DocContext<'_>, did: DefId, kind: clean::Typ\n     };\n \n     if did.is_local() {\n-        cx.renderinfo.exact_paths.insert(did, fqn);\n+        cx.cache.exact_paths.insert(did, fqn);\n     } else {\n-        cx.renderinfo.external_paths.insert(did, (fqn, kind));\n+        cx.cache.external_paths.insert(did, (fqn, ItemType::from(kind)));\n     }\n }\n \n@@ -315,7 +316,7 @@ crate fn build_impl(\n     attrs: Option<Attrs<'_>>,\n     ret: &mut Vec<clean::Item>,\n ) {\n-    if !cx.renderinfo.inlined.insert(did) {\n+    if !cx.inlined.insert(did) {\n         return;\n     }\n \n@@ -327,7 +328,7 @@ crate fn build_impl(\n     if !did.is_local() {\n         if let Some(traitref) = associated_trait {\n             let did = traitref.def_id;\n-            if !cx.renderinfo.access_levels.is_public(did) {\n+            if !cx.cache.access_levels.is_public(did) {\n                 return;\n             }\n \n@@ -359,7 +360,7 @@ crate fn build_impl(\n     // reachable in rustdoc generated documentation\n     if !did.is_local() {\n         if let Some(did) = for_.def_id() {\n-            if !cx.renderinfo.access_levels.is_public(did) {\n+            if !cx.cache.access_levels.is_public(did) {\n                 return;\n             }\n "}, {"sha": "5d81498f8d210d546ab9c747788c47f547d79445", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -1304,7 +1304,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 // Substitute private type aliases\n                 if let Some(def_id) = def_id.as_local() {\n                     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n-                    if !cx.renderinfo.access_levels.is_exported(def_id.to_def_id()) {\n+                    if !cx.cache.access_levels.is_exported(def_id.to_def_id()) {\n                         alias = Some(&cx.tcx.hir().expect_item(hir_id).kind);\n                     }\n                 }"}, {"sha": "09ba0e2740f1b0bcec69d6a17f26eb75c8649de8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -50,7 +50,6 @@ thread_local!(crate static MAX_DEF_IDX: RefCell<FxHashMap<CrateNum, DefIndex>> =\n #[derive(Clone, Debug)]\n crate struct Crate {\n     crate name: Symbol,\n-    crate version: Option<String>,\n     crate src: FileName,\n     crate module: Option<Item>,\n     crate externs: Vec<(CrateNum, ExternalCrate)>,"}, {"sha": "a64e8c21c462e80aba0ee0b02b8afb8be8c88d23", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -17,21 +17,21 @@ use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use std::mem;\n \n-crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n+crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n     use crate::visit_lib::LibEmbargoVisitor;\n \n     let krate = cx.tcx.hir().krate();\n-    let module = crate::visit_ast::RustdocVisitor::new(&mut cx).visit(krate);\n+    let module = crate::visit_ast::RustdocVisitor::new(cx).visit(krate);\n \n-    cx.renderinfo.deref_trait_did = cx.tcx.lang_items().deref_trait();\n-    cx.renderinfo.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n-    cx.renderinfo.owned_box_did = cx.tcx.lang_items().owned_box();\n+    cx.cache.deref_trait_did = cx.tcx.lang_items().deref_trait();\n+    cx.cache.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n+    cx.cache.owned_box_did = cx.tcx.lang_items().owned_box();\n \n     let mut externs = Vec::new();\n     for &cnum in cx.tcx.crates().iter() {\n         externs.push((cnum, cnum.clean(cx)));\n         // Analyze doc-reachability for extern items\n-        LibEmbargoVisitor::new(&mut cx).visit_lib(cnum);\n+        LibEmbargoVisitor::new(cx).visit_lib(cnum);\n     }\n     externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n \n@@ -77,7 +77,6 @@ crate fn krate(mut cx: &mut DocContext<'_>) -> Crate {\n \n     Crate {\n         name,\n-        version: None,\n         src,\n         module: Some(module),\n         externs,"}, {"sha": "d9f5b5bfa3ae2c20c480c94797f662cdab58605f", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -4,9 +4,7 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::DefId;\n-use rustc_middle::middle::privacy::AccessLevels;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n use rustc_session::config::{\n     build_codegen_options, build_debugging_options, get_cmd_lint_options, host_triple,\n@@ -268,20 +266,6 @@ crate struct RenderOptions {\n     crate unstable_features: rustc_feature::UnstableFeatures,\n }\n \n-/// Temporary storage for data obtained during `RustdocVisitor::clean()`.\n-/// Later on moved into `cache`.\n-#[derive(Default, Clone)]\n-crate struct RenderInfo {\n-    crate inlined: FxHashSet<DefId>,\n-    crate external_paths: crate::core::ExternalPaths,\n-    crate exact_paths: FxHashMap<DefId, Vec<String>>,\n-    crate access_levels: AccessLevels<DefId>,\n-    crate deref_trait_did: Option<DefId>,\n-    crate deref_mut_trait_did: Option<DefId>,\n-    crate owned_box_did: Option<DefId>,\n-    crate output_format: OutputFormat,\n-}\n-\n impl Options {\n     /// Parses the given command-line for options. If an error message or other early-return has\n     /// been printed, returns `Err` with the exit code."}, {"sha": "6218aaf8276d5deeefa3f68a3341551c0816c473", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -31,15 +31,12 @@ use std::{cell::RefCell, collections::hash_map::Entry};\n use crate::clean;\n use crate::clean::inline::build_external_trait;\n use crate::clean::{AttributesExt, TraitWithExtraInfo, MAX_DEF_IDX};\n-use crate::config::{Options as RustdocOptions, RenderOptions};\n-use crate::config::{OutputFormat, RenderInfo};\n+use crate::config::{Options as RustdocOptions, OutputFormat, RenderOptions};\n use crate::formats::cache::Cache;\n use crate::passes::{self, Condition::*, ConditionalPass};\n \n crate use rustc_session::config::{DebuggingOptions, Input, Options};\n \n-crate type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n-\n crate struct DocContext<'tcx> {\n     crate tcx: TyCtxt<'tcx>,\n     /// Name resolver. Used for intra-doc links.\n@@ -52,8 +49,6 @@ crate struct DocContext<'tcx> {\n     ///\n     /// Most of this logic is copied from rustc_lint::late.\n     crate param_env: ParamEnv<'tcx>,\n-    /// Later on moved into `cache`\n-    crate renderinfo: RenderInfo,\n     /// Later on moved through `clean::Crate` into `cache`\n     crate external_traits: Rc<RefCell<FxHashMap<DefId, clean::TraitWithExtraInfo>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n@@ -81,8 +76,12 @@ crate struct DocContext<'tcx> {\n     /// See `collect_intra_doc_links::traits_implemented_by` for more details.\n     /// `map<module, set<trait>>`\n     crate module_trait_cache: RefCell<FxHashMap<DefId, FxHashSet<DefId>>>,\n-    /// Fake empty cache used when cache is required as parameter.\n+    /// This same cache is used throughout rustdoc, including in [`crate::html::render`].\n     crate cache: Cache,\n+    /// Used by [`clean::inline`] to tell if an item has already been inlined.\n+    crate inlined: FxHashSet<DefId>,\n+    /// Used by `calculate_doc_coverage`.\n+    crate output_format: OutputFormat,\n }\n \n impl<'tcx> DocContext<'tcx> {\n@@ -465,7 +464,7 @@ crate fn run_global_ctxt(\n     mut manual_passes: Vec<String>,\n     render_options: RenderOptions,\n     output_format: OutputFormat,\n-) -> (clean::Crate, RenderInfo, RenderOptions) {\n+) -> (clean::Crate, RenderOptions, Cache) {\n     // Certain queries assume that some checks were run elsewhere\n     // (see https://github.com/rust-lang/rust/pull/73566#issuecomment-656954425),\n     // so type-check everything other than function bodies in this crate before running lints.\n@@ -492,6 +491,7 @@ crate fn run_global_ctxt(\n             tcx.ensure().check_mod_attrs(module);\n         }\n     });\n+    rustc_passes::stability::check_unused_or_stable_features(tcx);\n \n     let access_levels = tcx.privacy_access_levels(LOCAL_CRATE);\n     // Convert from a HirId set to a DefId set since we don't always have easy access\n@@ -504,17 +504,12 @@ crate fn run_global_ctxt(\n             .collect(),\n     };\n \n-    let mut renderinfo = RenderInfo::default();\n-    renderinfo.access_levels = access_levels;\n-    renderinfo.output_format = output_format;\n-\n     let mut ctxt = DocContext {\n         tcx,\n         resolver,\n         param_env: ParamEnv::empty(),\n         external_traits: Default::default(),\n         active_extern_traits: Default::default(),\n-        renderinfo,\n         ty_substs: Default::default(),\n         lt_substs: Default::default(),\n         ct_substs: Default::default(),\n@@ -527,9 +522,11 @@ crate fn run_global_ctxt(\n             .cloned()\n             .filter(|trait_def_id| tcx.trait_is_auto(*trait_def_id))\n             .collect(),\n-        render_options,\n         module_trait_cache: RefCell::new(FxHashMap::default()),\n-        cache: Cache::default(),\n+        cache: Cache::new(access_levels, render_options.document_private),\n+        inlined: FxHashSet::default(),\n+        output_format,\n+        render_options,\n     };\n \n     // Small hack to force the Sized trait to be present.\n@@ -647,10 +644,16 @@ crate fn run_global_ctxt(\n \n     ctxt.sess().abort_if_errors();\n \n+    let render_options = ctxt.render_options;\n+    let mut cache = ctxt.cache;\n+    krate = tcx.sess.time(\"create_format_cache\", || {\n+        cache.populate(krate, tcx, &render_options.extern_html_root_urls, &render_options.output)\n+    });\n+\n     // The main crate doc comments are always collapsed.\n     krate.collapsed = true;\n \n-    (krate, ctxt.renderinfo, ctxt.render_options)\n+    (krate, render_options, cache)\n }\n \n /// Due to <https://github.com/rust-lang/rust/pull/73566>,"}, {"sha": "f20296f4fe1480f333117bdb15c51805fc1f100b", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 24, "deletions": 48, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -11,7 +11,6 @@ use rustc_span::symbol::sym;\n use rustc_span::Symbol;\n \n use crate::clean::{self, GetDefId};\n-use crate::config::RenderInfo;\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n@@ -131,44 +130,23 @@ struct CacheBuilder<'a, 'tcx> {\n }\n \n impl Cache {\n-    crate fn from_krate<'tcx>(\n-        render_info: RenderInfo,\n-        document_private: bool,\n+    crate fn new(access_levels: AccessLevels<DefId>, document_private: bool) -> Self {\n+        Cache { access_levels, document_private, ..Cache::default() }\n+    }\n+\n+    /// Populates the `Cache` with more data. The returned `Crate` will be missing some data that was\n+    /// in `krate` due to the data being moved into the `Cache`.\n+    crate fn populate(\n+        &mut self,\n+        mut krate: clean::Crate,\n+        tcx: TyCtxt<'_>,\n         extern_html_root_urls: &BTreeMap<String, String>,\n         dst: &Path,\n-        mut krate: clean::Crate,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> (clean::Crate, Cache) {\n+    ) -> clean::Crate {\n         // Crawl the crate to build various caches used for the output\n-        let RenderInfo {\n-            inlined: _,\n-            external_paths,\n-            exact_paths,\n-            access_levels,\n-            deref_trait_did,\n-            deref_mut_trait_did,\n-            owned_box_did,\n-            ..\n-        } = render_info;\n-\n-        let external_paths =\n-            external_paths.into_iter().map(|(k, (v, t))| (k, (v, ItemType::from(t)))).collect();\n-\n-        let mut cache = Cache {\n-            external_paths,\n-            exact_paths,\n-            parent_is_trait_impl: false,\n-            stripped_mod: false,\n-            access_levels,\n-            crate_version: krate.version.take(),\n-            document_private,\n-            traits: krate.external_traits.replace(Default::default()),\n-            deref_trait_did,\n-            deref_mut_trait_did,\n-            owned_box_did,\n-            masked_crates: mem::take(&mut krate.masked_crates),\n-            ..Cache::default()\n-        };\n+        debug!(?self.crate_version);\n+        self.traits = krate.external_traits.take();\n+        self.masked_crates = mem::take(&mut krate.masked_crates);\n \n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n@@ -181,12 +159,11 @@ impl Cache {\n                 _ => PathBuf::new(),\n             };\n             let extern_url = extern_html_root_urls.get(&*e.name.as_str()).map(|u| &**u);\n-            cache\n-                .extern_locations\n+            self.extern_locations\n                 .insert(n, (e.name, src_root, extern_location(e, extern_url, &dst)));\n \n             let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n-            cache.external_paths.insert(did, (vec![e.name.to_string()], ItemType::Module));\n+            self.external_paths.insert(did, (vec![e.name.to_string()], ItemType::Module));\n         }\n \n         // Cache where all known primitives have their documentation located.\n@@ -195,27 +172,26 @@ impl Cache {\n         // reverse topological order.\n         for &(_, ref e) in krate.externs.iter().rev() {\n             for &(def_id, prim) in &e.primitives {\n-                cache.primitive_locations.insert(prim, def_id);\n+                self.primitive_locations.insert(prim, def_id);\n             }\n         }\n         for &(def_id, prim) in &krate.primitives {\n-            cache.primitive_locations.insert(prim, def_id);\n+            self.primitive_locations.insert(prim, def_id);\n         }\n \n-        cache.stack.push(krate.name.to_string());\n+        self.stack.push(krate.name.to_string());\n \n-        krate = CacheBuilder { tcx, cache: &mut cache, empty_cache: Cache::default() }\n-            .fold_crate(krate);\n+        krate = CacheBuilder { tcx, cache: self, empty_cache: Cache::default() }.fold_crate(krate);\n \n-        for (trait_did, dids, impl_) in cache.orphan_trait_impls.drain(..) {\n-            if cache.traits.contains_key(&trait_did) {\n+        for (trait_did, dids, impl_) in self.orphan_trait_impls.drain(..) {\n+            if self.traits.contains_key(&trait_did) {\n                 for did in dids {\n-                    cache.impls.entry(did).or_default().push(impl_.clone());\n+                    self.impls.entry(did).or_default().push(impl_.clone());\n                 }\n             }\n         }\n \n-        (krate, cache)\n+        krate\n     }\n }\n "}, {"sha": "b779363e5c701d7bfca255794be71f86175d8eb3", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -2,7 +2,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::edition::Edition;\n \n use crate::clean;\n-use crate::config::{RenderInfo, RenderOptions};\n+use crate::config::RenderOptions;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n \n@@ -18,7 +18,6 @@ crate trait FormatRenderer<'tcx>: Clone {\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n-        render_info: RenderInfo,\n         edition: Edition,\n         cache: Cache,\n         tcx: TyCtxt<'tcx>,\n@@ -49,26 +48,16 @@ crate trait FormatRenderer<'tcx>: Clone {\n crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     options: RenderOptions,\n-    render_info: RenderInfo,\n+    cache: Cache,\n     diag: &rustc_errors::Handler,\n     edition: Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> Result<(), Error> {\n-    let (krate, cache) = tcx.sess.time(\"create_format_cache\", || {\n-        Cache::from_krate(\n-            render_info.clone(),\n-            options.document_private,\n-            &options.extern_html_root_urls,\n-            &options.output,\n-            krate,\n-            tcx,\n-        )\n-    });\n     let prof = &tcx.sess.prof;\n \n     let (mut format_renderer, mut krate) = prof\n         .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n-        .run(|| T::init(krate, options, render_info, edition, cache, tcx))?;\n+        .run(|| T::init(krate, options, edition, cache, tcx))?;\n \n     let mut item = match krate.module.take() {\n         Some(i) => i,"}, {"sha": "4e762a40f08491849d63c514d63a738ba4fb2680", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -66,7 +66,7 @@ use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n use crate::clean::{self, AttributesExt, GetDefId, RenderedLink, SelfTy, TypeKind};\n-use crate::config::{RenderInfo, RenderOptions};\n+use crate::config::RenderOptions;\n use crate::docfs::{DocFS, PathError};\n use crate::error::Error;\n use crate::formats::cache::Cache;\n@@ -385,7 +385,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,\n-        _render_info: RenderInfo,\n         edition: Edition,\n         mut cache: Cache,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "e6edf33d23c8d08056ebf69dc087e5c879bfe5f9", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -19,7 +19,7 @@ use rustc_span::edition::Edition;\n use rustdoc_json_types as types;\n \n use crate::clean;\n-use crate::config::{RenderInfo, RenderOptions};\n+use crate::config::RenderOptions;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::FormatRenderer;\n@@ -133,7 +133,6 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n-        _render_info: RenderInfo,\n         _edition: Edition,\n         cache: Cache,\n         tcx: TyCtxt<'tcx>,\n@@ -200,7 +199,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n     fn after_krate(\n         &mut self,\n-        krate: &clean::Crate,\n+        _krate: &clean::Crate,\n         _diag: &rustc_errors::Handler,\n     ) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n@@ -211,7 +210,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         #[allow(rustc::default_hash_types)]\n         let output = types::Crate {\n             root: types::Id(String::from(\"0:0\")),\n-            crate_version: krate.version.clone(),\n+            crate_version: self.cache.crate_version.clone(),\n             includes_private: self.cache.document_private,\n             index: index.into_iter().collect(),\n             paths: self"}, {"sha": "6b37643a39580fffe65f70c4ddfba28d2c68dc85", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 81, "deletions": 6, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -49,6 +49,7 @@ extern crate rustc_metadata;\n extern crate rustc_middle;\n extern crate rustc_mir;\n extern crate rustc_parse;\n+extern crate rustc_passes;\n extern crate rustc_resolve;\n extern crate rustc_session;\n extern crate rustc_span as rustc_span;\n@@ -94,14 +95,88 @@ mod visit_lib;\n pub fn main() {\n     rustc_driver::set_sigpipe_handler();\n     rustc_driver::install_ice_hook();\n+\n+    // When using CI artifacts (with `download_stage1 = true`), tracing is unconditionally built\n+    // with `--features=static_max_level_info`, which disables almost all rustdoc logging. To avoid\n+    // this, compile our own version of `tracing` that logs all levels.\n+    // NOTE: this compiles both versions of tracing unconditionally, because\n+    // - The compile time hit is not that bad, especially compared to rustdoc's incremental times, and\n+    // - Otherwise, there's no warning that logging is being ignored when `download_stage1 = true`.\n+    // NOTE: The reason this doesn't show double logging when `download_stage1 = false` and\n+    // `debug_logging = true` is because all rustc logging goes to its version of tracing (the one\n+    // in the sysroot), and all of rustdoc's logging goes to its version (the one in Cargo.toml).\n+    init_logging();\n     rustc_driver::init_env_logger(\"RUSTDOC_LOG\");\n+\n     let exit_code = rustc_driver::catch_with_exit_code(|| match get_args() {\n         Some(args) => main_args(&args),\n         _ => Err(ErrorReported),\n     });\n     process::exit(exit_code);\n }\n \n+fn init_logging() {\n+    use std::io;\n+\n+    // FIXME remove these and use winapi 0.3 instead\n+    // Duplicates: bootstrap/compile.rs, librustc_errors/emitter.rs, rustc_driver/lib.rs\n+    #[cfg(unix)]\n+    fn stdout_isatty() -> bool {\n+        extern crate libc;\n+        unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n+    }\n+\n+    #[cfg(windows)]\n+    fn stdout_isatty() -> bool {\n+        extern crate winapi;\n+        use winapi::um::consoleapi::GetConsoleMode;\n+        use winapi::um::processenv::GetStdHandle;\n+        use winapi::um::winbase::STD_OUTPUT_HANDLE;\n+\n+        unsafe {\n+            let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n+            let mut out = 0;\n+            GetConsoleMode(handle, &mut out) != 0\n+        }\n+    }\n+\n+    let color_logs = match std::env::var(\"RUSTDOC_LOG_COLOR\") {\n+        Ok(value) => match value.as_ref() {\n+            \"always\" => true,\n+            \"never\" => false,\n+            \"auto\" => stdout_isatty(),\n+            _ => early_error(\n+                ErrorOutputType::default(),\n+                &format!(\n+                    \"invalid log color value '{}': expected one of always, never, or auto\",\n+                    value\n+                ),\n+            ),\n+        },\n+        Err(std::env::VarError::NotPresent) => stdout_isatty(),\n+        Err(std::env::VarError::NotUnicode(_value)) => early_error(\n+            ErrorOutputType::default(),\n+            \"non-Unicode log color value: expected one of always, never, or auto\",\n+        ),\n+    };\n+    let filter = tracing_subscriber::EnvFilter::from_env(\"RUSTDOC_LOG\");\n+    let layer = tracing_tree::HierarchicalLayer::default()\n+        .with_writer(io::stderr)\n+        .with_indent_lines(true)\n+        .with_ansi(color_logs)\n+        .with_targets(true)\n+        .with_wraparound(10)\n+        .with_verbose_exit(true)\n+        .with_verbose_entry(true)\n+        .with_indent_amount(2);\n+    #[cfg(parallel_compiler)]\n+    let layer = layer.with_thread_ids(true).with_thread_names(true);\n+\n+    use tracing_subscriber::layer::SubscriberExt;\n+    let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);\n+    tracing::subscriber::set_global_default(subscriber).unwrap();\n+}\n+\n fn get_args() -> Option<Vec<String>> {\n     env::args_os()\n         .enumerate()\n@@ -479,12 +554,12 @@ fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> MainRes\n fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     renderopts: config::RenderOptions,\n-    render_info: config::RenderInfo,\n+    cache: formats::cache::Cache,\n     diag: &rustc_errors::Handler,\n     edition: rustc_span::edition::Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> MainResult {\n-    match formats::run_format::<T>(krate, renderopts, render_info, &diag, edition, tcx) {\n+    match formats::run_format::<T>(krate, renderopts, cache, &diag, edition, tcx) {\n         Ok(_) => Ok(()),\n         Err(e) => {\n             let mut msg = diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n@@ -553,7 +628,7 @@ fn main_options(options: config::Options) -> MainResult {\n             let mut global_ctxt = abort_on_err(queries.global_ctxt(), sess).peek_mut();\n \n             global_ctxt.enter(|tcx| {\n-                let (mut krate, render_info, render_opts) = sess.time(\"run_global_ctxt\", || {\n+                let (krate, render_opts, mut cache) = sess.time(\"run_global_ctxt\", || {\n                     core::run_global_ctxt(\n                         tcx,\n                         resolver,\n@@ -565,7 +640,7 @@ fn main_options(options: config::Options) -> MainResult {\n                 });\n                 info!(\"finished with rustc\");\n \n-                krate.version = crate_version;\n+                cache.crate_version = crate_version;\n \n                 if show_coverage {\n                     // if we ran coverage, bail early, we don't need to also generate docs at this point\n@@ -584,7 +659,7 @@ fn main_options(options: config::Options) -> MainResult {\n                         run_renderer::<html::render::Context<'_>>(\n                             krate,\n                             render_opts,\n-                            render_info,\n+                            cache,\n                             &diag,\n                             edition,\n                             tcx,\n@@ -594,7 +669,7 @@ fn main_options(options: config::Options) -> MainResult {\n                         run_renderer::<json::JsonRenderer<'_>>(\n                             krate,\n                             render_opts,\n-                            render_info,\n+                            cache,\n                             &diag,\n                             edition,\n                             tcx,"}, {"sha": "bb54523871c3ec99d70fcd09d565d2cf7eba142a", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -127,7 +127,7 @@ impl<'a, 'b> CoverageCalculator<'a, 'b> {\n     }\n \n     fn print_results(&self) {\n-        let output_format = self.ctx.renderinfo.output_format;\n+        let output_format = self.ctx.output_format;\n         if output_format.is_json() {\n             println!(\"{}\", self.to_json());\n             return;"}, {"sha": "685451b87eda99f528eda378a4039599d09a2da3", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -47,7 +47,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n                 // FIXME(eddyb) is this `doc(hidden)` check needed?\n                 if !cx.tcx.get_attrs(def_id).lists(sym::doc).has_word(sym::hidden) {\n                     let impls = get_auto_trait_and_blanket_impls(cx, def_id);\n-                    new_items.extend(impls.filter(|i| cx.renderinfo.inlined.insert(i.def_id)));\n+                    new_items.extend(impls.filter(|i| cx.inlined.insert(i.def_id)));\n                 }\n             });\n         }"}, {"sha": "3b1508c1348578b077426f30e58b4fe7793e1676", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -97,7 +97,7 @@ crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {\n                 |lint| lint.build(\"missing code example in this documentation\").emit(),\n             );\n         }\n-    } else if tests.found_tests > 0 && !cx.renderinfo.access_levels.is_public(item.def_id) {\n+    } else if tests.found_tests > 0 && !cx.cache.access_levels.is_public(item.def_id) {\n         cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,"}, {"sha": "fc8bbc97150298a3524e8dcd52622a810833f0f3", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -17,13 +17,12 @@ crate const STRIP_PRIVATE: Pass = Pass {\n crate fn strip_private(mut krate: clean::Crate, cx: &mut DocContext<'_>) -> clean::Crate {\n     // This stripper collects all *retained* nodes.\n     let mut retained = DefIdSet::default();\n-    let access_levels = cx.renderinfo.access_levels.clone();\n \n     // strip all private items\n     {\n         let mut stripper = Stripper {\n             retained: &mut retained,\n-            access_levels: &access_levels,\n+            access_levels: &cx.cache.access_levels,\n             update_retained: true,\n         };\n         krate = ImportStripper.fold_crate(stripper.fold_crate(krate));"}, {"sha": "5da7d2f1e9b843d22c3bae695a451b9ca9d7c66a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             assert_eq!(cur_mod_def_id, macro_parent_def_id);\n             cur_mod.macros.push((def, None));\n         }\n-        self.cx.renderinfo.exact_paths = self.exact_paths;\n+        self.cx.cache.exact_paths = self.exact_paths;\n         top_level_module\n     }\n \n@@ -199,7 +199,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     } else {\n                         // All items need to be handled here in case someone wishes to link\n                         // to them with intra-doc links\n-                        self.cx.renderinfo.access_levels.map.insert(did, AccessLevel::Public);\n+                        self.cx.cache.access_levels.map.insert(did, AccessLevel::Public);\n                     }\n                 }\n             }\n@@ -211,7 +211,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             None => return false,\n         };\n \n-        let is_private = !self.cx.renderinfo.access_levels.is_public(res_did);\n+        let is_private = !self.cx.cache.access_levels.is_public(res_did);\n         let is_hidden = inherits_doc_hidden(self.cx, res_hir_id);\n \n         // Only inline if requested or if the item would otherwise be stripped."}, {"sha": "3e06b4173144ca4a26d5a7831d5e8f680c21c3aa", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -25,7 +25,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n     crate fn new(cx: &'a mut crate::core::DocContext<'tcx>) -> LibEmbargoVisitor<'a, 'tcx> {\n         LibEmbargoVisitor {\n             tcx: cx.tcx,\n-            access_levels: &mut cx.renderinfo.access_levels,\n+            access_levels: &mut cx.cache.access_levels,\n             prev_level: Some(AccessLevel::Public),\n             visited_mods: FxHashSet::default(),\n         }"}, {"sha": "5bb66f7f6fd7c1b257f4277c49643b4d63ee718b", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -1,6 +1,8 @@\n // edition:2018\n+// compile-flags: --crate-version 1.0.0\n \n-// @is nested.json \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n+// @is nested.json \"$.crate_version\" \\\"1.0.0\\\"\n+// @is - \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n // @is - \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n // @count - \"$.index[*][?(@.name=='nested')].inner.items[*]\" 1\n "}, {"sha": "ca626afbe53597da12aa95a432baf8ee80e8540f", "filename": "src/test/rustdoc-ui/deprecated-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeprecated-attrs.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![doc(no_default_passes, passes = \"collapse-docs unindent-comments\")]\n+#![doc(no_default_passes, passes = \"unindent-comments\")]\n \n struct SomeStruct;\n "}, {"sha": "37c69a214b8edb2adf2b41863e2115aca289a286", "filename": "src/test/rustdoc-ui/doc-attr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,5 @@\n+#![crate_type = \"lib\"]\n+#![doc(as_ptr)] //~ ERROR\n+\n+#[doc(as_ptr)] //~ ERROR\n+pub fn foo() {}"}, {"sha": "17bc3d6a45a05a06183f8f5e6c27547cba08f52f", "filename": "src/test/rustdoc-ui/doc-attr.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-attr.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,14 @@\n+error: unknown `doc` attribute `as_ptr`\n+  --> $DIR/doc-attr.rs:4:7\n+   |\n+LL | #[doc(as_ptr)]\n+   |       ^^^^^^\n+\n+error: unknown `doc` attribute `as_ptr`\n+  --> $DIR/doc-attr.rs:2:8\n+   |\n+LL | #![doc(as_ptr)]\n+   |        ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "731cc8ba61750873417cdf2edc06b7450538c876", "filename": "src/test/rustdoc-ui/rustc-check-passes.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,4 @@\n+#![feature(box_syntax)]\n+#![feature(box_syntax)] //~ ERROR\n+\n+pub fn foo() {}"}, {"sha": "9707895ff3dfe9edcea5ede5b23d71f53e512e5b", "filename": "src/test/rustdoc-ui/rustc-check-passes.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Frustc-check-passes.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,9 @@\n+error[E0636]: the feature `box_syntax` has already been declared\n+  --> $DIR/rustc-check-passes.rs:2:12\n+   |\n+LL | #![feature(box_syntax)]\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0636`."}, {"sha": "a1f3fd5a8c5affb018e2629f13dbe75d3fb57962", "filename": "src/test/rustdoc/implementor-stable-version.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc%2Fimplementor-stable-version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Frustdoc%2Fimplementor-stable-version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimplementor-stable-version.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -1,3 +1,4 @@\n+#![stable(feature = \"bar\", since = \"OLD 1.0\")]\n #![crate_name = \"foo\"]\n \n #![feature(staged_api)]\n@@ -8,6 +9,7 @@ pub trait Bar {}\n #[stable(feature = \"baz\", since = \"OLD 1.0\")]\n pub trait Baz {}\n \n+#[stable(feature = \"baz\", since = \"OLD 1.0\")]\n pub struct Foo;\n \n // @has foo/trait.Bar.html '//div[@id=\"implementors-list\"]//span[@class=\"since\"]' 'NEW 2.0'"}, {"sha": "37c69a214b8edb2adf2b41863e2115aca289a286", "filename": "src/test/ui/attributes/doc-attr.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,5 @@\n+#![crate_type = \"lib\"]\n+#![doc(as_ptr)] //~ ERROR\n+\n+#[doc(as_ptr)] //~ ERROR\n+pub fn foo() {}"}, {"sha": "17bc3d6a45a05a06183f8f5e6c27547cba08f52f", "filename": "src/test/ui/attributes/doc-attr.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fdoc-attr.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,14 @@\n+error: unknown `doc` attribute `as_ptr`\n+  --> $DIR/doc-attr.rs:4:7\n+   |\n+LL | #[doc(as_ptr)]\n+   |       ^^^^^^\n+\n+error: unknown `doc` attribute `as_ptr`\n+  --> $DIR/doc-attr.rs:2:8\n+   |\n+LL | #![doc(as_ptr)]\n+   |        ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "718a19067a6ac005fde6755a69d8b542eae08d26", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,17 @@\n+// This is a separate test from `issue-66693.rs` because array lengths are evaluated\n+// in a separate stage before `const`s and `statics` and so the error below is hit and\n+// the compiler exits before generating errors for the others.\n+\n+#![feature(const_panic)]\n+\n+fn main() {\n+    let _ = [0i32; panic!(2f32)];\n+    //~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n+\n+    // ensure that conforming panics are handled correctly\n+    let _ = [false; panic!()];\n+    //~^ ERROR: evaluation of constant value failed\n+\n+    // typechecking halts before getting to this one\n+    let _ = ['a', panic!(\"panic in array len\")];\n+}"}, {"sha": "e0ca9dfde0bf91dea3abe9ce5f68e2b90f2ec244", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,19 @@\n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693-panic-in-array-len.rs:8:20\n+   |\n+LL |     let _ = [0i32; panic!(2f32)];\n+   |                    ^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-66693-panic-in-array-len.rs:12:21\n+   |\n+LL |     let _ = [false; panic!()];\n+   |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-66693-panic-in-array-len.rs:12:21\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "77fe4417d5b10b33932135ba1b03b469985c6490", "filename": "src/test/ui/consts/issue-66693.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,24 @@\n+// Tests that the compiler does not ICE when const-evaluating a `panic!()` invocation with a\n+// non-`&str` argument.\n+\n+#![feature(const_panic)]\n+\n+const _: () = panic!(1);\n+//~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n+\n+static _FOO: () = panic!(true);\n+//~^ ERROR: argument to `panic!()` in a const context must have type `&str`\n+\n+const fn _foo() {\n+    panic!(&1); //~ ERROR: argument to `panic!()` in a const context must have type `&str`\n+}\n+\n+// ensure that conforming panics don't cause an error\n+const _: () = panic!();\n+static _BAR: () = panic!(\"panic in static\");\n+\n+const fn _bar() {\n+    panic!(\"panic in const fn\");\n+}\n+\n+fn main() {}"}, {"sha": "6bbde057ead7f43adc04728d2e63515837f228dc", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,26 @@\n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693.rs:13:5\n+   |\n+LL |     panic!(&1);\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693.rs:6:15\n+   |\n+LL | const _: () = panic!(1);\n+   |               ^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: argument to `panic!()` in a const context must have type `&str`\n+  --> $DIR/issue-66693.rs:9:19\n+   |\n+LL | static _FOO: () = panic!(true);\n+   |                   ^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "d511f75df812976b00efb2663aa4692e7bef8dad", "filename": "src/test/ui/consts/issue-76064.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -1,3 +1,5 @@\n-struct Bug([u8; panic!(1)]); //~ ERROR panicking in constants is unstable\n+// Note: non-`&str` panic arguments gained a separate error in PR #80734\n+// which is why this doesn't match the issue\n+struct Bug([u8; panic!(\"panic\")]); //~ ERROR panicking in constants is unstable\n \n fn main() {}"}, {"sha": "9bda1b7570d56c122dde437fc9ccd19eccedf08d", "filename": "src/test/ui/consts/issue-76064.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: panicking in constants is unstable\n-  --> $DIR/issue-76064.rs:1:17\n+  --> $DIR/issue-76064.rs:3:17\n    |\n-LL | struct Bug([u8; panic!(1)]);\n-   |                 ^^^^^^^^^\n+LL | struct Bug([u8; panic!(\"panic\")]);\n+   |                 ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable"}, {"sha": "2ef655efdbdf045d8e19bc22c190ca060c562af5", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -12,16 +12,16 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n \n warning: unused variable: `mut_unused_var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:13\n    |\n LL |     let mut mut_unused_var = 1;\n-   |         ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mut_unused_var`\n+   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mut_unused_var`\n \n warning: unused variable: `var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:10\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:14\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n-   |          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_var`\n+   |              ^^^ help: if this is intentional, prefix it with an underscore: `_var`\n \n warning: unused variable: `unused_var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:19\n@@ -36,10 +36,10 @@ LL |     if let SoulHistory { corridors_of_light,\n    |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n \n warning: variable `hours_are_suns` is assigned to, but never used\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:30\n    |\n LL |                          mut hours_are_suns,\n-   |                          ^^^^^^^^^^^^^^^^^^\n+   |                              ^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n "}, {"sha": "aac918f2bc8179d66e535c6c76470a030ebe3b86", "filename": "src/test/ui/lint/issue-81314-unused-span-ident.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.fixed?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+// Regression test for #81314: Unused variable lint should\n+// span only the identifier and not the rest of the pattern\n+\n+#![deny(unused)]\n+\n+fn main() {\n+    let [_rest @ ..] = [1, 2, 3]; //~ ERROR unused variable\n+}\n+\n+pub fn foo([_rest @ ..]: &[i32]) { //~ ERROR unused variable\n+}"}, {"sha": "78296f4258d73c6f9756f2cb4496c1056fcefffc", "filename": "src/test/ui/lint/issue-81314-unused-span-ident.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.rs?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+// Regression test for #81314: Unused variable lint should\n+// span only the identifier and not the rest of the pattern\n+\n+#![deny(unused)]\n+\n+fn main() {\n+    let [rest @ ..] = [1, 2, 3]; //~ ERROR unused variable\n+}\n+\n+pub fn foo([rest @ ..]: &[i32]) { //~ ERROR unused variable\n+}"}, {"sha": "519c71e941311a7e23c30aa31acf1f9561806779", "filename": "src/test/ui/lint/issue-81314-unused-span-ident.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-81314-unused-span-ident.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -0,0 +1,21 @@\n+error: unused variable: `rest`\n+  --> $DIR/issue-81314-unused-span-ident.rs:8:10\n+   |\n+LL |     let [rest @ ..] = [1, 2, 3];\n+   |          ^^^^ help: if this is intentional, prefix it with an underscore: `_rest`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-81314-unused-span-ident.rs:5:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n+\n+error: unused variable: `rest`\n+  --> $DIR/issue-81314-unused-span-ident.rs:11:13\n+   |\n+LL | pub fn foo([rest @ ..]: &[i32]) {\n+   |             ^^^^ help: if this is intentional, prefix it with an underscore: `_rest`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b1beec97df568ae97d18dabe421d20d174f0fa7d", "filename": "src/test/ui/liveness/liveness-consts.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-consts.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -1,8 +1,8 @@\n warning: variable `a` is assigned to, but never used\n-  --> $DIR/liveness-consts.rs:7:9\n+  --> $DIR/liveness-consts.rs:7:13\n    |\n LL |     let mut a = 0;\n-   |         ^^^^^\n+   |             ^\n    |\n note: the lint level is defined here\n   --> $DIR/liveness-consts.rs:2:9"}, {"sha": "12680ab11568fb05a6f0d54a86a578249b9868ac", "filename": "src/test/ui/liveness/liveness-dead.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-dead.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -1,8 +1,8 @@\n error: value assigned to `x` is never read\n-  --> $DIR/liveness-dead.rs:9:9\n+  --> $DIR/liveness-dead.rs:9:13\n    |\n LL |     let mut x: isize = 3;\n-   |         ^^^^^\n+   |             ^\n    |\n note: the lint level is defined here\n   --> $DIR/liveness-dead.rs:2:9\n@@ -20,10 +20,10 @@ LL |     x = 4;\n    = help: maybe it is overwritten before being read?\n \n error: value passed to `x` is never read\n-  --> $DIR/liveness-dead.rs:20:7\n+  --> $DIR/liveness-dead.rs:20:11\n    |\n LL | fn f4(mut x: i32) {\n-   |       ^^^^^\n+   |           ^\n    |\n    = help: maybe it is overwritten before being read?\n "}, {"sha": "4a6122681a946d584c8af9a05fa3311a3d882459", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef0d5924c25b500b2b135e5a5f41754ab4a72e26/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=ef0d5924c25b500b2b135e5a5f41754ab4a72e26", "patch": "@@ -44,10 +44,10 @@ LL |     let x = 3;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: variable `x` is assigned to, but never used\n-  --> $DIR/liveness-unused.rs:30:9\n+  --> $DIR/liveness-unused.rs:30:13\n    |\n LL |     let mut x = 3;\n-   |         ^^^^^\n+   |             ^\n    |\n    = note: consider using `_x` instead\n \n@@ -65,10 +65,10 @@ LL | #![deny(unused_assignments)]\n    = help: maybe it is overwritten before being read?\n \n error: variable `z` is assigned to, but never used\n-  --> $DIR/liveness-unused.rs:37:9\n+  --> $DIR/liveness-unused.rs:37:13\n    |\n LL |     let mut z = 3;\n-   |         ^^^^^\n+   |             ^\n    |\n    = note: consider using `_z` instead\n "}]}