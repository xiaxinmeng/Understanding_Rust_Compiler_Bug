{"sha": "739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOWQ4OWFlZjVjOGEwZmJlNjMxNGQwZGM5YTY4MWRiMWZmMTM2YzQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-17T12:48:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-17T12:48:50Z"}, "message": "Rollup merge of #40452 - frewsxcv:frewsxcv-unstable-docs, r=GuillaumeGomez\n\nAdd basic documentation/examples for six unstable features.", "tree": {"sha": "78aa5965e2a46b491da1b4b7d422793242179aa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78aa5965e2a46b491da1b4b7d422793242179aa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "html_url": "https://github.com/rust-lang/rust/commit/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ad185071694fa638344fdf1ce088dd71849ba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ad185071694fa638344fdf1ce088dd71849ba0", "html_url": "https://github.com/rust-lang/rust/commit/01ad185071694fa638344fdf1ce088dd71849ba0"}, {"sha": "d3ae2eb58ea2f96aa52b53d9171111b176b611eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ae2eb58ea2f96aa52b53d9171111b176b611eb", "html_url": "https://github.com/rust-lang/rust/commit/d3ae2eb58ea2f96aa52b53d9171111b176b611eb"}], "stats": {"total": 121, "additions": 120, "deletions": 1}, "files": [{"sha": "5f3b9c4c6a7be1f177d6024cb83d150b6479148a", "filename": "cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "patch": "@@ -1 +1 @@\n-Subproject commit 4a3c0a63b07e9a4feb41cb11de37c92a09db5a60\n+Subproject commit 5f3b9c4c6a7be1f177d6024cb83d150b6479148a"}, {"sha": "ecfd34a22e5ccbd39794a260879eb88317088e09", "filename": "src/doc/unstable-book/src/concat-idents.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconcat-idents.md?ref=739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "patch": "@@ -6,5 +6,17 @@ The tracking issue for this feature is: [#29599]\n \n ------------------------\n \n+The `concat_idents` feature adds a macro for concatenating multiple identifiers\n+into one identifier.\n \n+## Examples\n \n+```rust\n+#![feature(concat_idents)]\n+\n+fn main() {\n+    fn foobar() -> u32 { 23 }\n+    let f = concat_idents!(foo, bar);\n+    assert_eq!(f(), 23);\n+}\n+```\n\\ No newline at end of file"}, {"sha": "62a7f8c16a0a71d5c09b64883d6191fe42e1bf15", "filename": "src/doc/unstable-book/src/conservative-impl-trait.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconservative-impl-trait.md?ref=739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "patch": "@@ -6,5 +6,61 @@ The tracking issue for this feature is: [#34511]\n \n ------------------------\n \n+The `conservative_impl_trait` feature allows a conservative form of abstract\n+return types.\n \n+Abstract return types allow a function to hide a concrete return type behind a\n+trait interface similar to trait objects, while still generating the same\n+statically dispatched code as with concrete types.\n \n+## Examples\n+\n+```rust\n+#![feature(conservative_impl_trait)]\n+\n+fn even_iter() -> impl Iterator<Item=u32> {\n+    (0..).map(|n| n * 2)\n+}\n+\n+fn main() {\n+    let first_four_even_numbers = even_iter().take(4).collect::<Vec<_>>();\n+    assert_eq!(first_four_even_numbers, vec![0, 2, 4, 6]);\n+}\n+```\n+\n+## Background\n+\n+In today's Rust, you can write function signatures like:\n+\n+````rust,ignore\n+fn consume_iter_static<I: Iterator<u8>>(iter: I) { }\n+\n+fn consume_iter_dynamic(iter: Box<Iterator<u8>>) { }\n+````\n+\n+In both cases, the function does not depend on the exact type of the argument.\n+The type held is \"abstract\", and is assumed only to satisfy a trait bound.\n+\n+* In the `_static` version using generics, each use of the function is\n+  specialized to a concrete, statically-known type, giving static dispatch,\n+  inline layout, and other performance wins.\n+* In the `_dynamic` version using trait objects, the concrete argument type is\n+  only known at runtime using a vtable.\n+\n+On the other hand, while you can write:\n+\n+````rust,ignore\n+fn produce_iter_dynamic() -> Box<Iterator<u8>> { }\n+````\n+\n+...but you _cannot_ write something like:\n+\n+````rust,ignore\n+fn produce_iter_static() -> Iterator<u8> { }\n+````\n+\n+That is, in today's Rust, abstract return types can only be written using trait\n+objects, which can be a significant performance penalty. This RFC proposes\n+\"unboxed abstract types\" as a way of achieving signatures like\n+`produce_iter_static`. Like generics, unboxed abstract types guarantee static\n+dispatch and inline data layout."}, {"sha": "d5a22436838623d7729d6dbf976ae28bcf2527ed", "filename": "src/doc/unstable-book/src/const-fn.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-fn.md?ref=739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "patch": "@@ -6,5 +6,24 @@ The tracking issue for this feature is: [#24111]\n \n ------------------------\n \n+The `const_fn` feature allows marking free functions and inherent methods as\n+`const`, enabling them to be called in constants contexts, with constant\n+arguments.\n \n+## Examples\n \n+```rust\n+#![feature(const_fn)]\n+\n+const fn double(x: i32) -> i32 {\n+    x * 2\n+}\n+\n+const FIVE: i32 = 5;\n+const TEN: i32 = double(FIVE);\n+\n+fn main() {\n+    assert_eq!(5, FIVE);\n+    assert_eq!(10, TEN);\n+}\n+```"}, {"sha": "42d46ce15f676e552025619097bd9c90c17730e3", "filename": "src/doc/unstable-book/src/const-indexing.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md", "raw_url": "https://github.com/rust-lang/rust/raw/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fconst-indexing.md?ref=739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "patch": "@@ -6,5 +6,14 @@ The tracking issue for this feature is: [#29947]\n \n ------------------------\n \n+The `const_indexing` feature allows the constant evaluation of index operations\n+on constant arrays and repeat expressions.\n \n+## Examples\n \n+```rust\n+#![feature(const_indexing)]\n+\n+const ARR: [usize; 5] = [1, 2, 3, 4, 5];\n+const ARR2: [usize; ARR[1]] = [42, 99];\n+```\n\\ No newline at end of file"}, {"sha": "a850b7644c3a76fee296606cf1ea858640251c41", "filename": "src/doc/unstable-book/src/i128-type.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128-type.md", "raw_url": "https://github.com/rust-lang/rust/raw/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128-type.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fi128-type.md?ref=739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "patch": "@@ -6,5 +6,20 @@ The tracking issue for this feature is: [#35118]\n \n ------------------------\n \n+The `i128_type` feature adds support for 128 bit signed and unsigned integer\n+types.\n \n+```rust\n+#![feature(i128_type)]\n+\n+fn main() {\n+    assert_eq!(1u128 + 1u128, 2u128);\n+    assert_eq!(u128::min_value(), 0);\n+    assert_eq!(u128::max_value(), 340282366920938463463374607431768211455);\n+\n+    assert_eq!(1i128 - 2i128, -1i128);\n+    assert_eq!(i128::min_value(), -170141183460469231731687303715884105728);\n+    assert_eq!(i128::max_value(), 170141183460469231731687303715884105727);\n+}\n+```\n "}, {"sha": "d5600c58fd9a657fff7c7e8c4c992335a2b4f666", "filename": "src/doc/unstable-book/src/non-ascii-idents.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/739d89aef5c8a0fbe6314d0dc9a681db1ff136c4/src%2Fdoc%2Funstable-book%2Fsrc%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fnon-ascii-idents.md?ref=739d89aef5c8a0fbe6314d0dc9a681db1ff136c4", "patch": "@@ -6,5 +6,13 @@ The tracking issue for this feature is: [#28979]\n \n ------------------------\n \n+The `non_ascii_idents` feature adds support for non-ASCII identifiers.\n \n+## Examples\n \n+```rust\n+#![feature(non_ascii_idents)]\n+\n+const \u03b5: f64 = 0.00001f64;\n+const \u03a0: f64 = 3.14f64;\n+```\n\\ No newline at end of file"}]}