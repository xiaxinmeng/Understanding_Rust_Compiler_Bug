{"sha": "7555e7081df536796aa7163a456b6f8cc4649595", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NTVlNzA4MWRmNTM2Nzk2YWE3MTYzYTQ1NmI2ZjhjYzQ2NDk1OTU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-15T07:06:56Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-15T07:06:56Z"}, "message": "comments", "tree": {"sha": "24a111c76cb74f405173d2223340a5ab8831cfea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a111c76cb74f405173d2223340a5ab8831cfea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7555e7081df536796aa7163a456b6f8cc4649595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7555e7081df536796aa7163a456b6f8cc4649595", "html_url": "https://github.com/rust-lang/rust/commit/7555e7081df536796aa7163a456b6f8cc4649595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7555e7081df536796aa7163a456b6f8cc4649595/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ca560d6abc0217943db436bb4b738bf6977cf93", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca560d6abc0217943db436bb4b738bf6977cf93", "html_url": "https://github.com/rust-lang/rust/commit/7ca560d6abc0217943db436bb4b738bf6977cf93"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "c5c4a75ef823bcae29a0567985f4f066db5085fd", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7555e7081df536796aa7163a456b6f8cc4649595/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7555e7081df536796aa7163a456b6f8cc4649595/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=7555e7081df536796aa7163a456b6f8cc4649595", "patch": "@@ -42,13 +42,16 @@ pub struct CrateData {\n     pub number: u32,\n }\n \n-// Data for any entity in the Rust language. The actual data contained varied\n-// with the kind of entity being queried. See the nested structs for details.\n+/// Data for any entity in the Rust language. The actual data contained varied\n+/// with the kind of entity being queried. See the nested structs for details.\n pub enum Data {\n+    /// Data for all kinds of functions and methods.\n     FunctionData(FunctionData),\n+    /// Data for local and global variables (consts and statics).\n     VariableData(VariableData),\n }\n \n+/// Data for all kinds of functions and methods.\n pub struct FunctionData {\n     pub id: NodeId,\n     pub name: String,\n@@ -58,6 +61,7 @@ pub struct FunctionData {\n     pub scope: NodeId,\n }\n \n+/// Data for local and global variables (consts and statics).\n pub struct VariableData {\n     pub id: NodeId,\n     pub name: String,"}, {"sha": "c3ac805af27ec1fcd6b5d684af0f353cb987b93d", "filename": "src/librustc_trans/save/span_utils.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7555e7081df536796aa7163a456b6f8cc4649595/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7555e7081df536796aa7163a456b6f8cc4649595/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fspan_utils.rs?ref=7555e7081df536796aa7163a456b6f8cc4649595", "patch": "@@ -230,8 +230,8 @@ impl<'a> SpanUtils<'a> {\n     // Reparse span and return an owned vector of sub spans of the first limit\n     // identifier tokens in the given nesting level.\n     // example with Foo<Bar<T,V>, Bar<T,V>>\n-    // Nesting = 0: all idents outside of brackets: Vec<Foo>\n-    // Nesting = 1: idents within one level of brackets: Vec<Bar, Bar>\n+    // Nesting = 0: all idents outside of brackets: [Foo]\n+    // Nesting = 1: idents within one level of brackets: [Bar, Bar]\n     pub fn spans_with_brackets(&self, span: Span, nesting: isize, limit: isize) -> Vec<Span> {\n         let mut result: Vec<Span> = vec!();\n \n@@ -260,10 +260,20 @@ impl<'a> SpanUtils<'a> {\n                 token::BinOp(token::Shr) => -2,\n                 _ => 0\n             };\n+\n             // Ignore the `>::` in `<Type as Trait>::AssocTy`.\n+\n+            // The root cause of this hack is that the AST representation of\n+            // qpaths is horrible. It treats <A as B>::C as a path with two\n+            // segments, B and C and notes that there is also a self type A at\n+            // position 0. Because we don't have spans for individual idents,\n+            // only the whole path, we have to iterate over the tokens in the\n+            // path, trying to pull out the non-nested idents (e.g., avoiding 'a\n+            // in `<A as B<'a>>::C`). So we end up with a span for `B>::C` from\n+            // the start of the first ident to the end of the path.\n             if !found_ufcs_sep && bracket_count == -1 {\n                 found_ufcs_sep = true;\n-                bracket_count += 1\n+                bracket_count += 1;\n             }\n             if ts.tok.is_ident() && bracket_count == nesting {\n                 result.push(self.make_sub_span(span, Some(ts.sp)).unwrap());\n@@ -332,7 +342,7 @@ impl<'a> SpanUtils<'a> {\n     }\n \n \n-    // Returns a list of the spans of idents in a patch.\n+    // Returns a list of the spans of idents in a path.\n     // E.g., For foo::bar<x,t>::baz, we return [foo, bar, baz] (well, their spans)\n     pub fn spans_for_path_segments(&self, path: &ast::Path) -> Vec<Span> {\n         if generated_code(path.span) {"}]}