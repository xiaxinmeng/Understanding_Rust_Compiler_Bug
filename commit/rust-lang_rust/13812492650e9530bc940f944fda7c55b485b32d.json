{"sha": "13812492650e9530bc940f944fda7c55b485b32d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzODEyNDkyNjUwZTk1MzBiYzk0MGY5NDRmZGE3YzU1YjQ4NWIzMmQ=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-03-22T02:55:52Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-03-22T02:55:52Z"}, "message": "implement `Clone` for `btree` iterators", "tree": {"sha": "125e57c2edc9726cb0a10c8cd235ec114486b53b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/125e57c2edc9726cb0a10c8cd235ec114486b53b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13812492650e9530bc940f944fda7c55b485b32d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13812492650e9530bc940f944fda7c55b485b32d", "html_url": "https://github.com/rust-lang/rust/commit/13812492650e9530bc940f944fda7c55b485b32d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13812492650e9530bc940f944fda7c55b485b32d/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf8c64e1b1b60f228f0c472c0b0dab4a5b5aa61", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf8c64e1b1b60f228f0c472c0b0dab4a5b5aa61", "html_url": "https://github.com/rust-lang/rust/commit/ecf8c64e1b1b60f228f0c472c0b0dab4a5b5aa61"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "b0ec559113b51769034c91f2cd70902ec42fe73a", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/13812492650e9530bc940f944fda7c55b485b32d/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13812492650e9530bc940f944fda7c55b485b32d/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=13812492650e9530bc940f944fda7c55b485b32d", "patch": "@@ -78,6 +78,7 @@ pub struct BTreeMap<K, V> {\n }\n \n /// An abstract base over-which all other BTree iterators are built.\n+#[derive(Clone)]\n struct AbsIter<T> {\n     traversals: VecDeque<T>,\n     size: usize,\n@@ -1034,6 +1035,9 @@ impl<K, V, E, T> DoubleEndedIterator for AbsIter<T> where\n     }\n }\n \n+impl<'a, K, V> Clone for Iter<'a, K, V> {\n+    fn clone(&self) -> Iter<'a, K, V> { Iter { inner: self.inner.clone() } }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Iter<'a, K, V> {\n     type Item = (&'a K, &'a V);\n@@ -1076,6 +1080,9 @@ impl<K, V> DoubleEndedIterator for IntoIter<K, V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> ExactSizeIterator for IntoIter<K, V> {}\n \n+impl<'a, K, V> Clone for Keys<'a, K, V> {\n+    fn clone(&self) -> Keys<'a, K, V> { Keys { inner: self.inner.clone() } }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     type Item = &'a K;\n@@ -1091,6 +1098,9 @@ impl<'a, K, V> DoubleEndedIterator for Keys<'a, K, V> {\n impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {}\n \n \n+impl<'a, K, V> Clone for Values<'a, K, V> {\n+    fn clone(&self) -> Values<'a, K, V> { Values { inner: self.inner.clone() } }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n     type Item = &'a V;\n@@ -1105,6 +1115,9 @@ impl<'a, K, V> DoubleEndedIterator for Values<'a, K, V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {}\n \n+impl<'a, K, V> Clone for Range<'a, K, V> {\n+    fn clone(&self) -> Range<'a, K, V> { Range { inner: self.inner.clone() } }\n+}\n impl<'a, K, V> Iterator for Range<'a, K, V> {\n     type Item = (&'a K, &'a V);\n "}, {"sha": "0af83280a41cf459b08255400c8f5f42c17264c4", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13812492650e9530bc940f944fda7c55b485b32d/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13812492650e9530bc940f944fda7c55b485b32d/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=13812492650e9530bc940f944fda7c55b485b32d", "patch": "@@ -1326,6 +1326,7 @@ trait TraversalImpl {\n \n /// A `TraversalImpl` that actually is backed by two iterators. This works in the non-moving case,\n /// as no deallocation needs to be done.\n+#[derive(Clone)]\n struct ElemsAndEdges<Elems, Edges>(Elems, Edges);\n \n impl<K, V, E, Elems: DoubleEndedIterator, Edges: DoubleEndedIterator>\n@@ -1404,6 +1405,7 @@ impl<K, V> Drop for MoveTraversalImpl<K, V> {\n }\n \n /// An abstraction over all the different kinds of traversals a node supports\n+#[derive(Clone)]\n struct AbsTraversal<Impl> {\n     inner: Impl,\n     head_is_edge: bool,"}, {"sha": "c0e4a32eee09ec8511f97320115ba3636747fc16", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/13812492650e9530bc940f944fda7c55b485b32d/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13812492650e9530bc940f944fda7c55b485b32d/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=13812492650e9530bc940f944fda7c55b485b32d", "patch": "@@ -628,6 +628,9 @@ impl<T: Debug> Debug for BTreeSet<T> {\n     }\n }\n \n+impl<'a, T> Clone for Iter<'a, T> {\n+    fn clone(&self) -> Iter<'a, T> { Iter { iter: self.iter.clone() } }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Iterator for Iter<'a, T> {\n     type Item = &'a T;\n@@ -658,6 +661,9 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n \n+impl<'a, T> Clone for Range<'a, T> {\n+    fn clone(&self) -> Range<'a, T> { Range { iter: self.iter.clone() } }\n+}\n impl<'a, T> Iterator for Range<'a, T> {\n     type Item = &'a T;\n \n@@ -677,6 +683,11 @@ fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>,\n     }\n }\n \n+impl<'a, T> Clone for Difference<'a, T> {\n+    fn clone(&self) -> Difference<'a, T> {\n+        Difference { a: self.a.clone(), b: self.b.clone() }\n+    }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: Ord> Iterator for Difference<'a, T> {\n     type Item = &'a T;\n@@ -692,6 +703,11 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n     }\n }\n \n+impl<'a, T> Clone for SymmetricDifference<'a, T> {\n+    fn clone(&self) -> SymmetricDifference<'a, T> {\n+        SymmetricDifference { a: self.a.clone(), b: self.b.clone() }\n+    }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n     type Item = &'a T;\n@@ -707,6 +723,11 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n     }\n }\n \n+impl<'a, T> Clone for Intersection<'a, T> {\n+    fn clone(&self) -> Intersection<'a, T> {\n+        Intersection { a: self.a.clone(), b: self.b.clone() }\n+    }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n     type Item = &'a T;\n@@ -728,6 +749,11 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n     }\n }\n \n+impl<'a, T> Clone for Union<'a, T> {\n+    fn clone(&self) -> Union<'a, T> {\n+        Union { a: self.a.clone(), b: self.b.clone() }\n+    }\n+}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: Ord> Iterator for Union<'a, T> {\n     type Item = &'a T;"}]}