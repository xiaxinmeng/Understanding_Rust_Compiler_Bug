{"sha": "040d9873aa6ca1ce458e98fec403cee8ec4f7ae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MGQ5ODczYWE2Y2ExY2U0NThlOThmZWM0MDNjZWU4ZWM0ZjdhZTg=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-04T19:46:13Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-05T04:36:18Z"}, "message": "Fix test", "tree": {"sha": "0dedcd737da075225336de8fb8db61e2340571cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dedcd737da075225336de8fb8db61e2340571cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/040d9873aa6ca1ce458e98fec403cee8ec4f7ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/040d9873aa6ca1ce458e98fec403cee8ec4f7ae8", "html_url": "https://github.com/rust-lang/rust/commit/040d9873aa6ca1ce458e98fec403cee8ec4f7ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/040d9873aa6ca1ce458e98fec403cee8ec4f7ae8/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09160d1b84a21ad2f11c3186bb2f07dc601dc9d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8", "html_url": "https://github.com/rust-lang/rust/commit/09160d1b84a21ad2f11c3186bb2f07dc601dc9d8"}], "stats": {"total": 284, "additions": 124, "deletions": 160}, "files": [{"sha": "cfa2873c68bad1ac1dda2fb10fbf22e74711da70", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "modified", "additions": 124, "deletions": 160, "changes": 284, "blob_url": "https://github.com/rust-lang/rust/blob/040d9873aa6ca1ce458e98fec403cee8ec4f7ae8/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040d9873aa6ca1ce458e98fec403cee8ec4f7ae8/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=040d9873aa6ca1ce458e98fec403cee8ec4f7ae8", "patch": "@@ -1,166 +1,130 @@\n // run-pass\n \n-#![feature(const_int_checked)]\n-#![feature(const_int_euclidean)]\n-#![feature(const_int_overflowing)]\n-#![feature(const_int_saturating)]\n-#![feature(const_int_wrapping)]\n-\n-macro_rules! assert_same_const {\n-    ($(const $ident:ident: $ty:ty = $exp:expr;)+) => {\n-        $(const $ident: $ty = $exp;)+\n-\n-        pub fn main() {\n-            $(assert_eq!($exp, $ident);)+\n+#![feature(saturating_neg)]\n+#![feature(const_checked_int_methods)]\n+#![feature(const_euclidean_int_methods)]\n+#![feature(const_overflowing_int_methods)]\n+#![feature(const_saturating_int_methods)]\n+#![feature(const_wrapping_int_methods)]\n+\n+use std::i8;\n+\n+macro_rules! suite {\n+    ($(\n+        $fn:ident -> $ty:ty { $( $label:ident : $expr:expr, $result:expr; )* }\n+    )*) => { $(\n+        fn $fn() {\n+            $(\n+                const $label: $ty = $expr;\n+                assert_eq!($label, $result);\n+            )*\n         }\n-    }\n+    )* }\n }\n \n-assert_same_const! {\n-    // `const_int_checked`\n-    const CHECKED_ADD_I32_A: Option<i32> = 5i32.checked_add(2);\n-    const CHECKED_ADD_I8_A: Option<i8> = 127i8.checked_add(2);\n-    const CHECKED_ADD_U8_A: Option<u8> = 255u8.checked_add(2);\n-\n-    const CHECKED_SUB_I32_A: Option<i32> = 5i32.checked_sub(2);\n-    const CHECKED_SUB_I8_A: Option<i8> = (-127 as i8).checked_sub(2);\n-    const CHECKED_SUB_U8_A: Option<u8> = 1u8.checked_sub(2);\n-\n-    const CHECKED_MUL_I32_A: Option<i32> = 5i32.checked_mul(7777);\n-    const CHECKED_MUL_I8_A: Option<i8> = (-127 as i8).checked_mul(-99);\n-    const CHECKED_MUL_U8_A: Option<u8> = 1u8.checked_mul(3);\n-\n-    const CHECKED_DIV_I32_A: Option<i32> = 5i32.checked_div(7777);\n-    const CHECKED_DIV_I8_A: Option<i8> = (-127 as i8).checked_div(-99);\n-    const CHECKED_DIV_U8_A: Option<u8> = 1u8.checked_div(3);\n-\n-    const CHECKED_REM_I32_A: Option<i32> = 5i32.checked_rem(7777);\n-    const CHECKED_REM_I8_A: Option<i8> = (-127 as i8).checked_rem(-99);\n-    const CHECKED_REM_U8_A: Option<u8> = 1u8.checked_rem(3);\n-    const CHECKED_REM_U8_B: Option<u8> = 1u8.checked_rem(0);\n-\n-    const CHECKED_NEG_I32_A: Option<i32> = 5i32.checked_neg();\n-    const CHECKED_NEG_I8_A: Option<i8> = (-127 as i8).checked_neg();\n-    const CHECKED_NEG_U8_A: Option<u8> = 1u8.checked_neg();\n-    const CHECKED_NEG_U8_B: Option<u8> = u8::min_value().checked_neg();\n-\n-    const CHECKED_SHL_I32_A: Option<i32> = 5i32.checked_shl(77777);\n-    const CHECKED_SHL_I8_A: Option<i8> = (-127 as i8).checked_shl(2);\n-    const CHECKED_SHL_U8_A: Option<u8> = 1u8.checked_shl(8);\n-    const CHECKED_SHL_U8_B: Option<u8> = 1u8.checked_shl(0);\n-\n-    const CHECKED_SHR_I32_A: Option<i32> = 5i32.checked_shr(77777);\n-    const CHECKED_SHR_I8_A: Option<i8> = (-127 as i8).checked_shr(2);\n-    const CHECKED_SHR_U8_A: Option<u8> = 1u8.checked_shr(8);\n-    const CHECKED_SHR_U8_B: Option<u8> = 1u8.checked_shr(0);\n-\n-    const CHECKED_ABS_I32_A: Option<i32> = 5i32.checked_abs();\n-    const CHECKED_ABS_I8_A: Option<i8> = (-127 as i8).checked_abs();\n-    const CHECKED_ABS_I8_B: Option<i8> = 1i8.checked_abs();\n-    const CHECKED_ABS_I8_C: Option<i8> = i8::min_value().checked_abs();\n-\n-    // `const_int_overflowing`\n-    const DIV_A: (i8, bool) = 8i8.overflowing_div(2);\n-    const DIV_B: (i8, bool) = 8i8.overflowing_div(3);\n-    const DIV_C: (i8, bool) = i8::min_value().overflowing_div(-1i8);\n-    const DIV_D: (u8, bool) = 8u8.overflowing_div(2);\n-    const DIV_E: (u8, bool) = 8u8.overflowing_div(3);\n-\n-    const REM_A: (i8, bool) = 8i8.overflowing_rem(2);\n-    const REM_B: (i8, bool) = 8i8.overflowing_rem(3);\n-    const REM_C: (i8, bool) = i8::min_value().overflowing_rem(-1i8);\n-    const REM_D: (u8, bool) = 8u8.overflowing_rem(2);\n-    const REM_E: (u8, bool) = 8u8.overflowing_rem(3);\n-\n-    // `const_int_saturating`\n-    const ADD_INT_U32_NO: u32 = (42 as u32).saturating_add(2);\n-    const ADD_INT_U32: u32 = u32::max_value().saturating_add(1);\n-    const ADD_INT_U128: u128 = u128::max_value().saturating_add(1);\n-    const ADD_INT_I128: i128 = i128::max_value().saturating_add(1);\n-    const ADD_INT_I128_NEG: i128 = i128::min_value().saturating_add(-1);\n-\n-    const SUB_INT_U32_NO: u32 = (42 as u32).saturating_sub(2);\n-    const SUB_INT_U32: u32 = (1 as u32).saturating_sub(2);\n-    const SUB_INT_I32_NO: i32 = (-42 as i32).saturating_sub(2);\n-    const SUB_INT_I32_NEG: i32 = i32::min_value().saturating_sub(1);\n-    const SUB_INT_I32_POS: i32 = i32::max_value().saturating_sub(-1);\n-    const SUB_INT_U128: u128 = (0 as u128).saturating_sub(1);\n-    const SUB_INT_I128_NEG: i128 = i128::min_value().saturating_sub(1);\n-    const SUB_INT_I128_POS: i128 = i128::max_value().saturating_sub(-1);\n-\n-    const MUL_INT_U32_NO: u32 = (42 as u32).saturating_mul(2);\n-    const MUL_INT_U32: u32 = (1 as u32).saturating_mul(2);\n-    const MUL_INT_I32_NO: i32 = (-42 as i32).saturating_mul(2);\n-    const MUL_INT_I32_NEG: i32 = i32::min_value().saturating_mul(1);\n-    const MUL_INT_I32_POS: i32 = i32::max_value().saturating_mul(2);\n-    const MUL_INT_U128: u128 = (0 as u128).saturating_mul(1);\n-    const MUL_INT_I128_NEG: i128 = i128::min_value().saturating_mul(2);\n-    const MUL_INT_I128_POS: i128 = i128::max_value().saturating_mul(2);\n-\n-    const NEG_INT_I8: i8 = (-42i8).saturating_neg();\n-    const NEG_INT_I8_B: i8 = i8::min_value().saturating_neg();\n-    const NEG_INT_I32: i32 = i32::min_value().saturating_neg();\n-    const NEG_INT_I32_B: i32 = i32::max_value().saturating_neg();\n-    const NEG_INT_I128: i128 = i128::min_value().saturating_neg();\n-    const NEG_INT_I128_B: i128 = i128::max_value().saturating_neg();\n-\n-    const ABS_INT_I8_A: i8 = 4i8.saturating_abs();\n-    const ABS_INT_I8_B: i8 = -4i8.saturating_abs();\n-    const ABS_INT_I8_C: i8 = i8::min_value().saturating_abs();\n-    const ABS_INT_I32_A: i32 = 4i32.saturating_abs();\n-    const ABS_INT_I32_B: i32 = -4i32.saturating_abs();\n-    const ABS_INT_I32_C: i32 = i32::min_value().saturating_abs();\n-    const ABS_INT_I128_A: i128 = 4i128.saturating_abs();\n-    const ABS_INT_I128_B: i128 = -4i128.saturating_abs();\n-    const ABS_INT_I128_C: i128 = i128::min_value().saturating_abs();\n-\n-    // `const_int_euclidean`\n-    const CHECKED_DIV_I32_A: Option<i32> = 5i32.checked_div_euclid(7777);\n-    const CHECKED_DIV_I8_A: Option<i8> = (-127 as i8).checked_div_euclid(-99);\n-    const CHECKED_DIV_I8_B: Option<i8> = (-127 as i8).checked_div_euclid(1);\n-    const CHECKED_DIV_I8_C: Option<i8> = i8::min_value().checked_div_euclid(-1);\n-    const CHECKED_DIV_U8_A: Option<u8> = 1u8.checked_div_euclid(3);\n-\n-    const CHECKED_REM_I32_A: Option<i32> = 5i32.checked_rem_euclid(7777);\n-    const CHECKED_REM_I8_A: Option<i8> = (-127 as i8).checked_rem_euclid(-99);\n-    const CHECKED_REM_I8_B: Option<i8> = (-127 as i8).checked_rem_euclid(0);\n-    const CHECKED_REM_I8_C: Option<i8> = i8::min_value().checked_rem_euclid(-1);\n-    const CHECKED_REM_U8_A: Option<u8> = 1u8.checked_rem_euclid(3);\n-\n-    const WRAPPING_DIV_I32_A: i32 = 5i32.wrapping_div_euclid(7777);\n-    const WRAPPING_DIV_I8_A: i8 = (-127 as i8).wrapping_div_euclid(-99);\n-    const WRAPPING_DIV_I8_B: i8 = (-127 as i8).wrapping_div_euclid(1);\n-    const WRAPPING_DIV_I8_C: i8 = i8::min_value().wrapping_div_euclid(-1);\n-    const WRAPPING_DIV_U8_A: u8 = 1u8.wrapping_div_euclid(3);\n-\n-    const WRAPPING_REM_I32_A: i32 = 5i32.wrapping_rem_euclid(7777);\n-    const WRAPPING_REM_I8_A: i8 = (-127 as i8).wrapping_rem_euclid(-99);\n-    const WRAPPING_REM_I8_B: i8 = (-127 as i8).wrapping_rem_euclid(1);\n-    const WRAPPING_REM_I8_C: i8 = i8::min_value().wrapping_rem_euclid(-1);\n-    const WRAPPING_REM_U8_A: u8 = 1u8.wrapping_rem_euclid(3);\n-\n-    const OVERFLOWING_DIV_I32_A: (i32, bool) = 5i32.overflowing_div_euclid(7777);\n-    const OVERFLOWING_DIV_I8_A: (i8, bool) = (-127 as i8).overflowing_div_euclid(-99);\n-    const OVERFLOWING_DIV_I8_B: (i8, bool) = (-127 as i8).overflowing_div_euclid(1);\n-    const OVERFLOWING_DIV_I8_C: (i8, bool) = i8::min_value().overflowing_div_euclid(-1);\n-    const OVERFLOWING_DIV_U8_A: (u8, bool) = 1u8.overflowing_div_euclid(3);\n-\n-    const OVERFLOWING_REM_I32_A: (i32, bool) = 5i32.overflowing_rem_euclid(7777);\n-    const OVERFLOWING_REM_I8_A: (i8, bool) = (-127 as i8).overflowing_rem_euclid(-99);\n-    const OVERFLOWING_REM_I8_B: (i8, bool) = (-127 as i8).overflowing_rem_euclid(1);\n-    const OVERFLOWING_REM_I8_C: (i8, bool) = i8::min_value().overflowing_rem_euclid(-1);\n-    const OVERFLOWING_REM_U8_A: (u8, bool) = 1u8.overflowing_rem_euclid(3);\n-\n-    // `const_int_wrapping`\n-    const DIV_A: i8 = 8i8.wrapping_div(2);\n-    const DIV_B: i8 = 8i8.wrapping_div(3);\n-    const DIV_C: i8 = i8::min_value().wrapping_div(-1i8);\n-    const DIV_D: u8 = 8u8.wrapping_div(2);\n-    const DIV_E: u8 = 8u8.wrapping_div(3);\n-\n-    const REM_A: i8 = 8i8.wrapping_rem(2);\n-    const REM_B: i8 = 8i8.wrapping_rem(3);\n-    const REM_C: i8 = i8::min_value().wrapping_rem(-1i8);\n-    const REM_D: u8 = 8u8.wrapping_rem(2);\n-    const REM_E: u8 = 8u8.wrapping_rem(3);\n+suite!(\n+    checked -> Option<i8> {\n+        // `const_checked_int_methods`\n+        C1: 5i8.checked_add(2), Some(7);\n+        C2: 127i8.checked_add(2), None;\n+\n+        C3: 5i8.checked_sub(2), Some(3);\n+        C4: (-127i8).checked_sub(2), None;\n+\n+        C5: 1i8.checked_mul(3), Some(3);\n+        C6: 5i8.checked_mul(122), None;\n+        C7: (-127i8).checked_mul(-99), None;\n+\n+        C8: (i8::min_value() + 1).checked_div(-1), Some(127);\n+        C9: i8::min_value().checked_div(-1), None;\n+        C10: 1i8.checked_div(0), None;\n+\n+        C11: 5i8.checked_rem(2), Some(1);\n+        C12: 5i8.checked_rem(0), None;\n+        C13: i8::MIN.checked_rem(-1), None;\n+\n+        C14: 5i8.checked_neg(), Some(-5);\n+        C15: i8::MIN.checked_neg(), None;\n+\n+        C16: 0x1i8.checked_shl(4), Some(0x10);\n+        C17: 0x1i8.checked_shl(129), None;\n+\n+        C18: 0x10i8.checked_shr(4), Some(0x1);\n+        C19: 0x10i8.checked_shr(128), None;\n+\n+\n+        C20: (-5i8).checked_abs(), Some(5);\n+        C21: i8::MIN.checked_abs(), None;\n+\n+        // `const_euclidean_int_methods`\n+        C22: (i8::min_value() + 1).checked_div_euclid(-1), Some(127);\n+        C23: i8::min_value().checked_div_euclid(-1), None;\n+        C24: (1i8).checked_div_euclid(0), None;\n+\n+        C25: 5i8.checked_rem_euclid(2), Some(1);\n+        C26: 5i8.checked_rem_euclid(0), None;\n+        C27: i8::MIN.checked_rem_euclid(-1), None;\n+    }\n+\n+    saturating_and_wrapping -> i8 {\n+        // `const_saturating_int_methods`\n+        C28: 100i8.saturating_add(1), 101;\n+        C29: i8::max_value().saturating_add(100), i8::max_value();\n+        C30: i8::min_value().saturating_add(-1), i8::min_value();\n+\n+        C31: 100i8.saturating_sub(127), -27;\n+        C32: i8::min_value().saturating_sub(100), i8::min_value();\n+        C33: i8::max_value().saturating_sub(-1), i8::max_value();\n+\n+        C34: 10i8.saturating_mul(12), 120;\n+        C35: i8::MAX.saturating_mul(10), i8::MAX;\n+        C36: i8::MIN.saturating_mul(10), i8::MIN;\n+\n+        C37: 100i8.saturating_neg(), -100;\n+        C38: (-100i8).saturating_neg(), 100;\n+        C39: i8::min_value().saturating_neg(), i8::max_value();\n+        C40: i8::max_value().saturating_neg(), i8::min_value() + 1;\n+\n+        C57: 100i8.saturating_abs(), 100;\n+        C58: (-100i8).saturating_abs(), 100;\n+        C59: i8::min_value().saturating_abs(), i8::max_value();\n+        C60: (i8::min_value() + 1).saturating_abs(), i8::max_value();\n+\n+        // `const_wrapping_int_methods`\n+        C41: 100i8.wrapping_div(10), 10;\n+        C42: (-128i8).wrapping_div(-1), -128;\n+\n+        C43: 100i8.wrapping_rem(10), 0;\n+        C44: (-128i8).wrapping_rem(-1), 0;\n+\n+        // `const_euclidean_int_methods`\n+        C45: 100i8.wrapping_div_euclid(10), 10;\n+        C46: (-128i8).wrapping_div_euclid(-1), -128;\n+\n+        C47: 100i8.wrapping_rem_euclid(10), 0;\n+        C48: (-128i8).wrapping_rem_euclid(-1), 0;\n+    }\n+\n+    overflowing -> (i8, bool) {\n+        // `const_overflowing_int_methods`\n+        C49: 5i8.overflowing_div(2), (2, false);\n+        C50: i8::MIN.overflowing_div(-1), (i8::MIN, true);\n+\n+        C51: 5i8.overflowing_rem(2), (1, false);\n+        C52: i8::MIN.overflowing_rem(-1), (0, true);\n+\n+        // `const_euclidean_int_methods`\n+        C53: 5i8.overflowing_div_euclid(2), (2, false);\n+        C54: i8::MIN.overflowing_div_euclid(-1), (i8::MIN, true);\n+\n+        C55: 5i8.overflowing_rem_euclid(2), (1, false);\n+        C56: i8::MIN.overflowing_rem_euclid(-1), (0, true);\n+\n+    }\n+);\n+\n+fn main() {\n+   checked();\n+   saturating_and_wrapping();\n+   overflowing();\n }"}]}