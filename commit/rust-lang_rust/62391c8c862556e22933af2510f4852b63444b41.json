{"sha": "62391c8c862556e22933af2510f4852b63444b41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMzkxYzhjODYyNTU2ZTIyOTMzYWYyNTEwZjQ4NTJiNjM0NDRiNDE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-11-25T19:59:16Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-11-25T19:59:16Z"}, "message": "InstCombine Len([_; N]) => const N in MIR", "tree": {"sha": "4bbb97f2c727a56d1e57a1a0d292d07390cea397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bbb97f2c727a56d1e57a1a0d292d07390cea397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62391c8c862556e22933af2510f4852b63444b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62391c8c862556e22933af2510f4852b63444b41", "html_url": "https://github.com/rust-lang/rust/commit/62391c8c862556e22933af2510f4852b63444b41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62391c8c862556e22933af2510f4852b63444b41/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8ef2629363ead527452d15ab628633c8fd2d52", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8ef2629363ead527452d15ab628633c8fd2d52", "html_url": "https://github.com/rust-lang/rust/commit/ca8ef2629363ead527452d15ab628633c8fd2d52"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "d66d4b14d693d993ed21b7859c4cc89a64a886ad", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/62391c8c862556e22933af2510f4852b63444b41/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62391c8c862556e22933af2510f4852b63444b41/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=62391c8c862556e22933af2510f4852b63444b41", "patch": "@@ -10,10 +10,10 @@\n \n //! Performs various peephole optimizations.\n \n-use rustc::mir::{Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue, Local};\n+use rustc::mir::{Constant, Literal, Location, Lvalue, Mir, Operand, ProjectionElem, Rvalue, Local};\n use rustc::mir::visit::{MutVisitor, Visitor};\n-use rustc::ty::TyCtxt;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc::ty::{TyCtxt, TypeVariants};\n+use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::Idx;\n use std::mem;\n use transform::{MirPass, MirSource};\n@@ -44,11 +44,11 @@ impl MirPass for InstCombine {\n     }\n }\n \n-pub struct InstCombineVisitor {\n-    optimizations: OptimizationList,\n+pub struct InstCombineVisitor<'tcx> {\n+    optimizations: OptimizationList<'tcx>,\n }\n \n-impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor {\n+impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n         if self.optimizations.and_stars.remove(&location) {\n             debug!(\"Replacing `&*`: {:?}\", rvalue);\n@@ -62,6 +62,11 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor {\n             *rvalue = Rvalue::Use(Operand::Consume(new_lvalue))\n         }\n \n+        if let Some(constant) = self.optimizations.arrays_lengths.remove(&location) {\n+            debug!(\"Replacing `Len([_; N])`: {:?}\", rvalue);\n+            *rvalue = Rvalue::Use(Operand::Constant(box constant));\n+        }\n+\n         self.super_rvalue(rvalue, location)\n     }\n }\n@@ -70,7 +75,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor {\n struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> {\n     mir: &'b Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    optimizations: OptimizationList,\n+    optimizations: OptimizationList<'tcx>,\n }\n \n impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n@@ -93,11 +98,23 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n             }\n         }\n \n+        if let Rvalue::Len(ref lvalue) = *rvalue {\n+            let lvalue_ty = lvalue.ty(&self.mir.local_decls, self.tcx).to_ty(self.tcx);\n+            if let TypeVariants::TyArray(_, len) = lvalue_ty.sty {\n+                let span = self.mir.source_info(location).span;\n+                let ty = self.tcx.types.usize;\n+                let literal = Literal::Value { value: len };\n+                let constant = Constant { span, ty, literal };\n+                self.optimizations.arrays_lengths.insert(location, constant);\n+            }\n+        }\n+\n         self.super_rvalue(rvalue, location)\n     }\n }\n \n #[derive(Default)]\n-struct OptimizationList {\n+struct OptimizationList<'tcx> {\n     and_stars: FxHashSet<Location>,\n+    arrays_lengths: FxHashMap<Location, Constant<'tcx>>,\n }"}, {"sha": "136c3493fa40705b155928b0bd98989dafd25372", "filename": "src/test/mir-opt/combine_array_len.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/62391c8c862556e22933af2510f4852b63444b41/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62391c8c862556e22933af2510f4852b63444b41/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len.rs?ref=62391c8c862556e22933af2510f4852b63444b41", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn norm2(x: [f32; 2]) -> f32 {\n+    let a = x[0];\n+    let b = x[1];\n+    a*a + b*b\n+}\n+\n+fn main() {\n+    assert_eq!(norm2([3.0, 4.0]), 5.0*5.0);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.norm2.InstCombine.before.mir\n+//     _5 = Len(_1);\n+//     ...\n+//     _10 = Len(_1);\n+// END rustc.norm2.InstCombine.before.mir\n+\n+// START rustc.norm2.InstCombine.after.mir\n+//     _5 = const 2usize;\n+//     ...\n+//     _10 = const 2usize;\n+// END rustc.norm2.InstCombine.after.mir"}]}