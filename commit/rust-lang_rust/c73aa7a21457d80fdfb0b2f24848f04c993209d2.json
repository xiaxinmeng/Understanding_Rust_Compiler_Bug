{"sha": "c73aa7a21457d80fdfb0b2f24848f04c993209d2", "node_id": "C_kwDOAAsO6NoAKGM3M2FhN2EyMTQ1N2Q4MGZkZmIwYjJmMjQ4NDhmMDRjOTkzMjA5ZDI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-20T12:05:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-20T12:05:54Z"}, "message": "Merge #10594\n\n10594: fix: Generate and complete rustdoc lints r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10572, https://github.com/rust-analyzer/rust-analyzer/issues/8349\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b1f746f26eebce057c3f24f71a7d79423b3add23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1f746f26eebce057c3f24f71a7d79423b3add23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c73aa7a21457d80fdfb0b2f24848f04c993209d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcAYiCRBK7hj4Ov3rIwAAwJsIAGtmyu8Tr/IEkm0YKxgW2qCY\nVYo+1lzngN51x0yDB/JVkjg17cn/cjp4CrVDJgtQNuBygLKCnDrtdWQHqePHM26a\nEB2r/+7oQ2m19YOVHzWzxMUFqL+qVH9V3ug4hvTXzF72l3CwcflaTkv6SAz7Svx9\njlyp76+0rJS1IRyECsiU2nnB6r/ddC1k2HEpVXpE1XdF1GL1Cgl7eUDwTgx0UEex\n0Oh/JWxpXNmUo7x8iqoq/qWjmrbb0k89m9eyopibzdA4WYHvK0thCVk49sU/ts/N\nOqRxC5h+QOgPFBOfFRU67kENLe/SshfN3Hgmevt0J31lIlu9rCu1PJ4ZKQFEyEw=\n=iSYi\n-----END PGP SIGNATURE-----\n", "payload": "tree b1f746f26eebce057c3f24f71a7d79423b3add23\nparent 5051717856dd325027e003c6b64497a2b113ba07\nparent bed6eae304a844d782eb3c387a8151ae5dd59dfb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634731554 +0000\ncommitter GitHub <noreply@github.com> 1634731554 +0000\n\nMerge #10594\n\n10594: fix: Generate and complete rustdoc lints r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/10572, https://github.com/rust-analyzer/rust-analyzer/issues/8349\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c73aa7a21457d80fdfb0b2f24848f04c993209d2", "html_url": "https://github.com/rust-lang/rust/commit/c73aa7a21457d80fdfb0b2f24848f04c993209d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c73aa7a21457d80fdfb0b2f24848f04c993209d2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5051717856dd325027e003c6b64497a2b113ba07", "url": "https://api.github.com/repos/rust-lang/rust/commits/5051717856dd325027e003c6b64497a2b113ba07", "html_url": "https://github.com/rust-lang/rust/commit/5051717856dd325027e003c6b64497a2b113ba07"}, {"sha": "bed6eae304a844d782eb3c387a8151ae5dd59dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed6eae304a844d782eb3c387a8151ae5dd59dfb", "html_url": "https://github.com/rust-lang/rust/commit/bed6eae304a844d782eb3c387a8151ae5dd59dfb"}], "stats": {"total": 404, "additions": 246, "deletions": 158}, "files": [{"sha": "e139dcd40efeaf4918834b3bc1b50c223d0d3586", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=c73aa7a21457d80fdfb0b2f24848f04c993209d2", "patch": "@@ -4,7 +4,7 @@\n //! for built-in attributes.\n \n use hir::HasAttrs;\n-use ide_db::helpers::generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES};\n+use ide_db::helpers::generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES, RUSTDOC_LINTS};\n use itertools::Itertools;\n use once_cell::sync::Lazy;\n use rustc_hash::FxHashMap;\n@@ -29,12 +29,16 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n     };\n     match (name_ref, attribute.token_tree()) {\n         (Some(path), Some(token_tree)) => match path.text().as_str() {\n-            \"derive\" => derive::complete_derive(acc, ctx, token_tree),\n             \"repr\" => repr::complete_repr(acc, ctx, token_tree),\n-            \"feature\" => lint::complete_lint(acc, ctx, token_tree, FEATURES),\n+            \"derive\" => derive::complete_derive(acc, ctx, &parse_comma_sep_paths(token_tree)?),\n+            \"feature\" => {\n+                lint::complete_lint(acc, ctx, &parse_comma_sep_paths(token_tree)?, FEATURES)\n+            }\n             \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                lint::complete_lint(acc, ctx, token_tree.clone(), DEFAULT_LINTS);\n-                lint::complete_lint(acc, ctx, token_tree, CLIPPY_LINTS);\n+                let existing_lints = parse_comma_sep_paths(token_tree)?;\n+                lint::complete_lint(acc, ctx, &existing_lints, DEFAULT_LINTS);\n+                lint::complete_lint(acc, ctx, &existing_lints, CLIPPY_LINTS);\n+                lint::complete_lint(acc, ctx, &existing_lints, RUSTDOC_LINTS);\n             }\n             \"cfg\" => {\n                 cfg::complete_cfg(acc, ctx);"}, {"sha": "e460a91102ce37e5bc7366b269dde98a72d57a98", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 45, "deletions": 48, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=c73aa7a21457d80fdfb0b2f24848f04c993209d2", "patch": "@@ -14,60 +14,57 @@ use crate::{\n pub(super) fn complete_derive(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    derive_input: ast::TokenTree,\n+    existing_derives: &[ast::Path],\n ) {\n-    if let Some(existing_derives) = super::parse_comma_sep_paths(derive_input.clone()) {\n-        let core = FamousDefs(&ctx.sema, ctx.krate).core();\n-        let existing_derives: FxHashSet<_> = existing_derives\n-            .into_iter()\n-            .filter_map(|path| ctx.scope.speculative_resolve_as_mac(&path))\n-            .filter(|mac| mac.kind() == MacroKind::Derive)\n-            .collect();\n+    let core = FamousDefs(&ctx.sema, ctx.krate).core();\n+    let existing_derives: FxHashSet<_> = existing_derives\n+        .into_iter()\n+        .filter_map(|path| ctx.scope.speculative_resolve_as_mac(&path))\n+        .filter(|mac| mac.kind() == MacroKind::Derive)\n+        .collect();\n \n-        for (name, mac) in get_derives_in_scope(ctx) {\n-            if existing_derives.contains(&mac) {\n-                continue;\n-            }\n+    for (name, mac) in get_derives_in_scope(ctx) {\n+        if existing_derives.contains(&mac) {\n+            continue;\n+        }\n \n-            let name = name.to_smol_str();\n-            let label;\n-            let (label, lookup) = match core.zip(mac.module(ctx.db).map(|it| it.krate())) {\n-                // show derive dependencies for `core`/`std` derives\n-                Some((core, mac_krate)) if core == mac_krate => {\n-                    if let Some(derive_completion) = DEFAULT_DERIVE_DEPENDENCIES\n-                        .iter()\n-                        .find(|derive_completion| derive_completion.label == name)\n-                    {\n-                        let mut components = vec![derive_completion.label];\n-                        components.extend(derive_completion.dependencies.iter().filter(\n-                            |&&dependency| {\n-                                !existing_derives\n-                                    .iter()\n-                                    .filter_map(|it| it.name(ctx.db))\n-                                    .any(|it| it.to_smol_str() == dependency)\n-                            },\n-                        ));\n-                        let lookup = components.join(\", \");\n-                        label = components.iter().rev().join(\", \");\n-                        (label.as_str(), Some(lookup))\n-                    } else {\n-                        (&*name, None)\n-                    }\n+        let name = name.to_smol_str();\n+        let label;\n+        let (label, lookup) = match core.zip(mac.module(ctx.db).map(|it| it.krate())) {\n+            // show derive dependencies for `core`/`std` derives\n+            Some((core, mac_krate)) if core == mac_krate => {\n+                if let Some(derive_completion) = DEFAULT_DERIVE_DEPENDENCIES\n+                    .iter()\n+                    .find(|derive_completion| derive_completion.label == name)\n+                {\n+                    let mut components = vec![derive_completion.label];\n+                    components.extend(derive_completion.dependencies.iter().filter(\n+                        |&&dependency| {\n+                            !existing_derives\n+                                .iter()\n+                                .filter_map(|it| it.name(ctx.db))\n+                                .any(|it| it.to_smol_str() == dependency)\n+                        },\n+                    ));\n+                    let lookup = components.join(\", \");\n+                    label = components.iter().rev().join(\", \");\n+                    (label.as_str(), Some(lookup))\n+                } else {\n+                    (&*name, None)\n                 }\n-                _ => (&*name, None),\n-            };\n-\n-            let mut item =\n-                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-            item.kind(CompletionItemKind::Attribute);\n-            if let Some(docs) = mac.docs(ctx.db) {\n-                item.documentation(docs);\n             }\n-            if let Some(lookup) = lookup {\n-                item.lookup_by(lookup);\n-            }\n-            item.add_to(acc);\n+            _ => (&*name, None),\n+        };\n+\n+        let mut item = CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n+        item.kind(CompletionItemKind::Attribute);\n+        if let Some(docs) = mac.docs(ctx.db) {\n+            item.documentation(docs);\n+        }\n+        if let Some(lookup) = lookup {\n+            item.lookup_by(lookup);\n         }\n+        item.add_to(acc);\n     }\n }\n "}, {"sha": "18942f8beb34245337e115651e5b3a17a1b7cb30", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 46, "deletions": 50, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=c73aa7a21457d80fdfb0b2f24848f04c993209d2", "patch": "@@ -11,60 +11,56 @@ use crate::{\n pub(super) fn complete_lint(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n-    derive_input: ast::TokenTree,\n+    existing_lints: &[ast::Path],\n     lints_completions: &[Lint],\n ) {\n-    if let Some(existing_lints) = super::parse_comma_sep_paths(derive_input) {\n-        for &Lint { label, description } in lints_completions {\n-            let (qual, name) = {\n-                // FIXME: change `Lint`'s label to not store a path in it but split the prefix off instead?\n-                let mut parts = label.split(\"::\");\n-                let ns_or_label = match parts.next() {\n-                    Some(it) => it,\n-                    None => continue,\n-                };\n-                let label = parts.next();\n-                match label {\n-                    Some(label) => (Some(ns_or_label), label),\n-                    None => (None, ns_or_label),\n-                }\n+    let is_qualified = ctx.previous_token_is(T![:]);\n+    for &Lint { label, description } in lints_completions {\n+        let (qual, name) = {\n+            // FIXME: change `Lint`'s label to not store a path in it but split the prefix off instead?\n+            let mut parts = label.split(\"::\");\n+            let ns_or_label = match parts.next() {\n+                Some(it) => it,\n+                None => continue,\n             };\n-            let lint_already_annotated = existing_lints\n-                .iter()\n-                .filter_map(|path| {\n-                    let q = path.qualifier();\n-                    if q.as_ref().and_then(|it| it.qualifier()).is_some() {\n-                        return None;\n-                    }\n-                    Some((q.and_then(|it| it.as_single_name_ref()), path.segment()?.name_ref()?))\n-                })\n-                .any(|(q, name_ref)| {\n-                    let qualifier_matches = match (q, qual) {\n-                        (None, None) => true,\n-                        (None, Some(_)) => false,\n-                        (Some(_), None) => false,\n-                        (Some(q), Some(ns)) => q.text() == ns,\n-                    };\n-                    qualifier_matches && name_ref.text() == name\n-                });\n-            if lint_already_annotated {\n-                continue;\n+            let label = parts.next();\n+            match label {\n+                Some(label) => (Some(ns_or_label), label),\n+                None => (None, ns_or_label),\n             }\n-            let insert = match (qual, ctx.previous_token_is(T![:])) {\n-                (Some(qual), false) => format!(\"{}::{}\", qual, name),\n-                // user is completing a qualified path but this completion has no qualifier\n-                // so discard this completion\n-                // FIXME: This is currently very hacky and will propose odd completions if\n-                // we add more qualified (tool) completions other than clippy\n-                (None, true) => continue,\n-                _ => name.to_owned(),\n-            };\n-            let mut item =\n-                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-            item.kind(CompletionItemKind::Attribute)\n-                .insert_text(insert)\n-                .documentation(hir::Documentation::new(description.to_owned()));\n-            item.add_to(acc)\n+        };\n+        if qual.is_none() && is_qualified {\n+            // qualified completion requested, but this lint is unqualified\n+            continue;\n+        }\n+        let lint_already_annotated = existing_lints\n+            .iter()\n+            .filter_map(|path| {\n+                let q = path.qualifier();\n+                if q.as_ref().and_then(|it| it.qualifier()).is_some() {\n+                    return None;\n+                }\n+                Some((q.and_then(|it| it.as_single_name_ref()), path.segment()?.name_ref()?))\n+            })\n+            .any(|(q, name_ref)| {\n+                let qualifier_matches = match (q, qual) {\n+                    (None, None) => true,\n+                    (None, Some(_)) => false,\n+                    (Some(_), None) => false,\n+                    (Some(q), Some(ns)) => q.text() == ns,\n+                };\n+                qualifier_matches && name_ref.text() == name\n+            });\n+        if lint_already_annotated {\n+            continue;\n         }\n+        let label = match qual {\n+            Some(qual) if !is_qualified => format!(\"{}::{}\", qual, name),\n+            _ => name.to_owned(),\n+        };\n+        let mut item = CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n+        item.kind(CompletionItemKind::Attribute)\n+            .documentation(hir::Documentation::new(description.to_owned()));\n+        item.add_to(acc)\n     }\n }"}, {"sha": "9f86fc50a22e4e8700869850810e64edef11d96c", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=c73aa7a21457d80fdfb0b2f24848f04c993209d2", "patch": "@@ -693,11 +693,29 @@ mod lint {\n     #[test]\n     fn lint_clippy_qualified() {\n         check_edit(\n-            \"clippy::as_conversions\",\n+            \"as_conversions\",\n             r#\"#[allow(clippy::$0)] struct Test;\"#,\n             r#\"#[allow(clippy::as_conversions)] struct Test;\"#,\n         );\n     }\n+\n+    #[test]\n+    fn lint_rustdoc_unqualified() {\n+        check_edit(\n+            \"rustdoc::bare_urls\",\n+            r#\"#[allow($0)] struct Test;\"#,\n+            r#\"#[allow(rustdoc::bare_urls)] struct Test;\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn lint_rustdoc_qualified() {\n+        check_edit(\n+            \"bare_urls\",\n+            r#\"#[allow(rustdoc::$0)] struct Test;\"#,\n+            r#\"#[allow(rustdoc::bare_urls)] struct Test;\"#,\n+        );\n+    }\n }\n \n mod repr {"}, {"sha": "e69b3fbdf8869537de286899bea2bd3556962013", "filename": "crates/ide_db/src/helpers/generated_lints.rs", "status": "modified", "additions": 75, "deletions": 31, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs?ref=c73aa7a21457d80fdfb0b2f24848f04c993209d2", "patch": "@@ -502,6 +502,46 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n     },\n ];\n \n+pub const RUSTDOC_LINTS: &[Lint] = &[\n+    Lint {\n+        label: \"rustdoc::all\",\n+        description: r##\"lint group for: rustdoc::broken-intra-doc-links, rustdoc::private-intra-doc-links, rustdoc::missing-doc-code-examples, rustdoc::private-doc-tests, rustdoc::invalid-codeblock-attributes, rustdoc::invalid-rust-codeblocks, rustdoc::invalid-html-tags, rustdoc::bare-urls, rustdoc::missing-crate-level-docs\"##,\n+    },\n+    Lint { label: \"rustdoc::bare_urls\", description: r##\"detects URLs that are not hyperlinks\"## },\n+    Lint {\n+        label: \"rustdoc::broken_intra_doc_links\",\n+        description: r##\"failures in resolving intra-doc link targets\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::invalid_codeblock_attributes\",\n+        description: r##\"codeblock attribute looks a lot like a known one\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::invalid_html_tags\",\n+        description: r##\"detects invalid HTML tags in doc comments\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::invalid_rust_codeblocks\",\n+        description: r##\"codeblock could not be parsed as valid Rust or is empty\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::missing_crate_level_docs\",\n+        description: r##\"detects crates with no crate-level documentation\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::missing_doc_code_examples\",\n+        description: r##\"detects publicly-exported items without code samples in their documentation\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::private_doc_tests\",\n+        description: r##\"detects code samples in docs of private items not documented by rustdoc\"##,\n+    },\n+    Lint {\n+        label: \"rustdoc::private_intra_doc_links\",\n+        description: r##\"linking from a public item to a private one\"##,\n+    },\n+];\n+\n pub const FEATURES: &[Lint] = &[\n     Lint {\n         label: \"abi_c_cmse_nonsecure_call\",\n@@ -5572,11 +5612,9 @@ outside ticks in documentation.\"##,\n     },\n     Lint {\n         label: \"clippy::double_must_use\",\n-        description: r##\"Checks for a [`#[must_use]`] attribute without\n+        description: r##\"Checks for a `#[must_use]` attribute without\n further information on functions and methods that return a type already\n-marked as `#[must_use]`.\n-\n-[`#[must_use]`]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\"##,\n+marked as `#[must_use]`.\"##,\n     },\n     Lint {\n         label: \"clippy::double_neg\",\n@@ -5821,6 +5859,12 @@ derives the Copy trait\"##,\n         label: \"clippy::forget_ref\",\n         description: r##\"Checks for calls to `std::mem::forget` with a reference\n instead of an owned value.\"##,\n+    },\n+    Lint {\n+        label: \"clippy::format_in_format_args\",\n+        description: r##\"Detects `format!` within the arguments of another macro that does\n+formatting such as `format!` itself, `write!` or `println!`. Suggests\n+inlining the `format!` call.\"##,\n     },\n     Lint {\n         label: \"clippy::from_iter_instead_of_collect\",\n@@ -6120,8 +6164,7 @@ where expr has a type that implements `Drop`\"##,\n     },\n     Lint {\n         label: \"clippy::let_underscore_must_use\",\n-        description: r##\"Checks for `let _ = <expr>`\n-where expr is #[must_use]\"##,\n+        description: r##\"Checks for `let _ = <expr>` where expr is `#[must_use]`\"##,\n     },\n     Lint { label: \"clippy::let_unit_value\", description: r##\"Checks for binding a unit value.\"## },\n     Lint {\n@@ -6194,23 +6237,7 @@ be more readably expressed as `(3..8).contains(x)`.\"##,\n     },\n     Lint {\n         label: \"clippy::manual_split_once\",\n-        description: r##\"**What it does:** Checks for usages of `str::splitn(2, _)`\n-\n-**Why is this bad?** `split_once` is both clearer in intent and slightly more efficient.\n-\n-**Known problems:** None.\n-\n-**Example:**\n-\n-```rust\n-// Bad\n- let (key, value) = _.splitn(2, '=').next_tuple()?;\n- let value = _.splitn(2, '=').nth(1)?;\n-\n-// Good\n-let (key, value) = _.split_once('=')?;\n-let value = _.split_once('=')?.1;\n-```\"##,\n+        description: r##\"Checks for usages of `str::splitn(2, _)`\"##,\n     },\n     Lint {\n         label: \"clippy::manual_str_repeat\",\n@@ -6304,6 +6331,10 @@ instead. It also checks for `if let &foo = bar` blocks.\"##,\n         label: \"clippy::match_single_binding\",\n         description: r##\"Checks for useless match that binds to only one value.\"##,\n     },\n+    Lint {\n+        label: \"clippy::match_str_case_mismatch\",\n+        description: r##\"Checks for `match` expressions modifying the case of a string with non-compliant arms\"##,\n+    },\n     Lint {\n         label: \"clippy::match_wild_err_arm\",\n         description: r##\"Checks for arm which matches all errors with `Err(_)`\n@@ -6433,17 +6464,13 @@ used.\"##,\n     Lint {\n         label: \"clippy::must_use_candidate\",\n         description: r##\"Checks for public functions that have no\n-[`#[must_use]`] attribute, but return something not already marked\n-must-use, have no mutable arg and mutate no statics.\n-\n-[`#[must_use]`]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\"##,\n+`#[must_use]` attribute, but return something not already marked\n+must-use, have no mutable arg and mutate no statics.\"##,\n     },\n     Lint {\n         label: \"clippy::must_use_unit\",\n-        description: r##\"Checks for a [`#[must_use]`] attribute on\n-unit-returning functions and methods.\n-\n-[`#[must_use]`]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\"##,\n+        description: r##\"Checks for a `#[must_use]` attribute on\n+unit-returning functions and methods.\"##,\n     },\n     Lint {\n         label: \"clippy::mut_from_ref\",\n@@ -6591,6 +6618,10 @@ implementation of\n         label: \"clippy::no_effect\",\n         description: r##\"Checks for statements which have no effect.\"##,\n     },\n+    Lint {\n+        label: \"clippy::no_effect_underscore_binding\",\n+        description: r##\"Checks for binding to underscore prefixed variable without side-effects.\"##,\n+    },\n     Lint {\n         label: \"clippy::non_ascii_literal\",\n         description: r##\"Checks for non-ASCII characters in string literals.\"##,\n@@ -7155,6 +7186,12 @@ assign a value in it.\"##,\n         label: \"clippy::to_string_in_display\",\n         description: r##\"Checks for uses of `to_string()` in `Display` traits.\"##,\n     },\n+    Lint {\n+        label: \"clippy::to_string_in_format_args\",\n+        description: r##\"Checks for [`ToString::to_string`](https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string)\n+applied to a type that implements [`Display`](https://doc.rust-lang.org/std/fmt/trait.Display.html)\n+in a macro that does formatting.\"##,\n+    },\n     Lint { label: \"clippy::todo\", description: r##\"Checks for usage of `todo!`.\"## },\n     Lint {\n         label: \"clippy::too_many_arguments\",\n@@ -7194,6 +7231,7 @@ syntax specifications for trait bounds are used simultaneously.\"##,\n         label: \"clippy::transmute_int_to_float\",\n         description: r##\"Checks for transmutes from an integer to a float.\"##,\n     },\n+    Lint { label: \"clippy::transmute_num_to_bytes\", description: r##\"\"## },\n     Lint {\n         label: \"clippy::transmute_ptr_to_ptr\",\n         description: r##\"Checks for transmutes from a pointer to a pointer, or\n@@ -7256,6 +7294,12 @@ that is not equal to its\n         label: \"clippy::uninit_assumed_init\",\n         description: r##\"Checks for `MaybeUninit::uninit().assume_init()`.\"##,\n     },\n+    Lint {\n+        label: \"clippy::uninit_vec\",\n+        description: r##\"Checks for `set_len()` call that creates `Vec` with uninitialized elements.\n+This is commonly caused by calling `set_len()` right after allocating or\n+reserving a buffer with `new()`, `default()`, `with_capacity()`, or `reserve()`.\"##,\n+    },\n     Lint {\n         label: \"clippy::unit_arg\",\n         description: r##\"Checks for passing a unit value as an argument to a function without using a"}, {"sha": "3c37aa6cb92cfddf40e8535635411f181e074e9a", "filename": "crates/ide_db/src/tests/sourcegen_lints.rs", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73aa7a21457d80fdfb0b2f24848f04c993209d2/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ftests%2Fsourcegen_lints.rs?ref=c73aa7a21457d80fdfb0b2f24848f04c993209d2", "patch": "@@ -1,6 +1,7 @@\n //! Generates descriptors structure for unstable feature from Unstable Book\n use std::{borrow::Cow, fs, path::Path};\n \n+use itertools::Itertools;\n use stdx::format_to;\n use test_utils::project_root;\n use xshell::cmd;\n@@ -43,39 +44,62 @@ pub struct Lint {\n }\n \n fn generate_lint_descriptor(buf: &mut String) {\n-    let stdout = cmd!(\"rustc -W help\").read().unwrap();\n+    // FIXME: rustdoc currently requires an input file for -Whelp cc https://github.com/rust-lang/rust/pull/88831\n+    let file = project_root().join(file!());\n+    let stdout = cmd!(\"rustdoc -W help {file}\").read().unwrap();\n     let start_lints = stdout.find(\"----  -------  -------\").unwrap();\n     let start_lint_groups = stdout.find(\"----  ---------\").unwrap();\n-    let end_lints = stdout.find(\"Lint groups provided by rustc:\").unwrap();\n-    let end_lint_groups = stdout\n-        .find(\"Lint tools like Clippy can provide additional lints and lint groups.\")\n-        .unwrap();\n+    let start_lints_rustdoc =\n+        stdout.find(\"Lint checks provided by plugins loaded by this crate:\").unwrap();\n+    let start_lint_groups_rustdoc =\n+        stdout.find(\"Lint groups provided by plugins loaded by this crate:\").unwrap();\n+\n     buf.push_str(r#\"pub const DEFAULT_LINTS: &[Lint] = &[\"#);\n     buf.push('\\n');\n-    let mut lints = stdout[start_lints..end_lints]\n-        .lines()\n-        .skip(1)\n-        .filter(|l| !l.is_empty())\n-        .map(|line| {\n+\n+    let lints = stdout[start_lints..].lines().skip(1).take_while(|l| !l.is_empty()).map(|line| {\n+        let (name, rest) = line.trim().split_once(char::is_whitespace).unwrap();\n+        let (_default_level, description) = rest.trim().split_once(char::is_whitespace).unwrap();\n+        (name.trim(), Cow::Borrowed(description.trim()))\n+    });\n+    let lint_groups =\n+        stdout[start_lint_groups..].lines().skip(1).take_while(|l| !l.is_empty()).map(|line| {\n+            let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n+            (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n+        });\n+\n+    lints.chain(lint_groups).sorted_by(|(ident, _), (ident2, _)| ident.cmp(ident2)).for_each(\n+        |(name, description)| push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description),\n+    );\n+    buf.push_str(\"];\\n\");\n+\n+    // rustdoc\n+\n+    buf.push('\\n');\n+    buf.push_str(r#\"pub const RUSTDOC_LINTS: &[Lint] = &[\"#);\n+    buf.push('\\n');\n+\n+    let lints_rustdoc =\n+        stdout[start_lints_rustdoc..].lines().skip(2).take_while(|l| !l.is_empty()).map(|line| {\n             let (name, rest) = line.trim().split_once(char::is_whitespace).unwrap();\n             let (_default_level, description) =\n                 rest.trim().split_once(char::is_whitespace).unwrap();\n             (name.trim(), Cow::Borrowed(description.trim()))\n-        })\n-        .collect::<Vec<_>>();\n-    lints.extend(\n-        stdout[start_lint_groups..end_lint_groups].lines().skip(1).filter(|l| !l.is_empty()).map(\n+        });\n+    let lint_groups_rustdoc =\n+        stdout[start_lint_groups_rustdoc..].lines().skip(2).take_while(|l| !l.is_empty()).map(\n             |line| {\n                 let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n                 (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n             },\n-        ),\n-    );\n-\n-    lints.sort_by(|(ident, _), (ident2, _)| ident.cmp(ident2));\n-    lints.into_iter().for_each(|(name, description)| {\n-        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n-    });\n+        );\n+\n+    lints_rustdoc\n+        .chain(lint_groups_rustdoc)\n+        .sorted_by(|(ident, _), (ident2, _)| ident.cmp(ident2))\n+        .for_each(|(name, description)| {\n+            push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n+        });\n     buf.push_str(\"];\\n\");\n }\n \n@@ -126,8 +150,13 @@ fn generate_descriptor_clippy(buf: &mut String, path: &Path) {\n             clippy_lints.push(clippy_lint)\n         } else if let Some(line) = line.strip_prefix(r#\"\"docs\": \"\"#) {\n             let prefix_to_strip = r#\" ### What it does\"#;\n-            // FIXME: replace unwrap_or with expect again, currently there is one lint that uses a different format in the json...\n-            let line = line.strip_prefix(prefix_to_strip).unwrap_or(line);\n+            let line = match line.strip_prefix(prefix_to_strip) {\n+                Some(line) => line,\n+                None => {\n+                    eprintln!(\"unexpected clippy prefix for {}\", clippy_lints.last().unwrap().id);\n+                    continue;\n+                }\n+            };\n             // Only take the description, any more than this is a lot of additional data we would embed into the exe\n             // which seems unnecessary\n             let up_to = line.find(r#\"###\"#).expect(\"no second section found?\");"}]}