{"sha": "503e15b7c9095e11838c1bbb3f084232950aff18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwM2UxNWI3YzkwOTVlMTE4MzhjMWJiYjNmMDg0MjMyOTUwYWZmMTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-16T16:58:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-16T16:58:47Z"}, "message": "Address nits by @pnkfelix", "tree": {"sha": "df4fcb38256c372ccbbc4b25fffaf595d738b6aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df4fcb38256c372ccbbc4b25fffaf595d738b6aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/503e15b7c9095e11838c1bbb3f084232950aff18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/503e15b7c9095e11838c1bbb3f084232950aff18", "html_url": "https://github.com/rust-lang/rust/commit/503e15b7c9095e11838c1bbb3f084232950aff18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/503e15b7c9095e11838c1bbb3f084232950aff18/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ef1664ca9bc885724e3a42d3194079ad0cf582", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ef1664ca9bc885724e3a42d3194079ad0cf582", "html_url": "https://github.com/rust-lang/rust/commit/d0ef1664ca9bc885724e3a42d3194079ad0cf582"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "23bd06b8f9b7a9c4b63ca3ceb3e1520174130ac7", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -619,7 +619,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             infer::RelateRegionParamBound(span) => {\n                 self.tcx.sess.span_err(\n                     span,\n-                    \"declared lifetime bound not satisfied\");\n+                    \"lifetime bound not satisfied\");\n                 note_and_explain_region(\n                     self.tcx,\n                     \"lifetime parameter instantiated with \",\n@@ -1629,7 +1629,7 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                 self.tcx.sess.span_note(\n                     span,\n                     &format!(\"...so that the type `{}` \\\n-                             will meet the declared lifetime bounds\",\n+                             will meet its required lifetime bounds\",\n                             self.ty_to_string(t))[]);\n             }\n             infer::RelateDefaultParamBound(span, t) => {"}, {"sha": "dd9b6dc132c7ec2871c8c8ca77cacbce938342af", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -1754,6 +1754,12 @@ fn compute_object_lifetime_bound<'tcx>(\n     return r;\n }\n \n+/// Given an object type like `SomeTrait+Send`, computes the lifetime\n+/// bounds that must hold on the elided self type. These are derived\n+/// from the declarations of `SomeTrait`, `Send`, and friends -- if\n+/// they declare `trait SomeTrait : 'static`, for example, then\n+/// `'static` would appear in the list. The hard work is done by\n+/// `ty::required_region_bounds`, see that for more information.\n pub fn object_region_bounds<'tcx>(\n     tcx: &ty::ctxt<'tcx>,\n     principal: &ty::PolyTraitRef<'tcx>,"}, {"sha": "17c259e674e9f08f2ea38ea710ed65dba1e69f62", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -154,7 +154,7 @@ pub fn regionck_ensure_component_tys_wf<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         // empty region is a subregion of all others, this can't fail\n         // unless the type does not meet the well-formedness\n         // requirements.\n-        type_must_outlive(&mut rcx, infer::RelateRegionParamBound(span),\n+        type_must_outlive(&mut rcx, infer::RelateParamBound(span, component_ty),\n                           component_ty, ty::ReEmpty);\n     }\n }\n@@ -305,7 +305,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n             debug!(\"visit_region_obligations: r_o={}\",\n                    r_o.repr(self.tcx()));\n             let sup_type = self.resolve_type(r_o.sup_type);\n-            let origin = infer::RelateRegionParamBound(r_o.cause.span);\n+            let origin = infer::RelateParamBound(r_o.cause.span, sup_type);\n             type_must_outlive(self, origin, sup_type, r_o.sub_region);\n         }\n "}, {"sha": "c7b75ade5558440ded259a53aaaf115b984904b5", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -14,6 +14,6 @@\n trait Foo : Send { }\n \n impl <'a> Foo for &'a mut () { }\n-//~^ ERROR declared lifetime bound not satisfied\n+//~^ ERROR the type `&'a mut ()` does not fulfill the required lifetime\n \n fn main() { }"}, {"sha": "de7639c621325cb171fcfe7229f8bc4be192f740", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -36,7 +36,7 @@ fn g<T>(val: T) {\n fn foo<'a>() {\n     let t: S<&'a isize> = S;\n     let a = &t as &Gettable<&'a isize>;\n-    //~^ ERROR declared lifetime bound not satisfied\n+    //~^ ERROR the type `&'a isize` does not fulfill the required lifetime\n }\n \n fn foo2<'a>() {"}, {"sha": "3d47d33d7c35d0af26b75285944093ad380f235b", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -22,7 +22,7 @@ fn test51<'a>() {\n }\n fn test52<'a>() {\n     assert_send::<&'a (Dummy+Send)>();\n-    //~^ ERROR declared lifetime bound not satisfied\n+    //~^ ERROR does not fulfill the required lifetime\n }\n \n // ...unless they are properly bounded"}, {"sha": "266b61566560f12aee08dfbe1138774caf6767dd", "filename": "src/test/compile-fail/kindck-send-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -19,7 +19,7 @@ fn test32() { assert_send::<Vec<isize> >(); }\n \n // but not if they own a bad thing\n fn test40<'a>(_: &'a isize) {\n-    assert_send::<Box<&'a isize>>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n }\n \n fn main() { }"}, {"sha": "e2a5b0678a6283164b661393c9dd5cb1dfdf016f", "filename": "src/test/compile-fail/kindck-send-region-pointers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -22,13 +22,13 @@ fn test10() { assert_send::<&'static mut isize>(); }\n \n // otherwise lifetime pointers are not ok\n fn test20<'a>(_: &'a isize) {\n-    assert_send::<&'a isize>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n }\n fn test21<'a>(_: &'a isize) {\n-    assert_send::<&'a str>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n }\n fn test22<'a>(_: &'a isize) {\n-    assert_send::<&'a [isize]>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n }\n \n fn main() { }"}, {"sha": "322283a4ca9ad4e1f0c271aba29c24d4e1909c2e", "filename": "src/test/compile-fail/object-lifetime-default-ambiguous.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-ambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-ambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-ambiguous.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -49,7 +49,8 @@ fn d(t: Ref2<Ref1<Test>>) {\n fn e(t: Ref2<Ref0<Test>>) {\n     //~^ ERROR lifetime bound for this object type cannot be deduced from context\n     //\n-    // In this case, Ref0 just inherits.\n+    // In this case, Ref2 is ambiguous, and Ref0 inherits the\n+    // ambiguity.\n }\n \n fn f(t: &Ref2<Test>) {"}, {"sha": "20cc624ab19040aa421c7c8fdaab78562f247d8d", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -17,22 +17,22 @@ trait Foo {}\n impl<'a> Foo for &'a [u8] {}\n \n fn a(v: &[u8]) -> Box<Foo + 'static> {\n-    let x: Box<Foo + 'static> = box v; //~ ERROR declared lifetime bound not satisfied\n+    let x: Box<Foo + 'static> = box v; //~ ERROR does not fulfill the required lifetime\n     x\n }\n \n fn b(v: &[u8]) -> Box<Foo + 'static> {\n-    box v //~ ERROR declared lifetime bound not satisfied\n+    box v //~ ERROR does not fulfill the required lifetime\n }\n \n fn c(v: &[u8]) -> Box<Foo> {\n     // same as previous case due to RFC 599\n \n-    box v //~ ERROR declared lifetime bound not satisfied\n+    box v //~ ERROR does not fulfill the required lifetime\n }\n \n fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n-    box v //~ ERROR declared lifetime bound not satisfied\n+    box v //~ ERROR does not fulfill the required lifetime\n }\n \n fn e<'a:'b,'b>(v: &'a [u8]) -> Box<Foo+'b> {"}, {"sha": "71254e15d32fc37051b70324bc7e7d1942f77085", "filename": "src/test/compile-fail/regions-bounded-by-send.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -32,15 +32,15 @@ fn static_lifime_ok<'a,T,U:Send>(_: &'a isize) {\n // otherwise lifetime pointers are not ok\n \n fn param_not_ok<'a>(x: &'a isize) {\n-    assert_send::<&'a isize>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n }\n \n fn param_not_ok1<'a>(_: &'a isize) {\n-    assert_send::<&'a str>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n }\n \n fn param_not_ok2<'a>(_: &'a isize) {\n-    assert_send::<&'a [isize]>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n }\n \n // boxes are ok\n@@ -54,7 +54,7 @@ fn box_ok() {\n // but not if they own a bad thing\n \n fn box_with_region_not_ok<'a>() {\n-    assert_send::<Box<&'a isize>>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n }\n \n // objects with insufficient bounds no ok\n@@ -66,7 +66,7 @@ fn object_with_random_bound_not_ok<'a>() {\n \n fn object_with_send_bound_not_ok<'a>() {\n     assert_send::<&'a (Dummy+Send)>();\n-    //~^ ERROR declared lifetime bound not satisfied\n+    //~^ ERROR does not fulfill the required lifetime\n }\n \n // unsafe pointers are ok unless they point at unsendable things"}, {"sha": "9e4c4e677cc695b1524561b77e7ae0e754caca0f", "filename": "src/test/compile-fail/regions-bounded-by-trait-requiring-static.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-trait-requiring-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-trait-requiring-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-trait-requiring-static.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -29,15 +29,15 @@ fn static_lifime_ok<'a,T,U:Send>(_: &'a isize) {\n // otherwise lifetime pointers are not ok\n \n fn param_not_ok<'a>(x: &'a isize) {\n-    assert_send::<&'a isize>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n }\n \n fn param_not_ok1<'a>(_: &'a isize) {\n-    assert_send::<&'a str>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n }\n \n fn param_not_ok2<'a>(_: &'a isize) {\n-    assert_send::<&'a [isize]>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n }\n \n // boxes are ok\n@@ -51,7 +51,7 @@ fn box_ok() {\n // but not if they own a bad thing\n \n fn box_with_region_not_ok<'a>() {\n-    assert_send::<Box<&'a isize>>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n }\n \n // unsafe pointers are ok unless they point at unsendable things\n@@ -62,11 +62,11 @@ fn unsafe_ok1<'a>(_: &'a isize) {\n }\n \n fn unsafe_ok2<'a>(_: &'a isize) {\n-    assert_send::<*const &'a isize>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<*const &'a isize>(); //~ ERROR does not fulfill the required lifetime\n }\n \n fn unsafe_ok3<'a>(_: &'a isize) {\n-    assert_send::<*mut &'a isize>(); //~ ERROR declared lifetime bound not satisfied\n+    assert_send::<*mut &'a isize>(); //~ ERROR does not fulfill the required lifetime\n }\n \n fn main() {"}, {"sha": "da4e8231a239f11563931bdf16e2be7c96889feb", "filename": "src/test/compile-fail/regions-bounded-method-type-parameters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503e15b7c9095e11838c1bbb3f084232950aff18/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters.rs?ref=503e15b7c9095e11838c1bbb3f084232950aff18", "patch": "@@ -20,7 +20,7 @@ impl Foo {\n \n fn caller<'a>(x: &isize) {\n     Foo.some_method::<&'a isize>();\n-    //~^ ERROR declared lifetime bound not satisfied\n+    //~^ ERROR does not fulfill the required lifetime\n }\n \n fn main() { }"}]}