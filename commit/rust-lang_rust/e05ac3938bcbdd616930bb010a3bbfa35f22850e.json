{"sha": "e05ac3938bcbdd616930bb010a3bbfa35f22850e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNWFjMzkzOGJjYmRkNjE2OTMwYmIwMTBhM2JiZmEzNWYyMjg1MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-17T18:35:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-17T18:35:50Z"}, "message": "Auto merge of #27045 - nikomatsakis:better-object-defaults-error, r=pnkfelix\n\nTransition to the new object lifetime defaults, replacing the old defaults completely.\r\n\r\nr? @pnkfelix \r\n\r\nThis is a [breaking-change] as specified by [RFC 1156][1156] (though all cases that would break should have been receiving warnings starting in Rust 1.2). Types like `&'a Box<Trait>` (or `&'a Rc<Trait>`, etc) will change from being interpreted as `&'a Box<Trait+'a>` to `&'a Box<Trait+'static>`. To restore the old behavior, write the `+'a` explicitly. For example, the function:\r\n\r\n\r\n```rust\r\ntrait Trait { }\r\nfn foo(x: &Box<Trait>) { ... }\r\n```\r\n\r\nwould be rewritten as:\r\n\r\n```rust\r\ntrait Trait { }\r\nfn foo(x: &'a Box<Trait+'a>) { ... }\r\n```\r\n\r\nif one wanted to preserve the current typing.\r\n\r\n[1156]: https://github.com/rust-lang/rfcs/blob/master/text/1156-adjust-default-object-bounds.md", "tree": {"sha": "5dff08da2e93522a4418ecf43bf79ade8e984e87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dff08da2e93522a4418ecf43bf79ade8e984e87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e05ac3938bcbdd616930bb010a3bbfa35f22850e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e05ac3938bcbdd616930bb010a3bbfa35f22850e", "html_url": "https://github.com/rust-lang/rust/commit/e05ac3938bcbdd616930bb010a3bbfa35f22850e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e05ac3938bcbdd616930bb010a3bbfa35f22850e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4432b37378ec55450e06799f5344b4b0f4b94e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4432b37378ec55450e06799f5344b4b0f4b94e0", "html_url": "https://github.com/rust-lang/rust/commit/d4432b37378ec55450e06799f5344b4b0f4b94e0"}, {"sha": "de6b3c282e2e400ce114b5553c3f7080a1434a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/de6b3c282e2e400ce114b5553c3f7080a1434a5f", "html_url": "https://github.com/rust-lang/rust/commit/de6b3c282e2e400ce114b5553c3f7080a1434a5f"}], "stats": {"total": 337, "additions": 97, "deletions": 240}, "files": [{"sha": "ee9e199a6c52aa66157d06c4e82cbfa6e197b0ea", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -887,16 +887,9 @@ fn parse_existential_bounds_<'a,'tcx, F>(st: &mut PState<'a,'tcx>,\n         }\n     }\n \n-    let region_bound_will_change = match next(st) {\n-        'y' => true,\n-        'n' => false,\n-        c => panic!(\"parse_ty: expected y/n not '{}'\", c)\n-    };\n-\n     return ty::ExistentialBounds { region_bound: region_bound,\n                                    builtin_bounds: builtin_bounds,\n-                                   projection_bounds: projection_bounds,\n-                                   region_bound_will_change: region_bound_will_change };\n+                                   projection_bounds: projection_bounds };\n }\n \n fn parse_builtin_bounds<F>(st: &mut PState, mut _conv: F) -> ty::BuiltinBounds where"}, {"sha": "e29c0f2b8370528e54e0f636fea238737898ebf1", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -390,8 +390,6 @@ pub fn enc_existential_bounds<'a,'tcx>(w: &mut Encoder,\n     }\n \n     mywrite!(w, \".\");\n-\n-    mywrite!(w, \"{}\", if bs.region_bound_will_change {'y'} else {'n'});\n }\n \n pub fn enc_region_bounds<'a, 'tcx>(w: &mut Encoder,"}, {"sha": "d2268894b20a1d5cb2c06e5b4d2f9e2417317620", "filename": "src/librustc/middle/infer/bivariate.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -49,11 +49,6 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Bivariate<'a, 'tcx> {\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n-    fn will_change(&mut self, _: bool, _: bool) -> bool {\n-        // since we are not comparing regions, we don't care\n-        false\n-    }\n-\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                variance: ty::Variance,\n                                                a: &T,"}, {"sha": "cbbf73d942073c2714bf30bcc84f169526a2f4ce", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -34,11 +34,6 @@ impl<'a, 'tcx> TypeRelation<'a,'tcx> for Equate<'a, 'tcx> {\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n-    fn will_change(&mut self, a: bool, b: bool) -> bool {\n-        // if either side changed from what it was, that could cause equality to fail\n-        a || b\n-    }\n-\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                _: ty::Variance,\n                                                a: &T,"}, {"sha": "8d66ffac5d17ca09568a186671d5efb89c401f32", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -593,8 +593,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                                sub: Region,\n                                sup: Region) {\n         match origin {\n-            infer::Subtype(trace) |\n-            infer::DefaultExistentialBound(trace) => {\n+            infer::Subtype(trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n                 self.report_and_explain_type_error(trace, &terr);\n             }\n@@ -1570,8 +1569,7 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n \n     fn note_region_origin(&self, origin: &SubregionOrigin<'tcx>) {\n         match *origin {\n-            infer::Subtype(ref trace) |\n-            infer::DefaultExistentialBound(ref trace) => {\n+            infer::Subtype(ref trace) => {\n                 let desc = match trace.origin {\n                     infer::Misc(_) => {\n                         \"types are compatible\""}, {"sha": "d6b03266b1fe74e32d4d58cc2d2f5ef0cb316bb3", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -35,16 +35,6 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Glb<'a, 'tcx> {\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n-    fn will_change(&mut self, a: bool, b: bool) -> bool {\n-        // Hmm, so the result of GLB will still be a LB if one or both\n-        // sides change to 'static, but it may no longer be the GLB.\n-        // I'm going to go with `a || b` here to be conservative,\n-        // since the result of this operation may be affected, though\n-        // I think it would mostly be more accepting than before (since the result\n-        // would be a bigger region).\n-        a || b\n-    }\n-\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                variance: ty::Variance,\n                                                a: &T,"}, {"sha": "9d993ead5ca20039e78c396c394866d7ec0fc416", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -35,11 +35,6 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Lub<'a, 'tcx> {\n \n     fn a_is_expected(&self) -> bool { self.fields.a_is_expected }\n \n-    fn will_change(&mut self, a: bool, b: bool) -> bool {\n-        // result will be 'static if a || b\n-        a || b\n-    }\n-\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                variance: ty::Variance,\n                                                a: &T,"}, {"sha": "a293170966aacaac21dfd01dc636d2f671a76663", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -191,9 +191,6 @@ pub enum SubregionOrigin<'tcx> {\n     // Arose from a subtyping relation\n     Subtype(TypeTrace<'tcx>),\n \n-    // Arose from a subtyping relation\n-    DefaultExistentialBound(TypeTrace<'tcx>),\n-\n     // Stack-allocated closures cannot outlive innermost loop\n     // or function so as to ensure we only require finite stack\n     InfStackClosure(Span),\n@@ -1466,7 +1463,6 @@ impl<'tcx> SubregionOrigin<'tcx> {\n     pub fn span(&self) -> Span {\n         match *self {\n             Subtype(ref a) => a.span(),\n-            DefaultExistentialBound(ref a) => a.span(),\n             InfStackClosure(a) => a,\n             InvokeClosure(a) => a,\n             DerefPointer(a) => a,"}, {"sha": "4528abfb9294b4a8aab2061324ad53387f102da3", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -1357,56 +1357,9 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n             }\n         }\n \n-        // Check for future hostile edges tied to a bad default\n-        self.report_future_hostility(&graph);\n-\n         (0..self.num_vars() as usize).map(|idx| var_data[idx].value).collect()\n     }\n \n-    fn report_future_hostility(&self, graph: &RegionGraph) {\n-        let constraints = self.constraints.borrow();\n-        for edge in graph.all_edges() {\n-            match constraints[&edge.data] {\n-                SubregionOrigin::DefaultExistentialBound(_) => {\n-                    // this will become 'static in the future\n-                }\n-                _ => { continue; }\n-            }\n-\n-            // this constraint will become a 'static constraint in the\n-            // future, so walk outward and see if we have any hard\n-            // bounds that could not be inferred to 'static\n-            for nid in graph.depth_traverse(edge.target()) {\n-                for (_, succ) in graph.outgoing_edges(nid) {\n-                    match succ.data {\n-                        ConstrainVarSubReg(_, r) => {\n-                            match r {\n-                                ty::ReStatic | ty::ReInfer(_) => {\n-                                    /* OK */\n-                                }\n-                                ty::ReFree(_) | ty::ReScope(_) | ty::ReEmpty => {\n-                                    span_warn!(\n-                                        self.tcx.sess,\n-                                        constraints[&edge.data].span(),\n-                                        E0398,\n-                                        \"this code may fail to compile in Rust 1.3 due to \\\n-                                         the proposed change in object lifetime bound defaults\");\n-                                    return; // only issue the warning once per fn\n-                                }\n-                                ty::ReEarlyBound(..) | ty::ReLateBound(..) => {\n-                                    self.tcx.sess.span_bug(\n-                                        constraints[&succ.data].span(),\n-                                        \"relation to bound region\");\n-                                }\n-                            }\n-                        }\n-                        _ => { }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     fn construct_graph(&self) -> RegionGraph {\n         let num_vars = self.num_vars();\n "}, {"sha": "4d76d613392ee29fdfa932889667d804c15c2cae", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -45,14 +45,6 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Sub<'a, 'tcx> {\n         r\n     }\n \n-    fn will_change(&mut self, a: bool, b: bool) -> bool {\n-        // if we have (Foo+'a) <: (Foo+'b), this requires that 'a:'b.\n-        // So if 'a becomes 'static, no additional errors can occur.\n-        // OTOH, if 'a stays the same, but 'b becomes 'static, we\n-        // could have a problem.\n-        !a && b\n-    }\n-\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                variance: ty::Variance,\n                                                a: &T,\n@@ -106,12 +98,10 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Sub<'a, 'tcx> {\n     fn regions(&mut self, a: ty::Region, b: ty::Region) -> RelateResult<'tcx, ty::Region> {\n         debug!(\"{}.regions({:?}, {:?}) self.cause={:?}\",\n                self.tag(), a, b, self.fields.cause);\n-        let origin = match self.fields.cause {\n-            Some(Cause::ExistentialRegionBound(true)) =>\n-                SubregionOrigin::DefaultExistentialBound(self.fields.trace.clone()),\n-            _ =>\n-                SubregionOrigin::Subtype(self.fields.trace.clone()),\n-        };\n+        // FIXME -- we have more fine-grained information available\n+        // from the \"cause\" field, we could perhaps give more tailored\n+        // error messages.\n+        let origin = SubregionOrigin::Subtype(self.fields.trace.clone());\n         self.fields.infcx.region_vars.make_subregion(origin, a, b);\n         Ok(a)\n     }"}, {"sha": "81e59f57ae7de35a0996478f4532fe5a87c94e80", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -2462,7 +2462,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     region_bound: data_b.bounds.region_bound,\n                     builtin_bounds: data_b.bounds.builtin_bounds,\n                     projection_bounds: data_a.bounds.projection_bounds.clone(),\n-                    region_bound_will_change: data_b.bounds.region_bound_will_change,\n                 };\n \n                 let new_trait = tcx.mk_trait(data_a.principal.clone(), bounds);"}, {"sha": "ef337b416305119d785da27d57e8af4383b72264", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -1989,11 +1989,6 @@ pub struct ExistentialBounds<'tcx> {\n     pub region_bound: ty::Region,\n     pub builtin_bounds: BuiltinBounds,\n     pub projection_bounds: Vec<PolyProjectionPredicate<'tcx>>,\n-\n-    // If true, this TyTrait used a \"default bound\" in the surface\n-    // syntax.  This makes no difference to the type system but is\n-    // handy for error reporting.\n-    pub region_bound_will_change: bool,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]"}, {"sha": "eae2bb4966408c01fd6641528773af6eb3df81c7", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -700,7 +700,6 @@ pub fn super_fold_existential_bounds<'tcx, T: TypeFolder<'tcx>>(\n         region_bound: bounds.region_bound.fold_with(this),\n         builtin_bounds: bounds.builtin_bounds,\n         projection_bounds: bounds.projection_bounds.fold_with(this),\n-        region_bound_will_change: bounds.region_bound_will_change,\n     }\n }\n "}, {"sha": "4aa0e553a7aa61b4b23a80afde4c8e3d22224d31", "filename": "src/librustc/middle/ty_match.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Fty_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_match.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -42,11 +42,6 @@ impl<'a, 'tcx> TypeRelation<'a, 'tcx> for Match<'a, 'tcx> {\n     fn tcx(&self) -> &'a ty::ctxt<'tcx> { self.tcx }\n     fn a_is_expected(&self) -> bool { true } // irrelevant\n \n-    fn will_change(&mut self, _: bool, _: bool) -> bool {\n-        // we're ignoring regions in this code\n-        false\n-    }\n-\n     fn relate_with_variance<T:Relate<'a,'tcx>>(&mut self,\n                                                _: ty::Variance,\n                                                a: &T,"}, {"sha": "0159801d5beea7918ad7f35d690a9481422eeca6", "filename": "src/librustc/middle/ty_relate/mod.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_relate%2Fmod.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -24,7 +24,7 @@ pub type RelateResult<'tcx, T> = Result<T, ty::TypeError<'tcx>>;\n \n #[derive(Clone, Debug)]\n pub enum Cause {\n-    ExistentialRegionBound(bool), // if true, this is a default, else explicit\n+    ExistentialRegionBound, // relating an existential region bound\n }\n \n pub trait TypeRelation<'a,'tcx> : Sized {\n@@ -43,13 +43,6 @@ pub trait TypeRelation<'a,'tcx> : Sized {\n         f(self)\n     }\n \n-    /// Hack for deciding whether the lifetime bound defaults change\n-    /// will be a breaking change or not. The bools indicate whether\n-    /// `a`/`b` have a default that will change to `'static`; the\n-    /// result is true if this will potentially affect the affect of\n-    /// relating `a` and `b`.\n-    fn will_change(&mut self, a: bool, b: bool) -> bool;\n-\n     /// Generic relation routine suitable for most anything.\n     fn relate<T:Relate<'a,'tcx>>(&mut self, a: &T, b: &T) -> RelateResult<'tcx, T> {\n         Relate::relate(self, a, b)\n@@ -384,21 +377,17 @@ impl<'a,'tcx:'a> Relate<'a,'tcx> for ty::ExistentialBounds<'tcx> {\n                  -> RelateResult<'tcx, ty::ExistentialBounds<'tcx>>\n         where R: TypeRelation<'a,'tcx>\n     {\n-        let will_change = relation.will_change(a.region_bound_will_change,\n-                                               b.region_bound_will_change);\n-\n         let r =\n             try!(relation.with_cause(\n-                Cause::ExistentialRegionBound(will_change),\n+                Cause::ExistentialRegionBound,\n                 |relation| relation.relate_with_variance(ty::Contravariant,\n                                                          &a.region_bound,\n                                                          &b.region_bound)));\n         let nb = try!(relation.relate(&a.builtin_bounds, &b.builtin_bounds));\n         let pb = try!(relation.relate(&a.projection_bounds, &b.projection_bounds));\n         Ok(ty::ExistentialBounds { region_bound: r,\n                                    builtin_bounds: nb,\n-                                   projection_bounds: pb,\n-                                   region_bound_will_change: will_change })\n+                                   projection_bounds: pb })\n     }\n }\n "}, {"sha": "b0510a76385bee3379975c2af0fe75d28d448054", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -300,10 +300,6 @@ impl<'tcx> fmt::Display for ty::TraitTy<'tcx> {\n             try!(write!(f, \" + {}\", bound));\n         }\n \n-        if bounds.region_bound_will_change && verbose() {\n-            try!(write!(f, \" [WILL-CHANGE]\"));\n-        }\n-\n         Ok(())\n     }\n }"}, {"sha": "d7d3be699cb902891b396457a94e9ca16179869a", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -82,16 +82,6 @@ pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n             return t_norm;\n         }\n \n-        fn fold_existential_bounds(&mut self, s: &ty::ExistentialBounds<'tcx>)\n-                                   -> ty::ExistentialBounds<'tcx> {\n-            let mut s = ty_fold::super_fold_existential_bounds(self, s);\n-\n-            // this annoying flag messes up trans normalization\n-            s.region_bound_will_change = false;\n-\n-            s\n-        }\n-\n         fn fold_binder<T>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T>\n             where T : TypeFoldable<'tcx>\n         {"}, {"sha": "3bb3a630041539e737b87dfdde118fb45c79cab1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -2040,31 +2040,29 @@ pub fn conv_existential_bounds_from_partitioned_bounds<'tcx>(\n                                       principal_trait_ref,\n                                       builtin_bounds);\n \n-    let (region_bound, will_change) = match region_bound {\n-        Some(r) => (r, false),\n+    let region_bound = match region_bound {\n+        Some(r) => r,\n         None => {\n             match rscope.object_lifetime_default(span) {\n-                Some(r) => (r, rscope.object_lifetime_default_will_change_in_1_3()),\n+                Some(r) => r,\n                 None => {\n                     span_err!(this.tcx().sess, span, E0228,\n                               \"the lifetime bound for this object type cannot be deduced \\\n                                from context; please supply an explicit bound\");\n-                    (ty::ReStatic, false)\n+                    ty::ReStatic\n                 }\n             }\n         }\n     };\n \n-    debug!(\"region_bound: {:?} will_change: {:?}\",\n-           region_bound, will_change);\n+    debug!(\"region_bound: {:?}\", region_bound);\n \n     ty::sort_bounds_list(&mut projection_bounds);\n \n     ty::ExistentialBounds {\n         region_bound: region_bound,\n         builtin_bounds: builtin_bounds,\n         projection_bounds: projection_bounds,\n-        region_bound_will_change: will_change,\n     }\n }\n "}, {"sha": "28403ab22826c2d19a159b2f30e382171a09e256", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -51,19 +51,6 @@ pub trait RegionScope {\n     /// computing `object_lifetime_default` (in particular, in legacy\n     /// modes, it may not be relevant).\n     fn base_object_lifetime_default(&self, span: Span) -> ty::Region;\n-\n-    /// Used to issue warnings in Rust 1.2, not needed after that.\n-    /// True if the result of `object_lifetime_default` will change in 1.3.\n-    fn object_lifetime_default_will_change_in_1_3(&self) -> bool {\n-        false\n-    }\n-\n-    /// Used to issue warnings in Rust 1.2, not needed after that.\n-    /// True if the result of `base_object_lifetime_default` differs\n-    /// from the result of `object_lifetime_default`.\n-    fn base_object_lifetime_default_differs(&self) -> bool {\n-        false\n-    }\n }\n \n // A scope in which all regions must be explicitly named. This is used\n@@ -216,48 +203,18 @@ impl<'r> RegionScope for ObjectLifetimeDefaultRscope<'r> {\n                 None,\n \n             ty::ObjectLifetimeDefault::BaseDefault =>\n-                if false { // this will become the behavior in Rust 1.3\n-                    Some(self.base_object_lifetime_default(span))\n-                } else {\n-                    self.base_scope.object_lifetime_default(span)\n-                },\n+                // NB: This behavior changed in Rust 1.3.\n+                Some(self.base_object_lifetime_default(span)),\n \n             ty::ObjectLifetimeDefault::Specific(r) =>\n                 Some(r),\n         }\n     }\n \n     fn base_object_lifetime_default(&self, span: Span) -> ty::Region {\n-        assert!(false, \"this code should not execute until Rust 1.3\");\n         self.base_scope.base_object_lifetime_default(span)\n     }\n \n-    fn object_lifetime_default_will_change_in_1_3(&self) -> bool {\n-        debug!(\"object_lifetime_default_will_change_in_1_3: {:?}\", self.default);\n-\n-        match self.default {\n-            ty::ObjectLifetimeDefault::Ambiguous |\n-            ty::ObjectLifetimeDefault::Specific(_) =>\n-                false,\n-\n-            ty::ObjectLifetimeDefault::BaseDefault =>\n-                self.base_scope.base_object_lifetime_default_differs()\n-        }\n-    }\n-\n-    fn base_object_lifetime_default_differs(&self) -> bool {\n-        debug!(\"base_object_lifetime_default_differs: {:?}\", self.default);\n-\n-        match self.default {\n-            ty::ObjectLifetimeDefault::Ambiguous |\n-            ty::ObjectLifetimeDefault::Specific(_) =>\n-                true,\n-\n-            ty::ObjectLifetimeDefault::BaseDefault =>\n-                self.base_scope.base_object_lifetime_default_differs(),\n-        }\n-    }\n-\n     fn anon_regions(&self,\n                     span: Span,\n                     count: usize)"}, {"sha": "7e9a4f82478bd707569997a432f814e1902e85df", "filename": "src/test/compile-fail/lifetime-bound-will-change-warning.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Flifetime-bound-will-change-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Flifetime-bound-will-change-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-bound-will-change-warning.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -10,8 +10,8 @@\n \n // aux-build:lifetime_bound_will_change_warning_lib.rs\n \n-// Test that we get suitable warnings when lifetime bound change will\n-// cause breakage.\n+// Test that various corner cases cause an error. These are tests\n+// that used to pass before we tweaked object defaults.\n \n #![allow(dead_code)]\n #![allow(unused_variables)]\n@@ -41,12 +41,12 @@ fn test1cc<'a>(x: &'a Box<Fn()+'a>) {\n \n fn test2<'a>(x: &'a Box<Fn()+'a>) {\n     // but ref_obj will not, so warn.\n-    ref_obj(x) //~ WARNING this code may fail to compile in Rust 1.3\n+    ref_obj(x) //~ ERROR mismatched types\n }\n \n fn test2cc<'a>(x: &'a Box<Fn()+'a>) {\n     // same as test2, but cross crate\n-    lib::ref_obj(x) //~ WARNING this code may fail to compile in Rust 1.3\n+    lib::ref_obj(x) //~ ERROR mismatched types\n }\n \n fn test3<'a>(x: &'a Box<Fn()+'static>) {\n@@ -60,5 +60,5 @@ fn test3cc<'a>(x: &'a Box<Fn()+'static>) {\n }\n \n #[rustc_error]\n-fn main() { //~ ERROR compilation successful\n+fn main() {\n }"}, {"sha": "3df83d91999b96d05e5a27731161add58a2d2460", "filename": "src/test/compile-fail/object-lifetime-default-ambiguous.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-ambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-ambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-ambiguous.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -47,10 +47,7 @@ fn d(t: Ref2<Ref1<Test>>) {\n }\n \n fn e(t: Ref2<Ref0<Test>>) {\n-    //~^ ERROR lifetime bound for this object type cannot be deduced from context\n-    //\n-    // In this case, Ref2 is ambiguous, and Ref0 inherits the\n-    // ambiguity.\n+    // In this case, Ref2 is ambiguous, but Ref0 overrides with 'static.\n }\n \n fn f(t: &Ref2<Test>) {"}, {"sha": "fb75b9aa1dd941ac83d9537b1f714f4c5743ad6d", "filename": "src/test/compile-fail/object-lifetime-default-elision.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-elision.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -34,13 +34,11 @@ fn load0<'a>(ss: &'a Box<SomeTrait>) -> Box<SomeTrait> {\n     //\n     // Under new rules the result is:\n     //\n-    // for<'a> fn(&'a Box<SomeTrait+'a>) -> Box<SomeTrait+'static>\n+    // for<'a> fn(&'a Box<SomeTrait+'static>) -> Box<SomeTrait+'static>\n     //\n-    // Therefore, we get a type error attempting to return `deref(ss)`\n-    // since `SomeTrait+'a <: SomeTrait+'static` does not hold.\n+    // Therefore, no type error.\n \n     deref(ss)\n-        //~^ ERROR cannot infer\n }\n \n fn load1(ss: &SomeTrait) -> &SomeTrait {"}, {"sha": "e351c84c8afc68bff9695fdc105f2c1952f06cbc", "filename": "src/test/compile-fail/object-lifetime-default-from-rptr-box-error.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-rptr-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-rptr-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-rptr-box-error.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the lifetime from the enclosing `&` is \"inherited\"\n+// through the `Box` struct.\n+\n+// pretty-expanded FIXME #23616\n+\n+#![allow(dead_code)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct SomeStruct<'a> {\n+    t: &'a Box<Test>,\n+}\n+\n+fn c<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n+    ss.t = t; //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+}"}, {"sha": "93268559e8e51c4e132c650c7bc976b87f3946c2", "filename": "src/test/compile-fail/object-lifetime-default-from-rptr-struct-error.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-rptr-struct-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-rptr-struct-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-rptr-struct-error.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the lifetime from the enclosing `&` is \"inherited\"\n+// through the `MyBox` struct.\n+\n+// pretty-expanded FIXME #23616\n+\n+#![allow(dead_code)]\n+#![feature(rustc_error)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct SomeStruct<'a> {\n+    t: &'a MyBox<Test>,\n+    u: &'a MyBox<Test+'a>,\n+}\n+\n+struct MyBox<T:?Sized> {\n+    b: Box<T>\n+}\n+\n+fn c<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n+    ss.t = t; //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+}"}, {"sha": "80dbee3c481e674b71c9143b978d409a91327d38", "filename": "src/test/compile-fail/object-lifetime-default-mybox.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -27,7 +27,7 @@ fn deref<T>(ss: &T) -> T {\n }\n \n fn load0(ss: &MyBox<SomeTrait>) -> MyBox<SomeTrait> {\n-    deref(ss) //~ ERROR cannot infer\n+    deref(ss)\n }\n \n fn load1<'a,'b>(a: &'a MyBox<SomeTrait>,\n@@ -36,11 +36,10 @@ fn load1<'a,'b>(a: &'a MyBox<SomeTrait>,\n {\n     a\n       //~^ ERROR cannot infer\n-      //~| ERROR mismatched types\n }\n \n fn load2<'a>(ss: &MyBox<SomeTrait+'a>) -> MyBox<SomeTrait+'a> {\n-    load0(ss) //~ WARNING E0398\n+    load0(ss) //~ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "57a32ba599f93d0aeda49e41a1bed2f166fe0dd6", "filename": "src/test/run-pass/lang-item-public.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4432b37378ec55450e06799f5344b4b0f4b94e0/src%2Ftest%2Frun-pass%2Flang-item-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flang-item-public.rs?ref=d4432b37378ec55450e06799f5344b4b0f4b94e0", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:lang-item-public.rs\n-// ignore-android\n-\n-#![feature(start, no_std)]\n-#![no_std]\n-\n-extern crate lang_item_public as lang_lib;\n-\n-#[start]\n-fn main(_: isize, _: *const *const u8) -> isize {\n-    1_isize % 1_isize\n-}"}, {"sha": "af8018b7653411fa04a6e4df4f4540fccb91fed2", "filename": "src/test/run-pass/object-lifetime-default-from-rptr-box.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-box.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -32,9 +32,7 @@ fn b<'a>(t: &'a Box<Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn c<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n-    ss.t = t;\n-}\n+// see also compile-fail/object-lifetime-default-from-rptr-box-error.rs\n \n fn d<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;"}, {"sha": "fcff5fd6f17d6c1a9f02df30e90529e2afc9ae7d", "filename": "src/test/run-pass/object-lifetime-default-from-rptr-struct.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e05ac3938bcbdd616930bb010a3bbfa35f22850e/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-rptr-struct.rs?ref=e05ac3938bcbdd616930bb010a3bbfa35f22850e", "patch": "@@ -36,9 +36,7 @@ fn b<'a>(t: &'a MyBox<Test>, mut ss: SomeStruct<'a>) {\n     ss.u = t;\n }\n \n-fn c<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n-    ss.t = t;\n-}\n+// see also compile-fail/object-lifetime-default-from-rptr-box-error.rs\n \n fn d<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n     ss.u = t;"}]}