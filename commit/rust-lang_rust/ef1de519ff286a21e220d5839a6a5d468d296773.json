{"sha": "ef1de519ff286a21e220d5839a6a5d468d296773", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMWRlNTE5ZmYyODZhMjFlMjIwZDU4MzlhNmE1ZDQ2OGQyOTY3NzM=", "commit": {"author": {"name": "Leo Testard", "email": "leo.testard@gmail.com", "date": "2016-04-04T15:08:41Z"}, "committer": {"name": "Leo Testard", "email": "leo.testard@gmail.com", "date": "2016-04-21T12:00:14Z"}, "message": "Generate the features structure and arrays with new macros.\nThis is more readable, safer, and allows for a much more efficient parsing.", "tree": {"sha": "62c997499d591bb72af9ab20df9e629ffa70a584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c997499d591bb72af9ab20df9e629ffa70a584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef1de519ff286a21e220d5839a6a5d468d296773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1de519ff286a21e220d5839a6a5d468d296773", "html_url": "https://github.com/rust-lang/rust/commit/ef1de519ff286a21e220d5839a6a5d468d296773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef1de519ff286a21e220d5839a6a5d468d296773/comments", "author": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f1dfe615d479f19fa1b989e014eb8d4d516a23a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1dfe615d479f19fa1b989e014eb8d4d516a23a", "html_url": "https://github.com/rust-lang/rust/commit/2f1dfe615d479f19fa1b989e014eb8d4d516a23a"}], "stats": {"total": 617, "additions": 196, "deletions": 421}, "files": [{"sha": "bc8d5cd7703464d527f7418d1736f667f7f3f32c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef1de519ff286a21e220d5839a6a5d468d296773/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1de519ff286a21e220d5839a6a5d468d296773/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ef1de519ff286a21e220d5839a6a5d468d296773", "patch": "@@ -1345,14 +1345,14 @@ impl<'feat> ExpansionConfig<'feat> {\n     }\n \n     feature_tests! {\n-        fn enable_quotes = allow_quote,\n-        fn enable_asm = allow_asm,\n-        fn enable_log_syntax = allow_log_syntax,\n-        fn enable_concat_idents = allow_concat_idents,\n-        fn enable_trace_macros = allow_trace_macros,\n+        fn enable_quotes = quote,\n+        fn enable_asm = asm,\n+        fn enable_log_syntax = log_syntax,\n+        fn enable_concat_idents = concat_idents,\n+        fn enable_trace_macros = trace_macros,\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n-        fn enable_custom_derive = allow_custom_derive,\n-        fn enable_pushpop_unsafe = allow_pushpop_unsafe,\n+        fn enable_custom_derive = custom_derive,\n+        fn enable_pushpop_unsafe = pushpop_unsafe,\n     }\n }\n "}, {"sha": "e281e30dbc28f440ccf07b51c41440602cb94be8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 189, "deletions": 414, "changes": 603, "blob_url": "https://github.com/rust-lang/rust/blob/ef1de519ff286a21e220d5839a6a5d468d296773/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef1de519ff286a21e220d5839a6a5d468d296773/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ef1de519ff286a21e220d5839a6a5d468d296773", "patch": "@@ -22,7 +22,6 @@\n //! gate usage is added, *do not remove it again* even once the feature\n //! becomes stable.\n \n-use self::Status::*;\n use self::AttributeType::*;\n use self::AttributeGate::*;\n \n@@ -40,238 +39,275 @@ use parse::token::InternedString;\n use std::ascii::AsciiExt;\n use std::cmp;\n \n-enum Status {\n-    /// Represents an active feature that is currently being implemented or\n-    /// currently being considered for addition/removal.\n-    Active,\n+macro_rules! setter {\n+    ($field: ident) => {{\n+        fn f(features: &mut Features) -> &mut bool {\n+            &mut features.$field\n+        }\n+        f as fn(&mut Features) -> &mut bool\n+    }}\n+}\n \n-    /// Represents a feature which has since been removed (it was once Active)\n-    Removed,\n+macro_rules! declare_features {\n+    ($((active, $feature: ident, $ver: expr, $issue: expr)),+) => {\n+        /// Represents active features that are currently being implemented or\n+        /// currently being considered for addition/removal.\n+        const ACTIVE_FEATURES: &'static [(&'static str, &'static str,\n+                                          Option<u32>, fn(&mut Features) -> &mut bool)] = &[\n+            $((stringify!($feature), $ver, $issue, setter!($feature))),+\n+        ];\n+\n+        /// A set of features to be used by later passes.\n+        pub struct Features {\n+            /// spans of #![feature] attrs for stable language features. for error reporting\n+            pub declared_stable_lang_features: Vec<Span>,\n+            /// #![feature] attrs for non-language (library) features\n+            pub declared_lib_features: Vec<(InternedString, Span)>,\n+            $(pub $feature: bool),+\n+        }\n \n-    /// This language feature has since been Accepted (it was once Active)\n-    Accepted,\n+        impl Features {\n+            pub fn new() -> Features {\n+                Features {\n+                    declared_stable_lang_features: Vec::new(),\n+                    declared_lib_features: Vec::new(),\n+                    $($feature: false),+\n+                }\n+            }\n+        }\n+    };\n+\n+    ($((removed, $feature: ident, $ver: expr, $issue: expr)),+) => {\n+        /// Represents features which has since been removed (it was once Active)\n+        const REMOVED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n+            $((stringify!($feature), $ver, $issue)),+\n+        ];\n+    };\n+\n+    ($((accepted, $feature: ident, $ver: expr, $issue: expr)),+) => {\n+        /// Those language feature has since been Accepted (it was once Active)\n+        const ACCEPTED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n+            $((stringify!($feature), $ver, $issue)),+\n+        ];\n+    }\n }\n \n // If you change this list without updating src/doc/reference.md, @cmr will be sad\n // Don't ever remove anything from this list; set them to 'Removed'.\n // The version numbers here correspond to the version in which the current status\n // was set. This is most important for knowing when a particular feature became\n // stable (active).\n-// NB: The tidy tool parses this information directly out of the source so take\n-// care when modifying it.\n-const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status)] = &[\n-    (\"globs\", \"1.0.0\", None, Accepted),\n-    (\"macro_rules\", \"1.0.0\", None, Accepted),\n-    (\"struct_variant\", \"1.0.0\", None, Accepted),\n-    (\"asm\", \"1.0.0\", Some(29722), Active),\n-    (\"managed_boxes\", \"1.0.0\", None, Removed),\n-    (\"non_ascii_idents\", \"1.0.0\", Some(28979), Active),\n-    (\"thread_local\", \"1.0.0\", Some(29594), Active),\n-    (\"link_args\", \"1.0.0\", Some(29596), Active),\n-    (\"plugin_registrar\", \"1.0.0\", Some(29597), Active),\n-    (\"log_syntax\", \"1.0.0\", Some(29598), Active),\n-    (\"trace_macros\", \"1.0.0\", Some(29598), Active),\n-    (\"concat_idents\", \"1.0.0\", Some(29599), Active),\n+// NB: The featureck.py script parses this information directly out of the source\n+// so take care when modifying it.\n+\n+declare_features! (\n+    (active, asm, \"1.0.0\", Some(29722)),\n+    (active, concat_idents, \"1.0.0\", Some(29599)),\n+    (active, link_args, \"1.0.0\", Some(29596)),\n+    (active, log_syntax, \"1.0.0\", Some(29598)),\n+    (active, non_ascii_idents, \"1.0.0\", Some(28979)),\n+    (active, plugin_registrar, \"1.0.0\", Some(29597)),\n+    (active, thread_local, \"1.0.0\", Some(29594)),\n+    (active, trace_macros, \"1.0.0\", Some(29598)),\n \n     // rustc internal, for now:\n-    (\"intrinsics\", \"1.0.0\", None, Active),\n-    (\"lang_items\", \"1.0.0\", None, Active),\n+    (active, intrinsics, \"1.0.0\", None),\n+    (active, lang_items, \"1.0.0\", None),\n \n-    (\"simd\", \"1.0.0\", Some(27731), Active),\n-    (\"default_type_params\", \"1.0.0\", None, Accepted),\n-    (\"quote\", \"1.0.0\", Some(29601), Active),\n-    (\"link_llvm_intrinsics\", \"1.0.0\", Some(29602), Active),\n-    (\"linkage\", \"1.0.0\", Some(29603), Active),\n-    (\"struct_inherit\", \"1.0.0\", None, Removed),\n+    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602)),\n+    (active, linkage, \"1.0.0\", Some(29603)),\n+    (active, quote, \"1.0.0\", Some(29601)),\n+    (active, simd, \"1.0.0\", Some(27731)),\n \n-    (\"quad_precision_float\", \"1.0.0\", None, Removed),\n \n     // rustc internal\n-    (\"rustc_diagnostic_macros\", \"1.0.0\", None, Active),\n-    (\"unboxed_closures\", \"1.0.0\", Some(29625), Active),\n-    (\"reflect\", \"1.0.0\", Some(27749), Active),\n-    (\"import_shadowing\", \"1.0.0\", None, Removed),\n-    (\"advanced_slice_patterns\", \"1.0.0\", Some(23121), Active),\n-    (\"tuple_indexing\", \"1.0.0\", None, Accepted),\n-    (\"associated_types\", \"1.0.0\", None, Accepted),\n-    (\"visible_private_types\", \"1.0.0\", None, Removed),\n-    (\"slicing_syntax\", \"1.0.0\", None, Accepted),\n-    (\"box_syntax\", \"1.0.0\", Some(27779), Active),\n-    (\"placement_in_syntax\", \"1.0.0\", Some(27779), Active),\n+    (active, rustc_diagnostic_macros, \"1.0.0\", None),\n+    (active, advanced_slice_patterns, \"1.0.0\", Some(23121)),\n+    (active, box_syntax, \"1.0.0\", Some(27779)),\n+    (active, placement_in_syntax, \"1.0.0\", Some(27779)),\n+    (active, reflect, \"1.0.0\", Some(27749)),\n+    (active, unboxed_closures, \"1.0.0\", Some(29625)),\n \n     // rustc internal.\n-    (\"pushpop_unsafe\", \"1.2.0\", None, Active),\n-\n-    (\"on_unimplemented\", \"1.0.0\", Some(29628), Active),\n-    (\"simd_ffi\", \"1.0.0\", Some(27731), Active),\n-    (\"allocator\", \"1.0.0\", Some(27389), Active),\n-    (\"needs_allocator\", \"1.4.0\", Some(27389), Active),\n-    (\"linked_from\", \"1.3.0\", Some(29629), Active),\n-\n-    (\"if_let\", \"1.0.0\", None, Accepted),\n-    (\"while_let\", \"1.0.0\", None, Accepted),\n-\n-    (\"plugin\", \"1.0.0\", Some(29597), Active),\n-    (\"start\", \"1.0.0\", Some(29633), Active),\n-    (\"main\", \"1.0.0\", Some(29634), Active),\n-\n-    (\"fundamental\", \"1.0.0\", Some(29635), Active),\n-\n-    // A temporary feature gate used to enable parser extensions needed\n-    // to bootstrap fix for #5723.\n-    (\"issue_5723_bootstrap\", \"1.0.0\", None, Accepted),\n-\n-    (\"structural_match\", \"1.8.0\", Some(31434), Active),\n-\n-    // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n-    (\"opt_out_copy\", \"1.0.0\", None, Removed),\n+    (active, pushpop_unsafe, \"1.2.0\", None),\n+\n+    (active, allocator, \"1.0.0\", Some(27389)),\n+    (active, fundamental, \"1.0.0\", Some(29635)),\n+    (active, linked_from, \"1.3.0\", Some(29629)),\n+    (active, main, \"1.0.0\", Some(29634)),\n+    (active, needs_allocator, \"1.4.0\", Some(27389)),\n+    (active, on_unimplemented, \"1.0.0\", Some(29628)),\n+    (active, plugin, \"1.0.0\", Some(29597)),\n+    (active, simd_ffi, \"1.0.0\", Some(27731)),\n+    (active, start, \"1.0.0\", Some(29633)),\n+    (active, structural_match, \"1.8.0\", Some(31434)),\n \n     // OIBIT specific features\n-    (\"optin_builtin_traits\", \"1.0.0\", Some(13231), Active),\n+    (active, optin_builtin_traits, \"1.0.0\", Some(13231)),\n \n     // macro reexport needs more discussion and stabilization\n-    (\"macro_reexport\", \"1.0.0\", Some(29638), Active),\n-\n-    // These are used to test this portion of the compiler, they don't actually\n-    // mean anything\n-    (\"test_accepted_feature\", \"1.0.0\", None, Accepted),\n-    (\"test_removed_feature\", \"1.0.0\", None, Removed),\n+    (active, macro_reexport, \"1.0.0\", Some(29638)),\n \n     // Allows use of #[staged_api]\n     // rustc internal\n-    (\"staged_api\", \"1.0.0\", None, Active),\n+    (active, staged_api, \"1.0.0\", None),\n \n     // Allows using items which are missing stability attributes\n     // rustc internal\n-    (\"unmarked_api\", \"1.0.0\", None, Active),\n-\n-    // Allows using #![no_std]\n-    (\"no_std\", \"1.0.0\", None, Accepted),\n+    (active, unmarked_api, \"1.0.0\", None),\n \n     // Allows using #![no_core]\n-    (\"no_core\", \"1.3.0\", Some(29639), Active),\n+    (active, no_core, \"1.3.0\", Some(29639)),\n \n     // Allows using `box` in patterns; RFC 469\n-    (\"box_patterns\", \"1.0.0\", Some(29641), Active),\n+    (active, box_patterns, \"1.0.0\", Some(29641)),\n \n     // Allows using the unsafe_no_drop_flag attribute (unlikely to\n     // switch to Accepted; see RFC 320)\n-    (\"unsafe_no_drop_flag\", \"1.0.0\", None, Active),\n+    (active, unsafe_no_drop_flag, \"1.0.0\", None),\n \n     // Allows using the unsafe_destructor_blind_to_params attribute;\n     // RFC 1238\n-    (\"dropck_parametricity\", \"1.3.0\", Some(28498), Active),\n+    (active, dropck_parametricity, \"1.3.0\", Some(28498)),\n \n     // Allows the use of custom attributes; RFC 572\n-    (\"custom_attribute\", \"1.0.0\", Some(29642), Active),\n+    (active, custom_attribute, \"1.0.0\", Some(29642)),\n \n     // Allows the use of #[derive(Anything)] as sugar for\n     // #[derive_Anything].\n-    (\"custom_derive\", \"1.0.0\", Some(29644), Active),\n+    (active, custom_derive, \"1.0.0\", Some(29644)),\n \n     // Allows the use of rustc_* attributes; RFC 572\n-    (\"rustc_attrs\", \"1.0.0\", Some(29642), Active),\n+    (active, rustc_attrs, \"1.0.0\", Some(29642)),\n \n     // Allows the use of #[allow_internal_unstable]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n     //\n     // rustc internal\n-    (\"allow_internal_unstable\", \"1.0.0\", None, Active),\n+    (active, allow_internal_unstable, \"1.0.0\", None),\n \n     // #23121. Array patterns have some hazards yet.\n-    (\"slice_patterns\", \"1.0.0\", Some(23121), Active),\n-\n-    // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n-    (\"negate_unsigned\", \"1.0.0\", Some(29645), Removed),\n+    (active, slice_patterns, \"1.0.0\", Some(23121)),\n \n     // Allows the definition of associated constants in `trait` or `impl`\n     // blocks.\n-    (\"associated_consts\", \"1.0.0\", Some(29646), Active),\n+    (active, associated_consts, \"1.0.0\", Some(29646)),\n \n     // Allows the definition of `const fn` functions.\n-    (\"const_fn\", \"1.2.0\", Some(24111), Active),\n+    (active, const_fn, \"1.2.0\", Some(24111)),\n \n     // Allows indexing into constant arrays.\n-    (\"const_indexing\", \"1.4.0\", Some(29947), Active),\n+    (active, const_indexing, \"1.4.0\", Some(29947)),\n \n     // Allows using #[prelude_import] on glob `use` items.\n     //\n     // rustc internal\n-    (\"prelude_import\", \"1.2.0\", None, Active),\n+    (active, prelude_import, \"1.2.0\", None),\n \n     // Allows the definition recursive static items.\n-    (\"static_recursion\", \"1.3.0\", Some(29719), Active),\n+    (active, static_recursion, \"1.3.0\", Some(29719)),\n \n     // Allows default type parameters to influence type inference.\n-    (\"default_type_parameter_fallback\", \"1.3.0\", Some(27336), Active),\n+    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336)),\n \n     // Allows associated type defaults\n-    (\"associated_type_defaults\", \"1.2.0\", Some(29661), Active),\n+    (active, associated_type_defaults, \"1.2.0\", Some(29661)),\n \n     // Allows macros to appear in the type position.\n-    (\"type_macros\", \"1.3.0\", Some(27245), Active),\n+    (active, type_macros, \"1.3.0\", Some(27245)),\n \n     // allow `repr(simd)`, and importing the various simd intrinsics\n-    (\"repr_simd\", \"1.4.0\", Some(27731), Active),\n+    (active, repr_simd, \"1.4.0\", Some(27731)),\n \n     // Allows cfg(target_feature = \"...\").\n-    (\"cfg_target_feature\", \"1.4.0\", Some(29717), Active),\n+    (active, cfg_target_feature, \"1.4.0\", Some(29717)),\n \n     // allow `extern \"platform-intrinsic\" { ... }`\n-    (\"platform_intrinsics\", \"1.4.0\", Some(27731), Active),\n+    (active, platform_intrinsics, \"1.4.0\", Some(27731)),\n \n     // allow `#[unwind]`\n     // rust runtime internal\n-    (\"unwind_attributes\", \"1.4.0\", None, Active),\n+    (active, unwind_attributes, \"1.4.0\", None),\n \n     // allow the use of `#[naked]` on functions.\n-    (\"naked_functions\", \"1.9.0\", Some(32408), Active),\n-\n-    // allow empty structs and enum variants with braces\n-    (\"braced_empty_structs\", \"1.8.0\", Some(29720), Accepted),\n-\n-    // allow overloading augmented assignment operations like `a += b`\n-    (\"augmented_assignments\", \"1.8.0\", Some(28235), Accepted),\n+    (active, naked_functions, \"1.9.0\", Some(32408)),\n \n     // allow `#[no_debug]`\n-    (\"no_debug\", \"1.5.0\", Some(29721), Active),\n+    (active, no_debug, \"1.5.0\", Some(29721)),\n \n     // allow `#[omit_gdb_pretty_printer_section]`\n     // rustc internal.\n-    (\"omit_gdb_pretty_printer_section\", \"1.5.0\", None, Active),\n+    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None),\n \n     // Allows cfg(target_vendor = \"...\").\n-    (\"cfg_target_vendor\", \"1.5.0\", Some(29718), Active),\n+    (active, cfg_target_vendor, \"1.5.0\", Some(29718)),\n \n     // Allow attributes on expressions and non-item statements\n-    (\"stmt_expr_attributes\", \"1.6.0\", Some(15701), Active),\n-\n-    // Allows `#[deprecated]` attribute\n-    (\"deprecated\", \"1.9.0\", Some(29935), Accepted),\n+    (active, stmt_expr_attributes, \"1.6.0\", Some(15701)),\n \n     // allow using type ascription in expressions\n-    (\"type_ascription\", \"1.6.0\", Some(23416), Active),\n+    (active, type_ascription, \"1.6.0\", Some(23416)),\n \n     // Allows cfg(target_thread_local)\n-    (\"cfg_target_thread_local\", \"1.7.0\", Some(29594), Active),\n+    (active, cfg_target_thread_local, \"1.7.0\", Some(29594)),\n \n     // rustc internal\n-    (\"abi_vectorcall\", \"1.7.0\", None, Active),\n+    (active, abi_vectorcall, \"1.7.0\", None),\n \n     // a...b and ...b\n-    (\"inclusive_range_syntax\", \"1.7.0\", Some(28237), Active),\n+    (active, inclusive_range_syntax, \"1.7.0\", Some(28237)),\n \n     // `expr?`\n-    (\"question_mark\", \"1.9.0\", Some(31436), Active),\n+    (active, question_mark, \"1.9.0\", Some(31436)),\n \n     // impl specialization (RFC 1210)\n-    (\"specialization\", \"1.7.0\", Some(31844), Active),\n+    (active, specialization, \"1.7.0\", Some(31844)),\n \n     // pub(restricted) visibilities (RFC 1422)\n-    (\"pub_restricted\", \"1.9.0\", Some(32409), Active),\n-];\n+    (active, pub_restricted, \"1.9.0\", Some(32409))\n+);\n+\n+declare_features! (\n+    (removed, import_shadowing, \"1.0.0\", None),\n+    (removed, managed_boxes, \"1.0.0\", None),\n+    // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n+    (removed, negate_unsigned, \"1.0.0\", Some(29645)),\n+    // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n+    (removed, opt_out_copy, \"1.0.0\", None),\n+    (removed, quad_precision_float, \"1.0.0\", None),\n+    (removed, struct_inherit, \"1.0.0\", None),\n+    (removed, test_removed_feature, \"1.0.0\", None),\n+    (removed, visible_private_types, \"1.0.0\", None)\n+);\n+\n+declare_features! (\n+    (accepted, associated_types, \"1.0.0\", None),\n+    // allow overloading augmented assignment operations like `a += b`\n+    (accepted, augmented_assignments, \"1.8.0\", Some(28235)),\n+    // allow empty structs and enum variants with braces\n+    (accepted, braced_empty_structs, \"1.8.0\", Some(29720)),\n+    (accepted, default_type_params, \"1.0.0\", None),\n+    (accepted, globs, \"1.0.0\", None),\n+    (accepted, if_let, \"1.0.0\", None),\n+    // A temporary feature gate used to enable parser extensions needed\n+    // to bootstrap fix for #5723.\n+    (accepted, issue_5723_bootstrap, \"1.0.0\", None),\n+    (accepted, macro_rules, \"1.0.0\", None),\n+    // Allows using #![no_std]\n+    (accepted, no_std, \"1.0.0\", None),\n+    (accepted, slicing_syntax, \"1.0.0\", None),\n+    (accepted, struct_variant, \"1.0.0\", None),\n+    // These are used to test this portion of the compiler, they don't actually\n+    // mean anything\n+    (accepted, test_accepted_feature, \"1.0.0\", None),\n+    (accepted, tuple_indexing, \"1.0.0\", None),\n+    (accepted, while_let, \"1.0.0\", None),\n+    // Allows `#[deprecated]` attribute\n+    (accepted, deprecated, \"1.9.0\", Some(29935))\n+);\n+\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n #[derive(PartialEq, Copy, Clone, Debug)]\n@@ -471,7 +507,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     (\"naked\", Whitelisted, Gated(\"naked_functions\",\n                                  \"the `#[naked]` attribute \\\n                                   is an experimental feature\",\n-                                 cfg_fn!(naked))),\n+                                 cfg_fn!(naked_functions))),\n     (\"export_name\", Whitelisted, Ungated),\n     (\"inline\", Whitelisted, Ungated),\n     (\"link\", Whitelisted, Ungated),\n@@ -618,177 +654,6 @@ impl GatedCfg {\n     }\n }\n \n-/// A set of features to be used by later passes.\n-pub struct Features {\n-    pub unboxed_closures: bool,\n-    pub rustc_diagnostic_macros: bool,\n-    pub allow_quote: bool,\n-    pub allow_asm: bool,\n-    pub allow_log_syntax: bool,\n-    pub allow_concat_idents: bool,\n-    pub allow_trace_macros: bool,\n-    pub allow_internal_unstable: bool,\n-    pub allow_custom_derive: bool,\n-    pub allow_placement_in: bool,\n-    pub allow_box: bool,\n-    pub allow_pushpop_unsafe: bool,\n-    pub allow_inclusive_range: bool,\n-    pub simd_ffi: bool,\n-    pub unmarked_api: bool,\n-    /// spans of #![feature] attrs for stable language features. for error reporting\n-    pub declared_stable_lang_features: Vec<Span>,\n-    /// #![feature] attrs for non-language (library) features\n-    pub declared_lib_features: Vec<(InternedString, Span)>,\n-    pub const_fn: bool,\n-    pub const_indexing: bool,\n-    pub static_recursion: bool,\n-    pub default_type_parameter_fallback: bool,\n-    pub rustc_attrs: bool,\n-    pub type_macros: bool,\n-    pub cfg_target_feature: bool,\n-    pub cfg_target_vendor: bool,\n-    pub cfg_target_thread_local: bool,\n-    pub staged_api: bool,\n-    pub stmt_expr_attributes: bool,\n-    pub deprecated: bool,\n-    pub question_mark: bool,\n-    pub specialization: bool,\n-    pub pub_restricted: bool,\n-    pub structural_match: bool,\n-    pub plugin: bool,\n-    pub lang_items: bool,\n-    pub linkage: bool,\n-    pub thread_local: bool,\n-    pub on_unimplemented: bool,\n-    pub allocator: bool,\n-    pub needs_allocator: bool,\n-    pub fundamental: bool,\n-    pub linked_from: bool,\n-    pub naked: bool,\n-    pub no_debug: bool,\n-    pub omit_gdb_pretty_printer_section: bool,\n-    pub dropck_parametricity: bool,\n-    pub unwind_attributes: bool,\n-    pub prelude_import: bool,\n-    pub reflect: bool,\n-    pub no_core: bool,\n-    pub unsafe_no_drop_flag: bool,\n-    pub custom_derive: bool,\n-    pub custom_attribute: bool,\n-    pub asm: bool,\n-    pub log_syntax: bool,\n-    pub trace_macros: bool,\n-    pub concat_idents: bool,\n-    pub box_syntax: bool,\n-    pub placement_in_syntax: bool,\n-    pub non_ascii_idents: bool,\n-    pub macro_reexport: bool,\n-    pub link_args: bool,\n-    pub intrinsics: bool,\n-    pub platform_intrinsics: bool,\n-    pub abi_vectorcall: bool,\n-    pub plugin_registrar: bool,\n-    pub start: bool,\n-    pub main: bool,\n-    pub simd: bool,\n-    pub repr_simd: bool,\n-    pub optin_builtin_traits: bool,\n-    pub link_llvm_intrinsics: bool,\n-    pub type_ascription: bool,\n-    pub inclusive_range_syntax: bool,\n-    pub advanced_slice_patterns: bool,\n-    pub slice_patterns: bool,\n-    pub box_patterns: bool,\n-    pub associated_consts: bool,\n-    pub associated_type_defaults: bool\n-}\n-\n-impl Features {\n-    pub fn new() -> Features {\n-        Features {\n-            unboxed_closures: false,\n-            rustc_diagnostic_macros: false,\n-            allow_quote: false,\n-            allow_asm: false,\n-            allow_log_syntax: false,\n-            allow_concat_idents: false,\n-            allow_trace_macros: false,\n-            allow_internal_unstable: false,\n-            allow_custom_derive: false,\n-            allow_placement_in: false,\n-            allow_box: false,\n-            allow_pushpop_unsafe: false,\n-            allow_inclusive_range: false,\n-            simd_ffi: false,\n-            unmarked_api: false,\n-            declared_stable_lang_features: Vec::new(),\n-            declared_lib_features: Vec::new(),\n-            const_fn: false,\n-            const_indexing: false,\n-            static_recursion: false,\n-            default_type_parameter_fallback: false,\n-            rustc_attrs: false,\n-            type_macros: false,\n-            cfg_target_feature: false,\n-            cfg_target_vendor: false,\n-            cfg_target_thread_local: false,\n-            staged_api: false,\n-            stmt_expr_attributes: false,\n-            deprecated: false,\n-            question_mark: false,\n-            specialization: false,\n-            pub_restricted: false,\n-            structural_match: false,\n-            plugin: false,\n-            lang_items: false,\n-            linkage: false,\n-            thread_local: false,\n-            on_unimplemented: false,\n-            allocator: false,\n-            needs_allocator: false,\n-            fundamental: false,\n-            linked_from: false,\n-            naked: false,\n-            no_debug: false,\n-            omit_gdb_pretty_printer_section: false,\n-            dropck_parametricity: false,\n-            unwind_attributes: false,\n-            prelude_import: false,\n-            reflect: false,\n-            no_core: false,\n-            unsafe_no_drop_flag: false,\n-            custom_derive: false,\n-            custom_attribute: false,\n-            asm: false,\n-            log_syntax: false,\n-            trace_macros: false,\n-            concat_idents: false,\n-            box_syntax: false,\n-            placement_in_syntax: false,\n-            non_ascii_idents: false,\n-            macro_reexport: false,\n-            link_args: false,\n-            intrinsics: false,\n-            platform_intrinsics: false,\n-            abi_vectorcall: false,\n-            plugin_registrar: false,\n-            start: false,\n-            main: false,\n-            simd: false,\n-            repr_simd: false,\n-            optin_builtin_traits: false,\n-            link_llvm_intrinsics: false,\n-            type_ascription: false,\n-            inclusive_range_syntax: false,\n-            advanced_slice_patterns: false,\n-            slice_patterns: false,\n-            box_patterns: false,\n-            associated_consts: false,\n-            associated_type_defaults: false,\n-        }\n-    }\n-}\n-\n const EXPLAIN_BOX_SYNTAX: &'static str =\n     \"box expression syntax is experimental; you can call `Box::new` instead.\";\n \n@@ -802,21 +667,21 @@ const EXPLAIN_STMT_ATTR_SYNTAX: &'static str =\n     \"attributes on non-item statements and expressions are experimental.\";\n \n pub fn check_for_box_syntax(f: Option<&Features>, diag: &Handler, span: Span) {\n-    if let Some(&Features { allow_box: true, .. }) = f {\n+    if let Some(&Features { box_syntax: true, .. }) = f {\n         return;\n     }\n     emit_feature_err(diag, \"box_syntax\", span, GateIssue::Language, EXPLAIN_BOX_SYNTAX);\n }\n \n pub fn check_for_placement_in(f: Option<&Features>, diag: &Handler, span: Span) {\n-    if let Some(&Features { allow_placement_in: true, .. }) = f {\n+    if let Some(&Features { placement_in_syntax: true, .. }) = f {\n         return;\n     }\n     emit_feature_err(diag, \"placement_in_syntax\", span, GateIssue::Language, EXPLAIN_PLACEMENT_IN);\n }\n \n pub fn check_for_pushpop_syntax(f: Option<&Features>, diag: &Handler, span: Span) {\n-    if let Some(&Features { allow_pushpop_unsafe: true, .. }) = f {\n+    if let Some(&Features { pushpop_unsafe: true, .. }) = f {\n         return;\n     }\n     emit_feature_err(diag, \"pushpop_unsafe\", span, GateIssue::Language, EXPLAIN_PUSHPOP_UNSAFE);\n@@ -895,15 +760,17 @@ impl<'a> Context<'a> {\n }\n \n fn find_lang_feature_issue(feature: &str) -> Option<u32> {\n-    let info = KNOWN_FEATURES.iter()\n-                              .find(|t| t.0 == feature)\n-                              .unwrap();\n-    let issue = info.2;\n-    if let Active = info.3 {\n+    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.0 == feature) {\n+        let issue = info.2;\n         // FIXME (#28244): enforce that active features have issue numbers\n         // assert!(issue.is_some())\n+        issue\n+    } else {\n+        // search in Accepted or Removed features\n+        ACCEPTED_FEATURES.iter().chain(REMOVED_FEATURES.iter())\n+            .find(|t| t.0 == feature)\n+            .unwrap().2\n     }\n-    issue\n }\n \n pub enum GateIssue {\n@@ -1317,9 +1184,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &Handler,\n                        -> Features\n     where F: FnOnce(&mut Context, &ast::Crate)\n {\n-    let mut accepted_features = Vec::new();\n-    let mut unknown_features = Vec::new();\n-    let mut enabled_features = Vec::new();\n+    let mut features = Features::new();\n \n     for attr in &krate.attrs {\n         if !attr.check_name(\"feature\") {\n@@ -1342,115 +1207,25 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &Handler,\n                             continue\n                         }\n                     };\n-                    match KNOWN_FEATURES.iter()\n-                                        .find(|& &(n, _, _, _)| name == n) {\n-                        Some(&(name, _, _, Active)) => {\n-                            enabled_features.push(name);\n-                        }\n-                        Some(&(_, _, _, Removed)) => {\n-                            span_handler.span_err(mi.span, \"feature has been removed\");\n-                        }\n-                        Some(&(_, _, _, Accepted)) => {\n-                            accepted_features.push(mi.span);\n-                        }\n-                        None => {\n-                            unknown_features.push((name, mi.span));\n-                        }\n+                    if let Some(&(_, _, _, setter)) = ACTIVE_FEATURES.iter()\n+                        .find(|& &(n, _, _, _)| name == n) {\n+                        *(setter(&mut features)) = true;\n+                    }\n+                    else if let Some(&(_, _, _)) = REMOVED_FEATURES.iter()\n+                        .find(|& &(n, _, _)| name == n) {\n+                        span_handler.span_err(mi.span, \"feature has been removed\");\n+                    }\n+                    else if let Some(&(_, _, _)) = ACCEPTED_FEATURES.iter()\n+                        .find(|& &(n, _, _)| name == n) {\n+                        features.declared_stable_lang_features.push(mi.span);\n+                    } else {\n+                        features.declared_lib_features.push((name, mi.span));\n                     }\n                 }\n             }\n         }\n     }\n \n-    let has_feature = |feature: &str| -> bool {\n-        enabled_features.iter().any(|&n| n == feature)\n-    };\n-\n-    // FIXME (pnkfelix): Before adding the 99th entry below, change it\n-    // to a single-pass (instead of N calls to `.has_feature`).\n-\n-    let features = Features {\n-        unboxed_closures: has_feature(\"unboxed_closures\"),\n-        rustc_diagnostic_macros: has_feature(\"rustc_diagnostic_macros\"),\n-        allow_quote: has_feature(\"quote\"),\n-        allow_asm: has_feature(\"asm\"),\n-        allow_log_syntax: has_feature(\"log_syntax\"),\n-        allow_concat_idents: has_feature(\"concat_idents\"),\n-        allow_trace_macros: has_feature(\"trace_macros\"),\n-        allow_internal_unstable: has_feature(\"allow_internal_unstable\"),\n-        allow_custom_derive: has_feature(\"custom_derive\"),\n-        allow_placement_in: has_feature(\"placement_in_syntax\"),\n-        allow_box: has_feature(\"box_syntax\"),\n-        allow_pushpop_unsafe: has_feature(\"pushpop_unsafe\"),\n-        allow_inclusive_range: has_feature(\"inclusive_range_syntax\"),\n-        simd_ffi: has_feature(\"simd_ffi\"),\n-        unmarked_api: has_feature(\"unmarked_api\"),\n-        declared_stable_lang_features: accepted_features,\n-        declared_lib_features: unknown_features,\n-        const_fn: has_feature(\"const_fn\"),\n-        const_indexing: has_feature(\"const_indexing\"),\n-        static_recursion: has_feature(\"static_recursion\"),\n-        default_type_parameter_fallback: has_feature(\"default_type_parameter_fallback\"),\n-        rustc_attrs: has_feature(\"rustc_attrs\"),\n-        type_macros: has_feature(\"type_macros\"),\n-        cfg_target_feature: has_feature(\"cfg_target_feature\"),\n-        cfg_target_vendor: has_feature(\"cfg_target_vendor\"),\n-        cfg_target_thread_local: has_feature(\"cfg_target_thread_local\"),\n-        staged_api: has_feature(\"staged_api\"),\n-        stmt_expr_attributes: has_feature(\"stmt_expr_attributes\"),\n-        deprecated: has_feature(\"deprecated\"),\n-        question_mark: has_feature(\"question_mark\"),\n-        specialization: has_feature(\"specialization\"),\n-        pub_restricted: has_feature(\"pub_restricted\"),\n-        structural_match: has_feature(\"bool\"),\n-        plugin: has_feature(\"plugin\"),\n-        lang_items: has_feature(\"lang_items\"),\n-        linkage: has_feature(\"linkage\"),\n-        thread_local: has_feature(\"thread_local\"),\n-        on_unimplemented: has_feature(\"on_unimplemented\"),\n-        allocator: has_feature(\"allocator\"),\n-        needs_allocator: has_feature(\"needs_allocator\"),\n-        fundamental: has_feature(\"fundamental\"),\n-        linked_from: has_feature(\"linked_from\"),\n-        naked: has_feature(\"naked\"),\n-        no_debug: has_feature(\"no_debug\"),\n-        omit_gdb_pretty_printer_section: has_feature(\"omit_gdb_pretty_printer_section\"),\n-        dropck_parametricity: has_feature(\"dropck_parametricity\"),\n-        unwind_attributes: has_feature(\"unwind_attributes\"),\n-        prelude_import: has_feature(\"prelude_import\"),\n-        reflect: has_feature(\"reflect\"),\n-        no_core: has_feature(\"no_core\"),\n-        unsafe_no_drop_flag: has_feature(\"unsafe_no_drop_flag\"),\n-        custom_derive: has_feature(\"custom_derive\"),\n-        custom_attribute: has_feature(\"custom_attribute\"),\n-        asm: has_feature(\"asm\"),\n-        log_syntax: has_feature(\"log_syntax\"),\n-        trace_macros: has_feature(\"trace_macros\"),\n-        concat_idents: has_feature(\"concat_idents\"),\n-        box_syntax: has_feature(\"box_syntax\"),\n-        placement_in_syntax: has_feature(\"placement_in_syntax\"),\n-        non_ascii_idents: has_feature(\"non_ascii_idents\"),\n-        macro_reexport: has_feature(\"macro_reexport\"),\n-        link_args: has_feature(\"link_args\"),\n-        intrinsics: has_feature(\"intrinsics\"),\n-        platform_intrinsics: has_feature(\"platform_intrinsics\"),\n-        abi_vectorcall: has_feature(\"abi_vectorcall\"),\n-        plugin_registrar: has_feature(\"plugin_registrar\"),\n-        start: has_feature(\"start\"),\n-        main: has_feature(\"main\"),\n-        simd: has_feature(\"simd\"),\n-        repr_simd: has_feature(\"repr_simd\"),\n-        optin_builtin_traits: has_feature(\"optin_builtin_traits\"),\n-        link_llvm_intrinsics: has_feature(\"link_llvm_intrinsics\"),\n-        type_ascription: has_feature(\"type_ascription\"),\n-        inclusive_range_syntax: has_feature(\"inclusive_range_syntax\"),\n-        advanced_slice_patterns: has_feature(\"advanced_slice_patterns\"),\n-        slice_patterns: has_feature(\"slice_patterns\"),\n-        box_patterns: has_feature(\"box_patterns\"),\n-        associated_consts: has_feature(\"associated_consts\"),\n-        associated_type_defaults: has_feature(\"associated_type_defaults\"),\n-    };\n-\n     let mut cx = Context {\n         features: features,\n         span_handler: span_handler,"}]}