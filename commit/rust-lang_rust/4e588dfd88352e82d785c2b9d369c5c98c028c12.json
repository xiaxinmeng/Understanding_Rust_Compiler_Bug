{"sha": "4e588dfd88352e82d785c2b9d369c5c98c028c12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNTg4ZGZkODgzNTJlODJkNzg1YzJiOWQzNjljNWM5OGMwMjhjMTI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-11T16:26:52Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-11T16:26:52Z"}, "message": "Don't allow lookup by self for unprefixed self access completions", "tree": {"sha": "2de82178bf37be7b4ae00c03fa20354b3419a15e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2de82178bf37be7b4ae00c03fa20354b3419a15e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e588dfd88352e82d785c2b9d369c5c98c028c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e588dfd88352e82d785c2b9d369c5c98c028c12", "html_url": "https://github.com/rust-lang/rust/commit/4e588dfd88352e82d785c2b9d369c5c98c028c12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e588dfd88352e82d785c2b9d369c5c98c028c12/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6133fe51c2cf31d776f16d520de4f78c709181c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6133fe51c2cf31d776f16d520de4f78c709181c", "html_url": "https://github.com/rust-lang/rust/commit/c6133fe51c2cf31d776f16d520de4f78c709181c"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "2eabc2a676aeaac44888e6fb33a4b2bf42315a4e", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e588dfd88352e82d785c2b9d369c5c98c028c12/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e588dfd88352e82d785c2b9d369c5c98c028c12/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=4e588dfd88352e82d785c2b9d369c5c98c028c12", "patch": "@@ -132,16 +132,17 @@ fn render_field_(\n         ctx.source_range(),\n         receiver.map_or_else(|| name.clone(), |receiver| format!(\"{}.{}\", receiver, name)),\n     );\n-    item.kind(SymbolKind::Field)\n-        .detail(ty.display(ctx.db()).to_string())\n-        .set_documentation(field.docs(ctx.db()))\n-        .set_deprecated(is_deprecated);\n \n     item.set_relevance(CompletionRelevance {\n         type_match: compute_type_match(ctx.completion, ty),\n         exact_name_match: compute_exact_name_match(ctx.completion, &name),\n         ..CompletionRelevance::default()\n     });\n+    item.kind(SymbolKind::Field)\n+        .detail(ty.display(ctx.db()).to_string())\n+        .set_documentation(field.docs(ctx.db()))\n+        .set_deprecated(is_deprecated)\n+        .lookup_by(name);\n \n     if let Some(_ref_match) = compute_ref_match(ctx.completion, ty) {\n         // FIXME\n@@ -164,7 +165,9 @@ fn render_tuple_field_(\n         receiver.map_or_else(|| field.to_string(), |receiver| format!(\"{}.{}\", receiver, field)),\n     );\n \n-    item.kind(SymbolKind::Field).detail(ty.display(ctx.db()).to_string());\n+    item.kind(SymbolKind::Field)\n+        .detail(ty.display(ctx.db()).to_string())\n+        .lookup_by(field.to_string());\n \n     item.build()\n }"}, {"sha": "1357b9f4adfe1db01bf09e3722b1181839206992", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4e588dfd88352e82d785c2b9d369c5c98c028c12/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e588dfd88352e82d785c2b9d369c5c98c028c12/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=4e588dfd88352e82d785c2b9d369c5c98c028c12", "patch": "@@ -58,29 +58,29 @@ impl<'a> FunctionRender<'a> {\n         Some(FunctionRender { ctx, name, receiver, func: fn_, ast_node, is_method })\n     }\n \n-    fn render(mut self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n+    fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let params = self.params();\n-        if let Some(receiver) = &self.receiver {\n-            self.name = format!(\"{}.{}\", receiver, &self.name)\n-        }\n-        let mut item = CompletionItem::new(\n-            CompletionKind::Reference,\n-            self.ctx.source_range(),\n-            self.name.clone(),\n-        );\n+        let call = if let Some(receiver) = &self.receiver {\n+            format!(\"{}.{}\", receiver, &self.name)\n+        } else {\n+            self.name.clone()\n+        };\n+        let mut item =\n+            CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), call.clone());\n         item.kind(self.kind())\n             .set_documentation(self.ctx.docs(self.func))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.func) || self.ctx.is_deprecated_assoc_item(self.func),\n             )\n             .detail(self.detail())\n-            .add_call_parens(self.ctx.completion, self.name.clone(), params)\n-            .add_import(import_to_add);\n+            .add_call_parens(self.ctx.completion, call.clone(), params)\n+            .add_import(import_to_add)\n+            .lookup_by(self.name);\n \n         let ret_type = self.func.ret_type(self.ctx.db());\n         item.set_relevance(CompletionRelevance {\n             type_match: compute_type_match(self.ctx.completion, &ret_type),\n-            exact_name_match: compute_exact_name_match(self.ctx.completion, &self.name),\n+            exact_name_match: compute_exact_name_match(self.ctx.completion, &call),\n             ..CompletionRelevance::default()\n         });\n \n@@ -263,7 +263,7 @@ fn bar(s: &S) {\n         );\n \n         check_edit(\n-            \"self.foo\",\n+            \"foo\",\n             r#\"\n struct S {}\n impl S {"}]}