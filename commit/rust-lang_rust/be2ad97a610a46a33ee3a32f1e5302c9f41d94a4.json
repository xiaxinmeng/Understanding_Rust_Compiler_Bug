{"sha": "be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMmFkOTdhNjEwYTQ2YTMzZWUzYTMyZjFlNTMwMmM5ZjQxZDk0YTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-31T01:33:22Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-08-31T06:57:09Z"}, "message": "Allow main to take istrs. Issue #855", "tree": {"sha": "de55416e9b93ae0075259a9ef5f096e94ba39672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de55416e9b93ae0075259a9ef5f096e94ba39672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "html_url": "https://github.com/rust-lang/rust/commit/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4007006574561280139659a42000321020d589ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4007006574561280139659a42000321020d589ff", "html_url": "https://github.com/rust-lang/rust/commit/4007006574561280139659a42000321020d589ff"}], "stats": {"total": 103, "additions": 93, "deletions": 10}, "files": [{"sha": "ec4e77a1ccea77015a341eb4d4e3091d3d78a05b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "patch": "@@ -5579,21 +5579,50 @@ fn create_main_wrapper(ccx: &@crate_ctxt, sp: &span, main_llfn: ValueRef,\n         ccx.sess.span_fatal(sp, ~\"multiple 'main' functions\");\n     }\n \n-    let main_takes_ivec =\n+    let (main_takes_argv, main_takes_istr) =\n         alt ty::struct(ccx.tcx, main_node_type) {\n-          ty::ty_fn(_, args, _, _, _) { std::vec::len(args) != 0u }\n+          ty::ty_fn(_, args, _, _, _) {\n+            if std::vec::len(args) == 0u {\n+                (false, false)\n+            } else {\n+                alt ty::struct(ccx.tcx, args[0].ty) {\n+                  ty::ty_vec({ty: t, _}) {\n+                    alt ty::struct(ccx.tcx, t) {\n+                      ty::ty_str. { (true, false) }\n+                      ty::ty_istr. { (true, true) }\n+                    }\n+                  }\n+                }\n+            }\n+          }\n         };\n \n-    let llfn = create_main(ccx, sp, main_llfn, main_takes_ivec);\n+    let llfn = create_main(ccx, sp, main_llfn,\n+                           main_takes_argv, main_takes_istr);\n     ccx.main_fn = some(llfn);\n \n+    // FIXME: This is a transitional way to let the runtime know\n+    // it needs to feed us istrs\n+    let lltakesistr = istr::as_buf(~\"_rust_main_takes_istr\", { |buf|\n+        llvm::LLVMAddGlobal(ccx.llmod, T_int(), buf)\n+    });\n+    llvm::LLVMSetInitializer(lltakesistr, C_uint(main_takes_istr as uint));\n+    llvm::LLVMSetGlobalConstant(lltakesistr, True);\n+    llvm::LLVMSetLinkage(lltakesistr,\n+                         lib::llvm::LLVMExternalLinkage as llvm::Linkage);\n+\n     fn create_main(ccx: &@crate_ctxt, sp: &span, main_llfn: ValueRef,\n-                   takes_ivec: bool) -> ValueRef {\n+                   takes_argv: bool, takes_istr: bool) -> ValueRef {\n+        let unit_ty = if takes_istr {\n+            ty::mk_istr(ccx.tcx)\n+        } else {\n+            ty::mk_str(ccx.tcx)\n+        };\n         let ivecarg_ty: ty::arg =\n             {mode: ty::mo_val,\n              ty:\n                  ty::mk_vec(ccx.tcx,\n-                            {ty: ty::mk_str(ccx.tcx), mut: ast::imm})};\n+                            {ty: unit_ty, mut: ast::imm})};\n         let llfty =\n             type_of_fn(ccx, sp, ast::proto_fn, [ivecarg_ty],\n                        ty::mk_nil(ccx.tcx), 0u);\n@@ -5609,7 +5638,7 @@ fn create_main_wrapper(ccx: &@crate_ctxt, sp: &span, main_llfn: ValueRef,\n         let llenvarg = llvm::LLVMGetParam(llfdecl, 2u);\n         let llargvarg = llvm::LLVMGetParam(llfdecl, 3u);\n         let args = [lloutputarg, lltaskarg, llenvarg];\n-        if takes_ivec { args += [llargvarg]; }\n+        if takes_argv { args += [llargvarg]; }\n         FastCall(bcx, main_llfn, args);\n         build_return(bcx);\n "}, {"sha": "50c99615c3f120a75c15059f0e199291b41d8e43", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "patch": "@@ -2747,6 +2747,7 @@ fn arg_is_argv_ty(tcx: &ty::ctxt, a: &ty::arg) -> bool {\n         if mt.mut != ast::imm { ret false; }\n         alt ty::struct(tcx, mt.ty) {\n           ty::ty_str. { ret true; }\n+          ty::ty_istr. { ret true; }\n           _ { ret false; }\n         }\n       }"}, {"sha": "26b20f1f8bc247f526d4c43a73702c07c1f58c46", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "patch": "@@ -20,6 +20,7 @@ def scrub(b):\n run_pass = os.path.abspath(run_pass)\n stage2_tests = []\n take_args = {}\n+take_iargs = {}\n \n for t in os.listdir(run_pass):\n     if t.endswith(\".rs\") and not (\n@@ -31,6 +32,9 @@ def scrub(b):\n             stage2_tests.append(t)\n             if \"main(args: [str])\" in s:\n                 take_args[t] = True\n+            # FIXME: Transitional. Remove me\n+            if \"main(args: [istr])\" in s:\n+                take_iargs[t] = True\n         f.close()\n \n stage2_tests.sort()\n@@ -61,6 +65,8 @@ def scrub(b):\n     d.write(\"    out.write_str(~\\\"run-pass [stage2]: %s\\\\n\\\");\\n\" % p)\n     if t in take_args:\n         d.write(\"    t_%d::main([\\\"arg0\\\"]);\\n\" % i)\n+    elif t in take_iargs:\n+        d.write(\"    t_%d::main([~\\\"arg0\\\"]);\\n\" % i)\n     else:\n         d.write(\"    t_%d::main();\\n\" % i)\n     i += 1"}, {"sha": "0a3cb38ef1126a66cda88ac9906f69645777447f", "filename": "src/rt/main.ll.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Frt%2Fmain.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Frt%2Fmain.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmain.ll.in?ref=be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "patch": "@@ -24,7 +24,13 @@ define void @_rust_main_wrap(i1* nocapture, %task *, %2* nocapture, %vec *)\n   ret void\n }\n \n+; FIXME: Transitional. Please remove\n+@_rust_main_takes_istr = external global i32\n+declare void @set_main_takes_istr(i32)\n+\n define i32 @\"MAIN\"(i32, i32) {\n+  %i = load i32* @_rust_main_takes_istr\n+  call void @set_main_takes_istr(i32 %i)\n   %3 = tail call i32 @rust_start(i32 ptrtoint (void (i1*, %task*, %2*, %vec*)* @_rust_main_wrap to i32), i32 %0, i32 %1, i32 ptrtoint (%0* @_rust_crate_map_toplevel to i32))\n   ret i32 %3\n }"}, {"sha": "a7411b98cd069e78baf62f9e4ba714377500ef60", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "patch": "@@ -11,6 +11,7 @@ command_line_args : public kernel_owned<command_line_args>\n \n     // [str] passed to rust_task::start.\n     rust_vec *args;\n+    rust_vec *args_istr;\n \n     command_line_args(rust_task *task,\n                       int sys_argc,\n@@ -38,6 +39,8 @@ command_line_args : public kernel_owned<command_line_args>\n         }\n         LocalFree(wargv);\n #endif\n+\n+        // Allocate a vector of estrs\n         size_t vec_fill = sizeof(rust_str *) * argc;\n         size_t vec_alloc = next_power_of_two(vec_fill);\n         void *mem = kernel->malloc(vec_alloc, \"command line\");\n@@ -55,17 +58,40 @@ command_line_args : public kernel_owned<command_line_args>\n             kernel->malloc(vec_size<rust_str*>(argc),\n                            \"command line arg interior\");\n         args->fill = args->alloc = sizeof(rust_str *) * argc;\n-        // NB: _rust_main owns the vec and will be responsible for\n-        // freeing it\n         memcpy(&args->data[0], strs, args->fill);\n+\n+        // Allocate a vector of istrs\n+        args_istr = (rust_vec *)\n+            kernel->malloc(vec_size<rust_vec*>(argc),\n+                           \"command line arg interior\");\n+        args_istr->fill = args_istr->alloc = sizeof(rust_vec*) * argc;\n+        for (int i = 0; i < argc; ++i) {\n+            size_t str_fill = strlen(argv[i]) + 1;\n+            size_t str_alloc = str_fill;\n+            rust_vec *str = (rust_vec *)\n+                kernel->malloc(vec_size<char>(str_fill),\n+                               \"command line arg\");\n+            str->fill = str_fill;\n+            str->alloc = str_alloc;\n+            memcpy(&str->data, argv[i], str_fill);\n+            ((rust_vec**)&args_istr->data)[i] = str;\n+        }\n     }\n \n     ~command_line_args() {\n+        // Free the estr args\n         kernel->free(args);\n         for (int i = 0; i < argc; ++i)\n             kernel->free(strs[i]);\n         kernel->free(strs);\n \n+        // Free the istr args\n+        for (int i = 0; i < argc; ++i) {\n+            rust_vec *s = ((rust_vec**)&args_istr->data)[i];\n+            kernel->free(s);\n+        }\n+        kernel->free(args_istr);\n+\n #ifdef __WIN32__\n         for (int i = 0; i < argc; ++i) {\n             kernel->free(argv[i]);\n@@ -76,6 +102,14 @@ command_line_args : public kernel_owned<command_line_args>\n };\n \n \n+// FIXME: Transitional. Please remove.\n+bool main_takes_istr = false;\n+\n+extern \"C\" CDECL void\n+set_main_takes_istr(uintptr_t flag) {\n+    main_takes_istr = flag != 0;\n+}\n+\n /**\n  * Main entry point into the Rust runtime. Here we create a Rust service,\n  * initialize the kernel, create the root domain and run it.\n@@ -108,7 +142,11 @@ rust_start(uintptr_t main_fn, int argc, char **argv,\n         DLOG(sched, dom, \"startup: arg[%d] = '%s'\", i, args->argv[i]);\n     }\n \n-    root_task->start(main_fn, (uintptr_t)args->args);\n+    if (main_takes_istr) {\n+        root_task->start(main_fn, (uintptr_t)args->args_istr);\n+    } else {\n+        root_task->start(main_fn, (uintptr_t)args->args);\n+    }\n     root_task->deref();\n     root_task = NULL;\n "}, {"sha": "2f3f25eb64f32750fea00c8d646458ba343a65a8", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "patch": "@@ -55,6 +55,7 @@ rust_ptr_eq\n rust_run_program\n rust_start\n rust_getcwd\n+set_main_takes_istr\n set_min_stack\n sched_threads\n size_of"}, {"sha": "376374f68eb387c4fb1b0a4d1c006f219fcb8be0", "filename": "src/test/run-pass/main-ivec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2ad97a610a46a33ee3a32f1e5302c9f41d94a4/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmain-ivec.rs?ref=be2ad97a610a46a33ee3a32f1e5302c9f41d94a4", "patch": "@@ -1 +1,3 @@\n-fn main(args: [str]) { for s in args { log s } }\n+fn main(args: [istr]) {\n+    for s in args { log s }\n+}"}]}