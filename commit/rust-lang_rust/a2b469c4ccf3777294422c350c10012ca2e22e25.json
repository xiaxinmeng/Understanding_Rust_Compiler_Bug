{"sha": "a2b469c4ccf3777294422c350c10012ca2e22e25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYjQ2OWM0Y2NmMzc3NzI5NDQyMmMzNTBjMTAwMTJjYTJlMjJlMjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T03:26:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T03:26:05Z"}, "message": "Rollup merge of #69880 - RalfJung:miri-assert-error-sanity, r=oli-obk\n\nmiri engine: turn error sanity checks into assertions\n\nWe had these as debug assertions so far to make sure our test suite is clean, but really these are conditions that should never arise and also @eddyb told me to turn non-performance-critical debug assertions into full assertions so here we go. ;)\n\nI propose that we do a check-only crater run to make sure this does not actually happen in practice.\n\nr? @oli-obk", "tree": {"sha": "32af5e8fb5c4b344f57fe0c8efb9dc2e967e83e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32af5e8fb5c4b344f57fe0c8efb9dc2e967e83e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2b469c4ccf3777294422c350c10012ca2e22e25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeCxNCRBK7hj4Ov3rIwAAdHIIABFTKRabjPA8YukzTJ3XCKMR\n8hNvR17YQqRsFlx2NrVDG6O1SwkxxDQk6IIGUiyfe0ibckGvntUfR7e0P1MxGNYE\n8aWRJdG74flDw6Kq69cexY1kRcq1xVNyAA6gO8jVSmNXdZY++0dTwFDxRzSVy7Zh\neDaAoIyWSiylOzmKpVLrKRkP5K9f5NmphsBGr+8il98zAXJcX/XzlmX2se5YhbRA\n6Vv7NuMnHOEbIbakPkLNtQLWaWz1yP27/iGjLVaA3TnJIXQ4whOxKDhcwlfoM+J6\ncSYKG6q+N4h8KAbk7DczJMUFm1/zztJ0QQUCPfXo3S3ers+vm2+j8jfQkFHwqEs=\n=InrN\n-----END PGP SIGNATURE-----\n", "payload": "tree 32af5e8fb5c4b344f57fe0c8efb9dc2e967e83e1\nparent 5ed9d7ebb662ad993e9f2e8c70575fb27cd45041\nparent 2ee2157e29b9cab1fc0ebd89246ba27f48fce3d9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584933965 +0100\ncommitter GitHub <noreply@github.com> 1584933965 +0100\n\nRollup merge of #69880 - RalfJung:miri-assert-error-sanity, r=oli-obk\n\nmiri engine: turn error sanity checks into assertions\n\nWe had these as debug assertions so far to make sure our test suite is clean, but really these are conditions that should never arise and also @eddyb told me to turn non-performance-critical debug assertions into full assertions so here we go. ;)\n\nI propose that we do a check-only crater run to make sure this does not actually happen in practice.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b469c4ccf3777294422c350c10012ca2e22e25", "html_url": "https://github.com/rust-lang/rust/commit/a2b469c4ccf3777294422c350c10012ca2e22e25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2b469c4ccf3777294422c350c10012ca2e22e25/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed9d7ebb662ad993e9f2e8c70575fb27cd45041", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed9d7ebb662ad993e9f2e8c70575fb27cd45041", "html_url": "https://github.com/rust-lang/rust/commit/5ed9d7ebb662ad993e9f2e8c70575fb27cd45041"}, {"sha": "2ee2157e29b9cab1fc0ebd89246ba27f48fce3d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee2157e29b9cab1fc0ebd89246ba27f48fce3d9", "html_url": "https://github.com/rust-lang/rust/commit/2ee2157e29b9cab1fc0ebd89246ba27f48fce3d9"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "6f9543bf95a3b569087fef86e4454e2f6b647f44", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a2b469c4ccf3777294422c350c10012ca2e22e25/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b469c4ccf3777294422c350c10012ca2e22e25/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=a2b469c4ccf3777294422c350c10012ca2e22e25", "patch": "@@ -825,11 +825,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Run it.\n         match visitor.visit_value(op) {\n             Ok(()) => Ok(()),\n+            // We should only get validation errors here. Avoid other errors as\n+            // those do not show *where* in the value the issue lies.\n             Err(err) if matches!(err.kind, err_ub!(ValidationFailure { .. })) => Err(err),\n-            Err(err) if cfg!(debug_assertions) => {\n-                bug!(\"Unexpected error during validation: {}\", err)\n-            }\n-            Err(err) => Err(err),\n+            Err(err) => bug!(\"Unexpected error during validation: {}\", err),\n         }\n     }\n "}, {"sha": "a19901f37787e55b5d64329a6d1d57b697e639f6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2b469c4ccf3777294422c350c10012ca2e22e25/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b469c4ccf3777294422c350c10012ca2e22e25/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=a2b469c4ccf3777294422c350c10012ca2e22e25", "patch": "@@ -404,8 +404,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 // Some errors shouldn't come up because creating them causes\n                 // an allocation, which we should avoid. When that happens,\n                 // dedicated error variants should be introduced instead.\n-                // Only test this in debug builds though to avoid disruptions.\n-                debug_assert!(\n+                assert!(\n                     !error.kind.allocates(),\n                     \"const-prop encountered allocating error: {}\",\n                     error"}]}