{"sha": "6f0acbcbd064d924afb0f3a04480fd0d69c5bc51", "node_id": "C_kwDOAAsO6NoAKDZmMGFjYmNiZDA2NGQ5MjRhZmIwZjNhMDQ0ODBmZDBkNjljNWJjNTE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-21T05:11:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-21T05:11:03Z"}, "message": "Rollup merge of #88644 - eopb:abstractconst_leaf_subst, r=lcnr\n\n`AbstractConst` private fields\n\nCalls `subst` in `AbstractConst::root` when `Node` is `Leaf`.\n\nr? ``@lcnr``", "tree": {"sha": "077e50e3efba3206abbc78f14ddcac3dfe1afbb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/077e50e3efba3206abbc78f14ddcac3dfe1afbb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcPZnCRBK7hj4Ov3rIwAASbUIAKOfFnb5sYQf+BbIYaL3f5AY\nqGJZGP8j4EMuanFfi7Cn7TcUHYLtyWPlyEoV10mmxquDi9VxZGCNXvjc+miB4YFP\nTiiA7CFzyLfC0xy+zNqv+GyqEKEigM+gmRaLRsGJ6j832cYRLvchR+/NLLOmUVMQ\nuMrZyI9Uu8IKATZ2nVdAk15CVVlOOaSPSR3WWGEj5hjwqFp+v16vZUGG9iikpva5\nQECiMrmPkQrTTDbQkX9TTI0ReTCAI4B/O6JeA/ReemQpSTBRg08EugoX3KQafEIi\nuUYssDJavWseQkAGCHxr++VjT7FY8yok2DiVxXZhGZ1yPapF/0N2+GFfgy7SajY=\n=iaEf\n-----END PGP SIGNATURE-----\n", "payload": "tree 077e50e3efba3206abbc78f14ddcac3dfe1afbb1\nparent fb9232b45316c3875e12a242d4250e959c7bc24a\nparent be30e602969cefee2785dc25f17c34ebc4f007b3\nauthor Yuki Okushi <jtitor@2k36.org> 1634793063 +0900\ncommitter GitHub <noreply@github.com> 1634793063 +0900\n\nRollup merge of #88644 - eopb:abstractconst_leaf_subst, r=lcnr\n\n`AbstractConst` private fields\n\nCalls `subst` in `AbstractConst::root` when `Node` is `Leaf`.\n\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51", "html_url": "https://github.com/rust-lang/rust/commit/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb9232b45316c3875e12a242d4250e959c7bc24a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9232b45316c3875e12a242d4250e959c7bc24a", "html_url": "https://github.com/rust-lang/rust/commit/fb9232b45316c3875e12a242d4250e959c7bc24a"}, {"sha": "be30e602969cefee2785dc25f17c34ebc4f007b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/be30e602969cefee2785dc25f17c34ebc4f007b3", "html_url": "https://github.com/rust-lang/rust/commit/be30e602969cefee2785dc25f17c34ebc4f007b3"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "4d4e9432e876dc21f9d88cfd9019735a0175d425", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6f0acbcbd064d924afb0f3a04480fd0d69c5bc51", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::span_bug;\n use rustc_middle::thir::abstract_const::Node as ACNode;\n use rustc_middle::ty::fold::TypeVisitor;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, Const, GenericParamDefKind, TraitRef, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n@@ -153,11 +153,8 @@ where\n         tcx: TyCtxt<'tcx>,\n         ct: AbstractConst<'tcx>,\n     ) -> ControlFlow<V::BreakTy> {\n-        const_evaluatable::walk_abstract_const(tcx, ct, |node| match node.root() {\n-            ACNode::Leaf(leaf) => {\n-                let leaf = leaf.subst(tcx, ct.substs);\n-                self.visit_const(leaf)\n-            }\n+        const_evaluatable::walk_abstract_const(tcx, ct, |node| match node.root(tcx) {\n+            ACNode::Leaf(leaf) => self.visit_const(leaf),\n             ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n             ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {\n                 ControlFlow::CONTINUE"}, {"sha": "8edb7069fc45f9a19c55f3c66f75a0bc79b9870f", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=6f0acbcbd064d924afb0f3a04480fd0d69c5bc51", "patch": "@@ -80,9 +80,8 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     Concrete,\n                 }\n                 let mut failure_kind = FailureKind::Concrete;\n-                walk_abstract_const::<!, _>(tcx, ct, |node| match node.root() {\n+                walk_abstract_const::<!, _>(tcx, ct, |node| match node.root(tcx) {\n                     Node::Leaf(leaf) => {\n-                        let leaf = leaf.subst(tcx, ct.substs);\n                         if leaf.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n                         } else if leaf.definitely_has_param_types_or_consts(tcx) {\n@@ -92,7 +91,6 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                         ControlFlow::CONTINUE\n                     }\n                     Node::Cast(_, _, ty) => {\n-                        let ty = ty.subst(tcx, ct.substs);\n                         if ty.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n                         } else if ty.definitely_has_param_types_or_consts(tcx) {\n@@ -187,8 +185,8 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n pub struct AbstractConst<'tcx> {\n     // FIXME: Consider adding something like `IndexSlice`\n     // and use this here.\n-    pub inner: &'tcx [Node<'tcx>],\n-    pub substs: SubstsRef<'tcx>,\n+    inner: &'tcx [Node<'tcx>],\n+    substs: SubstsRef<'tcx>,\n }\n \n impl<'tcx> AbstractConst<'tcx> {\n@@ -218,8 +216,14 @@ impl<'tcx> AbstractConst<'tcx> {\n     }\n \n     #[inline]\n-    pub fn root(self) -> Node<'tcx> {\n-        self.inner.last().copied().unwrap()\n+    pub fn root(self, tcx: TyCtxt<'tcx>) -> Node<'tcx> {\n+        let node = self.inner.last().copied().unwrap();\n+        match node {\n+            Node::Leaf(leaf) => Node::Leaf(leaf.subst(tcx, self.substs)),\n+            Node::Cast(kind, operand, ty) => Node::Cast(kind, operand, ty.subst(tcx, self.substs)),\n+            // Don't perform substitution on the following as they can't directly contain generic params\n+            Node::Binop(_, _, _) | Node::UnaryOp(_, _) | Node::FunctionCall(_, _) => node,\n+        }\n     }\n }\n \n@@ -542,7 +546,7 @@ where\n         f: &mut dyn FnMut(AbstractConst<'tcx>) -> ControlFlow<R>,\n     ) -> ControlFlow<R> {\n         f(ct)?;\n-        let root = ct.root();\n+        let root = ct.root(tcx);\n         match root {\n             Node::Leaf(_) => ControlFlow::CONTINUE,\n             Node::Binop(_, l, r) => {\n@@ -570,27 +574,23 @@ pub(super) fn try_unify<'tcx>(\n     // We substitute generics repeatedly to allow AbstractConsts to unify where a\n     // ConstKind::Unevalated could be turned into an AbstractConst that would unify e.g.\n     // Param(N) should unify with Param(T), substs: [Unevaluated(\"T2\", [Unevaluated(\"T3\", [Param(N)])])]\n-    while let Node::Leaf(a_ct) = a.root() {\n-        let a_ct = a_ct.subst(tcx, a.substs);\n+    while let Node::Leaf(a_ct) = a.root(tcx) {\n         match AbstractConst::from_const(tcx, a_ct) {\n             Ok(Some(a_act)) => a = a_act,\n             Ok(None) => break,\n             Err(_) => return true,\n         }\n     }\n-    while let Node::Leaf(b_ct) = b.root() {\n-        let b_ct = b_ct.subst(tcx, b.substs);\n+    while let Node::Leaf(b_ct) = b.root(tcx) {\n         match AbstractConst::from_const(tcx, b_ct) {\n             Ok(Some(b_act)) => b = b_act,\n             Ok(None) => break,\n             Err(_) => return true,\n         }\n     }\n \n-    match (a.root(), b.root()) {\n+    match (a.root(tcx), b.root(tcx)) {\n         (Node::Leaf(a_ct), Node::Leaf(b_ct)) => {\n-            let a_ct = a_ct.subst(tcx, a.substs);\n-            let b_ct = b_ct.subst(tcx, b.substs);\n             if a_ct.ty != b_ct.ty {\n                 return false;\n             }"}, {"sha": "afc546540d2e262d99c2818a6125805a07746eb6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0acbcbd064d924afb0f3a04480fd0d69c5bc51/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6f0acbcbd064d924afb0f3a04480fd0d69c5bc51", "patch": "@@ -837,14 +837,13 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             // constants which are not considered const evaluatable.\n             use rustc_middle::thir::abstract_const::Node;\n             if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv.shrink()) {\n-                const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n-                    Node::Leaf(leaf) => {\n-                        let leaf = leaf.subst(self.tcx, ct.substs);\n-                        self.visit_const(leaf)\n-                    }\n-                    Node::Cast(_, _, ty) => self.visit_ty(ty),\n-                    Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n-                        ControlFlow::CONTINUE\n+                const_evaluatable::walk_abstract_const(self.tcx, ct, |node| {\n+                    match node.root(self.tcx) {\n+                        Node::Leaf(leaf) => self.visit_const(leaf),\n+                        Node::Cast(_, _, ty) => self.visit_ty(ty),\n+                        Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n+                            ControlFlow::CONTINUE\n+                        }\n                     }\n                 })\n             } else {"}]}