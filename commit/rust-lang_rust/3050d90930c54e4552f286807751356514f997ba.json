{"sha": "3050d90930c54e4552f286807751356514f997ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNTBkOTA5MzBjNTRlNDU1MmYyODY4MDc3NTEzNTY1MTRmOTk3YmE=", "commit": {"author": {"name": "Theemathas Chirananthavat", "email": "theemathas@gmail.com", "date": "2016-12-30T02:45:41Z"}, "committer": {"name": "Theemathas Chirananthavat", "email": "theemathas@gmail.com", "date": "2017-01-06T01:41:01Z"}, "message": "Add forget_ref tests.\n\nAlso rename drop_ref.rs to drop_forget_ref.rs in tests/compile-fail.", "tree": {"sha": "35fd8a25fdb642b4babfc46dd90499191e447c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35fd8a25fdb642b4babfc46dd90499191e447c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3050d90930c54e4552f286807751356514f997ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3050d90930c54e4552f286807751356514f997ba", "html_url": "https://github.com/rust-lang/rust/commit/3050d90930c54e4552f286807751356514f997ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3050d90930c54e4552f286807751356514f997ba/comments", "author": {"login": "theemathas", "id": 6120103, "node_id": "MDQ6VXNlcjYxMjAxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6120103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theemathas", "html_url": "https://github.com/theemathas", "followers_url": "https://api.github.com/users/theemathas/followers", "following_url": "https://api.github.com/users/theemathas/following{/other_user}", "gists_url": "https://api.github.com/users/theemathas/gists{/gist_id}", "starred_url": "https://api.github.com/users/theemathas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theemathas/subscriptions", "organizations_url": "https://api.github.com/users/theemathas/orgs", "repos_url": "https://api.github.com/users/theemathas/repos", "events_url": "https://api.github.com/users/theemathas/events{/privacy}", "received_events_url": "https://api.github.com/users/theemathas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theemathas", "id": 6120103, "node_id": "MDQ6VXNlcjYxMjAxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6120103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theemathas", "html_url": "https://github.com/theemathas", "followers_url": "https://api.github.com/users/theemathas/followers", "following_url": "https://api.github.com/users/theemathas/following{/other_user}", "gists_url": "https://api.github.com/users/theemathas/gists{/gist_id}", "starred_url": "https://api.github.com/users/theemathas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theemathas/subscriptions", "organizations_url": "https://api.github.com/users/theemathas/orgs", "repos_url": "https://api.github.com/users/theemathas/repos", "events_url": "https://api.github.com/users/theemathas/events{/privacy}", "received_events_url": "https://api.github.com/users/theemathas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920a2b7468db034ae5accaa584aedb42f80f3112", "url": "https://api.github.com/repos/rust-lang/rust/commits/920a2b7468db034ae5accaa584aedb42f80f3112", "html_url": "https://github.com/rust-lang/rust/commit/920a2b7468db034ae5accaa584aedb42f80f3112"}], "stats": {"total": 102, "additions": 60, "deletions": 42}, "files": [{"sha": "55cfe63dac4c947b6894f89161b7b62330f07f4a", "filename": "tests/compile-fail/drop_forget_ref.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3050d90930c54e4552f286807751356514f997ba/tests%2Fcompile-fail%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3050d90930c54e4552f286807751356514f997ba/tests%2Fcompile-fail%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdrop_forget_ref.rs?ref=3050d90930c54e4552f286807751356514f997ba", "patch": "@@ -0,0 +1,60 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(drop_ref, forget_ref)]\n+#![allow(toplevel_ref_arg, similar_names)]\n+\n+use std::mem::{drop, forget};\n+\n+struct SomeStruct;\n+\n+fn main() {\n+    drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+    forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n+\n+    let mut owned1 = SomeStruct;\n+    drop(&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(&&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(&mut owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(owned1); //OK\n+    let mut owned2 = SomeStruct;\n+    forget(&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+    forget(&&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+    forget(&mut owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+    forget(owned2); //OK\n+\n+    let reference1 = &SomeStruct;\n+    drop(reference1); //~ERROR call to `std::mem::drop` with a reference argument\n+    forget(&*reference1); //~ERROR call to `std::mem::forget` with a reference argument\n+\n+    let reference2 = &mut SomeStruct;\n+    drop(reference2); //~ERROR call to `std::mem::drop` with a reference argument\n+    let reference3 = &mut SomeStruct;\n+    forget(reference3); //~ERROR call to `std::mem::forget` with a reference argument\n+\n+    let ref reference4 = SomeStruct;\n+    drop(reference4); //~ERROR call to `std::mem::drop` with a reference argument\n+    forget(reference4); //~ERROR call to `std::mem::forget` with a reference argument\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_drop<T>(val: T) {\n+    drop(&val); //~ERROR call to `std::mem::drop` with a reference argument\n+    drop(val); //OK\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_forget<T>(val: T) {\n+    forget(&val); //~ERROR call to `std::mem::forget` with a reference argument\n+    forget(val); //OK\n+}\n+\n+#[allow(dead_code)]\n+fn test_similarly_named_function() {\n+    fn drop<T>(_val: T) {}\n+    drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+    fn forget<T>(_val: T) {}\n+    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n+}"}, {"sha": "76d7d9ca21b5b12592fb971c109d9924fb89ae9e", "filename": "tests/compile-fail/drop_ref.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/920a2b7468db034ae5accaa584aedb42f80f3112/tests%2Fcompile-fail%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/920a2b7468db034ae5accaa584aedb42f80f3112/tests%2Fcompile-fail%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdrop_ref.rs?ref=920a2b7468db034ae5accaa584aedb42f80f3112", "patch": "@@ -1,42 +0,0 @@\n-#![feature(plugin)]\n-#![plugin(clippy)]\n-\n-#![deny(drop_ref)]\n-#![allow(toplevel_ref_arg, similar_names)]\n-\n-use std::mem::drop;\n-\n-struct SomeStruct;\n-\n-fn main() {\n-    drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n-\n-    let mut owned = SomeStruct;\n-    drop(&owned); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(&&owned); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(&mut owned); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(owned); //OK\n-\n-    let reference1 = &SomeStruct;\n-    drop(reference1); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(&*reference1); //~ERROR call to `std::mem::drop` with a reference argument\n-\n-    let reference2 = &mut SomeStruct;\n-    drop(reference2); //~ERROR call to `std::mem::drop` with a reference argument\n-\n-    let ref reference3 = SomeStruct;\n-    drop(reference3); //~ERROR call to `std::mem::drop` with a reference argument\n-}\n-\n-#[allow(dead_code)]\n-fn test_generic_fn<T>(val: T) {\n-    drop(&val); //~ERROR call to `std::mem::drop` with a reference argument\n-    drop(val); //OK\n-}\n-\n-#[allow(dead_code)]\n-fn test_similarly_named_function() {\n-    fn drop<T>(_val: T) {}\n-    drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n-}"}]}