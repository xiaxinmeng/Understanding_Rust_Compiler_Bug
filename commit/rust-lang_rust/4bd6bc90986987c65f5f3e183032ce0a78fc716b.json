{"sha": "4bd6bc90986987c65f5f3e183032ce0a78fc716b", "node_id": "C_kwDOAAsO6NoAKDRiZDZiYzkwOTg2OTg3YzY1ZjVmM2UxODMwMzJjZTBhNzhmYzcxNmI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-12T15:34:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-12T17:03:33Z"}, "message": "use dirent64_layout and field projections for writing dirent info", "tree": {"sha": "13595a40cfcf7ba1fdf14e2d442fcd11b6c3d1a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13595a40cfcf7ba1fdf14e2d442fcd11b6c3d1a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bd6bc90986987c65f5f3e183032ce0a78fc716b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd6bc90986987c65f5f3e183032ce0a78fc716b", "html_url": "https://github.com/rust-lang/rust/commit/4bd6bc90986987c65f5f3e183032ce0a78fc716b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bd6bc90986987c65f5f3e183032ce0a78fc716b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f34f270ac95ed89424a627c2c1a43800841554", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f34f270ac95ed89424a627c2c1a43800841554", "html_url": "https://github.com/rust-lang/rust/commit/f7f34f270ac95ed89424a627c2c1a43800841554"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "84792c2394e375f61d7c66427d26479c064384c3", "filename": "src/helpers.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bd6bc90986987c65f5f3e183032ce0a78fc716b/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd6bc90986987c65f5f3e183032ce0a78fc716b/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=4bd6bc90986987c65f5f3e183032ce0a78fc716b", "patch": "@@ -104,9 +104,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.layout_of(ty)\n     }\n \n+    /// Write a uint of the appropriate size to `dest`.\n+    fn write_uint(&mut self, i: impl Into<u128>, dest: &PlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n+        self.eval_context_mut().write_scalar(Scalar::from_uint(i, dest.layout.size), dest)\n+    }\n+\n+    /// Write an int of the appropriate size to `dest`.\n+    fn write_int(&mut self, i: impl Into<i128>, dest: &PlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n+        self.eval_context_mut().write_scalar(Scalar::from_int(i, dest.layout.size), dest)\n+    }\n+\n     /// Write a 0 of the appropriate size to `dest`.\n     fn write_null(&mut self, dest: &PlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n-        self.eval_context_mut().write_scalar(Scalar::from_int(0, dest.layout.size), dest)\n+        self.write_int(0, dest)\n     }\n \n     /// Test if this pointer equals 0."}, {"sha": "efb11b3bee9f6e62d0f2196dd66f312232c39ce2", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bd6bc90986987c65f5f3e183032ce0a78fc716b/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd6bc90986987c65f5f3e183032ce0a78fc716b/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=4bd6bc90986987c65f5f3e183032ce0a78fc716b", "patch": "@@ -1270,12 +1270,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let entry =\n                     this.malloc(size, /*zero_init:*/ false, MiriMemoryKind::Runtime)?;\n \n-                // FIXME: make use of dirent64_layout\n-                let ino64_t_layout = this.libc_ty_layout(\"ino64_t\")?;\n-                let off64_t_layout = this.libc_ty_layout(\"off64_t\")?;\n-                let c_ushort_layout = this.libc_ty_layout(\"c_ushort\")?;\n-                let c_uchar_layout = this.libc_ty_layout(\"c_uchar\")?;\n-\n                 // If the host is a Unix system, fill in the inode number with its real value.\n                 // If not, use 0 as a fallback value.\n                 #[cfg(unix)]\n@@ -1285,15 +1279,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 let file_type = this.file_type_to_d_type(dir_entry.file_type())?;\n \n-                let imms = [\n-                    immty_from_uint_checked(ino, ino64_t_layout)?, // d_ino\n-                    immty_from_uint_checked(0u128, off64_t_layout)?, // d_off\n-                    immty_from_uint_checked(size, c_ushort_layout)?, // d_reclen\n-                    immty_from_int_checked(file_type, c_uchar_layout)?, // d_type\n-                ];\n-                let entry_layout = this.layout_of(this.tcx.mk_array(this.tcx.types.u8, size))?;\n-                let entry_place = MPlaceTy::from_aligned_ptr(entry, entry_layout);\n-                this.write_packed_immediates(&entry_place, &imms)?;\n+                let entry_place = MPlaceTy::from_aligned_ptr(entry, dirent64_layout);\n+                this.write_uint(ino, &this.mplace_field(&entry_place, 0)?.into())?; // d_ino\n+                this.write_uint(0u128, &this.mplace_field(&entry_place, 1)?.into())?; // d_off\n+                this.write_uint(size, &this.mplace_field(&entry_place, 2)?.into())?; // d_reclen\n+                this.write_int(file_type, &this.mplace_field(&entry_place, 3)?.into())?; // d_type\n \n                 let name_ptr = entry.offset(Size::from_bytes(d_name_offset), this)?;\n                 this.memory.write_bytes(name_ptr, name_bytes.iter().copied())?;"}]}