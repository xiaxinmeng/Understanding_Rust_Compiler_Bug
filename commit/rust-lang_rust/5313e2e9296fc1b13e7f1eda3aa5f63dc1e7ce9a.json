{"sha": "5313e2e9296fc1b13e7f1eda3aa5f63dc1e7ce9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMTNlMmU5Mjk2ZmMxYjEzZTdmMWVkYTNhYTVmNjNkYzFlN2NlOWE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-05T17:09:45Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-04-23T19:50:17Z"}, "message": "Make inlining carry over unevaluated consts", "tree": {"sha": "284ee5f5b185768c8f459b07ff2644919f42a424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/284ee5f5b185768c8f459b07ff2644919f42a424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5313e2e9296fc1b13e7f1eda3aa5f63dc1e7ce9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl6h8XkACgkQgTGiTgx5\n768VTg//T/Bgi9NYEqqE5t46C/ze++QxlBbqff3up2qeLIRiL0PE49eLZo1kmAx1\nhK9wCSeyBno2OO8ww5hOZZNyFAfGY1WtM7hGDe5oTjr9opDFDPUMVcxvZMWVC9nP\nTi4k8ZkpgIZFvnw3ptStq1pKaHMMtjHlRsrsz1kuryjVArsHMrnRZEezBbLYoJU1\nHli6tyd2AqIzX1mYvC39AwwwKnTcwwtygV4lSbhMtcaYJis+cgVMh9ypaxOz2OAO\ny9WBNiO0h+Te57FS3yiTerUoy+EoBRvuwTIjN5iRdDUqTGNib36Q8KAf3U3R9qay\nmJqy2BAwb0jYPmSAuc/S0vJWIaAZSyZX1OiRioBdhgbqr5nWBckkLibWgZ9nnO91\nfcZ0TiYHxlpnqiwcwfKuX24aEXoo0joFNs3511rCBKkV02uHXBNWGikOAmGp24DB\nc6Vob9MgpVzpef+44UHOjMvhC+zUcTA+r8aQRFjRiuhDm47uqyJnjMFBO/s1Mi0n\nkZSGebHRp44xmhdNLezbNtXx6/kuyiOw+fI63iyLRUB5b0YxbLdaMQIBgSi0lxf1\nukaMMjqrBy0zCGVdXUBw5pAFjjWrPAY12cJg22X6cGK3/1j4LEVsfhPFtYcD3KOh\ncVS7edJhqI+B7MRZo0Pb0t9BC7xz0XfCYb861IkDVwxFJrXTSH0=\n=uMbP\n-----END PGP SIGNATURE-----", "payload": "tree 284ee5f5b185768c8f459b07ff2644919f42a424\nparent db18b42343a080024279a0e44b785594dcaf8667\nauthor Santiago Pastorino <spastorino@gmail.com> 1586106585 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1587671417 -0300\n\nMake inlining carry over unevaluated consts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5313e2e9296fc1b13e7f1eda3aa5f63dc1e7ce9a", "html_url": "https://github.com/rust-lang/rust/commit/5313e2e9296fc1b13e7f1eda3aa5f63dc1e7ce9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5313e2e9296fc1b13e7f1eda3aa5f63dc1e7ce9a/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db18b42343a080024279a0e44b785594dcaf8667", "url": "https://api.github.com/repos/rust-lang/rust/commits/db18b42343a080024279a0e44b785594dcaf8667", "html_url": "https://github.com/rust-lang/rust/commit/db18b42343a080024279a0e44b785594dcaf8667"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "0408818b7986df575f69653ee1c5232e079bb6f5", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5313e2e9296fc1b13e7f1eda3aa5f63dc1e7ce9a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5313e2e9296fc1b13e7f1eda3aa5f63dc1e7ce9a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=5313e2e9296fc1b13e7f1eda3aa5f63dc1e7ce9a", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_session::config::Sanitizer;\n use rustc_target::spec::abi::Abi;\n \n@@ -123,6 +123,14 @@ impl Inliner<'tcx> {\n                     continue;\n                 };\n \n+                // Copy only unevaluated constants from the callee_body into the caller_body.\n+                // Although we are only pushing `ConstKind::Unevaluated` consts to uneval_consts,\n+                // here we may not only have `ConstKind::Unevaluated` because we are calling\n+                // `subst_and_normalize_erasing_regions`.\n+                caller_body.uneval_consts.extend(callee_body.uneval_consts.iter().copied().filter(\n+                    |&constant| matches!(constant.literal.val, ConstKind::Unevaluated(_, _, _)),\n+                ));\n+\n                 let start = caller_body.basic_blocks().len();\n                 debug!(\"attempting to inline callsite {:?} - body={:?}\", callsite, callee_body);\n                 if !self.inline_call(callsite, caller_body, callee_body) {"}]}