{"sha": "795d307f10ec0fd3851b18a3365755d76b7403e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NWQzMDdmMTBlYzBmZDM4NTFiMThhMzM2NTc1NWQ3NmI3NDAzZTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-12T21:57:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-12T21:57:13Z"}, "message": "Suggest return lifetime when there's only one named lifetime", "tree": {"sha": "e0c41dfa98dbaa196025f386e411dc0772893b92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c41dfa98dbaa196025f386e411dc0772893b92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795d307f10ec0fd3851b18a3365755d76b7403e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795d307f10ec0fd3851b18a3365755d76b7403e5", "html_url": "https://github.com/rust-lang/rust/commit/795d307f10ec0fd3851b18a3365755d76b7403e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795d307f10ec0fd3851b18a3365755d76b7403e5/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7486b9c208f7e1c4aa1e36961927327bd793e952", "url": "https://api.github.com/repos/rust-lang/rust/commits/7486b9c208f7e1c4aa1e36961927327bd793e952", "html_url": "https://github.com/rust-lang/rust/commit/7486b9c208f7e1c4aa1e36961927327bd793e952"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "35bca04d1e623ed3e2888cf071ceb27de5f7ec00", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/795d307f10ec0fd3851b18a3365755d76b7403e5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d307f10ec0fd3851b18a3365755d76b7403e5/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=795d307f10ec0fd3851b18a3365755d76b7403e5", "patch": "@@ -2298,6 +2298,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let span = lifetime_refs[0].span;\n         let mut late_depth = 0;\n         let mut scope = self.scope;\n+        let mut lifetime_names = FxHashSet::default();\n         let error = loop {\n             match *scope {\n                 // Do not assign any resolution, it will be inferred.\n@@ -2310,7 +2311,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     scope = s;\n                 }\n \n-                Scope::Elision { ref elide, .. } => {\n+                Scope::Elision { ref elide, ref s, .. } => {\n                     let lifetime = match *elide {\n                         Elide::FreshLateAnon(ref counter) => {\n                             for lifetime_ref in lifetime_refs {\n@@ -2320,7 +2321,16 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             return;\n                         }\n                         Elide::Exact(l) => l.shifted(late_depth),\n-                        Elide::Error(ref e) => break Some(e),\n+                        Elide::Error(ref e) => {\n+                            if let Scope::Binder { ref lifetimes, .. } = s {\n+                                for name in lifetimes.keys() {\n+                                    if let hir::ParamName::Plain(name) = name {\n+                                        lifetime_names.insert(*name);\n+                                    }\n+                                }\n+                            }\n+                            break Some(e);\n+                        }\n                     };\n                     for lifetime_ref in lifetime_refs {\n                         self.insert_lifetime(lifetime_ref, lifetime);\n@@ -2343,7 +2353,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n         if add_label {\n-            add_missing_lifetime_specifiers_label(&mut err, span, lifetime_refs.len());\n+            add_missing_lifetime_specifiers_label(\n+                &mut err,\n+                span,\n+                lifetime_refs.len(),\n+                &lifetime_names,\n+                self.tcx.sess.source_map().span_to_snippet(span).ok().as_ref().map(|s| s.as_str()),\n+            );\n         }\n \n         err.emit();\n@@ -2884,10 +2900,23 @@ fn add_missing_lifetime_specifiers_label(\n     err: &mut DiagnosticBuilder<'_>,\n     span: Span,\n     count: usize,\n+    lifetime_names: &FxHashSet<ast::Ident>,\n+    snippet: Option<&str>,\n ) {\n     if count > 1 {\n         err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n+    } else if let (1, Some(name), Some(\"&\")) = (\n+        lifetime_names.len(),\n+        lifetime_names.iter().next(),\n+        snippet,\n+    ) {\n+        err.span_suggestion(\n+            span,\n+            &format!(\"consider using the named lifetime `{}`\", name),\n+            format!(\"&{} \", name),\n+            Applicability::MaybeIncorrect,\n+        );\n     } else {\n         err.span_label(span, \"expected lifetime parameter\");\n-    };\n+    }\n }"}, {"sha": "5f19e93013acff3419b84c848797375d18ed3b09", "filename": "src/test/ui/suggestions/return-without-lifetime.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/795d307f10ec0fd3851b18a3365755d76b7403e5/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d307f10ec0fd3851b18a3365755d76b7403e5/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.rs?ref=795d307f10ec0fd3851b18a3365755d76b7403e5", "patch": "@@ -0,0 +1,8 @@\n+struct Thing<'a>(&'a ());\n+\n+fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n+//~^ ERROR missing lifetime specifier\n+fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n+//~^ ERROR missing lifetime specifier\n+\n+fn main() {}"}, {"sha": "72f1c142d028f9ea25b9603348064ee3d1582dfc", "filename": "src/test/ui/suggestions/return-without-lifetime.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/795d307f10ec0fd3851b18a3365755d76b7403e5/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/795d307f10ec0fd3851b18a3365755d76b7403e5/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Freturn-without-lifetime.stderr?ref=795d307f10ec0fd3851b18a3365755d76b7403e5", "patch": "@@ -0,0 +1,19 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/return-without-lifetime.rs:3:34\n+   |\n+LL | fn func1<'a>(_arg: &'a Thing) -> &() { unimplemented!() }\n+   |                                  ^ help: consider using the named lifetime `'a`: `&'a`\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/return-without-lifetime.rs:5:35\n+   |\n+LL | fn func2<'a>(_arg: &Thing<'a>) -> &() { unimplemented!() }\n+   |                                   ^ help: consider using the named lifetime `'a`: `&'a`\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say which one of `_arg`'s 2 lifetimes it is borrowed from\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}]}