{"sha": "78a7d1c652149c08cc60d3a91dabb66f41807d28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YTdkMWM2NTIxNDljMDhjYzYwZDNhOTFkYWJiNjZmNDE4MDdkMjg=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T17:02:29Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-08-30T17:02:29Z"}, "message": "Add and update tests.", "tree": {"sha": "f91a7c8ad97dd93c85841b9aeecacaabc86fc2d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f91a7c8ad97dd93c85841b9aeecacaabc86fc2d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a7d1c652149c08cc60d3a91dabb66f41807d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a7d1c652149c08cc60d3a91dabb66f41807d28", "html_url": "https://github.com/rust-lang/rust/commit/78a7d1c652149c08cc60d3a91dabb66f41807d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a7d1c652149c08cc60d3a91dabb66f41807d28/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75", "html_url": "https://github.com/rust-lang/rust/commit/e2abf0689035a6ace7bdb2801ee1e53cb3ee2c75"}], "stats": {"total": 116, "additions": 96, "deletions": 20}, "files": [{"sha": "a1b6f5b16baf856d457a0a47b4db2d7e809b26e7", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic-trait.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.fixed?ref=78a7d1c652149c08cc60d3a91dabb66f41807d28", "patch": "@@ -0,0 +1,30 @@\n+// See https://github.com/rust-lang/rust/issues/88470\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+pub trait PyTryFrom<'v, T>: Sized {\n+    fn try_from<V>(value: V) -> Result<&'v Self, T>;\n+}\n+\n+pub trait PyTryInto<T>: Sized {\n+    fn try_into(&self) -> Result<&T, i32>;\n+}\n+\n+struct Foo;\n+\n+impl<U> PyTryInto<U> for Foo\n+where\n+    U: for<'v> PyTryFrom<'v, i32>,\n+{\n+    fn try_into(&self) -> Result<&U, i32> {\n+        <U as PyTryFrom<'_, _>>::try_from(self)\n+        //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+        //~| this is accepted in the current edition (Rust 2018)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "142ba552002fc97b51384001e8b6c5a9e52a8f9d", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic-trait.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.rs?ref=78a7d1c652149c08cc60d3a91dabb66f41807d28", "patch": "@@ -0,0 +1,30 @@\n+// See https://github.com/rust-lang/rust/issues/88470\n+// run-rustfix\n+// edition:2018\n+// check-pass\n+#![warn(rust_2021_prelude_collisions)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n+\n+pub trait PyTryFrom<'v, T>: Sized {\n+    fn try_from<V>(value: V) -> Result<&'v Self, T>;\n+}\n+\n+pub trait PyTryInto<T>: Sized {\n+    fn try_into(&self) -> Result<&T, i32>;\n+}\n+\n+struct Foo;\n+\n+impl<U> PyTryInto<U> for Foo\n+where\n+    U: for<'v> PyTryFrom<'v, i32>,\n+{\n+    fn try_into(&self) -> Result<&U, i32> {\n+        U::try_from(self)\n+        //~^ WARNING trait-associated function `try_from` will become ambiguous in Rust 2021\n+        //~| this is accepted in the current edition (Rust 2018)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "14ad9b017b694400522f9822fbb7640aefe3971b", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic-trait.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic-trait.stderr?ref=78a7d1c652149c08cc60d3a91dabb66f41807d28", "patch": "@@ -0,0 +1,16 @@\n+warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n+  --> $DIR/future-prelude-collision-generic-trait.rs:24:9\n+   |\n+LL |         U::try_from(self)\n+   |         ^^^^^^^^^^^ help: disambiguate the associated function: `<U as PyTryFrom<'_, _>>::try_from`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/future-prelude-collision-generic-trait.rs:5:9\n+   |\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "1bb9ba3777404415cfb8bfc325815ba4fbf6a78f", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.fixed", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.fixed?ref=78a7d1c652149c08cc60d3a91dabb66f41807d28", "patch": "@@ -6,32 +6,32 @@\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n-struct Generic<T, U>(T, U);\n+struct Generic<'a, U>(&'a U);\n \n trait MyFromIter {\n     fn from_iter(_: i32) -> Self;\n }\n \n-impl MyFromIter for Generic<i32, i32> {\n-    fn from_iter(x: i32) -> Self {\n-        Self(x, x)\n+impl MyFromIter for Generic<'static, i32> {\n+    fn from_iter(_: i32) -> Self {\n+        todo!()\n     }\n }\n \n-impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+impl std::iter::FromIterator<i32> for Generic<'static, i32> {\n     fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n         todo!()\n     }\n }\n \n fn main() {\n-    <Generic<_, _> as MyFromIter>::from_iter(1);\n+    <Generic<'_, _> as MyFromIter>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    <Generic::<i32, i32> as MyFromIter>::from_iter(1);\n+    <Generic::<'static, i32> as MyFromIter>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    <Generic::<_, _> as MyFromIter>::from_iter(1);\n+    <Generic::<'_, _> as MyFromIter>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n }"}, {"sha": "d7f8affc61ade9e331c6a210b9cdf997dc8ec133", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.rs?ref=78a7d1c652149c08cc60d3a91dabb66f41807d28", "patch": "@@ -6,19 +6,19 @@\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n-struct Generic<T, U>(T, U);\n+struct Generic<'a, U>(&'a U);\n \n trait MyFromIter {\n     fn from_iter(_: i32) -> Self;\n }\n \n-impl MyFromIter for Generic<i32, i32> {\n-    fn from_iter(x: i32) -> Self {\n-        Self(x, x)\n+impl MyFromIter for Generic<'static, i32> {\n+    fn from_iter(_: i32) -> Self {\n+        todo!()\n     }\n }\n \n-impl std::iter::FromIterator<i32> for Generic<i32, i32> {\n+impl std::iter::FromIterator<i32> for Generic<'static, i32> {\n     fn from_iter<T: IntoIterator<Item = i32>>(_: T) -> Self {\n         todo!()\n     }\n@@ -28,10 +28,10 @@ fn main() {\n     Generic::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    Generic::<i32, i32>::from_iter(1);\n+    Generic::<'static, i32>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n-    Generic::<_, _>::from_iter(1);\n+    Generic::<'_, _>::from_iter(1);\n     //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n     //~| this is accepted in the current edition (Rust 2018)\n }"}, {"sha": "e1d3f3c0a4629d972a64b025c1163b68b6e1c47d", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78a7d1c652149c08cc60d3a91dabb66f41807d28/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr?ref=78a7d1c652149c08cc60d3a91dabb66f41807d28", "patch": "@@ -2,7 +2,7 @@ warning: trait-associated function `from_iter` will become ambiguous in Rust 202\n   --> $DIR/future-prelude-collision-generic.rs:28:5\n    |\n LL |     Generic::from_iter(1);\n-   |     ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic<_, _> as MyFromIter>::from_iter`\n+   |     ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic<'_, _> as MyFromIter>::from_iter`\n    |\n note: the lint level is defined here\n   --> $DIR/future-prelude-collision-generic.rs:5:9\n@@ -15,17 +15,17 @@ LL | #![warn(rust_2021_prelude_collisions)]\n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-generic.rs:31:5\n    |\n-LL |     Generic::<i32, i32>::from_iter(1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<i32, i32> as MyFromIter>::from_iter`\n+LL |     Generic::<'static, i32>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<'static, i32> as MyFromIter>::from_iter`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-generic.rs:34:5\n    |\n-LL |     Generic::<_, _>::from_iter(1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<_, _> as MyFromIter>::from_iter`\n+LL |     Generic::<'_, _>::from_iter(1);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<'_, _> as MyFromIter>::from_iter`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>"}]}