{"sha": "b067e4464bc8f519485476935d7d6b2bc860e569", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjdlNDQ2NGJjOGY1MTk0ODU0NzY5MzVkN2Q2YjJiYzg2MGU1Njk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-14T22:46:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:48:44Z"}, "message": "Clean up simd_cast translation.", "tree": {"sha": "f05a5e4a370d9e8d57d13052b051cab1f186fbbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f05a5e4a370d9e8d57d13052b051cab1f186fbbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b067e4464bc8f519485476935d7d6b2bc860e569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b067e4464bc8f519485476935d7d6b2bc860e569", "html_url": "https://github.com/rust-lang/rust/commit/b067e4464bc8f519485476935d7d6b2bc860e569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b067e4464bc8f519485476935d7d6b2bc860e569/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "502f9acbe9a41c64c92a3eba8186e8b44963fc76", "url": "https://api.github.com/repos/rust-lang/rust/commits/502f9acbe9a41c64c92a3eba8186e8b44963fc76", "html_url": "https://github.com/rust-lang/rust/commit/502f9acbe9a41c64c92a3eba8186e8b44963fc76"}], "stats": {"total": 175, "additions": 69, "deletions": 106}, "files": [{"sha": "ded748e9894a01b383c21cbb565bb5218def2978", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 45, "deletions": 106, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/b067e4464bc8f519485476935d7d6b2bc860e569/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b067e4464bc8f519485476935d7d6b2bc860e569/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=b067e4464bc8f519485476935d7d6b2bc860e569", "patch": "@@ -43,6 +43,8 @@ use syntax::ast;\n use syntax::ptr::P;\n use syntax::parse::token;\n \n+use std::cmp::Ordering;\n+\n pub fn get_simple_intrinsic(ccx: &CrateContext, item: &ast::ForeignItem) -> Option<ValueRef> {\n     let name = match &*item.ident.name.as_str() {\n         \"sqrtf32\" => \"llvm.sqrt.f32\",\n@@ -1485,120 +1487,57 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n \n         if in_elem == out_elem { return llargs[0]; }\n \n-        match (&in_elem.sty, &out_elem.sty) {\n-            (&ty::TyInt(lhs), &ty::TyInt(rhs)) => {\n-                match (lhs, rhs) {\n-                    (ast::TyI8, ast::TyI8) |\n-                    (ast::TyI16, ast::TyI16) |\n-                    (ast::TyI32, ast::TyI32) |\n-                    (ast::TyI64, ast::TyI64) => return llargs[0],\n-\n-                    (ast::TyI8, ast::TyI16) |\n-                    (ast::TyI8, ast::TyI32) |\n-                    (ast::TyI8, ast::TyI64) |\n-                    (ast::TyI16, ast::TyI32) |\n-                    (ast::TyI16, ast::TyI64) |\n-                    (ast::TyI32, ast::TyI64) => return SExt(bcx, llargs[0], llret_ty),\n-\n-                    (ast::TyI16, ast::TyI8) |\n-                    (ast::TyI32, ast::TyI8) |\n-                    (ast::TyI32, ast::TyI16) |\n-                    (ast::TyI64, ast::TyI8) |\n-                    (ast::TyI64, ast::TyI16) |\n-                    (ast::TyI64, ast::TyI32) => return Trunc(bcx, llargs[0], llret_ty),\n-                    _ => {}\n+        enum Style { Float, Int(/* is signed? */ bool), Unsupported }\n+\n+        let (in_style, in_width) = match in_elem.sty {\n+            // vectors of pointer-sized integers should've been\n+            // disallowed before here, so this unwrap is safe.\n+            ty::TyInt(i) => (Style::Int(true), i.bit_width().unwrap()),\n+            ty::TyUint(u) => (Style::Int(false), u.bit_width().unwrap()),\n+            ty::TyFloat(f) => (Style::Float, f.bit_width()),\n+            _ => (Style::Unsupported, 0)\n+        };\n+        let (out_style, out_width) = match out_elem.sty {\n+            ty::TyInt(i) => (Style::Int(true), i.bit_width().unwrap()),\n+            ty::TyUint(u) => (Style::Int(false), u.bit_width().unwrap()),\n+            ty::TyFloat(f) => (Style::Float, f.bit_width()),\n+            _ => (Style::Unsupported, 0)\n+        };\n+\n+        match (in_style, out_style) {\n+            (Style::Int(in_is_signed), Style::Int(_)) => {\n+                return match in_width.cmp(&out_width) {\n+                    Ordering::Greater => Trunc(bcx, llargs[0], llret_ty),\n+                    Ordering::Equal => llargs[0],\n+                    Ordering::Less => if in_is_signed {\n+                        SExt(bcx, llargs[0], llret_ty)\n+                    } else {\n+                        ZExt(bcx, llargs[0], llret_ty)\n+                    }\n                 }\n             }\n-            (&ty::TyUint(lhs), &ty::TyUint(rhs)) => {\n-                match (lhs, rhs) {\n-                    (ast::TyU8, ast::TyU8) |\n-                    (ast::TyU16, ast::TyU16) |\n-                    (ast::TyU32, ast::TyU32) |\n-                    (ast::TyU64, ast::TyU64) => return llargs[0],\n-\n-                    (ast::TyU8, ast::TyU16) |\n-                    (ast::TyU8, ast::TyU32) |\n-                    (ast::TyU8, ast::TyU64) |\n-                    (ast::TyU16, ast::TyU32) |\n-                    (ast::TyU16, ast::TyU64) |\n-                    (ast::TyU32, ast::TyU64) => return ZExt(bcx, llargs[0], llret_ty),\n-\n-                    (ast::TyU16, ast::TyU8) |\n-                    (ast::TyU32, ast::TyU8) |\n-                    (ast::TyU32, ast::TyU16) |\n-                    (ast::TyU64, ast::TyU8) |\n-                    (ast::TyU64, ast::TyU16) |\n-                    (ast::TyU64, ast::TyU32) => return Trunc(bcx, llargs[0], llret_ty),\n-                    _ => {}\n+            (Style::Int(in_is_signed), Style::Float) => {\n+                return if in_is_signed {\n+                    SIToFP(bcx, llargs[0], llret_ty)\n+                } else {\n+                    UIToFP(bcx, llargs[0], llret_ty)\n                 }\n             }\n-            (&ty::TyInt(lhs), &ty::TyUint(rhs)) => {\n-                match (lhs, rhs) {\n-                    (ast::TyI8, ast::TyU8) |\n-                    (ast::TyI16, ast::TyU16) |\n-                    (ast::TyI32, ast::TyU32) |\n-                    (ast::TyI64, ast::TyU64) => return llargs[0],\n-\n-                    (ast::TyI8, ast::TyU16) |\n-                    (ast::TyI8, ast::TyU32) |\n-                    (ast::TyI8, ast::TyU64) |\n-                    (ast::TyI16, ast::TyU32) |\n-                    (ast::TyI16, ast::TyU64) |\n-                    (ast::TyI32, ast::TyU64) => return SExt(bcx, llargs[0], llret_ty),\n-\n-                    (ast::TyI16, ast::TyU8) |\n-                    (ast::TyI32, ast::TyU8) |\n-                    (ast::TyI32, ast::TyU16) |\n-                    (ast::TyI64, ast::TyU8) |\n-                    (ast::TyI64, ast::TyU16) |\n-                    (ast::TyI64, ast::TyU32) => return Trunc(bcx, llargs[0], llret_ty),\n-                    _ => {}\n+            (Style::Float, Style::Int(out_is_signed)) => {\n+                return if out_is_signed {\n+                    FPToSI(bcx, llargs[0], llret_ty)\n+                } else {\n+                    FPToUI(bcx, llargs[0], llret_ty)\n                 }\n             }\n-            (&ty::TyUint(lhs), &ty::TyInt(rhs)) => {\n-                match (lhs, rhs) {\n-                    (ast::TyU8, ast::TyI8) |\n-                    (ast::TyU16, ast::TyI16) |\n-                    (ast::TyU32, ast::TyI32) |\n-                    (ast::TyU64, ast::TyI64) => return llargs[0],\n-\n-                    (ast::TyU8, ast::TyI16) |\n-                    (ast::TyU8, ast::TyI32) |\n-                    (ast::TyU8, ast::TyI64) |\n-                    (ast::TyU16, ast::TyI32) |\n-                    (ast::TyU16, ast::TyI64) |\n-                    (ast::TyU32, ast::TyI64) => return ZExt(bcx, llargs[0], llret_ty),\n-\n-                    (ast::TyU16, ast::TyI8) |\n-                    (ast::TyU32, ast::TyI8) |\n-                    (ast::TyU32, ast::TyI16) |\n-                    (ast::TyU64, ast::TyI8) |\n-                    (ast::TyU64, ast::TyI16) |\n-                    (ast::TyU64, ast::TyI32) => return Trunc(bcx, llargs[0], llret_ty),\n-                    _ => {}\n+            (Style::Float, Style::Float) => {\n+                return match in_width.cmp(&out_width) {\n+                    Ordering::Greater => FPTrunc(bcx, llargs[0], llret_ty),\n+                    Ordering::Equal => llargs[0],\n+                    Ordering::Less => FPExt(bcx, llargs[0], llret_ty)\n                 }\n             }\n-\n-            (&ty::TyInt(_), &ty::TyFloat(_)) => {\n-                return SIToFP(bcx, llargs[0], llret_ty)\n-            }\n-            (&ty::TyUint(_), &ty::TyFloat(_)) => {\n-                return UIToFP(bcx, llargs[0], llret_ty)\n-            }\n-\n-            (&ty::TyFloat(_), &ty::TyInt(_)) => {\n-                return FPToSI(bcx, llargs[0], llret_ty)\n-            }\n-            (&ty::TyFloat(_), &ty::TyUint(_)) => {\n-                return FPToUI(bcx, llargs[0], llret_ty)\n-            }\n-            (&ty::TyFloat(ast::TyF32), &ty::TyFloat(ast::TyF64)) => {\n-                return FPExt(bcx, llargs[0], llret_ty)\n-            }\n-            (&ty::TyFloat(ast::TyF64), &ty::TyFloat(ast::TyF32)) => {\n-                return FPTrunc(bcx, llargs[0], llret_ty)\n-            }\n-            _ => {}\n+            _ => {/* Unsupported. Fallthrough. */}\n         }\n         require!(false,\n                  \"unsupported cast from `{}` with element `{}` to `{}` with element `{}`\","}, {"sha": "2d72c8fe2a48ca288c80975ba0d94fdd3a392076", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b067e4464bc8f519485476935d7d6b2bc860e569/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b067e4464bc8f519485476935d7d6b2bc860e569/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b067e4464bc8f519485476935d7d6b2bc860e569", "patch": "@@ -1339,6 +1339,15 @@ impl IntTy {\n             TyI16 | TyI32 | TyI64  => 3,\n         }\n     }\n+    pub fn bit_width(&self) -> Option<usize> {\n+        Some(match *self {\n+            TyIs => return None,\n+            TyI8 => 8,\n+            TyI16 => 16,\n+            TyI32 => 32,\n+            TyI64 => 64,\n+        })\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n@@ -1357,6 +1366,15 @@ impl UintTy {\n             TyU16 | TyU32 | TyU64  => 3,\n         }\n     }\n+    pub fn bit_width(&self) -> Option<usize> {\n+        Some(match *self {\n+            TyUs => return None,\n+            TyU8 => 8,\n+            TyU16 => 16,\n+            TyU32 => 32,\n+            TyU64 => 64,\n+        })\n+    }\n }\n \n impl fmt::Debug for UintTy {\n@@ -1395,6 +1413,12 @@ impl FloatTy {\n             TyF32 | TyF64 => 3, // add F128 handling here\n         }\n     }\n+    pub fn bit_width(&self) -> usize {\n+        match *self {\n+            TyF32 => 32,\n+            TyF64 => 64,\n+        }\n+    }\n }\n \n // Bind a type to an associated type: `A=Foo`."}]}