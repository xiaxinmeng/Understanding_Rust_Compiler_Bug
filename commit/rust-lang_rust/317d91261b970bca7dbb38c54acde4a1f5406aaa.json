{"sha": "317d91261b970bca7dbb38c54acde4a1f5406aaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxN2Q5MTI2MWI5NzBiY2E3ZGJiMzhjNTRhY2RlNGExZjU0MDZhYWE=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-12-13T08:13:19Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-12-13T22:16:53Z"}, "message": "Windows dbghelp strips leading underscores from symbols, so let's accept \"ZN...E\" form too.\nAlso, print PC displacement from symbols.", "tree": {"sha": "51d1266426871268d7fbdca954947859ae08554c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51d1266426871268d7fbdca954947859ae08554c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/317d91261b970bca7dbb38c54acde4a1f5406aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/317d91261b970bca7dbb38c54acde4a1f5406aaa", "html_url": "https://github.com/rust-lang/rust/commit/317d91261b970bca7dbb38c54acde4a1f5406aaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/317d91261b970bca7dbb38c54acde4a1f5406aaa/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5921241a3146cccaffc336a0d1ade1a90e3517f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5921241a3146cccaffc336a0d1ade1a90e3517f", "html_url": "https://github.com/rust-lang/rust/commit/a5921241a3146cccaffc336a0d1ade1a90e3517f"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "a5c6d180dd991a30bff7a4e77ea2eafa8c33b219", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/317d91261b970bca7dbb38c54acde4a1f5406aaa/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/317d91261b970bca7dbb38c54acde4a1f5406aaa/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=317d91261b970bca7dbb38c54acde4a1f5406aaa", "patch": "@@ -66,8 +66,18 @@ fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n     // expecting, we just print it literally. Note that we must handle non-rust\n     // symbols because we could have any function in the backtrace.\n     let mut valid = true;\n+    let mut inner = s;\n     if s.len() > 4 && s.starts_with(\"_ZN\") && s.ends_with(\"E\") {\n-        let mut chars = s.slice(3, s.len() - 1).chars();\n+        inner = s.slice(3, s.len() - 1);\n+    // On Windows, dbghelp strips leading underscores, so we accept \"ZN...E\" form too.\n+    } else if s.len() > 3 && s.starts_with(\"ZN\") && s.ends_with(\"E\") {\n+        inner = s.slice(2, s.len() - 1);\n+    } else {\n+        valid = false;\n+    }\n+\n+    if valid {\n+        let mut chars = inner.chars();\n         while valid {\n             let mut i = 0;\n             for c in chars {\n@@ -84,28 +94,25 @@ fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n                 valid = false;\n             }\n         }\n-    } else {\n-        valid = false;\n     }\n \n     // Alright, let's do this.\n     if !valid {\n         try!(writer.write_str(s));\n     } else {\n-        let mut s = s.slice_from(3);\n         let mut first = true;\n-        while s.len() > 1 {\n+        while inner.len() > 0 {\n             if !first {\n                 try!(writer.write_str(\"::\"));\n             } else {\n                 first = false;\n             }\n-            let mut rest = s;\n+            let mut rest = inner;\n             while rest.char_at(0).is_numeric() {\n                 rest = rest.slice_from(1);\n             }\n-            let i: uint = from_str(s.slice_to(s.len() - rest.len())).unwrap();\n-            s = rest.slice_from(i);\n+            let i: uint = from_str(inner.slice_to(inner.len() - rest.len())).unwrap();\n+            inner = rest.slice_from(i);\n             rest = rest.slice_to(i);\n             while rest.len() > 0 {\n                 if rest.starts_with(\"$\") {\n@@ -999,6 +1006,9 @@ mod imp {\n                     Some(s) => try!(super::demangle(w, s)),\n                     None => try!(w.write(bytes[..bytes.len()-1])),\n                 }\n+                if displacement != 0 {\n+                    try!(write!(w, \"+{:#x}\", displacement));\n+                }\n             }\n             try!(w.write(&['\\n' as u8]));\n         }\n@@ -1037,4 +1047,11 @@ mod test {\n         t!(\"_ZN12test$x20test4foobE\", \"test test::foob\");\n         t!(\"_ZN12test$UP$test4foobE\", \"testBoxtest::foob\");\n     }\n+\n+    #[test]\n+    fn demangle_windows() {\n+        t!(\"yZN4testE\", \"test\");\n+        t!(\"ZN12test$x20test4foobE\", \"test test::foob\");\n+        t!(\"ZN12test$UP$test4foobE\", \"testBoxtest::foob\");\n+    }\n }"}]}