{"sha": "fc1a861558a49013fb6af5e4c36450a3b96ddc03", "node_id": "C_kwDOAAsO6NoAKGZjMWE4NjE1NThhNDkwMTNmYjZhZjVlNGMzNjQ1MGEzYjk2ZGRjMDM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-05T18:13:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-05T18:35:30Z"}, "message": "Erase lifetimes in SROA.", "tree": {"sha": "e079dc5ec6d86ba30aeefde6f90a48854ecf6438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e079dc5ec6d86ba30aeefde6f90a48854ecf6438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc1a861558a49013fb6af5e4c36450a3b96ddc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1a861558a49013fb6af5e4c36450a3b96ddc03", "html_url": "https://github.com/rust-lang/rust/commit/fc1a861558a49013fb6af5e4c36450a3b96ddc03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc1a861558a49013fb6af5e4c36450a3b96ddc03/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "248a5301af39f823c92927f81c847f6b2ca32fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/248a5301af39f823c92927f81c847f6b2ca32fcd", "html_url": "https://github.com/rust-lang/rust/commit/248a5301af39f823c92927f81c847f6b2ca32fcd"}], "stats": {"total": 279, "additions": 272, "deletions": 7}, "files": [{"sha": "34c60b5ff3c2160c42b83f5e4ecc8f4f4c91c120", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc1a861558a49013fb6af5e4c36450a3b96ddc03/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1a861558a49013fb6af5e4c36450a3b96ddc03/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=fc1a861558a49013fb6af5e4c36450a3b96ddc03", "patch": "@@ -690,7 +690,7 @@ impl Map {\n         }\n \n         // Recurse with all fields of this place.\n-        iter_fields(ty, tcx, |variant, field, ty| {\n+        iter_fields(ty, tcx, ty::ParamEnv::reveal_all(), |variant, field, ty| {\n             if let Some(variant) = variant {\n                 projection.push(PlaceElem::Downcast(None, variant));\n                 let _ = self.make_place(local, projection);\n@@ -939,6 +939,7 @@ impl<V, T> TryFrom<ProjectionElem<V, T>> for TrackElem {\n pub fn iter_fields<'tcx>(\n     ty: Ty<'tcx>,\n     tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     mut f: impl FnMut(Option<VariantIdx>, Field, Ty<'tcx>),\n ) {\n     match ty.kind() {\n@@ -956,14 +957,14 @@ pub fn iter_fields<'tcx>(\n                 for (f_index, f_def) in v_def.fields.iter().enumerate() {\n                     let field_ty = f_def.ty(tcx, substs);\n                     let field_ty = tcx\n-                        .try_normalize_erasing_regions(ty::ParamEnv::reveal_all(), field_ty)\n-                        .unwrap_or(field_ty);\n+                        .try_normalize_erasing_regions(param_env, field_ty)\n+                        .unwrap_or_else(|_| tcx.erase_regions(field_ty));\n                     f(variant, f_index.into(), field_ty);\n                 }\n             }\n         }\n         ty::Closure(_, substs) => {\n-            iter_fields(substs.as_closure().tupled_upvars_ty(), tcx, f);\n+            iter_fields(substs.as_closure().tupled_upvars_ty(), tcx, param_env, f);\n         }\n         _ => (),\n     }"}, {"sha": "ca2221520c82562bc8b6462e572d8f0bb9911f5c", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc1a861558a49013fb6af5e4c36450a3b96ddc03/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1a861558a49013fb6af5e4c36450a3b96ddc03/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=fc1a861558a49013fb6af5e4c36450a3b96ddc03", "patch": "@@ -4,7 +4,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_mir_dataflow::value_analysis::{excluded_locals, iter_fields};\n \n pub struct ScalarReplacementOfAggregates;\n@@ -18,11 +18,12 @@ impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         debug!(def_id = ?body.source.def_id());\n         let mut excluded = excluded_locals(body);\n+        let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n         loop {\n             debug!(?excluded);\n             let escaping = escaping_locals(&excluded, body);\n             debug!(?escaping);\n-            let replacements = compute_flattening(tcx, body, escaping);\n+            let replacements = compute_flattening(tcx, param_env, body, escaping);\n             debug!(?replacements);\n             let all_dead_locals = replace_flattened_locals(tcx, body, replacements);\n             if !all_dead_locals.is_empty() {\n@@ -144,6 +145,7 @@ impl<'tcx> ReplacementMap<'tcx> {\n /// The replacement will be done later in `ReplacementVisitor`.\n fn compute_flattening<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n     escaping: BitSet<Local>,\n ) -> ReplacementMap<'tcx> {\n@@ -155,7 +157,7 @@ fn compute_flattening<'tcx>(\n         }\n         let decl = body.local_decls[local].clone();\n         let ty = decl.ty;\n-        iter_fields(ty, tcx, |variant, field, field_ty| {\n+        iter_fields(ty, tcx, param_env, |variant, field, field_ty| {\n             if variant.is_some() {\n                 // Downcasts are currently not supported.\n                 return;"}, {"sha": "d41cdc09cac9d50524807cf24fb0dc9d251cb403", "filename": "tests/mir-opt/sroa/lifetimes.foo.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/fc1a861558a49013fb6af5e4c36450a3b96ddc03/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/fc1a861558a49013fb6af5e4c36450a3b96ddc03/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff?ref=fc1a861558a49013fb6af5e4c36450a3b96ddc03", "patch": "@@ -0,0 +1,225 @@\n+- // MIR for `foo` before ScalarReplacementOfAggregates\n++ // MIR for `foo` after ScalarReplacementOfAggregates\n+  \n+  fn foo() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lifetimes.rs:+0:18: +0:18\n+      let _1: Foo<T>;                      // in scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n+      let mut _2: std::result::Result<std::boxed::Box<(dyn std::fmt::Display + ReErased)>, <T as Err>::Err>; // in scope 0 at $DIR/lifetimes.rs:+2:12: +2:31\n+      let mut _3: std::boxed::Box<(dyn std::fmt::Display + ReErased)>; // in scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+      let mut _4: std::boxed::Box<u32>;    // in scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+      let mut _7: isize;                   // in scope 0 at $DIR/lifetimes.rs:+9:12: +9:17\n+      let _9: ();                          // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _10: ();                         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _11: std::fmt::Arguments<ReErased>; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _12: &ReErased [&ReErased str]; // in scope 0 at $DIR/lifetimes.rs:+10:19: +10:28\n+      let mut _13: &ReErased [&ReErased str; Const(Value(Leaf(0x0000000000000003)): usize)]; // in scope 0 at $DIR/lifetimes.rs:+10:19: +10:28\n+      let _14: &ReErased [&ReErased str; Const(Value(Leaf(0x0000000000000003)): usize)]; // in scope 0 at $DIR/lifetimes.rs:+10:19: +10:28\n+      let _15: [&ReErased str; Const(Value(Leaf(0x0000000000000003)): usize)]; // in scope 0 at $DIR/lifetimes.rs:+10:19: +10:28\n+      let mut _16: &ReErased [core::fmt::ArgumentV1<ReErased>]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _17: &ReErased [core::fmt::ArgumentV1<ReErased>; Const(Value(Leaf(0x0000000000000002)): usize)]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _18: &ReErased [core::fmt::ArgumentV1<ReErased>; Const(Value(Leaf(0x0000000000000002)): usize)]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _19: [core::fmt::ArgumentV1<ReErased>; Const(Value(Leaf(0x0000000000000002)): usize)]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _20: core::fmt::ArgumentV1<ReErased>; // in scope 0 at $DIR/lifetimes.rs:+10:21: +10:22\n+      let mut _21: &ReErased std::boxed::Box<(dyn std::fmt::Display + ReErased)>; // in scope 0 at $DIR/lifetimes.rs:+10:21: +10:22\n+      let _22: &ReErased std::boxed::Box<(dyn std::fmt::Display + ReErased)>; // in scope 0 at $DIR/lifetimes.rs:+10:21: +10:22\n+      let mut _23: core::fmt::ArgumentV1<ReErased>; // in scope 0 at $DIR/lifetimes.rs:+10:25: +10:26\n+      let mut _24: &ReErased u32;          // in scope 0 at $DIR/lifetimes.rs:+10:25: +10:26\n+      let _25: &ReErased u32;              // in scope 0 at $DIR/lifetimes.rs:+10:25: +10:26\n+      let mut _27: bool;                   // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n+      let mut _28: isize;                  // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n+      let mut _29: isize;                  // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n+      let mut _30: isize;                  // in scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n++     let _31: std::result::Result<std::boxed::Box<(dyn std::fmt::Display + ReErased)>, <T as Err>::Err>; // in scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n++     let _32: u32;                        // in scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n+      scope 1 {\n+-         debug foo => _1;                 // in scope 1 at $DIR/lifetimes.rs:+1:9: +1:12\n++         debug foo => Foo<T>{ .0 => _31, .1 => _32, }; // in scope 1 at $DIR/lifetimes.rs:+1:9: +1:12\n+          let _5: std::result::Result<std::boxed::Box<(dyn std::fmt::Display + ReErased)>, <T as Err>::Err>; // in scope 1 at $DIR/lifetimes.rs:+6:9: +6:10\n+          scope 2 {\n+              debug x => _5;               // in scope 2 at $DIR/lifetimes.rs:+6:9: +6:10\n+              let _6: u32;                 // in scope 2 at $DIR/lifetimes.rs:+7:9: +7:10\n+              scope 3 {\n+                  debug y => _6;           // in scope 3 at $DIR/lifetimes.rs:+7:9: +7:10\n+                  scope 4 {\n+                      debug x => _8;       // in scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+                      let _8: std::boxed::Box<(dyn std::fmt::Display + ReErased)>; // in scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+                      let mut _26: &ReErased [&ReErased str; Const(Value(Leaf(0x0000000000000003)): usize)]; // in scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          _27 = const ConstValue(Scalar(0x00): bool); // bb0[0]: scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n+-         StorageLive(_1);                 // bb0[1]: scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n+-         StorageLive(_2);                 // bb0[2]: scope 0 at $DIR/lifetimes.rs:+2:12: +2:31\n+-         StorageLive(_3);                 // bb0[3]: scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+-         StorageLive(_4);                 // bb0[4]: scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+-         _4 = ConstValue(ZeroSized: fn(u32) -> Box<u32> {Box::<u32>::new})(const ConstValue(Scalar(0x00000005): u32)) -> bb1; // bb0[5]: scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n++         StorageLive(_31);                // bb0[1]: scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n++         StorageLive(_32);                // bb0[2]: scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n++         nop;                             // bb0[3]: scope 0 at $DIR/lifetimes.rs:+1:9: +1:12\n++         StorageLive(_2);                 // bb0[4]: scope 0 at $DIR/lifetimes.rs:+2:12: +2:31\n++         StorageLive(_3);                 // bb0[5]: scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n++         StorageLive(_4);                 // bb0[6]: scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n++         _4 = ConstValue(ZeroSized: fn(u32) -> Box<u32> {Box::<u32>::new})(const ConstValue(Scalar(0x00000005): u32)) -> bb1; // bb0[7]: scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+                                           // mir::Constant\n+                                           // + span: $DIR/lifetimes.rs:19:15: 19:23\n+                                           // + user_ty: UserType(1)\n+                                           // + literal: Const { ty: fn(u32) -> Box<u32> {Box::<u32>::new}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          _3 = move _4 as std::boxed::Box<(dyn std::fmt::Display + ReErased)> (Pointer(Unsize)); // bb1[0]: scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+          StorageDead(_4);                 // bb1[1]: scope 0 at $DIR/lifetimes.rs:+2:29: +2:30\n+          _2 = Result::<Box<(dyn std::fmt::Display + ReErased)>, <T as Err>::Err>::Ok(move _3); // bb1[2]: scope 0 at $DIR/lifetimes.rs:+2:12: +2:31\n+          StorageDead(_3);                 // bb1[3]: scope 0 at $DIR/lifetimes.rs:+2:30: +2:31\n+-         _1 = Foo::<T> { x: move _2, y: const ConstValue(Scalar(0x00000007): u32) }; // bb1[4]: scope 0 at $DIR/lifetimes.rs:+1:23: +4:6\n+-         StorageDead(_2);                 // bb1[5]: scope 0 at $DIR/lifetimes.rs:+4:5: +4:6\n+-         StorageLive(_5);                 // bb1[6]: scope 1 at $DIR/lifetimes.rs:+6:9: +6:10\n+-         _27 = const ConstValue(Scalar(0x01): bool); // bb1[7]: scope 1 at $DIR/lifetimes.rs:+6:13: +6:18\n+-         _5 = move (_1.0: std::result::Result<std::boxed::Box<(dyn std::fmt::Display + ReErased)>, <T as Err>::Err>); // bb1[8]: scope 1 at $DIR/lifetimes.rs:+6:13: +6:18\n+-         StorageLive(_6);                 // bb1[9]: scope 2 at $DIR/lifetimes.rs:+7:9: +7:10\n+-         _6 = (_1.1: u32);                // bb1[10]: scope 2 at $DIR/lifetimes.rs:+7:13: +7:18\n+-         _7 = discriminant(_5);           // bb1[11]: scope 4 at $DIR/lifetimes.rs:+9:12: +9:17\n+-         switchInt(move _7) -> [0: bb2, otherwise: bb7]; // bb1[12]: scope 4 at $DIR/lifetimes.rs:+9:12: +9:17\n++         _31 = move _2;                   // bb1[4]: scope 0 at $DIR/lifetimes.rs:+1:23: +4:6\n++         _32 = const ConstValue(Scalar(0x00000007): u32); // bb1[5]: scope 0 at $DIR/lifetimes.rs:+1:23: +4:6\n++         nop;                             // bb1[6]: scope 0 at $DIR/lifetimes.rs:+1:23: +4:6\n++         StorageDead(_2);                 // bb1[7]: scope 0 at $DIR/lifetimes.rs:+4:5: +4:6\n++         StorageLive(_5);                 // bb1[8]: scope 1 at $DIR/lifetimes.rs:+6:9: +6:10\n++         _27 = const ConstValue(Scalar(0x01): bool); // bb1[9]: scope 1 at $DIR/lifetimes.rs:+6:13: +6:18\n++         _5 = move _31;                   // bb1[10]: scope 1 at $DIR/lifetimes.rs:+6:13: +6:18\n++         StorageLive(_6);                 // bb1[11]: scope 2 at $DIR/lifetimes.rs:+7:9: +7:10\n++         _6 = _32;                        // bb1[12]: scope 2 at $DIR/lifetimes.rs:+7:13: +7:18\n++         _7 = discriminant(_5);           // bb1[13]: scope 4 at $DIR/lifetimes.rs:+9:12: +9:17\n++         switchInt(move _7) -> [0: bb2, otherwise: bb7]; // bb1[14]: scope 4 at $DIR/lifetimes.rs:+9:12: +9:17\n+      }\n+  \n+      bb2: {\n+          StorageLive(_8);                 // bb2[0]: scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+          _27 = const ConstValue(Scalar(0x00): bool); // bb2[1]: scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+          _8 = move ((_5 as Ok).0: std::boxed::Box<(dyn std::fmt::Display + ReErased)>); // bb2[2]: scope 4 at $DIR/lifetimes.rs:+9:15: +9:16\n+          StorageLive(_9);                 // bb2[3]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_10);                // bb2[4]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_11);                // bb2[5]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_12);                // bb2[6]: scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          StorageLive(_13);                // bb2[7]: scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          StorageLive(_14);                // bb2[8]: scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          _26 = const _;                   // bb2[9]: scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+                                           // mir::Constant\n+                                           // + span: $DIR/lifetimes.rs:27:19: 27:28\n+                                           // + literal: Const { ty: &ReErased [&ReErased str; Const(Value(Leaf(0x0000000000000003)): usize)], val: Unevaluated(foo, [T], Some(promoted[0])) }\n+          _14 = &ReErased (*_26);          // bb2[10]: scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          _13 = &ReErased (*_14);          // bb2[11]: scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          _12 = move _13 as &ReErased [&ReErased str] (Pointer(Unsize)); // bb2[12]: scope 4 at $DIR/lifetimes.rs:+10:19: +10:28\n+          StorageDead(_13);                // bb2[13]: scope 4 at $DIR/lifetimes.rs:+10:27: +10:28\n+          StorageLive(_16);                // bb2[14]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_17);                // bb2[15]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_18);                // bb2[16]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_19);                // bb2[17]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_20);                // bb2[18]: scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          StorageLive(_21);                // bb2[19]: scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          StorageLive(_22);                // bb2[20]: scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          _22 = &ReErased _8;              // bb2[21]: scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          _21 = &ReErased (*_22);          // bb2[22]: scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          _20 = ConstValue(ZeroSized: for<Region(BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b))> fn(&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b) }) Box<(dyn std::fmt::Display + ReErased)>) -> core::fmt::ArgumentV1<ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b) })> {core::fmt::ArgumentV1::<ReErased>::new_display::<Box<(dyn std::fmt::Display + ReErased)>>})(move _21) -> bb3; // bb2[23]: scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/lifetimes.rs:27:21: 27:22\n+                                           // + user_ty: UserType(4)\n+                                           // + literal: Const { ty: for<Region(BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b))> fn(&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b) }) Box<(dyn std::fmt::Display + ReErased)>) -> core::fmt::ArgumentV1<ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b) })> {core::fmt::ArgumentV1::<ReErased>::new_display::<Box<(dyn std::fmt::Display + ReErased)>>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb3: {\n+          StorageDead(_21);                // bb3[0]: scope 4 at $DIR/lifetimes.rs:+10:21: +10:22\n+          StorageLive(_23);                // bb3[1]: scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          StorageLive(_24);                // bb3[2]: scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          StorageLive(_25);                // bb3[3]: scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          _25 = &ReErased _6;              // bb3[4]: scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          _24 = &ReErased (*_25);          // bb3[5]: scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          _23 = ConstValue(ZeroSized: for<Region(BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b))> fn(&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b) }) u32) -> core::fmt::ArgumentV1<ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b) })> {core::fmt::ArgumentV1::<ReErased>::new_display::<u32>})(move _24) -> bb4; // bb3[6]: scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+                                           // mir::Constant\n+                                           // + span: $DIR/lifetimes.rs:27:25: 27:26\n+                                           // + user_ty: UserType(5)\n+                                           // + literal: Const { ty: for<Region(BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b))> fn(&ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b) }) u32) -> core::fmt::ArgumentV1<ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(2:49824 ~ core[0bcc]::fmt::{impl#3}::new_display::'b), 'b) })> {core::fmt::ArgumentV1::<ReErased>::new_display::<u32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          StorageDead(_24);                // bb4[0]: scope 4 at $DIR/lifetimes.rs:+10:25: +10:26\n+          _19 = [move _20, move _23];      // bb4[1]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_23);                // bb4[2]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_20);                // bb4[3]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _18 = &ReErased _19;             // bb4[4]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _17 = &ReErased (*_18);          // bb4[5]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _16 = move _17 as &ReErased [core::fmt::ArgumentV1<ReErased>] (Pointer(Unsize)); // bb4[6]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_17);                // bb4[7]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _11 = ConstValue(ZeroSized: fn(&ReErased [&ReStatic str], &ReErased [core::fmt::ArgumentV1<ReErased>]) -> Arguments<ReErased> {Arguments::<ReErased>::new_v1})(move _12, move _16) -> bb5; // bb4[8]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // + user_ty: UserType(3)\n+                                           // + literal: Const { ty: fn(&ReErased [&ReStatic str], &ReErased [core::fmt::ArgumentV1<ReErased>]) -> Arguments<ReErased> {Arguments::<ReErased>::new_v1}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_16);                // bb5[0]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_12);                // bb5[1]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _10 = ConstValue(ZeroSized: for<Region(BrNamed(DefId(1:13237 ~ std[b4ed]::io::stdio::_eprint::'_), '_))> fn(Arguments<ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(1:13237 ~ std[b4ed]::io::stdio::_eprint::'_), '_) })>) {_eprint})(move _11) -> bb6; // bb5[2]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n+                                           // + literal: Const { ty: for<Region(BrNamed(DefId(1:13237 ~ std[b4ed]::io::stdio::_eprint::'_), '_))> fn(Arguments<ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrNamed(DefId(1:13237 ~ std[b4ed]::io::stdio::_eprint::'_), '_) })>) {_eprint}, val: Value(<ZST>) }\n+      }\n+  \n+      bb6: {\n+          StorageDead(_11);                // bb6[0]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_25);                // bb6[1]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_22);                // bb6[2]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_19);                // bb6[3]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_18);                // bb6[4]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_14);                // bb6[5]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_10);                // bb6[6]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _9 = const ConstValue(ZeroSized: ()); // bb6[7]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_9);                 // bb6[8]: scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _0 = const ConstValue(ZeroSized: ()); // bb6[9]: scope 4 at $DIR/lifetimes.rs:+9:22: +11:6\n+          drop(_8) -> bb8;                 // bb6[10]: scope 3 at $DIR/lifetimes.rs:+11:5: +11:6\n+      }\n+  \n+      bb7: {\n+          _0 = const ConstValue(ZeroSized: ()); // bb7[0]: scope 3 at $DIR/lifetimes.rs:+11:6: +11:6\n+          goto -> bb9;                     // bb7[1]: scope 3 at $DIR/lifetimes.rs:+9:5: +11:6\n+      }\n+  \n+      bb8: {\n+          StorageDead(_8);                 // bb8[0]: scope 3 at $DIR/lifetimes.rs:+11:5: +11:6\n+          goto -> bb9;                     // bb8[1]: scope 3 at $DIR/lifetimes.rs:+9:5: +11:6\n+      }\n+  \n+      bb9: {\n+          StorageDead(_6);                 // bb9[0]: scope 2 at $DIR/lifetimes.rs:+12:1: +12:2\n+          _28 = discriminant(_5);          // bb9[1]: scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+          switchInt(move _28) -> [0: bb11, otherwise: bb13]; // bb9[2]: scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+      }\n+  \n+      bb10: {\n+          _27 = const ConstValue(Scalar(0x00): bool); // bb10[0]: scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+          StorageDead(_5);                 // bb10[1]: scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+-         StorageDead(_1);                 // bb10[2]: scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n+-         return;                          // bb10[3]: scope 0 at $DIR/lifetimes.rs:+12:2: +12:2\n++         StorageDead(_31);                // bb10[2]: scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n++         StorageDead(_32);                // bb10[3]: scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n++         nop;                             // bb10[4]: scope 0 at $DIR/lifetimes.rs:+12:1: +12:2\n++         return;                          // bb10[5]: scope 0 at $DIR/lifetimes.rs:+12:2: +12:2\n+      }\n+  \n+      bb11: {\n+          switchInt(_27) -> [0: bb10, otherwise: bb12]; // bb11[0]: scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+      }\n+  \n+      bb12: {\n+          drop(((_5 as Ok).0: std::boxed::Box<(dyn std::fmt::Display + ReErased)>)) -> bb10; // bb12[0]: scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+      }\n+  \n+      bb13: {\n+          drop(_5) -> bb10;                // bb13[0]: scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+      }\n+  }\n+  "}, {"sha": "bf9b57fbfbd7f532f6c74b1e023ad59f0b2244a3", "filename": "tests/mir-opt/sroa/lifetimes.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fc1a861558a49013fb6af5e4c36450a3b96ddc03/tests%2Fmir-opt%2Fsroa%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1a861558a49013fb6af5e4c36450a3b96ddc03/tests%2Fmir-opt%2Fsroa%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Flifetimes.rs?ref=fc1a861558a49013fb6af5e4c36450a3b96ddc03", "patch": "@@ -0,0 +1,37 @@\n+// unit-test: ScalarReplacementOfAggregates\n+// compile-flags: -Zverbose -Cpanic=abort\n+// no-prefer-dynamic\n+\n+trait Err {\n+    type Err;\n+}\n+\n+struct Foo<T: Err> {\n+    // Check that the `'static` lifetime is erased when creating the local for `x`,\n+    // even if we fail to normalize the type.\n+    x: Result<Box<dyn std::fmt::Display + 'static>, <T as Err>::Err>,\n+    y: u32,\n+}\n+\n+// EMIT_MIR lifetimes.foo.ScalarReplacementOfAggregates.diff\n+fn foo<T: Err>() {\n+    let foo: Foo<T> = Foo {\n+        x: Ok(Box::new(5_u32)),\n+        y: 7_u32,\n+    };\n+\n+    let x = foo.x;\n+    let y = foo.y;\n+\n+    if let Ok(x) = x {\n+        eprintln!(\"{x} {y}\");\n+    }\n+}\n+\n+impl Err for () {\n+    type Err = ();\n+}\n+\n+fn main() {\n+    foo::<()>()\n+}"}]}