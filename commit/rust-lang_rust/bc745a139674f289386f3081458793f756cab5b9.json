{"sha": "bc745a139674f289386f3081458793f756cab5b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNzQ1YTEzOTY3NGYyODkzODZmMzA4MTQ1ODc5M2Y3NTZjYWI1Yjk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T20:40:33Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T20:40:33Z"}, "message": "Resolve field types lazily\n\nI.e. not already when getting the HIR for the struct.", "tree": {"sha": "518c38ce87807c76644b512ce0213dd01e43614a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/518c38ce87807c76644b512ce0213dd01e43614a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc745a139674f289386f3081458793f756cab5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc745a139674f289386f3081458793f756cab5b9", "html_url": "https://github.com/rust-lang/rust/commit/bc745a139674f289386f3081458793f756cab5b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc745a139674f289386f3081458793f756cab5b9/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdca39706121b2d1734a94938a2372da881e10c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdca39706121b2d1734a94938a2372da881e10c6", "html_url": "https://github.com/rust-lang/rust/commit/cdca39706121b2d1734a94938a2372da881e10c6"}], "stats": {"total": 135, "additions": 76, "deletions": 59}, "files": [{"sha": "036e284bfbb0ff680ba1c5e5de6e7dd3f97b89c4", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=bc745a139674f289386f3081458793f756cab5b9", "patch": "@@ -95,6 +95,7 @@ salsa::database_storage! {\n             fn submodules() for hir::db::SubmodulesQuery;\n             fn infer() for hir::db::InferQuery;\n             fn type_for_def() for hir::db::TypeForDefQuery;\n+            fn type_for_field() for hir::db::TypeForFieldQuery;\n             fn struct_data() for hir::db::StructDataQuery;\n             fn enum_data() for hir::db::EnumDataQuery;\n         }"}, {"sha": "65c461148aa4cdbdad0cd3f1ed16e5acb79a398d", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=bc745a139674f289386f3081458793f756cab5b9", "patch": "@@ -5,8 +5,7 @@ use ra_syntax::{SmolStr, ast::{self, NameOwner, StructFlavor}};\n use crate::{\n     DefId, Cancelable,\n     db::{HirDatabase},\n-    module::Module,\n-    ty::{Ty},\n+    type_ref::TypeRef,\n };\n \n pub struct Struct {\n@@ -42,15 +41,11 @@ pub struct StructData {\n }\n \n impl StructData {\n-    pub(crate) fn new(\n-        db: &impl HirDatabase,\n-        module: &Module,\n-        struct_def: ast::StructDef,\n-    ) -> Cancelable<StructData> {\n+    pub(crate) fn new(struct_def: ast::StructDef) -> StructData {\n         let name = struct_def.name().map(|n| n.text());\n-        let variant_data = VariantData::new(db, module, struct_def.flavor())?;\n+        let variant_data = VariantData::new(struct_def.flavor());\n         let variant_data = Arc::new(variant_data);\n-        Ok(StructData { name, variant_data })\n+        StructData { name, variant_data }\n     }\n \n     pub fn name(&self) -> Option<&SmolStr> {\n@@ -87,43 +82,39 @@ pub struct EnumData {\n }\n \n impl EnumData {\n-    pub(crate) fn new(\n-        db: &impl HirDatabase,\n-        module: &Module,\n-        enum_def: ast::EnumDef,\n-    ) -> Cancelable<Self> {\n+    pub(crate) fn new(enum_def: ast::EnumDef) -> Self {\n         let name = enum_def.name().map(|n| n.text());\n         let variants = if let Some(evl) = enum_def.variant_list() {\n             evl.variants()\n                 .map(|v| {\n-                    Ok((\n+                    (\n                         v.name()\n                             .map(|n| n.text())\n                             .unwrap_or_else(|| SmolStr::new(\"[error]\")),\n-                        Arc::new(VariantData::new(db, module, v.flavor())?),\n-                    ))\n+                        Arc::new(VariantData::new(v.flavor())),\n+                    )\n                 })\n-                .collect::<Cancelable<_>>()?\n+                .collect()\n         } else {\n             Vec::new()\n         };\n-        Ok(EnumData { name, variants })\n+        EnumData { name, variants }\n     }\n }\n \n /// A single field of an enum variant or struct\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct StructField {\n     name: SmolStr,\n-    ty: Ty,\n+    type_ref: TypeRef,\n }\n \n impl StructField {\n     pub fn name(&self) -> SmolStr {\n         self.name.clone()\n     }\n-    pub fn ty(&self) -> Ty {\n-        self.ty.clone()\n+    pub fn type_ref(&self) -> &TypeRef {\n+        &self.type_ref\n     }\n }\n \n@@ -136,45 +127,41 @@ pub enum VariantData {\n }\n \n impl VariantData {\n-    pub fn new(db: &impl HirDatabase, module: &Module, flavor: StructFlavor) -> Cancelable<Self> {\n-        Ok(match flavor {\n+    pub fn new(flavor: StructFlavor) -> Self {\n+        match flavor {\n             StructFlavor::Tuple(fl) => {\n                 let fields = fl\n                     .fields()\n                     .enumerate()\n-                    .map(|(i, fd)| {\n-                        Ok(StructField {\n-                            name: SmolStr::new(i.to_string()),\n-                            ty: Ty::from_ast_opt(db, &module, fd.type_ref())?,\n-                        })\n+                    .map(|(i, fd)| StructField {\n+                        name: SmolStr::new(i.to_string()),\n+                        type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n                     })\n-                    .collect::<Cancelable<_>>()?;\n+                    .collect();\n                 VariantData::Tuple(fields)\n             }\n             StructFlavor::Named(fl) => {\n                 let fields = fl\n                     .fields()\n-                    .map(|fd| {\n-                        Ok(StructField {\n-                            name: fd\n-                                .name()\n-                                .map(|n| n.text())\n-                                .unwrap_or_else(|| SmolStr::new(\"[error]\")),\n-                            ty: Ty::from_ast_opt(db, &module, fd.type_ref())?,\n-                        })\n+                    .map(|fd| StructField {\n+                        name: fd\n+                            .name()\n+                            .map(|n| n.text())\n+                            .unwrap_or_else(|| SmolStr::new(\"[error]\")),\n+                        type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n                     })\n-                    .collect::<Cancelable<_>>()?;\n+                    .collect();\n                 VariantData::Struct(fields)\n             }\n             StructFlavor::Unit => VariantData::Unit,\n-        })\n+        }\n     }\n \n-    pub(crate) fn get_field_ty(&self, field_name: &str) -> Option<Ty> {\n+    pub(crate) fn get_field_type_ref(&self, field_name: &str) -> Option<&TypeRef> {\n         self.fields()\n             .iter()\n             .find(|f| f.name == field_name)\n-            .map(|f| f.ty.clone())\n+            .map(|f| &f.type_ref)\n     }\n \n     pub fn fields(&self) -> &[StructField] {"}, {"sha": "e7f9afa77d5ce4a0c31c4603c21365fc335e4549", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=bc745a139674f289386f3081458793f756cab5b9", "patch": "@@ -1,6 +1,7 @@\n use std::sync::Arc;\n \n use ra_syntax::{\n+    SmolStr,\n     SyntaxNode,\n     ast::FnDefNode,\n };\n@@ -52,6 +53,11 @@ pub trait HirDatabase: SyntaxDatabase\n         use fn query_definitions::type_for_def;\n     }\n \n+    fn type_for_field(def_id: DefId, field: SmolStr) -> Cancelable<Ty> {\n+        type TypeForFieldQuery;\n+        use fn query_definitions::type_for_field;\n+    }\n+\n     fn file_items(file_id: FileId) -> Arc<SourceFileItems> {\n         type SourceFileItemsQuery;\n         use fn query_definitions::file_items;"}, {"sha": "f6882cb77198581660b452505f4d64f23c8f1e38", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=bc745a139674f289386f3081458793f756cab5b9", "patch": "@@ -193,6 +193,7 @@ salsa::database_storage! {\n             fn submodules() for db::SubmodulesQuery;\n             fn infer() for db::InferQuery;\n             fn type_for_def() for db::TypeForDefQuery;\n+            fn type_for_field() for db::TypeForFieldQuery;\n             fn struct_data() for db::StructDataQuery;\n             fn enum_data() for db::EnumDataQuery;\n         }"}, {"sha": "4a7958a1224ef7c16e1b2362fd7ebe1ff42e082f", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=bc745a139674f289386f3081458793f756cab5b9", "patch": "@@ -46,18 +46,21 @@ pub(super) fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<T\n     ty::type_for_def(db, def_id)\n }\n \n+pub(super) fn type_for_field(\n+    db: &impl HirDatabase,\n+    def_id: DefId,\n+    field: SmolStr,\n+) -> Cancelable<Ty> {\n+    ty::type_for_field(db, def_id, field)\n+}\n+\n pub(super) fn struct_data(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<StructData>> {\n     let def_loc = def_id.loc(db);\n     assert!(def_loc.kind == DefKind::Struct);\n     let syntax = db.file_item(def_loc.source_item_id);\n     let struct_def =\n         ast::StructDef::cast(syntax.borrowed()).expect(\"struct def should point to StructDef node\");\n-    let module = def_id.module(db)?;\n-    Ok(Arc::new(StructData::new(\n-        db,\n-        &module,\n-        struct_def.borrowed(),\n-    )?))\n+    Ok(Arc::new(StructData::new(struct_def.borrowed())))\n }\n \n pub(super) fn enum_data(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<EnumData>> {\n@@ -66,8 +69,7 @@ pub(super) fn enum_data(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<\n     let syntax = db.file_item(def_loc.source_item_id);\n     let enum_def =\n         ast::EnumDef::cast(syntax.borrowed()).expect(\"enum def should point to EnumDef node\");\n-    let module = def_id.module(db)?;\n-    Ok(Arc::new(EnumData::new(db, &module, enum_def.borrowed())?))\n+    Ok(Arc::new(EnumData::new(enum_def.borrowed())))\n }\n \n pub(super) fn file_items(db: &impl HirDatabase, file_id: FileId) -> Arc<SourceFileItems> {"}, {"sha": "67b523c2cc507d9b8392790a7b87203515847711", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=bc745a139674f289386f3081458793f756cab5b9", "patch": "@@ -309,6 +309,33 @@ pub fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Ty> {\n     }\n }\n \n+pub(super) fn type_for_field(\n+    db: &impl HirDatabase,\n+    def_id: DefId,\n+    field: SmolStr,\n+) -> Cancelable<Ty> {\n+    let def = def_id.resolve(db)?;\n+    let variant_data = match def {\n+        Def::Struct(s) => {\n+            let variant_data = s.variant_data(db)?;\n+            variant_data\n+        }\n+        // TODO: unions\n+        // TODO: enum variants\n+        _ => panic!(\n+            \"trying to get type for field in non-struct/variant {:?}\",\n+            def_id\n+        ),\n+    };\n+    let module = def_id.module(db)?;\n+    let type_ref = if let Some(tr) = variant_data.get_field_type_ref(&field) {\n+        tr\n+    } else {\n+        return Ok(Ty::Unknown);\n+    };\n+    Ty::from_hir(db, &module, &type_ref)\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct InferenceResult {\n     type_of: FxHashMap<LocalSyntaxPtr, Ty>,\n@@ -540,14 +567,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             i.and_then(|i| fields.get(i).cloned())\n                                 .unwrap_or(Ty::Unknown)\n                         }\n-                        Ty::Adt { def_id, .. } => {\n-                            let field_ty = match def_id.resolve(self.db)? {\n-                                Def::Struct(s) => s.variant_data(self.db)?.get_field_ty(&text),\n-                                // TODO unions\n-                                _ => None,\n-                            };\n-                            field_ty.unwrap_or(Ty::Unknown)\n-                        }\n+                        Ty::Adt { def_id, .. } => self.db.type_for_field(def_id, text)?,\n                         _ => Ty::Unknown,\n                     }\n                 } else {"}, {"sha": "b36bb35d89414da38b2d83c051d6be82e570541f", "filename": "crates/ra_hir/src/type_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc745a139674f289386f3081458793f756cab5b9/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftype_ref.rs?ref=bc745a139674f289386f3081458793f756cab5b9", "patch": "@@ -100,7 +100,7 @@ impl TypeRef {\n         }\n     }\n \n-    fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n+    pub(crate) fn from_ast_opt(node: Option<ast::TypeRef>) -> Self {\n         if let Some(node) = node {\n             TypeRef::from_ast(node)\n         } else {"}]}