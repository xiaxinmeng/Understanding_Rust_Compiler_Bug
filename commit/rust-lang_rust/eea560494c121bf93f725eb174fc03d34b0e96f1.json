{"sha": "eea560494c121bf93f725eb174fc03d34b0e96f1", "node_id": "C_kwDOAAsO6NoAKGVlYTU2MDQ5NGMxMjFiZjkzZjcyNWViMTc0ZmMwM2QzNGIwZTk2ZjE", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-05T09:05:04Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-05T09:49:01Z"}, "message": "oops! new unsoundness\n\nBless tests and show an introduced unsoundness related to\nexits<'a> { forall<'b> { 'a == 'b } }.\nWe now resolve the var ?a in U0 to the placeholder !b in U1.", "tree": {"sha": "63a9c6653a843a998756f03f384302ce3488a6c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a9c6653a843a998756f03f384302ce3488a6c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eea560494c121bf93f725eb174fc03d34b0e96f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eea560494c121bf93f725eb174fc03d34b0e96f1", "html_url": "https://github.com/rust-lang/rust/commit/eea560494c121bf93f725eb174fc03d34b0e96f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eea560494c121bf93f725eb174fc03d34b0e96f1/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79dca7b7ba7ac1c9292fadff197204169ae43630", "url": "https://api.github.com/repos/rust-lang/rust/commits/79dca7b7ba7ac1c9292fadff197204169ae43630", "html_url": "https://github.com/rust-lang/rust/commit/79dca7b7ba7ac1c9292fadff197204169ae43630"}], "stats": {"total": 62, "additions": 21, "deletions": 41}, "files": [{"sha": "e7c3bdbbf359841a4e84d1b12cc36abc551527d4", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-invariant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.rs?ref=eea560494c121bf93f725eb174fc03d34b0e96f1", "patch": "@@ -2,6 +2,9 @@\n //\n // In particular, we test this pattern in trait solving, where it is not connected\n // to any part of the source code.\n+//\n+// check-pass\n+// Oops!\n \n use std::cell::Cell;\n \n@@ -25,5 +28,5 @@ fn main() {\n     //     yielding `fn(&!b u32)`, in a fresh universe U1\n     //   - So we get `?a = !b` but the universe U0 assigned to `?a` cannot name `!b`.\n \n-    foo::<()>(); //~ ERROR implementation of `Trait` is not general enough\n+    foo::<()>();\n }"}, {"sha": "cb2ce8a4116aa887b5621130f33e9f5e1bbd391d", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-invariant.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79dca7b7ba7ac1c9292fadff197204169ae43630/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79dca7b7ba7ac1c9292fadff197204169ae43630/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr?ref=79dca7b7ba7ac1c9292fadff197204169ae43630", "patch": "@@ -1,11 +0,0 @@\n-error: implementation of `Trait` is not general enough\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n-   |\n-LL |     foo::<()>();\n-   |     ^^^^^^^^^^^ implementation of `Trait` is not general enough\n-   |\n-   = note: `()` must implement `Trait<for<'b> fn(Cell<&'b u32>)>`\n-   = note: ...but it actually implements `Trait<fn(Cell<&'0 u32>)>`, for some specific lifetime `'0`\n-\n-error: aborting due to previous error\n-"}, {"sha": "b4312091edb279f9a987b73efe3e97634be548aa", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-just-for-static.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr?ref=eea560494c121bf93f725eb174fc03d34b0e96f1", "patch": "@@ -14,12 +14,6 @@ LL | fn give_some<'a>() {\n    |              -- lifetime `'a` defined here\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n-  --> $DIR/hrtb-just-for-static.rs:9:15\n-   |\n-LL |     where T : for<'a> Foo<&'a isize>\n-   |               ^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5"}, {"sha": "2f3c90dcece60334ded0c9cadfc8d79ef5c4c96b", "filename": "tests/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=eea560494c121bf93f725eb174fc03d34b0e96f1", "patch": "@@ -15,9 +15,9 @@ impl<'a> Y for C<'a> {\n struct C<'a>(&'a ());\n struct X<T: Y>(T::P);\n \n-impl<T: NotAuto> NotAuto for Box<T> {} //~ NOTE: required\n+impl<T: NotAuto> NotAuto for Box<T> {}\n+impl<T: Y> NotAuto for X<T> where T::P: NotAuto {} //~ NOTE: required\n //~^ NOTE unsatisfied trait bound introduced here\n-impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n impl<'a> NotAuto for C<'a> {}\n \n fn is_send<S: NotAuto>() {}\n@@ -28,6 +28,4 @@ fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();\n     //~^ ERROR overflow evaluating\n-    //~| 3 redundant requirements hidden\n-    //~| required for\n }"}, {"sha": "7ab2864a8cfdc38dea7da6bb9e7078027418f1c0", "filename": "tests/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=eea560494c121bf93f725eb174fc03d34b0e96f1", "patch": "@@ -1,18 +1,14 @@\n-error[E0275]: overflow evaluating the requirement `X<C<'_>>: NotAuto`\n+error[E0275]: overflow evaluating the requirement `Box<X<C<'static>>>: NotAuto`\n   --> $DIR/lifetime.rs:29:5\n    |\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required for `Box<X<C<'_>>>` to implement `NotAuto`\n-  --> $DIR/lifetime.rs:18:18\n+note: required for `X<C<'static>>` to implement `NotAuto`\n+  --> $DIR/lifetime.rs:19:12\n    |\n-LL | impl<T: NotAuto> NotAuto for Box<T> {}\n-   |         -------  ^^^^^^^     ^^^^^^\n-   |         |\n-   |         unsatisfied trait bound introduced here\n-   = note: 3 redundant requirements hidden\n-   = note: required for `X<C<'static>>` to implement `NotAuto`\n+LL | impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n+   |            ^^^^^^^     ^^^^             ------- unsatisfied trait bound introduced here\n note: required by a bound in `is_send`\n   --> $DIR/lifetime.rs:23:15\n    |"}, {"sha": "3855f2c35c1fb5857e1eb2459291529294eb0dc2", "filename": "tests/ui/wf/hir-wf-check-erase-regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.rs?ref=eea560494c121bf93f725eb174fc03d34b0e96f1", "patch": "@@ -4,10 +4,10 @@\n pub struct Table<T, const N: usize>([Option<T>; N]);\n \n impl<'a, T, const N: usize> IntoIterator for &'a Table<T, N> {\n-    type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>; //~ ERROR `&T` is not an iterator\n+    type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>; //~ ERROR `&'a T` is not an iterator\n     type Item = &'a T;\n \n-    fn into_iter(self) -> Self::IntoIter { //~ ERROR `&T` is not an iterator\n+    fn into_iter(self) -> Self::IntoIter { //~ ERROR `&'a T` is not an iterator\n         unimplemented!()\n     }\n }"}, {"sha": "2843983c716a6322eca4b6851ac3e5cd459c1988", "filename": "tests/ui/wf/hir-wf-check-erase-regions.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea560494c121bf93f725eb174fc03d34b0e96f1/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr?ref=eea560494c121bf93f725eb174fc03d34b0e96f1", "patch": "@@ -1,24 +1,24 @@\n-error[E0277]: `&T` is not an iterator\n+error[E0277]: `&'a T` is not an iterator\n   --> $DIR/hir-wf-check-erase-regions.rs:7:21\n    |\n LL |     type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&T` is not an iterator\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&'a T` is not an iterator\n    |\n-   = help: the trait `Iterator` is not implemented for `&T`\n+   = help: the trait `Iterator` is not implemented for `&'a T`\n    = help: the trait `Iterator` is implemented for `&mut I`\n-   = note: required for `&T` to implement `IntoIterator`\n+   = note: required for `&'a T` to implement `IntoIterator`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n \n-error[E0277]: `&T` is not an iterator\n+error[E0277]: `&'a T` is not an iterator\n   --> $DIR/hir-wf-check-erase-regions.rs:10:27\n    |\n LL |     fn into_iter(self) -> Self::IntoIter {\n-   |                           ^^^^^^^^^^^^^^ `&T` is not an iterator\n+   |                           ^^^^^^^^^^^^^^ `&'a T` is not an iterator\n    |\n-   = help: the trait `Iterator` is not implemented for `&T`\n+   = help: the trait `Iterator` is not implemented for `&'a T`\n    = help: the trait `Iterator` is implemented for `&mut I`\n-   = note: required for `&T` to implement `IntoIterator`\n+   = note: required for `&'a T` to implement `IntoIterator`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n "}]}