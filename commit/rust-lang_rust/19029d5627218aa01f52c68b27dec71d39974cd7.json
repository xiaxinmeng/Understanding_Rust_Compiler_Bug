{"sha": "19029d5627218aa01f52c68b27dec71d39974cd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDI5ZDU2MjcyMThhYTAxZjUyYzY4YjI3ZGVjNzFkMzk5NzRjZDc=", "commit": {"author": {"name": "Pirh", "email": "pirh.badger@gmail.com", "date": "2017-10-08T16:12:14Z"}, "committer": {"name": "Pirh", "email": "pirh.badger@gmail.com", "date": "2017-10-08T16:12:14Z"}, "message": "Add links and examples for std::process::Stdio\n\nAs per #29370", "tree": {"sha": "9b004285b9297c334cb4f85bfa02225901c96707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b004285b9297c334cb4f85bfa02225901c96707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19029d5627218aa01f52c68b27dec71d39974cd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19029d5627218aa01f52c68b27dec71d39974cd7", "html_url": "https://github.com/rust-lang/rust/commit/19029d5627218aa01f52c68b27dec71d39974cd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19029d5627218aa01f52c68b27dec71d39974cd7/comments", "author": null, "committer": null, "parents": [{"sha": "3ed8b698421291f5057059da885cd670d76a47e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed8b698421291f5057059da885cd670d76a47e9", "html_url": "https://github.com/rust-lang/rust/commit/3ed8b698421291f5057059da885cd670d76a47e9"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "2b3f49ee3f71d7a24dfd24532bd2e96ba5608c43", "filename": "src/libstd/process.rs", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/19029d5627218aa01f52c68b27dec71d39974cd7/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19029d5627218aa01f52c68b27dec71d39974cd7/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=19029d5627218aa01f52c68b27dec71d39974cd7", "patch": "@@ -742,21 +742,128 @@ impl fmt::Debug for Output {\n     }\n }\n \n-/// Describes what to do with a standard I/O stream for a child process.\n+/// Describes what to do with a standard I/O stream for a child process when\n+/// passed to the [`stdin`], [`stdout`], and [`stderr`] methods of [`Command`].\n+///\n+/// [`stdin`]: ./struct.Command.html#method.stdin\n+/// [`stdout`]: ./struct.Command.html#method.stdout\n+/// [`stderr`]: ./struct.Command.html#method.stderr\n+/// [`Command`]: ./struct.Command.html\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Stdio(imp::Stdio);\n \n impl Stdio {\n     /// A new pipe should be arranged to connect the parent and child processes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// With stdout:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::piped())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"Hello, world!\\n\");\n+    /// // Nothing echoed to console\n+    /// ```\n+    ///\n+    /// With stdin:\n+    ///\n+    /// ```no_run\n+    /// use std::io::Write;\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let mut child = Command::new(\"rev\")\n+    ///     .stdin(Stdio::piped())\n+    ///     .stdout(Stdio::piped())\n+    ///     .spawn()\n+    ///     .expect(\"Failed to spawn child process\");\n+    /// \n+    /// {\n+    ///     let mut stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+    ///     stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n+    /// }\n+    /// \n+    /// let output = child.wait_with_output().expect(\"Failed to read stdout\");\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\\n\");\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn piped() -> Stdio { Stdio(imp::Stdio::MakePipe) }\n \n     /// The child inherits from the corresponding parent descriptor.\n+    ///\n+    /// # Examples\n+    ///\n+    /// With stdout:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::inherit())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n+    /// // \"Hello, world!\" echoed to console\n+    /// ```\n+    ///\n+    /// With stdin:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///  \n+    /// let output = Command::new(\"rev\")\n+    ///     .stdin(Stdio::inherit())\n+    ///     .stdout(Stdio::piped())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    /// \n+    /// println!(\"You piped in the reverse of: {}\", String::from_utf8_lossy(&output.stdout));\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn inherit() -> Stdio { Stdio(imp::Stdio::Inherit) }\n \n     /// This stream will be ignored. This is the equivalent of attaching the\n     /// stream to `/dev/null`\n+    ///\n+    /// # Examples\n+    ///\n+    /// With stdout:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    ///\n+    /// let output = Command::new(\"echo\")\n+    ///     .arg(\"Hello, world!\")\n+    ///     .stdout(Stdio::null())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///\n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n+    /// // Nothing echoed to console\n+    /// ```\n+    ///\n+    /// With stdin:\n+    ///\n+    /// ```no_run\n+    /// use std::process::{Command, Stdio};\n+    /// \n+    /// let output = Command::new(\"rev\")\n+    ///     .stdin(Stdio::null())\n+    ///     .stdout(Stdio::piped())\n+    ///     .output()\n+    ///     .expect(\"Failed to execute command\");\n+    ///  \n+    /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"\");\n+    /// // Ignores any piped-in input\n+    /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn null() -> Stdio { Stdio(imp::Stdio::Null) }\n }"}]}