{"sha": "353829fc4ef84b92b2fd3c7bda7cf267208fba7d", "node_id": "C_kwDOAAsO6NoAKDM1MzgyOWZjNGVmODRiOTJiMmZkM2M3YmRhN2NmMjY3MjA4ZmJhN2Q", "commit": {"author": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-24T14:41:07Z"}, "committer": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-24T15:04:35Z"}, "message": "highlight: trait path", "tree": {"sha": "85b066a39b51ddf45eaf857e23e4ec173bd1d25e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85b066a39b51ddf45eaf857e23e4ec173bd1d25e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/353829fc4ef84b92b2fd3c7bda7cf267208fba7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/353829fc4ef84b92b2fd3c7bda7cf267208fba7d", "html_url": "https://github.com/rust-lang/rust/commit/353829fc4ef84b92b2fd3c7bda7cf267208fba7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/353829fc4ef84b92b2fd3c7bda7cf267208fba7d/comments", "author": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea8d5806d8adb8d717247f157651d4ed5ab8d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea8d5806d8adb8d717247f157651d4ed5ab8d33", "html_url": "https://github.com/rust-lang/rust/commit/9ea8d5806d8adb8d717247f157651d4ed5ab8d33"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "61cb2f04792713d1027633dd9f5f1c7c5f1782d4", "filename": "crates/ide-assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/353829fc4ef84b92b2fd3c7bda7cf267208fba7d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353829fc4ef84b92b2fd3c7bda7cf267208fba7d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=353829fc4ef84b92b2fd3c7bda7cf267208fba7d", "patch": "@@ -69,17 +69,10 @@ fn item_for_path_search(db: &dyn HirDatabase, item: ItemInNs) -> Option<ItemInNs\n         ItemInNs::Types(_) | ItemInNs::Values(_) => match item_as_assoc(db, item) {\n             Some(assoc_item) => match assoc_item.container(db) {\n                 AssocItemContainer::Trait(trait_) => ItemInNs::from(ModuleDef::from(trait_)),\n-                AssocItemContainer::Impl(impl_) => {\n-                    let impled_trait = if matches!(assoc_item, AssocItem::Function(..)) {\n-                        impl_.trait_(db)\n-                    } else {\n-                        None\n-                    };\n-                    match impled_trait {\n-                        None => ItemInNs::from(ModuleDef::from(impl_.self_ty(db).as_adt()?)),\n-                        Some(t) => ItemInNs::from(ModuleDef::from(t)),\n-                    }\n-                }\n+                AssocItemContainer::Impl(impl_) => match impl_.trait_(db) {\n+                    None => ItemInNs::from(ModuleDef::from(impl_.self_ty(db).as_adt()?)),\n+                    Some(trait_) => ItemInNs::from(ModuleDef::from(trait_)),\n+                },\n             },\n             None => item,\n         },"}, {"sha": "121ddbc24b698c9e89e6a1f20e4bf7a3244ac773", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353829fc4ef84b92b2fd3c7bda7cf267208fba7d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353829fc4ef84b92b2fd3c7bda7cf267208fba7d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=353829fc4ef84b92b2fd3c7bda7cf267208fba7d", "patch": "@@ -510,7 +510,11 @@ fn highlight_method_call(\n     if func.is_async(sema.db) {\n         h |= HlMod::Async;\n     }\n-    if func.as_assoc_item(sema.db).and_then(|it| it.containing_trait(sema.db)).is_some() {\n+    if func\n+        .as_assoc_item(sema.db)\n+        .and_then(|it| it.containing_trait_or_trait_impl(sema.db))\n+        .is_some()\n+    {\n         h |= HlMod::Trait;\n     }\n "}, {"sha": "0716bae7513b9550553f6735b20bfc53cbc1dce7", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/353829fc4ef84b92b2fd3c7bda7cf267208fba7d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/353829fc4ef84b92b2fd3c7bda7cf267208fba7d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=353829fc4ef84b92b2fd3c7bda7cf267208fba7d", "patch": "@@ -121,6 +121,6 @@\n         <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"brace\">{</span> <span class=\"field\">a</span><span class=\"colon\">:</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration reference\">_a</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe auto ref of packed field</span>\n-        <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"operator\">.</span><span class=\"function associated reference unsafe\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"operator\">.</span><span class=\"function associated reference trait unsafe\">calls_autoref</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}]}