{"sha": "f63206ed2f37c70273bc75822a538c2c22a017f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MzIwNmVkMmYzN2M3MDI3M2JjNzU4MjJhNTM4YzJjMjJhMDE3ZjE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-05-10T05:41:57Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-05-10T05:41:57Z"}, "message": "Handle discriminant_value intrinsic.", "tree": {"sha": "132be19e58259eeed78bd3d70764729a0a3976f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132be19e58259eeed78bd3d70764729a0a3976f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f63206ed2f37c70273bc75822a538c2c22a017f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f63206ed2f37c70273bc75822a538c2c22a017f1", "html_url": "https://github.com/rust-lang/rust/commit/f63206ed2f37c70273bc75822a538c2c22a017f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f63206ed2f37c70273bc75822a538c2c22a017f1/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d325034093a336df20f22f7edb3df9ef83cac47", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d325034093a336df20f22f7edb3df9ef83cac47", "html_url": "https://github.com/rust-lang/rust/commit/2d325034093a336df20f22f7edb3df9ef83cac47"}], "stats": {"total": 121, "additions": 64, "deletions": 57}, "files": [{"sha": "9d8a9e6110bf2e0e200307b0babeb4c4967c9f45", "filename": "src/interpreter.rs", "status": "modified", "additions": 58, "deletions": 42, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f63206ed2f37c70273bc75822a538c2c22a017f1/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63206ed2f37c70273bc75822a538c2c22a017f1/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=f63206ed2f37c70273bc75822a538c2c22a017f1", "patch": "@@ -297,35 +297,14 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n \n             Switch { ref discr, ref targets, adt_def } => {\n                 let adt_ptr = self.eval_lvalue(discr)?.to_ptr();\n-                let adt_layout = self.type_layout(self.lvalue_ty(discr));\n-\n-                 match *adt_layout {\n-                    Layout::General { discr, .. } | Layout::CEnum { discr, .. } => {\n-                        let discr_size = discr.size().bytes();\n-                        let discr_val = self.memory.read_uint(adt_ptr, discr_size as usize)?;\n-\n-                        let matching = adt_def.variants.iter()\n-                            .position(|v| discr_val == v.disr_val.to_u64_unchecked());\n-\n-                        match matching {\n-                            Some(i) => TerminatorTarget::Block(targets[i]),\n-                            None => return Err(EvalError::InvalidDiscriminant),\n-                        }\n-                    }\n-\n-                    Layout::RawNullablePointer { nndiscr, .. } => {\n-                        let is_null = match self.memory.read_usize(adt_ptr) {\n-                            Ok(0) => true,\n-                            Ok(_) | Err(EvalError::ReadPointerAsBytes) => false,\n-                            Err(e) => return Err(e),\n-                        };\n-\n-                        assert!(nndiscr == 0 || nndiscr == 1);\n-                        let target = if is_null { 1 - nndiscr } else { nndiscr };\n-                        TerminatorTarget::Block(targets[target as usize])\n-                    }\n-\n-                    _ => panic!(\"attempted to switch on non-aggregate type\"),\n+                let adt_ty = self.lvalue_ty(discr);\n+                let discr_val = self.read_discriminant_value(adt_ptr, adt_ty)?;\n+                let matching = adt_def.variants.iter()\n+                    .position(|v| discr_val == v.disr_val.to_u64_unchecked());\n+\n+                match matching {\n+                    Some(i) => TerminatorTarget::Block(targets[i]),\n+                    None => return Err(EvalError::InvalidDiscriminant),\n                 }\n             }\n \n@@ -477,6 +456,36 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         Ok(())\n     }\n \n+    fn read_discriminant_value(&self, adt_ptr: Pointer, adt_ty: ty::Ty<'tcx>) -> EvalResult<u64> {\n+        use rustc::ty::layout::Layout::*;\n+        let adt_layout = self.type_layout(adt_ty);\n+\n+        let discr_val = match *adt_layout {\n+            General { discr, .. } | CEnum { discr, .. } => {\n+                let discr_size = discr.size().bytes();\n+                self.memory.read_uint(adt_ptr, discr_size as usize)?\n+            }\n+\n+            RawNullablePointer { nndiscr, .. } => {\n+                let not_null = match self.memory.read_usize(adt_ptr) {\n+                    Ok(0) => false,\n+                    Ok(_) | Err(EvalError::ReadPointerAsBytes) => true,\n+                    Err(e) => return Err(e),\n+                };\n+                assert!(nndiscr == 0 || nndiscr == 1);\n+                if not_null { nndiscr } else { 1 - nndiscr }\n+            }\n+\n+            StructWrappedNullablePointer { .. } => unimplemented!(),\n+\n+            // The discriminant_value intrinsic returns 0 for non-sum types.\n+            Array { .. } | FatPointer { .. } | Scalar { .. } | Univariant { .. } |\n+            Vector { .. } => 0,\n+        };\n+\n+        Ok(discr_val)\n+    }\n+\n     fn call_intrinsic(\n         &mut self,\n         name: &str,\n@@ -491,6 +500,19 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         let args = args_res?;\n \n         match name {\n+            // FIXME(solson): Handle different integer types correctly.\n+            \"add_with_overflow\" => {\n+                let ty = *substs.types.get(subst::FnSpace, 0);\n+                let size = self.type_size(ty);\n+                let left = self.memory.read_int(args[0], size)?;\n+                let right = self.memory.read_int(args[1], size)?;\n+                let (n, overflowed) = unsafe {\n+                    ::std::intrinsics::add_with_overflow::<i64>(left, right)\n+                };\n+                self.memory.write_int(dest, n, size)?;\n+                self.memory.write_bool(dest.offset(size as isize), overflowed)?;\n+            }\n+\n             \"assume\" => {}\n \n             \"copy_nonoverlapping\" => {\n@@ -502,6 +524,13 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                 self.memory.copy(src, dest, count as usize * elem_size)?;\n             }\n \n+            \"discriminant_value\" => {\n+                let ty = *substs.types.get(subst::FnSpace, 0);\n+                let adt_ptr = self.memory.read_ptr(args[0])?;\n+                let discr_val = self.read_discriminant_value(adt_ptr, ty)?;\n+                self.memory.write_uint(dest, discr_val, dest_size)?;\n+            }\n+\n             \"forget\" => {\n                 let arg_ty = *substs.types.get(subst::FnSpace, 0);\n                 let arg_size = self.type_size(arg_ty);\n@@ -520,19 +549,6 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                 self.move_(args[1], ptr, ty)?;\n             }\n \n-            // FIXME(solson): Handle different integer types correctly.\n-            \"add_with_overflow\" => {\n-                let ty = *substs.types.get(subst::FnSpace, 0);\n-                let size = self.type_size(ty);\n-                let left = self.memory.read_int(args[0], size)?;\n-                let right = self.memory.read_int(args[1], size)?;\n-                let (n, overflowed) = unsafe {\n-                    ::std::intrinsics::add_with_overflow::<i64>(left, right)\n-                };\n-                self.memory.write_int(dest, n, size)?;\n-                self.memory.write_bool(dest.offset(size as isize), overflowed)?;\n-            }\n-\n             // FIXME(solson): Handle different integer types correctly.\n             \"mul_with_overflow\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);"}, {"sha": "f0a487e20df727504c041683afd918546e29eb30", "filename": "tests/compile-fail/bugs/discriminant_value.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d325034093a336df20f22f7edb3df9ef83cac47/tests%2Fcompile-fail%2Fbugs%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d325034093a336df20f22f7edb3df9ef83cac47/tests%2Fcompile-fail%2Fbugs%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbugs%2Fdiscriminant_value.rs?ref=2d325034093a336df20f22f7edb3df9ef83cac47", "patch": "@@ -1,9 +0,0 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-// error-pattern:can't handle intrinsic: discriminant_value\n-\n-#[miri_run]\n-fn main() {\n-    assert_eq!(None::<i32>, None);\n-}"}, {"sha": "9b7ddb43b7c78242b033082e1137497e2d637c45", "filename": "tests/run-pass/sums.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f63206ed2f37c70273bc75822a538c2c22a017f1/tests%2Frun-pass%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63206ed2f37c70273bc75822a538c2c22a017f1/tests%2Frun-pass%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsums.rs?ref=f63206ed2f37c70273bc75822a538c2c22a017f1", "patch": "@@ -57,12 +57,12 @@ fn two_nones() -> (Option<i16>, Option<i16>) {\n \n #[miri_run]\n fn main() {\n-    //assert_eq!(two_nones(), (None, None));\n+    assert_eq!(two_nones(), (None, None));\n     assert_eq!(match_opt_some(), 13);\n     assert_eq!(match_opt_none(), 42);\n-    //assert_eq!(return_some(), Some(42));\n-    //assert_eq!(return_none(), None);\n-    //assert_eq!(return_false(), MyBool::False);\n-    //assert_eq!(return_true(), MyBool::True);\n-    //assert_eq!(return_unit(), Unit::Unit);\n+    assert_eq!(return_some(), Some(42));\n+    assert_eq!(return_none(), None);\n+    assert_eq!(return_false(), MyBool::False(()));\n+    assert_eq!(return_true(), MyBool::True(()));\n+    assert_eq!(return_unit(), Unit::Unit(()));\n }"}]}