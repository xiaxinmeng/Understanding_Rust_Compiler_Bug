{"sha": "179719d45023e549a62ec7a584d554408c6d241d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OTcxOWQ0NTAyM2U1NDlhNjJlYzdhNTg0ZDU1NDQwOGM2ZDI0MWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-07T01:39:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:54:34Z"}, "message": "rustdoc: Allowing specifying attrs for doctests\n\nThis adds support in rustdoc to blanket apply crate attributes to all doc tests\nfor a crate at once. The syntax for doing this is:\n\n    #![doc(test(attr(...)))]\n\nEach meta item in `...` will be applied to each doctest as a crate attribute.\n\ncc #18199", "tree": {"sha": "d63e2ae397eecbdd30f86936c8ca0bb6f9eb86e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63e2ae397eecbdd30f86936c8ca0bb6f9eb86e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/179719d45023e549a62ec7a584d554408c6d241d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/179719d45023e549a62ec7a584d554408c6d241d", "html_url": "https://github.com/rust-lang/rust/commit/179719d45023e549a62ec7a584d554408c6d241d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/179719d45023e549a62ec7a584d554408c6d241d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "641bca06c82e2fa744e7b14bc45cfa501baf57e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/641bca06c82e2fa744e7b14bc45cfa501baf57e6", "html_url": "https://github.com/rust-lang/rust/commit/641bca06c82e2fa744e7b14bc45cfa501baf57e6"}], "stats": {"total": 122, "additions": 78, "deletions": 44}, "files": [{"sha": "002c6d7460bf2cb33ffbc2ad939ff29c20269312", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/179719d45023e549a62ec7a584d554408c6d241d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179719d45023e549a62ec7a584d554408c6d241d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=179719d45023e549a62ec7a584d554408c6d241d", "patch": "@@ -199,7 +199,8 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n             module: Some(module),\n             externs: externs,\n             primitives: primitives,\n-            external_traits: cx.external_traits.borrow_mut().take().unwrap(),\n+            external_traits: cx.external_traits.borrow_mut().take()\n+                               .unwrap_or(HashMap::new()),\n         }\n     }\n }"}, {"sha": "215f83ff87e5a0110621e13a8311e1cb8db27e03", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/179719d45023e549a62ec7a584d554408c6d241d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179719d45023e549a62ec7a584d554408c6d241d/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=179719d45023e549a62ec7a584d554408c6d241d", "patch": "@@ -29,9 +29,10 @@\n \n use libc;\n use std::ascii::AsciiExt;\n-use std::ffi::CString;\n use std::cell::RefCell;\n use std::collections::HashMap;\n+use std::default::Default;\n+use std::ffi::CString;\n use std::fmt;\n use std::slice;\n use std::str;\n@@ -244,7 +245,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                         stripped_filtered_line(l).unwrap_or(l)\n                     }).collect::<Vec<&str>>().connect(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n-                    let test = test::maketest(&test, krate, false, false, true);\n+                    let test = test::maketest(&test, krate, false,\n+                                              &Default::default());\n                     s.push_str(&format!(\"<span class='rusttest'>{}</span>\", Escape(&test)));\n                 });\n                 s.push_str(&highlight::highlight(&text,"}, {"sha": "8c75364d941179eebb2ec24a2aa747fb9198f044", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/179719d45023e549a62ec7a584d554408c6d241d/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179719d45023e549a62ec7a584d554408c6d241d/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=179719d45023e549a62ec7a584d554408c6d241d", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::default::Default;\n use std::fs::File;\n-use std::io;\n use std::io::prelude::*;\n+use std::io;\n use std::path::{PathBuf, Path};\n \n use core;\n@@ -23,7 +24,7 @@ use externalfiles::ExternalHtml;\n use html::escape::Escape;\n use html::markdown;\n use html::markdown::{Markdown, MarkdownWithToc, find_testable_code, reset_headers};\n-use test::Collector;\n+use test::{TestOptions, Collector};\n \n /// Separate any lines at the start of the file that begin with `%`.\n fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n@@ -143,7 +144,10 @@ pub fn test(input: &str, libs: SearchPaths, externs: core::Externs,\n             mut test_args: Vec<String>) -> isize {\n     let input_str = load_or_return!(input, 1, 2);\n \n-    let mut collector = Collector::new(input.to_string(), libs, externs, true, false);\n+    let mut opts = TestOptions::default();\n+    opts.no_crate_inject = true;\n+    let mut collector = Collector::new(input.to_string(), libs, externs,\n+                                       true, opts);\n     find_testable_code(&input_str, &mut collector);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);"}, {"sha": "ffb2bb12540d87c26188e4f84d4540d348f135f9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/179719d45023e549a62ec7a584d554408c6d241d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179719d45023e549a62ec7a584d554408c6d241d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=179719d45023e549a62ec7a584d554408c6d241d", "patch": "@@ -38,6 +38,12 @@ use html::markdown;\n use passes;\n use visit_ast::RustdocVisitor;\n \n+#[derive(Clone, Default)]\n+pub struct TestOptions {\n+    pub no_crate_inject: bool,\n+    pub attrs: Vec<String>,\n+}\n+\n pub fn run(input: &str,\n            cfgs: Vec<String>,\n            libs: SearchPaths,\n@@ -75,7 +81,7 @@ pub fn run(input: &str,\n                                                      \"rustdoc-test\", None)\n         .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n-    let inject_crate = should_inject_crate(&krate);\n+    let opts = scrape_test_config(&krate);\n \n     let ctx = core::DocContext {\n         krate: &krate,\n@@ -102,7 +108,7 @@ pub fn run(input: &str,\n                                        libs,\n                                        externs,\n                                        false,\n-                                       inject_crate);\n+                                       opts);\n     collector.fold_crate(krate);\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n@@ -113,41 +119,44 @@ pub fn run(input: &str,\n }\n \n // Look for #![doc(test(no_crate_inject))], used by crates in the std facade\n-fn should_inject_crate(krate: &::syntax::ast::Crate) -> bool {\n+fn scrape_test_config(krate: &::syntax::ast::Crate) -> TestOptions {\n     use syntax::attr::AttrMetaMethods;\n+    use syntax::print::pprust;\n \n-    let mut inject_crate = true;\n-\n-    for attr in &krate.attrs {\n-        if attr.check_name(\"doc\") {\n-            for list in attr.meta_item_list().into_iter() {\n-                for attr in list {\n-                    if attr.check_name(\"test\") {\n-                        for list in attr.meta_item_list().into_iter() {\n-                            for attr in list {\n-                                if attr.check_name(\"no_crate_inject\") {\n-                                    inject_crate = false;\n-                                }\n-                            }\n-                        }\n-                    }\n+    let mut opts = TestOptions {\n+        no_crate_inject: true,\n+        attrs: Vec::new(),\n+    };\n+\n+    let attrs = krate.attrs.iter().filter(|a| a.check_name(\"doc\"))\n+                     .filter_map(|a| a.meta_item_list())\n+                     .flat_map(|l| l.iter())\n+                     .filter(|a| a.check_name(\"test\"))\n+                     .filter_map(|a| a.meta_item_list())\n+                     .flat_map(|l| l.iter());\n+    for attr in attrs {\n+        if attr.check_name(\"no_crate_inject\") {\n+            opts.no_crate_inject = true;\n+        }\n+        if attr.check_name(\"attr\") {\n+            if let Some(l) = attr.meta_item_list() {\n+                for item in l {\n+                    opts.attrs.push(pprust::meta_item_to_string(item));\n                 }\n             }\n         }\n     }\n \n-    return inject_crate;\n+    return opts;\n }\n \n-#[allow(deprecated)]\n fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n            externs: core::Externs,\n            should_panic: bool, no_run: bool, as_test_harness: bool,\n-           inject_crate: bool) {\n+           opts: &TestOptions) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n-    let test = maketest(test, Some(cratename), true, as_test_harness,\n-                        inject_crate);\n+    let test = maketest(test, Some(cratename), as_test_harness, opts);\n     let input = config::Input::Str(test.to_string());\n \n     let sessopts = config::Options {\n@@ -250,8 +259,8 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n     }\n }\n \n-pub fn maketest(s: &str, cratename: Option<&str>, lints: bool,\n-                dont_insert_main: bool, inject_crate: bool) -> String {\n+pub fn maketest(s: &str, cratename: Option<&str>, dont_insert_main: bool,\n+                opts: &TestOptions) -> String {\n     let (crate_attrs, everything_else) = partition_source(s);\n \n     let mut prog = String::new();\n@@ -260,20 +269,18 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool,\n     // are intended to be crate attributes.\n     prog.push_str(&crate_attrs);\n \n-    if lints {\n-        prog.push_str(r\"\n-#![allow(unused_variables, unused_assignments, unused_mut, unused_attributes, dead_code)]\n-\");\n+    // Next, any attributes for other aspects such as lints.\n+    for attr in &opts.attrs {\n+        prog.push_str(&format!(\"#![{}]\\n\", attr));\n     }\n \n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n-    if !s.contains(\"extern crate\") && inject_crate {\n+    if !s.contains(\"extern crate\") && !opts.no_crate_inject {\n         match cratename {\n             Some(cratename) => {\n                 if s.contains(cratename) {\n-                    prog.push_str(&format!(\"extern crate {};\\n\",\n-                                           cratename));\n+                    prog.push_str(&format!(\"extern crate {};\\n\", cratename));\n                 }\n             }\n             None => {}\n@@ -325,12 +332,12 @@ pub struct Collector {\n     use_headers: bool,\n     current_header: Option<String>,\n     cratename: String,\n-    inject_crate: bool\n+    opts: TestOptions,\n }\n \n impl Collector {\n     pub fn new(cratename: String, libs: SearchPaths, externs: core::Externs,\n-               use_headers: bool, inject_crate: bool) -> Collector {\n+               use_headers: bool, opts: TestOptions) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -340,7 +347,7 @@ impl Collector {\n             use_headers: use_headers,\n             current_header: None,\n             cratename: cratename,\n-            inject_crate: inject_crate\n+            opts: opts,\n         }\n     }\n \n@@ -357,13 +364,14 @@ impl Collector {\n         let libs = self.libs.clone();\n         let externs = self.externs.clone();\n         let cratename = self.cratename.to_string();\n-        let inject_crate = self.inject_crate;\n+        let opts = self.opts.clone();\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n                 name: testing::DynTestName(name),\n                 ignore: should_ignore,\n-                should_panic: testing::ShouldPanic::No, // compiler failures are test failures\n+                // compiler failures are test failures\n+                should_panic: testing::ShouldPanic::No,\n             },\n             testfn: testing::DynTestFn(Box::new(move|| {\n                 runtest(&test,\n@@ -373,7 +381,7 @@ impl Collector {\n                         should_panic,\n                         no_run,\n                         as_test_harness,\n-                        inject_crate);\n+                        &opts);\n             }))\n         });\n     }"}, {"sha": "46aac8701fd988a02b05577a23a94f46080f0393", "filename": "src/test/rustdoc/issue-18199.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/179719d45023e549a62ec7a584d554408c6d241d/src%2Ftest%2Frustdoc%2Fissue-18199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/179719d45023e549a62ec7a584d554408c6d241d/src%2Ftest%2Frustdoc%2Fissue-18199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-18199.rs?ref=179719d45023e549a62ec7a584d554408c6d241d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--test\n+\n+#![doc(test(attr(feature(staged_api))))]\n+\n+/// ```\n+/// #![staged_api]\n+/// fn main() {}\n+/// ```\n+pub fn foo() {}"}]}