{"sha": "5aad51098d4bae73220aa58180cf562bccc4a213", "node_id": "C_kwDOAAsO6NoAKDVhYWQ1MTA5OGQ0YmFlNzMyMjBhYTU4MTgwY2Y1NjJiY2NjNGEyMTM", "commit": {"author": {"name": "Kai Luo", "email": "lkail@cn.ibm.com", "date": "2023-03-24T02:25:52Z"}, "committer": {"name": "Kai Luo", "email": "lkail@cn.ibm.com", "date": "2023-03-24T02:25:52Z"}, "message": "Avoid misalign", "tree": {"sha": "59cecf0ef7398e4bcc9eecefc31462a731f433dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59cecf0ef7398e4bcc9eecefc31462a731f433dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aad51098d4bae73220aa58180cf562bccc4a213", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aad51098d4bae73220aa58180cf562bccc4a213", "html_url": "https://github.com/rust-lang/rust/commit/5aad51098d4bae73220aa58180cf562bccc4a213", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aad51098d4bae73220aa58180cf562bccc4a213/comments", "author": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e8a8282b8c131adb7f39909b9148687ea6c3b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8a8282b8c131adb7f39909b9148687ea6c3b7b", "html_url": "https://github.com/rust-lang/rust/commit/6e8a8282b8c131adb7f39909b9148687ea6c3b7b"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "9c8a28a4a7efebb6f23d2c93dd588525739bccae", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5aad51098d4bae73220aa58180cf562bccc4a213/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aad51098d4bae73220aa58180cf562bccc4a213/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=5aad51098d4bae73220aa58180cf562bccc4a213", "patch": "@@ -85,15 +85,20 @@ fn current_dll_path() -> Result<PathBuf, String> {\n     #[cfg(target_os = \"aix\")]\n     unsafe {\n         let addr = current_dll_path as u64;\n-        let mut buffer = vec![0i8; 4096];\n+        let mut buffer = vec![std::mem::zeroed::<libc::ld_info>(); 64];\n         loop {\n-            if libc::loadquery(libc::L_GETINFO, buffer.as_mut_ptr(), buffer.len() as u32) >= 0 {\n+            if libc::loadquery(\n+                libc::L_GETINFO,\n+                buffer.as_mut_ptr() as *mut i8,\n+                (std::mem::size_of::<libc::ld_info>() * buffer.len()) as u32,\n+            ) >= 0\n+            {\n                 break;\n             } else {\n                 if std::io::Error::last_os_error().raw_os_error().unwrap() != libc::ENOMEM {\n                     return Err(\"loadquery failed\".into());\n                 }\n-                buffer.resize(buffer.len() * 2, 0i8);\n+                buffer.resize(buffer.len() * 2, std::mem::zeroed::<libc::ld_info>());\n             }\n         }\n         let mut current = buffer.as_mut_ptr() as *mut libc::ld_info;"}]}