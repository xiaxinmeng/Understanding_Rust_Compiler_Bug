{"sha": "f865e3d22f93664c85059f88ceef433718c4f2f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NjVlM2QyMmY5MzY2NGM4NTA1OWY4OGNlZWY0MzM3MThjNGYyZjA=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-04T23:27:10Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-07T08:19:04Z"}, "message": "bodge", "tree": {"sha": "b581c2c62a0ed6158499c5f45c75c1350f23747d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b581c2c62a0ed6158499c5f45c75c1350f23747d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f865e3d22f93664c85059f88ceef433718c4f2f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f865e3d22f93664c85059f88ceef433718c4f2f0", "html_url": "https://github.com/rust-lang/rust/commit/f865e3d22f93664c85059f88ceef433718c4f2f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f865e3d22f93664c85059f88ceef433718c4f2f0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d2db4a58b4f3c196ed58d3a95cd7c7b61d746b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d2db4a58b4f3c196ed58d3a95cd7c7b61d746b", "html_url": "https://github.com/rust-lang/rust/commit/a5d2db4a58b4f3c196ed58d3a95cd7c7b61d746b"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "41e1aafd9bdad0acfcdd516b4d37fcb9eb2b8de0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f865e3d22f93664c85059f88ceef433718c4f2f0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f865e3d22f93664c85059f88ceef433718c4f2f0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f865e3d22f93664c85059f88ceef433718c4f2f0", "patch": "@@ -538,9 +538,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                         self.visit_fn_ret_ty(&f.decl.output)\n                     }\n-                    TyKind::ImplTrait(_, ref bounds) => {\n-                        self.with_hir_id_owner(None, |this| {\n-                            walk_list!(this, visit_param_bound, bounds);\n+                    TyKind::ImplTrait(def_node_id, _) => {\n+                        self.lctx.allocate_hir_id_counter(def_node_id);\n+                        self.with_hir_id_owner(Some(def_node_id), |this| {\n+                            visit::walk_ty(this, t);\n                         });\n                     }\n                     _ => visit::walk_ty(self, t),\n@@ -1351,10 +1352,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         // Add a definition for the in-band `Param`.\n                         let def_id = self.resolver.local_def_id(def_node_id);\n \n-                        let hir_bounds = self.lower_param_bounds(\n-                            bounds,\n-                            ImplTraitContext::Universal(in_band_ty_params),\n-                        );\n+                        self.allocate_hir_id_counter(def_node_id);\n+\n+                        let hir_bounds = self.with_hir_id_owner(def_node_id, |this| {\n+                            this.lower_param_bounds(\n+                                bounds,\n+                                ImplTraitContext::Universal(in_band_ty_params),\n+                            )\n+                        });\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         in_band_ty_params.push(hir::GenericParam {"}, {"sha": "516c9b6752b97afa46636b3fffe66a6896880c56", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f865e3d22f93664c85059f88ceef433718c4f2f0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f865e3d22f93664c85059f88ceef433718c4f2f0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=f865e3d22f93664c85059f88ceef433718c4f2f0", "patch": "@@ -360,8 +360,26 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_generic_param(&mut self, param: &'hir GenericParam<'hir>) {\n-        self.insert(param.span, param.hir_id, Node::GenericParam(param));\n-        intravisit::walk_generic_param(self, param);\n+        if let hir::GenericParamKind::Type {\n+            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+            ..\n+        } = param.kind\n+        {\n+            debug_assert_eq!(\n+                param.hir_id.owner,\n+                self.definitions.opt_hir_id_to_local_def_id(param.hir_id).unwrap()\n+            );\n+            self.with_dep_node_owner(param.hir_id.owner, param, |this, hash| {\n+                this.insert_with_hash(param.span, param.hir_id, Node::GenericParam(param), hash);\n+\n+                this.with_parent(param.hir_id, |this| {\n+                    intravisit::walk_generic_param(this, param);\n+                });\n+            });\n+        } else {\n+            self.insert(param.span, param.hir_id, Node::GenericParam(param));\n+            intravisit::walk_generic_param(self, param);\n+        }\n     }\n \n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {"}, {"sha": "7d4bafc10896f6d3270258c1a780dd0624aececc", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f865e3d22f93664c85059f88ceef433718c4f2f0/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f865e3d22f93664c85059f88ceef433718c4f2f0/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=f865e3d22f93664c85059f88ceef433718c4f2f0", "patch": "@@ -163,4 +163,16 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n         // we are currently in. So for those it's correct that they have a\n         // different owner.\n     }\n+\n+    fn visit_generic_param(&mut self, param: &'hir hir::GenericParam<'hir>) {\n+        if let hir::GenericParamKind::Type {\n+            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+            ..\n+        } = param.kind\n+        {\n+            // Do nothing because bodging is fun.\n+        } else {\n+            intravisit::walk_generic_param(self, param);\n+        }\n+    }\n }"}]}