{"sha": "5d04790dd2e73f3faf08d528e3675e131585ec01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMDQ3OTBkZDJlNzNmM2ZhZjA4ZDUyOGUzNjc1ZTEzMTU4NWVjMDE=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-12-13T16:54:26Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-01-19T19:23:41Z"}, "message": "Avoid leak in `vec::Drain` when item drop panics", "tree": {"sha": "5aa4271596ae881762bf2d636979512a622a9b9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aa4271596ae881762bf2d636979512a622a9b9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d04790dd2e73f3faf08d528e3675e131585ec01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d04790dd2e73f3faf08d528e3675e131585ec01", "html_url": "https://github.com/rust-lang/rust/commit/5d04790dd2e73f3faf08d528e3675e131585ec01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d04790dd2e73f3faf08d528e3675e131585ec01/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e5eb2634cbb356b626e028a4be1305d4a44a023", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5eb2634cbb356b626e028a4be1305d4a44a023", "html_url": "https://github.com/rust-lang/rust/commit/3e5eb2634cbb356b626e028a4be1305d4a44a023"}], "stats": {"total": 82, "additions": 69, "deletions": 13}, "files": [{"sha": "80acba0a3a162c0cbc5123eb518f7dc3ff8492e4", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5d04790dd2e73f3faf08d528e3675e131585ec01/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04790dd2e73f3faf08d528e3675e131585ec01/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=5d04790dd2e73f3faf08d528e3675e131585ec01", "patch": "@@ -1,6 +1,7 @@\n use std::borrow::Cow;\n use std::collections::TryReserveError::*;\n use std::mem::size_of;\n+use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::vec::{Drain, IntoIter};\n use std::{isize, usize};\n \n@@ -585,6 +586,44 @@ fn test_drain_inclusive_out_of_bounds() {\n     v.drain(5..=5);\n }\n \n+#[test]\n+fn test_drain_leak() {\n+    static mut DROPS: i32 = 0;\n+\n+    #[derive(Debug, PartialEq)]\n+    struct D(u32, bool);\n+\n+    impl Drop for D {\n+        fn drop(&mut self) {\n+            unsafe {\n+                DROPS += 1;\n+            }\n+\n+            if self.1 {\n+                panic!(\"panic in `drop`\");\n+            }\n+        }\n+    }\n+\n+    let mut v = vec![\n+        D(0, false),\n+        D(1, false),\n+        D(2, false),\n+        D(3, false),\n+        D(4, true),\n+        D(5, false),\n+        D(6, false),\n+    ];\n+\n+    catch_unwind(AssertUnwindSafe(|| {\n+        v.drain(2..=5);\n+    }))\n+    .ok();\n+\n+    assert_eq!(unsafe { DROPS }, 4);\n+    assert_eq!(v, vec![D(0, false), D(1, false), D(6, false),]);\n+}\n+\n #[test]\n fn test_splice() {\n     let mut v = vec![1, 2, 3, 4, 5];"}, {"sha": "ba71e42090cbbbcf0b0d9b5d6ca10159b452164f", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5d04790dd2e73f3faf08d528e3675e131585ec01/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04790dd2e73f3faf08d528e3675e131585ec01/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=5d04790dd2e73f3faf08d528e3675e131585ec01", "patch": "@@ -2700,23 +2700,40 @@ impl<T> DoubleEndedIterator for Drain<'_, T> {\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl<T> Drop for Drain<'_, T> {\n     fn drop(&mut self) {\n-        // exhaust self first\n-        self.for_each(drop);\n+        /// Continues dropping the remaining elements when a destructor unwinds.\n+        struct DropGuard<'r, 'a, T>(&'r mut Drain<'a, T>);\n \n-        if self.tail_len > 0 {\n-            unsafe {\n-                let source_vec = self.vec.as_mut();\n-                // memmove back untouched tail, update to new length\n-                let start = source_vec.len();\n-                let tail = self.tail_start;\n-                if tail != start {\n-                    let src = source_vec.as_ptr().add(tail);\n-                    let dst = source_vec.as_mut_ptr().add(start);\n-                    ptr::copy(src, dst, self.tail_len);\n+        impl<'r, 'a, T> Drop for DropGuard<'r, 'a, T> {\n+            fn drop(&mut self) {\n+                // Continue the same loop we do below. This only runs when a destructor has\n+                // panicked. If another one panics this will abort.\n+                self.0.for_each(drop);\n+\n+                if self.0.tail_len > 0 {\n+                    unsafe {\n+                        let source_vec = self.0.vec.as_mut();\n+                        // memmove back untouched tail, update to new length\n+                        let start = source_vec.len();\n+                        let tail = self.0.tail_start;\n+                        if tail != start {\n+                            let src = source_vec.as_ptr().add(tail);\n+                            let dst = source_vec.as_mut_ptr().add(start);\n+                            ptr::copy(src, dst, self.0.tail_len);\n+                        }\n+                        source_vec.set_len(start + self.0.tail_len);\n+                    }\n                 }\n-                source_vec.set_len(start + self.tail_len);\n             }\n         }\n+\n+        // exhaust self first\n+        while let Some(item) = self.next() {\n+            let guard = DropGuard(self);\n+            drop(item);\n+            mem::forget(guard);\n+        }\n+\n+        DropGuard(self);\n     }\n }\n "}]}