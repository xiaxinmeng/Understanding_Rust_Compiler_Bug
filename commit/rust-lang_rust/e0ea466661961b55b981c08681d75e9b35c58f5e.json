{"sha": "e0ea466661961b55b981c08681d75e9b35c58f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZWE0NjY2NjE5NjFiNTViOTgxYzA4NjgxZDc1ZTliMzVjNThmNWU=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-15T23:05:45Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:00:30Z"}, "message": "make unevaluated const substs optional", "tree": {"sha": "b5b329d157971ed29099404dd8dd073b799e4eeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5b329d157971ed29099404dd8dd073b799e4eeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ea466661961b55b981c08681d75e9b35c58f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ea466661961b55b981c08681d75e9b35c58f5e", "html_url": "https://github.com/rust-lang/rust/commit/e0ea466661961b55b981c08681d75e9b35c58f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ea466661961b55b981c08681d75e9b35c58f5e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21fff2c6c3f3b2986865a1368b1c5e76a20e5f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/21fff2c6c3f3b2986865a1368b1c5e76a20e5f12", "html_url": "https://github.com/rust-lang/rust/commit/21fff2c6c3f3b2986865a1368b1c5e76a20e5f12"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "424a0d742d12b56c29b4b40339faedb7d6b204dd", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e0ea466661961b55b981c08681d75e9b35c58f5e/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ea466661961b55b981c08681d75e9b35c58f5e/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=e0ea466661961b55b981c08681d75e9b35c58f5e", "patch": "@@ -129,13 +129,13 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-            if fx.tcx.is_static(def.did) =>\n+        ConstKind::Unevaluated(uv)\n+            if fx.tcx.is_static(uv.def.did) =>\n         {\n-            assert!(substs.is_empty());\n-            assert!(promoted.is_none());\n+            assert!(uv.substs(fx.tcx).is_empty());\n+            assert!(uv.promoted.is_none());\n \n-            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n+            return codegen_static_ref(fx, uv.def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n         ConstKind::Unevaluated(unevaluated) => {\n             match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {"}]}