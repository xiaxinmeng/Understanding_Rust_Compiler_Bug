{"sha": "a6f17f74368ffdf917f47647096f34a815a6337e", "node_id": "C_kwDOAAsO6NoAKGE2ZjE3Zjc0MzY4ZmZkZjkxN2Y0NzY0NzA5NmYzNGE4MTVhNjMzN2U", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-25T10:27:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-25T10:27:53Z"}, "message": "minor: more readable code", "tree": {"sha": "46649d664162149efb38b8c7767c81584287230f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46649d664162149efb38b8c7767c81584287230f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6f17f74368ffdf917f47647096f34a815a6337e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f17f74368ffdf917f47647096f34a815a6337e", "html_url": "https://github.com/rust-lang/rust/commit/a6f17f74368ffdf917f47647096f34a815a6337e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6f17f74368ffdf917f47647096f34a815a6337e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9abea7492e8b83ccca14ba42565c0305c5e36a6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9abea7492e8b83ccca14ba42565c0305c5e36a6c", "html_url": "https://github.com/rust-lang/rust/commit/9abea7492e8b83ccca14ba42565c0305c5e36a6c"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "a627ca70d9edda4fd4a122343e3a9b1ea19c0e37", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a6f17f74368ffdf917f47647096f34a815a6337e/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f17f74368ffdf917f47647096f34a815a6337e/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=a6f17f74368ffdf917f47647096f34a815a6337e", "patch": "@@ -1,8 +1,9 @@\n mod atom;\n \n+use super::*;\n+\n pub(crate) use self::atom::{block_expr, match_arm_list};\n pub(super) use self::atom::{literal, LITERAL_FIRST};\n-use super::*;\n \n pub(super) enum StmtWithSemi {\n     Yes,\n@@ -47,11 +48,6 @@ fn expr_no_struct(p: &mut Parser) {\n     expr_bp(p, r, 1);\n }\n \n-fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n-    let forbid = matches!(kind, BIN_EXPR | RANGE_EXPR);\n-    !forbid\n-}\n-\n pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n     let m = p.start();\n     // test attr_on_expr_stmt\n@@ -79,13 +75,15 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n     let (cm, blocklike) = expr_stmt(p);\n     let kind = cm.as_ref().map(|cm| cm.kind()).unwrap_or(ERROR);\n \n-    if has_attrs && !is_expr_stmt_attr_allowed(kind) {\n-        // test_err attr_on_expr_not_allowed\n-        // fn foo() {\n-        //    #[A] 1 + 2;\n-        //    #[B] if true {};\n-        // }\n-        p.error(format!(\"attributes are not allowed on {:?}\", kind));\n+    if has_attrs {\n+        if matches!(kind, BIN_EXPR | RANGE_EXPR) {\n+            // test_err attr_on_expr_not_allowed\n+            // fn foo() {\n+            //    #[A] 1 + 2;\n+            //    #[B] if true {};\n+            // }\n+            p.error(format!(\"attributes are not allowed on {:?}\", kind));\n+        }\n     }\n \n     if p.at(T!['}']) || (prefer_expr && p.at(EOF)) {"}]}