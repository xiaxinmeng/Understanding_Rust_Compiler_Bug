{"sha": "c2a0d1ba112d94e48d5292bde272de7904c66fff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYTBkMWJhMTEyZDk0ZTQ4ZDUyOTJiZGUyNzJkZTc5MDRjNjZmZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-21T11:48:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-21T11:48:08Z"}, "message": "Auto merge of #39204 - ollie27:linkchecker_fragment, r=alexcrichton\n\nlinkchecker: Fix checking links which are just fragments\n\nAlso fix a typo which linkchecker should have caught.\n\nIt was broken by 31a8638e5e716bec90f4398a57c58fb34e492667.\n\nr? @alexcrichton", "tree": {"sha": "31ad0ad5e092d93dbb075d1d79b8948f1269192c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ad0ad5e092d93dbb075d1d79b8948f1269192c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2a0d1ba112d94e48d5292bde272de7904c66fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a0d1ba112d94e48d5292bde272de7904c66fff", "html_url": "https://github.com/rust-lang/rust/commit/c2a0d1ba112d94e48d5292bde272de7904c66fff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2a0d1ba112d94e48d5292bde272de7904c66fff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8801287a34052eb22cc4f2731ddff9a6283d870", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8801287a34052eb22cc4f2731ddff9a6283d870", "html_url": "https://github.com/rust-lang/rust/commit/d8801287a34052eb22cc4f2731ddff9a6283d870"}, {"sha": "543eca2eab970a7d8f460fcde30098d2edbc2b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/543eca2eab970a7d8f460fcde30098d2edbc2b5e", "html_url": "https://github.com/rust-lang/rust/commit/543eca2eab970a7d8f460fcde30098d2edbc2b5e"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "938a74a16219ce8f8d8c28111baa202f6445459c", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2a0d1ba112d94e48d5292bde272de7904c66fff/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/c2a0d1ba112d94e48d5292bde272de7904c66fff/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=c2a0d1ba112d94e48d5292bde272de7904c66fff", "patch": "@@ -650,15 +650,15 @@ Rust syntax is restricted in two ways:\n \n [RFC 550]: https://github.com/rust-lang/rfcs/blob/master/text/0550-macro-future-proofing.md\n \n-## Procedrual Macros\n+## Procedural Macros\n \n-\"Procedrual macros\" are the second way to implement a macro. For now, the only\n+\"Procedural macros\" are the second way to implement a macro. For now, the only\n thing they can be used for is to implement derive on your own types. See\n [the book][procedural macros] for a tutorial.\n \n Procedural macros involve a few different parts of the language and its\n standard libraries. First is the `proc_macro` crate, included with Rust,\n-that defines an interface for building a procedrual macro. The \n+that defines an interface for building a procedural macro. The\n `#[proc_macro_derive(Foo)]` attribute is used to mark the the deriving\n function. This function must have the type signature:\n \n@@ -3805,7 +3805,7 @@ impl From<i32> for String {\n }\n ```\n \n-The notation `Self` in the impl refers to the implementing type: `String`. In another \n+The notation `Self` in the impl refers to the implementing type: `String`. In another\n example:\n \n ```"}, {"sha": "f84d685127bfa6c7c1a0fc83765e2d3243dbb5ca", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c2a0d1ba112d94e48d5292bde272de7904c66fff/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a0d1ba112d94e48d5292bde272de7904c66fff/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=c2a0d1ba112d94e48d5292bde272de7904c66fff", "patch": "@@ -151,24 +151,23 @@ fn check(cache: &mut Cache,\n         }\n         let mut parts = url.splitn(2, \"#\");\n         let url = parts.next().unwrap();\n-        if url.is_empty() {\n-            return\n-        }\n         let fragment = parts.next();\n         let mut parts = url.splitn(2, \"?\");\n         let url = parts.next().unwrap();\n \n         // Once we've plucked out the URL, parse it using our base url and\n         // then try to extract a file path.\n         let mut path = file.to_path_buf();\n-        path.pop();\n-        for part in Path::new(url).components() {\n-            match part {\n-                Component::Prefix(_) |\n-                Component::RootDir => panic!(),\n-                Component::CurDir => {}\n-                Component::ParentDir => { path.pop(); }\n-                Component::Normal(s) => { path.push(s); }\n+        if !url.is_empty() {\n+            path.pop();\n+            for part in Path::new(url).components() {\n+                match part {\n+                    Component::Prefix(_) |\n+                    Component::RootDir => panic!(),\n+                    Component::CurDir => {}\n+                    Component::ParentDir => { path.pop(); }\n+                    Component::Normal(s) => { path.push(s); }\n+                }\n             }\n         }\n "}]}