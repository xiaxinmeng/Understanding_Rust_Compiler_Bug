{"sha": "031cce8cfc7fef922989e8b820da236ee17e016a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMWNjZThjZmM3ZmVmOTIyOTg5ZThiODIwZGEyMzZlZTE3ZTAxNmE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2021-02-03T22:56:47Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2021-02-03T23:00:41Z"}, "message": "add `relaxed_struct_unsize` feature gate", "tree": {"sha": "afe497132df25d642bdf58b4e8f32a1a19958f87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe497132df25d642bdf58b4e8f32a1a19958f87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/031cce8cfc7fef922989e8b820da236ee17e016a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/031cce8cfc7fef922989e8b820da236ee17e016a", "html_url": "https://github.com/rust-lang/rust/commit/031cce8cfc7fef922989e8b820da236ee17e016a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/031cce8cfc7fef922989e8b820da236ee17e016a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed", "html_url": "https://github.com/rust-lang/rust/commit/50e394a05e3a908e11b4cbeda28b4f8f4c0ea6ed"}], "stats": {"total": 88, "additions": 73, "deletions": 15}, "files": [{"sha": "4f38e060023675fcb922cc3d151497732c1537e6", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/031cce8cfc7fef922989e8b820da236ee17e016a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031cce8cfc7fef922989e8b820da236ee17e016a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=031cce8cfc7fef922989e8b820da236ee17e016a", "patch": "@@ -631,6 +631,9 @@ declare_features! (\n \n     /// Allows `extern \"C-cmse-nonsecure-call\" fn()`.\n     (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n+\n+    /// Lessens the requirements for structs to implement `Unsize`.\n+    (active, relaxed_struct_unsize, \"1.51.0\", Some(1), None),\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "86f8061a24affe52ee2ebc076bf261df108b82e9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/031cce8cfc7fef922989e8b820da236ee17e016a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031cce8cfc7fef922989e8b820da236ee17e016a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=031cce8cfc7fef922989e8b820da236ee17e016a", "patch": "@@ -907,6 +907,7 @@ symbols! {\n         register_attr,\n         register_tool,\n         relaxed_adts,\n+        relaxed_struct_unsize,\n         rem,\n         rem_assign,\n         repr,"}, {"sha": "ed3e117fcfabbbb841243ddf86e5eb868862e95e", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/031cce8cfc7fef922989e8b820da236ee17e016a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031cce8cfc7fef922989e8b820da236ee17e016a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=031cce8cfc7fef922989e8b820da236ee17e016a", "patch": "@@ -823,33 +823,62 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     },\n                 };\n \n+                // FIXME(eddyb) cache this (including computing `unsizing_params`)\n+                // by putting it in a query; it would only need the `DefId` as it\n+                // looks at declared field types, not anything substituted.\n+\n                 // The last field of the structure has to exist and contain type/const parameters.\n                 let (tail_field, prefix_fields) =\n                     def.non_enum_variant().fields.split_last().ok_or(Unimplemented)?;\n                 let tail_field_ty = tcx.type_of(tail_field.did);\n \n                 let mut unsizing_params = GrowableBitSet::new_empty();\n-                for arg in tail_field_ty.walk() {\n-                    if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                        unsizing_params.insert(i);\n+                if tcx.features().relaxed_struct_unsize {\n+                    for arg in tail_field_ty.walk() {\n+                        if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                            unsizing_params.insert(i);\n+                        }\n                     }\n-                }\n \n-                // Ensure none of the other fields mention the parameters used\n-                // in unsizing.\n-                // FIXME(eddyb) cache this (including computing `unsizing_params`)\n-                // by putting it in a query; it would only need the `DefId` as it\n-                // looks at declared field types, not anything substituted.\n-                for field in prefix_fields {\n-                    for arg in tcx.type_of(field.did).walk() {\n+                    // Ensure none of the other fields mention the parameters used\n+                    // in unsizing.\n+                    for field in prefix_fields {\n+                        for arg in tcx.type_of(field.did).walk() {\n+                            if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                                unsizing_params.remove(i);\n+                            }\n+                        }\n+                    }\n+\n+                    if unsizing_params.is_empty() {\n+                        return Err(Unimplemented);\n+                    }\n+                } else {\n+                    let mut found = false;\n+                    for arg in tail_field_ty.walk() {\n                         if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                            unsizing_params.remove(i);\n+                            unsizing_params.insert(i);\n+                            found = true;\n                         }\n                     }\n-                }\n+                    if !found {\n+                        return Err(Unimplemented);\n+                    }\n \n-                if unsizing_params.is_empty() {\n-                    return Err(Unimplemented);\n+                    // Ensure none of the other fields mention the parameters used\n+                    // in unsizing.\n+                    // FIXME(eddyb) cache this (including computing `unsizing_params`)\n+                    // by putting it in a query; it would only need the `DefId` as it\n+                    // looks at declared field types, not anything substituted.\n+                    for field in prefix_fields {\n+                        for arg in tcx.type_of(field.did).walk() {\n+                            if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                                if unsizing_params.contains(i) {\n+                                    return Err(Unimplemented);\n+                                }\n+                            }\n+                        }\n+                    }\n                 }\n \n                 // Extract `TailField<T>` and `TailField<U>` from `Struct<T>` and `Struct<U>`."}, {"sha": "0cfd0a0b9784c9d2b7b736825c0a607aa4c23b07", "filename": "src/test/ui/feature-gates/feature-gate-relaxed_struct_unsize.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/031cce8cfc7fef922989e8b820da236ee17e016a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031cce8cfc7fef922989e8b820da236ee17e016a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs?ref=031cce8cfc7fef922989e8b820da236ee17e016a", "patch": "@@ -0,0 +1,10 @@\n+// Test that we allow unsizing even if there is an unchanged param in the\n+// field getting unsized.\n+struct A<T, U: ?Sized + 'static>(T, B<T, U>);\n+struct B<T, U: ?Sized>(T, U);\n+\n+fn main() {\n+    let x: A<[u32; 1], [u32; 1]> = A([0; 1], B([0; 1], [0; 1]));\n+    let y: &A<[u32; 1], [u32]> = &x; //~ ERROR mismatched types\n+    assert_eq!(y.1.1.len(), 1);\n+}"}, {"sha": "f62def47726f92c4e1c5bdccbbd5efc0664428bc", "filename": "src/test/ui/feature-gates/feature-gate-relaxed_struct_unsize.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/031cce8cfc7fef922989e8b820da236ee17e016a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/031cce8cfc7fef922989e8b820da236ee17e016a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr?ref=031cce8cfc7fef922989e8b820da236ee17e016a", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/feature-gate-relaxed_struct_unsize.rs:8:34\n+   |\n+LL |     let y: &A<[u32; 1], [u32]> = &x;\n+   |            -------------------   ^^ expected slice `[u32]`, found array `[u32; 1]`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected reference `&A<[u32; 1], [u32]>`\n+              found reference `&A<[u32; 1], [u32; 1]>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "83199e8112e71d2ad12245d61793e49d91e142bc", "filename": "src/test/ui/unsized/unchanged-param.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/031cce8cfc7fef922989e8b820da236ee17e016a/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031cce8cfc7fef922989e8b820da236ee17e016a/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs?ref=031cce8cfc7fef922989e8b820da236ee17e016a", "patch": "@@ -1,3 +1,4 @@\n+#![feature(relaxed_struct_unsize)]\n // run-pass\n // Test that we allow unsizing even if there is an unchanged param in the\n // field getting unsized."}]}