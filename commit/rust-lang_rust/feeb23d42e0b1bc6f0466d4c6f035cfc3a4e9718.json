{"sha": "feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZWIyM2Q0MmUwYjFiYzZmMDQ2NmQ0YzZmMDM1Y2ZjM2E0ZTk3MTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-12T06:48:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-12T06:48:28Z"}, "message": "Auto merge of #24003 - rprichard:span-fixes, r=huonw\n\n * In `noop_fold_expr`, call `new_span` in these cases:\r\n    - `ExprMethodCall`'s identifier\r\n    - `ExprField`'s identifier\r\n    - `ExprTupField`'s integer\r\n\r\n   Calling `new_span` for `ExprMethodCall`'s identifier is necessary to print\r\n   an acceptable diagnostic for `write!(&2, \"\")`. We see this error:\r\n   ```\r\n   <std macros>:2:20: 2:66 error: type `&mut _` does not implement any method in scope named `write_fmt`\r\n   <std macros>:2 ( & mut * $ dst ) . write_fmt ( format_args ! ( $ ( $ arg ) * ) ) )\r\n                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n   ```\r\n   With this change, we also see a macro expansion backtrace leading to\r\n   the `write!(&2, \"\")` call site.\r\n\r\n * After fully expanding a macro, we replace the expansion expression's\r\n   span with the original span. Call `fld.new_span` to add a backtrace to\r\n   this span. (Note that I'm call `new_span` after `bt.pop()`, so the macro\r\n   just expanded isn't on the backtrace.)\r\n\r\n   The motivating example for this change is `println!(\"{}\")`. The format\r\n   string literal is `concat!($fmt, \"arg\")` and is inside the libstd macro.\r\n   We need to see the backtrace to find the `println!` call site.\r\n\r\n * Add a backtrace to the `format_args!` format expression span.\r\n\r\nr?  alexcrichton\r\n\r\nAddresses #23459", "tree": {"sha": "4acbbacbb3f8c2633b3bcfe79658f55db9a4f900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4acbbacbb3f8c2633b3bcfe79658f55db9a4f900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "html_url": "https://github.com/rust-lang/rust/commit/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03f563a0e01bed68a44bf1fab946e0b6620bc153", "url": "https://api.github.com/repos/rust-lang/rust/commits/03f563a0e01bed68a44bf1fab946e0b6620bc153", "html_url": "https://github.com/rust-lang/rust/commit/03f563a0e01bed68a44bf1fab946e0b6620bc153"}, {"sha": "ddbdf51f394226bcae162ed2d5348126b32e7dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddbdf51f394226bcae162ed2d5348126b32e7dbd", "html_url": "https://github.com/rust-lang/rust/commit/ddbdf51f394226bcae162ed2d5348126b32e7dbd"}], "stats": {"total": 195, "additions": 172, "deletions": 23}, "files": [{"sha": "5bbf79d0477332c0aa253335ba76731c61ab7e8a", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -871,7 +871,7 @@ impl CodeMap {\n         F: FnOnce(Option<&ExpnInfo>) -> T,\n     {\n         match id {\n-            NO_EXPANSION => f(None),\n+            NO_EXPANSION | COMMAND_LINE_EXPN => f(None),\n             ExpnId(i) => f(Some(&(*self.expansions.borrow())[i as usize]))\n         }\n     }"}, {"sha": "f3715d765e391a023008d888bd5cc03e1c907b93", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -465,22 +465,21 @@ fn emit(dst: &mut EmitterWriter, cm: &codemap::CodeMap, rsp: RenderSpan,\n     match rsp {\n         FullSpan(_) => {\n             try!(highlight_lines(dst, cm, sp, lvl, cm.span_to_lines(sp)));\n+            try!(print_macro_backtrace(dst, cm, sp));\n         }\n         EndSpan(_) => {\n             try!(end_highlight_lines(dst, cm, sp, lvl, cm.span_to_lines(sp)));\n+            try!(print_macro_backtrace(dst, cm, sp));\n         }\n         Suggestion(_, ref suggestion) => {\n             try!(highlight_suggestion(dst, cm, sp, suggestion));\n+            try!(print_macro_backtrace(dst, cm, sp));\n         }\n         FileLine(..) => {\n             // no source text in this case!\n         }\n     }\n \n-    if sp != COMMAND_LINE_SP {\n-        try!(print_macro_backtrace(dst, cm, sp));\n-    }\n-\n     match code {\n         Some(code) =>\n             match dst.registry.as_ref().and_then(|registry| registry.find_description(code)) {"}, {"sha": "9994fad3e317b49aaa47249ddf5c25fc56ca8d1a", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -605,7 +605,6 @@ impl<'a> ExtCtxt<'a> {\n             None => self.bug(\"missing top span\")\n         })\n     }\n-    pub fn print_backtrace(&self) { }\n     pub fn backtrace(&self) -> ExpnId { self.backtrace }\n     pub fn original_span(&self) -> Span {\n         let mut expn_id = self.backtrace;\n@@ -700,7 +699,6 @@ impl<'a> ExtCtxt<'a> {\n     ///   substitute; we never hit resolve/type-checking so the dummy\n     ///   value doesn't have to match anything)\n     pub fn span_fatal(&self, sp: Span, msg: &str) -> ! {\n-        self.print_backtrace();\n         panic!(self.parse_sess.span_diagnostic.span_fatal(sp, msg));\n     }\n \n@@ -710,35 +708,27 @@ impl<'a> ExtCtxt<'a> {\n     /// Compilation will be stopped in the near future (at the end of\n     /// the macro expansion phase).\n     pub fn span_err(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_err(sp, msg);\n     }\n     pub fn span_warn(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_warn(sp, msg);\n     }\n     pub fn span_unimpl(&self, sp: Span, msg: &str) -> ! {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_unimpl(sp, msg);\n     }\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n     pub fn span_note(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_note(sp, msg);\n     }\n     pub fn span_help(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.span_help(sp, msg);\n     }\n     pub fn fileline_help(&self, sp: Span, msg: &str) {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.fileline_help(sp, msg);\n     }\n     pub fn bug(&self, msg: &str) -> ! {\n-        self.print_backtrace();\n         self.parse_sess.span_diagnostic.handler().bug(msg);\n     }\n     pub fn trace_macros(&self) -> bool {"}, {"sha": "b65798b8a4980f479456022b195e10543fcd4b84", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -55,7 +55,7 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             fully_expanded.map(|e| ast::Expr {\n                 id: ast::DUMMY_NODE_ID,\n                 node: e.node,\n-                span: span,\n+                span: fld.new_span(span),\n             })\n         }\n "}, {"sha": "513bbf6c77b3576f140919df0b46f60b8299060c", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -17,6 +17,7 @@ use ext::base::*;\n use ext::base;\n use ext::build::AstBuilder;\n use fmt_macros as parse;\n+use fold::Folder;\n use parse::token::special_idents;\n use parse::token;\n use ptr::P;\n@@ -649,6 +650,10 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n                                     names: HashMap<String, P<ast::Expr>>)\n                                     -> P<ast::Expr> {\n     let arg_types: Vec<_> = (0..args.len()).map(|_| None).collect();\n+    // Expand the format literal so that efmt.span will have a backtrace. This\n+    // is essential for locating a bug when the format literal is generated in\n+    // a macro. (e.g. println!(\"{}\"), which uses concat!($fmt, \"\\n\")).\n+    let efmt = ecx.expander().fold_expr(efmt);\n     let mut cx = Context {\n         ecx: ecx,\n         args: args,\n@@ -663,9 +668,8 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         pieces: Vec::new(),\n         str_pieces: Vec::new(),\n         all_pieces_simple: true,\n-        fmtsp: sp,\n+        fmtsp: efmt.span,\n     };\n-    cx.fmtsp = efmt.span;\n     let fmt = match expr_to_string(cx.ecx,\n                                    efmt,\n                                    \"format argument must be a string literal.\") {"}, {"sha": "9869108952c5e019090e0b461658ff63e2fccb46", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -26,8 +26,6 @@ pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt,\n         return base::DummyResult::any(sp);\n     }\n \n-    cx.print_backtrace();\n-\n     println!(\"{}\", print::pprust::tts_to_string(tts));\n \n     // any so that `log_syntax` can be invoked as an expression and item."}, {"sha": "d7033ce7e48a490af6dc69555dd4564a5e2c1643", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -1176,7 +1176,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             }\n             ExprMethodCall(i, tps, args) => {\n                 ExprMethodCall(\n-                    respan(i.span, folder.fold_ident(i.node)),\n+                    respan(folder.new_span(i.span), folder.fold_ident(i.node)),\n                     tps.move_map(|x| folder.fold_ty(x)),\n                     args.move_map(|x| folder.fold_expr(x)))\n             }\n@@ -1246,11 +1246,13 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             }\n             ExprField(el, ident) => {\n                 ExprField(folder.fold_expr(el),\n-                          respan(ident.span, folder.fold_ident(ident.node)))\n+                          respan(folder.new_span(ident.span),\n+                                 folder.fold_ident(ident.node)))\n             }\n             ExprTupField(el, ident) => {\n                 ExprTupField(folder.fold_expr(el),\n-                             respan(ident.span, folder.fold_usize(ident.node)))\n+                             respan(folder.new_span(ident.span),\n+                                    folder.fold_usize(ident.node)))\n             }\n             ExprIndex(el, er) => {\n                 ExprIndex(folder.fold_expr(el), folder.fold_expr(er))"}, {"sha": "7f682d5d8d1007eb323e3a24683b6e4aa4b4bf5b", "filename": "src/test/auxiliary/internal_unstable.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finternal_unstable.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -22,6 +22,17 @@ pub struct Foo {\n     pub x: u8\n }\n \n+impl Foo {\n+    #[unstable(feature = \"method\")]\n+    pub fn method(&self) {}\n+}\n+\n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n+pub struct Bar {\n+    #[unstable(feature = \"struct2_field\")]\n+    pub x: u8\n+}\n+\n #[allow_internal_unstable]\n #[macro_export]\n macro_rules! call_unstable_allow {\n@@ -36,6 +47,18 @@ macro_rules! construct_unstable_allow {\n     }\n }\n \n+#[allow_internal_unstable]\n+#[macro_export]\n+macro_rules! call_method_allow {\n+    ($e: expr) => { $e.method() }\n+}\n+\n+#[allow_internal_unstable]\n+#[macro_export]\n+macro_rules! access_field_allow {\n+    ($e: expr) => { $e.x }\n+}\n+\n #[allow_internal_unstable]\n #[macro_export]\n macro_rules! pass_through_allow {\n@@ -54,6 +77,16 @@ macro_rules! construct_unstable_noallow {\n     }\n }\n \n+#[macro_export]\n+macro_rules! call_method_noallow {\n+    ($e: expr) => { $e.method() }\n+}\n+\n+#[macro_export]\n+macro_rules! access_field_noallow {\n+    ($e: expr) => { $e.x }\n+}\n+\n #[macro_export]\n macro_rules! pass_through_noallow {\n     ($e: expr) => { $e }"}, {"sha": "2e42e9d3b019522d46420a3395843a8c9f8634ae", "filename": "src/test/compile-fail/internal-unstable-noallow.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable-noallow.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -16,6 +16,8 @@\n // aux-build:internal_unstable.rs\n // error-pattern:use of unstable library feature 'function'\n // error-pattern:use of unstable library feature 'struct_field'\n+// error-pattern:use of unstable library feature 'method'\n+// error-pattern:use of unstable library feature 'struct2_field'\n \n #[macro_use]\n extern crate internal_unstable;\n@@ -24,4 +26,8 @@ fn main() {\n     call_unstable_noallow!();\n \n     construct_unstable_noallow!(0);\n+\n+    |x: internal_unstable::Foo| { call_method_noallow!(x) };\n+\n+    |x: internal_unstable::Bar| { access_field_noallow!(x) };\n }"}, {"sha": "e01259f0debbddf3e8c91faf26d4668a133c3275", "filename": "src/test/compile-fail/internal-unstable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finternal-unstable.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -36,6 +36,8 @@ fn main() {\n     // ok, the instability is contained.\n     call_unstable_allow!();\n     construct_unstable_allow!(0);\n+    |x: internal_unstable::Foo| { call_method_allow!(x) };\n+    |x: internal_unstable::Bar| { access_field_allow!(x) };\n \n     // bad.\n     pass_through_allow!(internal_unstable::unstable()); //~ ERROR use of unstable"}, {"sha": "df906d723566c78ca84d84a15e9783773e16b539", "filename": "src/test/compile-fail/macro-backtrace-invalid-internals.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-invalid-internals.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Macros in statement vs expression position handle backtraces differently.\n+\n+macro_rules! fake_method_stmt { //~ NOTE in expansion of\n+     () => {\n+          1.fake() //~ ERROR does not implement any method\n+     }\n+}\n+\n+macro_rules! fake_field_stmt { //~ NOTE in expansion of\n+     () => {\n+          1.fake //~ ERROR no field with that name\n+     }\n+}\n+\n+macro_rules! fake_anon_field_stmt { //~ NOTE in expansion of\n+     () => {\n+          (1).0 //~ ERROR type was not a tuple\n+     }\n+}\n+\n+macro_rules! fake_method_expr { //~ NOTE in expansion of\n+     () => {\n+          1.fake() //~ ERROR does not implement any method\n+     }\n+}\n+\n+macro_rules! fake_field_expr {\n+     () => {\n+          1.fake\n+     }\n+}\n+\n+macro_rules! fake_anon_field_expr {\n+     () => {\n+          (1).0\n+     }\n+}\n+\n+fn main() {\n+    fake_method_stmt!(); //~ NOTE expansion site\n+    fake_field_stmt!(); //~ NOTE expansion site\n+    fake_anon_field_stmt!(); //~ NOTE expansion site\n+\n+    let _ = fake_method_expr!(); //~ NOTE expansion site\n+    let _ = fake_field_expr!(); //~ ERROR no field with that name\n+    let _ = fake_anon_field_expr!(); //~ ERROR type was not a tuple\n+}"}, {"sha": "7c1dc1a468c76802126ad8db8aeffacb3807ef7b", "filename": "src/test/compile-fail/macro-backtrace-nested.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-nested.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// In expression position, but not statement position, when we expand a macro,\n+// we replace the span of the expanded expression with that of the call site.\n+\n+macro_rules! nested_expr {\n+    () => (fake)\n+}\n+\n+macro_rules! call_nested_expr {\n+    () => (nested_expr!())\n+}\n+\n+macro_rules! call_nested_expr_sum { //~ NOTE in expansion of\n+    () => { 1 + nested_expr!(); } //~ ERROR unresolved name\n+}\n+\n+fn main() {\n+    1 + call_nested_expr!(); //~ ERROR unresolved name\n+    call_nested_expr_sum!(); //~ NOTE expansion site\n+}"}, {"sha": "0c66bbfcf044a3da326d7441039543c8b3fd6c53", "filename": "src/test/compile-fail/macro-backtrace-println.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-backtrace-println.rs?ref=feeb23d42e0b1bc6f0466d4c6f035cfc3a4e9718", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The `format_args!` syntax extension issues errors before code expansion\n+// has completed, but we still need a backtrace.\n+\n+// This test includes stripped-down versions of `print!` and `println!`,\n+// because we can't otherwise verify the lines of the backtrace.\n+\n+fn print(_args: std::fmt::Arguments) {}\n+\n+macro_rules! myprint { //~ NOTE in expansion of\n+    ($($arg:tt)*) => (print(format_args!($($arg)*)));\n+}\n+\n+macro_rules! myprintln { //~ NOTE in expansion of\n+    ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\"))); //~ ERROR invalid reference to argument `0`\n+}\n+\n+fn main() {\n+    myprintln!(\"{}\"); //~ NOTE expansion site\n+}"}]}