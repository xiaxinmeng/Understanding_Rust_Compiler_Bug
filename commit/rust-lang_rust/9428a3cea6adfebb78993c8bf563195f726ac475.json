{"sha": "9428a3cea6adfebb78993c8bf563195f726ac475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjhhM2NlYTZhZGZlYmI3ODk5M2M4YmY1NjMxOTVmNzI2YWM0NzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-05T21:16:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-05T22:26:23Z"}, "message": "make mem-categorization use adjusted type for patterns\n\nFixes #49631", "tree": {"sha": "831a353f3f5fa17ca938db91801adb4a09a976a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/831a353f3f5fa17ca938db91801adb4a09a976a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9428a3cea6adfebb78993c8bf563195f726ac475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9428a3cea6adfebb78993c8bf563195f726ac475", "html_url": "https://github.com/rust-lang/rust/commit/9428a3cea6adfebb78993c8bf563195f726ac475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9428a3cea6adfebb78993c8bf563195f726ac475/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ee891cfeabc0872624104611cc0a359f46447cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee891cfeabc0872624104611cc0a359f46447cc", "html_url": "https://github.com/rust-lang/rust/commit/5ee891cfeabc0872624104611cc0a359f46447cc"}], "stats": {"total": 84, "additions": 80, "deletions": 4}, "files": [{"sha": "5875e5e4097af496036aaa5b221866ffa5fc6e1a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9428a3cea6adfebb78993c8bf563195f726ac475/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9428a3cea6adfebb78993c8bf563195f726ac475/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9428a3cea6adfebb78993c8bf563195f726ac475", "patch": "@@ -503,8 +503,37 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         self.resolve_type_vars_or_error(expr.hir_id, self.tables.expr_ty_adjusted_opt(expr))\n     }\n \n+    /// Returns the type of value that this pattern matches against.\n+    /// Some non-obvious cases:\n+    ///\n+    /// - a `ref x` binding matches against a value of type `T` and gives\n+    ///   `x` the type `&T`; we return `T`.\n+    /// - a pattern with implicit derefs (thanks to default binding\n+    ///   modes #42640) may look like `Some(x)` but in fact have\n+    ///   implicit deref patterns attached (e.g., it is really\n+    ///   `&Some(x)`). In that case, we return the \"outermost\" type\n+    ///   (e.g., `&Option<T>).\n     fn pat_ty(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> {\n+        // Check for implicit `&` types wrapping the pattern; note\n+        // that these are never attached to binding patterns, so\n+        // actually this is somewhat \"disjoint\" from the code below\n+        // that aims to account for `ref x`.\n+        if let Some(vec) = self.tables.pat_adjustments().get(pat.hir_id) {\n+            if let Some(first_ty) = vec.first() {\n+                debug!(\"pat_ty(pat={:?}) found adjusted ty `{:?}`\", pat, first_ty);\n+                return Ok(first_ty);\n+            }\n+        }\n+\n+        self.pat_ty_unadjusted(pat)\n+    }\n+\n+\n+    /// Like `pat_ty`, but ignores implicit `&` patterns.\n+    fn pat_ty_unadjusted(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> {\n         let base_ty = self.node_ty(pat.hir_id)?;\n+        debug!(\"pat_ty(pat={:?}) base_ty={:?}\", pat, base_ty);\n+\n         // This code detects whether we are looking at a `ref x`,\n         // and if so, figures out what the type *being borrowed* is.\n         let ret_ty = match pat.node {\n@@ -531,8 +560,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n             _ => base_ty,\n         };\n-        debug!(\"pat_ty(pat={:?}) base_ty={:?} ret_ty={:?}\",\n-               pat, base_ty, ret_ty);\n+        debug!(\"pat_ty(pat={:?}) ret_ty={:?}\", pat, ret_ty);\n+\n         Ok(ret_ty)\n     }\n \n@@ -1246,7 +1275,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                      self.tcx.adt_def(enum_def).variant_with_id(def_id).fields.len())\n                 }\n                 Def::StructCtor(_, CtorKind::Fn) => {\n-                    match self.pat_ty(&pat)?.sty {\n+                    match self.pat_ty_unadjusted(&pat)?.sty {\n                         ty::TyAdt(adt_def, _) => {\n                             (cmt, adt_def.non_enum_variant().fields.len())\n                         }\n@@ -1297,7 +1326,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n           PatKind::Tuple(ref subpats, ddpos) => {\n             // (p1, ..., pN)\n-            let expected_len = match self.pat_ty(&pat)?.sty {\n+            let expected_len = match self.pat_ty_unadjusted(&pat)?.sty {\n                 ty::TyTuple(ref tys) => tys.len(),\n                 ref ty => span_bug!(pat.span, \"tuple pattern unexpected type {:?}\", ty),\n             };"}, {"sha": "8dc1627dc8b5af75cd648be4c043dcc507e48b9c", "filename": "src/test/ui/rfc-2005-default-binding-mode/borrowck-issue-49631.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9428a3cea6adfebb78993c8bf563195f726ac475/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9428a3cea6adfebb78993c8bf563195f726ac475/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.rs?ref=9428a3cea6adfebb78993c8bf563195f726ac475", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+pub struct Foo {\n+}\n+\n+impl Foo {\n+    fn get(&self) -> Option<&Result<String, String>> {\n+        None\n+    }\n+\n+    fn mutate(&mut self) { }\n+}\n+\n+fn main() {\n+    let mut foo = Foo { };\n+\n+    // foo.get() returns type Option<&Result<String, String>>, so\n+    // using `string` keeps borrow of `foo` alive. Hence calling\n+    // `foo.mutate()` should be an error.\n+    while let Some(Ok(string)) = foo.get() {\n+        foo.mutate();\n+        //~^ ERROR cannot borrow `foo` as mutable\n+        println!(\"foo={:?}\", *string);\n+    }\n+}"}, {"sha": "2da5ac8d240bf3c2d1a099415168af3185939536", "filename": "src/test/ui/rfc-2005-default-binding-mode/borrowck-issue-49631.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9428a3cea6adfebb78993c8bf563195f726ac475/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9428a3cea6adfebb78993c8bf563195f726ac475/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.stderr?ref=9428a3cea6adfebb78993c8bf563195f726ac475", "patch": "@@ -0,0 +1,13 @@\n+error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-issue-49631.rs:30:9\n+   |\n+LL |     while let Some(Ok(string)) = foo.get() {\n+   |                                  ---     - immutable borrow ends here\n+   |                                  |\n+   |                                  immutable borrow occurs here\n+LL |         foo.mutate();\n+   |         ^^^ mutable borrow occurs here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}]}