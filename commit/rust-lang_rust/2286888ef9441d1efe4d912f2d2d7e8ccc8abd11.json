{"sha": "2286888ef9441d1efe4d912f2d2d7e8ccc8abd11", "node_id": "C_kwDOAAsO6NoAKDIyODY4ODhlZjk0NDFkMWVmZTRkOTEyZjJkMmQ3ZThjY2M4YWJkMTE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-09-27T10:01:49Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-09-27T10:01:49Z"}, "message": "session: remove now-unnecessary lint `#[allow]`s\n\nIn #101230, the internal diagnostic migration lints -\n`diagnostic_outside_of_impl` and `untranslatable_diagnostic` - were\nmodified so that they wouldn't trigger on functions annotated with\n`#[rustc_lint_diagnostics]`. However, this change has to make it into\nthe bootstrap compiler before the `#[allow]` annotations that it aims to\nremove can be removed, which is possible now that #102051 has landed.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "81cc6de754d3b160ac5700e81cbe961cea4ec4eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81cc6de754d3b160ac5700e81cbe961cea4ec4eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2286888ef9441d1efe4d912f2d2d7e8ccc8abd11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2286888ef9441d1efe4d912f2d2d7e8ccc8abd11", "html_url": "https://github.com/rust-lang/rust/commit/2286888ef9441d1efe4d912f2d2d7e8ccc8abd11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2286888ef9441d1efe4d912f2d2d7e8ccc8abd11/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0b511daa91469dd251e736fb8914d2360ac0ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0b511daa91469dd251e736fb8914d2360ac0ec", "html_url": "https://github.com/rust-lang/rust/commit/de0b511daa91469dd251e736fb8914d2360ac0ec"}], "stats": {"total": 52, "additions": 0, "deletions": 52}, "files": [{"sha": "aaf265ad7c336222be085dda70128938307c488d", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2286888ef9441d1efe4d912f2d2d7e8ccc8abd11/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2286888ef9441d1efe4d912f2d2d7e8ccc8abd11/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=2286888ef9441d1efe4d912f2d2d7e8ccc8abd11", "patch": "@@ -376,8 +376,6 @@ impl ParseSess {\n     }\n \n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -386,22 +384,16 @@ impl ParseSess {\n     }\n \n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.span_diagnostic.struct_warn(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.span_diagnostic.struct_fatal(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n-    #[allow(rustc::untranslatable_diagnostic)]\n     pub fn struct_diagnostic<G: EmissionGuarantee>(\n         &self,\n         msg: impl Into<DiagnosticMessage>,"}, {"sha": "59b544ce9eb832266c836573788db0be232c737d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2286888ef9441d1efe4d912f2d2d7e8ccc8abd11/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2286888ef9441d1efe4d912f2d2d7e8ccc8abd11/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=2286888ef9441d1efe4d912f2d2d7e8ccc8abd11", "patch": "@@ -288,8 +288,6 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -298,8 +296,6 @@ impl Session {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -309,8 +305,6 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -320,14 +314,10 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -336,8 +326,6 @@ impl Session {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -346,14 +334,10 @@ impl Session {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -362,8 +346,6 @@ impl Session {\n         self.diagnostic().struct_expect(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -372,8 +354,6 @@ impl Session {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -384,17 +364,13 @@ impl Session {\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -403,8 +379,6 @@ impl Session {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -413,8 +387,6 @@ impl Session {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -423,8 +395,6 @@ impl Session {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -434,21 +404,15 @@ impl Session {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -458,14 +422,10 @@ impl Session {\n         self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -479,8 +439,6 @@ impl Session {\n         }\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -489,8 +447,6 @@ impl Session {\n         self.diagnostic().span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n-    #[allow(rustc::untranslatable_diagnostic)]\n-    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}]}