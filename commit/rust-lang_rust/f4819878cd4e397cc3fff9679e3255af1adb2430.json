{"sha": "f4819878cd4e397cc3fff9679e3255af1adb2430", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ODE5ODc4Y2Q0ZTM5N2NjM2ZmZjk2NzllMzI1NWFmMWFkYjI0MzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T07:22:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T07:22:24Z"}, "message": "Auto merge of #53754 - RalfJung:slice_align_to, r=alexcrichton\n\nstabilize slice_align_to\n\nThis is very hard to implement correctly, and leads to [serious bugs](https://github.com/llogiq/bytecount/pull/42) when done incorrectly. Moreover, this is needed to be able to run code that opportunistically exploits alignment on miri. So code using `align_to`/`align_to_mut` gets the benefit of a well-tested implementation *and* of being able to run in miri to test for (some kinds of) UB.\n\nThis PR also clarifies the guarantee wrt. the middle part being as long as possible.  Should the docs say under which circumstances the middle part could be shorter? Currently, that can only happen when running in miri.", "tree": {"sha": "0dcf6516b7116891afd47811bac079c4eef53b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dcf6516b7116891afd47811bac079c4eef53b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4819878cd4e397cc3fff9679e3255af1adb2430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4819878cd4e397cc3fff9679e3255af1adb2430", "html_url": "https://github.com/rust-lang/rust/commit/f4819878cd4e397cc3fff9679e3255af1adb2430", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4819878cd4e397cc3fff9679e3255af1adb2430/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ba1d41e3c2a66215943e43de70f93bb195b1f0", "html_url": "https://github.com/rust-lang/rust/commit/e4ba1d41e3c2a66215943e43de70f93bb195b1f0"}, {"sha": "f4f114002e2a39494674107eb307770fffe33e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f114002e2a39494674107eb307770fffe33e95", "html_url": "https://github.com/rust-lang/rust/commit/f4f114002e2a39494674107eb307770fffe33e95"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "da4a56cfecd6e5323c8cfc92a16f4213bc71cfe3", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4819878cd4e397cc3fff9679e3255af1adb2430/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4819878cd4e397cc3fff9679e3255af1adb2430/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=f4819878cd4e397cc3fff9679e3255af1adb2430", "patch": "@@ -1739,8 +1739,9 @@ impl<T> [T] {\n     /// maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n-    /// slice of a new type, and the suffix slice. The middle slice will have the greatest length\n-    /// possible for a given type and input slice.\n+    /// slice of a new type, and the suffix slice. The method does a best effort to make the\n+    /// middle slice the greatest length possible for a given type and input slice, but only\n+    /// your algorithm's performance should depend on that, not its correctness.\n     ///\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n@@ -1755,7 +1756,6 @@ impl<T> [T] {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// # #![feature(slice_align_to)]\n     /// unsafe {\n     ///     let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];\n     ///     let (prefix, shorts, suffix) = bytes.align_to::<u16>();\n@@ -1764,7 +1764,7 @@ impl<T> [T] {\n     ///     // less_efficient_algorithm_for_bytes(suffix);\n     /// }\n     /// ```\n-    #[unstable(feature = \"slice_align_to\", issue = \"44488\")]\n+    #[stable(feature = \"slice_align_to\", since = \"1.30.0\")]\n     pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {\n         // Note that most of this function will be constant-evaluated,\n         if ::mem::size_of::<U>() == 0 || ::mem::size_of::<T>() == 0 {\n@@ -1792,8 +1792,9 @@ impl<T> [T] {\n     /// maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n-    /// slice of a new type, and the suffix slice. The middle slice will have the greatest length\n-    /// possible for a given type and input slice.\n+    /// slice of a new type, and the suffix slice. The method does a best effort to make the\n+    /// middle slice the greatest length possible for a given type and input slice, but only\n+    /// your algorithm's performance should depend on that, not its correctness.\n     ///\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n@@ -1808,7 +1809,6 @@ impl<T> [T] {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// # #![feature(slice_align_to)]\n     /// unsafe {\n     ///     let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];\n     ///     let (prefix, shorts, suffix) = bytes.align_to_mut::<u16>();\n@@ -1817,7 +1817,7 @@ impl<T> [T] {\n     ///     // less_efficient_algorithm_for_bytes(suffix);\n     /// }\n     /// ```\n-    #[unstable(feature = \"slice_align_to\", issue = \"44488\")]\n+    #[stable(feature = \"slice_align_to\", since = \"1.30.0\")]\n     pub unsafe fn align_to_mut<U>(&mut self) -> (&mut [T], &mut [U], &mut [T]) {\n         // Note that most of this function will be constant-evaluated,\n         if ::mem::size_of::<U>() == 0 || ::mem::size_of::<T>() == 0 {"}, {"sha": "4f3086575c0cf2f0e89d494b125c81e1734874a4", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4819878cd4e397cc3fff9679e3255af1adb2430/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4819878cd4e397cc3fff9679e3255af1adb2430/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=f4819878cd4e397cc3fff9679e3255af1adb2430", "patch": "@@ -34,7 +34,6 @@\n #![feature(try_from)]\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n-#![feature(slice_align_to)]\n #![feature(align_offset)]\n #![feature(reverse_bits)]\n #![feature(inner_deref)]"}]}