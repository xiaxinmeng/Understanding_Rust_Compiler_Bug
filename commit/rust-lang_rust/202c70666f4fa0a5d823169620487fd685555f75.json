{"sha": "202c70666f4fa0a5d823169620487fd685555f75", "node_id": "C_kwDOAAsO6NoAKDIwMmM3MDY2NmY0ZmEwYTVkODIzMTY5NjIwNDg3ZmQ2ODU1NTVmNzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-14T17:02:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-14T17:02:50Z"}, "message": "Rollup merge of #103478 - SpanishPear:spanishpear/issue_103366_fix, r=TaKO8Ki\n\n Suggest fix for misplaced generic params on fn item #103366\n\nfixes #103366\n\nThis still has some work to go, but works for 2/3 of the initial base cases described in #1033366\n\nsimple fn:\n```\nerror: expected identifier, found `<`\n --> shreys/test_1.rs:1:3\n  |\n1 | fn<T> id(x: T) -> T { x }\n  |   ^ expected identifier\n  |\nhelp: help: place the generic parameter list after the function name:\n  |\n1 | fn id<T>(x: T) -> T { x }\n  |    ~~~~\n\n```\n\nComplicated bounds\n```\nerror: expected identifier, found `<`\n --> spanishpear/test_2.rs:1:3\n  |\n1 | fn<'a, B: 'a + std::ops::Add<Output = u32>> f(_x: B) { }\n  |   ^ expected identifier\n  |\nhelp: help: place the generic parameter list after the function name:\n  |\n1 | fn f<'a, B: 'a + std::ops::Add<Output = u32>>(_x: B) { }\n  |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nOpening a draft PR for comments on approach, particularly I have the following questions:\n -  [x]  Is it okay to be using `err.span_suggestion` over struct derives? I struggled to get the initial implementation (particularly the correct suggestion message) on struct derives, although I think given what I've learned since starting, I could attempt re-doing it with that approach.\n  -  [x] in the case where the snippet cannot be obtained from a span, is the `help` but no suggestion okay? I think yes (also, when does this case occur?)\n  -  [x] are there any red flags for the generalisation of this work for relevant item kinds (i.e. `struct`, `enum`, `trait`, and `union`). My basic testing indicates it does work for those types except the help tip is currently hardcoded to `after the function name` - which should change dependent on the item.\n  - [x] I am planning to not show the suggestion if there is already a `<` after the item identifier, (i.e. if there are already generics, as after a function name per the original issue). Any major objections?\n  - [x] Is the style of error okay? I wasn't sure if there was a way to make it display nicer, or if thats handled by span_suggestion\n\nThese aren't blocking questions, and I will keep working on:\n  - check if there is a `<` after the ident (and if so, not showing the suggestion)\n  - generalize the help message\n  - figuring out how to write/run/etc ui tests (including reading the docs for them)\n  - logic cleanups", "tree": {"sha": "4d8cec0c78764b2f6ef85a8d4c4f9c07e72e3d3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d8cec0c78764b2f6ef85a8d4c4f9c07e72e3d3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/202c70666f4fa0a5d823169620487fd685555f75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj6766CRBK7hj4Ov3rIwAAJpUIAFcLQElUkGPCTacQP2CQvF5t\ny4rHFHH4Cd9DqEKOktuPNYuOCkKJQM9AiNLPSPqg5ihK+dnrXr5XA7JkY+jcmb0O\niFTruAQr4rvzSNIqDSn7IZ93PA8+7azMS4wMBh9c+X9xBNXK2Bfen41hM4uyTi7t\nzc8TEPcGz4B0USYbHmWDCwWuOkjS87Mwiw3sTikkxpj7QO0W3GtyU8QFXZZb2udj\nZe95RqY7U3CFu/6oFCzj/CZa0cpy7WqFjC1xXxPGKHPHeLfki5Dr3qevvwUAgo9E\ngVK0cjh359pGSNghAK+1kIhLmnrLRUYdcNRDwCc5NGzfdPqZvaBy1RxXHdvt//Q=\n=vZc+\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d8cec0c78764b2f6ef85a8d4c4f9c07e72e3d3a\nparent 9bb6e60d1f1360234aae90c97964c0fa5524f141\nparent a3d32bbbbe06ffe42edbc4905e964d394de5ee02\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676394170 +0100\ncommitter GitHub <noreply@github.com> 1676394170 +0100\n\nRollup merge of #103478 - SpanishPear:spanishpear/issue_103366_fix, r=TaKO8Ki\n\n Suggest fix for misplaced generic params on fn item #103366\n\nfixes #103366\n\nThis still has some work to go, but works for 2/3 of the initial base cases described in #1033366\n\nsimple fn:\n```\nerror: expected identifier, found `<`\n --> shreys/test_1.rs:1:3\n  |\n1 | fn<T> id(x: T) -> T { x }\n  |   ^ expected identifier\n  |\nhelp: help: place the generic parameter list after the function name:\n  |\n1 | fn id<T>(x: T) -> T { x }\n  |    ~~~~\n\n```\n\nComplicated bounds\n```\nerror: expected identifier, found `<`\n --> spanishpear/test_2.rs:1:3\n  |\n1 | fn<'a, B: 'a + std::ops::Add<Output = u32>> f(_x: B) { }\n  |   ^ expected identifier\n  |\nhelp: help: place the generic parameter list after the function name:\n  |\n1 | fn f<'a, B: 'a + std::ops::Add<Output = u32>>(_x: B) { }\n  |    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nOpening a draft PR for comments on approach, particularly I have the following questions:\n -  [x]  Is it okay to be using `err.span_suggestion` over struct derives? I struggled to get the initial implementation (particularly the correct suggestion message) on struct derives, although I think given what I've learned since starting, I could attempt re-doing it with that approach.\n  -  [x] in the case where the snippet cannot be obtained from a span, is the `help` but no suggestion okay? I think yes (also, when does this case occur?)\n  -  [x] are there any red flags for the generalisation of this work for relevant item kinds (i.e. `struct`, `enum`, `trait`, and `union`). My basic testing indicates it does work for those types except the help tip is currently hardcoded to `after the function name` - which should change dependent on the item.\n  - [x] I am planning to not show the suggestion if there is already a `<` after the item identifier, (i.e. if there are already generics, as after a function name per the original issue). Any major objections?\n  - [x] Is the style of error okay? I wasn't sure if there was a way to make it display nicer, or if thats handled by span_suggestion\n\nThese aren't blocking questions, and I will keep working on:\n  - check if there is a `<` after the ident (and if so, not showing the suggestion)\n  - generalize the help message\n  - figuring out how to write/run/etc ui tests (including reading the docs for them)\n  - logic cleanups\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/202c70666f4fa0a5d823169620487fd685555f75", "html_url": "https://github.com/rust-lang/rust/commit/202c70666f4fa0a5d823169620487fd685555f75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/202c70666f4fa0a5d823169620487fd685555f75/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb6e60d1f1360234aae90c97964c0fa5524f141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb6e60d1f1360234aae90c97964c0fa5524f141", "html_url": "https://github.com/rust-lang/rust/commit/9bb6e60d1f1360234aae90c97964c0fa5524f141"}, {"sha": "a3d32bbbbe06ffe42edbc4905e964d394de5ee02", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d32bbbbe06ffe42edbc4905e964d394de5ee02", "html_url": "https://github.com/rust-lang/rust/commit/a3d32bbbbe06ffe42edbc4905e964d394de5ee02"}], "stats": {"total": 289, "additions": 287, "deletions": 2}, "files": [{"sha": "49eff41329c492f6160136f3fe2e20c68a04c8db", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -284,7 +284,7 @@ impl<'a> Parser<'a> {\n         self.sess.source_map().span_to_snippet(span)\n     }\n \n-    pub(super) fn expected_ident_found(&self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+    pub(super) fn expected_ident_found(&mut self) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let valid_follow = &[\n             TokenKind::Eq,\n             TokenKind::Colon,\n@@ -324,7 +324,61 @@ impl<'a> Parser<'a> {\n             suggest_raw,\n             suggest_remove_comma,\n         };\n-        err.into_diagnostic(&self.sess.span_diagnostic)\n+        let mut err = err.into_diagnostic(&self.sess.span_diagnostic);\n+\n+        // if the token we have is a `<`\n+        // it *might* be a misplaced generic\n+        if self.token == token::Lt {\n+            // all keywords that could have generic applied\n+            let valid_prev_keywords =\n+                [kw::Fn, kw::Type, kw::Struct, kw::Enum, kw::Union, kw::Trait];\n+\n+            // If we've expected an identifier,\n+            // and the current token is a '<'\n+            // if the previous token is a valid keyword\n+            // that might use a generic, then suggest a correct\n+            // generic placement (later on)\n+            let maybe_keyword = self.prev_token.clone();\n+            if valid_prev_keywords.into_iter().any(|x| maybe_keyword.is_keyword(x)) {\n+                // if we have a valid keyword, attempt to parse generics\n+                // also obtain the keywords symbol\n+                match self.parse_generics() {\n+                    Ok(generic) => {\n+                        if let TokenKind::Ident(symbol, _) = maybe_keyword.kind {\n+                            let ident_name = symbol;\n+                            // at this point, we've found something like\n+                            // `fn <T>id`\n+                            // and current token should be Ident with the item name (i.e. the function name)\n+                            // if there is a `<` after the fn name, then don't show a suggestion, show help\n+\n+                            if !self.look_ahead(1, |t| *t == token::Lt) &&\n+                                let Ok(snippet) = self.sess.source_map().span_to_snippet(generic.span) {\n+                                    err.multipart_suggestion_verbose(\n+                                        format!(\"place the generic parameter name after the {ident_name} name\"),\n+                                        vec![\n+                                            (self.token.span.shrink_to_hi(), snippet),\n+                                            (generic.span, String::new())\n+                                        ],\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                } else {\n+                                    err.help(format!(\n+                                        \"place the generic parameter name after the {ident_name} name\"\n+                                    ));\n+                                }\n+                        }\n+                    }\n+                    Err(err) => {\n+                        // if there's an error parsing the generics,\n+                        // then don't do a misplaced generics suggestion\n+                        // and emit the expected ident error instead;\n+                        err.cancel();\n+                    }\n+                }\n+            }\n+        }\n+\n+        err\n     }\n \n     pub(super) fn expected_one_of_not_found("}, {"sha": "3332118a1e76809d238ec2c172856af305f2560c", "filename": "tests/ui/parser/suggest_misplaced_generics/enum.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.fixed?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+enum Foo<T> { Variant(T) }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the enum name\n+\n+fn main() {}"}, {"sha": "5a2289c5c5ae28b269323dda0eadde05e75ad842", "filename": "tests/ui/parser/suggest_misplaced_generics/enum.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.rs?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+enum<T> Foo { Variant(T) }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the enum name\n+\n+fn main() {}"}, {"sha": "5f5947627ee5cd791449c039d42164ba15da08d3", "filename": "tests/ui/parser/suggest_misplaced_generics/enum.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fenum.stderr?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,14 @@\n+error: expected identifier, found `<`\n+  --> $DIR/enum.rs:5:5\n+   |\n+LL | enum<T> Foo { Variant(T) }\n+   |     ^ expected identifier\n+   |\n+help: place the generic parameter name after the enum name\n+   |\n+LL - enum<T> Foo { Variant(T) }\n+LL + enum Foo<T> { Variant(T) }\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "1dc182398d80abc9b3ead6f58137fd4687bd2a66", "filename": "tests/ui/parser/suggest_misplaced_generics/existing_generics.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.rs?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366\n+// there is already an existing generic on f, so don't show a suggestion\n+\n+#[allow(unused)]\n+fn<'a, B: 'a + std::ops::Add<Output = u32>> f<T>(_x: B) { }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+\n+fn main() {}"}, {"sha": "89716e6f1ed0a28ffe32513749e4aefd52aedebe", "filename": "tests/ui/parser/suggest_misplaced_generics/existing_generics.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fexisting_generics.stderr?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,10 @@\n+error: expected identifier, found `<`\n+  --> $DIR/existing_generics.rs:5:3\n+   |\n+LL | fn<'a, B: 'a + std::ops::Add<Output = u32>> f<T>(_x: B) { }\n+   |   ^ expected identifier\n+   |\n+   = help: place the generic parameter name after the fn name\n+\n+error: aborting due to previous error\n+"}, {"sha": "84bf64bd63cf92a62edb543abf96638143e39ca7", "filename": "tests/ui/parser/suggest_misplaced_generics/fn-complex-generics.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.fixed?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+fn f<'a, B: 'a + std::ops::Add<Output = u32>>(_x: B) { }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+\n+fn main() {}"}, {"sha": "d0684397e744c4ecf908a4a7f59415c522f93744", "filename": "tests/ui/parser/suggest_misplaced_generics/fn-complex-generics.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.rs?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+fn<'a, B: 'a + std::ops::Add<Output = u32>> f(_x: B) { }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+\n+fn main() {}"}, {"sha": "061d0910a742d7d50fe9e48aa0bc63d4aa8248db", "filename": "tests/ui/parser/suggest_misplaced_generics/fn-complex-generics.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-complex-generics.stderr?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,14 @@\n+error: expected identifier, found `<`\n+  --> $DIR/fn-complex-generics.rs:5:3\n+   |\n+LL | fn<'a, B: 'a + std::ops::Add<Output = u32>> f(_x: B) { }\n+   |   ^ expected identifier\n+   |\n+help: place the generic parameter name after the fn name\n+   |\n+LL - fn<'a, B: 'a + std::ops::Add<Output = u32>> f(_x: B) { }\n+LL + fn f<'a, B: 'a + std::ops::Add<Output = u32>>(_x: B) { }\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "7fcb6a82ce451e49120cc01caa3e39da5c5578d5", "filename": "tests/ui/parser/suggest_misplaced_generics/fn-invalid-generics.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.rs?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,8 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// The generics fail to parse here, so don't make any suggestions/help\n+\n+#[allow(unused)]\n+fn<~>()> id(x: T) -> T { x }\n+//~^ ERROR expected identifier, found `<`\n+\n+fn main() {}"}, {"sha": "47e12016938d8deacb9ab58e82c608b5cde9af64", "filename": "tests/ui/parser/suggest_misplaced_generics/fn-invalid-generics.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-invalid-generics.stderr?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `<`\n+  --> $DIR/fn-invalid-generics.rs:5:3\n+   |\n+LL | fn<~>()> id(x: T) -> T { x }\n+   |   ^ expected identifier\n+\n+error: aborting due to previous error\n+"}, {"sha": "cbfd5f2d39c08d1e55f4b4c3f724d5e7b72aed80", "filename": "tests/ui/parser/suggest_misplaced_generics/fn-simple.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.fixed?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+fn id<T>(x: T) -> T { x }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+\n+fn main() {}"}, {"sha": "b207cf70d858402185d87ceea82c8a721ce81eb7", "filename": "tests/ui/parser/suggest_misplaced_generics/fn-simple.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.rs?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+fn<T> id(x: T) -> T { x }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the fn name\n+\n+fn main() {}"}, {"sha": "e749f1a0d00d67b3b4fd563f6cddcf1146b53138", "filename": "tests/ui/parser/suggest_misplaced_generics/fn-simple.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ffn-simple.stderr?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,14 @@\n+error: expected identifier, found `<`\n+  --> $DIR/fn-simple.rs:5:3\n+   |\n+LL | fn<T> id(x: T) -> T { x }\n+   |   ^ expected identifier\n+   |\n+help: place the generic parameter name after the fn name\n+   |\n+LL - fn<T> id(x: T) -> T { x }\n+LL + fn id<T>(x: T) -> T { x }\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "fec05bdeca15c0f902551a8c23992ac60d82b3c7", "filename": "tests/ui/parser/suggest_misplaced_generics/struct.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.fixed?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct Foo<T> { x: T }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the struct name\n+\n+fn main() {}"}, {"sha": "6b80150d546567dd80975e3f6255f064c010a831", "filename": "tests/ui/parser/suggest_misplaced_generics/struct.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.rs?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+struct<T> Foo { x: T }\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the struct name\n+\n+fn main() {}"}, {"sha": "2b650907092d1ca3103d5a6a73140840620ee498", "filename": "tests/ui/parser/suggest_misplaced_generics/struct.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Fstruct.stderr?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,14 @@\n+error: expected identifier, found `<`\n+  --> $DIR/struct.rs:5:7\n+   |\n+LL | struct<T> Foo { x: T }\n+   |       ^ expected identifier\n+   |\n+help: place the generic parameter name after the struct name\n+   |\n+LL - struct<T> Foo { x: T }\n+LL + struct Foo<T> { x: T }\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "a471a078af142bf382b4a30bdb7488f05806eaeb", "filename": "tests/ui/parser/suggest_misplaced_generics/trait.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.fixed?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,11 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+trait Foo<T> {\n+    //~^ ERROR expected identifier, found `<`\n+    //~| HELP place the generic parameter name after the trait name\n+}\n+\n+\n+fn main() {}"}, {"sha": "55355f451f9fd8117f1b2330053fc5ca7a671f1b", "filename": "tests/ui/parser/suggest_misplaced_generics/trait.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.rs?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,11 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+trait<T> Foo {\n+    //~^ ERROR expected identifier, found `<`\n+    //~| HELP place the generic parameter name after the trait name\n+}\n+\n+\n+fn main() {}"}, {"sha": "ac86cfa4697047eeaf25ac355e52c02f4d089eef", "filename": "tests/ui/parser/suggest_misplaced_generics/trait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftrait.stderr?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,14 @@\n+error: expected identifier, found `<`\n+  --> $DIR/trait.rs:5:6\n+   |\n+LL | trait<T> Foo {\n+   |      ^ expected identifier\n+   |\n+help: place the generic parameter name after the trait name\n+   |\n+LL - trait<T> Foo {\n+LL + trait Foo<T> {\n+   |\n+\n+error: aborting due to previous error\n+"}, {"sha": "a97b9e66d0b2b0c0dbe19f555f16384251257773", "filename": "tests/ui/parser/suggest_misplaced_generics/type.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.fixed?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+type Foo<T> = T;\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the type name\n+\n+fn main() {}"}, {"sha": "17e200536fa3e5a03ffa0ce0941da7c021dc35a3", "filename": "tests/ui/parser/suggest_misplaced_generics/type.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.rs?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,9 @@\n+// Issue: 103366 , Suggest fix for misplaced generic params\n+// run-rustfix\n+\n+#[allow(unused)]\n+type<T> Foo = T;\n+//~^ ERROR expected identifier, found `<`\n+//~| HELP place the generic parameter name after the type name\n+\n+fn main() {}"}, {"sha": "22744f6cf37fb4bf2a4d50fdc174445d70fb9ca2", "filename": "tests/ui/parser/suggest_misplaced_generics/type.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/202c70666f4fa0a5d823169620487fd685555f75/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fsuggest_misplaced_generics%2Ftype.stderr?ref=202c70666f4fa0a5d823169620487fd685555f75", "patch": "@@ -0,0 +1,14 @@\n+error: expected identifier, found `<`\n+  --> $DIR/type.rs:5:5\n+   |\n+LL | type<T> Foo = T;\n+   |     ^ expected identifier\n+   |\n+help: place the generic parameter name after the type name\n+   |\n+LL - type<T> Foo = T;\n+LL + type Foo<T> = T;\n+   |\n+\n+error: aborting due to previous error\n+"}]}