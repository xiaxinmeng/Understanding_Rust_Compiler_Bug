{"sha": "a413242efef8e398c385a695eecb255f2713d49d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MTMyNDJlZmVmOGUzOThjMzg1YTY5NWVlY2IyNTVmMjcxM2Q0OWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-05T22:40:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T11:11:13Z"}, "message": "fix printing closures", "tree": {"sha": "5e3c3153a9f3cde84d0ac4a51dea4dc7b7d3df88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3c3153a9f3cde84d0ac4a51dea4dc7b7d3df88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a413242efef8e398c385a695eecb255f2713d49d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a413242efef8e398c385a695eecb255f2713d49d", "html_url": "https://github.com/rust-lang/rust/commit/a413242efef8e398c385a695eecb255f2713d49d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a413242efef8e398c385a695eecb255f2713d49d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84d75dbd7ed128f8694b8a9807cffd5794a0c918", "url": "https://api.github.com/repos/rust-lang/rust/commits/84d75dbd7ed128f8694b8a9807cffd5794a0c918", "html_url": "https://github.com/rust-lang/rust/commit/84d75dbd7ed128f8694b8a9807cffd5794a0c918"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "b1aef28ca980829cd246746f8adfccf6b81f639d", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a413242efef8e398c385a695eecb255f2713d49d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a413242efef8e398c385a695eecb255f2713d49d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=a413242efef8e398c385a695eecb255f2713d49d", "patch": "@@ -596,13 +596,17 @@ fn write_mir_sig(\n \n     trace!(\"write_mir_sig: {:?}\", src.instance);\n     let descr = tcx.describe_def(src.def_id());\n+    let is_function = match descr {\n+        Some(Def::Fn(_)) | Some(Def::Method(_)) | Some(Def::StructCtor(..)) => true,\n+        _ => tcx.is_closure(src.def_id()),\n+    };\n     match (descr, src.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in \", i)?,\n-        (Some(Def::Fn(_)), _) | (Some(Def::Method(_)), _) => write!(w, \"fn \")?,\n         (Some(Def::StructCtor(..)), _) => write!(w, \"struct \")?,\n         (Some(Def::Const(_)), _) => write!(w, \"const \")?,\n         (Some(Def::Static(_, /*is_mutbl*/false)), _) => write!(w, \"static \")?,\n         (Some(Def::Static(_, /*is_mutbl*/true)), _) => write!(w, \"static mut \")?,\n+        (_, _) if is_function => write!(w, \"fn \")?,\n         (None, _) => {}, // things like anon const, not an item\n         _ => bug!(\"Unexpected def description {:?}\", descr),\n     }\n@@ -612,27 +616,21 @@ fn write_mir_sig(\n         write!(w, \"{}\", tcx.item_path_str(src.def_id()))\n     })?;\n \n-    match (descr, src.promoted) {\n-        (Some(Def::Fn(_)), None) |\n-        (Some(Def::Method(_)), None) |\n-        (Some(Def::StructCtor(..)), None) =>\n-        {\n-            write!(w, \"(\")?;\n-\n-            // fn argument types.\n-            for (i, arg) in mir.args_iter().enumerate() {\n-                if i != 0 {\n-                    write!(w, \", \")?;\n-                }\n-                write!(w, \"{:?}: {}\", Place::Local(arg), mir.local_decls[arg].ty)?;\n-            }\n+    if src.promoted.is_none() && is_function {\n+        write!(w, \"(\")?;\n \n-            write!(w, \") -> {}\", mir.return_ty())?;\n-        }\n-        _ => {\n-            assert_eq!(mir.arg_count, 0);\n-            write!(w, \": {} =\", mir.return_ty())?;\n+        // fn argument types.\n+        for (i, arg) in mir.args_iter().enumerate() {\n+            if i != 0 {\n+                write!(w, \", \")?;\n+            }\n+            write!(w, \"{:?}: {}\", Place::Local(arg), mir.local_decls[arg].ty)?;\n         }\n+\n+        write!(w, \") -> {}\", mir.return_ty())?;\n+    } else {\n+        assert_eq!(mir.arg_count, 0);\n+        write!(w, \": {} =\", mir.return_ty())?;\n     }\n \n     if let Some(yield_ty) = mir.yield_ty {"}]}