{"sha": "d8c5bd61956924e041be240cff9458141ca74187", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YzViZDYxOTU2OTI0ZTA0MWJlMjQwY2ZmOTQ1ODE0MWNhNzQxODc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-17T02:48:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-17T02:49:25Z"}, "message": "rt: Implement obstacks, untested as of yet", "tree": {"sha": "71f7c31d0b1e9ac6e07f364569aac67b85a7545e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71f7c31d0b1e9ac6e07f364569aac67b85a7545e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8c5bd61956924e041be240cff9458141ca74187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c5bd61956924e041be240cff9458141ca74187", "html_url": "https://github.com/rust-lang/rust/commit/d8c5bd61956924e041be240cff9458141ca74187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8c5bd61956924e041be240cff9458141ca74187/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca82a690cf1cdd81aad0ce7e90551c04155538aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca82a690cf1cdd81aad0ce7e90551c04155538aa", "html_url": "https://github.com/rust-lang/rust/commit/ca82a690cf1cdd81aad0ce7e90551c04155538aa"}], "stats": {"total": 138, "additions": 137, "deletions": 1}, "files": [{"sha": "6082baf01c9c5b65b695e32ce5e29cd137e350e9", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8c5bd61956924e041be240cff9458141ca74187/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d8c5bd61956924e041be240cff9458141ca74187/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=d8c5bd61956924e041be240cff9458141ca74187", "patch": "@@ -25,6 +25,7 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust_srv.cpp \\\n               rt/rust_kernel.cpp \\\n               rt/rust_shape.cpp \\\n+              rt/rust_obstack.cpp \\\n               rt/memory_region.cpp \\\n               rt/test/rust_test_harness.cpp \\\n               rt/test/rust_test_runtime.cpp \\"}, {"sha": "342310d4b5c1aac310346245dfbdfed16777bc42", "filename": "src/rt/rust_obstack.cpp", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_obstack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_obstack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.cpp?ref=d8c5bd61956924e041be240cff9458141ca74187", "patch": "@@ -0,0 +1,82 @@\n+// Object stacks, used in lieu of dynamically-sized frames.\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstdlib>\n+#include <stdint.h>\n+\n+#include \"rust_internal.h\"\n+#include \"rust_obstack.h\"\n+#include \"rust_task.h\"\n+\n+// ISAAC, let go of max()!\n+#ifdef max\n+#undef max\n+#endif\n+\n+const size_t DEFAULT_CHUNK_SIZE = 4096;\n+\n+struct rust_obstack_chunk {\n+    rust_obstack_chunk *prev;\n+    size_t size;\n+    size_t alen;\n+    size_t pad;\n+    uint8_t data[];\n+\n+    rust_obstack_chunk(rust_obstack_chunk *in_prev, size_t in_size)\n+    : prev(in_prev), size(in_size), alen(0) {}\n+\n+    void *alloc(size_t len);\n+    bool free(void *ptr);\n+};\n+\n+void *\n+rust_obstack_chunk::alloc(size_t len) {\n+    if (len > size - alen)\n+        return NULL;    // Not enough space.\n+    void *result = data + alen;\n+    alen += len;\n+    return result;\n+}\n+\n+bool\n+rust_obstack_chunk::free(void *ptr) {\n+    uint8_t *p = (uint8_t *)ptr;\n+    if (p < data || p >= data + size)\n+        return false;\n+    assert(p < data + alen);\n+    alen = (size_t)(p - data);\n+    return true;\n+}\n+\n+// Allocates the given number of bytes in a new chunk.\n+void *\n+rust_obstack::alloc_new(size_t len) {\n+    size_t chunk_size = std::max(len, DEFAULT_CHUNK_SIZE);\n+    void *ptr = task->malloc(sizeof(chunk) + chunk_size, \"obstack\");\n+    chunk = new(ptr) rust_obstack_chunk(chunk, chunk_size);\n+    return chunk->alloc(len);\n+}\n+\n+void *\n+rust_obstack::alloc(size_t len) {\n+    if (!chunk)\n+        return alloc_new(len);\n+    void *ptr = chunk->alloc(len);\n+    return ptr ? ptr : alloc_new(len);\n+}\n+\n+void\n+rust_obstack::free(void *ptr) {\n+    if (!ptr)\n+        return;\n+\n+    assert(chunk);\n+    while (!chunk->free(ptr)) {\n+        rust_obstack_chunk *prev = chunk->prev;\n+        task->free(chunk);\n+        chunk = prev;\n+        assert(chunk);\n+    }\n+}\n+"}, {"sha": "5a80638aba76c12295e899c4d00ab08ba2035b72", "filename": "src/rt/rust_obstack.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_obstack.h", "raw_url": "https://github.com/rust-lang/rust/raw/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_obstack.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.h?ref=d8c5bd61956924e041be240cff9458141ca74187", "patch": "@@ -0,0 +1,24 @@\n+// Object stacks, used in lieu of dynamically-sized frames.\n+\n+#ifndef RUST_OBSTACK_H\n+#define RUST_OBSTACK_H\n+\n+struct rust_obstack_chunk;\n+struct rust_task;\n+\n+class rust_obstack {\n+    rust_obstack_chunk *chunk;\n+    rust_task *task;\n+\n+    // Allocates the given number of bytes in a new chunk.\n+    void *alloc_new(size_t len);\n+\n+public:\n+    rust_obstack(rust_task *in_task) : chunk(NULL), task(in_task) {}\n+\n+    void *alloc(size_t len);\n+    void free(void *ptr);\n+};\n+\n+#endif\n+"}, {"sha": "b82695542379666f4dfca3a7377deea26a5195c9", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=d8c5bd61956924e041be240cff9458141ca74187", "patch": "@@ -75,7 +75,8 @@ rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n     local_region(&sched->srv->local_region),\n     _on_wakeup(NULL),\n     failed(false),\n-    propagate_failure(true)\n+    propagate_failure(true),\n+    dynastack(this)\n {\n     LOGPTR(sched, \"new task\", (uintptr_t)this);\n     DLOG(sched, task, \"sizeof(task) = %d (0x%x)\", sizeof *this, sizeof *this);"}, {"sha": "f1513ada616c451b564baff7e1b33d63a55c017a", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=d8c5bd61956924e041be240cff9458141ca74187", "patch": "@@ -8,6 +8,7 @@\n #include \"util/array_list.h\"\n \n #include \"context.h\"\n+#include \"rust_obstack.h\"\n \n struct stk_seg {\n     unsigned int valgrind_id;\n@@ -122,6 +123,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     hash_map<rust_port_id, rust_port *> port_table;\n \n+    rust_obstack dynastack;\n+\n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_scheduler *sched,\n               rust_task_list *state,"}, {"sha": "d04de59a4dfaa4957f800de38b8b8b5eb818bc12", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=d8c5bd61956924e041be240cff9458141ca74187", "patch": "@@ -417,6 +417,28 @@ upcall_ivec_spill_shared(rust_task *task,\n     v->alloc = new_alloc;\n     v->payload.ptr = heap_part;\n }\n+\n+/**\n+ * Returns a token that can be used to deallocate all of the allocated space\n+ * space in the dynamic stack.\n+ */\n+extern \"C\" CDECL void *\n+upcall_dynastack_mark(rust_task *task) {\n+    return task->dynastack.alloc(0);\n+}\n+\n+/** Allocates space in the dynamic stack and returns it. */\n+extern \"C\" CDECL void *\n+upcall_dynastack_alloc(rust_task *task, size_t sz) {\n+    return task->dynastack.alloc(sz);\n+}\n+\n+/** Frees space in the dynamic stack. */\n+extern \"C\" CDECL void\n+upcall_dynastack_free(rust_task *task, void *ptr) {\n+    return task->dynastack.free(ptr);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "0d05d7ffa4337d5d5cd41d7c2f9b0a19e5ba282e", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/d8c5bd61956924e041be240cff9458141ca74187/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=d8c5bd61956924e041be240cff9458141ca74187", "patch": "@@ -83,6 +83,9 @@ task_yield\n task_join\n unsupervise\n upcall_cmp_type\n+upcall_dynastack_alloc\n+upcall_dynastack_free\n+upcall_dynastack_mark\n upcall_exit\n upcall_fail\n upcall_free"}]}