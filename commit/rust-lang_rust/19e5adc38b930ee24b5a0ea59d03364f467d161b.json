{"sha": "19e5adc38b930ee24b5a0ea59d03364f467d161b", "node_id": "C_kwDOAAsO6NoAKDE5ZTVhZGMzOGI5MzBlZTI0YjVhMGVhNTlkMDMzNjRmNDY3ZDE2MWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-23T08:04:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-23T08:04:38Z"}, "message": "Auto merge of #13829 - nyurik:explicit-auto-deref, r=lnicola\n\nClippy-fix explicit auto-deref\n\nSeems like these can be safely fixed. With one, I was particularly surprised -- `Some(pats) => &**pats,` in body.rs?\n\n```\ncargo clippy --fix -- -A clippy::all -D clippy::explicit_auto_deref\n```", "tree": {"sha": "3d2565cef4f79358f9b6f7da24314c92ee3a218d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d2565cef4f79358f9b6f7da24314c92ee3a218d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19e5adc38b930ee24b5a0ea59d03364f467d161b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19e5adc38b930ee24b5a0ea59d03364f467d161b", "html_url": "https://github.com/rust-lang/rust/commit/19e5adc38b930ee24b5a0ea59d03364f467d161b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19e5adc38b930ee24b5a0ea59d03364f467d161b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1785f7a21f25ecad44b6a545ff14570d4754607", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1785f7a21f25ecad44b6a545ff14570d4754607", "html_url": "https://github.com/rust-lang/rust/commit/f1785f7a21f25ecad44b6a545ff14570d4754607"}, {"sha": "e341e996f793587ce4ce088d5390c017c4da849d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e341e996f793587ce4ce088d5390c017c4da849d", "html_url": "https://github.com/rust-lang/rust/commit/e341e996f793587ce4ce088d5390c017c4da849d"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "20bf8497cb5822ecc9524d4062f156828f88c652", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -128,7 +128,7 @@ impl fmt::Display for CrateName {\n impl ops::Deref for CrateName {\n     type Target = str;\n     fn deref(&self) -> &str {\n-        &*self.0\n+        &self.0\n     }\n }\n \n@@ -211,7 +211,7 @@ impl fmt::Display for CrateDisplayName {\n impl ops::Deref for CrateDisplayName {\n     type Target = str;\n     fn deref(&self) -> &str {\n-        &*self.crate_name\n+        &self.crate_name\n     }\n }\n "}, {"sha": "f725064cda9e3a5f15b123227549ca5dd28cea4f", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -77,7 +77,7 @@ pub trait SourceDatabase: FileLoader + std::fmt::Debug {\n fn parse_query(db: &dyn SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {\n     let _p = profile::span(\"parse_query\").detail(|| format!(\"{:?}\", file_id));\n     let text = db.file_text(file_id);\n-    SourceFile::parse(&*text)\n+    SourceFile::parse(&text)\n }\n \n /// We don't want to give HIR knowledge of source roots, hence we extract these"}, {"sha": "78fbaa9d7d353a48dbb437714c48a882ae8adc1c", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -372,7 +372,7 @@ impl Body {\n     /// Retrieves all ident patterns this pattern shares the ident with.\n     pub fn ident_patterns_for<'slf>(&'slf self, pat: &'slf PatId) -> &'slf [PatId] {\n         match self.or_pats.get(pat) {\n-            Some(pats) => &**pats,\n+            Some(pats) => pats,\n             None => std::slice::from_ref(pat),\n         }\n     }"}, {"sha": "2617d4288a3a10f203cf6dea1ced4cecd754e9ff", "filename": "crates/hir-def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -47,7 +47,7 @@ pub struct ScopeData {\n impl ExprScopes {\n     pub(crate) fn expr_scopes_query(db: &dyn DefDatabase, def: DefWithBodyId) -> Arc<ExprScopes> {\n         let body = db.body(def);\n-        let mut scopes = ExprScopes::new(&*body);\n+        let mut scopes = ExprScopes::new(&body);\n         scopes.shrink_to_fit();\n         Arc::new(scopes)\n     }"}, {"sha": "55950da9d54f34ed019f711fe8b99b17591eb6f6", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -1246,7 +1246,7 @@ impl<'db> SemanticsImpl<'db> {\n \n     fn with_ctx<F: FnOnce(&mut SourceToDefCtx<'_, '_>) -> T, T>(&self, f: F) -> T {\n         let mut cache = self.s2d_cache.borrow_mut();\n-        let mut ctx = SourceToDefCtx { db: self.db, cache: &mut *cache };\n+        let mut ctx = SourceToDefCtx { db: self.db, cache: &mut cache };\n         f(&mut ctx)\n     }\n "}, {"sha": "5ac18727c196050c48b507e379ded4a59010d010", "filename": "crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -394,7 +394,7 @@ fn inline(\n     // Inline parameter expressions or generate `let` statements depending on whether inlining works or not.\n     for ((pat, param_ty, _), usages, expr) in izip!(params, param_use_nodes, arguments).rev() {\n         // izip confuses RA due to our lack of hygiene info currently losing us type info causing incorrect errors\n-        let usages: &[ast::PathExpr] = &*usages;\n+        let usages: &[ast::PathExpr] = &usages;\n         let expr: &ast::Expr = expr;\n \n         let insert_let_stmt = || {"}, {"sha": "156bbb634e4d5f5b1742198025400d9a7232762e", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -165,7 +165,7 @@ pub trait LineIndexDatabase: base_db::SourceDatabase {\n \n fn line_index(db: &dyn LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n     let text = db.file_text(file_id);\n-    Arc::new(LineIndex::new(&*text))\n+    Arc::new(LineIndex::new(&text))\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]"}, {"sha": "82967883176f9c6be0286912bcd8708089d9aa0b", "filename": "crates/ide-diagnostics/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Ftests.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -102,7 +102,7 @@ pub(crate) fn check_diagnostics_with_config(config: DiagnosticsConfig, ra_fixtur\n     for file_id in files {\n         let diagnostics = super::diagnostics(&db, &config, &AssistResolveStrategy::All, file_id);\n \n-        let expected = extract_annotations(&*db.file_text(file_id));\n+        let expected = extract_annotations(&db.file_text(file_id));\n         let mut actual = diagnostics\n             .into_iter()\n             .map(|d| {"}, {"sha": "6b3c15fba7fe493c64d8e508f0ae675e4ee66261", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -459,7 +459,7 @@ mod tests {\n     #[track_caller]\n     pub(super) fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n-        let mut expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n+        let mut expected = extract_annotations(&analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n         let actual = inlay_hints\n             .into_iter()"}, {"sha": "4e63740098b729a4fdae4e27225236783ab39fb1", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -463,7 +463,7 @@ fn main() {\n         }\n         \"#;\n         let (analysis, file_id) = fixture::file(fixture);\n-        let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n+        let expected = extract_annotations(&analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis\n             .inlay_hints(\n                 &InlayHintsConfig { type_hints: true, ..DISABLED_CONFIG },"}, {"sha": "e78842f5c37ec831b89f988051056f60b58106ad", "filename": "crates/proc-macro-srv/src/abis/abi_1_58/proc_macro/bridge/client.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_58%2Fproc_macro%2Fbridge%2Fclient.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -286,7 +286,7 @@ impl BridgeState<'_> {\n         BRIDGE_STATE.with(|state| {\n             state.replace(BridgeState::InUse, |mut state| {\n                 // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone\n-                f(&mut *state)\n+                f(&mut state)\n             })\n         })\n     }"}, {"sha": "b346c2c18969804ad54fd96a56dbe2fb4238e9e1", "filename": "crates/proc-macro-srv/src/abis/abi_1_63/proc_macro/bridge/client.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_1_63%2Fproc_macro%2Fbridge%2Fclient.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -301,7 +301,7 @@ impl BridgeState<'_> {\n         BRIDGE_STATE.with(|state| {\n             state.replace(BridgeState::InUse, |mut state| {\n                 // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone\n-                f(&mut *state)\n+                f(&mut state)\n             })\n         })\n     }"}, {"sha": "deea0b0dd8f131557c4be9f46c07d36704aaef40", "filename": "crates/profile/src/hprof.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fprofile%2Fsrc%2Fhprof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fprofile%2Fsrc%2Fhprof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fhprof.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -133,7 +133,7 @@ static FILTER: Lazy<RwLock<Filter>> = Lazy::new(Default::default);\n \n fn with_profile_stack<T>(f: impl FnOnce(&mut ProfileStack) -> T) -> T {\n     thread_local!(static STACK: RefCell<ProfileStack> = RefCell::new(ProfileStack::new()));\n-    STACK.with(|it| f(&mut *it.borrow_mut()))\n+    STACK.with(|it| f(&mut it.borrow_mut()))\n }\n \n #[derive(Default, Clone, Debug)]"}, {"sha": "93f44d1ef562aecd04c51f176fdea14fd2f7922f", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -427,7 +427,7 @@ impl CargoWorkspace {\n     }\n \n     pub fn package_flag(&self, package: &PackageData) -> String {\n-        if self.is_unique(&*package.name) {\n+        if self.is_unique(&package.name) {\n             package.name.clone()\n         } else {\n             format!(\"{}:{}\", package.name, package.version)"}, {"sha": "980d92d3df9db8d494a625218aaafd9b1409265b", "filename": "crates/project-model/src/manifest_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fproject-model%2Fsrc%2Fmanifest_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fproject-model%2Fsrc%2Fmanifest_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fmanifest_path.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -40,7 +40,7 @@ impl ops::Deref for ManifestPath {\n     type Target = AbsPath;\n \n     fn deref(&self) -> &Self::Target {\n-        &*self.file\n+        &self.file\n     }\n }\n "}, {"sha": "4316177841326ce4fb8f4c6df7522cc189ade485", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -253,7 +253,7 @@ impl LsifManager<'_> {\n         };\n         let result = folds\n             .into_iter()\n-            .map(|it| to_proto::folding_range(&*text, &line_index, false, it))\n+            .map(|it| to_proto::folding_range(&text, &line_index, false, it))\n             .collect();\n         let folding_id = self.add_vertex(lsif::Vertex::FoldingRangeResult { result });\n         self.add_edge(lsif::Edge::FoldingRange(lsif::EdgeData {"}, {"sha": "76ff2d5859e9fb83bd5a88b279a356a96a7fe07e", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -2178,7 +2178,7 @@ fn manual(fields: &[(&'static str, &'static str, &[&str], &str)]) -> String {\n         .iter()\n         .map(|(field, _ty, doc, default)| {\n             let name = format!(\"rust-analyzer.{}\", field.replace('_', \".\"));\n-            let doc = doc_comment_to_string(*doc);\n+            let doc = doc_comment_to_string(doc);\n             if default.contains('\\n') {\n                 format!(\n                     r#\"[[{}]]{}::"}, {"sha": "7a4d372a285b81826769f1e21671f1f9d41a87d2", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -899,7 +899,7 @@ pub(crate) fn handle_folding_range(\n     let line_folding_only = snap.config.line_folding_only();\n     let res = folds\n         .into_iter()\n-        .map(|it| to_proto::folding_range(&*text, &line_index, line_folding_only, it))\n+        .map(|it| to_proto::folding_range(&text, &line_index, line_folding_only, it))\n         .collect();\n     Ok(Some(res))\n }\n@@ -979,7 +979,7 @@ pub(crate) fn handle_rename(\n     let position = from_proto::file_position(&snap, params.text_document_position)?;\n \n     let mut change =\n-        snap.analysis.rename(position, &*params.new_name)?.map_err(to_proto::rename_error)?;\n+        snap.analysis.rename(position, &params.new_name)?.map_err(to_proto::rename_error)?;\n \n     // this is kind of a hack to prevent double edits from happening when moving files\n     // When a module gets renamed by renaming the mod declaration this causes the file to move"}, {"sha": "a64f9a6f3faacba7563f1b048a6ee95b28abb87c", "filename": "crates/stdx/src/panic_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Fstdx%2Fsrc%2Fpanic_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fpanic_context.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -45,5 +45,5 @@ fn with_ctx(f: impl FnOnce(&mut Vec<String>)) {\n     thread_local! {\n         static CTX: RefCell<Vec<String>> = RefCell::new(Vec::new());\n     }\n-    CTX.with(|ctx| f(&mut *ctx.borrow_mut()));\n+    CTX.with(|ctx| f(&mut ctx.borrow_mut()));\n }"}, {"sha": "d27a7aa0d4d38b3a1d070f646708ec2de58dcee8", "filename": "crates/tt/src/buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Ftt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e5adc38b930ee24b5a0ea59d03364f467d161b/crates%2Ftt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Fbuffer.rs?ref=19e5adc38b930ee24b5a0ea59d03364f467d161b", "patch": "@@ -190,7 +190,7 @@ impl<'a> Cursor<'a> {\n     pub fn token_tree(self) -> Option<TokenTreeRef<'a>> {\n         match self.entry() {\n             Some(Entry::Leaf(tt)) => match tt {\n-                TokenTree::Leaf(leaf) => Some(TokenTreeRef::Leaf(leaf, *tt)),\n+                TokenTree::Leaf(leaf) => Some(TokenTreeRef::Leaf(leaf, tt)),\n                 TokenTree::Subtree(subtree) => Some(TokenTreeRef::Subtree(subtree, Some(tt))),\n             },\n             Some(Entry::Subtree(tt, subtree, _)) => Some(TokenTreeRef::Subtree(subtree, *tt)),"}]}