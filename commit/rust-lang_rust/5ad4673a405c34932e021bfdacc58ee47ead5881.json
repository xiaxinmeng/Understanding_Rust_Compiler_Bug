{"sha": "5ad4673a405c34932e021bfdacc58ee47ead5881", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZDQ2NzNhNDA1YzM0OTMyZTAyMWJmZGFjYzU4ZWU0N2VhZDU4ODE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-02-11T08:13:35Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-02-11T21:13:55Z"}, "message": "Add a no-landing-pads MIR pass\n\nThe pass removes the unwind branch of each terminator, thus moving the responsibility of handling\nthe -Z no-landing-pads flag to a small self-contained pass\u2026 instead of polluting the translator.", "tree": {"sha": "4bf3ca1e0c3f358ce6951115e0dfed6916cea064", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bf3ca1e0c3f358ce6951115e0dfed6916cea064"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ad4673a405c34932e021bfdacc58ee47ead5881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ad4673a405c34932e021bfdacc58ee47ead5881", "html_url": "https://github.com/rust-lang/rust/commit/5ad4673a405c34932e021bfdacc58ee47ead5881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ad4673a405c34932e021bfdacc58ee47ead5881/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1de70d33f7baf12978cfb3de861e61b2a5d6fca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1de70d33f7baf12978cfb3de861e61b2a5d6fca7", "html_url": "https://github.com/rust-lang/rust/commit/1de70d33f7baf12978cfb3de861e61b2a5d6fca7"}], "stats": {"total": 67, "additions": 59, "deletions": 8}, "files": [{"sha": "8f786df3891544999ec63f8444d3036c5a6905ed", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ad4673a405c34932e021bfdacc58ee47ead5881/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad4673a405c34932e021bfdacc58ee47ead5881/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=5ad4673a405c34932e021bfdacc58ee47ead5881", "patch": "@@ -22,7 +22,7 @@ extern crate rustc_front;\n use build;\n use graphviz;\n use pretty;\n-use transform::simplify_cfg;\n+use transform::{simplify_cfg, no_landing_pads};\n use rustc::dep_graph::DepNode;\n use rustc::mir::repr::Mir;\n use hair::cx::Cx;\n@@ -148,6 +148,10 @@ impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n \n         match build_mir(Cx::new(&infcx), implicit_arg_tys, id, span, decl, body) {\n             Ok(mut mir) => {\n+                // FIXME: This should run later rather than earlier (since this is supposed to be a\n+                // codegen option), but we do not want to re-run the whole simplify_cfg pass all\n+                // over again after this pass.\n+                no_landing_pads::NoLandingPads.run_on_mir(&mut mir, self.tcx);\n                 simplify_cfg::SimplifyCfg::new().run_on_mir(&mut mir, self.tcx);\n \n                 let meta_item_list = self.attr"}, {"sha": "017cf3607161aff1061dcdcdce10b39b1046b292", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ad4673a405c34932e021bfdacc58ee47ead5881/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad4673a405c34932e021bfdacc58ee47ead5881/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=5ad4673a405c34932e021bfdacc58ee47ead5881", "patch": "@@ -10,4 +10,5 @@\n \n pub mod simplify_cfg;\n pub mod erase_regions;\n+pub mod no_landing_pads;\n mod util;"}, {"sha": "0d5b0630cd261e86aa0fa838293428b2b8c90783", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5ad4673a405c34932e021bfdacc58ee47ead5881/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad4673a405c34932e021bfdacc58ee47ead5881/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=5ad4673a405c34932e021bfdacc58ee47ead5881", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This pass removes the unwind branch of all the terminators when the no-landing-pads option is\n+//! specified.\n+\n+use rustc::middle::ty;\n+use rustc::mir::repr::*;\n+use rustc::mir::visit::MutVisitor;\n+use rustc::mir::transform::MirPass;\n+\n+pub struct NoLandingPads;\n+\n+impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n+    fn visit_terminator(&mut self, bb: BasicBlock, terminator: &mut Terminator<'tcx>) {\n+        match *terminator {\n+            Terminator::Goto { .. } |\n+            Terminator::Resume |\n+            Terminator::Return |\n+            Terminator::If { .. } |\n+            Terminator::Switch { .. } |\n+            Terminator::SwitchInt { .. } => { /* nothing to do */ },\n+            Terminator::Drop { ref mut unwind, .. } => {\n+                unwind.take();\n+            },\n+            Terminator::Call { ref mut cleanup, .. } => {\n+                cleanup.take();\n+            },\n+        }\n+        self.super_terminator(bb, terminator);\n+    }\n+}\n+\n+impl MirPass for NoLandingPads {\n+    fn run_on_mir<'tcx>(&mut self, mir: &mut Mir<'tcx>, tcx: &ty::ctxt<'tcx>) {\n+        if tcx.sess.no_landing_pads() {\n+            self.visit_mir(mir);\n+        }\n+    }\n+}"}, {"sha": "ebb3492f9628496767a8d8f71aa423f2d4954a36", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ad4673a405c34932e021bfdacc58ee47ead5881/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ad4673a405c34932e021bfdacc58ee47ead5881/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=5ad4673a405c34932e021bfdacc58ee47ead5881", "patch": "@@ -180,11 +180,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     }\n                 }\n \n-                let avoid_invoke = bcx.with_block(|bcx| base::avoid_invoke(bcx));\n                 // Many different ways to call a function handled here\n-                match (is_foreign, avoid_invoke, cleanup, destination) {\n+                match (is_foreign, cleanup, destination) {\n                     // The two cases below are the only ones to use LLVM\u2019s `invoke`.\n-                    (false, false, &Some(cleanup), &None) => {\n+                    (false, &Some(cleanup), &None) => {\n                         let cleanup = self.bcx(cleanup);\n                         let landingpad = self.make_landing_pad(cleanup);\n                         let unreachable_blk = self.unreachable_block();\n@@ -195,7 +194,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                    None,\n                                    Some(attrs));\n                     },\n-                    (false, false, &Some(cleanup), &Some((_, success))) => {\n+                    (false, &Some(cleanup), &Some((_, success))) => {\n                         let cleanup = self.bcx(cleanup);\n                         let landingpad = self.make_landing_pad(cleanup);\n                         let (target, postinvoke) = if must_copy_dest {\n@@ -242,11 +241,11 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             target.br(postinvoketarget.llbb());\n                         }\n                     },\n-                    (false, _, _, &None) => {\n+                    (false, _, &None) => {\n                         bcx.call(callee.immediate(), &llargs[..], None, Some(attrs));\n                         bcx.unreachable();\n                     }\n-                    (false, _, _, &Some((_, target))) => {\n+                    (false, _, &Some((_, target))) => {\n                         let llret = bcx.call(callee.immediate(),\n                                              &llargs[..],\n                                              None,\n@@ -261,7 +260,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         bcx.br(self.llblock(target));\n                     }\n                     // Foreign functions\n-                    (true, _, _, destination) => {\n+                    (true, _, destination) => {\n                         let (dest, _) = ret_dest_ty\n                             .expect(\"return destination is not set\");\n                         bcx = bcx.map_block(|bcx| {"}]}