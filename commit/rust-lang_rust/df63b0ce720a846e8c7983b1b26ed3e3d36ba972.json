{"sha": "df63b0ce720a846e8c7983b1b26ed3e3d36ba972", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNjNiMGNlNzIwYTg0NmU4Yzc5ODNiMWIyNmVkM2UzZDM2YmE5NzI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-12-24T19:29:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-24T19:29:34Z"}, "message": "Rollup merge of #38572 - GuillaumeGomez:join_handle_docs, r=frewsxcv\n\nAdd JoinHandle missing examples\n\nr? @frewsxcv", "tree": {"sha": "6c8ef31dd97f47b5d46c320902941daf2ea45e7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c8ef31dd97f47b5d46c320902941daf2ea45e7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df63b0ce720a846e8c7983b1b26ed3e3d36ba972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df63b0ce720a846e8c7983b1b26ed3e3d36ba972", "html_url": "https://github.com/rust-lang/rust/commit/df63b0ce720a846e8c7983b1b26ed3e3d36ba972", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df63b0ce720a846e8c7983b1b26ed3e3d36ba972/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "637818fd858c30620afe8286f80d2c94b9aee07c", "url": "https://api.github.com/repos/rust-lang/rust/commits/637818fd858c30620afe8286f80d2c94b9aee07c", "html_url": "https://github.com/rust-lang/rust/commit/637818fd858c30620afe8286f80d2c94b9aee07c"}, {"sha": "00645e85043b9830118d4c9aecb59cc2c041b437", "url": "https://api.github.com/repos/rust-lang/rust/commits/00645e85043b9830118d4c9aecb59cc2c041b437", "html_url": "https://github.com/rust-lang/rust/commit/00645e85043b9830118d4c9aecb59cc2c041b437"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "6d8b3cc93d9de47cd0d5d507ba384a0e312c15aa", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/df63b0ce720a846e8c7983b1b26ed3e3d36ba972/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df63b0ce720a846e8c7983b1b26ed3e3d36ba972/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=df63b0ce720a846e8c7983b1b26ed3e3d36ba972", "patch": "@@ -784,7 +784,7 @@ impl<T> JoinInner<T> {\n ///\n /// A `JoinHandle` *detaches* the child thread when it is dropped.\n ///\n-/// Due to platform restrictions, it is not possible to `Clone` this\n+/// Due to platform restrictions, it is not possible to [`Clone`] this\n /// handle: the ability to join a child thread is a uniquely-owned\n /// permission.\n ///\n@@ -795,7 +795,7 @@ impl<T> JoinInner<T> {\n ///\n /// Creation from [`thread::spawn`]:\n ///\n-/// ```rust\n+/// ```\n /// use std::thread;\n ///\n /// let join_handle: thread::JoinHandle<_> = thread::spawn(|| {\n@@ -805,7 +805,7 @@ impl<T> JoinInner<T> {\n ///\n /// Creation from [`thread::Builder::spawn`]:\n ///\n-/// ```rust\n+/// ```\n /// use std::thread;\n ///\n /// let builder = thread::Builder::new();\n@@ -815,22 +815,56 @@ impl<T> JoinInner<T> {\n /// }).unwrap();\n /// ```\n ///\n+/// [`Clone`]: ../../std/clone/trait.Clone.html\n /// [`thread::spawn`]: fn.spawn.html\n /// [`thread::Builder::spawn`]: struct.Builder.html#method.spawn\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct JoinHandle<T>(JoinInner<T>);\n \n impl<T> JoinHandle<T> {\n-    /// Extracts a handle to the underlying thread\n+    /// Extracts a handle to the underlying thread.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(thread_id)]\n+    ///\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new();\n+    ///\n+    /// let join_handle: thread::JoinHandle<_> = builder.spawn(|| {\n+    ///     // some work here\n+    /// }).unwrap();\n+    ///\n+    /// let thread = join_handle.thread();\n+    /// println!(\"thread id: {:?}\", thread.id());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn thread(&self) -> &Thread {\n         &self.0.thread\n     }\n \n     /// Waits for the associated thread to finish.\n     ///\n-    /// If the child thread panics, `Err` is returned with the parameter given\n-    /// to `panic`.\n+    /// If the child thread panics, [`Err`] is returned with the parameter given\n+    /// to [`panic`].\n+    ///\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`panic!`]: ../../std/macro.panic.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new();\n+    ///\n+    /// let join_handle: thread::JoinHandle<_> = builder.spawn(|| {\n+    ///     // some work here\n+    /// }).unwrap();\n+    /// join_handle.join().expect(\"Couldn't join on the associated thread\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn join(mut self) -> Result<T> {\n         self.0.join()"}]}