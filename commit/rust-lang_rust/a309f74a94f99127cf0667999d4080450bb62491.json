{"sha": "a309f74a94f99127cf0667999d4080450bb62491", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMDlmNzRhOTRmOTkxMjdjZjA2Njc5OTlkNDA4MDQ1MGJiNjI0OTE=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-13T02:00:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-14T23:41:46Z"}, "message": "Reorganize evaluation of expr_send/recv to put them closer to expr_assign, to which they are similar", "tree": {"sha": "5db947a5cf1ef3e20d42b1eb5a231ae7f8cc4e73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db947a5cf1ef3e20d42b1eb5a231ae7f8cc4e73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a309f74a94f99127cf0667999d4080450bb62491", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a309f74a94f99127cf0667999d4080450bb62491", "html_url": "https://github.com/rust-lang/rust/commit/a309f74a94f99127cf0667999d4080450bb62491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a309f74a94f99127cf0667999d4080450bb62491/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0842030f3f4cad4590f1266598304f40cb23fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0842030f3f4cad4590f1266598304f40cb23fdb", "html_url": "https://github.com/rust-lang/rust/commit/f0842030f3f4cad4590f1266598304f40cb23fdb"}], "stats": {"total": 63, "additions": 32, "deletions": 31}, "files": [{"sha": "8507298d773d357227f4e5a8fbdae5918849bd3d", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a309f74a94f99127cf0667999d4080450bb62491/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a309f74a94f99127cf0667999d4080450bb62491/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=a309f74a94f99127cf0667999d4080450bb62491", "patch": "@@ -232,6 +232,8 @@ tag expr_ {\n     expr_block(block, ann);\n     expr_assign(@expr /* TODO: @expr|is_lval */, @expr, ann);\n     expr_assign_op(binop, @expr /* TODO: @expr|is_lval */, @expr, ann);\n+    expr_send(@expr /* TODO: @expr|is_lval */, @expr, ann);\n+    expr_recv(@expr /* TODO: @expr|is_lval */, @expr, ann);\n     expr_field(@expr, ident, ann);\n     expr_index(@expr, @expr, ann);\n     expr_path(path, option.t[def], ann);\n@@ -244,8 +246,6 @@ tag expr_ {\n     expr_check_expr(@expr);\n     expr_port(ann);\n     expr_chan(@expr, ann);\n-    expr_send(@expr /* TODO: @expr|is_lval */, @expr, ann);\n-    expr_recv(@expr /* TODO: @expr|is_lval */, @expr, ann);\n }\n \n type lit = spanned[lit_];"}, {"sha": "8de857495c6e055ae3cd771370138efbb602d6db", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a309f74a94f99127cf0667999d4080450bb62491/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a309f74a94f99127cf0667999d4080450bb62491/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=a309f74a94f99127cf0667999d4080450bb62491", "patch": "@@ -143,6 +143,12 @@ type ast_fold[ENV] =\n          @expr lhs, @expr rhs,\n          ann a) -> @expr)                         fold_expr_assign_op,\n \n+     (fn(&ENV e, &span sp,\n+         @expr lhs, @expr rhs, ann a) -> @expr)   fold_expr_send,\n+\n+     (fn(&ENV e, &span sp,\n+         @expr lhs, @expr rhs, ann a) -> @expr)   fold_expr_recv,\n+\n      (fn(&ENV e, &span sp,\n          @expr e, ident i,\n          ann a) -> @expr)                         fold_expr_field,\n@@ -185,11 +191,6 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp,\n          @expr e, ann a) -> @expr)                fold_expr_chan,\n \n-     (fn(&ENV e, &span sp,\n-         @expr lhs, @expr rhs, ann a) -> @expr)   fold_expr_send,\n-\n-     (fn(&ENV e, &span sp,\n-         @expr lhs, @expr rhs, ann a) -> @expr)   fold_expr_recv,\n \n      // Decl folds.\n      (fn(&ENV e, &span sp,\n@@ -664,6 +665,18 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_assign_op(env_, e.span, op, llhs, rrhs, t);\n         }\n \n+        case (ast.expr_send(?lhs, ?rhs, ?t)) {\n+            auto llhs = fold_expr(env_, fld, lhs);\n+            auto rrhs = fold_expr(env_, fld, rhs);\n+            ret fld.fold_expr_send(env_, e.span, llhs, rrhs, t);\n+        }\n+\n+        case (ast.expr_recv(?lhs, ?rhs, ?t)) {\n+            auto llhs = fold_expr(env_, fld, lhs);\n+            auto rrhs = fold_expr(env_, fld, rhs);\n+            ret fld.fold_expr_recv(env_, e.span, llhs, rrhs, t);\n+        }\n+\n         case (ast.expr_field(?e, ?i, ?t)) {\n             auto ee = fold_expr(env_, fld, e);\n             ret fld.fold_expr_field(env_, e.span, ee, i, t);\n@@ -737,18 +750,6 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             auto ee = fold_expr(env_, fld, x);\n             ret fld.fold_expr_chan(env_, e.span, ee, t);\n         }\n-\n-        case (ast.expr_send(?lhs, ?rhs, ?t)) {\n-            auto llhs = fold_expr(env_, fld, lhs);\n-            auto rrhs = fold_expr(env_, fld, rhs);\n-            ret fld.fold_expr_send(env_, e.span, llhs, rrhs, t);\n-        }\n-\n-        case (ast.expr_recv(?lhs, ?rhs, ?t)) {\n-            auto llhs = fold_expr(env_, fld, lhs);\n-            auto rrhs = fold_expr(env_, fld, rhs);\n-            ret fld.fold_expr_recv(env_, e.span, llhs, rrhs, t);\n-        }\n     }\n \n     fail;\n@@ -1237,6 +1238,16 @@ fn identity_fold_expr_assign_op[ENV](&ENV env, &span sp, ast.binop op,\n     ret @respan(sp, ast.expr_assign_op(op, lhs, rhs, a));\n }\n \n+fn identity_fold_expr_send[ENV](&ENV e, &span sp,\n+                                @expr lhs, @expr rhs, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_send(lhs, rhs, a));\n+}\n+\n+fn identity_fold_expr_recv[ENV](&ENV e, &span sp,\n+                                @expr lhs, @expr rhs, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_recv(lhs, rhs, a));\n+}\n+\n fn identity_fold_expr_field[ENV](&ENV env, &span sp,\n                                  @expr e, ident i, ann a) -> @expr {\n     ret @respan(sp, ast.expr_field(e, i, a));\n@@ -1295,16 +1306,6 @@ fn identity_fold_expr_chan[ENV](&ENV e, &span sp, @expr x, ann a) -> @expr {\n     ret @respan(sp, ast.expr_chan(x, a));\n }\n \n-fn identity_fold_expr_send[ENV](&ENV e, &span sp,\n-                                @expr lhs, @expr rhs, ann a) -> @expr {\n-    ret @respan(sp, ast.expr_send(lhs, rhs, a));\n-}\n-\n-fn identity_fold_expr_recv[ENV](&ENV e, &span sp,\n-                                @expr lhs, @expr rhs, ann a) -> @expr {\n-    ret @respan(sp, ast.expr_recv(lhs, rhs, a));\n-}\n-\n // Decl identities.\n \n fn identity_fold_decl_local[ENV](&ENV e, &span sp,\n@@ -1565,6 +1566,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_assign = bind identity_fold_expr_assign[ENV](_,_,_,_,_),\n          fold_expr_assign_op\n                        = bind identity_fold_expr_assign_op[ENV](_,_,_,_,_,_),\n+         fold_expr_send   = bind identity_fold_expr_send[ENV](_,_,_,_,_),\n+         fold_expr_recv   = bind identity_fold_expr_recv[ENV](_,_,_,_,_),\n          fold_expr_field  = bind identity_fold_expr_field[ENV](_,_,_,_,_),\n          fold_expr_index  = bind identity_fold_expr_index[ENV](_,_,_,_,_),\n          fold_expr_path   = bind identity_fold_expr_path[ENV](_,_,_,_,_),\n@@ -1578,8 +1581,6 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n                           = bind identity_fold_expr_check_expr[ENV](_,_,_),\n          fold_expr_port   = bind identity_fold_expr_port[ENV](_,_,_),\n          fold_expr_chan   = bind identity_fold_expr_chan[ENV](_,_,_,_),\n-         fold_expr_send   = bind identity_fold_expr_send[ENV](_,_,_,_,_),\n-         fold_expr_recv   = bind identity_fold_expr_recv[ENV](_,_,_,_,_),\n \n          fold_decl_local  = bind identity_fold_decl_local[ENV](_,_,_),\n          fold_decl_item   = bind identity_fold_decl_item[ENV](_,_,_),"}]}