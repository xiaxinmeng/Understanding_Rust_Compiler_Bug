{"sha": "888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OGFmZDUwZDk3ZjBhOTJmYmJiYWZiNzAzYjMyMjVkYzFiYjFhNzA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-08-20T16:55:07Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-19T08:36:36Z"}, "message": "Unify the names of const eval queries and their return types", "tree": {"sha": "975b74e578bdb912e2f887aba1fe3663647685bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/975b74e578bdb912e2f887aba1fe3663647685bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "html_url": "https://github.com/rust-lang/rust/commit/888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a6be73e619299a22a8ee7f64bb5532395f938d", "url": "https://api.github.com/repos/rust-lang/rust/commits/69a6be73e619299a22a8ee7f64bb5532395f938d", "html_url": "https://github.com/rust-lang/rust/commit/69a6be73e619299a22a8ee7f64bb5532395f938d"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "2cbdc954e2007cc7c6ea28e5621efa83e60ff210", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n use rustc_middle::mir;\n-use rustc_middle::mir::interpret::ConstEvalResult;\n+use rustc_middle::mir::interpret::EvalToConstValueResult;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n@@ -1542,7 +1542,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n-    ) -> ConstEvalResult<'tcx> {\n+    ) -> EvalToConstValueResult<'tcx> {\n         let mut original_values = OriginalQueryValues::default();\n         let canonical = self.canonicalize_query(&(param_env, substs), &mut original_values);\n "}, {"sha": "62d02250fe0b1a5ba187684769484dd49ccb490a", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -27,8 +27,8 @@ CloneTypeFoldableAndLiftImpls! {\n     ErrorHandled,\n }\n \n-pub type ConstEvalRawResult<'tcx> = Result<RawConst<'tcx>, ErrorHandled>;\n-pub type ConstEvalResult<'tcx> = Result<ConstValue<'tcx>, ErrorHandled>;\n+pub type EvalToAllocationRawResult<'tcx> = Result<RawConst<'tcx>, ErrorHandled>;\n+pub type EvalToConstValueResult<'tcx> = Result<ConstValue<'tcx>, ErrorHandled>;\n \n pub fn struct_error<'tcx>(tcx: TyCtxtAt<'tcx>, msg: &str) -> DiagnosticBuilder<'tcx> {\n     struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)"}, {"sha": "71a99cf95f819bdf4b73929691b1f2c730eea8d4", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -118,9 +118,9 @@ use crate::ty::subst::GenericArgKind;\n use crate::ty::{self, Instance, Ty, TyCtxt};\n \n pub use self::error::{\n-    struct_error, CheckInAllocMsg, ConstEvalRawResult, ConstEvalResult, ErrorHandled, InterpError,\n-    InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType, ResourceExhaustionInfo,\n-    UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n+    struct_error, CheckInAllocMsg, ErrorHandled, EvalToAllocationRawResult, EvalToConstValueResult,\n+    InterpError, InterpErrorInfo, InterpResult, InvalidProgramInfo, MachineStopType,\n+    ResourceExhaustionInfo, UndefinedBehaviorInfo, UninitBytesAccess, UnsupportedOpInfo,\n };\n \n pub use self::value::{get_slice_bytes, ConstValue, RawConst, Scalar, ScalarMaybeUninit};"}, {"sha": "d545cf6865d29db40b323ffa87d6b6e4584b40bb", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -1,4 +1,4 @@\n-use super::{ConstEvalResult, ErrorHandled, GlobalId};\n+use super::{ErrorHandled, EvalToConstValueResult, GlobalId};\n \n use crate::mir;\n use crate::ty::subst::{InternalSubsts, SubstsRef};\n@@ -10,7 +10,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Evaluates a constant without providing any substitutions. This is useful to evaluate consts\n     /// that can't take any generic arguments like statics, const items or enum discriminants. If a\n     /// generic parameter is used within the constant `ErrorHandled::ToGeneric` will be returned.\n-    pub fn const_eval_poly(self, def_id: DefId) -> ConstEvalResult<'tcx> {\n+    pub fn const_eval_poly(self, def_id: DefId) -> EvalToConstValueResult<'tcx> {\n         // In some situations def_id will have substitutions within scope, but they aren't allowed\n         // to be used. So we can't use `Instance::mono`, instead we feed unresolved substitutions\n         // into `const_eval` which will return `ErrorHandled::ToGeneric` if any of them are\n@@ -38,7 +38,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n-    ) -> ConstEvalResult<'tcx> {\n+    ) -> EvalToConstValueResult<'tcx> {\n         match ty::Instance::resolve_opt_const_arg(self, param_env, def, substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted };\n@@ -54,7 +54,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         instance: ty::Instance<'tcx>,\n         span: Option<Span>,\n-    ) -> ConstEvalResult<'tcx> {\n+    ) -> EvalToConstValueResult<'tcx> {\n         self.const_eval_global_id(param_env, GlobalId { instance, promoted: None }, span)\n     }\n \n@@ -64,14 +64,14 @@ impl<'tcx> TyCtxt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         cid: GlobalId<'tcx>,\n         span: Option<Span>,\n-    ) -> ConstEvalResult<'tcx> {\n+    ) -> EvalToConstValueResult<'tcx> {\n         // Const-eval shouldn't depend on lifetimes at all, so we can erase them, which should\n         // improve caching of queries.\n         let inputs = self.erase_regions(&param_env.and(cid));\n         if let Some(span) = span {\n-            self.at(span).const_eval_for_ty(inputs)\n+            self.at(span).eval_to_const_value(inputs)\n         } else {\n-            self.const_eval_for_ty(inputs)\n+            self.eval_to_const_value(inputs)\n         }\n     }\n \n@@ -94,7 +94,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Result<&'tcx mir::Allocation, ErrorHandled> {\n         trace!(\"eval_to_allocation: Need to compute {:?}\", gid);\n-        let raw_const = self.const_eval(param_env.and(gid))?;\n+        let raw_const = self.eval_to_allocation_raw(param_env.and(gid))?;\n         Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())\n     }\n }"}, {"sha": "930487153c327159ee95f305daf0c94723a9ddb4", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -12,7 +12,7 @@ use crate::ty::{ParamEnv, Ty, TyCtxt};\n \n use super::{sign_extend, truncate, AllocId, Allocation, InterpResult, Pointer, PointerArithmetic};\n \n-/// Represents the result of a raw const operation, pre-validation.\n+/// Represents the result of const evaluation via the `eval_to_allocation` query.\n #[derive(Clone, HashStable)]\n pub struct RawConst<'tcx> {\n     // the value lives here, at offset 0, and that allocation definitely is a `AllocKind::Memory`"}, {"sha": "ece9dcf66a3215ac91d7537c1b6593bd76a90acf", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -708,8 +708,10 @@ rustc_queries! {\n \n     Other {\n         /// Evaluates a constant and returns the computed allocation.\n-        query const_eval(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n-            -> ConstEvalRawResult<'tcx> {\n+        ///\n+        /// **Do not use this** directly, use the `tcx.eval_static_initializer` wrapper.\n+        query eval_to_allocation_raw(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+            -> EvalToAllocationRawResult<'tcx> {\n             desc { |tcx|\n                 \"const-evaluating `{}`\",\n                 key.value.display(tcx)\n@@ -722,8 +724,8 @@ rustc_queries! {\n         ///\n         /// **Do not use this** directly, use one of the following wrappers: `tcx.const_eval_poly`,\n         /// `tcx.const_eval_resolve`, `tcx.const_eval_instance`, or `tcx.const_eval_global_id`.\n-        query const_eval_for_ty(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n-            -> ConstEvalResult<'tcx> {\n+        query eval_to_const_value(key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+            -> EvalToConstValueResult<'tcx> {\n             desc { |tcx|\n                 \"const-evaluating + checking `{}`\",\n                 key.value.display(tcx)"}, {"sha": "d3a7412ef14e777c2d58da3879f38373a1b28c62", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -14,7 +14,7 @@ use crate::middle::resolve_lifetime::{ObjectLifetimeDefault, Region, ResolveLife\n use crate::middle::stability::{self, DeprecationEntry};\n use crate::mir;\n use crate::mir::interpret::GlobalId;\n-use crate::mir::interpret::{ConstEvalRawResult, ConstEvalResult, ConstValue};\n+use crate::mir::interpret::{ConstValue, EvalToAllocationRawResult, EvalToConstValueResult};\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n use crate::traits::query::{"}, {"sha": "7dae12cf411277d93e4b69a69bb6ccc3f5017d0e", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -200,21 +200,21 @@ fn turn_into_const<'tcx>(\n     );\n     assert!(\n         !is_static || cid.promoted.is_some(),\n-        \"the `const_eval_for_ty` query should not be used for statics, use `const_eval` instead\"\n+        \"the `eval_to_const_value` query should not be used for statics, use `eval_to_allocation` instead\"\n     );\n     // Turn this into a proper constant.\n     op_to_const(&ecx, mplace.into())\n }\n \n-pub fn const_eval_for_ty_provider<'tcx>(\n+pub fn eval_to_const_value_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n-) -> ::rustc_middle::mir::interpret::ConstEvalResult<'tcx> {\n-    // see comment in const_eval_provider for what we're doing here\n+) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n+    // see comment in const_eval_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n         key.param_env = key.param_env.with_user_facing();\n-        match tcx.const_eval_for_ty(key) {\n+        match tcx.eval_to_const_value(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n             // deduplicate calls\n@@ -237,13 +237,13 @@ pub fn const_eval_for_ty_provider<'tcx>(\n         });\n     }\n \n-    tcx.const_eval(key).map(|val| turn_into_const(tcx, val, key))\n+    tcx.eval_to_allocation_raw(key).map(|val| turn_into_const(tcx, val, key))\n }\n \n-pub fn const_eval_provider<'tcx>(\n+pub fn eval_to_allocation_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n-) -> ::rustc_middle::mir::interpret::ConstEvalRawResult<'tcx> {\n+) -> ::rustc_middle::mir::interpret::EvalToAllocationRawResult<'tcx> {\n     // Because the constant is computed twice (once per value of `Reveal`), we are at risk of\n     // reporting the same error twice here. To resolve this, we check whether we can evaluate the\n     // constant in the more restrictive `Reveal::UserFacing`, which most likely already was\n@@ -255,7 +255,7 @@ pub fn const_eval_provider<'tcx>(\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n         key.param_env = key.param_env.with_user_facing();\n-        match tcx.const_eval(key) {\n+        match tcx.eval_to_allocation_raw(key) {\n             // try again with reveal all as requested\n             Err(ErrorHandled::TooGeneric) => {}\n             // deduplicate calls"}, {"sha": "73ca7e0d471ca21dadabef1a32b06eec0c8415f4", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -51,7 +51,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n \n         let gid = GlobalId { instance, promoted: None };\n \n-        let place = self.const_eval(gid)?;\n+        let place = self.eval_to_allocation(gid)?;\n \n         self.copy_op(place.into(), dest)?;\n "}, {"sha": "00d6ffb14eaf265928c9c52dbdcedf33c65cb291", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -875,7 +875,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    pub fn const_eval(\n+    pub fn eval_to_allocation(\n         &self,\n         gid: GlobalId<'tcx>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n@@ -889,7 +889,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         } else {\n             self.param_env\n         };\n-        let val = self.tcx.const_eval(param_env.and(gid))?;\n+        let val = self.tcx.eval_to_allocation_raw(param_env.and(gid))?;\n         self.raw_const_to_mplace(val)\n     }\n "}, {"sha": "8c4bb19866e3f94f30f6c7a8173ab0eee47c2c01", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -553,7 +553,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 let instance = self.resolve(def.did, substs)?;\n-                return Ok(self.const_eval(GlobalId { instance, promoted })?.into());\n+                return Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into());\n             }\n             ty::ConstKind::Infer(..)\n             | ty::ConstKind::Bound(..)"}, {"sha": "bbbb25117c00c31e61b496872a1c26b41a4ddbd2", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888afd50d97f0a92fbbbafb703b3225dc1bb1a70/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=888afd50d97f0a92fbbbafb703b3225dc1bb1a70", "patch": "@@ -52,8 +52,8 @@ pub fn provide(providers: &mut Providers) {\n     transform::provide(providers);\n     monomorphize::partitioning::provide(providers);\n     monomorphize::polymorphize::provide(providers);\n-    providers.const_eval_for_ty = const_eval::const_eval_for_ty_provider;\n-    providers.const_eval = const_eval::const_eval_provider;\n+    providers.eval_to_const_value = const_eval::eval_to_const_value_provider;\n+    providers.eval_to_allocation_raw = const_eval::eval_to_allocation_raw_provider;\n     providers.const_caller_location = const_eval::const_caller_location;\n     providers.destructure_const = |tcx, param_env_and_value| {\n         let (param_env, value) = param_env_and_value.into_parts();"}]}