{"sha": "2d005b58c545faee28d7d5b3b9523ffac19b286b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMDA1YjU4YzU0NWZhZWUyOGQ3ZDViM2I5NTIzZmZhYzE5YjI4NmI=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-11-17T08:29:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-17T08:29:09Z"}, "message": "Merge pull request #2229 from LaurentMazare/master\n\nSimplify the boolean expression suggestion function", "tree": {"sha": "338b8e9aa9e62a723cab510a4b1dc3102105e7fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/338b8e9aa9e62a723cab510a4b1dc3102105e7fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d005b58c545faee28d7d5b3b9523ffac19b286b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaDp3VCRBK7hj4Ov3rIwAAdHIIAA5jB/euWQfF4AfKnjgE98Uu\nwrXN+Zq/MdXvkL9lyrknt6dk12+86GNgR1L4TGeFZE8lAzzYvJ26nPCCL7iV2TJC\nA3p6nt40+zRIeHxUcosimLxDMIo0lNcRrpph+iiHO1HVgrkEeFeeaow+WtKgVNXg\nMwXo/K47/HZn36bGLqK6zvIiQ0RKworGUUVIzGMZ2xgMFs214NJV5GrCJmIeetoG\nzy5GqhuCMPK54QyS6sGbe87BAWEu5B5XivMnz1Hx5vakqJk7AdQCWdXVe+IbVQ0k\nA8GypF8WRXOq6XbKjRcvyyJ+Nf+yq+dyYVK4Xj+q/we5tFYV+X5AbRxW6V0e0vk=\n=dhzd\n-----END PGP SIGNATURE-----\n", "payload": "tree 338b8e9aa9e62a723cab510a4b1dc3102105e7fb\nparent 7ce3b742881b048418daff97a503d99f3fc600d1\nparent 87f5b1f043c4184ee504de4d384213b57ada912d\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1510907349 +0100\ncommitter GitHub <noreply@github.com> 1510907349 +0100\n\nMerge pull request #2229 from LaurentMazare/master\n\nSimplify the boolean expression suggestion function"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d005b58c545faee28d7d5b3b9523ffac19b286b", "html_url": "https://github.com/rust-lang/rust/commit/2d005b58c545faee28d7d5b3b9523ffac19b286b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d005b58c545faee28d7d5b3b9523ffac19b286b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ce3b742881b048418daff97a503d99f3fc600d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce3b742881b048418daff97a503d99f3fc600d1", "html_url": "https://github.com/rust-lang/rust/commit/7ce3b742881b048418daff97a503d99f3fc600d1"}, {"sha": "87f5b1f043c4184ee504de4d384213b57ada912d", "url": "https://api.github.com/repos/rust-lang/rust/commits/87f5b1f043c4184ee504de4d384213b57ada912d", "html_url": "https://github.com/rust-lang/rust/commit/87f5b1f043c4184ee504de4d384213b57ada912d"}], "stats": {"total": 118, "additions": 52, "deletions": 66}, "files": [{"sha": "58c2376c3a1b24f2f5168163cce546fc07722ee9", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 52, "deletions": 66, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/2d005b58c545faee28d7d5b3b9523ffac19b286b/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d005b58c545faee28d7d5b3b9523ffac19b286b/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=2d005b58c545faee28d7d5b3b9523ffac19b286b", "patch": "@@ -159,75 +159,65 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n     }\n }\n \n+fn simplify_not(expr: &Expr, cx: &LateContext) -> Option<String> {\n+    let snip = |e: &Expr| snippet_opt(cx, e.span).expect(\"don't try to improve booleans created by macros\");\n+    match expr.node {\n+        ExprBinary(binop, ref lhs, ref rhs) => {\n+            match binop.node {\n+                BiEq => Some(\" != \"),\n+                BiNe => Some(\" == \"),\n+                BiLt => Some(\" >= \"),\n+                BiGt => Some(\" <= \"),\n+                BiLe => Some(\" > \"),\n+                BiGe => Some(\" < \"),\n+                _ => None,\n+            }.map(|op| format!(\"{}{}{}\", &snip(lhs), op, &snip(rhs)))\n+        },\n+        ExprMethodCall(ref path, _, ref args) if args.len() == 1 => {\n+            METHODS_WITH_NEGATION\n+                .iter().cloned()\n+                .flat_map(|(a, b)| vec![(a, b), (b, a)])\n+                .find(|&(a, _)| a == path.name.as_str())\n+                .map(|(_, neg_method)| format!(\"{}.{}()\", &snip(&args[0]), neg_method))\n+        },\n+        _ => None,\n+    }\n+}\n+\n // The boolean part of the return indicates whether some simplifications have been applied.\n fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> (String, bool) {\n     fn recurse(\n         brackets: bool,\n         cx: &LateContext,\n         suggestion: &Bool,\n         terminals: &[&Expr],\n-        mut s: String,\n+        s: &mut String,\n         simplified: &mut bool,\n-    ) -> String {\n+    ) {\n         use quine_mc_cluskey::Bool::*;\n         let snip = |e: &Expr| snippet_opt(cx, e.span).expect(\"don't try to improve booleans created by macros\");\n         match *suggestion {\n             True => {\n                 s.push_str(\"true\");\n-                s\n             },\n             False => {\n                 s.push_str(\"false\");\n-                s\n             },\n             Not(ref inner) => match **inner {\n                 And(_) | Or(_) => {\n                     s.push('!');\n                     recurse(true, cx, inner, terminals, s, simplified)\n                 },\n-                Term(n) => match terminals[n as usize].node {\n-                    ExprBinary(binop, ref lhs, ref rhs) => {\n-                        let op = match binop.node {\n-                            BiEq => \" != \",\n-                            BiNe => \" == \",\n-                            BiLt => \" >= \",\n-                            BiGt => \" <= \",\n-                            BiLe => \" > \",\n-                            BiGe => \" < \",\n-                            _ => {\n-                                s.push('!');\n-                                return recurse(true, cx, inner, terminals, s, simplified);\n-                            },\n-                        };\n+                Term(n) => {\n+                    if let Some(str) = simplify_not(terminals[n as usize], cx) {\n                         *simplified = true;\n-                        s.push_str(&snip(lhs));\n-                        s.push_str(op);\n-                        s.push_str(&snip(rhs));\n-                        s\n-                    },\n-                    ExprMethodCall(ref path, _, ref args) if args.len() == 1 => {\n-                        let negation = METHODS_WITH_NEGATION\n-                            .iter().cloned()\n-                            .flat_map(|(a, b)| vec![(a, b), (b, a)])\n-                            .find(|&(a, _)| a == path.name.as_str());\n-                        if let Some((_, negation_method)) = negation {\n-                            *simplified = true;\n-                            s.push_str(&snip(&args[0]));\n-                            s.push('.');\n-                            s.push_str(negation_method);\n-                            s.push_str(\"()\");\n-                            s\n-                        } else {\n-                            s.push('!');\n-                            recurse(false, cx, inner, terminals, s, simplified)\n-                        }\n-                    },\n-                    _ => {\n+                        s.push_str(&str)\n+                    } else {\n                         s.push('!');\n                         recurse(false, cx, inner, terminals, s, simplified)\n-                    },\n+                    }\n                 },\n-                _ => {\n+                True | False | Not(_) => {\n                     s.push('!');\n                     recurse(false, cx, inner, terminals, s, simplified)\n                 },\n@@ -236,56 +226,52 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> (String,\n                 if brackets {\n                     s.push('(');\n                 }\n-                if let Or(_) = v[0] {\n-                    s = recurse(true, cx, &v[0], terminals, s, simplified);\n-                } else {\n-                    s = recurse(false, cx, &v[0], terminals, s, simplified);\n-                }\n-                for inner in &v[1..] {\n-                    s.push_str(\" && \");\n+                for (index, inner) in v.iter().enumerate() {\n+                    if index > 0 {\n+                        s.push_str(\" && \");\n+                    }\n                     if let Or(_) = *inner {\n-                        s = recurse(true, cx, inner, terminals, s, simplified);\n+                        recurse(true, cx, inner, terminals, s, simplified);\n                     } else {\n-                        s = recurse(false, cx, inner, terminals, s, simplified);\n+                        recurse(false, cx, inner, terminals, s, simplified);\n                     }\n                 }\n                 if brackets {\n                     s.push(')');\n                 }\n-                s\n             },\n             Or(ref v) => {\n                 if brackets {\n                     s.push('(');\n                 }\n-                s = recurse(false, cx, &v[0], terminals, s, simplified);\n-                for inner in &v[1..] {\n-                    s.push_str(\" || \");\n-                    s = recurse(false, cx, inner, terminals, s, simplified);\n+                for (index, inner) in v.iter().enumerate() {\n+                    if index > 0 {\n+                        s.push_str(\" || \");\n+                    }\n+                    recurse(false, cx, inner, terminals, s, simplified);\n                 }\n                 if brackets {\n                     s.push(')');\n                 }\n-                s\n             },\n             Term(n) => {\n+                let brackets = brackets && match terminals[n as usize].node {\n+                    ExprBinary(..) => true,\n+                    _ => false,\n+                };\n                 if brackets {\n-                    if let ExprBinary(..) = terminals[n as usize].node {\n-                        s.push('(');\n-                    }\n+                    s.push('(');\n                 }\n                 s.push_str(&snip(terminals[n as usize]));\n                 if brackets {\n-                    if let ExprBinary(..) = terminals[n as usize].node {\n-                        s.push(')');\n-                    }\n+                    s.push(')');\n                 }\n-                s\n             },\n         }\n     }\n     let mut simplified = false;\n-    let s = recurse(false, cx, suggestion, terminals, String::new(), &mut simplified);\n+    let mut s = String::new();\n+    recurse(false, cx, suggestion, terminals, &mut s, &mut simplified);\n     (s, simplified)\n }\n "}]}