{"sha": "94497b73a70c7062be0ad81d843c6aa88da0c71b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NDk3YjczYTcwYzcwNjJiZTBhZDgxZDg0M2M2YWE4OGRhMGM3MWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-14T03:00:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-14T03:00:34Z"}, "message": "Auto merge of #41987 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 7 pull requests\n\n- Successful merges: #41612, #41826, #41939, #41946, #41950, #41975, #41979\n- Failed merges:", "tree": {"sha": "ce38906444c4c3b8bc5efa1b7c2cec335aeb8444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce38906444c4c3b8bc5efa1b7c2cec335aeb8444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94497b73a70c7062be0ad81d843c6aa88da0c71b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94497b73a70c7062be0ad81d843c6aa88da0c71b", "html_url": "https://github.com/rust-lang/rust/commit/94497b73a70c7062be0ad81d843c6aa88da0c71b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94497b73a70c7062be0ad81d843c6aa88da0c71b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93dd1cab5d1ea0ceb178db424d4c907a20584b16", "url": "https://api.github.com/repos/rust-lang/rust/commits/93dd1cab5d1ea0ceb178db424d4c907a20584b16", "html_url": "https://github.com/rust-lang/rust/commit/93dd1cab5d1ea0ceb178db424d4c907a20584b16"}, {"sha": "7294ce10b64b192e70153ca9d0a9276dcaf4832c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7294ce10b64b192e70153ca9d0a9276dcaf4832c", "html_url": "https://github.com/rust-lang/rust/commit/7294ce10b64b192e70153ca9d0a9276dcaf4832c"}], "stats": {"total": 277, "additions": 196, "deletions": 81}, "files": [{"sha": "776a268aa8de19fffaa826970bc303d8fe45b073", "filename": "src/Cargo.lock", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -27,7 +27,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -73,9 +73,9 @@ name = \"bootstrap\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -119,10 +119,10 @@ dependencies = [\n \n [[package]]\n name = \"cmake\"\n-version = \"0.1.22\"\n+version = \"0.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -140,7 +140,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -194,7 +194,7 @@ name = \"flate\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -203,7 +203,7 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.45\"\n+version = \"0.3.46\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -473,7 +473,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -606,7 +606,7 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n@@ -616,7 +616,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -660,7 +660,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -754,7 +754,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -782,7 +782,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -831,7 +831,7 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n@@ -997,12 +997,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n \"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n \"checksum clap 2.22.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e17a4a72ffea176f77d6e2db609c6c919ef221f23862c9915e687fb54d833485\"\n-\"checksum cmake 0.1.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d18d68987ed4c516dcc3e7913659bfa4076f5182eea4a7e0038bb060953e76ac\"\n+\"checksum cmake 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92278eb79412c8f75cfc89e707a1bb3a6490b68f7f2e78d15c774f30fe701122\"\n \"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n \"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum gcc 0.3.45 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40899336fb50db0c78710f53e87afc54d8c7266fb76262fecc78ca1a7f09deae\"\n+\"checksum gcc 0.3.46 (registry+https://github.com/rust-lang/crates.io-index)\" = \"181e3cebba1d663bd92eb90e2da787e10597e027eb00de8d742b260a7850948f\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum handlebars 0.25.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"663e1728d8037fb0d4e13bcd1b1909fb5d913690a9929eb385922df157c2ff8f\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\""}, {"sha": "cc560e0172e3a3fa63a6e92e2bc873b028d49633", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -30,11 +30,11 @@ test = false\n \n [dependencies]\n build_helper = { path = \"../build_helper\" }\n-cmake = \"0.1.17\"\n+cmake = \"0.1.23\"\n filetime = \"0.1\"\n num_cpus = \"1.0\"\n toml = \"0.1\"\n getopts = \"0.2\"\n rustc-serialize = \"0.3\"\n-gcc = \"0.3.38\"\n+gcc = \"0.3.46\"\n libc = \"0.2\""}, {"sha": "6cb1d1fc4bf05b47c14c968bd56f16e7da135faf", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -108,6 +108,7 @@ pub fn llvm(build: &Build, target: &str) {\n         cfg.define(\"LLVM_USE_CRT_DEBUG\", \"MT\");\n         cfg.define(\"LLVM_USE_CRT_RELEASE\", \"MT\");\n         cfg.define(\"LLVM_USE_CRT_RELWITHDEBINFO\", \"MT\");\n+        cfg.static_crt(true);\n     }\n \n     if target.starts_with(\"i686\") {"}, {"sha": "6942f5fb67b60069143f5ed301cffb6e0fef0961", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -235,6 +235,42 @@ pub trait Drop {\n /// }\n /// ```\n ///\n+/// Here is an example of the same `Point` struct implementing the `Add` trait\n+/// using generics.\n+///\n+/// ```\n+/// use std::ops::Add;\n+///\n+/// #[derive(Debug)]\n+/// struct Point<T> {\n+///     x: T,\n+///     y: T,\n+/// }\n+///\n+/// // Notice that the implementation uses the `Output` associated type\n+/// impl<T: Add<Output=T>> Add for Point<T> {\n+///     type Output = Point<T>;\n+///\n+///     fn add(self, other: Point<T>) -> Point<T> {\n+///         Point {\n+///             x: self.x + other.x,\n+///             y: self.y + other.y,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl<T: PartialEq> PartialEq for Point<T> {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     assert_eq!(Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n+///                Point { x: 3, y: 3 });\n+/// }\n+/// ```\n+///\n /// Note that `RHS = Self` by default, but this is not mandatory. For example,\n /// [std::time::SystemTime] implements `Add<Duration>`, which permits\n /// operations of the form `SystemTime = SystemTime + Duration`."}, {"sha": "368fb7a88685b00d461a33a87ba51485920c9e81", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -1222,27 +1222,26 @@ fn foo() {\n \"##,\n \n E0435: r##\"\n-A non-constant value was used to initialise a constant.\n+A non-constant value was used in a constant expression.\n \n Erroneous code example:\n \n ```compile_fail,E0435\n-let foo = 42u32;\n-const FOO : u32 = foo; // error: attempt to use a non-constant value in a\n-                       //        constant\n+let foo = 42;\n+let a: [u8; foo]; // error: attempt to use a non-constant value in a constant\n ```\n \n To fix this error, please replace the value with a constant. Example:\n \n ```\n-const FOO : u32 = 42u32; // ok!\n+let a: [u8; 42]; // ok!\n ```\n \n Or:\n \n ```\n-const OTHER_FOO : u32 = 42u32;\n-const FOO : u32 = OTHER_FOO; // ok!\n+const FOO: usize = 42;\n+let a: [u8; FOO]; // ok!\n ```\n \"##,\n \n@@ -1560,7 +1559,7 @@ register_diagnostics! {\n //  E0157, unused error code\n //  E0257,\n //  E0258,\n-    E0402, // cannot use an outer type parameter in this context\n+//  E0402, // cannot use an outer type parameter in this context\n //  E0406, merged into 420\n //  E0410, merged into 408\n //  E0413, merged into 530"}, {"sha": "774e84de36638d84ba4abd4a7773081b1360734a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -127,8 +127,6 @@ impl Ord for BindingError {\n enum ResolutionError<'a> {\n     /// error E0401: can't use type parameters from outer function\n     TypeParametersFromOuterFunction,\n-    /// error E0402: cannot use an outer type parameter in this context\n-    OuterTypeParameterContext,\n     /// error E0403: the name is already used for a type parameter in this type parameter list\n     NameAlreadyUsedInTypeParameterList(Name, &'a Span),\n     /// error E0407: method is not a member of trait\n@@ -187,12 +185,6 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err.span_label(span, \"use of type variable from outer function\");\n             err\n         }\n-        ResolutionError::OuterTypeParameterContext => {\n-            struct_span_err!(resolver.session,\n-                             span,\n-                             E0402,\n-                             \"cannot use an outer type parameter in this context\")\n-        }\n         ResolutionError::NameAlreadyUsedInTypeParameterList(name, first_use_span) => {\n              let mut err = struct_span_err!(resolver.session,\n                                             span,\n@@ -1671,16 +1663,16 @@ impl<'a> Resolver<'a> {\n                             this.check_proc_macro_attrs(&trait_item.attrs);\n \n                             match trait_item.node {\n-                                TraitItemKind::Const(_, ref default) => {\n+                                TraitItemKind::Const(ref ty, ref default) => {\n+                                    this.visit_ty(ty);\n+\n                                     // Only impose the restrictions of\n-                                    // ConstRibKind if there's an actual constant\n+                                    // ConstRibKind for an actual constant\n                                     // expression in a provided default.\n-                                    if default.is_some() {\n+                                    if let Some(ref expr) = *default{\n                                         this.with_constant_rib(|this| {\n-                                            visit::walk_trait_item(this, trait_item)\n+                                            this.visit_expr(expr);\n                                         });\n-                                    } else {\n-                                        visit::walk_trait_item(this, trait_item)\n                                     }\n                                 }\n                                 TraitItemKind::Method(ref sig, _) => {\n@@ -1709,9 +1701,13 @@ impl<'a> Resolver<'a> {\n                 });\n             }\n \n-            ItemKind::Const(..) | ItemKind::Static(..) => {\n-                self.with_constant_rib(|this| {\n-                    visit::walk_item(this, item);\n+            ItemKind::Static(ref ty, _, ref expr) |\n+            ItemKind::Const(ref ty, ref expr) => {\n+                self.with_item_rib(|this| {\n+                    this.visit_ty(ty);\n+                    this.with_constant_rib(|this| {\n+                        this.visit_expr(expr);\n+                    });\n                 });\n             }\n \n@@ -1782,13 +1778,21 @@ impl<'a> Resolver<'a> {\n         self.label_ribs.pop();\n     }\n \n+    fn with_item_rib<F>(&mut self, f: F)\n+        where F: FnOnce(&mut Resolver)\n+    {\n+        self.ribs[ValueNS].push(Rib::new(ItemRibKind));\n+        self.ribs[TypeNS].push(Rib::new(ItemRibKind));\n+        f(self);\n+        self.ribs[TypeNS].pop();\n+        self.ribs[ValueNS].pop();\n+    }\n+\n     fn with_constant_rib<F>(&mut self, f: F)\n         where F: FnOnce(&mut Resolver)\n     {\n         self.ribs[ValueNS].push(Rib::new(ConstantItemRibKind));\n-        self.ribs[TypeNS].push(Rib::new(ConstantItemRibKind));\n         f(self);\n-        self.ribs[TypeNS].pop();\n         self.ribs[ValueNS].pop();\n     }\n \n@@ -2755,7 +2759,8 @@ impl<'a> Resolver<'a> {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | MethodRibKind(_) | ClosureRibKind(..) |\n-                        ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind => {\n+                        ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind |\n+                        ConstantItemRibKind => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind => {\n@@ -2767,14 +2772,6 @@ impl<'a> Resolver<'a> {\n                             }\n                             return Def::Err;\n                         }\n-                        ConstantItemRibKind => {\n-                            // see #9186\n-                            if record_used {\n-                                resolve_error(self, span,\n-                                              ResolutionError::OuterTypeParameterContext);\n-                            }\n-                            return Def::Err;\n-                        }\n                     }\n                 }\n             }"}, {"sha": "111ae4ede277a9fb820dd64bb9db956b898180db", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -13,6 +13,7 @@ use std::io::prelude::*;\n use std::io;\n use std::path::Path;\n use std::str;\n+use html::markdown::{Markdown, RenderType};\n \n #[derive(Clone)]\n pub struct ExternalHtml{\n@@ -28,17 +29,26 @@ pub struct ExternalHtml{\n }\n \n impl ExternalHtml {\n-    pub fn load(in_header: &[String], before_content: &[String], after_content: &[String])\n+    pub fn load(in_header: &[String], before_content: &[String], after_content: &[String],\n+                md_before_content: &[String], md_after_content: &[String], render: RenderType)\n             -> Option<ExternalHtml> {\n         load_external_files(in_header)\n             .and_then(|ih|\n                 load_external_files(before_content)\n                     .map(|bc| (ih, bc))\n             )\n+            .and_then(|(ih, bc)|\n+                load_external_files(md_before_content)\n+                    .map(|m_bc| (ih, format!(\"{}{}\", bc, Markdown(&m_bc, render))))\n+            )\n             .and_then(|(ih, bc)|\n                 load_external_files(after_content)\n                     .map(|ac| (ih, bc, ac))\n             )\n+            .and_then(|(ih, bc, ac)|\n+                load_external_files(md_after_content)\n+                    .map(|m_ac| (ih, bc, format!(\"{}{}\", ac, Markdown(&m_ac, render))))\n+            )\n             .map(|(ih, bc, ac)|\n                 ExternalHtml {\n                     in_header: ih,"}, {"sha": "c115a6ccba609b3b0788dc2e9a6e288090985a0f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -943,9 +943,9 @@\n                         if (hasClass(main, 'content')) {\n                             removeClass(main, 'hidden');\n                         }\n-                        var search = document.getElementById('search');\n-                        if (hasClass(main, 'content')) {\n-                            addClass(main, 'hidden');\n+                        var search_c = document.getElementById('search');\n+                        if (hasClass(search_c, 'content')) {\n+                            addClass(search_c, 'hidden');\n                         }\n                     }\n                     // Revert to the previous title manually since the History\n@@ -959,7 +959,11 @@\n                     // perform the search. This will empty the bar if there's\n                     // nothing there, which lets you really go back to a\n                     // previous state with nothing in the bar.\n-                    document.getElementsByClassName('search-input')[0].value = params.search;\n+                    if (params.search) {\n+                        document.getElementsByClassName('search-input')[0].value = params.search;\n+                    } else {\n+                        document.getElementsByClassName('search-input')[0].value = '';\n+                    }\n                     // Some browsers fire 'onpopstate' for every page load\n                     // (Chrome), while others fire the event only when actually\n                     // popping a state (Firefox), which is why search() is"}, {"sha": "bbaa7bc2fb65e99492db0f4c85dc1b7575a528f0", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -160,6 +160,14 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                         \"files to include inline between the content and </body> of a rendered \\\n                          Markdown file or generated documentation\",\n                         \"FILES\")),\n+        unstable(optmulti(\"\", \"markdown-before-content\",\n+                          \"files to include inline between <body> and the content of a rendered \\\n+                           Markdown file or generated documentation\",\n+                          \"FILES\")),\n+        unstable(optmulti(\"\", \"markdown-after-content\",\n+                          \"files to include inline between the content and </body> of a rendered \\\n+                           Markdown file or generated documentation\",\n+                          \"FILES\")),\n         stable(optopt(\"\", \"markdown-playground-url\",\n                       \"URL to send code snippets to\", \"URL\")),\n         stable(optflag(\"\", \"markdown-no-toc\", \"don't include table of contents\")),\n@@ -275,7 +283,10 @@ pub fn main_args(args: &[String]) -> isize {\n     let external_html = match ExternalHtml::load(\n             &matches.opt_strs(\"html-in-header\"),\n             &matches.opt_strs(\"html-before-content\"),\n-            &matches.opt_strs(\"html-after-content\")) {\n+            &matches.opt_strs(\"html-after-content\"),\n+            &matches.opt_strs(\"markdown-before-content\"),\n+            &matches.opt_strs(\"markdown-after-content\"),\n+            render_type) {\n         Some(eh) => eh,\n         None => return 3,\n     };"}, {"sha": "a83b19c7334e7b70b33dac1ad6db07d5b3c3ae7d", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -754,9 +754,7 @@ impl<'a> StringReader<'a> {\n         // integer literal followed by field/method access or a range pattern\n         // (`0..2` and `12.foo()`)\n         if self.ch_is('.') && !self.nextch_is('.') &&\n-           !self.nextch()\n-                .unwrap_or('\\0')\n-                .is_xid_start() {\n+           !ident_start(self.nextch()) {\n             // might have stuff after the ., and if it does, it needs to start\n             // with a number\n             self.bump();"}, {"sha": "1ef3b9128e1baaed61b42d5b0de79dee100acf17", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -1 +1 @@\n-Subproject commit cf85b5a8da7853c4de5cc57766da8b7988c06461\n+Subproject commit 1ef3b9128e1baaed61b42d5b0de79dee100acf17"}, {"sha": "70663f30e8f9e1a579ea103b1eb9492b277b7d39", "filename": "src/rustllvm/llvm-rebuild-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Frustllvm%2Fllvm-rebuild-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Frustllvm%2Fllvm-rebuild-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-rebuild-trigger?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be (optionally) cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2017-05-06\n+2017-05-13"}, {"sha": "b15bf44fbd063dcdbd0c5af28929d175a731cb6e", "filename": "src/test/compile-fail/E0435.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2FE0435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2FE0435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0435.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -10,6 +10,6 @@\n \n fn main () {\n     let foo = 42u32;\n-    const FOO : u32 = foo; //~ ERROR E0435\n+    let _: [u8; foo]; //~ ERROR E0435\n     //~| NOTE non-constant used with constant\n }"}, {"sha": "e284a61eb2daa3bf9d74c9d079629681749a4efa", "filename": "src/test/compile-fail/associated-const-type-parameter-arrays-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays-2.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -26,7 +26,7 @@ impl Foo for Def {\n \n pub fn test<A: Foo, B: Foo>() {\n     let _array = [4; <A as Foo>::Y];\n-    //~^ ERROR cannot use an outer type parameter in this context [E0402]\n+    //~^ ERROR the trait bound `A: Foo` is not satisfied [E0277]\n }\n \n fn main() {"}, {"sha": "848ea65a9cfd15d9a6d1a2f8e9213ef7cac55a27", "filename": "src/test/compile-fail/associated-const-type-parameter-arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -26,7 +26,7 @@ impl Foo for Def {\n \n pub fn test<A: Foo, B: Foo>() {\n     let _array: [u32; <A as Foo>::Y];\n-    //~^ ERROR cannot use an outer type parameter in this context [E0402]\n+    //~^ ERROR the trait bound `A: Foo` is not satisfied [E0277]\n }\n \n fn main() {"}, {"sha": "6fb497092d2173cc45902dd2f2c7aa83e48c1029", "filename": "src/test/compile-fail/inner-static-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finner-static-type-parameter.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -14,7 +14,7 @@ enum Bar<T> { What } //~ ERROR parameter `T` is never used\n \n fn foo<T>() {\n     static a: Bar<T> = Bar::What;\n-    //~^ ERROR cannot use an outer type parameter in this context\n+//~^ ERROR can't use type parameters from outer function; try using a local type parameter instead\n }\n \n fn main() {"}, {"sha": "782b20574387136b062516765251a55c18b2c9dc", "filename": "src/test/compile-fail/issue-27433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let foo = 42u32;\n     const FOO : u32 = foo;\n-                   //~^ ERROR attempt to use a non-constant value in a constant\n+                   //~^ ERROR can't capture dynamic environment\n }"}, {"sha": "1742cb4fb7214b5b243121c176d20757f419c927", "filename": "src/test/compile-fail/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521-2.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let foo = 100;\n \n     static y: isize = foo + 1;\n-    //~^ ERROR attempt to use a non-constant value in a constant\n+    //~^ ERROR can't capture dynamic environment\n \n     println!(\"{}\", y);\n }"}, {"sha": "fe46877e8d34073f868cbdc647095245b9f6839b", "filename": "src/test/compile-fail/issue-3668-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668-2.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -10,7 +10,7 @@\n \n fn f(x:isize) {\n     static child: isize = x + 1;\n-    //~^ ERROR attempt to use a non-constant value in a constant\n+    //~^ ERROR can't capture dynamic environment\n }\n \n fn main() {}"}, {"sha": "00f64414a9e72eaca70a8fca55f22d510e446b88", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -16,7 +16,7 @@ trait PTrait {\n impl PTrait for P {\n    fn getChildOption(&self) -> Option<Box<P>> {\n        static childVal: Box<P> = self.child.get();\n-       //~^ ERROR attempt to use a non-constant value in a constant\n+       //~^ ERROR can't capture dynamic environment\n        panic!();\n    }\n }"}, {"sha": "aa0750230649da8ea1f8a2d8e9e42ba5da066787", "filename": "src/test/compile-fail/issue-39559-2.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-39559-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-39559-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39559-2.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Dim {\n+    fn dim() -> usize;\n+}\n+\n+enum Dim3 {}\n+\n+impl Dim for Dim3 {\n+    fn dim() -> usize {\n+        3\n+    }\n+}\n+\n+fn main() {\n+    let array: [usize; Dim3::dim()]\n+    //~^ ERROR calls in constants are limited to constant functions\n+        = [0; Dim3::dim()];\n+        //~^ ERROR calls in constants are limited to constant functions\n+}"}, {"sha": "871ecf269ceec4b926448bbeb08764e460ad0ba7", "filename": "src/test/compile-fail/issue-39559.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-39559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fcompile-fail%2Fissue-39559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39559.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -22,12 +22,7 @@ impl Dim for Dim3 {\n \n pub struct Vector<T, D: Dim> {\n     entries: [T; D::dim()]\n-    //~^ ERROR cannot use an outer type parameter in this context\n+    //~^ ERROR no associated item named `dim` found for type `D` in the current scope\n }\n \n-fn main() {\n-    let array: [usize; Dim3::dim()]\n-    //~^ ERROR calls in constants are limited to constant functions\n-        = [0; Dim3::dim()];\n-        //~^ ERROR calls in constants are limited to constant functions\n-}\n+fn main() {}"}, {"sha": "df7d9aa374dce948bd094241a51566c7693a9fd2", "filename": "src/test/parse-fail/underscore-suffix-for-float.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fparse-fail%2Funderscore-suffix-for-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Fparse-fail%2Funderscore-suffix-for-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Funderscore-suffix-for-float.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let a = 42._; //~ ERROR unexpected token: `_`\n+}"}, {"sha": "df2083530646e3404c7825a4e638adf8a4a6c9b6", "filename": "src/test/run-pass/associated-const-type-parameters.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Frun-pass%2Fassociated-const-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Frun-pass%2Fassociated-const-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-type-parameters.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -37,6 +37,10 @@ fn sub<A: Foo, B: Foo>() -> i32 {\n     A::X - B::X\n }\n \n+trait Bar: Foo {\n+    const Y: i32 = Self::X;\n+}\n+\n fn main() {\n     assert_eq!(11, Abc::X);\n     assert_eq!(97, Def::X);"}, {"sha": "af912564211014cb758fd659eb5e8f6fb418a0da", "filename": "src/test/run-pass/underscore-method-after-integer.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Frun-pass%2Funderscore-method-after-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94497b73a70c7062be0ad81d843c6aa88da0c71b/src%2Ftest%2Frun-pass%2Funderscore-method-after-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funderscore-method-after-integer.rs?ref=94497b73a70c7062be0ad81d843c6aa88da0c71b", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Tr : Sized {\n+    fn _method_on_numbers(self) {}\n+}\n+\n+impl Tr for i32 {}\n+\n+fn main() {\n+    42._method_on_numbers();\n+}"}]}