{"sha": "5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNGZjODIxNDI3OWYyZmZhZGJmMmNjM2E0YzIyYjc0OGMxN2JkMTU=", "commit": {"author": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-01-11T10:13:45Z"}, "committer": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-01-13T10:19:01Z"}, "message": "Add unit tests for exact_chunks/exact_chunks_mut\n\nThese are basically modified copies of the chunks/chunks_mut tests.", "tree": {"sha": "2668eb06044df6eef7a97c232c5bd096201fe0d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2668eb06044df6eef7a97c232c5bd096201fe0d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15", "html_url": "https://github.com/rust-lang/rust/commit/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15/comments", "author": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed774838b372bf532a3fb221601bdcd1c8856277", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed774838b372bf532a3fb221601bdcd1c8856277", "html_url": "https://github.com/rust-lang/rust/commit/ed774838b372bf532a3fb221601bdcd1c8856277"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "eee229bc6fdfa7aef1d6a908dcfa319a39cb25c1", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15", "patch": "@@ -30,6 +30,7 @@\n #![feature(string_retain)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n+#![feature(exact_chunks)]\n \n extern crate alloc_system;\n extern crate std_unicode;"}, {"sha": "5a3e5e6cb780da916cb73f72556d2f8c0bbd2c8d", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15", "patch": "@@ -910,6 +910,30 @@ fn test_chunksator_0() {\n     let _it = v.chunks(0);\n }\n \n+#[test]\n+fn test_exact_chunksator() {\n+    let v = &[1, 2, 3, 4, 5];\n+\n+    assert_eq!(v.exact_chunks(2).len(), 2);\n+\n+    let chunks: &[&[_]] = &[&[1, 2], &[3, 4]];\n+    assert_eq!(v.exact_chunks(2).collect::<Vec<_>>(), chunks);\n+    let chunks: &[&[_]] = &[&[1, 2, 3]];\n+    assert_eq!(v.exact_chunks(3).collect::<Vec<_>>(), chunks);\n+    let chunks: &[&[_]] = &[];\n+    assert_eq!(v.exact_chunks(6).collect::<Vec<_>>(), chunks);\n+\n+    let chunks: &[&[_]] = &[&[3, 4], &[1, 2]];\n+    assert_eq!(v.exact_chunks(2).rev().collect::<Vec<_>>(), chunks);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_exact_chunksator_0() {\n+    let v = &[1, 2, 3, 4];\n+    let _it = v.exact_chunks(0);\n+}\n+\n #[test]\n fn test_reverse_part() {\n     let mut values = [1, 2, 3, 4, 5];\n@@ -1146,6 +1170,38 @@ fn test_mut_chunks_0() {\n     let _it = v.chunks_mut(0);\n }\n \n+#[test]\n+fn test_mut_exact_chunks() {\n+    let mut v = [0, 1, 2, 3, 4, 5, 6];\n+    assert_eq!(v.exact_chunks_mut(2).len(), 3);\n+    for (i, chunk) in v.exact_chunks_mut(3).enumerate() {\n+        for x in chunk {\n+            *x = i as u8;\n+        }\n+    }\n+    let result = [0, 0, 0, 1, 1, 1, 6];\n+    assert_eq!(v, result);\n+}\n+\n+#[test]\n+fn test_mut_exact_chunks_rev() {\n+    let mut v = [0, 1, 2, 3, 4, 5, 6];\n+    for (i, chunk) in v.exact_chunks_mut(3).rev().enumerate() {\n+        for x in chunk {\n+            *x = i as u8;\n+        }\n+    }\n+    let result = [1, 1, 1, 0, 0, 0, 6];\n+    assert_eq!(v, result);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_mut_exact_chunks_0() {\n+    let mut v = [1, 2, 3, 4];\n+    let _it = v.exact_chunks_mut(0);\n+}\n+\n #[test]\n fn test_mut_last() {\n     let mut x = [1, 2, 3, 4, 5];"}, {"sha": "2c0009569d75d60dccb391fe2a3a79332f96f929", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15", "patch": "@@ -42,6 +42,7 @@\n #![feature(try_from)]\n #![feature(try_trait)]\n #![feature(unique)]\n+#![feature(exact_chunks)]\n \n extern crate core;\n extern crate test;"}, {"sha": "a89a88ac0af1e05498781d7da22d4b2c40d47b08", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=5f4fc8214279f2ffadbf2cc3a4c22b748c17bd15", "patch": "@@ -202,6 +202,110 @@ fn test_chunks_mut_zip() {\n     assert_eq!(v1, [13, 14, 19, 20, 14]);\n }\n \n+#[test]\n+fn test_exact_chunks_count() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let c = v.exact_chunks(3);\n+    assert_eq!(c.count(), 2);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4];\n+    let c2 = v2.exact_chunks(2);\n+    assert_eq!(c2.count(), 2);\n+\n+    let v3: &[i32] = &[];\n+    let c3 = v3.exact_chunks(2);\n+    assert_eq!(c3.count(), 0);\n+}\n+\n+#[test]\n+fn test_exact_chunks_nth() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let mut c = v.exact_chunks(2);\n+    assert_eq!(c.nth(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next().unwrap(), &[4, 5]);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4, 5, 6];\n+    let mut c2 = v2.exact_chunks(3);\n+    assert_eq!(c2.nth(1).unwrap(), &[3, 4, 5]);\n+    assert_eq!(c2.next(), None);\n+}\n+\n+#[test]\n+fn test_exact_chunks_last() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let c = v.exact_chunks(2);\n+    assert_eq!(c.last().unwrap(), &[4, 5]);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4];\n+    let c2 = v2.exact_chunks(2);\n+    assert_eq!(c2.last().unwrap(), &[2, 3]);\n+}\n+\n+#[test]\n+fn test_exact_chunks_zip() {\n+    let v1: &[i32] = &[0, 1, 2, 3, 4];\n+    let v2: &[i32] = &[6, 7, 8, 9, 10];\n+\n+    let res = v1.exact_chunks(2)\n+        .zip(v2.exact_chunks(2))\n+        .map(|(a, b)| a.iter().sum::<i32>() + b.iter().sum::<i32>())\n+        .collect::<Vec<_>>();\n+    assert_eq!(res, vec![14, 22]);\n+}\n+\n+#[test]\n+fn test_exact_chunks_mut_count() {\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let c = v.exact_chunks_mut(3);\n+    assert_eq!(c.count(), 2);\n+\n+    let v2: &mut [i32] = &mut [0, 1, 2, 3, 4];\n+    let c2 = v2.exact_chunks_mut(2);\n+    assert_eq!(c2.count(), 2);\n+\n+    let v3: &mut [i32] = &mut [];\n+    let c3 = v3.exact_chunks_mut(2);\n+    assert_eq!(c3.count(), 0);\n+}\n+\n+#[test]\n+fn test_exact_chunks_mut_nth() {\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let mut c = v.exact_chunks_mut(2);\n+    assert_eq!(c.nth(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next().unwrap(), &[4, 5]);\n+\n+    let v2: &mut [i32] = &mut [0, 1, 2, 3, 4, 5, 6];\n+    let mut c2 = v2.exact_chunks_mut(3);\n+    assert_eq!(c2.nth(1).unwrap(), &[3, 4, 5]);\n+    assert_eq!(c2.next(), None);\n+}\n+\n+#[test]\n+fn test_exact_chunks_mut_last() {\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let c = v.exact_chunks_mut(2);\n+    assert_eq!(c.last().unwrap(), &[4, 5]);\n+\n+    let v2: &mut [i32] = &mut [0, 1, 2, 3, 4];\n+    let c2 = v2.exact_chunks_mut(2);\n+    assert_eq!(c2.last().unwrap(), &[2, 3]);\n+}\n+\n+#[test]\n+fn test_exact_chunks_mut_zip() {\n+    let v1: &mut [i32] = &mut [0, 1, 2, 3, 4];\n+    let v2: &[i32] = &[6, 7, 8, 9, 10];\n+\n+    for (a, b) in v1.exact_chunks_mut(2).zip(v2.exact_chunks(2)) {\n+        let sum = b.iter().sum::<i32>();\n+        for v in a {\n+            *v += sum;\n+        }\n+    }\n+    assert_eq!(v1, [13, 14, 19, 20, 4]);\n+}\n+\n #[test]\n fn test_windows_count() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];"}]}