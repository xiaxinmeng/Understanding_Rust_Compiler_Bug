{"sha": "3d192ace34bcb13d3c033735cd7415260040c252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMTkyYWNlMzRiY2IxM2QzYzAzMzczNWNkNzQxNTI2MDA0MGMyNTI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-08T20:52:26Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-08T21:08:31Z"}, "message": "Remove unsafety from unsupported/rwlosck.rs by using a Cell.\n\nReplacing the UnsafeCell by a Cell makes it all safe.", "tree": {"sha": "974fee0ce8410a738c7e97bed41aafe6db115ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/974fee0ce8410a738c7e97bed41aafe6db115ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d192ace34bcb13d3c033735cd7415260040c252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d192ace34bcb13d3c033735cd7415260040c252", "html_url": "https://github.com/rust-lang/rust/commit/3d192ace34bcb13d3c033735cd7415260040c252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d192ace34bcb13d3c033735cd7415260040c252/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c25f69a1e3993bba59853767b366068685f64766", "url": "https://api.github.com/repos/rust-lang/rust/commits/c25f69a1e3993bba59853767b366068685f64766", "html_url": "https://github.com/rust-lang/rust/commit/c25f69a1e3993bba59853767b366068685f64766"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "4e4f0f00f69d41b62780d3ee21d5c5c574776d80", "filename": "library/std/src/sys/unsupported/rwlock.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3d192ace34bcb13d3c033735cd7415260040c252/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d192ace34bcb13d3c033735cd7415260040c252/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Frwlock.rs?ref=3d192ace34bcb13d3c033735cd7415260040c252", "patch": "@@ -1,32 +1,34 @@\n-use crate::cell::UnsafeCell;\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n+use crate::cell::Cell;\n \n pub struct RWLock {\n-    mode: UnsafeCell<isize>,\n+    mode: Cell<isize>,\n }\n \n unsafe impl Send for RWLock {}\n unsafe impl Sync for RWLock {} // no threads on this platform\n \n impl RWLock {\n     pub const fn new() -> RWLock {\n-        RWLock { mode: UnsafeCell::new(0) }\n+        RWLock { mode: Cell::new(0) }\n     }\n \n     #[inline]\n     pub unsafe fn read(&self) {\n-        let mode = self.mode.get();\n-        if *mode >= 0 {\n-            *mode += 1;\n+        let m = self.mode.get();\n+        if m >= 0 {\n+            self.mode.set(m + 1);\n         } else {\n             rtabort!(\"rwlock locked for writing\");\n         }\n     }\n \n     #[inline]\n     pub unsafe fn try_read(&self) -> bool {\n-        let mode = self.mode.get();\n-        if *mode >= 0 {\n-            *mode += 1;\n+        let m = self.mode.get();\n+        if m >= 0 {\n+            self.mode.set(m + 1);\n             true\n         } else {\n             false\n@@ -35,19 +37,15 @@ impl RWLock {\n \n     #[inline]\n     pub unsafe fn write(&self) {\n-        let mode = self.mode.get();\n-        if *mode == 0 {\n-            *mode = -1;\n-        } else {\n+        if self.mode.replace(-1) != 0 {\n             rtabort!(\"rwlock locked for reading\")\n         }\n     }\n \n     #[inline]\n     pub unsafe fn try_write(&self) -> bool {\n-        let mode = self.mode.get();\n-        if *mode == 0 {\n-            *mode = -1;\n+        if self.mode.get() == 0 {\n+            self.mode.set(-1);\n             true\n         } else {\n             false\n@@ -56,12 +54,12 @@ impl RWLock {\n \n     #[inline]\n     pub unsafe fn read_unlock(&self) {\n-        *self.mode.get() -= 1;\n+        self.mode.set(self.mode.get() - 1);\n     }\n \n     #[inline]\n     pub unsafe fn write_unlock(&self) {\n-        *self.mode.get() += 1;\n+        self.mode.set(0);\n     }\n \n     #[inline]"}]}