{"sha": "c066a1ee9f98297cf00fc9c760087770b1a8c1f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNjZhMWVlOWY5ODI5N2NmMDBmYzljNzYwMDg3NzcwYjFhOGMxZjY=", "commit": {"author": {"name": "kwantam", "email": "kwantam@gmail.com", "date": "2014-07-11T00:28:40Z"}, "committer": {"name": "kwantam", "email": "kwantam@gmail.com", "date": "2014-07-14T23:53:46Z"}, "message": "add UnicodeStrSlice width() function", "tree": {"sha": "1032cc7d0e5fba7dda611b92b15407691e14ea3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1032cc7d0e5fba7dda611b92b15407691e14ea3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c066a1ee9f98297cf00fc9c760087770b1a8c1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c066a1ee9f98297cf00fc9c760087770b1a8c1f6", "html_url": "https://github.com/rust-lang/rust/commit/c066a1ee9f98297cf00fc9c760087770b1a8c1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c066a1ee9f98297cf00fc9c760087770b1a8c1f6/comments", "author": {"login": "kwantam", "id": 716593, "node_id": "MDQ6VXNlcjcxNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/716593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwantam", "html_url": "https://github.com/kwantam", "followers_url": "https://api.github.com/users/kwantam/followers", "following_url": "https://api.github.com/users/kwantam/following{/other_user}", "gists_url": "https://api.github.com/users/kwantam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwantam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwantam/subscriptions", "organizations_url": "https://api.github.com/users/kwantam/orgs", "repos_url": "https://api.github.com/users/kwantam/repos", "events_url": "https://api.github.com/users/kwantam/events{/privacy}", "received_events_url": "https://api.github.com/users/kwantam/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kwantam", "id": 716593, "node_id": "MDQ6VXNlcjcxNjU5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/716593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kwantam", "html_url": "https://github.com/kwantam", "followers_url": "https://api.github.com/users/kwantam/followers", "following_url": "https://api.github.com/users/kwantam/following{/other_user}", "gists_url": "https://api.github.com/users/kwantam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kwantam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kwantam/subscriptions", "organizations_url": "https://api.github.com/users/kwantam/orgs", "repos_url": "https://api.github.com/users/kwantam/repos", "events_url": "https://api.github.com/users/kwantam/events{/privacy}", "received_events_url": "https://api.github.com/users/kwantam/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62479133b9b81ae5c32720fa18bd589a9f425e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62479133b9b81ae5c32720fa18bd589a9f425e8", "html_url": "https://github.com/rust-lang/rust/commit/e62479133b9b81ae5c32720fa18bd589a9f425e8"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "798046c461d6c5a6e754fda96ace14439cf19d92", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c066a1ee9f98297cf00fc9c760087770b1a8c1f6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c066a1ee9f98297cf00fc9c760087770b1a8c1f6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c066a1ee9f98297cf00fc9c760087770b1a8c1f6", "patch": "@@ -1056,6 +1056,15 @@ mod tests {\n         assert_eq!(\"\\u2620\".char_len(), 1u);\n         assert_eq!(\"\\U0001d11e\".char_len(), 1u);\n         assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".char_len(), 19u);\n+\n+        assert_eq!(\"\uff48\uff45\uff4c\uff4c\uff4f\".width(false), 10u);\n+        assert_eq!(\"\uff48\uff45\uff4c\uff4c\uff4f\".width(true), 10u);\n+        assert_eq!(\"\\0\\0\\0\\0\\0\".width(false), 0u);\n+        assert_eq!(\"\\0\\0\\0\\0\\0\".width(true), 0u);\n+        assert_eq!(\"\".width(false), 0u);\n+        assert_eq!(\"\".width(true), 0u);\n+        assert_eq!(\"\\u2081\\u2082\\u2083\\u2084\".width(false), 4u);\n+        assert_eq!(\"\\u2081\\u2082\\u2083\\u2084\".width(true), 8u);\n     }\n \n     #[test]"}, {"sha": "b0c40cdbcf9c59befc4bd2e4af45087d2c71c98d", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c066a1ee9f98297cf00fc9c760087770b1a8c1f6/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c066a1ee9f98297cf00fc9c760087770b1a8c1f6/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=c066a1ee9f98297cf00fc9c760087770b1a8c1f6", "patch": "@@ -16,10 +16,11 @@\n  */\n \n use core::collections::Collection;\n-use core::iter::{Filter};\n+use core::iter::{Filter, AdditiveIterator};\n use core::str::{CharSplits, StrSlice};\n use core::iter::Iterator;\n use u_char;\n+use u_char::UnicodeChar;\n \n /// An iterator over the words of a string, separated by a sequence of whitespace\n pub type Words<'a> =\n@@ -78,7 +79,7 @@ pub trait UnicodeStrSlice<'a> {\n     /// [Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)\n     /// recommends that these characters be treated as 1 column (i.e.,\n     /// `is_cjk` = `false`) if the locale is unknown.\n-    //fn width(&self, is_cjk: bool) -> uint;\n+    fn width(&self, is_cjk: bool) -> uint;\n \n     /// Returns a string with leading and trailing whitespace removed.\n     fn trim(&self) -> &'a str;\n@@ -102,6 +103,11 @@ impl<'a> UnicodeStrSlice<'a> for &'a str {\n     #[inline]\n     fn is_alphanumeric(&self) -> bool { self.chars().all(u_char::is_alphanumeric) }\n \n+    #[inline]\n+    fn width(&self, is_cjk: bool) -> uint {\n+        self.chars().map(|c| c.width(is_cjk).unwrap_or(0)).sum()\n+    }\n+\n     #[inline]\n     fn trim(&self) -> &'a str {\n         self.trim_left().trim_right()"}]}