{"sha": "81f6ce5ce3e9c71619f260b95e03f51567252805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjZjZTVjZTNlOWM3MTYxOWYyNjBiOTVlMDNmNTE1NjcyNTI4MDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-10-26T23:53:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-02T08:40:49Z"}, "message": "rename `Lookup` to `TyContext` and pass more info when visiting tys", "tree": {"sha": "49b18e8311983f64737b33382ba0afea890b4d49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49b18e8311983f64737b33382ba0afea890b4d49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f6ce5ce3e9c71619f260b95e03f51567252805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f6ce5ce3e9c71619f260b95e03f51567252805", "html_url": "https://github.com/rust-lang/rust/commit/81f6ce5ce3e9c71619f260b95e03f51567252805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f6ce5ce3e9c71619f260b95e03f51567252805/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2379faa933923a97158a4939b9fc82dcbd45430f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2379faa933923a97158a4939b9fc82dcbd45430f", "html_url": "https://github.com/rust-lang/rust/commit/2379faa933923a97158a4939b9fc82dcbd45430f"}], "stats": {"total": 105, "additions": 61, "deletions": 44}, "files": [{"sha": "2d9d3643ff69d69aafdf498d33447cbc4606bb75", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=81f6ce5ce3e9c71619f260b95e03f51567252805", "patch": "@@ -209,7 +209,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_ty(&mut self,\n                         ty: & $($mutability)* Ty<'tcx>,\n-                        _: Lookup) {\n+                        _: TyContext) {\n                 self.super_ty(ty);\n             }\n \n@@ -256,8 +256,9 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_local_decl(&mut self,\n+                                local: Local,\n                                 local_decl: & $($mutability)* LocalDecl<'tcx>) {\n-                self.super_local_decl(local_decl);\n+                self.super_local_decl(local, local_decl);\n             }\n \n             fn visit_local(&mut self,\n@@ -291,14 +292,14 @@ macro_rules! make_mir_visitor {\n                     self.visit_visibility_scope_data(scope);\n                 }\n \n-                let lookup = Lookup::Src(SourceInfo {\n+                let lookup = TyContext::SourceInfo(SourceInfo {\n                     span: mir.span,\n                     scope: ARGUMENT_VISIBILITY_SCOPE,\n                 });\n                 self.visit_ty(&$($mutability)* mir.return_ty, lookup);\n \n-                for local_decl in &$($mutability)* mir.local_decls {\n-                    self.visit_local_decl(local_decl);\n+                for local in mir.local_decls.indices() {\n+                    self.visit_local_decl(local, & $($mutability)* mir.local_decls[local]);\n                 }\n \n                 self.visit_span(&$($mutability)* mir.span);\n@@ -359,7 +360,8 @@ macro_rules! make_mir_visitor {\n                         for operand in lvalues {\n                             self.visit_lvalue(& $($mutability)* operand.lval,\n                                               LvalueContext::Validate, location);\n-                            self.visit_ty(& $($mutability)* operand.ty, Lookup::Loc(location));\n+                            self.visit_ty(& $($mutability)* operand.ty,\n+                                          TyContext::Location(location));\n                         }\n                     }\n                     StatementKind::SetDiscriminant{ ref $($mutability)* lvalue, .. } => {\n@@ -421,7 +423,7 @@ macro_rules! make_mir_visitor {\n                                                 ref values,\n                                                 ref targets } => {\n                         self.visit_operand(discr, source_location);\n-                        self.visit_ty(switch_ty, Lookup::Loc(source_location));\n+                        self.visit_ty(switch_ty, TyContext::Location(source_location));\n                         for value in &values[..] {\n                             self.visit_const_int(value, source_location);\n                         }\n@@ -538,7 +540,7 @@ macro_rules! make_mir_visitor {\n                                  ref $($mutability)* operand,\n                                  ref $($mutability)* ty) => {\n                         self.visit_operand(operand, location);\n-                        self.visit_ty(ty, Lookup::Loc(location));\n+                        self.visit_ty(ty, TyContext::Location(location));\n                     }\n \n                     Rvalue::BinaryOp(_bin_op,\n@@ -560,15 +562,15 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     Rvalue::NullaryOp(_op, ref $($mutability)* ty) => {\n-                        self.visit_ty(ty, Lookup::Loc(location));\n+                        self.visit_ty(ty, TyContext::Location(location));\n                     }\n \n                     Rvalue::Aggregate(ref $($mutability)* kind,\n                                       ref $($mutability)* operands) => {\n                         let kind = &$($mutability)* **kind;\n                         match *kind {\n                             AggregateKind::Array(ref $($mutability)* ty) => {\n-                                self.visit_ty(ty, Lookup::Loc(location));\n+                                self.visit_ty(ty, TyContext::Location(location));\n                             }\n                             AggregateKind::Tuple => {\n                             }\n@@ -638,7 +640,7 @@ macro_rules! make_mir_visitor {\n                     ref $($mutability)* ty,\n                 } = *static_;\n                 self.visit_def_id(def_id, location);\n-                self.visit_ty(ty, Lookup::Loc(location));\n+                self.visit_ty(ty, TyContext::Location(location));\n             }\n \n             fn super_projection(&mut self,\n@@ -668,7 +670,7 @@ macro_rules! make_mir_visitor {\n                     ProjectionElem::Subslice { from: _, to: _ } => {\n                     }\n                     ProjectionElem::Field(_field, ref $($mutability)* ty) => {\n-                        self.visit_ty(ty, Lookup::Loc(location));\n+                        self.visit_ty(ty, TyContext::Location(location));\n                     }\n                     ProjectionElem::Index(ref $($mutability)* local) => {\n                         self.visit_local(local, LvalueContext::Consume, location);\n@@ -683,6 +685,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_local_decl(&mut self,\n+                                local: Local,\n                                 local_decl: & $($mutability)* LocalDecl<'tcx>) {\n                 let LocalDecl {\n                     mutability: _,\n@@ -694,7 +697,10 @@ macro_rules! make_mir_visitor {\n                     is_user_variable: _,\n                 } = *local_decl;\n \n-                self.visit_ty(ty, Lookup::Src(*source_info));\n+                self.visit_ty(ty, TyContext::LocalDecl {\n+                    local,\n+                    source_info: *source_info,\n+                });\n                 self.visit_source_info(source_info);\n                 self.visit_visibility_scope(lexical_scope);\n             }\n@@ -718,7 +724,7 @@ macro_rules! make_mir_visitor {\n                 } = *constant;\n \n                 self.visit_span(span);\n-                self.visit_ty(ty, Lookup::Loc(location));\n+                self.visit_ty(ty, TyContext::Location(location));\n                 self.visit_literal(literal, location);\n             }\n \n@@ -796,10 +802,21 @@ macro_rules! make_mir_visitor {\n make_mir_visitor!(Visitor,);\n make_mir_visitor!(MutVisitor,mut);\n \n+/// Extra information passed to `visit_ty` and friends to give context\n+/// about where the type etc appears.\n #[derive(Copy, Clone, Debug)]\n-pub enum Lookup {\n-    Loc(Location),\n-    Src(SourceInfo),\n+pub enum TyContext {\n+    LocalDecl {\n+        /// The index of the local variable we are visiting.\n+        local: Local,\n+\n+        /// The source location where this local variable was declared.\n+        source_info: SourceInfo,\n+    },\n+\n+    Location(Location),\n+\n+    SourceInfo(SourceInfo),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "2073d49530061fc728d97a44cec2e4409a97c5d5", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=81f6ce5ce3e9c71619f260b95e03f51567252805", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::region;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n-use rustc::mir::visit::{MutVisitor, Lookup};\n+use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n@@ -165,7 +165,7 @@ struct GlobalizeMir<'a, 'gcx: 'a> {\n }\n \n impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> {\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: Lookup) {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n         if let Some(lifted) = self.tcx.lift(ty) {\n             *ty = lifted;\n         } else {"}, {"sha": "d356d3b5a850874da1acd393a1968b37d19b680d", "filename": "src/librustc_mir/transform/clean_end_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fclean_end_regions.rs?ref=81f6ce5ce3e9c71619f260b95e03f51567252805", "patch": "@@ -24,7 +24,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc::middle::region;\n use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::{BasicBlock, Location, Mir, Rvalue, Statement, StatementKind};\n-use rustc::mir::visit::{MutVisitor, Visitor, Lookup};\n+use rustc::mir::visit::{MutVisitor, Visitor, TyContext};\n use rustc::ty::{Ty, RegionKind, TyCtxt};\n \n pub struct CleanEndRegions;\n@@ -67,7 +67,7 @@ impl<'tcx> Visitor<'tcx> for GatherBorrowedRegions {\n         self.super_rvalue(rvalue, location);\n     }\n \n-    fn visit_ty(&mut self, ty: &Ty<'tcx>, _: Lookup) {\n+    fn visit_ty(&mut self, ty: &Ty<'tcx>, _: TyContext) {\n         // Gather regions that occur in types\n         for re in ty.walk().flat_map(|t| t.regions()) {\n             match *re {"}, {"sha": "08ca20e50eb7f8eef5f021ad82678a234bb10aec", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=81f6ce5ce3e9c71619f260b95e03f51567252805", "patch": "@@ -17,7 +17,7 @@\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::mir::*;\n-use rustc::mir::visit::{MutVisitor, Lookup};\n+use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::mir::transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n@@ -35,7 +35,7 @@ impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: Lookup) {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n         if !self.in_validation_statement {\n             *ty = self.tcx.erase_regions(ty);\n         }"}, {"sha": "b825528b1bc8ff1bc87741c8a684b8bb5736b78a", "filename": "src/librustc_mir/transform/nll/region_infer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Fregion_infer.rs?ref=81f6ce5ce3e9c71619f260b95e03f51567252805", "patch": "@@ -60,7 +60,6 @@ impl RegionInferenceContext {\n         }\n     }\n \n-\n     /// Returns an iterator over all the region indices.\n     pub fn regions(&self) -> impl Iterator<Item = RegionIndex> {\n         self.definitions.indices()"}, {"sha": "40ce44bae9df21906f6ca04fc9e0a58d52de86c2", "filename": "src/librustc_mir/transform/nll/renumber.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll%2Frenumber.rs?ref=81f6ce5ce3e9c71619f260b95e03f51567252805", "patch": "@@ -12,7 +12,7 @@ use rustc::ty::TypeFoldable;\n use rustc::ty::subst::{Kind, Substs};\n use rustc::ty::{Ty, ClosureSubsts, RegionVid, RegionKind};\n use rustc::mir::{Mir, Location, Rvalue, BasicBlock, Statement, StatementKind};\n-use rustc::mir::visit::{MutVisitor, Lookup};\n+use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{self as rustc_infer, InferCtxt};\n use syntax_pos::DUMMY_SP;\n use std::collections::HashMap;\n@@ -29,7 +29,7 @@ pub fn renumber_mir<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n }\n \n struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n-    lookup_map: HashMap<RegionVid, Lookup>,\n+    lookup_map: HashMap<RegionVid, TyContext>,\n     num_region_variables: usize,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n }\n@@ -50,39 +50,39 @@ impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    fn store_region(&mut self, region: &RegionKind, lookup: Lookup) {\n+    fn store_region(&mut self, region: &RegionKind, lookup: TyContext) {\n         if let RegionKind::ReVar(rid) = *region {\n             self.lookup_map.entry(rid).or_insert(lookup);\n         }\n     }\n \n-    fn store_ty_regions(&mut self, ty: &Ty<'tcx>, lookup: Lookup) {\n+    fn store_ty_regions(&mut self, ty: &Ty<'tcx>, ty_context: TyContext) {\n         for region in ty.regions() {\n-            self.store_region(region, lookup);\n+            self.store_region(region, ty_context);\n         }\n     }\n \n-    fn store_kind_regions(&mut self, kind: &'tcx Kind, lookup: Lookup) {\n+    fn store_kind_regions(&mut self, kind: &'tcx Kind, ty_context: TyContext) {\n         if let Some(ty) = kind.as_type() {\n-            self.store_ty_regions(&ty, lookup);\n+            self.store_ty_regions(&ty, ty_context);\n         } else if let Some(region) = kind.as_region() {\n-            self.store_region(region, lookup);\n+            self.store_region(region, ty_context);\n         }\n     }\n }\n \n impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, lookup: Lookup) {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, ty_context: TyContext) {\n         let old_ty = *ty;\n         *ty = self.renumber_regions(&old_ty);\n-        self.store_ty_regions(ty, lookup);\n+        self.store_ty_regions(ty, ty_context);\n     }\n \n     fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {\n         *substs = self.renumber_regions(&{*substs});\n-        let lookup = Lookup::Loc(location);\n+        let ty_context = TyContext::Location(location);\n         for kind in *substs {\n-            self.store_kind_regions(kind, lookup);\n+            self.store_kind_regions(kind, ty_context);\n         }\n     }\n \n@@ -91,8 +91,8 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n             Rvalue::Ref(ref mut r, _, _) => {\n                 let old_r = *r;\n                 *r = self.renumber_regions(&old_r);\n-                let lookup = Lookup::Loc(location);\n-                self.store_region(r, lookup);\n+                let ty_context = TyContext::Location(location);\n+                self.store_region(r, ty_context);\n             }\n             Rvalue::Use(..) |\n             Rvalue::Repeat(..) |\n@@ -114,9 +114,9 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n                             substs: &mut ClosureSubsts<'tcx>,\n                             location: Location) {\n         *substs = self.renumber_regions(substs);\n-        let lookup = Lookup::Loc(location);\n+        let ty_context = TyContext::Location(location);\n         for kind in substs.substs {\n-            self.store_kind_regions(kind, lookup);\n+            self.store_kind_regions(kind, ty_context);\n         }\n     }\n "}, {"sha": "d238b145d424c32195f8542f74430d9f52c73348", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=81f6ce5ce3e9c71619f260b95e03f51567252805", "patch": "@@ -92,8 +92,8 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.sanitize_type(rvalue, rval_ty);\n     }\n \n-    fn visit_local_decl(&mut self, local_decl: &LocalDecl<'tcx>) {\n-        self.super_local_decl(local_decl);\n+    fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {\n+        self.super_local_decl(local, local_decl);\n         self.sanitize_type(local_decl, local_decl.ty);\n     }\n "}, {"sha": "3f75c6385223e0094019dee5c12e2e7842cba56b", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f6ce5ce3e9c71619f260b95e03f51567252805/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=81f6ce5ce3e9c71619f260b95e03f51567252805", "patch": "@@ -14,7 +14,7 @@\n \n use rustc_const_math::{ConstUsize};\n use rustc::mir::{AggregateKind, AssertMessage, BasicBlock, BasicBlockData};\n-use rustc::mir::{Constant, Literal, Location, LocalDecl};\n+use rustc::mir::{Constant, Literal, Location, Local, LocalDecl};\n use rustc::mir::{Lvalue, LvalueElem, LvalueProjection};\n use rustc::mir::{Mir, Operand, ProjectionElem};\n use rustc::mir::{Rvalue, SourceInfo, Statement, StatementKind};\n@@ -269,9 +269,10 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n     }\n \n     fn visit_local_decl(&mut self,\n+                        local: Local,\n                         local_decl: &LocalDecl<'tcx>) {\n         self.record(\"LocalDecl\", local_decl);\n-        self.super_local_decl(local_decl);\n+        self.super_local_decl(local, local_decl);\n     }\n \n     fn visit_visibility_scope(&mut self,"}]}