{"sha": "eafbca916632ef8a92570fe3bf2c88ac6fbb3665", "node_id": "C_kwDOAAsO6NoAKGVhZmJjYTkxNjYzMmVmOGE5MjU3MGZlM2JmMmM4OGFjNmZiYjM2NjU", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-07T16:32:40Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-12T12:17:28Z"}, "message": "take care when there is no args in method call", "tree": {"sha": "f1da4d0637d42e4ac477ce8099ec36cd66f852d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1da4d0637d42e4ac477ce8099ec36cd66f852d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eafbca916632ef8a92570fe3bf2c88ac6fbb3665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eafbca916632ef8a92570fe3bf2c88ac6fbb3665", "html_url": "https://github.com/rust-lang/rust/commit/eafbca916632ef8a92570fe3bf2c88ac6fbb3665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eafbca916632ef8a92570fe3bf2c88ac6fbb3665/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c82545955ea526c0bb6878ee12fa9959e8de3b89", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82545955ea526c0bb6878ee12fa9959e8de3b89", "html_url": "https://github.com/rust-lang/rust/commit/c82545955ea526c0bb6878ee12fa9959e8de3b89"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "968c1f49b95c00ccec072fc253421936dc258f90", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eafbca916632ef8a92570fe3bf2c88ac6fbb3665/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eafbca916632ef8a92570fe3bf2c88ac6fbb3665/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=eafbca916632ef8a92570fe3bf2c88ac6fbb3665", "patch": "@@ -1,13 +1,12 @@\n-use crate::diagnostics::mutability_errors::mut_borrow_of_mutable_ref;\n use either::Either;\n-use hir::Closure;\n use rustc_const_eval::util::CallKind;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n     struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -31,6 +30,7 @@ use crate::borrowck_errors;\n \n use crate::diagnostics::conflict_errors::StorageDeadOrDrop::LocalStorageDead;\n use crate::diagnostics::find_all_local_uses;\n+use crate::diagnostics::mutability_errors::mut_borrow_of_mutable_ref;\n use crate::{\n     borrow_set::BorrowData, diagnostics::Instance, prefixes::IsPrefixOf,\n     InitializationRequiringAction, MirBorrowckCtxt, PrefixSet, WriteKind,\n@@ -41,8 +41,6 @@ use super::{\n     DescribePlaceOpt, RegionName, RegionNameSource, UseSpans,\n };\n \n-use rustc_hir::def::Res;\n-\n #[derive(Debug)]\n struct MoveSite {\n     /// Index of the \"move out\" that we found. The `MoveData` can\n@@ -1280,7 +1278,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         impl<'hir> Visitor<'hir> for ExpressionFinder<'hir> {\n             fn visit_expr(&mut self, e: &'hir hir::Expr<'hir>) {\n                 if e.span.contains(self.capture_span) {\n-                    if let hir::ExprKind::Closure(&Closure {\n+                    if let hir::ExprKind::Closure(&hir::Closure {\n                             movability: None,\n                             body,\n                             fn_arg_span,\n@@ -1311,7 +1309,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 if let hir::Pat { kind: hir::PatKind::Binding(_, hir_id, _ident, _), .. } = local.pat &&\n                     let Some(init) = local.init\n                 {\n-                    if let hir::Expr { kind: hir::ExprKind::Closure(&Closure {\n+                    if let hir::Expr { kind: hir::ExprKind::Closure(&hir::Closure {\n                             movability: None,\n                             ..\n                         }), .. } = init &&\n@@ -1328,11 +1326,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     let hir::QPath::Resolved(_, hir::Path { segments: [seg], ..}) = path &&\n                     let Res::Local(hir_id) = seg.res &&\n                         Some(hir_id) == self.closure_local_id {\n-                        let mut arg_str = \"self\".to_string();\n-                        if args.len() > 0 {\n-                            arg_str.push_str(\", \");\n-                        }\n-                        self.closure_call_changes.push((seg.ident.span, arg_str));\n+                        let (span, arg_str) = if args.len() > 0 {\n+                            (args[0].span.shrink_to_lo(), \"self, \".to_string())\n+                        } else {\n+                            let span = e.span.trim_start(seg.ident.span).unwrap_or(e.span);\n+                            (span, \"(self)\".to_string())\n+                        };\n+                        self.closure_call_changes.push((span, arg_str));\n                 }\n                 hir::intravisit::walk_stmt(self, s);\n             }\n@@ -1369,9 +1369,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n \n             for (span, suggest) in finder.closure_call_changes {\n-                if  let Ok(span) = sm.span_extend_while(span, |c| c != '(') {\n-                    sugg.push((sm.next_point(span).shrink_to_hi(), suggest));\n-                }\n+                sugg.push((span, suggest));\n             }\n \n             err.multipart_suggestion_verbose("}]}