{"sha": "27511b22dfb08c98e53a8f672b2789d4de872f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTExYjIyZGZiMDhjOThlNTNhOGY2NzJiMjc4OWQ0ZGU4NzJmNTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T12:06:52Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-08T08:32:20Z"}, "message": "hir::MethodSig -> hir::FnSig", "tree": {"sha": "25f8779e8a8a78308386c8cd568f9c220535158d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25f8779e8a8a78308386c8cd568f9c220535158d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27511b22dfb08c98e53a8f672b2789d4de872f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27511b22dfb08c98e53a8f672b2789d4de872f55", "html_url": "https://github.com/rust-lang/rust/commit/27511b22dfb08c98e53a8f672b2789d4de872f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27511b22dfb08c98e53a8f672b2789d4de872f55/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c", "html_url": "https://github.com/rust-lang/rust/commit/30d7279628b2e4e3f9dc7efd2a9d2d7018f48a5c"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "29e3f7132766ee27c10f97e21704f43762a31476", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -45,7 +45,7 @@ pub enum FnKind<'a> {\n     ItemFn(Ident, &'a Generics, FnHeader, &'a Visibility, &'a [Attribute]),\n \n     /// `fn foo(&self)`\n-    Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a [Attribute]),\n+    Method(Ident, &'a FnSig, Option<&'a Visibility>, &'a [Attribute]),\n \n     /// `|x, y| {}`\n     Closure(&'a [Attribute]),"}, {"sha": "a01f59eea0b32474ac2b84f364df1efb4b01f545", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -328,7 +328,7 @@ impl LoweringContext<'_> {\n                             header.asyncness.node.opt_return_id()\n                         ),\n                     );\n-                    let sig = hir::MethodSig { decl, header: this.lower_fn_header(header) };\n+                    let sig = hir::FnSig { decl, header: this.lower_fn_header(header) };\n                     hir::ItemKind::Fn(sig, generics, body_id)\n                 })\n             }\n@@ -1259,7 +1259,7 @@ impl LoweringContext<'_> {\n         fn_def_id: DefId,\n         impl_trait_return_allow: bool,\n         is_async: Option<NodeId>,\n-    ) -> (hir::Generics, hir::MethodSig) {\n+    ) -> (hir::Generics, hir::FnSig) {\n         let header = self.lower_fn_header(sig.header);\n         let (generics, decl) = self.add_in_band_defs(\n             generics,\n@@ -1272,7 +1272,7 @@ impl LoweringContext<'_> {\n                 is_async,\n             ),\n         );\n-        (generics, hir::MethodSig { header, decl })\n+        (generics, hir::FnSig { header, decl })\n     }\n \n     fn lower_is_auto(&mut self, a: IsAuto) -> hir::IsAuto {"}, {"sha": "f25f3b5741a0ef2984e1c9287e96722f413da9b5", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -158,25 +158,25 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn body(self) -> ast::BodyId {\n         self.handle(|i: ItemFnParts<'a>| i.body,\n-                    |_, _, _: &'a ast::MethodSig, _, body: ast::BodyId, _, _| body,\n+                    |_, _, _: &'a ast::FnSig, _, body: ast::BodyId, _, _| body,\n                     |c: ClosureParts<'a>| c.body)\n     }\n \n     pub fn decl(self) -> &'a FnDecl {\n         self.handle(|i: ItemFnParts<'a>| &*i.decl,\n-                    |_, _, sig: &'a ast::MethodSig, _, _, _, _| &sig.decl,\n+                    |_, _, sig: &'a ast::FnSig, _, _, _, _| &sig.decl,\n                     |c: ClosureParts<'a>| c.decl)\n     }\n \n     pub fn span(self) -> Span {\n         self.handle(|i: ItemFnParts<'_>| i.span,\n-                    |_, _, _: &'a ast::MethodSig, _, _, span, _| span,\n+                    |_, _, _: &'a ast::FnSig, _, _, span, _| span,\n                     |c: ClosureParts<'_>| c.span)\n     }\n \n     pub fn id(self) -> ast::HirId {\n         self.handle(|i: ItemFnParts<'_>| i.id,\n-                    |id, _, _: &'a ast::MethodSig, _, _, _, _| id,\n+                    |id, _, _: &'a ast::FnSig, _, _, _, _| id,\n                     |c: ClosureParts<'_>| c.id)\n     }\n \n@@ -199,7 +199,7 @@ impl<'a> FnLikeNode<'a> {\n         let closure = |c: ClosureParts<'a>| {\n             FnKind::Closure(c.attrs)\n         };\n-        let method = |_, ident: Ident, sig: &'a ast::MethodSig, vis, _, _, attrs| {\n+        let method = |_, ident: Ident, sig: &'a ast::FnSig, vis, _, _, attrs| {\n             FnKind::Method(ident, sig, vis, attrs)\n         };\n         self.handle(item, method, closure)\n@@ -209,7 +209,7 @@ impl<'a> FnLikeNode<'a> {\n         I: FnOnce(ItemFnParts<'a>) -> A,\n         M: FnOnce(ast::HirId,\n                   Ident,\n-                  &'a ast::MethodSig,\n+                  &'a ast::FnSig,\n                   Option<&'a ast::Visibility>,\n                   ast::BodyId,\n                   Span,"}, {"sha": "83f68e210bd94f1761b6dbb4000c2eb87bbb77b4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -1876,9 +1876,10 @@ pub struct MutTy {\n     pub mutbl: Mutability,\n }\n \n-/// Represents a method's signature in a trait declaration or implementation.\n+/// Represents a function's signature in a trait declaration,\n+/// trait implementation, or a free function.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct MethodSig {\n+pub struct FnSig {\n     pub header: FnHeader,\n     pub decl: P<FnDecl>,\n }\n@@ -1921,7 +1922,7 @@ pub enum TraitItemKind {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(P<Ty>, Option<BodyId>),\n     /// A method with an optional body.\n-    Method(MethodSig, TraitMethod),\n+    Method(FnSig, TraitMethod),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n     Type(GenericBounds, Option<P<Ty>>),\n@@ -1955,7 +1956,7 @@ pub enum ImplItemKind {\n     /// of the expression.\n     Const(P<Ty>, BodyId),\n     /// A method implementation with the given signature and body.\n-    Method(MethodSig, BodyId),\n+    Method(FnSig, BodyId),\n     /// An associated type.\n     TyAlias(P<Ty>),\n     /// An associated `type = impl Trait`.\n@@ -2534,7 +2535,7 @@ pub enum ItemKind {\n     /// A `const` item.\n     Const(P<Ty>, BodyId),\n     /// A function declaration.\n-    Fn(MethodSig, Generics, BodyId),\n+    Fn(FnSig, Generics, BodyId),\n     /// A module.\n     Mod(Mod),\n     /// An external module, e.g. `extern { .. }`."}, {"sha": "d5fdde8732929537347a5aafd48ad46258276633", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -835,7 +835,7 @@ impl<'a> State<'a> {\n     }\n     pub fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n-                            m: &hir::MethodSig,\n+                            m: &hir::FnSig,\n                             generics: &hir::Generics,\n                             vis: &hir::Visibility,\n                             arg_names: &[ast::Ident],"}, {"sha": "e2541eeedbc06a5707ce91fe105febb669091a84", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -32,20 +32,20 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n         Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(_, decl, body_id, _, _), .. })\n         | Node::Item(\n             hir::Item {\n-                kind: hir::ItemKind::Fn(hir::MethodSig { decl, .. }, _, body_id),\n+                kind: hir::ItemKind::Fn(hir::FnSig { decl, .. }, _, body_id),\n                 ..\n             }\n         )\n         | Node::ImplItem(\n             hir::ImplItem {\n-                kind: hir::ImplItemKind::Method(hir::MethodSig { decl, .. }, body_id),\n+                kind: hir::ImplItemKind::Method(hir::FnSig { decl, .. }, body_id),\n                 ..\n             }\n         )\n         | Node::TraitItem(\n             hir::TraitItem {\n                 kind: hir::TraitItemKind::Method(\n-                    hir::MethodSig { decl, .. },\n+                    hir::FnSig { decl, .. },\n                     hir::TraitMethod::Provided(body_id),\n                 ),\n                 .."}, {"sha": "49cdd9142345dbfe49b8ae17a91ea4e555834814", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -1071,7 +1071,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n \n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n         match ii.kind {\n-            hir::ImplItemKind::Method(hir::MethodSig { .. }, _) => {\n+            hir::ImplItemKind::Method(hir::FnSig { .. }, _) => {\n                 let def_id = self.tcx.hir().local_def_id(ii.hir_id);\n                 self.push_if_root(def_id);\n             }"}, {"sha": "5b25d8f25a9566d7ab5edd4e0a07867e8116b5cc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -190,7 +190,7 @@ fn check_associated_item(\n     tcx: TyCtxt<'_>,\n     item_id: hir::HirId,\n     span: Span,\n-    sig_if_method: Option<&hir::MethodSig>,\n+    sig_if_method: Option<&hir::FnSig>,\n ) {\n     debug!(\"check_associated_item: {:?}\", item_id);\n \n@@ -783,7 +783,7 @@ const HELP_FOR_SELF_TYPE: &str =\n \n fn check_method_receiver<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n-    method_sig: &hir::MethodSig,\n+    fn_sig: &hir::FnSig,\n     method: &ty::AssocItem,\n     self_ty: Ty<'tcx>,\n ) {\n@@ -794,7 +794,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n         return;\n     }\n \n-    let span = method_sig.decl.inputs[0].span;\n+    let span = fn_sig.decl.inputs[0].span;\n \n     let sig = fcx.tcx.fn_sig(method.def_id);\n     let sig = fcx.normalize_associated_types_in(span, &sig);"}, {"sha": "9c1da65c84687de2a571ac5073f429d3cdd33a52", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -1809,7 +1809,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         },\n \n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(MethodSig { header, decl }, _),\n+            kind: TraitItemKind::Method(FnSig { header, decl }, _),\n             ..\n         }) => {\n             AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl)"}, {"sha": "6696447ceae575c2389e947b03eba6f4fb3801ee", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27511b22dfb08c98e53a8f672b2789d4de872f55/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=27511b22dfb08c98e53a8f672b2789d4de872f55", "patch": "@@ -1984,7 +1984,7 @@ pub struct Method {\n     pub ret_types: Vec<Type>,\n }\n \n-impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId,\n+impl<'a> Clean<Method> for (&'a hir::FnSig, &'a hir::Generics, hir::BodyId,\n                             Option<hir::Defaultness>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Method {\n         let (generics, decl) = enter_impl_trait(cx, || {"}]}