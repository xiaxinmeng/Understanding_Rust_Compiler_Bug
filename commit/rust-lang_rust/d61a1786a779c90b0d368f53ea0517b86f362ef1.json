{"sha": "d61a1786a779c90b0d368f53ea0517b86f362ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MWExNzg2YTc3OWM5MGIwZDM2OGY1M2VhMDUxN2I4NmYzNjJlZjE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-08T16:44:54Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-03-24T20:48:36Z"}, "message": "Improve new Constant variants' name", "tree": {"sha": "b64d8b52549ef8fab462fccb1b09091001669c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b64d8b52549ef8fab462fccb1b09091001669c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d61a1786a779c90b0d368f53ea0517b86f362ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d61a1786a779c90b0d368f53ea0517b86f362ef1", "html_url": "https://github.com/rust-lang/rust/commit/d61a1786a779c90b0d368f53ea0517b86f362ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d61a1786a779c90b0d368f53ea0517b86f362ef1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e25e15ce99eb44c5c4184c595c26037636355a56", "url": "https://api.github.com/repos/rust-lang/rust/commits/e25e15ce99eb44c5c4184c595c26037636355a56", "html_url": "https://github.com/rust-lang/rust/commit/e25e15ce99eb44c5c4184c595c26037636355a56"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "10487dc258078832144326020bc907426c46480a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d61a1786a779c90b0d368f53ea0517b86f362ef1/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61a1786a779c90b0d368f53ea0517b86f362ef1/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d61a1786a779c90b0d368f53ea0517b86f362ef1", "patch": "@@ -500,7 +500,7 @@ crate fn print_inlined_const(tcx: TyCtxt<'_>, did: DefId) -> String {\n }\n \n fn build_const(cx: &mut DocContext<'_>, did: DefId) -> clean::Constant {\n-    clean::Constant::Inline { type_: cx.tcx.type_of(did).clean(cx), did }\n+    clean::Constant::Extern { type_: cx.tcx.type_of(did).clean(cx), did }\n }\n \n fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::Static {"}, {"sha": "953184b0a769f78853c0eb5abb9d1e9589520b73", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d61a1786a779c90b0d368f53ea0517b86f362ef1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61a1786a779c90b0d368f53ea0517b86f362ef1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d61a1786a779c90b0d368f53ea0517b86f362ef1", "patch": "@@ -393,7 +393,7 @@ impl Clean<Lifetime> for hir::GenericParam<'_> {\n \n impl Clean<Constant> for hir::ConstArg {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Constant {\n-        Constant::Generic {\n+        Constant::Anonymous {\n             type_: cx\n                 .tcx\n                 .type_of(cx.tcx.hir().body_owner_def_id(self.value.body).to_def_id())\n@@ -1945,7 +1945,7 @@ impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n                 ItemKind::Static(ty, mutability, body_id) => {\n                     StaticItem(Static { type_: ty.clean(cx), mutability, expr: Some(body_id) })\n                 }\n-                ItemKind::Const(ty, body_id) => ConstantItem(Constant::Const {\n+                ItemKind::Const(ty, body_id) => ConstantItem(Constant::Local {\n                     type_: ty.clean(cx),\n                     body: body_id,\n                     did: def_id,"}, {"sha": "5a3f9c8ea52121391d8107b151a40dc156bb531a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d61a1786a779c90b0d368f53ea0517b86f362ef1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d61a1786a779c90b0d368f53ea0517b86f362ef1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d61a1786a779c90b0d368f53ea0517b86f362ef1", "patch": "@@ -1988,41 +1988,42 @@ crate struct Static {\n \n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n crate enum Constant {\n-    /// Typed constant value.\n+    /// This is the wrapper around `ty::Const` for a non-local constant. Because it doesn't have a\n+    /// `BodyId`, we need to handle it on its own.\n     TyConst { type_: Type, expr: String },\n     /// A constant (expression) that\u2019s not an item or associated item. These are usually found\n     /// nested inside types (e.g., array lengths) or expressions (e.g., repeat counts), and also\n     /// used to define explicit discriminant values for enum variants.\n-    Generic { type_: Type, body: BodyId },\n-    /// Inlined constant (from another crate).\n-    Inline { type_: Type, did: DefId },\n+    Anonymous { type_: Type, body: BodyId },\n+    /// Inlined constant.\n+    Extern { type_: Type, did: DefId },\n     /// const FOO: u32 = ...;\n-    Const { type_: Type, did: DefId, body: BodyId },\n+    Local { type_: Type, did: DefId, body: BodyId },\n }\n \n impl Constant {\n     crate fn expr(&self, tcx: TyCtxt<'_>) -> String {\n         match self {\n             Self::TyConst { expr, .. } => expr.clone(),\n-            Self::Inline { did, .. } => print_inlined_const(tcx, *did),\n-            Self::Const { body, .. } | Self::Generic { body, .. } => print_const_expr(tcx, *body),\n+            Self::Extern { did, .. } => print_inlined_const(tcx, *did),\n+            Self::Local { body, .. } | Self::Anonymous { body, .. } => print_const_expr(tcx, *body),\n         }\n     }\n \n     crate fn value(&self, tcx: TyCtxt<'_>) -> Option<String> {\n         match self {\n-            Self::TyConst { .. } | Self::Generic { .. } => None,\n-            Self::Inline { did, .. } | Self::Const { did, .. } => print_evaluated_const(tcx, *did),\n+            Self::TyConst { .. } | Self::Anonymous { .. } => None,\n+            Self::Extern { did, .. } | Self::Local { did, .. } => print_evaluated_const(tcx, *did),\n         }\n     }\n \n     crate fn is_literal(&self, tcx: TyCtxt<'_>) -> bool {\n         match self {\n             Self::TyConst { .. } => false,\n-            Self::Inline { did, .. } => did\n+            Self::Extern { did, .. } => did\n                 .as_local()\n                 .map_or(false, |did| is_literal_expr(tcx, tcx.hir().local_def_id_to_hir_id(did))),\n-            Self::Const { body, .. } | Self::Generic { body, .. } => {\n+            Self::Local { body, .. } | Self::Anonymous { body, .. } => {\n                 is_literal_expr(tcx, body.hir_id)\n             }\n         }\n@@ -2031,18 +2032,18 @@ impl Constant {\n     crate fn type_(&self) -> &Type {\n         match *self {\n             Self::TyConst { ref type_, .. }\n-            | Self::Inline { ref type_, .. }\n-            | Self::Const { ref type_, .. }\n-            | Self::Generic { ref type_, .. } => type_,\n+            | Self::Extern { ref type_, .. }\n+            | Self::Local { ref type_, .. }\n+            | Self::Anonymous { ref type_, .. } => type_,\n         }\n     }\n \n     crate fn to_type(self) -> Type {\n         match self {\n             Self::TyConst { type_, .. }\n-            | Self::Inline { type_, .. }\n-            | Self::Const { type_, .. }\n-            | Self::Generic { type_, .. } => type_,\n+            | Self::Extern { type_, .. }\n+            | Self::Local { type_, .. }\n+            | Self::Anonymous { type_, .. } => type_,\n         }\n     }\n }"}]}