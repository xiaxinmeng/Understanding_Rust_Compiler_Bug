{"sha": "bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0", "node_id": "C_kwDOAAsO6NoAKGJlYmZiODNmZDA1MDRlYzdjMWQyNDYzNzVlMzliY2Y0MWUwZGZjYzA", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T12:18:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T12:18:34Z"}, "message": "split prefix/top tests", "tree": {"sha": "40fae8203b4c7de36272615ee1ed10dbcf9910a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fae8203b4c7de36272615ee1ed10dbcf9910a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0", "html_url": "https://github.com/rust-lang/rust/commit/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd7c747066fc5d1e8537b81a1156ff4e5e40ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd7c747066fc5d1e8537b81a1156ff4e5e40ae6", "html_url": "https://github.com/rust-lang/rust/commit/2bd7c747066fc5d1e8537b81a1156ff4e5e40ae6"}], "stats": {"total": 418, "additions": 208, "deletions": 210}, "files": [{"sha": "52388dacc61b68955de2ca24c268b19fd1ed684f", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0", "patch": "@@ -1,5 +1,6 @@\n mod sourcegen_inline_tests;\n-mod entries;\n+mod prefix_entries;\n+mod top_entries;\n \n use std::{\n     fmt::Write,"}, {"sha": "c52f15418f37eed4f779dad3c728b8b63aaeea57", "filename": "crates/parser/src/tests/entries.rs", "status": "removed", "additions": 0, "deletions": 209, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/2bd7c747066fc5d1e8537b81a1156ff4e5e40ae6/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd7c747066fc5d1e8537b81a1156ff4e5e40ae6/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs?ref=2bd7c747066fc5d1e8537b81a1156ff4e5e40ae6", "patch": "@@ -1,209 +0,0 @@\n-use expect_test::expect;\n-\n-use crate::{LexedStr, PrefixEntryPoint, Step, TopEntryPoint};\n-\n-#[test]\n-fn vis() {\n-    check_prefix(PrefixEntryPoint::Vis, \"pub(crate) fn foo() {}\", \"pub(crate)\");\n-    check_prefix(PrefixEntryPoint::Vis, \"fn foo() {}\", \"\");\n-    check_prefix(PrefixEntryPoint::Vis, \"pub(fn foo() {}\", \"pub\");\n-    check_prefix(PrefixEntryPoint::Vis, \"pub(crate fn foo() {}\", \"pub(crate\");\n-    check_prefix(PrefixEntryPoint::Vis, \"crate fn foo() {}\", \"crate\");\n-}\n-\n-#[test]\n-fn block() {\n-    check_prefix(PrefixEntryPoint::Block, \"{}, 92\", \"{}\");\n-    check_prefix(PrefixEntryPoint::Block, \"{, 92)\", \"{, 92)\");\n-    check_prefix(PrefixEntryPoint::Block, \"()\", \"\");\n-}\n-\n-#[test]\n-fn stmt() {\n-    check_prefix(PrefixEntryPoint::Stmt, \"92; fn\", \"92\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"let _ = 92; 1\", \"let _ = 92\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"pub fn f() {} = 92\", \"pub fn f() {}\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"struct S;;\", \"struct S;\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"fn f() {};\", \"fn f() {}\");\n-    check_prefix(PrefixEntryPoint::Stmt, \";;;\", \";\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"+\", \"+\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"@\", \"@\");\n-    check_prefix(PrefixEntryPoint::Stmt, \"loop {} - 1\", \"loop {}\");\n-}\n-\n-#[test]\n-fn pat() {\n-    check_prefix(PrefixEntryPoint::Pat, \"x y\", \"x\");\n-    check_prefix(PrefixEntryPoint::Pat, \"fn f() {}\", \"fn\");\n-    // FIXME: This one is wrong, we should consume only one pattern.\n-    check_prefix(PrefixEntryPoint::Pat, \".. ..\", \".. ..\");\n-}\n-\n-#[test]\n-fn ty() {\n-    check_prefix(PrefixEntryPoint::Ty, \"fn() foo\", \"fn()\");\n-    check_prefix(PrefixEntryPoint::Ty, \"Clone + Copy + fn\", \"Clone + Copy +\");\n-    check_prefix(PrefixEntryPoint::Ty, \"struct f\", \"struct\");\n-}\n-\n-#[test]\n-fn expr() {\n-    check_prefix(PrefixEntryPoint::Expr, \"92 92\", \"92\");\n-    check_prefix(PrefixEntryPoint::Expr, \"+1\", \"+\");\n-    check_prefix(PrefixEntryPoint::Expr, \"-1\", \"-1\");\n-    check_prefix(PrefixEntryPoint::Expr, \"fn foo() {}\", \"fn\");\n-    check_prefix(PrefixEntryPoint::Expr, \"#[attr] ()\", \"#[attr] ()\");\n-}\n-\n-#[test]\n-fn path() {\n-    check_prefix(PrefixEntryPoint::Path, \"foo::bar baz\", \"foo::bar\");\n-    check_prefix(PrefixEntryPoint::Path, \"foo::<> baz\", \"foo::<>\");\n-    check_prefix(PrefixEntryPoint::Path, \"foo<> baz\", \"foo<>\");\n-    check_prefix(PrefixEntryPoint::Path, \"Fn() -> i32?\", \"Fn() -> i32\");\n-    // FIXME: This shouldn't be accepted as path actually.\n-    check_prefix(PrefixEntryPoint::Path, \"<_>::foo\", \"<_>::foo\");\n-}\n-\n-#[test]\n-fn item() {\n-    // FIXME: This shouldn't consume the semicolon.\n-    check_prefix(PrefixEntryPoint::Item, \"fn foo() {};\", \"fn foo() {};\");\n-    check_prefix(PrefixEntryPoint::Item, \"#[attr] pub struct S {} 92\", \"#[attr] pub struct S {}\");\n-    check_prefix(PrefixEntryPoint::Item, \"item!{}?\", \"item!{}\");\n-    check_prefix(PrefixEntryPoint::Item, \"????\", \"?\");\n-}\n-\n-#[test]\n-fn meta_item() {\n-    check_prefix(PrefixEntryPoint::MetaItem, \"attr, \", \"attr\");\n-    check_prefix(\n-        PrefixEntryPoint::MetaItem,\n-        \"attr(some token {stream});\",\n-        \"attr(some token {stream})\",\n-    );\n-    check_prefix(PrefixEntryPoint::MetaItem, \"path::attr = 2 * 2!\", \"path::attr = 2 * 2\");\n-}\n-\n-#[track_caller]\n-fn check_prefix(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n-    let lexed = LexedStr::new(input);\n-    let input = lexed.to_input();\n-\n-    let mut n_tokens = 0;\n-    for step in entry.parse(&input).iter() {\n-        match step {\n-            Step::Token { n_input_tokens, .. } => n_tokens += n_input_tokens as usize,\n-            Step::Enter { .. } | Step::Exit | Step::Error { .. } => (),\n-        }\n-    }\n-\n-    let mut i = 0;\n-    loop {\n-        if n_tokens == 0 {\n-            break;\n-        }\n-        if !lexed.kind(i).is_trivia() {\n-            n_tokens -= 1;\n-        }\n-        i += 1;\n-    }\n-    let buf = &lexed.as_str()[..lexed.text_start(i)];\n-    assert_eq!(buf, prefix);\n-}\n-\n-#[test]\n-fn source_file() {\n-    check_top(\n-        TopEntryPoint::SourceFile,\n-        \"\",\n-        expect![[r#\"\n-        SOURCE_FILE\n-    \"#]],\n-    );\n-\n-    check_top(\n-        TopEntryPoint::SourceFile,\n-        \"struct S;\",\n-        expect![[r#\"\n-        SOURCE_FILE\n-          STRUCT\n-            STRUCT_KW \"struct\"\n-            WHITESPACE \" \"\n-            NAME\n-              IDENT \"S\"\n-            SEMICOLON \";\"\n-    \"#]],\n-    );\n-\n-    check_top(\n-        TopEntryPoint::SourceFile,\n-        \"@error@\",\n-        expect![[r#\"\n-        SOURCE_FILE\n-          ERROR\n-            AT \"@\"\n-          MACRO_CALL\n-            PATH\n-              PATH_SEGMENT\n-                NAME_REF\n-                  IDENT \"error\"\n-          ERROR\n-            AT \"@\"\n-        error 0: expected an item\n-        error 6: expected BANG\n-        error 6: expected `{`, `[`, `(`\n-        error 6: expected SEMICOLON\n-        error 6: expected an item\n-    \"#]],\n-    );\n-}\n-\n-#[test]\n-fn macro_stmt() {\n-    check_top(\n-        TopEntryPoint::MacroStmts,\n-        \"#!/usr/bin/rust\",\n-        expect![[r##\"\n-            MACRO_STMTS\n-              ERROR\n-                SHEBANG \"#!/usr/bin/rust\"\n-            error 0: expected expression\n-        \"##]],\n-    );\n-    check_top(\n-        TopEntryPoint::MacroStmts,\n-        \"let x = 1 2 struct S;\",\n-        expect![[r#\"\n-            MACRO_STMTS\n-              LET_STMT\n-                LET_KW \"let\"\n-                WHITESPACE \" \"\n-                IDENT_PAT\n-                  NAME\n-                    IDENT \"x\"\n-                WHITESPACE \" \"\n-                EQ \"=\"\n-                WHITESPACE \" \"\n-                LITERAL\n-                  INT_NUMBER \"1\"\n-              WHITESPACE \" \"\n-              EXPR_STMT\n-                LITERAL\n-                  INT_NUMBER \"2\"\n-              WHITESPACE \" \"\n-              STRUCT\n-                STRUCT_KW \"struct\"\n-                WHITESPACE \" \"\n-                NAME\n-                  IDENT \"S\"\n-                SEMICOLON \";\"\n-        \"#]],\n-    );\n-}\n-\n-#[track_caller]\n-fn check_top(entry: TopEntryPoint, input: &str, expect: expect_test::Expect) {\n-    let (parsed, _errors) = super::parse(entry, input);\n-    expect.assert_eq(&parsed)\n-}"}, {"sha": "e626b4f27e0c3a69049e4a86475a9134df9b2818", "filename": "crates/parser/src/tests/prefix_entries.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fprefix_entries.rs?ref=bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0", "patch": "@@ -0,0 +1,107 @@\n+use crate::{LexedStr, PrefixEntryPoint, Step};\n+\n+#[test]\n+fn vis() {\n+    check(PrefixEntryPoint::Vis, \"pub(crate) fn foo() {}\", \"pub(crate)\");\n+    check(PrefixEntryPoint::Vis, \"fn foo() {}\", \"\");\n+    check(PrefixEntryPoint::Vis, \"pub(fn foo() {}\", \"pub\");\n+    check(PrefixEntryPoint::Vis, \"pub(crate fn foo() {}\", \"pub(crate\");\n+    check(PrefixEntryPoint::Vis, \"crate fn foo() {}\", \"crate\");\n+}\n+\n+#[test]\n+fn block() {\n+    check(PrefixEntryPoint::Block, \"{}, 92\", \"{}\");\n+    check(PrefixEntryPoint::Block, \"{, 92)\", \"{, 92)\");\n+    check(PrefixEntryPoint::Block, \"()\", \"\");\n+}\n+\n+#[test]\n+fn stmt() {\n+    check(PrefixEntryPoint::Stmt, \"92; fn\", \"92\");\n+    check(PrefixEntryPoint::Stmt, \"let _ = 92; 1\", \"let _ = 92\");\n+    check(PrefixEntryPoint::Stmt, \"pub fn f() {} = 92\", \"pub fn f() {}\");\n+    check(PrefixEntryPoint::Stmt, \"struct S;;\", \"struct S;\");\n+    check(PrefixEntryPoint::Stmt, \"fn f() {};\", \"fn f() {}\");\n+    check(PrefixEntryPoint::Stmt, \";;;\", \";\");\n+    check(PrefixEntryPoint::Stmt, \"+\", \"+\");\n+    check(PrefixEntryPoint::Stmt, \"@\", \"@\");\n+    check(PrefixEntryPoint::Stmt, \"loop {} - 1\", \"loop {}\");\n+}\n+\n+#[test]\n+fn pat() {\n+    check(PrefixEntryPoint::Pat, \"x y\", \"x\");\n+    check(PrefixEntryPoint::Pat, \"fn f() {}\", \"fn\");\n+    // FIXME: This one is wrong, we should consume only one pattern.\n+    check(PrefixEntryPoint::Pat, \".. ..\", \".. ..\");\n+}\n+\n+#[test]\n+fn ty() {\n+    check(PrefixEntryPoint::Ty, \"fn() foo\", \"fn()\");\n+    check(PrefixEntryPoint::Ty, \"Clone + Copy + fn\", \"Clone + Copy +\");\n+    check(PrefixEntryPoint::Ty, \"struct f\", \"struct\");\n+}\n+\n+#[test]\n+fn expr() {\n+    check(PrefixEntryPoint::Expr, \"92 92\", \"92\");\n+    check(PrefixEntryPoint::Expr, \"+1\", \"+\");\n+    check(PrefixEntryPoint::Expr, \"-1\", \"-1\");\n+    check(PrefixEntryPoint::Expr, \"fn foo() {}\", \"fn\");\n+    check(PrefixEntryPoint::Expr, \"#[attr] ()\", \"#[attr] ()\");\n+}\n+\n+#[test]\n+fn path() {\n+    check(PrefixEntryPoint::Path, \"foo::bar baz\", \"foo::bar\");\n+    check(PrefixEntryPoint::Path, \"foo::<> baz\", \"foo::<>\");\n+    check(PrefixEntryPoint::Path, \"foo<> baz\", \"foo<>\");\n+    check(PrefixEntryPoint::Path, \"Fn() -> i32?\", \"Fn() -> i32\");\n+    // FIXME: This shouldn't be accepted as path actually.\n+    check(PrefixEntryPoint::Path, \"<_>::foo\", \"<_>::foo\");\n+}\n+\n+#[test]\n+fn item() {\n+    // FIXME: This shouldn't consume the semicolon.\n+    check(PrefixEntryPoint::Item, \"fn foo() {};\", \"fn foo() {};\");\n+    check(PrefixEntryPoint::Item, \"#[attr] pub struct S {} 92\", \"#[attr] pub struct S {}\");\n+    check(PrefixEntryPoint::Item, \"item!{}?\", \"item!{}\");\n+    check(PrefixEntryPoint::Item, \"????\", \"?\");\n+}\n+\n+#[test]\n+fn meta_item() {\n+    check(PrefixEntryPoint::MetaItem, \"attr, \", \"attr\");\n+    check(PrefixEntryPoint::MetaItem, \"attr(some token {stream});\", \"attr(some token {stream})\");\n+    check(PrefixEntryPoint::MetaItem, \"path::attr = 2 * 2!\", \"path::attr = 2 * 2\");\n+}\n+\n+#[track_caller]\n+fn check(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n+    let lexed = LexedStr::new(input);\n+    let input = lexed.to_input();\n+\n+    let mut n_tokens = 0;\n+    for step in entry.parse(&input).iter() {\n+        match step {\n+            Step::Token { n_input_tokens, .. } => n_tokens += n_input_tokens as usize,\n+            Step::Enter { .. } | Step::Exit | Step::Error { .. } => (),\n+        }\n+    }\n+\n+    let mut i = 0;\n+    loop {\n+        if n_tokens == 0 {\n+            break;\n+        }\n+        if !lexed.kind(i).is_trivia() {\n+            n_tokens -= 1;\n+        }\n+        i += 1;\n+    }\n+    let buf = &lexed.as_str()[..lexed.text_start(i)];\n+    assert_eq!(buf, prefix);\n+}"}, {"sha": "0b77c0a5b96a70d24218b900f2c6c38cc47b8acf", "filename": "crates/parser/src/tests/top_entries.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=bebfb83fd0504ec7c1d246375e39bcf41e0dfcc0", "patch": "@@ -0,0 +1,99 @@\n+use expect_test::expect;\n+\n+use crate::TopEntryPoint;\n+\n+#[test]\n+fn source_file() {\n+    check(\n+        TopEntryPoint::SourceFile,\n+        \"\",\n+        expect![[r#\"\n+        SOURCE_FILE\n+    \"#]],\n+    );\n+\n+    check(\n+        TopEntryPoint::SourceFile,\n+        \"struct S;\",\n+        expect![[r#\"\n+        SOURCE_FILE\n+          STRUCT\n+            STRUCT_KW \"struct\"\n+            WHITESPACE \" \"\n+            NAME\n+              IDENT \"S\"\n+            SEMICOLON \";\"\n+    \"#]],\n+    );\n+\n+    check(\n+        TopEntryPoint::SourceFile,\n+        \"@error@\",\n+        expect![[r#\"\n+        SOURCE_FILE\n+          ERROR\n+            AT \"@\"\n+          MACRO_CALL\n+            PATH\n+              PATH_SEGMENT\n+                NAME_REF\n+                  IDENT \"error\"\n+          ERROR\n+            AT \"@\"\n+        error 0: expected an item\n+        error 6: expected BANG\n+        error 6: expected `{`, `[`, `(`\n+        error 6: expected SEMICOLON\n+        error 6: expected an item\n+    \"#]],\n+    );\n+}\n+\n+#[test]\n+fn macro_stmt() {\n+    check(\n+        TopEntryPoint::MacroStmts,\n+        \"#!/usr/bin/rust\",\n+        expect![[r##\"\n+            MACRO_STMTS\n+              ERROR\n+                SHEBANG \"#!/usr/bin/rust\"\n+            error 0: expected expression\n+        \"##]],\n+    );\n+    check(\n+        TopEntryPoint::MacroStmts,\n+        \"let x = 1 2 struct S;\",\n+        expect![[r#\"\n+            MACRO_STMTS\n+              LET_STMT\n+                LET_KW \"let\"\n+                WHITESPACE \" \"\n+                IDENT_PAT\n+                  NAME\n+                    IDENT \"x\"\n+                WHITESPACE \" \"\n+                EQ \"=\"\n+                WHITESPACE \" \"\n+                LITERAL\n+                  INT_NUMBER \"1\"\n+              WHITESPACE \" \"\n+              EXPR_STMT\n+                LITERAL\n+                  INT_NUMBER \"2\"\n+              WHITESPACE \" \"\n+              STRUCT\n+                STRUCT_KW \"struct\"\n+                WHITESPACE \" \"\n+                NAME\n+                  IDENT \"S\"\n+                SEMICOLON \";\"\n+        \"#]],\n+    );\n+}\n+\n+#[track_caller]\n+fn check(entry: TopEntryPoint, input: &str, expect: expect_test::Expect) {\n+    let (parsed, _errors) = super::parse(entry, input);\n+    expect.assert_eq(&parsed)\n+}"}]}