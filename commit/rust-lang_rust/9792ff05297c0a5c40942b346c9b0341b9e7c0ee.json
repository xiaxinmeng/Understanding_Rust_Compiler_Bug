{"sha": "9792ff05297c0a5c40942b346c9b0341b9e7c0ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OTJmZjA1Mjk3YzBhNWM0MDk0MmIzNDZjOWIwMzQxYjllN2MwZWU=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2019-08-19T02:11:35Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-08-19T02:11:35Z"}, "message": "Fix line numbers in checkstyle output (#3694)", "tree": {"sha": "2c896985b61988bc73c66d331cc9429f6cc5df6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c896985b61988bc73c66d331cc9429f6cc5df6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9792ff05297c0a5c40942b346c9b0341b9e7c0ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9792ff05297c0a5c40942b346c9b0341b9e7c0ee", "html_url": "https://github.com/rust-lang/rust/commit/9792ff05297c0a5c40942b346c9b0341b9e7c0ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9792ff05297c0a5c40942b346c9b0341b9e7c0ee/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62432fe31b396058767c71ed332b6d2eed3053ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/62432fe31b396058767c71ed332b6d2eed3053ff", "html_url": "https://github.com/rust-lang/rust/commit/62432fe31b396058767c71ed332b6d2eed3053ff"}], "stats": {"total": 90, "additions": 87, "deletions": 3}, "files": [{"sha": "4448214f3ff2cd1ac4c2fd7e519ca8342c436289", "filename": "src/emitter/checkstyle.rs", "status": "modified", "additions": 86, "deletions": 2, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9792ff05297c0a5c40942b346c9b0341b9e7c0ee/src%2Femitter%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9792ff05297c0a5c40942b346c9b0341b9e7c0ee/src%2Femitter%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Femitter%2Fcheckstyle.rs?ref=9792ff05297c0a5c40942b346c9b0341b9e7c0ee", "patch": "@@ -29,7 +29,7 @@ impl Emitter for CheckstyleEmitter {\n             formatted_text,\n         }: FormattedFile<'_>,\n     ) -> Result<EmitterResult, io::Error> {\n-        const CONTEXT_SIZE: usize = 3;\n+        const CONTEXT_SIZE: usize = 0;\n         let filename = ensure_real_path(filename);\n         let diff = make_diff(original_text, formatted_text, CONTEXT_SIZE);\n         output_checkstyle_file(output, filename, diff)?;\n@@ -47,13 +47,18 @@ where\n {\n     write!(writer, r#\"<file name=\"{}\">\"#, filename.display())?;\n     for mismatch in diff {\n+        let begin_line = mismatch.line_number;\n+        let mut current_line;\n+        let mut line_counter = 0;\n         for line in mismatch.lines {\n             // Do nothing with `DiffLine::Context` and `DiffLine::Resulting`.\n             if let DiffLine::Expected(message) = line {\n+                current_line = begin_line + line_counter;\n+                line_counter += 1;\n                 write!(\n                     writer,\n                     r#\"<error line=\"{}\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n-                    mismatch.line_number,\n+                    current_line,\n                     XmlEscaped(&message)\n                 )?;\n             }\n@@ -62,3 +67,82 @@ where\n     write!(writer, \"</file>\")?;\n     Ok(())\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use std::path::PathBuf;\n+\n+    #[test]\n+    fn emits_empty_record_on_file_with_no_mismatches() {\n+        let file_name = \"src/well_formatted.rs\";\n+        let mut writer = Vec::new();\n+        let _ = output_checkstyle_file(&mut writer, &PathBuf::from(file_name), vec![]);\n+        assert_eq!(\n+            &writer[..],\n+            format!(r#\"<file name=\"{}\"></file>\"#, file_name).as_bytes()\n+        );\n+    }\n+\n+    // https://github.com/rust-lang/rustfmt/issues/1636\n+    #[test]\n+    fn emits_single_xml_tree_containing_all_files() {\n+        let bin_file = \"src/bin.rs\";\n+        let bin_original = vec![\"fn main() {\", \"println!(\\\"Hello, world!\\\");\", \"}\"];\n+        let bin_formatted = vec![\"fn main() {\", \"    println!(\\\"Hello, world!\\\");\", \"}\"];\n+        let lib_file = \"src/lib.rs\";\n+        let lib_original = vec![\"fn greet() {\", \"println!(\\\"Greetings!\\\");\", \"}\"];\n+        let lib_formatted = vec![\"fn greet() {\", \"    println!(\\\"Greetings!\\\");\", \"}\"];\n+        let mut writer = Vec::new();\n+        let mut emitter = CheckstyleEmitter::default();\n+        let _ = emitter.emit_header(&mut writer);\n+        let _ = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(bin_file)),\n+                    original_text: &bin_original.join(\"\\n\"),\n+                    formatted_text: &bin_formatted.join(\"\\n\"),\n+                },\n+            )\n+            .unwrap();\n+        let _ = emitter\n+            .emit_formatted_file(\n+                &mut writer,\n+                FormattedFile {\n+                    filename: &FileName::Real(PathBuf::from(lib_file)),\n+                    original_text: &lib_original.join(\"\\n\"),\n+                    formatted_text: &lib_formatted.join(\"\\n\"),\n+                },\n+            )\n+            .unwrap();\n+        let _ = emitter.emit_footer(&mut writer);\n+        let exp_bin_xml = vec![\n+            format!(r#\"<file name=\"{}\">\"#, bin_file),\n+            format!(\n+                r#\"<error line=\"2\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n+                XmlEscaped(&r#\"    println!(\"Hello, world!\");\"#),\n+            ),\n+            String::from(\"</file>\"),\n+        ];\n+        let exp_lib_xml = vec![\n+            format!(r#\"<file name=\"{}\">\"#, lib_file),\n+            format!(\n+                r#\"<error line=\"2\" severity=\"warning\" message=\"Should be `{}`\" />\"#,\n+                XmlEscaped(&r#\"    println!(\"Greetings!\");\"#),\n+            ),\n+            String::from(\"</file>\"),\n+        ];\n+        assert_eq!(\n+            String::from_utf8(writer).unwrap(),\n+            vec![\n+                r#\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\"#,\n+                \"\\n\",\n+                r#\"<checkstyle version=\"4.3\">\"#,\n+                &format!(\"{}{}\", exp_bin_xml.join(\"\"), exp_lib_xml.join(\"\")),\n+                \"</checkstyle>\\n\",\n+            ]\n+            .join(\"\"),\n+        );\n+    }\n+}"}, {"sha": "05bc3a2525d54df7dee8adcac609874402b0ec0e", "filename": "tests/writemode/target/checkstyle.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9792ff05297c0a5c40942b346c9b0341b9e7c0ee/tests%2Fwritemode%2Ftarget%2Fcheckstyle.xml", "raw_url": "https://github.com/rust-lang/rust/raw/9792ff05297c0a5c40942b346c9b0341b9e7c0ee/tests%2Fwritemode%2Ftarget%2Fcheckstyle.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwritemode%2Ftarget%2Fcheckstyle.xml?ref=9792ff05297c0a5c40942b346c9b0341b9e7c0ee", "patch": "@@ -1,2 +1,2 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<checkstyle version=\"4.3\"><file name=\"tests/writemode/source/fn-single-line.rs\"><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `where`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `    T: Sync,`\" /><error line=\"2\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"52\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;()`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `where`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `    T: Bar,`\" /><error line=\"59\" severity=\"warning\" message=\"Should be `{`\" /></file></checkstyle>\n+<checkstyle version=\"4.3\"><file name=\"tests/writemode/source/fn-single-line.rs\"><error line=\"5\" severity=\"warning\" message=\"Should be `fn foo_expr() { 1 }`\" /><error line=\"7\" severity=\"warning\" message=\"Should be `fn foo_stmt() { foo(); }`\" /><error line=\"9\" severity=\"warning\" message=\"Should be `fn foo_decl_local() { let z = 5; }`\" /><error line=\"11\" severity=\"warning\" message=\"Should be `fn foo_decl_item(x: &amp;mut i32) { x = 3; }`\" /><error line=\"13\" severity=\"warning\" message=\"Should be `fn empty() {}`\" /><error line=\"15\" severity=\"warning\" message=\"Should be `fn foo_return() -&gt; String { &quot;yay&quot; }`\" /><error line=\"17\" severity=\"warning\" message=\"Should be `fn foo_where() -&gt; T`\" /><error line=\"18\" severity=\"warning\" message=\"Should be `where`\" /><error line=\"19\" severity=\"warning\" message=\"Should be `    T: Sync,`\" /><error line=\"20\" severity=\"warning\" message=\"Should be `{`\" /><error line=\"55\" severity=\"warning\" message=\"Should be `fn lots_of_space() { 1 }`\" /><error line=\"60\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"63\" severity=\"warning\" message=\"Should be `trait CoolerTypes {`\" /><error line=\"64\" severity=\"warning\" message=\"Should be `    fn dummy(&amp;self) {}`\" /><error line=\"67\" severity=\"warning\" message=\"Should be `fn Foo&lt;T&gt;()`\" /><error line=\"68\" severity=\"warning\" message=\"Should be `where`\" /><error line=\"69\" severity=\"warning\" message=\"Should be `    T: Bar,`\" /><error line=\"70\" severity=\"warning\" message=\"Should be `{`\" /></file></checkstyle>"}]}