{"sha": "720b6941dff18896bcab36bec8e905fdb462d7d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMGI2OTQxZGZmMTg4OTZiY2FiMzZiZWM4ZTkwNWZkYjQ2MmQ3ZDg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-17T23:30:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-17T23:30:09Z"}, "message": "Rollup merge of #78164 - Aaron1011:fix/async-region-name, r=tmandry\n\nPrefer regions with an `external_name` in `approx_universal_upper_bound`\n\nFixes #75785\n\nWhen displaying a MIR borrowcheck error, we may need to find an upper\nbound for a region, which gives us a region to point to in the error\nmessage. However, a region might outlive multiple distinct universal\nregions, in which case the only upper bound is 'static\n\nTo try to display a meaningful error message, we compute an\n'approximate' upper bound by picking one of the universal regions.\nCurrently, we pick the region with the lowest index - however, this\ncaused us to produce a suboptimal error message in issue #75785\n\nThis PR `approx_universal_upper_bound` to prefer regions with an\n`external_name`. This causes us to prefer regions from function\narguments/upvars, which seems to lead to a nicer error message in some\ncases.", "tree": {"sha": "dd0594d4920da38c652ae983389074d17947dc3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd0594d4920da38c652ae983389074d17947dc3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/720b6941dff18896bcab36bec8e905fdb462d7d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2+oBCRBK7hj4Ov3rIwAAdHIIAGPmJpoDP4h0kUEVnc6fJFF6\ndUXxftsOp3bqR32gPRZwYZPMNuYBQ78wjmhZDDHnva18pUgoWb3nKFrgs+/6KTs/\n0QOFFbEL2Sdj3in/1d4YUtTlvmrru+kRluOBtLpfNGoh2yvOdEUyfoq+cd9ntFTB\nkTFquY+QO54y2LXwYRrQvQnqYbP/jvmtNkbJyAbcXa61Ek74elsQ2S5F6mGDIrwS\nEEt24XijBJ8pD/up+gPCOIWtJjCdMf7zd7uTe4t3hybo16nkPpkWzWPMTTnlqJVY\nnpKbf0PwQ2zeiOBLPtGw487FJvj+jCswiZO72WdU75Dnyce5juG6Yxxsto54UTo=\n=Apgm\n-----END PGP SIGNATURE-----\n", "payload": "tree dd0594d4920da38c652ae983389074d17947dc3c\nparent eb4fc71dc9024f15a0c9cc44bcc10c861e9d585e\nparent 419d3ae02849d47899f8fc221d37b05ac24f4efd\nauthor Dylan DPC <dylan.dpc@gmail.com> 1608247809 +0100\ncommitter GitHub <noreply@github.com> 1608247809 +0100\n\nRollup merge of #78164 - Aaron1011:fix/async-region-name, r=tmandry\n\nPrefer regions with an `external_name` in `approx_universal_upper_bound`\n\nFixes #75785\n\nWhen displaying a MIR borrowcheck error, we may need to find an upper\nbound for a region, which gives us a region to point to in the error\nmessage. However, a region might outlive multiple distinct universal\nregions, in which case the only upper bound is 'static\n\nTo try to display a meaningful error message, we compute an\n'approximate' upper bound by picking one of the universal regions.\nCurrently, we pick the region with the lowest index - however, this\ncaused us to produce a suboptimal error message in issue #75785\n\nThis PR `approx_universal_upper_bound` to prefer regions with an\n`external_name`. This causes us to prefer regions from function\narguments/upvars, which seems to lead to a nicer error message in some\ncases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/720b6941dff18896bcab36bec8e905fdb462d7d8", "html_url": "https://github.com/rust-lang/rust/commit/720b6941dff18896bcab36bec8e905fdb462d7d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/720b6941dff18896bcab36bec8e905fdb462d7d8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb4fc71dc9024f15a0c9cc44bcc10c861e9d585e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4fc71dc9024f15a0c9cc44bcc10c861e9d585e", "html_url": "https://github.com/rust-lang/rust/commit/eb4fc71dc9024f15a0c9cc44bcc10c861e9d585e"}, {"sha": "419d3ae02849d47899f8fc221d37b05ac24f4efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/419d3ae02849d47899f8fc221d37b05ac24f4efd", "html_url": "https://github.com/rust-lang/rust/commit/419d3ae02849d47899f8fc221d37b05ac24f4efd"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "9d45f6fd0d348878f92e0bdb7c17181391ae6a50", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/720b6941dff18896bcab36bec8e905fdb462d7d8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720b6941dff18896bcab36bec8e905fdb462d7d8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=720b6941dff18896bcab36bec8e905fdb462d7d8", "patch": "@@ -1145,8 +1145,24 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         for ur in self.scc_values.universal_regions_outlived_by(r_scc) {\n             let new_lub = self.universal_region_relations.postdom_upper_bound(lub, ur);\n             debug!(\"approx_universal_upper_bound: ur={:?} lub={:?} new_lub={:?}\", ur, lub, new_lub);\n+            // The upper bound of two non-static regions is static: this\n+            // means we know nothing about the relationship between these\n+            // two regions. Pick a 'better' one to use when constructing\n+            // a diagnostic\n             if ur != static_r && lub != static_r && new_lub == static_r {\n-                lub = std::cmp::min(ur, lub);\n+                // Prefer the region with an `external_name` - this\n+                // indicates that the region is early-bound, so working with\n+                // it can produce a nicer error.\n+                if self.region_definition(ur).external_name.is_some() {\n+                    lub = ur;\n+                } else if self.region_definition(lub).external_name.is_some() {\n+                    // Leave lub unchanged\n+                } else {\n+                    // If we get here, we don't have any reason to prefer\n+                    // one region over the other. Just pick the\n+                    // one with the lower index for now.\n+                    lub = std::cmp::min(ur, lub);\n+                }\n             } else {\n                 lub = new_lub;\n             }"}, {"sha": "b96cab9f0f51affffcac89671167a6490b5cc134", "filename": "src/test/ui/async-await/issue-74072-lifetime-name-annotations.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/720b6941dff18896bcab36bec8e905fdb462d7d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/720b6941dff18896bcab36bec8e905fdb462d7d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr?ref=720b6941dff18896bcab36bec8e905fdb462d7d8", "patch": "@@ -2,7 +2,7 @@ error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/issue-74072-lifetime-name-annotations.rs:9:5\n    |\n LL | pub async fn async_fn(x: &mut i32) -> &i32 {\n-   |                                       - let's call the lifetime of this reference `'1`\n+   |                          - let's call the lifetime of this reference `'1`\n LL |     let y = &*x;\n    |             --- borrow of `*x` occurs here\n LL |     *x += 1;"}, {"sha": "452614087be947c15a60911692280c2c058b2c16", "filename": "src/test/ui/async-await/issue-75785-confusing-named-region.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/720b6941dff18896bcab36bec8e905fdb462d7d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/720b6941dff18896bcab36bec8e905fdb462d7d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.rs?ref=720b6941dff18896bcab36bec8e905fdb462d7d8", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+//\n+// Regression test for issue #75785\n+// Tests that we don't point to a confusing named\n+// region when emitting a diagnostic\n+\n+pub async fn async_fn(x: &mut i32) -> (&i32, &i32) {\n+    let y = &*x;\n+    *x += 1; //~ ERROR cannot assign to\n+    (&32, y)\n+}\n+\n+fn main() {}"}, {"sha": "3b731d9c60a6ae20b51e776fc86dc88cd4468fc0", "filename": "src/test/ui/async-await/issue-75785-confusing-named-region.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/720b6941dff18896bcab36bec8e905fdb462d7d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/720b6941dff18896bcab36bec8e905fdb462d7d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-75785-confusing-named-region.stderr?ref=720b6941dff18896bcab36bec8e905fdb462d7d8", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `*x` because it is borrowed\n+  --> $DIR/issue-75785-confusing-named-region.rs:9:5\n+   |\n+LL | pub async fn async_fn(x: &mut i32) -> (&i32, &i32) {\n+   |                          - let's call the lifetime of this reference `'1`\n+LL |     let y = &*x;\n+   |             --- borrow of `*x` occurs here\n+LL |     *x += 1;\n+   |     ^^^^^^^ assignment to borrowed `*x` occurs here\n+LL |     (&32, y)\n+   |     -------- returning this value requires that `*x` is borrowed for `'1`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}]}