{"sha": "b290cd578260f307e872a95f971e5a7c656a80ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOTBjZDU3ODI2MGYzMDdlODcyYTk1Zjk3MWU1YTdjNjU2YTgwZWQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-20T17:28:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-20T17:34:43Z"}, "message": "Add cov_marks to insert_use tests", "tree": {"sha": "25e94bc1e043745d2b6bed3efa2ffe699a3cee7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25e94bc1e043745d2b6bed3efa2ffe699a3cee7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b290cd578260f307e872a95f971e5a7c656a80ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b290cd578260f307e872a95f971e5a7c656a80ed", "html_url": "https://github.com/rust-lang/rust/commit/b290cd578260f307e872a95f971e5a7c656a80ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b290cd578260f307e872a95f971e5a7c656a80ed/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c8f1b5c301a5d7a84d3c74a9fc48ef76cd11bd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8f1b5c301a5d7a84d3c74a9fc48ef76cd11bd6", "html_url": "https://github.com/rust-lang/rust/commit/2c8f1b5c301a5d7a84d3c74a9fc48ef76cd11bd6"}], "stats": {"total": 119, "additions": 77, "deletions": 42}, "files": [{"sha": "a454a2af3291508c49708e352ae3f97b38d30ff7", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=b290cd578260f307e872a95f971e5a7c656a80ed", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n     let range = ctx.sema.original_range(&syntax_under_caret).range;\n     let group_label = group_label(import_assets.import_candidate());\n-    let scope = ImportScope::find_insert_use_container(&syntax_under_caret, &ctx.sema)?;\n+    let scope = ImportScope::find_insert_use_container_with_macros(&syntax_under_caret, &ctx.sema)?;\n     for import in proposed_imports {\n         acc.add_group(\n             &group_label,"}, {"sha": "66f274fa78c1398a4bf3c23d0c517502f0d38dad", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 28, "deletions": 27, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=b290cd578260f307e872a95f971e5a7c656a80ed", "patch": "@@ -5,7 +5,7 @@ use hir::{Module, ModuleDef, Name, Variant};\n use ide_db::{\n     defs::Definition,\n     helpers::{\n-        insert_use::{insert_use, ImportScope},\n+        insert_use::{insert_use, ImportScope, InsertUseConfig},\n         mod_path_to_ast,\n     },\n     search::FileReference,\n@@ -79,16 +79,8 @@ pub(crate) fn extract_struct_from_enum_variant(\n                     &variant_hir_name,\n                     references,\n                 );\n-                processed.into_iter().for_each(|(segment, node, import)| {\n-                    if let Some((scope, path)) = import {\n-                        insert_use(&scope, mod_path_to_ast(&path), ctx.config.insert_use);\n-                    }\n-                    ted::insert_raw(\n-                        ted::Position::before(segment.syntax()),\n-                        make::path_from_text(&format!(\"{}\", segment)).clone_for_update().syntax(),\n-                    );\n-                    ted::insert_raw(ted::Position::before(segment.syntax()), make::token(T!['(']));\n-                    ted::insert_raw(ted::Position::after(&node), make::token(T![')']));\n+                processed.into_iter().for_each(|(path, node, import)| {\n+                    apply_references(ctx.config.insert_use, path, node, import)\n                 });\n             }\n             builder.edit_file(ctx.frange.file_id);\n@@ -103,21 +95,12 @@ pub(crate) fn extract_struct_from_enum_variant(\n                     &variant_hir_name,\n                     references,\n                 );\n-                processed.into_iter().for_each(|(segment, node, import)| {\n-                    if let Some((scope, path)) = import {\n-                        insert_use(&scope, mod_path_to_ast(&path), ctx.config.insert_use);\n-                    }\n-                    ted::insert_raw(\n-                        ted::Position::before(segment.syntax()),\n-                        make::path_from_text(&format!(\"{}\", segment)).clone_for_update().syntax(),\n-                    );\n-                    ted::insert_raw(ted::Position::before(segment.syntax()), make::token(T!['(']));\n-                    ted::insert_raw(ted::Position::after(&node), make::token(T![')']));\n+                processed.into_iter().for_each(|(path, node, import)| {\n+                    apply_references(ctx.config.insert_use, path, node, import)\n                 });\n             }\n \n-            let def = create_struct_def(variant_name.clone(), &field_list, enum_ast.visibility())\n-                .unwrap();\n+            let def = create_struct_def(variant_name.clone(), &field_list, enum_ast.visibility());\n             let start_offset = &variant.parent_enum().syntax().clone();\n             ted::insert_raw(ted::Position::before(start_offset), def.syntax());\n             ted::insert_raw(ted::Position::before(start_offset), &make::tokens::blank_line());\n@@ -167,7 +150,7 @@ fn create_struct_def(\n     variant_name: ast::Name,\n     field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n     visibility: Option<ast::Visibility>,\n-) -> Option<ast::Struct> {\n+) -> ast::Struct {\n     let pub_vis = Some(make::visibility_pub());\n     let field_list = match field_list {\n         Either::Left(field_list) => {\n@@ -184,7 +167,7 @@ fn create_struct_def(\n         .into(),\n     };\n \n-    Some(make::struct_(visibility, variant_name, None, field_list).clone_for_update())\n+    make::struct_(visibility, variant_name, None, field_list).clone_for_update()\n }\n \n fn update_variant(variant: &ast::Variant) -> Option<()> {\n@@ -199,6 +182,23 @@ fn update_variant(variant: &ast::Variant) -> Option<()> {\n     Some(())\n }\n \n+fn apply_references(\n+    insert_use_cfg: InsertUseConfig,\n+    segment: ast::PathSegment,\n+    node: SyntaxNode,\n+    import: Option<(ImportScope, hir::ModPath)>,\n+) {\n+    if let Some((scope, path)) = import {\n+        insert_use(&scope, mod_path_to_ast(&path), insert_use_cfg);\n+    }\n+    ted::insert_raw(\n+        ted::Position::before(segment.syntax()),\n+        make::path_from_text(&format!(\"{}\", segment)).clone_for_update().syntax(),\n+    );\n+    ted::insert_raw(ted::Position::before(segment.syntax()), make::token(T!['(']));\n+    ted::insert_raw(ted::Position::after(&node), make::token(T![')']));\n+}\n+\n fn process_references(\n     ctx: &AssistContext,\n     visited_modules: &mut FxHashSet<Module>,\n@@ -207,6 +207,8 @@ fn process_references(\n     variant_hir_name: &Name,\n     refs: Vec<FileReference>,\n ) -> Vec<(ast::PathSegment, SyntaxNode, Option<(ImportScope, hir::ModPath)>)> {\n+    // we have to recollect here eagerly as we are about to edit the tree we need to calculate the changes\n+    // and corresponding nodes up front\n     refs.into_iter()\n         .flat_map(|reference| {\n             let (segment, scope_node, module) =\n@@ -220,8 +222,7 @@ fn process_references(\n                 if let Some(mut mod_path) = mod_path {\n                     mod_path.pop_segment();\n                     mod_path.push_segment(variant_hir_name.clone());\n-                    // uuuh this wont properly work, find_insert_use_container ascends macros so we might a get new syntax node???\n-                    let scope = ImportScope::find_insert_use_container(&scope_node, &ctx.sema)?;\n+                    let scope = ImportScope::find_insert_use_container(&scope_node)?;\n                     visited_modules.insert(module);\n                     return Some((segment, scope_node, Some((scope, mod_path))));\n                 }"}, {"sha": "99ba798606bbb9aff8b3c7e3e602857017747925", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=b290cd578260f307e872a95f971e5a7c656a80ed", "patch": "@@ -31,7 +31,7 @@ pub(crate) fn replace_qualified_name_with_use(\n     }\n \n     let target = path.syntax().text_range();\n-    let scope = ImportScope::find_insert_use_container(path.syntax(), &ctx.sema)?;\n+    let scope = ImportScope::find_insert_use_container_with_macros(path.syntax(), &ctx.sema)?;\n     let syntax = scope.as_syntax_node();\n     acc.add(\n         AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),\n@@ -42,15 +42,15 @@ pub(crate) fn replace_qualified_name_with_use(\n             // affected (that is, all paths inside the node we added the `use` to).\n             let syntax = builder.make_mut(syntax.clone());\n             if let Some(ref import_scope) = ImportScope::from(syntax.clone()) {\n-                insert_use(import_scope, path.clone(), ctx.config.insert_use);\n+                shorten_paths(&syntax, &path.clone_for_update());\n+                insert_use(import_scope, path, ctx.config.insert_use);\n             }\n-            shorten_paths(syntax.clone(), &path.clone_for_update());\n         },\n     )\n }\n \n /// Adds replacements to `re` that shorten `path` in all descendants of `node`.\n-fn shorten_paths(node: SyntaxNode, path: &ast::Path) {\n+fn shorten_paths(node: &SyntaxNode, path: &ast::Path) {\n     for child in node.children() {\n         match_ast! {\n             match child {\n@@ -59,14 +59,10 @@ fn shorten_paths(node: SyntaxNode, path: &ast::Path) {\n                 ast::Use(_it) => continue,\n                 // Don't descend into submodules, they don't have the same `use` items in scope.\n                 ast::Module(_it) => continue,\n-\n-                ast::Path(p) => {\n-                    match maybe_replace_path(p.clone(), path.clone()) {\n-                        Some(()) => {},\n-                        None => shorten_paths(p.syntax().clone(), path),\n-                    }\n+                ast::Path(p) => if maybe_replace_path(p.clone(), path.clone()).is_none() {\n+                    shorten_paths(p.syntax(), path);\n                 },\n-                _ => shorten_paths(child, path),\n+                _ => shorten_paths(&child, path),\n             }\n         }\n     }"}, {"sha": "9d5b61562a083618523b8147eb88bec8a758963a", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=b290cd578260f307e872a95f971e5a7c656a80ed", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n \n     let user_input_lowercased = potential_import_name.to_lowercase();\n     let import_assets = import_assets(ctx, potential_import_name)?;\n-    let import_scope = ImportScope::find_insert_use_container(\n+    let import_scope = ImportScope::find_insert_use_container_with_macros(\n         position_for_import(ctx, Some(import_assets.import_candidate()))?,\n         &ctx.sema,\n     )?;"}, {"sha": "e32633565400659246b697853ffd3f157ae0653d", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=b290cd578260f307e872a95f971e5a7c656a80ed", "patch": "@@ -179,7 +179,7 @@ pub fn resolve_completion_edits(\n ) -> Option<Vec<TextEdit>> {\n     let ctx = CompletionContext::new(db, position, config)?;\n     let position_for_import = position_for_import(&ctx, None)?;\n-    let scope = ImportScope::find_insert_use_container(position_for_import, &ctx.sema)?;\n+    let scope = ImportScope::find_insert_use_container_with_macros(position_for_import, &ctx.sema)?;\n \n     let current_module = ctx.sema.scope(position_for_import).module()?;\n     let current_crate = current_module.krate();"}, {"sha": "a43504a275817cf7323c751b3fad86abbe151a06", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=b290cd578260f307e872a95f971e5a7c656a80ed", "patch": "@@ -38,13 +38,18 @@ impl ImportScope {\n     }\n \n     /// Determines the containing syntax node in which to insert a `use` statement affecting `position`.\n-    pub fn find_insert_use_container(\n+    pub fn find_insert_use_container_with_macros(\n         position: &SyntaxNode,\n         sema: &Semantics<'_, RootDatabase>,\n     ) -> Option<Self> {\n         sema.ancestors_with_macros(position.clone()).find_map(Self::from)\n     }\n \n+    /// Determines the containing syntax node in which to insert a `use` statement affecting `position`.\n+    pub fn find_insert_use_container(position: &SyntaxNode) -> Option<Self> {\n+        std::iter::successors(Some(position.clone()), SyntaxNode::parent).find_map(Self::from)\n+    }\n+\n     pub fn as_syntax_node(&self) -> &SyntaxNode {\n         match self {\n             ImportScope::File(file) => file.syntax(),\n@@ -446,8 +451,10 @@ fn insert_use_(\n \n     if !group_imports {\n         if let Some((_, _, node)) = path_node_iter.last() {\n+            cov_mark::hit!(insert_no_grouping_last);\n             ted::insert(ted::Position::after(node), use_item.syntax());\n         } else {\n+            cov_mark::hit!(insert_no_grouping_last2);\n             ted::insert(ted::Position::first_child_of(scope_syntax), make::tokens::blank_line());\n             ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n         }\n@@ -471,10 +478,12 @@ fn insert_use_(\n         });\n \n     if let Some((.., node)) = post_insert {\n+        cov_mark::hit!(insert_group);\n         // insert our import before that element\n         return ted::insert(ted::Position::before(node), use_item.syntax());\n     }\n     if let Some(node) = last {\n+        cov_mark::hit!(insert_group_last);\n         // there is no element after our new import, so append it to the end of the group\n         return ted::insert(ted::Position::after(node), use_item.syntax());\n     }\n@@ -487,6 +496,7 @@ fn insert_use_(\n         .inspect(|(.., node)| last = Some(node.clone()))\n         .find(|(p, ..)| ImportGroup::new(p) > group);\n     if let Some((.., node)) = post_group {\n+        cov_mark::hit!(insert_group_new_group);\n         ted::insert(ted::Position::before(&node), use_item.syntax());\n         if let Some(node) = algo::non_trivia_sibling(node.into(), Direction::Prev) {\n             ted::insert(ted::Position::after(node), make::tokens::single_newline());\n@@ -495,6 +505,7 @@ fn insert_use_(\n     }\n     // there is no such group, so append after the last one\n     if let Some(node) = last {\n+        cov_mark::hit!(insert_group_no_group);\n         ted::insert(ted::Position::after(&node), use_item.syntax());\n         ted::insert(ted::Position::after(node), make::tokens::single_newline());\n         return;\n@@ -508,22 +519,26 @@ fn insert_use_(\n         })\n         .last()\n     {\n+        cov_mark::hit!(insert_group_empty_inner_attr);\n         ted::insert(ted::Position::after(&last_inner_element), use_item.syntax());\n         ted::insert(ted::Position::after(last_inner_element), make::tokens::single_newline());\n         return;\n     }\n     match scope {\n         ImportScope::File(_) => {\n+            cov_mark::hit!(insert_group_empty_file);\n             ted::insert(ted::Position::first_child_of(scope_syntax), make::tokens::blank_line());\n             ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax())\n         }\n         // don't insert the imports before the item list's opening curly brace\n         ImportScope::Module(item_list) => match item_list.l_curly_token() {\n             Some(b) => {\n+                cov_mark::hit!(insert_group_empty_module);\n                 ted::insert(ted::Position::after(&b), make::tokens::single_newline());\n                 ted::insert(ted::Position::after(&b), use_item.syntax());\n             }\n             None => {\n+                // This should never happens, broken module syntax node\n                 ted::insert(\n                     ted::Position::first_child_of(scope_syntax),\n                     make::tokens::blank_line(),"}, {"sha": "048c213e229ef76d0509c3232e2e2fc2f1ae7ebe", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b290cd578260f307e872a95f971e5a7c656a80ed/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=b290cd578260f307e872a95f971e5a7c656a80ed", "patch": "@@ -5,6 +5,7 @@ use test_utils::assert_eq_text;\n \n #[test]\n fn insert_not_group() {\n+    cov_mark::check!(insert_no_grouping_last);\n     check(\n         \"use external_crate2::bar::A\",\n         r\"\n@@ -26,6 +27,21 @@ use external_crate2::bar::A;\",\n     );\n }\n \n+#[test]\n+fn insert_not_group_empty() {\n+    cov_mark::check!(insert_no_grouping_last2);\n+    check(\n+        \"use external_crate2::bar::A\",\n+        r\"\",\n+        r\"use external_crate2::bar::A;\n+\n+\",\n+        None,\n+        false,\n+        false,\n+    );\n+}\n+\n #[test]\n fn insert_existing() {\n     check_full(\"std::fs\", \"use std::fs;\", \"use std::fs;\")\n@@ -65,6 +81,7 @@ fn insert_start_indent() {\n \n #[test]\n fn insert_middle() {\n+    cov_mark::check!(insert_group);\n     check_none(\n         \"std::bar::EE\",\n         r\"\n@@ -101,6 +118,7 @@ fn insert_middle_indent() {\n \n #[test]\n fn insert_end() {\n+    cov_mark::check!(insert_group_last);\n     check_none(\n         \"std::bar::ZZ\",\n         r\"\n@@ -199,6 +217,7 @@ fn insert_first_matching_group() {\n \n #[test]\n fn insert_missing_group_std() {\n+    cov_mark::check!(insert_group_new_group);\n     check_none(\n         \"std::fmt\",\n         r\"\n@@ -214,6 +233,7 @@ fn insert_missing_group_std() {\n \n #[test]\n fn insert_missing_group_self() {\n+    cov_mark::check!(insert_group_no_group);\n     check_none(\n         \"self::fmt\",\n         r\"\n@@ -240,6 +260,7 @@ fn main() {}\",\n \n #[test]\n fn insert_empty_file() {\n+    cov_mark::check!(insert_group_empty_file);\n     // empty files will get two trailing newlines\n     // this is due to the test case insert_no_imports above\n     check_full(\n@@ -253,6 +274,7 @@ fn insert_empty_file() {\n \n #[test]\n fn insert_empty_module() {\n+    cov_mark::check!(insert_group_empty_module);\n     check(\n         \"foo::bar\",\n         \"mod x {}\",\n@@ -267,6 +289,7 @@ fn insert_empty_module() {\n \n #[test]\n fn insert_after_inner_attr() {\n+    cov_mark::check!(insert_group_empty_inner_attr);\n     check_full(\n         \"foo::bar\",\n         r\"#![allow(unused_imports)]\","}]}