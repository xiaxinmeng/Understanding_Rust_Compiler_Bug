{"sha": "4529af972e55f8f85afaada0ee2dd18ab8653637", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MjlhZjk3MmU1NWY4Zjg1YWZhYWRhMGVlMmRkMThhYjg2NTM2Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-27T17:27:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-27T17:27:26Z"}, "message": "Auto merge of #77272 - jonas-schievink:rollup-dydo5kn, r=jonas-schievink\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #76839 (Add asm! support for MIPS)\n - #77203 (Check for missing const-stability attributes in `rustc_passes`)\n - #77249 (Separate `private_intra_doc_links` and `broken_intra_doc_links` into separate lints)\n - #77252 (reduce overlong line)\n - #77256 (Fix typo in ExpnData documentation)\n - #77262 (Remove duplicate comment)\n - #77263 (Clean up trivial if let)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "149ced033e0eaa1bcc1487933266c163fe6496cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/149ced033e0eaa1bcc1487933266c163fe6496cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4529af972e55f8f85afaada0ee2dd18ab8653637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4529af972e55f8f85afaada0ee2dd18ab8653637", "html_url": "https://github.com/rust-lang/rust/commit/4529af972e55f8f85afaada0ee2dd18ab8653637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4529af972e55f8f85afaada0ee2dd18ab8653637/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d216fef3ea9446a020cf86ae438ae9a0d40563f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d216fef3ea9446a020cf86ae438ae9a0d40563f", "html_url": "https://github.com/rust-lang/rust/commit/1d216fef3ea9446a020cf86ae438ae9a0d40563f"}, {"sha": "344ab3fb7b78286e542272f879690f2f3c4b9ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/344ab3fb7b78286e542272f879690f2f3c4b9ff9", "html_url": "https://github.com/rust-lang/rust/commit/344ab3fb7b78286e542272f879690f2f3c4b9ff9"}], "stats": {"total": 550, "additions": 520, "deletions": 30}, "files": [{"sha": "f801f845ac16c410848f6fea06a90e1a016e7579", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -259,6 +259,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {}\n                 InlineAsmArch::Nvptx64 => {}\n                 InlineAsmArch::Hexagon => {}\n+                InlineAsmArch::Mips => {}\n             }\n         }\n         if !options.contains(InlineAsmOptions::NOMEM) {\n@@ -505,6 +506,8 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => \"w\",\n             InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => \"r\",\n+            InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => \"h\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => \"r\",\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => \"l\",\n@@ -551,6 +554,7 @@ fn modifier_to_llvm(\n             }\n         }\n         InlineAsmRegClass::Hexagon(_) => None,\n+        InlineAsmRegClass::Mips(_) => None,\n         InlineAsmRegClass::Nvptx(_) => None,\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg)\n         | InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => None,\n@@ -603,6 +607,8 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n             cx.type_vector(cx.type_i64(), 2)\n         }\n         InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => cx.type_i32(),\n+        InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => cx.type_i16(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => cx.type_i32(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => cx.type_i64(),\n@@ -700,6 +706,12 @@ fn llvm_fixup_input(\n                 value\n             }\n         }\n+        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => match s.value {\n+            // MIPS only supports register-length arithmetics.\n+            Primitive::Int(Integer::I8 | Integer::I16, _) => bx.zext(value, bx.cx.type_i32()),\n+            Primitive::F32 => bx.bitcast(value, bx.cx.type_i32()),\n+            _ => value,\n+        },\n         _ => value,\n     }\n }\n@@ -768,6 +780,13 @@ fn llvm_fixup_output(\n                 value\n             }\n         }\n+        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => match s.value {\n+            // MIPS only supports register-length arithmetics.\n+            Primitive::Int(Integer::I8, _) => bx.trunc(value, bx.cx.type_i8()),\n+            Primitive::Int(Integer::I16, _) => bx.trunc(value, bx.cx.type_i16()),\n+            Primitive::F32 => bx.bitcast(value, bx.cx.type_f32()),\n+            _ => value,\n+        },\n         _ => value,\n     }\n }\n@@ -831,6 +850,12 @@ fn llvm_fixup_output_type(\n                 layout.llvm_type(cx)\n             }\n         }\n+        (InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg), Abi::Scalar(s)) => match s.value {\n+            // MIPS only supports register-length arithmetics.\n+            Primitive::Int(Integer::I8 | Integer::I16, _) => cx.type_i32(),\n+            Primitive::F32 => cx.type_i32(),\n+            _ => layout.llvm_type(cx),\n+        },\n         _ => layout.llvm_type(cx),\n     }\n }"}, {"sha": "33caedfc198260f846c51c3f6fbabe54d69ee932", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -305,6 +305,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     add_lint_group!(\n         \"rustdoc\",\n         BROKEN_INTRA_DOC_LINKS,\n+        PRIVATE_INTRA_DOC_LINKS,\n         INVALID_CODEBLOCK_ATTRIBUTES,\n         MISSING_DOC_CODE_EXAMPLES,\n         PRIVATE_DOC_TESTS"}, {"sha": "1db1f6ceedac5bbd80c657c46adb9e7e3c4e7ba1", "filename": "compiler/rustc_mir/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -50,7 +50,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             None => {\n                 if let Some(stab) = tcx.lookup_stability(def_id) {\n                     if stab.level.is_stable() {\n-                        tcx.sess.span_err(\n+                        tcx.sess.delay_span_bug(\n                             tcx.def_span(def_id),\n                             \"stable const functions must have either `rustc_const_stable` or \\\n                              `rustc_const_unstable` attribute\","}, {"sha": "ee6adbc7a455d52b1e909aa32d8d5d2c97c191a7", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -204,9 +204,6 @@ impl Validator<'mir, 'tcx> {\n     pub fn check_body(&mut self) {\n         let ConstCx { tcx, body, def_id, .. } = *self.ccx;\n \n-        // HACK: This function has side-effects???? Make sure we call it.\n-        let _ = crate::const_eval::is_min_const_fn(tcx, def_id.to_def_id());\n-\n         // The local type and predicate checks are not free and only relevant for `const fn`s.\n         if self.const_kind() == hir::ConstContext::ConstFn {\n             // Prevent const trait methods from being annotated as `stable`."}, {"sha": "1378b0d57053e84dba75ebef6254eb3fc42de7e9", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -459,6 +459,21 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n             self.tcx.sess.span_err(span, &format!(\"{} has missing stability attribute\", descr));\n         }\n     }\n+\n+    fn check_missing_const_stability(&self, hir_id: HirId, span: Span) {\n+        let stab_map = self.tcx.stability();\n+        let stab = stab_map.local_stability(hir_id);\n+        if stab.map_or(false, |stab| stab.level.is_stable()) {\n+            let const_stab = stab_map.local_const_stability(hir_id);\n+            if const_stab.is_none() {\n+                self.tcx.sess.span_err(\n+                    span,\n+                    \"`#[stable]` const functions must also be either \\\n+                    `#[rustc_const_stable]` or `#[rustc_const_unstable]`\",\n+                );\n+            }\n+        }\n+    }\n }\n \n impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n@@ -469,14 +484,23 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn visit_item(&mut self, i: &'tcx Item<'tcx>) {\n-        match i.kind {\n-            // Inherent impls and foreign modules serve only as containers for other items,\n-            // they don't have their own stability. They still can be annotated as unstable\n-            // and propagate this unstability to children, but this annotation is completely\n-            // optional. They inherit stability from their parents when unannotated.\n-            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..) => {}\n+        // Inherent impls and foreign modules serve only as containers for other items,\n+        // they don't have their own stability. They still can be annotated as unstable\n+        // and propagate this unstability to children, but this annotation is completely\n+        // optional. They inherit stability from their parents when unannotated.\n+        if !matches!(\n+            i.kind,\n+            hir::ItemKind::Impl { of_trait: None, .. } | hir::ItemKind::ForeignMod(..)\n+        ) {\n+            self.check_missing_stability(i.hir_id, i.span);\n+        }\n \n-            _ => self.check_missing_stability(i.hir_id, i.span),\n+        // Ensure `const fn` that are `stable` have one of `rustc_const_unstable` or\n+        // `rustc_const_stable`.\n+        if self.tcx.features().staged_api\n+            && matches!(&i.kind, hir::ItemKind::Fn(sig, ..) if sig.header.is_const())\n+        {\n+            self.check_missing_const_stability(i.hir_id, i.span);\n         }\n \n         intravisit::walk_item(self, i)"}, {"sha": "0cc97fb4541d194adba5fc535c260a0a8c565e59", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -1826,6 +1826,17 @@ declare_lint! {\n     \"failures in resolving intra-doc link targets\"\n }\n \n+declare_lint! {\n+    /// This is a subset of `broken_intra_doc_links` that warns when linking from\n+    /// a public item to a private one. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n+    ///\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#private_intra_doc_links\n+    pub PRIVATE_INTRA_DOC_LINKS,\n+    Warn,\n+    \"linking from a public item to a private one\"\n+}\n+\n declare_lint! {\n     /// The `invalid_codeblock_attributes` lint detects code block attributes\n     /// in documentation examples that have potentially mis-typed values. This"}, {"sha": "ff5e6156d846b5336095d5ec06988aafd0518af0", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -1103,9 +1103,6 @@ impl Session {\n         self.used_attrs.lock().is_marked(attr)\n     }\n \n-    /// Returns `true` if the attribute's path matches the argument. If it matches, then the\n-    /// attribute is marked as used.\n-\n     /// Returns `true` if the attribute's path matches the argument. If it\n     /// matches, then the attribute is marked as used.\n     ///"}, {"sha": "fb80dcb75617da2ec2206f6cb66893e6be6f9088", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -702,7 +702,7 @@ pub struct ExpnData {\n     /// The `DefId` of the macro being invoked,\n     /// if this `ExpnData` corresponds to a macro invocation\n     pub macro_def_id: Option<DefId>,\n-    /// The crate that originally created this `ExpnData. During\n+    /// The crate that originally created this `ExpnData`. During\n     /// metadata serialization, we only encode `ExpnData`s that were\n     /// created locally - when our serialized metadata is decoded,\n     /// foreign `ExpnId`s will have their `ExpnData` looked up\n@@ -759,7 +759,7 @@ impl ExpnData {\n \n     #[inline]\n     pub fn is_root(&self) -> bool {\n-        if let ExpnKind::Root = self.kind { true } else { false }\n+        matches!(self.kind, ExpnKind::Root)\n     }\n }\n "}, {"sha": "638c52d97f1e3dc6aa167b8c648a715d7d9d4f06", "filename": "compiler/rustc_target/src/asm/mips.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmips.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -0,0 +1,132 @@\n+use super::{InlineAsmArch, InlineAsmType};\n+use rustc_macros::HashStable_Generic;\n+use std::fmt;\n+\n+def_reg_class! {\n+    Mips MipsInlineAsmRegClass {\n+        reg,\n+        freg,\n+    }\n+}\n+\n+impl MipsInlineAsmRegClass {\n+    pub fn valid_modifiers(self, _arch: super::InlineAsmArch) -> &'static [char] {\n+        &[]\n+    }\n+\n+    pub fn suggest_class(self, _arch: InlineAsmArch, _ty: InlineAsmType) -> Option<Self> {\n+        None\n+    }\n+\n+    pub fn suggest_modifier(\n+        self,\n+        _arch: InlineAsmArch,\n+        _ty: InlineAsmType,\n+    ) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn supported_types(\n+        self,\n+        _arch: InlineAsmArch,\n+    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+        match self {\n+            Self::reg => types! { _: I8, I16, I32, F32; },\n+            Self::freg => types! { _: F32; },\n+        }\n+    }\n+}\n+\n+// The reserved registers are somewhat taken from <https://git.io/JUR1k#L150>.\n+def_regs! {\n+    Mips MipsInlineAsmReg MipsInlineAsmRegClass {\n+        v0: reg = [\"$2\", \"$v0\"],\n+        v1: reg = [\"$3\", \"$v1\"],\n+        a0: reg = [\"$4\", \"$a0\"],\n+        a1: reg = [\"$5\", \"$a1\"],\n+        a2: reg = [\"$6\", \"$a2\"],\n+        a3: reg = [\"$7\", \"$a3\"],\n+        // FIXME: Reserve $t0, $t1 if in mips16 mode.\n+        t0: reg = [\"$8\", \"$t0\"],\n+        t1: reg = [\"$9\", \"$t1\"],\n+        t2: reg = [\"$10\", \"$t2\"],\n+        t3: reg = [\"$11\", \"$t3\"],\n+        t4: reg = [\"$12\", \"$t4\"],\n+        t5: reg = [\"$13\", \"$t5\"],\n+        t6: reg = [\"$14\", \"$t6\"],\n+        t7: reg = [\"$15\", \"$t7\"],\n+        s0: reg = [\"$16\", \"$s0\"],\n+        s1: reg = [\"$17\", \"$s1\"],\n+        s2: reg = [\"$18\", \"$s2\"],\n+        s3: reg = [\"$19\", \"$s3\"],\n+        s4: reg = [\"$20\", \"$s4\"],\n+        s5: reg = [\"$21\", \"$s5\"],\n+        s6: reg = [\"$22\", \"$s6\"],\n+        s7: reg = [\"$23\", \"$s7\"],\n+        t8: reg = [\"$24\", \"$t8\"],\n+        t9: reg = [\"$25\", \"$t9\"],\n+        f0: freg = [\"$f0\"],\n+        f1: freg = [\"$f1\"],\n+        f2: freg = [\"$f2\"],\n+        f3: freg = [\"$f3\"],\n+        f4: freg = [\"$f4\"],\n+        f5: freg = [\"$f5\"],\n+        f6: freg = [\"$f6\"],\n+        f7: freg = [\"$f7\"],\n+        f8: freg = [\"$f8\"],\n+        f9: freg = [\"$f9\"],\n+        f10: freg = [\"$f10\"],\n+        f11: freg = [\"$f11\"],\n+        f12: freg = [\"$f12\"],\n+        f13: freg = [\"$f13\"],\n+        f14: freg = [\"$f14\"],\n+        f15: freg = [\"$f15\"],\n+        f16: freg = [\"$f16\"],\n+        f17: freg = [\"$f17\"],\n+        f18: freg = [\"$f18\"],\n+        f19: freg = [\"$f19\"],\n+        f20: freg = [\"$f20\"],\n+        f21: freg = [\"$f21\"],\n+        f22: freg = [\"$f22\"],\n+        f23: freg = [\"$f23\"],\n+        f24: freg = [\"$f24\"],\n+        f25: freg = [\"$f25\"],\n+        f26: freg = [\"$f26\"],\n+        f27: freg = [\"$f27\"],\n+        f28: freg = [\"$f28\"],\n+        f29: freg = [\"$f29\"],\n+        f30: freg = [\"$f30\"],\n+        f31: freg = [\"$f31\"],\n+        #error = [\"$0\", \"$zero\"] =>\n+            \"constant zero cannot be used as an operand for inline asm\",\n+        #error = [\"$1\", \"$at\"] =>\n+            \"reserved for assembler (Assembler Temp)\",\n+        #error = [\"$26\", \"$k0\"] =>\n+            \"OS-reserved register cannot be used as an operand for inline asm\",\n+        #error = [\"$27\", \"$k1\"] =>\n+            \"OS-reserved register cannot be used as an operand for inline asm\",\n+        #error = [\"$28\", \"$gp\"] =>\n+            \"the global pointer cannot be used as an operand for inline asm\",\n+        #error = [\"$29\", \"$sp\"] =>\n+            \"the stack pointer cannot be used as an operand for inline asm\",\n+        #error = [\"$30\", \"$s8\", \"$fp\"] =>\n+            \"the frame pointer cannot be used as an operand for inline asm\",\n+        #error = [\"$31\", \"$ra\"] =>\n+            \"the return address register cannot be used as an operand for inline asm\",\n+    }\n+}\n+\n+impl MipsInlineAsmReg {\n+    pub fn emit(\n+        self,\n+        out: &mut dyn fmt::Write,\n+        _arch: InlineAsmArch,\n+        _modifier: Option<char>,\n+    ) -> fmt::Result {\n+        out.write_str(self.name())\n+    }\n+}"}, {"sha": "e2f8e91fa9574b0ed8f186a512a5fab2b64f06ff", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -152,13 +152,15 @@ macro_rules! types {\n mod aarch64;\n mod arm;\n mod hexagon;\n+mod mips;\n mod nvptx;\n mod riscv;\n mod x86;\n \n pub use aarch64::{AArch64InlineAsmReg, AArch64InlineAsmRegClass};\n pub use arm::{ArmInlineAsmReg, ArmInlineAsmRegClass};\n pub use hexagon::{HexagonInlineAsmReg, HexagonInlineAsmRegClass};\n+pub use mips::{MipsInlineAsmReg, MipsInlineAsmRegClass};\n pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n pub use riscv::{RiscVInlineAsmReg, RiscVInlineAsmRegClass};\n pub use x86::{X86InlineAsmReg, X86InlineAsmRegClass};\n@@ -173,6 +175,7 @@ pub enum InlineAsmArch {\n     RiscV64,\n     Nvptx64,\n     Hexagon,\n+    Mips,\n }\n \n impl FromStr for InlineAsmArch {\n@@ -188,6 +191,7 @@ impl FromStr for InlineAsmArch {\n             \"riscv64\" => Ok(Self::RiscV64),\n             \"nvptx64\" => Ok(Self::Nvptx64),\n             \"hexagon\" => Ok(Self::Hexagon),\n+            \"mips\" => Ok(Self::Mips),\n             _ => Err(()),\n         }\n     }\n@@ -201,6 +205,7 @@ pub enum InlineAsmReg {\n     RiscV(RiscVInlineAsmReg),\n     Nvptx(NvptxInlineAsmReg),\n     Hexagon(HexagonInlineAsmReg),\n+    Mips(MipsInlineAsmReg),\n }\n \n impl InlineAsmReg {\n@@ -211,6 +216,7 @@ impl InlineAsmReg {\n             Self::AArch64(r) => r.name(),\n             Self::RiscV(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n+            Self::Mips(r) => r.name(),\n         }\n     }\n \n@@ -221,6 +227,7 @@ impl InlineAsmReg {\n             Self::AArch64(r) => InlineAsmRegClass::AArch64(r.reg_class()),\n             Self::RiscV(r) => InlineAsmRegClass::RiscV(r.reg_class()),\n             Self::Hexagon(r) => InlineAsmRegClass::Hexagon(r.reg_class()),\n+            Self::Mips(r) => InlineAsmRegClass::Mips(r.reg_class()),\n         }\n     }\n \n@@ -252,6 +259,9 @@ impl InlineAsmReg {\n             InlineAsmArch::Hexagon => {\n                 Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n+            InlineAsmArch::Mips => {\n+                Self::Mips(MipsInlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            }\n         })\n     }\n \n@@ -269,6 +279,7 @@ impl InlineAsmReg {\n             Self::AArch64(r) => r.emit(out, arch, modifier),\n             Self::RiscV(r) => r.emit(out, arch, modifier),\n             Self::Hexagon(r) => r.emit(out, arch, modifier),\n+            Self::Mips(r) => r.emit(out, arch, modifier),\n         }\n     }\n \n@@ -279,6 +290,7 @@ impl InlineAsmReg {\n             Self::AArch64(_) => cb(self),\n             Self::RiscV(_) => cb(self),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n+            Self::Mips(_) => cb(self),\n         }\n     }\n }\n@@ -291,6 +303,7 @@ pub enum InlineAsmRegClass {\n     RiscV(RiscVInlineAsmRegClass),\n     Nvptx(NvptxInlineAsmRegClass),\n     Hexagon(HexagonInlineAsmRegClass),\n+    Mips(MipsInlineAsmRegClass),\n }\n \n impl InlineAsmRegClass {\n@@ -302,6 +315,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.name(),\n             Self::Nvptx(r) => r.name(),\n             Self::Hexagon(r) => r.name(),\n+            Self::Mips(r) => r.name(),\n         }\n     }\n \n@@ -316,6 +330,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::RiscV),\n             Self::Nvptx(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Nvptx),\n             Self::Hexagon(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Hexagon),\n+            Self::Mips(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Mips),\n         }\n     }\n \n@@ -337,6 +352,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.suggest_modifier(arch, ty),\n             Self::Nvptx(r) => r.suggest_modifier(arch, ty),\n             Self::Hexagon(r) => r.suggest_modifier(arch, ty),\n+            Self::Mips(r) => r.suggest_modifier(arch, ty),\n         }\n     }\n \n@@ -354,6 +370,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.default_modifier(arch),\n             Self::Nvptx(r) => r.default_modifier(arch),\n             Self::Hexagon(r) => r.default_modifier(arch),\n+            Self::Mips(r) => r.default_modifier(arch),\n         }\n     }\n \n@@ -370,6 +387,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.supported_types(arch),\n             Self::Nvptx(r) => r.supported_types(arch),\n             Self::Hexagon(r) => r.supported_types(arch),\n+            Self::Mips(r) => r.supported_types(arch),\n         }\n     }\n \n@@ -391,6 +409,7 @@ impl InlineAsmRegClass {\n                 InlineAsmArch::Hexagon => {\n                     Self::Hexagon(HexagonInlineAsmRegClass::parse(arch, name)?)\n                 }\n+                InlineAsmArch::Mips => Self::Mips(MipsInlineAsmRegClass::parse(arch, name)?),\n             })\n         })\n     }\n@@ -405,6 +424,7 @@ impl InlineAsmRegClass {\n             Self::RiscV(r) => r.valid_modifiers(arch),\n             Self::Nvptx(r) => r.valid_modifiers(arch),\n             Self::Hexagon(r) => r.valid_modifiers(arch),\n+            Self::Mips(r) => r.valid_modifiers(arch),\n         }\n     }\n }\n@@ -545,5 +565,10 @@ pub fn allocatable_registers(\n             hexagon::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n+        InlineAsmArch::Mips => {\n+            let mut map = mips::regclass_map();\n+            mips::fill_reg_map(arch, has_feature, target, &mut map);\n+            map\n+        }\n     }\n }"}, {"sha": "f5b96db1b0f478c72a05d3d808f9192cba0a02ad", "filename": "src/bootstrap/defaults/README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Fbootstrap%2Fdefaults%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Fbootstrap%2Fdefaults%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2FREADME.md?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -4,7 +4,8 @@ These defaults are intended to be a good starting point for working with x.py,\n with the understanding that no one set of defaults make sense for everyone.\n \n They are still experimental, and we'd appreciate your help improving them!\n-If you use a setting that's not in these defaults that you think others would benefit from, please [file an issue] or make a PR with the changes.\n+If you use a setting that's not in these defaults that you think\n+others would benefit from, please [file an issue] or make a PR with the changes.\n Similarly, if one of these defaults doesn't match what you use personally,\n please open an issue to get it changed.\n "}, {"sha": "3e632a0644a732f425a218a97832dadb807ece2d", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -62,6 +62,46 @@ help: to link to the function, add parentheses\n \n ```\n \n+## private_intra_doc_links\n+\n+This lint **warns by default**. This lint detects when [intra-doc links] from public to private items.\n+For example:\n+\n+```rust\n+/// [private]\n+pub fn public() {}\n+fn private() {}\n+```\n+\n+This gives a warning that the link will be broken when it appears in your documentation:\n+\n+```text\n+warning: public documentation for `public` links to private item `private`\n+ --> priv.rs:1:6\n+  |\n+1 | /// [private]\n+  |      ^^^^^^^ this item is private\n+  |\n+  = note: `#[warn(private_intra_doc_links)]` on by default\n+  = note: this link will resolve properly if you pass `--document-private-items`\n+```\n+\n+Note that this has different behavior depending on whether you pass `--document-private-items` or not!\n+If you document private items, then it will still generate a link, despite the warning:\n+\n+```text\n+warning: public documentation for `public` links to private item `private`\n+ --> priv.rs:1:6\n+  |\n+1 | /// [private]\n+  |      ^^^^^^^ this item is private\n+  |\n+  = note: `#[warn(private_intra_doc_links)]` on by default\n+  = note: this link resolves only because you passed `--document-private-items`, but will break without\n+```\n+\n+[intra-doc links]: linking-to-items-by-name.html\n+\n ## missing_docs\n \n This lint is **allowed by default**. It detects items missing documentation."}, {"sha": "9bed06d323e08c01a9fa134fff095408e1b708d2", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -27,6 +27,7 @@ Inline assembly is currently supported on the following architectures:\n - RISC-V\n - NVPTX\n - Hexagon\n+- MIPS32\n \n ## Basic usage\n \n@@ -512,6 +513,8 @@ Here is the list of currently supported register classes:\n | ARM | `qreg` | `q[0-15]` | `w` |\n | ARM | `qreg_low8` | `q[0-7]` | `t` |\n | ARM | `qreg_low4` | `q[0-3]` | `x` |\n+| MIPS32 | `reg` | `$[2-25]` | `r` |\n+| MIPS32 | `freg` | `$f[0-31]` | `f` |\n | NVPTX | `reg16` | None\\* | `h` |\n | NVPTX | `reg32` | None\\* | `r` |\n | NVPTX | `reg64` | None\\* | `l` |\n@@ -547,6 +550,8 @@ Each register class has constraints on which value types they can be used with.\n | ARM | `sreg` | `vfp2` | `i32`, `f32` |\n | ARM | `dreg` | `vfp2` | `i64`, `f64`, `i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2` |\n | ARM | `qreg` | `neon` | `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4` |\n+| MIPS32 | `reg` | None | `i8`, `i16`, `i32`, `f32` |\n+| MIPS32 | `freg` | None | `f32` |\n | NVPTX | `reg16` | None | `i8`, `i16` |\n | NVPTX | `reg32` | None | `i8`, `i16`, `i32`, `f32` |\n | NVPTX | `reg64` | None | `i8`, `i16`, `i32`, `f32`, `i64`, `f64` |\n@@ -595,6 +600,7 @@ Some registers have multiple names. These are all treated by the compiler as ide\n | ARM | `r13` | `sp` |\n | ARM | `r14` | `lr` |\n | ARM | `r15` | `pc` |\n+| MIPS32 | `$[2-25]` | Please [see the Wikipedia page][mips-regs] |\n | RISC-V | `x0` | `zero` |\n | RISC-V | `x1` | `ra` |\n | RISC-V | `x2` | `sp` |\n@@ -615,12 +621,14 @@ Some registers have multiple names. These are all treated by the compiler as ide\n | Hexagon | `r30` | `fr` |\n | Hexagon | `r31` | `lr` |\n \n+[mips-regs]: https://en.wikibooks.org/wiki/MIPS_Assembly/Register_File#Registers\n+\n Some registers cannot be used for input or output operands:\n \n | Architecture | Unsupported register | Reason |\n | ------------ | -------------------- | ------ |\n | All | `sp` | The stack pointer must be restored to its original value at the end of an asm code block. |\n-| All | `bp` (x86), `x29` (AArch64), `x8` (RISC-V), `fr` (Hexagon) | The frame pointer cannot be used as an input or output. |\n+| All | `bp` (x86), `x29` (AArch64), `x8` (RISC-V), `fr` (Hexagon), `$fp` (MIPS) | The frame pointer cannot be used as an input or output. |\n | ARM | `r7` or `r11` | On ARM the frame pointer can be either `r7` or `r11` depending on the target. The frame pointer cannot be used as an input or output. |\n | ARM | `r6` | `r6` is used internally by LLVM as a base pointer and therefore cannot be used as an input or output. |\n | x86 | `k0` | This is a constant zero register which can't be modified. |\n@@ -629,6 +637,11 @@ Some registers cannot be used for input or output operands:\n | x86 | `st([0-7])` | x87 registers are not currently supported (but may be in the future). |\n | AArch64 | `xzr` | This is a constant zero register which can't be modified. |\n | ARM | `pc` | This is the program counter, not a real register. |\n+| MIPS32 | `$0` or `$zero` | This is a constant zero register which can't be modified. |\n+| MIPS32 | `$1` or `$at` | Reserved for assembler. |\n+| MIPS32 | `$26`/`$k0`, `$27`/`$k1` | OS-reserved registers. |\n+| MIPS32 | `$28`/`$gp` | Global pointer cannot be used as inputs or outputs. |\n+| MIPS32 | `$ra` | Return address cannot be used as inputs or outputs. |\n | RISC-V | `x0` | This is a constant zero register which can't be modified. |\n | RISC-V | `gp`, `tp` | These registers are reserved and cannot be used as inputs or outputs. |\n | Hexagon | `lr` | This is the link register which cannot be used as an input or output. |\n@@ -676,6 +689,8 @@ The supported modifiers are a subset of LLVM's (and GCC's) [asm template argumen\n | ARM | `dreg` | None | `d0` | `P` |\n | ARM | `qreg` | None | `q0` | `q` |\n | ARM | `qreg` | `e` / `f` | `d0` / `d1` | `e` / `f` |\n+| MIPS32 | `reg` | None | `$2` | None |\n+| MIPS32 | `freg` | None | `$f0` | None |\n | NVPTX | `reg16` | None | `rs0` | None |\n | NVPTX | `reg32` | None | `r0` | None |\n | NVPTX | `reg64` | None | `rd0` | None |"}, {"sha": "cd6a7feb18029a1ae6b4c9148138a9f0fc86a849", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -11,7 +11,10 @@ use rustc_hir::def::{\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_resolve::ParentScope;\n-use rustc_session::lint;\n+use rustc_session::lint::{\n+    builtin::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS},\n+    Lint,\n+};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::Ident;\n use rustc_span::symbol::Symbol;\n@@ -988,7 +991,7 @@ impl LinkCollector<'_, '_> {\n         let report_mismatch = |specified: Disambiguator, resolved: Disambiguator| {\n             // The resolved item did not match the disambiguator; give a better error than 'not found'\n             let msg = format!(\"incompatible link kind for `{}`\", path_str);\n-            report_diagnostic(cx, &msg, &item, dox, &link_range, |diag, sp| {\n+            let callback = |diag: &mut DiagnosticBuilder<'_>, sp| {\n                 let note = format!(\n                     \"this link resolved to {} {}, which is not {} {}\",\n                     resolved.article(),\n@@ -998,7 +1001,8 @@ impl LinkCollector<'_, '_> {\n                 );\n                 diag.note(&note);\n                 suggest_disambiguator(resolved, diag, path_str, dox, sp, &link_range);\n-            });\n+            };\n+            report_diagnostic(cx, BROKEN_INTRA_DOC_LINKS, &msg, &item, dox, &link_range, callback);\n         };\n         if let Res::PrimTy(..) = res {\n             match disambiguator {\n@@ -1055,7 +1059,6 @@ impl LinkCollector<'_, '_> {\n                     && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n                 {\n                     privacy_error(cx, &item, &path_str, dox, link_range);\n-                    return;\n                 }\n             }\n             let id = register_res(cx, res);\n@@ -1417,6 +1420,7 @@ impl Suggestion {\n /// to it.\n fn report_diagnostic(\n     cx: &DocContext<'_>,\n+    lint: &'static Lint,\n     msg: &str,\n     item: &Item,\n     dox: &str,\n@@ -1435,7 +1439,7 @@ fn report_diagnostic(\n     let attrs = &item.attrs;\n     let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n-    cx.tcx.struct_span_lint_hir(lint::builtin::BROKEN_INTRA_DOC_LINKS, hir_id, sp, |lint| {\n+    cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);\n \n         let span = link_range\n@@ -1482,6 +1486,7 @@ fn resolution_failure(\n ) {\n     report_diagnostic(\n         collector.cx,\n+        BROKEN_INTRA_DOC_LINKS,\n         &format!(\"unresolved link to `{}`\", path_str),\n         item,\n         dox,\n@@ -1695,7 +1700,7 @@ fn anchor_failure(\n         ),\n     };\n \n-    report_diagnostic(cx, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"contains invalid anchor\");\n         }\n@@ -1734,7 +1739,7 @@ fn ambiguity_error(\n         }\n     }\n \n-    report_diagnostic(cx, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"ambiguous link\");\n         } else {\n@@ -1784,7 +1789,7 @@ fn privacy_error(\n     let msg =\n         format!(\"public documentation for `{}` links to private item `{}`\", item_name, path_str);\n \n-    report_diagnostic(cx, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx, PRIVATE_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"this item is private\");\n         }"}, {"sha": "b195ed88c7245ca076094241a23115d23a02174b", "filename": "src/test/assembly/asm/mips-types.rs", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -0,0 +1,191 @@\n+// no-system-llvm\n+// assembly-output: emit-asm\n+// compile-flags: --target mips-unknown-linux-gnu\n+// needs-llvm-components: mips\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *const i32;\n+\n+impl Copy for i8 {}\n+impl Copy for u8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for f32 {}\n+impl Copy for ptr {}\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// Hack to avoid function merging\n+extern \"Rust\" {\n+    fn dont_merge(s: &str);\n+}\n+\n+macro_rules! check { ($func:ident, $ty:ty, $class:ident) => {\n+    #[no_mangle]\n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!($func));\n+\n+        let y;\n+        asm!(\"move {}, {}\", out($class) y, in($class) x);\n+        y\n+    }\n+};}\n+\n+macro_rules! check_reg { ($func:ident, $ty:ty, $reg:tt) => {\n+    #[no_mangle]\n+    pub unsafe fn $func(x: $ty) -> $ty {\n+        dont_merge(stringify!($func));\n+\n+        let y;\n+        asm!(concat!(\"move \", $reg, \", \", $reg), lateout($reg) y, in($reg) x);\n+        y\n+    }\n+};}\n+\n+// CHECK-LABEL: sym_static:\n+// CHECK: #APP\n+// CHECK: lw $3, %got(extern_static)\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_static() {\n+    dont_merge(stringify!($func));\n+\n+    asm!(\"la $v1, {}\", sym extern_static);\n+}\n+\n+// CHECK-LABEL: sym_fn:\n+// CHECK: #APP\n+// CHECK: lw $3, %got(extern_func)\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    dont_merge(stringify!($func));\n+\n+    asm!(\"la $v1, {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: reg_f32:\n+// CHECK: #APP\n+// CHECK: mov.s $f{{[0-9]+}}, $f{{[0-9]+}}\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn reg_f32(x: f32) -> f32 {\n+    dont_merge(\"reg_f32\");\n+    let y;\n+    asm!(\"mov.s {}, {}\", out(freg) y, in(freg) x);\n+    y\n+}\n+\n+// CHECK-LABEL: f0_f32:\n+// CHECK: #APP\n+// CHECK: mov.s $f0, $f0\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn f0_f32(x: f32) -> f32 {\n+    dont_merge(\"f0_f32\");\n+    let y;\n+    asm!(\"mov.s $f0, $f0\", lateout(\"$f0\") y, in(\"$f0\") x);\n+    y\n+}\n+\n+// CHECK-LABEL: reg_ptr:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_ptr, ptr, reg);\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32, i32, reg);\n+\n+// CHECK-LABEL: reg_f32_soft:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f32_soft, f32, reg);\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8, i8, reg);\n+\n+// CHECK-LABEL: reg_u8:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_u8, u8, reg);\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: #APP\n+// CHECK: move ${{[0-9]+}}, ${{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16, i16, reg);\n+\n+// CHECK-LABEL: t0_ptr:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_ptr, ptr, \"$t0\");\n+\n+// CHECK-LABEL: t0_i32:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_i32, i32, \"$t0\");\n+\n+// CHECK-LABEL: t0_f32:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_f32, f32, \"$t0\");\n+\n+// CHECK-LABEL: t0_i8:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_i8, i8, \"$t0\");\n+\n+// CHECK-LABEL: t0_u8:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_u8, u8, \"$t0\");\n+\n+// CHECK-LABEL: t0_i16:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(t0_i16, i16, \"$t0\");\n+\n+// CHECK-LABEL: r8_i16:\n+// CHECK: #APP\n+// CHECK: move $8, $8\n+// CHECK: #NO_APP\n+check_reg!(r8_i16, i16, \"$8\");"}, {"sha": "eeef24b479747422b5a3cf037faff9643faf70d8", "filename": "src/test/rustdoc-ui/intra-links-private.private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.private.stderr?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `DocMe` links to private item `DontDocMe`\n LL | /// docs [DontDocMe]\n    |           ^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without\n \n warning: 1 warning emitted"}, {"sha": "3f7b17586f19e72338619ce608617c7f985c61b3", "filename": "src/test/rustdoc-ui/intra-links-private.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-private.public.stderr?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `DocMe` links to private item `DontDocMe`\n LL | /// docs [DontDocMe]\n    |           ^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n \n warning: 1 warning emitted"}, {"sha": "b802d7e12523a1e1c0b0a505aedaa1327af793a9", "filename": "src/test/rustdoc-ui/issue-74134.private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.private.stderr?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `public_item` links to private item `PrivateTy\n LL |     /// [`PrivateType`]\n    |          ^^^^^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link resolves only because you passed `--document-private-items`, but will break without\n \n warning: 1 warning emitted"}, {"sha": "40aa2ece1a373e330a41d05f45b97ee86b7d4ac5", "filename": "src/test/rustdoc-ui/issue-74134.public.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -4,7 +4,7 @@ warning: public documentation for `public_item` links to private item `PrivateTy\n LL |     /// [`PrivateType`]\n    |          ^^^^^^^^^^^^^ this item is private\n    |\n-   = note: `#[warn(broken_intra_doc_links)]` on by default\n+   = note: `#[warn(private_intra_doc_links)]` on by default\n    = note: this link will resolve properly if you pass `--document-private-items`\n \n warning: 1 warning emitted"}, {"sha": "f86ca44403d93e42ae9b752d7bb3fdc588263ded", "filename": "src/test/rustdoc/intra-doc-link-private.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc%2Fintra-doc-link-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Frustdoc%2Fintra-doc-link-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc-link-private.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -0,0 +1,6 @@\n+#![crate_name = \"private\"]\n+// compile-flags: --document-private-items\n+/// docs [DontDocMe]\n+// @has private/struct.DocMe.html '//*a[@href=\"../private/struct.DontDocMe.html\"]' 'DontDocMe'\n+pub struct DocMe;\n+struct DontDocMe;"}, {"sha": "7d499c611a43c35428075fd51a1bc698bb1b6cd3", "filename": "src/test/ui/stability-attribute/missing-const-stability.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -0,0 +1,12 @@\n+#![feature(staged_api)]\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"foo\", since = \"1.0.0\")]\n+pub const fn foo() {}\n+//~^ ERROR rustc_const_stable\n+\n+#[unstable(feature = \"bar\", issue = \"none\")]\n+pub const fn bar() {} // ok\n+\n+fn main() {}"}, {"sha": "450a5303fd86f9ff2b5e6d275a767643d8f7b6a8", "filename": "src/test/ui/stability-attribute/missing-const-stability.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4529af972e55f8f85afaada0ee2dd18ab8653637/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr?ref=4529af972e55f8f85afaada0ee2dd18ab8653637", "patch": "@@ -0,0 +1,8 @@\n+error: `#[stable]` const functions must also be either `#[rustc_const_stable]` or `#[rustc_const_unstable]`\n+  --> $DIR/missing-const-stability.rs:6:1\n+   |\n+LL | pub const fn foo() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}