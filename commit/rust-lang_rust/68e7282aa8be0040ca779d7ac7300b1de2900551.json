{"sha": "68e7282aa8be0040ca779d7ac7300b1de2900551", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZTcyODJhYThiZTAwNDBjYTc3OWQ3YWM3MzAwYjFkZTI5MDA1NTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-09T01:25:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-09T01:25:57Z"}, "message": "Rollup merge of #48801 - Manishearth:epoch-features, r=nikomatsakis\n\nAdd functionality for gating feature flags on epochs ; rejigger epoch lints\n\nfixes #48794\n\nr? @nikomatsakis", "tree": {"sha": "5a9cc149d0d3d05e35ca1c145f85a1fc2ce9ebab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a9cc149d0d3d05e35ca1c145f85a1fc2ce9ebab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68e7282aa8be0040ca779d7ac7300b1de2900551", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaoeKlCRBK7hj4Ov3rIwAAdHIIABrOIFlxpavcoXVtYTTombSy\nwM+HI/aRrVyM+h85fPZq0ak2Gl/ZFg1Ak95NyCjrkm3WASHJCeuDKqeW0kE3hyHb\n/VslDcD1U/oMGI7VJlm5RA+Drkw7k+BNeBvmlaYYEylScIQZZPRH+BxlWGhuEJts\np3A6DlHK8m1n4f5Eo/Ss9rEvE65gLHt2uLi2bKDh0DhfKyvsn0GgW6LWbA7pVfaR\n27TRayzwez+oUrU5h/pm6KN81Id00C706MBNBcjJyM8FMGz0hgBlU1XMScbLYluR\nBRjZNBlX83tiLjdSMbR7zwbKmqi/YF0lfvliI2srfrgp9lXRpGxmyuSxiioMU6k=\n=EfCC\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a9cc149d0d3d05e35ca1c145f85a1fc2ce9ebab\nparent b0bc601dcc2158fa6ad37c3c04e9db82c34503b7\nparent a08cfc4cb6020164372a52080b64280c711d1bd5\nauthor Manish Goregaokar <manishsmail@gmail.com> 1520558757 -0800\ncommitter GitHub <noreply@github.com> 1520558757 -0800\n\nRollup merge of #48801 - Manishearth:epoch-features, r=nikomatsakis\n\nAdd functionality for gating feature flags on epochs ; rejigger epoch lints\n\nfixes #48794\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68e7282aa8be0040ca779d7ac7300b1de2900551", "html_url": "https://github.com/rust-lang/rust/commit/68e7282aa8be0040ca779d7ac7300b1de2900551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68e7282aa8be0040ca779d7ac7300b1de2900551/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0bc601dcc2158fa6ad37c3c04e9db82c34503b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bc601dcc2158fa6ad37c3c04e9db82c34503b7", "html_url": "https://github.com/rust-lang/rust/commit/b0bc601dcc2158fa6ad37c3c04e9db82c34503b7"}, {"sha": "a08cfc4cb6020164372a52080b64280c711d1bd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a08cfc4cb6020164372a52080b64280c711d1bd5", "html_url": "https://github.com/rust-lang/rust/commit/a08cfc4cb6020164372a52080b64280c711d1bd5"}], "stats": {"total": 591, "additions": 328, "deletions": 263}, "files": [{"sha": "8e1f76c5018008cd7ba6b8044db41a73da196a6e", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -17,7 +17,6 @@\n use errors::DiagnosticBuilder;\n use lint::{LintPass, LateLintPass, LintArray};\n use session::Session;\n-use session::config::Epoch;\n use syntax::codemap::Span;\n \n declare_lint! {\n@@ -264,9 +263,8 @@ declare_lint! {\n \n declare_lint! {\n     pub BARE_TRAIT_OBJECT,\n-    Warn,\n-    \"suggest using `dyn Trait` for trait objects\",\n-    Epoch::Epoch2018\n+    Allow,\n+    \"suggest using `dyn Trait` for trait objects\"\n }\n \n declare_lint! {"}, {"sha": "b1e28f729ed75ef68f0c44d2f12661e6369d5845", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -42,6 +42,7 @@ use util::nodemap::FxHashMap;\n use std::default::Default as StdDefault;\n use std::cell::{Ref, RefCell};\n use syntax::ast;\n+use syntax::epoch;\n use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n use hir;\n@@ -105,7 +106,7 @@ pub struct FutureIncompatibleInfo {\n     pub reference: &'static str,\n     /// If this is an epoch fixing lint, the epoch in which\n     /// this lint becomes obsolete\n-    pub epoch: Option<config::Epoch>,\n+    pub epoch: Option<epoch::Epoch>,\n }\n \n /// The target of the `by_name` map, which accounts for renaming/deprecation.\n@@ -201,7 +202,7 @@ impl LintStore {\n                                         sess: Option<&Session>,\n                                         lints: Vec<FutureIncompatibleInfo>) {\n \n-        for epoch in config::ALL_EPOCHS {\n+        for epoch in epoch::ALL_EPOCHS {\n             let lints = lints.iter().filter(|f| f.epoch == Some(*epoch)).map(|f| f.id)\n                              .collect::<Vec<_>>();\n             if !lints.is_empty() {"}, {"sha": "668e099ebab4131a944d3a3a54096e05dee155bd", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -38,10 +38,11 @@ use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, FnKind};\n use hir;\n use lint::builtin::BuiltinLintDiagnostics;\n-use session::{config, Session, DiagnosticMessageId};\n+use session::{Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n use syntax::codemap::MultiSpan;\n+use syntax::epoch::Epoch;\n use syntax::symbol::Symbol;\n use syntax::visit as ast_visit;\n use syntax_pos::Span;\n@@ -77,7 +78,7 @@ pub struct Lint {\n     pub desc: &'static str,\n \n     /// Deny lint after this epoch\n-    pub epoch_deny: Option<config::Epoch>,\n+    pub epoch_deny: Option<Epoch>,\n }\n \n impl Lint {\n@@ -492,9 +493,14 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n     // Check for future incompatibility lints and issue a stronger warning.\n     let lints = sess.lint_store.borrow();\n     if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n+        let future = if let Some(epoch) = future_incompatible.epoch {\n+            format!(\"the {} epoch\", epoch)\n+        } else {\n+            \"a future release\".to_owned()\n+        };\n         let explanation = format!(\"this was previously accepted by the compiler \\\n                                    but is being phased out; \\\n-                                   it will become a hard error in a future release!\");\n+                                   it will become a hard error in {}!\", future);\n         let citation = format!(\"for more information, see {}\",\n                                future_incompatible.reference);\n         err.warn(&explanation);"}, {"sha": "1c5cfa87ef46fde617218e09a0b890c132bce780", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 54, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -28,6 +28,7 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::codemap::{FileName, FilePathMapping};\n+use syntax::epoch::Epoch;\n use syntax::parse::token;\n use syntax::parse;\n use syntax::symbol::Symbol;\n@@ -111,59 +112,6 @@ pub enum OutputType {\n     DepInfo,\n }\n \n-/// The epoch of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n-#[non_exhaustive]\n-pub enum Epoch {\n-    // epochs must be kept in order, newest to oldest\n-    /// The 2015 epoch\n-    Epoch2015,\n-    /// The 2018 epoch\n-    Epoch2018,\n-    // when adding new epochs, be sure to update:\n-    //\n-    // - the list in the `parse_epoch` static\n-    // - the match in the `parse_epoch` function\n-    // - add a `rust_####()` function to the session\n-    // - update the enum in Cargo's sources as well\n-    //\n-    // When -Zepoch becomes --epoch, there will\n-    // also be a check for the epoch being nightly-only\n-    // somewhere. That will need to be updated\n-    // whenever we're stabilizing/introducing a new epoch\n-    // as well as changing the default Cargo template.\n-}\n-\n-pub const ALL_EPOCHS: &[Epoch] = &[Epoch::Epoch2015, Epoch::Epoch2018];\n-\n-impl ToString for Epoch {\n-    fn to_string(&self) -> String {\n-        match *self {\n-            Epoch::Epoch2015 => \"2015\".into(),\n-            Epoch::Epoch2018 => \"2018\".into(),\n-        }\n-    }\n-}\n-\n-impl Epoch {\n-    pub fn lint_name(&self) -> &'static str {\n-        match *self {\n-            Epoch::Epoch2015 => \"epoch_2015\",\n-            Epoch::Epoch2018 => \"epoch_2018\",\n-        }\n-    }\n-}\n-\n-impl str::FromStr for Epoch {\n-    type Err = ();\n-    fn from_str(s: &str) -> Result<Self, ()> {\n-        match s {\n-            \"2015\" => Ok(Epoch::Epoch2015),\n-            \"2018\" => Ok(Epoch::Epoch2018),\n-            _ => Err(()),\n-        }\n-    }\n-}\n \n impl_stable_hash_for!(enum self::OutputType {\n     Bitcode,\n@@ -829,9 +777,10 @@ macro_rules! options {\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto, Epoch};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n+        use syntax::epoch::Epoch;\n \n         $(\n             pub fn $opt(cg: &mut $struct_name, v: Option<&str>) -> bool {"}, {"sha": "cdbbcf6a8dd1b07af49c93d64333646b3f3abe65", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -20,7 +20,7 @@ use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{DebugInfoLevel, Epoch, OutputType};\n+use session::config::{DebugInfoLevel, OutputType};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -30,6 +30,7 @@ use rustc_data_structures::sync::Lrc;\n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n use errors::emitter::{Emitter, EmitterWriter};\n+use syntax::epoch::Epoch;\n use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n use syntax::symbol::Symbol;"}, {"sha": "f020f86b6860bba07ec4740d80cf570e87fc6351", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -647,7 +647,9 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n {\n     let time_passes = sess.time_passes();\n \n-    let (mut krate, features) = syntax::config::features(krate, &sess.parse_sess, sess.opts.test);\n+    let (mut krate, features) = syntax::config::features(krate, &sess.parse_sess,\n+                                                         sess.opts.test,\n+                                                         sess.opts.debugging_opts.epoch);\n     // these need to be set \"early\" so that expansion sees `quote` if enabled.\n     sess.init_features(features);\n "}, {"sha": "d39e00ab18fcb44cb1414d8308340f604eba5a52", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -1263,7 +1263,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n pub struct UnreachablePub;\n \n declare_lint! {\n-    UNREACHABLE_PUB,\n+    pub UNREACHABLE_PUB,\n     Allow,\n     \"`pub` items not reachable from crate root\"\n }"}, {"sha": "81609db62923f5cec1e7d33fbfc897b24a31e7d0", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -43,10 +43,12 @@ extern crate rustc_mir;\n extern crate syntax_pos;\n \n use rustc::lint;\n+use rustc::lint::builtin::BARE_TRAIT_OBJECT;\n use rustc::session;\n use rustc::util;\n \n use session::Session;\n+use syntax::epoch::Epoch;\n use lint::LintId;\n use lint::FutureIncompatibleInfo;\n \n@@ -176,6 +178,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_FEATURES,\n                     UNUSED_PARENS);\n \n+    add_lint_group!(sess,\n+                    \"rust_2018_idioms\",\n+                    BARE_TRAIT_OBJECT,\n+                    UNREACHABLE_PUB);\n+\n     // Guidelines for creating a future incompatibility lint:\n     //\n     // - Create a lint defaulting to warn as normal, with ideally the same error\n@@ -274,13 +281,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         FutureIncompatibleInfo {\n             id: LintId::of(TYVAR_BEHIND_RAW_POINTER),\n             reference: \"issue #46906 <https://github.com/rust-lang/rust/issues/46906>\",\n-            epoch: None,\n-        },\n-         FutureIncompatibleInfo {\n-             id: LintId::of(lint::builtin::BARE_TRAIT_OBJECT),\n-             reference: \"issue #48457 <https://github.com/rust-lang/rust/issues/48457>\",\n-             epoch: Some(session::config::Epoch::Epoch2018),\n-         }\n+            epoch: Some(Epoch::Epoch2018),\n+        }\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "6013c20daf23551c9492613f63320ad19d5baf97", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -13,6 +13,7 @@ use feature_gate::{feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features\n use {fold, attr};\n use ast;\n use codemap::Spanned;\n+use epoch::Epoch;\n use parse::{token, ParseSess};\n \n use ptr::P;\n@@ -26,7 +27,7 @@ pub struct StripUnconfigured<'a> {\n }\n \n // `cfg_attr`-process the crate's attributes and compute the crate's features.\n-pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool)\n+pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool, epoch: Epoch)\n                 -> (ast::Crate, Features) {\n     let features;\n     {\n@@ -46,7 +47,7 @@ pub fn features(mut krate: ast::Crate, sess: &ParseSess, should_test: bool)\n             return (krate, Features::new());\n         }\n \n-        features = get_features(&sess.span_diagnostic, &krate.attrs);\n+        features = get_features(&sess.span_diagnostic, &krate.attrs, epoch);\n \n         // Avoid reconfiguring malformed `cfg_attr`s\n         if err_count == sess.span_diagnostic.err_count() {"}, {"sha": "32cbc79c550e3121a65a82a869318433cf488a4c", "filename": "src/libsyntax/epoch.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibsyntax%2Fepoch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibsyntax%2Fepoch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fepoch.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::str::FromStr;\n+\n+/// The epoch of the compiler (RFC 2052)\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n+#[non_exhaustive]\n+pub enum Epoch {\n+    // epochs must be kept in order, newest to oldest\n+\n+    /// The 2015 epoch\n+    Epoch2015,\n+    /// The 2018 epoch\n+    Epoch2018,\n+\n+    // when adding new epochs, be sure to update:\n+    //\n+    // - the list in the `parse_epoch` static in librustc::session::config\n+    // - add a `rust_####()` function to the session\n+    // - update the enum in Cargo's sources as well\n+    //\n+    // When -Zepoch becomes --epoch, there will\n+    // also be a check for the epoch being nightly-only\n+    // somewhere. That will need to be updated\n+    // whenever we're stabilizing/introducing a new epoch\n+    // as well as changing the default Cargo template.\n+}\n+\n+// must be in order from oldest to newest\n+pub const ALL_EPOCHS: &[Epoch] = &[Epoch::Epoch2015, Epoch::Epoch2018];\n+\n+impl fmt::Display for Epoch {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let s = match *self {\n+            Epoch::Epoch2015 => \"2015\",\n+            Epoch::Epoch2018 => \"2018\",\n+        };\n+        write!(f, \"{}\", s)\n+    }\n+}\n+\n+impl Epoch {\n+    pub fn lint_name(&self) -> &'static str {\n+        match *self {\n+            Epoch::Epoch2015 => \"epoch_2015\",\n+            Epoch::Epoch2018 => \"epoch_2018\",\n+        }\n+    }\n+}\n+\n+impl FromStr for Epoch {\n+    type Err = ();\n+    fn from_str(s: &str) -> Result<Self, ()> {\n+        match s {\n+            \"2015\" => Ok(Epoch::Epoch2015),\n+            \"2018\" => Ok(Epoch::Epoch2018),\n+            _ => Err(())\n+        }\n+    }\n+}"}, {"sha": "ec9a15d9f2b44814a6eaf9914e4318d57ba1ca07", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 200, "deletions": 187, "changes": 387, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -28,8 +28,9 @@ use self::AttributeGate::*;\n use abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd, RangeSyntax};\n use attr;\n+use epoch::Epoch;\n use codemap::Spanned;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, DUMMY_SP};\n use errors::{DiagnosticBuilder, Handler, FatalError};\n use visit::{self, FnKind, Visitor};\n use parse::ParseSess;\n@@ -54,12 +55,13 @@ macro_rules! set {\n }\n \n macro_rules! declare_features {\n-    ($((active, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((active, $feature: ident, $ver: expr, $issue: expr, $epoch: expr),)+) => {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n         const ACTIVE_FEATURES:\n-                &'static [(&'static str, &'static str, Option<u32>, fn(&mut Features, Span))] =\n-            &[$((stringify!($feature), $ver, $issue, set!($feature))),+];\n+                &'static [(&'static str, &'static str, Option<u32>,\n+                           Option<Epoch>, fn(&mut Features, Span))] =\n+            &[$((stringify!($feature), $ver, $issue, $epoch, set!($feature))),+];\n \n         /// A set of features to be used by later passes.\n         #[derive(Clone)]\n@@ -88,21 +90,21 @@ macro_rules! declare_features {\n         }\n     };\n \n-    ($((removed, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Represents unstable features which have since been removed (it was once Active)\n         const REMOVED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n             $((stringify!($feature), $ver, $issue)),+\n         ];\n     };\n \n-    ($((stable_removed, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((stable_removed, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Represents stable features which have since been removed (it was once Accepted)\n         const STABLE_REMOVED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n             $((stringify!($feature), $ver, $issue)),+\n         ];\n     };\n \n-    ($((accepted, $feature: ident, $ver: expr, $issue: expr),)+) => {\n+    ($((accepted, $feature: ident, $ver: expr, $issue: expr, None),)+) => {\n         /// Those language feature has since been Accepted (it was once Active)\n         const ACCEPTED_FEATURES: &'static [(&'static str, &'static str, Option<u32>)] = &[\n             $((stringify!($feature), $ver, $issue)),+\n@@ -122,436 +124,436 @@ macro_rules! declare_features {\n // source, so take care when modifying it.\n \n declare_features! (\n-    (active, asm, \"1.0.0\", Some(29722)),\n-    (active, concat_idents, \"1.0.0\", Some(29599)),\n-    (active, link_args, \"1.0.0\", Some(29596)),\n-    (active, log_syntax, \"1.0.0\", Some(29598)),\n-    (active, non_ascii_idents, \"1.0.0\", Some(28979)),\n-    (active, plugin_registrar, \"1.0.0\", Some(29597)),\n-    (active, thread_local, \"1.0.0\", Some(29594)),\n-    (active, trace_macros, \"1.0.0\", Some(29598)),\n+    (active, asm, \"1.0.0\", Some(29722), None),\n+    (active, concat_idents, \"1.0.0\", Some(29599), None),\n+    (active, link_args, \"1.0.0\", Some(29596), None),\n+    (active, log_syntax, \"1.0.0\", Some(29598), None),\n+    (active, non_ascii_idents, \"1.0.0\", Some(28979), None),\n+    (active, plugin_registrar, \"1.0.0\", Some(29597), None),\n+    (active, thread_local, \"1.0.0\", Some(29594), None),\n+    (active, trace_macros, \"1.0.0\", Some(29598), None),\n \n     // rustc internal, for now:\n-    (active, intrinsics, \"1.0.0\", None),\n-    (active, lang_items, \"1.0.0\", None),\n+    (active, intrinsics, \"1.0.0\", None, None),\n+    (active, lang_items, \"1.0.0\", None, None),\n \n-    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602)),\n-    (active, linkage, \"1.0.0\", Some(29603)),\n-    (active, quote, \"1.0.0\", Some(29601)),\n+    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n+    (active, linkage, \"1.0.0\", Some(29603), None),\n+    (active, quote, \"1.0.0\", Some(29601), None),\n \n \n     // rustc internal\n-    (active, rustc_diagnostic_macros, \"1.0.0\", None),\n-    (active, rustc_const_unstable, \"1.0.0\", None),\n-    (active, advanced_slice_patterns, \"1.0.0\", Some(23121)),\n-    (active, box_syntax, \"1.0.0\", Some(27779)),\n-    (active, placement_in_syntax, \"1.0.0\", Some(27779)),\n-    (active, unboxed_closures, \"1.0.0\", Some(29625)),\n-\n-    (active, fundamental, \"1.0.0\", Some(29635)),\n-    (active, main, \"1.0.0\", Some(29634)),\n-    (active, needs_allocator, \"1.4.0\", Some(27389)),\n-    (active, on_unimplemented, \"1.0.0\", Some(29628)),\n-    (active, plugin, \"1.0.0\", Some(29597)),\n-    (active, simd_ffi, \"1.0.0\", Some(27731)),\n-    (active, start, \"1.0.0\", Some(29633)),\n-    (active, structural_match, \"1.8.0\", Some(31434)),\n-    (active, panic_runtime, \"1.10.0\", Some(32837)),\n-    (active, needs_panic_runtime, \"1.10.0\", Some(32837)),\n+    (active, rustc_diagnostic_macros, \"1.0.0\", None, None),\n+    (active, rustc_const_unstable, \"1.0.0\", None, None),\n+    (active, advanced_slice_patterns, \"1.0.0\", Some(23121), None),\n+    (active, box_syntax, \"1.0.0\", Some(27779), None),\n+    (active, placement_in_syntax, \"1.0.0\", Some(27779), None),\n+    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n+\n+    (active, fundamental, \"1.0.0\", Some(29635), None),\n+    (active, main, \"1.0.0\", Some(29634), None),\n+    (active, needs_allocator, \"1.4.0\", Some(27389), None),\n+    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n+    (active, plugin, \"1.0.0\", Some(29597), None),\n+    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n+    (active, start, \"1.0.0\", Some(29633), None),\n+    (active, structural_match, \"1.8.0\", Some(31434), None),\n+    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n+    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n \n     // OIBIT specific features\n-    (active, optin_builtin_traits, \"1.0.0\", Some(13231)),\n+    (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n     // macro re-export needs more discussion and stabilization\n-    (active, macro_reexport, \"1.0.0\", Some(29638)),\n+    (active, macro_reexport, \"1.0.0\", Some(29638), None),\n \n     // Allows use of #[staged_api]\n     // rustc internal\n-    (active, staged_api, \"1.0.0\", None),\n+    (active, staged_api, \"1.0.0\", None, None),\n \n     // Allows using #![no_core]\n-    (active, no_core, \"1.3.0\", Some(29639)),\n+    (active, no_core, \"1.3.0\", Some(29639), None),\n \n     // Allows using `box` in patterns; RFC 469\n-    (active, box_patterns, \"1.0.0\", Some(29641)),\n+    (active, box_patterns, \"1.0.0\", Some(29641), None),\n \n     // Allows using the unsafe_destructor_blind_to_params attribute;\n     // RFC 1238\n-    (active, dropck_parametricity, \"1.3.0\", Some(28498)),\n+    (active, dropck_parametricity, \"1.3.0\", Some(28498), None),\n \n     // Allows using the may_dangle attribute; RFC 1327\n-    (active, dropck_eyepatch, \"1.10.0\", Some(34761)),\n+    (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n \n     // Allows the use of custom attributes; RFC 572\n-    (active, custom_attribute, \"1.0.0\", Some(29642)),\n+    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n \n     // Allows the use of #[derive(Anything)] as sugar for\n     // #[derive_Anything].\n-    (active, custom_derive, \"1.0.0\", Some(29644)),\n+    (active, custom_derive, \"1.0.0\", Some(29644), None),\n \n     // Allows the use of rustc_* attributes; RFC 572\n-    (active, rustc_attrs, \"1.0.0\", Some(29642)),\n+    (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n \n     // Allows the use of non lexical lifetimes; RFC 2094\n-    (active, nll, \"1.0.0\", Some(43234)),\n+    (active, nll, \"1.0.0\", Some(43234), None),\n \n     // Allows the use of #[allow_internal_unstable]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n     //\n     // rustc internal\n-    (active, allow_internal_unstable, \"1.0.0\", None),\n+    (active, allow_internal_unstable, \"1.0.0\", None, None),\n \n     // Allows the use of #[allow_internal_unsafe]. This is an\n     // attribute on macro_rules! and can't use the attribute handling\n     // below (it has to be checked before expansion possibly makes\n     // macros disappear).\n     //\n     // rustc internal\n-    (active, allow_internal_unsafe, \"1.0.0\", None),\n+    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n \n     // #23121. Array patterns have some hazards yet.\n-    (active, slice_patterns, \"1.0.0\", Some(23121)),\n+    (active, slice_patterns, \"1.0.0\", Some(23121), None),\n \n     // Allows the definition of `const fn` functions.\n-    (active, const_fn, \"1.2.0\", Some(24111)),\n+    (active, const_fn, \"1.2.0\", Some(24111), None),\n \n     // Allows using #[prelude_import] on glob `use` items.\n     //\n     // rustc internal\n-    (active, prelude_import, \"1.2.0\", None),\n+    (active, prelude_import, \"1.2.0\", None, None),\n \n     // Allows default type parameters to influence type inference.\n-    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336)),\n+    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n \n     // Allows associated type defaults\n-    (active, associated_type_defaults, \"1.2.0\", Some(29661)),\n+    (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n \n     // allow `repr(simd)`, and importing the various simd intrinsics\n-    (active, repr_simd, \"1.4.0\", Some(27731)),\n+    (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n     // Allows cfg(target_feature = \"...\").\n-    (active, cfg_target_feature, \"1.4.0\", Some(29717)),\n+    (active, cfg_target_feature, \"1.4.0\", Some(29717), None),\n \n     // allow `extern \"platform-intrinsic\" { ... }`\n-    (active, platform_intrinsics, \"1.4.0\", Some(27731)),\n+    (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n     // allow `#[unwind(..)]`\n     // rust runtime internal\n-    (active, unwind_attributes, \"1.4.0\", None),\n+    (active, unwind_attributes, \"1.4.0\", None, None),\n \n     // allow the use of `#[naked]` on functions.\n-    (active, naked_functions, \"1.9.0\", Some(32408)),\n+    (active, naked_functions, \"1.9.0\", Some(32408), None),\n \n     // allow `#[no_debug]`\n-    (active, no_debug, \"1.5.0\", Some(29721)),\n+    (active, no_debug, \"1.5.0\", Some(29721), None),\n \n     // allow `#[omit_gdb_pretty_printer_section]`\n     // rustc internal.\n-    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None),\n+    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n \n     // Allows cfg(target_vendor = \"...\").\n-    (active, cfg_target_vendor, \"1.5.0\", Some(29718)),\n+    (active, cfg_target_vendor, \"1.5.0\", Some(29718), None),\n \n     // Allow attributes on expressions and non-item statements\n-    (active, stmt_expr_attributes, \"1.6.0\", Some(15701)),\n+    (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n \n     // allow using type ascription in expressions\n-    (active, type_ascription, \"1.6.0\", Some(23416)),\n+    (active, type_ascription, \"1.6.0\", Some(23416), None),\n \n     // Allows cfg(target_thread_local)\n-    (active, cfg_target_thread_local, \"1.7.0\", Some(29594)),\n+    (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n \n     // rustc internal\n-    (active, abi_vectorcall, \"1.7.0\", None),\n+    (active, abi_vectorcall, \"1.7.0\", None, None),\n \n     // a..=b and ..=b\n-    (active, inclusive_range_syntax, \"1.7.0\", Some(28237)),\n+    (active, inclusive_range_syntax, \"1.7.0\", Some(28237), None),\n \n     // X..Y patterns\n-    (active, exclusive_range_pattern, \"1.11.0\", Some(37854)),\n+    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n     // impl specialization (RFC 1210)\n-    (active, specialization, \"1.7.0\", Some(31844)),\n+    (active, specialization, \"1.7.0\", Some(31844), None),\n \n     // Allows cfg(target_has_atomic = \"...\").\n-    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976)),\n+    (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n \n     // Allows `impl Trait` in function return types.\n-    (active, conservative_impl_trait, \"1.12.0\", Some(34511)),\n+    (active, conservative_impl_trait, \"1.12.0\", Some(34511), None),\n \n     // Allows `impl Trait` in function arguments.\n-    (active, universal_impl_trait, \"1.23.0\", Some(34511)),\n+    (active, universal_impl_trait, \"1.23.0\", Some(34511), None),\n \n     // The `!` type\n-    (active, never_type, \"1.13.0\", Some(35121)),\n+    (active, never_type, \"1.13.0\", Some(35121), None),\n \n     // Allows all literals in attribute lists and values of key-value pairs.\n-    (active, attr_literals, \"1.13.0\", Some(34981)),\n+    (active, attr_literals, \"1.13.0\", Some(34981), None),\n \n     // Allows untagged unions `union U { ... }`\n-    (active, untagged_unions, \"1.13.0\", Some(32836)),\n+    (active, untagged_unions, \"1.13.0\", Some(32836), None),\n \n     // Used to identify the `compiler_builtins` crate\n     // rustc internal\n-    (active, compiler_builtins, \"1.13.0\", None),\n+    (active, compiler_builtins, \"1.13.0\", None, None),\n \n     // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n-    (active, generic_param_attrs, \"1.11.0\", Some(34761)),\n+    (active, generic_param_attrs, \"1.11.0\", Some(34761), None),\n \n     // Allows #[link(..., cfg(..))]\n-    (active, link_cfg, \"1.14.0\", Some(37406)),\n+    (active, link_cfg, \"1.14.0\", Some(37406), None),\n \n-    (active, use_extern_macros, \"1.15.0\", Some(35896)),\n+    (active, use_extern_macros, \"1.15.0\", Some(35896), None),\n \n     // Allows #[target_feature(...)]\n-    (active, target_feature, \"1.15.0\", None),\n+    (active, target_feature, \"1.15.0\", None, None),\n \n     // `extern \"ptx-*\" fn()`\n-    (active, abi_ptx, \"1.15.0\", None),\n+    (active, abi_ptx, \"1.15.0\", None, None),\n \n     // The `i128` type\n-    (active, i128_type, \"1.16.0\", Some(35118)),\n+    (active, i128_type, \"1.16.0\", Some(35118), None),\n \n     // The `repr(i128)` annotation for enums\n-    (active, repr128, \"1.16.0\", Some(35118)),\n+    (active, repr128, \"1.16.0\", Some(35118), None),\n \n     // The `unadjusted` ABI. Perma unstable.\n-    (active, abi_unadjusted, \"1.16.0\", None),\n+    (active, abi_unadjusted, \"1.16.0\", None, None),\n \n     // Procedural macros 2.0.\n-    (active, proc_macro, \"1.16.0\", Some(38356)),\n+    (active, proc_macro, \"1.16.0\", Some(38356), None),\n \n     // Declarative macros 2.0 (`macro`).\n-    (active, decl_macro, \"1.17.0\", Some(39412)),\n+    (active, decl_macro, \"1.17.0\", Some(39412), None),\n \n     // Allows #[link(kind=\"static-nobundle\"...]\n-    (active, static_nobundle, \"1.16.0\", Some(37403)),\n+    (active, static_nobundle, \"1.16.0\", Some(37403), None),\n \n     // `extern \"msp430-interrupt\" fn()`\n-    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487)),\n+    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n \n     // Used to identify crates that contain sanitizer runtimes\n     // rustc internal\n-    (active, sanitizer_runtime, \"1.17.0\", None),\n+    (active, sanitizer_runtime, \"1.17.0\", None, None),\n \n     // Used to identify crates that contain the profiler runtime\n     // rustc internal\n-    (active, profiler_runtime, \"1.18.0\", None),\n+    (active, profiler_runtime, \"1.18.0\", None, None),\n \n     // `extern \"x86-interrupt\" fn()`\n-    (active, abi_x86_interrupt, \"1.17.0\", Some(40180)),\n+    (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n \n \n     // Allows the `catch {...}` expression\n-    (active, catch_expr, \"1.17.0\", Some(31436)),\n+    (active, catch_expr, \"1.17.0\", Some(31436), None),\n \n     // Used to preserve symbols (see llvm.used)\n-    (active, used, \"1.18.0\", Some(40289)),\n+    (active, used, \"1.18.0\", Some(40289), None),\n \n     // Allows module-level inline assembly by way of global_asm!()\n-    (active, global_asm, \"1.18.0\", Some(35119)),\n+    (active, global_asm, \"1.18.0\", Some(35119), None),\n \n     // Allows overlapping impls of marker traits\n-    (active, overlapping_marker_traits, \"1.18.0\", Some(29864)),\n+    (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n \n     // Allows use of the :vis macro fragment specifier\n-    (active, macro_vis_matcher, \"1.18.0\", Some(41022)),\n+    (active, macro_vis_matcher, \"1.18.0\", Some(41022), None),\n \n     // rustc internal\n-    (active, abi_thiscall, \"1.19.0\", None),\n+    (active, abi_thiscall, \"1.19.0\", None, None),\n \n     // Allows a test to fail without failing the whole suite\n-    (active, allow_fail, \"1.19.0\", Some(42219)),\n+    (active, allow_fail, \"1.19.0\", Some(42219), None),\n \n     // Allows unsized tuple coercion.\n-    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877)),\n+    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n \n     // Generators\n-    (active, generators, \"1.21.0\", None),\n+    (active, generators, \"1.21.0\", None, None),\n \n     // Trait aliases\n-    (active, trait_alias, \"1.24.0\", Some(41517)),\n+    (active, trait_alias, \"1.24.0\", Some(41517), None),\n \n     // global allocators and their internals\n-    (active, global_allocator, \"1.20.0\", None),\n-    (active, allocator_internals, \"1.20.0\", None),\n+    (active, global_allocator, \"1.20.0\", None, None),\n+    (active, allocator_internals, \"1.20.0\", None, None),\n \n     // #[doc(cfg(...))]\n-    (active, doc_cfg, \"1.21.0\", Some(43781)),\n+    (active, doc_cfg, \"1.21.0\", Some(43781), None),\n     // #[doc(masked)]\n-    (active, doc_masked, \"1.21.0\", Some(44027)),\n+    (active, doc_masked, \"1.21.0\", Some(44027), None),\n     // #[doc(spotlight)]\n-    (active, doc_spotlight, \"1.22.0\", Some(45040)),\n+    (active, doc_spotlight, \"1.22.0\", Some(45040), None),\n     // #[doc(include=\"some-file\")]\n-    (active, external_doc, \"1.22.0\", Some(44732)),\n+    (active, external_doc, \"1.22.0\", Some(44732), None),\n \n     // allow `#[must_use]` on functions and comparison operators (RFC 1940)\n-    (active, fn_must_use, \"1.21.0\", Some(43302)),\n+    (active, fn_must_use, \"1.21.0\", Some(43302), None),\n \n     // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n-    (active, non_exhaustive, \"1.22.0\", Some(44109)),\n+    (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n     // Copy/Clone closures (RFC 2132)\n-    (active, clone_closures, \"1.22.0\", Some(44490)),\n-    (active, copy_closures, \"1.22.0\", Some(44490)),\n+    (active, clone_closures, \"1.22.0\", Some(44490), None),\n+    (active, copy_closures, \"1.22.0\", Some(44490), None),\n \n     // allow `'_` placeholder lifetimes\n-    (active, underscore_lifetimes, \"1.22.0\", Some(44524)),\n+    (active, underscore_lifetimes, \"1.22.0\", Some(44524), None),\n \n     // allow `..=` in patterns (RFC 1192)\n-    (active, dotdoteq_in_patterns, \"1.22.0\", Some(28237)),\n+    (active, dotdoteq_in_patterns, \"1.22.0\", Some(28237), None),\n \n     // Default match binding modes (RFC 2005)\n-    (active, match_default_bindings, \"1.22.0\", Some(42640)),\n+    (active, match_default_bindings, \"1.22.0\", Some(42640), None),\n \n     // Trait object syntax with `dyn` prefix\n-    (active, dyn_trait, \"1.22.0\", Some(44662)),\n+    (active, dyn_trait, \"1.22.0\", Some(44662), Some(Epoch::Epoch2018)),\n \n     // `crate` as visibility modifier, synonymous to `pub(crate)`\n-    (active, crate_visibility_modifier, \"1.23.0\", Some(45388)),\n+    (active, crate_visibility_modifier, \"1.23.0\", Some(45388), None),\n \n     // extern types\n-    (active, extern_types, \"1.23.0\", Some(43467)),\n+    (active, extern_types, \"1.23.0\", Some(43467), None),\n \n     // Allow trait methods with arbitrary self types\n-    (active, arbitrary_self_types, \"1.23.0\", Some(44874)),\n+    (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n     // `crate` in paths\n-    (active, crate_in_paths, \"1.23.0\", Some(45477)),\n+    (active, crate_in_paths, \"1.23.0\", Some(45477), None),\n \n     // In-band lifetime bindings (e.g. `fn foo(x: &'a u8) -> &'a u8`)\n-    (active, in_band_lifetimes, \"1.23.0\", Some(44524)),\n+    (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n     // generic associated types (RFC 1598)\n-    (active, generic_associated_types, \"1.23.0\", Some(44265)),\n+    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n     // Resolve absolute paths as paths from other crates\n-    (active, extern_absolute_paths, \"1.24.0\", Some(44660)),\n+    (active, extern_absolute_paths, \"1.24.0\", Some(44660), None),\n \n     // `foo.rs` as an alternative to `foo/mod.rs`\n-    (active, non_modrs_mods, \"1.24.0\", Some(44660)),\n+    (active, non_modrs_mods, \"1.24.0\", Some(44660), None),\n \n     // Termination trait in main (RFC 1937)\n-    (active, termination_trait, \"1.24.0\", Some(43301)),\n+    (active, termination_trait, \"1.24.0\", Some(43301), None),\n \n     // Allows use of the :lifetime macro fragment specifier\n-    (active, macro_lifetime_matcher, \"1.24.0\", Some(46895)),\n+    (active, macro_lifetime_matcher, \"1.24.0\", Some(46895), None),\n \n     // `extern` in paths\n-    (active, extern_in_paths, \"1.23.0\", Some(44660)),\n+    (active, extern_in_paths, \"1.23.0\", Some(44660), None),\n \n     // Allows `#[repr(transparent)]` attribute on newtype structs\n-    (active, repr_transparent, \"1.25.0\", Some(43036)),\n+    (active, repr_transparent, \"1.25.0\", Some(43036), None),\n \n     // Use `?` as the Kleene \"at most one\" operator\n-    (active, macro_at_most_once_rep, \"1.25.0\", Some(48075)),\n+    (active, macro_at_most_once_rep, \"1.25.0\", Some(48075), None),\n \n     // Multiple patterns with `|` in `if let` and `while let`\n-    (active, if_while_or_patterns, \"1.26.0\", Some(48215)),\n+    (active, if_while_or_patterns, \"1.26.0\", Some(48215), None),\n \n     // Parentheses in patterns\n-    (active, pattern_parentheses, \"1.26.0\", None),\n+    (active, pattern_parentheses, \"1.26.0\", None, None),\n );\n \n declare_features! (\n-    (removed, import_shadowing, \"1.0.0\", None),\n-    (removed, managed_boxes, \"1.0.0\", None),\n+    (removed, import_shadowing, \"1.0.0\", None, None),\n+    (removed, managed_boxes, \"1.0.0\", None, None),\n     // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n-    (removed, negate_unsigned, \"1.0.0\", Some(29645)),\n-    (removed, reflect, \"1.0.0\", Some(27749)),\n+    (removed, negate_unsigned, \"1.0.0\", Some(29645), None),\n+    (removed, reflect, \"1.0.0\", Some(27749), None),\n     // A way to temporarily opt out of opt in copy. This will *never* be accepted.\n-    (removed, opt_out_copy, \"1.0.0\", None),\n-    (removed, quad_precision_float, \"1.0.0\", None),\n-    (removed, struct_inherit, \"1.0.0\", None),\n-    (removed, test_removed_feature, \"1.0.0\", None),\n-    (removed, visible_private_types, \"1.0.0\", None),\n-    (removed, unsafe_no_drop_flag, \"1.0.0\", None),\n+    (removed, opt_out_copy, \"1.0.0\", None, None),\n+    (removed, quad_precision_float, \"1.0.0\", None, None),\n+    (removed, struct_inherit, \"1.0.0\", None, None),\n+    (removed, test_removed_feature, \"1.0.0\", None, None),\n+    (removed, visible_private_types, \"1.0.0\", None, None),\n+    (removed, unsafe_no_drop_flag, \"1.0.0\", None, None),\n     // Allows using items which are missing stability attributes\n     // rustc internal\n-    (removed, unmarked_api, \"1.0.0\", None),\n-    (removed, pushpop_unsafe, \"1.2.0\", None),\n-    (removed, allocator, \"1.0.0\", None),\n+    (removed, unmarked_api, \"1.0.0\", None, None),\n+    (removed, pushpop_unsafe, \"1.2.0\", None, None),\n+    (removed, allocator, \"1.0.0\", None, None),\n     // Allows the `#[simd]` attribute -- removed in favor of `#[repr(simd)]`\n-    (removed, simd, \"1.0.0\", Some(27731)),\n+    (removed, simd, \"1.0.0\", Some(27731), None),\n );\n \n declare_features! (\n-    (stable_removed, no_stack_check, \"1.0.0\", None),\n+    (stable_removed, no_stack_check, \"1.0.0\", None, None),\n );\n \n declare_features! (\n-    (accepted, associated_types, \"1.0.0\", None),\n+    (accepted, associated_types, \"1.0.0\", None, None),\n     // allow overloading augmented assignment operations like `a += b`\n-    (accepted, augmented_assignments, \"1.8.0\", Some(28235)),\n+    (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n     // allow empty structs and enum variants with braces\n-    (accepted, braced_empty_structs, \"1.8.0\", Some(29720)),\n+    (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n     // Allows indexing into constant arrays.\n-    (accepted, const_indexing, \"1.24.0\", Some(29947)),\n-    (accepted, default_type_params, \"1.0.0\", None),\n-    (accepted, globs, \"1.0.0\", None),\n-    (accepted, if_let, \"1.0.0\", None),\n+    (accepted, const_indexing, \"1.24.0\", Some(29947), None),\n+    (accepted, default_type_params, \"1.0.0\", None, None),\n+    (accepted, globs, \"1.0.0\", None, None),\n+    (accepted, if_let, \"1.0.0\", None, None),\n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n-    (accepted, issue_5723_bootstrap, \"1.0.0\", None),\n-    (accepted, macro_rules, \"1.0.0\", None),\n+    (accepted, issue_5723_bootstrap, \"1.0.0\", None, None),\n+    (accepted, macro_rules, \"1.0.0\", None, None),\n     // Allows using #![no_std]\n-    (accepted, no_std, \"1.6.0\", None),\n-    (accepted, slicing_syntax, \"1.0.0\", None),\n-    (accepted, struct_variant, \"1.0.0\", None),\n+    (accepted, no_std, \"1.6.0\", None, None),\n+    (accepted, slicing_syntax, \"1.0.0\", None, None),\n+    (accepted, struct_variant, \"1.0.0\", None, None),\n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n-    (accepted, test_accepted_feature, \"1.0.0\", None),\n-    (accepted, tuple_indexing, \"1.0.0\", None),\n+    (accepted, test_accepted_feature, \"1.0.0\", None, None),\n+    (accepted, tuple_indexing, \"1.0.0\", None, None),\n     // Allows macros to appear in the type position.\n-    (accepted, type_macros, \"1.13.0\", Some(27245)),\n-    (accepted, while_let, \"1.0.0\", None),\n+    (accepted, type_macros, \"1.13.0\", Some(27245), None),\n+    (accepted, while_let, \"1.0.0\", None, None),\n     // Allows `#[deprecated]` attribute\n-    (accepted, deprecated, \"1.9.0\", Some(29935)),\n+    (accepted, deprecated, \"1.9.0\", Some(29935), None),\n     // `expr?`\n-    (accepted, question_mark, \"1.13.0\", Some(31436)),\n+    (accepted, question_mark, \"1.13.0\", Some(31436), None),\n     // Allows `..` in tuple (struct) patterns\n-    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627)),\n-    (accepted, item_like_imports, \"1.15.0\", Some(35120)),\n+    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n+    (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n     // Allows using `Self` and associated types in struct expressions and patterns.\n-    (accepted, more_struct_aliases, \"1.16.0\", Some(37544)),\n+    (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n     // elide `'static` lifetimes in `static`s and `const`s\n-    (accepted, static_in_const, \"1.17.0\", Some(35897)),\n+    (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n     // Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n-    (accepted, field_init_shorthand, \"1.17.0\", Some(37340)),\n+    (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n     // Allows the definition recursive static items.\n-    (accepted, static_recursion, \"1.17.0\", Some(29719)),\n+    (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n     // pub(restricted) visibilities (RFC 1422)\n-    (accepted, pub_restricted, \"1.18.0\", Some(32409)),\n+    (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n     // The #![windows_subsystem] attribute\n-    (accepted, windows_subsystem, \"1.18.0\", Some(37499)),\n+    (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n     // Allows `break {expr}` with a value inside `loop`s.\n-    (accepted, loop_break_value, \"1.19.0\", Some(37339)),\n+    (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n     // Permits numeric fields in struct expressions and patterns.\n-    (accepted, relaxed_adts, \"1.19.0\", Some(35626)),\n+    (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n     // Coerces non capturing closures to function pointers\n-    (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817)),\n+    (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n     // Allows attributes on struct literal fields.\n-    (accepted, struct_field_attributes, \"1.20.0\", Some(38814)),\n+    (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n     // Allows the definition of associated constants in `trait` or `impl`\n     // blocks.\n-    (accepted, associated_consts, \"1.20.0\", Some(29646)),\n+    (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n     // Usage of the `compile_error!` macro\n-    (accepted, compile_error, \"1.20.0\", Some(40872)),\n+    (accepted, compile_error, \"1.20.0\", Some(40872), None),\n     // See rust-lang/rfcs#1414. Allows code like `let x: &'static u32 = &42` to work.\n-    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865)),\n+    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n     // Allow Drop types in constants (RFC 1440)\n-    (accepted, drop_types_in_const, \"1.22.0\", Some(33156)),\n+    (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n     // Allows the sysV64 ABI to be specified on all platforms\n     // instead of just the platforms on which it is the C ABI\n-    (accepted, abi_sysv64, \"1.24.0\", Some(36167)),\n+    (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n     // Allows `repr(align(16))` struct attribute (RFC 1358)\n-    (accepted, repr_align, \"1.25.0\", Some(33626)),\n+    (accepted, repr_align, \"1.25.0\", Some(33626), None),\n     // allow '|' at beginning of match arms (RFC 1925)\n-    (accepted, match_beginning_vert, \"1.25.0\", Some(44101)),\n+    (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n     // Nested groups in `use` (RFC 2128)\n-    (accepted, use_nested_groups, \"1.25.0\", Some(44494)),\n+    (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1793,11 +1795,22 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     }\n }\n \n-pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> Features {\n+pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n+                    epoch: Epoch) -> Features {\n     let mut features = Features::new();\n \n     let mut feature_checker = FeatureChecker::default();\n \n+    for &(.., f_epoch, set) in ACTIVE_FEATURES.iter() {\n+        if let Some(f_epoch) = f_epoch {\n+            if epoch >= f_epoch {\n+                // FIXME(Manishearth) there is currently no way to set\n+                // lang features by epoch\n+                set(&mut features, DUMMY_SP);\n+            }\n+        }\n+    }\n+\n     for attr in krate_attrs {\n         if !attr.check_name(\"feature\") {\n             continue\n@@ -1818,8 +1831,8 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> F\n                         continue\n                     };\n \n-                    if let Some(&(_, _, _, set)) = ACTIVE_FEATURES.iter()\n-                        .find(|& &(n, _, _, _)| name == n) {\n+                    if let Some(&(_, _, _, _, set)) = ACTIVE_FEATURES.iter()\n+                        .find(|& &(n, ..)| name == n) {\n                         set(&mut features, mi.span);\n                         feature_checker.collect(&features, mi.span);\n                     }"}, {"sha": "50e94e5cba7ad6ca9145c69a48acb5435d538a2d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -23,6 +23,7 @@\n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(match_default_bindings)]\n+#![feature(non_exhaustive)]\n #![feature(i128_type)]\n #![feature(const_atomic_usize_new)]\n #![feature(rustc_attrs)]\n@@ -114,6 +115,7 @@ pub mod codemap;\n #[macro_use]\n pub mod config;\n pub mod entry;\n+pub mod epoch;\n pub mod feature_gate;\n pub mod fold;\n pub mod parse;"}, {"sha": "37d092c06e02b76acc1c14236b51a8ed3d1db321", "filename": "src/test/run-pass/epoch-gate-feature.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fepoch-gate-feature.rs?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks if the correct registers are being used to pass arguments\n+// when the sysv64 ABI is specified.\n+\n+// compile-flags: -Zepoch=2018\n+\n+pub trait Foo {}\n+\n+// should compile without the dyn trait feature flag\n+fn foo(x: &dyn Foo) {}\n+\n+pub fn main() {}"}, {"sha": "eb40151615dad8b80950c6baee3459dd9b7b0725", "filename": "src/test/ui/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68e7282aa8be0040ca779d7ac7300b1de2900551/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference-variable-behind-raw-pointer.stderr?ref=68e7282aa8be0040ca779d7ac7300b1de2900551", "patch": "@@ -5,6 +5,6 @@ LL |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n    = note: #[warn(tyvar_behind_raw_pointer)] on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 epoch!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n "}]}