{"sha": "76a752e7a473c556773653aa505715a5042ae86b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YTc1MmU3YTQ3M2M1NTY3NzM2NTNhYTUwNTcxNWE1MDQyYWU4NmI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-19T09:34:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-19T19:27:43Z"}, "message": "rustc: Export only what's needed from middle::ty\n\nThe list is formidable.", "tree": {"sha": "29bbcfec118b93a3b5b1e96fc948276791e689ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29bbcfec118b93a3b5b1e96fc948276791e689ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76a752e7a473c556773653aa505715a5042ae86b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76a752e7a473c556773653aa505715a5042ae86b", "html_url": "https://github.com/rust-lang/rust/commit/76a752e7a473c556773653aa505715a5042ae86b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76a752e7a473c556773653aa505715a5042ae86b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a8af7b4729677031099c5156acd22893eb4536", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a8af7b4729677031099c5156acd22893eb4536", "html_url": "https://github.com/rust-lang/rust/commit/80a8af7b4729677031099c5156acd22893eb4536"}], "stats": {"total": 167, "additions": 164, "deletions": 3}, "files": [{"sha": "fcf4aa251cf197134b820c0b0d2c901ce22a32b5", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 164, "deletions": 3, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/76a752e7a473c556773653aa505715a5042ae86b/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a752e7a473c556773653aa505715a5042ae86b/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=76a752e7a473c556773653aa505715a5042ae86b", "patch": "@@ -22,6 +22,155 @@ import middle::metadata;\n import util::common::*;\n import util::data::interner;\n \n+export ann_to_monotype;\n+export ann_to_type;\n+export ann_to_type_params;\n+export ann_to_ty_param_substs_opt_and_ty;\n+export any_item_native;\n+export any_item_rust;\n+export arg;\n+export args_eq;\n+export bind_params_in_type;\n+export block_ty;\n+export constr_def;\n+export constr_general;\n+export constr_table;\n+export count_ty_params;\n+export ctxt;\n+export decl_local_ty;\n+export def_has_ty_params;\n+export eq_ty;\n+export expr_ann;\n+export expr_has_ty_params;\n+export expr_ty;\n+export fold_ty;\n+export field;\n+export field_idx;\n+export field_num;\n+export fm_general;\n+export get_element_type;\n+export hash_ty;\n+export idx_nil;\n+export is_lval;\n+export item_table;\n+export lookup_item_type;\n+export method;\n+export method_idx;\n+export method_ty_to_fn_ty;\n+export mk_bool;\n+export mk_bot;\n+export mk_box;\n+export mk_chan;\n+export mk_char;\n+export mk_ctxt;\n+export mk_float;\n+export mk_fn;\n+export mk_imm_box;\n+export mk_imm_tup;\n+export mk_imm_vec;\n+export mk_int;\n+export mk_istr;\n+export mk_ivec;\n+export mk_mach;\n+export mk_native;\n+export mk_native_fn;\n+export mk_nil;\n+export mk_obj;\n+export mk_param;\n+export mk_port;\n+export mk_ptr;\n+export mk_rec;\n+export mk_str;\n+export mk_tag;\n+export mk_task;\n+export mk_tup;\n+export mk_type;\n+export mk_uint;\n+export mk_var;\n+export mk_vec;\n+export mode;\n+export mo_val;\n+export mo_alias;\n+export mt;\n+export node_type_table;\n+export pat_ann;\n+export pat_ty;\n+export path_to_str;\n+export rename;\n+export ret_ty_of_fn;\n+export ret_ty_of_fn_ty;\n+export ret_ty_to_fn_ty;\n+export sequence_element_type;\n+export sequence_is_interior;\n+export struct;\n+export sort_methods;\n+export stmt_ann;\n+export strip_boxes;\n+export sty;\n+export substitute_type_params;\n+export t;\n+export tag_variants;\n+export tag_variant_with_id;\n+export ty_param_substs_opt_and_ty;\n+export ty_param_count_and_ty;\n+export ty_native_fn;\n+export ty_bool;\n+export ty_bot;\n+export ty_box;\n+export ty_chan;\n+export ty_char;\n+export ty_float;\n+export ty_fn;\n+export ty_fn_abi;\n+export ty_fn_proto;\n+export ty_fn_ret;\n+export ty_int;\n+export ty_istr;\n+export ty_ivec;\n+export ty_machine;\n+export ty_native;\n+export ty_nil;\n+export ty_obj;\n+export ty_param;\n+export ty_port;\n+export ty_ptr;\n+export ty_rec;\n+export ty_str;\n+export ty_tag;\n+export ty_task;\n+export ty_tup;\n+export ty_type;\n+export ty_uint;\n+export ty_var;\n+export ty_var_id;\n+export ty_vec;\n+export ty_param_substs_opt_and_ty_to_monotype;\n+export ty_fn_args;\n+export type_contains_params;\n+export type_contains_vars;\n+export type_err;\n+export type_err_to_str;\n+export type_has_dynamic_size;\n+export type_has_pointers;\n+export type_is_bool;\n+export type_is_bot;\n+export type_is_box;\n+export type_is_boxed;\n+export type_is_chan;\n+export type_is_fp;\n+export type_is_integral;\n+export type_is_native;\n+export type_is_nil;\n+export type_is_scalar;\n+export type_is_sequence;\n+export type_is_signed;\n+export type_is_structural;\n+export type_is_tup_like;\n+export type_owns_heap_mem;\n+export type_param;\n+export unify;\n+export variant_info;\n+export walk_ty;\n \n // Data types\n tag mode { mo_val; mo_alias(bool); }\n@@ -80,9 +229,6 @@ fn method_ty_to_fn_ty(&ctxt cx, method m) -> t {\n \n \n // Never construct these manually. These are interned.\n-//\n-// TODO: It'd be really nice to be able to hide this definition from the\n-// outside world, to enforce the above invariants.\n type raw_t =\n     rec(sty struct,\n         option::t[str] cname,\n@@ -1737,6 +1883,21 @@ fn is_lval(&@ast::expr expr) -> bool {\n //\n //     http://www.cs.man.ac.uk/~hoderk/ubench/unification_full.pdf\n mod unify {\n+\n+    export fixup_result;\n+    export fixup_vars;\n+    export fix_ok;\n+    export fix_err;\n+    export mk_var_bindings;\n+    export resolve_type_bindings;\n+    export resolve_type_structure;\n+    export resolve_type_var;\n+    export result;\n+    export unify;\n+    export ures_ok;\n+    export ures_err;\n+    export var_bindings;\n+\n     tag result { ures_ok(t); ures_err(type_err); }\n     tag union_result { unres_ok; unres_err(type_err); }\n     tag fixup_result {"}]}