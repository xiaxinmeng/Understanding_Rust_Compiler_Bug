{"sha": "1031c659e0a6d75d0a6759dc95f4c55e2671053b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMzFjNjU5ZTBhNmQ3NWQwYTY3NTlkYzk1ZjRjNTVlMjY3MTA1M2I=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T10:13:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T10:13:43Z"}, "message": "Refactoring of constant.rs in preparation for static codegen", "tree": {"sha": "7b6bf8b6b7f10dd22ea35d0fcd82188f99ede4ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b6bf8b6b7f10dd22ea35d0fcd82188f99ede4ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1031c659e0a6d75d0a6759dc95f4c55e2671053b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1031c659e0a6d75d0a6759dc95f4c55e2671053b", "html_url": "https://github.com/rust-lang/rust/commit/1031c659e0a6d75d0a6759dc95f4c55e2671053b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1031c659e0a6d75d0a6759dc95f4c55e2671053b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e46950eb32fbfc62f3a3306714f977fdd704f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e46950eb32fbfc62f3a3306714f977fdd704f0", "html_url": "https://github.com/rust-lang/rust/commit/c2e46950eb32fbfc62f3a3306714f977fdd704f0"}], "stats": {"total": 102, "additions": 66, "deletions": 36}, "files": [{"sha": "4a3de4fa52b7be4910ab519eb022c18b3319d566", "filename": "src/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1031c659e0a6d75d0a6759dc95f4c55e2671053b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1031c659e0a6d75d0a6759dc95f4c55e2671053b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1031c659e0a6d75d0a6759dc95f4c55e2671053b", "patch": "@@ -69,7 +69,9 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n             } => unimpl!(\"Unimplemented drop glue instance\"),\n             inst => unimpl!(\"Unimplemented instance {:?}\", inst),\n         },\n-        MonoItem::Static(def_id) => unimpl!(\"Unimplemented static mono item {:?}\", def_id),\n+        MonoItem::Static(def_id) => {\n+            crate::constant::codegen_static(cx, def_id);\n+        }\n         MonoItem::GlobalAsm(node_id) => cx\n             .tcx\n             .sess\n@@ -860,9 +862,7 @@ pub fn trans_place<'a, 'tcx: 'a>(\n     match place {\n         Place::Local(local) => fx.get_local_place(*local),\n         Place::Promoted(promoted) => crate::constant::trans_promoted(fx, promoted.0),\n-        Place::Static(static_) => {\n-            unimpl!(\"static place {:?} ty {:?}\", static_.def_id, static_.ty);\n-        }\n+        Place::Static(static_) => crate::constant::codegen_static_ref(fx, static_),\n         Place::Projection(projection) => {\n             let base = trans_place(fx, &projection.base);\n             match projection.elem {"}, {"sha": "ad0fb3392ca99d2c8cc91bb32be12d8014141c33", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1031c659e0a6d75d0a6759dc95f4c55e2671053b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1031c659e0a6d75d0a6759dc95f4c55e2671053b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=1031c659e0a6d75d0a6759dc95f4c55e2671053b", "patch": "@@ -2,7 +2,7 @@ use std::fmt;\n \n use rustc_target::spec::{HasTargetSpec, Target};\n \n-use cranelift_module::{DataId, Module};\n+use cranelift_module::Module;\n \n use crate::prelude::*;\n \n@@ -361,7 +361,7 @@ pub struct FunctionCx<'a, 'tcx: 'a> {\n     pub ebb_map: HashMap<BasicBlock, Ebb>,\n     pub local_map: HashMap<Local, CPlace<'tcx>>,\n     pub comments: HashMap<Inst, String>,\n-    pub constants: &'a mut HashMap<AllocId, DataId>,\n+    pub constants: &'a mut crate::constant::ConstantCx,\n }\n \n impl<'a, 'tcx: 'a> fmt::Debug for FunctionCx<'a, 'tcx> {"}, {"sha": "700a53bd6452994722553d9fafdf44824bd24a08", "filename": "src/constant.rs", "status": "modified", "additions": 54, "deletions": 27, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/1031c659e0a6d75d0a6759dc95f4c55e2671053b/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1031c659e0a6d75d0a6759dc95f4c55e2671053b/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=1031c659e0a6d75d0a6759dc95f4c55e2671053b", "patch": "@@ -2,7 +2,32 @@ use cranelift_module::*;\n use crate::prelude::*;\n use rustc::mir::interpret::{read_target_uint, AllocId, ConstValue, GlobalId};\n use rustc::ty::Const;\n-use rustc_mir::interpret::{CompileTimeEvaluator, Memory, MemoryKind};\n+use rustc_mir::interpret::{CompileTimeEvaluator, Memory};\n+\n+#[derive(Default)]\n+pub struct ConstantCx {\n+    constants: HashMap<AllocId, DataId>,\n+    done: HashSet<DataId>,\n+}\n+\n+impl ConstantCx {\n+    pub fn finalize<B: Backend>(mut self, module: &mut Module<B>) {\n+        for data_id in self.done.drain() {\n+            module.finalize_data(data_id);\n+        }\n+    }\n+}\n+\n+pub fn codegen_static<'a, 'tcx: 'a, B: Backend>(_cx: &mut CodegenCx<'a, 'tcx, B>, def_id: DefId) {\n+    unimpl!(\"Unimplemented static mono item {:?}\", def_id);\n+}\n+\n+pub fn codegen_static_ref<'a, 'tcx: 'a>(\n+    _fx: &mut FunctionCx<'a, 'tcx>,\n+    static_: &Static<'tcx>,\n+) -> CPlace<'tcx> {\n+    unimpl!(\"Unimplemented static mono item {:?}\", static_.def_id);\n+}\n \n pub fn trans_promoted<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx>,\n@@ -90,31 +115,33 @@ fn trans_const_place<'a, 'tcx: 'a>(\n         // thus causing panics for some consts, so this disables it\n         return CPlace::Addr(fx.bcx.ins().iconst(types::I64, 0), layout);\n     }\n-    let mut memory = Memory::<CompileTimeEvaluator>::new(fx.tcx.at(DUMMY_SP), ());\n     let alloc = fx.tcx.const_value_to_allocation(const_);\n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n-    let alloc_id = memory\n-        .allocate_value(alloc.clone(), MemoryKind::Stack)\n-        .unwrap();\n-    let data_id = get_global_for_alloc_id(fx, &memory, alloc_id);\n+    let alloc_id = fx.tcx.alloc_map.lock().allocate(alloc);\n+    let data_id = get_global_for_alloc_id(\n+        fx.tcx,\n+        fx.module,\n+        fx.constants,\n+        alloc_id,\n+    );\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     // TODO: does global_value return a ptr of a val?\n     let global_ptr = fx.bcx.ins().global_value(types::I64, local_data_id);\n     CPlace::Addr(global_ptr, layout)\n }\n \n // If ret.1 is true, then the global didn't exist before\n-fn define_global_for_alloc_id(\n-    fx: &mut FunctionCx,\n+fn define_global_for_alloc_id<'a, 'tcx: 'a, B: Backend>(\n+    module: &mut Module<B>,\n+    cx: &mut ConstantCx,//<'a, 'tcx>,\n     alloc_id: AllocId,\n     todo: &mut HashMap<AllocId, DataId>,\n ) -> (DataId, bool) {\n     use std::collections::hash_map::Entry;\n-    match fx.constants.entry(alloc_id) {\n+    match cx.constants.entry(alloc_id) {\n         Entry::Occupied(mut occ) => (*occ.get_mut(), false),\n         Entry::Vacant(vac) => {\n-            let data_id = fx\n-                .module\n+            let data_id = module\n                 .declare_data(&alloc_id.0.to_string(), Linkage::Local, false)\n                 .unwrap();\n             todo.insert(alloc_id, data_id);\n@@ -124,29 +151,32 @@ fn define_global_for_alloc_id(\n     }\n }\n \n-fn get_global_for_alloc_id(\n-    fx: &mut FunctionCx,\n-    memory: &Memory<CompileTimeEvaluator>,\n+fn get_global_for_alloc_id<'a, 'tcx: 'a, B: Backend + 'a>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<B>,\n+    cx: &mut ConstantCx,//<'a, 'tcx>,\n     alloc_id: AllocId,\n ) -> DataId {\n-    if let Some(data_id) = fx.constants.get(&alloc_id) {\n+    if let Some(data_id) = cx.constants.get(&alloc_id) {\n         return *data_id;\n     }\n \n+    let memory = Memory::<CompileTimeEvaluator>::new(tcx.at(DUMMY_SP), ());\n+\n     let mut todo = HashMap::new();\n-    let mut done = HashSet::new();\n-    define_global_for_alloc_id(fx, alloc_id, &mut todo);\n+    define_global_for_alloc_id(module, cx, alloc_id, &mut todo);\n \n     while let Some((alloc_id, data_id)) = {\n         let next = todo.drain().next();\n         next\n     } {\n         println!(\n             \"cur: {:?}:{:?} todo: {:?} done: {:?}\",\n-            alloc_id, data_id, todo, done\n+            alloc_id, data_id, todo, cx.done\n         );\n \n         let alloc = memory.get(alloc_id).unwrap();\n+        //let alloc = tcx.alloc_map.lock().get(alloc_id).unwrap();\n         let mut data_ctx = DataContext::new();\n \n         data_ctx.define(\n@@ -155,26 +185,23 @@ fn get_global_for_alloc_id(\n         );\n \n         for &(offset, reloc) in alloc.relocations.iter() {\n-            let data_id = define_global_for_alloc_id(fx, reloc, &mut todo).0;\n+            let data_id = define_global_for_alloc_id(module, cx, reloc, &mut todo).0;\n \n             let reloc_offset = {\n                 let endianness = memory.endianness();\n                 let offset = offset.bytes() as usize;\n-                let ptr_size = fx.tcx.data_layout.pointer_size;\n+                let ptr_size = tcx.data_layout.pointer_size;\n                 let bytes = &alloc.bytes[offset..offset + ptr_size.bytes() as usize];\n                 read_target_uint(endianness, bytes).unwrap()\n             };\n \n             // TODO: is this a correct usage of the api\n-            let global_value = fx.module.declare_data_in_data(data_id, &mut data_ctx);\n+            let global_value = module.declare_data_in_data(data_id, &mut data_ctx);\n             data_ctx.write_data_addr(reloc_offset as u32, global_value, 0);\n         }\n \n-        fx.module.define_data(data_id, &data_ctx).unwrap();\n-        done.insert(data_id);\n-    }\n-    for data_id in done.drain() {\n-        fx.module.finalize_data(data_id);\n+        module.define_data(data_id, &data_ctx).unwrap();\n+        cx.done.insert(data_id);\n     }\n-    *fx.constants.get(&alloc_id).unwrap()\n+    *cx.constants.get(&alloc_id).unwrap()\n }"}, {"sha": "70b9418bf296f1517f55ace4d139e375b20cb16f", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1031c659e0a6d75d0a6759dc95f4c55e2671053b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1031c659e0a6d75d0a6759dc95f4c55e2671053b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1031c659e0a6d75d0a6759dc95f4c55e2671053b", "patch": "@@ -96,7 +96,7 @@ use crate::prelude::*;\n pub struct CodegenCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub module: &'a mut Module<B>,\n-    pub constants: HashMap<AllocId, DataId>,\n+    pub constants: crate::constant::ConstantCx,\n     pub defined_functions: Vec<FuncId>,\n }\n \n@@ -251,7 +251,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             let mut cx = CodegenCx {\n                 tcx,\n                 module: &mut module,\n-                constants: HashMap::new(),\n+                constants: Default::default(),\n                 defined_functions: Vec::new(),\n             };\n \n@@ -280,10 +280,13 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     }\n                 }\n             }\n+\n+            cx.constants.finalize(&mut cx.module);\n+\n             let after = ::std::time::Instant::now();\n             println!(\"time: {:?}\", after - before);\n \n-            std::mem::replace(&mut cx.defined_functions, Vec::new())\n+            cx.defined_functions\n         };\n \n         tcx.sess.warn(\"Compiled everything\");"}]}