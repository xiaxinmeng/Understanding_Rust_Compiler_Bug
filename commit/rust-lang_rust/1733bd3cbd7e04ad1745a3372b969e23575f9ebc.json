{"sha": "1733bd3cbd7e04ad1745a3372b969e23575f9ebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MzNiZDNjYmQ3ZTA0YWQxNzQ1YTMzNzJiOTY5ZTIzNTc1ZjllYmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-07T09:33:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-07T09:33:20Z"}, "message": "list possible orderings for load and store", "tree": {"sha": "6772edb6bd23ec9e29da99cc2a7310a1af13c0de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6772edb6bd23ec9e29da99cc2a7310a1af13c0de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1733bd3cbd7e04ad1745a3372b969e23575f9ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1733bd3cbd7e04ad1745a3372b969e23575f9ebc", "html_url": "https://github.com/rust-lang/rust/commit/1733bd3cbd7e04ad1745a3372b969e23575f9ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1733bd3cbd7e04ad1745a3372b969e23575f9ebc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "110bcc97984fec55cb6c0bd5313bcd8ee02da12c", "url": "https://api.github.com/repos/rust-lang/rust/commits/110bcc97984fec55cb6c0bd5313bcd8ee02da12c", "html_url": "https://github.com/rust-lang/rust/commit/110bcc97984fec55cb6c0bd5313bcd8ee02da12c"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "17702494ecceef60fba9064a550c6b2b269df145", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 43, "deletions": 26, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1733bd3cbd7e04ad1745a3372b969e23575f9ebc/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1733bd3cbd7e04ad1745a3372b969e23575f9ebc/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=1733bd3cbd7e04ad1745a3372b969e23575f9ebc", "patch": "@@ -332,15 +332,18 @@ impl AtomicBool {\n     /// Loads a value from the bool.\n     ///\n     /// `load` takes an [`Ordering`] argument which describes the memory ordering\n-    /// of this operation.\n+    /// of this operation. Possible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].\n     ///\n     /// # Panics\n     ///\n     /// Panics if `order` is [`Release`] or [`AcqRel`].\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n     /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -360,9 +363,18 @@ impl AtomicBool {\n     /// Stores a value into the bool.\n     ///\n     /// `store` takes an [`Ordering`] argument which describes the memory ordering\n-    /// of this operation.\n+    /// of this operation. Possible values are [`SeqCst`], [`Release`] and [`Relaxed`].\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -374,13 +386,6 @@ impl AtomicBool {\n     /// some_bool.store(false, Ordering::Relaxed);\n     /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n-    ///\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, val: bool, order: Ordering) {\n@@ -751,15 +756,18 @@ impl<T> AtomicPtr<T> {\n     /// Loads a value from the pointer.\n     ///\n     /// `load` takes an [`Ordering`] argument which describes the memory ordering\n-    /// of this operation.\n+    /// of this operation. Possible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].\n     ///\n     /// # Panics\n     ///\n     /// Panics if `order` is [`Release`] or [`AcqRel`].\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n     /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -780,9 +788,18 @@ impl<T> AtomicPtr<T> {\n     /// Stores a value into the pointer.\n     ///\n     /// `store` takes an [`Ordering`] argument which describes the memory ordering\n-    /// of this operation.\n+    /// of this operation. Possible values are [`SeqCst`], [`Release`] and [`Relaxed`].\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n     ///\n     /// [`Ordering`]: enum.Ordering.html\n+    /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+    /// [`Release`]: enum.Ordering.html#variant.Release\n+    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+    /// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n     ///\n     /// # Examples\n     ///\n@@ -796,13 +813,6 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// some_ptr.store(other_ptr, Ordering::Relaxed);\n     /// ```\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if `order` is [`Acquire`] or [`AcqRel`].\n-    ///\n-    /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n-    /// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn store(&self, ptr: *mut T, order: Ordering) {\n@@ -1115,14 +1125,18 @@ assert_eq!(some_var.into_inner(), 5);\n                 concat!(\"Loads a value from the atomic integer.\n \n `load` takes an [`Ordering`] argument which describes the memory ordering of this operation.\n+Possible values are [`SeqCst`], [`Acquire`] and [`Relaxed`].\n \n # Panics\n \n Panics if `order` is [`Release`] or [`AcqRel`].\n \n [`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n \n # Examples\n \n@@ -1144,8 +1158,18 @@ assert_eq!(some_var.load(Ordering::Relaxed), 5);\n                 concat!(\"Stores a value into the atomic integer.\n \n `store` takes an [`Ordering`] argument which describes the memory ordering of this operation.\n+ Possible values are [`SeqCst`], [`Release`] and [`Relaxed`].\n+\n+# Panics\n+\n+Panics if `order` is [`Acquire`] or [`AcqRel`].\n \n [`Ordering`]: enum.Ordering.html\n+[`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+[`Release`]: enum.Ordering.html#variant.Release\n+[`Acquire`]: enum.Ordering.html#variant.Acquire\n+[`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+[`SeqCst`]: enum.Ordering.html#variant.SeqCst\n \n # Examples\n \n@@ -1156,14 +1180,7 @@ let some_var = \", stringify!($atomic_type), \"::new(5);\n \n some_var.store(10, Ordering::Relaxed);\n assert_eq!(some_var.load(Ordering::Relaxed), 10);\n-```\n-\n-# Panics\n-\n-Panics if `order` is [`Acquire`] or [`AcqRel`].\n-\n-[`Acquire`]: enum.Ordering.html#variant.Acquire\n-[`AcqRel`]: enum.Ordering.html#variant.AcqRel\"),\n+```\"),\n                 #[inline]\n                 #[$stable]\n                 pub fn store(&self, val: $int_type, order: Ordering) {"}]}