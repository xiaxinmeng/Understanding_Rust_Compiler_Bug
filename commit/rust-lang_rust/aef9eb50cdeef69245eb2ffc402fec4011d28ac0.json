{"sha": "aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "node_id": "C_kwDOAAsO6NoAKGFlZjllYjUwY2RlZWY2OTI0NWViMmZmYzQwMmZlYzQwMTFkMjhhYzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-24T16:00:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-24T16:00:27Z"}, "message": "Rollup merge of #96352 - marmeladema:fix-nll-lifetime-bound-suggestions, r=jackh726\n\nImprove span for `consider adding an explicit lifetime bound` suggestions under NLL\n\nBecause NLL borrowck is run after typeck, `in_progress_typeck_results` was always `None` which was preventing the retrieval of the span to which the suggestion is suppose to add the lifetime bound.\nWe now manually pass the `LocalDefId` owner to `construct_generic_bound_failure` so that under NLL, we give the owner id of the current body.\n\nThis helps with #96332", "tree": {"sha": "5e545e5f2f3d0dccf7e4bd3d53cbea131700b7f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e545e5f2f3d0dccf7e4bd3d53cbea131700b7f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiZXQcCRBK7hj4Ov3rIwAAweQIAIVr8rc1THHhD7t3Jo9o0Sa/\nhXS230m7wLJmeEHks+uOf+j0f7BFWrJfExZQbVN40ZFb9d1nf0kcLvaMdjA7wAEb\n2mQBiiiXI2MpvIJslwdMtBIEEWnrtKHqGdjQFYO8IkR7tDuP4b/6fm87oErPZSdz\n2dXvyeM7WmrELL0VrE2CoD6N6dH27Qcf1VCVQTFRE+41nN2o1OctYQCpSl/XgOBq\n7ovatlnvCCSwEW/Vl+W1vcsevVZJa/Ry/ueOAuxfmn0oN0tOe/4AE78F53930dUu\nFX3BjRjKAWYlPoyWIkRW2hHIgrGt54xIUCRLLMDKJiaTqFBsZXnsZDUi0XRS98A=\n=lzZn\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e545e5f2f3d0dccf7e4bd3d53cbea131700b7f1\nparent 7daa1c92ec551488601f28fc788440003aee40f3\nparent 8d561d25e3307568255fc7c78ebb500294495561\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1650816027 +0200\ncommitter GitHub <noreply@github.com> 1650816027 +0200\n\nRollup merge of #96352 - marmeladema:fix-nll-lifetime-bound-suggestions, r=jackh726\n\nImprove span for `consider adding an explicit lifetime bound` suggestions under NLL\n\nBecause NLL borrowck is run after typeck, `in_progress_typeck_results` was always `None` which was preventing the retrieval of the span to which the suggestion is suppose to add the lifetime bound.\nWe now manually pass the `LocalDefId` owner to `construct_generic_bound_failure` so that under NLL, we give the owner id of the current body.\n\nThis helps with #96332\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "html_url": "https://github.com/rust-lang/rust/commit/aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7daa1c92ec551488601f28fc788440003aee40f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7daa1c92ec551488601f28fc788440003aee40f3", "html_url": "https://github.com/rust-lang/rust/commit/7daa1c92ec551488601f28fc788440003aee40f3"}, {"sha": "8d561d25e3307568255fc7c78ebb500294495561", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d561d25e3307568255fc7c78ebb500294495561", "html_url": "https://github.com/rust-lang/rust/commit/8d561d25e3307568255fc7c78ebb500294495561"}], "stats": {"total": 374, "additions": 231, "deletions": 143}, "files": [{"sha": "fd78b483b75f25c24af7bcd60c5130591cdde612", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -4,6 +4,7 @@ use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed\n use rustc_infer::infer::{\n     error_reporting::nice_region_error::NiceRegionError,\n     error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n+    RelateParamBound,\n };\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n@@ -166,11 +167,14 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     let type_test_span = type_test.locations.span(&self.body);\n \n                     if let Some(lower_bound_region) = lower_bound_region {\n+                        let generic_ty = type_test.generic_kind.to_ty(self.infcx.tcx);\n+                        let origin = RelateParamBound(type_test_span, generic_ty, None);\n                         self.buffer_error(self.infcx.construct_generic_bound_failure(\n                             type_test_span,\n-                            None,\n+                            Some(origin),\n                             type_test.generic_kind,\n                             lower_bound_region,\n+                            self.body.source.def_id().as_local(),\n                         ));\n                     } else {\n                         // FIXME. We should handle this case better. It"}, {"sha": "f9273cc50b70a2b6a44b6c1630afb6e618170035", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -61,7 +61,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::dep_graph::DepContext;\n@@ -2285,7 +2285,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n     ) {\n-        self.construct_generic_bound_failure(span, origin, bound_kind, sub).emit();\n+        let owner =\n+            self.in_progress_typeck_results.map(|typeck_results| typeck_results.borrow().hir_owner);\n+        self.construct_generic_bound_failure(span, origin, bound_kind, sub, owner).emit();\n     }\n \n     pub fn construct_generic_bound_failure(\n@@ -2294,31 +2296,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         origin: Option<SubregionOrigin<'tcx>>,\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n+        owner: Option<LocalDefId>,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let hir = self.tcx.hir();\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n-        let generics = self\n-            .in_progress_typeck_results\n-            .map(|typeck_results| typeck_results.borrow().hir_owner)\n-            .map(|owner| {\n-                let hir_id = hir.local_def_id_to_hir_id(owner);\n-                let parent_id = hir.get_parent_item(hir_id);\n-                (\n-                    // Parent item could be a `mod`, so we check the HIR before calling:\n-                    if let Some(Node::Item(Item {\n-                        kind: ItemKind::Trait(..) | ItemKind::Impl { .. },\n-                        ..\n-                    })) = hir.find_by_def_id(parent_id)\n-                    {\n-                        Some(self.tcx.generics_of(parent_id))\n-                    } else {\n-                        None\n-                    },\n-                    self.tcx.generics_of(owner.to_def_id()),\n-                    hir.span(hir_id),\n-                )\n-            });\n+        let generics = owner.map(|owner| {\n+            let hir_id = hir.local_def_id_to_hir_id(owner);\n+            let parent_id = hir.get_parent_item(hir_id);\n+            (\n+                // Parent item could be a `mod`, so we check the HIR before calling:\n+                if let Some(Node::Item(Item {\n+                    kind: ItemKind::Trait(..) | ItemKind::Impl { .. },\n+                    ..\n+                })) = hir.find_by_def_id(parent_id)\n+                {\n+                    Some(self.tcx.generics_of(parent_id))\n+                } else {\n+                    None\n+                },\n+                self.tcx.generics_of(owner.to_def_id()),\n+                hir.span(hir_id),\n+            )\n+        });\n \n         let span = match generics {\n             // This is to get around the trait identity obligation, that has a `DUMMY_SP` as signal\n@@ -2606,11 +2606,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     None,\n                 );\n                 if let Some(infer::RelateParamBound(_, t, _)) = origin {\n-                    let return_impl_trait = self\n-                        .in_progress_typeck_results\n-                        .map(|typeck_results| typeck_results.borrow().hir_owner)\n-                        .and_then(|owner| self.tcx.return_type_impl_trait(owner))\n-                        .is_some();\n+                    let return_impl_trait =\n+                        owner.and_then(|owner| self.tcx.return_type_impl_trait(owner)).is_some();\n                     let t = self.resolve_vars_if_possible(t);\n                     match t.kind() {\n                         // We've got:"}, {"sha": "0059f729bae2fcb947bf9a84733533a4eeca270d", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -82,10 +82,11 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:41:5\n    |\n+LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n+   |                                 -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 9 previous errors\n "}, {"sha": "5328b077993c5ae2056c4c447e222467b492a56d", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,10 +1,11 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/type_parameters_captured.rs:10:5\n    |\n+LL | fn foo<T>(x: T) -> impl Any + 'static {\n+   |        - help: consider adding an explicit lifetime bound...: `T: 'static`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "422673b361a95b2ebcdd73de1a64b8f20b83033f", "filename": "src/test/ui/lifetimes/lifetime-errors/issue_74400.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fissue_74400.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/issue_74400.rs:12:5\n    |\n+LL | fn g<T>(data: &[T]) {\n+   |      - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     f(data, identity)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0308]: mismatched types\n   --> $DIR/issue_74400.rs:12:5"}, {"sha": "b6856089a84f9f18abde1af4766d301da898b536", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -36,6 +36,9 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/propagate-from-trait-match.rs:32:36\n    |\n+LL |   fn supply<'a, T>(value: T)\n+   |                 - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |       establish_relationships(value, |value| {\n    |  ____________________________________^\n LL | |\n@@ -44,9 +47,7 @@ LL | |         // This function call requires that\n ...  |\n LL | |         require(value);\n LL | |     });\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "3d4cfc1610a6690757a8768e2e3249b11974756d", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,18 +1,20 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:11:5\n    |\n+LL | fn no_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:26:5\n    |\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n+   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cc5aa1eb11ec039c74e920ef179154efb7f0ca3c", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,10 +1,10 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/projection-implied-bounds.rs:30:18\n    |\n+LL | fn generic2<T: Iterator>(value: T) {\n+   |             -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n LL |     twice(value, |value_ref, item| invoke2(value_ref, item));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "8fe25181da1a035c8a7572ee0cebd352861123f7", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -33,6 +33,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:34:23\n@@ -96,6 +97,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:52:23"}, {"sha": "e0ff544fe471333a384714d69ea6b372a1c765c3", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-fn.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -5,6 +5,7 @@ LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iterator>::Item` may not live long enough\n   --> $DIR/projection-no-regions-fn.rs:28:5\n@@ -13,6 +14,7 @@ LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n+   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62db6dd845a28165709c3960c5f6540ae74cdbe5", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -31,10 +31,11 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:29\n    |\n+LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n+   |                                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -81,10 +82,11 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n+LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n+   |                                   - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:39"}, {"sha": "1ee788b40ab9ea296f965e32b8d523dc5801c150", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -34,6 +34,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n@@ -70,6 +71,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: 'a`...\n+   = note: ...so that the type `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29"}, {"sha": "b4435fe06bccca5de87f1d50a99492fd9468cb19", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-bound.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -5,6 +5,7 @@ LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+   = note: ...so that the type `<T as MyTrait<'_>>::Output` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "ddeaf3c1f9e8ca7947add0d32df76dcd5c13bcb2", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -5,6 +5,7 @@ LL |     bar::<<T as MyTrait<'a>>::Output>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n+   = note: ...so that the type `<T as MyTrait<'_>>::Output` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "c51edb7868d7a8ef880c72ab02a77532cdae021f", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-none.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,10 +1,11 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-where-clause-none.rs:16:5\n    |\n+LL | fn foo<'a, T>() -> &'a ()\n+   |            - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     bar::<T::Output>()\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "3e5e4868341edf613f176f1cf973fde0c61d3527", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -52,10 +52,10 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n+LL | fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n+   |                     - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |                        ^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "dc2f23b4fc8a33b8bcd4f4357b00fd5110334995", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -29,18 +29,20 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n    |\n+LL | fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     with_signature(x, |y| y)\n-   |                       ^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |                       ^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:41:5\n    |\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n+   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e9f728c77b34b9d0420906052b5b6650c56bf6ed", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -37,6 +37,8 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n    |\n+LL |   fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n+   |                    - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n LL | |\n@@ -45,9 +47,7 @@ LL | |         // See `correct_region`, which explains the point of this\n ...  |\n LL | |         require(&x, &y)\n LL | |     })\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -121,15 +121,16 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n    |\n+LL |   fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n+   |                           - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n LL | |\n LL | |         // See `correct_region`\n LL | |         require(&x, &y)\n LL | |     })\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26"}, {"sha": "a2e6a5d57cd6278891798e1640c6fd3f43268774", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,10 +1,10 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn-body.rs:19:5\n    |\n+LL | fn region_static<'a, T>(cell: Cell<&'a usize>, t: T) {\n+   |                      - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     outlives(cell, t)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "fce360dd54bfb28d84ca2f2efc7bd9525c1eea90", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,18 +1,20 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:11:5\n    |\n+LL | fn no_region<'a, T>(x: Box<T>) -> Box<Debug + 'a>\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:26:5\n    |\n+LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n+   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     x\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7dcaa9d97e7c83abfeacdd45494e64c036bda98", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -5,6 +5,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:22:5\n@@ -13,6 +14,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:28:5\n@@ -21,6 +23,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n   --> $DIR/regions-close-associated-type-into-object.rs:35:5\n@@ -29,6 +32,7 @@ LL |     Box::new(item)\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n+   = note: ...so that the type `<T as Iter>::Item` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6a2429e51ecdad24b7f61046a63ca6f5cc9578b5", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,26 +1,26 @@\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |     ^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: lifetime may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:5\n@@ -42,10 +42,10 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:9:14\n    |\n+LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |              ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n+   |              ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n \n error: aborting due to 6 previous errors\n "}, {"sha": "54302cc6dca2243a9234c667ab70db41d8144b29", "filename": "src/test/ui/regions/regions-close-object-into-object-5.nll.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,26 +1,29 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n@@ -34,10 +37,11 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:14\n    |\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n+LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n-   |              ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |              ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 5 previous errors\n "}, {"sha": "063c3b19a19cccc5bb96ea39e08196eb838a6295", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,18 +1,18 @@\n error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n    |\n+LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n+   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'static>\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'static`...\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n    |\n+LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n+   |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'b>\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'b`...\n+   |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f0464e299bbec169dcafab57725ae04f9742efc0", "filename": "src/test/ui/regions/regions-close-param-into-object.nll.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,34 +1,38 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:6:5\n    |\n+LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:12:5\n    |\n+LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n+   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:18:5\n    |\n+LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:24:5\n    |\n+LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n+   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n+...\n LL |     Box::new(v)\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0e1db8acf1fae7dc80f65f14306d13a585b007fb", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,10 +1,11 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-implied-bounds-projection-gap-1.rs:16:5\n    |\n+LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n+   |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`\n+LL | {\n LL |     wf::<&'x T>();\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'x`...\n+   |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "e88f79a3a8c54c2d5dbb0b6f35832528a9ebf1b3", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -5,6 +5,7 @@ LL |         check_bound(x, self)\n    |         ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n+   = note: ...so that the type `Self` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "fe077499544048eb0399611dfc431ed06ffc3f81", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,18 +1,18 @@\n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:33:5\n    |\n+LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n+   |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'a`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n+LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n+   |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'a`...\n+   |     ^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d38d66c08853c44c3c5e40ac4971016ce5b92ebd", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.nll.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,6 +1,8 @@\n error[E0311]: the parameter type `T` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n    |\n+LL |   fn func<T: Test>(foo: &Foo, t: T) {\n+   |           -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n LL | /     foo.bar(move |_| {\n LL | |\n LL | |         t.test();\n@@ -12,6 +14,14 @@ note: the parameter type `T` must be valid for the anonymous lifetime defined he\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n    |                        ^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+   |\n+LL | /     foo.bar(move |_| {\n+LL | |\n+LL | |         t.test();\n+LL | |     });\n+   | |______^\n \n error: aborting due to previous error\n "}, {"sha": "4a18e0a4f8bbdae43586fa01289f3277e01df8f3", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -26,6 +26,9 @@ LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:32:5\n    |\n+LL |   fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |          - help: consider adding an explicit lifetime bound...: `G: 'a`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n@@ -36,10 +39,20 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                          ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:32:5\n+   |\n+LL | /     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:55:5\n    |\n+LL |   fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |              -- help: consider adding an explicit lifetime bound...: `G: 'b +`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n@@ -50,10 +63,20 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                  ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:55:5\n+   |\n+LL | /     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:65:9\n    |\n+LL |       fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                  -- help: consider adding an explicit lifetime bound...: `G: 'c +`\n+...\n LL | /         move || {\n LL | |             *dest = g.get();\n LL | |         }\n@@ -64,10 +87,20 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n    |                                               ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:65:9\n+   |\n+LL | /         move || {\n+LL | |             *dest = g.get();\n+LL | |         }\n+   | |_________^\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:77:5\n    |\n+LL |   fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+   |              -- help: consider adding an explicit lifetime bound...: `G: 'b +`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n@@ -78,6 +111,13 @@ note: the parameter type `G` must be valid for the anonymous lifetime defined he\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                  ^^^^^^\n+note: ...so that the type `G` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:77:5\n+   |\n+LL | /     move || {\n+LL | |         *dest = g.get();\n+LL | |     }\n+   | |_____^\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:77:5\n@@ -93,12 +133,13 @@ LL | |     }\n error[E0309]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:89:5\n    |\n+LL |   fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n+   |              - help: consider adding an explicit lifetime bound...: `G: 'a`\n+...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n-   | |_____^\n-   |\n-   = help: consider adding an explicit lifetime bound `G: 'a`...\n+   | |_____^ ...so that the type `G` will meet its required lifetime bounds\n \n error: aborting due to 8 previous errors\n "}, {"sha": "72354eaaee14722238109e763ec54448bcef449f", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -1,10 +1,11 @@\n error[E0310]: the parameter type `impl Debug` may not live long enough\n   --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n    |\n+LL | fn foo(d: impl Debug) {\n+   |           ---------- help: consider adding an explicit lifetime bound...: `impl Debug + 'static`\n+LL |\n LL |     bar(d);\n-   |     ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `impl Debug: 'static`...\n+   |     ^^^^^^ ...so that the type `impl Debug` will meet its required lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "a3b410c2cfb8c4946c53b40be46e6e828b4bf979", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aef9eb50cdeef69245eb2ffc402fec4011d28ac0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=aef9eb50cdeef69245eb2ffc402fec4011d28ac0", "patch": "@@ -19,10 +19,10 @@ LL | type WrongGeneric<T> = impl 'static;\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n+LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     t\n-   |     ^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n+   |     ^ ...so that the type `T` will meet its required lifetime bounds\n \n error: aborting due to 3 previous errors\n "}]}