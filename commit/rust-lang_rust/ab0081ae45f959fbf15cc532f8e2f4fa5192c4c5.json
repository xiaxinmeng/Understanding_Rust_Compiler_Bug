{"sha": "ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMDA4MWFlNDVmOTU5ZmJmMTVjYzUzMmY4ZTJmNGZhNTE5MmM0YzU=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-01-27T08:22:24Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-01-27T09:26:02Z"}, "message": "Fix PEP8 in snapshot.py", "tree": {"sha": "4b6bc8a7c80fbd2851f831d1a9bb1750c57b2338", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b6bc8a7c80fbd2851f831d1a9bb1750c57b2338"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5", "html_url": "https://github.com/rust-lang/rust/commit/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58d03ad95d2f02a693869faa1081091d6999cd93", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d03ad95d2f02a693869faa1081091d6999cd93", "html_url": "https://github.com/rust-lang/rust/commit/58d03ad95d2f02a693869faa1081091d6999cd93"}], "stats": {"total": 298, "additions": 161, "deletions": 137}, "files": [{"sha": "26246bd2c32a33b159355658be7ff87d64b7f5bf", "filename": "src/etc/get-snapshot.py", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5/src%2Fetc%2Fget-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5/src%2Fetc%2Fget-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-snapshot.py?ref=ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5", "patch": "@@ -10,9 +10,13 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-import os, tarfile, re, shutil, sys\n+import os\n+import tarfile\n+import shutil\n+import sys\n from snapshot import *\n \n+\n def unpack_snapshot(triple, dl_path):\n     print(\"opening snapshot \" + dl_path)\n     tar = tarfile.open(dl_path)\n@@ -29,14 +33,14 @@ def unpack_snapshot(triple, dl_path):\n             os.unlink(os.path.join(root, f))\n \n     for p in tar.getnames():\n-        name = p.replace(\"rust-stage0/\", \"\", 1);\n+        name = p.replace(\"rust-stage0/\", \"\", 1)\n \n         fp = os.path.join(stagep, name)\n         print(\"extracting \" + p)\n         tar.extract(p, download_unpack_base)\n         tp = os.path.join(download_unpack_base, p)\n         if os.path.isdir(tp) and os.path.exists(fp):\n-                continue\n+            continue\n         shutil.move(tp, fp)\n     tar.close()\n     shutil.rmtree(download_unpack_base)"}, {"sha": "a4234159cb81c9ee624df8b7e4b10aab01aa0788", "filename": "src/etc/mklldeps.py", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5", "patch": "@@ -11,8 +11,6 @@\n import os\n import sys\n import subprocess\n-import itertools\n-from os import path\n \n f = open(sys.argv[1], 'wb')\n \n@@ -35,6 +33,7 @@\n //          take a look at src/etc/mklldeps.py if you're interested\n \"\"\")\n \n+\n def run(args):\n     proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n     out, err = proc.communicate()"}, {"sha": "698c3a551e2a0736fd7d6550557e033fb0ab9a3a", "filename": "src/etc/snapshot.py", "status": "modified", "additions": 153, "deletions": 132, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5/src%2Fetc%2Fsnapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5/src%2Fetc%2Fsnapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fsnapshot.py?ref=ab0081ae45f959fbf15cc532f8e2f4fa5192c4c5", "patch": "@@ -8,79 +8,90 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-import re, os, sys, glob, tarfile, shutil, subprocess, tempfile, distutils.spawn\n+import re\n+import os\n+import sys\n+import glob\n+import tarfile\n+import shutil\n+import subprocess\n+import distutils.spawn\n \n try:\n-  import hashlib\n-  sha_func = hashlib.sha1\n+    import hashlib\n+    sha_func = hashlib.sha1\n except ImportError:\n-  import sha\n-  sha_func = sha.new\n+    import sha\n+    sha_func = sha.new\n+\n \n def scrub(b):\n-  if sys.version_info >= (3,) and type(b) == bytes:\n-    return b.decode('ascii')\n-  else:\n-    return b\n+    if sys.version_info >= (3,) and type(b) == bytes:\n+        return b.decode('ascii')\n+    else:\n+        return b\n \n src_dir = scrub(os.getenv(\"CFG_SRC_DIR\"))\n if not src_dir:\n-  raise Exception(\"missing env var CFG_SRC_DIR\")\n+    raise Exception(\"missing env var CFG_SRC_DIR\")\n \n snapshotfile = os.path.join(src_dir, \"src\", \"snapshots.txt\")\n download_url_base = \"https://static.rust-lang.org/stage0-snapshots\"\n download_dir_base = \"dl\"\n download_unpack_base = os.path.join(download_dir_base, \"unpack\")\n \n snapshot_files = {\n-    \"linux\": [\"bin/rustc\"],\n-    \"macos\": [\"bin/rustc\"],\n-    \"winnt\": [\"bin/rustc.exe\"],\n-    \"freebsd\": [\"bin/rustc\"],\n-    \"dragonfly\": [\"bin/rustc\"],\n-    }\n-\n-winnt_runtime_deps_32 = [\"libgcc_s_dw2-1.dll\",\n-                         \"libstdc++-6.dll\"]\n-winnt_runtime_deps_64 = [\"libgcc_s_seh-1.dll\",\n-                         \"libstdc++-6.dll\"]\n+        \"linux\": [\"bin/rustc\"],\n+        \"macos\": [\"bin/rustc\"],\n+        \"winnt\": [\"bin/rustc.exe\"],\n+        \"freebsd\": [\"bin/rustc\"],\n+        \"dragonfly\": [\"bin/rustc\"],\n+        }\n+\n+winnt_runtime_deps_32 = [\"libgcc_s_dw2-1.dll\", \"libstdc++-6.dll\"]\n+winnt_runtime_deps_64 = [\"libgcc_s_seh-1.dll\", \"libstdc++-6.dll\"]\n+\n \n def parse_line(n, line):\n-  global snapshotfile\n+    global snapshotfile\n \n-  if re.match(r\"\\s*$\", line): return None\n+    if re.match(r\"\\s*$\", line):\n+        return None\n \n-  if re.match(r\"^T\\s*$\", line): return None\n+    if re.match(r\"^T\\s*$\", line):\n+        return None\n \n-  match = re.match(r\"\\s+([\\w_-]+) ([a-fA-F\\d]{40})\\s*$\", line)\n-  if match:\n-    return { \"type\": \"file\",\n-             \"platform\": match.group(1),\n-             \"hash\": match.group(2).lower() }\n+    match = re.match(r\"\\s+([\\w_-]+) ([a-fA-F\\d]{40})\\s*$\", line)\n+    if match:\n+        return {\"type\": \"file\",\n+                \"platform\": match.group(1),\n+                \"hash\": match.group(2).lower()}\n \n-  match = re.match(r\"([ST]) (\\d{4}-\\d{2}-\\d{2}) ([a-fA-F\\d]+)\\s*$\", line);\n-  if (not match):\n-    raise Exception(\"%s:%d:E syntax error: \" % (snapshotfile, n))\n-  return {\"type\": \"snapshot\",\n-          \"date\": match.group(2),\n-          \"rev\": match.group(3)}\n+    match = re.match(r\"([ST]) (\\d{4}-\\d{2}-\\d{2}) ([a-fA-F\\d]+)\\s*$\", line)\n+    if not match:\n+        raise Exception(\"%s:%d:E syntax error: \" % (snapshotfile, n))\n+    return {\"type\": \"snapshot\",\n+            \"date\": match.group(2),\n+            \"rev\": match.group(3)}\n \n \n def partial_snapshot_name(date, rev, platform):\n-  return (\"rust-stage0-%s-%s-%s.tar.bz2\"\n-          % (date, rev, platform))\n+    return (\"rust-stage0-%s-%s-%s.tar.bz2\" %\n+            (date, rev, platform))\n+\n \n def full_snapshot_name(date, rev, platform, hsh):\n-  return (\"rust-stage0-%s-%s-%s-%s.tar.bz2\"\n-          % (date, rev, platform, hsh))\n+    return (\"rust-stage0-%s-%s-%s-%s.tar.bz2\" %\n+            (date, rev, platform, hsh))\n \n \n def get_kernel(triple):\n     t = triple.split('-')\n     if len(t) == 2:\n-      os_name = t[1]\n+        os_name = t[1]\n     else:\n-      os_name = t[2]\n+        os_name = t[2]\n+\n     if os_name == \"windows\":\n         return \"winnt\"\n     if os_name == \"darwin\":\n@@ -91,19 +102,20 @@ def get_kernel(triple):\n         return \"dragonfly\"\n     return \"linux\"\n \n+\n def get_cpu(triple):\n     arch = triple.split('-')[0]\n     if arch == \"i686\":\n-      return \"i386\"\n+        return \"i386\"\n     return arch\n \n+\n def get_platform(triple):\n-  return \"%s-%s\" % (get_kernel(triple), get_cpu(triple))\n+    return \"%s-%s\" % (get_kernel(triple), get_cpu(triple))\n \n \n def cmd_out(cmdline):\n-    p = subprocess.Popen(cmdline,\n-                         stdout=subprocess.PIPE)\n+    p = subprocess.Popen(cmdline, stdout=subprocess.PIPE)\n     return scrub(p.communicate()[0].strip())\n \n \n@@ -124,7 +136,8 @@ def local_rev_short_sha():\n def local_rev_committer_date():\n     return local_rev_info(\"ci\")\n \n-def get_url_to_file(u,f):\n+\n+def get_url_to_file(u, f):\n     # no security issue, just to stop partial download leaving a stale file\n     tmpf = f + '.tmp'\n \n@@ -137,40 +150,44 @@ def get_url_to_file(u,f):\n     if returncode != 0:\n         try:\n             os.unlink(tmpf)\n-        except OSError as e:\n+        except OSError:\n             pass\n         raise Exception(\"failed to fetch url\")\n     os.rename(tmpf, f)\n \n+\n def snap_filename_hash_part(snap):\n-  match = re.match(r\".*([a-fA-F\\d]{40}).tar.bz2$\", snap)\n-  if not match:\n-    raise Exception(\"unable to find hash in filename: \" + snap)\n-  return match.group(1)\n+    match = re.match(r\".*([a-fA-F\\d]{40}).tar.bz2$\", snap)\n+    if not match:\n+        raise Exception(\"unable to find hash in filename: \" + snap)\n+    return match.group(1)\n+\n \n def hash_file(x):\n     h = sha_func()\n     h.update(open(x, \"rb\").read())\n     return scrub(h.hexdigest())\n \n-# Returns a list of paths of Rust's system runtime dependencies\n+\n def get_winnt_runtime_deps(platform):\n+    \"\"\"Returns a list of paths of Rust's system runtime dependencies\"\"\"\n     if platform == \"winnt-x86_64\":\n-      deps = winnt_runtime_deps_64\n+        deps = winnt_runtime_deps_64\n     else:\n-      deps = winnt_runtime_deps_32\n+        deps = winnt_runtime_deps_32\n     runtime_deps = []\n     path_dirs = os.environ[\"PATH\"].split(os.pathsep)\n     for name in deps:\n-      for dir in path_dirs:\n-        filepath = os.path.join(dir, name)\n-        if os.path.isfile(filepath):\n-          runtime_deps.append(filepath)\n-          break\n-      else:\n-        raise Exception(\"Could not find runtime dependency: %s\" % name)\n+        for dir in path_dirs:\n+            filepath = os.path.join(dir, name)\n+            if os.path.isfile(filepath):\n+                runtime_deps.append(filepath)\n+                break\n+        else:\n+            raise Exception(\"Could not find runtime dependency: %s\" % name)\n     return runtime_deps\n \n+\n def make_snapshot(stage, triple):\n     kernel = get_kernel(triple)\n     platform = get_platform(triple)\n@@ -180,31 +197,31 @@ def make_snapshot(stage, triple):\n     file0 = partial_snapshot_name(date, rev, platform)\n \n     def in_tar_name(fn):\n-      cs = re.split(r\"[\\\\/]\", fn)\n-      if len(cs) >= 2:\n-        return os.sep.join(cs[-2:])\n+        cs = re.split(r\"[\\\\/]\", fn)\n+        if len(cs) >= 2:\n+            return os.sep.join(cs[-2:])\n \n     tar = tarfile.open(file0, \"w:bz2\")\n \n     for name in snapshot_files[kernel]:\n-      dir = stage\n-      if stage == \"stage1\" and re.match(r\"^lib/(lib)?std.*\", name):\n-        dir = \"stage0\"\n-      fn_glob = os.path.join(triple, dir, name)\n-      matches = glob.glob(fn_glob)\n-      if not matches:\n-        raise Exception(\"Not found file with name like \" + fn_glob)\n-      if len(matches) == 1:\n-        tar.add(matches[0], \"rust-stage0/\" + in_tar_name(matches[0]))\n-      else:\n-        raise Exception(\"Found stale files: \\n  %s\\n\"\n-                        \"Please make a clean build.\" % \"\\n  \".join(matches))\n-\n-    if kernel==\"winnt\":\n-      for path in get_winnt_runtime_deps(platform):\n-        tar.add(path, \"rust-stage0/bin/\" + os.path.basename(path))\n-      tar.add(os.path.join(os.path.dirname(__file__), \"third-party\"),\n-              \"rust-stage0/bin/third-party\")\n+        dir = stage\n+        if stage == \"stage1\" and re.match(r\"^lib/(lib)?std.*\", name):\n+            dir = \"stage0\"\n+        fn_glob = os.path.join(triple, dir, name)\n+        matches = glob.glob(fn_glob)\n+        if not matches:\n+            raise Exception(\"Not found file with name like \" + fn_glob)\n+        if len(matches) == 1:\n+            tar.add(matches[0], \"rust-stage0/\" + in_tar_name(matches[0]))\n+        else:\n+            raise Exception(\"Found stale files: \\n  %s\\n\"\n+                            \"Please make a clean build.\" % \"\\n  \".join(matches))\n+\n+    if kernel == \"winnt\":\n+        for path in get_winnt_runtime_deps(platform):\n+            tar.add(path, \"rust-stage0/bin/\" + os.path.basename(path))\n+        tar.add(os.path.join(os.path.dirname(__file__), \"third-party\"),\n+                \"rust-stage0/bin/third-party\")\n \n     tar.close()\n \n@@ -215,60 +232,64 @@ def in_tar_name(fn):\n \n     return file1\n \n+\n def curr_snapshot_rev():\n-  i = 0\n-  found_snap = False\n-  date = None\n-  rev = None\n+    i = 0\n+    found_snap = False\n+    date = None\n+    rev = None\n+\n+    f = open(snapshotfile)\n+    for line in f.readlines():\n+        i += 1\n+        parsed = parse_line(i, line)\n+        if not parsed:\n+            continue\n \n-  f = open(snapshotfile)\n-  for line in f.readlines():\n-    i += 1\n-    parsed = parse_line(i, line)\n-    if (not parsed): continue\n+        if parsed[\"type\"] == \"snapshot\":\n+            date = parsed[\"date\"]\n+            rev = parsed[\"rev\"]\n+            found_snap = True\n+            break\n \n-    if parsed[\"type\"] == \"snapshot\":\n-      date = parsed[\"date\"]\n-      rev = parsed[\"rev\"]\n-      found_snap = True\n-      break\n+    if not found_snap:\n+        raise Exception(\"no snapshot entries in file\")\n \n-  if not found_snap:\n-    raise Exception(\"no snapshot entries in file\")\n+    return (date, rev)\n \n-  return (date, rev)\n \n def determine_curr_snapshot(triple):\n-  i = 0\n-  platform = get_platform(triple)\n-\n-  found_file = False\n-  found_snap = False\n-  hsh = None\n-  date = None\n-  rev = None\n-\n-  f = open(snapshotfile)\n-  for line in f.readlines():\n-    i += 1\n-    parsed = parse_line(i, line)\n-    if (not parsed): continue\n-\n-    if found_snap and parsed[\"type\"] == \"file\":\n-      if parsed[\"platform\"] == platform:\n-        hsh = parsed[\"hash\"]\n-        found_file = True\n-        break;\n-    elif parsed[\"type\"] == \"snapshot\":\n-      date = parsed[\"date\"]\n-      rev = parsed[\"rev\"]\n-      found_snap = True\n-\n-  if not found_snap:\n-    raise Exception(\"no snapshot entries in file\")\n-\n-  if not found_file:\n-    raise Exception(\"no snapshot file found for platform %s, rev %s\" %\n-                    (platform, rev))\n-\n-  return full_snapshot_name(date, rev, platform, hsh)\n+    i = 0\n+    platform = get_platform(triple)\n+\n+    found_file = False\n+    found_snap = False\n+    hsh = None\n+    date = None\n+    rev = None\n+\n+    f = open(snapshotfile)\n+    for line in f.readlines():\n+        i += 1\n+        parsed = parse_line(i, line)\n+        if not parsed:\n+            continue\n+\n+        if found_snap and parsed[\"type\"] == \"file\":\n+            if parsed[\"platform\"] == platform:\n+                hsh = parsed[\"hash\"]\n+                found_file = True\n+                break\n+        elif parsed[\"type\"] == \"snapshot\":\n+            date = parsed[\"date\"]\n+            rev = parsed[\"rev\"]\n+            found_snap = True\n+\n+    if not found_snap:\n+        raise Exception(\"no snapshot entries in file\")\n+\n+    if not found_file:\n+        raise Exception(\"no snapshot file found for platform %s, rev %s\" %\n+                        (platform, rev))\n+\n+    return full_snapshot_name(date, rev, platform, hsh)"}]}