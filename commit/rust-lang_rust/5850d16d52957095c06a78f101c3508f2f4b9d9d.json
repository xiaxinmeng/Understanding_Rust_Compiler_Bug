{"sha": "5850d16d52957095c06a78f101c3508f2f4b9d9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NTBkMTZkNTI5NTcwOTVjMDZhNzhmMTAxYzM1MDhmMmY0YjlkOWQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-02-18T01:20:41Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-02-18T13:37:10Z"}, "message": "Remove unnecessary explicit lifetime bounds.\n\nThese explicit lifetimes can be ommitted because of lifetime elision\nrules. Instances were found using rust-clippy.", "tree": {"sha": "261ad88837d0e7cc565b47c3ccf1f652215e27df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/261ad88837d0e7cc565b47c3ccf1f652215e27df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5850d16d52957095c06a78f101c3508f2f4b9d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5850d16d52957095c06a78f101c3508f2f4b9d9d", "html_url": "https://github.com/rust-lang/rust/commit/5850d16d52957095c06a78f101c3508f2f4b9d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5850d16d52957095c06a78f101c3508f2f4b9d9d/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d3eebff9dc9474f56cdba810edde324130fbc61", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3eebff9dc9474f56cdba810edde324130fbc61", "html_url": "https://github.com/rust-lang/rust/commit/4d3eebff9dc9474f56cdba810edde324130fbc61"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "f11856d751391ef1edba3830b1872257e4a9ff21", "filename": "src/librustc_data_structures/graph/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fmod.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -115,7 +115,7 @@ impl<N:Debug,E:Debug> Graph<N,E> {\n     // Simple accessors\n \n     #[inline]\n-    pub fn all_nodes<'a>(&'a self) -> &'a [Node<N>] {\n+    pub fn all_nodes(&self) -> &[Node<N>] {\n         &self.nodes\n     }\n \n@@ -125,7 +125,7 @@ impl<N:Debug,E:Debug> Graph<N,E> {\n     }\n \n     #[inline]\n-    pub fn all_edges<'a>(&'a self) -> &'a [Edge<E>] {\n+    pub fn all_edges(&self) -> &[Edge<E>] {\n         &self.edges\n     }\n \n@@ -150,15 +150,15 @@ impl<N:Debug,E:Debug> Graph<N,E> {\n         idx\n     }\n \n-    pub fn mut_node_data<'a>(&'a mut self, idx: NodeIndex) -> &'a mut N {\n+    pub fn mut_node_data(&mut self, idx: NodeIndex) -> &mut N {\n         &mut self.nodes[idx.0].data\n     }\n \n-    pub fn node_data<'a>(&'a self, idx: NodeIndex) -> &'a N {\n+    pub fn node_data(&self, idx: NodeIndex) -> &N {\n         &self.nodes[idx.0].data\n     }\n \n-    pub fn node<'a>(&'a self, idx: NodeIndex) -> &'a Node<N> {\n+    pub fn node(&self, idx: NodeIndex) -> &Node<N> {\n         &self.nodes[idx.0]\n     }\n \n@@ -199,15 +199,15 @@ impl<N:Debug,E:Debug> Graph<N,E> {\n         return idx;\n     }\n \n-    pub fn mut_edge_data<'a>(&'a mut self, idx: EdgeIndex) -> &'a mut E {\n+    pub fn mut_edge_data(&mut self, idx: EdgeIndex) -> &mut E {\n         &mut self.edges[idx.0].data\n     }\n \n-    pub fn edge_data<'a>(&'a self, idx: EdgeIndex) -> &'a E {\n+    pub fn edge_data(&self, idx: EdgeIndex) -> &E {\n         &self.edges[idx.0].data\n     }\n \n-    pub fn edge<'a>(&'a self, idx: EdgeIndex) -> &'a Edge<E> {\n+    pub fn edge(&self, idx: EdgeIndex) -> &Edge<E> {\n         &self.edges[idx.0]\n     }\n \n@@ -257,11 +257,11 @@ impl<N:Debug,E:Debug> Graph<N,E> {\n         AdjacentEdges { graph: self, direction: direction, next: first_edge }\n     }\n \n-    pub fn successor_nodes<'a>(&'a self, source: NodeIndex) -> AdjacentTargets<N,E> {\n+    pub fn successor_nodes(&self, source: NodeIndex) -> AdjacentTargets<N,E> {\n         self.outgoing_edges(source).targets()\n     }\n \n-    pub fn predecessor_nodes<'a>(&'a self, target: NodeIndex) -> AdjacentSources<N,E> {\n+    pub fn predecessor_nodes(&self, target: NodeIndex) -> AdjacentSources<N,E> {\n         self.incoming_edges(target).sources()\n     }\n "}, {"sha": "5f89856afdbe33507cb5abb66ffb418dfd0eaf81", "filename": "src/librustc_data_structures/snapshot_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_data_structures%2Fsnapshot_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_data_structures%2Fsnapshot_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_vec.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -91,14 +91,14 @@ impl<D:SnapshotVecDelegate> SnapshotVec<D> {\n         len\n     }\n \n-    pub fn get<'a>(&'a self, index: usize) -> &'a D::Value {\n+    pub fn get(&self, index: usize) -> &D::Value {\n         &self.values[index]\n     }\n \n     /// Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\n     /// automatically, so you should be sure call `record()` with some sort of suitable undo\n     /// action.\n-    pub fn get_mut<'a>(&'a mut self, index: usize) -> &'a mut D::Value {\n+    pub fn get_mut(&mut self, index: usize) -> &mut D::Value {\n         &mut self.values[index]\n     }\n "}, {"sha": "dfaf39702372cd9ed3a53c02fd93631d9604ad5d", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -261,12 +261,12 @@ impl AttrBuilder {\n         }\n     }\n \n-    pub fn arg<'a, T: AttrHelper + 'static>(&'a mut self, idx: usize, a: T) -> &'a mut AttrBuilder {\n+    pub fn arg<T: AttrHelper + 'static>(&mut self, idx: usize, a: T) -> &mut AttrBuilder {\n         self.attrs.push((idx, box a as Box<AttrHelper+'static>));\n         self\n     }\n \n-    pub fn ret<'a, T: AttrHelper + 'static>(&'a mut self, a: T) -> &'a mut AttrBuilder {\n+    pub fn ret<T: AttrHelper + 'static>(&mut self, a: T) -> &mut AttrBuilder {\n         self.attrs.push((ReturnIndex as usize, box a as Box<AttrHelper+'static>));\n         self\n     }"}, {"sha": "d2d3e7cabd9b92562fba9d11c08737cdeff030b6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -1289,7 +1289,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                      span: Span,\n                                      lp: LastPrivate)\n                                      -> ResolveResult<(Module<'a>, LastPrivate)> {\n-        fn search_parent_externals<'a>(needle: Name, module: Module<'a>) -> Option<Module<'a>> {\n+        fn search_parent_externals(needle: Name, module: Module) -> Option<Module> {\n             match module.resolve_name(needle, TypeNS, false) {\n                 Success(binding) if binding.is_extern_crate() => Some(module),\n                 _ => match module.parent_link {\n@@ -3513,10 +3513,10 @@ fn path_names_to_string(path: &Path, depth: usize) -> String {\n }\n \n /// A somewhat inefficient routine to obtain the name of a module.\n-fn module_to_string<'a>(module: Module<'a>) -> String {\n+fn module_to_string(module: Module) -> String {\n     let mut names = Vec::new();\n \n-    fn collect_mod<'a>(names: &mut Vec<ast::Name>, module: Module<'a>) {\n+    fn collect_mod(names: &mut Vec<ast::Name>, module: Module) {\n         match module.parent_link {\n             NoParentLink => {}\n             ModuleParentLink(ref module, name) => {"}, {"sha": "9a6700ad47ce0d9df3ad250bdaec55c596f1c21b", "filename": "src/librustc_unicode/u_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_unicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibrustc_unicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fu_str.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -30,9 +30,9 @@ pub trait UnicodeStr {\n     fn split_whitespace<'a>(&'a self) -> SplitWhitespace<'a>;\n     fn is_whitespace(&self) -> bool;\n     fn is_alphanumeric(&self) -> bool;\n-    fn trim<'a>(&'a self) -> &'a str;\n-    fn trim_left<'a>(&'a self) -> &'a str;\n-    fn trim_right<'a>(&'a self) -> &'a str;\n+    fn trim(&self) -> &str;\n+    fn trim_left(&self) -> &str;\n+    fn trim_right(&self) -> &str;\n }\n \n impl UnicodeStr for str {"}, {"sha": "b95eddbc661dddfd3e453da8e8288e4e48896195", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -1227,7 +1227,7 @@ impl<'a> Index<&'a str>  for Json {\n impl Index<usize> for Json {\n     type Output = Json;\n \n-    fn index<'a>(&'a self, idx: usize) -> &'a Json {\n+    fn index(&self, idx: usize) -> &Json {\n         match *self {\n             Json::Array(ref v) => &v[idx],\n             _ => panic!(\"can only index Json with usize if it is an array\")\n@@ -1309,7 +1309,7 @@ impl Stack {\n     /// Provides access to the StackElement at a given index.\n     /// lower indices are at the bottom of the stack while higher indices are\n     /// at the top.\n-    pub fn get<'l>(&'l self, idx: usize) -> StackElement<'l> {\n+    pub fn get(&self, idx: usize) -> StackElement {\n         match self.stack[idx] {\n             InternalIndex(i) => StackElement::Index(i),\n             InternalKey(start, size) => {\n@@ -1351,7 +1351,7 @@ impl Stack {\n     }\n \n     /// Returns the top-most element (if any).\n-    pub fn top<'l>(&'l self) -> Option<StackElement<'l>> {\n+    pub fn top(&self) -> Option<StackElement> {\n         match self.stack.last() {\n             None => None,\n             Some(&InternalIndex(i)) => Some(StackElement::Index(i)),\n@@ -1463,7 +1463,7 @@ impl<T: Iterator<Item=char>> Parser<T> {\n \n     /// Provides access to the current position in the logical structure of the\n     /// JSON stream.\n-    pub fn stack<'l>(&'l self) -> &'l Stack {\n+    pub fn stack(&self) -> &Stack {\n         &self.stack\n     }\n "}, {"sha": "9487295fd1ad66f9079678f80684c3c8853b1827", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -403,10 +403,10 @@ enum Flavor<T> {\n #[doc(hidden)]\n trait UnsafeFlavor<T> {\n     fn inner_unsafe(&self) -> &UnsafeCell<Flavor<T>>;\n-    unsafe fn inner_mut<'a>(&'a self) -> &'a mut Flavor<T> {\n+    unsafe fn inner_mut(&self) -> &mut Flavor<T> {\n         &mut *self.inner_unsafe().get()\n     }\n-    unsafe fn inner<'a>(&'a self) -> &'a Flavor<T> {\n+    unsafe fn inner(&self) -> &Flavor<T> {\n         &*self.inner_unsafe().get()\n     }\n }"}, {"sha": "ae99fe817395f53a8b414344b27b486e347819cd", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -55,11 +55,11 @@ pub struct TtReader<'a> {\n /// This can do Macro-By-Example transcription. On the other hand, if\n /// `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n /// (and should) be None.\n-pub fn new_tt_reader<'a>(sp_diag: &'a Handler,\n-                         interp: Option<HashMap<Name, Rc<NamedMatch>>>,\n-                         imported_from: Option<Ident>,\n-                         src: Vec<ast::TokenTree>)\n-                         -> TtReader<'a> {\n+pub fn new_tt_reader(sp_diag: &Handler,\n+                     interp: Option<HashMap<Name, Rc<NamedMatch>>>,\n+                     imported_from: Option<Ident>,\n+                     src: Vec<ast::TokenTree>)\n+                     -> TtReader {\n     new_tt_reader_with_doc_flag(sp_diag, interp, imported_from, src, false)\n }\n \n@@ -69,12 +69,12 @@ pub fn new_tt_reader<'a>(sp_diag: &'a Handler,\n /// This can do Macro-By-Example transcription. On the other hand, if\n /// `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n /// (and should) be None.\n-pub fn new_tt_reader_with_doc_flag<'a>(sp_diag: &'a Handler,\n-                                       interp: Option<HashMap<Name, Rc<NamedMatch>>>,\n-                                       imported_from: Option<Ident>,\n-                                       src: Vec<ast::TokenTree>,\n-                                       desugar_doc_comments: bool)\n-                                       -> TtReader<'a> {\n+pub fn new_tt_reader_with_doc_flag(sp_diag: &Handler,\n+                                   interp: Option<HashMap<Name, Rc<NamedMatch>>>,\n+                                   imported_from: Option<Ident>,\n+                                   src: Vec<ast::TokenTree>,\n+                                   desugar_doc_comments: bool)\n+                                   -> TtReader {\n     let mut r = TtReader {\n         sp_diag: sp_diag,\n         stack: vec!(TtFrame {"}, {"sha": "01daa938142b149ba1ff0b9abc455b709281c1ee", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -211,10 +211,10 @@ pub trait Terminal: Write {\n     fn reset(&mut self) -> io::Result<bool>;\n \n     /// Gets an immutable reference to the stream inside\n-    fn get_ref<'a>(&'a self) -> &'a Self::Output;\n+    fn get_ref(&self) -> &Self::Output;\n \n     /// Gets a mutable reference to the stream inside\n-    fn get_mut<'a>(&'a mut self) -> &'a mut Self::Output;\n+    fn get_mut(&mut self) -> &mut Self::Output;\n \n     /// Returns the contained stream, destroying the `Terminal`\n     fn into_inner(self) -> Self::Output where Self: Sized;"}, {"sha": "e54f763fd0db795cd701365c9984212da16ffe27", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5850d16d52957095c06a78f101c3508f2f4b9d9d/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=5850d16d52957095c06a78f101c3508f2f4b9d9d", "patch": "@@ -205,11 +205,11 @@ impl<T: Write + Send> Terminal for TerminfoTerminal<T> {\n         self.out.write_all(&cmd).and(Ok(true))\n     }\n \n-    fn get_ref<'a>(&'a self) -> &'a T {\n+    fn get_ref(&self) -> &T {\n         &self.out\n     }\n \n-    fn get_mut<'a>(&'a mut self) -> &'a mut T {\n+    fn get_mut(&mut self) -> &mut T {\n         &mut self.out\n     }\n "}]}