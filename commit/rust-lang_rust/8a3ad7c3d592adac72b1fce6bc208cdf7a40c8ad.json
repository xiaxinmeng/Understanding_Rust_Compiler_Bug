{"sha": "8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "node_id": "C_kwDOAAsO6NoAKDhhM2FkN2MzZDU5MmFkYWM3MmIxZmNlNmJjMjA4Y2RmN2E0MGM4YWQ", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-20T22:50:30Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-20T22:50:30Z"}, "message": "Support evaluating inherent associated constants with generics", "tree": {"sha": "8f0df3b012a5cd1612f6adf4d2344b63e4e5266b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f0df3b012a5cd1612f6adf4d2344b63e4e5266b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "html_url": "https://github.com/rust-lang/rust/commit/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3303a6eff5f759d5bc6f9a2e891bddab0d1f21e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3303a6eff5f759d5bc6f9a2e891bddab0d1f21e7", "html_url": "https://github.com/rust-lang/rust/commit/3303a6eff5f759d5bc6f9a2e891bddab0d1f21e7"}], "stats": {"total": 55, "additions": 22, "deletions": 33}, "files": [{"sha": "7e69971fee789e5069790cfdddabb62dbf971fc2", "filename": "crates/hir-ty/src/consteval.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval.rs?ref=8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "patch": "@@ -15,7 +15,7 @@ use stdx::never;\n use crate::{\n     db::HirDatabase, infer::InferenceContext, layout::layout_of_ty, lower::ParamLoweringMode,\n     to_placeholder_idx, utils::Generics, Const, ConstData, ConstScalar, ConstValue, GenericArg,\n-    Interner, MemoryMap, Ty, TyBuilder,\n+    Interner, MemoryMap, Substitution, Ty, TyBuilder,\n };\n \n use super::mir::{interpret_mir, lower_to_mir, pad16, MirEvalError, MirLowerError};\n@@ -169,6 +169,7 @@ pub(crate) fn const_eval_recover(\n     _: &dyn HirDatabase,\n     _: &[String],\n     _: &ConstId,\n+    _: &Substitution,\n ) -> Result<Const, ConstEvalError> {\n     Err(ConstEvalError::MirLowerError(MirLowerError::Loop))\n }\n@@ -184,10 +185,11 @@ pub(crate) fn const_eval_discriminant_recover(\n pub(crate) fn const_eval_query(\n     db: &dyn HirDatabase,\n     const_id: ConstId,\n+    subst: Substitution,\n ) -> Result<Const, ConstEvalError> {\n     let def = const_id.into();\n     let body = db.mir_body(def)?;\n-    let c = interpret_mir(db, &body, false)?;\n+    let c = interpret_mir(db, &body, subst, false)?;\n     Ok(c)\n }\n \n@@ -210,7 +212,7 @@ pub(crate) fn const_eval_discriminant_variant(\n         return Ok(value);\n     }\n     let mir_body = db.mir_body(def)?;\n-    let c = interpret_mir(db, &mir_body, false)?;\n+    let c = interpret_mir(db, &mir_body, Substitution::empty(Interner), false)?;\n     let c = try_const_usize(&c).unwrap() as i128;\n     Ok(c)\n }\n@@ -234,7 +236,7 @@ pub(crate) fn eval_to_const(\n     }\n     let infer = ctx.clone().resolve_all();\n     if let Ok(mir_body) = lower_to_mir(ctx.db, ctx.owner, &ctx.body, &infer, expr) {\n-        if let Ok(result) = interpret_mir(db, &mir_body, true) {\n+        if let Ok(result) = interpret_mir(db, &mir_body, Substitution::empty(Interner), true) {\n             return result;\n         }\n     }"}, {"sha": "a0efc7541e3f5f9002378aaabed4d576b66e7824", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "patch": "@@ -1,4 +1,5 @@\n use base_db::fixture::WithFixture;\n+use chalk_ir::Substitution;\n use hir_def::db::DefDatabase;\n \n use crate::{\n@@ -64,7 +65,7 @@ fn eval_goal(ra_fixture: &str) -> Result<Const, ConstEvalError> {\n             _ => None,\n         })\n         .unwrap();\n-    db.const_eval(const_id)\n+    db.const_eval(const_id, Substitution::empty(Interner))\n }\n \n #[test]\n@@ -1519,16 +1520,15 @@ fn const_generic_subst_fn() {\n \n #[test]\n fn const_generic_subst_assoc_const_impl() {\n-    // FIXME: this should evaluate to 5\n-    check_fail(\n+    check_number(\n         r#\"\n     struct Adder<const N: usize, const M: usize>;\n     impl<const N: usize, const M: usize> Adder<N, M> {\n         const VAL: usize = N + M;\n     }\n     const GOAL: usize = Adder::<2, 3>::VAL;\n     \"#,\n-        ConstEvalError::MirEvalError(MirEvalError::TypeError(\"missing generic arg\")),\n+        5,\n     );\n }\n "}, {"sha": "000944e0b5b0d865e58de866afd454900629a4ad", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "patch": "@@ -57,7 +57,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n \n     #[salsa::invoke(crate::consteval::const_eval_query)]\n     #[salsa::cycle(crate::consteval::const_eval_recover)]\n-    fn const_eval(&self, def: ConstId) -> Result<Const, ConstEvalError>;\n+    fn const_eval(&self, def: ConstId, subst: Substitution) -> Result<Const, ConstEvalError>;\n \n     #[salsa::invoke(crate::consteval::const_eval_discriminant_variant)]\n     #[salsa::cycle(crate::consteval::const_eval_discriminant_recover)]"}, {"sha": "d52188bb284a2196893679e50ecba3ca3130d864", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "patch": "@@ -612,21 +612,6 @@ impl<'a> InferenceContext<'a> {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n                 self.resolve_associated_type(inner_ty, self.resolve_future_future_output())\n             }\n-            // Expr::Try { expr } => {\n-            //     let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n-            //     if let Some(trait_) = self.resolve_lang_trait(LangItem::Try) {\n-            //         if let Some(func) = self.db.trait_data(trait_).method_by_name(&name!(branch)) {\n-            //             let subst = TyBuilder::subst_for_def(self.db, trait_, None)\n-            //                 .push(inner_ty.clone())\n-            //                 .build();\n-            //             self.write_method_resolution(tgt_expr, func, subst.clone());\n-            //         }\n-            //         let try_output = self.resolve_output_on(trait_);\n-            //         self.resolve_associated_type(inner_ty, try_output)\n-            //     } else {\n-            //         self.err_ty()\n-            //     }\n-            // }\n             Expr::Cast { expr, type_ref } => {\n                 let cast_ty = self.make_ty(type_ref);\n                 // FIXME: propagate the \"castable to\" expectation"}, {"sha": "7b83645faef7d7193f935d96fa6eeb488dd24294", "filename": "crates/hir-ty/src/mir/eval.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs?ref=8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "patch": "@@ -282,6 +282,7 @@ struct Locals<'a> {\n pub fn interpret_mir(\n     db: &dyn HirDatabase,\n     body: &MirBody,\n+    subst: Substitution,\n     // FIXME: This is workaround. Ideally, const generics should have a separate body (issue #7434), but now\n     // they share their body with their parent, so in MIR lowering we have locals of the parent body, which\n     // might have placeholders. With this argument, we (wrongly) assume that every placeholder type has\n@@ -291,11 +292,11 @@ pub fn interpret_mir(\n ) -> Result<Const> {\n     let ty = body.locals[return_slot()].ty.clone();\n     let mut evaluator = Evaluator::new(db, body, assert_placeholder_ty_is_unused);\n-    let bytes = evaluator.interpret_mir_with_no_arg(&body)?;\n+    let bytes = evaluator.interpret_mir(&body, None.into_iter(), subst.clone())?;\n     let memory_map = evaluator.create_memory_map(\n         &bytes,\n         &ty,\n-        &Locals { ptr: &ArenaMap::new(), body: &body, subst: &Substitution::empty(Interner) },\n+        &Locals { ptr: &ArenaMap::new(), body: &body, subst: &subst },\n     )?;\n     return Ok(intern_const_scalar(ConstScalar::Bytes(bytes, memory_map), ty));\n }"}, {"sha": "1821796be33c16f3dcd069752f960efd3af5aec0", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "patch": "@@ -231,13 +231,13 @@ impl MirLowerCtx<'_> {\n                 let pr = match pr {\n                     ResolveValueResult::ValueNs(v) => v,\n                     ResolveValueResult::Partial(..) => {\n-                        if let Some(assoc) = self\n+                        if let Some((assoc, subst)) = self\n                             .infer\n                             .assoc_resolutions_for_expr(expr_id)\n                         {\n-                            match assoc.0 {\n+                            match assoc {\n                                 hir_def::AssocItemId::ConstId(c) => {\n-                                    self.lower_const(c, current, place, expr_id.into())?;\n+                                    self.lower_const(c, current, place, subst, expr_id.into())?;\n                                     return Ok(Some(current))\n                                 },\n                                 hir_def::AssocItemId::FunctionId(_) => {\n@@ -274,7 +274,7 @@ impl MirLowerCtx<'_> {\n                         Ok(Some(current))\n                     }\n                     ValueNs::ConstId(const_id) => {\n-                        self.lower_const(const_id, current, place, expr_id.into())?;\n+                        self.lower_const(const_id, current, place, Substitution::empty(Interner), expr_id.into())?;\n                         Ok(Some(current))\n                     }\n                     ValueNs::EnumVariantId(variant_id) => {\n@@ -951,9 +951,10 @@ impl MirLowerCtx<'_> {\n         const_id: hir_def::ConstId,\n         prev_block: BasicBlockId,\n         place: Place,\n+        subst: Substitution,\n         span: MirSpan,\n     ) -> Result<()> {\n-        let c = self.db.const_eval(const_id)?;\n+        let c = self.db.const_eval(const_id, subst)?;\n         self.write_const_to_place(c, prev_block, place, span)\n     }\n "}, {"sha": "dbf618afa6fedf2691fe309e1a22dd9e4090ed43", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8a3ad7c3d592adac72b1fce6bc208cdf7a40c8ad", "patch": "@@ -1801,7 +1801,7 @@ impl Function {\n         let body = db\n             .mir_body(self.id.into())\n             .map_err(|e| MirEvalError::MirLowerError(self.id.into(), e))?;\n-        interpret_mir(db, &body, false)?;\n+        interpret_mir(db, &body, Substitution::empty(Interner), false)?;\n         Ok(())\n     }\n }\n@@ -1947,7 +1947,7 @@ impl Const {\n     }\n \n     pub fn render_eval(self, db: &dyn HirDatabase) -> Result<String, ConstEvalError> {\n-        let c = db.const_eval(self.id)?;\n+        let c = db.const_eval(self.id, Substitution::empty(Interner))?;\n         let r = format!(\"{}\", HexifiedConst(c).display(db));\n         // We want to see things like `<utf8-error>` and `<layout-error>` as they are probably bug in our\n         // implementation, but there is no need to show things like `<enum-not-supported>` or `<ref-not-supported>` to"}]}