{"sha": "bccadeb4f7cbeeb14097a365653148afe8bbd159", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjY2FkZWI0ZjdjYmVlYjE0MDk3YTM2NTY1MzE0OGFmZThiYmQxNTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-08T10:07:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-08T10:07:22Z"}, "message": "Merge pull request #564 from solson/rustup\n\nSupport two-phase borrows, and other rustup", "tree": {"sha": "985d776d367752a24bb0ec785fa43b4821af0bfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/985d776d367752a24bb0ec785fa43b4821af0bfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bccadeb4f7cbeeb14097a365653148afe8bbd159", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcC5faCRBK7hj4Ov3rIwAAdHIIABV/cWAyAPcepNtcdAfPDlkP\nVE63zqA1+nW2+yRdHaa+rDiQa7WAj3Lzt8d8+RWr/8DwlwsF8bG4cD7lIUjVYlpi\nLA0o/3URWMGc5Y8BzgdfCfRvXxR/p9OVK94Jv/nOmNEGfzaaGQZzxY1YXe6CkCLf\nAWO0WtN1STPkqN7Mp+M4Wq5soszY42+8yVPDLMiqmIYK60t+CTaBL1rwOH/6HGQx\nUDL/tTNyrwZglwBSHCr4AwT+H97PR0ckUrMV14Psfz76hQkU3insZK+/tSpQyHTl\nRx0sD2VO/CWxnLENgAXox5fuMcDXD+tacFmPg+bz89/BnDcB9mCqknkpUReWx3A=\n=2lpR\n-----END PGP SIGNATURE-----\n", "payload": "tree 985d776d367752a24bb0ec785fa43b4821af0bfd\nparent 676204b9ca2f1e1b485465cff30d75b81fbc2a87\nparent 8d1e1179a17bc2aba017a5a16f0b42772032e00d\nauthor Ralf Jung <post@ralfj.de> 1544263642 +0100\ncommitter GitHub <noreply@github.com> 1544263642 +0100\n\nMerge pull request #564 from solson/rustup\n\nSupport two-phase borrows, and other rustup"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bccadeb4f7cbeeb14097a365653148afe8bbd159", "html_url": "https://github.com/rust-lang/rust/commit/bccadeb4f7cbeeb14097a365653148afe8bbd159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bccadeb4f7cbeeb14097a365653148afe8bbd159/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "676204b9ca2f1e1b485465cff30d75b81fbc2a87", "url": "https://api.github.com/repos/rust-lang/rust/commits/676204b9ca2f1e1b485465cff30d75b81fbc2a87", "html_url": "https://github.com/rust-lang/rust/commit/676204b9ca2f1e1b485465cff30d75b81fbc2a87"}, {"sha": "8d1e1179a17bc2aba017a5a16f0b42772032e00d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1e1179a17bc2aba017a5a16f0b42772032e00d", "html_url": "https://github.com/rust-lang/rust/commit/8d1e1179a17bc2aba017a5a16f0b42772032e00d"}], "stats": {"total": 121, "additions": 102, "deletions": 19}, "files": [{"sha": "c7df34eaf706d9e2836a2685a56e458a29878071", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bccadeb4f7cbeeb14097a365653148afe8bbd159/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccadeb4f7cbeeb14097a365653148afe8bbd159/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=bccadeb4f7cbeeb14097a365653148afe8bbd159", "patch": "@@ -47,7 +47,7 @@ pub fn run(filename: &str, bencher: &mut Bencher) {\n         let (entry_node_id, _, _) = state.session.entry_fn.borrow().expect(\n             \"no main or start function found\",\n         );\n-        let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n+        let entry_def_id = tcx.hir().local_def_id(entry_node_id);\n \n         bencher.borrow_mut().iter(|| {\n             eval_main(tcx, entry_def_id, false);"}, {"sha": "69d072f1bfa01597667b1d5b721f532dc52b68ca", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bccadeb4f7cbeeb14097a365653148afe8bbd159/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/bccadeb4f7cbeeb14097a365653148afe8bbd159/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=bccadeb4f7cbeeb14097a365653148afe8bbd159", "patch": "@@ -1 +1 @@\n-nightly-2018-12-03\n+nightly-2018-12-08"}, {"sha": "92d4237146dcf375bda214aee2e2f0d88a7b28ec", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bccadeb4f7cbeeb14097a365653148afe8bbd159/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccadeb4f7cbeeb14097a365653148afe8bbd159/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=bccadeb4f7cbeeb14097a365653148afe8bbd159", "patch": "@@ -93,7 +93,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n             fn visit_item(&mut self, i: &'hir hir::Item) {\n                 if let hir::ItemKind::Fn(.., body_id) = i.node {\n                     if i.attrs.iter().any(|attr| attr.name() == \"test\") {\n-                        let did = self.0.hir.body_owner_def_id(body_id);\n+                        let did = self.0.hir().body_owner_def_id(body_id);\n                         println!(\"running test: {}\", self.0.def_path_debug_str(did));\n                         miri::eval_main(self.0, did, /*validate*/true);\n                         self.1.session.abort_if_errors();\n@@ -105,7 +105,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         }\n         state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(tcx, state));\n     } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n-        let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n+        let entry_def_id = tcx.hir().local_def_id(entry_node_id);\n         miri::eval_main(tcx, entry_def_id, /*validate*/true);\n \n         state.session.abort_if_errors();"}, {"sha": "e88c13305d15425a9c19cc40a7ee0b0e544cf570", "filename": "src/bin/miri.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bccadeb4f7cbeeb14097a365653148afe8bbd159/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccadeb4f7cbeeb14097a365653148afe8bbd159/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=bccadeb4f7cbeeb14097a365653148afe8bbd159", "patch": "@@ -128,7 +128,7 @@ fn after_analysis<'a, 'tcx>(\n                         attr.name() == \"test\"\n                     })\n                     {\n-                        let did = self.tcx.hir.body_owner_def_id(body_id);\n+                        let did = self.tcx.hir().body_owner_def_id(body_id);\n                         println!(\n                             \"running test: {}\",\n                             self.tcx.def_path_debug_str(did),\n@@ -145,7 +145,7 @@ fn after_analysis<'a, 'tcx>(\n             &mut Visitor { tcx, state, validate }\n         );\n     } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n-        let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n+        let entry_def_id = tcx.hir().local_def_id(entry_node_id);\n         miri::eval_main(tcx, entry_def_id, validate);\n \n         state.session.abort_if_errors();"}, {"sha": "71abff2675e3cd856af4166ae7394cc79741ff2d", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bccadeb4f7cbeeb14097a365653148afe8bbd159/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccadeb4f7cbeeb14097a365653148afe8bbd159/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bccadeb4f7cbeeb14097a365653148afe8bbd159", "patch": "@@ -508,6 +508,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     fn retag(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         fn_entry: bool,\n+        two_phase: bool,\n         place: PlaceTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx> {\n         if !ecx.tcx.sess.opts.debugging_opts.mir_emit_retag || !Self::enforce_validity(ecx) {\n@@ -518,7 +519,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n             // uninitialized data.\n              Ok(())\n         } else {\n-            ecx.retag(fn_entry, place)\n+            ecx.retag(fn_entry, two_phase, place)\n         }\n     }\n "}, {"sha": "e9fb0aa7779751d9dc2ca7202998fafc0e6b264e", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bccadeb4f7cbeeb14097a365653148afe8bbd159/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccadeb4f7cbeeb14097a365653148afe8bbd159/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=bccadeb4f7cbeeb14097a365653148afe8bbd159", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::{Mutability, MutMutable, MutImmutable};\n use crate::{\n     EvalResult, EvalErrorKind, MiriEvalContext, HelpersEvalContextExt, Evaluator, MutValueVisitor,\n     MemoryKind, MiriMemoryKind, RangeMap, AllocId, Allocation, AllocationExtra,\n-    Pointer, MemPlace, Scalar, Immediate, ImmTy, PlaceTy, MPlaceTy,\n+    Pointer, Immediate, ImmTy, PlaceTy, MPlaceTy,\n };\n \n pub type Timestamp = u64;\n@@ -539,19 +539,21 @@ pub trait EvalContextExt<'tcx> {\n         size: Size,\n         fn_barrier: bool,\n         new_bor: Borrow\n-    ) -> EvalResult<'tcx, Pointer<Borrow>>;\n+    ) -> EvalResult<'tcx>;\n \n     /// Retag an indidual pointer, returning the retagged version.\n     fn retag_reference(\n         &mut self,\n         ptr: ImmTy<'tcx, Borrow>,\n         mutbl: Mutability,\n         fn_barrier: bool,\n+        two_phase: bool,\n     ) -> EvalResult<'tcx, Immediate<Borrow>>;\n \n     fn retag(\n         &mut self,\n         fn_entry: bool,\n+        two_phase: bool,\n         place: PlaceTy<'tcx, Borrow>\n     ) -> EvalResult<'tcx>;\n \n@@ -649,9 +651,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n         size: Size,\n         fn_barrier: bool,\n         new_bor: Borrow\n-    ) -> EvalResult<'tcx, Pointer<Borrow>> {\n+    ) -> EvalResult<'tcx> {\n         let ptr = place.ptr.to_ptr()?;\n-        let new_ptr = Pointer::new_with_tag(ptr.alloc_id, ptr.offset, new_bor);\n         let barrier = if fn_barrier { Some(self.frame().extra) } else { None };\n         trace!(\"reborrow: Creating new reference for {:?} (pointee {}): {:?}\",\n             ptr, place.layout.ty, new_bor);\n@@ -671,14 +672,15 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             let kind = if new_bor.is_unique() { RefKind::Unique } else { RefKind::Raw };\n             alloc.extra.reborrow(ptr, size, barrier, new_bor, kind)?;\n         }\n-        Ok(new_ptr)\n+        Ok(())\n     }\n \n     fn retag_reference(\n         &mut self,\n         val: ImmTy<'tcx, Borrow>,\n         mutbl: Mutability,\n         fn_barrier: bool,\n+        two_phase: bool,\n     ) -> EvalResult<'tcx, Immediate<Borrow>> {\n         // We want a place for where the ptr *points to*, so we get one.\n         let place = self.ref_to_mplace(val)?;\n@@ -698,16 +700,25 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n         };\n \n         // Reborrow.\n-        let new_ptr = self.reborrow(place, size, fn_barrier, new_bor)?;\n+        self.reborrow(place, size, fn_barrier, new_bor)?;\n+        let new_place = place.with_tag(new_bor);\n+        // Handle two-phase borrows.\n+        if two_phase {\n+            assert!(mutbl == MutMutable, \"two-phase shared borrows make no sense\");\n+            // We immediately share it, to allow read accesses\n+            let two_phase_time = self.machine.stacked_borrows.increment_clock();\n+            let two_phase_bor = Borrow::Shr(Some(two_phase_time));\n+            self.reborrow(new_place, size, /*fn_barrier*/false, two_phase_bor)?;\n+        }\n \n-        // Return new ptr\n-        let new_place = MemPlace { ptr: Scalar::Ptr(new_ptr), ..*place };\n+        // Return new ptr.\n         Ok(new_place.to_ref())\n     }\n \n     fn retag(\n         &mut self,\n         fn_entry: bool,\n+        two_phase: bool,\n         place: PlaceTy<'tcx, Borrow>\n     ) -> EvalResult<'tcx> {\n         // Determine mutability and whether to add a barrier.\n@@ -730,19 +741,20 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n         if let Some((mutbl, barrier)) = qualify(place.layout.ty, fn_entry) {\n             // fast path\n             let val = self.read_immediate(self.place_to_op(place)?)?;\n-            let val = self.retag_reference(val, mutbl, barrier)?;\n+            let val = self.retag_reference(val, mutbl, barrier, two_phase)?;\n             self.write_immediate(val, place)?;\n             return Ok(());\n         }\n         let place = self.force_allocation(place)?;\n \n-        let mut visitor = RetagVisitor { ecx: self, fn_entry };\n+        let mut visitor = RetagVisitor { ecx: self, fn_entry, two_phase };\n         visitor.visit_value(place)?;\n \n         // The actual visitor\n         struct RetagVisitor<'ecx, 'a, 'mir, 'tcx> {\n             ecx: &'ecx mut MiriEvalContext<'a, 'mir, 'tcx>,\n             fn_entry: bool,\n+            two_phase: bool,\n         }\n         impl<'ecx, 'a, 'mir, 'tcx>\n             MutValueVisitor<'a, 'mir, 'tcx, Evaluator<'tcx>>\n@@ -763,7 +775,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n                 // making it useless.\n                 if let Some((mutbl, barrier)) = qualify(place.layout.ty, self.fn_entry) {\n                     let val = self.ecx.read_immediate(place.into())?;\n-                    let val = self.ecx.retag_reference(val, mutbl, barrier)?;\n+                    let val = self.ecx.retag_reference(val, mutbl, barrier, self.two_phase)?;\n                     self.ecx.write_immediate(val, place.into())?;\n                 }\n                 Ok(())"}, {"sha": "f820b0e810b8384f7bcd14130ce04fc15b7ce48d", "filename": "tests/compile-fail/validity/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bccadeb4f7cbeeb14097a365653148afe8bbd159/tests%2Fcompile-fail%2Fvalidity%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccadeb4f7cbeeb14097a365653148afe8bbd159/tests%2Fcompile-fail%2Fvalidity%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fnonzero.rs?ref=bccadeb4f7cbeeb14097a365653148afe8bbd159", "patch": "@@ -7,5 +7,5 @@ pub(crate) struct NonZero<T>(pub(crate) T);\n \n fn main() {\n     // Make sure that we detect this even when no function call is happening along the way\n-    let _x = Some(NonZero(0)); //~ ERROR encountered 0, but expected something greater or equal to 1\n+    let _x = Some(unsafe { NonZero(0) }); //~ ERROR encountered 0, but expected something greater or equal to 1\n }"}, {"sha": "5b9e5d3ea5ff716ca4fd45af9bd4e05f7592ba86", "filename": "tests/run-pass/2phase.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/bccadeb4f7cbeeb14097a365653148afe8bbd159/tests%2Frun-pass%2F2phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccadeb4f7cbeeb14097a365653148afe8bbd159/tests%2Frun-pass%2F2phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2F2phase.rs?ref=bccadeb4f7cbeeb14097a365653148afe8bbd159", "patch": "@@ -0,0 +1,70 @@\n+#![feature(nll)]\n+\n+trait S: Sized {\n+    fn tpb(&mut self, _s: Self) {}\n+}\n+\n+impl S for i32 {}\n+\n+fn two_phase1() {\n+    let mut x = 3;\n+    x.tpb(x);\n+}\n+\n+fn two_phase2() {\n+    let mut v = vec![];\n+    v.push(v.len());\n+}\n+\n+/*\n+fn two_phase_overlapping1() {\n+    let mut x = vec![];\n+    let p = &x;\n+    x.push(p.len());\n+}\n+\n+fn two_phase_overlapping2() {\n+    use std::ops::AddAssign;\n+    let mut x = 1;\n+    let l = &x;\n+    x.add_assign(x + *l);\n+}\n+*/\n+\n+fn match_two_phase() {\n+    let mut x = 3;\n+    match x {\n+        ref mut y if { let _val = x; let _val = *y; true } => {},\n+        _ => (),\n+    }\n+}\n+\n+fn with_interior_mutability() {\n+    use std::cell::Cell;\n+\n+    trait Thing: Sized {\n+        fn do_the_thing(&mut self, _s: i32) {}\n+    }\n+\n+    impl<T> Thing for Cell<T> {}\n+\n+    let mut x = Cell::new(1);\n+    let l = &x;\n+    x\n+        .do_the_thing({\n+            x.set(3);\n+            l.set(4);\n+            x.get() + l.get()\n+        })\n+    ;\n+}\n+\n+fn main() {\n+    two_phase1();\n+    two_phase2();\n+    match_two_phase();\n+    with_interior_mutability();\n+    //FIXME: enable these, or remove them, depending on how https://github.com/rust-lang/rust/issues/56254 gets resolved\n+    //two_phase_overlapping1();\n+    //two_phase_overlapping2();\n+}"}]}