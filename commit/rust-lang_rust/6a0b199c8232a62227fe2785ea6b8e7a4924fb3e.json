{"sha": "6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "node_id": "C_kwDOAAsO6NoAKDZhMGIxOTljODIzMmE2MjIyN2ZlMjc4NWVhNmI4ZTdhNDkyNGZiM2U", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-21T09:04:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-21T09:04:40Z"}, "message": "Merge #11776\n\n11776: Replace write! with direct `Formatter` calls r=Veykril a=lnicola\n\nThe final executable is somehow larger (36 239 296 vs 36 238 336 bytes), but this saves us a bit of `text` and `data`:\r\n\r\n```\r\n   text\t   data\t    bss\t    dec\t    hex\tfilename\r\n23719199\t1126625\t   4377\t24850201\t17b2f19\trust-analyzer-baseline\r\n23716027\t1126377\t   4377\t24846781\t17b21bd\trust-analyzer-pr\r\n```\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "bff90d73e849b044ac515bf3998269cfc0c1ac74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bff90d73e849b044ac515bf3998269cfc0c1ac74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiOD+oCRBK7hj4Ov3rIwAArxQIADCDl0O47InD/yLOIKAlT+PJ\n0CA14UwbSF/rUC0B96dT7iQNHFT/Hq3bsY5hVYurneEuQxmrA60BRlWttML5+7Ap\nFjU+QDq8Qdx1LUT1kAWkotxOSQ4sxEo0EFArckEYJ0MchK9pKhchZYyUdgZYQ5Uh\nD3oz5MRsepjm5xakM1hES1i5+fAIr08Ai4IClFp4fOt1GmyukXU6k1dhHiB3ef5L\nOpk1m+lXLQxER+7cTjuWW0GdWzwEcar/V/uGwVA3EptWXyq+/NDBDeHth0EcMdYd\nOdnaZJqE5JW+bAhEjiwsL9ceUO6DAnBF4vCkUbkGLXXjBZ5PQ/eambfPpJPU3Ns=\n=Gijy\n-----END PGP SIGNATURE-----\n", "payload": "tree bff90d73e849b044ac515bf3998269cfc0c1ac74\nparent b594f9c441cf12319d10c14ba6a511d5c9db1b87\nparent 1a37b17162ab04b468eb514788d6bea7912f7c29\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647853480 +0000\ncommitter GitHub <noreply@github.com> 1647853480 +0000\n\nMerge #11776\n\n11776: Replace write! with direct `Formatter` calls r=Veykril a=lnicola\n\nThe final executable is somehow larger (36 239 296 vs 36 238 336 bytes), but this saves us a bit of `text` and `data`:\r\n\r\n```\r\n   text\t   data\t    bss\t    dec\t    hex\tfilename\r\n23719199\t1126625\t   4377\t24850201\t17b2f19\trust-analyzer-baseline\r\n23716027\t1126377\t   4377\t24846781\t17b21bd\trust-analyzer-pr\r\n```\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "html_url": "https://github.com/rust-lang/rust/commit/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b594f9c441cf12319d10c14ba6a511d5c9db1b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/b594f9c441cf12319d10c14ba6a511d5c9db1b87", "html_url": "https://github.com/rust-lang/rust/commit/b594f9c441cf12319d10c14ba6a511d5c9db1b87"}, {"sha": "1a37b17162ab04b468eb514788d6bea7912f7c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a37b17162ab04b468eb514788d6bea7912f7c29", "html_url": "https://github.com/rust-lang/rust/commit/1a37b17162ab04b468eb514788d6bea7912f7c29"}], "stats": {"total": 108, "additions": 59, "deletions": 49}, "files": [{"sha": "db3f85604ba423534ceacbe8ba23d89ed5dcfdd6", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -105,7 +105,7 @@ impl CrateName {\n \n impl fmt::Display for CrateName {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.0)\n+        self.0.fmt(f)\n     }\n }\n \n@@ -160,7 +160,7 @@ impl From<CrateName> for CrateDisplayName {\n \n impl fmt::Display for CrateDisplayName {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.crate_name)\n+        self.crate_name.fmt(f)\n     }\n }\n "}, {"sha": "5db5e5d3902f5893f6b3e1ef209e557dbd01bd1b", "filename": "crates/cfg/src/cfg_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fcfg_expr.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -43,7 +43,7 @@ impl CfgAtom {\n impl fmt::Display for CfgAtom {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            CfgAtom::Flag(name) => write!(f, \"{}\", name),\n+            CfgAtom::Flag(name) => name.fmt(f),\n             CfgAtom::KeyValue { key, value } => write!(f, \"{} = {:?}\", key, value),\n         }\n     }"}, {"sha": "fd80e1ebe683b155bca97f98ccab163c5d18a117", "filename": "crates/cfg/src/dnf.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fcfg%2Fsrc%2Fdnf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fcfg%2Fsrc%2Fdnf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fdnf.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -6,7 +6,7 @@\n //!\n //! This is currently both messy and inefficient. Feel free to improve, there are unit tests.\n \n-use std::fmt;\n+use std::fmt::{self, Write};\n \n use rustc_hash::FxHashSet;\n \n@@ -125,17 +125,17 @@ impl DnfExpr {\n impl fmt::Display for DnfExpr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if self.conjunctions.len() != 1 {\n-            write!(f, \"any(\")?;\n+            f.write_str(\"any(\")?;\n         }\n         for (i, conj) in self.conjunctions.iter().enumerate() {\n             if i != 0 {\n                 f.write_str(\", \")?;\n             }\n \n-            write!(f, \"{}\", conj)?;\n+            conj.fmt(f)?;\n         }\n         if self.conjunctions.len() != 1 {\n-            write!(f, \")\")?;\n+            f.write_char(')')?;\n         }\n \n         Ok(())\n@@ -165,17 +165,17 @@ impl Conjunction {\n impl fmt::Display for Conjunction {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if self.literals.len() != 1 {\n-            write!(f, \"all(\")?;\n+            f.write_str(\"all(\")?;\n         }\n         for (i, lit) in self.literals.iter().enumerate() {\n             if i != 0 {\n                 f.write_str(\", \")?;\n             }\n \n-            write!(f, \"{}\", lit)?;\n+            lit.fmt(f)?;\n         }\n         if self.literals.len() != 1 {\n-            write!(f, \")\")?;\n+            f.write_str(\")\")?;\n         }\n \n         Ok(())\n@@ -204,12 +204,12 @@ impl fmt::Display for Literal {\n         }\n \n         match &self.var {\n-            Some(var) => write!(f, \"{}\", var)?,\n+            Some(var) => var.fmt(f)?,\n             None => f.write_str(\"<invalid>\")?,\n         }\n \n         if self.negate {\n-            write!(f, \")\")?;\n+            f.write_char(')')?;\n         }\n \n         Ok(())"}, {"sha": "837b8d4c9248e1d050a8e32c4786e7d5f9bec2af", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -128,7 +128,7 @@ impl fmt::Display for CfgDiff {\n                 };\n                 f.write_str(sep)?;\n \n-                write!(f, \"{}\", atom)?;\n+                atom.fmt(f)?;\n             }\n \n             if !self.disable.is_empty() {\n@@ -146,7 +146,7 @@ impl fmt::Display for CfgDiff {\n                 };\n                 f.write_str(sep)?;\n \n-                write!(f, \"{}\", atom)?;\n+                atom.fmt(f)?;\n             }\n         }\n \n@@ -170,7 +170,7 @@ impl fmt::Display for InactiveReason {\n                 };\n                 f.write_str(sep)?;\n \n-                write!(f, \"{}\", atom)?;\n+                atom.fmt(f)?;\n             }\n             let is_are = if self.enabled.len() == 1 { \"is\" } else { \"are\" };\n             write!(f, \" {} enabled\", is_are)?;\n@@ -189,7 +189,7 @@ impl fmt::Display for InactiveReason {\n                 };\n                 f.write_str(sep)?;\n \n-                write!(f, \"{}\", atom)?;\n+                atom.fmt(f)?;\n             }\n             let is_are = if self.disabled.len() == 1 { \"is\" } else { \"are\" };\n             write!(f, \" {} disabled\", is_are)?;"}, {"sha": "c6c521f733a43a3578ba34783920ecc44392ed98", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -5,7 +5,7 @@ use hir_expand::{\n     name::{AsName, Name},\n     AstId, InFile,\n };\n-use std::convert::TryInto;\n+use std::{convert::TryInto, fmt::Write};\n use syntax::ast::{self, HasName};\n \n use crate::{body::LowerCtx, intern::Interned, path::Path};\n@@ -364,8 +364,8 @@ pub enum ConstScalarOrPath {\n impl std::fmt::Display for ConstScalarOrPath {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         match self {\n-            ConstScalarOrPath::Scalar(s) => write!(f, \"{}\", s),\n-            ConstScalarOrPath::Path(n) => write!(f, \"{}\", n),\n+            ConstScalarOrPath::Scalar(s) => s.fmt(f),\n+            ConstScalarOrPath::Path(n) => n.fmt(f),\n         }\n     }\n }\n@@ -425,10 +425,10 @@ pub enum ConstScalar {\n }\n \n impl std::fmt::Display for ConstScalar {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n         match self {\n-            ConstScalar::Usize(us) => write!(fmt, \"{}\", us),\n-            ConstScalar::Unknown => write!(fmt, \"_\"),\n+            ConstScalar::Usize(us) => us.fmt(f),\n+            ConstScalar::Unknown => f.write_char('_'),\n         }\n     }\n }"}, {"sha": "bb2f6350c677d65379ad12c0a9c0a8a73e122206", "filename": "crates/hir_expand/src/mod_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_expand%2Fsrc%2Fmod_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_expand%2Fsrc%2Fmod_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fmod_path.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -121,7 +121,7 @@ impl Display for ModPath {\n                 f.write_str(\"::\")?;\n             }\n             first_segment = false;\n-            write!(f, \"{}\", segment)?;\n+            segment.fmt(f)?;\n         }\n         Ok(())\n     }"}, {"sha": "1ba291528f0a0011794c88feb69949686a67ce6f", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -1,6 +1,10 @@\n //! Constant evaluation details\n \n-use std::{collections::HashMap, convert::TryInto, fmt::Display};\n+use std::{\n+    collections::HashMap,\n+    convert::TryInto,\n+    fmt::{Display, Write},\n+};\n \n use chalk_ir::{BoundVar, DebruijnIndex, GenericArgData, IntTy, Scalar};\n use hir_def::{\n@@ -79,28 +83,29 @@ impl Display for ComputedExpr {\n                     if *x >= 16 {\n                         write!(f, \"{} ({:#X})\", x, x)\n                     } else {\n-                        write!(f, \"{}\", x)\n+                        x.fmt(f)\n                     }\n                 }\n                 Literal::Uint(x, _) => {\n                     if *x >= 16 {\n                         write!(f, \"{} ({:#X})\", x, x)\n                     } else {\n-                        write!(f, \"{}\", x)\n+                        x.fmt(f)\n                     }\n                 }\n-                Literal::Float(x, _) => write!(f, \"{}\", x),\n-                Literal::Bool(x) => write!(f, \"{}\", x),\n-                Literal::Char(x) => write!(f, \"{:?}\", x),\n-                Literal::String(x) => write!(f, \"{:?}\", x),\n-                Literal::ByteString(x) => write!(f, \"{:?}\", x),\n+                Literal::Float(x, _) => x.fmt(f),\n+                Literal::Bool(x) => x.fmt(f),\n+                Literal::Char(x) => std::fmt::Debug::fmt(x, f),\n+                Literal::String(x) => std::fmt::Debug::fmt(x, f),\n+                Literal::ByteString(x) => std::fmt::Debug::fmt(x, f),\n             },\n             ComputedExpr::Tuple(t) => {\n-                write!(f, \"(\")?;\n+                f.write_char('(')?;\n                 for x in &**t {\n-                    write!(f, \"{}, \", x)?;\n+                    x.fmt(f)?;\n+                    f.write_str(\", \")?;\n                 }\n-                write!(f, \")\")\n+                f.write_char(')')\n             }\n         }\n     }"}, {"sha": "9e1f9340342cfa4aca33b3a33666f44d30b28c49", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -72,7 +72,7 @@ impl fmt::Display for CaseType {\n             CaseType::UpperCamelCase => \"CamelCase\",\n         };\n \n-        write!(f, \"{}\", repr)\n+        repr.fmt(f)\n     }\n }\n \n@@ -103,7 +103,7 @@ impl fmt::Display for IdentType {\n             IdentType::Variant => \"Variant\",\n         };\n \n-        write!(f, \"{}\", repr)\n+        repr.fmt(f)\n     }\n }\n "}, {"sha": "0600fd7c6d9359647e5eada5a5700269fd116f7b", "filename": "crates/hir_ty/src/tls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -1,5 +1,5 @@\n //! Implementation of Chalk debug helper functions using TLS.\n-use std::fmt;\n+use std::fmt::{self, Display};\n \n use itertools::Itertools;\n \n@@ -24,17 +24,17 @@ impl DebugContext<'_> {\n             AdtId::UnionId(it) => self.0.union_data(it).name.clone(),\n             AdtId::EnumId(it) => self.0.enum_data(it).name.clone(),\n         };\n-        write!(f, \"{}\", name)\n+        name.fmt(f)\n     }\n \n     pub(crate) fn debug_trait_id(\n         &self,\n         id: chalk_db::TraitId,\n-        fmt: &mut fmt::Formatter<'_>,\n+        f: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         let trait_: hir_def::TraitId = from_chalk_trait_id(id);\n         let trait_data = self.0.trait_data(trait_);\n-        write!(fmt, \"{}\", trait_data.name)\n+        trait_data.name.fmt(f)\n     }\n \n     pub(crate) fn debug_assoc_type_id("}, {"sha": "f4abee09312896b39353c15a43e4a35e8aa56341", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -38,8 +38,8 @@ pub enum TestId {\n impl fmt::Display for TestId {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self {\n-            TestId::Name(name) => write!(f, \"{}\", name),\n-            TestId::Path(path) => write!(f, \"{}\", path),\n+            TestId::Name(name) => name.fmt(f),\n+            TestId::Path(path) => path.fmt(f),\n         }\n     }\n }"}, {"sha": "b900dadcfa3c953094ebc57b31acd0b0d23ff14d", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -1,7 +1,10 @@\n //! Defines token tags we use for syntax highlighting.\n //! A tag is not unlike a CSS class.\n \n-use std::{fmt, ops};\n+use std::{\n+    fmt::{self, Write},\n+    ops,\n+};\n \n use ide_db::SymbolKind;\n \n@@ -254,9 +257,10 @@ impl fmt::Display for HlMod {\n \n impl fmt::Display for Highlight {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.tag)?;\n+        self.tag.fmt(f)?;\n         for modifier in self.mods.iter() {\n-            write!(f, \".{}\", modifier)?\n+            f.write_char('.')?;\n+            modifier.fmt(f)?;\n         }\n         Ok(())\n     }"}, {"sha": "eb7a28b972b0ec08d1d253aab8590f45fcd53ad7", "filename": "crates/proc_macro_api/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fproc_macro_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Flib.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -95,9 +95,10 @@ pub struct ServerError {\n \n impl fmt::Display for ServerError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", self.message)?;\n+        self.message.fmt(f)?;\n         if let Some(io) = &self.io {\n-            write!(f, \": {}\", io)?;\n+            f.write_str(\": \")?;\n+            io.fmt(f)?;\n         }\n         Ok(())\n     }"}, {"sha": "885fe1f1aa08c4a2571c961d96048e581457c656", "filename": "crates/profile/src/memory_usage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0b199c8232a62227fe2785ea6b8e7a4924fb3e/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Fmemory_usage.rs?ref=6a0b199c8232a62227fe2785ea6b8e7a4924fb3e", "patch": "@@ -11,8 +11,8 @@ pub struct MemoryUsage {\n }\n \n impl fmt::Display for MemoryUsage {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{}\", self.allocated)\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.allocated.fmt(f)\n     }\n }\n "}]}