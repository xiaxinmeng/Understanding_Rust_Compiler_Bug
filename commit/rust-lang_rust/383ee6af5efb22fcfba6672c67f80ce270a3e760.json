{"sha": "383ee6af5efb22fcfba6672c67f80ce270a3e760", "node_id": "C_kwDOAAsO6NoAKDM4M2VlNmFmNWVmYjIyZmNmYmE2NjcyYzY3ZjgwY2UyNzBhM2U3NjA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-05T09:54:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-05T09:54:46Z"}, "message": "internal: Update inert attribute list", "tree": {"sha": "10600b329587a29e1886785e3577a1c6189cc7f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10600b329587a29e1886785e3577a1c6189cc7f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/383ee6af5efb22fcfba6672c67f80ce270a3e760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/383ee6af5efb22fcfba6672c67f80ce270a3e760", "html_url": "https://github.com/rust-lang/rust/commit/383ee6af5efb22fcfba6672c67f80ce270a3e760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/383ee6af5efb22fcfba6672c67f80ce270a3e760/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed44fe52e4a730e4f892cde094fbba8ae8621589", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed44fe52e4a730e4f892cde094fbba8ae8621589", "html_url": "https://github.com/rust-lang/rust/commit/ed44fe52e4a730e4f892cde094fbba8ae8621589"}], "stats": {"total": 493, "additions": 319, "deletions": 174}, "files": [{"sha": "0e7ce5f85f96639f1ba3f962f26c621122653451", "filename": "crates/hir-def/src/builtin_attr.rs", "status": "modified", "additions": 319, "deletions": 174, "changes": 493, "blob_url": "https://github.com/rust-lang/rust/blob/383ee6af5efb22fcfba6672c67f80ce270a3e760/crates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/383ee6af5efb22fcfba6672c67f80ce270a3e760/crates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbuiltin_attr.rs?ref=383ee6af5efb22fcfba6672c67f80ce270a3e760", "patch": "@@ -2,7 +2,7 @@\n //!\n //! The actual definitions were copied from rustc's `compiler/rustc_feature/src/builtin_attrs.rs`.\n //!\n-//! It was last synchronized with upstream commit ae90dcf0207c57c3034f00b07048d63f8b2363c8.\n+//! It was last synchronized with upstream commit c1a2db3372a4d6896744919284f3287650a38ab7.\n //!\n //! The macros were adjusted to only expand to the attribute name, since that is all we need to do\n //! name resolution, and `BUILTIN_ATTRIBUTES` is almost entirely unchanged from the original, to\n@@ -66,26 +66,28 @@ macro_rules! template {\n }\n \n macro_rules! ungated {\n-    ($attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(, @only_local: $only_local:expr)? $(,)?) => {\n         BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n }\n \n macro_rules! gated {\n-    ($attr:ident, $typ:expr, $tpl:expr, $gate:ident, $msg:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(, @only_local: $only_local:expr)?, $gate:ident, $msg:expr $(,)?) => {\n         BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n-    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(, @only_local: $only_local:expr)?, $msg:expr $(,)?) => {\n         BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n }\n \n macro_rules! rustc_attr {\n-    (TEST, $attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n+    (TEST, $attr:ident, $typ:expr, $tpl:expr, $duplicate:expr $(, @only_local: $only_local:expr)? $(,)?) => {\n         rustc_attr!(\n             $attr,\n             $typ,\n             $tpl,\n+            $duplicate,\n+            $(@only_local: $only_local,)?\n             concat!(\n                 \"the `#[\",\n                 stringify!($attr),\n@@ -94,11 +96,18 @@ macro_rules! rustc_attr {\n             ),\n         )\n     };\n-    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(, @only_local: $only_local:expr)?, $msg:expr $(,)?) => {\n         BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n }\n \n+#[allow(unused_macros)]\n+macro_rules! experimental {\n+    ($attr:ident) => {\n+        concat!(\"the `#[\", stringify!($attr), \"]` attribute is an experimental feature\")\n+    };\n+}\n+\n /// \"Inert\" built-in attributes that have a special meaning to rustc or rustdoc.\n #[rustfmt::skip]\n pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n@@ -107,236 +116,294 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     // Conditional compilation:\n-    ungated!(cfg, Normal, template!(List: \"predicate\")),\n-    ungated!(cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\")),\n+    ungated!(cfg, Normal, template!(List: \"predicate\"), DuplicatesOk),\n+    ungated!(cfg_attr, Normal, template!(List: \"predicate, attr1, attr2, ...\"), DuplicatesOk),\n \n     // Testing:\n-    ungated!(ignore, Normal, template!(Word, NameValueStr: \"reason\")),\n+    ungated!(ignore, Normal, template!(Word, NameValueStr: \"reason\"), WarnFollowing),\n     ungated!(\n         should_panic, Normal,\n-        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n+        template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"), FutureWarnFollowing,\n     ),\n     // FIXME(Centril): This can be used on stable but shouldn't.\n-    ungated!(reexport_test_harness_main, Normal, template!(NameValueStr: \"name\")),\n+    ungated!(reexport_test_harness_main, CrateLevel, template!(NameValueStr: \"name\"), ErrorFollowing),\n \n     // Macros:\n-    ungated!(automatically_derived, Normal, template!(Word)),\n-    // FIXME(#14407)\n-    ungated!(macro_use, Normal, template!(Word, List: \"name1, name2, ...\")),\n-    ungated!(macro_escape, Normal, template!(Word)), // Deprecated synonym for `macro_use`.\n-    ungated!(macro_export, Normal, template!(Word, List: \"local_inner_macros\")),\n-    ungated!(proc_macro, Normal, template!(Word)),\n+    ungated!(automatically_derived, Normal, template!(Word), WarnFollowing),\n+    ungated!(macro_use, Normal, template!(Word, List: \"name1, name2, ...\"), WarnFollowingWordOnly),\n+    ungated!(macro_escape, Normal, template!(Word), WarnFollowing), // Deprecated synonym for `macro_use`.\n+    ungated!(macro_export, Normal, template!(Word, List: \"local_inner_macros\"), WarnFollowing),\n+    ungated!(proc_macro, Normal, template!(Word), ErrorFollowing),\n     ungated!(\n         proc_macro_derive, Normal,\n-        template!(List: \"TraitName, /*opt*/ attributes(name1, name2, ...)\"),\n+        template!(List: \"TraitName, /*opt*/ attributes(name1, name2, ...)\"), ErrorFollowing,\n     ),\n-    ungated!(proc_macro_attribute, Normal, template!(Word)),\n+    ungated!(proc_macro_attribute, Normal, template!(Word), ErrorFollowing),\n \n     // Lints:\n-    ungated!(warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n-    ungated!(allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n-    ungated!(forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n-    ungated!(deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n-    ungated!(must_use, AssumedUsed, template!(Word, NameValueStr: \"reason\")),\n-    // FIXME(#14407)\n+    ungated!(\n+        warn, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+    ),\n+    ungated!(\n+        allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+    ),\n+    gated!(\n+        expect, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk,\n+        lint_reasons, experimental!(expect)\n+    ),\n+    ungated!(\n+        forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+    ),\n+    ungated!(\n+        deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n+    ),\n+    ungated!(must_use, Normal, template!(Word, NameValueStr: \"reason\"), FutureWarnFollowing),\n+    gated!(\n+        must_not_suspend, Normal, template!(Word, NameValueStr: \"reason\"), WarnFollowing,\n+        experimental!(must_not_suspend)\n+    ),\n     ungated!(\n         deprecated, Normal,\n         template!(\n             Word,\n             List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"\"#,\n             NameValueStr: \"reason\"\n         ),\n+        ErrorFollowing\n     ),\n \n     // Crate properties:\n-    ungated!(crate_name, CrateLevel, template!(NameValueStr: \"name\")),\n-    ungated!(crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\")),\n-    ungated!(crate_id, CrateLevel, template!(NameValueStr: \"ignored\")),\n+    ungated!(crate_name, CrateLevel, template!(NameValueStr: \"name\"), FutureWarnFollowing),\n+    ungated!(crate_type, CrateLevel, template!(NameValueStr: \"bin|lib|...\"), DuplicatesOk),\n+    // crate_id is deprecated\n+    ungated!(crate_id, CrateLevel, template!(NameValueStr: \"ignored\"), FutureWarnFollowing),\n \n     // ABI, linking, symbols, and FFI\n     ungated!(\n-        link, AssumedUsed,\n+        link, Normal,\n         template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\"\"#),\n+        DuplicatesOk,\n     ),\n-    ungated!(link_name, AssumedUsed, template!(NameValueStr: \"name\")),\n-    ungated!(no_link, AssumedUsed, template!(Word)),\n-    ungated!(repr, AssumedUsed, template!(List: \"C\")),\n-    ungated!(export_name, AssumedUsed, template!(NameValueStr: \"name\")),\n-    ungated!(link_section, AssumedUsed, template!(NameValueStr: \"name\")),\n-    ungated!(no_mangle, AssumedUsed, template!(Word)),\n-    ungated!(used, AssumedUsed, template!(Word)),\n+    ungated!(link_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n+    ungated!(no_link, Normal, template!(Word), WarnFollowing),\n+    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk),\n+    ungated!(export_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n+    ungated!(link_section, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n+    ungated!(no_mangle, Normal, template!(Word), WarnFollowing, @only_local: true),\n+    ungated!(used, Normal, template!(Word, List: \"compiler|linker\"), WarnFollowing, @only_local: true),\n \n     // Limits:\n-    ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\")),\n-    ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\")),\n+    ungated!(recursion_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n+    ungated!(type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), FutureWarnFollowing),\n     gated!(\n-        const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), const_eval_limit,\n-        experimental!(const_eval_limit)\n+        const_eval_limit, CrateLevel, template!(NameValueStr: \"N\"), ErrorFollowing,\n+        const_eval_limit, experimental!(const_eval_limit)\n     ),\n     gated!(\n-        move_size_limit, CrateLevel, template!(NameValueStr: \"N\"), large_assignments,\n-        experimental!(move_size_limit)\n+        move_size_limit, CrateLevel, template!(NameValueStr: \"N\"), ErrorFollowing,\n+        large_assignments, experimental!(move_size_limit)\n     ),\n \n     // Entry point:\n-    ungated!(main, Normal, template!(Word)),\n-    ungated!(start, Normal, template!(Word)),\n-    ungated!(no_start, CrateLevel, template!(Word)),\n-    ungated!(no_main, CrateLevel, template!(Word)),\n+    ungated!(start, Normal, template!(Word), WarnFollowing),\n+    ungated!(no_start, CrateLevel, template!(Word), WarnFollowing),\n+    ungated!(no_main, CrateLevel, template!(Word), WarnFollowing),\n \n     // Modules, prelude, and resolution:\n-    ungated!(path, Normal, template!(NameValueStr: \"file\")),\n-    ungated!(no_std, CrateLevel, template!(Word)),\n-    ungated!(no_implicit_prelude, Normal, template!(Word)),\n-    ungated!(non_exhaustive, AssumedUsed, template!(Word)),\n+    ungated!(path, Normal, template!(NameValueStr: \"file\"), FutureWarnFollowing),\n+    ungated!(no_std, CrateLevel, template!(Word), WarnFollowing),\n+    ungated!(no_implicit_prelude, Normal, template!(Word), WarnFollowing),\n+    ungated!(non_exhaustive, Normal, template!(Word), WarnFollowing),\n \n     // Runtime\n-    ungated!(windows_subsystem, AssumedUsed, template!(NameValueStr: \"windows|console\")),\n-    ungated!(panic_handler, Normal, template!(Word)), // RFC 2070\n+    ungated!(\n+        windows_subsystem, CrateLevel,\n+        template!(NameValueStr: \"windows|console\"), FutureWarnFollowing\n+    ),\n+    ungated!(panic_handler, Normal, template!(Word), WarnFollowing), // RFC 2070\n \n     // Code generation:\n-    ungated!(inline, AssumedUsed, template!(Word, List: \"always|never\")),\n-    ungated!(cold, AssumedUsed, template!(Word)),\n-    ungated!(no_builtins, AssumedUsed, template!(Word)),\n-    ungated!(target_feature, AssumedUsed, template!(List: r#\"enable = \"name\"\"#)),\n-    ungated!(track_caller, AssumedUsed, template!(Word)),\n-    gated!(\n-        no_sanitize, AssumedUsed,\n-        template!(List: \"address, memory, thread\"),\n+    ungated!(inline, Normal, template!(Word, List: \"always|never\"), FutureWarnFollowing, @only_local: true),\n+    ungated!(cold, Normal, template!(Word), WarnFollowing, @only_local: true),\n+    ungated!(no_builtins, CrateLevel, template!(Word), WarnFollowing),\n+    ungated!(target_feature, Normal, template!(List: r#\"enable = \"name\"\"#), DuplicatesOk),\n+    ungated!(track_caller, Normal, template!(Word), WarnFollowing),\n+    gated!(\n+        no_sanitize, Normal,\n+        template!(List: \"address, memory, thread\"), DuplicatesOk,\n         experimental!(no_sanitize)\n     ),\n-    gated!(no_coverage, AssumedUsed, template!(Word), experimental!(no_coverage)),\n+    gated!(no_coverage, Normal, template!(Word), WarnFollowing, experimental!(no_coverage)),\n \n-    // FIXME: #14408 assume docs are used since rustdoc looks at them.\n-    ungated!(doc, AssumedUsed, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),\n+    ungated!(\n+        doc, Normal, template!(List: \"hidden|inline|...\", NameValueStr: \"string\"), DuplicatesOk\n+    ),\n \n     // ==========================================================================\n     // Unstable attributes:\n     // ==========================================================================\n \n+    // RFC #3191: #[debugger_visualizer] support\n+    gated!(\n+        debugger_visualizer, Normal, template!(List: r#\"natvis_file = \"...\", gdb_script_file = \"...\"\"#),\n+        DuplicatesOk, experimental!(debugger_visualizer)\n+    ),\n+\n     // Linking:\n-    gated!(naked, AssumedUsed, template!(Word), naked_functions, experimental!(naked)),\n+    gated!(naked, Normal, template!(Word), WarnFollowing, @only_local: true, naked_functions, experimental!(naked)),\n     gated!(\n-        link_ordinal, AssumedUsed, template!(List: \"ordinal\"), raw_dylib,\n+        link_ordinal, Normal, template!(List: \"ordinal\"), ErrorPreceding, raw_dylib,\n         experimental!(link_ordinal)\n     ),\n \n     // Plugins:\n     // XXX Modified for use in rust-analyzer\n-    gated!(plugin_registrar, Normal, template!(Word), experimental!()),\n-    gated!(plugin, CrateLevel, template!(Word), experimental!()),\n+    // BuiltinAttribute {\n+    //     name: sym::plugin,\n+    //     only_local: false,\n+    //     type_: CrateLevel,\n+    //     template: template!(List: \"name\"),\n+    //     duplicates: DuplicatesOk,\n+    //     gate: Gated(\n+    //         Stability::Deprecated(\n+    //             \"https://github.com/rust-lang/rust/pull/64675\",\n+    //             Some(\"may be removed in a future compiler version\"),\n+    //         ),\n+    //         sym::plugin,\n+    //         \"compiler plugins are deprecated\",\n+    //         cfg_fn!(plugin)\n+    //     ),\n+    // },\n+    BuiltinAttribute {\n+        name: \"plugin\",\n+        template: template!(List: \"name\"),\n+    },\n \n     // Testing:\n-    gated!(allow_fail, Normal, template!(Word), experimental!(allow_fail)),\n     gated!(\n-        test_runner, CrateLevel, template!(List: \"path\"), custom_test_frameworks,\n+        test_runner, CrateLevel, template!(List: \"path\"), ErrorFollowing, custom_test_frameworks,\n         \"custom test frameworks are an unstable feature\",\n     ),\n     // RFC #1268\n-    gated!(marker, AssumedUsed, template!(Word), marker_trait_attr, experimental!(marker)),\n     gated!(\n-        thread_local, AssumedUsed, template!(Word),\n+        marker, Normal, template!(Word), WarnFollowing, marker_trait_attr, experimental!(marker)\n+    ),\n+    gated!(\n+        thread_local, Normal, template!(Word), WarnFollowing,\n         \"`#[thread_local]` is an experimental feature, and does not currently handle destructors\",\n     ),\n-    gated!(no_core, CrateLevel, template!(Word), experimental!(no_core)),\n+    gated!(no_core, CrateLevel, template!(Word), WarnFollowing, experimental!(no_core)),\n     // RFC 2412\n     gated!(\n-        optimize, AssumedUsed, template!(List: \"size|speed\"), optimize_attribute,\n+        optimize, Normal, template!(List: \"size|speed\"), ErrorPreceding, optimize_attribute,\n         experimental!(optimize),\n     ),\n     // RFC 2867\n-    gated!(instruction_set, AssumedUsed, template!(List: \"set\"), isa_attribute, experimental!(instruction_set)),\n+    gated!(\n+        instruction_set, Normal, template!(List: \"set\"), ErrorPreceding,\n+        isa_attribute, experimental!(instruction_set)\n+    ),\n \n-    gated!(ffi_returns_twice, AssumedUsed, template!(Word), experimental!(ffi_returns_twice)),\n-    gated!(ffi_pure, AssumedUsed, template!(Word), experimental!(ffi_pure)),\n-    gated!(ffi_const, AssumedUsed, template!(Word), experimental!(ffi_const)),\n     gated!(\n-        register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"),\n+        ffi_returns_twice, Normal, template!(Word), WarnFollowing, experimental!(ffi_returns_twice)\n+    ),\n+    gated!(ffi_pure, Normal, template!(Word), WarnFollowing, experimental!(ffi_pure)),\n+    gated!(ffi_const, Normal, template!(Word), WarnFollowing, experimental!(ffi_const)),\n+    gated!(\n+        register_attr, CrateLevel, template!(List: \"attr1, attr2, ...\"), DuplicatesOk,\n         experimental!(register_attr),\n     ),\n     gated!(\n-        register_tool, CrateLevel, template!(List: \"tool1, tool2, ...\"),\n+        register_tool, CrateLevel, template!(List: \"tool1, tool2, ...\"), DuplicatesOk,\n         experimental!(register_tool),\n     ),\n \n-    gated!(cmse_nonsecure_entry, AssumedUsed, template!(Word), experimental!(cmse_nonsecure_entry)),\n+    gated!(\n+        cmse_nonsecure_entry, Normal, template!(Word), WarnFollowing,\n+        experimental!(cmse_nonsecure_entry)\n+    ),\n     // RFC 2632\n     gated!(\n-        default_method_body_is_const, AssumedUsed, template!(Word), const_trait_impl,\n-        \"`default_method_body_is_const` is a temporary placeholder for declaring default bodies \\\n-        as `const`, which may be removed or renamed in the future.\"\n+        const_trait, Normal, template!(Word), WarnFollowing, const_trait_impl,\n+        \"`const` is a temporary placeholder for marking a trait that is suitable for `const` \\\n+        `impls` and all default bodies as `const`, which may be removed or renamed in the \\\n+        future.\"\n+    ),\n+    // lang-team MCP 147\n+    gated!(\n+        deprecated_safe, Normal, template!(List: r#\"since = \"version\", note = \"...\"\"#), ErrorFollowing,\n+        experimental!(deprecated_safe),\n     ),\n \n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n     // ==========================================================================\n \n-    ungated!(feature, CrateLevel, template!(List: \"name1, name1, ...\")),\n-    // FIXME(#14407) -- only looked at on-demand so we can't\n-    // guarantee they'll have already been checked.\n-    // FIXME(jhpratt) remove this when #[rustc_deprecated] is fully removed from the compiler\n+    ungated!(feature, CrateLevel, template!(List: \"name1, name2, ...\"), DuplicatesOk),\n+    // DuplicatesOk since it has its own validation\n     ungated!(\n-        rustc_deprecated, AssumedUsed,\n-        template!(List: r#\"since = \"version\", reason = \"...\"\"#)\n+        stable, Normal, template!(List: r#\"feature = \"name\", since = \"version\"\"#), DuplicatesOk,\n     ),\n-    // FIXME(#14407)\n-    ungated!(stable, AssumedUsed, template!(List: r#\"feature = \"name\", since = \"version\"\"#)),\n-    // FIXME(#14407)\n     ungated!(\n-        unstable, AssumedUsed,\n-        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n+        unstable, Normal,\n+        template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#), DuplicatesOk,\n     ),\n-    // FIXME(#14407)\n-    ungated!(rustc_const_unstable, AssumedUsed, template!(List: r#\"feature = \"name\"\"#)),\n-    // FIXME(#14407)\n-    ungated!(rustc_const_stable, AssumedUsed, template!(List: r#\"feature = \"name\"\"#)),\n+    ungated!(rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n+    ungated!(rustc_const_stable, Normal, template!(List: r#\"feature = \"name\"\"#), DuplicatesOk),\n     gated!(\n-        allow_internal_unstable, AssumedUsed, template!(Word, List: \"feat1, feat2, ...\"),\n+        allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"), DuplicatesOk,\n         \"allow_internal_unstable side-steps feature gating and stability checks\",\n     ),\n     gated!(\n-        rustc_allow_const_fn_unstable, AssumedUsed, template!(Word, List: \"feat1, feat2, ...\"),\n+        rustc_allow_const_fn_unstable, Normal,\n+        template!(Word, List: \"feat1, feat2, ...\"), DuplicatesOk,\n         \"rustc_allow_const_fn_unstable side-steps feature gating and stability checks\"\n     ),\n     gated!(\n-        allow_internal_unsafe, Normal, template!(Word),\n+        allow_internal_unsafe, Normal, template!(Word), WarnFollowing,\n         \"allow_internal_unsafe side-steps the unsafe_code lint\",\n     ),\n \n     // ==========================================================================\n     // Internal attributes: Type system related:\n     // ==========================================================================\n \n-    gated!(fundamental, AssumedUsed, template!(Word), experimental!(fundamental)),\n+    gated!(fundamental, Normal, template!(Word), WarnFollowing, experimental!(fundamental)),\n     gated!(\n-        may_dangle, Normal, template!(Word), dropck_eyepatch,\n+        may_dangle, Normal, template!(Word), WarnFollowing, dropck_eyepatch,\n         \"`may_dangle` has unstable semantics and may be removed in the future\",\n     ),\n \n     // ==========================================================================\n     // Internal attributes: Runtime related:\n     // ==========================================================================\n \n-    rustc_attr!(rustc_allocator, AssumedUsed, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_allocator_nounwind, AssumedUsed, template!(Word), IMPL_DETAIL),\n-    gated!(alloc_error_handler, Normal, template!(Word), experimental!(alloc_error_handler)),\n+    rustc_attr!(rustc_allocator, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(rustc_allocator_nounwind, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n     gated!(\n-        default_lib_allocator, AssumedUsed, template!(Word), allocator_internals,\n+        alloc_error_handler, Normal, template!(Word), WarnFollowing,\n+        experimental!(alloc_error_handler)\n+    ),\n+    gated!(\n+        default_lib_allocator, Normal, template!(Word), WarnFollowing, allocator_internals,\n         experimental!(default_lib_allocator),\n     ),\n     gated!(\n-        needs_allocator, Normal, template!(Word), allocator_internals,\n+        needs_allocator, Normal, template!(Word), WarnFollowing, allocator_internals,\n         experimental!(needs_allocator),\n     ),\n-    gated!(panic_runtime, AssumedUsed, template!(Word), experimental!(panic_runtime)),\n-    gated!(needs_panic_runtime, AssumedUsed, template!(Word), experimental!(needs_panic_runtime)),\n+    gated!(panic_runtime, Normal, template!(Word), WarnFollowing, experimental!(panic_runtime)),\n+    gated!(\n+        needs_panic_runtime, Normal, template!(Word), WarnFollowing,\n+        experimental!(needs_panic_runtime)\n+    ),\n     gated!(\n-        compiler_builtins, AssumedUsed, template!(Word),\n+        compiler_builtins, Normal, template!(Word), WarnFollowing,\n         \"the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate \\\n         which contains compiler-rt intrinsics and will never be stable\",\n     ),\n     gated!(\n-        profiler_runtime, AssumedUsed, template!(Word),\n+        profiler_runtime, Normal, template!(Word), WarnFollowing,\n         \"the `#[profiler_runtime]` attribute is used to identify the `profiler_builtins` crate \\\n         which contains the profiler runtime and will never be stable\",\n     ),\n@@ -346,24 +413,26 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     gated!(\n-        linkage, AssumedUsed, template!(NameValueStr: \"external|internal|...\"),\n+        linkage, Normal, template!(NameValueStr: \"external|internal|...\"), ErrorPreceding, @only_local: true,\n         \"the `linkage` attribute is experimental and not portable across platforms\",\n     ),\n-    rustc_attr!(rustc_std_internal_symbol, AssumedUsed, template!(Word), INTERNAL_UNSTABLE),\n+    rustc_attr!(\n+        rustc_std_internal_symbol, Normal, template!(Word), WarnFollowing, @only_local: true, INTERNAL_UNSTABLE\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Macro related:\n     // ==========================================================================\n \n     rustc_attr!(\n-        rustc_builtin_macro, AssumedUsed,\n-        template!(Word, List: \"name, /*opt*/ attributes(name1, name2, ...)\"),\n+        rustc_builtin_macro, Normal,\n+        template!(Word, List: \"name, /*opt*/ attributes(name1, name2, ...)\"), ErrorFollowing,\n         IMPL_DETAIL,\n     ),\n-    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n     rustc_attr!(\n-        rustc_macro_transparency, AssumedUsed,\n-        template!(NameValueStr: \"transparent|semitransparent|opaque\"),\n+        rustc_macro_transparency, Normal,\n+        template!(NameValueStr: \"transparent|semitransparent|opaque\"), ErrorFollowing,\n         \"used internally for testing macro hygiene\",\n     ),\n \n@@ -372,138 +441,214 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ==========================================================================\n \n     rustc_attr!(\n-        rustc_on_unimplemented, AssumedUsed,\n+        rustc_on_unimplemented, Normal,\n         template!(\n             List: r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n             NameValueStr: \"message\"\n         ),\n+        ErrorFollowing,\n         INTERNAL_UNSTABLE\n     ),\n     // Enumerates \"identity-like\" conversion methods to suggest on type mismatch.\n-    rustc_attr!(rustc_conversion_suggestion, AssumedUsed, template!(Word), INTERNAL_UNSTABLE),\n+    rustc_attr!(\n+        rustc_conversion_suggestion, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE\n+    ),\n+    // Prevents field reads in the marked trait or method to be considered\n+    // during dead code analysis.\n+    rustc_attr!(\n+        rustc_trivial_field_reads, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE\n+    ),\n+    // Used by the `rustc::potential_query_instability` lint to warn methods which\n+    // might not be stable during incremental compilation.\n+    rustc_attr!(rustc_lint_query_instability, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n+    // Used by the `rustc::untranslatable_diagnostic` and `rustc::diagnostic_outside_of_impl` lints\n+    // to assist in changes to diagnostic APIs.\n+    rustc_attr!(rustc_lint_diagnostics, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:\n     // ==========================================================================\n \n-    rustc_attr!(rustc_promotable, AssumedUsed, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_legacy_const_generics, AssumedUsed, template!(List: \"N\"), INTERNAL_UNSTABLE),\n+    rustc_attr!(rustc_promotable, Normal, template!(Word), WarnFollowing, IMPL_DETAIL),\n+    rustc_attr!(\n+        rustc_legacy_const_generics, Normal, template!(List: \"N\"), ErrorFollowing,\n+        INTERNAL_UNSTABLE\n+    ),\n+    // Do not const-check this function's body. It will always get replaced during CTFE.\n+    rustc_attr!(\n+        rustc_do_not_const_check, Normal, template!(Word), WarnFollowing, INTERNAL_UNSTABLE\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Layout related:\n     // ==========================================================================\n \n     rustc_attr!(\n-        rustc_layout_scalar_valid_range_start, AssumedUsed, template!(List: \"value\"),\n+        rustc_layout_scalar_valid_range_start, Normal, template!(List: \"value\"), ErrorFollowing,\n         \"the `#[rustc_layout_scalar_valid_range_start]` attribute is just used to enable \\\n-        niche optimizations in libcore and will never be stable\",\n+        niche optimizations in libcore and libstd and will never be stable\",\n     ),\n     rustc_attr!(\n-        rustc_layout_scalar_valid_range_end, AssumedUsed, template!(List: \"value\"),\n+        rustc_layout_scalar_valid_range_end, Normal, template!(List: \"value\"), ErrorFollowing,\n         \"the `#[rustc_layout_scalar_valid_range_end]` attribute is just used to enable \\\n-        niche optimizations in libcore and will never be stable\",\n+        niche optimizations in libcore and libstd and will never be stable\",\n     ),\n     rustc_attr!(\n-        rustc_nonnull_optimization_guaranteed, AssumedUsed, template!(Word),\n+        rustc_nonnull_optimization_guaranteed, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_nonnull_optimization_guaranteed]` attribute is just used to enable \\\n-        niche optimizations in libcore and will never be stable\",\n+        niche optimizations in libcore and libstd and will never be stable\",\n     ),\n \n     // ==========================================================================\n     // Internal attributes, Misc:\n     // ==========================================================================\n     gated!(\n-        lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n+        lang, Normal, template!(NameValueStr: \"name\"), DuplicatesOk, @only_local: true, lang_items,\n         \"language items are subject to change\",\n     ),\n-    gated!(rustc_diagnostic_item, Normal, template!(NameValueStr: \"name\"), experimental!()), // XXX Modified for use in rust-analyzer\n+    rustc_attr!(\n+        rustc_pass_by_value, Normal,\n+        template!(Word), ErrorFollowing,\n+        \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n+    ),\n+    rustc_attr!(\n+        rustc_coherence_is_core, AttributeType::CrateLevel, template!(Word), ErrorFollowing, @only_local: true,\n+        \"#![rustc_coherence_is_core] allows inherent methods on builtin types, only intended to be used in `core`.\"\n+    ),\n+    rustc_attr!(\n+        rustc_allow_incoherent_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: true,\n+        \"#[rustc_allow_incoherent_impl] has to be added to all impl items of an incoherent inherent impl.\"\n+    ),\n+    rustc_attr!(\n+        rustc_has_incoherent_inherent_impls, AttributeType::Normal, template!(Word), ErrorFollowing,\n+        \"#[rustc_has_incoherent_inherent_impls] allows the addition of incoherent inherent impls for \\\n+         the given type by annotating all impl items with #[rustc_allow_incoherent_impl].\"\n+    ),\n+    rustc_attr!(\n+        rustc_box, AttributeType::Normal, template!(Word), ErrorFollowing,\n+        \"#[rustc_box] allows creating boxes \\\n+        and it is only intended to be used in `alloc`.\"\n+    ),\n+\n+    // modified for r-a\n+    // BuiltinAttribute {\n+    //     name: sym::rustc_diagnostic_item,\n+    //     // FIXME: This can be `true` once we always use `tcx.is_diagnostic_item`.\n+    //     only_local: false,\n+    //     type_: Normal,\n+    //     template: template!(NameValueStr: \"name\"),\n+    //     duplicates: ErrorFollowing,\n+    //     gate: Gated(\n+    //         Stability::Unstable,\n+    //         sym::rustc_attrs,\n+    //         \"diagnostic items compiler internal support for linting\",\n+    //         cfg_fn!(rustc_attrs),\n+    //     ),\n+    // },\n+    BuiltinAttribute {\n+        name: \"rustc_diagnostic_item\",\n+        template: template!(NameValueStr: \"name\"),\n+    },\n     gated!(\n         // Used in resolve:\n-        prelude_import, AssumedUsed, template!(Word),\n+        prelude_import, Normal, template!(Word), WarnFollowing,\n         \"`#[prelude_import]` is for use by rustc only\",\n     ),\n     gated!(\n-        rustc_paren_sugar, Normal, template!(Word), unboxed_closures,\n+        rustc_paren_sugar, Normal, template!(Word), WarnFollowing, unboxed_closures,\n         \"unboxed_closures are still evolving\",\n     ),\n     rustc_attr!(\n-        rustc_inherit_overflow_checks, AssumedUsed, template!(Word),\n+        rustc_inherit_overflow_checks, Normal, template!(Word), WarnFollowing, @only_local: true,\n         \"the `#[rustc_inherit_overflow_checks]` attribute is just used to control \\\n         overflow checking behavior of several libcore functions that are inlined \\\n         across crates and will never be stable\",\n     ),\n-    rustc_attr!(rustc_reservation_impl, Normal, template!(NameValueStr: \"reservation message\"),\n-                \"the `#[rustc_reservation_impl]` attribute is internally used \\\n-                 for reserving for `for<T> From<!> for T` impl\"\n+    rustc_attr!(\n+        rustc_reservation_impl, Normal,\n+        template!(NameValueStr: \"reservation message\"), ErrorFollowing,\n+        \"the `#[rustc_reservation_impl]` attribute is internally used \\\n+         for reserving for `for<T> From<!> for T` impl\"\n     ),\n     rustc_attr!(\n-        rustc_test_marker, Normal, template!(Word),\n+        rustc_test_marker, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_test_marker]` attribute is used internally to track tests\",\n     ),\n     rustc_attr!(\n-        rustc_unsafe_specialization_marker, Normal, template!(Word),\n+        rustc_unsafe_specialization_marker, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_unsafe_specialization_marker]` attribute is used to check specializations\"\n     ),\n     rustc_attr!(\n-        rustc_specialization_trait, Normal, template!(Word),\n+        rustc_specialization_trait, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_specialization_trait]` attribute is used to check specializations\"\n     ),\n     rustc_attr!(\n-        rustc_main, Normal, template!(Word),\n+        rustc_main, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_main]` attribute is used internally to specify test entry point function\",\n     ),\n     rustc_attr!(\n-        rustc_skip_array_during_method_dispatch, Normal, template!(Word),\n+        rustc_skip_array_during_method_dispatch, Normal, template!(Word), WarnFollowing,\n         \"the `#[rustc_skip_array_during_method_dispatch]` attribute is used to exclude a trait \\\n         from method dispatch when the receiver is an array, for compatibility in editions < 2021.\"\n     ),\n+    rustc_attr!(\n+        rustc_must_implement_one_of, Normal, template!(List: \"function1, function2, ...\"), ErrorFollowing,\n+        \"the `#[rustc_must_implement_one_of]` attribute is used to change minimal complete \\\n+        definition of a trait, it's currently in experimental form and should be changed before \\\n+        being exposed outside of the std\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Testing:\n     // ==========================================================================\n \n-    rustc_attr!(TEST, rustc_outlives, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_variance, Normal, template!(Word)),\n-    rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\")),\n-    rustc_attr!(TEST, rustc_regions, Normal, template!(Word)),\n+    rustc_attr!(TEST, rustc_outlives, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_strict_coherence, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_variance, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_layout, Normal, template!(List: \"field1, field2, ...\"), WarnFollowing),\n+    rustc_attr!(TEST, rustc_regions, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(\n+        TEST, rustc_error, Normal,\n+        template!(Word, List: \"delay_span_bug_from_inside_query\"), WarnFollowingWordOnly\n+    ),\n+    rustc_attr!(TEST, rustc_dump_user_substs, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_evaluate_where_clauses, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(\n+        TEST, rustc_if_this_changed, Normal, template!(Word, List: \"DepNode\"), DuplicatesOk\n+    ),\n     rustc_attr!(\n-        TEST, rustc_error, AssumedUsed,\n-        template!(Word, List: \"delay_span_bug_from_inside_query\")\n+        TEST, rustc_then_this_would_need, Normal, template!(List: \"DepNode\"), DuplicatesOk\n     ),\n-    rustc_attr!(TEST, rustc_dump_user_substs, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_evaluate_where_clauses, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_if_this_changed, AssumedUsed, template!(Word, List: \"DepNode\")),\n-    rustc_attr!(TEST, rustc_then_this_would_need, AssumedUsed, template!(List: \"DepNode\")),\n     rustc_attr!(\n-        TEST, rustc_clean, AssumedUsed,\n+        TEST, rustc_clean, Normal,\n         template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\", /*opt*/ except = \"...\"\"#),\n+        DuplicatesOk,\n     ),\n     rustc_attr!(\n-        TEST, rustc_partition_reused, AssumedUsed,\n-        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+        TEST, rustc_partition_reused, Normal,\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#), DuplicatesOk,\n     ),\n     rustc_attr!(\n-        TEST, rustc_partition_codegened, AssumedUsed,\n-        template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+        TEST, rustc_partition_codegened, Normal,\n+        template!(List: r#\"cfg = \"...\", module = \"...\"\"#), DuplicatesOk,\n     ),\n     rustc_attr!(\n-        TEST, rustc_expected_cgu_reuse, AssumedUsed,\n-        template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#),\n-    ),\n-    rustc_attr!(TEST, rustc_synthetic, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_symbol_name, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_polymorphize_error, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_def_path, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_mir, AssumedUsed, template!(List: \"arg1, arg2, ...\")),\n-    rustc_attr!(TEST, rustc_dump_program_clauses, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_dump_env_program_clauses, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_object_lifetime_default, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_dump_vtable, AssumedUsed, template!(Word)),\n-    rustc_attr!(TEST, rustc_dummy, Normal, template!(Word /* doesn't matter*/)),\n-    gated!(\n-        omit_gdb_pretty_printer_section, AssumedUsed, template!(Word),\n+        TEST, rustc_expected_cgu_reuse, Normal,\n+        template!(List: r#\"cfg = \"...\", module = \"...\", kind = \"...\"\"#), DuplicatesOk,\n+    ),\n+    rustc_attr!(TEST, rustc_symbol_name, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_polymorphize_error, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_def_path, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_mir, Normal, template!(List: \"arg1, arg2, ...\"), DuplicatesOk),\n+    rustc_attr!(TEST, rustc_dump_program_clauses, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_dump_env_program_clauses, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_object_lifetime_default, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_dump_vtable, Normal, template!(Word), WarnFollowing),\n+    rustc_attr!(TEST, rustc_dummy, Normal, template!(Word /* doesn't matter*/), DuplicatesOk),\n+    gated!(\n+        omit_gdb_pretty_printer_section, Normal, template!(Word), WarnFollowing,\n         \"the `#[omit_gdb_pretty_printer_section]` attribute is just used for the Rust test suite\",\n     ),\n ];"}]}