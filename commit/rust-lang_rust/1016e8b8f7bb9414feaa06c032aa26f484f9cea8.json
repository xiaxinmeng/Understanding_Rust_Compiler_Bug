{"sha": "1016e8b8f7bb9414feaa06c032aa26f484f9cea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMTZlOGI4ZjdiYjk0MTRmZWFhMDZjMDMyYWEyNmY0ODRmOWNlYTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-05T09:50:23Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-08-07T13:17:52Z"}, "message": "testsuite: remove 2 very outdated testcases; functionality is tested by other class-*.rs tests.\n\nFixes #7305, #7307.", "tree": {"sha": "e5e208c4da71b9396f279163427f3b3e3c83aa3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5e208c4da71b9396f279163427f3b3e3c83aa3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1016e8b8f7bb9414feaa06c032aa26f484f9cea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1016e8b8f7bb9414feaa06c032aa26f484f9cea8", "html_url": "https://github.com/rust-lang/rust/commit/1016e8b8f7bb9414feaa06c032aa26f484f9cea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1016e8b8f7bb9414feaa06c032aa26f484f9cea8/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c57fde2b5f336a2364aaa6246f987adfe179834b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c57fde2b5f336a2364aaa6246f987adfe179834b", "html_url": "https://github.com/rust-lang/rust/commit/c57fde2b5f336a2364aaa6246f987adfe179834b"}], "stats": {"total": 212, "additions": 0, "deletions": 212}, "files": [{"sha": "93e9eac1dd9dfb621bf1e76df52a5769d403ac30", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/c57fde2b5f336a2364aaa6246f987adfe179834b/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57fde2b5f336a2364aaa6246f987adfe179834b/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=c57fde2b5f336a2364aaa6246f987adfe179834b", "patch": "@@ -1,83 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test FIXME #7307\n-// xfail-fast\n-\n-extern mod extra;\n-use extra::oldmap::*;\n-\n-class cat : map<int, bool> {\n-  priv {\n-    // Yes, you can have negative meows\n-    let mut meows : int;\n-    fn meow() {\n-      self.meows += 1;\n-      error!(\"Meow %d\", self.meows);\n-      if self.meows % 5 == 0 {\n-          self.how_hungry += 1;\n-      }\n-    }\n-  }\n-\n-  let mut how_hungry : int;\n-  let name : str;\n-\n-  new(in_x : int, in_y : int, in_name: str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n-  fn speak() { self.meow(); }\n-\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n-    }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n-    }\n-  }\n-\n-  fn size() -> uint { self.meows as uint }\n-  fn insert(+k: int, +v: bool) -> bool {\n-    if v { self.meows += k; } else { self.meows -= k; };\n-    true\n-  }\n-  fn contains_key(&&k: int) -> bool { k <= self.meows }\n-  fn get(&&k:int) -> bool { k <= self.meows }\n-  fn [](&&k:int) -> bool { k <= self.meows }\n-  fn find(&&k:int) -> Option<bool> { Some(self.get(k)) }\n-  fn remove(&&k:int) -> Option<bool> { self.meows -= k; Some(true) }\n-  fn each(f: &fn(&&int, &&bool) -> bool) {\n-    let mut n = num::abs(self.meows);\n-    while n > 0 {\n-        if !f(n, true) { break; }\n-        n -= 1;\n-    }\n-  }\n-  fn each_key(&&f: &fn(&&int) -> bool) {\n-    for self.each |k, _v| { if !f(k) { break; } again;};\n-  }\n-  fn each_value(&&f: &fn(&&bool) -> bool) {\n-    for self.each |_k, v| { if !f(v) { break; } again;};\n-  }\n-  fn clear() { }\n-}\n-\n-pub fn main() {\n-  let nyan : cat = cat(0, 2, \"nyan\");\n-  for _ in range(1u, 5u) { nyan.speak(); }\n-  // cat returns true if uint input is greater than\n-  // the number of meows so far\n-  assert!((nyan.get(1)));\n-  assert!((!nyan.get(10)));\n-}"}, {"sha": "4fccc45a75335cea0e23c96e9959cef68ecdf634", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "removed", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/c57fde2b5f336a2364aaa6246f987adfe179834b/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c57fde2b5f336a2364aaa6246f987adfe179834b/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=c57fde2b5f336a2364aaa6246f987adfe179834b", "patch": "@@ -1,129 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test FIXME #7305\n-\n-extern mod extra;\n-use extra::oldmap::*;\n-use vec::*;\n-use dvec::{dvec, extensions};\n-\n-enum furniture { chair, couch, bed }\n-enum body_part { finger, toe, nose, ear }\n-\n-trait noisy {\n-  fn speak() -> int;\n-}\n-\n-trait scratchy {\n-  fn scratch() -> Option<furniture>;\n-}\n-\n-trait bitey {\n-  fn bite() -> body_part;\n-}\n-\n-fn vec_includes<T>(xs: ~[T], x: T) -> bool {\n-  for each(xs) |y| { if y == x { return true; }}\n-  return false;\n-}\n-\n-// vtables other than the 1st one don't seem to work\n-class cat : noisy, scratchy, bitey {\n-  priv {\n-    let meows : @mut uint;\n-    let scratched : dvec<furniture>;\n-    let bite_counts : hashmap<body_part, uint>;\n-\n-    fn meow() -> uint {\n-      info!(\"Meow: %u\", *self.meows);\n-      *self.meows += 1u;\n-      if *self.meows % 5u == 0u {\n-          *self.how_hungry += 1;\n-      }\n-      *self.meows\n-    }\n-  }\n-\n-  let how_hungry : @mut int;\n-  let name : str;\n-\n-  new(in_x : uint, in_y : int, in_name: str)\n-    { self.meows = @mut in_x; self.how_hungry = @mut in_y;\n-      self.name = in_name; self.scratched = dvec();\n-      let hsher: hashfn<body_part> = |p| int::hash(p as int);\n-      let eqer : eqfn<body_part> = |p, q| p == q;\n-      let t : hashmap<body_part, uint> =\n-        hashmap::<body_part, uint>(hsher, eqer);\n-      self.bite_counts = t;\n-     do iter(~[finger, toe, nose, ear]) |p| {\n-          self.bite_counts.insert(p, 0u);\n-      };\n-    }\n-\n-  fn speak() -> int { self.meow() as int }\n-  fn meow_count() -> uint { *self.meows }\n-  fn scratch() -> Option<furniture> {\n-    let all = ~[chair, couch, bed];\n-    log(error, self.scratched);\n-    let mut rslt = None;\n-    for each(all) |thing| { if !self.scratched.contains(thing) {\n-          self.scratched.push(thing);\n-          return Some(thing); }}\n-    rslt\n-  }\n-  fn bite() -> body_part {\n-    error!(\"In bite()\");\n-    let all = ~[toe, nose, ear];\n-    let mut min = finger;\n-    do iter(all) |next| {\n-      info!(\"min = %?\", min);\n-        if self.bite_counts.get(next) < self.bite_counts.get(min) {\n-            min = next;\n-          }};\n-    self.bite_counts.insert(min, self.bite_counts.get(min) + 1u);\n-    info!(\"Bit %?\", min);\n-    min\n-  }\n-}\n-\n-fn annoy_neighbors<T:noisy>(critter: T) {\n-  for i in range(0u, 10u) {\n-      let what = critter.speak();\n-      info!(\"%u %d\", i, what);\n-  }\n-}\n-\n-fn bite_everything<T:bitey>(critter: T) -> bool {\n-  let mut left : ~[body_part] = ~[finger, toe, nose, ear];\n-  while left.len() > 0u {\n-    let part = critter.bite();\n-    info!(\"%? %?\", left, part);\n-    if vec_includes(left, part) {\n-        left = vec::filter(left, |p| p != part );\n-    }\n-    else {\n-      return false;\n-    }\n-  }\n-  true\n-}\n-\n-fn scratched_something<T:scratchy>(critter: T) -> bool {\n-  option::is_some(critter.scratch())\n-}\n-\n-pub fn main() {\n-  let nyan : cat  = cat(0u, 2, \"nyan\");\n-  annoy_neighbors(nyan as noisy);\n-  assert_eq!(nyan.meow_count(), 10u);\n-  assert!((bite_everything(nyan as bitey)));\n-  assert!((scratched_something(nyan as scratchy)));\n-}"}]}